<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPostingForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventPostingForm
{
    boolean                 called;

    InventPostingItemCode   itemCode;
    ItemId                  itemNum;
    ItemGroupId             itemGroup;
    InventCategoryRelation  itemCategory;
    TableGroupAll           accountCode;
    CustVendAC              account;
    CustVendGroupId         groupId;
    CostGroupId             costGroupId;
    CostGroupType           costGroupType;
    TableGroupAll           costCode;

    CustParameters          custParameters;
    VendParameters          vendParameters;

    boolean                 commissionFlag;

    Common                  callerRecord;

    InventProfileTypeAll_RU inventProfileTypeAll;
    InventProfileType_RU    inventProfileType;
    InventProfileId_RU      inventProfileId;
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costCodeRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the range that is used to filter the cost relation based on the data source that called.
    /// </summary>
    /// <returns>
    ///    A range for the <c>CostCode</c> field and the <c>CostRelation</c> field in the <c>InventPosting</c>
    ///    table.
    /// </returns>
    /// <remarks>
    ///    The range selects records that match the <c>CostGroupId</c> field and the <c>CostGroupType</c>
    ///    field of the calling buffer that has these fields; otherwise this range matches all records.
    /// </remarks>
    protected str costCodeRange()
    {
        str range;

        // Create a range which selects the records that match the calling buffer with a 'Table' match, 'Group' match, or 'All' match.
        // However, if the code is 'All' then this range does not apply.
        switch (costCode)
        {
            case TableGroupAll::Table:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                        fieldStr(InventPosting,CostCode),
                        enum2int(TableGroupAll::Table),
                        fieldStr(InventPosting, CostRelation),
                        costGroupId);
                // Fall through
            case TableGroupAll::GroupId:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                        fieldStr(InventPosting,CostCode),
                        enum2int(TableGroupAll::GroupId),
                        fieldStr(InventPosting, CostRelation),
                        enum2int(costGroupType));

                // If filtering records for a specific buffer then also include the records that match through
                // the 'All' code. (This range part is included here instead of the next case since that
                // is only used when the range in this method does not apply).
                range =  strFmt('( %1 (%2 == %3))',
                        range,
                        fieldStr(InventPosting,CostCode),
                        enum2int(TableGroupAll::All));
                break;
            case TableGroupAll::All:
                // If code is 'All' then this range does not apply.
                break;
        }
        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendCodeRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the range that is used to filter the value of the <c>CustVendRelation</c> field based on
    ///    the calling data source.
    /// </summary>
    /// <returns>
    ///    A range for the <c>CostCode</c> field and the <c>CustVendRelation</c> field on the
    ///    <c>InventPosting</c> table.
    /// </returns>
    /// <remarks>
    ///    The range selects records that match the <c>account</c> field and the <c>groupId</c> field of the
    ///    calling buffer that has these fields; otherwise, this range matches all records.
    /// </remarks>
    protected str custVendCodeRange()
    {
        str range;

        // Create a range which selects the records that match the calling buffer with a 'Table' match, 'Group' match, or 'All' match.
        // However, if the code is 'All' then this range does not apply.
        switch (accountCode)
        {
            case TableGroupAll::Table:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldStr(InventPosting, CustVendCode),
                    enum2int(TableGroupAll::Table),
                    fieldStr(InventPosting, CustVendRelation),
                    account);
                // Fall through
            case TableGroupAll::GroupId:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldStr(InventPosting, CustVendCode),
                    enum2int(TableGroupAll::GroupId),
                    fieldStr(InventPosting, CustVendRelation),
                    groupId);

                // If filtering records for a specific buffer then also include the records that match through
                // the 'All' code. (This range part is included here instead of the next case since that
                // is only used when the range in this method does not apply).
                range =  strFmt('( %1 (%2 == %3))',
                    range,
                    fieldStr(InventPosting, CustVendCode),
                    enum2int(TableGroupAll::All));
                break;
            case TableGroupAll::All:
                // If code is 'All' then this range does not apply.
                break;
        }
        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the fields in a record in the <c>InventPosting</c> table.
    /// </summary>
    /// <param name="_inventPosting">
    ///    A record in the <c>InventPosting</c> table.
    /// </param>
    /// <param name="_inventAccountType">
    /// The current selected account type.
    /// </param>
    void initFields(InventPosting _inventPosting, InventAccountType _inventAccountType)
    {
        _inventPosting.InventAccountType = _inventAccountType;

        if (called)
        {
            switch (itemCode)
            {
                case InventPostingItemCode::Table   :
                    _inventPosting.ItemRelation = itemNum;
                    break;
                case InventPostingItemCode::GroupId:
                    _inventPosting.ItemRelation = itemGroup;
                    break;
                case InventPostingItemCode::Category:
                    _inventPosting.CategoryRelation = itemCategory;
                    break;
            }
            _inventPosting.ItemCode = itemCode;

            if (! _inventPosting.mayOnlyAccountCodeAllBeSet())
            {
                switch (accountCode)
                {
                    case TableGroupAll::Table   :
                        _inventPosting.CustVendRelation= account;
                        break;
                    case TableGroupAll::GroupId:
                        _inventPosting.CustVendRelation= groupId;
                        break;
                }
                _inventPosting.CustVendCode= accountCode;
            }
            if (_inventPosting.InventAccountType != InventAccountType::InventStdCostRoundingVariance)
            {
                switch (costCode)
                {
                    case TableGroupAll::Table:
                        _inventPosting.CostRelation = costGroupId;
                        break;
                    case TableGroupAll::GroupId:
                        _inventPosting.CostRelation = strFmt('%1', costGroupType);
                        break;
                }
                _inventPosting.CostCode = costCode;
            }
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                switch (inventProfileTypeAll)
                {
                    case InventProfileTypeAll_RU::Profile:
                        _inventPosting.InventProfileId_RU   = inventProfileId;
                        break;
                    case InventProfileTypeAll_RU::Type:
                        _inventPosting.InventProfileType_RU = inventProfileType;
                        break;
                }
                _inventPosting.InventProfileTypeAll_RU = inventProfileTypeAll;
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileTypeRange_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the range used to filter the ProfileType relation based on the calling data source.
    /// </summary>
    /// <returns>
    /// A range for the <c>InventProfileTypeAll_RU</c>, <c>InventProfileType_RU</c> and <c>InventProfileId_RU</c> fields on the <c>InventPosting</c> table.
    /// </returns>
    /// <remarks>
    /// The range selects records that match the <c>inventProfileId</c> and <c>inventProfileType</c> fields of the calling buffer if it has these fields;
    /// otherwise this range matches all records.
    /// </remarks>
    protected str inventProfileTypeRange_RU()
    {
        str range;

        switch (inventProfileTypeAll)
        {
            case InventProfileTypeAll_RU::Profile:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                        fieldStr(InventPosting, InventProfileTypeAll_RU),
                        enum2int(InventProfileTypeAll_RU::Profile),
                        fieldStr(InventPosting, InventProfileId_RU),
                        inventProfileId);
            case InventProfileTypeAll_RU::Type:
                range += strFmt('((%1 == %2) && (%3 == %4)) || ',
                        fieldStr(InventPosting, InventProfileTypeAll_RU),
                        enum2int(InventProfileTypeAll_RU::Type),
                        fieldStr(InventPosting, InventProfileType_RU),
                        enum2int(inventProfileType));

                range =  strFmt('( %1 (%2 == %3))',
                        range,
                        fieldStr(InventPosting, InventProfileTypeAll_RU),
                        enum2int(InventProfileTypeAll_RU::All));
                break;
            case InventProfileTypeAll_RU::All:
                break;
        }
        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemCodeRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the range that is used to filter the item relation based on the calling data source.
    /// </summary>
    /// <returns>
    ///    A range for the <c>ItemCode</c> field and the <c>ItemRelation</c> field in the <c>InventPosting</c>
    ///    table.
    /// </returns>
    /// <remarks>
    ///    The range selects records that match the <c>ItemId</c> field, the <c>ItemGroup</c> field, and the
    ///    <c>Category</c> field of the calling buffer that has these fields; otherwise, this range matches
    ///    all records.
    /// </remarks>
    protected str itemCodeRange()
    {
        str range;

        // Create a range which selects the records that match the calling buffer with a 'Table' match, 'Group' match, 'Category' match, or 'All' match.
        // However, if the code is 'All' then this range does not apply.
        switch (itemCode)
        {
            case InventPostingItemCode::Table:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldStr(InventPosting, ItemCode),
                    enum2int(InventPostingItemCode::Table),
                    fieldStr(InventPosting, ItemRelation),
                    itemNum);
                // Fall through
            case InventPostingItemCode::GroupId:
                range += strFmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldStr(InventPosting, ItemCode),
                    enum2int(InventPostingItemCode::GroupId),
                    fieldStr(InventPosting, ItemRelation),
                    itemGroup);
                // Fall through
            case InventPostingItemCode::Category:
                range += strFmt('((%1 == %2) && (%3 == %4)) ||',
                    fieldStr(InventPosting, ItemCode),
                    enum2int(InventPostingItemCode::Category),
                    fieldStr(InventPosting, CategoryRelation),
                    itemCategory);

                // If filtering records for a specific buffer then also include the records that match through
                // the 'All' code. (This range part is included here instead of the next case since that
                // is only used when the range in this method does not apply).
                range = strFmt('( %1 (%2 == %3))',
                    range,
                    fieldStr(InventPosting, ItemCode),
                    enum2int(InventPostingItemCode::All));
                break;
            case InventPostingItemCode::All:
                // If code is 'All' then this range does not apply.
                break;
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _callerRecord)
    {
        callerRecord    = _callerRecord;

        custParameters  = CustParameters::find();
        vendParameters  = VendParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommissionFlag</Name>
				<Source><![CDATA[
    public boolean parmCommissionFlag(boolean _commissionFlag = commissionFlag)
    {
        commissionFlag = _commissionFlag;

        return commissionFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryProd</Name>
				<Source><![CDATA[
    void queryProd(FormDataSource _prod, InventAccountTypeProd _selection)
    {
        this.searchItemIdx(_prod,InventPosting::prodAccount2AccountType(_selection));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds support for the new <c>IssueFixedAsset</c> and <c>InventIssueFixedAsset</c> types.
    /// </summary>
    /// <param name="_purch">
    ///    A form data source to which to add sorting for query ranges.
    /// </param>
    /// <param name="_selection">
    ///    An <c>InventAccountTypePurch</c> enumeration value that handles purchase posting.
    /// </param>

    void queryPurch(FormDataSource _purch, InventAccountTypePurch _selection)
    {
        switch (_selection)
        {
            case InventAccountTypePurch::Receipt:
                switch (vendParameters.AccountReceipt)
                {
                    case ItemVend::Item:
                        this.searchItemIdx(_purch, InventAccountType::PurchReceipt);
                        break;
                    case ItemVend::Vend    :
                        this.searchAccountIdx(_purch, InventAccountType::PurchReceipt);
                        break;
                }
                break;

            case InventAccountTypePurch::ReceiptFixedAsset:
                switch (vendParameters.AccountReceipt)
                {
                    case ItemVend::Item:
                        this.searchItemIdx(_purch, InventAccountType::PurchReceiptFixedAsset);
                        break;
                    case ItemVend::Vend:
                        this.searchAccountIdx(_purch, InventAccountType::PurchReceiptFixedAsset);
                        break;
                }
                break;
            case InventAccountTypePurch::Disc :
                switch (vendParameters.AccountDisc)
                {
                    case ItemVend::Item:
                        this.searchItemIdx(_purch, InventAccountType::PurchDisc);
                        break;
                    case ItemVend::Vend    :
                        this.searchAccountIdx(_purch, InventAccountType::PurchDisc);
                        break;
                }
                break;
            case InventAccountTypePurch::StdProfit:
                switch (vendParameters.AccountReceipt)
                {
                    case ItemVend::Item:
                        this.searchItemIdx(_purch, InventAccountType::PurchStdProfit);
                        break;
                    case ItemVend::Vend:
                        this.searchAccountIdx(_purch, InventAccountType::PurchStdProfit);
                        break;
                }
                break;
            case InventAccountTypePurch::StdLoss:
                switch (vendParameters.AccountReceipt)
                {
                    case ItemVend::Item:
                        this.searchItemIdx(_purch, InventAccountType::PurchStdLoss);
                        break;
                    case ItemVend::Vend:
                        this.searchAccountIdx(_purch, InventAccountType::PurchStdLoss);
                        break;
                }
                break;
            case InventAccountTypePurch::StdOffsetAccount:
                switch (vendParameters.AccountReceipt)
                {
                    case ItemVend::Item:
                        this.searchItemIdx(_purch, InventAccountType::PurchStdOffsetAccount);
                        break;
                    case ItemVend::Vend:
                        this.searchAccountIdx(_purch, InventAccountType::PurchStdOffsetAccount);
                        break;
                }
                break;
            case InventAccountTypePurch::Consumption:
                switch (vendParameters.AccountReceipt)
                {
                    case ItemVend::Item:
                        this.searchItemIdx(_purch, InventAccountType::PurchConsump);
                        break;
                    case ItemVend::Vend    :
                        this.searchAccountIdx(_purch, InventAccountType::PurchConsump);
                        break;
                }
                break;
            case InventAccountTypePurch::Expense:
                switch (vendParameters.AccountReceipt)
                {
                    case ItemVend::Item:
                        this.searchItemIdx(_purch, InventAccountType::PurchExpense);
                        break;
                    case ItemVend::Vend    :
                        this.searchAccountIdx(_purch, InventAccountType::PurchExpense);
                        break;
                }
                break;
            default:
                this.searchItemIdx(_purch, InventPosting::purchAccount2AccountType(_selection));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySales</Name>
				<Source><![CDATA[
    void querySales(FormDataSource _sales,  InventAccountTypeSales _selection)
    {
        switch (_selection)
        {
            case InventAccountTypeSales::Consumption:
                switch (custParameters.AccountConsumption)
                {
                    case ItemCust::Item:
                        this.searchItemIdx(_sales, InventAccountType::SalesConsump);
                        break;
                    case ItemCust::Cust:
                        this.searchAccountIdx(_sales, InventAccountType::SalesConsump);
                        break;
                }
                break;
            case InventAccountTypeSales::Issue:
                switch (custParameters.AccountConsumption)
                {
                    case ItemCust::Item:
                        this.searchItemIdx(_sales, InventAccountType::SalesIssue);
                        break;
                    case ItemCust::Cust:
                        this.searchAccountIdx(_sales, InventAccountType::SalesIssue);
                        break;
                }
                break;
            case InventAccountTypeSales::Revenue:
                switch (custParameters.AccountRevenue)
                {
                    case ItemCust::Item:
                        this.searchItemIdx(_sales, InventAccountType::SalesRevenue);
                        break;
                    case ItemCust::Cust:
                        this.searchAccountIdx(_sales, InventAccountType::SalesRevenue);
                        break;
                }
                break;
            case InventAccountTypeSales::Disc :
                switch (custParameters.AccountDisc)
                {
                    case ItemCust::Item:
                        this.searchItemIdx(_sales, InventAccountType::SalesDisc);
                        break;
                    case ItemCust::Cust:
                        this.searchAccountIdx(_sales, InventAccountType::SalesDisc);
                        break;
                }
                break;
            case InventAccountTypeSales::Commission:
                switch (custParameters.AccountConsumption)
                {
                    case ItemCust::Item:
                        this.searchItemIdx(_sales, InventAccountType::SalesCommission);
                        break;
                    case ItemCust::Cust:
                        this.searchAccountIdx(_sales, InventAccountType::SalesCommission);
                        break;
                }
                break;
            case InventAccountTypeSales::CommissionOffsetAccount:
                switch (custParameters.AccountConsumption)
                {
                    case ItemCust::Item:
                        this.searchItemIdx(_sales, InventAccountType::SalesCommissionOffsetAccount);
                        break;
                    case ItemCust::Cust   :
                        this.searchAccountIdx(_sales, InventAccountType::SalesCommissionOffsetAccount);
                        break;
                }
                break;
            case InventAccountTypeSales::CreditNote_IT:
                if (EXILFeatures_IT::isFeatureEnabled(EXILFeature::Exil2131))
                {
                    switch (custParameters.AccountRevenue)
                    {
                        case ItemCust::Item:
                            this.searchItemIdx(_sales, InventAccountType::SalesCreditNote_IT);
                            break;
                        case ItemCust::Cust:
                            this.searchAccountIdx(_sales, InventAccountType::SalesCreditNote_IT);
                            break;
                    }
                }
                break;
            default:
                if (commissionFlag)
                {
                    switch (custParameters.AccountConsumption)
                    {
                        case ItemCust::Item:
                            this.searchItemIdx(_sales, InventAccountType::SalesCommission);
                            break;
                        case ItemCust::Cust:
                            this.searchAccountIdx(_sales, InventAccountType::SalesCommission);
                            break;
                    }
                }
                else
                    this.searchItemIdx(_sales, InventPosting::salesAccount2AccountType(_selection));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTransferOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds support for the new <c>IssueFixedAsset</c> and <c>InventIssueFixedAsset</c> types.
    /// </summary>
    /// <param name="_transferOrder">
    /// A form data source to add query ranges and/or sorting to.
    /// </param>
    /// <param name="_selection">
    /// An <c>InventAccountTypePurch</c> enumeration type variable that handles purchase posting.
    /// </param>
    public void queryTransferOrder_IN(FormDataSource                 _transferOrder,
                                      InventAccountTypeTransfer_IN   _selection)
    {
        switch (_selection)
        {
            case InventAccountTypeTransfer_IN::GoodsInTransit :
                this.searchItemIdx(_transferOrder, InventAccountType::TransferGoodsTransit_IN);
                break;
            case InventAccountTypeTransfer_IN::Issue :
                this.searchItemIdx(_transferOrder, InventAccountType::TransferIssue_IN);
                break;
            case InventAccountTypeTransfer_IN::Receipt :
                this.searchItemIdx(_transferOrder, InventAccountType::TransferReceipt_IN);
                break;
            case InventAccountTypeTransfer_IN::Scrap :
                this.searchItemIdx(_transferOrder, InventAccountType::TransferScrap_IN);
                break;
            case InventAccountTypeTransfer_IN::UnrealizedLoss :
                this.searchItemIdx(_transferOrder, InventAccountType::TransferLoss_IN);
                break;
            case InventAccountTypeTransfer_IN::UnrealizedProfit :
                this.searchItemIdx(_transferOrder, InventAccountType::TransferProfit_IN);
                break;
            case InventAccountTypeTransfer_IN::TransferInterim :
                this.searchItemIdx(_transferOrder, InventAccountType::TransferInterim_IN);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries standard cost variance postings.
    /// </summary>
    /// <param name="_variance">
    ///    A form data source to which to add sorting for query ranges.
    /// </param>
    /// <param name="_selection">
    ///    The selected standard cost variance type.
    /// </param>
    public void queryVariance(FormDataSource _variance, InventAccountTypeStdCostVariance _selection)
    {
        this.searchItemIdx(_variance, InventPosting::varianceAccount2AccountType(_selection));
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchAccountIdx</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds ranges to the form data source query to show records for the current selected account type
    ///    sorted primarily by the <c>AccountCode</c> field.
    /// </summary>
    /// <param name="_inventPosting">
    ///    The data source to which to add ranges.
    /// </param>
    /// <param name="_accountType">
    ///    The current selected account type.
    /// </param>
    /// <remarks>
    ///    If the form is called by using a data source, ranges are added to only show records that affect the
    ///    called buffer.
    /// </remarks>
    void searchAccountIdx(
        FormDataSource      _inventPosting,
        InventAccountType   _accountType)
    {
        this.searchIndex(_inventPosting, _accountType, 'AccountIdx');
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchIndex</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds ranges to the form data source query to show records for the current account type.
    /// </summary>
    /// <param name="_inventPosting">
    ///    The form data source to which to add ranges.
    /// </param>
    /// <param name="_accountType">
    /// The current selected account type.
    /// </param>
    /// <param name="_indexName">
    ///    An index that is used to sort the records primarily by using the <c>ItemCode</c> field or the
    ///    <c>AccountCode</c> field.
    /// </param>
    /// <remarks>
    ///    If the form is called by using a data source then ranges are added to only show records affecting
    ///    the called buffer.
    /// </remarks>

    protected void searchIndex(
        FormDataSource      _inventPosting,
        InventAccountType   _accountType,
        str                 _indexName)
    {
        Query                   query;
        QueryBuildDataSource    qbds;

        query = _inventPosting.query();
        if (query)
        {
            qbds = query.dataSourceTable(tableNum(InventPosting));
            qbds.clearSortIndex();
            qbds.addSortIndex(indexName2id(tableNum(InventPosting), _indexName));

            qbds.clearRanges();
            qbds.addRange(fieldNum(InventPosting, InventAccountType)).value(queryValue(_accountType));

            if (called)
            {
                // The following ranges replace dyna links which should be cleared.
                qbds.clearDynalinks();

                // ItemCode range filter should be hidden in the UI.
                var itemCodeRange = qbds.addRange(fieldNum(InventPosting, ItemCode));
                itemCodeRange.value(this.itemCodeRange());
                itemCodeRange.status(RangeStatus::Hidden);

                qbds.addRange(fieldNum(InventPosting, CustVendCode)).value(this.custVendCodeRange());
                qbds.addRange(fieldNum(InventPosting, CostCode)).value(this.costCodeRange());
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    qbds.addRange(fieldNum(InventPosting, InventProfileTypeAll_RU)).value(this.inventProfileTypeRange_RU());
                }
                // </GEERU>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchItemIdx</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds ranges to the form data source query to show records for the current selected account type
    ///    sorted primarily by the <c>ItemCode</c> field.
    /// </summary>
    /// <param name="_inventPosting">
    ///    The data source to add ranges to.
    /// </param>
    /// <param name="_accountType">
    ///    The current selected account type.
    /// </param>
    /// <remarks>
    ///    If the form is called by using a data source, ranges are added to only show records that affect the
    ///    called buffer.
    /// </remarks>
    void searchItemIdx(
        FormDataSource      _inventPosting,
        InventAccountType   _accountType)
    {
        this.searchIndex(_inventPosting, _accountType, 'ItemIdx');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountRelation</Name>
				<Source><![CDATA[
    void setAccountRelation(
        TableGroupAll   oldSel,
        TableGroupAll   newSel,
        InventPosting   inventLedger)
    {
        if (newSel != oldSel ||
            newSel == TableGroupAll::All
           )
        {
            inventLedger.CustVendRelation = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set the cost relation field based on the old and new selection of the relation type.
    /// </summary>
    /// <param name="oldSel">
    ///    The old relation type.
    /// </param>
    /// <param name="newSel">
    ///    The new relation type.
    /// </param>
    /// <param name="inventLedger">
    ///    An <c>InventPosting</c> buffer.
    /// </param>
    public void setCostRelation(
        TableGroupAll   oldSel,
        TableGroupAll   newSel,
        InventPosting   inventLedger
        )
    {
        if (newSel != oldSel ||
            newSel == TableGroupAll::All
           )
        {
            inventLedger.CostRelation = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow()
    {
        // <GEERU>
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if (callerRecord.RecId)
        {
            called      = true;

            itemNum     = '';
            itemGroup   = '';
            itemCategory= 0;
            account     = '';
            groupId     = '';
            itemCode    = InventPostingItemCode::All;
            accountCode = TableGroupAll::All;
            costCode    = TableGroupAll::All;
            costGroupId = '';
            // <GEERU>
            if (countryRegion_RU)
            {
                inventProfileTypeAll    = InventProfileTypeAll_RU::All;
                inventProfileType       = InventProfileType_RU::NotSpecified;
                inventProfileId         = '';
            }
            // </GEERU>

            switch (callerRecord.TableId)
            {
                case tableNum(InventTable):
                    InventTable inventTable = callerRecord;
                    itemCode = InventPostingItemCode::Table;
                    itemNum = inventTable.ItemId;
                    itemGroup = inventTable.itemGroupId();
                    break;
                case tableNum(EcoResCategory):
                    EcoResCategory ecoResCategory = callerRecord;
                    itemCategory        = ecoResCategory.RecId;
                    itemCode            = InventPostingItemCode::Category;
                    break;
                case tableNum(InventItemGroup):
                    InventItemGroup inventItemGroup = callerRecord;
                    itemCode = InventPostingItemCode::GroupId;
                    itemGroup = inventItemGroup.ItemGroupId;
                    break;
                case tableNum(CustTable),tableNum(VendTable):
                    CustVendTable custVendTable = callerRecord;
                    accountCode = TableGroupAll::Table;
                    account = custVendTable.AccountNum;
                    groupId = custVendTable.GroupId;
                    break;
                case tableNum(CustGroup),tableNum(VendGroup):
                    CustVendGroup custVendGroup = callerRecord;
                    accountCode = TableGroupAll::GroupId;
                    groupId = custVendGroup.GroupId;
                    break;
                case tableNum(BOMCostGroup):
                    BOMCostGroup bomCostGroup = callerRecord;
                    costCode = TableGroupAll::Table;
                    costGroupId               = bomCostGroup.CostGroupId;
                    costGroupType             = bomCostGroup.CostGroupType;
                    break;
                // <GEERU>
                case tableNum(InventProfile_RU):
                    if (countryRegion_RU)
                    {
                        InventProfile_RU inventProfile = callerRecord;
                        inventProfileTypeAll           = InventProfileTypeAll_RU::Profile;
                        inventProfileId                = inventProfile.InventProfileId;
                        inventProfileType              = inventProfile.InventProfileType;
                    }
                    break;
                // </GEERU>
            }
        }
        else
            called = false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>