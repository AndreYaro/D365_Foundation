<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingMainAccDimensionListProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalizingMainAccDimensionListProvider</c> is the main account dimension list provider
///    that is used in the source document journalizing process.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::Journalizing)
]
class JournalizingMainAccDimensionListProvider extends MainAccountDimensionListProvider
{
    ItemId                          itemId;
    EcoResCategory                  category;
    CustVendTable                   partyAccount;

    #define.KeySeperator('~')

    AdvancedLedgerEntryISourceDocumentLineItem  iAdvancedLedgerEntry;
    SourceDocLineItemICustInvJournalizing       iCustInvoice;
    BudgetReservationISourceDocumentLineItem_PSN iBudgetReservation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension list.
    /// </summary>
    protected void initValues()
    {
        SourceDocumentLineItem                  sourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();
        SourceDocumentLineItem                  sourceDocumentLineItemParent;
        SourceDocument                          sourceDocument;
        SourceDocumentLineItemIProduct          iProduct;
        SourceDocumentIParty                    iParty;

        if (sourceDocumentLineItem is SourceDocumentLineItemIProduct)
        {
            iProduct = sourceDocumentLineItem as SourceDocumentLineItemIProduct;
        }
        else
        {
            sourceDocumentLineItemParent = sourceDocumentLineItem.parmParentSourceDocumentLineItem();

            if (sourceDocumentLineItemParent is SourceDocumentLineItemIProduct)
            {
                iProduct = sourceDocumentLineItemParent as SourceDocumentLineItemIProduct;
            }
        }

        if (iProduct)
        {
            itemId   = iProduct.parmItemId();
            category = iProduct.parmCategory();
        }

        if (sourceDocumentLineItem is AdvancedLedgerEntryISourceDocumentLineItem)
        {
            iAdvancedLedgerEntry        = sourceDocumentLineItem as AdvancedLedgerEntryISourceDocumentLineItem;
        }
        else if (sourceDocumentLineItem is SourceDocLineItemICustInvJournalizing)
        {
            iCustInvoice                = sourceDocumentLineItem as SourceDocLineItemICustInvJournalizing;
        }
        else if (sourceDocumentLineItem is BudgetReservationISourceDocumentLineItem_PSN)
        {
            iBudgetReservation = sourceDocumentLineItem as BudgetReservationISourceDocumentLineItem_PSN;
        }

        if (sourceDocumentLineItem is SourceDocumentIParty)
        {
            iParty         = sourceDocumentLineItem as SourceDocumentIParty;
            partyAccount   = iParty.parmPartyAccount();
        }
        else
        {
            sourceDocument = sourceDocumentLineItem.parmSourceDocument();
            if (sourceDocument is SourceDocumentIParty)
            {
                iParty         = sourceDocument as SourceDocumentIParty;
                partyAccount   = iParty.parmPartyAccount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        AccountingJournalizingRule          accountingJournalizingRule;
        JournalizingDefinitionManager       journalizingDefinitionManager;
        JournalizingDefinitionEntry         journalizingDefinitionEntry;
        JournalizingDefinitionId            journalizingDefinitionId;
        List                                list;
        ListEnumerator                      enumerator;
        MainAccountDimension                mainAccountDimension;
        AccountingDistributionRule          accountingDistributionRule;
        AccountingPolicy                    accountingPolicy;
        container                           cacheResult;
        MainAccountDimensionList            localMainAccountDimensionList;
        MainAccountDimensionListEnumerator  mainAccountDimensionListEnumerator;
        LedgerCacheScope                    ledgerCacheScope;
        LedgerPostingType                   journalizingDefLedgerPostingType;
        str                                 keyString;
        LedgerPostingType                   ledgerPostingType;
        JournalizingDefinitionEngine        journalizingDefinitionEngine;

        boolean                             matchingLedgerAccountExist;

        if (accountingRule is AccountingJournalizingRule)
        {
            accountingJournalizingRule = accountingRule;
            journalizingDefLedgerPostingType = accountingJournalizingRule.parmJournalizingDefLedgerPostingType();
        }
        else
        {
           journalizingDefLedgerPostingType = accountingRule.parmLedgerPostingType();
        }

        accountingPolicy = AccountingPolicy::newPolicy(accountingJournalizingRule.parmSourceDocumentLineItem());
        accountingDistributionRule = accountingPolicy.parmDistributionRule(accountingJournalizingRule.parmAccountingdistribution().MonetaryAmount);
        accountingDistributionRule.parmAccountingdistribution(accountingJournalizingRule.parmAccountingdistribution());

        if (journalizingDefLedgerPostingType == LedgerPostingType::APInvoice
        || journalizingDefLedgerPostingType == LedgerPostingType::VendBalance)
        {
            ledgerCacheScope = LedgerCacheScope::JournalizingMainAccDimensionListProvPay;
        }
        else if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && journalizingDefLedgerPostingType == LedgerPostingType::LedgerJournal)
        {
            ledgerCacheScope = LedgerCacheScope::JournalizingMainAccDimensionListProvALE;
        }
        else if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && journalizingDefLedgerPostingType == LedgerPostingType::CustBalance)
        {
            ledgerCacheScope = LedgerCacheScope::JournalizingMainAccDimensionListProvFTI;
        }
        else if (journalizingDefLedgerPostingType == LedgerPostingType::BudgetReservation_PSN)
        {
            ledgerCacheScope = LedgerCacheScope::JournalizingMainAccLstProvBudgetRes_PSN;
        }
        else
        {
            ledgerCacheScope = LedgerCacheScope::JournalizingMainAccDimensionListProvPur;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (journalizingDefLedgerPostingType == LedgerPostingType::CustBalance)
            {
                keyString = int642str(iCustInvoice.parmCustBillingCode()) + int642str(iCustInvoice.parmCustBillingClassification()) + int642str(accountingJournalizingRule.parmAccountingdistribution().LedgerDimension) + int2str(accountingDistributionRule.parmSide());

                cacheResult = LedgerCache::getValue(ledgerCacheScope,
                                                    [   iCustInvoice.parmCustBillingCode(),
                                                        iCustInvoice.parmCustBillingClassification(),
                                                        accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                        journalizingDefLedgerPostingType,
                                                        keyString
                                                    ]);
            }
            else if (journalizingDefLedgerPostingType == LedgerPostingType::LedgerJournal)
            {
                journalizingDefinitionId    = iAdvancedLedgerEntry.parmJournalizingDefinitionId();

                keyString = int642str(category.RecId)
                    + int642str(accountingJournalizingRule.parmAccountingdistribution().LedgerDimension)
                    + int2str(accountingDistributionRule.parmSide())
                    + int642str(journalizingDefinitionId);

                cacheResult = LedgerCache::getValue(ledgerCacheScope,
                                                    [   itemId,
                                                        partyAccount.AccountNum,
                                                        accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                        journalizingDefLedgerPostingType,
                                                        keyString
                                                    ]);
            }
        }

        if (journalizingDefLedgerPostingType == LedgerPostingType::BudgetReservation_PSN
        || journalizingDefLedgerPostingType == LedgerPostingType::BudgetReservationYearEnd_PSN)
        {
            keyString = int642str(iBudgetReservation.parmBudgetReservationTypeRecId())
                            + int642str(accountingJournalizingRule.parmAccountingdistribution().LedgerDimension)
                            + int2str(accountingDistributionRule.parmSide());

            cacheResult = LedgerCache::getValue(
                            ledgerCacheScope,
                            [iBudgetReservation.parmBudgetReservationTypeRecId(),
                                accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                journalizingDefLedgerPostingType,
                                keyString]);
        }
 
        if (!keyString)
        {
            // include current company context in cache key, SubledgerJournalizer has properly set company context
            keyString = curext() + #KeySeperator
                        + int642str(accountingJournalizingRule.parmAccountingdistribution().LedgerDimension) + #KeySeperator
                        + int2str(accountingDistributionRule.parmSide());

            cacheResult = LedgerCache::getValue(ledgerCacheScope,
                                                [   itemId,
                                                    partyAccount.AccountNum,
                                                    accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                    journalizingDefLedgerPostingType,
                                                    keyString
                                                ]);
        }

        if (cacheResult != conNull())
        {
            localMainAccountDimensionList = MainAccountDimensionList::create(cacheResult);

            mainAccountDimensionListEnumerator = localMainAccountDimensionList.getEnumerator();

            while (mainAccountDimensionListEnumerator.moveNext())
            {
                mainAccountDimensionList.addEnd(mainAccountDimensionListEnumerator.current());
            }
        }
        else
        {
            localMainAccountDimensionList = MainAccountDimensionList::construct();
            if (journalizingDefLedgerPostingType == LedgerPostingType::APInvoice
            || journalizingDefLedgerPostingType == LedgerPostingType::VendBalance)
            {
                if (JournalizingMainAccDimensionListProvider::isPurchasingCardProcessFeatureEnabled())
                {
                    journalizingDefinitionManager = JournalizingDefinitionManager::newJournalizingDefinitionManagerPayablesWithVendorInvoiceSourceDoc(itemId,
                                                                                                                 category.RecId,
                                                                                                                 partyAccount.AccountNum,
                                                                                                                 accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                                                                                 journalizingDefLedgerPostingType,
                                                                                                                 accountingRule.parmSourceDocumentLineItem().parmSourceDocument());
                }
                else
                {
                    journalizingDefinitionManager = JournalizingDefinitionManager::newJournalizingDefinitionManagerPayables(itemId,
                                                                                                                 category.RecId,
                                                                                                                 partyAccount.AccountNum,
                                                                                                                 accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                                                                                 journalizingDefLedgerPostingType);
                }
            }
            else if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && journalizingDefLedgerPostingType == LedgerPostingType::LedgerJournal)
            {
                journalizingDefinitionManager = JournalizingDefinitionManager::newJournalizingDefinitionManagerALE(
                                                    accountingJournalizingRule.parmAccountingdistribution().LedgerDimension,
                                                    journalizingDefinitionId,
                                                    accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                    journalizingDefLedgerPostingType);

                journalizingDefinitionManager.parmJournalizingDefinition(iAdvancedLedgerEntry.parmJournalizingDefinitionId());
            }
            else if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && journalizingDefLedgerPostingType == LedgerPostingType::CustBalance)
            {
                ledgerPostingType = iCustInvoice.parmForInterestAdjustment() == NoYes::Yes ? LedgerPostingType::CustInterest : LedgerPostingType::CustBalance;

                journalizingDefinitionManager = JournalizingDefinitionManager::newJournalizingDefinitionManagerCustomer(
                                                    iCustInvoice.parmCustBillingCode(),
                                                    iCustInvoice.parmCustBillingClassification(),
                                                    accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                    ledgerPostingType);
            }
            else if (journalizingDefLedgerPostingType == LedgerPostingType::BudgetReservation_PSN)
            {
                journalizingDefinitionManager = JournalizingDefinitionManager::newJournalizingDefinitionManagerBudgetReservation_PSN(
                                                    iBudgetReservation.parmBudgetReservationTypeRecId(),
                                                    BudgetReservationJournalizingType_PSN::BudgetReservation,
                                                    accountingJournalizingRule.parmAccountingdistribution().AccountingDate);
            }
            else if (journalizingDefLedgerPostingType == LedgerPostingType::BudgetReservationYearEnd_PSN)
            {
                journalizingDefinitionManager = JournalizingDefinitionManager::newJournalizingDefinitionManagerBudgetReservation_PSN(
                                                    iBudgetReservation.parmBudgetReservationTypeRecId(),
                                                    BudgetReservationJournalizingType_PSN::BudgetReservationYearEndProcess,
                                                    accountingJournalizingRule.parmAccountingdistribution().AccountingDate);
            }
            else
            {
                journalizingDefinitionManager = JournalizingDefinitionManager::newJournalizingDefinitionManagerPurch(itemId,
                                                                                                             category.RecId,
                                                                                                             partyAccount.AccountNum,
                                                                                                             accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                                                                             journalizingDefLedgerPostingType);
            }

            journalizingDefinitionId = journalizingDefinitionManager.getDefaultJournalizingDefinition();

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                if (journalizingDefLedgerPostingType == LedgerPostingType::LedgerJournal)
                {
                    journalizingDefinitionEngine = JournalizingDefinitionEngine::construct();

                    // Determine, if any matching Ledger account exist in the Journalizing Definition record.
                    matchingLedgerAccountExist = journalizingDefinitionEngine.matchingAccountExist(accountingJournalizingRule.parmAccountingdistribution().LedgerDimension,
                                                                                                   accountingDistributionRule.parmSide(),
                                                                                                   journalizingDefinitionId, accountingJournalizingRule.parmAccountingdistribution().AccountingDate);
                    // If no matching account exist, then throw error.
                    if (!matchingLedgerAccountExist)
                    {
                        throw error("@SPS2362");
                    }
                }

                if (!journalizingDefinitionId && journalizingDefLedgerPostingType == LedgerPostingType::CustBalance)
                {
                    throw error(strfmt("@SPS1133", iCustInvoice.parmForInterestAdjustment() == NoYes::Yes ? CustomerTransactionType::Interestnote : CustomerTransactionType::FreeTextInvoice));
                }
            }

            if (!journalizingDefinitionId 
                && (journalizingDefLedgerPostingType == LedgerPostingType::APInvoice
                || journalizingDefLedgerPostingType == LedgerPostingType::VendBalance))
            {
                throw error(strfmt("@AccountsPayable:PendingVendorInvoiceWithoutPostingDefinitions", AccountsPayableTransactionType::APInvoice));
            }

            journalizingDefinitionManager.parmJournalizingDefinition(journalizingDefinitionId);

            if (journalizingDefinitionManager)
            {
                list = journalizingDefinitionManager.getSystemGeneratedEntries(accountingDistributionRule.parmSide(),
                                                                               accountingJournalizingRule.parmAccountingdistribution().LedgerDimension);
                if (list && list.elements() != 0)
                {
                    enumerator = list.getEnumerator();
                    while (enumerator.moveNext())
                    {
                        journalizingDefinitionEntry = enumerator.current();

                        mainAccountDimension = MainAccountDimension::newFromParameters(journalizingDefinitionEntry.parmLedgerDimension(),
                                                                                       journalizingDefinitionEntry.parmJournalizingDefinitionDebitCredit());

                        localMainAccountDimensionList.addEnd(mainAccountDimension);
                        mainAccountDimensionList.addEnd(mainAccountDimension);
                    }
                }
                else if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && journalizingDefLedgerPostingType == LedgerPostingType::CustBalance)
                {
                    throw error(strfmt("@SPS668", JournalizingDefinition::findByRecId(journalizingDefinitionId).JournalizingDefinitionCode));
                }

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && journalizingDefLedgerPostingType == LedgerPostingType::CustBalance)
                {
                    LedgerCache::insertValue(ledgerCacheScope,
                                                    [   iCustInvoice.parmCustBillingCode(),
                                                        iCustInvoice.parmCustBillingClassification(),
                                                        accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                        journalizingDefLedgerPostingType,
                                                        keyString
                                                    ],
                                                    localMainAccountDimensionList.pack()
                                                );
                }
                else if (journalizingDefLedgerPostingType == LedgerPostingType::BudgetReservation_PSN
                        || journalizingDefLedgerPostingType == LedgerPostingType::BudgetReservationYearEnd_PSN)
                {
                    LedgerCache::insertValue(
                        ledgerCacheScope,
                        [iBudgetReservation.parmBudgetReservationTypeRecId(),
                            accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                            journalizingDefLedgerPostingType,
                            keyString],
                        localMainAccountDimensionList.pack());
                }
                else
                {
                    if (!localMainAccountDimensionList.empty())
                    {
                        LedgerCache::insertValue(ledgerCacheScope,
                                                    [   itemId,
                                                        partyAccount.AccountNum,
                                                        accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                        journalizingDefLedgerPostingType,
                                                        keyString
                                                    ],
                                                    localMainAccountDimensionList.pack()
                                                );
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears main account dimension list caches.
    /// </summary>
    public static void clearCache()
    {
        LedgerCache::clearScope(LedgerCacheScope::JournalizingMainAccDimensionListProvPay);
        LedgerCache::clearScope(LedgerCacheScope::JournalizingMainAccDimensionListProvPur);
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            LedgerCache::clearScope(LedgerCacheScope::JournalizingMainAccDimensionListProvALE);
            LedgerCache::clearScope(LedgerCacheScope::JournalizingMainAccDimensionListProvFTI);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchasingCardProcessFeatureEnabled</Name>
				<Source><![CDATA[
    protected static boolean isPurchasingCardProcessFeatureEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>