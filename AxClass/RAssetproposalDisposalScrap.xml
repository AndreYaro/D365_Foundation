<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetproposalDisposalScrap</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetproposalDisposalScrap extends RAssetProposal implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    public RAssetTransType assetTransType()
    {
        return RAssetTransType::DisposalScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournalLine</Name>
				<Source><![CDATA[
    public boolean canCreateJournalLine(RAssetStandardId _rAssetStandardId)
    {
        boolean     ret;
        RAssetScrap rAssetScrap;

        ret = super(_rAssetStandardId);

        if (_rAssetStandardId == RAssetParameters::find().StandardIdDefault)
        {
            select firstonly BalanceAmount from rAssetScrap
                where rAssetScrap.AssetId    == rAssetTable.AccountNum &&
                      rAssetScrap.Assembling == NoYes::No              &&
                      ! rAssetScrap.TransDate;

            if (! rAssetScrap.BalanceAmount &&
                RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum, _rAssetStandardId).acquisitionTotal())
            {
                ret = checkFailed(strFmt("@GLS114175", _rAssetStandardId, rAssetTable.AccountNum));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount  = 0)
    {
        RAssetScrap                rAssetScrap;
        RAssetAmount               rAssetAmount;
        InventMov_Scrap_RU         movement;
        LedgerJournalTrans         ledgerJournalTrans;
        LedgerJournalTrans_RAsset  ledgerJournalTrans_RAsset;

        void updatePostValue()
        {
            ledgerJournalTrans_RAsset = rAssetJournal.ledgerJournalTrans_RAsset();
            ledgerJournalTrans_RAsset.selectForUpdate(true);
            ledgerJournalTrans_RAsset.PostValue = RAssetPostValue::SaleValue;
            ledgerJournalTrans_RAsset.doUpdate();
        }

        if (rAssetStandards.Depreciation            &&
            rAssetStandards.postingProfile(runDate) &&
            ! rAssetStandards.DisposalDate)
        {
            componentryScrapAmount = 0;
            if (_assetStandardId == RAssetParameters::find().StandardIdDefault &&
               (select firstonly rAssetScrap
                    where rAssetScrap.AssetId    == rAssetTable.AccountNum &&
                          rAssetScrap.Assembling == NoYes::No              &&
                          ! rAssetScrap.TransDate).RecId)
            {
                rAssetJournal.createVoucher();
                while select * from rAssetScrap
                    where rAssetScrap.AssetId    == rAssetTable.AccountNum &&
                          rAssetScrap.Assembling == NoYes::No              &&
                          ! rAssetScrap.TransDate
                {
                    rAssetAmount = RAssetProposal::roundAmount(_assetStandardId,
                                                               rAssetTable,
                                                               runDate,
                                                               rAssetScrap.CostAmount,
                                                               CompanyInfoHelper::standardCurrency());
                    componentryScrapAmount += rAssetAmount;
                    movement  = InventMovement::construct(rAssetScrap);
                    rAssetJournal.createTrans(rAssetAmount,
                                              rAssetTable,
                                              runDate,
                                              rAssetStandards,
                                              "",
                                              rAssetScrap.ItemId,
                                              movement.accountBalanceSheet(),
                                              NoYes::No,
                                              rAssetScrap.DefaultDimension);

                    ledgerJournalTrans = rAssetJournal.ledgerJournalTrans();
                    ledgerJournalTrans.selectForUpdate(true);
                    ledgerJournalTrans.Qty    = 1;
                    ledgerJournalTrans.NoEdit = NoYes::Yes;
                    ledgerJournalTrans.update();
                    updatePostValue();
                }
                ledgerJournalTrans_RAsset = rAssetJournal.ledgerJournalTrans_RAsset();
                ledgerJournalTrans_RAsset.selectForUpdate(true);
                ledgerJournalTrans_RAsset.CanDisposal = true;
                ledgerJournalTrans_RAsset.doUpdate();
            }
            else
            {
                rAssetJournal.createVoucher();

                if (rAssetStandards.ScrapValue)
                {
                    componentryScrapAmount = rAssetStandards.ScrapValue;
                    rAssetJournal.createTrans(rAssetStandards.ScrapValue,
                                          rAssetTable,
                                          runDate,
                                          rAssetStandards,
                                          "");
                    updatePostValue();
                }
            }
            this.createDisposalTrans(RAssetDisposalType::Scrap, _assetStandardId, rAssetJournal.ledgerJournalTrans());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116128");

        dialogRunDate.label("@GLS116311");
        dialogAssetStandardId.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>