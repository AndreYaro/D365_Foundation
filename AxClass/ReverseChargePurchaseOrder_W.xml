<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReverseChargePurchaseOrder_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The class <c>ReverseChargePurchaseOrder_W</c> contains logic of appliyng reverse charge tax groups to purchase order lines.
/// </summary>
public class ReverseChargePurchaseOrder_W extends ReverseCharge_W
{
    private PurchTable  purchTable;
    private PurchLine   purchLine;

    private VendAccount                 lastInvoiceAccount;
    private LogisticsPostalAddressRecId lastDeliveryAddress;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    protected ReverseChargeDocumentType_W documentType()
    {
        return ReverseChargeDocumentType_W::PurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerChanged</Name>
				<Source><![CDATA[
    protected void headerChanged()
    {
        super();

        partnerCountryRegionType = IntrastatCountryRegionParameters::getCountryRegionType(purchTable.vendTable_InvoiceAccount().postalAddress());

        if (purchTable.DeliveryPostalAddress)
        {
            deliveryCountryRegionType = IntrastatCountryRegionParameters::getCountryRegionType(purchTable.deliveryAddress());
        }
        else
        {
            deliveryCountryRegionType = IntrastatCountryRegionParameters::getCountryRegionType(CompanyInfo::find().postalAddress());
        }

        lastInvoiceAccount  = purchTable.InvoiceAccount;
        lastDeliveryAddress = purchTable.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHeaderChanged</Name>
				<Source><![CDATA[
    protected boolean isHeaderChanged()
    {
        boolean ret;

        if (super()
         || lastInvoiceAccount  != purchTable.InvoiceAccount
         || lastDeliveryAddress != purchTable.DeliveryPostalAddress)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseChargeGroupSet</Name>
				<Source><![CDATA[
    protected boolean isReverseChargeGroupSet()
    {
        return purchLine.TaxGroup == purchTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected AmountMST lineAmount(RecId _lineRecId, Common _line = null)
    {
        AmountMST lineAmount;
        PurchLine purchLineLocal;

        if (_lineRecId
            && _lineRecId != purchLine.RecId
            && lineAmountMap.exists(_lineRecId))
        {
            lineAmount = lineAmountMap.lookup(_lineRecId);
        }
        else
        {
            if (prmisDefault(_line))
            {
                purchLineLocal = PurchLine::findRecId(_lineRecId);
            }
            else
            {
                purchLineLocal = _line;
            }

            lineAmount = CurrencyExchangeHelper::mstAmount(purchLineLocal.calcLineAmountExclTax(), purchLineLocal.CurrencyCode);

            if (_lineRecId)
            {
                lineAmountMap.insert(_lineRecId, lineAmount);
            }
            else
            {
                currentlineAmount = lineAmount;
            }
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineChanged</Name>
				<Source><![CDATA[
    protected void lineChanged()
    {
        super();

        itemGroupId = this.findGroupByItemCategory(
            ReverseChargePurchSales_W::Purch,
            purchLine.ItemId,
            purchLine.ProcurementCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderRecord</Name>
				<Source><![CDATA[
    protected void setHeaderRecord(Common _headerRecord)
    {
        super(_headerRecord);

        purchTable = _headerRecord as PurchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineRecord</Name>
				<Source><![CDATA[
    protected void setLineRecord(Common _lineRecord)
    {
        super(_lineRecord);

        purchLine = _lineRecord as PurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseChargeGroup</Name>
				<Source><![CDATA[
    protected void setReverseChargeGroup()
    {
        purchLine.TaxGroup = purchTaxGroup;
        this.setOverrideSalesTax(purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseChargeGroupMatchingLines</Name>
				<Source><![CDATA[
    public void setReverseChargeGroupMatchingLines(boolean _fromHeader = false)
    {
        #OCCRetryCount

        PurchLine      purchLineLocal;
        SetEnumerator  se;
        boolean        researchDS;
        FormObjectSet  dataSource;

        if (updateMatchingLines)
        {
            try
            {
                ttsBegin;

                if (ruleItemGroupId &&
                    lineGroupMap    &&
                    lineGroupMap.exists(ruleItemGroupId))
                {
                    se = lineGroupMap.lookup(ruleItemGroupId).getEnumerator();

                    while (se.moveNext())
                    {
                        if (_fromHeader || se.current() != purchLine.RecId)
                        {
                            purchLineLocal = PurchLine::findRecId(se.current(), true);

                            if (purchLineLocal && (purchLineLocal.TaxGroup != purchTaxGroup || this.needSetOverrideSalesTax(purchLineLocal)))
                            {
                                purchLineLocal.TaxGroup = purchTaxGroup;
                                this.setOverrideSalesTax(purchLineLocal);
                                purchLineLocal.update();

                                researchDS = true;
                            }
                        }
                    }
                }
                else
                {
                    while select forUpdate purchLineLocal
                        where purchLineLocal.PurchId == purchLine.PurchId
                            && (purchLineLocal.TaxGroup != purchTaxGroup || this.needSetOverrideSalesTax(purchLineLocal))
                            && (_fromHeader || purchLineLocal.RecId != purchLine.RecId)
                    {
                        if (this.checkItemGroupNoThreshold(
                                ReverseChargePurchSales_W::Purch,
                                purchLineLocal.ItemId,
                                purchLineLocal.ProcurementCategory))
                        {
                            purchLineLocal.TaxGroup = purchTaxGroup;
                            this.setOverrideSalesTax(purchLineLocal);
                            purchLineLocal.update();

                            researchDS = true;
                        }
                    }
                }

                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                throw error("@SYS93835");
            }

            dataSource = FormDataUtil::getFormDataSource(purchLine);
            if (!_fromHeader && researchDS && dataSource)
            {
                purchLineLocal.data(purchLine.data());
                dataSource.research(true);
                //retain position doesn't work for PurchTable form
                dataSource.findRecord(purchLineLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>thresholdByGroupUseDB</Name>
				<Source><![CDATA[
    protected AmountMST thresholdByGroupUseDB(ReverseChargeItemGroupId_W _ruleItemGroupId)
    {
        PurchLine                   purchLineLocal;
        ReverseChargeItemGroupId_W  lineGroupId;
        AmountMST                   threshold;

        if (_ruleItemGroupId)
        {
            lineGroupMap = new Map(Types::Int64, Types::Class);
        }

        while select purchLineLocal
            where purchLineLocal.PurchId == purchLine.PurchId &&
                  purchLineLocal.RecId   != purchLine.RecId
        {
            if (_ruleItemGroupId)
            {
                lineGroupId = this.findGroupByItemCategory(ReverseChargePurchSales_W::Purch, purchLineLocal.ItemId, purchLineLocal.ProcurementCategory);

                this.addLineToCache(lineGroupId, purchLineLocal.RecId);
            }

            if (!_ruleItemGroupId || lineGroupId == _ruleItemGroupId)
            {
                threshold += this.lineAmount(purchLineLocal.RecId, purchLineLocal);
            }
        }

        return threshold;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>