<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransTaxInformationHelper_IN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper class for building tax information transaction.
/// </summary>
[ExtensionOf(ClassStr(TransTaxInformationHelper))]
final class TransTaxInformationHelper_IN_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromExciseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes excise fields base on excise type.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    public static void initFromExciseType(TransTaxInformation _transTaxInformation)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            TaxInformation_IN taxInformation = TaxInformation_IN::find(_transTaxInformation.TaxInformation);

            switch (_transTaxInformation.ExciseType)
            {
                case ExciseType_IN::None:
                    _transTaxInformation.ExciseECCRegistrationNumber = taxInformation.ECCNumber;
                    break;
                case ExciseType_IN::Manufacturer:
                    _transTaxInformation.ExciseECCRegistrationNumber = taxInformation.ManECCRegistrationNumberTable;
                    break;
                case ExciseType_IN::Trader:
                    _transTaxInformation.ExciseECCRegistrationNumber = taxInformation.TraderECCRegistrationNumberTable;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields base on markupTable.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    // <param name="_sourceTable">
    /// The buffer of source table.
    /// </param>
    protected static void initFromMarkupTable(TransTaxInformation _transTaxInformation, Common _sourceTable)
    {
        next initFromMarkupTable(_transTaxInformation, _sourceTable);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            MarkupTrans     markupTrans     = _sourceTable;
            MarkupTable_IN  markupTableIN   = MarkupTable_IN::findByMarkupTable(MarkupTable::find(markupTrans.ModuleType, markupTrans.MarkupCode).RecId);

            _transTaxInformation.Exempt                     = markupTableIN.Exempt;
            _transTaxInformation.ServiceAccountingCodeTable = markupTableIN.ServiceAccountingCodeTable;
            _transTaxInformation.ServiceCategory            = markupTableIN.ServiceCategory;
            _transTaxInformation.HSNCodeTable               = markupTableIN.HSNCodeTable;
            _transTaxInformation.ITCCategory                = markupTableIN.ITCCategory;
            _transTaxInformation.NonGST                     = markupTableIN.NonGST;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default tax information from category
    /// </summary>
    /// <param name="_transTaxInformation">
    /// Category Id.
    /// </param>
    protected static void initFromCategory(TransTaxInformation _transTaxInformation, Common _sourceTable, ProjCategory category)
    {
        next initFromCategory(_transTaxInformation, _sourceTable, category);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && category.ServiceAccountingCodeTable_IN && !_transTaxInformation.ServiceAccountingCodeTable)
		{
            _transTaxInformation.ServiceAccountingCodeTable = category.ServiceAccountingCodeTable_IN;
            _transTaxInformation.HSNCodeTable = 0;
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update transaction tax information from project category.
    /// </summary>
    /// <param name = "_transTaxInformation">The transaction tax information.</param>
    /// <param name = "_projCategory">The project category.</param>
    protected static void updateFromCategory(TransTaxInformation _transTaxInformation, ProjCategory _projCategory)
    {
        next updateFromCategory(_transTaxInformation, _projCategory);

        if (_projCategory && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if (_transTaxInformation.HSNCodeTable)
            {
                _transTaxInformation.HSNCodeTable = 0;
            }

            _transTaxInformation.ServiceAccountingCodeTable = _projCategory.ServiceAccountingCodeTable_IN;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TransTaxInformation</c> record from the <c>TaxInformation_IN</c> record.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    public static TaxInformation_IN initFromTaxInformation(TransTaxInformation _transTaxInformation)
    {
        TaxInformation_IN taxInformation = next initFromTaxInformation(_transTaxInformation);
        
        if (taxInformation && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            _transTaxInformation.VATTIN = taxInformation.TIN;
            _transTaxInformation.SalesTaxRegistrationNumber = taxInformation.SalesTaxRegistrationNumber;
            _transTaxInformation.TaxWithholdTAN = taxInformation.TAN;
            _transTaxInformation.CustomsIECRegistrationNumber = taxInformation.IECRegistrationNumberTable;
            _transTaxInformation.ServiceTaxRegistrationNumber = taxInformation.STCRegistrationNumberTable;
            _transTaxInformation.GSTIN = taxInformation.GSTIN;
            TransTaxInformationHelper::initFromExciseType(_transTaxInformation);
        }
        else if (!taxInformation)
        {
            _transTaxInformation.VATTIN = 0;
            _transTaxInformation.SalesTaxRegistrationNumber = 0;
            _transTaxInformation.TaxWithholdTAN = 0;
            _transTaxInformation.CustomsIECRegistrationNumber = 0;
            _transTaxInformation.ServiceTaxRegistrationNumber = 0;
            _transTaxInformation.GSTIN = 0;
        }

        return taxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TransTaxInformation</c> record from the <c>EcoResCategory</c> record.
    /// </summary>
    /// <param name = "_transTaxInformation">The transaction tax information.</param>
    /// <param name = "_categoryRecId">RecId of EcoResCategory record.</param>
    protected static void initFromEcoResCategory(TransTaxInformation _transTaxInformation, EcoResCategoryId  _categoryRecId)
    {
        next initFromEcoResCategory(_transTaxInformation, _categoryRecId);

        if (_categoryRecId && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            EcoResCategory ecoResCategory = EcoResCategory::find(_categoryRecId);
            EcoResCategoryTax   ecoResCategoryTax = EcoResCategoryTax::findByEcoResCategoryId(ecoResCategory.RecId);

            if (_transTaxInformation.Exempt == NoYes::No)
            {
                _transTaxInformation.Exempt = ecoResCategoryTax.Exempt_IN;
            }

            if (_transTaxInformation.NonGST == NoYes::No)
            {
                _transTaxInformation.NonGST = ecoResCategoryTax.NonGST_IN;
            }

            if (!_transTaxInformation.HSNCodeTable && !_transTaxInformation.ServiceAccountingCodeTable)
            {
                // If HSN or SAC code is defined in parent node but not in child node, HSN/SAC will default from parent node.
                while (!ecoResCategoryTax.HSNCodeTable_IN && !ecoResCategoryTax.ServiceAccountingCodeTable_IN && ecoResCategory.ParentCategory)
                {
                    ecoResCategory = EcoResCategory::find(ecoResCategory.ParentCategory);
                    ecoResCategoryTax = EcoResCategoryTax::findByEcoResCategoryId(ecoResCategory.RecId);
                }

                _transTaxInformation.HSNCodeTable = ecoResCategoryTax.HSNCodeTable_IN;

                if (!_transTaxInformation.HSNCodeTable)
                {
                    _transTaxInformation.ServiceAccountingCodeTable = ecoResCategoryTax.ServiceAccountingCodeTable_IN;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes excise fields base on invent item.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_itemId">
    /// The invent item Id.
    /// </param>
    public static void initFromInventItem(TransTaxInformation _transTaxInformation, ItemId _itemId, CustVendTable _custVendTable)
    {
        InventTable inventTable;

        next initFromInventItem(_transTaxInformation, _itemId, _custVendTable);

        if (_itemId && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            inventTable = InventTable::find(_itemId);
            
            if (!_transTaxInformation.ExciseTariffCodes)
            {
                _transTaxInformation.ExciseTariffCodes = inventTable.ExciseTariffCodes_IN;
            }

            if (_transTaxInformation.ExciseDSA == NoYes::No)
            {
                _transTaxInformation.ExciseDSA = inventTable.DSA_IN;
            }

            if (_transTaxInformation.ExciseRecordType == ExciseRecordType_IN::None)
            {
                _transTaxInformation.ExciseRecordType = inventTable.ExciseRecordType_IN;
            }

            if (!_transTaxInformation.ServiceCode)
            {
                _transTaxInformation.ServiceCode = inventTable.ServiceCodeTable_IN;
            }

            if (!_transTaxInformation.HSNCodeTable && !_transTaxInformation.ServiceAccountingCodeTable)
            {
                _transTaxInformation.HSNCodeTable = inventTable.HSNCodeTable_IN;
            }

            if (_transTaxInformation.Exempt == NoYes::No)
            {
                _transTaxInformation.Exempt = inventTable.Exempt_IN;
            }

            if (_transTaxInformation.NonGST == NoYes::No)
            {
                _transTaxInformation.NonGST = inventTable.NonGST_IN;
            }

            if (!_transTaxInformation.ServiceAccountingCodeTable && !_transTaxInformation.HSNCodeTable)
            {
                _transTaxInformation.ServiceAccountingCodeTable = inventTable.ServiceAccountingCodeTable_IN;
            }

            if (!_transTaxInformation.CustomsTariffCode)
            {
                if (_custVendTable is VendTable)
                {
                    _transTaxInformation.CustomsTariffCode = inventTable.CustomsImportTariffCodeTable_IN;
                    _transTaxInformation.CustomsTariffDirection = Direction_IN::Import;
                }
                else if (_custVendTable is CustTable)
                {
                    _transTaxInformation.CustomsTariffCode = inventTable.CustomsExportTariffCodeTable_IN;
                    _transTaxInformation.CustomsTariffDirection = Direction_IN::Export;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInitForServiceOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check is init from service order.
    /// </summary>
    /// <param name="_taxModelTaxable">
    /// The transaction TaxModelTaxable object.
    /// </param>
    /// <returns>
    /// True if taxModelTaxable is exists and taxModelTaxable is from TaxModelDocLineServiceOrderImpl; otherwise, false.
    /// </returns>
    protected static boolean isInitForServiceOrder(TaxModelTaxable _taxModelTaxable)
    {
        boolean isInitForServiceOrder = next isInitForServiceOrder(_taxModelTaxable);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            isInitForServiceOrder = isInitForServiceOrder || (_taxModelTaxable && (_taxModelTaxable is TaxModelDocLineServiceOrderImpl_IN));
		}

        return isInitForServiceOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInitForMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check is init from markup trans.
    /// </summary>
    /// <param name="_taxModelTaxable">
    /// The transaction TaxModelTaxable object.
    /// </param>
    /// <returns>
    /// True if taxModelTaxable is exists and taxModelTaxable is from TaxModelDocLineMarkupTransImpl; otherwise, false.
    /// </returns>
    protected static boolean isInitForMarkupTrans(TaxModelTaxable _taxModelTaxable)
    {
        boolean isInitForMarkupTrans = next isInitForMarkupTrans(_taxModelTaxable);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            isInitForMarkupTrans = isInitForMarkupTrans || (_taxModelTaxable && (_taxModelTaxable is TaxModelDocLineMarkupTransImpl_IN));
		}

        return isInitForMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes  IN field base on customer or vendor.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The customer or vendor.
    /// </param>
    /// <param name="_taxModelTaxable">
    /// The transaction TaxModelTaxable object.
    /// </param>
    public static void initFromCustVend(
        TransTaxInformation _transTaxInformation,
        CustVendTable       _custVendTable,
        TaxModelTaxable     _taxModelTaxable)
    {
        next initFromCustVend(_transTaxInformation, _custVendTable, _taxModelTaxable);

        if (_custVendTable && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            _transTaxInformation.TaxWithholdCountryRegionToRemittance = TaxWithholdCountryRegionToRemittance_IN::getDefaultDeducteeCountryRegion(_custVendTable).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseTarriffCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update excise tariff codes.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_exciseTarriffCodes">
    /// The excise tariff codes.
    /// </param>
    public static void updateExciseTarriffCodes(TransTaxInformation _transTaxInformation, RefRecId _exciseTarriffCodes)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            _transTaxInformation.ExciseTariffCodes = _exciseTarriffCodes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransTaxInformationFromProjCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update transaction tax information from project category.
    /// </summary>
    /// <param name="_sourceTable">
    /// The source transaction.
    /// </param>
    /// <param name="_categoryId">
    /// The categoryId of source transaction.
    /// </param>
    /// <param name="_type">
    /// The type.
    /// </param>
    public void updateTransTaxInformationFromProjCategory(
        Common _sourceTable,
        CategoryId _categoryId,
        TransTaxInformationType_IN _type)
    {
        next updateTransTaxInformationFromProjCategory(_sourceTable, _categoryId, _type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateTransTaxInformationFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update transaction tax information from project table.
    /// </summary>
    /// <param name = "_sourceTable">
    /// The source transaction record.
    /// </param>
    /// <param name = "_projTable">
    /// The project table.
    /// </param>
    /// <param name = "_type">
    /// Type of TransTaxInformation.
    /// </param>
    protected void doUpdateTransTaxInformationFromProjTable(
        Common						_sourceTable,
        ProjTable                   _projTable,
        TransTaxInformationType_IN	_type)
    {
        TransTaxInformation         transTaxInformation;
        TransTaxInformation         projTableTransTaxInfo;
        List                        transTaxInformationList;
        ListEnumerator              listEnumerator;

        next doUpdateTransTaxInformationFromProjTable(_sourceTable, _projTable, _type);

        if (_projTable && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            transTaxInformationList = transitDocumentManager.findTransitDocumentsByReference(
                                                                _sourceTable.TableId,
                                                                _sourceTable.RecId,
                                                                TransTaxInformationHelper::getSampleTransTaxInformation(_sourceTable.TableId, _type));

            if (transTaxInformationList && transTaxInformationList.elements())
            {
                listEnumerator = transTaxInformationList.getEnumerator();
                listEnumerator.moveNext();
                transTaxInformation = listEnumerator.current();
                if (transTaxInformation)
                {
                    ttsbegin;
                    RefRecId hsnCode = transTaxInformation.HSNCodeTable;
                    RefRecId sacCode = transTaxInformation.ServiceAccountingCodeTable;

                    transTaxInformation.selectForUpdate(true);

                    projTableTransTaxInfo = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_projTable);
                    buf2Buf(projTableTransTaxInfo, transTaxInformation);

                    if (sacCode)
                    {
                        transTaxInformation.ServiceAccountingCodeTable = sacCode;
                    }
                    else
                    {
                        transTaxInformation.HSNCodeTable = hsnCode;
                    }
                    transTaxInformation.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseRecordType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update excise record type.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_exciseRecordTypeStr">
    /// The excise record type string.
    /// </param>
    public static void updateExciseRecordType(TransTaxInformation _transTaxInformation, str _exciseRecordTypeStr)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            ExciseRecordType_IN exciseRecordType;
            _transTaxInformation.ExciseRecordType = str2Enum(exciseRecordType, _exciseRecordTypeStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseDSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update excise DSA.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_itemId">
    /// The invent item Id.
    /// </param>
    public static void updateExciseDSA(TransTaxInformation _transTaxInformation, ItemId _itemId)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && !TaxExciseTypeController_IN::isDSAAllowed(_transTaxInformation.ExciseType, _transTaxInformation.ExciseRecordType, _itemId))
        {
            _transTaxInformation.ExciseDSA = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update excise direct settlement.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_taxDirection">
    /// The tax direction.
    /// </param>
    public static void updateExciseDirectSettlement(TransTaxInformation _transTaxInformation, TaxDirection _taxDirection)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && !TaxExciseTypeController_IN::isDirectSettlementAllowed(
                _transTaxInformation.ExciseType, _transTaxInformation.ExciseRecordType, _taxDirection))
        {
            _transTaxInformation.ExciseDirectSettlement = DirectSettlement_IN::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseCENVATCreditAvailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update excise CEN VAT credit availed.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    public static void updateExciseCENVATCreditAvailed(TransTaxInformation _transTaxInformation)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && (_transTaxInformation.ExciseDirectSettlement != DirectSettlement_IN::PLA
                || _transTaxInformation.ExciseRecordType != ExciseRecordType_IN::RG23C))
        {
            _transTaxInformation.ExciseCENVATCreditAvailed = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the record Id for each type of TaxRegistrationNumbers.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// The tax registration numbers.
    /// </returns>
    public static TaxRegistrationNumbers_IN getTaxRegistrationNumbers(TransTaxInformation _transTaxInformation, TaxType_IN _taxType)
    {
        RecId taxRegistrationNumberRefRecId;

        switch (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && _taxType)
        {
            case TaxType_IN::Customs :
                taxRegistrationNumberRefRecId = _transTaxInformation.CustomsIECRegistrationNumber;
                break;

            case TaxType_IN::Excise :
                taxRegistrationNumberRefRecId = _transTaxInformation.ExciseECCRegistrationNumber;
                break;

            case TaxType_IN::ServiceTax :
                taxRegistrationNumberRefRecId = _transTaxInformation.ServiceTaxRegistrationNumber;
                break;

            case TaxType_IN::VAT:
                taxRegistrationNumberRefRecId = _transTaxInformation.VATTIN;
                break;

            case TaxType_IN::SalesTax :
                taxRegistrationNumberRefRecId = _transTaxInformation.SalesTaxRegistrationNumber;
                break;

            case TaxType_IN::GST :
                taxRegistrationNumberRefRecId = _transTaxInformation.GSTIN;
                break;

            default :
                break;
        }

        return TaxRegistrationNumbers_IN::find(taxRegistrationNumberRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomsTariffCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the customs tariff code to see if it is valid.
    /// </summary>
    /// <param name="_customsTariffCodeTableRecId">
    /// The customs tariff code table rec id.
    /// </param>
    /// <param name="_direction">
    /// The tariff direction.
    /// </param>
    /// <param name="_companyId">
    /// The company id information.
    /// </param>
    /// <returns>
    /// Returns true if the customs tariff code is valid.
    /// </returns>
    public static boolean checkCustomsTariffCode(
        RefRecId      _customsTariffCodeTableRecId,
        Direction_IN  _direction,
        CompanyId     _companyId = curext())
    {
        boolean              ret = true;
        CustomsTariffCode_IN customsTariffCode;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            changecompany(_companyId)
            {
                customsTariffCode = CustomsTariffCodeTable_IN::find(_customsTariffCodeTableRecId).TariffCode;

                if (customsTariffCode && !CustomsTariffCodeTable_IN::exist(customsTariffCode, _direction))
                {
                    ret = checkFailed(strfmt("@GLS5200", customsTariffCode, _direction));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMaximumRetailPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether MaximumRetailPrice is positive.
    /// </summary>
    /// <param name="_maximumRetailPrice">
    /// maximum retail price which has to checked.
    /// </param>
    /// <returns>
    /// Returns true if maximumretail price is greater than or equal to zero; otherwise false.
    /// </returns>
    public static boolean checkMaximumRetailPrice(MaximumRetailPrice_IN  _maximumRetailPrice)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return (_maximumRetailPrice >= 0) ? true : false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromNonProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax information transaction.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The buffer of tax information.
    /// </param>
    /// <param name="_sourceTable">
    /// The buffer of source table.
    /// </param>
    /// <param name="_type">
    /// Transaction tax information type.
    /// </param>
    /// <param name="_itemId">
    /// The item id information.
    /// </param>
    /// <param name="_taxModelTaxable">
    /// The tax model taxable information.
    /// </param>
    protected void initFromNonProjTable(
        TransTaxInformation         _transTaxInformation,
        Common                      _sourceTable,
        TransTaxInformationType_IN  _type,
        ItemId						_itemId,
        TaxModelTaxable				_taxModelTaxable)
    {
        next initFromNonProjTable(_transTaxInformation, _sourceTable, _type, _itemId, _taxModelTaxable);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {            
            TransTaxInformationHelper::initDefaultInclTax(_transTaxInformation, _sourceTable);

            TransTaxInformationHelper::initDefaultCustomsTariffDirection(_transTaxInformation, _sourceTable);

            // This Exempt defaulting logic feature is limited to stock transfer for now
            if (_sourceTable.TableId == tableNum(InventTransferLine))
            {
                InventTransferLine inventTransferLine = _sourceTable;
                InventTransferTable inventTransferTable = inventTransferLine.inventTransferTable();
                if (_transTaxInformation.Exempt == NoYes::No
                        && inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer)
                {
                    _transTaxInformation.Exempt = inventTransferTable.Exempt_IN;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultCustVendTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default tax information from customer or vendor.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The customer or vendor.
    /// </param>
    public static void initDefaultCustVendTaxInformation(TransTaxInformation  _transTaxInformation, CustVendTable _custVendTable)
    {
        next initDefaultCustVendTaxInformation(_transTaxInformation, _custVendTable);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            switch (_custVendTable.TableId)
            {
                case tableNum(VendTable) :
                    TaxInformationVendTable_IN taxInformationVendTable_IN = TaxInformationVendTable_IN::findByVendTable(_custVendTable.AccountNum);
                    _transTaxInformation.TaxWithholdNatureOfAssessee = taxInformationVendTable_IN.NatureOfAssessee;
                    _transTaxInformation.ApplyGSTTDS = taxInformationVendTable_IN.ApplyGSTTDS;
                    _transTaxInformation.ApplyGSTTCS = taxInformationVendTable_IN.ApplyGSTTCS;
                    break;

                case tableNum(CustTable) :
                    TaxInformationCustTable_IN taxInformationCustTable_IN = TaxInformationCustTable_IN::findByCustTable(_custVendTable.AccountNum);
                    _transTaxInformation.CustomsExportOrder = taxInformationCustTable_IN.IsForeign;
                    _transTaxInformation.TaxWithholdNatureOfAssessee = taxInformationCustTable_IN.NatureOfAssessee;
                    if (taxInformationCustTable_IN.CustomerType == CustomerType_IN::GovtCompanyOrOtherAgencies)
                    {
                        _transTaxInformation.ApplyGSTTDS = NoYes::Yes;
                        _transTaxInformation.ApplyGSTTCS = NoYes::No;
                    }
                    else if (taxInformationCustTable_IN.CustomerType == CustomerType_IN::ECommerceOperator)
                    {
                        _transTaxInformation.ApplyGSTTDS = NoYes::No;
                        _transTaxInformation.ApplyGSTTCS = NoYes::Yes;
                    }
                    else
                    {
                        _transTaxInformation.ApplyGSTTDS = NoYes::No;
                        _transTaxInformation.ApplyGSTTCS = NoYes::No;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default InclTax field to relevant transaction.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The buffer of tax information.
    /// </param>
    /// <param name="_sourceTable">
    /// The buffer of source table.
    /// </param>
    private static void initDefaultInclTax(TransTaxInformation _transTaxInformation, Common _sourceTransTable)
    {
        #define.FieldForInclTax('InclTax')
        #define.FieldForGLInclTax('LedgerJournalInclTax')

        SalesParmTable                      salesParmTable;
        PurchParmTable                      purchParmTable;
        VendInvoiceInfoTable                vendInvoiceInfoTable;
        PurchRFQReplyTable                  purchRFQReplyTable;
        PurchRFQParmTable                   purchRFQParmTable;
        SalesQuotationParmTable             salesQuotationParmTable;
        Common                              sourceHeaderTable;
        SalesPurchJournalTable              headerTable = _sourceTransTable.SalesPurchJournalLine::salesPurchJournalTable();
        SysDictField                        sysDictFieldForInclTax;
        TaxEngineLedgerJournalTransHeader   taxEngineLedgerJournalTransHeader;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && headerTable.SourceTableId)
        {
            switch (headerTable.SourceTableId)
            {
                case tableNum(SalesParmTable):
                    salesParmTable = headerTable;
                    sourceHeaderTable = salesParmTable.salesTable();
                    break;

                case tableNum(PurchParmTable):
                    purchParmTable = headerTable;
                    sourceHeaderTable = purchParmTable.purchTable();
                    break;

                case tableNum(VendInvoiceInfoTable):
                    vendInvoiceInfoTable = headerTable;
                    sourceHeaderTable =  vendInvoiceInfoTable.purchTable();
                    break;

                case tableNum(PurchRFQReplyTable):
                    purchRFQReplyTable = headerTable;
                    sourceHeaderTable = purchRFQReplyTable.purchRFQTable();
                    break;

                case tableNum(PurchRFQParmTable):
                    purchRFQParmTable = headerTable;
                    sourceHeaderTable = purchRFQParmTable.purchRFQTable();
                    break;

                case tableNum(SalesQuotationParmTable):
                    salesQuotationParmTable = headerTable;
                    sourceHeaderTable = salesQuotationParmTable.salesQuotationTable();
                    break;

                case tableNum(TaxEngineLedgerJournalTransHeader):
                    taxEngineLedgerJournalTransHeader = headerTable;
                    sourceHeaderTable = LedgerJournalTable::find(taxEngineLedgerJournalTransHeader.JournalNum);
                    break;

                default:
                    sourceHeaderTable = headerTable;
                    break;
            }

            if (sourceHeaderTable.TableId == tableNum(LedgerJournalTable))
            {
                LedgerJournalTable ledgerJournalTable = sourceHeaderTable;
                InclTax journalInclTax = ledgerJournalTable.LedgerJournalInclTax;
                LedgerJournalTrans ledgerJournalTrans;
                InclTax custVendInclTax;

                if (_sourceTransTable is LedgerJournalTrans)
                {
                    ledgerJournalTrans = _sourceTransTable;
                }
                else if (_sourceTransTable is LedgerJournalTrans_Project)
                {
                    // Consider ledgerJournalTrans_Project
                    ledgerJournalTrans = _sourceTransTable.ledgerJournalTrans();
                }

                // Consider the InclTax field when it is vender/customer 
                // The account and offset account type could not be vendor/customer at the same time in general journal
                if (ledgerJournalTrans && !journalInclTax)
                {
                    if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                    {
                        custVendInclTax = ledgerJournalTrans.findVendTable().InclTax;
                    }
                    else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                    {
                        custVendInclTax = ledgerJournalTrans.findCustTable().InclTax;
                    }
                    else if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                    {
                        custVendInclTax = ledgerJournalTrans.findVendForOffset().InclTax;
                    }
                    else if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
                    {
                        custVendInclTax = ledgerJournalTrans.findCustForOffset().InclTax;
                    }
                }

                _transTaxInformation.InclTax = custVendInclTax || journalInclTax;
            }
            else
            {
                sysDictFieldForInclTax = new SysDictField(sourceHeaderTable.TableId, fieldName2Id(sourceHeaderTable.TableId, #FieldForInclTax));

                if (sysDictFieldForInclTax)
                {
                    _transTaxInformation.InclTax = sourceHeaderTable.(fieldName2Id(sourceHeaderTable.TableId, #FieldForInclTax));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultCustomsTariffDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default CustomsTariffDirection field to relevant transaction.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The buffer of tax information.
    /// </param>
    /// <param name="_sourceTable">
    /// The buffer of source table.
    /// </param>
    private static void initDefaultCustomsTariffDirection(TransTaxInformation _transTaxInformation, Common _sourceTransTable)
    {
        SalesPurchJournalTable  headerTable = _sourceTransTable.SalesPurchJournalLine::salesPurchJournalTable();
        SalesTable              salesTable;
        PurchTable              purchTable;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && headerTable.SourceTableId)
        {
            switch (headerTable.SourceTableId)
            {
                case tableNum(PurchTable):
                    purchTable = headerTable;
                    if (purchTable.purchTable_W().CustomsImportOrder_IN)
                    {
                        _transTaxInformation.CustomsTariffDirection = Direction_IN::Import;
                    }
                    break;

                case tableNum(SalesTable):
                    salesTable = headerTable;
                    if (salesTable.CustomsExportOrder_IN)
                    {
                        _transTaxInformation.CustomsTariffDirection = Direction_IN::Export;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>