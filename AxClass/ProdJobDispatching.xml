<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJobDispatching</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdJobDispatching
{
    TmpProdRouteJobSched    prodRouteJobSched;

    ProdRouteJob         prodRouteJobCache;

    LineNum             lineNumMax;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteProdRouteJob</Name>
				<Source><![CDATA[
    void deleteProdRouteJob(ProdRouteJob prodRouteJob)
    {
        TmpProdRouteJobSched tmp;
        tmp.setTmpData(prodRouteJobSched);

        select tmp
            where tmp.JobId     == prodRouteJob.JobId;

        if (tmp.RecId)
            this.deleteTmp(tmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTmp</Name>
				<Source><![CDATA[
    void deleteTmp(TmpProdRouteJobSched tmp)
    {
        tmp.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    TransDate fromDate(TmpProdRouteJobSched tmp)
    {
        this.setProdRouteJobCache(tmp);
        return prodRouteJobCache.FromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromTime</Name>
				<Source><![CDATA[
    SchedTime fromTime(TmpProdRouteJobSched tmp)
    {
        this.setProdRouteJobCache(tmp);
        return prodRouteJobCache.FromTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpFromProdRouteJob</Name>
				<Source><![CDATA[
    void initTmpFromProdRouteJob(TmpProdRouteJobSched tmp, ProdRouteJob prodRouteJob)
    {
        tmp.ProdId      = prodRouteJob.ProdId;
        tmp.JobId       = prodRouteJob.JobId;
        tmp.Property    = prodRouteJob.PropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdRouteJob</Name>
				<Source><![CDATA[
    void insertProdRouteJob(ProdRouteJob prodRouteJob)
    {
        TmpProdRouteJobSched tmp;
        tmp.setTmpData(prodRouteJobSched);

        if (this.isProdInserted(prodRouteJob))
            throw error(strfmt("@SYS24916",prodRouteJob.ProdId));

        if (! this.isJobInserted(prodRouteJob))
        {
            this.initTmpFromProdRouteJob(tmp,prodRouteJob);

            lineNumMax += 1;

            tmp.LineNum = lineNumMax;

            tmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJobInserted</Name>
				<Source><![CDATA[
    boolean isJobInserted(ProdRouteJob prodRouteJob)
    {
        TmpProdRouteJobSched tmp;
        tmp.setTmpData(prodRouteJobSched);

        select tmp
            where tmp.JobId     == prodRouteJob.JobId;

        return (tmp.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProdInserted</Name>
				<Source><![CDATA[
    boolean isProdInserted(ProdRouteJob prodRouteJob)
    {
        TmpProdRouteJobSched tmp;
        tmp.setTmpData(prodRouteJobSched);

        select tmp
            where tmp.ProdId   == prodRouteJob.ProdId;

        return (tmp.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(TmpProdRouteJobSched _prodRouteJobSched)
    {
        prodRouteJobSched= _prodRouteJobSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleJobs</Name>
				<Source><![CDATA[
    void scheduleJobs(GanttClient _ganttClient = null)
    {
        ProdParmScheduling      prodParmScheduling;

        TmpProdRouteJobSched    tmp;
        ProdRouteJob            prodRouteJob;

        boolean                 first = true;

        TransDate schedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        Seconds schedTime = 0;

        tmp.setTmpData(prodRouteJobSched);

        ttsbegin;

        ProdMultiSchedulingJob detailScheduling = ProdMultiScheduling::newProdJobDispatching();
        detailScheduling.insertParmUpdate(detailScheduling.defaultParmUpdate());

        while select tmp
            order by LineNum
            where tmp.RecId != 0
        {
            select prodRouteJob
                where prodRouteJob.JobId == tmp.JobId;

            if (prodRouteJob.RecId)
            {
                prodParmScheduling.clear();
                detailScheduling.insert(prodRouteJob,prodParmScheduling);

                if (first)
                {
                    this.initProdParmScheduling(prodParmScheduling, ProdSchedDirection::ForwardFromSchedDate, schedDate, schedTime);
                    first = false;
                }
                else
                {
                    this.initProdParmScheduling(prodParmScheduling, ProdSchedDirection::ForwardFromPreviousJob, schedDate, schedTime);
                }
                prodParmScheduling.update();
            }
        }

        ttscommit;

        if (detailScheduling.prompt())
        {
            detailScheduling.runOperation();

            if (_ganttClient)
            {
                _ganttClient.reload();
            }
        }

        prodRouteJobCache = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdParmScheduling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProdParmScheduling</c> record.
    /// </summary>
    /// <param name = "_prodParmScheduling"> The record to be initialized. </param>
    /// <param name = "_prodSchedDirection"> The direction of the scheduling. </param>
    /// <param name = "_schedDate"> The date of the scheduling. </param>
    /// <param name = "_schedTime"> The time of the scheduling. </param>
    protected void initProdParmScheduling(ProdParmScheduling _prodParmScheduling, ProdSchedDirection _prodSchedDirection, TransDate _schedDate, Seconds _schedTime)
    {        
        _prodParmScheduling.SchedDirection   = _prodSchedDirection;
        _prodParmScheduling.SchedDate        = _schedDate;
        _prodParmScheduling.SchedTime        = _schedTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProdRouteJobCache</Name>
				<Source><![CDATA[
    void setProdRouteJobCache(TmpProdRouteJobSched tmp)
    {
        if (prodRouteJobCache.JobId != tmp.JobId)
            prodRouteJobCache = ProdRouteJob::findJobId(tmp.JobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortTmpDown</Name>
				<Source><![CDATA[
    void sortTmpDown(TmpProdRouteJobSched tmp)
    {
        TmpProdRouteJobSched    tmpNext;

        tmpNext.setTmpData(prodRouteJobSched);

        select tmpNext
            order by LineNum
            where tmpNext.LineNum > tmp.LineNum;

        if (tmpNext.RecId)
        {
            LineNum lineNum = tmp.LineNum;

            tmp.LineNum = tmpNext.LineNum;
            tmp.update();

            tmpNext.LineNum = lineNum;
            tmpNext.update();

            TmpProdRouteJobSched save = tmp.data();

            FormDataUtil::getFormDataSource(tmp).research();
            FormDataUtil::getFormDataSource(tmp).findRecord(save);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortTmpUp</Name>
				<Source><![CDATA[
    void sortTmpUp(TmpProdRouteJobSched tmp)
    {
        TmpProdRouteJobSched    tmpPrev;

        tmpPrev.setTmpData(prodRouteJobSched);

        select tmpPrev
            order by LineNum desc
            where tmpPrev.LineNum < tmp.LineNum;

        if (tmpPrev.RecId)
        {
            LineNum lineNum = tmp.LineNum;

            tmp.LineNum = tmpPrev.LineNum;
            tmp.update();

            tmpPrev.LineNum = lineNum;
            tmpPrev.update();

            TmpProdRouteJobSched save = tmp.data();

            FormDataUtil::getFormDataSource(tmp).research();
            FormDataUtil::getFormDataSource(tmp).findRecord(save);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    TransDate toDate(TmpProdRouteJobSched tmp)
    {
        this.setProdRouteJobCache(tmp);
        return prodRouteJobCache.ToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toTime</Name>
				<Source><![CDATA[
    SchedTime toTime(TmpProdRouteJobSched tmp)
    {
        this.setProdRouteJobCache(tmp);
        return prodRouteJobCache.ToTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrHours</Name>
				<Source><![CDATA[
    Hours wrkCtrHours(TmpProdRouteJobSched tmp)
    {
        this.setProdRouteJobCache(tmp);
        return prodRouteJobCache.SchedTimeHours;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>