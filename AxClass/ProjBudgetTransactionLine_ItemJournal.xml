<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetTransactionLine_ItemJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjBudgetTransactionLine_ItemJournal</c> class is used to hold the budget transaction
///    information associated with the item journal.
/// </summary>
class ProjBudgetTransactionLine_ItemJournal extends ProjBudgetTransactionLine
{
    InventJournalTrans  inventJournalTrans;
    CurrencyCode        salesCurrencyCode;
    ProjCategoryId      projCategoryId;
    ProjId              projId;
    TransDate           transDate;
    ProjTransIdBase     projTransId;
    ProjActivityNumber  activityNumber;
    ProjLinePropertyId  linePropertyId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the project activity number of the transaction.
    /// </summary>
    /// <returns>
    /// The project activity number of the transaction.
    /// </returns>
    public ProjActivityNumber activityNumber()
    {
        return activityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project category ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project category ID of the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total cost amount of the transaction.
    /// </summary>
    /// <returns>
    ///    The total cost amount.
    /// </returns>
    public CostAmount costAmount()
    {
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of the cost amount.
    /// </summary>
    /// <returns>
    ///    The currency code of the cost amount.
    /// </returns>
    public CurrencyCode costAmountCurrencyCode()
    {
        return Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project Line Property ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project Line Property ID of the transaction.
    /// </returns>
    public ProjLinePropertyId linePropertyId()
    {
        return linePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ProjBudgetTransactionLine_ItemJournal</c> class.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    A <c>InventJournalTrans</c> table buffer.
    /// </param>
    void new(InventJournalTrans _inventJournalTrans)
    {
        super();
        inventJournalTrans    = _inventJournalTrans;
        costAmount = CurrencyExchangeHelper::amount(inventJournalTrans.Qty * inventJournalTrans.CostPrice, Ledger::accountingCurrency(CompanyInfo::current()));
        salesAmount = CurrencyExchangeHelper::amount(inventJournalTrans.ProjSalesPrice * inventJournalTrans.Qty, inventJournalTrans.ProjSalesCurrencyId);
        salesCurrencyCode = inventJournalTrans.ProjSalesCurrencyId;
        projCategoryId = inventJournalTrans.ProjCategoryId;
        projId = inventJournalTrans.ProjId;
        transDate = inventJournalTrans.TransDate;
        projTransId = inventJournalTrans.ProjTransId;
        quantity = inventJournalTrans.Qty;
        activityNumber = inventJournalTrans.ActivityNumber;
        linePropertyId = inventJournalTrans.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project ID of the transaction.
    /// </returns>
    public ProjId projId()
    {
        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sales amount of the transaction after currency conversion.
    /// </summary>
    /// <returns>
    ///    The sales amount.
    /// </returns>
    public SalesAmount salesAmount()
    {
        return salesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of the sales amount.
    /// </summary>
    /// <returns>
    ///    The currency code of the sales amount.
    /// </returns>
    public CurrencyCode salesAmountCurrencyCode()
    {
        return salesCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction date of the transaction.
    /// </summary>
    /// <returns>
    ///    The transaction date of the transaction.
    /// </returns>
    public TransDate transDate()
    {
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The transaction ID of the transaction.
    /// </returns>
    public ProjTransIdBase transId()
    {
        return projTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction type of the transaction line.
    /// </summary>
    /// <returns>
    ///    An <c>ItemType</c> enumeration value that represents the transaction type.
    /// </returns>
    public ProjTransType transType()
    {
        return ProjTransType::Item;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>