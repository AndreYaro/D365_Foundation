<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmIFolder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents a basic outlook folder.
/// </summary>
interface SmmIFolder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAppointment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>smmIAppointment</c> instance for a new appointment.
    /// </summary>
    /// <returns>
    /// The <c>smmIAppointment</c> created.
    /// </returns>
    smmIAppointment createAppointment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>smmIOutlookContact</c> instance for a new contact.
    /// </summary>
    /// <returns>
    /// The <c>smmIOutlookContact</c> created.
    /// </returns>
    smmIContact createContact()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>smmIOutlookTask</c> instance for a new task.
    /// </summary>
    /// <returns>
    /// The <c>smmIOutlookTask</c> created.
    /// </returns>
    smmITask createTask()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default item type for the folder.
    /// </summary>
    /// <returns>
    /// A constant from the OlItemType enumeration indicating the default Outlook item type contained in the folder.
    /// </returns>
    int defaultItemType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>entryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the outlook entry id for the folder.
    /// </summary>
    /// <returns>
    /// The entry id.
    /// </returns>
    str entryId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllAppointments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the appointments between the start and end dates provided.
    /// </summary>
    /// <param name="start">
    /// The start date and time.
    /// </param>
    /// <param name="end">
    /// The end date and time.
    /// </param>
    /// <param name="outlookTimeZone">
    /// The outlook timezone.
    /// </param>
    /// <param name="includeRecurrences">
    /// True if it should include occurrences of recurring appointments; otherwise, false.
    /// </param>
    /// <returns>
    /// A list of <c>smmIAppointment</c>.
    /// </returns>
    public List getAllAppointments(TransDateTime start, TransDateTime end, Timezone outlookTimeZone, boolean includeRecurrences)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllContacts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the contacts stored in the folder.
    /// </summary>
    /// <returns>
    /// A list with all the contacts in this folder.
    /// </returns>
    public List getAllContacts()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the tasks from the folder.
    /// </summary>
    /// <returns>
    /// A list of <c>smmIOutlookTask</c> containing all the tasks in the folder.
    /// </returns>
    public List getAllTasks()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllTasksSinceLastSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the tasks updated or completed since the last synchronization.
    /// </summary>
    /// <param name="lastSyncDateTime">
    /// The datetime of the last synchronization.
    /// </param>
    /// <param name="outlookTimeZone">
    /// The timezone the outlook is working on.
    /// </param>
    /// <returns>
    /// A list of <c>smmIOutlookTask</c>.
    /// </returns>
    public List getAllTasksSinceLastSync(TransDateTime lastSyncDateTime, Timezone outlookTimeZone)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeletedFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this folder is a subfolder of the delete folder.
    /// </summary>
    /// <returns>
    /// True if this folder is a subfolder of the delete folder (or the delete folder itself);
    /// otherwise, false.
    /// </returns>
    boolean isDeletedFolder()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the folder's store id.
    /// </summary>
    /// <returns>
    /// The store id.
    /// </returns>
    str storeId()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>