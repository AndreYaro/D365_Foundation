<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCalendarCapacityHourSliceCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents a collection of capacity slices grouped by hour.
/// </summary>
class ResCalendarCapacityHourSliceCollection
{
    Map slicesByHour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        slicesByHour = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ResCalendarCapacityHourSliceCollection construct()
    {
        return new ResCalendarCapacityHourSliceCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSet</Name>
				<Source><![CDATA[
    public ResCalendarCapacityHourSliceCollection addSet(Set _slices)
    {
        if (_slices)
        {
            Enumerator sliceEnumerator = _slices.getEnumerator();

            while (sliceEnumerator.moveNext())
            {
                ResCalendarCapacityHourSlice slice = sliceEnumerator.current();
                this.add(slice);
            }
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumSliceForHour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a capacity sum of all slices within specified hour.
    /// </summary>
    /// <param name = "_hour">Hour of the day to get capacity slices for.</param>
    /// <returns>A capacity slice object holding a sum capacity value for hour specified.</returns>
    public ResCalendarCapacityHourSlice getSumSliceForHour(int _hour)
    {
        ResCalendarCapacityHourSlice aggregateSlice = this.createEmptySlice(_hour);

        Set capacitySlicesForHour = this.getSlicesForHour(_hour);
        if (capacitySlicesForHour)
        {
            Enumerator slicesEnumerator = capacitySlicesForHour.getEnumerator();
            while (slicesEnumerator.moveNext())
            {
                ResCalendarCapacityHourSlice slice = slicesEnumerator.current();
                 this.aggregateSum(aggregateSlice, slice);
            }
        }
        return aggregateSlice.normalize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmptySlice</Name>
				<Source><![CDATA[
    private ResCalendarCapacityHourSlice createEmptySlice(int _hour)
    {
        var slice = ResCalendarCapacityHourSlice::construct();
        slice.parmHour(_hour);
        return slice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateSum</Name>
				<Source><![CDATA[
    private void aggregateSum(ResCalendarCapacityHourSlice _aggregateSlice, ResCalendarCapacityHourSlice _current)
    {
        _aggregateSlice.addCapacity(_current);
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds slice to the collection.
    /// </summary>
    /// <param name = "_slice">Capacity slice to be added.</param>
    /// <returns>Instance of self.</returns>
    public ResCalendarCapacityHourSliceCollection add(ResCalendarCapacityHourSlice _slice)
    {
        if (_slice)
        {
            this.addSliceToHourGroup(slicesByHour, _slice.parmHour(), _slice);
        }
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSlicesForHour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a collection of capacity slices for specified hour.
    /// </summary>
    /// <param name = "_hour">Hour of the day to get capacity slices for.</param>
    /// <returns>A collection of capacity slices for specified hour.</returns>
    public Set getSlicesForHour(int _hour)
    {
        Set slicesGroup;

        if (slicesByHour.exists(_hour))
        {
            slicesGroup = slicesByHour.lookup(_hour);
        }

        return slicesGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSliceToHourGroup</Name>
				<Source><![CDATA[
    private void addSliceToHourGroup(Map _slicesByHour, int _hour, ResCalendarCapacityHourSlice _slice)
    {
        Set slicesGroup;

        if (_slicesByHour.exists(_hour))
        {
            slicesGroup = _slicesByHour.lookup(_hour);
        }
        else
        {
            slicesGroup = ResCalendarCapacityHourSlice::newSet();
            _slicesByHour.insert(_hour, slicesGroup);
        }

        if (!(slicesGroup.elements() > 0 && _slice.getCapacityValue() == 0))
        {
            slicesGroup.add(_slice);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
