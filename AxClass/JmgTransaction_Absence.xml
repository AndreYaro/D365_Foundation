<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTransaction_Absence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgTransaction_Absence</c> class allows the time and attendance to read and post changes to
///    the absence registrations.
/// </summary>
public class JmgTransaction_Absence extends JmgTransaction
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts changes made in the time and attendance back to the absence registrations.
    /// </summary>
    /// <param name="_jmgChangeLog">
    ///    A <c>JmgChangeLog</c> record, which contains the changes to post.
    /// </param>
    /// <param name="_jmgPostStandardSystem">
    ///    A reference to a <c>JmgPostStandardSystem</c> object, which can be used in the posting of the
    ///    changed transactions and is not used for absence registrations.
    /// </param>
    public void postChange(JmgChangeLog _jmgChangeLog, JmgPostStandardSystem _jmgPostStandardSystem)
    {
        JmgStampJournalTrans    changedTrans;
        JmgStampJournalTrans    originalTrans;
        JmgAbsenceCalendar      jmgAbsenceCalendar;

        con2Buf(_jmgChangeLog.ChangedTransaction, changedTrans);
        con2Buf(changedTrans.OriginalTransaction, originalTrans);
        switch (_jmgChangeLog.ChangeLogType)
        {
            case JmgChangeLogType::Insert:
                jmgAbsenceCalendar.initValue();
                jmgAbsenceCalendar.populateFromStampJournalTrans(changedTrans);
                jmgAbsenceCalendar.insert();
                break;
            case JmgChangeLogType::Update:
                if (originalTrans.JobId     != changedTrans.JobId       ||
                    originalTrans.StartDate != changedTrans.StartDate   ||
                    originalTrans.StartTime != changedTrans.StartTime   ||
                    originalTrans.StopDate  != changedTrans.StopDate    ||
                    originalTrans.StopTime  != changedTrans.StopTime    ||
                    originalTrans.Seconds   != changedTrans.Seconds)
                {
                    if (originalTrans.JourRegType   == JmgJourRegTypeEnum::Absence)
                    {
                        select firstonly forupdate jmgAbsenceCalendar
                            where jmgAbsenceCalendar.Worker             == originalTrans.Worker &&
                                  jmgAbsenceCalendar.Seconds            == originalTrans.Seconds &&
                                  jmgAbsenceCalendar.JobId              == (originalTrans.JobIDAbs ? originalTrans.JobIDAbs : originalTrans.JobId)  &&
                                  jmgAbsenceCalendar.FromDateTime       == DateTimeUtil::newDateTime(originalTrans.StartDate, originalTrans.StartTime, DateTimeUtil::getUserPreferredTimeZone()) &&
                                  jmgAbsenceCalendar.ToDateTime         == DateTimeUtil::newDateTime(originalTrans.StopDate, originalTrans.StopTime, DateTimeUtil::getUserPreferredTimeZone())   &&
                                  jmgAbsenceCalendar.CalculationTrans   == NoYes::Yes;
                    }
                    if (changedTrans.JourRegType    == JmgJourRegTypeEnum::Absence)
                    {
                        jmgAbsenceCalendar.populateFromStampJournalTrans(changedTrans);
                        jmgAbsenceCalendar.write();
                    }
                    else
                    {
                        jmgAbsenceCalendar.delete();
                    }
                }
                break;
            case JmgChangeLogType::Delete:
                delete_from jmgAbsenceCalendar
                      where jmgAbsenceCalendar.Worker             == changedTrans.Worker &&
                            jmgAbsenceCalendar.Seconds            == changedTrans.Seconds &&
                            jmgAbsenceCalendar.JobId              == (changedTrans.JobIDAbs ? changedTrans.JobIDAbs : changedTrans.JobId)  &&
                            jmgAbsenceCalendar.FromDateTime       == DateTimeUtil::newDateTime(changedTrans.StartDate, changedTrans.StartTime, DateTimeUtil::getUserPreferredTimeZone()) &&
                            jmgAbsenceCalendar.ToDateTime         == DateTimeUtil::newDateTime(changedTrans.StopDate, changedTrans.StopTime, DateTimeUtil::getUserPreferredTimeZone())   &&
                            jmgAbsenceCalendar.CalculationTrans   == NoYes::Yes;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JmgTransaction_Absence construct()
    {
        return new JmgTransaction_Absence();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>