<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCouponPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRCouponPost</c> class calculates and posts coupons.
/// </summary>
class MCRCouponPost
{
    LedgerVoucher           ledgerVoucher;
    MCRCouponAmount         mcrCouponAmount;
    MCRCoupon              mcrCoupon;
    MCRCouponCustomer     mcrCouponCustomer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the highest possible discount the coupon can give to an individual customer
    ///     and then multiplies it by the number of customers that can use the coupon, and returns that amount.
    /// </summary>
    /// <returns>
    /// The highest discount amount of the coupon multiplied by the number of customers that can use the coupon.
    /// </returns>
    MCRCouponAmount calcAmount()
    {
        MCRCouponAmount mcrCouponAmounttemp;
        // get the coupon value
        mcrCouponAmounttemp = MCRCouponDiscount::findLargestAmount(mcrCoupon.MCRCouponId);
        // multiply the coupon calue with the number of customers
        mcrCouponAmounttemp = mcrCouponAmounttemp * this.calcNumCustomers();
        return mcrCouponAmounttemp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total number of customers that can use this coupon.
    /// </summary>
    /// <returns>
    /// The total number of customers that can use this coupon.
    /// </returns>
    int calcNumCustomers()
    {
        int numCustomers;
        MCRCouponCustomer  mcrCouponCustomerSelect, mcrCouponCustomerTemp;
        CustTable           custTable;

        // If there is one record that is set to TableGroupAll::All get the total number of customers
        select firstonly mcrCouponCustomerSelect
        where mcrCouponCustomerSelect.MCRCouponId == mcrCoupon.MCRCouponId
            && mcrCouponCustomerSelect.CustomerCode == TableGroupAll::All
            && mcrCouponCustomerSelect.MCRCouponVoided == NoYes::No
            && (mcrCouponCustomerSelect.RecId == mcrCouponCustomer.RecId || !mcrCouponCustomer);

        if (mcrCouponCustomerSelect)
        {
            // Exclude merged customers
            numCustomers += int642int((select count(RecId) from custTable where !custTable.MCRMergedParent).RecId);

            // Excl. customers group specific records
            while select CustVendRel from mcrCouponCustomerTemp
            where mcrCouponCustomerTemp.RecId != mcrCouponCustomerSelect.RecId
                && mcrCouponCustomerTemp.MCRCouponId == mcrCouponCustomerSelect.MCRCouponId
                && mcrCouponCustomerTemp.CustomerCode == TableGroupAll::GroupId

            {
                numCustomers -= int642int((select count(RecId)
                                from custTable
                                where !custTable.MCRMergedParent
                                    && custtable.CustGroup == mcrCouponCustomerTemp.CustVendRel).RecId);
                // Add the individually setup customer records back
                numCustomers += this.numCustPerGroup(mcrCouponCustomerSelect);
            }
            numCustomers -= this.numCustRecords(mcrCouponCustomerSelect);
        }
        else
        {
            // Count all customers with the groups and
            // add all customers that are not part of the group
            while select mcrCouponCustomerSelect
                where   mcrCouponCustomerSelect.MCRCouponId == mcrCoupon.MCRCouponId
                    && mcrCouponCustomerSelect.CustomerCode == TableGroupAll::GroupId
                    && mcrCouponCustomerSelect.MCRCouponVoided == NoYes::No
                    && (mcrCouponCustomerSelect.RecId == mcrCouponCustomer.RecId
                    || !mcrCouponCustomer.RecId)
            {
                numCustomers += int642int((   select count(RecId)
                                    from custTable
                                    // Exclude merged customers
                                    where !custTable.MCRMergedParent && custtable.CustGroup == mcrCouponCustomerSelect.CustVendRel).RecId); // Count

                // Excl. customers specific records
                numCustomers -= this.numCustPerGroup(   mcrCouponCustomerSelect   );
                numCustomers -= this.countCouponUsed(mcrCouponCustomerSelect);
            }
            // Add all customer that are setup individually, but are not incl in groups
            while select mcrCouponCustomerSelect
                where   mcrCouponCustomerSelect.MCRCouponId == mcrCoupon.MCRCouponId
                    && mcrCouponCustomerSelect.CustomerCode == TableGroupAll::Table
                    && mcrCouponCustomerSelect.MCRCouponVoided == NoYes::No
                    && (mcrCouponCustomerSelect.RecId == mcrCouponCustomer.RecId
                    || !mcrCouponCustomer.RecId)
                join        mcrMergedParent, AccountNum from    custTable
                where  !custTable.MCRMergedParent
                && custTable.AccountNum == mcrCouponCustomerSelect.CustVendRel
                {
                    numCustomers ++;
                    numCustomers -= this.countCouponUsed(mcrCouponCustomerSelect);
                }
        }
        return numCustomers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countCouponUsed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the number of times a one time use coupon was used for
    ///     the customer coupon record that is being voided.
    /// </summary>
    /// <param name="_mcrCouponCustomerInvoice">
    /// The coupon customer invoice record that contains the coupon ID to calculate.
    /// </param>
    /// <returns>
    /// The number of times a one time use coupon was used for
    ///     the customer coupon record that is being voided.
    /// </returns>
    int countCouponUsed( MCRCouponCustomer _mcrCouponCustomerInvoice)
    {
        int numCustomers;
        MCRCouponCustomer mcrCouponCustomerNotExist;
        CustTable custTable;
        MCRCouponSalesTable mcrCouponSalesTable;

        switch (_mcrCouponCustomerInvoice.CustomerCode)
        {
            case TableGroupAll::All:
                select count(RecId)
                        from    mcrCouponSalesTable
                        where   mcrCouponSalesTable.MCRCouponId == _mcrCouponCustomerInvoice.MCRCouponId
                            && mcrCouponSalesTable.MCRReissue == NoYes::No
                            && mcrCouponSalesTable.MCRLiabilityDeducted == NoYes::Yes
                        // Exclude merged customers
                        exists join custTable
                        where custTable.AccountNum == mcrCouponSalesTable.CustAccount
                            && !custTable.MCRMergedParent;

                numCustomers = int642int(mcrCouponSalesTable.RecId);
                break;

            case TableGroupAll::GroupId:
                select count(RecId)
                        from  mcrCouponSalesTable
                        where mcrCouponSalesTable.MCRCouponId == _mcrCouponCustomerInvoice.MCRCouponId
                            && mcrCouponSalesTable.MCRReissue == NoYes::No
                            && mcrCouponSalesTable.MCRLiabilityDeducted == NoYes::Yes
                        exists join custTable
                        where custTable.AccountNum == mcrCouponSalesTable.CustAccount
                            && custTable.CustGroup == _mcrCouponCustomerInvoice.CustVendRel
                            && !custTable.MCRMergedParent
                        notexists join  mcrCouponCustomerNotExist
                        where mcrCouponCustomerNotExist.CustomerCode == TableGroupAll::Table
                            && mcrCouponCustomerNotExist.CustVendRel == custTable.AccountNum
                            && mcrCouponCustomerNotExist.MCRCouponId == _mcrCouponCustomerInvoice.MCRCouponId  ;

                numCustomers = int642int(mcrCouponSalesTable.RecId);
                break;

            case TableGroupAll::Table:
                select count(RecId)
                        from    mcrCouponSalesTable
                        where   mcrCouponSalesTable.MCRCouponId == _mcrCouponCustomerInvoice.MCRCouponId
                            && mcrCouponSalesTable.MCRReissue == NoYes::No
                            && mcrCouponSalesTable.MCRLiabilityDeducted == NoYes::Yes
                            && mcrCouponSalesTable.CustAccount == _mcrCouponCustomerInvoice.CustVendRel;

                numCustomers = int642int(mcrCouponSalesTable.RecId);
                break;

            default:
                break;
        }
        return numCustomers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>MCRCouponPost</c> object.
    /// </summary>
    /// <param name="_mcrCoupon">
    /// The coupon record to set on the <c>MCRCouponPost</c> object.
    /// </param>
    void new(MCRCoupon _mcrCoupon)
    {
        this.parmCoupons(_mcrCoupon);
        this.parmMCRCouponAmount(this.calcAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>numCustPerGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total number of customers setup for this coupon customer group.
    /// </summary>
    /// <param name="_mcrCouponCustomer">
    /// The coupon customer record to use to evaluate the number of customers setup.
    /// </param>
    /// <returns>
    /// The total number of customers setup for this coupon customer group.
    /// </returns>
    int  numCustPerGroup(   MCRCouponCustomer _mcrCouponCustomer)
    {
        int                     numCustomers;
        MCRCouponCustomer     mcrCouponCustomerTempAll;

        CustTable           custTable;
         // Add all customers for the group back in that are setup individually
        // Those customers are included in the TableGroupAll::Table calculation.
        select count(RecId)
            from    mcrCouponCustomerTempAll
            where   mcrCouponCustomerTempAll.RecId        != _mcrCouponCustomer.RecId
                && mcrCouponCustomerTempAll.MCRCouponId == _mcrCouponCustomer.MCRCouponId
                && mcrCouponCustomerTempAll.CustomerCode == TableGroupAll::Table
            exists join custTable
                where custTable.CustGroup == _mcrCouponCustomer.CustVendRel
                    && custTable.AccountNum == mcrCouponCustomerTempAll.CustVendRel;

        numCustomers = int642int(mcrCouponCustomerTempAll.RecId);

        return numCustomers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numCustRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total number of customers setup for this coupon.
    /// </summary>
    /// <param name="_mcrCouponCustomer">
    /// The coupon customer record to use to evaluate the number of customers setup.
    /// </param>
    /// <returns>
    /// The total number of customers setup for this coupon.
    /// </returns>
    int numCustRecords(MCRCouponCustomer _mcrCouponCustomer)
    {
        int                 numCustomers;
        MCRCouponCustomer mcrCouponCustomerTempAll;
        CustTable           custTable;

        // Excl. customers specific records
        select count(RecId)
            from    mcrCouponCustomerTempAll
            where   mcrCouponCustomerTempAll.RecId        != _mcrCouponCustomer.RecId
                && mcrCouponCustomerTempAll.MCRCouponId == _mcrCouponCustomer.MCRCouponId
                && mcrCouponCustomerTempAll.CustomerCode == TableGroupAll::Table
            exists join custTable
                where !custTable.MCRMergedParent
                    && custTable.AccountNum == _mcrCouponCustomer.CustVendRel;
        numCustomers = int642int(mcrCouponCustomerTempAll.RecId);
        return numCustomers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCoupons</Name>
				<Source><![CDATA[
    MCRCoupon parmCoupons(MCRCoupon _mcrCoupon = mcrCoupon)
    {
        mcrCoupon = _mcrCoupon;
        return mcrCoupon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRCouponAmount</Name>
				<Source><![CDATA[
    MCRCouponAmount parmMCRCouponAmount(MCRCouponAmount _mcrCouponAmount = mcrCouponAmount)
    {
        mcrCouponAmount = _mcrCouponAmount;
        return mcrCouponAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRCouponCustomer</Name>
				<Source><![CDATA[
    MCRCouponCustomer parmMCRCouponCustomer( MCRCouponCustomer _mcrCouponCustomer = mcrCouponCustomer)
    {
        mcrCouponCustomer = _mcrCouponCustomer;
        return mcrCouponCustomer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the coupon amount to the ledger journal.
    /// </summary>
    /// <returns>true if success, otherwise false</returns>
    boolean post()
    {
        NumberSeq               numberSeq;
        InventJournalVoucherId  voucherId;
        LedgerVoucherObject     oledgerVoucherObject;
        TransactionTxt          transactionTxt;
        MCRCouponAmount         postAmount;
        MCROrderParameters      mcrOrderParameters = MCROrderParameters::find();
        CompanyInfo             companyInfo = CompanyInfo::find(false);
        LedgerVoucherObject     ledgerVoucherObject;
        CurrencyExchangeHelper  currencyExchHelper;
        DimensionDynamicAccount dimensionDynamicAccount;
        MainAccount             mainAccount;
        boolean                 ok = true;

        // Validate the coupon and see if the coupon can be posted to the liability account.
        ok = this.validatePost();

        if (ok)
        {
            // Calculate the posting amount. Do not post zero amounts
            postAmount = this.parmMCRCouponAmount();

            // Multiply the coupon amount by the redemption rate
            postAmount = postAmount * mcrCoupon.mcrCouponRedemptionRate/ 100;
        }

        if (postAmount > 0)
        {
            ttsBegin;
            numberSeq = NumberSeq::newGetNum(SalesParameters::numRefSalesInvoiceVoucher());
            voucherId = numberSeq.num();
            transactionTxt = TransactionTxt::construct();
            transactionTxt.setType(LedgerTransTxt::MCRSalesOrderCouponInvoice);
            transactionTxt.setDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
            transactionTxt.setVoucher(voucherId);

            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary, SysModule::Sales, numberSeq.parmNumberSequenceCode());
            oledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherId, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), SysModule::Sales, LedgerTransType::Sales);
            oledgerVoucherObject.lastTransTxt(transactionTxt.txt());
            ledgerVoucher.addVoucher(oledgerVoucherObject);

            ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject(voucherId, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

            if (ledgerVoucherObject == null)
            {
                // create a new ledger posting reference for the reference number + accounting date
                ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherId, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), ledgerVoucher.parmSysModuleDefault());
                ledgerVoucher.addVoucher(ledgerVoucherObject);
            }

            currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

            mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(mcrOrderParameters.CouponLiabilityLedgerDimension);
            dimensionDynamicAccount = MCRAssistantLedgerDimension::mergeAccountAndDimension(mainAccount.RecId, 0);

            ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                                oledgerVoucherObject,
                                                LedgerPostingType::CustRevenue,
                                                dimensionDynamicAccount,
                                                Ledger::accountingCurrency(companyInfo.RecId),
                                                -postAmount,
                                                currencyExchHelper));

            mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(mcrOrderParameters.CouponDiscountLedgerDimension);
            dimensionDynamicAccount = MCRAssistantLedgerDimension::mergeAccountAndDimension(mainAccount.RecId, 0);

            ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                                oledgerVoucherObject,
                                                LedgerPostingType::CustRevenue,
                                                dimensionDynamicAccount,
                                                Ledger::accountingCurrency(companyInfo.RecId),
                                                postAmount,
                                                currencyExchHelper));

            ok = ledgerVoucher.end();

            ttsCommit;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the coupon before posting accruals.
    /// </summary>
    /// <returns>
    /// true if the coupon is valid; otherwise, false.
    /// </returns>
    boolean validatePost()
    {
        boolean ok = true;

        // The System parameter needs to be set to allow accruals
        if (!MCROrderParameters::find().CouponAccruals)
        {
            ok = checkFailed("@MCR26077");
        }

        ok = MCRCouponPost::isCouponElegibleForAccrualPosting(mcrCoupon);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCouponElegibleForAccrualPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if coupon is eligible for accrual posting and accrual posting is turned on.
    /// </summary>
    /// <returns>true if eligible; false otherwise.</returns>
    public static boolean isCouponElegibleForAccrualPosting(MCRCoupon coupon, boolean showMessages = false)
    {
        boolean ok = true;

        // The System parameter needs to be set to allow accruals
        if (!MCROrderParameters::find().CouponAccruals)
        {
            ok = false;

            if (showMessages)
            {
                warning("@MCR26077");
            }
        }

        // Only one time use coupons are eligible for accrual posting.
        if (!coupon.MCROneTimeUse)
        {
            ok = false;
        }

        // Only customer specific coupons are eligible for accrual posting.
        if (!coupon.MCRCustomerSpecific)
        {
            ok = false;
        }

        // The coupon should be enabled.
        if (!coupon.MCREnabled)
        {
            ok = false;
        }

        // The coupon should not have been voided.
        if (coupon.MCRCouponVoided)
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>