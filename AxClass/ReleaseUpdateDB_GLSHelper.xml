<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB_GLSHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReleaseUpdateDB_GLSHelper</c> class is an upgrade helper class that describes whether the
/// current upgrade is from a specific GLS layer.
/// </summary>
class ReleaseUpdateDB_GLSHelper
{
    UnknownNoYes    isUpgradingFromGLS_EE;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isUpgradingFromGLS_EE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the current upgrade is from a GLS EE version.
    /// </summary>
    /// <returns>
    /// true if upgrading from the GLS EE versions; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isUpgradingFromGLS_EE()
    {
        if (isUpgradingFromGLS_EE == UnknownNoYes::Unknown)
        {
            if ((select firstonly RecId
                    from releaseUpdateTransformTable
                    where releaseUpdateTransformTable.SourceTableName == 'ADDRESSFLATNUMBER_RU' &&
                          releaseUpdateTransformTable.ShadowTableName == 'SHADOW_ADDRESSFLATNUMBER_RU').RecId != 0)
            {
                isUpgradingFromGLS_EE = UnknownNoYes::Yes;
            }
            else
            {
                isUpgradingFromGLS_EE = UnknownNoYes::No;
            }
        }
        return isUpgradingFromGLS_EE == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReleaseUpdateDB_GLSHelper construct()
    {
        return new ReleaseUpdateDB_GLSHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callInsertUpdateRelatedSkipMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>skip</c> methods that are relevant when doing inserts or updates.
    /// </summary>
    /// <param name="_buffer">
    /// The buffer on which to call the methods.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void callInsertUpdateRelatedSkipMethods(Common _buffer)
    {
        //BP deviation documented
        _buffer.skipAosValidation(true);
        _buffer.skipDatabaseLog(true);
        _buffer.skipDataMethods(true);
        //needed in case of crossCompany
        _buffer.skipEvents(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableExistsInDB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check specified table exists in database or not
    /// </summary>
    /// <param name = "_tableNameAOT">table name in AOT</param>
    /// <returns>
    /// Returns true if exists, otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean tableExistsInDB(TableName _tableNameAOT)
    {
        SqlDictionary sqlDictionary;
        
        select firstonly RecId from sqlDictionary
            where sqlDictionary.name == _tableNameAOT
            && sqlDictionary.fieldId == 0;

        return sqlDictionary.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldExistsInDB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check specified field exists in database or not
    /// </summary>
    /// <param name = "_tableName">table name in SQL</param>
    /// <param name = "_fieldName">field name in SQL</param>
    /// <returns>
    /// Returns true if exists, otherwise false
    /// </returns>
    public static boolean tableFieldExistsInDB(TableName _tableName, FieldName _fieldName)
    {
        str fieldExistsSQL = strFmt(
            'SELECT count(COLUMN_NAME) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = \'%1\' AND COLUMN_NAME = \'%2\'',
            strUpr(_tableName),
            strUpr(_fieldName));
        Connection sessionConn = new Connection();
        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(fieldExistsSQL).assert();
        ResultSet fieldExistsResult = statement.executeQueryWithParameters(fieldExistsSQL, SqlParams::create());
        CodeAccessPermission::revertAssert();

        fieldExistsResult.next();
        int fieldExists = fieldExistsResult.getInt(1);
        return fieldExists > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceTableField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace table field.
    /// </summary>
    /// <param name = "_tableName">The table name.</param>
    /// <param name = "_oldFieldName">The old field name.</param>
    /// <param name = "_newFieldName">The new field name.</param>
    public static void replaceTableField(str _tableName, str _oldFieldName, str _newFieldName)
    {
        if (!ReleaseUpdateDB_GLSHelper::tableExistsInDB(_tableName)
            || !ReleaseUpdateDB_GLSHelper::tableFieldExistsInDB(_tableName, _oldFieldName))
        {
            return;
        }

        if (ReleaseUpdateDB_GLSHelper::tableFieldExistsInDB(_tableName, _newFieldName))
        {
            // for additive table sync model, new fields will be created before running presync scripts, so no need to do field rename,
            // just copy data from old field to new field
            ReleaseUpdateDB_GLSHelper::executeSqlStatementUpdate(strFmt("UPDATE %1 SET %2 = %3", _tableName, _newFieldName, _oldFieldName));
        }
        else
        {
            // non-additive table sync model
            ReleaseUpdateDB_GLSHelper::changeFieldName(tableName2Id(_tableName), _oldFieldName, _newFieldName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSqlStatementUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a direct SQL update statement.
    /// </summary>
    /// <param name = "_sqlStatement">The direct SQL statement to execute.</param>
    /// <returns>Records impacted</returns>
    public static int executeSqlStatementUpdate(str _sqlStatement)
    {
        int sqlResult;
        Connection con = new Connection();
        Statement statement;

        try
        {
            statement = con.createStatement();

            new SqlStatementExecutePermission(_sqlStatement).assert();
            sqlResult = statement.executeUpdateWithParameters(_sqlStatement, SqlParams::create());
            CodeAccessPermission::revertAssert();

            if (statement)
            {
                statement.close();
            }

            if (con)
            {
                con.finalize();
            }
        }
        catch
        {
            if (statement)
            {
                statement.close();
            }

            if (con)
            {
                con.finalize();
            }

            throw error("@SYS99562");
        }

        return sqlResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change field name
    /// </summary>
    /// <param name = "_tableId">Table id</param>
    /// <param name = "_oldFieldNameSQL">old name in database</param>
    /// <param name = "_newFieldNameAOT">new name in AOT</param>
    /// <param name = "_newFieldNameSQL">new name in database</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void changeFieldName(
        TableId _tableId,
        str _oldFieldNameSQL,
        str _newFieldNameAOT,
        str _newFieldNameSQL = _newFieldNameAOT)
    {
        SqlDictionary sqlDictionary;
        SysDictTable sysDictTable = new SysDictTable(_tableId);

        if (!_oldFieldNameSQL
            || !_newFieldNameAOT
            || !_newFieldNameSQL
            || !sysDictTable
            || !sysDictTable.fieldName2Id(_newFieldNameAOT))
        {
            throw error("@Retail:InvalidFunctionParameter");
        }

        _oldFieldNameSQL = strUpr(_oldFieldNameSQL);
        _newFieldNameAOT = strUpr(_newFieldNameAOT);
        _newFieldNameSQL = strUpr(_newFieldNameSQL);

        select firstonly forupdate sqlDictionary
            where sqlDictionary.tabId == _tableId
            && sqlDictionary.name == _oldFieldNameSQL;

        if (sqlDictionary)
        {
            ttsbegin;
            sqlDictionary.name = _newFieldNameAOT;
            sqlDictionary.sqlName = _newFieldNameSQL;
            sqlDictionary.doUpdate();

            ReleaseUpdateDB_GLSHelper::executeSqlStatementUpdate(
                strFmt("EXEC sp_rename '%1.%2','%3','column'",
                sysDictTable.name(DbBackend::Sql),
                _oldFieldNameSQL,
                _newFieldNameSQL));

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>