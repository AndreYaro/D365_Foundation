<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchInvoiceLinkUpdate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesPurchInvoiceLinkUpdate_RU extends RunBaseBatch implements BatchRetryable
{
    QueryRun    queryRun;

    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private void buildQuery()
    {
        #localmacro.rangeMask
            '((\%1.\%3 == \%2.\%4) && (\%1.\%5 == \%2.\%6))'
        #endmacro

        #define.negQty('<0')

        Query                   query = queryRun.query();

        QueryBuildDataSource dsInventTrans = query.dataSourceTable(tablenum(InventTrans));
        QueryBuildDataSource dsInventSettleIssue = dsInventTrans.addDataSource(tablenum(InventSettlement));
        dsInventSettleIssue.addLink(fieldnum(InventTrans, RecId), fieldnum(InventSettlement, TransRecId));
        dsInventSettleIssue.joinMode(JoinMode::InnerJoin);

        dsInventSettleIssue.addRange(fieldnum(InventSettlement, SettleType)).value(queryValue(InventSettleType::Issue));
        dsInventSettleIssue.addRange(fieldnum(InventSettlement, QtySettled)).value(#negQty);
        dsInventSettleIssue.addRange(fieldnum(InventSettlement, Cancelled)).value(queryValue(NoYes::No));

        QueryBuildDataSource dsInventSettleReceipt = dsInventSettleIssue.addDataSource(tablenum(InventSettlement));
        dsInventSettleReceipt.addLink(fieldnum(InventSettlement, SettleTransId), fieldnum(InventSettlement, SettleTransId));
        dsInventSettleReceipt.joinMode(JoinMode::InnerJoin);

        dsInventSettleReceipt.addRange(fieldnum(InventSettlement, SettleType)).value(queryValue(InventSettleType::Receipt));
        dsInventSettleReceipt.addRange(fieldnum(InventSettlement, Cancelled)).value(queryValue(NoYes::No));

        QueryBuildDataSource dsInvoiceLink = dsInventSettleReceipt.addDataSource(tablenum(SalesPurchInvoiceLink_RU), tablestr(SalesPurchInvoiceLink_RU));
        dsInvoiceLink.addLink(fieldnum(InventSettlement, TransRecId), fieldnum(SalesPurchInvoiceLink_RU, ReceiptTransRecId));
        dsInvoiceLink.joinMode(JoinMode::NoExistsJoin);

        QueryBuildRange range = dsInvoiceLink.addRange(fieldnum(SalesPurchInvoiceLink_RU, RecId));
        range.value(strfmt(#rangeMask, tablestr(SalesPurchInvoiceLink_RU),
                                       tablestr(CustInvoiceTrans),
                                       fieldstr(SalesPurchInvoiceLink_RU, SalesTransTableId),
                                       fieldstr(CustInvoiceTrans, TableId),
                                       fieldstr(SalesPurchInvoiceLink_RU, SalesTransRecId),
                                       fieldstr(CustInvoiceTrans, RecId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchTransMap</Name>
				<Source><![CDATA[
    private Map getPurchTransMap(InventTrans                _inventTrans,
                                 Map                        _purchTransMap  = new Map(Types::Int64, Types::Class),
                                 InventSettlementTreeNode   _rootTreeNode   = null)
    {
        Map                      transIdMap     = new Map(Types::Int64, Types::Class);
        InventSettlementTreeNode rootTreeNode   = _rootTreeNode;

        container packedTreeNodes = InventSettlementTreeNodeCalc::calcNodesServer(_inventTrans.RecId,
                                                                                  _inventTrans.QtySettled,
                                                                                  _inventTrans.CostAmountSettled);

        if (conlen(packedTreeNodes) == 0)
        {
            return transIdMap;
        }

        ListEnumerator nodesListEnumerator = List::create(packedTreeNodes).getEnumerator();

        while (nodesListEnumerator.moveNext())
        {
            InventSettlementTreeNode treeNode = nodesListEnumerator.current();

            if (treeNode.parmNodeRecord().TableId != tablenum(InventTrans) ||
                _purchTransMap.exists(treeNode.parmNodeRecord().RecId))
            {
                continue;
            }

            if (! _rootTreeNode)
            {
                rootTreeNode = treeNode;
            }

            InventTrans inventTransFound = treeNode.parmNodeRecord();

            if (inventTransFound.inventTransOrigin().ReferenceCategory == InventTransType::Purch && inventTransFound.StatusReceipt == StatusReceipt::Purchased)
            {
                transIdMap.insert(inventTransFound.RecId, rootTreeNode);
                Map transIdMapChild = this.getPurchTransMap(inventTransFound, transIdMap, rootTreeNode);

                MapEnumerator enumerator = transIdMapChild.getEnumerator();
                while (enumerator.moveNext())
                {
                    transIdMap.insert(enumerator.currentKey(), enumerator.currentValue());
                }
            }
        }

        return transIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        Query query = new Query();
        QueryBuildDataSource dsInventTransOrigin = query.addDataSource(tablenum(InventTransOrigin), tablestr(InventTransOrigin));

        QueryBuildDataSource dsCustInvoiceTrans = dsInventTransOrigin.addDataSource(tablenum(CustInvoiceTrans), tablestr(CustInvoiceTrans));
        dsCustInvoiceTrans.addLink(fieldnum(InventTransOrigin, InventTransId), fieldnum(CustInvoiceTrans, InventTransId));
        dsCustInvoiceTrans.joinMode(JoinMode::InnerJoin);

        QueryBuildDataSource dsInventTrans = dsCustInvoiceTrans.addDataSource(tablenum(InventTrans));
        dsInventTrans.addLink(fieldnum(CustInvoiceTrans, InvoiceId), fieldnum(InventTrans, InvoiceId), tablestr(CustInvoiceTrans));
        dsInventTrans.addLink(fieldnum(CustInvoiceTrans, InvoiceDate), fieldnum(InventTrans, DateFinancial), tablestr(CustInvoiceTrans));
        dsInventTrans.joinMode(JoinMode::InnerJoin);

        dsInventTrans.addLink(fieldnum(InventTransOrigin, recId), fieldnum(InventTrans, InventTransOrigin), tablestr(InventTransOrigin));
        dsInventTrans.joinMode(JoinMode::InnerJoin);

        QueryBuildRange range = dsInventTrans.addRange(fieldnum(InventTrans, StatusIssue));
        range.value(queryValue(StatusIssue::Sold));
        range.status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        VendInvoiceTrans            vendInvoiceTrans;
        InventTrans                 inventTransReceipt;
        InventSettlement            inventSettlement;
        InventTransOrigin           inventTransOrigin;
        MarkupTrans                 markupTrans;
        SalesPurchInvoiceLink_RU    salesPurchInvoiceLink;

        try
        {
            this.buildQuery();

            ttsbegin;

            delete_from salesPurchInvoiceLink
                exists join inventTransReceipt
                    where salesPurchInvoiceLink.ReceiptTransRecId == inventTransReceipt.RecId
                exists join inventSettlement
                    where inventSettlement.TransRecId == inventTransReceipt.RecId &&
                          inventSettlement.Cancelled;

            while (queryRun.next())
            {
                if (queryRun.changed(tablenum(InventTrans)))
                {
                    CustInvoiceTrans custInvoiceTrans = queryRun.get(tablenum(CustInvoiceTrans));
                    InventTrans inventTransCust = queryRun.get(tablenum(InventTrans));

                    MapEnumerator enumerator = this.getPurchTransMap(inventTransCust).getEnumerator();
                    while (enumerator.moveNext())
                    {
                        InventTrans inventTransVend = InventTrans::findRecId(enumerator.currentKey());
                        InventSettlementTreeNode rootTreeNode = enumerator.currentValue();

                        select firstonly * from vendInvoiceTrans
                            where vendInvoiceTrans.InvoiceId    == inventTransVend.InvoiceId     &&
                                  vendInvoiceTrans.InvoiceDate  == inventTransVend.DateFinancial
                        exists join inventTransOrigin
                            where inventTransOrigin.RecId         == inventTransVend.InventTransOrigin &&
                                  inventTransOrigin.InventTransId == vendInvoiceTrans.InventTransId;

                        salesPurchInvoiceLink.SalesTransTableId = custInvoiceTrans.TableId;
                        salesPurchInvoiceLink.SalesTransRecId   = custInvoiceTrans.RecId;
                        salesPurchInvoiceLink.SalesQty          = abs(inventTransCust.Qty);
                        salesPurchInvoiceLink.PurchTransTableId = vendInvoiceTrans.TableId;
                        salesPurchInvoiceLink.PurchTransRecId   = vendInvoiceTrans.RecId;
                        salesPurchInvoiceLink.PurchQty          = abs(inventTransVend.Qty);
                        salesPurchInvoiceLink.SettledQty        = abs(rootTreeNode.parmQtySettled());
                        salesPurchInvoiceLink.ReceiptTransRecId = rootTreeNode.parmNodeRecord().RecId;
                        salesPurchInvoiceLink.insert();

                        while select * from markupTrans
                            where markupTrans.TransTableId  == vendInvoiceTrans.TableId &&
                                  markupTrans.TransRecId    == vendInvoiceTrans.RecId
                        {
                            salesPurchInvoiceLink.PurchTransTableId = markupTrans.TableId;
                            salesPurchInvoiceLink.PurchTransRecId   = markupTrans.RecId;
                            salesPurchInvoiceLink.insert();
                        }
                    }
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;

        switch (version)
        {
            case #CurrentVersion:
                [version, queryCon] = packedClass;

                if (SysQuery::isPackedOk(queryCon))
                    queryRun = new QueryRun(queryCon);

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesPurchInvoiceLinkUpdate_RU construct()
    {
        return new SalesPurchInvoiceLinkUpdate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS114228";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesPurchInvoiceLinkUpdate_RU linkUpdate = SalesPurchInvoiceLinkUpdate_RU::construct();

        if (linkUpdate.prompt())
        {
            linkUpdate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
