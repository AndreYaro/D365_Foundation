<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAssortmentLookupJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
using AppLogging = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

/// <summary>
/// The class <c>RetailAssortmentLookupJob</c> is a dialog class used to schedule retail assortments job.
/// </summary>
class RetailAssortmentLookupJob extends RunBaseBatch implements BatchRetryable
{
    int64 assortmentRecId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        assortmentRecId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTasksByAssortment</Name>
				<Source><![CDATA[
    private int createTasksByAssortment()
    {
        BatchHeader batchHeader;
        RetailAssortmentTable assortment;
        RetailAssortmentLookupTask task;
        int numPublishedAssortments = 0;

        while select RecId, AssortmentID from assortment
            where
                (!assortmentRecId || assortment.RecId == assortmentRecId) &&
                (assortment.Status == RetailAssortmentStatusType::Published ||
                (assortment.Status == RetailAssortmentStatusType::Draft && assortment.PublishedDateTime != DateTimeUtil::minValue()))
        {
            numPublishedAssortments ++;

            task = new RetailAssortmentLookupTask();
            task.parmRetailAssortmentRecId(assortment.RecId);
            task.parmRetailAssortmentID(assortment.AssortmentID);

            if (this.isInBatch())
            {
                if (!batchHeader)
                {
                    batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
                }

                batchHeader.addRuntimeTask(task, this.parmCurrentBatch().RecId);

                // Need make the jobs critical to enable monitoring.
                batchHeader.parmCritical(NoYes::Yes);
                batchHeader.parmMonitoringCategory(BatchMonitoringCategory::RetailAssortmentLookupJob);
            }
            else
            {
                task.runOperation();
            }
        }

        if (batchHeader)
        {
            batchHeader.save();
        }

        return numPublishedAssortments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExpiredAssortments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all expired assortments from the assortment lookup and related tables.
    /// </summary>
    private void deleteExpiredAssortments()
    {
        RetailAssortmentTable               assortment;
        RetailAssortmentLookup              lookup;
        RetailAssortmentLookupStaging       lookupTmp;
        RetailAssortmentLookupChannelGroup  channelGroup;

        ttsBegin;

        // Delete channel groups associated to expired assortments.
        delete_from channelGroup
            exists join assortment
            where
                assortment.RecId == channelGroup.AssortmentId &&
                assortment.Status == RetailAssortmentStatusType::Expired;

        ttsCommit;

        ttsBegin;

        // Delete lookup entries associated to expired assortments.
        delete_from lookup
            exists join assortment
            where
                assortment.RecId == lookup.AssortmentId &&
                assortment.Status == RetailAssortmentStatusType::Expired;

        ttsCommit;

        ttsBegin;

        // Delete temp lookup entries associated to expired assortments.
        delete_from lookupTmp
            exists join assortment
            where
                assortment.RecId == lookupTmp.AssortmentId &&
                assortment.Status == RetailAssortmentStatusType::Expired;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expirePublishedAssortments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensure that all published assortments that are no longer valid are marked
    /// as expired.
    /// </summary>
    /// <returns>
    /// Numberof Expired Assortments.
    /// </returns>
    private int expirePublishedAssortments()
    {
        RetailAssortmentTable               assortment;
        int numExpiredAssortments = 0;
        ttsBegin;

        // Update assortment status to expired.
        update_recordset assortment
        setting Status = RetailAssortmentStatusType::Expired
        where
            assortment.Status == RetailAssortmentStatusType::Published &&
            assortment.ValidTo < DateTimeUtil::date(DateTimeUtil::utcNow());

        numExpiredAssortments = int642int(assortment.RowCount());

        ttsCommit;

        return numExpiredAssortments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssortmentRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the assortment identifier to process. If not set, all assortments are processed.
    /// </summary>
    /// <param name="_assortmentRecId">
    /// The record identifier of the assortment to process.
    /// </param>
    /// <returns>
    /// The record identifier of the assortment being processed. If 0, then all assortments will be processed.
    /// </returns>
    public int64 parmAssortmentRecId(RetailAssortmentRefRecId _assortmentRecId = assortmentRecId)
    {
        assortmentRecId = _assortmentRecId;
        return assortmentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        utcDateTime stepStartTime, stepEndTime;
        RetailAssortmentSchedulerJob retailAssortmentSchedulerJob = new RetailAssortmentSchedulerJob();

        // Ensure that categories are exploded before running anything.
        AppLogging::EventWriteRetailProcessAssortmentExplodeCategoriesStart(funcName());
        RetailCategoryContainmentLookup::synchronizeCategoriesLookup(true);
        AppLogging::EventWriteRetailProcessAssortmentExplodeCategoriesStop(funcName());

        // Mark any assortments that have expired.
        AppLogging::EventWriteRetailProcessAssortmentExpireAssortmentStart(funcName());
        int numExpiredAssortments = this.expirePublishedAssortments();
        AppLogging::EventWriteRetailProcessAssortmentExpireAssortmentStop(funcName());

        // Delete all expired assortments.
        AppLogging::EventWriteRetailProcessAssortmentDeleteExpiredAssortmentStart(funcName());
        this.deleteExpiredAssortments();
        AppLogging::EventWriteRetailProcessAssortmentDeleteExpiredAssortmentStop(funcName());

        // Partition the data to be processed by assortment (in parallel).
        AppLogging::EventWriteRetailProcessAssortmentCreateBatchTaskPerAssortmentStart(funcName());
        int numPublishedAssortments = this.createTasksByAssortment();
        AppLogging::EventWriteRetailProcessAssortmentCreateBatchTaskPerAssortmentStop(funcName());

        // Run old assortment explosion if Bakcward compatibility is enabled.
        if (isConfigurationkeyEnabled(configurationKeyNum(RetailCDXBackwardCompatibility)) && RetailConnReplicationUtilities::isOldChannelInDataGroup())
        {
            AppLogging::EventWriteRetailProcessAssortmentRunBatchTaskPerAssortmentStart(funcName());
            retailAssortmentSchedulerJob.runOperation();
            AppLogging::EventWriteRetailProcessAssortmentRunBatchTaskPerAssortmentStop(funcName());
        }

        // Log instrumentation for number of assortment published and number of assortement in expired state.
        AppLogging::EventWriteRetailProcessAssortmentStats(numPublishedAssortments, numExpiredAssortments);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RET6064";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailAssortmentLookupJob scheduler = new RetailAssortmentLookupJob();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailAssortmentLookupJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailAssortmentLookupJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>