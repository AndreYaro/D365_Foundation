<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExciseTransferDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ExciseTransferDP_IN</c> class provides implementation of a data provider class for
///  excise invoice reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(ExciseTransferContract_IN))
]
public class ExciseTransferDP_IN extends SrsReportDataProviderPreProcessTempDB
{
    ExciseInvoiceTransferHeaderFooterTmp_IN    headerFooterTmp;
    ExciseInvoiceTransferOrderTmp_IN           invoiceTmp;
    TaxInvoiceTransporterDetailsTmp_IN         transporterDetailsTmp;
    ExciseInvoiceTaxTransTmp_IN                invoiceTaxTransTmp;
    ExciseTaxAggregrateTmp_IN                  taxAggregrateTmp;
    ExciseTransferContract_IN                  transferContract;
    InventTransferJour                         inventTransferJour;
    AmountMST                                  totalTaxAmountMST;
    AmountMST                                  totalLineAmountMST;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    public void createData()
    {
        this.getDataFromContract();
        this.insertInvoiceDetailsInformation();
        this.insertTaxDetails();
        this.insertTaxAggregrateInformation();
        this.insertIntoExciseTransferHeaderFooterTmp();
        this.insertTransporterDetails();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        transferContract = this.parmDataContract() as ExciseTransferContract_IN;
        inventTransferJour = InventTransferJour::findRecId(transferContract.parmInventTransferJourRecdId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseInvoiceTmpTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseInvoiceTmpTaxTrans_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseInvoiceTmpTaxTrans_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseInvoiceTaxTransTmp_IN))]
    public ExciseInvoiceTaxTransTmp_IN getExciseInvoiceTmpTaxTrans()
    {
        select invoiceTaxTransTmp;
        return invoiceTaxTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxAggregrateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseTaxAggregrateTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseTaxAggregrateTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseTaxAggregrateTmp_IN))]
    public ExciseTaxAggregrateTmp_IN getExciseTaxAggregrateTmp()
    {
        select taxAggregrateTmp;
        return taxAggregrateTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInvoiceTransporterDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>TaxInvoiceTransporterDetailsTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxInvoiceTransporterDetailsTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxInvoiceTransporterDetailsTmp_IN))]
    public TaxInvoiceTransporterDetailsTmp_IN getTaxInvoiceTransporterDetailsTmp()
    {
        select transporterDetailsTmp;
        return transporterDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseInvoiceTransferHeaderFooterTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseInvoiceTransferHeaderFooterTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseInvoiceTransferHeaderFooterTmp_IN))]
    public ExciseInvoiceTransferHeaderFooterTmp_IN getTransferInvoiceHeaderFooterTmp()
    {
        select headerFooterTmp;
        return headerFooterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseInvoiceTransferOrderTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseInvoiceTransferOrderTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseInvoiceTransferOrderTmp_IN))]
    public ExciseInvoiceTransferOrderTmp_IN getTransferInvoiceTmp()
    {
        select invoiceTmp;
        return invoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoExciseTransferHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice header information.
    /// </summary>
    /// The <c>InventTransferJour</c> record that has the invoice header information.
    /// <remarks>
    /// This method will insert the invoice header information into the <c>ExciseTransferHeaderFooterTmp_IN</c>
    /// table which is only used for ExciseInvoice report
    /// </remarks>
    private void insertIntoExciseTransferHeaderFooterTmp()
    {
        CompanyInfo                 companyInfo;
        TaxInformation_IN           taxInformationFrom, taxInformationTo;
        LogisticsPostalAddress      logisticsPostalAddressFrom, logisticsPostalAddressTo;
        InventTransferJour_IN       inventTransferJourLoc;

        companyInfo = CompanyInfo::find();
        logisticsPostalAddressFrom  =   LogisticsPostalAddress::findRecId(inventTransferJour.FromPostalAddress);
        logisticsPostalAddressTo    =   LogisticsPostalAddress::findRecId(inventTransferJour.ToPostalAddress);
        taxInformationFrom = TaxInformation_IN::findDefaultbyLocation(InventLocationLogisticsLocation::findByInventLocation_IN(InventLocation::find(inventTransferJour.InventLocationIdFrom).RecId).Location);
        taxInformationTo = TaxInformation_IN::findDefaultbyLocation(InventLocationLogisticsLocation::findByInventLocation_IN(InventLocation::find(inventTransferJour.InventLocationIdTo).RecId).Location);

        inventTransferJourLoc = inventTransferJour.inventTransferJour_IN();
        // insert company information
        headerFooterTmp.LocationAddress = companyInfo.postalAddress().Address;
        headerFooterTmp.LocationFax = companyInfo.teleFax();
        headerFooterTmp.LocationPhone = companyInfo.phone();
        headerFooterTmp.FromWarehouse = inventTransferJour.InventLocationIdFrom;
        headerFooterTmp.ToWarehouse = inventTransferJour.InventLocationIdTo;
        if (inventTransferJourLoc.ExciseInvoiceId)
        {
            headerFooterTmp.TransferId = inventTransferJourLoc.ExciseInvoiceId;
        }
        else
        {
            headerFooterTmp.TransferId = inventTransferJour.TransferId;
        }

        // insert source information
        headerFooterTmp.FromCity = logisticsPostalAddressFrom.City;
        headerFooterTmp.FromState = logisticsPostalAddressFrom.State;
        headerFooterTmp.FromAddress = logisticsPostalAddressFrom.Address;
        headerFooterTmp.FromCountryRegionId = logisticsPostalAddressFrom.CountryRegionId;
        headerFooterTmp.FromRange = taxInformationFrom.Range;
        headerFooterTmp.FromDivision = taxInformationFrom.Division;
        headerFooterTmp.FromCommissionarate = taxInformationFrom.Commissionarate;
        headerFooterTmp.FromVATRegistrationNum = TaxRegistrationNumbers_IN::find(taxInformationFrom.TIN).RegistrationNumber;
        headerFooterTmp.FromCSTNumber = TaxRegistrationNumbers_IN::find(taxInformationFrom.SalesTaxRegistrationNumber).RegistrationNumber;
        headerFooterTmp.FromECCNumber = TaxRegistrationNumbers_IN::find(taxInformationFrom.ManECCRegistrationNumberTable).RegistrationNumber;

        // insert destination information
        headerFooterTmp.ToCity = logisticsPostalAddressTo.City;
        headerFooterTmp.ToState = logisticsPostalAddressTo.State;
        headerFooterTmp.ToAddress = logisticsPostalAddressTo.Address;
        headerFooterTmp.ToCountryRegionId = logisticsPostalAddressTo.CountryRegionId;
        headerFooterTmp.ToRange = taxInformationTo.Range;
        headerFooterTmp.ToDivision = taxInformationTo.Division;
        headerFooterTmp.ToCommissionarate = taxInformationTo.Commissionarate;
        headerFooterTmp.ToVATRegistrationNum = TaxRegistrationNumbers_IN::find(taxInformationTo.TIN).RegistrationNumber;
        headerFooterTmp.ToCSTNumber = TaxRegistrationNumbers_IN::find(taxInformationTo.SalesTaxRegistrationNumber).RegistrationNumber;
        headerFooterTmp.ToECCNumber = TaxRegistrationNumbers_IN::find(taxInformationTo.ManECCRegistrationNumberTable).RegistrationNumber;

        headerFooterTmp.insert();
        this.updateInvoiceAmountMSTInWords(headerFooterTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoiceDetailsInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice header information.
    /// </summary>
    /// A InventTransferJour record that has the invoice details information.
    public void insertInvoiceDetailsInformation()
    {
        InventTransferJourLine    inventTransferJourLine;
        InventTable               inventTable;
        InventTransferJourLine_IN inventTransferJourLineLoc;
        ExciseTariffCodes_IN      exciseTariffCode;
        InventTransferLine        inventTransferLine;
        TaxAmountCurView_IN       taxAmountCurView;
        TransTaxInformation       transTaxInformation;
        TransTaxInformationHelper transTaxInformationHelper = TransTaxInformationHelper::newHelper();

        insert_recordset invoiceTmp(UnitPriceMST, LineAmtMST,  ItemId, InventTransferJourLineRecid, InvoiceQty, UnitOfMeasure,
                                    CentralExciseDutyAmtMST, Description, InventTransferLineRecId, AssessableValueMST)
        select UnitPrice_IN, NetAmtShip_IN, ItemId, RecId, QtyShipped,
               UnitId, ExciseAmt_IN
        from inventTransferJourLine
            where inventTransferJourLine.TransferID == inventTransferJour.TransferId &&
                inventTransferJourLine.VoucherId == inventTransferJour.VoucherId
        join NameAlias from inventTable
            where inventTable.ItemId == inventTransferJourLine.ItemId
        join RecId from inventTransferLine
            where inventTransferLine.TransferId == inventTransferJourLine.TransferId &&
                inventTransferLine.LineNum == inventTransferJourLine.LineNum
        join AssessableValue from inventTransferJourLineLoc
            where inventTransferJourLineLoc.InventTransferJourLine == inventTransferJourLine.RecId;

        while select forUpdate invoiceTmp
        {
            inventTransferLine = InventTransferLine::findRecId(invoiceTmp.InventTransferJourLineRecId);

            transTaxInformation = transTaxInformationHelper.getTransTaxInformationByRecord(
                inventTransferLine,
                TransTaxInformationType_IN::InventTransferFrom);

            invoiceTmp.ExciseTariffCode = ExciseTariffCodes_IN::find(transTaxInformation.ExciseTariffCodes).TariffCode;
            invoiceTmp.SourceExciseBaseAmountMST = abs(taxAmountCurView.getTransferExciseSourceAmount(invoiceTmp.InventTransferLineRecId, tableNum(InventTransferLine)));
            invoiceTmp.update();
        }

        update_recordSet invoiceTmp
        setting ExciseDutyRate = (invoiceTmp.CentralExciseDutyAmtMST/invoiceTmp.SourceExciseBaseAmountMST) * 100
            where invoiceTmp.CentralExciseDutyAmtMST != 0  && invoiceTmp.SourceExciseBaseAmountMST != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxAggregrateInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the tax aggregrate information.
    /// </summary>
    private void insertTaxAggregrateInformation()
    {
        TaxTrans_IN                       taxtrans;
        TaxReportingCode_IN               taxReportingCode;
        TaxReportingAggregrateCategory_IN taxReportingAggregrateCategory;
        TaxReportingTaxComponent_IN       taxReportingTaxComponent;
        TaxComponentTable_IN              taxComponentTable;

        taxReportingCode = TaxReportingCode_IN::findByReportingCode(TaxReporting_IN::ExciseInvoice);

        while select TaxAggregrateReportingCategory from taxReportingAggregrateCategory
            group by TaxAggregrateReportingCategory
            where taxReportingAggregrateCategory.TaxReportingCode == taxReportingCode.RecId
        join TaxComponentTable_IN from taxReportingTaxComponent
            where taxReportingTaxComponent.TaxReportingAggregrateCategory_IN == taxReportingAggregrateCategory.RecId
        join RecId from taxComponentTable
            where taxComponentTable.RecId == taxReportingTaxComponent.TaxComponentTable_IN
        join sum(SourceTaxAmountCur) from taxtrans
            where taxtrans.TaxComponentTable == taxComponentTable.RecId &&
                taxtrans.Voucher == inventTransferJour.VoucherId &&
                    taxtrans.TransferOrderNumber == inventTransferJour.TransferId &&
                        taxtrans.SourceTableId == tableNum(InventTransferLine)
        {
            taxAggregrateTmp.AmountCurInWords = Global::numeralsToTxt_IN(abs(taxtrans.SourceTaxAmountCur));
            taxAggregrateTmp.TaxAggregrateReportingCategory = taxReportingAggregrateCategory.TaxAggregrateReportingCategory;
            taxAggregrateTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice taxes information.
    /// </summary>
    private void insertTaxDetails()
    {
        TaxTrans_IN  taxTrans;
        FormulaDesigner_IN formulaDesigner;

        insert_recordset invoiceTaxTransTmp (SalesTaxCode, SalesTaxAmtMST)
        select TaxCode from formulaDesigner
            order by formulaDesigner.ID
            group formulaDesigner.TaxCode, formulaDesigner.ID
            join sum(TaxAmount) from taxtrans
                where taxtrans.Voucher == inventTransferJour.VoucherId &&
                    taxtrans.SourceTableId == tableNum(InventTransferLine) &&
                        taxtrans.TaxCode == formulaDesigner.TaxCode &&
                            taxtrans.TaxItemGroup == formulaDesigner.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTransporterDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the transporter detail information.
    /// </summary>
    private void insertTransporterDetails()
    {
        InventSiteGateEntry_IN      inventSiteGateEntry;
        InventSiteGateEntryLine_IN  inventSiteGateEntryLine;
        InventTransferJourLine      inventTransferJourLine;
        InventTransferJourLine_IN   inventTransferJourLineLoc;
        DlvMode                     dlvMode;
        InventTransferJour          inventTransferJourLoc;

        inventTransferJourLoc.data(inventTransferJour);

        insert_recordset transporterDetailsTmp (Voucher, InventSiteGateEntry, DateTimeOfRemoval,
                                                             TransportationReceiptDate, TransportationReceiptNumber,
                                                              VehicleNumber, TransporterName)
        select VoucherId from inventTransferJour
            where inventTransferJour.VoucherId == inventTransferJourLoc.VoucherId
        join inventTransferJourLine
            where inventTransferJourLine.VoucherId == inventTransferJour.VoucherId &&
                inventTransferJourLine.TransferId == inventTransferJour.TransferId
        join inventTransferJourLineLoc
            where inventTransferJourLineLoc.InventTransferJourLine == inventTransferJourLine.RecId
        join InventSiteGateEntry from  inventSiteGateEntryLine
            where inventSiteGateEntryLine.RecId == inventTransferJourLineLoc.InventSiteGateEntryLine
        join ExitDateAndTime, TransportationReceiptDate, TransportationReceiptNumber, VehicleNumber, TransportationDriverName from inventSiteGateEntry
            group by inventTransferJour.VoucherId, inventSiteGateEntryLine.InventSiteGateEntry, inventSiteGateEntry.ExitDateAndTime,
                inventSiteGateEntry.TransportationReceiptDate, inventSiteGateEntry.TransportationReceiptNumber,
                inventSiteGateEntry.VehicleNumber, inventSiteGateEntry.TransportationDriverName
            where inventSiteGateEntry.RecId == inventSiteGateEntryLine.InventSiteGateEntry;

        update_recordSet transporterDetailsTmp
        setting ModeOfTransport = dlvMode.Txt
        join Txt from dlvMode
            where dlvMode.Code == inventTransferJourLoc.DlvModeId;
        }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        this.createData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceAmountMSTInWords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the header invoice amount value.
    /// </summary>
    /// <param name="_headerFooterTmp">
    /// A <c>ExciseInvoiceTransferHeaderFooterTmp_IN</c> record that contains header data.
    /// </param>
    private void updateInvoiceAmountMSTInWords(ExciseInvoiceTransferHeaderFooterTmp_IN _headerFooterTmp)
    {
        select sum(LineAmtMST) from invoiceTmp;
        totalLineAmountMST = invoiceTmp.LineAmtMST;

        select sum(SalesTaxAmtMST) from invoiceTaxTransTmp;
        totalTaxAmountMST= abs(invoiceTaxTransTmp.SalesTaxAmtMST);

        ttsBegin;

        select forUpdate InvoiceAmtMSTInWords from _headerFooterTmp;
        _headerFooterTmp.InvoiceAmtMSTInWords = Global::numeralsToTxt_IN(totalLineAmountMST + totalTaxAmountMST);
        _headerFooterTmp.update();

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>