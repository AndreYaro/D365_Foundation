<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationCalcTax_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesQuotationCalcTax_Sales extends SalesQuotationCalcTax
{
    QueryRun                queryTransact;
    SalesQuotationTable     salesQuotationTable;
    SalesUpdate             specQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    [Replaceable]
    TaxAmountCur calcTax(TradeTotalsBase _salesQuotationTotals)
    {
        salesQuotationTotals = _salesQuotationTotals as SalesQuotationTotals;

        TaxSalesQuotation taxSalesQuotation = new TaxSalesQuotation(this);

        if (isAutoChargesSetupSequenceCompoundFeatureEnabled)
        {
            markupBaseValueCalcEngineProvider = MarkupBaseValueCalcEngineProvider::construct();
        }

        TaxAmountCur amountCur = taxSalesQuotation.calc();

        this.tax(taxSalesQuotation);

        return -amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return salesQuotationTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    DlvDate deliveryDate()
    {
        return salesQuotationLine.dlvDate(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateMarkup</Name>
				<Source><![CDATA[
    DlvDate deliveryDateMarkup()
    {
        if (salesQuotationLine)
        {
            return this.deliveryDate();
        }

        return salesQuotationTable.dlvDate(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupAutoOriginSource</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Common getMarkupAutoOriginSource()
    {
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    public boolean doTaxGroupExistsForDocument()
    {
        SalesQuotationLine salesQuotationLineLocal;
        MarkupTrans markupTransLine;
        boolean taxGroupsExist;

        select firstOnly RecId from salesQuotationLineLocal
            where salesQuotationLineLocal.QuotationId == salesQuotationTable.QuotationId &&
                  salesQuotationLineLocal.TaxGroup != '' &&
                  salesQuotationLineLocal.TaxItemGroup != '';
        if (salesQuotationLineLocal != null)
        {
            taxGroupsExist = true;
        }

        if (!taxGroupsExist)
        {
            if (markupTrans::doTaxGroupExistsForMarkup(salesQuotationTable.TableId, salesQuotationTable.RecId))
            {
                taxGroupsExist = true;
            }
        }

        if (!taxGroupsExist)
        {
            select firstOnly RecId from markupTransLine
                where markupTransLine.TaxGroup != '' &&
                      markupTransLine.TaxItemGroup != '' &&
                      !markupTransLine.IsDeleted
            exists join salesQuotationLineLocal
                where salesQuotationLineLocal.QuotationId == salesQuotationTable.QuotationId &&
                      salesQuotationLineLocal.TableId == markupTransLine.TransTableId &&
                      salesQuotationLineLocal.RecId == markupTransLine.TransRecId;

            if (markupTransLine != null)
            {
                taxGroupsExist = true;
            }
        }

        return taxGroupsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscAmount endDisc()
    {
        if (salesQuotationLine.endDisc())
        {
            return salesQuotationLine.salesQuotationTable().DiscPercent;
        }

        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(salesQuotationTable.exchRate(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(salesQuotationTable.exchRateSecondary(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void  initCursor()
    {
        queryTransact = this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether tax is included in the item price for the sales quotation document.
    /// </summary>
    /// <returns>
    ///    true if tax is included in item price; otherwise false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        return salesQuotationTable.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEndDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the end discount amount for sales order line.
    /// </summary>
    /// <param name="baseAmount">
    /// The base amount for the discount calculation.
    /// </param>
    /// <returns>
    /// The end discount amount.
    /// </returns>
    public DiscAmount lineEndDisc(TaxBaseCur baseAmount)
    {
        DiscAmount lineEndDisc;

        if (salesQuotationTotals)
        {
            lineEndDisc = salesQuotationTotals.lineEndDiscBalance(salesQuotationLine.RecId);
        }

        if (!lineEndDisc && this.endDisc() && salesQuotationLine.endDisc())
        {
            lineEndDisc = baseAmount * this.endDisc() / 100;
        }

        return lineEndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSource</Name>
				<Source><![CDATA[
    public Common getSource()
    {
        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        if (salesQuotationLine)
        {
            return salesQuotationLine.DefaultDimension;
        }

        return salesQuotationTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _source, SalesUpdate _specQty)
    {
        super(_source);

        salesQuotationTable = _source;
        specQty             = _specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        salesQuotationLine = null;

        while (queryTransact.next())
        {
            salesQuotationLine = this.queryGet(queryTransact);

            if (salesQuotationLine)
            {
                this.initCursorMarkup(salesQuotationLine.TableId, salesQuotationLine.RecId);
                break;
            }
        }

        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccount()
    {
        return salesQuotationLine.accountSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccountMarkup</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccountMarkup()
    {
        LedgerDimensionDefaultAccount  ledgerDimensionDefaultAccount;

        switch (markupTrans.markupTable().VendType)
        {
            case MarkupType::Item :
                if (salesQuotationLine)
                {
                    ledgerDimensionDefaultAccount = this.operationAccount();
                }
                break;

            case MarkupType::LedgerAccount :
                ledgerDimensionDefaultAccount = markupTrans.markupTable().parmVendorLedgerDimension();
                break;

            case MarkupType::CustVend :
                ledgerDimensionDefaultAccount = CustLedgerAccounts::summaryLedgerDimension(salesQuotationTable.InvoiceAccount, salesQuotationTable.PostingProfile);
                break;
        }

        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    LedgerPostingType operationPosting()
    {
        return salesQuotationLine.postingSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPostingMarkup</Name>
				<Source><![CDATA[
    LedgerPostingType operationPostingMarkup()
    {
        LedgerPostingType ledgerPostingType;

        switch (markupTrans.markupTable().VendType)
        {
            case MarkupType::Item :
                if (salesQuotationLine)
                {
                    ledgerPostingType = this.operationPosting();
                }
                break;

            case MarkupType::LedgerAccount :
                ledgerPostingType = markupTrans.markupTable().VendPosting;
                break;

            case MarkupType::CustVend :
                ledgerPostingType = LedgerPostingType::CustBalance;
                break;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    Object queryBuild()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    Common queryGet(QueryRun  _transact)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCashDiscPercent</Name>
				<Source><![CDATA[
    DiscPct taxCashDiscPercent()
    {
        return salesQuotationTotals.taxCashDiscPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur transLineAmount()
    {
        return salesQuotationLine.calcLineAmount(this.transQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur transLineAmountInclTax()
    {
        return salesQuotationLine.calcLineAmount(this.transQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    PriceCur transPcsPrice()
    {
        return salesQuotationLine.taxPcsPrice(this.invoiceDate(), tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    SalesQty transQty()
    {
        return salesQuotationLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup transTaxGroup()
    {
        return salesQuotationLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup transTaxItemGroup()
    {
        return salesQuotationLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    TradeInventTransId transTransId()
    {
        return salesQuotationLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return salesQuotationTable.euroTriangulation(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption_BR</Name>
				<Source><![CDATA[
    public boolean useAndConsumption_BR()
    {
        return salesQuotationTable.CustFinalUser_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use the sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if the sales tax adjustments should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Always returns false.
    /// </remarks>
    public boolean useSalesTaxAdjustments()
    {
        if (salesQuotationTable 
            && (salesQuotationTable.QuotationType == QuotationType::Sales &&
                !(salesQuotationTable.QuotationStatus == SalesQuotationStatus::Cancelled
                    || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Confirmed
                    || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Lost)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxIntegrationBusinessProcess</Name>
				<Source><![CDATA[
    internal TaxIntegrationBusinessProcess taxIntegrationBusinessProcess()
    {
        return TaxIntegrationUtils::getBusinessProcessForSalesQuotationTable(salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxModuleType</Name>
				<Source><![CDATA[
    internal TaxModuleType taxModuleType()
    {
        TaxModuleType taxModuleType;
        switch (salesQuotationTable.QuotationType)
        {
            case QuotationType::Sales:
                taxModuleType = taxModuleType::Sales;
                break;
            case QuotationType::Project:
                taxModuleType = taxModuleType::Project;
                break;
        }
        return taxModuleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Replaceable]
    static SalesQuotationCalcTax construct(Common           _source,
                                           SalesUpdate      _specQty,
                                           AccountOrder     _sumBy          = AccountOrder::None,
                                           ParmId           _parmId         = '',
                                           SalesQuotationId _sumQuotationId = '',
                                           DocumentStatus   _documentStatus = DocumentStatus::None)
    {
        if (_parmId == '')
        {
            return new SalesQuotationCalcTax_Trans(_source, _specQty);
        }

        return SalesQuotationCalcTax_ParmTrans::construct(_source, _specQty, _parmId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>