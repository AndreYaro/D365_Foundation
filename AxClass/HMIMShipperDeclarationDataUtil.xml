<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMShipperDeclarationDataUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>HMIMShipperDeclarationDataUtil</c> class is used to populate data in shipper declaration tables 
/// </summary>
final class HMIMShipperDeclarationDataUtil
{
    WHSShipmentTable             whsShipmentTable;
    HMIMShipperDeclaration       shipperDeclarationHeader;
    HMIMShipperDeclarationItem   shipperDeclarationLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>HMIMShipperDeclarationDataUtil</c> class.
    /// </summary>
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>HMIMShipperDeclarationDataUtil</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>HMIMShipperDeclarationDataUtil</c> class.
    /// </returns>
    public static HMIMShipperDeclarationDataUtil construct()
    {
        return new HMIMShipperDeclarationDataUtil();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentCriteria</Name>
				<Source><![CDATA[
    public WHSShipmentTable parmShipmentCriteria(WHSShipmentTable _shipmentTable = whsShipmentTable)
    {
        whsShipmentTable = _shipmentTable;
        return whsShipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateShipperDeclarationHeader</Name>
				<Source><![CDATA[
    private void populateShipperDeclarationHeader()
    {
        WHSBillOfLading                 whsBillOfLading;
        LogisticsPostalAddress          logisticPostalAddress;
        WHSParameters                   whsParameters;
        HMIMShipperDeclarationAddress   shipperAddress;

        select firstonly whsBillOfLading
            join logisticPostalAddress
                where whsBillOfLading.ShipmentId == whsShipmentTable.ShipmentId
                    && whsBillOfLading.ShippingPostalAddress== logisticPostalAddress.RecId;

        if (!whsBillOfLading.ShippingPostalAddress)
        {
            shipperAddress = CompanyInfo::find().postalAddress().Address;
        }
        else
        {
            shipperAddress = logisticPostalAddress.Address;
        }

        whsParameters = WHSParameters::find();

        shipperDeclarationHeader.AirWayBillNum    =   whsShipmentTable.HMIMAirWayBillNum;
        shipperDeclarationHeader.ConsigneeAddress =   whsShipmentTable.Address;
        shipperDeclarationHeader.ConsigneeName    =   whsShipmentTable.DeliveryName;
        shipperDeclarationHeader.ShipmentId       =   whsShipmentTable.ShipmentId;
        shipperDeclarationHeader.ShipperAddress   =   shipperAddress;
        shipperDeclarationHeader.ShipperName      =   whsBillOfLading.displayShippingName();
        shipperDeclarationHeader.Warning          =   whsParameters.HMIMWarning;
        shipperDeclarationHeader.FooterMsg        =   whsParameters.HMIMFooterMsg;
        if (HMIMTransportationTypeRadioactiveToggle::instance().isEnabled())
        {
            this.initializeTransportationTypeFromItemMaterial();
        }
        shipperDeclarationHeader.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTransportationTypeFromItemMaterial</Name>
				<Source><![CDATA[
    private void initializeTransportationTypeFromItemMaterial()
    {
        WHSLoadLine whsLoadLine =   WHSLoadLine::findFirstForShipmentId(whsShipmentTable.ShipmentId);
        
        shipperDeclarationHeader.IsRadioactive    = HMIMItemMaterial::existRadioactiveByItem(whsLoadLine.ItemId) ? NoYes::Yes : NoYes::No;
        
        if (HMIMItemMaterial::existsByItemAndAirType(whsLoadLine.ItemId, HMIMAirType::PassengerCargo))
        {
            shipperDeclarationHeader.AirType =   HMIMAirType::PassengerCargo;
        }
        else
        {
            if (HMIMItemMaterial::existsByItemAndAirType(whsLoadLine.ItemId, HMIMAirType::CargoOnly))
            {
                shipperDeclarationHeader.AirType =   HMIMAirType::CargoOnly;
            }
            else
            {
                shipperDeclarationHeader.AirType =   HMIMAirType::NotSpecified;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateShipperDeclarationLines</Name>
				<Source><![CDATA[
    private void populateShipperDeclarationLines()
    {
        WHSLoadLine      whsLoadLine;
        InventTable      inventTable;
        HMIMItemMaterial itemMaterial;
        RecordInsertList shippersDeclarationLinesList = new RecordInsertList(tableNum(HMIMShipperDeclarationItem));

        while select Qty from whsLoadLine
            where whsLoadLine.ShipmentId == whsShipmentTable.ShipmentId
        join inventTable
            where inventTable.ItemId == whsLoadLine.ItemId
            && inventTable.HMIMIndicator == NoYes::Yes
        outer join itemMaterial
            where itemMaterial.ItemId == inventTable.ItemId
                && itemMaterial.RegCode == whsShipmentTable.HMIMGetRegCode()
        {

            shippersDeclarationLinesList.add(this.addShipperDeclarationLines(whsLoadLine, itemMaterial, inventTable));
        }

        shippersDeclarationLinesList.insertDatabase();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipperDeclarationLines</Name>
				<Source><![CDATA[
    private HMIMShipperDeclarationItem addShipperDeclarationLines(whsLoadLine _loadLine, HMIMItemMaterial _itemMaterial, InventTable _inventTable)
    {
        shipperDeclarationLine.clear();
        shipperDeclarationLine.AirWayBillNum    =   whsShipmentTable.HMIMAirWayBillNum;
        shipperDeclarationLine.ShipmentId       =   whsShipmentTable.ShipmentId;
        shipperDeclarationLine.Qty              =   _loadLine.Qty;

        if (_itemMaterial.RecId)
        {
            shipperDeclarationLine.UNNumber                   =   _itemMaterial.IdentificationCode;
            shipperDeclarationLine.ShippingName               =   _itemMaterial.MaterialDescription;
            shipperDeclarationLine.ClassCode                  =   _itemMaterial.ClassCode;
            shipperDeclarationLine.DivisionCode               =   _itemMaterial.DivisionCode;
            shipperDeclarationLine.PackingGroup               =   _itemMaterial.PackingGroupCode;
            shipperDeclarationLine.NumberAndTypeOfPacking     = strFmt("%1 %2 %3", 
                    HMIMPackDescription::getPackQtyAndUOMStrForLoadLine(_loadLine, _itemMaterial.RegCode),
                    _itemMaterial.PackCode, 
                    _loadLine.Qty);
            
            shipperDeclarationLine.PackingInstruction =   this.getPackingInstruction(_itemMaterial);
  
        }
        else
        {
            shipperDeclarationLine.PackingInstruction     =   _inventTable.defaultProductName();
        }

        return shipperDeclarationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackingInstruction</Name>
				<Source><![CDATA[
    private HMIMPackInstCode getPackingInstruction(HMIMItemMaterial _itemMaterial)
    {
        HMIMPackInstCode packInstCode;

        if (shipperDeclarationHeader.AirType == HMIMAirType::CargoOnly)
        {
            packInstCode = _itemMaterial.PackInstCodeCargo;
        }
        else if (shipperDeclarationHeader.AirType == HMIMAirType::PassengerCargo)
        {
            packInstCode = _itemMaterial.PackInstCodePassenger;
        }

        return packInstCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateShipperDeclarationTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the tables related to the Shippers declaration report.
    /// </summary>
    public void populateShipperDeclarationTables()
    {   
        this.deleteExistingData();
        this.populateShipperDeclarationHeader();
        this.populateShipperDeclarationLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the existing AirWaybillNum data from the header & line.
    /// </summary>
    private void deleteExistingData()
    {
        ttsbegin;
        // Deleting header will clean up item records automatically.
        shipperDeclarationHeader    =   HMIMShipperDeclaration::find(whsShipmentTable.HMIMAirWaybillNum, true);
        shipperDeclarationHeader.delete();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>