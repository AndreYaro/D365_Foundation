<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RCashConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RCashConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(Bank);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    #define.ExecutionOrder(555)
    public Integer executionOrder()
    {
        return #ExecutionOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Query                           query;
        QueryBuildDataSource            qbds;
        QueryRun                        queryRun;
        ;

        //Table
        this.kernelCheckTable(tablenum(RCashTable));

        //Transaction
        this.kernelCheckTable(tablenum(RCashTrans));

        //Ledger Journal Table
        query   = new Query();
        qbds    = query.addDataSource(tablenum(LedgerJournalTable));
        qbds.addRange(fieldNum(LedgerJournalTable,posted)).value(enum2str(NoYes::No));
        qbds.addRange(fieldnum(LedgerJournalTable,journalType)).value(enum2str(LedgerJournalType::RCash));
        queryRun  = new QueryRun(query);
        this.kernelCheckRecords(queryRun);

        //Ledger Journal Transaction
        query   = new Query();
        qbds    = query.addDataSource(tablenum(LedgerJournalTrans));
        qbds.addDataSource(tablenum(LedgerJournalTable));
        query.dataSourceNo(2).addLink(fieldnum(LedgerJournalTrans,JournalNum),fieldnum(LedgerJournalTable,JournalNum));
        query.dataSourceNo(2).addRange(fieldNum(LedgerJournalTable,posted)).value(enum2str(NoYes::No));
        query.dataSourceNo(2).addRange(fieldnum(LedgerJournalTable,journalType)).value(enum2str(LedgerJournalType::RCash));
        queryRun  = new QueryRun(query);
        this.kernelCheckRecords(queryRun);

        // BankParameters
        this.kernelCheckTable(tablenum(RCashParameters));
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS104347";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@GLS104508";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SysConsistencyCheckJob          consistencyCheckJob;

        consistencyCheckJob = new SysConsistencyCheckJob(classnum(RCashConsistencyCheck));
        if (! consistencyCheckJob.prompt())
            return;

        consistencyCheckJob.runOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>