<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMVerifiedGrossMassDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>HMIMVerifiedGrossMassDP</c> Data Provider class for <c>HMIMVerifiedGrossMass</c> report.
/// </summary>
[SRSReportQueryAttribute(queryStr(HMIMVerifiedGrossMassReportQuery))]
public class HMIMVerifiedGrossMassDP extends SrsReportDataProviderPreProcessTempDB
{
    HMIMVerifiedGrossMassTmp verifiedGrossMassTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHMIMVerifiedGrossMassTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects data from the <c>HMIMVerifiedGrossMassTmp</c> table which is populated by the RDP class Business logic.
    /// </summary>
    /// <returns>
    /// The table data in the table buffer.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(HMIMVerifiedGrossMassTmp))]
    public HMIMVerifiedGrossMassTmp getHMIMVerifiedGrossMassTmp()
    {
        select  verifiedGrossMassTmp;
        return  verifiedGrossMassTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process report for VGM list data.
    /// </summary>
    public void processReport()
    {
        
        HMIMVerifiedGrossMassDPQuerySelection   lastVGMtDPQuerySelection;
        WHSloadLine                             lastLoadLine;
        Qty                                     packedItemQtyForCurLoadLine = 0;
        Enumerator                              enumerator  = HMIMVerifiedGrossMassDPQuery::newQuery(this).getEnumerator();

        ttsbegin;
        while (enumerator.moveNext())
        {
            HMIMVerifiedGrossMassDPQuerySelection curVGMDPQuerySelection = enumerator.current() as HMIMVerifiedGrossMassDPQuerySelection;
            WHSloadLine curLoadLine                                      = curVGMDPQuerySelection.parmLoadLine();

            if (lastLoadLine.RecId != curLoadLine.RecId)
            {
                this.createNonPackedVGMListLine(lastVGMtDPQuerySelection, lastLoadLine.Qty - packedItemQtyForCurLoadLine);
                
                packedItemQtyForCurLoadLine = 0;
                lastVGMtDPQuerySelection    = curVGMDPQuerySelection;
                lastLoadLine                = curLoadLine;
            }

            packedItemQtyForCurLoadLine += this.createPackedVGMListLine(curVGMDPQuerySelection);
        }

        this.createNonPackedVGMListLine(lastVGMtDPQuerySelection, lastLoadLine.Qty - packedItemQtyForCurLoadLine);        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNonPackedVGMListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates VGM list data for a non packed item and inserts it into the <c>HMIMVerifiedGrossMassTmp</c> table.
    /// </summary>
    /// <param name = "_vgmLineSelection">
    /// A <c>HMIMVerifiedGrossMassDPQuerySelection</c> object which the VGM line should be created for.
    /// </param>
    /// <param name = "_remainingQty">
    /// The quantity of the item for which the packing line is being created.
    /// </param>
    private void createNonPackedVGMListLine(HMIMVerifiedGrossMassDPQuerySelection _vgmLineSelection, Qty _remainingQty)
    {
        if (_remainingQty && _vgmLineSelection)
        {
            ttsbegin;
            HMIMVerifiedGrossMassTmp vgmTmp = this.initializeNonPackedVGMListLine(_vgmLineSelection, _remainingQty);
            this.insertVGMListLine(vgmTmp);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeNonPackedVGMListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes VGM list data for a non packed item.
    /// </summary>
    /// <param name = "_vgmLineSelection">
    /// A <c>HMIMVerifiedGrossMassDPQuerySelection</c> object which the VGM line should be created for.
    /// </param>
    /// <param name = "_qty">
    /// The quantity of the item for which the VGM line is being created.
    /// </param>
    /// <returns>The line of the temporary table.</returns>
    private HMIMVerifiedGrossMassTmp initializeNonPackedVGMListLine(HMIMVerifiedGrossMassDPQuerySelection _vgmLineSelection, Qty _qty)
    {
        WHSShipmentTable    shipmentTable   = _vgmLineSelection.parmShipmentTable();
        WHSLoadLine         loadLine        = _vgmLineSelection.parmLoadLine();
        WHSLoadTable        loadTable       = _vgmLineSelection.parmLoadTable();
        Weight              itemWeight      = loadLine.displayItemWeight();
        WHSContainerTable   emptyContainerTable;

        return this.initializeVGMListLine(shipmentTable,
                                          emptyContainerTable,
                                          loadTable,
                                          _qty,
                                          itemWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVGMListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Verified gross mass list line.
    /// </summary>
    /// <param name = "_shipmentTable">
    /// The shipment table.
    /// </param>
    /// <param name = "_containerTable">
    /// The container Table.
    /// </param>
    /// <param name = "_LoadTable">
    /// The load table.
    /// </param>
    /// <param name = "_qty">
    /// The quantity.
    /// </param>
    /// <param name = "_itemWeight">
    /// The item weight.
    /// </param>
    /// <returns>The line of the temporary table.</returns>
    private HMIMVerifiedGrossMassTmp initializeVGMListLine(
        WHSShipmentTable    _shipmentTable,
        WHSContainerTable   _containerTable,
        WHSLoadTable        _LoadTable,
        Qty                 _qty,
        Weight              _itemWeight)
    {
        verifiedGrossMassTmp.clear();
        verifiedGrossMassTmp.ShipmentId                 = _shipmentTable.ShipmentId;
        verifiedGrossMassTmp.LoadId                     = _LoadTable.LoadId;
        if (_LoadTable.ShippingContainerId)
        {
            verifiedGrossMassTmp.ContainerId            = _LoadTable.ShippingContainerId;
            // As this is the "verified gross mass document", the shipping container weight is set to load Actual Gross Weight
	        // That field is not automatically calculated and must be entered (or confirmed by copy pasting) by the user
            verifiedGrossMassTmp.ContainerWeight        = _LoadTable.ActualGrossWeight; 
        }
        else
        {
            verifiedGrossMassTmp.ContainerId            = _containerTable.ContainerId;
            verifiedGrossMassTmp.ContainerWeight        = _containerTable.Weight;
        }

        verifiedGrossMassTmp.BookingNum                 = _LoadTable.BookingNum;
        verifiedGrossMassTmp.TrailerNumber              = _LoadTable.TrailerNumber;
        verifiedGrossMassTmp.FooterDescription          = strFmt("@SCM:VerifiedGrossMassFooterDescription", _LoadTable.CarrierCode);
        verifiedGrossMassTmp.GrossWeight                = _itemWeight;
        verifiedGrossMassTmp.LoadSchedShipUTCDateTime   = _LoadTable.LoadSchedShipUTCDateTime;
        verifiedGrossMassTmp.WMSLocationIdLoad          = _LoadTable.getFinalLoc();
        verifiedGrossMassTmp.CompanyName                = CompanyInfo::find().Name;
        verifiedGrossMassTmp.WarehouseAddress           = _shipmentTable.displayPickUpLoc();
        verifiedGrossMassTmp.CustomerName               = _shipmentTable.displayDropOffName();
        verifiedGrossMassTmp.Quantity                   = _qty;
        verifiedGrossMassTmp.Address                    = CustTable::find(_shipmentTable.AccountNum).address();

        return verifiedGrossMassTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVGMListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts packing list data into the temporary table.
    /// </summary>
    /// <param name = "_verifiedGrossMassTmp">
    /// A <c>HMIMVerifiedGrossMassTmp</c> record to be inserted.
    /// </param>
    private void insertVGMListLine(HMIMVerifiedGrossMassTmp _verifiedGrossMassTmp)
    {
        _verifiedGrossMassTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPackedVGMListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates VGM list data for a packed item and inserts it into the <c>HMIMVerifiedGrossMassTmp</c>.
    /// </summary>
    /// <param name = "_vgmLineSelection">
    /// A <c>HMIMVerifiedGrossMassDPQuerySelection</c> object which the packing line should be created for.
    /// </param>
    /// <returns>The inserted quantity of the item.</returns>
    private ProductQuantity createPackedVGMListLine(HMIMVerifiedGrossMassDPQuerySelection _vgmLineSelection)
    {
        if (_vgmLineSelection.parmContainerLine())
        {
            ttsbegin;
            HMIMVerifiedGrossMassTmp vgmTmp = this.initializePackedVGMListLine(_vgmLineSelection);
            this.insertVGMListLine(vgmTmp);
            ttscommit;

            return vgmTmp.Quantity;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePackedVGMListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes packing list data for a packed item.
    /// </summary>
    /// <param name = "_vgmLineSelection">
    /// A <c>HMIMVerifiedGrossMassDPQuerySelection</c> object which the packing line should be created for.
    /// </param>
    /// <returns>The line of the temporary table.</returns>
    private HMIMVerifiedGrossMassTmp initializePackedVGMListLine(HMIMVerifiedGrossMassDPQuerySelection _vgmLineSelection)
    {
        WHSContainerLine    containerLine   = _vgmLineSelection.parmContainerLine();
        WHSLoadTable        loadTable       = _vgmLineSelection.parmLoadTable();
        WHSShipmentTable    shipmentTable   = _vgmLineSelection.parmShipmentTable();
        WHSContainerTable   containerTable  = _vgmLineSelection.parmContainerTable();
        Weight              itemWeight      = this.displayItemWeight(containerLine.ItemId, containerLine.UnitId, containerLine.Qty);

        return this.initializeVGMListLine(shipmentTable,
                                          containerTable,
                                          loadTable,
                                          containerLine.Qty,
                                          itemWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the item weight.
    /// </summary>
    /// <param name = "_itemId">
    /// The item Id.
    /// </param>
    /// <param name = "__unitId">
    /// The unit Id.
    /// </param>
    /// <param name = "_qty">
    /// The quantity.
    /// <returns>The item weight.</returns>
    private Weight displayItemWeight(ItemId _itemId, UnitOfMeasureSymbol _unitId, Qty _qty)
    {
        WHSPhysDimUOM whsPhysDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(_itemId, _unitId);

        if (whsPhysDimUOM)
        {
            return whsPhysDimUOM.Weight * _qty;
        }
        else
        {
            return InventTable::find( _itemId).grossWeight() * _qty;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>