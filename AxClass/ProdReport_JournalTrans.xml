<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdReport_JournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdReport_JournalTrans extends RunBase
{
    // Packed
    ProdJournalId       journalId;
    Voucher             voucher;
    DialogRunbase       dialog;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        journalId,
        voucher
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase  _dialog = dialog)
    {
        return this.dialogInternal(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS146401";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>ProdReport_JournalTrans</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>ProdReport_JournalTrans</c> class.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJournalId</Name>
				<Source><![CDATA[
    ProdJournalId parmProdJournalId(ProdJournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="packedClass" /> parameter value to an instance of the
    ///    <c>ProdReport_JournalTrans</c> class.
    /// </summary>
    /// <param name="packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdReport_JournalTrans construct(ProdJournalId _journalId)
    {
        ProdReport_JournalTrans prodReport;
        prodReport = ProdReport_JournalTrans::constructByType(ProdJournalTable::find(_journalId).JournalType);

        if(!prodReport)
        {
            throw error("@SYS20764");
        }

        return prodReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>ProdReport_JournalTrans</c> object depending on the journal type.
    /// </summary>
    /// <param name = "_journaType">The journal type. </param>
    /// <returns> The new <c>ProdReport_JournalTrans</c> object. </returns>
    protected static ProdReport_JournalTrans constructByType(ProdJournalType _journaType)
    {
        switch (_journaType)
        {
            case ProdJournalType::Picklist      : return new ProdReport_JournalTransBOM();
            case ProdJournalType::ReportFinished: return new ProdReport_JournalTransProd();
            case ProdJournalType::RouteCard     : return new ProdReport_JournalTransRoute();
            case ProdJournalType::JobCard       : return new ProdReport_JournalTransJob();
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalTable</Name>
				<Source><![CDATA[
    public static ProdReport_JournalTrans newProdJournalTable(ProdJournalTable _prodJournalTable)
    {
        ProdReport_JournalTrans   report_JournalTrans = ProdReport_JournalTrans::construct(_prodJournalTable.JournalId);

        report_JournalTrans.getLast();
        report_JournalTrans.parmProdJournalId(_prodJournalTable.JournalId);

        return report_JournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>