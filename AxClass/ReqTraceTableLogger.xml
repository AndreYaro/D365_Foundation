<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTraceTableLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for saving master planning trace information to a table.
/// </summary>
class ReqTraceTableLogger implements ReqTraceLoggerInterface
{
    ReqTraceLog lastInsertedTrace;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loggingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if logging is enabled.
    /// </summary>
    /// <returns>
    /// true if logging is enabled; otherwise, false.
    /// </returns>
    public boolean loggingEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the message and the context to the table.
    /// </summary>
    /// <param name="_context">
    /// The context in which the message has been recorded.
    /// </param>
    /// <param name="_message">
    /// The message.
    /// </param>
    public void writeLog(ReqTraceLogContext _context, ReqTraceLogMessage _message)
    {
        if (classIdGet(_message) == classNum(ReqTraceLogMessageEntry))
        {
            this.writeLogEntry(_context, _message);
        }
        else
        {
            this.writeLogDetails(_context, _message);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLogDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes logging details to a table.
    /// </summary>
    /// <param name="_context">
    ///    An instance of the <c>ReqTraceLogContext</c> class.
    /// </param>
    /// <param name="_message">
    ///    An instance of the <c>ReqTraceLogMessageDetail</c> class populated with the details to write.
    /// </param>
    protected void writeLogDetails(ReqTraceLogContext _context, ReqTraceLogMessageDetail _message)
    {
        ReqTraceLogDetail   reqTraceLogDetail;

        if (lastInsertedTrace.RecId)
        {
            reqTraceLogDetail.ReqTraceLog = lastInsertedTrace.RecId;
            reqTraceLogDetail.Sequence = _context.parmSequence();
            reqTraceLogDetail.MessageDetailType = _message.parmMessageDetailType();
            reqTraceLogDetail.MessageCon = _message.parmMessageCon();
            reqTraceLogDetail.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLogEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes logging entry to a table.
    /// </summary>
    /// <param name="_context">
    ///    An instance of the <c>ReqTraceLogContext</c> class.
    /// </param>
    /// <param name="_message">
    ///    An instance of the <c>ReqTraceLogMessageEntry</c> class populated with the message entry data to write.
    /// </param>
    protected void writeLogEntry(ReqTraceLogContext _context, ReqTraceLogMessageEntry _message)
    {
        ReqTraceLog reqTraceLog;

        reqTraceLog.TraceId = _context.parmTraceId();
        reqTraceLog.PlanVersion = _message.parmPlanVersion();
        reqTraceLog.bomLevel = _context.parmBOMLevel();
        reqTraceLog.ReqLevelState = _context.parmReqLevelState();
        reqTraceLog.ReqProcessStatus = _context.parmReqProcessStatus();
        reqTraceLog.Sequence = _context.parmSequence();
        reqTraceLog.ItemId = _message.parmItemId();
        reqTraceLog.ReqTrans = _message.parmReqTransRefRecId();
        reqTraceLog.MessageCon = _message.parmMessageCon();
        reqTraceLog.MessageType = _message.parmMessageType();
        reqTraceLog.insert();

        lastInsertedTrace = reqTraceLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ReqTraceTableLogger construct()
    {
        return new ReqTraceTableLogger();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>