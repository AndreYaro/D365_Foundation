<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreatePackedContainerGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkCreatePackedContainerGroup</c> class is used to create work after releasing the container group.
/// </summary>
public class WHSWorkCreatePackedContainerGroup extends WHSWorkCreatePackedContainerBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        containerTable = _common;

        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();

        super(containerTable, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWorkCreatePackedContainerGroup construct(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        WHSWorkCreatePackedContainerGroup workCreate = new WHSWorkCreatePackedContainerGroup(_common, _workCreateId);

        return workCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineForContainer</Name>
				<Source><![CDATA[
    protected void initTmpWorkLineForContainer()
    {
        tmpWorkLine.LicensePlateId  = containerTable.ContainerGroupingLicensePlateId;
        tmpWorkLine.ShipmentId      = containerTable.ShipmentId;

        WHSContainerLine firstContainerLine = this.initTmpWorkLineAndGetFirstContainerLine();

        this.initTmpWorkLineFromGroupedContainerLines(firstContainerLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromGroupedContainerLines</Name>
				<Source><![CDATA[
    private void initTmpWorkLineFromGroupedContainerLines(WHSContainerLine _firstContainerLine)
    {
        InventDim tmpWorkLineInventDim;

        tmpWorkLineInventDim.initFromInventDim(_firstContainerLine.inventDim());
        tmpWorkLineInventDim.clearLocationAndBelowDim(_firstContainerLine.ItemId);

        WHSContainerTable   groupedContainerTable;
        WHSContainerLine    containerLine;

        while select ItemId, Qty, UnitId, InventDimId from containerLine
            exists join groupedContainerTable
                where groupedContainerTable.ContainerGroupingLicensePlateId == containerTable.ContainerGroupingLicensePlateId
                    && groupedContainerTable.ContainerId                    == containerLine.ContainerId
        {
            tmpWorkLine.InventQty += containerLine.getInventoryHandlingQuantity();

            InventDim containerLineInventDim = containerLine.inventDim();
            containerLineInventDim.clearLocationAndBelowDim(containerLine.ItemId);

            tmpWorkLineInventDim.clearMismatchingDimensions(containerLineInventDim);
        }

        tmpWorkLine.HighestQty  = tmpWorkLine.InventQty;
        tmpWorkLine.InventDimId = InventDim::findOrCreate(tmpWorkLineInventDim).inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkTable</Name>
				<Source><![CDATA[
    protected void updateWorkTable(WHSWorkId _workId)
    {
        WHSWorkLineLoadLineDetails::updateWorkTableWithHasWorkLineLoadLineDetails(_workId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkLineLoadLineDetails</Name>
				<Source><![CDATA[
    protected void createWorkLineLoadLineDetails(WHSWorkLine _workLine)
    {
        WHSContainerTable groupedContainerTable;

        while select ContainerId from groupedContainerTable
            where groupedContainerTable.ContainerGroupingLicensePlateId == containerTable.ContainerGroupingLicensePlateId
        {
            WHSWorkLineLoadLineDetails::createWorkLineLoadLineDetailsFromContainerId(_workLine, groupedContainerTable.ContainerId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkInventTransContainer</Name>
				<Source><![CDATA[
    protected void createWorkInventTransContainer(WHSWorkLine _workLine)
    {
        WHSContainerLine    containerLine;
        WHSContainerTable   groupedContainerTable;
        WHSLoadLine         loadLine;

        ttsbegin;

        while select InventDimId, ItemId, Qty, LoadLine from containerLine
            join groupedContainerTable
                where groupedContainerTable.ContainerId                         == containerLine.ContainerId
                    && groupedContainerTable.ContainerGroupingLicensePlateId    == containerTable.ContainerGroupingLicensePlateId
            join InventTransId from loadLine
                where loadLine.RecId == containerLine.LoadLine
        {
            this.createWorkInventTransForContainerLine(_workLine, containerLine, loadLine);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>