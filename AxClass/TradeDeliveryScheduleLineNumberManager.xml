<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeDeliveryScheduleLineNumberManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TradeDeliveryScheduleLineNumberManager</c> class handles the numbering of delivery schedule lines.
/// </summary>
class TradeDeliveryScheduleLineNumberManager extends TradeLineNumberManager
{
    Set             usedLineNumbers;
    TradeLineNumber minLineNumber;
    TradeLineNumber maxLineNumber;
    TradeLineNumber origLineNumber;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addUsedLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores used line numbers in an internal <c>Set</c> class.
    /// </summary>
    /// <param name="_lineNumber">
    ///    A <c>TradeLineNumber</c> value that represents a line number value.
    /// </param>
    public void addUsedLineNumber(TradeLineNumber _lineNumber)
    {
        usedLineNumbers.add(_lineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a line number value is between the minimum and maximum values of line numbers in the
    ///    current order.
    /// </summary>
    /// <returns>
    ///    true if the line number is between the existing maximum and minimum line numbers; otherwise, false.
    /// </returns>
    public boolean checkLineNumber()
    {
        boolean         ret         = true;
        TradeLineNumber lineNumber  = lineNumbering.LineNumber;

        if ((lineNumber >= maxLineNumber && maxLineNumber != 0)
            || (lineNumber <= minLineNumber && minLineNumber != 0))
        {
            //Line number %1 is outside range of delivery schedule and cannot be used.
            ret = checkFailed(strfmt("@SYS319727", lineNumber));
        }

        return ret && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the next line number in a specified order, relative to a specified line number.
    /// </summary>
    /// <param name="_previousLineNumber">
    ///    A <c>TradeLineNumber</c> value that represents a line number value.
    /// </param>
    /// <returns>
    ///    A <c>TradeLineNumber</c> value that represents the next value.
    /// </returns>
    protected TradeLineNumber getNextLineNumber(TradeLineNumber _previousLineNumber)
    {
        SetEnumerator se = usedLineNumbers.getEnumerator();

        TradeLineNumber nextLineNumber;

        while (se.moveNext())
        {
            nextLineNumber = se.current();
            if (nextLineNumber > _previousLineNumber)
            {
                break;
            }
        }

        if (nextLineNumber <= _previousLineNumber)
        {
            // There is no next line number.
            nextLineNumber = 0;
        }

        return nextLineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOrderLineWithMultipleDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initiates a new instance of the <c>TradeDeliveryScheduleLineNumberManager</c> class.
    /// </summary>
    /// <param name="_lineNumbering">
    ///    An instance of the <c>TradeLineNumbering</c> table map.
    /// </param>
    public void initFromOrderLineWithMultipleDeliveries(TradeLineNumbering _lineNumbering)
    {
        this.setLine(_lineNumbering);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineNumberRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initiates the range of line numbers that are used in current order.
    /// </summary>
    public void initLineNumberRange()
    {
        TradeLineNumber lastUsedLineNumber;
        SetEnumerator   se = usedLineNumbers.getEnumerator();
        boolean         first = true;

        while (se.moveNext())
        {
            if (first)
            {
                minLineNumber = se.current();
                first = false;
            }
            lastUsedLineNumber = se.current();
        }

        maxLineNumber = lineNumbering.TradeLineNumbering::getNextLineNumber(lastUsedLineNumber);

        // This makes sure lines inserted at the bottom of the schedule are inserted in between.
        if (maxLineNumber != 0)
        {
            this.addUsedLineNumber(maxLineNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current record of a form data source is the last.
    /// </summary>
    /// <param name="_formDataSource">
    ///    A form data source object.
    /// </param>
    /// <returns>
    ///    true if the current record is the last; otherwise, false.
    /// </returns>
    protected boolean isLastLine(FormDataSource _formDataSource)
    {
        //Check whether this is at the bottom of the grid.
        //For delivery schedules this method is called at creation, after a a new row has been inserted at getPosition()+1.
        //We need to make sure no other order lines exist behind in the original line grid.
        if (PurchDeliveryScheduleLinesAvoidDuplicatedLineNumsFlight::instance().isEnabled())
        {
            //Also we need to check whether we are at the bottom of the grid:
            //where getPosition + 1 is the current item Line Num, and numberOfRowsLoaded is max Line Num
            return (_formDataSource.numberOfRowsLoaded() <= _formDataSource.getPosition() + 1
                && maxLineNumber == 0);
        }
        else
        {
            //Also we need to check whether we are at the bottom of the grid via +2.
            return (_formDataSource.getDataRow(_formDataSource.getPosition() + 2) == null
                && maxLineNumber == 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
        usedLineNumbers = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the line number of a newly created line to the range of used line numbers for the current order.
    /// </summary>
    /// <param name="_formDataSource">
    /// A <c>FormDataSource</c> object.
    /// </param>
    public void postUpdateLineNumber(FormDataSource _formDataSource = null)
    {
        super(_formDataSource);
        if (origLineNumber != 0)
        {
            this.removeUsedLineNumber(origLineNumber);
            origLineNumber = 0;
        }
        // If the line number is unchanged then it will get re-added here.
        this.addUsedLineNumber(lineNumbering.LineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeUsedLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a line number from the range of used line numbers for the current order.
    /// </summary>
    /// <param name="_lineNumber">
    ///    A <c>TradeLineNumber</c> value that represents a line number value.
    /// </param>
    public void removeUsedLineNumber(TradeLineNumber _lineNumber)
    {
        usedLineNumbers.remove(_lineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNegativeLineNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the sign of line numbers for a list of order lines.
    /// </summary>
    /// <param name="_scheduleLinesEnumerator">
    ///    An instance of the <c>ListEnumerator</c> class.
    /// </param>
    public void setNegativeLineNumbers(ListEnumerator _scheduleLinesEnumerator)
    {
        Common             tmpLine;
        TradeLineNumbering line;

        while (_scheduleLinesEnumerator.moveNext())
        {
            [tmpLine] = _scheduleLinesEnumerator.current();
            line = tmpLine.TradeLineNumbering::findLineFromTmpLine();

            if (line)
            {
                line.LineNumber = -line.LineNumber;
                line.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrigLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns a value to the <c>origLineNumber</c> member variable.
    /// </summary>
    /// <param name="_origLineNumber">
    ///    A <c>TradeLineNumber</c> value that represents a line number value.
    /// </param>
    public void setOrigLineNumber(TradeLineNumber _origLineNumber)
    {
        origLineNumber = _origLineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the value of a line number.
    /// </summary>
    public void updateLineNumber()
    {
        this.doUpdateLineNumber(!PurchDeliveryScheduleLinesAvoidDuplicatedLineNumsFlight::instance().isEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static TradeDeliveryScheduleLineNumberManager construct()
    {
        return new TradeDeliveryScheduleLineNumberManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newOrderLineWithMultipleDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs and initializes a new instance of the <c>TradeDeliveryScheduleLineNumberManager</c>
    ///    class.
    /// </summary>
    /// <param name="_common">
    ///    A table buffer.
    /// </param>
    /// <returns>
    ///    An instance of the <c>TradeDeliveryScheduleLineNumberManager</c> class.
    /// </returns>
    public static TradeDeliveryScheduleLineNumberManager newOrderLineWithMultipleDeliveries(Common _common)
    {
        TradeDeliveryScheduleLineNumberManager lineNumberManager = TradeDeliveryScheduleLineNumberManager::construct();
        lineNumberManager.initFromOrderLineWithMultipleDeliveries(_common);
        return lineNumberManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>