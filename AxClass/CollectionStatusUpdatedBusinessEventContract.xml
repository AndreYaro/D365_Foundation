<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CollectionStatusUpdatedBusinessEventContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The data contract for a <c>CollectionStatusUpdatedBusinessEvent</c>.
/// </summary>
[DataContract]
public final class CollectionStatusUpdatedBusinessEventContract extends BusinessEventsContract
{
    private CustAccount customerAccount;
    private Voucher voucher;
    private InvoiceId invoiceId;
    private TransDate followUpDate;
    private AmountMST transactionAmount;
    private str previousStatus;
    private str status;
    private LegalEntityDataAreaId legalEntity;
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromCustDispute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CollectionStatusUpdatedBusinessEventContract</c> from a <c>CustDispute</c> record.
    /// </summary>
    /// <param name = "_custDispute">A <c>CustDispute</c> record.</param>
    /// <returns>A <c>CollectionStatusUpdatedBusinessEventContract</c>.</returns>
    public static CollectionStatusUpdatedBusinessEventContract newFromCustDispute(CustDispute _custDispute)
    {
        var contract = new CollectionStatusUpdatedBusinessEventContract();
        contract.initialize(_custDispute);

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(CustDispute _custDispute)
    {
        var custTrans = CustTrans::find(_custDispute.CustTrans);
        
        customerAccount = custTrans.AccountNum;
        voucher = custTrans.Voucher;
        invoiceId = custTrans.Invoice;
        transactionAmount = custTrans.AmountMST;
        previousStatus = enum2Symbol(enumNum(CustVendDisputeStatus), this.getPreviousDisputeStatus(_custDispute));
        followUpDate = _custDispute.FollowUpDate;
        status = enum2Symbol(enumNum(CustVendDisputeStatus), _custDispute.Status);
        legalEntity = _custDispute.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousDisputeStatus</Name>
				<Source><![CDATA[
    private CustVendDisputeStatus getPreviousDisputeStatus(CustDispute _custDispute)
    {
        CustDisputeHistory custDisputeHistory;
               
        select firstonly Status from custDisputeHistory
            order by CreatedDateTime desc
            where custDisputeHistory.CustTrans == _custDispute.CustTrans && 
            custDisputeHistory.Status != _custDispute.Status;
  
        return custDisputeHistory.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    [DataMember('CustAccount'), BusinessEventsDataMember("@AccountsReceivable:CustomerAccount")]
    public CustAccount parmCustAccount(CustAccount _customerAccount = customerAccount)
    {
        customerAccount = _customerAccount;

        return customerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    [DataMember('Voucher'), BusinessEventsDataMember("@AccountsReceivable:Voucher")]
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    [DataMember('InvoiceId'), BusinessEventsDataMember("@AccountsReceivable:BusinessEventInvoiceId")]
    public InvoiceId parmInvoiceId(InvoiceId _invoiceId = invoiceId)
    {
        invoiceId = _invoiceId;

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFollowUpDate</Name>
				<Source><![CDATA[
    [DataMember('FollowUpDate'), BusinessEventsDataMember("@AccountsReceivable:FollowUpDate")]
    public TransDate parmFollowUpDate(TransDate _followUpDate = followUpDate)
    {
        followUpDate = _followUpDate;

        return followUpDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionAmount</Name>
				<Source><![CDATA[
    [DataMember('TransactionAmount'), BusinessEventsDataMember("@AccountsReceivable:TransactionAmount")]
    public AmountMST parmTransactionAmount(AmountMST _transactionAmount = transactionAmount)
    {
        transactionAmount = _transactionAmount;

        return transactionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviouStatus</Name>
				<Source><![CDATA[
    [DataMember('PreviousStatus'), BusinessEventsDataMember("@AccountsReceivable:PreviousStatus")]
    public str parmPreviouStatus(str _previousStatus = previousStatus)
    {
        previousStatus = _previousStatus;

        return previousStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatus</Name>
				<Source><![CDATA[
    [DataMember('Status'), BusinessEventsDataMember("@AccountsReceivable:Status")]
    public str parmStatus(str _status = status)
    {
        status = _status;

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    [DataMember('LegalEntity'), BusinessEventsDataMember("@AccountsReceivable:LegalEntity")]
    public LegalEntityDataAreaId parmLegalEntity(LegalEntityDataAreaId _legalEntity = legalEntity)
    {
        legalEntity = _legalEntity;

        return legalEntity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>