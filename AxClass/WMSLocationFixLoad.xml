<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationFixLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSLocationFixLoad</c> class provides the algorithm template to update the location load
/// information.
/// </summary>
public abstract class WmsLocationFixLoad
{
    WMSLocationId           wmsLocationId;
    InventLocationId        inventLocationId;
    WMSLocationType         wmsLocationType;
    DataAreaId              wmsLocationDataAreaId;

    WMSLocationLoad         wmsLocationLoadSummed;

    Weight                  totalCurrentWeightCalculated;
    Volume                  totalCurrentVolumeCalculated;

    WMSVolume               correctionCurrentVolume;
    WMSWeight               correctionCurrentWeight;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCorrections</Name>
				<Source><![CDATA[
    protected void calculateCorrections()
    {   
        correctionCurrentWeight         = totalCurrentWeightCalculated - wmsLocationLoadSummed.CurrentWeightAdjusted;
        correctionCurrentVolume         = totalCurrentVolumeCalculated - wmsLocationLoadSummed.CurrentVolumeAdjusted;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSummedLoad</Name>
				<Source><![CDATA[
    protected void calculateSummedLoad()
    {
        wmsLocationLoadSummed = WMSLocationLoad::selectSummedLoad(wmsLocationId, inventLocationId, wmsLocationDataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalLoad</Name>
				<Source><![CDATA[
    protected void calculateTotalLoad()
    {
        WMSLocation wmsLocation = this.getWMSLocationBuffer();

        [totalCurrentWeightCalculated, totalCurrentVolumeCalculated] = wmsLocation.currentLoadFromItemsCalculated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTrackPhysicalLoad</Name>
				<Source><![CDATA[
    protected abstract boolean canTrackPhysicalLoad()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLoad</Name>
				<Source><![CDATA[
    protected void deleteLoad()
    {
        WMSLocationLoad::deleteLoad(wmsLocationId, inventLocationId, wmsLocationDataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fixes the location load information when the location type has been changed.
    /// </summary>
    public void fixLoad()
    {
        if (!this.canTrackPhysicalLoad())
        {
            this.deleteLoad();

            return;
        }

        this.calculateSummedLoad();

        this.calculateTotalLoad();

        if (this.loadMustBeCorrected())
        {
            this.calculateCorrections();

            this.logInconsistencies();

            if (this.mustPostCorrections())
            {
                this.postCorrection();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSLocationBuffer</Name>
				<Source><![CDATA[
    protected WMSLocation getWMSLocationBuffer(boolean _fetchRealRecord = false)
    {
        WMSLocation wmsLocation;

        wmsLocation.wmsLocationId       = wmsLocationId;
        wmsLocation.InventLocationId    = inventLocationId;

        if (_fetchRealRecord)
        {
            wmsLocation  = WMSLocation::findInLegalEntity(wmsLocationId,inventLocationId, wmsLocationDataAreaId);
        }

        return wmsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadMustBeCorrected</Name>
				<Source><![CDATA[
    protected boolean loadMustBeCorrected()
    {
        if (wmsLocationLoadSummed.CurrentVolumeAdjusted != totalCurrentVolumeCalculated
        ||  wmsLocationLoadSummed.CurrentWeightAdjusted != totalCurrentWeightCalculated)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInconsistencies</Name>
				<Source><![CDATA[
    protected void logInconsistencies()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPostCorrections</Name>
				<Source><![CDATA[
    protected boolean mustPostCorrections()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsLocationDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmWmsLocationDataAreaId(DataAreaId _wmsLocationDataAreaId = wmsLocationDataAreaId)
    {
        wmsLocationDataAreaId = _wmsLocationDataAreaId;

        return wmsLocationDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsLocationId</Name>
				<Source><![CDATA[
    public WMSLocationId parmWmsLocationId(WMSLocationId _wmsLocationId = wmsLocationId)
    {
        wmsLocationId = _wmsLocationId;

        return wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsLocationType</Name>
				<Source><![CDATA[
    public WMSLocationType parmWmsLocationType(WMSLocationType _wmsLocationType = wmsLocationType)
    {
        wmsLocationType = _wmsLocationType;

        return wmsLocationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCorrection</Name>
				<Source><![CDATA[
    protected void postCorrection()
    {
        WMSLocationLoad wmsLocationLoadInsert;
        WMSLocation     wmsLocation;

        ttsbegin;

        wmsLocation = WMSLocation::findInLegalEntity(wmsLocationId, inventLocationId, wmsLocationDataAreaId);

        //create one record with the adjustment
        wmsLocationLoadInsert.initFromLocationCurrentAdjusted(wmsLocation, correctionCurrentWeight, correctionCurrentVolume);
        wmsLocationLoadInsert.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSLocationFixLoad construct(
        InventLocationId                _inventLocationId,
        WMSLocationId                   _wmsLocationId,
        WMSLocationType                 _wmsLocationType,
        DataAreaId                      _wmsLocationDataAreaId)
    {
        WMSLocationFixLoad_DoCorrections  wmsLocationFixLoad = WMSLocationFixLoad_DoCorrections::construct();

        wmsLocationFixLoad.parmInventLocationId(_inventLocationId);
        wmsLocationFixLoad.parmWmsLocationId(_wmsLocationId);
        wmsLocationFixLoad.parmWmsLocationType(_wmsLocationType);
        wmsLocationFixLoad.parmWmsLocationDataAreaId(_wmsLocationDataAreaId);

        return wmsLocationFixLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForWMSConsistencyCheck</Name>
				<Source><![CDATA[
    public static WMSLocationFixLoad constructForWMSConsistencyCheck(
        InventLocationId                _inventLocationId,
        WMSLocationId                   _wmsLocationId,
        WMSLocationType                 _wmsLocationType,
        DataAreaId                      _wmsLocationDataAreaId,
        WMSConsistencyCheck_Location    _wmsConsistencyCheck)
    {
        WMSLocationFixLoad_ConsistencyCheck  wmsLocationFixLoad = WMSLocationFixLoad_ConsistencyCheck::construct();

        wmsLocationFixLoad.parmInventLocationId(_inventLocationId);
        wmsLocationFixLoad.parmWmsLocationId(_wmsLocationId);
        wmsLocationFixLoad.parmWmsLocationType(_wmsLocationType);
        wmsLocationFixLoad.parmWmsLocationDataAreaId(_wmsLocationDataAreaId);
        wmsLocationFixLoad.parmWmsConsistencyCheck(_wmsConsistencyCheck);

        return wmsLocationFixLoad;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>