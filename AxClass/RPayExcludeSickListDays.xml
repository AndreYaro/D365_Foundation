<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayExcludeSickListDays</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements algorithm of excluded days for sick lists.
/// </summary>
class RPayExcludeSickListDays extends RPayExcludeDays
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExcludedDays</Name>
				<Source><![CDATA[
        Days getExcludedDays()
    {
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable;
        TransLink_RU                    transLink;
        RPaySickIllParameters           sickIllParameters;
        RPayTimeGroupMember             timeGroupMember;
        RPayTblSpecTimeTable            tblSpecTimeTable;
        Days                            exclBySickList, tmpDays;
        EndDate                         maxEndDate;
        TransDate                       docStartDate, docEndDate;

        this.resetExcludedPeriods();

        while select StartDate, EndDate, RpayIllType from averageEarnEmplPeriodTable
            order by startDate, endDate
            where averageEarnEmplPeriodTable.EmplId    == emplId     &&
                  averageEarnEmplPeriodTable.StartDate <= endDate    &&
                  averageEarnEmplPeriodTable.EndDate   >= startDate  &&
                  averageEarnEmplPeriodTable.averageEarnCodeType == RPayAverageEarnCodeType::SickList &&
                  averageEarnEmplPeriodTable.Included
        exists join sickIllParameters
            where sickIllParameters.PayIllType == averageEarnEmplPeriodTable.RpayIllType
        exists join tblSpecTimeTable
            where tblSpecTimeTable.RpayTblSpecTimeType  == RpayTblSpecTimeType::SickList &&
                  tblSpecTimeTable.RpayCalendarTimeCode == sickIllParameters.CalendarTimeCode
        exists join timeGroupMember
            where timeGroupMember.TimeGroup           == nonAppearanceTimeGroupCode &&
                  timeGroupMember.PayCalendarTimeCode == tblSpecTimeTable.RpayCalendarTimeCode
        #transLinkNotExistsReversed_RU(transLink, averageEarnEmplPeriodTable)
        {
            docStartDate = max(averageEarnEmplPeriodTable.startDate, startDate);
            docEndDate   = min(averageEarnEmplPeriodTable.endDate, endDate);

            if (docEndDate != maxEndDate)
            {
                if (maxEndDate > docStartDate && docEndDate > maxEndDate)
                {
                    docStartDate = maxEndDate + 1;
                }

                maxEndDate = docEndDate;
                tmpDays    = docEndDate - docStartDate + 1;

                if (tmpDays >= 0)
                {
                    exclBySickList += tmpDays;
                    this.updateExcludedPeriods(docStartDate, docEndDate, tmpDays, enum2str(averageEarnEmplPeriodTable.RpayIllType));
                }
            }
        }

        isDaysCalculated = true;

        return exclBySickList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastDocumentExcludeDate</Name>
				<Source><![CDATA[
        TransDate getLastDocumentExcludeDate()
    {
        TransDate                       lastDate;

        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable;
        TransLink_RU                    transLink;
        RPaySickIllParameters           sickIllParameters;
        RPayTimeGroupMember             timeGroupMember;
        RPayTblSpecTimeTable            tblSpecTimeTable;

        select maxof(EndDate) from averageEarnEmplPeriodTable
            where averageEarnEmplPeriodTable.EmplId                 == emplId           &&
                  averageEarnEmplPeriodTable.averageEarnCodeType    == RPayAverageEarnCodeType::SickList &&
                  averageEarnEmplPeriodTable.RpayIllType            != RpayIllType::ChildVacation &&
                  averageEarnEmplPeriodTable.Included
        exists join sickIllParameters
            where sickIllParameters.PayIllType == averageEarnEmplPeriodTable.RpayIllType
        exists join tblSpecTimeTable
            where tblSpecTimeTable.RpayTblSpecTimeType  == RpayTblSpecTimeType::SickList &&
                  tblSpecTimeTable.RpayCalendarTimeCode == sickIllParameters.CalendarTimeCode
        exists join timeGroupMember
            where timeGroupMember.TimeGroup           == nonAppearanceTimeGroupCode &&
                  timeGroupMember.PayCalendarTimeCode == tblSpecTimeTable.RpayCalendarTimeCode
        #transLinkNotExistsReversed_RU(transLink, averageEarnEmplPeriodTable);

        lastDate = averageEarnEmplPeriodTable.EndDate;

        return lastDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYearsExcludeDays</Name>
				<Source><![CDATA[
        container getYearsExcludeDays()
    {
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable;
        TransLink_RU                    transLink;
        RPaySickIllParameters           sickIllParameters;
        RPayTimeGroupMember             timeGroupMember;
        RPayTblSpecTimeTable            tblSpecTimeTable;

        while select StartDate, EndDate from averageEarnEmplPeriodTable
            where averageEarnEmplPeriodTable.EmplId    == emplId       &&
                  averageEarnEmplPeriodTable.PayPeriod <= endDate      &&
                  averageEarnEmplPeriodTable.PayPeriod >= startDate    &&
                  averageEarnEmplPeriodTable.averageEarnCodeType == RPayAverageEarnCodeType::SickList &&
                  averageEarnEmplPeriodTable.Included
        exists join sickIllParameters
                where sickIllParameters.PayIllType == averageEarnEmplPeriodTable.RpayIllType
        exists join tblSpecTimeTable
            where tblSpecTimeTable.RpayTblSpecTimeType  == RpayTblSpecTimeType::SickList &&
                  tblSpecTimeTable.RpayCalendarTimeCode == sickIllParameters.CalendarTimeCode
        exists join timeGroupMember
            where timeGroupMember.TimeGroup           == nonAppearanceTimeGroupCode &&
                  timeGroupMember.PayCalendarTimeCode == tblSpecTimeTable.RpayCalendarTimeCode
        #transLinkNotExistsReversed_RU(transLink, averageEarnEmplPeriodTable)
        {
            this.addYearsBetweenDates(averageEarnEmplPeriodTable.StartDate, averageEarnEmplPeriodTable.EndDate);
        }

        return yearsSet.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>