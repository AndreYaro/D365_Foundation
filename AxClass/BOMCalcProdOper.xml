<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcProdOper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomCalcProdOper extends BOMCalcOper
{
    ProdRoute       prodRoute;

    PmfProdCalcTransMap   prodCalcTransSetup;
    PmfProdCalcTransMap   prodCalcTransProcess;
    PmfProdCalcTransMap   prodCalcTransQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    void calc()
    {
        setprefix("@SYS28551");
        setprefix(#PreFixField(prodRoute,OprNum));

        if (!this.validate())
        {
            throw Exception::Error;
        }

        this.init();

        if (!this.canCalc())
        {
            return;
        }

        if (!prodRoute.CalcSetUp && !prodRoute.CalcProc && !prodRoute.CalcQty)
        {
            return;
        }

        this.calcCost();

        this.insertBOMCalcTrans();

        this.updateParent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCost</Name>
				<Source><![CDATA[
    void calcCost()
    {
        // if the value is changed from non-zero to zero on the production order, ProdCalcTrans should be calculated as BOMCalctrans,
        // so that quantity variance can be calculated through comparing the ProdCalcTrans and BOMCalcTrans.
        if (routeGroup.CalcSetUp && (prodRoute.CalcSetUp || RouteOpr::findRecId(prodRoute.RouteOprRefRecId).SetupTime) )
        {
            this.calcCostSetup();
        }

        if (routeGroup.CalcProc && (prodRoute.CalcProc || RouteOpr::findRecId(prodRoute.RouteOprRefRecId).ProcessTime))
        {
            this.calcCostProcess();
        }
        // there is no direct relation between prodRoute.CalcQty and RouteOpr::findRecId(prodRoute.RouteOprRefRecId).ProcessPerQty.
        if (routeGroup.CalcQty && prodRoute.CalcQty)
        {
            this.calcCostQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostProcess</Name>
				<Source><![CDATA[
    void calcCostProcess()
    {
        RouteCostCategory           routeCostCategory;
        CostGroupId                 costGroupId;
        BOMCalcProd                 localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
        RouteOprTimeProcess         process;
        routeCostCategory = RouteCostCategory::find(prodRoute.ProcessCategoryId);

        if (!routeCostCategory.checkValid())
        {
            throw Exception::Error;
        }

        process = prodRoute.CalcProc;
        if (localParentBOMCalcProd.parmProdTable().ProdType ==ProdType::Process)
        {
            process = process * localParentBOMCalcProd.parmPmfCostAllocationPct()/100;
        }
        costGroupId = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, routeCostCategory.CostGroupId);

        prodCalcTransProcess.CostAmount = this.getCost(routeCostCategory, process);
        prodCalcTransProcess.CostMarkup = 0;

        prodCalcTransProcess.SalesAmount    = BOMCostProfit::calcSalesPrice(prodCalcTransProcess.CostAmount,
                                                                            this.parmParentBOMCalc().parmProfitSet(),
                                                                            costGroupId);
        prodCalcTransProcess.SalesMarkup    = 0;
        prodCalcTransProcess.ConsumpVariable    = process;
        prodCalcTransProcess.ConsumpConstant    = 0;

        prodCalcTransProcess.CostGroupId    = costGroupId;
        prodCalcTransProcess.CalcType       = ItemCalcType::Process;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostQty</Name>
				<Source><![CDATA[
    void calcCostQty()
    {
        RouteCostCategory   routeCostCategory;
        CostGroupId         costGroupId;
        BOMCalcProd         localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
        RouteOprQtyToOpr    qtyToOpr;

        routeCostCategory = RouteCostCategory::find(prodRoute.QtyCategoryId);

        if (!routeCostCategory.checkValid())
        {
            throw Exception::Error;
        }

        qtyToOpr = prodRoute.CalcQty;
        if (localParentBOMCalcProd.parmProdTable().ProdType ==ProdType::Process)
        {
            qtyToOpr = qtyToOpr * localParentBOMCalcProd.parmPmfCostAllocationPct()/100;
        }
        costGroupId = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, routeCostCategory.CostGroupId);

        if (prodRoute.PhantomBOMFactor)
        {
            prodCalcTransQty.CostAmount = this.getCost(routeCostCategory, qtyToOpr * prodRoute.PhantomBOMFactor);
        }
        else
        {
            prodCalcTransQty.CostAmount = this.getCost(routeCostCategory, qtyToOpr);
        }

        prodCalcTransQty.CostMarkup = 0;

        prodCalcTransQty.SalesAmount    = BOMCostProfit::calcSalesPrice(prodCalcTransQty.CostAmount,
                                                                        this.parmParentBOMCalc().parmProfitSet(),
                                                                        costGroupId);
        prodCalcTransQty.SalesMarkup    = 0;

        prodCalcTransQty.ConsumpVariable    = qtyToOpr;
        prodCalcTransQty.ConsumpConstant    = 0;

        prodCalcTransQty.CostGroupId    = costGroupId;
        prodCalcTransQty.CalcType       = ItemCalcType::Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostSetup</Name>
				<Source><![CDATA[
    void calcCostSetup()
    {
        RouteCostCategory   routeCostCategory;
        CostGroupId         costGroupId;
        BOMCalcProd         localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
        RouteOprTimeSetup   setup;

        routeCostCategory = RouteCostCategory::find(prodRoute.SetUpCategoryId);

        if (!routeCostCategory.checkValid())
        {
            throw Exception::Error;
        }

        setup = prodRoute.CalcSetUp;
        if (localParentBOMCalcProd.parmProdTable().ProdType ==ProdType::Process)
        {
            setup = setup * localParentBOMCalcProd.parmPmfCostAllocationPct()/100;
        }

        costGroupId = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, routeCostCategory.CostGroupId);

        prodCalcTransSetup.CostAmount = 0;
        prodCalcTransSetup.CostMarkup = this.getCost(routeCostCategory, setup);

        prodCalcTransSetup.SalesAmount    = 0;
        prodCalcTransSetup.SalesMarkup    = BOMCostProfit::calcSalesMarkup(prodCalcTransSetup.CostMarkup,
                                                                            this.parmParentBOMCalc().parmProfitSet(),
                                                                            costGroupId);
        prodCalcTransSetup.ConsumpVariable    = 0;
        prodCalcTransSetup.ConsumpConstant    = setup;

        prodCalcTransSetup.CostGroupId    = costGroupId;
        prodCalcTransSetup.CalcType       = ItemCalcType::Setup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCost</Name>
				<Source><![CDATA[
    protected AmountMST getCost(
        RouteCostCategory      _routeCostCategory,
        RealBase               _quantum // Could be qty or hours
        )
    {
        AmountMST       cost;
        BOMCalcProd     localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;

        cost = CurrencyExchangeHelper::amount(_quantum * _routeCostCategory.costPrice(localParentBOMCalcProd.parmSiteId()), '');

        return cost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        this.initProdCalcTrans();

        this.initParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected void initParameters()
    {
        routeGroup  = RouteGroup::find(prodRoute.RouteGroupId);

        // reset lineNum to original state and assing it later
        if (routeGroup.CalcSetUp && prodRoute.CalcSetUp)
        {
            lineNum--;
        }

        if (routeGroup.CalcProc && prodRoute.CalcProc)
        {
            lineNum--;
        }

        if (routeGroup.CalcQty && prodRoute.CalcQty)
        {
            lineNum--;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdCalcTrans</Name>
				<Source><![CDATA[
    protected void initProdCalcTrans()
    {
        WrkCtrIdBase    wrkCtrId = prodRoute.getResource(true,
                                                         true,
                                                         dateNull(),
                                                         maxdate(),
                                                         prodRoute.prodTable().inventDim().InventSiteId,
                                                         true).WrkCtrId;

        prodCalcTransSetup.clear();
        prodCalcTransProcess.clear();
        prodCalcTransQty.clear();

        prodCalcTransSetup   = ProdCalcTrans::findIdRefCalcType(prodRoute.TableId,
                                                                prodRoute.RecId,
                                                                ItemCalcType::Setup,
                                                                true,
                                                                wrkCtrId,
                                                                prodRoute.OprId,
                                                                prodRoute.OprNum,
                                                                BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, RouteCostCategory::find(prodRoute.SetUpCategoryId).CostGroupId));

        prodCalcTransProcess = ProdCalcTrans::findIdRefCalcType(prodRoute.TableId,
                                                                prodRoute.RecId,
                                                                ItemCalcType::Process,
                                                                true,
                                                                wrkCtrId,
                                                                prodRoute.OprId,
                                                                prodRoute.OprNum,
                                                                BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, RouteCostCategory::find(prodRoute.ProcessCategoryId).CostGroupId));

        prodCalcTransQty     = ProdCalcTrans::findIdRefCalcType(prodRoute.TableId,
                                                                prodRoute.RecId,
                                                                ItemCalcType::Qty,
                                                                true,
                                                                wrkCtrId,
                                                                prodRoute.OprId,
                                                                prodRoute.OprNum,
                                                                BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, RouteCostCategory::find(prodRoute.QtyCategoryId).CostGroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBOMCalcTrans</Name>
				<Source><![CDATA[
    void insertBOMCalcTrans()
    {
        // if the value is changed from non-zero to zero on the production order, ProdCalcTrans should be inserted as BOMCalctrans,
        // so that quantity variance can be calculated through comparing the ProdCalcTrans and BOMCalcTrans.
        if (routeGroup.CalcSetUp && (prodRoute.CalcSetUp || RouteOpr::findRecId(prodRoute.RouteOprRefRecId).SetupTime) )
        {
            this.insertProdCalcTransSetup();
        }

        if (routeGroup.CalcProc && (prodRoute.CalcProc || RouteOpr::findRecId(prodRoute.RouteOprRefRecId).ProcessTime))
        {
            this.insertProdCalcTransProcess();
        }
        // there is no direct relation between prodRoute.CalcQty and RouteOpr::findRecId(prodRoute.RouteOprRefRecId).ProcessPerQty.
        if (routeGroup.CalcQty && prodRoute.CalcQty)
        {
            this.insertProdCalcTransQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdCalcTransProcess</Name>
				<Source><![CDATA[
    void insertProdCalcTransProcess()
    {
        this.updateProdCalcTrans(prodCalcTransProcess);

        prodCalcTransProcess.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdCalcTransQty</Name>
				<Source><![CDATA[
    void insertProdCalcTransQty()
    {
        this.updateProdCalcTrans(prodCalcTransQty);

        prodCalcTransQty.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdCalcTransSetup</Name>
				<Source><![CDATA[
    void insertProdCalcTransSetup()
    {
        this.updateProdCalcTrans(prodCalcTransSetup);

        prodCalcTransSetup.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentBOMCalc</Name>
				<Source><![CDATA[
    BOMCalcBase parmParentBOMCalc(BOMCalcBase _parentBOMCalcProd = parentBOMCalc)
    {
        BOMCalcProd ret;

        ret = super(_parentBOMCalcProd) as BOMCalcProd;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdRoute</Name>
				<Source><![CDATA[
    ProdRoute parmProdRoute(ProdRoute _prodRoute = prodRoute)
    {
        prodRoute = _prodRoute;
        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParent</Name>
				<Source><![CDATA[
    void updateParent()
    {
        BOMCalcProd     localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
        if (routeGroup.CalcSetUp && prodRoute.CalcSetUp)
        {
            localParentBOMCalcProd.updateCalcAmount(prodCalcTransSetup);
            localParentBOMCalcProd.updateCostCalcTransData(prodCalcTransSetup);
        }

        if (routeGroup.CalcProc && prodRoute.CalcProc)
        {
            localParentBOMCalcProd.updateCalcAmount(prodCalcTransProcess);
            localParentBOMCalcProd.updateCostCalcTransData(prodCalcTransProcess);
        }

        if (routeGroup.CalcQty && prodRoute.CalcQty)
        {
            localParentBOMCalcProd.updateCalcAmount(prodCalcTransQty);
            localParentBOMCalcProd.updateCostCalcTransData(prodCalcTransQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdCalcTrans</Name>
				<Source><![CDATA[
    void updateProdCalcTrans(PmfProdCalcTransMap _prodCalcTrans)
    {
        BOMCalcProd     localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
        if (!_prodCalcTrans.RecId)
        {
            _prodCalcTrans.initFromProdTable(localParentBOMCalcProd.parmProdTable(),
                                             _prodCalcTrans.CalcType);

            _prodCalcTrans.initFromProdRoute(prodRoute);

            _prodCalcTrans.Production    = NoYes::No;
            _prodCalcTrans.bom           = NoYes::No;
        }

        lineNum++;
        this.updateUnitId(_prodCalcTrans);

        _prodCalcTrans.TransDate            = this.parmParentBOMCalc().parmCalcDate();
        _prodCalcTrans.Qty                  = this.parmParentBOMCalc().parmSeriesSize();

        _prodCalcTrans.LineNum               = lineNum;

        _prodCalcTrans.CostPriceModelUsed    = BOMCalcCostPriceUsed::None;
        _prodCalcTrans.SalesPriceModelUsed  = BOMCalcSalesPriceUsed::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnitId</Name>
				<Source><![CDATA[
    void updateUnitId(PmfProdCalcTransMap _prodCalcTrans)
    {
        switch (_prodCalcTrans.CalcType)
        {
            // Setup time
            case ItemCalcType::Setup    :
            // Process time
            case ItemCalcType::Process  :
                // no unit id
                break;

            // Process qty
            case ItemCalcType::Qty      :
                _prodCalcTrans.UnitId   = this.parmParentBOMCalc().parmInventUnitId();
                break;

            default:
                throw error("@SYS97917");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        boolean ret = true;

        if (!prodRoute)
        {
            ret = checkFailed(strfmt("@SYS29104", classstr(BOMCalcProdOper)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMCalcProdOper construct()
    {
        return new BOMCalcProdOper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdRoute</Name>
				<Source><![CDATA[
    static BOMCalcProdOper newProdRoute(ProdRoute   _prodRoute,
                                               BOMCalcProd _parentBOMCalcProd,
                                               LineNum     _lineNum)
    {
        BOMCalcProdOper bomCalcProdOper = BOMCalcProdOper::construct();

        bomCalcProdOper.parmProdRoute(_prodRoute.data());
        bomCalcProdOper.parmLineNum(_lineNum);
        bomCalcProdOper.parmParentBOMCalc(_parentBOMCalcProd);

        return bomCalcProdOper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
