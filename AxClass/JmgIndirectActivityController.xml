<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgIndirectActivityController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgIndirectActivityController</c> class is the controller class for the
///    <c>JmgIndirectActivity</c> report.
/// </summary>
class JmgIndirectActivityController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the query that is used in the report.
    /// </summary>
    /// <returns>
    ///    The query that is used in the report.
    /// </returns>
    protected Query getQuery()
    {
        return this.getFirstQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract before the dialog box is display.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract, a common use case is to add or change a query. This
    /// method is called only during interactive scenario, before rendering the UI to user.For batch
    /// scenario, we do not invoke this method, because there is no user interaction and contract values
    /// are already saved in batch.Do not create any instance variables in this code if they are used
    /// during the lifetime of controller, because these will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        Query               query;
        QueryBuildRange     qbrType;
        QueryBuildRange     qbrCategory;
        JmgIpcCategory      jmgIpcCategory;
        JmgIpcActivity      jmgIpcActivity;
        Args                argsLocal = this.parmArgs();

        if (!argsLocal || !argsLocal.caller() || !argsLocal.record())
        {
            return;
        }

        query       = this.getQuery();
        qbrType     = SysQuery::findOrCreateRange(query.dataSourceTable(tablenum(JmgIpcActivity)), fieldnum(JmgIpcActivity, Type));
        qbrCategory = SysQuery::findOrCreateRange(query.dataSourceTable(tablenum(JmgIpcActivity)), fieldnum(JmgIpcActivity, Category));

        if (argsLocal.record() is JmgIpcCategory)
        {
            jmgIpcCategory = argsLocal.record() as JmgIpcCategory;
            qbrType.value(queryValue(jmgIpcCategory.Type));
            qbrCategory.value(queryValue(jmgIpcCategory.Category));
        }
        if (argsLocal.record() is JmgIpcActivity)
        {
            jmgIpcActivity = argsLocal.record() as JmgIpcActivity;
            qbrType.value(queryValue(jmgIpcActivity.Type));
            qbrCategory.value(queryValue(jmgIpcActivity.Category));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static JmgIndirectActivityController construct()
    {
        return new JmgIndirectActivityController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        static void main(Args _args)
    {
        JmgReportBaseController::startOperationWithArgs(_args, JmgIndirectActivityController::construct(), ssrsReportStr(JmgIndirectActivity, Report));
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>