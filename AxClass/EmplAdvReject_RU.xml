<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplAdvReject_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EmplAdvReject_RU extends EmplAdvPost_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        EmplTrans_RU    emplTrans;
        FactureTrans_RU factureTrans;
        boolean         ret = true;

        advanceTable.reread();

        if (advanceTable.Status == EmplAdvStatus_RU::Rejected)
        {
            return checkFailed("@SYS23024");
        }

        select firstonly emplTrans
            where emplTrans.AdvanceId == advanceTable.AdvanceId &&
                  emplTrans.SettleAmountCur;

        if (emplTrans)
        {
            ret = checkFailed("@GLS109130");
        }

        select firstonly factureTrans
            where factureTrans.InvoiceId       == advanceTable.AdvanceId &&
                  factureTrans.Module          == FactureModule_RU::Empl &&
                  factureTrans.FactureLineType == FactureLineType_RU::AdvanceReport;

        if (factureTrans)
        {
            ret = checkFailed("@GLS109135");
        }

        if (!LedgerFiscalCalendar::checkModuleIsOpen(
            SysModule::Purch,
            advanceTable.TransDate,
            LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
                Ledger::fiscalCalendar(CompanyInfo::current()),
                advanceTable.TransDate,
                FiscalPeriodType::Operating)))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherTaxLinks</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns TaxTransLedgerEntry temporary table with tax links from given voucher, with taxTrans
    /// field converted using _taxTransRecIDs
    /// </summary>
    /// <param name="_voucher">
    ///    Voucher number
    /// </param>
    /// <param name="_transDate">
    ///   Transaction date
    /// </param>
    /// <param name="_taxTransRecIDs">
    ///   Map to covert transaction RecIDs from stored in TaxTransLedgerEntry
    /// </param>
    /// <returns>
    ///  Temporary table which is copy of stored one except TaxTrans field
    /// </returns>
    protected TaxTransGeneralJournalAccountEntry getVoucherTaxLinks(Voucher _voucher, TransDate _transDate, Map _taxTransRecIDs)
    {
        TaxTransGeneralJournalAccountEntry ret;
        TaxTransGeneralJournalAccountEntry taxLink;
        TaxTrans                           taxTrans;

        ret.setTmp();

        while select TaxTrans, GeneralJournalAccountEntry, LedgerDimension, TaxTransRelationship from taxLink
            join TableId from taxTrans
            where taxTrans.Voucher      == _voucher &&
                  taxTrans.TransDate    == _transDate &&
                  taxTrans.RecId        == taxLink.TaxTrans
        {
            ret.TaxTrans                    = _taxTransRecIDs.lookup(taxLink.TaxTrans);
            ret.LedgerDimension             = taxLink.LedgerDimension;
            ret.GeneralJournalAccountEntry  = taxLink.GeneralJournalAccountEntry;
            ret.TaxTransRelationship        = taxLink.TaxTransRelationship;
            ret.doInsert();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrphanedTaxLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert _taxLinks where LedgerEntry is not set
    /// </summary>
    /// <param name="_taxLinks">
    ///  Temporary table with records to insert
    /// </param>
    protected void insertOrphanedTaxLinks(TaxTransGeneralJournalAccountEntry _taxLinks)
    {
        RecordInsertList                   taxLinks = new RecordInsertList(tableNum(TaxTransGeneralJournalAccountEntry));
        TaxTransGeneralJournalAccountEntry taxLink;

        while select TaxTrans, LedgerDimension, TaxTransRelationship from _taxLinks
            where ! _taxLinks.GeneralJournalAccountEntry
        {
            taxLink.clear();
            taxLink.TaxTrans             = _taxLinks.TaxTrans;
            taxLink.LedgerDimension      = _taxLinks.LedgerDimension;
            taxLink.TaxTransRelationship = _taxLinks.TaxTransRelationship;
            taxLinks.add(taxLink);
        }
        taxLinks.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submit the source document line implementation for red storno processing.
    /// </summary>
    /// <param name="_header">
    /// The source document header implementation.
    /// </param>
    private void reverseSourceDocument(SourceDocumentHeaderImplementation    _header)
    {
        AccountingEventProcessor            accountingEventProcessor;
        SourceDocument                      sourceDocument = SourceDocument::newFromSourceDocumentImplementation(_header);
        SubledgerJournalizationController   controller;
        SubledgerJournalizationRequest      request;

        // First, create the distributions
        AccountingDistributionProcessor::reverseSourceDocument_RU(sourceDocument);

        //Journalize the source document
        if (sourceDocument)
        {
            accountingEventProcessor = AccountingEventProcessor::construct();
            accountingEventProcessor.createAccountingEvent(sourceDocument, sourceDocument.parmAccountingDate(), AccountingEventType::Correction);

            controller = new SubledgerJournalizationController(classStr(SubledgerJournalizationOperation), identifierStr(journalize), SysOperationExecutionMode::Synchronous);
            request = controller.getDataContractObject(classStr(SubledgerJournalizationRequest));
            request.parmSourceDocumentHeaderRecId(sourceDocument.parmSourceDocumentHeader().RecId);
            controller.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        try
        {
            ttsbegin;

            this.runFreeLines();
            this.runSourceLines();

            advanceTable.Status   =  EmplAdvStatus_RU::Rejected;
            advanceTable.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        EmplAdvPost_RU::refreshFormData(advanceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFreeLines</Name>
				<Source><![CDATA[
    protected void runFreeLines()
    {
        EmplAdvLine_RU              emplAdvLine;
        EmplTrans_RU                emplTrans, emplTransStorno;
        TaxTrans                    taxTrans, taxTransStorno;
        EmplExchAdjustmentCalc_RU   emplExchAdjustment;
        // reversed recID -> reversal recid
        Map                         taxTransRecIDs;
        Types                       recIDType = extendedTypeId2Type(extendedTypeNum(RecId));

        TaxTransGeneralJournalAccountEntry taxLink;

        this.initLedgerVoucher();

        while select forupdate emplAdvLine
            where emplAdvLine.AdvanceId == advanceTable.AdvanceId   &&
                  (emplAdvLine.LineType == EmplAdvLineType_RU::None ||
                   emplAdvLine.LineType == EmplAdvLineType_RU::Expend)
        {
            this.createLedgerVoucherObject();

            emplTrans = EmplTrans_RU::findRecId(emplAdvLine.EmplTransRecId, true);

            emplTrans.SettleAmountCur = emplTrans.AmountCur;
            emplTrans.SettleAmountMST = emplTrans.AmountMST;
            emplTrans.ReportingSettleAmount = emplTrans.ReportingCurrencyAmount;
            emplTrans.Closed          = emplTrans.TransDate;
            emplTrans.Reversed        = NoYes::Yes;
            emplTrans.update();

            emplTransStorno.data(emplTrans);

            emplTransStorno.AmountCur                         = - emplTrans.AmountCur;
            emplTransStorno.AmountMST                         = - emplTrans.AmountMST;
            emplTransStorno.ReportingCurrencyAmount           = - emplTrans.ReportingCurrencyAmount;
            emplTransStorno.SettleAmountCur                   = - emplTrans.SettleAmountCur;
            emplTransStorno.SettleAmountMST                   = - emplTrans.SettleAmountMST;
            emplTransStorno.ReportingSettleAmount             = - emplTrans.ReportingSettleAmount;
            emplTransStorno.ExchAdjustment                    = - emplTrans.ExchAdjustment;
            emplTransStorno.ReportingExchAdjustment           = - emplTrans.ReportingExchAdjustment;
            emplTransStorno.ExchAdjustmentRealized            = - emplTrans.ExchAdjustmentRealized;
            emplTransStorno.ReportingExchAdjustmentRealized   = - emplTrans.ReportingExchAdjustmentRealized;
            emplTransStorno.ExchAdjustmentUnrealized          = - emplTrans.ExchAdjustmentUnrealized;
            emplTransStorno.ReportingExchAdjustmentUnrealized = - emplTrans.ReportingExchAdjustmentUnrealized;
            emplTransStorno.Correct                           = ! emplTrans.Correct;
            emplTransStorno.ReportingCurrencyCorrect          = ! emplTrans.ReportingCurrencyCorrect;
            emplTransStorno.RefRecId                          = emplTrans.RecId;
            emplTransStorno.RefTableId                        = emplTrans.TableId;
            emplTransStorno.Voucher                           = ledgerVoucher.findLedgerVoucherObject().parmVoucher();
            emplTransStorno.insert();

            taxTransRecIDs = new Map(recIDType, recIDType);
            while select taxTrans
                where taxTrans.Voucher   == emplTrans.Voucher &&
                      taxTrans.TransDate == emplTrans.TransDate
            {
                taxTransStorno.data(taxTrans);
                taxTransStorno.reverseTaxAmounts_RU();
                taxTransStorno.Voucher = emplTransStorno.Voucher;
                taxTransStorno.doInsert();
                taxTransRecIDs.insert(taxTrans.RecId, taxTransStorno.RecId);
            }

            this.reverseSourceDocument(emplAdvLine);

            taxLink = this.getVoucherTaxLinks(emplTrans.Voucher, emplTrans.TransDate, taxTransRecIDs);
            this.insertOrphanedTaxLinks(taxLink);

            emplExchAdjustment = EmplExchAdjustmentCalc_RU::newFromAdvReject(ledgerVoucher);
            emplExchAdjustment.recalcFutureUnrealizedExchAdj(emplTrans, true);
        }

        // <RUPAY>
        this.createPayTrans_OverNorm(true);
        // </RUPAY>

        this.endLedgerVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSourceLines</Name>
				<Source><![CDATA[
    protected void runSourceLines()
    {
        EmplAdvLine_RU emplAdvLine;
        EmplTrans_RU   emplTrans;

        while select forupdate emplAdvLine
            where emplAdvLine.AdvanceId == advanceTable.AdvanceId   &&
                  emplAdvLine.LineType != EmplAdvLineType_RU::None  &&
                  emplAdvLine.LineType != EmplAdvLineType_RU::Expend
        {
            emplTrans = EmplTrans_RU::findRecId(emplAdvLine.EmplTransRecId, true);
            emplTrans.AdvanceId = "";
            emplTrans.update();

            emplAdvLine.EmplTransRecId = 0;
            emplAdvLine.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EmplAdvReject_RU emplAdvReject;

        if (Box::yesNo("@GLS109126", DialogButton::No, "@GLS104500") == DialogButton::No)
        {
            return;
        }

        if (! _args.record() || _args.dataset() != tableNum(EmplAdvTable_RU))
        {
            throw error("@SYS18626");
        }

        emplAdvReject = new EmplAdvReject_RU(_args.record());

        if (emplAdvReject.check())
        {
            emplAdvReject.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>