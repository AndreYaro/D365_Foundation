<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistViewModelProjectExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AccDistViewModelProjectExtension</c> class is the project extension to the accounting
///    distribution view model.
/// </summary>
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProductRequisition), SourceDocument_ProductRequisition::PurchaseRequisition, classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProductOrder), SourceDocument_ProductOrder::PurchaseOrder, classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice, classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_CustomerInvoice), SourceDocument_CustomerInvoice::CustomerFreeTextInvoice, classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ExpenseReport), SourceDocument_ExpenseReport::ExpenseReport, classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProjectTimesheets), SourceDocument_ProjectTimesheets::Timesheets, classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_EarningStatement), SourceDocument_EarningStatement::EarningStatement, classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_PayrollPayStatement), SourceDocument_PayrollPayStatement::PayStatement, classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_TravelRequisition), SourceDocument_TravelRequisition::TravelRequisition, classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_AdvancedLedgerEntry), SourceDocument_AdvancedLedgerEntry::AdvancedLedgerEntry, classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProjAdvancedJournal), SourceDocument_ProjAdvancedJournal::ProjAdvancedJournal, classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension)),
SourceDocumentEnumLiteralClassExtensionAttribute(enumStr(BudgetReservation_SourceDocument_PSN), enumLiteralStr(BudgetReservation_SourceDocument_PSN, BudgetReservation), classStr(AccountingDistributionFormView), classStr(AccDistFormViewProjectExtension))
]
class AccDistViewModelProjectExtension extends AccDistViewModelExtension
{
    AccDistFormViewProjectExtension accDistFormViewProjectExtension;
    ProjectAccountingDistribution   activeProjectAccountingDistribution;
    ProjectAccountingDistribution   previousProjectAccountingDistribution;
    AccountingDistribution          previousAccountingDistribution;
    FormDataSource                  projectAccountingDistribution_ds;
    boolean                         isDistributionModified;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountingDistributionCreated</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void accountingDistributionCreated()
    {
        ProjectAccountingDistribution       newProjectAccountingDistribution;
        AccDistProcessorProjectExtension    accDistProcessorProjectExtension;

        if (accDistFormViewProjectExtension.parmIsProject())
        {
            ttsbegin;
            // Check if another method has already created the project accounting distribution
            select RecId from newProjectAccountingDistribution where newProjectAccountingDistribution.AccountingDistribution == accountingDistributionViewModel.parmActiveAccountingDistribution().RecId;

            if (!newProjectAccountingDistribution)
            {
                if (previousProjectAccountingDistribution.ProjTable)
                {
                    newProjectAccountingDistribution.clear();
                    newProjectAccountingDistribution.ProjTable = previousProjectAccountingDistribution.ProjTable;
                    newProjectAccountingDistribution.ProjCategory = previousProjectAccountingDistribution.ProjCategory;
                    newProjectAccountingDistribution.SmmActivities = previousProjectAccountingDistribution.SmmActivities;
                    newProjectAccountingDistribution.ProjFundingSource = previousProjectAccountingDistribution.ProjFundingSource;
                    newProjectAccountingDistribution.ProjLineProperty = previousProjectAccountingDistribution.ProjLineProperty;
                    newProjectAccountingDistribution.Currency = previousProjectAccountingDistribution.Currency;
                    newProjectAccountingDistribution.TransactionCurrencyPrice = previousProjectAccountingDistribution.TransactionCurrencyPrice;
                    newProjectAccountingDistribution.TaxGroupHeading = previousProjectAccountingDistribution.TaxGroupHeading;
                    newProjectAccountingDistribution.TaxItemGroupHeading = previousProjectAccountingDistribution.TaxItemGroupHeading;
                    ProjectAccountingDistribution::fieldModifiedTransCurrencyPricePost(accountingDistributionViewModel.parmActiveAccountingDistribution(), newProjectAccountingDistribution);
                    ProjectAccountingDistribution::writeProjectAccountingDistribution(accountingDistributionViewModel.parmActiveAccountingDistribution(), newProjectAccountingDistribution);

                    accDistProcessorProjectExtension = AccDistProcessorProjectExtension::construct();
                    accDistProcessorProjectExtension.createChildDistributions(accountingDistributionViewModel.parmActiveAccountingDistribution(), newProjectAccountingDistribution);

                    accountingDistributionViewModel.parmAccountingDistributionView().parmAccountingDistributionDatasource().research();
                    accountingDistributionViewModel.parmAccountingDistributionView().parmAccountingDistributionDatasource().refresh();
                }
            }

            this.createWorkInProcessDistribution(accountingDistributionViewModel.parmActiveAccountingDistribution());

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkInProcessDistribution</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createWorkInProcessDistribution(AccountingDistribution _extendedPriceDistribution)
    {
        // If the distribution is an Extended Price distribution for a project advanced journal line, a work in process accounting distribution record needs to be created.
        ProjAdvancedJournalLine projAdvancedJournalLine = ProjAdvancedJournalLine::findBySourceDocumentLine(_extendedPriceDistribution.SourceDocumentLine);

        if (projAdvancedJournalLine && _extendedPriceDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice)
        {
            AccountingDistribution previousWipAccountingDistribution = ProjAdvancedJournalSourceDocumentLineItem::getWorkInProcessDistribution(previousAccountingDistribution.RecId);
            ProjectAccountingDistribution previousWipProjAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(previousWipAccountingDistribution.RecId);

            AccountingDistribution newWipAccountingDistribution = ProjAdvancedJournalSourceDocumentLineItem::getWorkInProcessDistribution(_extendedPriceDistribution.RecId);
                
            ttsbegin;

            if (!newWipAccountingDistribution && previousWipAccountingDistribution)
            {
                newWipAccountingDistribution.AccountingLegalEntity = previousWipAccountingDistribution.AccountingLegalEntity;
                newWipAccountingDistribution.LedgerDimension = previousWipAccountingDistribution.LedgerDimension;
                newWipAccountingDistribution.TransactionCurrency = previousWipAccountingDistribution.TransactionCurrency;
                newWipAccountingDistribution.SourceDocumentLine = previousWipAccountingDistribution.SourceDocumentLine;
                newWipAccountingDistribution.SourceDocumentHeader = previousWipAccountingDistribution.SourceDocumentHeader;
                newWipAccountingDistribution.MonetaryAmount = previousWipAccountingDistribution.MonetaryAmount;
                newWipAccountingDistribution.AccountingDate = previousWipAccountingDistribution.AccountingDate;
                newWipAccountingDistribution.AllocationFactor = _extendedPriceDistribution.AllocationFactor;
                newWipAccountingDistribution.ReferenceDistribution = _extendedPriceDistribution.RecId;
                newWipAccountingDistribution.ReferenceRole = previousWipAccountingDistribution.ReferenceRole;
                newWipAccountingDistribution.Number = _extendedPriceDistribution.Number + 1;
                newWipAccountingDistribution.insert();
                
                ProjectAccountingDistribution wipProjAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(newWipAccountingDistribution.RecId);

                if (!wipProjAccountingDistribution)
                {
                    wipProjAccountingDistribution.initFromAccountingDistribution(newWipAccountingDistribution);
                    wipProjAccountingDistribution.Currency = previousWipProjAccountingDistribution.Currency;
                    wipProjAccountingDistribution.ProjTable = previousWipProjAccountingDistribution.ProjTable;
                    wipProjAccountingDistribution.ProjCategory = previousWipProjAccountingDistribution.ProjCategory;
                    wipProjAccountingDistribution.ProjFundingSource = previousWipProjAccountingDistribution.ProjFundingSource;
                    wipProjAccountingDistribution.ProjLineProperty = previousWipProjAccountingDistribution.ProjLineProperty;
                    wipProjAccountingDistribution.SmmActivities = previousWipProjAccountingDistribution.SmmActivities;
                    wipProjAccountingDistribution.TaxGroupHeading = previousWipProjAccountingDistribution.TaxGroupHeading;
                    wipProjAccountingDistribution.TaxItemGroupHeading = previousWipProjAccountingDistribution.TaxItemGroupHeading;
                    wipProjAccountingDistribution.TransactionCurrencyPrice = previousWipProjAccountingDistribution.TransactionCurrencyPrice;
                    ProjectAccountingDistribution::fieldModifiedTransCurrencyPricePost(newWipAccountingDistribution, wipProjAccountingDistribution);
                    ProjectAccountingDistribution::writeProjectAccountingDistribution(newWipAccountingDistribution, wipProjAccountingDistribution);

                    newWipAccountingDistribution.TransactionCurrencyAmount = wipProjAccountingDistribution.TransactionCurrencyAmount;
                    newWipAccountingDistribution.update();      
                }

                // Update the original WIP distribution as extended price distribution may have changed during split.
                ProjectAccountingDistributionEventHandler::updateWorkInProcessDistribution(previousAccountingDistribution);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingDistributionCreating</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void accountingDistributionCreating()
    {
        if (accDistFormViewProjectExtension.parmIsProject())
        {
            previousProjectAccountingDistribution.data(activeProjectAccountingDistribution);
            previousAccountingDistribution.data(accountingDistributionViewModel.parmActiveAccountingDistribution());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingDistributionModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that the accounting distribution is modified.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void accountingDistributionModified()
    {
        isDistributionModified = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingDistributionWritten</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void accountingDistributionWritten()
    {
        ProjectAccountingDistribution   localProjectAccountingDistribution;
        SourceDocumentLine              sourceDocumentLine;

        if (accDistFormViewProjectExtension.parmIsProject())
        {
            if (activeProjectAccountingDistribution.ProjTable)
            {
                // Save the record as Project or Category may have been changed on Account Distribution line
                ttsbegin;
                localProjectAccountingDistribution = ProjectAccountingDistribution::find(activeProjectAccountingDistribution.RecId, true);

                localProjectAccountingDistribution.ProjTable    = activeProjectAccountingDistribution.ProjTable;
                localProjectAccountingDistribution.ProjCategory = activeProjectAccountingDistribution.ProjCategory;
                localProjectAccountingDistribution.Currency     = activeProjectAccountingDistribution.Currency;
                localProjectAccountingDistribution.smmActivities             = activeProjectAccountingDistribution.smmActivities;
                localProjectAccountingDistribution.ProjLineProperty          = activeProjectAccountingDistribution.ProjLineProperty;
                localProjectAccountingDistribution.ProjFundingSource         = activeProjectAccountingDistribution.ProjFundingSource;
                localProjectAccountingDistribution.TaxGroupHeading           = activeProjectAccountingDistribution.TaxGroupHeading;
                localProjectAccountingDistribution.TaxItemGroupHeading       = activeProjectAccountingDistribution.TaxItemGroupHeading;
                localProjectAccountingDistribution.TransactionCurrencyPrice  = activeProjectAccountingDistribution.TransactionCurrencyPrice;
                ProjectAccountingDistribution::fieldModifiedTransCurrencyPricePost(accountingDistributionViewModel.parmActiveAccountingDistribution(), localProjectAccountingDistribution);
                localProjectAccountingDistribution.update();
                ttsCommit;
            }

            accountingDistributionViewModel.parmAccountingDistributionView().parmAccountingDistributionDatasource().research();
            accountingDistributionViewModel.parmAccountingDistributionView().parmAccountingDistributionDatasource().refresh();

            sourceDocumentLine  = accountingDistributionViewModel.parmActiveSourceDocumentLineItem().parmSourceDocumentLine();

            if (isDistributionModified && sourceDocumentLine.SourceRelationType == tableNum(PayrollPayStatementLine))
            {
                PayrollPayStatementLine::setPaystatmentHeader(sourceDocumentLine.SourceDocumentHeader);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeProjectAccountingDistribution</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void changeProjectAccountingDistribution(AccountingDistribution _accountingDistribution)
    {
        this.setActiveProjectAccountingDistribution(_accountingDistribution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>distsResetPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event after resetting accounting distributions to the original allocations.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void distsResetPost()
    {
        SourceDocumentLine      callerSourceDocumentLine;
        SourceDocumentLineItem  topParentSourceDocumentLineItem;

        if (accDistFormViewProjectExtension.parmIsProject())
        {
            callerSourceDocumentLine = accountingDistributionViewModel.parmAccountingDistributionView().parmCallerSourceDocumentLine();
            if (callerSourceDocumentLine)
            {
                topParentSourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(callerSourceDocumentLine.RecId);
                if (topParentSourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
                {
                    appl.globalCache().remove(identifierStr(AccDistViewModelProjectExtension), identifierStr(AccDistViewModelProjectExtension));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>distsResetPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event before resetting accounting distributions to the original allocations.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void distsResetPre()
    {
        SourceDocumentLine      callerSourceDocumentLine;
        SourceDocumentLineItem  topParentSourceDocumentLineItem;

        if (accDistFormViewProjectExtension.parmIsProject())
        {
            callerSourceDocumentLine = accountingDistributionViewModel.parmAccountingDistributionView().parmCallerSourceDocumentLine();
            if (callerSourceDocumentLine)
            {
                topParentSourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(callerSourceDocumentLine.RecId);
                if (topParentSourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
                {
                    appl.globalCache().set(identifierStr(AccDistViewModelProjectExtension), identifierStr(AccDistViewModelProjectExtension), true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize the extension to the accounting distribution view model.
    /// </summary>
    public void initialize()
    {
        super();

        accDistFormViewProjectExtension = accDistViewExtension;
        projectAccountingDistribution_ds = accDistFormViewProjectExtension.parmProjectAccountingDistributionDS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldLegalEntity</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void modifiedFieldLegalEntity()
    {
        ProjectAccountingDistribution::fieldModifiedLegalEntityPost(accountingDistributionViewModel.parmActiveAccountingDistribution(), activeProjectAccountingDistribution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldProjCategory</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifiedFieldProjCategory()
    {
        boolean     ret;

        ret = ProjectAccountingDistribution::fieldValidateCategoryIdPost(accountingDistributionViewModel.parmActiveAccountingDistribution(), activeProjectAccountingDistribution);
        if (ret)
        {
            ProjectAccountingDistribution::fieldModifiedCategoryIdPost(accountingDistributionViewModel.parmActiveAccountingDistribution(), activeProjectAccountingDistribution);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldProjTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifiedFieldProjTable()
    {
        boolean     ret;

        ret = ProjectAccountingDistribution::fieldValidateProjIdPost(accountingDistributionViewModel.parmActiveAccountingDistribution(), activeProjectAccountingDistribution);
        if (ret)
        {
            ProjectAccountingDistribution::fieldModifiedProjIdPost(accountingDistributionViewModel.parmActiveAccountingDistribution(), activeProjectAccountingDistribution);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveProjectAccountingDistribution</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ProjectAccountingDistribution parmActiveProjectAccountingDistribution()
    {
        return activeProjectAccountingDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActiveProjectAccountingDistribution</Name>
				<Source><![CDATA[
    private void setActiveProjectAccountingDistribution(AccountingDistribution _accountingDistribution)
    {
        if (projectAccountingDistribution_ds)
        {
            activeProjectAccountingDistribution = projectAccountingDistribution_ds.cursor();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to the accounting distribution view model extension events.
    /// </summary>
    protected void subscribe()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            accountingDistributionViewModel.accDistCreatingEventHandler += eventhandler(this.accountingDistributionCreating);
            accountingDistributionViewModel.accDistCreatedEventHandler += eventhandler(this.accountingDistributionCreated);
            accountingDistributionViewModel.accDistWrittenEventHandler += eventhandler(this.accountingDistributionWritten);
            accountingDistributionViewModel.accDistModifiedEventHandler += eventhandler(this.accountingDistributionModified);
            accountingDistributionViewModel.distsResetPreEventHandler += eventhandler(this.distsResetPre);
            accountingDistributionViewModel.distsResetPostEventHandler += eventhandler(this.distsResetPost);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>