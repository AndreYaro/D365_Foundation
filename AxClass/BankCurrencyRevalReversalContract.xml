<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalReversalContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalReversalContract</c> class holds the data contract values for the bank - foreign currency revaluation reversal process.
/// </summary>
[DataContractAttribute]
[SysOperationContractProcessing(classStr(BankCurrencyRevalReversalContractUIBuilder))]
internal final class BankCurrencyRevalReversalContract extends SysOperationAttributedDataContractInfo implements SysOperationValidatable
{
    private TransDate transDate;
    private RecId bankCurrencyRevalHistoryRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    [DataMember]
    internal TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankCurrencyRevalHistoryRecId</Name>
				<Source><![CDATA[
    [DataMember]
    internal RecId parmBankCurrencyRevalHistoryRecId(RecId _bankCurrencyRevalHistoryRecId = bankCurrencyRevalHistoryRecId)
    {
        bankCurrencyRevalHistoryRecId = _bankCurrencyRevalHistoryRecId;

        return bankCurrencyRevalHistoryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        BankCurrencyRevalHistory bankCurrencyRevalHistory = BankCurrencyRevalHistory::find(bankCurrencyRevalHistoryRecId);
                
        return bankCurrencyRevalHistory.eligibleForReversal() && this.validateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDate</Name>
				<Source><![CDATA[
    internal boolean validateDate()
    {
        boolean ok = true;

        RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        // Validate date falls in a currently open fiscal period.
        if (!LedgerFiscalCalendar::checkDateIsValid(calendarRecId, transDate, FiscalPeriodType::Operating, false))
        {
            ok = checkFailed(strFmt("@CashManagement:BankCurrencyRevalDateNotInOpenFiscalYear", "@CashManagement:BankCurrencyRevalReversalDate", curExt()));
        }

        // Validate date occurs on or after the history record being reversed
        BankCurrencyRevalHistory bankCurrencyRevalHistory = BankCurrencyRevalHistory::find(bankCurrencyRevalHistoryRecId);

        if (bankCurrencyRevalHistory.TransDate > transDate)
        {
            ok = checkFailed(strFmt("@CashManagement:BankCurrencyRevalReversalDateValidation", bankCurrencyRevalHistory.TransDate));
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>