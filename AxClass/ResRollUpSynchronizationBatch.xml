<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResRollUpSynchronizationBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Synchronize capacity roll-ups for all activity resources.
/// </summary>
public class ResRollUpSynchronizationBatch extends ResCapacitySynchronizationTask implements BatchRetryable
{
    #OCCRetryCount

    const Integer CurrentVersion = 3;
    DialogField dialogSyncOnlyDelta;

    #LOCALMACRO.CurrentList
        fromDate,
        toDate,
        periodCode,
        removeExistingRecords
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs roll-up synchronization batch arguments.
    /// </summary>
    /// <returns>Roll-up synchronization batch arguments.</returns>
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks roll-up synchronization task arguments.
    /// </summary>
    /// <param name = "packedClass">Roll-up synchronization task arguments.</param>
    /// <returns>True when the operation succeeds. Otherwise, false.</returns>
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Integer version = conPeek(packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlsToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates dialog with controls.
    /// </summary>
    /// <param name = "_dialog">Dialog to add controls to.</param>
    protected void addControlsToDialog(DialogRunbase _dialog)
    {
        super(_dialog);

        this.initializeDateValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDateValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize date values on the dialog.
    /// </summary>
    protected void initializeDateValues()
    {
        date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        dialogToDate.value(currentDate);
        dialogFromDate.value(currentDate);
        dialogRemoveExistingRecords.value(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes batch roll-up synchronization.
    /// </summary>
    public void run()
    {
        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

        this.initDates(false);

        utcdatetime fromDateUTC = this.getFromDateUtc();
        utcdatetime toDateUTC = this.getToDateUtc();

        Enumerator scheduleEnumerator = ResReservationAnalysis::getSchedulesForSynchronizationInRange(
            fromDateUTC, toDateUTC).getEnumerator();
       
        ResRollUpSynchronizationTask activityResourceSyncTask;

        while (scheduleEnumerator.moveNext())
        {
            ResRollUpSynchronizationSchedule schedule = scheduleEnumerator.current();
            activityResourceSyncTask = ResRollUpSynchronizationTask::construct();
            if (schedule.activityResourceId())
            {
                activityResourceSyncTask.activityResourceId(schedule.activityResourceId());
            }
            activityResourceSyncTask.parmFromDate(DateTimeUtil::date(schedule.start()));
            activityResourceSyncTask.parmToDate(DateTimeUtil::date(schedule.end()));
            activityResourceSyncTask.parmPeriodCode(periodCode);
            activityResourceSyncTask.parmRemoveExistingRecords(removeExistingRecords);

            batchHeader.addTask(activityResourceSyncTask);
        }

        if (activityResourceSyncTask)
        {
            batchHeader.save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of resource roll-up synchronization batch.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of resourcer roll-up synchronization batch.
    /// </summary>
    /// <returns>Resource roll-up synchronization batch.</returns>
    public static ResRollUpSynchronizationBatch construct()
    {
        ResRollUpSynchronizationBatch batch = new ResRollUpSynchronizationBatch();
        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the job description.
    /// </summary>
    /// <returns>Job description.</returns>
    public static ClassDescription description()
    {
        return "@Res:CapacityRollUpSynchronization";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the roll-up synchronization job user interface.
    /// </summary>
    /// <param name = "_args">Action arguments.</param>
    public static void main(Args _args)
    {
        boolean executeRunOperation = true;

        if (ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled())
        {
            ProjParameters projParameters = ProjParameters::find();

            if (projParameters && projParameters.ResPerfDataUpgradeStatus != ProjDataUpgradeStatus::NotUpgraded)
            {
                executeRunOperation = false;
                warning("@Res:ResRollupSynchronizationWarning");
            }
        }

        if (executeRunOperation)
        {
            var task = ResRollUpSynchronizationBatch::construct();

            if (task.prompt())
            {
                task.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>