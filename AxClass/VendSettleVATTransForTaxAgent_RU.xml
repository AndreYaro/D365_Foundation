<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSettleVATTransForTaxAgent_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendSettleVATTransForTaxAgent_RU
{
    CustVendSettle              custVendSettle;
    LedgerVoucherObject         ledgerVoucherObject;
    CustVendTransPostingLog_RU  postingLog;
    VendTrans                   vendTransInvoice, vendTransPayment;
    LedgerVoucher               ledgerVoucher;
    Map                         mapTaxAmounts;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc(AmountCur    _settleAmountCur,
                     AmountMST    _settleAmountMST)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPostTaxes</Name>
				<Source><![CDATA[
    public void calcAndPostTaxes(
        AmountCur           _settleAmountTransaction,
        AmountMST           _settleAmountAccounting,
        AmountMSTSecondary  _settleAmountreporting)
    {
        TaxAmount                     taxAmountMST, taxAmountCur, amountMSTCalc, amountCurCalc,
                                      taxAmountMSTSum, taxAmountCurSum, taxAmountReporting, taxAmountReportingSum, amountReportingCalc;

        TaxBase                       baseAmountMst, baseAmountCur, baseAmountMstCalc, baseAmountCurCalc,
                                      baseAmountMstSum, baseAmountCurSum;

        VATTaxAgentPaymentAmounts_RU  paymentAmounts;
        MapEnumerator                 me;
        TaxCode                       taxCode;
        TaxTrans                      taxTransInvoice;
        CustVendTransPostingLog_RU    postingLogLoop, postingLogSource;
        int                           counter = 1;
        container                     exclude;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00025, funcName());

        void updatePostingLogAmount(TaxAmount _taxAmountMST, AmountMST _baseAmountMST, TaxAmountCur _taxAmountCur, AmountCur _baseAmountCur, AmountMSTSecondary _taxAmountReporting)
        {
            postingLogLoop.AmountMST        += _taxAmountMST;
            postingLogLoop.AmountCur        += _taxAmountCur;
            postingLogLoop.AmountMSTSecond  += _taxAmountReporting;
            postingLogLoop.TaxBaseAmountMST += _baseAmountMST;
            postingLogLoop.TaxBaseAmountCur += _baseAmountCur;
            postingLogLoop.update();
        }

        select count(RecId), sum(AmountMST), sum(AmountCur), sum(TaxBaseAmountMST), sum(TaxBaseAmountCur), sum(AmountMSTSecond) from postingLogSource
            where postingLogSource.RefTableId        == vendTransPayment.TableId
               && postingLogSource.OffSetRecId       == vendTransPayment.RecId
               && (postingLogSource.TransRecId        == 0
               || postingLogSource.TransRecId        == vendTransInvoice.RecId)
               && postingLogSource.CannotBeReversed  == NoYes::Yes
               && postingLogSource.PostingLogType    == CustVendTransPostingLogType_RU::VATTaxAgent;

        paymentAmounts = VATTaxAgentPaymentAmounts_RU::construct(vendTransInvoice);
        paymentAmounts.calc(_settleAmountTransaction, _settleAmountAccounting, _settleAmountreporting);

        me = paymentAmounts.mapTaxAmounts().getEnumerator();
        ttsbegin;
        while (me.moveNext())
        {
            taxCode = me.currentKey();

            if (taxCode)
            {
                select firstonly taxTransInvoice
                    where taxTransInvoice.Voucher   == vendTransInvoice.Voucher
                       && taxTransInvoice.TransDate == vendTransInvoice.TransDate
                       && taxTransInvoice.TaxCode   == taxCode;

                select firstonly forupdate postingLogLoop
                    where postingLogLoop.RefTableId           == vendTransPayment.TableId
                       && postingLogLoop.OffSetRecId          == vendTransPayment.RecId
                       && (postingLogLoop.TransRecId          == 0
                       || postingLogLoop.TransRecId           == vendTransInvoice.RecId)
                       && postingLogLoop.TaxCode              == taxCode
                       && postingLogLoop.vatOperationCode_RU  == taxTransInvoice.taxTrans_RU().vatOperationCode_RU
                       && postingLogLoop.CannotBeReversed     == NoYes::Yes
                       && postingLogLoop.PostingLogType       == CustVendTransPostingLogType_RU::VATTaxAgent;

                taxAmountMST        = paymentAmounts.taxAgentAmountMST(taxCode);
                baseAmountMst       = paymentAmounts.taxAgentBaseAmountMST(taxCode);
                taxAmountCur        = paymentAmounts.taxAgentAmountCur(taxCode);
                baseAmountCur       = paymentAmounts.taxAgentBaseAmountCur(taxCode);
                taxAmountReporting  = paymentAmounts.taxAgentAmountReporting(taxCode);

                ledgerVoucherObject.parmCorrection(NoYes::No);

                if (! postingLogLoop.RecId || postingLogLoop.AmountMST < taxAmountMST)
                {
                    exclude = conIns(exclude, 1, [taxTransInvoice.TaxCode, taxTransInvoice.taxTrans_RU().vatOperationCode_RU]);

                    taxAmountMSTSum         += (taxAmountMST        - postingLogLoop.AmountMST);
                    taxAmountCurSum         += (taxAmountCur        - postingLogLoop.AmountCur);
                    taxAmountReportingSum   += (taxAmountReporting  - postingLogLoop.AmountMSTSecond);
                    baseAmountMstSum        += (baseAmountMst       - postingLogLoop.TaxBaseAmountMST);
                    baseAmountCurSum        += (baseAmountCur       - postingLogLoop.TaxBaseAmountCur);

                    this.createTransactions(
                        taxAmountMST - postingLogLoop.AmountMST, baseAmountMst - postingLogLoop.TaxBaseAmountMST,
                        taxAmountCur - postingLogLoop.AmountCur, baseAmountCur - postingLogLoop.TaxBaseAmountCur,
                        taxAmountReporting - postingLogLoop.AmountMSTSecond,
                        taxTransInvoice, !postingLogSource.RecId);
                }
                else
                {
                    postingLogSource.AmountMST        -= taxAmountMST;
                    postingLogSource.AmountCur        -= taxAmountCur;
                    postingLogSource.AmountMSTSecond  -= taxAmountReporting;
                    postingLogSource.TaxBaseAmountMST -= baseAmountMst;
                    postingLogSource.TaxBaseAmountCur -= baseAmountCur;
                }

                if (postingLogLoop.RecId && ! postingLogLoop.TransRecId)
                {
                    exclude = conIns(exclude, 1, [taxTransInvoice.TaxCode, taxTransInvoice.taxTrans_RU().vatOperationCode_RU]);
                    this.createTransactions(taxAmountMST, baseAmountMst, taxAmountCur, baseAmountCur, taxAmountReporting, taxTransInvoice, false, postingLogLoop);
                    updatePostingLogAmount(-taxAmountMST, -baseAmountMst, -taxAmountCur, -baseAmountCur, -taxAmountReporting);
                }
            }
        }

        taxAmountMST = 0; baseAmountMst = 0; taxAmountCur = 0; baseAmountCur = 0; taxAmountReporting = 0; //baseAmountReporting = 0;
        while select forupdate postingLogLoop
            where postingLogLoop.RefTableId       == vendTransPayment.TableId
               && postingLogLoop.OffSetRecId      == vendTransPayment.RecId
               && (postingLogLoop.TransRecId          == 0
               || postingLogLoop.TransRecId           == vendTransInvoice.RecId)
               && postingLogLoop.CannotBeReversed == NoYes::Yes
               && postingLogLoop.PostingLogType   == CustVendTransPostingLogType_RU::VATTaxAgent
        {
            if (conFind(exclude, [postingLogLoop.TaxCode, postingLogLoop.vatOperationCode_RU]))
            {
                continue;
            }

            if (counter == postingLogSource.RecId)
            {
                amountMSTCalc           = -taxAmountMSTSum - taxAmountMST;
                baseAmountMstCalc       = -baseAmountMstSum - baseAmountMst;
                amountCurCalc           = -taxAmountCurSum - taxAmountCur;
                baseAmountCurCalc       = -baseAmountCurSum - baseAmountCur;
                amountReportingCalc     = -taxAmountReportingSum - taxAmountReporting;
            }
            else
            {
                amountMSTCalc     = postingLogSource.AmountMST ?
                                    CurrencyExchangeHelper::amount(-taxAmountMSTSum * postingLogLoop.AmountMST / postingLogSource.AmountMST) : 0;
                baseAmountMstCalc = postingLogSource.TaxBaseAmountMST ?
                                    CurrencyExchangeHelper::amount(-baseAmountMstSum * postingLogLoop.TaxBaseAmountMST / postingLogSource.TaxBaseAmountMST) : 0;
                amountCurCalc     = postingLogSource.AmountCur ?
                                    CurrencyExchangeHelper::amount(-taxAmountCurSum * postingLogLoop.AmountCur / postingLogSource.AmountCur, postingLogLoop.CurrencyCode) : 0;
                baseAmountCurCalc = postingLogSource.TaxBaseAmountCur ?
                                    CurrencyExchangeHelper::amount(-baseAmountCurSum * postingLogLoop.TaxBaseAmountCur / postingLogSource.TaxBaseAmountCur, postingLogLoop.CurrencyCode) : 0;

                amountReportingCalc = postingLogSource.AmountMSTSecond ?
                                      CurrencyExchangeHelper::amount(-taxAmountReportingSum * postingLogLoop.AmountMSTSecond / postingLogSource.AmountMSTSecond, postingLogLoop.CurrencyCode) : 0;
            }

            taxAmountMST  += amountMSTCalc;
            baseAmountMst += baseAmountMstCalc;
            taxAmountCur  += amountCurCalc;
            baseAmountCur += baseAmountCurCalc;

            select firstonly taxTransInvoice
                where taxTransInvoice.Voucher   == postingLogLoop.Voucher
                   && taxTransInvoice.TransDate == postingLogLoop.TransDate
                   && taxTransInvoice.TaxCode   == postingLogLoop.TaxCode;

            ledgerVoucherObject.parmCorrection(NoYes::Yes);

            this.createTransactions(
                amountMSTCalc, baseAmountMstCalc, amountCurCalc, baseAmountCurCalc, amountReportingCalc,
                taxTransInvoice, !postingLogSource.RecId, postingLogLoop);

            updatePostingLogAmount(amountMSTCalc, baseAmountMstCalc, amountCurCalc, baseAmountCurCalc, amountReportingCalc);

            counter++;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeSettlement</Name>
				<Source><![CDATA[
    private boolean canBeSettlement(TaxCode _taxCode)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostingLog</Name>
				<Source><![CDATA[
    private void createPostingLog(
        TaxTrans        _taxTrans,
        TaxAmount       _taxAmountAccounting,
        AmountMST       _baseAmountAccounting,
        TaxAmountCur    _taxAmountTransaction,
        AmountCur       _baseAmountTransaction,
        TaxAmount       _taxAmountReporting,
        boolean         _unsettled)
    {
        postingLog = custVendSettle.createPostingTransLog_RU(
            CustVendTransPostingLogType_RU::VATTaxAgent,
            vendTransInvoice,
            LedgerPostingType::Tax,
            this.ledgerDimension(_taxTrans),
            LedgerDimensionFacade::serviceCreateLedgerDimension(TaxLedgerAccountGroup::find(TaxTable::find(_taxTrans.TaxCode).TaxAccountGroup).TaxOutgoingLedgerDimension, vendTransPayment.DefaultDimension),
            _taxAmountAccounting,
            _taxAmountReporting,
            null,
            LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(_taxTrans.RecId)),
            _taxAmountTransaction);

        postingLog.Voucher                = ledgerVoucherObject.parmVoucher();
        postingLog.TransDate              = ledgerVoucherObject.parmTransDate();
        postingLog.Correct                = ledgerVoucherObject.parmCorrection();
        postingLog.CurrencyCode           = vendTransInvoice.CurrencyCode;
        postingLog.TaxCode                = _taxTrans.TaxCode;
        postingLog.TaxBaseAmountCur       = _baseAmountTransaction;
        postingLog.TaxBaseAmountMST       = _baseAmountAccounting;
        postingLog.CannotBeReversed       = _unsettled ? NoYes::Yes : NoYes::No;
        postingLog.vatOperationCode_RU    = _taxTrans.taxTrans_RU().vatOperationCode_RU;
        postingLog.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactions</Name>
				<Source><![CDATA[
    private void createTransactions(
        TaxAmount                  _taxAmountAccounting,
        AmountMST                  _baseAmountAccounting,
        TaxAmountCur               _taxAmountTransaction,
        AmountCur                  _baseAmountTransaction,
        TaxAmount                  _taxAmountReporting,
        TaxTrans                   _taxTransInvoice,
        boolean                    _unsettled,
        CustVendTransPostingLog_RU _correctedLog = null)
    {
        TaxBase     baseAmountAccountingRecalc;
        TaxAmount   taxAmountAccountingRecalc;
        TaxAmount   taxAmountReportingRecalc;

        FactureJour_RU  factureJour;

        if (!_taxAmountTransaction)
        {
            return;
        }

        this.createPostingLog(
            _taxTransInvoice,
            _taxAmountAccounting,
            _baseAmountAccounting,
            _taxAmountTransaction,
            _baseAmountTransaction,
            _taxAmountReporting,
            _unsettled);

        baseAmountAccountingRecalc  = CurrencyExchangeHelper::mstAmount(_baseAmountTransaction, vendTransPayment.CurrencyCode, postingLog.TransDate);
        taxAmountAccountingRecalc   = CurrencyExchangeHelper::mstAmount(_taxAmountTransaction, vendTransPayment.CurrencyCode, postingLog.TransDate);
        taxAmountReportingRecalc    = CurrencyExchangeHelper::amountCur2MSTSecond_RU(_taxAmountTransaction, vendTransPayment.CurrencyCode, 0, postingLog.TransDate);

        if (! _taxTransInvoice.ExemptTax && ! ledgerVoucherObject.parmCorrection() && !vendTransPayment.Prepayment)
        {
            this.createVendTrans(taxAmountAccountingRecalc, _taxAmountTransaction, taxAmountReportingRecalc);
        }

        if (ledgerVoucherObject.parmCorrection()                    ||
            ! _correctedLog.RecId                                   ||
            postingLog.TaxCode             != _correctedLog.TaxCode ||
            postingLog.vatOperationCode_RU != _correctedLog.vatOperationCode_RU)
        {
            this.post(_taxTransInvoice, taxAmountAccountingRecalc, baseAmountAccountingRecalc, _taxAmountTransaction, _baseAmountTransaction, taxAmountReportingRecalc);

            if (TaxTable::find(_taxTransInvoice.TaxCode).TaxType_W != TaxType_W::Excise)
            {
            factureJour = FactureJourCreate_RU::newVATPaymentFactureSettlement(postingLog, vendTransInvoice, _correctedLog);
            factureJour.OperationTypeCodes = FactureJour_RU::getInitialTypeCodes(factureJour);
            factureJour.doUpdate();
        }
    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendTrans</Name>
				<Source><![CDATA[
    private void createVendTrans(
        TaxAmount        _taxAmountAccounting,
        TaxAmountCur     _taxAmountTransaction,
        TaxAmount        _taxAmountReporting)
    {
        VendTrans   vendTrans;
        VendTrans_W vendTrans_W;

        vendTrans.clear();
        vendTrans.AccountNum                    = vendTransInvoice.AccountNum;
        vendTrans.DefaultDimension              = vendTransPayment.DefaultDimension;
        vendTrans.TransDate                     = ledgerVoucherObject.parmTransDate();
        vendTrans.Closed                        = CustVendTransData::construct(vendTrans).maxSettlementDate(vendTrans.TransDate);

        vendTrans.DueDate                       = vendTransPayment.DueDate;
        vendTrans.ExchRate                      = vendTransInvoice.exchRateCurToMst();
        vendTrans.CurrencyCode                  = vendTransInvoice.CurrencyCode;
        vendTrans.Approver                      = vendTransInvoice.Approver;
        vendTrans.Approved                      = NoYes::Yes;
        vendTrans.TransType                     = LedgerTransType::VATTaxAgent_RU;
        vendTrans.Voucher                       = ledgerVoucherObject.parmVoucher();
        vendTrans.DocumentNum                   = vendTransInvoice.DocumentNum;
        vendTrans.DocumentDate                  = vendTransInvoice.DocumentDate;
        vendTrans.ReasonRefRecId                = vendTransInvoice.ReasonRefRecId;

        vendTrans.AmountMST                     = _taxAmountAccounting;
        vendTrans.AmountCur                     = _taxAmountTransaction;
        vendTrans.ReportingCurrencyAmount       = _taxAmountReporting;
        vendTrans.SettleAmountMST               = _taxAmountAccounting;
        vendTrans.SettleAmountCur               = _taxAmountTransaction;
        vendTrans.SettleAmountReporting         = _taxAmountReporting;
        vendTrans.Correct                       = ledgerVoucherObject.parmCorrection();

        vendTrans_W = vendTrans.vendTrans_W();
        vendTrans_W.CorrectReporting_RU           = vendTrans.Correct;
        vendTrans.packVendTrans_W(vendTrans_W);

        vendTrans.LastSettleDate                = vendTrans.TransDate;
        vendTrans.LastSettleVoucher             = vendTransInvoice.Voucher;
        vendTrans.LastSettleAccountNum          = vendTransInvoice.AccountNum;
        vendTrans.LastSettleCompany             = vendTransInvoice.DataAreaId;

        vendTrans.OffsetRecid                   = vendTransInvoice.RecId;
        vendTrans.Txt                           = "@GLS112871";
        vendTrans.PaymReference                 = vendTransPayment.PaymReference;

        vendTrans.initFromPostingProfile(vendTransInvoice.PostingProfile);

        custVendSettle.parmCustVendTransSettlement_W().addTransAndDefaultSettlement(vendTrans, custVendSettle.parmSettlementGroupPlaceHolder_W());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionForTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ledger dimension for tax trans if GL transactions are not saved
    /// </summary>
    /// <param name="_taxTransRecId">
    /// RecId of tax transaction
    /// </param>
    /// <param name="_taxTransRelationshipType">
    /// Type of relationship between <c>TaxTrans</c> and <c>GeneralJournalAccountEntry</c>
    /// </param>
    /// <param name="_ledgerVoucherObject">
    /// <c>LedgerVoucherObject</c> from which data should be read
    /// </param>
    /// <returns>
    /// LedgerDimension for specified <c>TaxTrans</c> and relationship
    /// </returns>
    private LedgerDimensionAccount getLedgerDimensionForTaxTrans(
        RecId _taxTransRecId,
        TaxTransRelationshipType _taxTransRelationshipType,
        LedgerVoucherObject _ledgerVoucherObject = ledgerVoucherObject)
    {
        TmpTaxTransLedgerDimension_RU   tmpTaxTransLedgerDimension;

        tmpTaxTransLedgerDimension.fillFromLedgerVoucherObject(_ledgerVoucherObject);

        select LedgerDimension from tmpTaxTransLedgerDimension
            where tmpTaxTransLedgerDimension.TaxTrans         == _taxTransRecId &&
                  tmpTaxTransLedgerDimension.RelationshipType == _taxTransRelationshipType;

        return tmpTaxTransLedgerDimension.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSettlement</Name>
				<Source><![CDATA[
    public void initFromSettlement(CustVendSettle       _custVendSettle,
                                   LedgerVoucherObject  _ledgerVoucherObject,
                                   LedgerVoucher        _ledgerVoucher)
    {
        ;
        custVendSettle         = _custVendSettle;
        vendTransInvoice       = custVendSettle.parmCustVendTransDebit_W().Invoice ?
                                 custVendSettle.parmCustVendTransDebit_W() :
                                 custVendSettle.parmCustVendTransCredit_W();
        vendTransPayment       = custVendSettle.parmCustVendTransDebit_W().Invoice ?
                                 custVendSettle.parmCustVendTransCredit_W() :
                                 custVendSettle.parmCustVendTransDebit_W();
        ledgerVoucher          = _ledgerVoucher;
        ledgerVoucherObject    = _ledgerVoucherObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount ledgerDimension(TaxTrans _taxTrans)
    {
        if (ledgerVoucherObject.parmCorrection())
        {
            return TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(_taxTrans.RecId);
        }

        return TaxTable::find(_taxTrans.TaxCode).vatChargeSource_RU == VATChargeSource_RU::OwnFunds ?
                   LedgerDimensionFacade::serviceCreateLedgerDimension(TaxLedgerAccountGroup::find(TaxTable::find(_taxTrans.TaxCode).TaxAccountGroup).TaxIncomingLedgerDimension, vendTransPayment.DefaultDimension) :
                   LedgerDimensionFacade::serviceCreateLedgerDimension(VendLedgerAccounts::summaryLedgerDimension(vendTransInvoice.AccountNum, vendTransInvoice.PostingProfile));
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(TaxTrans            _taxTrans,
                     TaxAmount           _taxAmountAccounting,
                     AmountMST           _baseAmountAccounting,
                     TaxAmountCur        _taxAmountTransaction,
                     AmountCur           _baseAmountTransaction,
                     TaxAmount           _taxAmountReporting)
    {
        LedgerBondClient_RU         ledgerBondClient;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        TaxSettlementVATTaxAgent_RU taxSettlementVAT;
        TaxTrans                    taxTransVAT;
        TaxAmountCur                taxAmountTransaction;
        TaxAmount                   taxAmountAccounting;
        TaxAmount                   taxAmountReporting;
        TaxTrans_RU                 taxTransVatForUpdate_RU;

        ledgerVoucherObject.parmVoucherCheck(false);

        ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();
        if (ledgerBondClient)
        {
            ledgerBondClient.addNewLogObject();
        }

        taxSettlementVAT = new TaxSettlementVATTaxAgent_RU();
        taxSettlementVAT.initFromSettlement(_taxTrans,
                                            LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher),
                                            postingLog,
                                            vendTransInvoice,
                                            vendTransPayment);

        [taxAmountTransaction, taxAmountAccounting, taxAmountReporting, taxTransVAT] =
            taxSettlementVAT.calcPostAndInsertTaxes(
                _taxAmountAccounting,
                _baseAmountAccounting,
                _taxAmountTransaction,
                _baseAmountTransaction,
                _taxAmountReporting);

        if ((taxAmountTransaction || taxAmountAccounting || _taxAmountReporting) && ! vendTransPayment.Prepayment)
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(
                ledgerVoucherObject,
                LedgerPostingType::Tax,
                LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(
                    LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(postingLog.OffsetLedgerDimension),
                            this.getLedgerDimensionForTaxTrans(taxTransVAT.RecId, TaxTransRelationshipType::Tax)),
                taxTransVAT.SourceCurrencyCode,
                -taxAmountTransaction,
                -taxAmountAccounting,
                -taxAmountReporting);

            ledgerVoucherTransObject.parmSourceTableId(taxTransVAT.TableId);
            ledgerVoucherTransObject.parmSourceRecId(taxTransVAT.RecId);

            ledgerVoucherObject.addTrans(ledgerVoucherTransObject);
        }

        postingLog.AmountMSTSecond = taxAmountReporting;

        postingLog.IsTaxed = true;
        postingLog.update();

        update_recordset taxTransVatForUpdate_RU
            setting CustVendTransPostingLog_RU = postingLog.RecId
            where taxTransVatForUpdate_RU.TaxTrans == taxTransVAT.RecId;

        if (ledgerBondClient)
        {
            if (ledgerBondClient.currentLogLength() > 1)
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
            }

            ledgerBondClient.removeCurrentLogObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    private Amount taxAmount(TaxTrans  _taxTrans,
                             boolean   _getMST = true)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmount</Name>
				<Source><![CDATA[
    private TaxBase taxBaseAmount(TaxTrans _taxTrans, boolean _getMST = true)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendSettleVATTransForTaxAgent_RU construct()
    {
        return new VendSettleVATTransForTaxAgent_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>