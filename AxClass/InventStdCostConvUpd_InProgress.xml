<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvUpd_InProgress</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventStdCostConvUpd_InProgress extends InventStdCostConvUpd
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>Status</c> field of the <c>InventStdCostConv</c> record buffer to a value of
    ///    <c>InventStdCostSonvStatus::InProgress</c>.
    /// </summary>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict was caught in a transaction scope.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict could not be recovered.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            inventStdCostConv = InventStdCostConv::find(inventStdCostConv.RecId, true);

            if (!this.validate())
            {
                throw Exception::Error;
            }

            inventStdCostConv.Status = InventStdCostConvStatus::InProgress;
            inventStdCostConv.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the status can be updated.
    /// </summary>
    /// <returns>
    ///    true if no errors exist; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (!inventStdCostConv.allowInProgressConversion())
        {
            return checkFailed(strFmt("@SYS120306",InventStdCostConvStatus::InProgress));
        }
        if (!this.validateInventClosing())
        {
            ret = false;
        }
        if (!this.validateReleasedProductions())
        {
            ret = false;
        }
        if (!this.validateAllItems())
        {
            ret = false;
        }
        if (!ret)
        {
            ret = checkFailed(strFmt("@SYS120307",InventStdCostConvStatus::InProgress));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllItems</Name>
				<Source><![CDATA[
        protected boolean validateAllItems()
    {
        boolean                 ret = true;
        InventStdCostConvItem   inventStdCostConvItem;

        while select inventStdCostConvItem
            where inventStdCostConvItem.StdCostConvRecId == inventStdCostConv.RecId
        {
            setPrefix(strFmt("@SYS14077",inventStdCostConvItem.ItemId));

            List errorList = InventStdCostConvCheck::checkAll(inventStdCostConvItem);
            ListEnumerator listEnumerator = errorList.getEnumerator();
            while (listEnumerator.moveNext())
            {
                ret = checkFailed(listEnumerator.current());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventClosing</Name>
				<Source><![CDATA[
        protected boolean validateInventClosing()
    {
        boolean ret = true;

        // <GEERU>
        if (InventClosing::closingDate(false, inventStdCostConv.InventTransCurrency_RU) != (inventStdCostConv.TransitionEndDate - 1))
        // </GEERU>
        {
            ret = checkFailed("@SYS120319");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReleasedProductions</Name>
				<Source><![CDATA[
        protected boolean validateReleasedProductions()
    {
        boolean                 ret = true;
        ProdTable               prodTable;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventStdCostConvItem   inventStdCostConvItem;

        while select ItemId from inventStdCostConvItem
            group by ItemId
            where inventStdCostConvItem.StdCostConvRecId == inventStdCostConv.RecId
            join ReferenceId from inventTransOrigin
                group by ReferenceId, ReferenceCategory
                where inventTransOrigin.ItemId              == inventStdCostConvItem.ItemId
                   && ( inventTransOrigin.ReferenceCategory == InventTransType::Production
                     || inventTransOrigin.ReferenceCategory == InventTransType::ProdLine )
                join TableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                       && inventTrans.DatePhysical < inventStdCostConv.TransitionStartDate
                       && ((inventTrans.StatusReceipt == StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None)
                       || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Deducted))
                join ProdId, ProdStatus from prodTable
                    group by ProdId, ProdStatus
                    where prodTable.ProdId == inventTransOrigin.ReferenceId
        {
            if (inventTransOrigin.ReferenceCategory == InventTransType::ProdLine)
            {
                ret = checkFailed(strFmt("@SYS120313", prodTable.ProdId, inventStdCostConvItem.ItemId, prodTable.ProdStatus));
            }
            else
            {
                ret = checkFailed(strFmt("@SYS120315", prodTable.ProdId, inventStdCostConvItem.ItemId, prodTable.ProdStatus));
            }
        }

        // Check for non ended project production orders
        // using the consumeMethod
        while select ItemId from inventStdCostConvItem
            join ProdId, ProdStatus from prodTable
            where prodTable.ItemId          == inventStdCostConvItem.ItemId
               && prodTable.ProdStatus      != ProdStatus::Completed
               && prodTable.ProjPostingType == ProjProdPostingType::ConsumedMethod
               && prodTable.ProjId          != ''
        {
            ret = checkFailed(strFmt("@SYS111022" + ' - ' + "@SYS120315", prodTable.ProdId, inventStdCostConvItem.ItemId, prodTable.ProdStatus));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates an <c>InventStdCostConvUpd_InProgress</c> object.
    /// </summary>
    /// <param name="_inventStdCostConv">
    ///    An <c>InventStdCostConv</c> record buffer that must be have the status updated.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConvUpd_InProgress</c> object.
    /// </returns>
    /// <remarks>
    ///    This method should not be called directly. An <c>InventStdCostConvUpd</c> object should be
    ///    instantiated by using the constructor on the <c>InventStdCostConvUpd</c> class.
    /// </remarks>
    public static InventStdCostConvUpd_InProgress construct(InventStdCostConv _inventStdCostConv)
    {
        return new InventStdCostConvUpd_InProgress(_inventStdCostConv);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>