<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAutoReverse_Vend_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CustVendAutoReverse_Vend_RU extends CustVendAutoReverse_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findNextSettlement</Name>
				<Source><![CDATA[
        protected boolean findNextSettlement(CustVendTable _custVendTable)
    {
        VendTrans       vendTrans, vendTransOffset;
        VendTrans_W     vendTrans_W;
        VendSettlement  vendSettlement;

        select firstonly vendSettlement
            join vendTrans
                where vendSettlement.TransRecId      == vendTrans.RecId  &&
                      vendSettlement.DueDate         >= dateFrom         &&
                      vendSettlement.DueDate         <= dateTo           &&
                      vendSettlement.CanBeReversed   == NoYes::Yes       &&
                      vendSettlement.TransCompany    == vendSettlement.OffsetCompany &&
                     (vendSettlement.AccountNum     == _custVendTable.AccountNum)
            outer join RecId from vendTrans_W
                where vendTrans_W.VendTrans == vendTrans.RecId &&
                    ! vendTrans_W.BankCurrencyTransferId_RU
            join RecId from vendTransOffset
                where vendSettlement.OffsetRecid == vendTransOffset.RecId;

        custVendTrans       = vendTrans;
        custVendSettlement  = vendSettlement;

        return vendSettlement.RecId != 0 ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleCustVend</Name>
				<Source><![CDATA[
        public ModuleCustVend moduleCustVend()
    {
        return ModuleCustVend::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
        protected Query query()
    {
        Query q = new Query();
        ;

        q.addDataSource(tablenum(VendTable));
        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransact</Name>
				<Source><![CDATA[
        protected void reverseTransact(CustVendTable _custVendTable)
    {
        VendTrans::reverseTransact(_custVendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
        protected void updateQuery()
    {
        Query           query = queryRun.query();
        QueryBuildRange qbr;

        qbr = query.dataSourceTable(tablenum(VendTable)).findRange(fieldnum(VendTable, AccountNum));

        if (qbr)
        {
            custVendAC = this.stringValueFromRange(qbr.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRanges</Name>
				<Source><![CDATA[
        protected void updateRanges()
    {
        this.findOrCreateRange(tablenum(VendTable), fieldnum(VendTable, AccountNum), custVendAC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>