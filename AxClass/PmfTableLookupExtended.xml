<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfTableLookupExtended</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PmfTableLookupExtended</c> class extends the  <c>SysTableLookup</c> class to allow retrieval of the selected lookup record.
/// </summary>
class PmfTableLookupExtended extends SysTableLookup
{
    Common                  selectionRecord;
    FormRun                 savedFormRun;
    PCDataSourceEventNotify datasourceEventNotifier;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNotifyHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a notify handler to a datasource.
    /// </summary>
    /// <param name="_objectSet">
    /// A datasource.
    /// </param>
    protected void addNotifyHandler(FormObjectSet _objectSet)
    {
        datasourceEventNotifier = PCDataSourceEventNotify::construct(this);
        _objectSet.addNotifyHandler(datasourceEventNotifier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disposeNotifier</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Disposes the datasource notifier and removes the reference between the lookup and the current class.
    /// </summary>
    public void disposeNotifier()
    {
        if (savedFormRun && savedFormRun.closed() && datasourceEventNotifier)
        {
            this.removeNotifyHandler(savedFormRun.dataSource());
            datasourceEventNotifier = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
        protected FormRun formRun()
    {
        FormRun ret = super();

        savedFormRun = ret;
        this.addNotifyHandler(savedFormRun.dataSource());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the name of the lookup class.
    /// </summary>
    /// <returns>
    ///     The name of the class type of the current instance.
    /// </returns>
    public name name()
    {
        return classStr(PmfTableLookupExtended);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCurrentChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Event method invoked when the datasource of the lookup calls the <c>CurrentChanged</c> method.
    /// </summary>
    /// <param name="_sender">
    ///     The lookup datasource that triggered the event.
    /// </param>
    /// <param name="_position">
    ///     The position of the cursor in the datasource.
    /// </param>
    public void onCurrentChanged(FormObjectSet _sender, int _position)
    {
        this.parmSelectionRecord(_sender.cursor());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectionRecord</Name>
				<Source><![CDATA[
        public Common parmSelectionRecord(Common _selectionRecord = selectionRecord)
    {
        selectionRecord = _selectionRecord;
        return selectionRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNotifyHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a notify handler from a datasource.
    /// </summary>
    /// <param name="_objectSet">
    /// A datasource.
    /// </param>
    protected void removeNotifyHandler(FormObjectSet _objectSet)
    {
        _objectSet.removeNotifyHandler(datasourceEventNotifier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductDimensionsFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds product dimensions to the lookup columns.
    /// </summary>
    public void addProductDimensionsFields()
    {
        Enumerator inventProductDimensionEnumerator = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (inventProductDimensionEnumerator.moveNext())
        {
            InventProductDimension productDimension = inventProductDimensionEnumerator.current();
            FieldId fieldId = productDimension.fieldIdInTable(tableStr(TmpPmfItemTransProdLookup));

            if (fieldId)
            {
                this.addLookupField(fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PmfTableLookupExtended construct()
    {
        return new PmfTableLookupExtended();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of the <c>PmfTableLookupExtended</c> class based on the parameters specified.
    /// </summary>
    /// <param name="_tableId">
    ///     The ID of the table of the main lookup datasource.
    /// </param>
    /// <param name="_callingControl">
    ///     The control receiving the value of the lookup.
    /// </param>
    /// <param name="_useLookupValue">
    ///     A boolean value indicating whether to use the current value on the control to initialize the lookup.
    /// </param>
    /// <returns>
    ///     An instance of the <c>PmfTableLookupExtended</c> class.
    /// </returns>
    public static PmfTableLookupExtended newParameters(TableId _tableId, FormControl _callingControl, boolean _useLookupValue = true)
    {
        PmfTableLookupExtended  pmfTableLookup = PmfTableLookupExtended::construct();
        pmfTableLookup.parmTableId(_tableId);
        pmfTableLookup.parmCallingControl(_callingControl);
        pmfTableLookup.parmUseLookupValue(_useLookupValue);
        return pmfTableLookup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>