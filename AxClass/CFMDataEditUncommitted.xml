<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMDataEditUncommitted</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Intitalizes record with uncommitted values for each type of source document of cash flow journal.
/// </summary>
abstract class CFMDataEditUncommitted
{
    CFMAnalyticFormDataEditTmp dataEditTmp;
    NoYes initialValues;
    RecId journalTableRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMDataEditUncommitted construct(CFMAnalyticFormDataEditTmp _dataEditTmp, RecId _journalTableRecId)
    {
        CFMJournalSourceAttribute attribute = new CFMJournalSourceAttribute(_dataEditTmp.SourceType);

        CFMDataEditUncommitted dataEdit = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMDataEditUncommitted), attribute);

        if (dataEdit)
        {
            dataEdit.parmDataEditTmp(_dataEditTmp);
            dataEdit.parmJournalTableRecId(_journalTableRecId);
            dataEdit.findSource();
        }

        return dataEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find record or records presented source of cash flow journal.
    /// </summary>
    abstract protected void findSource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes record with uncommitted values from source or from new values.
    /// </summary>
    /// <param name="_uncommittedData">
    /// Record of <c>CFMAnalyticDataEditUncommitted</c> table
    /// </param>
    public void initDataUncommitted(CFMAnalyticDataEditUncommitted _uncommittedData)
    {
        if (!_uncommittedData.RecId)
        {
            this.findSource();
            this.initLinks(_uncommittedData);
            this.initFromSource(_uncommittedData);
        }

        this.initNewValues(_uncommittedData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes record with uncommitted values from source.
    /// </summary>
    /// <param name="_uncommittedData">
    /// Record of <c>CFMAnalyticDataEditUncommitted</c> table
    /// </param>
    abstract protected void initFromSource(CFMAnalyticDataEditUncommitted _uncommittedData)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes relation fields between source record and record with uncommitted values.
    /// </summary>
    /// <param name="_uncommittedData">
    /// Record of <c>CFMAnalyticDataEditUncommitted</c> table
    /// </param>
    protected void initLinks(CFMAnalyticDataEditUncommitted _uncommittedData)
    {
        _uncommittedData.JournalTable = journalTableRecId;
        _uncommittedData.SourceRefRecId = dataEditTmp.SourceRefRecId;
        _uncommittedData.SourceType = dataEditTmp.SourceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields that have been changes in temporary table in form <c>CFMAnalyticFormDataEdit</c>.
    /// </summary>
    /// <param name="_uncommittedData">
    /// Record of <c>CFMAnalyticDataEditUncommitted</c> table
    /// </param>
    protected void initNewValues(CFMAnalyticDataEditUncommitted _uncommittedData)
    {
        CFMAnalyticDataEdit dataEditMap = _uncommittedData;
        
        if (this.parmInitialValues() == NoYes::No)
        {
            container conFieldsChanged = dataEditTmp.fieldIdChanges();
            int len = conLen(conFieldsChanged);

            for (int i = 1; i <= len; i++)
            {
                FieldId fromFieldId = conPeek(conFieldsChanged, i);
                FieldId mapFieldId = CFMAnalyticDataEdit::fieldIdMapping(dataEditTmp.TableId, fromFieldId);

                if (mapFieldId)
                {
                    dataEditMap.(mapFieldId) = dataEditTmp.(fromFieldId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataEditTmp</Name>
				<Source><![CDATA[
    public CFMAnalyticFormDataEditTmp parmDataEditTmp(CFMAnalyticFormDataEditTmp _dataEditTmp = dataEditTmp)
    {
        dataEditTmp = _dataEditTmp;

        return dataEditTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitialValues</Name>
				<Source><![CDATA[
    public NoYes parmInitialValues(NoYes _initialValues = initialValues)
    {
        initialValues = _initialValues;

        return initialValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTableRecId</Name>
				<Source><![CDATA[
    public RecId parmJournalTableRecId(RecId _journalTableRecId = journalTableRecId)
    {
        journalTableRecId = _journalTableRecId;
        return journalTableRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>