<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceEventHandler</c> class is used as an event handler for the vendor invoice workflow.
/// </summary>
/// <remarks>
/// This class implements the <c>WorkflowStartedEventHandler</c>, <c>WorkflowCompletedEventHandler</c>
/// and <c>WorkflowCanceledEventHandler</c> interfaces and handles the updates that are needed
/// when the different workflow events have finished.
/// </remarks>
public class VendInvoiceEventHandler implements WorkflowStartedEventHandler, WorkflowCompletedEventHandler, WorkflowCanceledEventHandler
{
    VendInvoiceInfoTable vendInvoiceInfoTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>RequestStatus</c> field in the <c>VendInvoiceInfoTable</c> table.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// This method is called from the workflow framework when the workflow is canceled. The
    /// <c>RequestStatus</c> field in the <c>VendInvoiceInfoTable</c> table is set to the
    /// <c>VendInvoiceRequestStatus::Draft</c> value and the <c>MatchStatus</c> field in the
    /// <c>VendInvoiceInfoTable</c> table is set to the <c>VendInvoiceMatchStatus::NotWaiting</c> value.
    /// </remarks>
    public void canceled(WorkflowEventArgs _workflowEventArgs)
    {
        // When cancelling vend invoice workflow, the invoice review status would be reset in 
        // VendInvoiceCancelManager, so we don't need to reset it again in event handler
        if (!VendInvoiceWorkflowCancelEventHandlerSkipResetReviewStatusFlight::instance().isEnabled())
        {
            // updates RequestStatus to "Draft" and MatchStatus to "NotWaiting"
            VendInvoiceInfoTable::resetRequestStatus(_workflowEventArgs.parmWorkflowContext().parmRecId());
        }

        VendInvoiceInfoTable vendorInvoice = this.getVendorInvoiceFromWorkflow(_workflowEventArgs);

        if (vendorInvoice && VendInvoiceAutomationStateManagement::isAutomationInvoice(vendorInvoice))
        {
            this.handleWorkflowCancellationForAutomationInvoice(vendorInvoice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>RequestStatus</c> field on the <c>VendInvoiceInfoTable</c> table.
    /// </summary>
    /// <param name = "_workflowEventArgs">The arguments for the workflow event.</param>
    /// <remarks>
    /// This method is called from the workflow framework when the workflow is completed. The <c>RequestStatus</c>
    /// field on the <c>VendInvoiceInfoTable</c> table is set to the <c>VendInvoiceRequestStatus::Approved</c>
    /// enumeration value. For an automated invoice, the status of the workflow is set to 'Completed' and
    /// a record is inserted into the <c>DocumentEventLog</c> to indicate that the workflow completed successfully.
    /// </remarks>
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        ttsbegin;

        VendInvoiceInfoTable::updateWorkFlowRequestStatus(
            _workflowEventArgs.parmWorkflowContext().parmWorkflowCorrelationId(),
            VendInvoiceRequestStatus::Approved);

        VendInvoiceInfoTable vendorInvoice = this.getVendorInvoiceFromWorkflow(_workflowEventArgs);

        if (vendorInvoice && VendInvoiceAutomationStateManagement::isAutomationInvoice(vendorInvoice))
        {
            this.handleWorkflowCompletionForAutomationInvoice(vendorInvoice);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>RequestStatus</c> field on the <c>VendInvoiceInfoTable</c> table.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// This method is called from the workflow framework when the workflow is started.The method creates
    /// the distributions for the <c>VendInvoiceInfoTable</c> record.
    /// </remarks>
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        VendInvoiceInfoTable savedVendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_workflowEventArgs.parmWorkflowContext().parmRecId());

        if (savedVendInvoiceInfoTable.RecId != 0)
        {
            SourceDocumentProcessorCaller callerNull = null;
            boolean doAsynchronousLineProcessingFalse;

            VendInvoiceInfoTable::setRequestStatus(savedVendInvoiceInfoTable.RecId, VendInvoiceRequestStatus::InReview);

            // create distributions
            SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(savedVendInvoiceInfoTable, SourceDocumentLineAccountingStatus::FullyDistributed, callerNull, curUserId(), doAsynchronousLineProcessingFalse);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorInvoiceFromWorkflow</Name>
				<Source><![CDATA[
    private VendInvoiceInfoTable getVendorInvoiceFromWorkflow(WorkflowEventArgs _workflowEventArgs)
    {
        VendInvoiceInfoTable vendorInvoice;

        if (_workflowEventArgs.parmWorkflowContext().parmTableId() == tableNum(VendInvoiceInfoTable))
        {
            vendorInvoice = VendInvoiceInfoTable::findRecId(_workflowEventArgs.parmWorkflowContext().parmRecId());
        }

        return vendorInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleWorkflowCancellationForAutomationInvoice</Name>
				<Source><![CDATA[
    private void handleWorkflowCancellationForAutomationInvoice(VendInvoiceInfoTable _vendorInvoice)
    {
        // Pause the invoice's automation
        VendInvoiceAutomationStateManagement::pauseInvoiceAutomation(_vendorInvoice.Recid);

        // Log a document event indicating the invoice's workflow has been cancelled
        this.logDocumentEvent(
            tableNum(VendInvoiceInfoTable), 
            _vendorInvoice.RecId,
            VendInvoiceWorkflowStatusEvent::Failed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleWorkflowCompletionForAutomationInvoice</Name>
				<Source><![CDATA[
    private void handleWorkflowCompletionForAutomationInvoice(VendInvoiceInfoTable _vendorInvoice)
    {
        // The automation status of the invoice is set to 'Completed'.
        VendInvoiceAutomationStateManagement::setInvoiceAutomationStatusToWorkflowCompleted(_vendorInvoice);

        VendInvoiceJour vendInvoiceJour = VendInvoiceJour::findSourceDocumentHeader(_vendorInvoice.SourceDocumentHeader);

        // Insert an event log to mark the successful completion of the workflow.
        if (vendInvoiceJour.RecId != 0)
        {
            // Posted invoice event should point to the 'VendInvoiceJour'.
            this.logDocumentEvent(
                tableNum(VendInvoiceJour),
                vendInvoiceJour.RecId,
                VendInvoiceWorkflowStatusEvent::Succeeded,
                this.findProcessExecutionSourceLink(_vendorInvoice).ExecutionId);
        }
        else
        {
            // Unposted invoice event should point to the 'VendInvoiceInfoTable'.
            this.logDocumentEvent(
                tableNum(VendInvoiceInfoTable), 
                _vendorInvoice.RecId,
                VendInvoiceWorkflowStatusEvent::Succeeded);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProcessExecutionSourceLink</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLink findProcessExecutionSourceLink(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        ProcessExecutionSourceLink processExecutionSourceLink;
        TableId vendInvoiceInfoTableId = tableNum(VendInvoiceInfoTable);

        select firstonly ExecutionId, RecId from processExecutionSourceLink
            order by processExecutionSourceLink.RecId desc
            where processExecutionSourceLink.RefRecId == _vendInvoiceInfoTable.RecId
                && processExecutionSourceLink.RefTableId == vendInvoiceInfoTableId
                && processExecutionSourceLink.Message == _vendInvoiceInfoTable.Num;

        return processExecutionSourceLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDocumentEvent</Name>
				<Source><![CDATA[
    private void logDocumentEvent(
        TableId _tableId,
        RefRecId _sourceRecId,
        VendInvoiceWorkflowStatusEvent _workflowStatusEventValue,
        SysGuid _executionId = emptyGuid())
    {
        DocumentEventLogRequest documentEventLogRequest = new DocumentEventLogRequest();
        documentEventLogRequest.eventEnumId = enumNum(VendInvoiceWorkflowStatusEvent);
        documentEventLogRequest.eventEnumValue = _workflowStatusEventValue;

        documentEventLogRequest.sourceTableId = _tableId;
        documentEventLogRequest.sourceRecId = _sourceRecId;
        documentEventLogRequest.executionId = _executionId;

        DocumentEventLog::logDocumentEvent(documentEventLogRequest);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>