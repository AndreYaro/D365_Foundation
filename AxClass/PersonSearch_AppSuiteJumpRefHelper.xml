<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PersonSearch_AppSuiteJumpRefHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PersonSearch_AppSuiteJumpRefHelper</c> class provides modified reference functionality for Application Suite records in a person search.
/// </summary>
public class PersonSearch_AppSuiteJumpRefHelper
{
    protected FormRun callingForm;
    protected boolean shouldDisplayDialog;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeJumpRef</Name>
				<Source><![CDATA[
    private void executeJumpRef(str _menuItem, MenuItemType _menuItemType, DataAreaId _company, Common _lookupRecord)
    {
        if (_company && xDataArea::exist(_company) && _company != curExt())
        {
            appl.setDefaultCompany(_company, shouldDisplayDialog);
        }

        if (_menuItem && _lookupRecord)
        {
            MenuFunction mf = new MenuFunction(_menuItem, _menuItemType);

            Args args = new Args();
            args.lookupRecord(_lookupRecord);
            args.caller(callingForm);

            if (mf)
            {
                mf.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the jumpRef method to respect the company context of the given record.
    /// </summary>
    /// <param name = "_object">The form data object.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void jumpRef(FormDataObject _object)
    {
        FormDataSource formDataSource = _object.datasource();

        if (formDataSource && formDataSource.cursor())
        {
            Common common = formDataSource.cursor();

            switch (common.TableId)
            {
                case tableNum(PersonSearchResultContactView):
                    this.jumpRef_Contact(common);
                    break;

                case tableNum(PersonSearchResultCustomerView):
                    this.jumpRef_Customer(common);
                    break;

                case tableNum(PersonSearchResultProspectView):
                    this.jumpRef_Prospect(common);
                    break;

                case tableNum(PersonSearchResultVendorView):
                    this.jumpRef_Vendor(common);
                    break;

                case tableNum(PersonSearchResultUserView):
                    this.jumpRef_User(common);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef_Contact</Name>
				<Source><![CDATA[
    private void jumpRef_Contact(Common _common)
    {
        PersonSearchResultContactView contactView = _common as PersonSearchResultContactView;
        ContactPerson contactPerson;

        select firstonly crosscompany contactPerson
            where contactPerson.RecId == contactView.ResultRecId;

        this.executeJumpRef(menuItemDisplayStr(ContactPerson), MenuItemType::Display, contactPerson.DataAreaId, contactPerson);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef_Customer</Name>
				<Source><![CDATA[
    private void jumpRef_Customer(Common _common)
    {
        PersonSearchResultCustomerView customerView = _common as PersonSearchResultCustomerView;
        CustTable custTable;

        select firstonly crosscompany custTable
            where custTable.RecId == customerView.ResultRecId;

        this.executeJumpRef(menuItemDisplayStr(CustTable), MenuItemType::Display, custTable.DataAreaId, custTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef_Prospect</Name>
				<Source><![CDATA[
    private void jumpRef_Prospect(Common _common)
    {
        PersonSearchResultProspectView prospectView = _common as PersonSearchResultProspectView;
        smmBusRelTable smmBusRelTable;

        select firstonly crosscompany smmBusRelTable
            where smmBusRelTable.RecId == prospectView.ResultRecId;

        this.executeJumpRef(menuItemDisplayStr(smmBusRelTable), MenuItemType::Display, smmBusRelTable.DataAreaId, smmBusRelTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef_Vendor</Name>
				<Source><![CDATA[
    private void jumpRef_Vendor(Common _common)
    {
        PersonSearchResultVendorView vendorView = _common as PersonSearchResultVendorView;
        VendTable vendTable;

        select firstonly crosscompany vendTable
            where vendTable.RecId == vendorView.ResultRecId;

        this.executeJumpRef(menuItemDisplayStr(VendTable), MenuItemType::Display, vendTable.DataAreaId, vendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef_User</Name>
				<Source><![CDATA[
    private void jumpRef_User(Common _common)
    {
        PersonSearchResultUserView userView = _common as PersonSearchResultUserView;
        UserInfo userInfo;

        select firstonly userInfo
            where userInfo.RecId == userView.ResultRecId;

        this.executeJumpRef(menuItemDisplayStr(SysUserInfoPage), MenuItemType::Display, '', userInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the calling form.
    /// </summary>
    /// <param name = "_callingForm">The calling form.</param>
    /// <returns>The calling form.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormRun parmCallingForm(FormRun _callingForm = callingForm)
    {
        callingForm = _callingForm;
        return callingForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShouldDisplayDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set whether the change company context should display the warning dialog to the user.
    /// </summary>
    /// <param name = "_shouldDisplayDialog">Flag for display dialog.</param>
    /// <returns>Whether to display the change company dialog.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmShouldDisplayDialog(boolean _shouldDisplayDialog = shouldDisplayDialog)
    {
        shouldDisplayDialog = _shouldDisplayDialog;
        return shouldDisplayDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new jumpRef helper.
    /// </summary>
    /// <param name = "_callingForm">The calling form context.</param>
    /// <param name = "_shouldDisplayDialog">Whether to display the change company dialog to users.</param>
    /// <returns>The new jumpRef helper.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PersonSearch_AppSuiteJumpRefHelper construct(FormRun _callingForm, boolean _shouldDisplayDialog = false)
    {
        PersonSearch_AppSuiteJumpRefHelper jumpRef = new PersonSearch_AppSuiteJumpRefHelper();

        jumpRef.parmCallingForm(_callingForm);
        jumpRef.parmShouldDisplayDialog(_shouldDisplayDialog);

        return jumpRef;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>