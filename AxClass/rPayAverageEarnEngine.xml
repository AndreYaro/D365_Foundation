<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayAverageEarnEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The engine class for the calculations of average earnings.
/// </summary>
#define.weekStandardDay(5)
#define.weekWorkDay(6)
#define.weekCalendarDay(7)
class rPayAverageEarnEngine extends RunBase
{
    RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
    RPayAverageEarnParameters      rPpayAverageEarnParameters;
    RHRMEmplTable                  emplTable;
    ReportPeriod_RU                averageEarnCalcPeriod;
    RPayCalendarId                 rPayCalendarId;
    QueryRun                       queryRun;

    DialogField                    rPayAverageEarnCodeField;
    RPayAverageEarnCode            rPayAverageEarnCode;
    boolean                        createLines;
    FormMenuButtonControl          controlReverse;
    FormMenuButtonControl          controlShowReverse;
    RPayAmount                     payFundDifference, otherFundDifference;

    Dialog      averageEarnTransDialog;
    DialogField averageEarnTransDialogFieldPayPeriod;
    DialogField averageEarnTransDialogFieldType;

    RPayAEFormController      formController;

    #define.RoundDecimals(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAverageAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount calcAverageAmount(RPayAverageSourceType           _rPpayAverageSourceType,
                                        RPayAverageEarnEmplPeriodTable  _averageEarnEmplPeriodTableSource   = null,
                                        RPayDayHour                     _periodDayHour = 0)
    {
        RPayAmount           payAmount;
        RPayAverageEarnTrans rPayAverageEarnTrans;
        RPayDayHour          avgDayHour;
        RecId                averageEarnEmplPeriodTableRecId = _averageEarnEmplPeriodTableSource ?
                                                               _averageEarnEmplPeriodTableSource.RecId :
                                                               rPayAverageEarnEmplPeriodTable.RecId;

        select sum(Amount),sum(rPayDayHour) from rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == averageEarnEmplPeriodTableRecId &&
                  rPayAverageEarnTrans.rPayAverageSourceType      == _rPpayAverageSourceType         &&
                  rPayAverageEarnTrans.Amount                     > 0                                &&
                  rPayAverageEarnTrans.rPayDayHour                > 0;

        avgDayHour = _periodDayHour ? _periodDayHour : rPayAverageEarnTrans.rPayDayHour;

        if (avgDayHour)
        {
            payAmount = CurrencyExchangeHelper::amount(rPayAverageEarnTrans.Amount / avgDayHour);
            payFundDifference += rPayAverageEarnTrans.Amount / avgDayHour;
        }
        return payAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAverageAmountTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container  calcAverageAmountTotal(ReportPeriod_RU                _payPeriod                          = dateNull(),
                                                RPayAverageEarnEmplPeriodTable _averageEarnEmplPeriodTableSource   = null,
                                                RPayDayHour                    _periodDayHour = 0) // PS56412
    {
        RPayAmount          payAmount;

        payFundDifference = 0;
        payAmount = this.calcAverageAmount(RPayAverageSourceType::PaymentFund,
                                           _averageEarnEmplPeriodTableSource, _periodDayHour) + // PS56412
                    this.calcAverageAmount(RPayAverageSourceType::PrevFund,
                                           _averageEarnEmplPeriodTableSource, _periodDayHour) +
                    this.calcAverageAmount(RPayAverageSourceType::OtherFund,
                                           _averageEarnEmplPeriodTableSource, _periodDayHour);  // PS56412

        return [payAmount, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBonusProportional</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calcBonusProportional(RPayAmount _otherFundAmount)
    {
        RPayAverageEarnTrans    rPayAverageEarnTrans;
        RPayAmount              proportionalAmount;
        RPayDayHour             rPayDayHourSchedule, rPayDayHourAbsence;
        Factor                  avgDateFactor;

        proportionalAmount = _otherFundAmount;

        if (proportionalAmount && rPayAverageEarnEmplPeriodTable.NonAppearanceTimeGroupCode)
        {
            while select rPayAverageEarnTrans
                group by PayPeriod
                where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId &&
                      rPayAverageEarnTrans.rPayAverageSourceType      == RPayAverageSourceType::PaymentFund
            {
                rPayDayHourAbsence += conPeek(RPayEmplTblSum::dayHourGroupSum(rPayAverageEarnTrans.PayPeriod,
                                                                              rPayAverageEarnEmplPeriodTable.EmplId,
                                                                              rPayAverageEarnEmplPeriodTable.rPayDayHourCalc,
                                                                              rPayAverageEarnEmplPeriodTable.NonAppearanceTimeGroupCode), 1);

                rPayDayHourSchedule += conPeek(RPayEmplTblSum::dayHourGroupSum(rPayAverageEarnTrans.PayPeriod,
                                                                               rPayAverageEarnEmplPeriodTable.EmplId,
                                                                               rPayAverageEarnEmplPeriodTable.rPayDayHourCalc,
                                                                               rPayAverageEarnEmplPeriodTable.ScheduleTimeGroupCode), 2);
            }

            if (rPayDayHourSchedule)
            {
                avgDateFactor       = (rPayDayHourSchedule - rPayDayHourAbsence) / rPayDayHourSchedule;
                proportionalAmount  = CurrencyExchangeHelper::amount(proportionalAmount * avgDateFactor);
            }
        }

        return proportionalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOtherFundAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calcOtherFundAmount(ReportPeriod_RU _endPeriod, RPayRateValue   _monthForCalc)
    {
        ReportPeriod_RU      startPeriod;
        RPayFundMember       rPayFundMember;
        RPayTrans            rPayTrans;
        RPayTable            rPayTable;
        int                  i,bonusNumber,tmpLag;
        real                 bonusPart;
        RPayAmount           rPayAmount;
        Query                payTransQuery;
        QueryBuildDataSource payTransDS;
        QueryRun             qrPayTrans;
        #timeConstants

        void modifyPayTransQuery(StartDate       _payPeriodStart,  EndDate _payPeriodEnd,
                                 ReportPeriod_RU _sourceDateStart, ReportPeriod_RU _sourceDateEnd,
                                 FieldId         _sortField, SortOrder       _sortOrder,
                                 boolean         _firstonly = false)
        {
            payTransDS.addSelectionField(fieldNum(RPayTrans, Amount));
            payTransDS.addSortField(_sortField, _sortOrder);
            findOrCreateRange_W(payTransDS, fieldNum(RPayTrans, PayPeriod), SysQuery::range(_payPeriodStart, _payPeriodEnd));
            findOrCreateRange_W(payTransDS, fieldNum(RPayTrans, SourceDate), SysQuery::range(_sourceDateStart, _sourceDateEnd));
            findOrCreateRange_W(payTransDS, fieldNum(RPayTrans, Emplid), queryValue(rPayAverageEarnEmplPeriodTable.EmplId));
            findOrCreateRange_W(payTransDS, fieldNum(RPayTrans, PayCtype), queryValue(rPayTable.PayCtype));
            payTransDS.firstOnly(_firstonly);
            qrPayTrans = new QueryRun(payTransQuery);
        }

        payTransQuery = new Query();
        payTransDS    = payTransQuery.addDataSource(tableNum(RPayTrans));

        startPeriod = dateMthFwd(_endPeriod, 1 - any2int(_monthForCalc));

        while select PayCtype, RpayPeriodFrequency from rPayTable
              exists join rPayFundMember
              where (rPayTable.RpayPeriodFrequency == RPayPeriodFrequency::Month   ||
                     rPayTable.RpayPeriodFrequency == RPayPeriodFrequency::Quarter ||
                     rPayTable.RpayPeriodFrequency == RPayPeriodFrequency::HalfYear) &&
                     rPayTable.PayCtype            == rPayFundMember.PayCostType    &&
                     rPayFundMember.CounterUnit    == rPayAverageEarnEmplPeriodTable.BonusFund
        {
            switch (rPayTable.RpayPeriodFrequency)
            {
                case RPayPeriodFrequency::Month    :
                    tmpLag = 1;
                    break;
                case RPayPeriodFrequency::Quarter  :
                    tmpLag = #monthsPerQuarter;
                    break;
                case RPayPeriodFrequency::HalfYear :
                    tmpLag = #monthsPerHalfYear;
                    break;
            }

            bonusNumber = real2int(_monthForCalc) div tmpLag;
            bonusPart   = 1;

            if (! bonusNumber)
            {
                bonusNumber = 1;
                bonusPart   = _monthForCalc / tmpLag;
            }

            i = 0;

            switch (rPayAverageEarnEmplPeriodTable.rPayBonusAccountingCriterion)
            {
                case RPayBonusAccountingCriterion::First:
                    modifyPayTransQuery(startPeriod, _endPeriod, dateNull(), dateMax(), fieldNum(RPayTrans, TransDate), SortOrder::Ascending);
                    while (qrPayTrans.next())
                    {
                        rPayTrans = qrPayTrans.get(tableNum(RPayTrans));
                        i ++;
                        if (i > bonusNumber)
                        {
                            break;
                        }
                        rPayAmount += CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                    }
                    break;
                case RPayBonusAccountingCriterion::Last:
                    modifyPayTransQuery(startPeriod, _endPeriod, dateNull(), dateMax(), fieldNum(RPayTrans, TransDate), SortOrder::Descending);
                    while (qrPayTrans.next())
                    {
                        rPayTrans = qrPayTrans.get(tableNum(RPayTrans));
                        i ++;
                        if (i > bonusNumber)
                        {
                            break;
                        }
                        rPayAmount += CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                    }
                    break;
                case RPayBonusAccountingCriterion::Max:
                    modifyPayTransQuery(startPeriod, _endPeriod, dateNull(), dateMax(), fieldNum(RPayTrans, Amount), SortOrder::Descending);
                    while (qrPayTrans.next())
                    {
                        rPayTrans = qrPayTrans.get(tableNum(RPayTrans));
                        i ++;
                        if (i > bonusNumber)
                        {
                            break;
                        }
                        rPayAmount += CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                    }
                    break;
                case RPayBonusAccountingCriterion::Min:
                    modifyPayTransQuery(startPeriod, _endPeriod, dateNull(), dateMax(), fieldNum(RPayTrans, Amount), SortOrder::Ascending);
                    while (qrPayTrans.next())
                    {
                        rPayTrans = qrPayTrans.get(tableNum(RPayTrans));
                        i ++;
                        if (i > bonusNumber)
                        {
                            break;
                        }
                        rPayAmount += CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                    }
                    break;
            }
        }

        startPeriod = prevYr(averageEarnCalcPeriod);
        while select PayCtype from rPayTable
              exists join rPayFundMember
              where  rPayTable.RpayPeriodFrequency == RPayPeriodFrequency::Year   &&
                     rPayTable.PayCtype            == rPayFundMember.PayCostType &&
                     rPayFundMember.CounterUnit    == rPayAverageEarnEmplPeriodTable.BonusFund
        {
            tmpLag = #monthsPerYear;
            bonusNumber = 1;
            bonusPart   = _monthForCalc / tmplag;

            switch (rPayAverageEarnEmplPeriodTable.rPayBonusAccountingCriterion)
            {
                case RPayBonusAccountingCriterion::First:
                    modifyPayTransQuery(dateNull(), dateMax(), dateEndYr(startPeriod), dateEndYr(startPeriod), fieldNum(RPayTrans, TransDate), SortOrder::Ascending, true);
                    qrPayTrans.next();
                    rPayTrans = qrPayTrans.get(tableNum(RPayTrans));

                    rPayAmount += CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                    break;

                case RPayBonusAccountingCriterion::Last:
                    modifyPayTransQuery(dateNull(), dateMax(), dateEndYr(startPeriod), dateEndYr(startPeriod), fieldNum(RPayTrans, TransDate), SortOrder::Descending, true);
                    qrPayTrans.next();
                    rPayTrans = qrPayTrans.get(tableNum(RPayTrans));

                    rPayAmount += CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                    break;

                case RPayBonusAccountingCriterion::Max:
                    modifyPayTransQuery(dateNull(), dateMax(), dateEndYr(startPeriod), dateEndYr(startPeriod), fieldNum(RPayTrans, Amount), SortOrder::Descending, true);
                    qrPayTrans.next();
                    rPayTrans = qrPayTrans.get(tableNum(RPayTrans));

                    rPayAmount += CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                    break;

                case RPayBonusAccountingCriterion::Min:
                    modifyPayTransQuery(dateNull(), dateMax(), dateEndYr(startPeriod), dateEndYr(startPeriod), fieldNum(RPayTrans, Amount), SortOrder::Ascending, true);
                    qrPayTrans.next();
                    rPayTrans = qrPayTrans.get(tableNum(RPayTrans));

                    rPayAmount += CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                    break;
            }
        }

        if (rPayAverageEarnEmplPeriodTable.CalcBonusInProportion)
        {
            rPayAmount = this.calcBonusProportional(rPayAmount);
        }

        return rPayAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void calculateNow()
    {
        RPayAverageEarnTrans  rPayAverageEarnTrans;
        int                   i;
        RPayRateValue         monthForCalc;
        ReportPeriod_RU       currentPeriod;
        RPayRateCallContext   callContext;

        if ( ! this.check())
        {
            return;
        }

        callContext = new RPayRateCallContext();
        callContext.parmRateDate(rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod);
        callContext.parmEmployeeId(rPayAverageEarnEmplPeriodTable.EmplId);

        ttsbegin;

        delete_from rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId;

        monthForCalc = RPayRateTable::find(rPayAverageEarnEmplPeriodTable.MonthForCalc).getValue(callContext);
        currentPeriod = averageEarnCalcPeriod;

        //12 month
        for (i = 1; i <= monthForCalc; i++)
        {
            currentPeriod = endmth(prevMth(currentPeriod));
            this.initPaymentFundTrans(currentPeriod);
        }

        if (this.getBonusMonthDay())
        {
            this.initOtherFundTrans(endmth(prevMth(averageEarnCalcPeriod)), monthForCalc);
        }

        this.updateAverageEarnEmplPeriodTable();

        //current income
        this.checkInitAverage();

        //previous accident
        this.checkInitFromPrevious();

        //unknown
        if (! rPayAverageEarnEmplPeriodTable.Amount)
        {
            this.initPaymentFundTrans(averageEarnCalcPeriod);
            if (this.getBonusMonthDay())
            {
                this.initOtherFundTrans(averageEarnCalcPeriod, 1);
            }
        }

        this.updateAverageEarnEmplPeriodTable();

        //rate
        if (! rPayAverageEarnEmplPeriodTable.Amount)
        {
            this.initPaymentFundTransRate(averageEarnCalcPeriod);
        }

        this.updateAverageEarnEmplPeriodTable();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean check()
    {
        if (! RPayEmplTblSum::payCalendarId(emplTable.EmployeeId, averageEarnCalcPeriod))
        {
            return checkFailed(strFmt("@RUP1073",emplTable.EmployeeId));
        }

        if (! rPayCalendarId)
        {
            return checkFailed(strFmt("@GLS106104", enum2str(rPayAverageEarnEmplPeriodTable.rPayWeekDuration)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInitAverage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void checkInitAverage()
    {
        if (! rPayAverageEarnEmplPeriodTable.Amount)
        {
            this.initPaymentFundTransAverage(endmth(averageEarnCalcPeriod));
            if (this.getBonusMonthDay())
            {
                this.initOtherFundTrans(averageEarnCalcPeriod, 1);
            }
        }

        this.updateAverageEarnEmplPeriodTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInitFromPrevious</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void checkInitFromPrevious()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAverageEarnPeriodTableLines</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createAverageEarnPeriodTableLines()
    {
        RHRMEmplTable   emplTbl;

        while (queryRun.next())
        {
            emplTbl = queryRun.get(tableNum(RHRMEmplTable));
            if (emplTbl.checkEmplBeforeCalc(averageEarnCalcPeriod))
            {
                RPayAverageEarnEngine::getAverageEarn(emplTbl.EmployeeId, rPayAverageEarnCode, averageEarnCalcPeriod);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAverageEarnTransDialog</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createAverageEarnTransDialog()
    {
        RPayAverageEarnTrans rPayAverageEarnTrans;

        this.runAverageEarnTransDialog();

        while (true)
        {
            if (averageEarnTransDialog && averageEarnTransDialog.closedOk())
            {
                if (endmth(averageEarnTransDialogFieldPayPeriod.value()) >= rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod ||
                    endmth(averageEarnTransDialogFieldPayPeriod.value()) < endmth(prevYr(rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod)))
                {
                    Box::info("@RUP523", "@RUP461");

                    this.runAverageEarnTransDialog();
                    continue;
                }

                if (RPayAverageEarnTrans::exist(endmth(averageEarnTransDialogFieldPayPeriod.value()),
                                                rPayAverageEarnEmplPeriodTable.RecId,
                                                averageEarnTransDialogFieldType.value()))
                {
                    Box::info("@RUP524", "@RUP461");
                    this.runAverageEarnTransDialog();
                    continue;
                }

                if (averageEarnTransDialogFieldType.value() == RPayAverageSourceType::PrevFund)
                {
                    Box::info(strFmt("@RUP6190", RPayAverageSourceType::PrevFund, rPayAverageEarnEmplPeriodTable.AverageEarnCodeType), "@RUP461");
                    this.runAverageEarnTransDialog();
                    continue;
                }

                if (averageEarnTransDialogFieldType.value() == RPayVacationSourceType::PaymentFund)
                {
                    rPayAverageEarnTrans = this.initPaymentFundTrans(endmth(averageEarnTransDialogFieldPayPeriod.value()));
                }

                if (! rPayAverageEarnTrans)
                {
                     rPayAverageEarnTrans.PayPeriod                  = endmth(averageEarnTransDialogFieldPayPeriod.value());
                     rPayAverageEarnTrans.rPayAverageSourceType      = averageEarnTransDialogFieldType.value();
                     rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
                     rPayAverageEarnTrans.insert();
                }

                this.updateAverageEarnEmplPeriodTable();
                formController.researchAndFindAETrans(rPayAverageEarnTrans);
            }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean createLines(boolean _createLines = createLines)
    {
        createLines = _createLines;
        return createLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAverageEarnPeriodTableLines</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteAverageEarnPeriodTableLines()
    {
        RHRMEmplTable   emplTbl;

        ttsbegin;

        while (queryRun.next())
        {
            emplTbl = queryRun.get(tableNum(RHRMEmplTable));
            delete_from rPayAverageEarnEmplPeriodTable
                where rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode   == rPayAverageEarnCode ||
                      (rPayAverageEarnCode ? false : true)  &&
                      rPayAverageEarnEmplPeriodTable.EmplId                == emplTbl.EmployeeId  &&
                      rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod == averageEarnCalcPeriod ;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        rPayAverageEarnCodeField = dialog.addField(extendedTypeStr(RPayAverageEarnCodeOther),"@RUP230");

        if (createLines)
        {
            dialog.caption("@RUP1083");
        }
        else
        {
            dialog.caption("@RUP1084");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAverageEarnEmplPeriodTable findOrCreate(RPayAverageEarnCode _rPayAverageEarnCode   = rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode,
                                                          RHRMEmplId          _emplId                = emplTable.EmployeeId,
                                                          ReportPeriod_RU     _averageEarnCalcPeriod = averageEarnCalcPeriod)
    {
        rPayAverageEarnEmplPeriodTable = RPayAverageEarnEmplPeriodTable::find(_rPayAverageEarnCode,
                                                                              _emplId,
                                                                              _averageEarnCalcPeriod);
        if (! rPayAverageEarnEmplPeriodTable)
        {
            rPayAverageEarnEmplPeriodTable.clear();
            rPayAverageEarnEmplPeriodTable.EmplId                = _emplId;
            rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode   = _rPayAverageEarnCode;
            rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod = _averageEarnCalcPeriod;
            rPayAverageEarnEmplPeriodTable.initFromAverageEarnEmplTable();
            rPayAverageEarnEmplPeriodTable.insert();
            this.rPayAverageEarnEmplPeriodTable(rPayAverageEarnEmplPeriodTable);

            if (this.check())
            {
                this.calculateNow();
            }
        }
        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form controller handling class.
    /// </summary>
    /// <returns>
    /// The instance of <c>RPayAEFormController</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAEFormController formController()
    {
        return formController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public final FormRun formRun(FormRun _formRun = formController.formRun())
    {
        return formController.formRun(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount getAverageAmount()
    {
        return rPayAverageEarnEmplPeriodTable.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBonusMonthDay</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayDayHour getBonusMonthDay()
    {
        RPayDayHour             rPayDayHour;
        RPayAverageEarnTrans    rPayAverageEarnTrans;

        select sum(rPayDayHour) from rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId &&
                  rPayAverageEarnTrans.rPayAverageSourceType      == RPayAverageSourceType::PaymentFund   &&
                  rPayAverageEarnTrans.rPayDayHour                > 0;

        rPayDayHour = rPayAverageEarnTrans.rPayDayHour;

        return rPayDayHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayCalendarId getCalendarId()
    {
        return rPayCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean         ret;

        ret = super();

        if (ret)
        {
            rPayAverageEarnCode = rPayAverageEarnCodeField.value();

            if ((createLines ? ! RPayAverageEarnTable::find(rPayAverageEarnCode) :
                ! RPayAverageEarnTable::find(rPayAverageEarnCode) && rPayAverageEarnCode))
            {
                ret = checkFailed("@RUP1126");
            }
            averageEarnCalcPeriod = formController.getPayPeriod();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullMonthDay</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayDayHour getFullMonthDay(ReportPeriod_RU              _payPeriod,
                                          RPayAverageFullMonthCalcType _rPayAverageFullMonthCalcType)
    {
        RPayRateCallContext callContext;
        RPayDayHour   rPayDayHour;
        RPayRateValue convertingFactor,
                      convertingFactor57 ;
        int           numberDaysInWeek;

        if (_rPayAverageFullMonthCalcType == RPayAverageFullMonthCalcType::Actually)
        {
            if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
            {
                rPayDayHour = RPayCalendarTable::mthWorkDaysTimeGroup(rPayCalendarId,
                                                                      _payPeriod,
                                                                      rPayAverageEarnEmplPeriodTable.ScheduleTimeGroupCode);
            }
            else
            {
                rPayDayHour = RPayCalendarTable::mthWorkHoursTimeGroup(rPayCalendarId,
                                                                       _payPeriod,
                                                                       rPayAverageEarnEmplPeriodTable.ScheduleTimeGroupCode);
            }
        }
        else
        {
            callContext = new RPayRateCallContext();
            callContext.parmRateDate(_payPeriod);
            callContext.parmEmployeeId(rPayAverageEarnEmplPeriodTable.EmplId);

            rPayDayHour = RPayRateTable::find(rPpayAverageEarnParameters.MonthAverageDaysNumber).getValue(callContext);
            convertingFactor57 = RPayRateTable::find(rPpayAverageEarnParameters.ConvertingFactor57).getValue(callContext);
            switch (rPayAverageEarnEmplPeriodTable.rPayWeekDuration)
            {
                case RPayWeekDuration::FiveDays:
                    if (convertingFactor57)
                    {
                        rPayDayHour = decRound(rPayDayHour/convertingFactor57, #RoundDecimals);
                    }
                    numberDaysInWeek = #weekStandardDay;
                    break;
                case RPayWeekDuration::SixDays:
                    if (convertingFactor57)
                    {
                        callContext = new RPayRateCallContext();
                        callContext.parmRateDate(_payPeriod);
                        callContext.parmEmployeeId(rPayAverageEarnEmplPeriodTable.EmplId);

                        convertingFactor = RPayRateTable::find(rPpayAverageEarnParameters.ConvertingFactor56).getValue(callContext);
                        rPayDayHour = decRound((rPayDayHour/convertingFactor57) * convertingFactor, #RoundDecimals);
                    }
                    numberDaysInWeek = #weekWorkDay;
                    break;
                case RPayWeekDuration::SevenDays:
                    numberDaysInWeek = #weekCalendarDay;
                    break;
            }
            if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Hour)
            {
                rPayDayHour = rPayDayHour * (rPpayAverageEarnParameters.WeekDuration /numberDaysInWeek);
            }
        }
        if (! rPayDayHour)
        {
            info(strFmt("@RUP520",rPayCalendarId, date2StrUsr(_payPeriod, DateFlags::None)));
        }
        return rPayDayHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartByCoefficient</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayDayHour getPartByCoefficient(ReportPeriod_RU _payPeriod)
    {
        RPayDayHour    dayNumber;
        RPayRateValue  calendarFactor,
                       calcFactor;
        RPayRateCallContext callContext;

        dayNumber = conPeek(RPayEmplTblSum::dayHourGroupSum(_payPeriod,
                                                            emplTable.EmployeeId,
                                                            rPayAverageEarnEmplPeriodTable.rPayDayHourCalc,
                                                            rPayAverageEarnEmplPeriodTable.ActuallyTimeGroupCode), 1);

        callContext = new RPayRateCallContext();
        callContext.parmRateDate(_payPeriod);
        callContext.parmEmployeeId(emplTable.EmployeeId);

        switch (RPayCalendarTable::find(RPayEmplTblSum::payCalendarId(emplTable.EmployeeId, _payPeriod)).PayCalendarType)
        {
            case RPayCalendarType::SevenDays :
                callContext.parmRateDate(_payPeriod);
                callContext.parmEmployeeId(emplTable.EmployeeId);
                calendarFactor = RPayRateTable::find(rPpayAverageEarnParameters.ConvertingFactor57).getValue(callContext);
                break;

            case RPayCalendarType::SixDay :
                calendarFactor = RPayRateTable::find(rPpayAverageEarnParameters.ConvertingFactor56).getValue(callContext);
                break;

            default :
                calendarFactor = 1;
                break;
        }

        switch (rPayAverageEarnEmplPeriodTable.rPayWeekDuration)
        {
            case RPayWeekDuration::SevenDays:
                calcFactor = RPayRateTable::find(rPpayAverageEarnParameters.ConvertingFactor57).getValue(callContext);
                break;

            case RPayWeekDuration::SixDays :
                calcFactor = RPayRateTable::find(rPpayAverageEarnParameters.ConvertingFactor56).getValue(callContext);
                break;

            default:
                calcFactor = 1;
                break;
        }

        if (calendarFactor)
        {
            dayNumber = decRound(dayNumber * calcFactor / calendarFactor, #RoundDecimals);
        }

        return dayNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartCalendar</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayDayHour getPartCalendar(ReportPeriod_RU _payPeriod)
    {
        StartDate               startDate;
        EndDate                 endDate;
        Days                    calendarDays;
        container               workPeriods, workPeriod;
        int                     i;

        workPeriods = RPayHistory::getOrganizationByDateInterval(rPayAverageEarnEmplPeriodTable.EmplId, dateStartMth(_payPeriod), _payPeriod);
        for (i = 1; i <= conLen(workPeriods) ; i++)
        {
            workPeriod = conPeek(workPeriods,i);
            startDate  = conPeek(workPeriod,2);
            endDate    = conPeek(workPeriod,3);
            calendarDays += endDate - startDate + 1;
        }
        return calendarDays - RPayAverageEarnEngine::nonAppearanceDaysGroup(dateStartMth(_payPeriod), _payPeriod, rPayAverageEarnEmplPeriodTable.EmplId, rPayAverageEarnEmplPeriodTable.NonAppearanceTimeGroupCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartMonthDay</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayDayHour getPartMonthDay(ReportPeriod_RU _payPeriod)
    {
        RPayRateCallContext callContext;
        RPayDayHour    dayNumber;

        switch (rPayAverageEarnEmplPeriodTable.rPayAverageTimeCalcType)
        {
            case RPayAverageTimeCalcType::Summary:
                dayNumber = this.getPartSummary(_payPeriod);
                break;

            case RPayAverageTimeCalcType::Calendar:
                callContext = new RPayRateCallContext();
                callContext.parmRateDate(_payPeriod);
                callContext.parmEmployeeId(rPayAverageEarnEmplPeriodTable.EmplId);

                dayNumber = this.getPartCalendar(_payPeriod);
                dayNumber = dayNumber / dayOfMth(endmth(_payPeriod)) * RPayRateTable::find(rPpayAverageEarnParameters.MonthAverageDaysNumber).getValue(callContext);

                break;

            case RPayAverageTimeCalcType::ByCoefficient:
                dayNumber = this.getPartByCoefficient(_payPeriod);
                break;
        }

        return dayNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartSummary</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayDayHour getPartSummary(ReportPeriod_RU _payPeriod)
    {
        RPayDayHour    dayNumber;
        #define.hrScheduleIdx(2)
        #define.hrFactIdx(1)

        dayNumber = conPeek(RPayEmplTblSum::dayHourGroupSum(_payPeriod,
                                                            emplTable.EmployeeId,
                                                            rPayAverageEarnEmplPeriodTable.rPayDayHourCalc,
                                                            rPayAverageEarnEmplPeriodTable.NonAppearanceTimeGroupCode), #hrFactIdx);
        dayNumber = conPeek(RPayEmplTblSum::dayHourGroupSum(_payPeriod,
                                                            emplTable.EmployeeId,
                                                            rPayAverageEarnEmplPeriodTable.rPayDayHourCalc,
                                                            rPayAverageEarnEmplPeriodTable.ScheduleTimeGroupCode), #hrScheduleIdx) - dayNumber;

        return dayNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRPayDayHour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets quantity of days/hours for the period.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// The quantity of days/hours.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayDayHour getRPayDayHour(TransDate _fromDate, TransDate _toDate)
    {
        return RPayCalendarDate::periodWorkDays(rPayCalendarId, _fromDate, _toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ifEmplWorkFullMonth</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean ifEmplWorkFullMonth(ReportPeriod_RU _payPeriod)
    {
        return this.getPartCalendar(_payPeriod) == dayOfMth(endmth(_payPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>includedModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the include into the calculation check box change event.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void includedModified()
    {
        RPayTrans rPayTrans;
        TransLinkType_RU    transLinkType;
        RPayAverageEarnValue rPayAverageEarnValue;

        if (rPayAverageEarnEmplPeriodTable.Included)
        {
            rPayAverageEarnEmplPeriodTable.PayPeriod       = RPayParameters::payPeriod(rPayAverageEarnEmplPeriodTable.EmplId);
            if (rPayAverageEarnEmplPeriodTable.CorrectedPeriod == dateNull())
                rPayAverageEarnEmplPeriodTable.CorrectedPeriod = RPayParameters::payPeriod(rPayAverageEarnEmplPeriodTable.EmplId);

            if (rPayAverageEarnEmplPeriodTable.isReverseLine())
            {
                this.includeReverse();
                formController.refreshDatasources();
            }
        }
        else
        {
            rPayAverageEarnEmplPeriodTable.PayPeriod       = dateNull();
            transLinkType = TransLink_RU::findSec(rPayAverageEarnEmplPeriodTable.TableId, rPayAverageEarnEmplPeriodTable.RecId).TransLinkType;
            if (transLinkType != TransLinkType_RU::Storno)
                rPayAverageEarnEmplPeriodTable.CorrectedPeriod = dateNull();
            ttsbegin;

            delete_from rPayTrans
                where rPayTrans.SourceTableId == rPayAverageEarnEmplPeriodTable.TableId &&
                      rPayTrans.SourceRecId   == rPayAverageEarnEmplPeriodTable.RecId;

            while select RecId, TableId from rPayAverageEarnValue
                where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId
            {
                delete_from rPayTrans
                    where rPayTrans.SourceTableId == rPayAverageEarnValue.TableId &&
                          rPayTrans.SourceRecId   == rPayAverageEarnValue.RecId;
            }

            ttscommit;
        }
        this.updateFormDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeReverse</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void includeReverse()
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTableSrc;
        RPayAverageEarnTrans           rPayAverageEarnTransLocal;
        RPayAverageEarnValue           rPayAverageEarnValueLocal;

        RPayReverse_Average            payReverse;
        Args                    args       = new Args();
        ReportPeriod_RU         periodStart;

        rPayAverageEarnEmplPeriodTableSrc = TransLink_RU::findOrig(rPayAverageEarnEmplPeriodTable);

        if (rPayAverageEarnEmplPeriodTableSrc)
        {
            ttsbegin;
            delete_from rPayAverageEarnTransLocal
                where rPayAverageEarnTransLocal.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId;

            select firstonly minof(PayPeriod) from rPayAverageEarnValueLocal
                where rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId &&
                      !rPayAverageEarnValueLocal.IsSourceLine;

            periodStart = rPayAverageEarnValueLocal.PayPeriod;

            delete_from rPayAverageEarnValueLocal
                where rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId;

            args.record(rPayAverageEarnEmplPeriodTableSrc);
            args.parmEnumType(enumNum(RPayReverseType));
            args.parmEnum(RPayReverseType::Reverse);

            payReverse = RPayReverse_Average::construct(args);
            payReverse.parmUpdateTbl(false);
            payReverse.rPayAverageEarnEmplPeriodTable(rPayAverageEarnEmplPeriodTable);
            payReverse.parmRecalcSickListId(rPayAverageEarnEmplPeriodTable.RecalcSickListId);
            payReverse.parmMinPeriod(periodStart);
            payReverse.parmMaxPeriod(dateMax());

            payReverse.runOperation();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAverageEarnTransDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the dialog for avearage earning transactions initialization.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initAverageEarnTransDialog()
    {
        averageEarnTransDialog = new Dialog("@RUP461");

        averageEarnTransDialogFieldPayPeriod  = averageEarnTransDialog.addField(extendedTypeStr(ReportPeriod_RU));
        averageEarnTransDialogFieldType       = averageEarnTransDialog.addField(enumStr(RPayAverageSourceType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOtherFundTrans</Name>
				<Source><![CDATA[
    #timeConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initOtherFundTrans(ReportPeriod_RU _endPeriod    = endmth(prevMth(averageEarnCalcPeriod)),
                                      RPayRateValue   _monthForCalc = 0)
    {
        RPayRateCallContext  callContext;
        RPayAverageEarnTrans rPayAverageEarnTrans;
        RPayAmount           rPayAmount;
        RPayDayHour          regDayHour;

        if (prmisDefault(_monthForCalc))
        {
            callContext   = new RPayRateCallContext();
            callContext.parmRateDate(rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod);
            callContext.parmEmployeeId(rPayAverageEarnEmplPeriodTable.EmplId);
            _monthForCalc = RPayRateTable::find(rPayAverageEarnEmplPeriodTable.MonthForCalc).getValue(callContext);
        }

        rPayAmount = this.calcOtherFundAmount(_endPeriod, _monthForCalc);

        if (! rPayAmount)
            return;

        regDayHour = this.getBonusMonthDay();

        ttsbegin;
        rPayAverageEarnTrans.clear();
        rPayAverageEarnTrans.PayPeriod                  = _endPeriod;
        rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
        rPayAverageEarnTrans.rPayAverageSourceType      = RPayAverageSourceType::OtherFund;
        rPayAverageEarnTrans.Amount                     = rPayAmount;
        rPayAverageEarnTrans.rPayDayHour                = regDayHour;
        rPayAverageEarnTrans.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentFundTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAverageEarnTrans initPaymentFundTrans(ReportPeriod_RU _currentPeriod)
    {
        RPayDayHour          regDayHour;
        RPayAmount           payAmount;
        RPayRateValue        increaseIncome;
        RPayAverageEarnTrans rPayAverageEarnTrans;
        RPayRateCallContext  callContext;

        payAmount = RPayTrans::calculateFundBySourceDate(rPayAverageEarnEmplPeriodTable.ActuallyFund,
                                                         _currentPeriod,
                                                         emplTable.EmployeeId);
        if (! payAmount)
            return rPayAverageEarnTrans;

        regDayHour = this.getFullMonthDay(_currentPeriod,rPayAverageEarnEmplPeriodTable.RpayAverageFullMonthCalcType);

        if (! regDayHour)
        {
            return rPayAverageEarnTrans;
        }

        rPayAverageEarnTrans.clear();
        rPayAverageEarnTrans.PayPeriod                  = _currentPeriod;
        rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
        rPayAverageEarnTrans.rPayAverageSourceType      = RPayAverageSourceType::PaymentFund;

        callContext = new RPayRateCallContext();
        callContext.parmRateDate(_currentPeriod);
        callContext.parmEmployeeId(emplTable.EmployeeId);
        callContext.parmCriterion(payAmount);

        increaseIncome = RPayRateTable::find(rPayAverageEarnEmplPeriodTable.RiseFactor).getValue(callContext);
        if (increaseIncome)
        {
            payAmount = payAmount * increaseIncome;
        }

        rPayAverageEarnTrans.Amount = payAmount;

        if (this.ifEmplWorkFullMonth(_currentPeriod))
        {
            rPayAverageEarnTrans.rPayDayHour = regDayHour;
        }
        else
        {
            rPayAverageEarnTrans.rPayDayHour = this.getPartMonthDay(_currentPeriod);
        }

        rPayAverageEarnTrans.insert();

        return rPayAverageEarnTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentFundTransAverage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initPaymentFundTransAverage(ReportPeriod_RU _currentPeriod)
    {
        RPayAmount                payAmount;
        RPayDayHour               regDayHour;
        RPayAverageEarnParameters rPayAverageEarnParameters = RPayAverageEarnParameters::find();
        RPayRateValue             convertingFactor;
        RPayAverageEarnTrans      rPayAverageEarnTrans;
        RPayRateCallContext       callContext;

        if (RPayAverageEarnTrans::exist(_currentPeriod,
                                        rPayAverageEarnEmplPeriodTable.RecId,
                                        RPayAverageSourceType::PaymentFund))
        {
            return;
        }
        payAmount = RPayTrans::calculateFundBySourceDate(rPayAverageEarnEmplPeriodTable.AverageFund,
                                                         _currentPeriod,
                                                         emplTable.EmployeeId);
        if (! payAmount)
            return;

        regDayHour = RPayTblTrans::realDayHourGroup(_currentPeriod,
                                                    emplTable.EmployeeId,
                                                    rPayAverageEarnEmplPeriodTable.rPayDayHourCalc,
                                                    rPayAverageEarnEmplPeriodTable.AverageTimeGroupCode);

        if (! regDayHour)
            return;

        callContext = new RPayRateCallContext();
        callContext.parmRateDate(_currentPeriod);
        callContext.parmEmployeeId(rPayAverageEarnEmplPeriodTable.EmplId);

        switch (rPayAverageEarnEmplPeriodTable.rPayWeekDuration)
        {
            case RPayWeekDuration::SevenDays:
                convertingFactor = RPayRateTable::find(rPayAverageEarnParameters.ConvertingFactor57).getValue(callContext);
                break;
            case RPayWeekDuration::SixDays:
                convertingFactor = RPayRateTable::find(rPayAverageEarnParameters.ConvertingFactor56).getValue(callContext);
                break;
        }

        if (convertingFactor)
        {
            regDayHour = regDayHour * convertingFactor;
        }

        rPayAverageEarnTrans.clear();
        rPayAverageEarnTrans.PayPeriod                  = _currentPeriod;
        rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
        rPayAverageEarnTrans.rPayAverageSourceType      = RPayAverageSourceType::PaymentFund;
        rPayAverageEarnTrans.Amount                     = payAmount;
        rPayAverageEarnTrans.rPayDayHour                = regDayHour;
        rPayAverageEarnTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentFundTransRate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initPaymentFundTransRate(ReportPeriod_RU _currentPeriod)
    {
        RPayAmount                payAmount;
        RPayDayHour               regDayHour;
        RPayAverageEarnParameters rPayAverageEarnParameters = RPayAverageEarnParameters::find();
        RPayAverageEarnTrans      rPayAverageEarnTrans;
        RPayRateCallContext       callContext;

        if (RPayAverageEarnTrans::exist(_currentPeriod,
                                        rPayAverageEarnEmplPeriodTable.RecId,
                                        RPayAverageSourceType::PaymentFund))
        {
            return;
        }

        callContext = new RPayRateCallContext();
        callContext.parmRateDate(_currentPeriod);
        callContext.parmEmployeeId(rPayAverageEarnEmplPeriodTable.EmplId);

        payAmount = RPayRateTable::find(rPayAverageEarnParameters.RateOfSalary).getValue(callContext);

        if (! payAmount)
        {
            return;
        }

        regDayHour = this.getFullMonthDay(_currentPeriod,rPayAverageEarnEmplPeriodTable.RpayAverageFullMonthCalcType);

        if (! regDayHour)
        {
            return;
        }

        rPayAverageEarnTrans.clear();
        rPayAverageEarnTrans.PayPeriod                  = _currentPeriod;
        rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
        rPayAverageEarnTrans.rPayAverageSourceType      = RPayAverageSourceType::PaymentFund;
        rPayAverageEarnTrans.Amount                     = payAmount;
        rPayAverageEarnTrans.rPayDayHour                = regDayHour;
        rPayAverageEarnTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAverageEarnValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts values into the benefit due table.
    /// </summary>
    /// <param name="_rPayAverageSourceType">
    /// The payment source.
    /// </param>
    /// <param name="_avgRate">
    /// The rate.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertAverageEarnValue(RPayAverageSourceType _rPayAverageSourceType, Amount _avgRate)
    {
        ReportPeriod_RU currentPeriod;
        TransDate       fromDate;
        TransDate       toDate;
        RPayAverageEarnValue rPayAverageEarnValue;

        for (currentPeriod = endmth(rPayAverageEarnEmplPeriodTable.StartDate);
                currentPeriod <= endmth(rPayAverageEarnEmplPeriodTable.EndDate);
                currentPeriod = endmth(nextMth(currentPeriod)))
        {
            rPayAverageEarnValue.AverageEarnEmplPeriodRecid = rPayAverageEarnEmplPeriodTable.RecId;
            rPayAverageEarnValue.PayPeriod                  = currentPeriod;
            fromDate = dateStartMth(currentPeriod);
            fromDate = fromDate > rPayAverageEarnEmplPeriodTable.StartDate ? fromDate : rPayAverageEarnEmplPeriodTable.StartDate;
            toDate  = currentPeriod > rPayAverageEarnEmplPeriodTable.EndDate ? rPayAverageEarnEmplPeriodTable.EndDate : currentPeriod;

            rPayAverageEarnValue.PayDayHour = this.getRPayDayHour(fromDate, toDate);

            if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Hour)
            {
                rPayAverageEarnValue.PayDayHour = rPayAverageEarnValue.PayDayHour * (rPpayAverageEarnParameters.WeekDuration /
                                                                                    (rPayAverageEarnEmplPeriodTable.rPayWeekDuration == RPayWeekDuration::SixDays ? #weekWorkDay : #weekCalendarDay));
            }
            rPayAverageEarnValue.PayAverageSourceType = _rPayAverageSourceType;
            rPayAverageEarnValue.AverageRate = _avgRate;
            rPayAverageEarnValue.Amount =  CurrencyExchangeHelper::amount(rPayAverageEarnValue.AverageRate * rPayAverageEarnValue.PayDayHour);
            if (rPayAverageEarnEmplPeriodTable.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTripBreaking
             || rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::VacationBreaking)
            {
                rPayAverageEarnValue.Amount = rPayAverageEarnValue.Amount * -1;
                rPayAverageEarnValue.PayDayHour = rPayAverageEarnValue.PayDayHour * -1;
            }
            rPayAverageEarnValue.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    //make this method is private, use construct instead
    public void new(RHRMEmplId          _emplId,
                    RPayAverageEarnCode _rPayAverageEarnCode,
                    ReportPeriod_RU     _rPayPeriod)
    {
        super();

        rPayAverageEarnEmplPeriodTable = RPayAverageEarnEmplPeriodTable::find(_rPayAverageEarnCode,
                                                                              _emplId,
                                                                              _rPayPeriod);
        rPpayAverageEarnParameters = RPayAverageEarnParameters::find();
        this.rPayAverageEarnEmplPeriodTable(rPayAverageEarnEmplPeriodTable);

        formController = RPayAEFormController::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean ret;
        Query   query = new Query("@RUP1127");

        query.addDataSource(tableNum(RHRMEmplTable));
        queryRun = new QueryRun(query);

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayAverageEarnEmplPeriodTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable(RPayAverageEarnEmplPeriodTable _rPayAverageEarnEmplPeriodTable = _rPayAverageEarnEmplPeriodTable)
    {
        rPayAverageEarnEmplPeriodTable    = _rPayAverageEarnEmplPeriodTable;
        averageEarnCalcPeriod             = rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod;
        emplTable                         = RHRMEmplTable::find(rPayAverageEarnEmplPeriodTable.EmplId);
        rPpayAverageEarnParameters        = RPayAverageEarnParameters::find();
        this.setCalendarId();
        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (createLines)
        {
            this.createAverageEarnPeriodTableLines();
        }
        else
        {
            this.deleteAverageEarnPeriodTableLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAverageEarnTransDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the dialog for avearage earning transactions.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runAverageEarnTransDialog()
    {
        this.initAverageEarnTransDialog();
        averageEarnTransDialog.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalendarId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setCalendarId()
    {
        switch (rPayAverageEarnEmplPeriodTable.rPayWeekDuration)
        {
            case RPayWeekDuration::FiveDays:
                rPayCalendarId = RPayCalendarTable::findCalendarType(RPayCalendarType::FiveDay).CalendarId;
                break;
            case RPayWeekDuration::SixDays:
                rPayCalendarId = RPayCalendarTable::findCalendarType(RPayCalendarType::SixDay).CalendarId;
                break;
            case RPayWeekDuration::SevenDays:
                rPayCalendarId = RPayCalendarTable::findCalendarType(RPayCalendarType::SevenDays).CalendarId;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAverageEarnEmplPeriodTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateAverageEarnEmplPeriodTable()
    {
        ttsbegin;

        rPayAverageEarnEmplPeriodTable.selectForUpdate(true);
        rPayAverageEarnEmplPeriodTable.Amount = conPeek(this.calcAverageAmountTotal(), 1);
        rPayAverageEarnEmplPeriodTable.update();

        ttscommit;

        formController.refreshDatasources();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAverageEarnValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates values in the benefit due table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateAverageEarnValue()
    {
        RPayAverageEarnValue rPayAverageEarnValue;
        RPayAmount  amount = 0;

        ttsbegin;

        delete_from rPayAverageEarnValue
            where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId;

        amount = this.calcAverageAmount(RPayAverageSourceType::PaymentFund);
        this.insertAverageEarnValue(RPayAverageSourceType::PaymentFund, amount);
        amount = this.calcAverageAmount(RPayAverageSourceType::OtherFund);

        if (amount)
        {
            this.insertAverageEarnValue(RPayAverageSourceType::OtherFund, amount);
        }

        ttscommit;

        formController.researchRPayAverageEarValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public final void updateFormDesign()
    {
        formController.updateFormDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewMode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public final boolean viewMode(boolean _viewMode = formController.viewMode())
    {
        return formController.viewMode(_viewMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the engine.
    /// </summary>
    /// <param name="_table">
    /// The employee average earnings calculation table record.
    /// </param>
    /// <param name="_rPayPeriod">
    /// The calculation period.
    /// </param>
    /// <returns>
    /// The instance of an engine.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAverageEarnEngine construct(RPayAverageEarnEmplPeriodTable    _table,
                                                  ReportPeriod_RU                   _rPayPeriod = _table.PayPeriod)
    {
        RPayAverageEarnEngine ret;

        switch (_table.AverageEarnCodeType)
        {
            case RPayAverageEarnCodeType::BusinessTrip:
                ret =  new RPayAverageEarnEngine_BusinessTrip(_table.EmplId, _table.rPayAverageEarnCode, _rPayPeriod);
                break;

            case RPayAverageEarnCodeType::SickList:
                ret =  new RPayAverageEarnEngine_SickList(_table.EmplId, _table.rPayAverageEarnCode, _rPayPeriod);
                break;

            case RPayAverageEarnCodeType::Vacation:
                ret =  new RPayAverageEarnEngine_Vacation(_table.EmplId, _table.rPayAverageEarnCode, _rPayPeriod);
                break;

            default:
                ret = new RPayAverageEarnEngine(_table.EmplId, _table.rPayAverageEarnCode, _rPayPeriod);
                break;
        }

        ret.rPayAverageEarnEmplPeriodTable(_table);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageEarn</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount getAverageEarn(RHRMEmplId          _emplId,
                                            RPayAverageEarnCode _rPayAverageEarnCode,
                                            ReportPeriod_RU     _rPayPeriod = RPayParameters::payPeriod(_emplId))
    {
        RPayAverageEarnEngine rPayAverageEarnEngine = new RPayAverageEarnEngine(_emplId,
                                                                                _rPayAverageEarnCode,
                                                                                _rPayPeriod);
        rPayAverageEarnEngine.findOrCreate(_rPayAverageEarnCode, _emplId, _rPayPeriod);
        return rPayAverageEarnEngine.getAverageAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef2EarnTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Drills down to the appropriate form based on the document type (vacation, sicklist, business trip).
    /// </summary>
    /// <param name="_dsRecord">
    /// The datasource record from the document form.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Wrong table record in argument.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public void jumpRef2EarnTable(Common _dsRecord)
    {
        Args        args;

        RPayAverageEarnEmplPeriodTable aeEmplPeriodTable;
        RPayAverageEarnEmplTable aeEmplTable;

        RPayAverageEarnCode earnCode;

        switch (true)
        {
            case _dsRecord is RPayAverageEarnEmplPeriodTable:
                aeEmplPeriodTable = _dsRecord as RPayAverageEarnEmplPeriodTable;
                earnCode = aeEmplPeriodTable.rPayAverageEarnCode;
                break;

            case _dsRecord is RPayAverageEarnEmplTable:
                aeEmplTable = _dsRecord as RPayAverageEarnEmplTable;
                earnCode = aeEmplTable.rPayAverageEarnCode;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        args = new Args();
        MenuFunction mf;
        switch (RPayAverageEarnTable::find(earnCode).RpayAverageEarnCodeType)
        {
            case RPayAverageEarnCodeType::Other :
                mf = new MenuFunction(menuItemDisplayStr(RPayAverageEarnTable), MenuItemType::Display);
                break;
            case RPayAverageEarnCodeType::Vacation :
                mf = new MenuFunction(menuItemDisplayStr(RPayVacationParameters), MenuItemType::Display);
                break;
            case RPayAverageEarnCodeType::SickList :
                mf = new MenuFunction(menuItemDisplayStr(RPaySickListParameters), MenuItemType::Display);
                break;
            case RPayAverageEarnCodeType::BusinessTrip :
                mf = new MenuFunction(menuItemDisplayStr(RPayBusinessTripParameters), MenuItemType::Display);
                break;
            default :
                break;
        }
        args.record(_dsRecord);

        mf.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonAppearanceDaysGroup</Name>
				<Source><![CDATA[
    #RpayTblConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Days nonAppearanceDaysGroup(
        StartDate           _startDate,
        EndDate             _endDate,
        RHRMEmplId          _emplId,
        RpayTimeGroupCode   _nonAppearanceTimeGroupCode,
        container           _checkedDocumentsPeriods = conNull())
    {
        Days                    nonAppearanceDayByDocument;
        TransDate               curDate, startItogDate, endItogDate;

        RPayTblJournal          payTblJournal;
        RPayTblTrans            payTblTrans;
        RPayTimeGroupMember     payTimeGroupMember;
        RpayTblSpecTimeTable    payTblSpecTimeTable;
        RPayCalendarTimeTrans   timeTrans;
        RPayRateCallContext     callContext;
        RPayTblDayHourTrans     payTblDayHourTrans;
        FieldId                 fieldId;
        QueryRun                queryRun;

        container               workPeriods;
        container               workPeriod;
        Map                     calendarDay = new Map(Types::Date, Types::Enum);
        int                     i;
        StartDate               startDate;
        EndDate                 endDate;
        RPayRateValue           convertingFactor;
        Days                    nonAppearanceDay;

        //binary search in sorted container of tuples of dates
        boolean isDocumentDayChecked(TransDate _date2Check)
        {
            boolean ret;
            int     l, r, m, len = conLen(_checkedDocumentsPeriods);
            container   conPeriod;
            StartDate   startPeriod;
            EndDate     endPeriod;

            l = 1;
            r = len;

            while (true)
            {
                m = (l + r) div 2;

                if (m > 0 && m <= len)
                {
                    conPeriod = conPeek(_checkedDocumentsPeriods, m);
                    [startPeriod, endPeriod] = conPeriod;

                    if (_date2Check >= startPeriod && _date2Check <= endPeriod)
                    {
                        ret = true;
                        break;
                    }
                    else
                    {
                        if (_date2Check < startPeriod)
                        {
                            r = m - 1;
                        }
                        else
                        {
                            l = m + 1;
                        }
                    }
                }
                else
                {
                    break;
                }
            }
            return ret;
        }

        boolean excludeDay(TransDate _date)
        {
            RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable;
            TransLink_RU                    transLink;
            RPaySickIllParameters           sickIllParameters;
            RHRMVacationType                vacationType;
            RHRMBusinessTripType            businessTripType;
            RPayTimeGroupMember             timeGroupMember;
            RpayTblSpecTimeTable            tblSpecTimeTable;

            if (_nonAppearanceTimeGroupCode)
            {
                select firstonly averageEarnEmplPeriodTable
                    where averageEarnEmplPeriodTable.EmplId                 == _emplId &&
                          averageEarnEmplPeriodTable.StartDate              <= _date   &&
                          averageEarnEmplPeriodTable.EndDate                >= _date   &&
                          averageEarnEmplPeriodTable.AverageEarnCodeType    == RPayAverageEarnCodeType::SickList
                exists join sickIllParameters
                    where sickIllParameters.PayIllType == averageEarnEmplPeriodTable.RpayIllType
                exists join tblSpecTimeTable
                    where tblSpecTimeTable.RpayTblSpecTimeType  == RpayTblSpecTimeType::SickList &&
                          tblSpecTimeTable.RpayCalendarTimeCode == sickIllParameters.CalendarTimeCode
                exists join timeGroupMember
                    where timeGroupMember.PayCalendarTimeCode == tblSpecTimeTable.RpayCalendarTimeCode &&
                          timeGroupMember.TimeGroup           == _nonAppearanceTimeGroupCode
                #transLinkNotExistsReversed_RU(transLink, averageEarnEmplPeriodTable);

                if (averageEarnEmplPeriodTable.RecId != 0)
                {
                    return true;
                }

                select firstonly averageEarnEmplPeriodTable
                    where averageEarnEmplPeriodTable.EmplId                 == _emplId &&
                          averageEarnEmplPeriodTable.StartDate              <= _date   &&
                          averageEarnEmplPeriodTable.EndDate                >= _date   &&
                          averageEarnEmplPeriodTable.AverageEarnCodeType    == RPayAverageEarnCodeType::Vacation
                exists join vacationType
                    where vacationType.VacationTypeId == averageEarnEmplPeriodTable.VacationTypeId
                exists join tblSpecTimeTable
                    where tblSpecTimeTable.RpayTblSpecTimeType  == RpayTblSpecTimeType::Vacation &&
                          tblSpecTimeTable.RpayCalendarTimeCode == vacationType.CalendarTimeCode
                exists join timeGroupMember
                    where timeGroupMember.PayCalendarTimeCode == tblSpecTimeTable.RpayCalendarTimeCode &&
                          timeGroupMember.TimeGroup == _nonAppearanceTimeGroupCode
                #transLinkNotExistsReversed_RU(transLink, averageEarnEmplPeriodTable);

                if (averageEarnEmplPeriodTable.RecId != 0)
                {
                    return true;
                }

                select firstonly averageEarnEmplPeriodTable
                    where averageEarnEmplPeriodTable.EmplId                 == _emplId &&
                          averageEarnEmplPeriodTable.StartDate              <= _date   &&
                          averageEarnEmplPeriodTable.EndDate                >= _date   &&
                          averageEarnEmplPeriodTable.AverageEarnCodeType    == RPayAverageEarnCodeType::BusinessTrip
                join businessTripType
                    where businessTripType.BusinessTripTypeId == averageEarnEmplPeriodTable.BusinessTripTypeId
                join tblSpecTimeTable
                    where tblSpecTimeTable.RpayTblSpecTimeType  == RpayTblSpecTimeType::Mission &&
                        tblSpecTimeTable.RpayCalendarTimeCode == businessTripType.CalendarTimeCode
                join timeGroupMember
                    where timeGroupMember.PayCalendarTimeCode == tblSpecTimeTable.RpayCalendarTimeCode &&
                          timeGroupMember.TimeGroup == _nonAppearanceTimeGroupCode
                #transLinkNotExistsReversed_RU(transLink, averageEarnEmplPeriodTable);

                if (averageEarnEmplPeriodTable.RecId != 0)
                {
                    return true;
                }
            }

            return false;
        }

        QueryRun getTblQueryRun()
        {
            Query query = new Query();
            QueryBuildDataSource qbdsRPayTblTrans,
                                 qbdsRPayTblJournal,
                                 qbdsRPayTblDayHourTrans,
                                 qbdsRPayTimeGroupMember;
            int j;

            qbdsRPayTblTrans = query.addDataSource(tableNum(RPayTblTrans));
            qbdsRPayTblTrans.orderMode(OrderMode::GroupBy);
            qbdsRPayTblTrans.fetchMode(QueryFetchMode::One2One);
            qbdsRPayTblTrans.addSortField(fieldNum(RPayTblTrans, SourceDate));
            qbdsRPayTblTrans.addRange(fieldNum(RPayTblTrans, EmplId)).value(queryValue(_emplId));
            qbdsRPayTblTrans.addRange(fieldNum(RPayTblTrans, SourceDate)).value(SysQuery::range(_startDate, endmth(_endDate)));

            qbdsRPayTblJournal = qbdsRPayTblTrans.addDataSource(tableNum(RPayTblJournal));
            qbdsRPayTblJournal.orderMode(OrderMode::GroupBy);
            qbdsRPayTblJournal.fetchMode(QueryFetchMode::One2One);
            qbdsRPayTblJournal.addLink(fieldNum(RPayTblTrans, PayTblNum), fieldNum(RPayTblJournal, TblNum));
            qbdsRPayTblJournal.addRange(fieldNum(RPayTblJournal, TblDate)).value(
                SysQuery::range(dateNull(), endmth(RPayParameters::payPeriod(_emplId))));
            qbdsRPayTblJournal.addRange(fieldNum(RPayTblJournal, PayTblType)).value(queryValue(RPayTblType::EveryDay));

            qbdsRPayTblDayHourTrans = qbdsRPayTblTrans.addDataSource(tableNum(RPayTblDayHourTrans));
            qbdsRPayTblDayHourTrans.orderMode(OrderMode::GroupBy);
            qbdsRPayTblDayHourTrans.fetchMode(QueryFetchMode::One2One);
            qbdsRPayTblDayHourTrans.addLink(fieldNum(RPayTblTrans, RecId), fieldNum(RPayTblDayHourTrans, TblTransRecId));
            qbdsRPayTblDayHourTrans.addSortField(fieldNum(RPayTblDayHourTrans, PayTblTimeCode));

            for (j = 1; j <= 31; j++)
            {
                qbdsRPayTblDayHourTrans.addSelectionField(
                    fieldName2id(tableNum(RPayTblDayHourTrans), #DayHourTransFieldPrefix + int2str(j)), SelectionField::Sum);
            }

            qbdsRPayTimeGroupMember = qbdsRPayTblDayHourTrans.addDataSource(tableNum(RPayTimeGroupMember));
            qbdsRPayTimeGroupMember.addLink(
                fieldNum(RPayTblDayHourTrans, PayTblTimeCode),
                fieldNum(RPayTimeGroupMember, PayCalendarTimeCode));

            qbdsRPayTimeGroupMember.addRange(fieldNum(RPayTimeGroupMember, TimeGroup)).value(queryValue(_nonAppearanceTimeGroupCode));

            return new QueryRun(query);
        }

        curDate     = _startDate;
        workPeriods = RPayHistory::getOrganizationByDateInterval(_emplId, _startDate, _endDate);

        for (i = 1; i <= conLen(workPeriods) ; i++)
        {
            workPeriod = conPeek(workPeriods,i);
            startDate  = conPeek(workPeriod,2);
            endDate    = conPeek(workPeriod,3);
            for (curDate = startDate; curDate <= endDate; curDate++)
            {
                if (excludeDay(curDate))
                {
                    if (!isDocumentDayChecked(curDate))
                    {
                        nonAppearanceDayByDocument++;
                    }
                    calendarDay.insert(curDate, UnknownNoYes::Yes);
                }
                else
                {
                    calendarDay.insert(curDate, UnknownNoYes::Unknown);
                }
            }
        }

        while select TableId from payTblTrans
            where payTblTrans.EmplId     == _emplId
               && payTblTrans.SourceDate >= _startDate
               && payTblTrans.SourceDate <= endmth(_endDate)
        join TblDate from payTblJournal
            where payTblTrans.PayTblNum    == payTblJournal.TblNum
               && payTblJournal.TblDate    <= endmth(RPayParameters::payPeriod(_emplId))
               && payTblJournal.PayTblType == RPayTblType::Itog
        {
            while select payTimeGroupMember
                where payTimeGroupMember.TimeGroup == _nonAppearanceTimeGroupCode
            notexists join payTblSpecTimeTable
                where payTblSpecTimeTable.RpayCalendarTimeCode == payTimeGroupMember.PayCalendarTimeCode
            {
                startItogDate = max(_startDate, dateStartMth(payTblJournal.TblDate));
                endItogDate   = min(_endDate  , endmth(payTblJournal.TblDate));
                timeTrans = RPayCalendarTimeTrans::findByTimeCode(payTblTrans.RecId, payTimeGroupMember.PayCalendarTimeCode);
                nonAppearanceDay += round(timeTrans.Day * (endItogDate - startItogDate + 1)/dayOfMth(endmth(payTblJournal.TblDate)), 1) ;
            }
        }

        callContext = new RPayRateCallContext();
        callContext.parmRateDate(_startDate);
        callContext.parmEmployeeId(_emplId);
        convertingFactor = RPayRateTable::find(RPayCalendarTable::find(RHRMEmplTable::find(_emplId).PayCalendarId).ConvertingFactor).getValue(callContext);

        if (convertingFactor)
        {
            nonAppearanceDay = any2int(roundUp(nonAppearanceDay * convertingFactor, 1));
        }

        if (_nonAppearanceTimeGroupCode)
        {
            queryRun = getTblQueryRun();
            while (queryRun.next())
            {
                payTblTrans = queryRun.get(tableNum(RPayTblTrans));
                payTblDayHourTrans = queryRun.get(tableNum(RPayTblDayHourTrans));

                for (curDate = dateStartMth(payTblTrans.SourceDate); curDate <= endmth(payTblTrans.SourceDate); curDate++ )
                {
                    fieldId = fieldName2id(tableNum(RPayTblDayHourTrans), #DayHourTransFieldPrefix + int2str(dayOfMth(curDate)));

                    if (payTblDayHourTrans.(fieldId)  != 0 &&
                        calendarDay.exists(curDate) &&
                        calendarDay.lookup(curDate) == UnknownNoYes::Unknown)
                    {
                        calendarDay.insert(curDate, UnknownNoYes::No);
                        nonAppearanceDay ++;
                    }
                }
            }
        }

        return nonAppearanceDay + nonAppearanceDayByDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performAverageEarnTypeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs average earned type lookup based on average earned method type.
    /// </summary>
    /// <param name="_formControl">
    /// The form control to perform lookup on.
    /// </param>
    /// <param name="_earnCodeType">
    /// The average earned method type
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public void performAverageEarnTypeLookup(FormControl _formControl, RPayAverageEarnCodeType _earnCodeType)
    {
        SysTableLookup          tableLookup;
        Query                   query;
        QueryBuildDataSource    qbds;

        query = new Query();
        qbds  = query.addDataSource(tableNum(RPayAverageEarnTable));

        findOrCreateRange_W(qbds, fieldNum(RPayAverageEarnTable, RpayAverageEarnCodeType), queryValue(_earnCodeType));

        tableLookup = SysTableLookup::newParameters(tableNum(RPayAverageEarnTable), _formControl);
        tableLookup.parmQuery(query);

        tableLookup.addLookupfield(fieldNum(RPayAverageEarnTable, rPayAverageEarnCode));
        tableLookup.addLookupfield(fieldNum(RPayAverageEarnTable, AverageEarnName));

        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>