<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkLineCycleCountForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkLineCycleCountForm</c> class contains the business logic of the <c>WhsWorkLineCycleCount</c> form.
/// </summary>
public class WhsWorkLineCycleCountForm
{
    private WHSCycleCountAdjustmentTypeCode whsCycleCountAdjustmentTypeCode;
    private WHSUserId                       genericWorkUserId;
    private RecId                           workCreatedBy;

    private WHSInstrumentationLogger        logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        this.whsCycleCountAdjustmentTypeCode    = WHSParameters::find().CycleCountAdjustmentTypeCode;
        this.workCreatedBy                      = HcmWorker::findByPerson(DirPersonUser::find(curUserId()).PersonParty).RecId;
        this.genericWorkUserId                  = WHSParameters::find().GenericWorkUserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditCycleCountWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Enables editing the selected line in the grid if the related record has not already been reviewed
    /// </summary>
    /// <param name = "_workLineCycleCountDataSource">
    ///     Data source that will be enabled for editing
    /// </param>
    /// <param name = "_workLineCycleCount">
    ///     Cycle count work line record
    /// </param>
    public void setAllowEditCycleCountWorkLine(FormDataSource _workLineCycleCountDataSource, WHSWorkLineCycleCount _workLineCycleCount)
    {
        _workLineCycleCountDataSource.allowEdit(_workLineCycleCount.AcceptReject == WHSAcceptReject::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCountingReasonCodeMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the counting reason code to mandatory.
    /// </summary>
    /// <param name = "_countingReasonCodeControl">
    ///     Counting reason code control.
    /// </param>
    /// <param name = "_workLineCycleCount">
    ///     Cycle count work line record
    /// </param>
    public void setCountingReasonCodeMandatory(FormStringControl _countingReasonCodeControl, WHSWorkLineCycleCount _workLineCycleCount)
    {
        InventCountingReasonCodePolicySearchParameters parameters     = InventCountingReasonCodePolicySearchParameters::newfromItemInventDim(InventTable::find(_workLineCycleCount.ItemId), InventDim::find(_workLineCycleCount.InventDimId));
        InventCountingReasonCodePolicy inventCountingReasonCodePolicy = InventCountingReasonCodePolicySearch::defaultSearch(parameters);

        _countingReasonCodeControl.mandatory(inventCountingReasonCodePolicy.InventCountingReasonCodeType == InventCountingReasonCodeType::Mandatory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonAccept_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Confirms the pending review work line cycle count change for the selected rows.
    /// </summary>
    /// <param name = "_whsWorkLineCycleCountDS">
    ///     Data source with the selected item counts to confirm.
    /// </param>
    /// <param name = "_whsWorkLineCycleCount">
    ///     Parameter not used. It remains in the method for backward compatibility.
    /// </param>
    [SysObsolete('Please use the WhsWorkLineCycleCountForm.buttonAcceptClicked method instead.', false, 31\03\2018)]
    public void buttonAccept_clicked(FormDataSource _whsWorkLineCycleCountDS, WHSWorkLineCycleCount _whsWorkLineCycleCount)
    {
        this.buttonAcceptClicked(_whsWorkLineCycleCountDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonAcceptClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Confirms the pending review work line cycle count change for the selected rows.
    /// </summary>
    /// <param name = "_workLineCycleCountDataSource">
    ///     Data source with the selected item counts to confirm.
    /// </param>
    public void buttonAcceptClicked(FormDataSource _workLineCycleCountDataSource)
    {
        
        using (var activityContext = this.instrumentationLogger().workLineCycleCount().acceptAllSelectedLines())
        {
            WhsWorkExecute workExecute = WhsWorkExecute::construct();
            for (WHSWorkLineCycleCount currentLine = _workLineCycleCountDataSource.getFirst(true) ? _workLineCycleCountDataSource.getFirst(true) : _workLineCycleCountDataSource.cursor();
            currentLine;
            currentLine = _workLineCycleCountDataSource.getNext())
            {
                using (var activityContextInner = this.instrumentationLogger().workLineCycleCount().acceptSingleLine())
                {
                    WHSWorkId workId;
                    ttsbegin;
                    // Only adjust inventory if the count is unexpected
                    if (currentLine.QtyCounted != currentLine.QtyExpected)
                    {
                        WHSInventAdjustmentCreateParameters params = this.buildInventAdjustmentCreateParamerters(currentLine);
                        WHSInventAdjustmentCreate createAdj = WHSInventAdjustmentCreate::newFromParams(params);
                        createAdj.run();

                        workId = createAdj.createdWorkId();

                        if (params.LicensePlateId)
                        {
                            // Break the parent/child relationship if necessary.
                            WHSLicensePlate::removeLPFromParentLPIfNecessary(params.LicensePlateId, params.WmsLocationId, params.InventLocationId);
                        }
                    }

                    this.updateWorkLineAndWorkHeaderStatusForCycleCount(workExecute, currentLine, WHSAcceptReject::Accept, workId);
                    ttscommit;
                }
            }
        }

        _workLineCycleCountDataSource.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventAdjustmentCreateParamerters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the inventory adjustment parameters based on the current line being reviewed.
    /// </summary>
    /// <param name = "_currentLine">
    ///     Current line being reviewed.
    /// </param>
    protected WHSInventAdjustmentCreateParameters buildInventAdjustmentCreateParamerters(WHSWorkLineCycleCount _currentLine)
    {
        WHSWorkLine workLine    = WHSWorkLine::find(_currentLine.WorkId, _currentLine.LineNum);
        WHSUserId   userId      = workLine.UserId ? workLine.UserId : this.genericWorkUserId;

        if (!userId)
        {
            throw error("@WAX2758");
        }

        WHSWorkTable    workTable   = WHSWorkTable::find(_currentLine.WorkId);
        InventDim       inventDim   = InventDim::find(_currentLine.InventDimId);

        WHSInventAdjustmentCreateParameters params = WHSInventAdjustmentCreateParameters::construct();
       
		params.WorkUserId				                    = userId;
        params.ItemId					                    = _currentLine.ItemId;
        params.InventDim				                    = inventDim;
        params.AdjustmentQty			                    = _currentLine.QtyCounted - _currentLine.QtyExpected;
        params.AdjustmentUnit			                    = WHSCatchWeightHelper::inventHandlingUnitId(_currentLine.ItemId);
        params.WmsLocationId			                    = workLine.wmsLocationId;
        params.InventLocationId			                    = workTable.InventLocationId;
        params.AdjustmentTypeCode		                    = this.whsCycleCountAdjustmentTypeCode;
        params.LicensePlateId			                    = inventDim.LicensePlateId;
        params.WorkTransType			                    = WHSWorkTransType::CycleCountAccepted;
        params.WorkType					                    = WHSWorkType::Count;
        params.WorkCreatedBy			                    = this.workCreatedBy;
        params.InventCountingReasonCode                     = _currentLine.CountingReasonCode;
        params.SkipLocationLicensePlatePositionSequencing   = true;
        if (PdsGlobal::pdsIsCWItem(_currentLine.ItemId))
        {
            params.AdjustmentCatchWeight = _currentLine.CapturedWeight - _currentLine.ExpectedWeight;
        }
        
        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonRejectClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Rejects the pending review work line cycle count change for the selected rows.
    /// </summary>
    /// <param name = "_workLineCycleCountDataSource">
    ///     Data source with the selected item counts to reject.
    /// </param>
    public void buttonRejectClicked(FormDataSource _workLineCycleCountDataSource)
    {
                
        using (var activityContext = this.instrumentationLogger().workLineCycleCount().rejectAllSelectedLines())
        {
            WhsWorkExecute workExecute = WhsWorkExecute::construct();
            for (WHSWorkLineCycleCount currentLine = _workLineCycleCountDataSource.getFirst(true) ? _workLineCycleCountDataSource.getFirst(true) : _workLineCycleCountDataSource.cursor();
            currentLine;
            currentLine = _workLineCycleCountDataSource.getNext())
            {
                using (var activityContextInner = this.instrumentationLogger().workLineCycleCount().rejectSingleLine())
                {
                    this.updateWorkLineAndWorkHeaderStatusForCycleCount(workExecute, currentLine, WHSAcceptReject::Reject);
                }
            }
        }

        _workLineCycleCountDataSource.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkLineCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>WHSWorkLineCycleCount</c> record to accept or reject the work line cycle count.
    /// </summary>
    /// <param name = "_whsWorkLineCycleCount">
    ///     The <c>WHSWorkLineCycleCount</c> record which to reject.
    /// </param>
    /// <param name = "_acceptReject">
    ///     The <c>WHSAcceptReject</c> enum value to either accept or reject a cycle count work line.
    /// </param>
    /// <param name = "_workId">
    ///     The <c>WHSWorkId</c> to identify the work line cycle count.
    /// </param>
    public void updateWorkLineCycleCount(
        WHSWorkLineCycleCount   _whsWorkLineCycleCount,
        WHSAcceptReject         _acceptReject,
        WHSWorkId               _workId                 = '')
    {
        WHSWorkLineCycleCount whsWorkLineCycleCount = _whsWorkLineCycleCount;

        whsWorkLineCycleCount.AcceptReject          = _acceptReject;
        whsWorkLineCycleCount.CycleCountReconcile   = NoYes::Yes;
        whsWorkLineCycleCount.AdjustmentWorkId      = _workId;
        whsWorkLineCycleCount.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkLineAndWorkHeaderStatusForCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>WHSWorkLineCycleCount</c> record and work header status to accept or reject the work line cycle count.
    /// </summary>
    /// <param name = "_workExecute">Instance of <c>WhsWorkExecute</c>.</param>
    /// <param name = "_whsWorkLineCycleCount">The <c>WHSWorkLineCycleCount</c> record which to reject.</param>
    /// <param name = "_acceptReject">The <c>WHSAcceptReject</c> enum value to either accept or reject a cycle count work line.</param>
    /// <param name = "_workId">The <c>WHSWorkId</c> to identify the work line cycle count.</param>
    private void updateWorkLineAndWorkHeaderStatusForCycleCount(WhsWorkExecute _workExecute, WHSWorkLineCycleCount _whsWorkLineCycleCount, WHSAcceptReject _acceptReject, WHSWorkId _workId = '')
    {
        ttsbegin;
        this.updateWorkLineCycleCount(_whsWorkLineCycleCount, _acceptReject, _workId);
        _workExecute.updateWorkStatusCycleCount(_whsWorkLineCycleCount.WorkId);
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>