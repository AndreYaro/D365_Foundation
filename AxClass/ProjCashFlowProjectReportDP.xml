<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCashFlowProjectReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjCashFlowProjectReportDP</c> class is the report data provider class for the associated
/// reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjCashFlowProject)),
    SRSReportParameterAttribute(classStr(ProjCashFlowProjectReportContract))
]
public class ProjCashFlowProjectReportDP extends SRSReportDataProviderBase
{
    TmpProjCashFlowReport           report;
    str                             projName;
    str                             projId;
    AmountMST                       inflowAmount;
    AmountMST                       outflowAmount;
    AmountMST                       netflowAmount;
    ProjCashFlow                    tmpProjCashFlow;
    ProjActualBudget                actualBudgetDeviationSum;
    ProjListStateProjType           stateProjType;
    ProjShowAmount                  showAmount;
    boolean                         skipBlankId;
    boolean                         skipZero;
    QueryRun                        queryRun;
    Level                           projLevel;
    ProjCashFlowTmp                 projCashFlowTmp;
    str                             type,title,caption;
    Query                           qr;
    boolean                         ret;
    ProjCashFlowReportsCalcEngine   reportCalc;
    ProjTable                       projTableLocal;
    container                       oCon, conList;
    Map                             projMap;
    MapEnumerator                   projMapEnum;
    real                            inAmt, outAmt, netAmt;
    str                             sName;
    ProjFundingSource               projFundingSource;
    int                             amountDecimals;
    #ProjReports
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getIdAndName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID and name of the specified record.
    /// </summary>
    /// <param name="_projTable">
    ///  The record of which to retrieve the ID and name.
    /// </param>
    /// <returns>
    ///  A container that contains the ID and name of the specified record.
    /// </returns>
    private container getIdAndName(ProjTable _projTable)
    {
        str     name;
        str     id;
        ProjFundingSourceRefId recId;

        switch (stateProjType)
        {
            case ProjListStateProjType::Project:
                id          = _projTable.ProjId;
                name        = ProjTable::findLike(_projTable.ProjId).Name;
                tmpProjCashFlow.parmProjId(id);
                break;
            case ProjListStateProjType::Customer:
                id          = _projTable.CustAccount;
                name        = CustTable::find(_projTable.CustAccount).name();
                tmpProjCashFlow.parmCustAccount(id);
                break;
            case ProjListStateProjType::ProjGroup:
                id          = _projTable.ProjGroupId;
                name        = ProjGroup::find(_projTable.ProjGroupId).Name;
                tmpProjCashFlow.parmProjGroupId(id);
                break;
            case ProjListStateProjType::WIPProject:
                id          = _projTable.wipProject;
                name        = ProjWIPTable::find(_projTable.wipProject).Description;
                tmpProjCashFlow.parmProjWIPId(id);
                break;
            case ProjListStateProjType::InvoiceProject:
                id          = _projTable.ProjInvoiceProjId;
                name        = ProjInvoiceTable::find(_projTable.ProjInvoiceProjId).Description;
                tmpProjCashFlow.parmProjInvoiceProjId(id);
                break;
            case ProjListStateProjType::Responsible:
                id          = HcmWorker::find(_projTable.WorkerResponsible).PersonnelNumber;
                name        = DirPartyTable::findRec(HcmWorker::find(_projTable.WorkerResponsible).Person).Name;
                break;
            case ProjListStateProjType::ResponsibleFinancial:
                id          = HcmWorker::find(_projTable.WorkerResponsibleFinancial).PersonnelNumber;
                name        = DirPartyTable::findRec(HcmWorker::find(_projTable.WorkerResponsibleFinancial).Person).Name;
                break;
            case ProjListStateProjType::ResponsibleSales:
                id          = HcmWorker::find(_projTable.WorkerResponsibleSales).PersonnelNumber;
                name        = DirPartyTable::findRec(HcmWorker::find(_projTable.WorkerResponsibleSales).Person).Name;
                break;
            case ProjListStateProjType::Type:
                id          = enum2str(_projTable.Type);
                name        = enum2str(_projTable.Type);
                break;
            case ProjListStateProjType::Sorting1:
                id          = _projTable.SortingId[1];
                name        = ProjSorting::find(_projTable.SortingId[1] ,0).Description;
                tmpProjCashFlow.parmSort1(id);
                break;
            case ProjListStateProjType::Sorting2:
                id          = _projTable.SortingId[2];
                name        = ProjSorting::find(_projTable.SortingId[2], 1).Description;
                tmpProjCashFlow.parmSort2(id);
                break;
            case ProjListStateProjType::Sorting3:
                id          = _projTable.SortingId[3];
                name        = ProjSorting::find(_projTable.SortingId[3], 2).Description;
                tmpProjCashFlow.parmSort3(id);
                break;
            case ProjListStateProjType::Asset:
                id          = _projTable.AssetId;
                name        = AssetTable::find(id).Name;
                break;
            case ProjListStateProjType::FundingSource:
                recId = ProjTable::find(_projTable.ProjId).defaultFundingSource();
                projFundingSource = projFundingSource::find(recId);

                id          = projFundingSource.FundingSourceId;
                name        = projFundingSource.name();
                break;
        }
        return [id,name];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCashFlowTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project cash flow of the temporary table.
    /// </summary>
    /// <returns>
    /// The project cash flow of the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('ProjCashFlowTmp')
    ]
    public ProjCashFlowTmp getProjCashFlowTmp()
    {
        select projCashFlowTmp;
        return projCashFlowTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjCashFlowTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the project cash flow of the temporary table.
    /// </summary>
    public void insertProjCashFlowTmp()
    {
        projCashFlowTmp.Id                  = projId;
        projCashFlowTmp.Name                = projName;
        projCashFlowTmp.InflowAmount        = inflowAmount;
        projCashFlowTmp.OutflowAmount       = outflowAmount;
        projCashFlowTmp.NetflowAmount       = netflowAmount;
        projCashFlowTmp.Title               = title;
        projCashFlowTmp.Caption             = caption;
        projCashFlowTmp.DecimalAmount       = amountDecimals;
        projCashFlowTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        str showId, name;
        boolean isBlankId;

        projMap = new Map(Types::String, Types::Container);

        // Set the projCashFlow object
        tmpProjCashFlow = new ProjCashFlow();
        tmpProjCashFlow = this.setVariableValues(tmpProjCashFlow);

        // Create the new object
        reportCalc = new ProjCashFlowReportsCalcEngine(tmpProjCashFlow,ProjCashFlowReportType::Project,projLevel);

        title = reportCalc.formatPeriodLabel();
        caption = reportCalc.formatSelection();

        queryRun = new SysQueryRun(this.parmQuery());
        this.setQueryRanges(tmpProjCashFlow);           // Filter on project types
        this.setSortFieldProject();

        // Iterate through the records
        while (queryRun.next())
        {
            projTableLocal   = queryRun.get(tableNum(ProjTable));

            oCon = this.getIdAndName(projTableLocal);
            showId = conPeek(oCon, 1);
            name = conPeek(oCon, 2);

            tmpProjCashFlow.parmProjId(projTableLocal.ProjId);
            reportCalc.setClientSettings();

            if (stateProjType == ProjListStateProjType::Project)
            {
                showId = this.setId(projTableLocal, stateProjType, projLevel);
                // Set the variables
                if (projLevel == 0)
                {
                    name = '';
                }

                isBlankId = (projTableLocal.ProjId == '');
            }
            else
            {
                isBlankId = (showId == '');
            }
            // Choose the kind of report and populate the temporary table
            switch (actualBudgetDeviationSum)
            {
                case ProjActualBudget::Actual:
                    report = reportCalc.getFinalResultActual();
                    break;
                case ProjActualBudget::Budget:
                    report = reportCalc.getFinalResultBudget();
                    break;
                case ProjActualBudget::Deviation:
                    report = reportCalc.getFinalResultDeviation();
                    break;
                case ProjActualBudget::Sum_:
                    report = reportCalc.getFinalResultSum();
                    break;
            }

            if (!skipBlankId || !isBlankId)
            {
                // Get the records from the report as per the projids chosen by the query
                select report where report.Id == projTableLocal.ProjId;

                if (report)
                {
                    if (!skipZero || (report.AmountInflow != 0 || report.AmountOutflow != 0))
                    {
                        if (projMap.exists(showId))
                        {
                            conList     = projMap.lookup(showId);
                            sName       = conPeek(conList,1);
                            inAmt       = conPeek(conList,2) + report.AmountInflow;
                            outAmt      = conPeek(conList,3) + report.AmountOutflow;
                            netAmt      = conPeek(conList,4) + report.AmountNet;
                            conList     = [sName, inAmt, outAmt, netAmt];

                            projMap.insert(showId,conList);
                        }
                        else
                        {
                            conList = [name, report.AmountInflow, report.AmountOutflow, report.AmountNet];
                            projMap.insert(showId,conList);
                        }
                    }
                }
                else
                {
                    if (!skipZero)
                    {
                        if (!projMap.exists(showId))
                        {
                            conList = [name, 0.00, 0.00, 0.00];
                            projMap.insert(showId,conList);
                        }
                    }
                }
            }
        }
        amountDecimals = reportCalc.getAmountDecimals(showAmount);
        projMapEnum =  projMap.getEnumerator();
        while (projMapEnum.moveNext())
        {
            showId = projMapEnum.currentKey();
            conList = projMapEnum.currentValue();

            projId          = showId;
            inflowAmount    = reportCalc.showAmountReport(conPeek(conList, 2),showAmount);
            outflowAmount   = reportCalc.showAmountReport(conPeek(conList, 3),showAmount);
            netflowAmount   = reportCalc.showAmountReport(conPeek(conList, 4),showAmount);
            projName        = conPeek(conList, 1);
            this.insertProjCashFlowTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ID of the project.
    /// </summary>
    /// <param name="_projTable">
    /// The project table of which to set the ID.
    /// </param>
    /// <param name="_stateProjType">
    /// The project type.
    /// </param>
    /// <param name="_level">
    /// The level.
    /// </param>
    /// <returns>
    /// The project ID.
    /// </returns>
    /// <remarks>
    /// This method is used to set the ID of the project, depending on the level selection by the user.This
    /// is an existing method in the <c>ProjHelp</c> class and has been used in this class.
    /// </remarks>
    public ProjId setId(ProjTable               _projTable,
                        ProjListStateProjType   _stateProjType,
                        Level                   _level)
    {
        ProjTable   tmpProjTable = _projTable;
        ProjId      tmpProjId;
        NoYes       thisLevel;

        if (_stateProjType == ProjListStateProjType::Project)
        {
            if (_level)
            {
                thisLevel = (_level == tmpProjTable.level()) ? NoYes::Yes : NoYes::No;

                tmpProjId = '';

                if (thisLevel && tmpProjTable.childExist())
                {
                    tmpProjId      = tmpProjTable.ProjId + '*';
                }
                else
                {
                    if (!thisLevel && (_level != 0))
                    {
                        while (tmpProjTable.level() > _level)
                        {
                            tmpProjTable   = ProjTable::find(tmpProjTable.ParentId);
                            tmpProjId      = tmpProjTable.ProjId + '*';
                        }
                    }
                }

                    if (!tmpProjId)
                    {
                        tmpProjId = tmpProjTable.ProjId;
                    }
                }
                else
                {
                    tmpProjId = '*';
                }
        }
        else
        {
            tmpProjId   = tmpProjTable.ProjId;
        }

        return tmpProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the project based on the project types entered by the user.
    /// </summary>
    /// <param name="_projCashFlow">
    /// An instance of the <c>ProjCashFlow</c> class which holds the user input.
    /// </param>
    private void setQueryRanges(ProjCashFlow _projCashFlow)
    {
        QueryBuildDataSource qbdsProjTable = queryrun.query().dataSourceTable(tablenum(ProjTable));
        qbdsProjTable.clearRange(fieldNum(ProjTable, Type));

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsPSAContractLineItems = queryrun.query().dataSourceTable(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.enabled(true);
            PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                _projCashFlow.parmTimeMaterialBillingMethod(),
                _projCashFlow.parmFixedPriceBillingMethod());
            PSAContractLineItemRangesHelper::addTransactionTypeRangesToDS(
                qbdsPSAContractLineItems,
                _projCashFlow.parmHour(),
                _projCashFlow.parmExpenses(),
                _projCashFlow.parmFee(),
                _projCashFlow.parmItem(),
                false);
        }
        else
        {
            if (_projCashFlow.parmFixedPrice())
            {
                qbdsProjTable.addRange(fieldnum(ProjTable,Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (_projCashFlow.parmTimeMaterial())
            {
                qbdsProjTable.addRange(fieldnum(ProjTable,Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (_projCashFlow.parmInternalCost())
            {
                qbdsProjTable.addRange(fieldnum(ProjTable,Type)).value(queryValue(ProjType::Internal));
                qbdsProjTable.addRange(fieldnum(ProjTable,Type)).value(queryValue(ProjType::Cost));
            }

            if (_projCashFlow.parmInvestment())
            {
                qbdsProjTable.addRange(fieldnum(ProjTable,Type)).value(queryValue(ProjType::Investment));
            }

            if (_projCashFlow.parmTimeProject())
            {
                qbdsProjTable.addRange(fieldnum(ProjTable,Type)).value(queryValue(ProjType::Time));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortFieldProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sort field of the query for the chosen project criteria adapted from the methods in the
    /// <c>ProjHelp</c> class.
    /// </summary>
    private void setSortFieldProject()
    {
        queryRun.query().dataSourceNo(1).sortClear();

        switch (stateProjType)
        {
            case ProjListStateProjType::Project:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable,ProjId));
                break;
            case ProjListStateProjType::Customer:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable,CustAccount));
                break;
            case ProjListStateProjType::ProjGroup:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable,ProjGroupId));
                break;
            case ProjListStateProjType::WIPProject:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable,wipProject));
                break;
            case ProjListStateProjType::InvoiceProject:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable,ProjInvoiceProjId));
                break;
            case ProjListStateProjType::ResponsibleSales:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable, WorkerResponsibleSales));
                break;
            case ProjListStateProjType::Responsible:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable, WorkerResponsible));
                break;
            case ProjListStateProjType::ResponsibleFinancial:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable, WorkerResponsibleFinancial));
                break;
            case ProjListStateProjType::Type:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable,Type));
                break;
            case ProjListStateProjType::Sorting1:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable, SortingId), SortOrder::Ascending, 1);
                break;
            case ProjListStateProjType::Sorting2:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable, SortingId), SortOrder::Ascending, 2);
                break;
            case ProjListStateProjType::Sorting3:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable, SortingId), SortOrder::Ascending, 3);
                break;
            case ProjListStateProjType::Asset:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable,AssetId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVariableValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values of the instance variables in a project cash flow.
    /// </summary>
    /// <param name="_projCashFlow">
    /// An instance of the <c>ProjCashFlow</c> class of which to set the instance variables.
    /// </param>
    /// <returns>
    /// The instance of the <c>ProjCashFlow</c> class with the set instance variables.
    /// </returns>
    public ProjCashFlow setVariableValues(ProjCashFlow _projCashFlow)
    {
        ProjCashFlowProjectReportContract contract = this.parmDataContract() as ProjCashFlowProjectReportContract;

        actualBudgetDeviationSum    =   contract.parmActualBudgetDeviationSum();
        projLevel                   =   contract.parmLevel();

        skipBlankId                 =   contract.parmSkipBlankId();
        skipZero                    =   contract.parmSkipZero();
        showAmount                  =   contract.parmShowAmount();
        stateProjType               =   contract.parmProjView();

        _projCashFlow.parmFixedPrice(contract.parmFixedPrice());
        _projCashFlow.parmTimeMaterial(contract.parmTimeMaterial());
        _projCashFlow.parmInternalCost(contract.parmInternalCost());
        _projCashFlow.parmInvestment(contract.parmInvestment());
        _projCashFlow.parmTimeProject(contract.parmTime());
        _projCashFlow.parmFixedPriceBillingMethod(contract.parmFixedPriceBillingMethod());
        _projCashFlow.parmTimeMaterialBillingMethod(contract.parmTimeMaterialBillingMethod());

        _projCashFlow.parmHour(contract.parmHour());
        _projCashFlow.parmExpenses(contract.parmExpenses());
        _projCashFlow.parmFee(contract.parmRevenue());
        _projCashFlow.parmOnAcc(contract.parmOnAcc());
        _projCashFlow.parmItem(contract.parmItem());

        _projCashFlow.parmProjectFromDate(contract.parmProjFromDate());
        _projCashFlow.parmProjectToDate(contract.parmProjToDate());
        _projCashFlow.parmPaymentFromDate(contract.parmPaymentFromDate());
        _projCashFlow.parmPaymentToDate(contract.parmPaymentToDate());
        _projCashFlow.parmProjectBreakDate(contract.parmProjBreakDate());
        _projCashFlow.parmPaymentBreakDate(contract.parmPaymentBreakDate());

        _projCashFlow.parmForecastModelId(contract.parmForecastModelId());
        _projCashFlow.parmActualBudget(actualBudgetDeviationSum);
        _projCashFlow.parmIncludedExpectedPayment(contract.parmInclExpectedPayment());
        _projCashFlow.parmIncludedPaidPayment(contract.parmInclPaidPayment());

        _projCashFlow.parmDaysAddedToSalesPayment(contract.parmAddDaysToSales());
        _projCashFlow.parmDaysAddedToCostPayment(contract.parmAddDaysToCost());

        _projCashFlow.parmMinimumCostPaymentDate(contract.parmExpectedCostPayDate());
        _projCashFlow.parmMinimumSalesPaymentDate(contract.parmMinimumSalesPayDate());

        _projCashFlow.parmShowAmount(showAmount);
        _projCashFlow.parmActualBudget(actualBudgetDeviationSum);

        _projCashFlow.parmStateProjType(stateProjType);
        _projCashFlow.parmProjLevel(contract.parmLevel());

        return _projCashFlow;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>