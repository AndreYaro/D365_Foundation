<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RtslDimensionConvert</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RtslDimensionConvert extends RTSLLedgerConvert
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addContragent</Name>
				<Source><![CDATA[
    private void addContragent(LedgerJournalACType _type, CustVendAC _val,Set _customerSet,Set _vendorSet)
    {
        switch (_type)
        {
            case LedgerJournalACType::Cust :
                _customerSet.add(_val);
                break;
            case LedgerJournalACType::Vend :
                _vendorSet.add(_val);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addContragentTrans</Name>
				<Source><![CDATA[
    private void addContragentTrans(CustVendTrans _custVendTrans, Set _set, GeneralJournalAccountEntry _accountEntry)
    {
        SubledgerVoucherGeneralJournalEntry voucherLink;
        Set                                 local = new Set(Types::String);
        SetIterator                         it;
        boolean                             simple = _set.empty();

        while select _custVendTrans
            where _custVendTrans.CurrencyCode == _accountEntry.TransactionCurrencyCode &&
                  (simple || _custVendTrans.AmountCur == _accountEntry.TransactionCurrencyAmount)
            exists join voucherLink
                where voucherLink.Voucher == _custVendTrans.Voucher              &&
                      voucherLink.AccountingDate == _custVendTrans.TransDate     &&
                      voucherLink.VoucherDataAreaId == _custVendTrans.DataAreaId &&
                      voucherLink.GeneralJournalEntry == _accountEntry.GeneralJournalEntry
        {
            if (_custVendTrans.summaryLedgerDimension() == LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountId(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_accountEntry.LedgerDimension)) &&
                DimensionDefaultFacade::areEqual(_custVendTrans.DefaultDimension, LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_accountEntry.LedgerDimension)))
            {
                local.add(_custVendTrans.AccountNum);
            }
        }

        if (simple)
        {
            it = new SetIterator(local);
            while (it.more())
            {
                _set.add(it.value());
                it.next();
            }
        }
        else
        {
            it = new SetIterator(_set);
            while (it.more())
            {
                if (! local.in(it.value()))
                {
                    it.delete();
                }
                else
                {
                    it.next();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompanySetup</Name>
				<Source><![CDATA[
    public boolean checkCompanySetup(boolean _ok,
                                     RTSLConsistencyCheck _consistencyCheck)
    {
        boolean                 ok = _ok;
        RTSLRuleGroupId         ruleGroupId = translation.parmRuleGroup().RuleGroupId;
        RTSLDimensionRule       checkRule, dimensionRule;

        CustTable               custTable;
        VendTable               vendTable;
        DimensionAttributeValue attributeValue;
        void checkValueExists(str _value)
        {
            DimensionAttribute attr = DimensionAttribute::find(checkRule.ToDimensionAttribute);
            if (! DimensionAttributeValue::findByDimensionAttributeAndValueNoError(attr, _value))
            {
                    ok = checkFailed(strFmt("@SYS24602", attr.caption(), _value));
            }
        }

        setPrefix("@GLS103433");

        while select  attributeValue
                   outer join DimensionRuleGroupId from dimensionRule
                       where attributeValue.DimensionAttribute  == dimensionRule.DimensionAttribute &&
                             dimensionRule.RuleGroupId     == ruleGroupId &&
                             dimensionRule.DimensionAction == RTSLDimensionAction::NoChange
        {
            checkRule = RTSLDimensionRule::find(ruleGroupId,
                                                dimensionRule.DimensionRuleGroupId,
                                                attributeValue.DimensionAttribute,
                                                attributeValue.CachedDisplayValue);
            if (checkRule)
            {
                checkValueExists(attributeValue.CachedDisplayValue);
            }
            _consistencyCheck.postTest(checkRule,
                                       fieldNum(RTSLDimensionRule, ToDimensionCode));
        }

        // Check if current company code exists among foreign dimensions
        while select checkRule
            group by ToDimensionAttribute
            where checkRule.RuleGroupId     == ruleGroupId &&
                  checkRule.DimensionAction == RTSLDimensionAction::CompanyId
        {
            checkValueExists(checkRule.DataAreaId);

            _consistencyCheck.postTest(checkRule,
                                       fieldNum(RTSLDimensionRule, ToDimensionCode));
        }

        // Check if all counteragent codes exist among foreign dimensions
        while select checkRule
            group by ToDimensionAttribute
            where checkRule.RuleGroupId     == ruleGroupId &&
                  checkRule.DimensionAction == RTSLDimensionAction::Counteragent
        {
            while select AccountNum
                from custTable
            {
                checkValueExists(custTable.AccountNum);
            }

            while select AccountNum from vendTable
            {
                checkValueExists(vendTable.AccountNum);
            }

            _consistencyCheck.postTest(checkRule,
                                       fieldNum(RTSLDimensionRule, ToDimensionCode));
        }

        return super(ok, _consistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRange</Name>
				<Source><![CDATA[
    public boolean checkRange(TmpRTSLTrans  _tmpTrans,
                              Common        _rule)
    {
        TmpRTSLLedgerTrans    tmpTrans = _tmpTrans;
        RTSLLedgerTransRule   rule     = _rule as RTSLLedgerTransRule;
        DimensionAttributeLevelValueView  attributeValue;
        RTSLDimensionRule   dimensionRule;

        while select dimensionRule group by DimensionAttribute
            where dimensionRule.RuleGroupId == rule.RuleGroupId &&
                  dimensionRule.DimensionRuleGroupId == rule.DimensionRuleGroupId
        {
            select DisplayValue from attributeValue
                where attributeValue.ValueCombinationRecId == tmpTrans.LedgerDimension &&
                      attributeValue.DimensionAttribute    == dimensionRule.DimensionAttribute;
            // If any rule for a dimension code found
            // check if the dimension is in a range
            if (! RTSLDimensionRule::exist(rule.RuleGroupId,
                                           rule.DimensionRuleGroupId,
                                           dimensionRule.DimensionAttribute,
                                           attributeValue.DisplayValue))
            {
                return false;
            }
        }

        return super(tmpTrans, rule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>childIds</Name>
				<Source><![CDATA[
    protected container childIds()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTrans</Name>
				<Source><![CDATA[
    public TmpRTSLTrans convertTrans(TmpRTSLTrans   _tmpTrans,
                                     Common         _rule)
    {
        RTSLDimensionRule                   dimensionRule;
        Set                                 processedDimSet = new Set(Types::Enum);
        RTSLLedgerTransRule                 rule = _rule as RTSLLedgerTransRule;
        DimensionAttributeLevelValueView    attributeValue;
        Map                                 dimensionSpecifiers = LedgerDimensionDefaultingEngine::createEmptyDimensionSpecifiers();
        List                                dimensionSources   = new List(Types::Class);

        void setAttributeValue(DimensionAttribute _attribute, str _value)
        {
            DimensionAttributeValue dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndValue(_attribute, _value, false, true);
            if (! dimAttrValue.IsDeleted)
            {
                LedgerDimensionDefaultingEngine::insertDimensionSpecifer(dimensionSpecifiers, _attribute.RecId, dimAttrValue.getValue(), dimAttrValue.RecId, dimAttrValue.HashKey);
            }
        }

        void processRule()
        {
            DimensionValue newValue;
            if (! processedDimSet.add(dimensionRule.ToDimensionAttribute))
            {
                warning(strFmt("@GLS103441", DimensionAttribute::find(dimensionRule.ToDimensionAttribute).Name));
            }

            switch (dimensionRule.DimensionAction)
            {
                case RTSLDimensionAction::NoChange:
                    newValue = attributeValue.DisplayValue;
                    break;

                case RTSLDimensionAction::CompanyId:
                    newValue = curext();
                    break;

                case RTSLDimensionAction::Value:
                    newValue = dimensionRule.ToDimensionCode;
                    break;

                case RTSLDimensionAction::Counteragent:
                    newValue = this.getContragentAccount(tmpLedgerTrans);
                    break;

                default :
                    throw error(strFmt("@SYS18917", dimensionRule.DimensionAction));
            }
            changecompany(rule.ToCompanyId)
            {
                setAttributeValue(DimensionAttribute::find(dimensionRule.ToDimensionAttribute), newValue);
            }
        }

        tmpLedgerTrans = _tmpTrans;
        dimensionSources.addEnd(dimensionSpecifiers);

        while select dimensionRule
                where dimensionRule.RuleGroupId == rule.RuleGroupId &&
                      dimensionRule.DimensionRuleGroupId == rule.DimensionRuleGroupId &&
                      ! dimensionRule.DimensionCriteriaFrom &&
                      ! dimensionRule.DimensionCriteriaTo
                notexists join attributeValue
                    where attributeValue.ValueCombinationRecId == tmpLedgerTrans.LedgerDimension &&
                          attributeValue.DimensionAttribute == dimensionRule.DimensionAttribute &&
                          attributeValue.DisplayValue
        {
            processRule();
        }
        while select dimensionRule
                where dimensionRule.RuleGroupId == rule.RuleGroupId &&
                      dimensionRule.DimensionRuleGroupId == rule.DimensionRuleGroupId &&
                      (dimensionRule.DimensionCriteriaFrom ||
                      dimensionRule.DimensionCriteriaTo)
                join attributeValue
                    where attributeValue.ValueCombinationRecId == tmpLedgerTrans.LedgerDimension &&
                          attributeValue.DimensionAttribute == dimensionRule.DimensionAttribute &&
                          attributeValue.DisplayValue  &&
                          (! dimensionRule.DimensionCriteriaFrom || dimensionRule.DimensionCriteriaFrom <= attributeValue.DisplayValue) &&
                          (! dimensionRule.DimensionCriteriaTo || dimensionRule.DimensionCriteriaTo >= attributeValue.DisplayValue)
        {
            processRule();
        }
        changecompany(rule.ToCompanyId)
        {
            tmpLedgerTrans.NewDefaultDimension = LedgerDimensionDefaultingEngine::getDefaultDimension(dimensionSources, false);
        }

        tmpLedgerTrans  = super(tmpLedgerTrans, rule);

        return tmpLedgerTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContragentAccount</Name>
				<Source><![CDATA[
    private CustVendAC getContragentAccount(TmpRTSLLedgerTrans _trans)
    {
        CustVendAC          ret ='';
        LedgerJournalTrans  tmpTrans;
        Set                 customerSet = new Set(Types::String),
                            vendorSet   = new Set(Types::String);
        int                 loopNo    = 1;
        container           result;
        CustTrans           custTrans;
        VendTrans           vendTrans;
        SubledgerVoucherGeneralJournalEntry voucher;
        GeneralJournalAccountEntry          accountEntry = _trans.accountEntryOrig();
        DimensionDefault    accountEntryDefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(accountEntry.LedgerDimension);

        while select tmpTrans exists join voucher
            where tmpTrans.Voucher              == voucher.Voucher          &&
                  tmpTrans.TransDate            == voucher.AccountingDate   &&
                  voucher.GeneralJournalEntry   == accountEntry.GeneralJournalEntry
        {
            if ((accountEntryDefaultDimension == tmpTrans.DefaultDimension          ||
                 accountEntryDefaultDimension == tmpTrans.OffsetDefaultDimension    ||
                 accountEntryDefaultDimension == LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(tmpTrans.LedgerDimension)         ||
                 accountEntryDefaultDimension == LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(tmpTrans.OffsetLedgerDimension)
                 ) &&
                (
                    (tmpTrans.parmAccount()   && (tmpTrans.AccountType       == LedgerJournalACType::Cust   ||
                                                  tmpTrans.AccountType       == LedgerJournalACType::Vend)) ||
                    (tmpTrans.parmOffsetAccount() && (tmpTrans.OffsetAccountType == LedgerJournalACType::Cust   ||
                                                      tmpTrans.OffsetAccountType == LedgerJournalACType::Vend))
                )
            )
            {
                if ((tmpTrans.AmountCurCredit > 0 &&   accountEntry.IsCredit) ||
                    (tmpTrans.AmountCurDebit  > 0 && ! accountEntry.IsCredit) ||
                    (tmpTrans.AmountCurCredit < 0 && ! accountEntry.IsCredit) ||
                    (tmpTrans.AmountCurDebit  < 0 &&   accountEntry.IsCredit))
                {
                    this.addContragent(tmpTrans.AccountType, tmpTrans.parmAccount(), customerSet, vendorSet);
                }

                if ((tmpTrans.AmountCurCredit > 0 && ! accountEntry.IsCredit) ||
                    (tmpTrans.AmountCurDebit  > 0 &&   accountEntry.IsCredit) ||
                    (tmpTrans.AmountCurCredit < 0 &&   accountEntry.IsCredit) ||
                    (tmpTrans.AmountCurDebit  < 0 && ! accountEntry.IsCredit))
                {
                    this.addContragent(tmpTrans.OffsetAccountType, tmpTrans.parmOffsetAccount(), customerSet, vendorSet);
                }
            }
        }

        while (! ret && loopNo <= 2)
        {
            result    = [ customerSet.elements(),  vendorSet.elements(), loopNo ];
            loopNo ++;
            switch (result)
            {
                case [ 1, 0, 1 ]                 :
                case [ 1, 0, 2 ]                 :
                    ret   = new SetIterator(customerSet).value();
                break;

                case [ 0, 1, 1 ]                 :
                case [ 0, 1, 2 ]                 :
                    ret   = new SetIterator(vendorSet).value();
                break;

                case [ 0, 0, 1 ]                 :
                    this.addContragentTrans(custTrans, customerSet, accountEntry);
                    this.addContragentTrans(vendTrans, vendorSet, accountEntry);
                break;

                case [ customerSet.elements(), 0, 1] :
                    this.addContragentTrans(custTrans, customerSet, accountEntry);
                break;

                case [ 0,vendorSet.elements(), 1] :
                    this.addContragentTrans(vendTrans, vendorSet, accountEntry);
                break;

                case [ customerSet.elements(), vendorSet.elements(), 1 ] :
                    this.addContragentTrans(custTrans, customerSet, accountEntry);
                    this.addContragentTrans(vendTrans, vendorSet, accountEntry);
                break;
                default                           :
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTrans</Name>
				<Source><![CDATA[
    public boolean validateTrans(TmpRTSLTrans  _tmpTrans)
    {
        boolean             ok = true;
        TmpRTSLLedgerTrans  tmpTrans = _tmpTrans;
        changecompany(translation.toCompanyId())
        {
            ok = LedgerDimensionValidationHelper::validateByTree(LedgerDimensionFacade::serviceCreateLedgerDimension(tmpTrans.NewLedgerDimensionDefaultAccount, tmpTrans.NewDefaultDimension), tmpTrans.TransDate, true, true) == DimensionValidationStatus::Valid;
        }

        tmpTrans.ErrorStatus = ! ok || tmpTrans.ErrorStatus;

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>