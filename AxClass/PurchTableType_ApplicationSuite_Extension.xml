<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableType_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PurchTableType))]
public final class PurchTableType_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a purchase order record has been inserted.
    /// </summary>
    public void inserted()
    {
        next inserted();

        FreeNotesTable_IT::insertDocumentRef(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a purchase order record has been updated.
    /// </summary>
    /// <param name="_purchTableOrig">
    /// The original purchase order which is updated.
    /// </param>
    public void updated(PurchTable _purchTableOrig)
    {
        next updated(_purchTableOrig);

        boolean accountMatches = _purchTableOrig.OrderAccount == purchTable.OrderAccount;
        boolean languageIdMatches = _purchTableOrig.LanguageId == purchTable.LanguageId;

        if (!languageIdMatches || !accountMatches)
        {
            FreeNotesTable_IT::updateDocumentRef(purchTable);

            if (!languageIdMatches && accountMatches)
            {
                //If language is changed, there's a cascading update of Purchase lines' notes.
                //If Order account is changed, this update has already been executed.
                PurchLine purchLineLocal;
                while select purchLineLocal
                        where purchLineLocal.PurchId == this.parmPurchTable().PurchId
                {
                    FreeNotesTable_IT::updateDocumentRef(purchLineLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean isValid = next validateField(_fieldId);

        if (_fieldId == fieldNum(PurchTable, IntentLetterId_IT) && FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            isValid = isValid && PurchTableType::validateFieldIntentLetterId_IT(this);
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldIntentLetterId_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if intent letter is open.
    /// </summary>
    /// <param name="_purchTableType"><c>PurchTableType</c> object.</param>
    /// <returns>true in intent letter is open; false otherwise.</returns>
    public static boolean validateFieldIntentLetterId_IT(PurchTableType _purchTableType)
    {
        IntentLetter_IT intentLetter;
        boolean ok = true;

        intentLetter = IntentLetter_IT::find(_purchTableType.parmPurchTable().IntentLetterId_IT);

        if (intentLetter.Status != IntentLetterStatus_IT::Open)
        {
            ok = checkFailed(strfmt("@ExtendedItallianLocalization:LeterIsInStatus", intentLetter.IntentLetterId, intentLetter.Status));
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>