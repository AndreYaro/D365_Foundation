<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterParmDataVersioning</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>FormLetterParmDataVersioning</c> class is an abstract class that is used as the versioning
///    strategy for parameter data generation.
/// </summary>
abstract class FormLetterParmDataVersioning
{
    FormLetterParmData formLetterParmData;
    VersioningUpdateType versioningUpdateType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLineQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets quantities from the source line that will be used for the parameter line generation.
    /// </summary>
    /// <param name="_sourceLine">
    /// The source line for which to retrieve the quantities.
    /// </param>
    /// <returns>
    /// A container that contains the new document unit of measure quantity, the new inventory unit
    /// quantity, the previous document unit quantity, and the previous inventory unit quantity.
    /// </returns>
    abstract public container getLineQuantities(Common _sourceLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs versioning specific initialization for the associated <c>FormLetterParmData</c> object.
    /// </summary>
    public void init()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the data selection query depending on whether it is an initial version or a correction.
    /// </summary>
    abstract public void initQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the source line for parameter line generation purposes.
    /// </summary>
    /// <param name="_sourceLine">
    /// The source line to initialize.
    /// </param>
    public void initSourceLine(Common _sourceLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormLetterParmData</Name>
				<Source><![CDATA[
        protected FormLetterParmData parmFormLetterParmData(FormLetterParmData _formLetterParmData = formLetterParmData)
    {
        formLetterParmData = _formLetterParmData;
        return formLetterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersioningUpdateType</Name>
				<Source><![CDATA[
        public VersioningUpdateType parmVersioningUpdateType(VersioningUpdateType _versioningUpdateType = versioningUpdateType)
    {
        versioningUpdateType = _versioningUpdateType;
        return versioningUpdateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWGetLineQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the catch weight quantities from the source line to the used for the parameter line
    /// generation.
    /// </summary>
    /// <param name="_sourceLine">
    /// The source line for which to retrieve the quantities.
    /// </param>
    /// <returns>
    ///  A container that contains 2 elements:
    ///  <list type="number">
    ///   <item>
    ///   <description>The new catch weight unit quantity</description>
    ///   </item>
    ///   <item>
    ///   <description>The previous catch weight unit quantity</description>
    ///   </item>
    ///  </list>
    /// </returns>
    abstract public container pdsCWGetLineQuantities(Common _sourceLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a parameter line should be created.
    /// </summary>
    /// <param name="_parmLine">
    ///    The parameter line to be checked.
    /// </param>
    /// <returns>
    ///    true if the line should be created; otherwise, false.
    /// </returns>
    abstract public boolean shouldCreateParmLine(FormletterParmLine _parmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVersioningUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the appropriate <c>FormLetterParmDataVersioning</c> subclass based on the
    ///    versioning update type.
    /// </summary>
    /// <param name="_updateType">
    ///    Type of version update. See <c>VersioningUpdateType</c> .
    /// </param>
    /// <param name="_formletterParmData">
    ///    A <c>FormletterParmData</c> that will be used by the returned object.
    /// </param>
    /// <returns>
    ///    A <c>FormLetterParmDataVersioning</c> object.
    /// </returns>
    public static FormLetterParmDataVersioning newVersioningUpdateType(VersioningUpdateType _updateType, FormletterParmData _formletterParmData)
    {
        FormLetterParmDataVersioning versioningStrategy;

        switch (_updateType)
        {
            case VersioningUpdateType::Correction :
                versioningStrategy = FormLetterParmDataCorrection::construct();
                break;

            case VersioningUpdateType::Cancel :
                versioningStrategy = FormLetterParmDataCancel::construct();
                break;

            case VersioningUpdateType::Post :
                versioningStrategy = FormLetterParmDataPost::construct();
                break;

            default :
                versioningStrategy = FormLetterParmDataInitialVersion::construct();
        }
        versioningStrategy.parmFormLetterParmData(_formletterParmData);
        versioningStrategy.parmVersioningUpdateType(_updateType);
        return versioningStrategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>