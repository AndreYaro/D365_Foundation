<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjEntityCustomLookupHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjEntityCustomLookupHelper</c> class is a helper class for project related entities custom lookups.
/// </summary>
class ProjEntityCustomLookupHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSerializedOfficeAppCustomLookupListResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of values.
    /// </summary>
    /// <param name = "_valueList">
    /// The list of values.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of values.
    /// </returns>
    private static str getSerializedOfficeAppCustomLookupListResult(List _valueList)
    {
        OfficeAppCustomLookupListResult result = new OfficeAppCustomLookupListResult();

        if (_valueList)
        {
            int counter = 1;
            ListEnumerator values = _valueList.getEnumerator();

            while (values.moveNext())
            {
                result.items().value(counter, values.current());
                counter++;
            }
        }

        return result.serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityNumberLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a custom lookup serialized string for the activity numbers field for the selected project.
    /// </summary>
    /// <param name="_fields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// A serialized string with the list of activity numbers for the lookup.
    /// </returns>
    public static str getActivityNumberLookup(Array _fields)
    {        
        ProjId projId = ProjEntityCustomLookupHelper::getOfficeAppCustomLookupFieldMap(
							tableStr(ExpenseJournalLineEntity),
                            _fields).lookup(fieldStr(ExpenseJournalLineEntity, AccountDisplayValue));

        LegalEntityDataAreaId dataAreaId = ProjEntityCustomLookupHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
                                            tableStr(ExpenseJournalLineEntity),
                                            fieldStr(ExpenseJournalLineEntity, DataAreaId),
                                            _fields);

        return ProjEntityCustomLookupHelper::getActivityNumberLookupResultStr(projId, dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityNumberLookupForProjJournalTransEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a custom lookup serialized string for activity numbers field for the selected project.
    /// </summary>
    /// <param name="_fields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// A serialized string with the list of activity numbers for the lookup.
    /// </returns>
    public static str getActivityNumberLookupForProjJournalTransEntity(Array _fields)
    {
        ProjId projId = ProjEntityCustomLookupHelper::getOfficeAppCustomLookupFieldMap(
                            tableStr(ProjJournalTransEntity),
                            _fields).lookup(fieldStr(ProjJournalTransEntity, ProjectID));

        LegalEntityDataAreaId dataAreaId = ProjEntityCustomLookupHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
                                            tableStr(ProjJournalTransEntity),
                                            fieldStr(ProjJournalTransEntity, DataAreaId),
                                            _fields);

        return ProjEntityCustomLookupHelper::getActivityNumberLookupResultStr(projId, dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityNumberLookupResultStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets activity numbers based on project ID and data area ID.
    /// </summary>
    /// <param name = "_projId">Project ID.</param>
    /// <param name = "_dataAreaId">Data area ID.</param>
    /// <returns>
    /// A serialized string with the list of activity numbers for the given project.
    /// </returns>
    private static str getActivityNumberLookupResultStr(ProjId _projId, DataAreaId _dataAreaId)
    {
        List activityNumberIDs = new List(Types::String);

        // Remove the \ character from the project id, if the project conatains - character.
        if (strContains(_projId, '-'))
        {
            str delimeter = '\\';
            _projId = strRem(_projId, delimeter);
        }

        changecompany(_dataAreaId)
        {
            HierarchyIdBase hiearchyId = ProjPlanVersionDetail::findLatestByProjId(_projId, false, false, projplanVersionType::PublishedCurrent).HierarchyId;

            if (hiearchyId)
            {
                HierarchyTreeTable      hierarchyTreeTable;
                ProjPlanVersion         projPlanVersion;
                smmActivities           smmActivities;

                while select ActivityNumber from smmActivities
                exists join hierarchyTreeTable
                    where hierarchyTreeTable.RefRecId == smmActivities.RecId
                exists join projPlanVersion
                    where projPlanVersion.HierarchyTreeTableRefRecId == hierarchyTreeTable.RecId
                        && projPlanVersion.HierarchyId == hiearchyId
                {
                    activityNumberIDs.addEnd(smmActivities.ActivityNumber);
                }
            }
        }

        return ProjEntityCustomLookupHelper::getSerializedOfficeAppCustomLookupListResult(ActivityNumberIDs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectIDLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a custom lookup serialized string for the project field.
    /// </summary>
    /// <param name="_fields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// A serialized string with the list of projects for the lookup.
    /// </returns>
    public static str getProjectIDLookup(Array _fields)
    {
        LedgerJournalACType accountType = ProjEntityCustomLookupHelper::getOfficeAppCustomLookupFieldMap(
											tableStr(ExpenseJournalLineEntity),
											_fields).lookup(fieldStr(ExpenseJournalLineEntity, AccountType));
        
        List projectIDs = new List(Types::String);
        
        if (accountType == LedgerJournalACType::Project)
        {
            LegalEntityDataAreaId dataAreaId = ProjEntityCustomLookupHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
                                                tableStr(ExpenseJournalLineEntity),
                                                fieldStr(ExpenseJournalLineEntity, DataAreaId),
                                                _fields);

            ProjTable projTable;

            while select crosscompany:[dataAreaId] ProjId from projTable where projTable.Status == ProjStatus::InProcess
            {
                str escapedProjectId = projTable.ProjId;

                SysDictEnum delimiterDictEnum = new SysDictEnum(enumnum(DimensionSegmentDelimiter));
                int enumValue = delimiterDictEnum.firstValue();
                str enumLabel = delimiterDictEnum.index2Label(enumValue);

                if (strContains(escapedProjectId, enumLabel))
                {
                    // consider adding extra \ character in the lookup if the project id contains - (hyphen) character.
                    escapedProjectId = strReplace(escapedProjectId, enumLabel, ProjEntityCustomLookupHelper::generateEscapedDelimiter(enumLabel));
                }
                

                projectIDs.addEnd(escapedProjectId);
            }
        }
        
        return ProjEntityCustomLookupHelper::getSerializedOfficeAppCustomLookupListResult(projectIDs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateEscapedDelimiter</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates a delimiter with every character escaped.
    /// </summary>
    /// <param name = "_delimiter">
    ///  The delimiter to escape.
    /// </param>
    /// <returns>
    ///  A string with each character of the delimiter escaped by a backslash character.
    /// </returns>
    private static str generateEscapedDelimiter(str _delimiter)
    {
        // Places a single escape character before each character; e.g. - = \-; -- = \-\-
        str escapedDelimiter = '';
        
        for (int i = 0; i < strLen(_delimiter); i++)
        {
            escapedDelimiter += strFmt('\\%1', subStr(_delimiter, i, 1));
        }

        return escapedDelimiter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCategoryLookUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of Project categories of type Expense to be used in Excel lookup.
    /// </summary>
    /// <param name = "_fields">Collections of field values from the selected record in Excel.</param>
    /// <returns>A serialized string with a list of project categories.</returns>
    public static str getProjCategoryLookUp(Array _fields)
    {
        OfficeAppCustomLookupListResult result = new OfficeAppCustomLookupListResult();
        result.determinationFields().value(1, fieldStr(ExpenseJournalLineEntity, ProjectCategory));

        ProjCategory projCategory;
        int current = 1;

        LegalEntityDataAreaId legalEntityId = ProjEntityCustomLookupHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
												tableStr(ExpenseJournalLineEntity),
												fieldStr(ExpenseJournalLineEntity, DataAreaId),
												_fields);
		
        while select crosscompany:[legalEntityId] projCategory
            where projCategory.CategoryType == ProjCategoryType::Cost &&
                  projCategory.Active == NoYes::Yes
        {
            result.items().value(current, ProjEntityCustomLookupHelper::getProjCategoryLookUpDisplayValue(projCategory));
            current++;
        }

        return result.serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCategoryLookUpDisplayValue</Name>
				<Source><![CDATA[
    protected static str getProjCategoryLookUpDisplayValue(ProjCategory _projCategory)
    {
        return _projCategory.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetAccountTypeLookUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a custom offset account type lookup serialized string for the Account type field.
    /// </summary>
    /// <param name = "_fields">Collections of field values from the selected record in Excel.</param>
    /// <returns>A serialized string with a list of account types.</returns>
    public static str getOffsetAccountTypeLookUp()
    {
        OfficeAppCustomLookupListResult result = new OfficeAppCustomLookupListResult();
        result.determinationFields().value(1, fieldStr(ExpenseJournalLineEntity, OffsetAccountType));

        int current = 1;

        Set supportedTypes = new ProjExpenseGeneralJournalExcelTemplate().supportedOffsetAccountTypes();
        SetEnumerator supportedTypesEnumerator = supportedTypes.getEnumerator();

        while (supportedTypesEnumerator.moveNext())
        {
            LedgerJournalACType currentACType = supportedTypesEnumerator.current();
            result.items().value(current, enum2Str(currentACType));
            current++;
        }

        return result.serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountTypeLookUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a custom account type lookup serialized string for the Account type field.
    /// </summary>
    /// <param name = "_fields">Collections of field values from the selected record in Excel.</param>
    /// <returns>A serialized string with a list of account types.</returns>
    public static str getAccountTypeLookUp()
    {
        OfficeAppCustomLookupListResult result = new OfficeAppCustomLookupListResult();
        result.determinationFields().value(1, fieldStr(ExpenseJournalLineEntity, AccountType));

        int current = 1;

        Set supportedTypes = new ProjExpenseGeneralJournalExcelTemplate().supportedAccountTypes();
        SetEnumerator supportedTypesEnumerator = supportedTypes.getEnumerator();

        while (supportedTypesEnumerator.moveNext())
        {
            LedgerJournalACType currentACType = supportedTypesEnumerator.current();
            result.items().value(current, enum2Str(currentACType));
            current++;
        }

        return result.serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOfficeAppCustomLookupFieldMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Map</c> instance containing the field and values for the specified entity instance.
    /// </summary>
    /// <param name = "_entityName">
    /// The entity name.
    /// </param>
    /// <param name = "_entityFields">
    /// The <c>Array</c> of entity fields and values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// A <c>Map</c> instance containing the field and values for the specified entity instance.
    /// </returns>
    public static Map getOfficeAppCustomLookupFieldMap(TableName _entityName, Array _entityFields)
    {
        return OfficeAppCustomLookupHelper::getFieldMap(_entityName, _entityFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntityIdFromOfficeAppCustomLookupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// The legal entity ID from the specified entity instance.
    /// </summary>
    /// <param name = "_entityName">
    /// The entity name.
    /// </param>
    /// <param name = "_legalEntityFieldName">
    /// The legal entity field name.
    /// </param>
    /// <param name = "_entityFields">
    /// The <c>Array</c> of entity fields and values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The legal entity ID.
    /// </returns>
    public static LegalEntityDataAreaId getLegalEntityIdFromOfficeAppCustomLookupFields(TableName _entityName, FieldName _legalEntityFieldName, Array _entityFields)
    {
        Map fieldMap = ProjEntityCustomLookupHelper::getOfficeAppCustomLookupFieldMap(_entityName, _entityFields);

        return ProjEntityCustomLookupHelper::getLegalEntityIdOfficeAppCustomLookupFieldMap(fieldMap, _legalEntityFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntityIdOfficeAppCustomLookupFieldMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the legal entity ID from the specified field <c>Map</c> instance.
    /// </summary>
    /// <param name = "_fieldMap">
    /// A <c>Map</c> instance containing the field and values for the specified entity instance.
    /// </param>
    /// <param name = "_legalEntityFieldName">
    /// The legal entity field name.
    /// </param>
    /// <returns>
    /// The legal entity ID.
    /// </returns>
    public static LegalEntityDataAreaId getLegalEntityIdOfficeAppCustomLookupFieldMap(Map _fieldMap, FieldName _legalEntityFieldName)
    {
        LegalEntityDataAreaId legalEntityId;

        if (_fieldMap.exists(_legalEntityFieldName))
        {
            legalEntityId = _fieldMap.lookup(_legalEntityFieldName);
        }

        if (!legalEntityId)
        {
            legalEntityId = curExt();
        }

        return legalEntityId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>