<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEDatasource_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGEDatasource_W
{
    LedgerRRGEDocuments_W   document;
    Map                     tablesMap;
    boolean                 hasError;
    LedgerRRGEBufferEval_W  evaluator;
    Set                     initializedSet;

    private const str       TableIdConst       = 'TableId';
    private const str       TableNameConst     = 'TableName';
    private const str       FieldsMapConst     = 'FieldsMap';

    private const int       TableIdIdxConst    = 1;
    private const int       TableNameIdxConst  = 2;
    private const int       FieldsMapIdxConst  = 3;
    private const int       MaxIdx             = 99;
    private const int       IdxLen             = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEDatasourceField_W addField(
        int             _tableId,
        int             _fieldId,
        str             _fieldName,
        str             _description    = '',
        str             _cell           = '',
        SysAlignment    _alignment      = SysAlignment::AlignDefault,
        int             _length         = 0,
        str             _emptyChar      = '',
        int             _pointSignNum   = 0)
    {
        Struct                      tableStruct;
        Map                         fieldsMap;
        LedgerRRGEDatasourceField_W datasourceField;

        if (!tablesMap || !_tableId || !_fieldId || !_fieldName)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (tablesMap.exists(_tableId))
        {
            tableStruct = tablesMap.lookup(_tableId);
            fieldsMap   = tableStruct.value(FieldsMapConst);
            if (fieldsMap.exists(_fieldId))
            {
                throw error(strFmt("@LedgerRRG:LedgerRRG_FieldExists", _fieldName));
            }

            datasourceField = LedgerRRGEDatasourceField_W::newField(_tableId,
                                                                    _fieldId,
                                                                    _fieldName,
                                                                    _description,
                                                                    _cell,
                                                                    _alignment,
                                                                    _length,
                                                                    _emptyChar,
                                                                    _pointSignNum);
            fieldsMap.insert(_fieldId, datasourceField);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }


        return datasourceField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addTable(int _tableId, str _tableName)
    {
        Struct tableStruct;

        if (!_tableId || !_tableName)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!tablesMap)
        {
            this.initTablesMap();
        }

        if (tablesMap.exists(_tableId))
        {
            throw error(strFmt("@LedgerRRG:LedgerRRG_TableExists", _tableName));
        }

        tableStruct = new Struct();
        tableStruct.add(TableIdConst,   _tableId);
        tableStruct.add(TableNameConst, _tableName);
        tableStruct.add(FieldsMapConst, new Map(Types::Integer, Types::Class));

        tablesMap.insert(_tableId, tableStruct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProperies</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int createProperies(LedgerRRGEQueryRecId_W _queryRecId,
        tableId _tableId = 0,
        LedgerRRGEPropertyId_W _prefix = LedgerRRGEQueries_W::find(_queryRecId).QueryId + '_')
    {
        MapEnumerator   tablesEnumerator;
        int             propertyCount;

        void createTableProperies(tableId _locTableId, Struct _tableStruct)
        {
            Map             fieldsMap        = _tableStruct.value(FieldsMapConst);
            MapEnumerator   fieldsEnumerator = fieldsMap.getEnumerator();

            while (fieldsEnumerator.moveNext())
            {
                this.createProperty(_queryRecId, _locTableId, fieldsEnumerator.currentValue(), _prefix);
                propertyCount++;
            }
        }       
       
        if (!tablesMap)
        {
            this.initTables();
        }

        if (_tableId)
        {
            if (tablesMap.exists(_tableId))
            {
                createTableProperies(_tableId, tablesMap.lookup(_tableId));
            }
        }
        else
        {
            tablesEnumerator = tablesMap.getEnumerator();
            while (tablesEnumerator.moveNext())
            {
                createTableProperies(tablesEnumerator.currentKey(), tablesEnumerator.currentValue());
            }
        }

        return propertyCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProperty</Name>
				<Source><![CDATA[
    private void createProperty(LedgerRRGEQueryRecId_W _queryRecId,
        int _tableId,
        LedgerRRGEDatasourceField_W _field,
        LedgerRRGEPropertyId_W _prefix = LedgerRRGEQueries_W::find(_queryRecId).QueryId + '_')
    {
        LedgerRRGEProperties_W      property;
        LedgerRRGEPropertyId_W      propertyId = _prefix + _field.fieldName();
        LedgerRRGEExpressionLines_W expressionLine;
        int                         idx;
        int                         maxPropertyIdSize = SysDictField::newName(tableStr(LedgerRRGEProperties_W), fieldStr(LedgerRRGEProperties_W, PropertyId)).stringLen() - IdxLen - 1;

        while (LedgerRRGEProperties_W::existPropertyId(propertyId))
        {
            idx++;
            if (idx > MaxIdx)
            {
                throw error(strFmt("@LedgerRRG:LedgerRRG_RequisiteExists", propertyId));
            }

            propertyId = LedgerRRGELoadBase_W::strAddIndex(subStr(_prefix + _field.fieldName(), 1, maxPropertyIdSize), idx, IdxLen);
        }

        property.PropertyId         = propertyId;
        property.Name               = _field.description();
        property.AttributeName      = _field.fieldName();
        property.DefaultCell        = _field.cell();
        property.DefaultWorksheet   = this.defaultWorksheet(_tableId);
        property.Type               = LedgerRRGEPropertyType_W::Expression;
        property.Alignment          = _field.parmAlignment();
        property.Length             = _field.parmLength();
        property.EmptyChar          = _field.parmEmptyChar();
        property.PointSignNum       = _field.parmPointSignNum();
        property.insert();

        expressionLine.LedgerRRGEProperties_W = property.RecId;
        expressionLine.LedgerRRGEQueries_W    = _queryRecId;
        expressionLine.RefTableId             = _tableId;
        expressionLine.FieldNum               = _field.fieldId();
        expressionLine.LineNum                = 1;
        expressionLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>curLineNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int curLineNum(int _fieldId, int _tableId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>curWorksheetName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str curWorksheetName(int _fieldId, int _tableId)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorksheet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str defaultWorksheet(int _tableId)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsMap</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map fieldsMap(int _tableId = 1)
    {
        Struct  tableStruct;

        if (!tablesMap)
        {
            this.initTables();
        }

        if (tablesMap.exists(_tableId))
        {
            tableStruct = tablesMap.lookup(_tableId);
            return tableStruct.valueIndex(FieldsMapIdxConst);
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEDatasourceField_W findField(int _tableId, int _fieldId)
    {
        Struct                      tableStruct;
        Map                         fieldsMap;
        LedgerRRGEDatasourceField_W datasourceField;

        if (tablesMap && tablesMap.exists(_tableId))
        {
            tableStruct = tablesMap.lookup(_tableId);
            fieldsMap   = tableStruct.value(FieldsMapConst);
            if (fieldsMap.exists(_fieldId))
            {
                datasourceField = fieldsMap.lookup(_fieldId);
            }
        }

        return datasourceField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str findValue(int _fieldId, int _tableId = 1)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str fixNum(str _num, int _size)
    {
        return '"' + strRFix(_num, _size, '0') + '"';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fmtNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str fmtNum(real _num)
    {
        return num2str(_num, -1, 0, 1, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasError</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean hasError(boolean _hasError = hasError)
    {
        hasError = _hasError;
        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean initialized(int _tableId)
    {
        if (!initializedSet)
        {
            initializedSet = new Set(Types::Integer);
        }

        return initializedSet.in(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTables</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initTables()
    {
        this.initTablesMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTablesMap</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    final public void initTablesMap()
    {
        tablesMap = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryMultiLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isQueryMultiLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean next(int _tableId)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEDocuments_W parmDocument(LedgerRRGEDocuments_W _document = document)
    {
       
        document = _document;

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEvaluator</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEBufferEval_W parmEvaluator(LedgerRRGEBufferEval_W _evaluator = evaluator)
    {
       
        evaluator = _evaluator;

        return evaluator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void reset(int _tableId)
    {
        if (initializedSet)
        {
            initializedSet.remove(_tableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInitialized</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setInitialized(int _tableId)
    {
        if (!this.initialized(_tableId))
        {
            initializedSet.add(_tableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showNamesInLookup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean showNamesInLookup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singularFieldId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int singularFieldId()
    {
        MapEnumerator   me;
        Map             fieldsMap;
        int             singularTableId = this.singularTableId();

        if (singularTableId)
        {
            fieldsMap = this.fieldsMap(singularTableId);
            if (fieldsMap && fieldsMap.elements() == 1)
            {
                me = fieldsMap.getEnumerator();
                if (me.moveNext())
                {
                    return me.currentKey();
                }
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singularTableId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int singularTableId()
    {
        MapEnumerator   me;

        if (!tablesMap)
        {
            this.initTables();
        }

        if (tablesMap.elements() == 1)
        {
            me = tablesMap.getEnumerator();
            if (me.moveNext())
            {
                return me.currentKey();
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortOrder</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int sortOrder()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tablesMap</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map tablesMap()
    {
        MapEnumerator   me;
        Map             res;
        Struct          tableStruct;

        if (!tablesMap)
        {
            this.initTables();
        }

        res = new Map(Types::Integer, Types::String);
        me  = tablesMap.getEnumerator();
        while (me.moveNext())
        {
            tableStruct = me.currentValue();
            res.insert(me.currentKey(), tableStruct.valueIndex(TableNameIdxConst));
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCellCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateCellCode(int _fieldId, int _tableId)
    {
        str aWorksheet;
        str cell;
        int cellRow;
        str cellName;
        int rowShift;
        str newWorksheetName;

        if (evaluator && evaluator.allowUpdateKeyCode())
        {
            rowShift            = this.curLineNum(_fieldId, _tableId) - 1;
            newWorksheetName    = this.curWorksheetName(_fieldId, _tableId);
            cell                = evaluator.keyCode();

            if (rowShift > 0)
            {
                [aWorksheet, cell] = str2con_RU(cell, '!');

                if (!cell)
                {
                    cell = aWorksheet;
                    aWorksheet = '';
                }

                if (cell)
                {
                    [cellName, cellRow] = ComExcelDocument_RU::cell2ColNameRow(cell, false);
                    cell = ComExcelDocument_RU::changeCellRows(cell, cellRow + rowShift);
                }
            }

            if (cell && newWorksheetName)
            {
                cell = ComExcelDocument_RU::replaceWorksheetName(cell, newWorksheetName);
            }

            if (cell)
            {
                evaluator.updateKeyCode(cell);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>value</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str value(int _fieldId, int _tableId = 1)
    {
        this.updateCellCode(_fieldId, _tableId);
        return this.findValue(_fieldId, _tableId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>