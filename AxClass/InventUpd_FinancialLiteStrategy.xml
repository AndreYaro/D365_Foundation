<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpd_FinancialLiteStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventUpd_FinancialLiteStrategy</c> class is used to determine which transactions to process based on the inventory movement.
/// </summary>
abstract public class InventUpd_FinancialLiteStrategy
{
    InventMovement movement;
    InventUpd_FinancialLite inventUpdate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransactionsToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first inventory transaction to be updated.
    /// </summary>
    /// <param name = "_direction">The direction of the inventory transactions.</param>
    /// <param name = "_inventDim">The <c>InventDim</c> record to use when finding inventory transactions.</param>
    /// <param name = "_inventDimParm">The <c>InventDimParm</c> record to use when finding inventory transactions.</param>
    /// <returns>The first <c>InventTrans</c> record to be updated.</returns>
    /// <remarks>The returned <c>InventTrans</c> record can be iterated over to get all the inventory transactions that should be updated.</remarks>
    public abstract InventTrans getInventTransactionsToUpdate(
        InventDirection _direction,
        InventDim       _inventDim,
        InventDimParm   _inventDimParm)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting date used when updating the inventory transactions.
    /// </summary>
    /// <param name = "_inventTrans">A <c>InventTrans</c> record containing a physical date.</param>
    /// <returns>The posting date used when updating the inventory transactions.</returns>
    public abstract date getPostingDate(InventTrans _inventTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateRemainingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the remaining quantity must be updated on the inventory transaction.
    /// </summary>
    /// <returns>true if the remaining quantity must be updated on the inventory transaction; otherwise, false.</returns>
    public abstract boolean mustUpdateRemainingQuantity()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateRemainingQuantityOnIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the remaining quantity must be updated on the inventory movement when processing an issue.
    /// </summary>
    /// <returns>true if the remaining quantity must be updated on the inventory movement; otherwise, false.</returns>
    public boolean mustUpdateRemainingQuantityOnIssue()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventoryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory date must be updated on the inventory transaction.
    /// </summary>
    /// <returns>true if the inventory date must be updated on the inventory transaction; otherwise, false.</returns>
    public abstract boolean mustUpdateInventoryDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventUpd_FinancialLiteStrategy</c> class.
    /// </summary>
    /// <param name = "_movement">An <c>InventMovement</c> class instance.</param>
    /// <param name = "_inventUpdate">An <c>InventUpd_FinancialLite</c> class instance.</param>
    protected void initialize(
        InventMovement          _movement,
        InventUpd_FinancialLite _inventUpdate)
    {
        movement = _movement;
        inventUpdate = _inventUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventUpd_FinancialLiteStrategy construct(InventMovement _movement)
    {
        InventUpd_FinancialLiteStrategy strategy = InventUpd_FinancialLiteStrategy::constructNoThrow(_movement);

        if (!strategy)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>InventUpd_FinancialLiteStrategy</c> instance for the supplied movement.
    /// </summary>
    /// <param name = "_movement">The <c>InventMovement</c> instance.</param>
    /// <returns>The <c>InventUpd_FinancialLiteStrategy</c> instance.</returns>
    [Wrappable(true)]
    protected static InventUpd_FinancialLiteStrategy constructNoThrow(InventMovement _movement) 
    {
        if (_movement is WHSInventMov_Work ||
            _movement is WHSInventMov_Container)
        {
            return InventUpd_FinancialLiteStrategyWork::construct();
        }
        else if (_movement is InventMov_ConsignmentReplenishmentOrder)
        {
            return InventUpd_FinancialLiteStrategyConsignment::construct();
        }
        else if (_movement is InventMov_Jour_OwnershipChange)
        {
            return InventUpd_FinancialLiteStrategyOwnershipChange::construct();
        }
        else if (_movement is InventMov_Jour_TransferIssue_OwnerEnabled ||
                _movement is InventMov_Jour_TransferReceipt_OwnerEnabled)
        {
            return InventUpd_FinancialLiteStrategyOwnerEnabledTransferJournal::construct();
        }
        else if (_movement is InventMov_Jour_Loss_SumUp_OwnerEnabled ||
                _movement is InventMov_Vir_Counting_OwnerEnabled)
        {
            return InventUpd_FinancialLiteStrategyOwnerEnabledCountingJournal::construct();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventUpd_FinancialLiteStrategy</c> class based on the movement.
    /// </summary>
    /// <param name="_movement">An <c>InventMovement</c> class instance.</param>
    /// <param name = "_inventUpdate">An <c>InventUpd_FinancialLite</c> class instance.</param>
    /// <returns>The <c>InventUpd_FinancialLiteStrategy</c> class instance based on the movement.</returns>
    public static InventUpd_FinancialLiteStrategy newFromMovement(
        InventMovement          _movement,
        InventUpd_FinancialLite _inventUpdate)
    {
        InventUpd_FinancialLiteStrategy strategy = InventUpd_FinancialLiteStrategy::construct(_movement);

        strategy.initialize(_movement, _inventUpdate);

        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUpdatingInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the strategy class to update the InventTrans record before it is saved in <c>InventUpd_FinancialLite.updateTrans()</c>.
    /// </summary>
    /// <param name = "_inventTrans">An <c>InventTrans</c> record about to be updated.</param>
    [Hookable(false)]
    public void onUpdatingInventTrans(InventTrans _inventTrans)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>