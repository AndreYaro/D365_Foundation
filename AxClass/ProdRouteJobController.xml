<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdRouteJobController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdRouteJobController</c> class is the controller class for the
///    <c>ProdRouteJobController</c> Report.
/// </summary>
class ProdRouteJobController  extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes before the report prompts and calls the method to set the ranges to the query.
    /// </summary>
    public void prePromptModifyContract()
    {
        if (args)
        {
            this.parmShowDialog(!args.parmEnum());
        }
        this.setRanges(this.getFirstQuery());
        this.setPrintSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the print settings.
    /// </summary>
    public void setPrintSettings()
    {
        if (args && (args.caller() is ProdUpdRelease))
        {
            ProdUpdRelease prodUpdRelease = args.caller();
            ProdParmRelease prodParmRelease = prodUpdRelease.parmParmBuffer();

            SrsReportDataContract dataContract = this.parmReportContract();
            dataContract.parmPrintSettings(new SRSPrintDestinationSettings(prodParmRelease.SetupPrintRouteJob));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges based on the caller.
    /// </summary>
    /// <param name="_query">
    /// The hold the <c>Query</c> object of the report.
    /// </param>
    public void setRanges(Query _query)
    {
        QueryBuildDataSource qbds = _query.dataSourceTable(tablenum(ProdTable));

        if (this.parmArgs() && this.parmArgs().dataset() == (tablenum(ProdTable)))
        {
            ProdTable prodTable = this.parmArgs().record();
            SysQuery::findOrCreateRange(qbds, fieldnum(ProdTable, ProdId)).value(prodTable.ProdId);
        }
        else  if (this.parmArgs() && this.parmArgs().dataset() == (tablenum(ProdJournalBOM)))
        {
            ProdJournalBOM prodJournalBOM = this.parmArgs().record();
            SysQuery::findOrCreateRange(qbds, fieldnum(ProdTable, ProdId)).value(prodJournalBOM.ProdId);
        }
        if (this.parmArgs() && (this.parmArgs().caller() is ProdUpdRelease))
        {
            ProdUpdRelease prodUpdRelease = this.parmArgs().caller();
            ProdParmRelease prodParmRelease = prodUpdRelease.parmParmBuffer();
            SysQuery::findOrCreateRange(qbds, fieldnum(ProdTable, ProdId)).value(prodParmRelease.ProdId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProdRouteJobController  controller  = new ProdRouteJobController();
        controller.parmReportName(ssrsReportStr(ProdRouteJob, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>