<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListEvat_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EuSalesListEvat_NL extends RunBase
{
    #ISOCountryRegionCodes

    const int maxCustSums = 4;
    const int CUST01 = 1;
    const int CUST02 = 2;
    const int CUST03 = 3;
    const int CUST04 = 4;

    const str Q1 = '100';
    const str Q2 = '200';
    const str Q3 = '300';
    const str Q4 = '400';

    const str JanFeb = '113';
    const str AprMay = '214';
    const str JulAug = '315';
    const str OctNov = '416';

    const str Jan = '101';
    const str Feb = '102';
    const str Mar = '103';
    const str Apr = '204';
    const str May = '205';
    const str Jun = '206';
    const str Jul = '307';
    const str Aug = '308';
    const str Sep = '309';
    const str Oct = '410';
    const str Nov = '411';
    const str Dec = '412';

    const str JanFebStart = '0101';
    const str AprMayStart = '0401';
    const str JulAugStart = '0701';
    const str OctNovStart = '1001';

    const str JanFebEnd = '0230';
    const str AprMayEnd = '0531';
    const str JulAugEnd = '0831';
    const str OctNovEnd = '1130';

    TaxEvatParameters_NL            taxEvatParameters;
    TaxIntraCommTable_NL            taxIntraCommTable;
    str                             periodCode;
    EUSalesList                     euSalesList;

    AmountMST                       custSum[maxCustSums];
    AmountMST                       custServiceSum;

    FromDate                        fromDate;
    ToDate                          toDate;
    EUSalesListReportingPeriodType  reportingPeriodType;
    TaxRegistrationNumber           taxID;
    TaxRegistration                 taxRegistration;

    DialogField                     dialogFromDate;
    DialogField                     dialogToDate;
    DialogField                     dialogReportingPeriodType;
    DialogField                     dialogTaxID;

    private boolean isCompanyEnabled = TaxSolutionScopeIntegrationUtil::isCompanyEnabled();

    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList
        reportingPeriodType,
        fromDate,
        toDate,
        taxRegistration.RecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        dialog = this.dialogInternal(dialog, forceOnClient);
        dialog.caption("@SYS96808");
        
        if (isCompanyEnabled || FeatureStateProvider::isFeatureEnabled(DutchICPDeclarationByTaxId_Feature::instance()))
        {
                dialogTaxID               = dialog.addFieldValue(extendedTypeStr(TaxRegistrationNumber), taxID, "@SYS125640");
        }

        dialogReportingPeriodType = dialog.addFieldValue(enumStr(EUSalesListReportingPeriodType), reportingPeriodType);
        dialogFromDate            = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
        dialogToDate              = dialog.addFieldValue(extendedTypeStr(ToDate), toDate);

        dialogToDate.enabled(reportingPeriodType ==  EUSalesListReportingPeriodType::NotSelected);

        this.registerEventHandlers();
        this.setFromAndToDate();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate_Modified</Name>
				<Source><![CDATA[
    public boolean fromDate_Modified(FormDateControl _formControl)
    {
        boolean  ret         = _formControl.modified();
        FromDate fromDateNew = dialogFromDate.value();

        reportingPeriodType = dialogReportingPeriodType.value();

        if (ret && fromDateNew)
        {
            ret = this.validateFromDate(fromDateNew, true);
        }

        if (ret)
        {
            this.setToDate(fromDateNew);
        }
        else //reset fromDate value
        {
            dialogFromDate.value(fromDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            fromDate            = dialogFromDate.value();
            toDate              = dialogToDate.value();
            reportingPeriodType = dialogReportingPeriodType.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxIntraCommCorrection</Name>
				<Source><![CDATA[
    private void insertTaxIntraCommCorrection(VATNum                  _vatNum,
                                              LogisticsAddressCountryRegionId  _logisticsAddressCountryRegionId,
                                              Listcode                _listcode,
                                              str                     _quart)
    {
        TaxIntraCommCorrection_NL taxIntraCommCorrection_NL;

        if (_vatNum && _logisticsAddressCountryRegionId)
        {
            if (custSum[CUST01] || custSum[CUST02] || custSum[CUST03] || custSum[CUST04] || custServiceSum)
            {
                TaxPeriodOfYear taxPeriod = str2int(_quart);
                EUSalesListTax eUSalesListTax = TaxCountryRegionParameters::find(_logisticsAddressCountryRegionId).SalesTaxCode;
                VATNum vatNum = TaxVATNumTable::stripVATNum(_vatNum, eUSalesListTax);

                ttsbegin;
                taxIntraCommCorrection_NL = TaxIntraCommCorrection_NL::findByKeyIdx(
                    taxIntraCommTable.RecId,
                    taxPeriod,
                    eUSalesListTax,
                    vatNum,
                    true);

                if (taxIntraCommCorrection_NL)
                {
                    taxIntraCommCorrection_NL.Amount += custSum[CUST01] + custSum[CUST02] + custSum[CUST03] + custSum[CUST04];
                    taxIntraCommCorrection_NL.ServiceAmount += custServiceSum;
                    taxIntraCommCorrection_NL.update();
                }
                else
                {
                    taxIntraCommCorrection_NL.clear();
                    taxIntraCommCorrection_NL.TaxIntraCommTable_NL = taxIntraCommTable.RecId;
                    taxIntraCommCorrection_NL.TaxPeriod = taxPeriod;
                    taxIntraCommCorrection_NL.CountryRegion = eUSalesListTax;
                    taxIntraCommCorrection_NL.VatNum = vatNum;
                    taxIntraCommCorrection_NL.TriangularTrade = _listcode;
                    taxIntraCommCorrection_NL.Amount = custSum[CUST01] + custSum[CUST02] + custSum[CUST03] + custSum[CUST04];
                    taxIntraCommCorrection_NL.ServiceAmount = custServiceSum;
                    taxIntraCommCorrection_NL.insert();
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxIntraCommDeliveries</Name>
				<Source><![CDATA[
    private void insertTaxIntraCommDeliveries(VATNum                          _vatNum,
                                              LogisticsAddressCountryRegionId _logisticsAddressCountryRegionId,
                                              Listcode                        _listcode)
    {
        TaxIntraCommDelivery_NL taxIntraCommDelivery_NL;

        if (_vatNum && _logisticsAddressCountryRegionId)
        {
            if (custSum[CUST01] || custSum[CUST02] || custSum[CUST03] || custSum[CUST04] || custServiceSum)
            {
                EUSalesListTax eUSalesListTax = TaxCountryRegionParameters::find(_logisticsAddressCountryRegionId).SalesTaxCode;
                VATNum vatNum = TaxVATNumTable::stripVATNum(_vatNum, eUSalesListTax);

                ttsbegin;
                taxIntraCommDelivery_NL = TaxIntraCommDelivery_NL::findByKeyIdx(
                    taxIntraCommTable.RecId,
                    eUSalesListTax,
                    vatNum,
                    true);

                if (taxIntraCommDelivery_NL)
                {
                    taxIntraCommDelivery_NL.Amount += custSum[CUST01] + custSum[CUST02] + custSum[CUST03] + custSum[CUST04];
                    taxIntraCommDelivery_NL.ServiceAmount += custServiceSum;
                    taxIntraCommDelivery_NL.update();
                }
                else
                {
                    taxIntraCommDelivery_NL.clear();
                    taxIntraCommDelivery_NL.TaxIntraCommTable_NL = taxIntraCommTable.RecId;
                    taxIntraCommDelivery_NL.CountryRegion = eUSalesListTax;
                    taxIntraCommDelivery_NL.VatNum = vatNum;
                    taxIntraCommDelivery_NL.Amount = custSum[CUST01] + custSum[CUST02] + custSum[CUST03] + custSum[CUST04];
                    taxIntraCommDelivery_NL.ServiceAmount = custServiceSum;
                    taxIntraCommDelivery_NL.TriangularTrade = _listcode;
                    taxIntraCommDelivery_NL.insert();
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxIntraCommTable</Name>
				<Source><![CDATA[
    private TaxIntraCommTable_NL insertTaxIntraCommTable()
    {
        TaxIntraCommTable_NL taxIntraComm;
        taxEvatParameters = TaxEvatParameters_NL::find();

        ttsbegin;

        taxIntraComm.TaxPeriod  = str2int(periodCode);
        taxIntraComm.TaxYear    = year(fromDate);
        taxIntraComm.TaxVersion = '2.0';
        
        if (isCompanyEnabled || FeatureStateProvider::isFeatureEnabled(DutchICPDeclarationByTaxId_Feature::instance()))
        {
            taxIntraComm.VatNum = TaxRegistration::find(taxRegistration.RecId).RegistrationNumber;
            taxIntraComm.TaxID = taxRegistration.RecId;
        }

        taxIntraComm.MessageID  = strFmt('%1%2',
                                         periodCode,
                                         subStr(strKeep(time2str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),0,0),'1234567890'),2,4));

        taxIntraComm.insert();

        ttscommit;

        return taxIntraComm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    private void process()
    {
        Integer i;
        str     aQuarter;

        while select sum (AmountMST), sum(ServiceAmountMST) from euSalesList
            group by CountryRegionId, vatNum, Listcode
            where euSalesList.Status    == ListStatus::Include
               && euSalesList.Listcode  != Listcode::IncludeNot
               && euSalesList.TransDate >= fromDate
               && euSalesList.TransDate <= toDate
               && euSalesList.Corrected == NoYes::No
               && euSalesList.TaxID     == taxRegistration.RecId
        {
            if (! euSalesList.check())
            {
                continue;
            }

            custSum[0]     = 0;
            custServiceSum = 0;
            i              = euSalesList.Listcode;

            custSum[i]     = round(euSalesList.AmountMST, 1);
            custServiceSum = round(euSalesList.ServiceAmountMST, 1);

            this.insertTaxIntraCommDeliveries(euSalesList.vatNum, euSalesList.CountryRegionId, euSalesList.Listcode);
        }

        while select sum(AmountMST), sum(ServiceAmountMST) from euSalesList
            group by CountryRegionId, vatNum, Listcode, TransYear, TransQuarter
            where euSalesList.Status    == ListStatus::Include
               && euSalesList.Listcode  != Listcode::IncludeNot
               && euSalesList.Corrected == NoYes::Yes
        {
            custSum[0]     = 0;
            custServiceSum = 0;
            i              = euSalesList.Listcode;

            aQuarter = subStr(num2Str0(euSalesList.TransYear, 4), 3, 2) + int2str(euSalesList.TransQuarter + 1) + '00';

            custSum[i]     = round(euSalesList.AmountMST, 1);
            custServiceSum = round(euSalesList.ServiceAmountMST, 1);

            this.insertTaxIntraCommCorrection(euSalesList.vatNum, euSalesList.CountryRegionId, euSalesList.Listcode, aquarter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    public void registerEventHandlers()
    {
        dialogReportingPeriodType.control().registerOverrideMethod(
            methodStr(FormComboBoxControl, modified),
            methodStr(EUSalesListReportingEngine, reportingPeriodType_Modified),
            this);

        dialogFromDate.control().registerOverrideMethod(
            methodStr(FormDateControl, modified),
            methodStr(EUSalesListReportingEngine, fromDate_Modified),
            this);

        if (isCompanyEnabled || (FeatureStateProvider::isFeatureEnabled(DutchICPDeclarationByTaxId_Feature::instance())))
        {
            dialogTaxID.control().registerOverrideMethod(
                methodStr(FormStringControl, lookup),
                methodStr(EUSalesListEvat_NL, taxID_lookup),
                this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxID_lookup</Name>
				<Source><![CDATA[
    public TaxRegistration taxID_lookup(FormStringControl _formControl)
    {
        #ISOCountryRegionCodes;

        CompanyInfo companyInfo = CompanyInfo::find();
        Query query = new Query();
  
        LogisticsAddressCountryRegion addressCounrtyRegion = LogisticsAddressCountryRegion::findByISOCode(#isoNL);

        TableLookup_RU lookUp = TableLookup_RU::newParameters(tableNum(TaxRegistration), _formControl);
        lookUp.addLookupfield(fieldNum(TaxRegistration, RegistrationNumber));
        lookUp.addLookupfield(fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule));

        query.validTimeStateDateRange(dateNull(), dateMax());
        QueryBuildDataSource qbdsRegistrationNumber = query.addDataSource(tableNum(TaxRegistration));
        QueryBuildDataSource qbdsTaxRegistrationLegislationTypes = qbdsRegistrationNumber.addDataSource(tableNum(TaxRegistrationLegislationTypes));
        qbdsTaxRegistrationLegislationTypes.joinMode(JoinMode::InnerJoin);
        qbdsTaxRegistrationLegislationTypes.relations(false);
        qbdsTaxRegistrationLegislationTypes.addLink(
            fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule),
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypeApplicabilityRule));
        qbdsTaxRegistrationLegislationTypes.addRange(
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypesList))
            .value(queryValue(TaxRegistrationTypesList::TAXID));
        
        QueryBuildDataSource qbdsTaxRegistrationTypeApplicabilityRule = qbdsRegistrationNumber.addDataSource(tableNum(TaxRegistrationTypeApplicabilityRule));
        qbdsTaxRegistrationTypeApplicabilityRule.joinMode(JoinMode::InnerJoin);
        qbdsTaxRegistrationTypeApplicabilityRule.relations(true);
        qbdsTaxRegistrationTypeApplicabilityRule.addRange(
            fieldNum(TaxRegistrationTypeApplicabilityRule, CountryRegionId))
            .value(queryValue(addressCounrtyRegion.CountryRegionId));

        QueryBuildDataSource qbdsDirPartyLocation = qbdsRegistrationNumber.addDataSource(tableNum(DirPartyLocation));
        qbdsDirPartyLocation.joinMode(JoinMode::InnerJoin);
        qbdsDirPartyLocation.relations(false);
        qbdsDirPartyLocation.addLink(
            fieldNum(TaxRegistration, DirPartyLocation),
            fieldNum(DirPartyLocation, RecId));
        qbdsDirPartyLocation.addRange(fieldNum(DirPartyLocation, Party)).value(queryValue(companyInfo.RecId));

        lookUp.parmQuery(query);
        lookUp.performFormLookup();

        if (lookUp.getFoundCursor())
        {
            taxRegistration = lookUp.getFoundCursor();
        }

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingPeriodType_Modified</Name>
				<Source><![CDATA[
    public boolean reportingPeriodType_Modified(FormComboBoxControl _formControl)
    {
        boolean             ret = _formControl.modified();
        fromDate            = dialogFromDate.value();
        reportingPeriodType = dialogReportingPeriodType.value();

        if (ret)
        {
            dialogToDate.enabled(reportingPeriodType == EUSalesListReportingPeriodType::NotSelected);

            if (reportingPeriodType != EUSalesListReportingPeriodType::NotSelected)
            {
                if (fromDate && this.validateFromDate(fromDate, false))
                {
                    this.setToDate(fromDate);
                }
                else
                {
                    this.setFromAndToDate();
                }
            }

            ret = ret && this.validateReportingPeriodType(reportingPeriodType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        periodCode = EUSalesListEvat_NL::getReportingPeriodCode(reportingPeriodType, fromDate);

        if (!TaxIntraCommTable_NL::existPeriod(str2int(periodCode)))
        {
            taxIntraCommTable = this.insertTaxIntraCommTable();

            this.process();
        }
        else
        {
            error("@SYS96809");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromAndToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets start and end dates automatically by using the period type.
    /// </summary>
    protected void setFromAndToDate()
    {
        switch (reportingPeriodType)
        {
            case EUSalesListReportingPeriodType::Monthly:
                fromDate = dateStartMth(dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))-1);
                dialogFromDate.value(fromDate);
                dialogToDate.value(dateEndMth(fromDate));
                break;

            case EUSalesListReportingPeriodType::Quarterly:
                fromDate = dateStartQtr(dateStartQtr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))-1);
                dialogFromDate.value(fromDate);
                dialogToDate.value(dateEndQtr(fromDate));
                break;

            case EUSalesListReportingPeriodType::BiMonthly:
                fromDate = dateStartQtr(dateStartQtr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))-1);
                dialogFromDate.value(fromDate);
                dialogToDate.value(dateEndMth(nextMth(fromDate)));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the end date by using the period type and start date.
    /// </summary>
    /// <param name="_fromDate">
    ///    The start date for which to set the end date.
    /// </param>
    protected void setToDate(FromDate _fromDate)
    {
        switch (reportingPeriodType)
        {
            case EUSalesListReportingPeriodType::Monthly:
                dialogToDate.value(dateEndMth(_fromDate));
                break;

            case EUSalesListReportingPeriodType::Quarterly:
                dialogToDate.value(dateEndQtr(_fromDate));
                break;

            case EUSalesListReportingPeriodType::BiMonthly:
                dialogToDate.value(dateEndMth(nextMth(dateStartQtr(_fromDate))));
                break;

            case EUSalesListReportingPeriodType::Yearly:
                dialogToDate.value(DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _fromDate));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                RefRecId recID = conPeek(_packedClass,5);
                taxRegistration = TaxRegistration::find(recID);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;
        ret  = super(_calledFrom);

        if (fromDate > toDate)
        {
            ret = checkFailed("@SYS120590");
        }

        select firstonly RecId from euSalesList
            where euSalesList.TaxID     == taxRegistration.RecId
               && (euSalesList.Status    == ListStatus::Include
               && euSalesList.Listcode  != Listcode::IncludeNot
               && euSalesList.TransDate >= fromDate
               && euSalesList.TransDate <= toDate
               && euSalesList.Corrected == NoYes::No) ||
                ( euSalesList.Status    == ListStatus::Include
               && euSalesList.Listcode  != Listcode::IncludeNot
               && euSalesList.Corrected == NoYes::Yes);
        
        if (!euSalesList.RecId)
        {
            ret = checkFailed("@EUSalesListCommon:TransactionsNotFound");
        }

        ret = ret && this.validateReportingPeriodType(reportingPeriodType);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the start date is valid and displays an error message by using the <paramref
    ///    name="_showError" /> parameter.
    /// </summary>
    /// <param name="_fromDate">
    ///    The start date value for which to validate.
    /// </param>
    /// <param name="_showError">
    ///    A Boolean value that indicates if the error message should be shown.
    /// </param>
    /// <returns>
    ///    true if the start date is valid; otherwise, false.
    /// </returns>
    public boolean validateFromDate(FromDate _fromDate, boolean _showError)
    {
        boolean ret = true;
        switch (reportingPeriodType)
        {
            case EUSalesListReportingPeriodType::Monthly:
                if (dayOfMth(_fromDate) != 1)
                {
                    ret = _showError? checkFailed("@SYS312862") : false;
                }
                break;

            case EUSalesListReportingPeriodType::Quarterly:
            //Bi-monthly periods have the same starting dates as quarters
            case EUSalesListReportingPeriodType::BiMonthly:
                if (_fromDate != dateStartQtr(_fromDate))
                {
                    ret = _showError? checkFailed("@SYS332705") : false;
                }
                break;

            case EUSalesListReportingPeriodType::Yearly:
                if (_fromDate != DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _fromDate))
                {
                    ret = _showError? checkFailed("@SYS334907") : false;
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReportingPeriodType</Name>
				<Source><![CDATA[
    private boolean validateReportingPeriodType(EUSalesListReportingPeriodType _reportingPeriodType)
    {
        boolean ret = true;

        if (_reportingPeriodType == EUSalesListReportingPeriodType::NotSelected ||
            _reportingPeriodType == EUSalesListReportingPeriodType::Yearly)
        {
            ret = checkFailed("@SYS335942");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EUSalesListEvat_NL construct()
    {
        return new EUSalesListEvat_NL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FromDate</c>, <c>ToDate</c>, and <c>ReportingType</c> values that are based on the
    /// <c>TaxPeriod</c> value that holds this information in a specific format.
    /// </summary>
    /// <param name="_taxPeriodOfYear">
    /// The value of the tax period from the ICP declaration table.
    /// </param>
    /// <returns>
    /// A container with the <c>ReportingPeriodType</c>, <c>FromDate</c>, and <c>ToDate</c> values.
    /// </returns>
    public static container getReportingParameters(TaxPeriodOfYear _taxPeriodOfYear)
    {
        EUSalesListReportingPeriodType reportingPeriodType;
        TransDate                      fromDate;
        TransDate                      toDate;
        str                            strTaxPeriodOfYear = strRFix(int2str(_taxPeriodOfYear), 5, '0');
        int                            reportingYear      = str2int(subStr(strTaxPeriodOfYear, 1, 2));

        reportingYear += (DateTimeUtil::year(DateTimeUtil::utcNow()) div 100) * 100; // add first 2 digits to year

        switch (subStr(strTaxPeriodOfYear, 3, 3))
        {
            // monthly reporting type
            case Jan:
                fromDate            = mkDate(1, MonthsOfYear::January, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;
            case Feb:
                fromDate            = mkDate(1, MonthsOfYear::February, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;
            case Mar:
                fromDate            = mkDate(1, MonthsOfYear::March, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;
            case Apr:
                fromDate            = mkDate(1, MonthsOfYear::April, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;
            case May:
                fromDate            = mkDate(1, MonthsOfYear::May, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;
            case Jun:
                fromDate            = mkDate(1, MonthsOfYear::June, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;
            case Jul:
                fromDate            = mkDate(1, MonthsOfYear::July, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;
            case Aug:
                fromDate            = mkDate(1, MonthsOfYear::August, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;
            case Sep:
                fromDate            = mkDate(1, MonthsOfYear::September, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;
            case Oct:
                fromDate            = mkDate(1, MonthsOfYear::October, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;
            case Nov:
                fromDate            = mkDate(1, MonthsOfYear::November, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;
            case Dec:
                fromDate            = mkDate(1, MonthsOfYear::December, reportingYear);
                toDate              = dateEndMth(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Monthly;
                break;

            // bi-monthly repoting type
            case JanFeb:
                fromDate            = mkDate(1, MonthsOfYear::January, reportingYear);
                toDate              = dateEndMth(nextMth(dateStartQtr(fromDate)));
                reportingPeriodType = EUSalesListReportingPeriodType::BiMonthly;
                break;
            case AprMay:
                fromDate            = mkDate(1, MonthsOfYear::April, reportingYear);
                toDate              = dateEndMth(nextMth(dateStartQtr(fromDate)));
                reportingPeriodType = EUSalesListReportingPeriodType::BiMonthly;
                break;
            case JulAug:
                fromDate            = mkDate(1, MonthsOfYear::July, reportingYear);
                toDate              = dateEndMth(nextMth(dateStartQtr(fromDate)));
                reportingPeriodType = EUSalesListReportingPeriodType::BiMonthly;
                break;
            case OctNov:
                fromDate            = mkDate(1, MonthsOfYear::October, reportingYear);
                toDate              = dateEndMth(nextMth(dateStartQtr(fromDate)));
                reportingPeriodType = EUSalesListReportingPeriodType::BiMonthly;
                break;

            // quarterly reporting type
            case Q1:
                fromDate            = mkDate(1, MonthsOfYear::January, reportingYear);
                toDate              = dateEndQtr(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Quarterly;
                break;
            case Q2:
                fromDate            = mkDate(1, MonthsOfYear::April, reportingYear);
                toDate              = dateEndQtr(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Quarterly;
                break;
            case Q3:
                fromDate            = mkDate(1, MonthsOfYear::July, reportingYear);
                toDate              = dateEndQtr(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Quarterly;
                break;
            case Q4:
                fromDate            = mkDate(1, MonthsOfYear::October, reportingYear);
                toDate              = dateEndQtr(fromDate);
                reportingPeriodType = EUSalesListReportingPeriodType::Quarterly;
                break;
        }

        return [reportingPeriodType, fromDate, toDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingPeriodCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>FromDate</c>, <c>ToDate</c> and <c>ReportingType</c> values to one country-specific
    /// code for tax period.
    /// </summary>
    /// <param name="_reportingPeriodType">
    /// The value of the reporting type of ICP declaration.
    /// </param>
    /// <param name="_fromDate">
    /// The from date value of the ICP declaration period.
    /// </param>
    /// <returns>
    /// The <c>TaxPeriod</c> value.
    /// </returns>
    public static str getReportingPeriodCode(EUSalesListReportingPeriodType _reportingPeriodType, TransDate _fromDate)
    {
        str reportingPeriodCode;
        str yearStr = subStr(int2str(year(_fromDate)), 3, 2);

        switch (_reportingPeriodType)
        {
            case EUSalesListReportingPeriodType::Monthly:
                switch (mthOfYr(_fromDate))
                {
                    case MonthsOfYear::January :
                        reportingPeriodCode = yearStr + Jan;
                        break;
                    case MonthsOfYear::February :
                        reportingPeriodCode = yearStr + Feb;
                        break;
                    case MonthsOfYear::March :
                        reportingPeriodCode = yearStr + Mar;
                        break;
                    case MonthsOfYear::April :
                        reportingPeriodCode = yearStr + Apr;
                        break;
                    case MonthsOfYear::May :
                        reportingPeriodCode = yearStr + May;
                        break;
                    case MonthsOfYear::June :
                        reportingPeriodCode = yearStr + Jun;
                        break;
                    case MonthsOfYear::July :
                        reportingPeriodCode = yearStr + Jul;
                        break;
                    case MonthsOfYear::August :
                        reportingPeriodCode = yearStr + Aug;
                        break;
                    case MonthsOfYear::September :
                        reportingPeriodCode = yearStr + Sep;
                        break;
                    case MonthsOfYear::October :
                        reportingPeriodCode = yearStr + Oct;
                        break;
                    case MonthsOfYear::November :
                        reportingPeriodCode = yearStr + Nov;
                        break;
                    case MonthsOfYear::December :
                        reportingPeriodCode = yearStr + Dec;
                        break;
                }
                break;

            case EUSalesListReportingPeriodType::BiMonthly:
                switch (mthOfYr(_fromDate))
                {
                    case MonthsOfYear::January :
                        reportingPeriodCode = yearStr + JanFeb;
                        break;
                    case MonthsOfYear::April :
                        reportingPeriodCode = yearStr + AprMay;
                        break;
                    case MonthsOfYear::July :
                        reportingPeriodCode = yearStr + JulAug;
                        break;
                    case MonthsOfYear::October :
                        reportingPeriodCode = yearStr + OctNov;
                        break;
                }
                break;

            case EUSalesListReportingPeriodType::Quarterly:
                switch (mthOfYr(_fromDate))
                {
                    case MonthsOfYear::January :
                        reportingPeriodCode = yearStr + Q1;
                        break;
                    case MonthsOfYear::April :
                        reportingPeriodCode = yearStr + Q2;
                        break;
                    case MonthsOfYear::July :
                        reportingPeriodCode = yearStr + Q3;
                        break;
                    case MonthsOfYear::October :
                        reportingPeriodCode = yearStr + Q4;
                        break;
                }
                break;

            default:
                break;
        }

        return reportingPeriodCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EUSalesListEvat_NL  euSalesListEvat_NL = EUSalesListEvat_NL::construct();

        if (_args)
        {
            if (euSalesListEvat_NL.prompt())
            {
                    euSalesListEvat_NL.runOperation();
            }
        }
        else
        {
            throw error("@SYS4205");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>