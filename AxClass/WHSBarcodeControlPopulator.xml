<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSBarcodeControlPopulator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSBarcodeControlPopulator
{
    #WHSRF
    #WHSWorkExecuteControlElements

    private container fromContainer;
    private Map barcodeScannedValues;
    private Map barcodeUsedScannedValues;
    private WHSRFPassthrough pass;
    private WHSGS1PolicyName policyName;
    private NoYes autoSubmit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSBarcodeControlPopulator construct(container _fromContainer)
    {
        WHSBarcodeControlPopulator controlPopulater = new WHSBarcodeControlPopulator();
        controlPopulater.fromContainer = _fromContainer;
        controlPopulater.pass = WHSRFPassthrough::create(conPeek(_fromContainer, #PassthroughInfo));
        controlPopulater.policyName = WHSRFMenuItemTable::find(controlPopulater.pass.lookupStr(#MenuItem)).GS1PolicyName;
        controlPopulater.autoSubmit = controlPopulater.pass.lookupNum(WHSBarcodeControlConstants::BarcodeAutoSubmit);
        controlPopulater.barcodeScannedValues = WHSGS1BarcodeEAN128Base::getGS1ScannedValuesFromPass(controlPopulater.pass);
        controlPopulater.barcodeUsedScannedValues = WHSGS1BarcodeEAN128Base::getGS1UsedScannedValuesFromPass(controlPopulater.pass);
        return controlPopulater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAutoSubmit</Name>
				<Source><![CDATA[
    internal NoYes parmAutoSubmit(NoYes _autoSubmit = autoSubmit)
    {
        autoSubmit = _autoSubmit;
        return autoSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromContainer</Name>
				<Source><![CDATA[
    internal container parmFromContainer()
    {
        return fromContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromContainer</Name>
				<Source><![CDATA[
    internal void initFromContainer(container _fromContainer)
    {
        fromContainer = _fromContainer;
        pass = WHSRFPassthrough::create(conPeek(fromContainer, #PassthroughInfo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateControls</Name>
				<Source><![CDATA[
    internal boolean populateControls()
    {
        boolean anyControlDefaultedFromScannedValue;

        if (!barcodeScannedValues || barcodeScannedValues.empty())
        {
            return anyControlDefaultedFromScannedValue;
        }

        int controlsEnd = conLen(fromContainer);
        for (int i = #ControlsStart; i <= controlsEnd; ++i)
        {
            container control = conPeek(fromContainer, i);
            str controlName = conPeek(control, #name);
            str controlType = conPeek(control, #controlType);

            if (conPeek(control, #enabled) && controlType != #RFLabel)
            {
                if (controlType == #RFText)
                {
                    anyControlDefaultedFromScannedValue = this.updateTextControl(control, controlName, i) || anyControlDefaultedFromScannedValue;
                }
                else if (controlType == #RFCombobox)
                {
                    anyControlDefaultedFromScannedValue = this.updateComboboxControl(control, controlName, i) || anyControlDefaultedFromScannedValue;
                }
                else if (anyControlDefaultedFromScannedValue && autoSubmit && controlType == #RFButton && controlName == #RFOK)
                {
                    // Simulate OK button click for auto submit
                    this.updateControl(control, i, controlType, #DataButtonClicked);
                }
            }
        }

        if (anyControlDefaultedFromScannedValue)
        {
            this.updateFromContainer();
        }

        return anyControlDefaultedFromScannedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTextControl</Name>
				<Source><![CDATA[
    private boolean updateTextControl(container _control, str _controlName, int _controlIndex)
    {
        boolean isControlDefaultedFromScannedValues = false;
        str controlValue = conPeek(_control, #data);
        str barcodeScannedData = this.getBarcodeScannedData(_controlName);
        WHSGS1PolicyLine policyLine = WHSGS1PolicyLine::findByMDIdentifier(policyName, _controlName);

        if (barcodeScannedData && (!controlValue || policyLine.AllowOverwrite))
        {
            this.updateControlFromScannedValues(_control, _controlName, _controlIndex, #RFText, barcodeScannedData);
            isControlDefaultedFromScannedValues = true;
        }
        return isControlDefaultedFromScannedValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateComboboxControl</Name>
				<Source><![CDATA[
    private boolean updateComboboxControl(container _control, str _controlName, int _controlIndex)
    {
        boolean isControlDefaultedFromScannedValues = false;
        str controlValue = conPeek(_control, #data);
        var selectedValue = conPeek(_control, #selected);
        str barcodeScannedData = this.getBarcodeScannedData(_controlName);
        WHSGS1PolicyLine policyLine = WHSGS1PolicyLine::findByMDIdentifier(policyName, _controlName);

        if (barcodeScannedData && (!selectedValue || policyLine.AllowOverwrite))
        {
            this.updateControlFromScannedValues(_control, _controlName, _controlIndex, #RFCombobox, barcodeScannedData);
            isControlDefaultedFromScannedValues = true;
        }
        else if (autoSubmit && selectedValue && selectedValue != controlValue)
        {
            this.updateControl(_control, _controlIndex, #RFCombobox, selectedValue);
        }
        return isControlDefaultedFromScannedValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBarcodeScannedData</Name>
				<Source><![CDATA[
    private str getBarcodeScannedData(str _controlName)
    {
        str barcodeScannedData = barcodeScannedValues.exists(_controlName) ? barcodeScannedValues.lookup(_controlName) : '';
        return barcodeScannedData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControlFromScannedValues</Name>
				<Source><![CDATA[
    private void updateControlFromScannedValues(container _control, str _controlName, int _controlIndex, str _controlType, str _barcodeScannedData)
    {
        this.updateControl(_control, _controlIndex, _controlType, _barcodeScannedData);
        barcodeScannedValues.remove(_controlName);
        barcodeUsedScannedValues.insert(_controlName, _barcodeScannedData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateComboBoxControlValue</Name>
				<Source><![CDATA[
    private container updateComboBoxControlValue(container _control, int _controlIndex, str _value)
    {
        _control = conPoke(_control, #data, _value);
        _control = conPoke(_control, #selected, _value);
        return _control;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControl</Name>
				<Source><![CDATA[
    private void updateControl(container _control, int _controlIndex, str _controlType, str _value)
    {
        if (_controlType == #RFCombobox)
        {
            _control = this.updateComboBoxControlValue(_control, _controlIndex, _value);
        }
        else
        {
            _control = conPoke(_control, #data, _value);
        }
        fromContainer = conPoke(fromContainer, _controlIndex, _control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromContainer</Name>
				<Source><![CDATA[
    private void updateFromContainer()
    {
        pass.insert(WHSBarcodeControlConstants::BarcodeScannedValues, ContainerHelper::serialize(barcodeScannedValues.pack()));
        pass.insert(WHSBarcodeControlConstants::BarcodeUsedScannedValues, ContainerHelper::serialize(barcodeUsedScannedValues.pack()));
        fromContainer = conPoke(fromContainer, #PassthroughInfo, pass.pack());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>