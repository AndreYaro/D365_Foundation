<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrApplicableResourceQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WrkCtrApplicableResourceQuery</c> class composes a query that will result in the resources that
///    at some point in the given date interval satisfies all the requirements.
/// </summary>
public class WrkCtrApplicableResourceQuery
{
    WrkCtrActivityRequirementSet            wrkCtrActivityRequirementSet;
    TransDate                               searchFromDate;
    TransDate                               searchToDate;
    InventSiteId                            siteId;
    boolean                                 jobSchedRequirements;
    boolean                                 operationSchedRequirements;
    boolean                                 retrieveGroups;
    Query                                   query;
    Set                                     setSubTypeTables;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSubTypeTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a specified table to the set of sub types, if the corresponding configuration key is enabled.
    /// </summary>
    /// <param name="_tableId">
    ///    The table to add.
    /// </param>
    /// <returns>
    ///    true if the table was added; otherwise, false.
    /// </returns>
    protected boolean addSubTypeTable(tableId _tableId)
    {
        DictTable   dictTable = new DictTable(_tableId);
        boolean     result    = isConfigurationkeyEnabled(dictTable.configurationKeyId());

        if (result)
        {
            if (!setSubTypeTables)
            {
                setSubTypeTables = new Set(typeOf(_tableId));
            }

            setSubTypeTables.add(_tableId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubTypeTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a specified table from the given <c>QueryRun</c> object.
    /// </summary>
    /// <param name="_subTypeQueryRun">
    ///    The <c>QueryRun</c> object.
    /// </param>
    /// <param name="_tableId">
    ///    The table to retrieve.
    /// </param>
    /// <returns>
    ///    A <c>Common</c> record.
    /// </returns>
    protected Common getSubTypeTable(
        QueryRun _subTypeQueryRun,
        tableId  _tableId)
    {
        Common common;

        if (setSubTypeTables.in(_tableId))
        {
            common = _subTypeQueryRun.get(_tableId);
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the object.
    /// </summary>
    protected void init()
    {
        this.addSubTypeTable(tableNum(WrkCtrActivityCapabilityRequirement));
        this.addSubTypeTable(tableNum(WrkCtrActivityCertificateRequirement));
        this.addSubTypeTable(tableNum(WrkCtrActivityCourseRequirement));
        this.addSubTypeTable(tableNum(WrkCtrActivityResourceRequirement));
        this.addSubTypeTable(tableNum(WrkCtrActivityResourceGroupRequirement));
        this.addSubTypeTable(tableNum(WrkCtrActivitySkillRequirement));
        this.addSubTypeTable(tableNum(WrkCtrActivityResourceTypeRequirement));
        this.addSubTypeTable(tableNum(WrkCtrActivityPersonTitleRequirement));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJobSchedRequirements</Name>
				<Source><![CDATA[
        public boolean parmJobSchedRequirements(boolean _jobSchedRequirements = jobSchedRequirements)
    {
        jobSchedRequirements = _jobSchedRequirements;
        return jobSchedRequirements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOperationSchedRequirements</Name>
				<Source><![CDATA[
        public boolean parmOperationSchedRequirements(boolean _operationSchedRequirements = operationSchedRequirements)
    {
        operationSchedRequirements = _operationSchedRequirements;
        return operationSchedRequirements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetrieveGroups</Name>
				<Source><![CDATA[
        public boolean parmRetrieveGroups(boolean _retrieveGroups = retrieveGroups)
    {
        retrieveGroups = _retrieveGroups;
        return retrieveGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchFromDate</Name>
				<Source><![CDATA[
        public TransDate parmSearchFromDate(TransDate _searchFromDate = searchFromDate)
    {
        searchFromDate = _searchFromDate;
        return searchFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchToDate</Name>
				<Source><![CDATA[
        public TransDate parmSearchToDate(TransDate _searchToDate = searchToDate)
    {
        searchToDate = _searchToDate;
        return searchToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSiteId</Name>
				<Source><![CDATA[
        public InventSiteId parmSiteId(InventSiteId _siteId = siteId)
    {
        siteId = _siteId;
        return siteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWrkCtrActivityRequirementSet</Name>
				<Source><![CDATA[
        public WrkCtrActivityRequirementSet parmWrkCtrActivityRequirementSet(WrkCtrActivityRequirementSet _wrkCtrActivityRequirementSet = wrkCtrActivityRequirementSet)
    {
        wrkCtrActivityRequirementSet = _wrkCtrActivityRequirementSet;
        return wrkCtrActivityRequirementSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query that will result in the resources that at some point in the given date interval
    /// satisfies all the requirements.
    /// </summary>
    /// <param name="_forceReBuild">
    /// A Boolean value that indicates if the query must be rebuilt; optional.
    /// </param>
    /// <returns>
    /// A <c>Query</c> that is based on the <c>WrkCtrTable</c> table as primary data source.
    /// </returns>
    public Query query(boolean _forceReBuild = false)
    {
        WrkCtrActivityCapabilityRequirement     wrkCtrActivityCapabilityRequirement;
        WrkCtrActivityCertificateRequirement    wrkCtrActivityCertificateRequirement;
        WrkCtrActivityCourseRequirement         wrkCtrActivityCourseRequirement;
        WrkCtrActivityResourceRequirement       wrkCtrActivityResourceRequirement;
        WrkCtrActivityResourceGroupRequirement  wrkCtrActivityResourceGroupRequirement;
        WrkCtrActivitySkillRequirement          wrkCtrActivitySkillRequirement;
        WrkCtrActivityResourceTypeRequirement   wrkCtrActivityResourceTypeRequirement;
        WrkCtrActivityPersonTitleRequirement    wrkCtrActivityPersonTitleRequirement;
        QueryBuildDataSource                    qbdsWrkCtrTable;
        QueryBuildDataSource                    qbdsWrkCtrResourceGroupResource;
        QueryBuildDataSource                    qbdsWrkCtrResourceGroup;
        Query                                   subTypesQuery;
        QueryRun                                subTypesQueryRun;

        if (   !query
            || _forceReBuild)
        {
            this.init();

            // Initialize query from WrkCtrTable
            query = new Query();

            // Set date effectiveness to range to ensure that tables using the dateeffectiveness framework are filtered correctly
            query.validTimeStateDateTimeRange(DateTimeUtil::newDateTime(searchFromDate,0), DateTimeUtil::newDateTime(searchToDate,Global::timeMax()));

            if (retrieveGroups)
            {
                qbdsWrkCtrResourceGroup = query.addDataSource(tableNum(WrkCtrResourceGroup));
                qbdsWrkCtrResourceGroup.fields().clearFieldList();
                qbdsWrkCtrResourceGroup.fields().addField(fieldNum(WrkCtrResourceGroup,WrkCtrId));

                qbdsWrkCtrResourceGroupResource = qbdsWrkCtrResourceGroup.addDataSource(tableNum(WrkCtrResourceGroupResource));
                qbdsWrkCtrResourceGroupResource.joinMode(JoinMode::ExistsJoin);
                qbdsWrkCtrResourceGroupResource.addLink(fieldNum(WrkCtrResourceGroup,RecId),fieldNum(WrkCtrResourceGroupResource,ResourceGroup));

                qbdsWrkCtrTable = qbdsWrkCtrResourceGroupResource.addDataSource(tableNum(WrkCtrTable));
                qbdsWrkCtrTable.joinMode(JoinMode::ExistsJoin);
                qbdsWrkCtrTable.addLink(fieldNum(WrkCtrResourceGroupResource,WrkCtrId),fieldNum(WrkCtrTable,WrkCtrId));
            }
            else
            {
                qbdsWrkCtrTable = query.addDataSource(tableNum(WrkCtrTable));
            }

            // Only include individual resources
            qbdsWrkCtrTable.addRange(fieldNum(WrkCtrTable,IsIndividualResource)).value(queryValue(NoYes::Yes));

            if (siteId)
            {
                // Add limitation on site
                if (!qbdsWrkCtrResourceGroupResource)
                {
                    qbdsWrkCtrResourceGroupResource = qbdsWrkCtrTable.addDataSource(tableNum(WrkCtrResourceGroupResource));
                    qbdsWrkCtrResourceGroupResource.joinMode(JoinMode::ExistsJoin);
                    qbdsWrkCtrResourceGroupResource.addLink(fieldNum(WrkCtrTable,WrkCtrId),fieldNum(WrkCtrResourceGroupResource,WrkCtrId));
                }

                if (!qbdsWrkCtrResourceGroup)
                {
                    qbdsWrkCtrResourceGroup = qbdsWrkCtrResourceGroupResource.addDataSource(tableNum(WrkCtrResourceGroup));
                    qbdsWrkCtrResourceGroup.joinMode(JoinMode::ExistsJoin);
                    qbdsWrkCtrResourceGroup.addLink(fieldNum(WrkCtrResourceGroupResource,ResourceGroup),fieldNum(WrkCtrResourceGroup,RecId));
                }
                qbdsWrkCtrResourceGroup.addRange(fieldNum(WrkCtrResourceGroup,SiteId)).value(queryValue(siteId));
            }

            // only include resource groups that are not work cells
            if (qbdsWrkCtrResourceGroup)
            {
                qbdsWrkCtrResourceGroup.addRange(fieldNum(WrkCtrResourceGroup,IsWorkCell)).value(queryValue(NoYes::No));
            }
            else
            {
                qbdsWrkCtrResourceGroupResource = qbdsWrkCtrTable.addDataSource(tableNum(WrkCtrResourceGroupResource));
                qbdsWrkCtrResourceGroupResource.joinMode(JoinMode::NoExistsJoin);
                qbdsWrkCtrResourceGroupResource.addLink(fieldNum(WrkCtrTable,WrkCtrId),fieldNum(WrkCtrResourceGroupResource,WrkCtrId));

                qbdsWrkCtrResourceGroup = qbdsWrkCtrResourceGroupResource.addDataSource(tableNum(WrkCtrResourceGroup));
                qbdsWrkCtrResourceGroup.joinMode(JoinMode::ExistsJoin);
                qbdsWrkCtrResourceGroup.addLink(fieldNum(WrkCtrResourceGroupResource,ResourceGroup),fieldNum(WrkCtrResourceGroup,RecId));
                qbdsWrkCtrResourceGroup.addRange(fieldNum(WrkCtrResourceGroup,IsWorkCell)).value(queryValue(NoYes::Yes));
            }

            subTypesQuery = this.subTypesQuery();
            if (subTypesQuery)
            {
                boolean buildResourceQueryForCapability;
                boolean isCapabilityResourceTempTableV2FlightEnabled = WrkCtrApplicableResourcesCapabilityResourceTempTableV2Flight::instance().isEnabled();
                subTypesQueryRun = new QueryRun(subTypesQuery);

                while (subTypesQueryRun.next())
                {
                    WrkCtrActivityRequirement wrkCtrActivityRequirement = subTypesQueryRun.get(tableNum(WrkCtrActivityRequirement));

                    if (this.mustIncludeActivitySubTypes(wrkCtrActivityRequirement))
                    {
                        wrkCtrActivityCapabilityRequirement    = this.getSubTypeTable(subTypesQueryRun,tableNum(WrkCtrActivityCapabilityRequirement));
                        wrkCtrActivityCertificateRequirement   = this.getSubTypeTable(subTypesQueryRun,tableNum(WrkCtrActivityCertificateRequirement));
                        wrkCtrActivityCourseRequirement        = this.getSubTypeTable(subTypesQueryRun,tableNum(WrkCtrActivityCourseRequirement));
                        wrkCtrActivityResourceRequirement      = this.getSubTypeTable(subTypesQueryRun,tableNum(WrkCtrActivityResourceRequirement));
                        wrkCtrActivityResourceGroupRequirement = this.getSubTypeTable(subTypesQueryRun,tableNum(WrkCtrActivityResourceGroupRequirement));
                        wrkCtrActivitySkillRequirement         = this.getSubTypeTable(subTypesQueryRun,tableNum(WrkCtrActivitySkillRequirement));
                        wrkCtrActivityResourceTypeRequirement  = this.getSubTypeTable(subTypesQueryRun,tableNum(WrkCtrActivityResourceTypeRequirement));
                        wrkCtrActivityPersonTitleRequirement   = this.getSubTypeTable(subTypesQueryRun,tableNum(WrkCtrActivityPersonTitleRequirement));

                        // Have the subtype add itself as limitation to the query
                        wrkCtrActivityRequirement.determineSubtype(
                            wrkCtrActivityCapabilityRequirement,
                            wrkCtrActivityCertificateRequirement,
                            wrkCtrActivityCourseRequirement,
                            wrkCtrActivityResourceRequirement,
                            wrkCtrActivityResourceGroupRequirement,
                            wrkCtrActivitySkillRequirement,
                            wrkCtrActivityResourceTypeRequirement,
                            wrkCtrActivityPersonTitleRequirement).limitResourceQuery(qbdsWrkCtrTable,searchFromDate,searchToDate);

                        if (isCapabilityResourceTempTableV2FlightEnabled && wrkCtrActivityCapabilityRequirement)
                        {
                            buildResourceQueryForCapability = true;
                        }
                    }
                }

                if (buildResourceQueryForCapability)
                {
                    WrkCtrActivityCapabilityRequirement::buildResourceQuery(qbdsWrkCtrTable);
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeActivitySubTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if activity subtypes must be included into the query as limitations.
    /// </summary>
    /// <param name = "_wrkCtrActivityRequirement">An instance of the <c>WrkCtrActivityRequirement</c>.</param>
    /// <returns>true if activity subtypes must be included into the query; otherwise, false.</returns>
    protected boolean mustIncludeActivitySubTypes(WrkCtrActivityRequirement _wrkCtrActivityRequirement)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTypesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query of sub type requirements.
    /// </summary>
    /// <returns>
    /// A <c>Query</c> that is based on the <c>WrkCtrActivityRequirement</c> table as primary data source.
    /// </returns>
    protected Query subTypesQuery()
    {
        Query                   subTypesQuery;
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    qbdsSubType;
        SetEnumerator           se;
        TableId                 tableId;
        FieldId                 fieldId;

        if (   setSubTypeTables
            && setSubTypeTables.elements())
        {
            subTypesQuery = new Query();
            qbds          = subTypesQuery.addDataSource(tableNum(WrkCtrActivityRequirement));

            qbds.addRange(fieldNum(WrkCtrActivityRequirement,ActivityRequirementSet)).value(queryValue(wrkCtrActivityRequirementSet.RecId));

            // job scheduled
            if (jobSchedRequirements)
            {
                qbds.addRange(fieldNum(WrkCtrActivityRequirement,UsedForJobScheduling)).value(queryValue(NoYes::Yes));
            }

            // operation scheduled
            if (operationSchedRequirements)
            {
                qbds.addRange(fieldNum(WrkCtrActivityRequirement,UsedForOperationScheduling)).value(queryValue(NoYes::Yes));
            }

            // add outer joins for all active sub types
            se = setSubTypeTables.getEnumerator();
            while (se.moveNext())
            {
                tableId = se.current();
                fieldId = fieldName2id(tableId,identifierStr(ActivityRequirement));

                if (fieldId)
                {
                    qbdsSubType = qbds.addDataSource(tableId);
                    qbdsSubType.joinMode(JoinMode::OuterJoin);
                    qbdsSubType.fetchMode(QueryFetchMode::One2One);
                    qbdsSubType.addLink(fieldNum(WrkCtrActivityRequirement,RecId),fieldId);
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }

        return subTypesQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WrkCtrApplicableResourceQuery construct()
    {
        return new WrkCtrApplicableResourceQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WrkCtrApplicableResourceQuery</c> object.
    /// </summary>
    /// <param name="_wrkCtrActivityRequirementSet">
    /// A <c>WrkCtrActivityRequirementSet</c> table buffer.
    /// </param>
    /// <param name="_searchFromDate">
    /// The first date to search for resources.
    /// </param>
    /// <param name="_searchToDate">
    /// The last date to search for resources.
    /// </param>
    /// <param name="_siteId">
    /// The ID of the site to search for resources on. If blank the search is not limited to resources on a
    /// specific site.
    /// </param>
    /// <param name="_jobSchedRequirements">
    /// true if the activity requirements must have the <c>UsedForJobScheduling</c> value to true to be
    /// included as filters in the query; otherwise, false.
    /// </param>
    /// <param name="_operationSchedRequirements">
    /// true if the activity requirements must have the <c>UsedForOperationScheduling</c> value set to true
    /// to be included as filters in the query; otherwise, false.
    /// </param>
    /// <param name="_retrieveGroups">
    /// true if the resource groups should be returned; otherwise, false.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WrkCtrApplicableResourceQuery</c> class.
    /// </returns>
    public static WrkCtrApplicableResourceQuery newStandard(
        WrkCtrActivityRequirementSet _wrkCtrActivityRequirementSet,
        TransDate                    _searchFromDate             = dateNull(),
        TransDate                    _searchToDate               = maxDate(),
        InventSiteId                 _siteId                     = '',
        boolean                      _jobSchedRequirements       = false,
        boolean                      _operationSchedRequirements = false,
        boolean                      _retrieveGroups             = false)
    {
        WrkCtrApplicableResourceQuery   wrkCtrApplicableResourceQuery = WrkCtrApplicableResourceQuery::construct();

        wrkCtrApplicableResourceQuery.parmWrkCtrActivityRequirementSet(_wrkCtrActivityRequirementSet);
        wrkCtrApplicableResourceQuery.parmSearchFromDate(_searchFromDate);
        wrkCtrApplicableResourceQuery.parmSearchToDate(_searchToDate);
        wrkCtrApplicableResourceQuery.parmSiteId(_siteId);
        wrkCtrApplicableResourceQuery.parmJobSchedRequirements(_jobSchedRequirements);
        wrkCtrApplicableResourceQuery.parmOperationSchedRequirements(_operationSchedRequirements);
        wrkCtrApplicableResourceQuery.parmRetrieveGroups(_retrieveGroups);

        return wrkCtrApplicableResourceQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>