<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementChildCreator_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchAgreementChildCreator_PSN</c> class is used to create a child purchase
/// agreement by copying the data from parent record(s) to child record(s).
/// </summary>
class PurchAgreementChildCreator_PSN extends RunBase
{
    PurchAgreementHeader    purchAgreementHeader;
    PurchAgreementHeader    childPurchAgreementHeader;
    recId                   childPurchAgreementHeaderRecId;
    VendTable               vendTable;
    boolean                 isVendAccountDifferent;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyAgreementHeaderDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the data of the <c>AgreementHeaderDefault</c> table record from the parent
    /// purchase agreement to the child purchase agreement.
    /// </summary>
    private void copyAgreementHeaderDefault()
    {
        AgreementHeaderDefault localAgreementHeaderDefault;
        AgreementHeaderDefault sourceAgreementHeaderDefault;

        select firstonly sourceAgreementHeaderDefault
            where sourceAgreementHeaderDefault.AgreementHeader == this.parmPurchAgreementHeader().RecId;

        localAgreementHeaderDefault.data(sourceAgreementHeaderDefault);
        localAgreementHeaderDefault.AgreementHeader = childPurchAgreementHeaderRecId;

        localAgreementHeaderDefault.insert();

        if (isVendAccountDifferent)
        {
            AgreementHeaderDefault::updateContactInfoForContractorChange(childPurchAgreementHeaderRecId, vendTable);
            AgreementHeaderDefault::updateAddressInfoForContractorChange(childPurchAgreementHeaderRecId, vendTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPurchAgreementDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the data of the <c>PurchAgreementHeaderDefault</c> table record from the parent
    /// purchase agreement to the child purchase agreement.
    /// </summary>
    private void copyPurchAgreementDefault()
    {
        PurchAgreementHeaderDefault localPurchAgreementHeaderDefault;
        PurchAgreementHeaderDefault sourcePurchAgreementHeaderDefault;

        select firstonly sourcePurchAgreementHeaderDefault
            where sourcePurchAgreementHeaderDefault.PurchaseAgreementHeader == this.parmPurchAgreementHeader().RecId;

        localPurchAgreementHeaderDefault.data(sourcePurchAgreementHeaderDefault);
        localPurchAgreementHeaderDefault.PurchaseAgreementHeader = childPurchAgreementHeaderRecId;

        localPurchAgreementHeaderDefault.insert();

        if (isVendAccountDifferent)
        {
            PurchAgreementHeaderDefault::updateInvoiceAccountForContractorChange(childPurchAgreementHeaderRecId, vendTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPurchAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the data of the <c>PurchAgreementHeader</c> table record from the parent
    /// purchase agreement to the child purchase agreement.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Creation has been canceled.
    /// </exception>
    private void copyPurchAgreementHeader()
    {
        purchAgreementHeader        sourcePurchAgreementHeader;
        NumberSeq                   num;
        PurchAgreementId            tmpPurchAgreementId;

        num = NumberSeq::newGetNum(PurchParameters::numRefPurchAgreementId(), true);
        tmpPurchAgreementId = num.num();

        if (PurchAgreementHeader::findAgreementId(tmpPurchAgreementId).RecId != 0)
        {
            num.abort();
            throw error("@SYS23020");
        }

        num.used();

        select firstonly sourcePurchAgreementHeader
            where sourcePurchAgreementHeader.RecId == this.parmPurchAgreementHeader().RecId;

        childPurchAgreementHeader.data(sourcePurchAgreementHeader);

        childPurchAgreementHeader.AgreementState                = AgreementState::OnHold;
        childPurchAgreementHeader.PurchNumberSequence           = tmpPurchAgreementId;
        childPurchAgreementHeader.ParentPurchAgreementID_PSN    = sourcePurchAgreementHeader.RecId;

        childPurchAgreementHeader.insert();

        childPurchAgreementHeaderRecId  = childPurchAgreementHeader.RecId;

        if (isVendAccountDifferent)
        {
            PurchAgreementHeader::updateVendorForContractorChange(childPurchAgreementHeaderRecId, vendTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChildPurchaseAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a child purchase agreement record.
    /// </summary>
    /// <returns>
    /// The record ID of the child purchase agreement record created.
    /// </returns>
    public recId createChildPurchaseAgreement()
    {
        isVendAccountDifferent = purchAgreementHeader.VendAccount != vendTable.AccountNum;

        try
        {
            ttsBegin;
            this.copyPurchAgreementHeader();
            this.copyAgreementHeaderDefault();
            this.copyPurchAgreementDefault();
            this.updateAgreementStateOfParent();
            ttsCommit;
        }
        catch (Exception::Error)
        {
            ttsAbort;
        }

        return childPurchAgreementHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildPurchAgreementHeader</Name>
				<Source><![CDATA[
        public PurchAgreementHeader parmChildPurchAgreementHeader(PurchAgreementHeader _purchAgreementHeader = childPurchAgreementHeader)
    {
        childPurchAgreementHeader = _purchAgreementHeader;

        return childPurchAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchAgreementHeader</Name>
				<Source><![CDATA[
        public PurchAgreementHeader parmPurchAgreementHeader(PurchAgreementHeader _purchAgreementHeader = purchAgreementHeader)
    {
        purchAgreementHeader = _purchAgreementHeader;

        return purchAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendTableChildPurchAgreement</Name>
				<Source><![CDATA[
        public VendTable parmVendTableChildPurchAgreement(VendTable _vendTable = vendTable)
    {
        vendTable = _vendTable;

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAgreementStateOfParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the agreement state field of the parent purchase agreement record.
    /// </summary>
    private void updateAgreementStateOfParent()
    {
        PurchAgreementHeader    parentPurchAgreementHeader;

        parentPurchAgreementHeader = PurchAgreementHeader::find(this.parmPurchAgreementHeader().RecId, true);

        parentPurchAgreementHeader.AgreementState = AgreementState::Effective;
        parentPurchAgreementHeader.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>