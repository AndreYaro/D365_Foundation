<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepreciableAssetsDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetDepreciableAssetsDP_JP</c> class is the data provider for the <c>AssetDepreciableAssets_JP</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(AssetDepreciableAssets_JP)),
    SRSReportParameterAttribute(classStr(AssetDepreciableAssetsContract_JP))
]
class AssetDepreciableAssetsDP_JP extends SrsReportDataProviderPreProcessTempDB
{
    //Tmp Tables
    AssetDepreciableAssetsHeaderTmp_JP  assetDepreciableAssetsHeaderTmp;
    AssetDepreciableAssetsSummaryTmp_JP assetDepreciableAssetsSummaryTmp;
    AssetDepreciableAssetsDetailsTmp_JP assetDepreciableAssetsDetailsTmp;

    // Report parameters
    StartDate                               startDate;
    EndDate                                 endDate;
    NoYesId                                 isBlueReturn;
    NoYesId                                 isNonTaxable;
    AssetId                                 officeBuildingAsset;
    Name                                    printingReport;
    AssetDepreciableAssetsReportType_JP     reportType;
    List                                    regNumbersList;
    LogisticsAddressStateId                 stateId;
    PrintDate                               printDate;
    AssetReportRateDisplayType_JP           rateDisplayType;
    RoundOffType                            roundOffType;
    AssetReportIncludedAssets_JP            includedAssetsType;
    AssetDepreciableAssetsReportMethod_JP   depreciableReportMethod;

    //DP variables
    container                           assetLocationCon;
    AmountCur                           assetValueBeforeStartDate;
    Integer                             flag;
    Counter                             recordCounterByRegNumberAndAddress;
    LogisticsPostalAddress              assetAddress;
    LogisticsAddressCountryRegionId     countryRegionId;
    protected TaxRegistrationNumber taxRegistrationNumberInUse;
    TaxRegistration                     currentTaxRegistration;
    LogisticsLocation                   currentLogisticsLocation;

    AssetTable      assetTable;
    AssetBook       assetBook;
    AssetMajorType  majorType;

    const Integer MoveOutFlag           = 1;
    const Integer MoveIntoFlag          = 2;
    const Integer NormalFlag            = 0;
    const Integer RegistrationNumLength = 13;

    const str Meiji         = '明治';
    const str Taisho        = '大正';
    const str Showa         = '昭和';
    const str Heisei        = '平成';

    const str MeijiNumber   = '1';
    const str TaishoNumber  = '2';
    const str ShowaNumber   = '3';
    const str HeiseiNumber  = '4';

    const str LanguageId            = 'JA';
    const str JapanEraFormat        = 'gg';
    const str JapanYearFormat       = 'yy';
    const str JapanEraYearFormat    = 'ggyy';
    const str JapanYearMonthFormat  = 'ggyy\'年\'MM\'月\'';

    const str JapanMonthFormat              = 'MM';
    const CurrencyCode JPFAReportCurrency   = 'JPY';
    const Integer RowNumPerPage             = 20;

    const str JanFirst      = '01.01.';
    const Integer Zero      = 0;
    const str ZeroString    = '0';
    const str Space         = ' ';
    const str Blank         = '';

    #AssetDepCalculation_JP
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountMST2LocalCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the local currency amount from the specified accounting currency amount.
    /// </summary>
    /// <param name="_amountMST">
    /// The accounting currency amount used to calculate.
    /// </param>
    /// <returns>
    /// A local currency amount that has been calculated from the accounting currency amount.
    /// </returns>
    public AmountCur amountMST2LocalCurrencyAmount(AmountMST _amountMST)
    {
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::current(),
            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        currencyExchangeHelper.parmRoundingRuleType(CurrencyRoundingRuleType::AssetDep_JP);

        return currencyExchangeHelper.calculateAccountingToTransaction(JPFAReportCurrency, _amountMST, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBeginningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the beginning balance for the specified assetId and bookId.
    /// </summary>
    /// <param name="_assetId">
    /// The specified assetId.
    /// </param>
    /// <param name="_bookId">
    /// The specified bookId.
    /// </param>
    /// <returns>
    /// The beginning balance of the specified assetId and bookId combination.
    /// </returns>
    public AmountCur calcBeginningBalance(AssetId _assetId, AssetBookId _bookId)
    {
        AssetTrans assetTrans;

        select sum(AmountMST) from assetTrans
            where assetTrans.AssetId        == _assetId
                && assetTrans.BookId        == _bookId
                && (assetTrans.TransType    == AssetTransType::Acquisition
                    || assetTrans.TransType == AssetTransType::AcquisitionAdj
                    || assetTrans.TransType == AssetTransType::WriteUpAdj
                    || assetTrans.TransType == AssetTransType::WriteDownAdj
                    || assetTrans.TransType == AssetTransType::DisposalSale
                    || assetTrans.TransType == AssetTransType::DisposalScrap
                    || assetTrans.TransType == AssetTransType::Revaluation
                    || assetTrans.TransType == AssetTransType::ProfitLoss)
                && assetTrans.TransDate <= startDate - 1;

        return this.amountMST2LocalCurrencyAmount(assetTrans.AmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertEraToNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the japanese era name to number.
    /// </summary>
    /// <param name="_eraName">
    /// The japanese era name.
    /// </param>
    /// <returns>
    /// The japanese era number.
    /// </returns>
    public str convertEraToNumber(str _eraName)
    {
        str eraNumber;

        switch (_eraName)
        {
            case Meiji:
                eraNumber = MeijiNumber;
                break;

            case Taisho:
                eraNumber = TaishoNumber;
                break;

            case Showa:
                eraNumber = ShowaNumber;
                break;

            case Heisei:
                eraNumber = HeiseiNumber;
                break;
        }

        return eraNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciableAssetsDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the details temporary table for the report data provider.
    /// </summary>
    /// <returns>
    /// The details temporary table for the report data provider.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(AssetDepreciableAssetsDetailsTmp_JP))]
    public AssetDepreciableAssetsDetailsTmp_JP getAssetDepreciableAssetsDetailsTmp()
    {
        return assetDepreciableAssetsDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciableAssetsHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header temporary table for the report data provider.
    /// </summary>
    /// <returns>
    /// The header temporary table for the report data provider.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(AssetDepreciableAssetsHeaderTmp_JP))]
    public AssetDepreciableAssetsHeaderTmp_JP getAssetDepreciableAssetsHeaderTmp()
    {
        return assetDepreciableAssetsHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciableAssetsSummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the summary temporary table for the report data provider.
    /// </summary>
    /// <returns>
    /// The summary temporary table for the report data provider.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(AssetDepreciableAssetsSummaryTmp_JP))]
    public AssetDepreciableAssetsSummaryTmp_JP getAssetDepreciableAssetsSummaryTmp()
    {
        return assetDepreciableAssetsSummaryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets depreciation method.
    /// </summary>
    /// <param name="_assetBook">
    /// Table AssetBook
    /// </param>
    /// <returns>
    /// Return depreciation method.
    /// </returns>
    public AssetDepreciationMethod getDepreciationMethod(AssetBook _assetBook)
    {
        AssetDepreciationMethod     depreciationMethod;
        AssetBook                   assetBookLocal;
        AssetDepreciationProfile    assetDepreciationProfile;

        assetBookLocal = AssetBook::find(_assetBook.AssetId, _assetBook.BookId);

        if (assetBookLocal)
        {
            assetDepreciationProfile = assetBookLocal.depreciationProfile();
            if (assetDepreciationProfile)
            {
                depreciationMethod = assetDepreciationProfile.Method;
            }
        }

        return depreciationMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhoneByContractDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the phone number through the description of contract.
    /// </summary>
    /// <param name="_description">
    /// The description of contract.
    /// </param>
    /// <returns>
    /// The phone number of contract.
    /// </returns>
    public LogisticsElectronicAddressLocator getPhoneByContractDescription(Description _description)
    {
        LogisticsElectronicAddress electronicAddress;

        if (_description)
        {
            select firstOnly Locator from electronicAddress
                where electronicAddress.Description == _description
                    && electronicAddress.Type == LogisticsElectronicAddressMethodType::Phone;
        }
        
        return electronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAssetInReportByLogisticsLocationAndRegNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether the specified asset should be include in the report for the current logistics location and registration number.
    /// </summary>
    /// <param name="_assetTable">
    /// The <c>AssetTable</c> table.
    /// </param>
    /// <param name="_assetBook">
    /// The <c>AssetBook</c> table.
    /// </param>
    /// <returns>
    /// True if the asset should be include in the report for the current logistics location and registration number; otherwise, false.
    /// </returns>
    public boolean includeAssetInReportByLogisticsLocationAndRegNumber(AssetTable _assetTable, AssetBook _assetBook)
    {
        RecId regNumberRecIdOnStartDate;
        RecId regNumberRecIdOnEndDate;
        RecId logisticsLocationRecIdOnStartDate;
        RecId logisticsLocationRecIdOnEndDate;
        boolean ret = true;

        flag = NormalFlag;

        if ((_assetTable.AssetGroupMap_JP::isLumpSum()
                || _assetTable.AssetGroupMap_JP::isLowValue())
            && this.getDepreciationMethod(_assetBook) == AssetDepreciationMethod::EquallyDivided_JP)
        {
            ret = false;
        }

        if (ret && taxRegistrationNumberInUse)
        {
            date theMinDate = dateNull();
            date theMaxDate = maxDate();

            if ((AssetDepreciableAssetsMainReportLocTransfer_JPFlight::instance().isEnabled() && reportType == AssetDepreciableAssetsReportType_JP::Main)
                || (AssetDepreciableAssetsAppended1ReportLocTransfer_JPFlight::instance().isEnabled() && reportType == AssetDepreciableAssetsReportType_JP::AppendedTable1)
                || (AssetDepreciableAssetsAppended2ReportLocTransfer_JPFlight::instance().isEnabled() && reportType == AssetDepreciableAssetsReportType_JP::AppendedTable2))
            {
                regNumberRecIdOnStartDate = _assetTable.assetTaxRegistrationByDate_JP_StartDate(startDate, enddate).RecId;
                regNumberRecIdOnEndDate = _assetTable.assetTaxRegistrationByDate_JP_EndDate(startDate, endDate).RecId;
            }
            else
            {
                regNumberRecIdOnStartDate = _assetTable.assetTaxRegistrationByDate_JP(startDate).RecId;
                regNumberRecIdOnEndDate = _assetTable.assetTaxRegistrationByDate_JP(endDate).RecId;
            }

            ret = false;

            select firstonly validtimestate(theMinDate, theMaxDate) DirPartyLocation, RecId from currentTaxRegistration
                where currentTaxRegistration.RegistrationNumber == taxRegistrationNumberInUse
                    && (currentTaxRegistration.RecId == regNumberRecIdOnStartDate ||
                    currentTaxRegistration.RecId == regNumberRecIdOnEndDate);

            if (currentTaxRegistration)
            {
                ret = true;

                DirPartyLocation dirPartyLocation;
                select firstonly currentLogisticsLocation
                    exists join dirPartyLocation
                    where dirPartyLocation.RecId == currentTaxRegistration.DirPartyLocation
                        && dirPartyLocation.Location == currentLogisticsLocation.RecId;
            
                if (AssetDepreciableAssetsMainReportLocTransfer_JPFlight::instance().isEnabled()
                    && reportType == AssetDepreciableAssetsReportType_JP::Main)
                {
                    flag = NormalFlag;
                }
                else if (AssetDepreciableAssetsAppended1ReportLocTransfer_JPFlight::instance().isEnabled()
                    && reportType == AssetDepreciableAssetsReportType_JP::AppendedTable1
                    &&_assetTable.isTransferHistory(startDate, enddate)
                    && regNumberRecIdOnEndDate == currentTaxRegistration.RecId)
                {
                    flag = MoveIntoFlag;
                }
                else if (AssetDepreciableAssetsAppended2ReportLocTransfer_JPFlight::instance().isEnabled()
                    && reportType == AssetDepreciableAssetsReportType_JP::AppendedTable2
                    &&_assetTable.isTransferHistory(startDate, enddate)
                    && regNumberRecIdOnStartDate == currentTaxRegistration.RecId)
                {
                    flag = MoveOutFlag;     
                } 
                else 
                {
                    if (currentTaxRegistration.RecId == regNumberRecIdOnStartDate
                        && currentTaxRegistration.RecId != regNumberRecIdOnEndDate)
                    {
                        // The case is the asset was moved out from current city during the period
                        flag = MoveOutFlag;
                    }

                    if (regNumberRecIdOnStartDate
                        && regNumberRecIdOnStartDate != currentTaxRegistration.RecId
                        && regNumberRecIdOnEndDate == currentTaxRegistration.RecId)
                    {
                        // The case is the asset was moved into current city during the period
                        flag = MoveIntoFlag;
                    }
                }
            }
        }
        else if (ret)
        {
            regNumberRecIdOnStartDate = _assetTable.assetTaxRegistrationByDate_JP(startDate).RecId;
            logisticsLocationRecIdOnStartDate = _assetTable.assetLogisticsLocationByDate_JP(startDate).RecId;

            regNumberRecIdOnEndDate = _assetTable.assetTaxRegistrationByDate_JP(endDate).RecId;
            logisticsLocationRecIdOnEndDate = _assetTable.assetLogisticsLocationByDate_JP(endDate).RecId;

            if ((AssetDepreciableAssetsMainReportLocTransfer_JPFlight::instance().isEnabled() && reportType == AssetDepreciableAssetsReportType_JP::Main)
                || (AssetDepreciableAssetsAppended1ReportLocTransfer_JPFlight::instance().isEnabled() && reportType == AssetDepreciableAssetsReportType_JP::AppendedTable1)
                || (AssetDepreciableAssetsAppended2ReportLocTransfer_JPFlight::instance().isEnabled() && reportType == AssetDepreciableAssetsReportType_JP::AppendedTable2))
            {
                regNumberRecIdOnStartDate = _assetTable.assetTaxRegistrationByDate_JP_StartDate(startDate, enddate).RecId;
                logisticsLocationRecIdOnStartDate = _assetTable.assetLogisticsLocationByDate_JP_StartDate(startDate, enddate).RecId;

                regNumberRecIdOnEndDate = _assetTable.assetTaxRegistrationByDate_JP_EndDate(startDate, endDate).RecId;
                logisticsLocationRecIdOnEndDate = _assetTable.assetLogisticsLocationByDate_JP_EndDate(startDate, enddate).RecId;
            }
            else
            {
                regNumberRecIdOnStartDate = _assetTable.assetTaxRegistrationByDate_JP(startDate).RecId;
                logisticsLocationRecIdOnStartDate = _assetTable.assetLogisticsLocationByDate_JP(startDate).RecId;

                regNumberRecIdOnEndDate = _assetTable.assetTaxRegistrationByDate_JP(endDate).RecId;
                logisticsLocationRecIdOnEndDate = _assetTable.assetLogisticsLocationByDate_JP(endDate).RecId;
            }

            if ((currentTaxRegistration.RecId != regNumberRecIdOnStartDate
                    || currentLogisticsLocation.RecId != logisticsLocationRecIdOnStartDate)
                && (currentTaxRegistration.RecId != regNumberRecIdOnEndDate
                    || currentLogisticsLocation.RecId != logisticsLocationRecIdOnEndDate))
            {
                ret = false;
            }

            if (AssetDepreciableAssetsMainReportLocTransfer_JPFlight::instance().isEnabled()
                && reportType == AssetDepreciableAssetsReportType_JP::Main)
            {
                flag = NormalFlag;
            }
            else if (AssetDepreciableAssetsAppended1ReportLocTransfer_JPFlight::instance().isEnabled()
                    && reportType == AssetDepreciableAssetsReportType_JP::AppendedTable1
                    &&_assetTable.isTransferHistory(startDate, enddate)
                    && regNumberRecIdOnEndDate == currentTaxRegistration.RecId
                    && logisticsLocationRecIdOnEndDate == currentLogisticsLocation.RecId)
            {
                flag = MoveIntoFlag;
            }
            else if (AssetDepreciableAssetsAppended2ReportLocTransfer_JPFlight::instance().isEnabled()
                    && reportType == AssetDepreciableAssetsReportType_JP::AppendedTable2
                    &&_assetTable.isTransferHistory(startDate, enddate)
                    && regNumberRecIdOnStartDate == currentTaxRegistration.RecId
                    && logisticsLocationRecIdOnStartDate == currentLogisticsLocation.RecId)
            {
                flag = MoveOutFlag;
            }
            else
            {
                if (ret
                    && currentTaxRegistration.RecId == regNumberRecIdOnStartDate
                    && currentLogisticsLocation.RecId == logisticsLocationRecIdOnStartDate
                    && currentTaxRegistration.RecId != regNumberRecIdOnEndDate
                    && currentLogisticsLocation.RecId != logisticsLocationRecIdOnEndDate)
                {
                    // The case is the asset was moved out from current city during the period
                    flag = MoveOutFlag;
                }

                if (ret
                    && regNumberRecIdOnStartDate
                    && regNumberRecIdOnStartDate != currentTaxRegistration.RecId
                    && logisticsLocationRecIdOnStartDate
                    && logisticsLocationRecIdOnStartDate != currentLogisticsLocation.RecId
                    && regNumberRecIdOnEndDate == currentTaxRegistration.RecId
                    && logisticsLocationRecIdOnEndDate == currentLogisticsLocation.RecId)
                {
                    // The case is the asset was moved into current city during the period
                    flag = MoveIntoFlag;
                }
            }
        }

        if (AssetDepreciableAssetsMainReportLocTransfer_JPFlight::instance().isEnabled()
            && (reportType == AssetDepreciableAssetsReportType_JP::Main)
            && (regNumberRecIdOnEndDate != currentTaxRegistration.RecId))
        {
            ret = false;
        }
        if (AssetDepreciableAssetsAppended1ReportLocTransfer_JPFlight::instance().isEnabled()
            && (reportType == AssetDepreciableAssetsReportType_JP::AppendedTable1)
            && (regNumberRecIdOnEndDate != currentTaxRegistration.RecId))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCommonSummaryData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the common data for the summary tmp table.
    /// </summary>
    public void initCommonSummaryData()
    {
        AssetDepreciationMethod depreciationMethod;

        assetDepreciableAssetsSummaryTmp.City = assetAddress.City;
        assetDepreciableAssetsSummaryTmp.StateId = assetAddress.State;
        assetDepreciableAssetsSummaryTmp.StateName = LogisticsAddressState::find(countryRegionId, assetAddress.State).Name;

        depreciationMethod = this.getDepreciationMethod(assetBook);

        if (!assetDepreciableAssetsSummaryTmp.hasSLDepMethod
            && (depreciationMethod == AssetDepreciationMethod::OldStraightLine_JP
                || depreciationMethod == AssetDepreciationMethod::NewStraightLine_JP))
        {
            assetDepreciableAssetsSummaryTmp.hasSLDepMethod = NoYes::Yes;
        }

        if (!assetDepreciableAssetsSummaryTmp.HasDBDepMethod
            && (depreciationMethod == AssetDepreciationMethod::OldDecliningBalance_JP
                || depreciationMethod == AssetDepreciationMethod::NewDecliningBalance200_JP
                || depreciationMethod == AssetDepreciationMethod::NewDecliningBalance250_JP))
        {
            assetDepreciableAssetsSummaryTmp.HasDBDepMethod = NoYes::Yes;
        }

        if (!assetDepreciableAssetsSummaryTmp.IsRentedAsset
            && assetTable.IsRented_JP)
        {
            assetDepreciableAssetsSummaryTmp.IsRentedAsset  = NoYes::Yes;
            assetDepreciableAssetsSummaryTmp.LenderName     = assetTable.LenderName_JP;
        }

        if (!assetDepreciableAssetsSummaryTmp.IsShortenningUsefulLife
            && AssetBook::find(assetBook.AssetId, assetBook.BookId).IsShorteningUsefulLife_JP)
        {
            assetDepreciableAssetsSummaryTmp.IsShortenningUsefulLife = NoYes::Yes;
        }

        if (!assetDepreciableAssetsSummaryTmp.IsTaxactionException
            && assetTable.ExceptionTaxationCode_JP)
        {
            assetDepreciableAssetsSummaryTmp.IsTaxactionException = NoYes::Yes;
        }

        if (!assetDepreciableAssetsSummaryTmp.IsAdditionalDepreciation
            && this.isAcceleratedDepreciation())
        {
            assetDepreciableAssetsSummaryTmp.IsAdditionalDepreciation = NoYes::Yes;
        }

        if (!conFind(assetLocationCon, assetAddress.Street))
        {
            assetLocationCon = conPoke(assetLocationCon, conLen(assetLocationCon) + 1, assetAddress.Street);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBlankRecordsByLogisticsLocationAndRegNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts blank records to the details tmp table.
    /// </summary>
    /// <param name="_noOfBlankRecords">
    /// The number of the blank records that need to be insert.
    /// </param>
    public void insertBlankRecordsByLogisticsLocationAndRegNumber(Integer _noOfBlankRecords)
    {
        int i;

        for (i = 0; i < _noOfBlankRecords; i++)
        {
            assetDepreciableAssetsDetailsTmp.clear();
            assetDepreciableAssetsDetailsTmp.RegistrationNumber = taxRegistrationNumberInUse;
            assetDepreciableAssetsDetailsTmp.LogisticsLocation  = currentLogisticsLocation.RecId;
            assetDepreciableAssetsDetailsTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataToDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into <c>AssetDepreciableAssetsDetailsTmp_JP</c> table.
    /// </summary>
    public void insertDataToDetailsTmp()
    {
        AssetTrans assetTrans;
        AssetTrans assetTransAcquisition;
        AssetTrans assetTransSale;
        AssetTrans assetTransScrap;
        AmountMST assetNBV;
        AmountMST acquireAmountOfLastYear;
        AmountMST consumeAmountOfLastYear;
        AmountMST acquireBalanceOfLastYear;

        assetDepreciableAssetsDetailsTmp.clear();
        assetDepreciableAssetsDetailsTmp.City = assetAddress.City;
        assetDepreciableAssetsDetailsTmp.StateId = assetAddress.State;
        assetDepreciableAssetsDetailsTmp.StateName = LogisticsAddressState::find(countryRegionId, assetAddress.State).Name;
        assetDepreciableAssetsDetailsTmp.AssetCode = assetTable.AssetId;
        assetDepreciableAssetsDetailsTmp.AssetName = assetTable.Name;
        assetDepreciableAssetsDetailsTmp.Type = int2str(enum2int(majorType.AssetType_JP));
        assetDepreciableAssetsDetailsTmp.Quantity = assetTable.Quantity;
        assetDepreciableAssetsDetailsTmp.EraNumber =
            currentUserLanguage() == LanguageId
                ? int2Str(JapaneseDateTimeHelper::getEraNumber(assetBook.AcquisitionDate))
                : Blank;
        assetDepreciableAssetsDetailsTmp.AcquisitionYear =
            currentUserLanguage() == LanguageId
                ? JapaneseDateTimeHelper::getYearStr(assetBook.AcquisitionDate)
                : int2str(year(assetBook.AcquisitionDate));
        assetDepreciableAssetsDetailsTmp.AcquisitionMonth =
            currentUserLanguage() == LanguageId
                ? JapaneseDateTimeHelper::date2str(assetBook.AcquisitionDate, JapanMonthFormat)
                : int2str(mthOfYr(assetBook.AcquisitionDate));

        assetDepreciableAssetsDetailsTmp.UsefullLife = assetBook.ServiceLife;
        assetDepreciableAssetsDetailsTmp.TaxStandardCode = assetTable.ExceptionTaxationCode_JP;

        if (reportType == AssetDepreciableAssetsReportType_JP::AppendedTable1
            || reportType == AssetDepreciableAssetsReportType_JP::Main)
        {
            select sum(AmountMST) from assetTrans
                where assetTrans.AssetId         == assetTable.AssetId
                    && assetTrans.BookId         == assetBook.BookId
                    && ((assetTrans.TransType    == AssetTransType::Acquisition
                        || assetTrans.TransType  == AssetTransType::AcquisitionAdj
                        || assetTrans.TransType  == AssetTransType::WriteUpAdj
                        || assetTrans.TransType  == AssetTransType::WriteDownAdj
                        || assetTrans.TransType  == AssetTransType::Revaluation)
                            && assetTrans.AmountMST > Zero)
                    && assetTrans.TransDate >= startDate
                    && assetTrans.TransDate <= endDate;

            acquireAmountOfLastYear = this.amountMST2LocalCurrencyAmount(assetTrans.AmountMST);
            assetNBV = AssetDepTransMap_JP::calcNetBookValue(assetTable.AssetId, assetBook.BookId, dateNull(), endDate, AssetBookType::ValueModel);

            if (assetNBV && (flag == NormalFlag || flag == MoveIntoFlag))
            {
                if (includedAssetsType == AssetReportIncludedAssets_JP::AdditionalAssets)
                {
                    assetDepreciableAssetsDetailsTmp.AcquisitionCost    = acquireAmountOfLastYear;
                    if ((acquireAmountOfLastYear > Zero && flag == NormalFlag) || flag == MoveIntoFlag)
                    {
                        assetDepreciableAssetsDetailsTmp.AcquisitionCost    = acquireAmountOfLastYear;
                    }
                    else
                    {
                        this.summariseBeginingAndEndingBalanceByType();
                        return;
                    }
                }
                else if (includedAssetsType == AssetReportIncludedAssets_JP::AllAssets)
                {
                    select sum(AmountMST) from assetTrans
                        where assetTrans.AssetId == assetTable.AssetId
                            && assetTrans.BookId == assetBook.BookId
                            && (assetTrans.TransType == AssetTransType::Acquisition
                                || assetTrans.TransType == AssetTransType::AcquisitionAdj
                                || assetTrans.TransType == AssetTransType::WriteUpAdj
                                || assetTrans.TransType == AssetTransType::WriteDownAdj
                                || assetTrans.TransType == AssetTransType::Revaluation)
                            && assetTrans.TransDate >= startDate
                            && assetTrans.TransDate <= endDate;

                    acquireBalanceOfLastYear = this.amountMST2LocalCurrencyAmount(assetTrans.AmountMST);
                    assetDepreciableAssetsDetailsTmp.AcquisitionCost = acquireBalanceOfLastYear + assetValueBeforeStartDate;

                    if (FeatureStateProvider::isFeatureEnabled(AssetDepreciableAssetsUseAssetDepRate_JPFeature::instance()))
                    {
                        AmountMST prevYearAssetNBV = AssetDepTransMap_JP::calcNetBookValue(
                            assetTable.AssetId,
                            assetBook.BookId,
                            dateNull(),
                            startDate - 1,
                            AssetBookType::ValueModel);
                            this.applyAssetDepRate(prevYearAssetNBV);
                    }
                    else
                    {
                        //Price = NBV of current year
                        assetDepreciableAssetsDetailsTmp.Price = this.amountMST2LocalCurrencyAmount(assetNBV);

                        if (assetDepreciableAssetsDetailsTmp.AcquisitionCost > Zero)
                        {
                            assetDepreciableAssetsDetailsTmp.UndepreciatedPecenatage = round(
                                assetDepreciableAssetsDetailsTmp.Price / (assetDepreciableAssetsDetailsTmp.AcquisitionCost), 
                                #UndepreciatedPecenatageRate);
                        }
                    }

                    //Calculated base on parameter exception rate format and exception rate(Molecule && Denominator)
                    assetDepreciableAssetsDetailsTmp.StandardAmountTax = this.processStandardAmount(
                        assetDepreciableAssetsDetailsTmp.Price, 
                        assetTable, 
                        rateDisplayType, 
                        roundOffType);
                }
                //Format the exception rate base on the parameter exception rate format.
                assetDepreciableAssetsDetailsTmp.ExceptionRate      = this.processExceptionRate(assetTable, rateDisplayType);

                if (flag == MoveIntoFlag)
                {
                    acquireAmountOfLastYear                                 += assetValueBeforeStartDate;
                    if (includedAssetsType == AssetReportIncludedAssets_JP::AdditionalAssets)
                    {
                        assetDepreciableAssetsDetailsTmp.AcquisitionCost    =  acquireAmountOfLastYear;
                    }
                }

                if (reportType == AssetDepreciableAssetsReportType_JP::AppendedTable1)
                {
                    // Check if there is any asset trans before last year
                    select firstOnly RecId from assetTrans
                        where assetTrans.AssetId      == assetTable.AssetId
                            && assetTrans.BookId      == assetBook.BookId
                            && assetTrans.TransDate   < startDate;

                    if (!assetTrans.RecId)
                    {
                        if (assetTable.IsSecondHand_JP)
                        {
                            assetDepreciableAssetsDetailsTmp.IsSecondhand = true;
                        }
                        else
                        {
                            assetDepreciableAssetsDetailsTmp.IsNewAcquisition = true;
                        }
                    }
                    else
                    {
                        if (flag == MoveIntoFlag)
                        {
                            assetDepreciableAssetsDetailsTmp.IsTransfer = true;
                        }
                        else
                        {
                            assetDepreciableAssetsDetailsTmp.IsOtherReason = true;
                        }
                    }
                }

                assetDepreciableAssetsDetailsTmp.LogisticsLocation  = currentLogisticsLocation.RecId;
                assetDepreciableAssetsDetailsTmp.RegistrationNumber = taxRegistrationNumberInUse;
                assetDepreciableAssetsDetailsTmp.insert();
                recordCounterByRegNumberAndAddress++;

                if (reportType == AssetDepreciableAssetsReportType_JP::Main)
                {
                    this.summariseAcquiredConsumedAmountByType(acquireAmountOfLastYear, true);

                    if (depreciableReportMethod == AssetDepreciableAssetsReportMethod_JP::ElectronicMethod )
                    {
                        this.summariseAppraisedValueByType(assetDepreciableAssetsDetailsTmp.Price);
                        this.summarisePriceAmountByType(assetDepreciableAssetsDetailsTmp.Price);
                        this.summariseTaxationBaseAmountByType(assetDepreciableAssetsDetailsTmp.StandardAmountTax);
                        this.summariseQuantityByType(assetDepreciableAssetsDetailsTmp.Quantity);
                    }
                }
            }

            assetDepreciableAssetsDetailsTmp.clear();
        }

        if (reportType == AssetDepreciableAssetsReportType_JP::AppendedTable2
            || reportType == AssetDepreciableAssetsReportType_JP::Main)
        {
            assetDepreciableAssetsDetailsTmp.LogisticsLocation  = currentLogisticsLocation.RecId;
            assetDepreciableAssetsDetailsTmp.RegistrationNumber = taxRegistrationNumberInUse;

            select firstOnly RecId from assetTransSale
                    where assetTransSale.AssetId         == assetTable.AssetId
                        && assetTransSale.BookId         == assetBook.BookId
                        && assetTransSale.TransDate      >= startDate
                        && assetTransSale.TransDate      <= endDate
                        && assetTransSale.TransType      == AssetTransType::DisposalSale;

            select firstOnly RecId from assetTransScrap
                    where assetTransScrap.AssetId        == assetTable.AssetId
                        && assetTransScrap.BookId        == assetBook.BookId
                        && assetTransScrap.TransDate     >= startDate
                        && assetTransScrap.TransDate     <= endDate
                        && assetTransScrap.TransType     == AssetTransType::DisposalScrap;

            if (flag == NormalFlag || flag == MoveIntoFlag)
            {
                select sum(AmountMST) from assetTrans
                    where assetTrans.AssetId         == assetTable.AssetId
                        && assetTrans.BookId         == assetBook.BookId
                        && ((assetTrans.TransType    == AssetTransType::Acquisition
                            || assetTrans.TransType  == AssetTransType::AcquisitionAdj
                            || assetTrans.TransType  == AssetTransType::WriteUpAdj
                            || assetTrans.TransType  == AssetTransType::WriteDownAdj
                            || assetTrans.TransType  == AssetTransType::Revaluation)
                                && assetTrans.AmountMST < Zero)
                        && assetTrans.TransDate >= startDate
                        && assetTrans.TransDate <= endDate;
                consumeAmountOfLastYear = this.amountMST2LocalCurrencyAmount(assetTrans.AmountMST);

                select sum(AmountMST) from assetTrans
                    where assetTrans.AssetId         == assetTable.AssetId
                        && assetTrans.BookId         == assetBook.BookId
                        && (assetTrans.TransType     == AssetTransType::Acquisition
                            || assetTrans.TransType  == AssetTransType::AcquisitionAdj
                            || assetTrans.TransType  == AssetTransType::WriteUpAdj
                            || assetTrans.TransType  == AssetTransType::WriteDownAdj
                            || assetTrans.TransType  == AssetTransType::Revaluation)
                        && assetTrans.TransDate >= startDate
                        && assetTrans.TransDate <= endDate;
                acquireBalanceOfLastYear = this.amountMST2LocalCurrencyAmount(assetTrans.AmountMST);

                assetNBV = AssetDepTransMap_JP::calcNetBookValue(assetTable.AssetId, assetBook.BookId, dateNull(), startDate - 1, AssetBookType::ValueModel);
                if ((assetTransSale.RecId
                        || assetTransScrap.RecId)
                    && (flag == MoveIntoFlag || assetNBV == Zero))
                {
                    this.summariseBeginingAndEndingBalanceByType();
                    return;
                }
                if (consumeAmountOfLastYear < Zero || assetTransSale.RecId || assetTransScrap.RecId)
                {
                    if (assetTransSale.RecId || assetTransScrap.RecId)
                    {
                        consumeAmountOfLastYear                             = assetValueBeforeStartDate;
                        assetDepreciableAssetsDetailsTmp.AcquisitionCost    = consumeAmountOfLastYear;
                    }
                    else
                    {
                        assetDepreciableAssetsDetailsTmp.IsConsume          = true;
                        assetDepreciableAssetsDetailsTmp.AcquisitionCost = acquireBalanceOfLastYear + assetValueBeforeStartDate;
                    }
                    if (reportType == AssetDepreciableAssetsReportType_JP::AppendedTable2)
                    {
                        if (assetTransSale.RecId)
                        {
                            assetDepreciableAssetsDetailsTmp.IsSold         = true;
                        }
                        else if (assetTransScrap.RecId)
                        {
                            assetDepreciableAssetsDetailsTmp.IsRuined       = true;
                        }
                        else
                        {
                            assetDepreciableAssetsDetailsTmp.IsOtherReason  = true;
                        }
                    }
                    assetDepreciableAssetsDetailsTmp.insert();
                    recordCounterByRegNumberAndAddress++;
                    if (reportType == AssetDepreciableAssetsReportType_JP::Main)
                    {
                        this.summariseAcquiredConsumedAmountByType(abs(consumeAmountOfLastYear), false);
                    }
                }
            }
            else if (flag == MoveOutFlag && assetValueBeforeStartDate > Zero)
            {
                consumeAmountOfLastYear                             = assetValueBeforeStartDate;
                assetDepreciableAssetsDetailsTmp.AcquisitionCost    = consumeAmountOfLastYear;
                if (reportType == AssetDepreciableAssetsReportType_JP::AppendedTable2)
                {
                    if (assetTransSale.RecId)
                    {
                        assetDepreciableAssetsDetailsTmp.IsSold         = true;
                    }
                    else if (assetTransScrap.RecId)
                    {
                        assetDepreciableAssetsDetailsTmp.IsRuined       = true;
                    }
                    else
                    {
                        assetDepreciableAssetsDetailsTmp.IsTransfer         = true;
                    }
                }
                assetDepreciableAssetsDetailsTmp.insert();
                recordCounterByRegNumberAndAddress++;
                if (reportType == AssetDepreciableAssetsReportType_JP::Main)
                {
                    this.summariseAcquiredConsumedAmountByType(abs(consumeAmountOfLastYear), false);
                }
            }
        }

        this.summariseBeginingAndEndingBalanceByType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataToHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into <c>AssetDepreciableAssetsHeaderTmp_JP</c> table.
    /// </summary>
    public void insertDataToHeaderTmp()
    {
        CompanyInfo companyInfo = CompanyInfo::find();
        LogisticsPostalAddress  postalAddress = companyInfo.postalAddress();
        TaxRegistrationNumber taxRegistrationNumber = TaxRegistration::getTaxRegistrationNumber_JP(postalAddress.Location, postalAddress.CountryRegionId);

        assetDepreciableAssetsHeaderTmp.BusinessItem = companyInfo.BusinessItem_JP;
        assetDepreciableAssetsHeaderTmp.BussinessCommencementDate =
            currentUserLanguage() == LanguageId
                ? JapaneseDateTimeHelper::date2str(companyInfo.BusinessCommencedDate_JP, JapanYearMonthFormat)
                : date2str(companyInfo.BusinessCommencedDate_JP, 321, DateDay::None, DateSeparator::Auto, DateMonth::Digits1or2, DateSeparator::Auto, DateYear::Digits2, DateFlags::FormatAll);
        assetDepreciableAssetsHeaderTmp.BusinessInitialCapital = companyInfo.BusinessInitialCapital_JP;
        assetDepreciableAssetsHeaderTmp.CertifiedTaxAccountant = companyInfo.CertifiedTaxAccountant_JP;
        assetDepreciableAssetsHeaderTmp.CertifiedTaxAccountantPhone = this.getPhoneByContractDescription(companyInfo.CertifiedTaxAccountant_JP);
        assetDepreciableAssetsHeaderTmp.ChargePeason = companyInfo.PersonInCharge_JP;
        assetDepreciableAssetsHeaderTmp.ChargePeasonPhone = this.getPhoneByContractDescription(companyInfo.PersonInCharge_JP);
        assetDepreciableAssetsHeaderTmp.CompanyRepresentative = companyInfo.LegalRepresentative_JP;
        assetDepreciableAssetsHeaderTmp.CompanyRepresentativePhone = this.getPhoneByContractDescription(companyInfo.LegalRepresentative_JP);
        assetDepreciableAssetsHeaderTmp.CompanyAddress = postalAddress.City + Space + postalAddress.Street;
        assetDepreciableAssetsHeaderTmp.CompanyAddressKana = postalAddress.CityKana_JP + Space + postalAddress.StreetKana_JP;
        assetDepreciableAssetsHeaderTmp.CompanyName = companyInfo.Name;
        assetDepreciableAssetsHeaderTmp.CompanyNameKana = companyInfo.PhoneticName;
        assetDepreciableAssetsHeaderTmp.CompanyPhone = companyInfo.phone();
        assetDepreciableAssetsHeaderTmp.CompanyAddressRegNum = subStr(taxRegistrationNumber, 1, RegistrationNumLength);
        assetDepreciableAssetsHeaderTmp.FiscalYear =
            currentUserLanguage() == LanguageId ? JapaneseDateTimeHelper::date2str(dateMthFwd(startDate, 12), 'gg') + JapaneseDateTimeHelper::getYearStr(dateMthFwd(startDate, 12)) : int2str(year(startDate) + 1);
        assetDepreciableAssetsHeaderTmp.PrintDate                   =
            currentUserLanguage() == LanguageId ? JapaneseDateTimeHelper::date2str(printDate) : date2StrUsr(printDate, DateFlags::FormatAll);
        assetDepreciableAssetsHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataToSummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into <c>AssetDepreciableAssetsSummaryTmp_JP</c> table.
    /// </summary>
    public void insertDataToSummaryTmp()
    {
        Addressing      locationOne;
        Addressing      locationTwo;
        Addressing      locationThree;

        // calculate total fields
        assetDepreciableAssetsSummaryTmp.TotalAcquiredBeforeLastYear =
            assetDepreciableAssetsSummaryTmp.StructureAcquiredBeforeLastYear +
            assetDepreciableAssetsSummaryTmp.MachineAcquiredBeforeLastYear +
            assetDepreciableAssetsSummaryTmp.ShipAcquiredBeforeLastYear +
            assetDepreciableAssetsSummaryTmp.AirplaneAcquiredBeforeLastYear +
            assetDepreciableAssetsSummaryTmp.VehiclesAcquiredBeforeLastYear +
            assetDepreciableAssetsSummaryTmp.OfficeHardwareAcquiredBeforeLastYear;

        assetDepreciableAssetsSummaryTmp.TotalCosumedLastYear =
            assetDepreciableAssetsSummaryTmp.StructureCosumedLastYear +
            assetDepreciableAssetsSummaryTmp.MachineCosumedLastYear +
            assetDepreciableAssetsSummaryTmp.ShipCosumedLastYear +
            assetDepreciableAssetsSummaryTmp.AirplaneCosumedLastYear +
            assetDepreciableAssetsSummaryTmp.VehiclesCosumedLastYear +
            assetDepreciableAssetsSummaryTmp.OfficeHardwareCosumedLastYear;

        assetDepreciableAssetsSummaryTmp.TotalAcquiredLastYear =
            assetDepreciableAssetsSummaryTmp.StructureAcquiredLastYear +
            assetDepreciableAssetsSummaryTmp.MachineAcquiredLastYear +
            assetDepreciableAssetsSummaryTmp.ShipAcquiredLastYear +
            assetDepreciableAssetsSummaryTmp.AirplaneAcquiredLastYear +
            assetDepreciableAssetsSummaryTmp.VehiclesAcquiredLastYear +
            assetDepreciableAssetsSummaryTmp.OfficeHardwareAcquiredLastYear;

        assetDepreciableAssetsSummaryTmp.TotalBalance =
            assetDepreciableAssetsSummaryTmp.StructureBalance +
            assetDepreciableAssetsSummaryTmp.MachineBalance +
            assetDepreciableAssetsSummaryTmp.ShipBalance +
            assetDepreciableAssetsSummaryTmp.AirplaneBalance +
            assetDepreciableAssetsSummaryTmp.VehiclesBalance +
            assetDepreciableAssetsSummaryTmp.OfficeHardwareBalance;

        assetDepreciableAssetsSummaryTmp.TotalAppraisedValue =
            assetDepreciableAssetsSummaryTmp.StructureAppraisedValue        +
            assetDepreciableAssetsSummaryTmp.MachineAppraisedValue          +
            assetDepreciableAssetsSummaryTmp.ShipAppraisedValue             +
            assetDepreciableAssetsSummaryTmp.AirplaneAppraisedValue         +
            assetDepreciableAssetsSummaryTmp.VehiclesAppraisedValue         +
            assetDepreciableAssetsSummaryTmp.OfficeHardwareAppraisedValue;

        assetDepreciableAssetsSummaryTmp.TotalMachinePrice  =
            assetDepreciableAssetsSummaryTmp.StructurePrice             +
            assetDepreciableAssetsSummaryTmp.MachinePrice               +
            assetDepreciableAssetsSummaryTmp.ShipMachinePrice           +
            assetDepreciableAssetsSummaryTmp.AirplaneMachinePrice       +
            assetDepreciableAssetsSummaryTmp.VehiclesMachinePrice       +
            assetDepreciableAssetsSummaryTmp.OfficeHardwareMachinePrice;

        assetDepreciableAssetsSummaryTmp.TotalTaxactionBasisAmount =
            assetDepreciableAssetsSummaryTmp.StructureTaxactionBasisAmount      +
            assetDepreciableAssetsSummaryTmp.MachineTaxactionBasisAmount        +
            assetDepreciableAssetsSummaryTmp.ShipTaxactionBasisAmount           +
            assetDepreciableAssetsSummaryTmp.AirplaneTaxactionBasisAmount       +
            assetDepreciableAssetsSummaryTmp.VehiclesTaxactionBasisAmount       +
            assetDepreciableAssetsSummaryTmp.OfficeHardwareTaxactionBasisAmount;

        assetDepreciableAssetsSummaryTmp.IsBlueReturn = isBlueReturn;
        assetDepreciableAssetsSummaryTmp.IsNontaxableAsset = isNonTaxable;

        if (!AssetTable::find(officeBuildingAsset).IsRented_JP)
        {
            assetDepreciableAssetsSummaryTmp.IsOfficeBuildingOwned = NoYes::Yes;
        }

        // asset address
        locationOne = conPeek(assetLocationCon, 1);
        locationTwo = conPeek(assetLocationCon, 2);
        locationThree = conPeek(assetLocationCon, 3);
        assetDepreciableAssetsSummaryTmp.AssetLocation1 = locationOne != ZeroString ? locationOne : Blank;
        assetDepreciableAssetsSummaryTmp.AssetLocation2 = locationTwo != ZeroString ? locationTwo : Blank;
        assetDepreciableAssetsSummaryTmp.AssetLocation3 = locationThree != ZeroString ? locationThree : Blank;

        assetDepreciableAssetsSummaryTmp.RegistrationNumber = taxRegistrationNumberInUse;
        if (currentTaxRegistration.RecId)
        {
            assetDepreciableAssetsSummaryTmp.DepreciationMethod = TaxRegistration::find(currentTaxRegistration.RecId).DepreciationMethod_JP;
        }
        else
        {
            date theMinDate = dateNull();
            date theMaxDate = maxDate();
            TaxRegistration taxRegistrationLocal;
            select firstonly validtimestate(theMinDate, theMaxDate) DepreciationMethod_JP from taxRegistrationLocal
                where taxRegistrationLocal.RegistrationNumber == taxRegistrationNumberInUse;
            assetDepreciableAssetsSummaryTmp.DepreciationMethod = taxRegistrationLocal.DepreciationMethod_JP;
        }
        assetDepreciableAssetsSummaryTmp.LogisticsLocation  = currentLogisticsLocation.RecId;
        assetDepreciableAssetsSummaryTmp.AssetAddressName   = currentLogisticsLocation.Description;

        assetDepreciableAssetsSummaryTmp.insert();

        // Clear the value of table buffer so that process the data of the next city
        assetDepreciableAssetsSummaryTmp.clear();
        assetLocationCon = conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAcceleratedDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Judgement whether fixed assets to use accelerated depreciation.
    /// </summary>
    /// <returns>
    /// Return fixed assets whether to use accelerated depreciation.
    /// </returns>
    public boolean isAcceleratedDepreciation()
    {
        AssetDocumentEntry_JP assetDocumentEntry;
        AssetDocumentTable_JP assetDocumentTable;
        AssetDocumentTrans_JP assetDocumentTrans;
        AssetTrans assetTrans;

        select firstOnly RecId from assetTrans
            where assetTrans.AssetId == assetBook.AssetId
                && assetTrans.BookId == assetBook.BookId
                && assetTrans.TransType == AssetTransType::ExtraordinaryDepreciation
            exists join assetDocumentTrans
                where assetDocumentTrans.RefRecId == assetTrans.RecId
                    && assetDocumentTrans.RefTableId == assetTrans.TableId
            exists join  assetDocumentEntry
                where assetDocumentEntry.RecId == assetDocumentTrans.AssetDocumentEntry_JP
            exists join  assetDocumentTable
                where assetDocumentTable.RecId == assetDocumentEntry.AssetDocumentTable_JP
                    && assetDocumentTable.Type == AssetDocumentType_JP::AssetAcceleratedDepreciation;

        return assetTrans.RecId != Zero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processExceptionRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the exception rate.
    /// </summary>
    /// <param name="_assetTable">
    /// AssetTable
    /// </param>
    /// <param name="_rateDisplayType">
    /// AssetReportRateDisplayType_JP
    /// </param>
    /// <returns>
    /// Return exception rate.
    /// </returns>
    public AssetExceptionRateReport_JP processExceptionRate(
        AssetTable _assetTable,
        AssetReportRateDisplayType_JP _rateDisplayType)
    {
        AssetExceptionRateReport_JP exceptionRate;
        AssetExceptionRateReport_JP rateDenominatorStr;

        if (_rateDisplayType == AssetReportRateDisplayType_JP::OnlyNumerator)
        {
            if (_assetTable.ExceptionTaxationRate_JP)
            {
                exceptionRate = num2str(_assetTable.ExceptionTaxationRate_JP, Zero, numOfDec(_assetTable.ExceptionTaxationRate_JP), Zero, Zero);
            }
        }
        else if (_rateDisplayType == AssetReportRateDisplayType_JP::Fraction)
        {
            if (_assetTable.ExceptionTaxationRate_JP || _assetTable.ExceptionTaxationRateDenominator_JP)
            {
                exceptionRate =
                    strFmt("%1/%2",
                        num2str(_assetTable.ExceptionTaxationRate_JP, Zero, numOfDec(_assetTable.ExceptionTaxationRate_JP), Zero, Zero),
                        num2str(_assetTable.ExceptionTaxationRateDenominator_JP, Zero, numOfDec(_assetTable.ExceptionTaxationRateDenominator_JP), Zero, Zero));
            }
        }
        else
        {
            if (_assetTable.ExceptionTaxationRate_JP || _assetTable.ExceptionTaxationRateDenominator_JP)
            {
                rateDenominatorStr = num2str(_assetTable.ExceptionTaxationRateDenominator_JP, Zero, numOfDec(_assetTable.ExceptionTaxationRateDenominator_JP), Zero, Zero);
                if (strLen(rateDenominatorStr) < 2)
                {
                    rateDenominatorStr = ZeroString + rateDenominatorStr;
                }
                exceptionRate =
                    strFmt("%1%2",
                        num2str(_assetTable.ExceptionTaxationRate_JP, Zero, numOfDec(_assetTable.ExceptionTaxationRate_JP), Zero, Zero),
                        rateDenominatorStr);
            }
        }

        return exceptionRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the parameters before the report is run.
    /// </summary>
    public void processParameters()
    {
        AssetDepreciableAssetsContract_JP   contract = this.parmDataContract();
        YearName                            calendarYearName;

        calendarYearName        = contract.parmCalendarYearName();
        isNonTaxable            = contract.parmIsNonTaxable();
        isBlueReturn            = contract.parmIsBlueReturn();
        officeBuildingAsset     = contract.parmOfficeBuildingAsset();
        reportType              = contract.parmReportType();
        regNumbersList          = contract.parmRegistrationNumbers();
        printDate               = contract.parmPrintDate();
        rateDisplayType         = contract.parmReportRateDisplayType();
        roundOffType            = contract.parmReportRoundMethod();
        includedAssetsType      = contract.parmReportIncludedAssets();
        depreciableReportMethod = contract.parmReportDepreciationMethod();

        startDate   = str2Date(JanFirst + calendarYearName, 123);
        endDate     = DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), startDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        CompanyInfo                 companyInfoLocal = CompanyInfo::find();
        DirPartyLocationRole        dirPartyLocationRoleLocal;
        LogisticsLocationRole       logisticsLocationRoleLocal;
        DirPartyPostalAddressView   dirPartyPostalAddressViewLocal;
        DirPartyLocation            dirPartyLocationLocal;
        date                        theMinDate = dateNull();
        date                        theMaxDate = maxDate();
        utcdatetime                 minDateTime = DateTimeUtil::minValue();
        utcdatetime                 maxDateTime = DateTimeUtil::maxValue();
        ListEnumerator              regNumbersListEnumerator;

        countryRegionId = companyInfoLocal.postalAddress().CountryRegionId;

        // Get parameters from contract
        this.processParameters();

        // Insert header info to temp table
        this.insertDataToHeaderTmp();

        // Fetch all logistics location and registration number combinations of current company
       

        if (regNumbersList)
        {
            regNumbersListEnumerator = regNumbersList.getEnumerator();

            while (regNumbersListEnumerator.moveNext())
            {
                taxRegistrationNumberInUse = regNumbersListEnumerator.current();
                recordCounterByRegNumberAndAddress = Zero;
                this.processSummaryAndDetail();
            }
        }
        else
        {
            while select validtimestate(theMinDate, theMaxDate) currentTaxRegistration
                where currentTaxRegistration.DirPartyLocation == dirPartyLocationLocal.RecId
            {
                taxRegistrationNumberInUse = currentTaxRegistration.RegistrationNumber;
                recordCounterByRegNumberAndAddress  = Zero;
                this.processSummaryAndDetail();
            }
            currentTaxRegistration.clear();
            taxRegistrationNumberInUse = null;

            while select validtimestate(minDateTime, maxDateTime) Location from dirPartyPostalAddressViewLocal 
                group by dirPartyPostalAddressViewLocal.Location
                where dirPartyPostalAddressViewLocal.Party == companyInfoLocal.RecId
                exists join dirPartyLocationRoleLocal
                    where dirPartyLocationRoleLocal.PartyLocation == dirPartyPostalAddressViewLocal.PartyLocation
                exists join logisticsLocationRoleLocal
                    where logisticsLocationRoleLocal.RecId == dirPartyLocationRoleLocal.LocationRole
                        && logisticsLocationRoleLocal.Type == LogisticsLocationRoleType::FixedAsset
                notexists join currentTaxRegistration
                      where currentTaxRegistration.DirPartyLocation == dirPartyPostalAddressViewLocal.Location
            {
                currentLogisticsLocation = LogisticsLocation::find(dirPartyPostalAddressViewLocal.Location);

                // Print for current logistics location and empty registration number combination
                recordCounterByRegNumberAndAddress  = Zero;
                this.processSummaryAndDetail();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStandardAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the standard amount.
    /// </summary>
    /// <param name="_price">
    /// Net book value
    /// </param>
    /// <param name="_assetTable">
    /// Buffer of assetTable of the asset id that need to calculate the standard amount.
    /// </param>
    /// <param name="_rateDisplayType">
    /// Exception rate display type
    /// </param>
    /// <param name="_roundOffType">
    /// Rounding type
    /// </param>
    /// <returns>
    /// Return standard amount.
    /// </returns>
    public AmountMST processStandardAmount(
        AmountMST _price,
        AssetTable _assetTable,
        AssetReportRateDisplayType_JP  _rateDisplayType,
        RoundOffType _roundOffType)
    {
        AmountMST standardAmount;
        Currency currency;

        currency = Currency::find(#CurrencyJPY);

        //Process the value
        if (_assetTable.ExceptionTaxationRate_JP == Zero)
        {
            standardAmount = _price;
        }
        else if (rateDisplayType == AssetReportRateDisplayType_JP::OnlyNumerator)
        {
            standardAmount = _price * _assetTable.ExceptionTaxationRate_JP;
        }
        else
        {
            standardAmount = _price * _assetTable.ExceptionTaxationRate_JP / _assetTable.ExceptionTaxationRateDenominator_JP;
        }

        //Process the round type of standard amount
        if (roundOffType == RoundOffType::Ordinary)
        {
            standardAmount = round(standardAmount, currency.RoundingPrecision);
        }
        else if (roundOffType == RoundOffType::RoundDown)
        {
            standardAmount = roundDownDec(standardAmount, numOfDec(currency.RoundingPrecision));
        }
        else
        {
            standardAmount = roundUpDec(standardAmount, numOfDec(currency.RoundingPrecision));
        }

        if (standardAmount)
        {
            standardAmount = standardAmount - frac(standardAmount);
        }

        return standardAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSummaryAndDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the summary and detail date by city.
    /// </summary>
    /// <param name="_currentCityRecId">
    /// The recId of <c>LogisticsAddressCity</c>.
    /// </param>
    public void processSummaryAndDetail(LogisticsAddressCityRecId _currentCityRecId = 0)
    {
        Query query = this.parmQuery();
        boolean hasSummaryData;

        // Only include assets that are in or before the reporting year.
        QueryBuildDataSource assetBook_qbds = query.dataSourceTable(tableNum(AssetBook));
        SysQuery::findorCreateRange(assetBook_qbds, fieldNum(AssetBook, AcquisitionDate)).value(queryRange(dateNull(), this.endDate));

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            assetTable  = queryRun.get(tableNum(AssetTable));
            assetBook   = queryRun.get(tableNum(AssetBook));
            majorType   = queryRun.get(tableNum(AssetMajorType));

            if (this.includeAssetInReportByLogisticsLocationAndRegNumber(assetTable, assetBook))
            {
                assetValueBeforeStartDate = this.isBookDisposedInPrevPeriod(assetBook) ?
                    0 :
                    this.calcBeginningBalance(assetTable.AssetId, assetBook.BookId);

                if (AssetDepreciableAssetsAppended1ReportAddress_JPFlight::instance().isEnabled())
                {
                    assetAddress = assetTable.assetAddressByEndDate(startDate, endDate);
                }
                else 
                {
                    if (flag == MoveOutFlag)
                    {
                        assetAddress = assetTable.assetAddressByDate_JP(startDate);
                    }
                    else
                    {
                        assetAddress = assetTable.assetAddressByDate_JP(endDate);
                    }
                }

                if (reportType == AssetDepreciableAssetsReportType_JP::Main)
                {
                    this.initCommonSummaryData();
                    hasSummaryData = true;
                }

                if (reportType == AssetDepreciableAssetsReportType_JP::Main
                    && AssetDepreciableAssetsMainReportLocTransfer_JPFlight::instance().isEnabled())
                {
                    this.insertDataToDetailsTmp_Main();
                }
                else if (reportType == AssetDepreciableAssetsReportType_JP::AppendedTable1
                         && AssetDepreciableAssetsAppended1ReportLocTransfer_JPFlight::instance().isEnabled())
                {
                    this.insertDataToDetailsTmp_AppendedTable1();
                }
                else if (reportType == AssetDepreciableAssetsReportType_JP::AppendedTable2
                         && AssetDepreciableAssetsAppended2ReportLocTransfer_JPFlight::instance().isEnabled())
                {
                    this.insertDataToDetailsTmp_AppendedTable2();
                }
                else
                {
                    this.insertDataToDetailsTmp();
                }
            }
        }

        if (recordCounterByRegNumberAndAddress mod RowNumPerPage)
        {
            this.insertBlankRecordsByLogisticsLocationAndRegNumber(RowNumPerPage - (recordCounterByRegNumberAndAddress mod RowNumPerPage));
        }

        if (hasSummaryData)
        {
            this.insertDataToSummaryTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBookDisposedInPrevPeriod</Name>
				<Source><![CDATA[
    private boolean isBookDisposedInPrevPeriod(AssetBook _assetBook)
    {
        return (_assetBook.Status == AssetStatus::Sold
                || _assetBook.Status == AssetStatus::Scrapped)
            && _assetBook.DisposalDate <= startDate - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summariseAcquiredConsumedAmountByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarises the amount to corresponding report asset type.
    /// </summary>
    /// <param name="_acquiredOrConsumedAmount">
    /// The acquired or consumed amount.
    /// </param>
    /// <param name="_isAcquired">
    /// The boolean value to specify if _acquiredOrConsumedAmount is acquired amount.
    /// </param>
    public void summariseAcquiredConsumedAmountByType(
        AmountMST _acquiredOrConsumedAmount,
        boolean _isAcquired)
    {
        switch (majorType.AssetType_JP)
        {
            case AssetType_JP::Structure:
                if (_isAcquired)
                {
                    assetDepreciableAssetsSummaryTmp.StructureAcquiredLastYear += _acquiredOrConsumedAmount;
                }
                else
                {
                    assetDepreciableAssetsSummaryTmp.StructureCosumedLastYear += _acquiredOrConsumedAmount;
                }
                break;

            case AssetType_JP::Machine:
                if (_isAcquired)
                {
                    assetDepreciableAssetsSummaryTmp.MachineAcquiredLastYear += _acquiredOrConsumedAmount;
                }
                else
                {
                    assetDepreciableAssetsSummaryTmp.MachineCosumedLastYear += _acquiredOrConsumedAmount;
                }
                break;

            case AssetType_JP::Ship:
                if (_isAcquired)
                {
                    assetDepreciableAssetsSummaryTmp.ShipAcquiredLastYear += _acquiredOrConsumedAmount;
                }
                else
                {
                    assetDepreciableAssetsSummaryTmp.ShipCosumedLastYear += _acquiredOrConsumedAmount;
                }
                break;

            case AssetType_JP::Airplane:
                if (_isAcquired)
                {
                    assetDepreciableAssetsSummaryTmp.AirplaneAcquiredLastYear += _acquiredOrConsumedAmount;
                }
                else
                {
                    assetDepreciableAssetsSummaryTmp.AirplaneCosumedLastYear += _acquiredOrConsumedAmount;
                }
                break;

            case AssetType_JP::Vehicles:
                if (_isAcquired)
                {
                    assetDepreciableAssetsSummaryTmp.VehiclesAcquiredLastYear += _acquiredOrConsumedAmount;
                }
                else
                {
                    assetDepreciableAssetsSummaryTmp.VehiclesCosumedLastYear += _acquiredOrConsumedAmount;
                }
                break;

            case AssetType_JP::OfficeHardware:
                if (_isAcquired)
                {
                    assetDepreciableAssetsSummaryTmp.OfficeHardwareAcquiredLastYear += _acquiredOrConsumedAmount;
                }
                else
                {
                    assetDepreciableAssetsSummaryTmp.OfficeHardwareCosumedLastYear += _acquiredOrConsumedAmount;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summariseAppraisedValueByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarises the appraised value to corresponding report asset type.
    /// </summary>
    /// <param name="_appraisedValue">
    /// The appraised value
    /// </param>
    public void summariseAppraisedValueByType(AmountMST   _appraisedValue)
    {
        switch (majorType.AssetType_JP)
        {
            case AssetType_JP::Structure:
                assetDepreciableAssetsSummaryTmp.StructureAppraisedValue        += _appraisedValue;
                break;

            case AssetType_JP::Machine:
                assetDepreciableAssetsSummaryTmp.MachineAppraisedValue          += _appraisedValue;
                break;

            case AssetType_JP::Ship:
                assetDepreciableAssetsSummaryTmp.ShipAppraisedValue             += _appraisedValue;
                break;

            case AssetType_JP::Airplane:
                assetDepreciableAssetsSummaryTmp.AirplaneAppraisedValue         += _appraisedValue;
                break;

            case AssetType_JP::Vehicles:
                assetDepreciableAssetsSummaryTmp.VehiclesAppraisedValue         += _appraisedValue;
                break;

            case AssetType_JP::OfficeHardware:
                assetDepreciableAssetsSummaryTmp.OfficeHardwareAppraisedValue   += _appraisedValue;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summariseBeginingAndEndingBalanceByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarises the amount to corresponding report asset type.
    /// </summary>
    public void summariseBeginingAndEndingBalanceByType()
    {
        switch (majorType.AssetType_JP)
        {
            case AssetType_JP::Structure:
                assetDepreciableAssetsSummaryTmp.StructureAcquiredBeforeLastYear
                    += flag == MoveIntoFlag ? Zero : assetValueBeforeStartDate;

                assetDepreciableAssetsSummaryTmp.StructureBalance
                    = assetDepreciableAssetsSummaryTmp.StructureAcquiredBeforeLastYear
                        - assetDepreciableAssetsSummaryTmp.StructureCosumedLastYear
                        + assetDepreciableAssetsSummaryTmp.StructureAcquiredLastYear;
                break;

            case AssetType_JP::Machine:
                assetDepreciableAssetsSummaryTmp.MachineAcquiredBeforeLastYear
                    += (flag == MoveIntoFlag ? Zero : assetValueBeforeStartDate);

                assetDepreciableAssetsSummaryTmp.MachineBalance
                    = assetDepreciableAssetsSummaryTmp.MachineAcquiredBeforeLastYear
                        - assetDepreciableAssetsSummaryTmp.MachineCosumedLastYear
                        + assetDepreciableAssetsSummaryTmp.MachineAcquiredLastYear;
                break;

            case AssetType_JP::Ship:
                assetDepreciableAssetsSummaryTmp.ShipAcquiredBeforeLastYear
                    += (flag == MoveIntoFlag ? Zero : assetValueBeforeStartDate);

                assetDepreciableAssetsSummaryTmp.ShipBalance
                    = assetDepreciableAssetsSummaryTmp.ShipAcquiredBeforeLastYear
                        - assetDepreciableAssetsSummaryTmp.ShipCosumedLastYear
                        + assetDepreciableAssetsSummaryTmp.ShipAcquiredLastYear;
                break;

            case AssetType_JP::Airplane:
                assetDepreciableAssetsSummaryTmp.AirplaneAcquiredBeforeLastYear
                    += (flag == MoveIntoFlag ? Zero : assetValueBeforeStartDate);

                assetDepreciableAssetsSummaryTmp.AirplaneBalance
                    = assetDepreciableAssetsSummaryTmp.AirplaneAcquiredBeforeLastYear
                        - assetDepreciableAssetsSummaryTmp.AirplaneCosumedLastYear
                        + assetDepreciableAssetsSummaryTmp.AirplaneAcquiredLastYear;
                break;

            case AssetType_JP::Vehicles:
                assetDepreciableAssetsSummaryTmp.VehiclesAcquiredBeforeLastYear
                    += (flag == MoveIntoFlag ? Zero : assetValueBeforeStartDate);

                assetDepreciableAssetsSummaryTmp.VehiclesBalance
                    = assetDepreciableAssetsSummaryTmp.VehiclesAcquiredBeforeLastYear
                        - assetDepreciableAssetsSummaryTmp.VehiclesCosumedLastYear
                        + assetDepreciableAssetsSummaryTmp.VehiclesAcquiredLastYear;
                break;

            case AssetType_JP::OfficeHardware:
                assetDepreciableAssetsSummaryTmp.OfficeHardwareAcquiredBeforeLastYear
                    += (flag == MoveIntoFlag ? Zero : assetValueBeforeStartDate);

                assetDepreciableAssetsSummaryTmp.OfficeHardwareBalance
                    = assetDepreciableAssetsSummaryTmp.OfficeHardwareAcquiredBeforeLastYear
                        - assetDepreciableAssetsSummaryTmp.OfficeHardwareCosumedLastYear
                        + assetDepreciableAssetsSummaryTmp.OfficeHardwareAcquiredLastYear;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarisePriceAmountByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarises the price amount to corresponding report asset type.
    /// </summary>
    /// <param name="_priceAmount">
    /// The price amount
    /// </param>
    public void summarisePriceAmountByType(AmountMST   _priceAmount)
    {
        switch (majorType.AssetType_JP)
        {
            case AssetType_JP::Structure:
                assetDepreciableAssetsSummaryTmp.StructurePrice += _priceAmount;
                break;

            case AssetType_JP::Machine:
                assetDepreciableAssetsSummaryTmp.MachinePrice += _priceAmount;
                break;

            case AssetType_JP::Ship:
                assetDepreciableAssetsSummaryTmp.ShipMachinePrice += _priceAmount;
                break;

            case AssetType_JP::Airplane:
                assetDepreciableAssetsSummaryTmp.AirplaneMachinePrice += _priceAmount;
                break;

            case AssetType_JP::Vehicles:
                assetDepreciableAssetsSummaryTmp.VehiclesMachinePrice += _priceAmount;
                break;

            case AssetType_JP::OfficeHardware:
                assetDepreciableAssetsSummaryTmp.OfficeHardwareMachinePrice += _priceAmount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summariseQuantityByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarises the asset quantity to corresponding report asset type.
    /// </summary>
    /// <param name = "_quantity">The quantity of respective asset type.</param>
    public void summariseQuantityByType(AssetQuantity _quantity)
    {
        switch (majorType.AssetType_JP)
        {
            case AssetType_JP::Structure:
                assetDepreciableAssetsSummaryTmp.StructureQuantity += _quantity;
                break;

            case AssetType_JP::Machine:
                assetDepreciableAssetsSummaryTmp.MachineQuantity += _quantity;
                break;

            case AssetType_JP::Ship:
                assetDepreciableAssetsSummaryTmp.ShipQuantity += _quantity;
                break;

            case AssetType_JP::Airplane:
                assetDepreciableAssetsSummaryTmp.AirplaneQuantity += _quantity;
                break;

            case AssetType_JP::Vehicles:
                assetDepreciableAssetsSummaryTmp.VehiclesQuantity += _quantity;
                break;

            case AssetType_JP::OfficeHardware:
                assetDepreciableAssetsSummaryTmp.OfficeHardwareQuantity += _quantity;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summariseTaxationBaseAmountByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarises the taxation base amount to corresponding report asset type.
    /// </summary>
    /// <param name="_taxationBaseAmount">
    /// The taxation base amount.
    /// </param>
    public void summariseTaxationBaseAmountByType(AmountMST   _taxationBaseAmount)
    {
        switch (majorType.AssetType_JP)
        {
            case AssetType_JP::Structure:
                assetDepreciableAssetsSummaryTmp.StructureTaxactionBasisAmount      += _taxationBaseAmount;
                break;

            case AssetType_JP::Machine:
                assetDepreciableAssetsSummaryTmp.MachineTaxactionBasisAmount        += _taxationBaseAmount;
                break;

            case AssetType_JP::Ship:
                assetDepreciableAssetsSummaryTmp.ShipTaxactionBasisAmount           += _taxationBaseAmount;
                break;

            case AssetType_JP::Airplane:
                assetDepreciableAssetsSummaryTmp.AirplaneTaxactionBasisAmount       += _taxationBaseAmount;
                break;

            case AssetType_JP::Vehicles:
                assetDepreciableAssetsSummaryTmp.VehiclesTaxactionBasisAmount       += _taxationBaseAmount;
                break;

            case AssetType_JP::OfficeHardware:
                assetDepreciableAssetsSummaryTmp.OfficeHardwareTaxactionBasisAmount += _taxationBaseAmount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyAssetDepRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets price and percentage according to depreciation rate for asset.
    /// </summary>
    /// <param name = "_prevYearValuation">Asset's previous year valuation value.</param>
    private void applyAssetDepRate(AssetAmount _prevYearValuation)
    {
        const real MinValuationPct = 0.05;

        AssetDepreciationProfile assetDepProfile = assetBook.depreciationProfile();
        AssetDepRate_JP assetDepRate = AssetDepRate_JP::find(
            assetDepProfile.AssetDepRateSchedule_JP,
            assetDepProfile.Method,
            assetBook.ServiceLife);

        // Fixed assets which are not performed depreciation process should show Acquisition amount in that field.
        boolean isApplyAssetDepRate = assetBook.depreciationStarted();

        // Asset acquired during the previous year (here previous year is the year report generated for)
        if (year(assetBook.AcquisitionDate) == year(startDate))
        {
            assetDepreciableAssetsDetailsTmp.UndepreciatedPecenatage = isApplyAssetDepRate ? 
                1 - (round(assetDepRate.DepreciationRate / 2, #UndepreciatedPecenatageRate)) :
                1;

            assetDepreciableAssetsDetailsTmp.Price = this.amountMST2LocalCurrencyAmount(
                assetDepreciableAssetsDetailsTmp.AcquisitionCost * assetDepreciableAssetsDetailsTmp.UndepreciatedPecenatage);
        }
        else // Obtained before the previous year
        {
            assetDepreciableAssetsDetailsTmp.UndepreciatedPecenatage = isApplyAssetDepRate ? 1 - assetDepRate.DepreciationRate : 1;

            assetDepreciableAssetsDetailsTmp.Price = this.amountMST2LocalCurrencyAmount(
                _prevYearValuation * assetDepreciableAssetsDetailsTmp.UndepreciatedPecenatage);
        }

        // If the calculated valuation amount is less than 5% of the acquisition price, 5% of the acquisition price will be the valuation amount"
        if (assetDepreciableAssetsDetailsTmp.Price && 
            assetDepreciableAssetsDetailsTmp.Price < assetDepreciableAssetsDetailsTmp.AcquisitionCost * MinValuationPct)
        {
            assetDepreciableAssetsDetailsTmp.Price = this.amountMST2LocalCurrencyAmount(
                assetDepreciableAssetsDetailsTmp.AcquisitionCost * MinValuationPct);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataToDetailsTmp_Main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into <c>AssetDepreciableAssetsDetailsTmp_JP</c> table for report type main.
    /// </summary>
    internal void insertDataToDetailsTmp_Main()
    {
        AssetTrans assetTrans;
        AssetTrans assetTransAcquisition;
        AssetTrans assetTransSale;
        AssetTrans assetTransScrap;
        AmountMST assetNBV;
        AmountMST acquireAmountOfLastYear;
        AmountMST consumeAmountOfLastYear;
        AmountMST acquireBalanceOfLastYear;
        boolean isAssetDisposedSale = this.isAssetDisposedSale();
        boolean isAssetDisposedScrap = this.isAssetDisposedScrap();

        this.initCommonAssetDepreciableAssetsDetailsTmpData();

        acquireAmountOfLastYear = this.acquireAmountOfLastYear();
        assetNBV = AssetDepTransMap_JP::calcNetBookValue(assetTable.AssetId, assetBook.BookId, dateNull(), endDate, AssetBookType::ValueModel);

        if (assetNBV)
        {
            acquireBalanceOfLastYear = this.acquireBalanceOfLastYear();
            assetDepreciableAssetsDetailsTmp.AcquisitionCost = acquireBalanceOfLastYear + assetValueBeforeStartDate;

            if (FeatureStateProvider::isFeatureEnabled(AssetDepreciableAssetsUseAssetDepRate_JPFeature::instance()))
            {
                AmountMST prevYearAssetNBV = AssetDepTransMap_JP::calcNetBookValue(
                    assetTable.AssetId,
                    assetBook.BookId,
                    dateNull(),
                    startDate - 1,
                    AssetBookType::ValueModel);

                this.applyAssetDepRate(prevYearAssetNBV);
            }
            else
            {
                assetDepreciableAssetsDetailsTmp.Price = this.amountMST2LocalCurrencyAmount(assetNBV);

                if (assetDepreciableAssetsDetailsTmp.AcquisitionCost > Zero)
                {
                    assetDepreciableAssetsDetailsTmp.UndepreciatedPecenatage = round(
                        assetDepreciableAssetsDetailsTmp.Price / (assetDepreciableAssetsDetailsTmp.AcquisitionCost),
                        #UndepreciatedPecenatageRate);
                }
            }

            assetDepreciableAssetsDetailsTmp.StandardAmountTax = this.processStandardAmount(
                assetDepreciableAssetsDetailsTmp.Price,
                assetTable,
                rateDisplayType,
                roundOffType);

            assetDepreciableAssetsDetailsTmp.ExceptionRate = this.processExceptionRate(assetTable, rateDisplayType);

            if (flag == MoveIntoFlag)
            {
                acquireAmountOfLastYear += assetValueBeforeStartDate;
            }

            assetDepreciableAssetsDetailsTmp.insert();
            recordCounterByRegNumberAndAddress++;

            this.summariseAcquiredConsumedAmountByType(acquireAmountOfLastYear, true);

            if (depreciableReportMethod == AssetDepreciableAssetsReportMethod_JP::ElectronicMethod)
            {
                this.summariseAppraisedValueByType(assetDepreciableAssetsDetailsTmp.Price);
                this.summarisePriceAmountByType(assetDepreciableAssetsDetailsTmp.Price);
                this.summariseTaxationBaseAmountByType(assetDepreciableAssetsDetailsTmp.StandardAmountTax);
                this.summariseQuantityByType(assetDepreciableAssetsDetailsTmp.Quantity);
            }
        }

        consumeAmountOfLastYear = this.consumeAmountOfLastYear();
        assetNBV = AssetDepTransMap_JP::calcNetBookValue(assetTable.AssetId, assetBook.BookId, dateNull(), startDate - 1, AssetBookType::ValueModel);
            
        if ((isAssetDisposedSale || isAssetDisposedScrap)
                && (assetNBV == Zero))
        {
            this.summariseBeginingAndEndingBalanceByType();
            return;
        }

        if (consumeAmountOfLastYear < Zero || isAssetDisposedSale || isAssetDisposedScrap)
        {
            if (isAssetDisposedSale || isAssetDisposedScrap)
            {
                consumeAmountOfLastYear = assetValueBeforeStartDate;
                assetDepreciableAssetsDetailsTmp.AcquisitionCost = consumeAmountOfLastYear;
            }
            else
            {
                assetDepreciableAssetsDetailsTmp.IsConsume = true;
                assetDepreciableAssetsDetailsTmp.AcquisitionCost = acquireBalanceOfLastYear + assetValueBeforeStartDate;
            }

            assetDepreciableAssetsDetailsTmp.insert();
            recordCounterByRegNumberAndAddress++;
            this.summariseAcquiredConsumedAmountByType(abs(consumeAmountOfLastYear), false);
        }

        this.summariseBeginingAndEndingBalanceByType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataToDetailsTmp_AppendedTable1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into <c>AssetDepreciableAssetsDetailsTmp_JP</c> table for report type appended table 1.
    /// </summary>
    internal void insertDataToDetailsTmp_AppendedTable1()
    {
        AssetTrans assetTrans;
        AssetTrans assetTransAcquisition;
        AssetTrans assetTransSale;
        AssetTrans assetTransScrap;
        AmountMST assetNBV;
        AmountMST acquireAmountOfLastYear;
        AmountMST consumeAmountOfLastYear;
        AmountMST acquireBalanceOfLastYear;

        if (includedAssetsType == AssetReportIncludedAssets_JP::AdditionalAssets
            && AssetDepreciableAssetsReportAssetSplit_JPFlight::instance().isEnabled())
        {
            // Child asset from split shouldn't be reported in case child asset from a split is not acquired/split in same year as parent asset acquisition.
            // Child asset inherit placed in service date from parent which is always less than acquisition date of child asset.  
            if (year(assetBook.AcquisitionDate) > year(assetBook.UsedFromDate))
            {
                return;
            }                
        }

        this.initCommonAssetDepreciableAssetsDetailsTmpData();

        acquireAmountOfLastYear = this.acquireAmountOfLastYear();
        acquireBalanceOfLastYear = this.acquireBalanceOfLastYear();
        assetNBV = AssetDepTransMap_JP::calcNetBookValue(assetTable.AssetId, assetBook.BookId, dateNull(), endDate, AssetBookType::ValueModel);

        if (assetNBV)
        {
            if (includedAssetsType == AssetReportIncludedAssets_JP::AdditionalAssets)
            {
                if (AssetDepreciableAssetsReportAssetSplit_JPFlight::instance().isEnabled())
                {
                    assetDepreciableAssetsDetailsTmp.AcquisitionCost = acquireBalanceOfLastYear;
                }
                else
                {
                    assetDepreciableAssetsDetailsTmp.AcquisitionCost = acquireAmountOfLastYear;
                }

                if (acquireAmountOfLastYear <= Zero)
                {
                    this.summariseBeginingAndEndingBalanceByType();
                    return;
                }
            }
            else if (includedAssetsType == AssetReportIncludedAssets_JP::AllAssets)
            {
                assetDepreciableAssetsDetailsTmp.AcquisitionCost = acquireBalanceOfLastYear + assetValueBeforeStartDate;

                if (FeatureStateProvider::isFeatureEnabled(AssetDepreciableAssetsUseAssetDepRate_JPFeature::instance()))
                {
                    AmountMST prevYearAssetNBV = AssetDepTransMap_JP::calcNetBookValue(
                        assetTable.AssetId,
                        assetBook.BookId,
                        dateNull(),
                        startDate - 1,
                        AssetBookType::ValueModel);
                    this.applyAssetDepRate(prevYearAssetNBV);
                }
                else
                {
                    assetDepreciableAssetsDetailsTmp.Price = this.amountMST2LocalCurrencyAmount(assetNBV);

                    if (assetDepreciableAssetsDetailsTmp.AcquisitionCost > Zero)
                    {
                        assetDepreciableAssetsDetailsTmp.UndepreciatedPecenatage = round(
                            assetDepreciableAssetsDetailsTmp.Price / (assetDepreciableAssetsDetailsTmp.AcquisitionCost),
                            #UndepreciatedPecenatageRate);
                    }
                }

                assetDepreciableAssetsDetailsTmp.StandardAmountTax = this.processStandardAmount(
                    assetDepreciableAssetsDetailsTmp.Price,
                    assetTable,
                    rateDisplayType,
                    roundOffType);
            }

            assetDepreciableAssetsDetailsTmp.ExceptionRate = this.processExceptionRate(assetTable, rateDisplayType);

            if (flag == MoveIntoFlag)
            {
                acquireAmountOfLastYear += assetValueBeforeStartDate;
                if (includedAssetsType == AssetReportIncludedAssets_JP::AdditionalAssets)
                {
                    assetDepreciableAssetsDetailsTmp.AcquisitionCost = acquireAmountOfLastYear;
                }
            }

            select firstOnly RecId from assetTrans
                where assetTrans.AssetId == assetTable.AssetId
                    && assetTrans.BookId == assetBook.BookId
                    && assetTrans.TransDate < startDate;

            if (!assetTrans.RecId)
            {
                if (assetTable.IsSecondHand_JP)
                {
                    assetDepreciableAssetsDetailsTmp.IsSecondhand = true;
                }
                else
                {
                    assetDepreciableAssetsDetailsTmp.IsNewAcquisition = true;
                }
            }
            else
            {
                if (flag == MoveIntoFlag)
                {
                    assetDepreciableAssetsDetailsTmp.IsTransfer = true;
                }
                else
                {
                    assetDepreciableAssetsDetailsTmp.IsOtherReason = true;
                }
            }

            assetDepreciableAssetsDetailsTmp.insert();
            recordCounterByRegNumberAndAddress++;
        }

        this.summariseBeginingAndEndingBalanceByType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataToDetailsTmp_AppendedTable2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into <c>AssetDepreciableAssetsDetailsTmp_JP</c> table for report type appended table 2.
    /// </summary>
    internal void insertDataToDetailsTmp_AppendedTable2()
    {
        AssetTrans assetTrans;
        AssetTrans assetTransAcquisition;
        AssetTrans assetTransSale;
        AssetTrans assetTransScrap;
        AmountMST assetNBV;
        AmountMST acquireAmountOfLastYear;
        AmountMST consumeAmountOfLastYear;
        AmountMST acquireBalanceOfLastYear;

        this.initCommonAssetDepreciableAssetsDetailsTmpData();
          
        consumeAmountOfLastYear = this.consumeAmountOfLastYear();           
        acquireBalanceOfLastYear = this.acquireBalanceOfLastYear();
        assetNBV = AssetDepTransMap_JP::calcNetBookValue(assetTable.AssetId, assetBook.BookId, dateNull(), startDate - 1, AssetBookType::ValueModel);
            
        if ((this.isAssetDisposedSale() || this.isAssetDisposedScrap()) && (assetNBV == Zero))
        {
            this.summariseBeginingAndEndingBalanceByType();
            return;
        }
            
        if (consumeAmountOfLastYear < Zero || this.isAssetDisposedSale() || this.isAssetDisposedScrap())
        {
            if (this.isAssetDisposedSale() || this.isAssetDisposedScrap())
            {
                consumeAmountOfLastYear = assetValueBeforeStartDate;
                assetDepreciableAssetsDetailsTmp.AcquisitionCost = consumeAmountOfLastYear;
            }
            else
            {
                assetDepreciableAssetsDetailsTmp.IsConsume = true;
                assetDepreciableAssetsDetailsTmp.AcquisitionCost = acquireBalanceOfLastYear + assetValueBeforeStartDate;
            }

            if (flag == MoveOutFlag)
            {
                assetDepreciableAssetsDetailsTmp.IsTransfer = true;
            }
            else if (this.isAssetDisposedSale())
            {
                assetDepreciableAssetsDetailsTmp.IsSold = true;
            }
            else if (this.isAssetDisposedScrap())
            {
                assetDepreciableAssetsDetailsTmp.IsRuined = true;
            }
            else
            {
                assetDepreciableAssetsDetailsTmp.IsOtherReason  = true;
            }

            assetDepreciableAssetsDetailsTmp.insert();
            recordCounterByRegNumberAndAddress++;
        }
        else if (flag == MoveOutFlag)
        {
            assetDepreciableAssetsDetailsTmp.AcquisitionCost = acquireBalanceOfLastYear + assetValueBeforeStartDate;
            assetDepreciableAssetsDetailsTmp.IsTransfer = true;
            assetDepreciableAssetsDetailsTmp.insert();
            recordCounterByRegNumberAndAddress++;
        }

        this.summariseBeginingAndEndingBalanceByType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCommonAssetDepreciableAssetsDetailsTmpData</Name>
				<Source><![CDATA[
    private void initCommonAssetDepreciableAssetsDetailsTmpData()
    {
        if (AssetDepreciableAssetsAppended1ReportAddress_JPFlight::instance().isEnabled()
            && reportType == AssetDepreciableAssetsReportType_JP::AppendedTable2)
        {
            this.setAssetAddressByCurrentLogisticsLocation();    
        }

        assetDepreciableAssetsDetailsTmp.clear();
        assetDepreciableAssetsDetailsTmp.City = assetAddress.City;
        assetDepreciableAssetsDetailsTmp.StateId = assetAddress.State;
        assetDepreciableAssetsDetailsTmp.StateName = LogisticsAddressState::find(countryRegionId, assetAddress.State).Name;
        assetDepreciableAssetsDetailsTmp.AssetCode = assetTable.AssetId;
        assetDepreciableAssetsDetailsTmp.AssetName = assetTable.Name;
        assetDepreciableAssetsDetailsTmp.Type = int2str(enum2int(majorType.AssetType_JP));
        assetDepreciableAssetsDetailsTmp.Quantity = assetTable.Quantity;
        assetDepreciableAssetsDetailsTmp.EraNumber = currentUserLanguage() == LanguageId ? int2Str(JapaneseDateTimeHelper::getEraNumber(assetBook.AcquisitionDate)) : Blank;
        assetDepreciableAssetsDetailsTmp.AcquisitionYear = currentUserLanguage() == LanguageId ? JapaneseDateTimeHelper::getYearStr(assetBook.AcquisitionDate) : int2str(year(assetBook.AcquisitionDate));
        assetDepreciableAssetsDetailsTmp.AcquisitionMonth = currentUserLanguage() == LanguageId ? JapaneseDateTimeHelper::date2str(assetBook.AcquisitionDate, JapanMonthFormat) : int2str(mthOfYr(assetBook.AcquisitionDate));
        assetDepreciableAssetsDetailsTmp.UsefullLife = assetBook.ServiceLife;
        assetDepreciableAssetsDetailsTmp.TaxStandardCode = assetTable.ExceptionTaxationCode_JP;
        assetDepreciableAssetsDetailsTmp.LogisticsLocation  = currentLogisticsLocation.RecId;
        assetDepreciableAssetsDetailsTmp.RegistrationNumber = taxRegistrationNumberInUse; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetAddressByCurrentLogisticsLocation</Name>
				<Source><![CDATA[
    private void setAssetAddressByCurrentLogisticsLocation()
    {
        assetAddress = LogisticsPostalAddress::findByLocation(currentLogisticsLocation.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssetDisposedSale</Name>
				<Source><![CDATA[
    private boolean isAssetDisposedSale()
    {
        AssetTrans assetTransSale;
        boolean ret = false;

        select firstOnly RecId from assetTransSale
            where assetTransSale.AssetId == assetTable.AssetId
                && assetTransSale.BookId == assetBook.BookId
                && assetTransSale.TransDate >= startDate
                && assetTransSale.TransDate <= endDate
                && assetTransSale.TransType == AssetTransType::DisposalSale;
        
        if (assetTransSale.RecId)
        {
            ret = true;
        }

        return ret;   
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssetDisposedScrap</Name>
				<Source><![CDATA[
    private boolean isAssetDisposedScrap()
    {
        AssetTrans assetTransScrap;
        boolean ret = false;

        select firstOnly RecId from assetTransScrap
            where assetTransScrap.AssetId == assetTable.AssetId
                && assetTransScrap.BookId == assetBook.BookId
                && assetTransScrap.TransDate >= startDate
                && assetTransScrap.TransDate <= endDate
                && assetTransScrap.TransType == AssetTransType::DisposalScrap;

        if (assetTransScrap.RecId)
        {
            ret = true;
        }

        return ret;   
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireAmountOfLastYear</Name>
				<Source><![CDATA[
    private AmountMST acquireAmountOfLastYear()
    {
        AssetTrans assetTrans;
        AmountMST acquiredAmountOfLastYear;

        select sum(AmountMST) from assetTrans
            where assetTrans.AssetId == assetTable.AssetId
                && assetTrans.BookId == assetBook.BookId
                && ((assetTrans.TransType == AssetTransType::Acquisition
                        || assetTrans.TransType == AssetTransType::AcquisitionAdj
                        || assetTrans.TransType == AssetTransType::WriteUpAdj
                        || assetTrans.TransType == AssetTransType::WriteDownAdj
                        || assetTrans.TransType == AssetTransType::Revaluation)
                    && assetTrans.AmountMST > Zero)
                && assetTrans.TransDate >= startDate
                && assetTrans.TransDate <= endDate;

        acquiredAmountOfLastYear = this.amountMST2LocalCurrencyAmount(assetTrans.AmountMST);

        return acquiredAmountOfLastYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireBalanceOfLastYear</Name>
				<Source><![CDATA[
    private AmountMST acquireBalanceOfLastYear()
    {
        AssetTrans assetTrans;
        AmountMST acquiredBalanceOfLastYear;

        select sum(AmountMST) from assetTrans
            where assetTrans.AssetId == assetTable.AssetId
                && assetTrans.BookId == assetBook.BookId
                && (assetTrans.TransType == AssetTransType::Acquisition
                    || assetTrans.TransType == AssetTransType::AcquisitionAdj
                    || assetTrans.TransType == AssetTransType::WriteUpAdj
                    || assetTrans.TransType == AssetTransType::WriteDownAdj
                    || assetTrans.TransType == AssetTransType::Revaluation)
                && assetTrans.TransDate >= startDate
                && assetTrans.TransDate <= endDate;

        acquiredBalanceOfLastYear = this.amountMST2LocalCurrencyAmount(assetTrans.AmountMST);

        return acquiredBalanceOfLastYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeAmountOfLastYear</Name>
				<Source><![CDATA[
    private AmountMST consumeAmountOfLastYear()
    {
        AssetTrans assetTrans;
        AmountMST consumedAmountOfLastYear;

        select sum(AmountMST) from assetTrans
                where assetTrans.AssetId== assetTable.AssetId
                    && assetTrans.BookId == assetBook.BookId
                    && ((assetTrans.TransType == AssetTransType::Acquisition
                            || assetTrans.TransType == AssetTransType::AcquisitionAdj
                            || assetTrans.TransType == AssetTransType::WriteUpAdj
                            || assetTrans.TransType == AssetTransType::WriteDownAdj
                            || assetTrans.TransType == AssetTransType::Revaluation)
                        && assetTrans.AmountMST < Zero)
                    && assetTrans.TransDate >= startDate
                    && assetTrans.TransDate <= endDate;
            
        consumedAmountOfLastYear = this.amountMST2LocalCurrencyAmount(assetTrans.AmountMST);

        return consumedAmountOfLastYear;   
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>