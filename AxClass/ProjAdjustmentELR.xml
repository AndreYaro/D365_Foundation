<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustmentELR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains functionality for adjusting transactions based on a
/// new Effective Labor Rate
/// </summary>
class ProjAdjustmentELR
{
    TmpProjAdjustmentCost       tmpProjAdjustmentCost;
    TmpProjAdjustmentCreateCost tmpProjAdjustmentCreateCost;
    TmpProjAdjustmentSale       tmpProjAdjustmentSale;
    TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSale;
    TmpProjAdjustmentCreate     tmpProjAdjustmentCreate;
    TmpProjAdjustment           tmpProjAdjustment;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustCostTransPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the cost price on EmplTrans for a period for a resource for Time and material projects
    /// </summary>
    /// <param name="_periodFrom">
    /// The beginning of the period
    /// </param>
    /// <param name="_periodTo">
    /// The end of the period
    /// </param>
    /// <param name="_resource">
    /// The resource to adjust for
    /// </param>
    /// <param name="_newCostPerHour">
    /// the new cost price to adjust to
    /// </param>
    public void adjustCostTransPeriod(TransDate _periodFrom, TransDate _periodTo, RecId _resource, AmountCur _newCostPerHour)
    {
        ProjEmplTrans   emplTrans;

        Args            args = new Args();

        args.parmEnumType(enumNum(ProjInfoLog));
        args.parmEnum(ProjInfoLog::DoNotShow);

        while select * from emplTrans where
        emplTrans.TransDate >= _periodFrom  &&
        emplTrans.TransDate <= _periodTo     &&
        emplTrans.Resource    == _resource
        {
            this.processProjEmplTrans(emplTrans, _newCostPerHour);
        }

        while select tmpProjAdjustment
        {
            args.record(tmpProjAdjustment);

            ProjAdjustmentUpdate::newPostAdjustment(
            tmpProjAdjustmentCreate,
            tmpProjAdjustmentCreateCost,
            tmpProjAdjustmentCreateSale,
            tmpProjAdjustment,
            tmpProjAdjustmentCost,
            tmpProjAdjustmentSale,
            args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrxAmounts</Name>
				<Source><![CDATA[
    private void createTrxAmounts(AmountCur _totalCostAmount, AmountCur _totalSaleAmount)
    {
        TmpProjAdjustmentCreateCost tmpProjAdjustmentCreateCost_local;
        TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSale_local;
        List                        costList;
        List                        salesList;

        costList = new List(Types::Record);
        while select tmpProjAdjustmentCreateCost
        where tmpProjAdjustmentCreateCost.RefRecId == tmpProjAdjustmentCreate.RecId
        {
            tmpProjAdjustmentCreateCost_local.clear();
            tmpProjAdjustmentCreateCost_local.data(tmpProjAdjustmentCreateCost);
            costList.addEnd(tmpProjAdjustmentCreateCost_local);
        }

        salesList = new List(Types::Record);
        while select tmpProjAdjustmentCreateSale
        where tmpProjAdjustmentCreateSale.RefRecId == tmpProjAdjustmentCreate.RecId
        {
            tmpProjAdjustmentCreateSale_local.clear();
            tmpProjAdjustmentCreateSale_local.data(tmpProjAdjustmentCreateSale);
            salesList.addEnd(tmpProjAdjustmentCreateSale_local);
        }

        ttsbegin;
        TmpProjAdjustmentCreate::deleteCreateAdjustmentAmount(tmpProjAdjustmentCreate, tmpProjAdjustmentCreateCost, tmpProjAdjustmentCreateSale);

        TmpProjAdjustmentCreate::createTrxAmounts(
        tmpProjAdjustment,
        tmpProjAdjustmentCost,
        tmpProjAdjustmentSale,
        tmpProjAdjustmentCreate,
        tmpProjAdjustmentCreateCost,
        tmpProjAdjustmentCreateSale,
        _totalCostAmount,
        _totalSaleAmount);

        tmpProjAdjustmentCreate.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTransAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the record in <c>TmpProjAdjustment</c>.
    /// </summary>
    /// <param name = "_projTrans">
    ///     A <c>ProjTrans</c> table buffer.
    /// </param>
    /// <param name = "_projTransType">
    ///     Transaction type.
    /// </param>
    /// <param name = "_adjustmentDate">
    ///     Adjustment date.
    /// </param>
    /// <param name = "_currencyIdCost">
    ///     The currency code for the costs reported by this transaction; optional.
    /// </param>
    protected void doTransAdjustment(ProjTrans              _projTrans,
                     ProjAdjustmentType     _projTransType,
                     TransDate              _adjustmentDate,
                     CurrencyCode           _currencyIdCost = '')
    {
        tmpProjAdjustment.clear();

        tmpProjAdjustment.Txt                  = _projTrans.txt();
        tmpProjAdjustment.CategoryId           = _projTrans.categoryId();
        tmpProjAdjustment.CurrencyIdCost       = _currencyIdCost ? _currencyIdCost : _projTrans.currencyIdCost();
        tmpProjAdjustment.CurrencyId           = _projTrans.currencyIdSales();
        tmpProjAdjustment.DefaultDimension     = _projTrans.defaultDimension();
        tmpProjAdjustment.LinePropertyId       = _projTrans.linePropertyId();
        tmpProjAdjustment.ProjId               = _projTrans.projId();
        tmpProjAdjustment.ActivityNumber       = _projTrans.activityNumber();
        tmpProjAdjustment.Qty                  = _projTrans.qty();
        tmpProjAdjustment.TaxGroupId           = _projTrans.taxGroup();
        tmpProjAdjustment.TaxItemGroupId       = _projTrans.taxItemGroup();
        tmpProjAdjustment.TransDate            = _projTrans.transDate();
        tmpProjAdjustment.TransId              = _projTrans.transId();
        tmpProjAdjustment.AdjustmentType       = _projTransType;
        tmpProjAdjustment.Resource             = _projTrans.resource();
        tmpProjAdjustment.ResourceCategory     = _projTrans.resourceCategory();
        tmpProjAdjustment.ActivityNumber       = _projTrans.activityNumber();
        tmpProjAdjustment.ItemId               = _projTrans.itemId();
        tmpProjAdjustment.InventTransId        = _projTrans.inventTransId();
        tmpProjAdjustment.InventDimid          = _projTrans.inventDimId();
        tmpProjAdjustment.ProjAdjustRefid      = _projTrans.projAdjustRefId();
        tmpProjAdjustment.PackingSlipId        = _projTrans.packingSlipId();

        tmpProjAdjustment.VoucherJournal       = _projTrans.voucherOriginal();
        tmpProjAdjustment.LedgerDimension      = _projTrans.itemLedgerAccountLedgerDimension();
        tmpProjAdjustment.ItemType             = _projTrans.itemType();
        tmpProjAdjustment.ProjIdentId          = _projTrans.projIdentId();
        tmpProjAdjustment.ProjIdentResource    = _projTrans.projIdentResource();
        tmpProjAdjustment.SalesUnit            = _projTrans.salesUnit();
        tmpProjAdjustment.TotalCostAmountCur   = _projTrans.transCost();
        tmpProjAdjustment.TotalSalesAmountCur  = _projTrans.transTurnover();

        tmpProjAdjustment.TransDateAdjustment = _adjustmentDate;

        tmpProjAdjustment.ItemAdjustVersion         = _projTrans.itemAdjustVersion();
        tmpProjAdjustment.OriginCost                = _projTrans.originCost();
        tmpProjAdjustment.smaBasePrice              = _projTrans.smaBasePrice();
        tmpProjAdjustment.smaIndex                  = _projTrans.smaIndex();
        tmpProjAdjustment.smaEnddate                = _projTrans.smaEnddate();
        tmpProjAdjustment.smaStartDate              = _projTrans.smaStartDate();
        tmpProjAdjustment.smaSubscriptionId         = _projTrans.smaSubscriptionId();
        tmpProjAdjustment.smaSubscriptionPeriodType = _projTrans.smaSubscriptionPeriodType();

        tmpProjAdjustment.Origin                    = _projTrans.origin();

        if (tmpProjAdjustment.OriginCost == ProjOrigin::ExpenseManagement)
        {
            tmpProjAdjustment.Module                    = ModuleAxapta::Expense;
        }
        else
        {
            tmpProjAdjustment.Module                    = ModuleAxapta::Project;
        }

        tmpProjAdjustment.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTransCost</Name>
				<Source><![CDATA[
    private void doTransCost(ProjTrans _projTrans)
    {
        tmpProjAdjustmentCost.clear();
        tmpProjAdjustmentCost.TransId              = _projTrans.transId();
        tmpProjAdjustmentCost.CostRefRecId         = _projTrans.recId();
        tmpProjAdjustmentCost.CostPrice            = _projTrans.costPrice();
        tmpProjAdjustmentCost.LedgerStatusCost     = _projTrans.ledgerStatusCost();
        tmpProjAdjustmentCost.TransStatus          = _projTrans.transStatus();
        tmpProjAdjustmentCost.FundingSource        = _projTrans.fundingSource();
        tmpProjAdjustmentCost.LineAmount           = _projTrans.transCost();
        tmpProjAdjustmentCost.DefaultDimension     = _projTrans.defaultDimension();
        tmpProjAdjustmentCost.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTransSale</Name>
				<Source><![CDATA[
    private void doTransSale(ProjTrans _projTrans)
    {
        tmpProjAdjustmentSale.clear();
        tmpProjAdjustmentSale.TransId              = _projTrans.transId();
        tmpProjAdjustmentSale.SaleRefRecId         = _projTrans.recId();
        tmpProjAdjustmentSale.SalesPrice           = _projTrans.salesPrice();
        tmpProjAdjustmentSale.LineAmount           = _projTrans.transTurnover();
        tmpProjAdjustmentSale.LedgerSalesPosted    = _projTrans.ledgerSalesPosted();
        tmpProjAdjustmentSale.LedgerSalesAmountMST = _projTrans.ledgerSalesAmountMST();
        tmpProjAdjustmentSale.FundingSource        = _projTrans.fundingSource();
        tmpProjAdjustmentSale.TransStatus          = _projTrans.transStatus();
        tmpProjAdjustmentSale.DefaultDimension     = _projTrans.defaultDimension();
        tmpProjAdjustmentSale.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjEmplTrans</Name>
				<Source><![CDATA[
    private void processProjEmplTrans(ProjEmplTrans _projEmplTrans, AmountCur newCostPerHour)//, AmountCur newTotalSalesAmount)
    {
        ProjTrans               projTrans;
        ProjTrans               projTransCost;
        ProjTrans               projTransSale;
        ProjEmplTransCost       projEmplTransCost;
        ProjEmplTransSale       projEmplTransSale;

        AmountCur               revenueSaleAmount;
        AmountCur               salePrice;
        ProjAdjustmentSplit     adjustmentSplit;
        Set                     set;

        projTrans = ProjTrans::newProjEmplTrans(_projEmplTrans);
        if (projTrans.adjustable())
        {
            if (_projEmplTrans.LinePropertyId)
            {
                newCostPerHour = CurrencyExchangeHelper::price(newCostPerHour * (1 + ProjLineProperty::find(_projEmplTrans.LinePropertyId).CostMarkup / 100));
            }
            this.doTransAdjustment(projTrans,ProjAdjustmentType::Hour, _projEmplTrans.TransDate);

            set = new Set(Types::String);

            set.add(tmpProjAdjustment.TransId);

            while select projEmplTransCost
            where projEmplTransCost.TransId == _projEmplTrans.TransId
            {
                projTransCost = ProjTrans::newProjEmplTransCost(_projEmplTrans, projEmplTransCost);
                this.doTransCost(projTransCost);
            }

            while select projEmplTransSale
            where projEmplTransSale.TransId == _projEmplTrans.TransId
            {
                projTransSale = ProjTrans::newProjEmplTransSale(_projEmplTrans, projEmplTransSale);
                this.doTransSale(projTransSale);
            }

            adjustmentSplit = new ProjAdjustmentSplit(
                tmpProjAdjustmentCreate,
                tmpProjAdjustmentCreateCost,
                tmpProjAdjustmentCreateSale,
                tmpProjAdjustment,
                tmpProjAdjustmentCost,
                tmpProjAdjustmentSale);

            adjustmentSplit.parmProjTransIdSet(set);
            adjustmentSplit.parmProjQty(1);
            adjustmentSplit.runOperation();


            TmpProjAdjustmentCreateSalesPriceParameters tmpProjAdjustmentCreateSalesPriceParameters =
                this.initializeTmpProjAdjustmentCreateSalesPriceParameters(
                    tmpProjAdjustmentCreate,
                    newCostPerHour,
                    revenueSaleAmount);

            salePrice = TmpProjAdjustmentCreate::retrieveSalesPrice(tmpProjAdjustmentCreateSalesPriceParameters);

            this.createTrxAmounts(newCostPerHour * _projEmplTrans.Qty, salePrice * _projEmplTrans.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTmpProjAdjustmentCreateSalesPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>TmpProjAdjustmentCreateSalesPriceParameters</c>.
    /// </summary>
    /// <param name="_tmpProjAdjustmentCreate">
    /// The TmpProjAdjustmentCreate table.
    /// </param>
    /// <param name="_totalCostAmount">
    /// Cost price to search with.
    /// </param>
    /// <param name="_revenueTotalSaleAmount">
    /// Revenue for sales price calculation.
    /// </param>
    /// <returns>
    /// An instance of the <c>TmpProjAdjustmentCreateSalesPriceParameters</c> class.
    /// </returns>
    protected TmpProjAdjustmentCreateSalesPriceParameters initializeTmpProjAdjustmentCreateSalesPriceParameters(
        TmpProjAdjustmentCreate     _tmpProjAdjustmentCreate,
        AmountCur                   _totalCostAmount,
        AmountCur                   _revenueTotalSaleAmount)
    {
        TmpProjAdjustmentCreateSalesPriceParameters tmpProjAdjustmentCreateSalesPriceParameters;
        tmpProjAdjustmentCreateSalesPriceParameters = TmpProjAdjustmentCreateSalesPriceParameters::construct();
        tmpProjAdjustmentCreateSalesPriceParameters.initializeParameters(
            _tmpProjAdjustmentCreate,
            _totalCostAmount,
            _revenueTotalSaleAmount);
        return tmpProjAdjustmentCreateSalesPriceParameters;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>