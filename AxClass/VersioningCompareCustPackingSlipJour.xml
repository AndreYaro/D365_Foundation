<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningCompareCustPackingSlipJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VersioningCompareCustPackingSlipJour</c> class extends the generic functionality in the <c>VersioningCompare</c> class and implements the analysis for a sales packing slip.
/// </summary>
class VersioningCompareCustPackingSlipJour extends VersioningCompare
{
    CustPackingSlipJourRecId custPackingSlipJourRecId;
    boolean                  isOldVersionArchived;
    boolean                  isNewVersionArchived;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
        public str getCaption()
    {
        return "@SYS323399";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extracts the packing slip journal record ID from the calling record and initializes a comparison
    /// based on the records.
    /// </summary>
    /// <param name="_changeVersion">
    /// A record from a table mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <param name="_alternateNewVersion">
    /// A second record from a table mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <remarks>
    /// If the record originates from a <c>FormDataSource</c> object the current selection will be used.If
    /// the first argument does not contain a multi selection and the second optional parameter is not
    /// specified, the comparison will be against the current version.
    /// </remarks>
    protected void initCallerRecord(VersioningVersionMap _changeVersion, VersioningVersionMap _alternateNewVersion = null)
    {
        CustPackingSlipVersion versionOld, versionNew;

        super(_changeVersion, _alternateNewVersion);

        versionOld                = changeVersionOld;
        custPackingSlipJourRecId  = versionOld.CustPackingSlipJour;

        isOldVersionArchived = versionOld.isArchived();
        if (changeVersionNew)
        {
            versionNew = changeVersionNew;
            isNewVersionArchived = versionNew.isArchived();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCustPackingSlipJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>CustPackingSlipJour</c> records and saves the result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <remarks>
    /// The method will also analyze the differences in the following tables:
    /// <list type="bullet">
    /// <item>
    /// <description>The <c>SalesShippingStat</c> table.</description>
    /// </item>
    /// <item>
    /// <description>The <c>CustPackingSlipTrans</c> table.</description>
    /// </item>
    /// </list>
    /// </remarks>
    protected void loadCustPackingSlipJour()
    {
        CustPackingSlipJour                     custPackingSlipJour;
        CustPackingSlipJour                     custPackingSlipJourOld;
        CustPackingSlipJour                     custPackingSlipJourNew;
        CustPackingSlipVersion                  custPackingSlipVersion;
        RecId                                   custPackingSlipJourNodeRecId;

        custPackingSlipJour = CustPackingSlipJour::findRecId(custPackingSlipJourRecId);

        custPackingSlipVersion = changeVersionOld;
        custPackingSlipJourOld.data(custPackingSlipJour.data());
        custPackingSlipJourOld.initFromCustPackingSlipVersion(changeVersionOld);

        if (newDateTime)
        {
            custPackingSlipVersion = changeVersionNew;
            custPackingSlipJourNew.data(custPackingSlipJour.data());
            custPackingSlipJourNew.initFromCustPackingSlipVersion(changeVersionNew);
        }
        else
        {
            custPackingSlipJourNew = custPackingSlipJour;
        }

        custPackingSlipJourNodeRecId = this.insertVersioningTmpTrans(custPackingSlipJour, true, true, custPackingSlipJourOld, custPackingSlipJourNew, 0);

        this.loadSalesShippingStat(custPackingSlipJour, custPackingSlipJourNodeRecId);
        this.loadCustPackingSlipTrans(custPackingSlipJour, custPackingSlipJourNodeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCustPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>CustPackingSlipTrans</c> records related to a specified <c>CustPackingSlipJour</c>
    /// record and saves the result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// The <c>CustPackingSlipJour</c> record owning the <c>CustPackingSlipTrans</c> transactions.
    /// </param>
    /// <param name="_custPackingSlipJourNodeRecId">
    /// The record ID field of the record in the temporary table holding the <c>CustPackingSlipJour</c>
    /// record.
    /// </param>
    protected void loadCustPackingSlipTrans(CustPackingSlipJour _custPackingSlipJour, RecId _custPackingSlipJourNodeRecId)
    {
        CustPackingSlipTrans            custPackingSlipTrans;
        CustPackingSlipTransHistory     custPackingSlipTransHistory;
        CustPackingSlipTrans            custPackingSlipTransOld;
        CustPackingSlipTrans            custPackingSlipTransNew;

        while select custPackingSlipTrans
            order by LineNum
            where custPackingSlipTrans.SalesId          == _custPackingSlipJour.SalesId
               && custPackingSlipTrans.DeliveryDate     == _custPackingSlipJour.DeliveryDate
               && custPackingSlipTrans.PackingSlipId    == _custPackingSlipJour.PackingSlipId
        {
            if (isOldVersionArchived)
            {
                custPackingSlipTransHistory = CustPackingSlipTransHistory::find(custPackingSlipTrans.RecId, false, oldDateTime);
                custPackingSlipTransOld.data(custPackingSlipTrans.data());
                custPackingSlipTransOld.initFromCustPackingSlipTransHistory(custPackingSlipTransHistory);
            }
            else
            {
                custPackingSlipTransOld = custPackingSlipTrans;
            }

            if (isNewVersionArchived)
            {
                custPackingSlipTransHistory = CustPackingSlipTransHistory::find(custPackingSlipTrans.RecId, false, newDateTime);
                custPackingSlipTransNew.data(custPackingSlipTrans.data());
                custPackingSlipTransNew.initFromCustPackingSlipTransHistory(custPackingSlipTransHistory);
            }
            else
            {
                custPackingSlipTransNew = custPackingSlipTrans;
            }

            this.insertVersioningTmpTrans(custPackingSlipTrans, true, true, custPackingSlipTransOld, custPackingSlipTransNew, _custPackingSlipJourNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VersioningTmpTrans</c> temporary table with the information specfic to a Sales Packing Slip.
    /// </summary>
    public void loadData()
    {
        // Comparison structure:

        // CustPackingSlipJour
        //     SalesShippingStat
        //     CustPackingSlipTrans

        this.loadCustPackingSlipJour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSalesShippingStat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>SalesShippingStat</c> records that are related to a specified
    /// <c>CustPackingSlipJour</c> record and saves the result in the temporary <c>VersioningTmpTrans</c>
    /// table.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// The <c>CustPackingSlipJour</c> record owning the <c>CustPackingSlipTrans</c> transactions.
    /// </param>
    /// <param name="_custPackingSlipJourNodeRecId">
    /// The record ID field of the record in the temporary table holding the <c>CustPackingSlipJour</c>
    /// record.
    /// </param>
    protected void loadSalesShippingStat(CustPackingSlipJour _custPackingSlipJour, RecId _custPackingSlipJourNodeRecId)
    {
        SalesShippingStat           salesShippingStat;
        SalesShippingStatHistory    salesShippingStatHistory;
        SalesShippingStat           salesShippingStatOld;
        SalesShippingStat           salesShippingStatNew;

        boolean                                 foundOld;
        boolean                                 foundNew;

        while select salesShippingStat
            where salesShippingStat.PackingSlipId == _custPackingSlipJour.PackingSlipId
               && salesShippingStat.DeliveryDate  == _custPackingSlipJour.DeliveryDate
               && salesShippingStat.SalesId       == _custPackingSlipJour.SalesId
        {
            if (isOldVersionArchived)
            {
                salesShippingStatHistory = SalesShippingStatHistory::find(salesShippingStat.RecId, false, oldDateTime);
                salesShippingStatOld.data(salesShippingStat.data());
                salesShippingStatOld.initFromSalesShippingStatHistory(salesShippingStatHistory);
                foundOld = (salesShippingStatHistory.RecId != 0);
            }
            else
            {
                salesShippingStatOld = salesShippingStat;
                foundOld = true;
            }

            if (isNewVersionArchived)
            {
                salesShippingStatHistory = SalesShippingStatHistory::find(salesShippingStat.RecId, false, newDateTime);
                salesShippingStatNew.data(salesShippingStat.data());
                salesShippingStatNew.initFromSalesShippingStatHistory(salesShippingStatHistory);
                foundNew = (salesShippingStatHistory.RecId != 0);
            }
            else
            {
                salesShippingStatNew = salesShippingStat;
                foundNew = true;
            }

            this.insertVersioningTmpTrans(salesShippingStat, foundOld, foundNew, salesShippingStatOld, salesShippingStatNew, _custPackingSlipJourNodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static VersioningCompareCustPackingSlipJour construct()
    {
        return new VersioningCompareCustPackingSlipJour();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>