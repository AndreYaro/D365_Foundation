<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCalcProcessLauncher</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmPositionForecastCalcProcessLauncher</c> class is the form helper class for the <c>HcmPositionForecast</c>
/// Form and it is used to invoke <c>HcmPositionForecastCalculationEngine</c> calculation engine class.
/// </summary>

class HcmPositionForecastCalcProcessLauncher
{
    HcmPositionForecast                 positionForecast;
    ValidFromDate                       activationDate;
    ValidToDate                         retirementDate;
    CompanyInfoRecId                    positionForecastLegalEntity;
    HcmPositionForecastCalculationGroup positionForecastCalculationGroup;
    HcmPositionForecastBudgetAcctLine   positionForecastBudgetAccLine;
    HcmBudgetAmountCur                  budgetAmountCur;
    boolean                             processMultipleCostElements;
    Set                                 positionForecastScenarioSet;
    HcmPositionForecastScenarioRecId    positionForecastScenarioRecId;
    BudgetPlanningProcessRecId          budgetPlanningProcessRecId;
    LegalEntity                         legalEntity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteDefunctData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes data that has been left over in the calculation process tables from incomplete processes.
    /// </summary>
    protected void deleteDefunctData()
    {
        HcmPositionForecastCalculationGroup     deletePositionForecastCalculationGroup;

        if (!this.parmPositionForecastScenarioSet())
        {
            delete_from deletePositionForecastCalculationGroup
                where deletePositionForecastCalculationGroup.PositionForecastScenario == this.parmPositionForecastScenarioRecId();
        }
        else
        {
            delete_from deletePositionForecastCalculationGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPositionForecastCalcTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the data and objects that are required for interaction with the form.
    /// </summary>
    public void initPositionForecastCalcTables()
    {
        this.deleteDefunctData();
        this.prepareForecastCalcTables();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivationDate</Name>
				<Source><![CDATA[
    public ValidFromDate parmActivationDate(ValidFromDate _activationDate = activationDate)
    {
        activationDate = _activationDate;

        return activationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetAmountCur</Name>
				<Source><![CDATA[
    public HcmBudgetAmountCur parmBudgetAmountCur(HcmBudgetAmountCur _budgetAmountCur = budgetAmountCur)
    {
        budgetAmountCur = _budgetAmountCur;
        return budgetAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanningProcessRecId</Name>
				<Source><![CDATA[
    public BudgetPlanningProcessRecId parmBudgetPlanningProcessRecId(BudgetPlanningProcessRecId _budgetPlanningProcessRecId = budgetPlanningProcessRecId)
    {
        budgetPlanningProcessRecId = _budgetPlanningProcessRecId;

        return budgetPlanningProcessRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    public LegalEntity parmLegalEntity(LegalEntity _legalEntity = legalEntity)
    {
        legalEntity = _legalEntity;

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastCalculationGroup</Name>
				<Source><![CDATA[
    public HcmPositionForecastCalculationGroup parmPositionForecastCalculationGroup(HcmPositionForecastCalculationGroup _positionForecastCalculationGroup = positionForecastCalculationGroup)
    {
        positionForecastCalculationGroup = _positionForecastCalculationGroup;

        return positionForecastCalculationGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastScenarioRecId</Name>
				<Source><![CDATA[
    public HcmPositionForecastScenarioRecId parmPositionForecastScenarioRecId(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId = positionForecastScenarioRecId)
    {
        positionForecastScenarioRecId = _positionForecastScenarioRecId;

        return positionForecastScenarioRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastScenarioSet</Name>
				<Source><![CDATA[
    public Set parmPositionForecastScenarioSet(Set _positionForecastScenarioSet = positionForecastScenarioSet)
    {
        positionForecastScenarioSet = _positionForecastScenarioSet;
        return positionForecastScenarioSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessMultipleCostElements</Name>
				<Source><![CDATA[
    public boolean parmProcessMultipleCostElements(boolean _processMultipleCostElements = processMultipleCostElements)
    {
        processMultipleCostElements = _processMultipleCostElements;
        return processMultipleCostElements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetirementDate</Name>
				<Source><![CDATA[
    public ValidToDate parmRetirementDate(ValidToDate _retirementDate = retirementDate)
    {
        retirementDate = _retirementDate;

        return retirementDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionForecastScenarioSetEnumerator</Name>
				<Source><![CDATA[
    private SetEnumerator positionForecastScenarioSetEnumerator()
    {
        return positionForecastScenarioSet.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForecastCalcTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the forecast calculation process tables for the forecast calculation  process.
    /// </summary>
    protected void prepareForecastCalcTables()
    {
        int tryCount = 0;

        try
        {
            trycount++;
            ttsbegin;
            this.preparePositionForecastCalcGroupTable();
            this.preparePositionForecastCalcStatusTable();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (tryCount < 3)
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            checkFailed("@SYS78886");
        }
        catch (Exception::Error)
        {
            checkFailed("@SYS78886");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preparePositionForecastCalcGroupTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>HcmPositionForecastCalculationGroup</c> table record.
    /// </summary>
    protected void preparePositionForecastCalcGroupTable()
    {
        SetEnumerator               positionForecastScenarioSetEnumerator;
        HcmPositionForecastScenario positionForecastScenario;
        HcmForecastScenario         forecastScenario;

        if (positionForecastCalculationGroup)
        {
            return;
        }

        if (this.parmPositionForecastScenarioSet())
        {
            positionForecastScenarioSetEnumerator = this.parmPositionForecastScenarioSet().getEnumerator();
            while (positionForecastScenarioSetEnumerator.moveNext())
            {
                positionForecastScenario = HcmPositionForecastScenario::find(positionForecastScenarioSetEnumerator.current());
                forecastScenario = HcmForecastScenario::find(positionForecastScenario.ForecastScenario);

                positionForecastCalculationGroup.ActivationDate = positionForecastScenario.getUserTimeZoneActivationDate();
                positionForecastCalculationGroup.RetirementDate = positionForecastScenario.getUserTimeZoneRetirementDate();
                positionForecastCalculationGroup.PositionForecastScenario = positionForecastScenarioSetEnumerator.current();
                positionForecastCalculationGroup.BudgetPlanningProcess = forecastScenario.BudgetPlanningProcess;
                positionForecastCalculationGroup.BudgetPlanScenario = forecastScenario.BudgetPlanScenario;

                positionForecastCalculationGroup.insert();
            }
        }
        else
        {
            positionForecastCalculationGroup.ActivationDate = this.parmActivationDate();
            positionForecastCalculationGroup.RetirementDate = this.parmRetirementDate();

            forecastScenario = HcmForecastScenario::find(this.parmPositionForecastScenarioRecId());

            positionForecastCalculationGroup.PositionForecastScenario = this.parmPositionForecastScenarioRecId();
            positionForecastCalculationGroup.BudgetPlanningProcess = this.parmBudgetPlanningProcessRecId();
            positionForecastCalculationGroup.LegalEntity = this.parmLegalEntity();
            positionForecastCalculationGroup.BudgetPlanningProcess = forecastScenario.BudgetPlanningProcess;
            positionForecastCalculationGroup.BudgetPlanScenario = forecastScenario.BudgetPlanScenario;

            positionForecastCalculationGroup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preparePositionForecastCalcStatusTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares new forecast calculation status records for every position that is chosen in the forecast calculation process.
    /// data source.
    /// </summary>
    protected void preparePositionForecastCalcStatusTable()
    {
        HcmPositionForecastCalculationStatus        positionForecastCalcStatus;
        HcmPositionForecast                         selectedPositionForecast;
        HcmPositionForecastScenarioRecId            selectedPositionForecastScenarioRecId = this.parmPositionForecastScenarioRecId();
        RecordInsertList                            posForecastStatusRecordInsertList = new RecordInsertList(tableNum(HcmPositionForecastCalculationStatus));
        HcmPositionForecastCalculationGroup         positionForecastCalculationGroupLocal;
        HcmPositionForecastScenario                 positionForecastScenario;

        if (this.parmPositionForecastScenarioSet())
        {
            while select RecId, PositionForecastScenario from positionForecastCalculationGroupLocal
                join RecId, PositionForecast from positionForecastScenario
                where positionForecastScenario.RecId == positionForecastCalculationGroupLocal.PositionForecastScenario
            {
                selectedPositionForecastScenarioRecId = positionForecastCalculationGroupLocal.PositionForecastScenario;

                positionForecastCalcStatus = this.setHcmPositionForecastCalculationStatus(positionForecastScenario.PositionForecast,
                                                                                            positionForecastCalculationGroupLocal.RecId);

                posForecastStatusRecordInsertList.add(positionForecastCalcStatus);
            }

            posForecastStatusRecordInsertList.insertDatabase();
        }
        else
        {
            selectedPositionForecast = HcmPositionForecast::find(HcmPositionForecastScenario::find(this.parmPositionForecastCalculationGroup().PositionForecastScenario).PositionForecast);

            positionForecastCalcStatus = this.setHcmPositionForecastCalculationStatus(selectedPositionForecast.RecId);
            positionForecastCalcStatus.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPositionForecstCalculationProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the forecast calculation engine in async mode.
    /// </summary>
    public void runPositionForecstCalculationProcess()
    {
        HcmPositionForecastCalculationEngine positionForecastCalculationEngine;
        Set                                  positionForecastSet;

        if (this.parmPositionForecastScenarioSet())
        {
            positionForecastCalculationEngine = HcmPositionForecastCalculationEngine::newCalcProcessMultiplePositions(this.parmPositionForecastScenarioSet());
            positionForecastCalculationEngine.runCalcProcessPositions();
        }
        else if (this.parmPositionForecastScenarioRecId() != 0)
        {
            positionForecastCalculationEngine = HcmPositionForecastCalculationEngine::construct();
            positionForecastCalculationEngine.runCalcProcessPositionForecastScenario(this.parmPositionForecastScenarioRecId());
        }

        if (this.parmPositionForecastScenarioSet())
        {
            HcmPositionForecastCalcProcessLauncher::clearPositionSetDirtyState(this.parmPositionForecastScenarioSet().pack());
        }
        else if (this.parmPositionForecastScenarioRecId() != 0)
        {
            positionForecastSet = new Set(Types::Int64);
            positionForecastSet.add(this.parmPositionForecastScenarioRecId());
            HcmPositionForecastCalcProcessLauncher::clearPositionSetDirtyState(positionForecastSet.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHcmPositionForecastCalculationStatus</Name>
				<Source><![CDATA[
    private HcmPositionForecastCalculationStatus setHcmPositionForecastCalculationStatus(HcmPositionForecastRecId _selectedPositionForecastRecId,
                                                                            HcmPositionForecastCalculationGroupRecId _positionForecastCalcGroupRecId = 0)
    {
        HcmPositionForecastCalculationGroupRecId    positionForecastCalcGroupRecId ;
        HcmPositionForecastCalcStatusState          positionForecastCalcStatusState = HcmPositionForecastCalcStatusState::NotProcessed;
        HcmPositionForecastCalculationStatus        positionForecastCalcStatus;

        if (!_positionForecastCalcGroupRecId)
        {
            positionForecastCalcGroupRecId = this.parmPositionForecastCalculationGroup().RecId;
        }
        else
        {
            positionForecastCalcGroupRecId = _positionForecastCalcGroupRecId;
        }
        positionForecastCalcStatus.PositionForecastCalculationGroup = positionForecastCalcGroupRecId;
        positionForecastCalcStatus.PositionForecastCalcStatusState = positionForecastCalcStatusState;
        positionForecastCalcStatus.PositionForecast = _selectedPositionForecastRecId;

        return positionForecastCalcStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPositionSetDirtyState</Name>
				<Source><![CDATA[
    /// <summary>
    /// <c>HcmPositionForecastlastModified</c> table records in order to set the
    /// <c>PositionForecastScenarioState</c> field to represent an unmodified state.
    /// </summary>
    /// <param name="_positionForecastContainer">
    /// A packed <c>Set</c> of <c>HcmPositionForecastScenarioRecId</c> values used to determine
    /// which <c>HcmPositionForecastlastModified</c> table records to update
    /// </param>
    private static void clearPositionSetDirtyState(Container _positionForecastContainer)
    {
        SetEnumerator                       positionForecastSetEnumerator;
        Set                                 positionForecastSet;
        HcmPositionForecastLastModified     positionForecastlastModified;

        if (conLen(_positionForecastContainer) != 0)
        {
            positionForecastSet = Set::create(_positionForecastContainer);
            positionForecastSetEnumerator = positionForecastSet.getEnumerator();

            ttsbegin;
            while (positionForecastSetEnumerator.moveNext())
            {
                positionForecastlastModified = HcmPositionForecastLastModified::findByPositionForecastScenerio(positionForecastSetEnumerator.current(), true);

                if (positionForecastlastModified)
                {
                    positionForecastlastModified.PositionForecastScenarioState = HcmPositionForecastScenarioState::Clean;
                    positionForecastlastModified.update();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an <c>HcmPositionForecastCalcProcessLauncher</c> class instance.
    /// </summary>
    /// <returns>
    /// An <c>HcmPositionForecastCalcProcessLauncher</c> class instance.
    /// </returns>
    public static HcmPositionForecastCalcProcessLauncher construct()
    {
        HcmPositionForecastCalcProcessLauncher positionForecastCalcProcessLauncher;
        positionForecastCalcProcessLauncher = new HcmPositionForecastCalcProcessLauncher();

        return positionForecastCalcProcessLauncher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForecastCalcMultiplePositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new calculation process object that will be used for performing calculation for the forecast positions.
    /// </summary>
    /// <param name="_positionForecastScenarioSet">
    /// The  set of <c>HcmPositionForecastScenario</c> table record.
    /// </param>
    /// <returns>
    /// A new calculation process object.
    /// </returns>
    public static HcmPositionForecastCalcProcessLauncher newForecastCalcMultiplePositions(Set _positionForecastScenarioSet)
    {
        HcmPositionForecastCalcProcessLauncher positionForecastCalcProcessLauncher;

        positionForecastCalcProcessLauncher = new HcmPositionForecastCalcProcessLauncher();

        positionForecastCalcProcessLauncher.parmPositionForecastScenarioSet(_positionForecastScenarioSet);
        positionForecastCalcProcessLauncher.parmProcessMultipleCostElements(true);

        positionForecastCalcProcessLauncher.deleteDefunctData();
        positionForecastCalcProcessLauncher.initPositionForecastCalcTables();

        return positionForecastCalcProcessLauncher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForecastCalculateSinglePosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new calculation process object that will be used for performing calculation for the forecast positions.
    /// </summary>
    /// <param name="_positionForecastScenario">
    /// The <c>HcmPositionForecastScenario</c> table record.
    /// </param>
    /// <returns>
    /// A new calculation process object.
    /// </returns>
    public static HcmPositionForecastCalcProcessLauncher newForecastCalculateSinglePosition(HcmPositionForecastScenario _positionForecastScenario)
    {
        HcmPositionForecastCalcProcessLauncher  positionForecastCalcProcessLauncher;
        HcmPositionForecastScenario             positionForecastScenario;
        HcmForecastScenario                     forecastScenario;

        positionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenario.RecId);
        forecastScenario = HcmForecastScenario::find(positionForecastScenario.RecId);

        positionForecastCalcProcessLauncher = new HcmPositionForecastCalcProcessLauncher();

        positionForecastCalcProcessLauncher.parmActivationDate(positionForecastScenario.getUserTimeZoneActivationDate());
        positionForecastCalcProcessLauncher.parmRetirementDate(positionForecastScenario.getUserTimeZoneRetirementDate());
        positionForecastCalcProcessLauncher.parmPositionForecastScenarioRecId(positionForecastScenario.RecId);
        positionForecastCalcProcessLauncher.parmProcessMultipleCostElements(true);

        positionForecastCalcProcessLauncher.deleteDefunctData();
        positionForecastCalcProcessLauncher.initPositionForecastCalcTables();

        return positionForecastCalcProcessLauncher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>