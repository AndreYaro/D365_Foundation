<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeVisitorPriceModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This visitor is responsible for building a price model.
/// </summary>
class PCRuntimeVisitorPriceModel extends PCRuntimeVisitor
{
    int             level;
    Map             nodeToPriceModelNode;
    Map             xpathToPriceModelNode;
    Map             levelToXpath;// cache
    List            xPath;

    PCRuntimePriceModel runtimePriceModel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getXpath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current XPath in the tree.
    /// </summary>
    /// <returns>
    /// An XPath.
    /// </returns>
    protected str getXpath()
    {
        str xPathString;

        ListEnumerator le;

        if (levelToXpath.exists(level))
        {
            return levelToXpath.lookup(level);
        }

        le  = xpath.getEnumerator();

        while (le.moveNext())
        {
            if (xPathString == '')
            {
                xPathString += le.current();
            }
            else
            {
                xPathString += '/' + le.current();
            }
        }

        return xPathString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXPathForLeaf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the XPath for a leaf node in the tree.
    /// </summary>
    /// <param name="_leafXPath">
    /// The relative XPath of the leaf.
    /// </param>
    /// <returns>
    /// An XPath for a leaf.
    /// </returns>
    protected str getXPathForLeaf(str _leafXPath)
    {
        str currentXPath = this.getXpath();

        if (currentXPath == '')
        {
            return _leafXPath;
        }
        return currentXPath + '/' + _leafXPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        nodeToPriceModelNode    = new Map(Types::Class, Types::Class);
        xpathToPriceModelNode   = new Map(Types::String, Types::Class);
        xPath                   = new List(Types::String);
        levelToXpath            = new Map(Types::Integer, Types::String);

        runtimePriceModel = PCRuntimePriceModel::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntimePriceModel</Name>
				<Source><![CDATA[
        public PCRuntimePriceModel parmRuntimePriceModel(PCRuntimePriceModel _runtimePriceModel = runtimePriceModel)
    {
        runtimePriceModel = _runtimePriceModel;

        return runtimePriceModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitEnd</Name>
				<Source><![CDATA[
        public void visitEnd(PCRuntimeInterface _runtimeElement)
    {
        if (_runtimeElement is PCRuntimeComponent)
        {
            this.visitEndComponent(_runtimeElement as PCRuntimeComponent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitEndComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends visiting a runtime component.
    /// </summary>
    /// <param name="_runtimeComponent">
    /// A runtime component.
    /// </param>
    /// <remarks>
    /// Updates the current XPath to correspond to the active level in the tree structure.
    /// </remarks>
    protected void visitEndComponent(PCRuntimeComponent _runtimeComponent)
    {
        List            newXpath    = new List(Types::String);
        ListEnumerator  le          = xpath.getEnumerator();

        if (level > runtimePriceModel.parmMaxLevel())
        {
            runtimePriceModel.parmMaxLevel(level);
        }

        level--;

        while (le.moveNext())
        {
            if (newXpath.elements() < level)
            {
                newXpath.addEnd(le.current());
            }
        }

        xPath = newXpath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStart</Name>
				<Source><![CDATA[
        public void visitStart(PCRuntimeInterface _runtimeElement)
    {
        if (_runtimeElement is PCRuntimeComponent)
        {
            this.visitStartComponent(_runtimeElement as PCRuntimeComponent);
        }
        else if (_runtimeElement is PCRuntimePriceElement)
        {
            this.visitStartPriceElement(_runtimeElement as PCRuntimePriceElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStartComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts visiting a runtime price component.
    /// </summary>
    /// <param name="_runtimeComponent">
    /// A runtime price component instance.
    /// </param>
    protected void visitStartComponent(PCRuntimeComponent _runtimeComponent)
    {
        xpath.addEnd(_runtimeComponent.parmSolverName());

        level++;

        runtimePriceModel.addComponent(_runtimeComponent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStartPriceElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits a runtime price element and adds it to the price model.
    /// </summary>
    /// <param name="_runtimePriceElement">
    /// A runtime price element.
    /// </param>
    protected void visitStartPriceElement(PCRuntimePriceElement _runtimePriceElement)
    {
        runtimePriceModel.addPriceElement(_runtimePriceElement, this.getXPathForLeaf(_runtimePriceElement.parmName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCRuntimeVisitorPriceModel construct()
    {
        return new PCRuntimeVisitorPriceModel();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>