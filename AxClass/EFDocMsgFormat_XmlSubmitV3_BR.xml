<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsgFormat_XmlSubmitV3_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates and interprets the XML to be sent to the submission web service. (Layout Version 3.10)
/// </summary>
class EFDocMsgFormat_XmlSubmitV3_BR extends EFDocMsgFormat_XmlSubmit_BR
{
    #ExportFiscalDocument_BR

    Amount totalReturnIpiAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create_cEnq_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_cEnq_Element(EFiscalDocumentLineTax_BR _taxLine)
    {
        return this.createElementWithValue('cEnq', _taxLine.taxExemptCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_dest_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_dest_Element()
    {
        #ExportFiscalDocument_BR
        XmlElement destElement;
        XmlElement enderDest;

        destElement = this.createElement('dest');
        if (fiscalDocument.thirdPartyCPF())
        {
            destElement.appendChild(this.createElementWithValue('CPF', this.formatKeepNumbersOnly(fiscalDocument.thirdPartyCPF())));
        }
        else
        {
            if (fiscalDocument.isInternationalOperation())
            {
                destElement.appendChild(this.createElementWithValue('idEstrangeiro', fiscalDocument.thirdPartyForeignerId()));
            }
            else
            {
                destElement.appendChild(this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(fiscalDocument.thirdPartyCNPJ())));
            }
        }

        if (fiscalDocument.fiscalEstablishment().EFDocEnvironment == EFDocEnvironment_BR::Testing)
        {
            destElement.appendChild(this.createElementWithValue('xNome', #TestRecipientName));
        }
        else
        {
            destElement.appendChild(this.createElementWithValue('xNome', fiscalDocument.thirdPartyName()));
        }

        enderDest = this.createElement('enderDest');
        enderDest.appendChild(this.createElementWithValue('xLgr', fiscalDocument.thirdPartyStreet() ));
        enderDest.appendChild(this.createElementWithValue('nro', fiscalDocument.thirdPartyAddressNumber() ));
        this.appendChildIfNotEmpty(enderDest, this.createElementWithValue('xCpl', fiscalDocument.thirdPartyAddressComplement() ));
        enderDest.appendChild(this.createElementWithValue('xBairro', fiscalDocument.thirdPartyAddressDistrict() ));
        enderDest.appendChild(this.createElementWithValue('cMun', fiscalDocument.thirdPartyCityIBGECode() ));
        enderDest.appendChild(this.createElementWithValue('xMun', fiscalDocument.thirdPartyCity() ));
        enderDest.appendChild(this.createElementWithValue('UF', fiscalDocument.thirdPartyState() ));
        enderDest.appendChild(this.createElementWithValue('CEP', this.formatFillLeft(fiscalDocument.thirdPartyZipCode(), 8)));
        enderDest.appendChild(this.createElementWithValue('cPais', fiscalDocument.thirdPartyCountryCode() ));
        enderDest.appendChild(this.createElementWithValue('xPais', fiscalDocument.thirdPartyCountryName() ));
        this.appendChildIfNotEmpty(enderDest, this.createElementWithValue('fone', this.formatKeepNumbersOnly(fiscalDocument.thirdPartyPhone())));

        destElement.appendChild(enderDest);

        destElement.appendChild(this.createElementWithValue('indIEDest', int2str(fiscalDocument.thirdPartyICMSContributionType()) ));

        if (fiscalDocument.thirdPartyIEnum() != 'ISENTO' && fiscalDocument.getOperationLocation() != OperationLocation_BR::International)
        {
            this.appendChildIfNotEmpty(destElement, this.createElementWithValue('IE', fiscalDocument.thirdPartyIEnum() == 'ISENTO' ? fiscalDocument.thirdPartyIEnum() : this.formatKeepNumbersOnly(fiscalDocument.thirdPartyIEnum())));
        }
        this.appendChildIfNotEmpty(destElement, this.createElementWithValue('ISUF', this.formatKeepNumbersOnly(fiscalDocument.deliverySuframaNumber())));
        this.appendChildIfNotEmpty(destElement, this.createElementWithValue('email', fiscalDocument.thirdPartyEmail()));

        return destElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_di_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_di_Element(EFiscalDocumentLine_BR _line)
    {
        XmlElement                  diElement;
        XmlElement                  adiElement;
        PurchImportDeclaration_BR   importDeclaration;

        diElement = this.createElement('DI');

        importDeclaration = fiscalDocument.PurchImportDeclaration();

        diElement.appendChild(this.createElementWithValue('nDI', fiscalDocument.PurchImportDeclaration().DINumber));
        diElement.appendChild(this.createElementWithValue('dDI', this.formatXmlDate(fiscalDocument.PurchImportDeclaration().DIDate)));
        diElement.appendChild(this.createElementWithValue('xLocDesemb', fiscalDocument.purchImportDeclaration().portName()));
        diElement.appendChild(this.createElementWithValue('UFDesemb', fiscalDocument.PurchImportDeclaration().PortState));
        diElement.appendChild(this.createElementWithValue('dDesemb', this.formatXmlDate(fiscalDocument.PurchImportDeclaration().DIDate)));

        diElement.appendChild(this.createElementWithValue('tpViaTransp', int2str(importDeclaration.TransportMode)));
        if (importDeclaration.TransportMode == EFDocTransportMode_BR::Marine)
        {
            diElement.appendChild(this.createElementWithValue('vAFRMM', this.formatXmlAmount(importDeclaration.AFRMM)));
        }

        diElement.appendChild(this.createElementWithValue('tpIntermedio', '1'));
        diElement.appendChild(this.createElementWithValue('cExportador', fiscalDocument.fiscalDocument().FiscalDocumentAccountNum));

        adiElement = this.createElement('adi');
        adiElement.appendChild(this.createElementWithValue('nAdicao', this.formatStr2Int(_line.purchAddition())));
        adiElement.appendChild(this.createElementWithValue('nSeqAdic', '1'));
        adiElement.appendChild(this.createElementWithValue('cFabricante', fiscalDocument.fiscalDocument().FiscalDocumentAccountNum));

        this.appendChildIfNotEmpty(adiElement, this.createElementWithValue('nDraw', importDeclaration.DrawBackNumber));

        diElement.appendChild(adiElement);

        return diElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_exporta_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the exporta element with data for exportation operations
    /// </summary>
    /// <returns>
    /// The XML element with exportation data
    /// </returns>
    protected XmlElement create_exporta_Element()
    {
        XmlElement  exportaElement;

        exportaElement = this.createElement('exporta');

        this.appendChildIfNotEmpty(exportaElement, this.createElementWithValue('UFSaidaPais', fiscalDocument.exportationPortState() ));
        this.appendChildIfNotEmpty(exportaElement, this.createElementWithValue('xLocExporta', fiscalDocument.exportationPortName() ));

        return exportaElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ICMS element
    /// </summary>
    /// <param name="_lineMap">
    /// The <c>EFiscalDocumentLine_BR</c> in which data about the ICMS element will be extracted.
    /// </param>
    /// <returns>
    /// The ICMS element created
    /// </returns>
    protected XmlElement create_ICMS_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement                  icmsElement;
        XmlElement                  icmsXXElement;
        EFiscalDocumentLineTax_BR   taxLine = _lineMap.getTaxLine(TaxType_BR::ICMS, '');

        icmsElement = this.createElement('ICMS');

        switch (taxLine.taxationCode())
        {
            case '00':
                icmsXXElement = this.create_ICMS00_element(taxLine);
                break;

            case '10':
                icmsXXElement = this.create_ICMS10_element(taxLine);
                break;

            case '20':
                icmsXXElement = this.create_ICMS20_element(taxLine);
                break;

            case '30':
                icmsXXElement = this.create_ICMS30_element(_lineMap, taxLine);
                break;

            case '40', '41', '50':
                icmsXXElement = this.create_ICMS40_element(_lineMap, taxLine);
                break;

            case '51':
                icmsXXElement = this.create_ICMS51_element(taxLine);
                break;

            case '60':
                icmsXXElement = this.create_ICMS60_element(taxLine);
                break;

            case '70':
                icmsXXElement = this.create_ICMS70_element(taxLine);
                break;

            case '90':
                icmsXXElement = this.create_ICMS90_element(taxLine);
                break;
        }

        this.appendChildIfNotEmpty(icmsElement, icmsXXElement);

        return icmsElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS00_element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create ICMS tag for electronic fiscal document when ICMS taxation code = 00.
    /// </summary>
    /// <param name="_taxLine">
    /// ICMS tax line.
    /// </param>
    /// <returns>
    /// The XML element that reports the values associated to ICMS whose taxation code = 00.
    /// </returns>
    protected XmlElement create_ICMS00_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        XmlElement icms00Element = this.createElement('ICMS00');

        icms00Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms00Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms00Element.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
        icms00Element.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(_taxLine.taxBaseAmount()) ));
        icms00Element.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct()) ));
        icms00Element.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(_taxLine.taxAmount()) ));

        return icms00Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS10_element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create ICMS tag for electronic fiscal document when ICMS taxation code = 10.
    /// </summary>
    /// <param name="_taxLine">
    /// ICMS tax line.
    /// </param>
    /// <returns>
    /// The XML element that reports the values associated to ICMS whose taxation code = 10.
    /// </returns>
    protected XmlElement create_ICMS10_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        XmlElement icms10Element = this.createElement('ICMS10');

        icms10Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms10Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms10Element.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
        icms10Element.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(_taxLine.taxBaseAmount()) ));
        icms10Element.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct()) ));
        icms10Element.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(_taxLine.taxAmount()) ));
        icms10Element.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
        this.appendChildIfNotEmpty(icms10Element, this.createElementWithValue('pMVAST', this.formatXmlAmount(_taxLine.tribSubstMarkupPct()) ));
        this.appendChildIfNotEmpty(icms10Element, this.createElementWithValue('pRedBCST', this.formatXmlAmount(_taxLine.tribSubstReductionPct()) ));
        icms10Element.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(_taxLine.tribSubstTaxBaseAmount()) ));
        icms10Element.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxPct()) ));
        icms10Element.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxAmount()) ));

        return icms10Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS20_element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create ICMS tag for electronic fiscal document when ICMS taxation code = 20.
    /// </summary>
    /// <param name="_taxLine">
    /// ICMS tax line.
    /// </param>
    /// <returns>
    /// The XML element that reports the values associated to ICMS whose taxation code = 20.
    /// </returns>
    protected XmlElement create_ICMS20_element(EFiscalDocumentLineTax_BR _taxLine)

    {
        XmlElement icms20Element = this.createElement('ICMS20');

        icms20Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms20Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms20Element.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
        icms20Element.appendChild(this.createElementWithValue('pRedBC', this.formatXmlAmount(_taxLine.taxReductionPct()) ));
        icms20Element.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(_taxLine.taxBaseAmount()) ));
        icms20Element.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct()) ));
        icms20Element.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(_taxLine.taxAmount()) ));

        return icms20Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS30_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create ICMS tag for electronic fiscal document when ICMS taxation code = 30.
    /// </summary>
    /// <param name="_lineMap">
    /// Electronic fiscal document line.
    /// </param>
    /// <param name="_taxLine">
    /// ICMS tax line.
    /// </param>
    /// <returns>
    /// The XML element that reports the values associated to ICMS whose taxation code = 30.
    /// </returns>
    protected XmlElement create_ICMS30_Element(EFiscalDocumentLine_BR _lineMap, EFiscalDocumentLineTax_BR _taxLine)
    {
        XmlElement icms30Element = this.createElement('ICMS30');
        icms30Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms30Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms30Element.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
        this.appendChildIfNotEmpty(icms30Element, this.createElementWithValue('pMVAST', this.formatXmlAmount(_taxLine.tribSubstMarkupPct()) ));
        this.appendChildIfNotEmpty(icms30Element, this.createElementWithValue('pRedBCST', this.formatXmlAmount(_taxLine.tribSubstReductionPct()) ));
        icms30Element.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(_taxLine.tribSubstTaxBaseAmount()) ));
        icms30Element.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxPct()) ));
        icms30Element.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxAmount()) ));

        if (fiscalDocument.deliverySuframaNumber() && _lineMap.suframaDiscountICMS())
        {
            icms30Element.appendChild(this.createElementWithValue('vICMSDeson', this.formatXmlAmount(_lineMap.suframaDiscountICMS()) ));
            icms30Element.appendChild(this.createElementWithValue('motDesICMS', #MotDesICMS_SUFRAMA));
        }

        return icms30Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS40_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMS40_Element(EFiscalDocumentLine_BR _lineMap, EFiscalDocumentLineTax_BR _taxLine)
    {
        XmlElement icms40Element = this.createElement('ICMS40');

        icms40Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms40Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));

        if (fiscalDocument.deliverySuframaNumber() && _lineMap.suframaDiscountICMS())
        {
            icms40Element.appendChild(this.createElementWithValue('vICMSDeson', this.formatXmlAmount(_lineMap.suframaDiscountICMS()) ));
            icms40Element.appendChild(this.createElementWithValue('motDesICMS', #MotDesICMS_SUFRAMA));
        }

        return icms40Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS51_element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create ICMS tag for electronic fiscal document when ICMS taxation code = 51.
    /// </summary>
    /// <param name="_taxLine">
    /// ICMS tax line.
    /// </param>
    /// <returns>
    /// The XML element that reports the values associated to ICMS whose taxation code = 51.
    /// </returns>
    protected XmlElement create_ICMS51_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        #ExportFiscalDocument_BR

        XmlElement icms51Element = this.createElement('ICMS51');

        icms51Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms51Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        this.appendChildIfNotEmpty(icms51Element, this.createElementWithValue('modBC', #ICMSModBc ));
        this.appendChildIfNotEmpty(icms51Element, this.createElementWithValue('pRedBC', this.formatXmlAmount(_taxLine.taxReductionPct()) ));
        this.appendChildIfNotEmpty(icms51Element, this.createElementWithValue('vBC', this.formatXmlAmount(_taxLine.taxBaseAmount()) ));
        this.appendChildIfNotEmpty(icms51Element, this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct()) ));
        this.appendChildIfNotEmpty(icms51Element, this.createElementWithValue('vICMS', this.formatXmlAmount(_taxLine.taxAmount()) ));

        return icms51Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS60_element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create ICMS tag for electronic fiscal document when ICMS taxation code = 60.
    /// </summary>
    /// <param name="_taxLine">
    /// ICMS tax line.
    /// </param>
    /// <returns>
    /// The XML element that reports the values associated to ICMS whose taxation code = 60.
    /// </returns>
    protected XmlElement create_ICMS60_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        XmlElement icms60Element = this.createElement('ICMS60');

        icms60Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms60Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms60Element.appendChild(this.createElementWithValue('vBCSTRet', this.formatXmlAmount(_taxLine.tribSubstTaxBaseAmount()) ));
        icms60Element.appendChild(this.createElementWithValue('vICMSSTRet', this.formatXmlAmount(_taxLine.tribSubstTaxAmount()) ));

        return icms60Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS70_element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create ICMS tag for electronic fiscal document when ICMS taxation code = 70.
    /// </summary>
    /// <param name="_taxLine">
    /// ICMS tax line.
    /// </param>
    /// <returns>
    /// The XML element that reports the values associated to ICMS whose taxation code = 70.
    /// </returns>
    protected XmlElement create_ICMS70_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        XmlElement icms70Element = this.createElement('ICMS70');

        icms70Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms70Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms70Element.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
        icms70Element.appendChild(this.createElementWithValue('pRedBC', this.formatXmlAmount(_taxLine.taxReductionPct()) ));
        icms70Element.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(_taxLine.taxBaseAmount()) ));
        icms70Element.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct()) ));
        icms70Element.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(_taxLine.taxAmount()) ));
        icms70Element.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
        this.appendChildIfNotEmpty(icms70Element, this.createElementWithValue('pMVAST', this.formatXmlAmount(_taxLine.tribSubstMarkupPct()) ));
        this.appendChildIfNotEmpty(icms70Element, this.createElementWithValue('pRedBCST', this.formatXmlAmount(0) ));
        icms70Element.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(_taxLine.tribSubstTaxBaseAmount()) ));
        icms70Element.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxPct()) ));
        icms70Element.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxAmount()) ));

        return icms70Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS90_element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create ICMS tag for electronic fiscal document when ICMS taxation code = 90.
    /// </summary>
    /// <param name="_taxLine">
    /// ICMS tax line.
    /// </param>
    /// <returns>
    /// The XML element that reports the values associated to ICMS whose taxation code = 90.
    /// </returns>
    protected XmlElement create_ICMS90_element(EFiscalDocumentLineTax_BR _taxLine)
    {
        XmlElement icms90Element = this.createElement('ICMS90');

        icms90Element.appendChild(this.createElementWithValue('orig', _taxLine.taxationOrigin() ));
        icms90Element.appendChild(this.createElementWithValue('CST', _taxLine.taxationCode() ));
        icms90Element.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
        icms90Element.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(_taxLine.taxBaseAmount()) ));
        this.appendChildIfNotEmpty(icms90Element,this.createElementWithValue('pRedBC', this.formatXmlAmount(_taxLine.taxReductionPct()) ));
        icms90Element.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(_taxLine.taxPct()) ));
        icms90Element.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(_taxLine.taxAmount()) ));
        icms90Element.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
        this.appendChildIfNotEmpty(icms90Element, this.createElementWithValue('pMVAST', this.formatXmlAmount(_taxLine.tribSubstMarkupPct()) ));
        this.appendChildIfNotEmpty(icms90Element, this.createElementWithValue('pRedBCST', this.formatXmlAmount(0) ));
        icms90Element.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(_taxLine.tribSubstTaxBaseAmount()) ));
        icms90Element.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxPct()) ));
        icms90Element.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(_taxLine.tribSubstTaxAmount()) ));

        return icms90Element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMSUF_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMSUF_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement                  icmsElement;
        EFiscalDocumentLineTax_BR   taxLine = _lineMap.getTaxLine(TaxType_BR::ICMS, '');
        EFiscalDocumentLineTax_BR   diffTaxLine = _lineMap.getTaxLine(TaxType_BR::ICMSDiff, '');

        if (this.isExemptOrImmuneTaxCode(taxLine.taxationCode()))
        {
            return null;
        }

        icmsElement = this.createElement('ICMSUFDest');

        icmsElement.appendChild(this.createElementWithValue('vBCUFDest', this.formatXmlAmount(diffTaxLine.taxBaseAmount()) ));
        icmsElement.appendChild(this.createElementWithValue('pFCPUFDest', this.formatXmlAmount(diffTaxLine.taxPovertyFundPercentage()) ));
        icmsElement.appendChild(this.createElementWithValue('pICMSUFDest', this.formatXmlAmount(taxLine.taxPct() + diffTaxLine.taxPct() - diffTaxLine.taxPovertyFundPercentage()) ));
        icmsElement.appendChild(this.createElementWithValue('pICMSInter', this.formatXmlAmount(taxLine.taxPct()) ));
        icmsElement.appendChild(this.createElementWithValue('pICMSInterPart', this.formatXmlAmount(FiscalDocumentTaxTransOutgoingICMSDif_BR::icmsDiffRecipientPct(this.getFiscalDocumentDate())) ));
        icmsElement.appendChild(this.createElementWithValue('vFCPUFDest', this.formatXmlAmount(diffTaxLine.taxPovertyFundAmount()) ));
        icmsElement.appendChild(this.createElementWithValue('vICMSUFDest', this.formatXmlAmount(diffTaxLine.icmsDifRecipientTaxAmount()) ));
        icmsElement.appendChild(this.createElementWithValue('vICMSUFRemet', this.formatXmlAmount(diffTaxLine.icmsDifIssuerTaxAmount()) ));

        return icmsElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ide_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_ide_Element()
    {
        XmlElement ideElement;

        ideElement = this.createElement('ide');
        ideElement.appendChild(this.createElementWithValue('cUF', substr(fiscalDocument.issuerIBGECode(), 1, 2) ));
        ideElement.appendChild(this.createElementWithValue('cNF', this.formatFillLeft(int2str(fiscalDocument.numericCode()), 8)));
        ideElement.appendChild(this.createElementWithValue('natOp', fiscalDocument.fiscalDocument().OperationDescription ));
        ideElement.appendChild(this.createElementWithValue('indPag', fiscalDocument.paymTerms() ));
        ideElement.appendChild(this.createElementWithValue('mod',  fiscalDocument.fiscalDocument().Model));
        ideElement.appendChild(this.createElementWithValue('serie', this.formatStr2Int(fiscalDocument.fiscalDocument().FiscalDocumentSeries)));
        ideElement.appendChild(this.createElementWithValue('nNF', this.formatStr2Int(fiscalDocument.fiscalDocument().FiscalDocumentNumber)));
        ideElement.appendChild(this.createElementWithValue('dhEmi', fiscalDocument.getFiscalDocIssueDateTimeWithTimeZone()));
        ideElement.appendChild(this.createElementWithValue('dhSaiEnt', fiscalDocument.getFiscalDocOutboundDateTimeWithTimeZone()));
        ideElement.appendChild(this.createElementWithValue('tpNF', fiscalDocument.inventoryDirection() ));
        ideElement.appendChild(this.createElementWithValue('idDest', int2str(fiscalDocument.getOperationLocation())));
        ideElement.appendChild(this.createElementWithValue('cMunFG', fiscalDocument.issuerIBGECode() ));
        ideElement.appendChild(this.createElementWithValue('tpImp', '1' ));
        ideElement.appendChild(this.createElementWithValue('tpEmis', int2str(enum2int(fiscalDocument.contingencyMode()))));
        ideElement.appendChild(this.createElementWithValue('cDV', substr(fiscalDocument.accessKey(), strlen(fiscalDocument.accessKey()), 1) ));
        ideElement.appendChild(this.createElementWithValue('tpAmb', fiscaldocument.fiscalEstablishment().EFDocEnvironment == EFDocEnvironment_BR::Production ? '1' : '2' ));
        ideElement.appendChild(this.createElementWithValue('finNFe', this.getFiscalDocumentPurpose() ));
        ideElement.appendChild(this.createElementWithValue('indFinal', int2str(fiscalDocument.finalUser())));
        ideElement.appendChild(this.createElementWithValue('indPres', int2str(fiscalDocument.presenceType())));
        ideElement.appendChild(this.createElementWithValue('procEmi', '0' ));
        ideElement.appendChild(this.createElementWithValue('verProc', substr(ApplicationVersion::applBuildNo(), 1, 20) ));

        this.appendChildIfNotEmpty(ideElement, this.createElementWithValue('dhCont', fiscalDocument.contingencyDateTime()));
        this.appendChildIfNotEmpty(ideElement, this.createElementWithValue('xJust', fiscalDocument.contingencyReason()) );

        this.create_NFref_Element(ideElement);

        return ideElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_imposto_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_imposto_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement impostoElement;

        impostoElement = this.createElement('imposto');

        this.appendChildIfNotEmpty(impostoElement, this.create_vTotTrib_Element(_lineMap));

        if (!this.hasISS(_lineMap))
        {
            impostoElement.appendChild(this.create_ICMS_Element(_lineMap));
            this.appendChildIfNotEmpty(impostoElement, this.create_IPI_Element(_lineMap));
            this.appendChildIfNotEmpty(impostoElement, this.create_II_Element(_lineMap));
        }
        else
        {
            this.appendChildIfNotEmpty(impostoElement, this.create_ISSQN_Element(_lineMap));
        }

        impostoElement.appendChild(this.create_PIS_Element(_lineMap));
        impostoElement.appendChild(this.create_COFINS_Element(_lineMap));

        if (fiscalDocument.hasIcmsDif())
        {
            this.appendChildIfNotEmpty(impostoElement, this.create_ICMSUF_Element(_lineMap));
        }

        return impostoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_impostoDevol_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the impostoDevol tag group element
    /// </summary>
    /// <param name="_lineMap">
    /// The <c>EFiscalDocumentLine_BR</c> object that will serve as the source of information for the tag group to be created
    /// </param>
    /// <returns>
    /// A XmlElement object containing the tag group impostoDevol or null if there's no IPI amount being returned
    /// </returns>
    protected XmlElement create_impostoDevol_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement impostoDevolElement;
        EFiscalDocumentLineTax_BR taxLine = _lineMap.getTaxLine(TaxType_BR::IPI, '');
        Qty originalQty = this.getReturnedQtyForLine(_lineMap.fiscalDocumentLine());

        if (taxLine.taxAmountOther() && originalQty)
        {
            impostoDevolElement = this.createElement('impostoDevol');
            XmlElement ipiElement = this.createElement('IPI');

            impostoDevolElement.appendChild(this.createElementWithValue('pDevol', this.formatXmlAmount(_lineMap.fiscalDocumentLine().Quantity / abs(originalQty) * 100)));

            Amount ipiAmount = taxLine.taxAmountOther();
            totalReturnIpiAmount += ipiAmount;

            ipiElement.appendChild(this.createElementWithValue('vIPIDevol', this.formatXmlAmount(ipiAmount)));

            impostoDevolElement.appendChild(ipiElement);
        }

        return impostoDevolElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_prod_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_prod_Element(EFiscalDocumentLine_BR _line)
    {
        XmlElement prodElement;
        real       unitPrice;
        DiscAmount discountWithoutSuframaICMS = abs(_line.lineDiscount() - abs(_line.suframaDiscountICMS()));

        if (_line.fiscalDocumentLine().Quantity)
        {
            unitPrice = _line.fiscalDocumentLine().LineAmount / _line.fiscalDocumentLine().Quantity;
        }

        prodElement = this.createElement('prod');

        prodElement.appendChild(this.createElementWithValue('cProd', _line.itemId() ));
        prodElement.appendChild(this.createElementWithValue('cEAN', _line.GTINCode()));
        prodElement.appendChild(this.createElementWithValue('xProd', _line.fiscalDocumentLine().Description));
        prodElement.appendChild(this.createElementWithValue('NCM', this.formatKeepNumbersOnly(_line.fiscalDocumentLine().FiscalClassification ? _line.fiscalDocumentLine().FiscalClassification: #NCMDefault)));
        this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('CEST', this.formatKeepNumbersOnly(_line.fiscalDocumentLine().TaxSubstitutionCode) ));
        prodElement.appendChild(this.createElementWithValue('CFOP', this.formatKeepNumbersOnly(_line.fiscalDocumentLine().CFOP) ));
        prodElement.appendChild(this.createElementWithValue('uCom', _line.fiscalDocumentLine().Unit));
        prodElement.appendChild(this.createElementWithValue('qCom', this.formatXmlQty(_line.fiscalDocumentLine().Quantity) ));
        prodElement.appendChild(this.createElementWithValue('vUnCom', this.formatXmlAmount(unitPrice, 10)));
        prodElement.appendChild(this.createElementWithValue('vProd', this.formatXmlAmount(_line.grossLineAmount()) ));
        prodElement.appendChild(this.createElementWithValue('cEANTrib', _line.GTINCode()));
        prodElement.appendChild(this.createElementWithValue('uTrib', _line.fiscalDocumentLine().Unit));
        prodElement.appendChild(this.createElementWithValue('qTrib', this.formatXmlQty(_line.fiscalDocumentLine().Quantity) ));
        prodElement.appendChild(this.createElementWithValue('vUnTrib', this.formatXmlAmount(unitPrice, 10)));

        if (_line.totalFreightMarkupAmount() > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vFrete', this.formatXmlAmount(_line.totalFreightMarkupAmount()) ));
        }

        if (_line.totalInsuranceMarkupAmount() > 0)
        {
                this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vSeg', this.formatXmlAmount(_line.totalInsuranceMarkupAmount()) ));
        }

        if (discountWithoutSuframaICMS > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vDesc', this.formatXmlAmount(discountWithoutSuframaICMS)));
        }

        if (_line.totalOthersMarkupAmount() > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vOutro', this.formatXmlAmount(_line.totalOthersMarkupAmount()) ));
        }

        this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('indTot', '1' ));

        if (fiscalDocument.PurchImportDeclaration())
        {
            prodElement.appendChild(this.create_di_Element(_line));
        }

        this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('xPed', _line.custPurchaseOrder()));

        if (_line.custLineNumber() > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('nItemPed', this.formatInt2Str(_line.custLineNumber())));
        }

        this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('nFCI', _line.fiscalDocumentLine().FCINumber));

        return prodElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_total_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_total_Element()
    {
        XmlElement  totalElement;
        XmlElement  icmsTotElement;
        XmlElement  issqnTotElement;
        XmlElement  retTribElement;

        totalElement = this.createElement('total');

        icmsTotElement = this.createElement('ICMSTot');
        icmsTotElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::ICMS) ) ));
        icmsTotElement.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::ICMS)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vICMSDeson', this.formatXmlAmount(fiscalDocument.totalSuframaDiscountICMSAmount()) ));

        if (fiscalDocument.hasIcmsDif())
        {
            icmsTotElement.appendChild(this.createElementWithValue('vFCPUFDest', this.formatXmlAmount(fiscalDocument.taxPovertyFundAmount()) ));
            icmsTotElement.appendChild(this.createElementWithValue('vICMSUFDest', this.formatXmlAmount(fiscalDocument.icmsDifRecipientTaxAmount()) ));
            icmsTotElement.appendChild(this.createElementWithValue('vICMSUFRemet', this.formatXmlAmount(fiscalDocument.icmsDifIssuerTaxAmount()) ));
        }

        icmsTotElement.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::ICMS, true)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vST', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::ICMS, true)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vProd', this.formatXmlAmount(fiscalDocument.totalGrossGoodsAmount() )));
        icmsTotElement.appendChild(this.createElementWithValue('vFrete', this.formatXmlAmount(abs(fiscalDocument.fiscalDocument().TotalMarkupFreightAmount))));
        icmsTotElement.appendChild(this.createElementWithValue('vSeg', this.formatXmlAmount(abs(fiscalDocument.fiscalDocument().TotalMarkupInsuranceAmount))));
        icmsTotElement.appendChild(this.createElementWithValue('vDesc', this.formatXmlAmount(fiscalDocument.totalDiscountAmount() - abs(fiscalDocument.totalSuframaDiscountICMSAmount())) ));
        icmsTotElement.appendChild(this.createElementWithValue('vII', this.formatXmlAmount(fiscalDocument.importTaxAmountOther()) ));
        icmsTotElement.appendChild(this.createElementWithValue('vIPI', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::IPI)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vPIS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForProducts(TaxType_BR::PIS)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vCOFINS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForProducts(TaxType_BR::COFINS)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vOutro', this.formatXmlAmount(abs(fiscalDocument.fiscalDocument().TotalMarkupOtherAmount)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vNF', this.formatXmlAmount(fiscalDocument.fiscalDocument().TotalAmount) ));

        this.appendChildIfNotEmpty(icmsTotElement, this.createElementWithValue('vTotTrib', this.formatXmlAmount(fiscalDocument.getTotalApproximateAmount())));

        issqnTotElement = this.createElement('ISSQNtot');
        this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vServ', this.formatXmlAmount(fiscalDocument.totalGrossServicesAmount() )));
        this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vBC', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::ISS)) ));
        this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vISS', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::ISS)) ));
        if (fiscalDocument.isImporting())
        {
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vPIS', this.formatXmlAmount(fiscalDocument.taxAmountForServices(TaxType_BR::PIS) )));
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vCOFINS', this.formatXmlAmount(fiscalDocument.taxAmountForServices(TaxType_BR::COFINS) )));
        }
        else
        {
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vPIS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForServices(TaxType_BR::PIS) )));
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vCOFINS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForServices(TaxType_BR::COFINS) )));
        }

        retTribElement = this.createElement('retTrib');
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetPIS', this.formatXmlAmount(fiscalDocument.taxWithholdAmount(TaxWithholdType_BR::PIS)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetCOFINS', this.formatXmlAmount(fiscalDocument.taxWithholdAmount(TaxWithholdType_BR::COFINS)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetCSLL', this.formatXmlAmount(fiscalDocument.taxWithholdAmount(TaxWithholdType_BR::CSLL)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vBCIRRF', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::IRRF)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vIRRF', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::IRRF)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vBCRetPrev', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::INSSRetained)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetPrev', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::INSSRetained)) ));

        totalElement.appendChild(icmsTotElement);
        this.appendChildIfNotEmpty(totalElement, issqnTotElement);
        this.appendChildIfNotEmpty(totalElement, retTribElement);

        return totalElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the elements that containg information about the items in the Fiscal Document
    /// </summary>
    /// <param name="_parentElement">
    /// The parent element in which the items' elements will be created
    /// </param>
    protected void createItems(XmlElement _parentElement)
    {
        boolean shouldWriteImpostoDevolGroup = fiscalDocument.purpose() == FiscalDocumentPurpose_BR::Return;

        while (fiscalDocument.nextLine())
        {
            EFiscalDocumentLine_BR lineMap = fiscalDocument.currentLine();

            XmlElement detElement = this.createElement('det');

            detElement.setAttribute('nItem', int2str(real2int(lineMap.fiscalDocumentLine().lineNum)));

            detElement.appendChild(this.create_prod_Element(lineMap));
            detElement.appendChild(this.create_imposto_Element(lineMap));

            if (shouldWriteImpostoDevolGroup)
            {
                this.appendChildIfNotEmpty(detElement, this.create_ImpostoDevol_Element(lineMap));
            }

            this.appendChildIfNotEmpty(detElement, this.createElementWithValue('infAdProd', strRTrim(lineMap.getAdditionalInformation()) ));

            _parentElement.appendChild(detElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFormatConsumerEFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes existing NFC-e format to stream.
    /// </summary>
    protected void doFormatConsumerEFiscalDocument()
    {
        xmlDoc.loadXml(fiscalDocument.eFDocumentXML().Submission);

        stream.write(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>eFiscalDocVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the NF-e manual that this class adheres to.
    /// </summary>
    /// <returns>The version of the NF-e manual from <c>EFiscalDocVersion_BR</c> enumerator.</returns>
    public EFiscalDocVersion_BR eFiscalDocVersion()
    {
        return EFiscalDocVersion_BR::V31;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentDate</Name>
				<Source><![CDATA[
    protected FiscalDocumentDate_BR getFiscalDocumentDate()
    {
        FiscalDocumentDate_BR fiscalDocumentDate;
        FiscalDocument_BR originalDocument;

        switch (fiscalDocument.fiscalDocument().RefTableId)
        {
            case tablenum(CustInvoiceJour):
                originalDocument = fiscalDocument.fiscalDocument();

            case tableNum(SalesComplementaryInvoiceHeader):
                originalDocument = FiscalDocument_BR::find(fiscalDocument.fiscalDocument().ComplementedFiscalDocument);
        }

        if (originalDocument.RefTableId == tableNum(CustInvoiceJour))
        {
            CustInvoiceJour custInvoiceJour = originalDocument.findRefRecord();
            SalesLine salesLine = SalesLine::findInventTransId(SalesLine::find(custInvoiceJour.SalesId).InventTransIdReturn);
            CFOPTable_BR cfopTable = CFOPTable_BR::find(salesLine.salesLine_BR().CFOPTable_BR);

            if (custInvoiceJour.SalesType == SalesType::ReturnItem
            && cfopTable.CustVendLocation == CustVendLocation_BR::OtherState
            && custInvoiceJour.custInvoiceJour_BR().CustFinalUser_BR)
            {
                fiscalDocumentDate = CustInvoiceJour::findFromSalesId_IN(salesLine.SalesId).InvoiceDate;
            }
        }

        if (!fiscalDocumentDate)
        {
            fiscalDocumentDate = fiscalDocument.fiscalDocument().FiscalDocumentDate;
        }

        return fiscalDocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value that represents the fiscal document purpose on NF-e xml v3.1 (ide/finNFe tag)
    /// </summary>
    /// <returns>
    /// A string containing the NF-e xml v3.1 purpose
    /// </returns>
    protected str getFiscalDocumentPurpose()
    {
        str purpose;

        switch (fiscalDocument.Purpose())
        {
            case FiscalDocumentPurpose_BR::Regular:
                purpose = '1';
                break;
            case FiscalDocumentPurpose_BR::PriceComplement:
            case FiscalDocumentPurpose_BR::TaxComplement:
                purpose = '2';
                break;
            case FiscalDocumentPurpose_BR::Adjustment:
                purpose = '3';
                break;
            case FiscalDocumentPurpose_BR::Return:
                purpose = '4';
                break;
        }

        return purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnedQtyForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets returned quantity for specific line.
    /// </summary>
    /// <param name = "_fiscalDocumentLine">
    /// <c>FisclaDocumentLine_BR</c> record.
    /// </param>
    /// <returns>
    /// Returned quantity.
    /// </returns>
    protected Qty getReturnedQtyForLine(FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        return this.getReturnedVendInvoiceTrans(_fiscalDocumentLine).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnedVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendInvoiceTrans</c> record that is being returned by the fiscal document
    /// </summary>
    /// <param name="_fiscalDocumentLine">
    /// The fiscal document line that relates to the one being returned
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceTrans</c> record if one is found or an empty buffer
    /// </returns>
    protected VendInvoiceTrans getReturnedVendInvoiceTrans(FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        VendInvoiceTrans        vendInvoiceTrans, returnedLine;
        PurchLine               purchLine;

        if (_fiscalDocumentLine.RefTableId == tableNum(VendInvoiceTrans))
        {
            select returnedLine
                exists join vendInvoiceTrans
                    where vendInvoiceTrans.RecId == _fiscalDocumentLine.RefRecId
                exists join purchLine
                    where purchLine.InventTransId == vendInvoiceTrans.InventTransId
                       && returnedLine.InventTransId == purchLine.InventRefTransId;
        }

        return returnedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indSinc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the communication with SEFAZ webservices will be synchronous or asynchronous.
    /// </summary>
    /// <returns>
    /// Returns 0 as the content of the indSinc XML tag if the communication will be asynchronous, otherwise, 1.
    /// </returns>
    /// <remarks>
    /// Currently AX just supports asynchronous communication, so, this method will always return 0 for the tag content.
    /// </remarks>
    protected str indSinc()
    {
        #define.Asynchronous('0')

        return this.createElementWithValue('indSinc', #Asynchronous).toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init total amounts so that they will always contain the values related to current format execution.
    /// </summary>
    protected void init()
    {
        totalReturnIpiAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>read</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the XML returned by the submission web service.
    /// </summary>
    /// <param name="_stream">The stream from which to read the XML.</param>
    /// <param name="_returnInfo">A parm object to fill the return information.</param>
    public void read(IEFDocMsgStream_BR _stream, EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        #ExportFiscalDocument_BR

        str             returnCode;
        str             returnCodeDescription;
        str             returnReceiptNumber;
        str             returnDateTime;
        utcdatetime     dateTime;
        str             averageResponseTime;
        str             returnProtocolNumber;

        xmlDoc.loadXml(conpeek(_stream.read(),1));

        returnCode              = this.getNodeContent('/x:retEnviNFe/x:cStat');
        returnCodeDescription   = this.getNodeContent('/x:retEnviNFe/x:xMotivo');
        returnDateTime          = this.getNodeContent('/x:retEnviNFe/x:dhRecbto', false);

        if (returnCode == #LotReceived)
        {
            returnReceiptNumber     = this.getNodeContent('/x:retEnviNFe/x:infRec/x:nRec');
            averageResponseTime     = this.getNodeContent('/x:retEnviNFe/x:infRec/x:tMed');
        }
        else if (returnCode == #BatchProcessed)
        {
            returnCode              = this.getNodeContent('/x:retEnviNFe/x:protNFe/x:infProt/x:cStat');
            returnCodeDescription   = this.getNodeContent('/x:retEnviNFe/x:protNFe/x:infProt/x:xMotivo');
            returnDateTime          = this.getNodeContent('/x:retEnviNFe/x:protNFe/x:infProt/x:dhRecbto');

            if (returnCode == #Authorized)
            {
                returnProtocolNumber = this.getNodeContent('/x:retEnviNFe/x:protNFe/x:infProt/x:nProt');
            }
        }

        dateTime = this.getUtcDateTimeFromDateStrWithTZD(returnDateTime);

        _returnInfo.parmReturnCodeStatus(returnCode);
        _returnInfo.parmReturnCodeDescription(returnCodeDescription);
        _returnInfo.parmAverageResponseTime(str2int(averageResponseTime));
        _returnInfo.parmReceiptNumber(returnReceiptNumber);
        _returnInfo.parmProcessDateTime(dateTime);
        _returnInfo.parmProtocolNumber(returnProtocolNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the XML that this class creates and interprets.
    /// </summary>
    /// <returns>The XML version in string format.</returns>
    public str version()
    {
        return #EFDocLayoutVersion310;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML messages and sends it to the provided message stream.
    /// </summary>
    /// <param name="_stream">The stream to be used to send the messages</param>
    /// <param name="_documentList">A <c>EFiscalDocumentList_BR</c> list of documents to be sent.</param>
    public void write(IEFDocMsgStream_BR _stream, EFiscalDocumentList_BR _documentList)
    {
        #FiscalDocumentModels_BR
    
        this.init();

        stream = _stream;

        if (_documentList.moveNext())
        {
            fiscalDocument = _documentList.current();

            if (fiscalDocument.fiscalDocument().Model == #FiscalDocModel_65)
            {
                this.doFormatConsumerEFiscalDocument();
            }
            else
            {
                this.doFormat();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocMsgFormat_XmlSubmitV3_BR</c> object.
    /// </summary>
    /// <returns>A <c>EFDocMsgFormat_XmlSubmitV3_BR</c> object.</returns>
    public static EFDocMsgFormat_XmlSubmitV3_BR construct()
    {
        return new EFDocMsgFormat_XmlSubmitV3_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExemptOrImmuneTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether given taxation code is Exempt or Immune transaction code (CST = 40, 41).
    /// </summary>
    /// <param name = "_taxationCode">Taxation code to check.</param>
    /// <returns>True - if given taxation code is exempt or immune transaction code; false, othervise.</returns>
    [Hookable(false), Wrappable(false)]
    protected boolean isExemptOrImmuneTaxCode(TaxationCode_BR _taxationCode)
    {
        switch (_taxationCode)
        {
            case FiscalBooksConstants_BR::TaxationCode40:
            case FiscalBooksConstants_BR::TaxationCode41:
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>