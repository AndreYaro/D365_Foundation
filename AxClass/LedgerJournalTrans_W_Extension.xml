<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_W_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension methods for the <c>LedgerJournalTrans</c> class.
/// </summary>
public static class LedgerJournalTrans_W_Extension
{
    #ISOCountryRegionCodes
    #EECountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifyVatDueDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify the VAT due date.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    public static void modifyVatDueDate_W(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        LedgerJournalACType accountType;
        boolean             offset;
        CustTable           custTable;
        VendTable           vendTable;
        boolean             mandatoryVatDate     = true;
        boolean             vatDateIsPaymentDate = false;

        void findMandatoryVatDate(LedgerJournalTrans _localLedgerJournalTrans)
        {
            if (_localLedgerJournalTrans.LedgerDimension)
            {
                accountType = _localLedgerJournalTrans.AccountType;
            }
            else
            {
                accountType = _localLedgerJournalTrans.OffsetAccountType;
                offset      = true;
            }

            switch (accountType)
            {
                case LedgerJournalACType::Cust :
                            custTable = CustTable::findByCompany(offset                           ?
                                                    _localLedgerJournalTrans.OffsetCompany :
                                                    _localLedgerJournalTrans.Company,
                                                    offset                           ?
                                                    LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.OffsetLedgerDimension) :
                                                    LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.LedgerDimension));
                    mandatoryVatDate     = custTable.MandatoryVatDate_PL;
                    vatDateIsPaymentDate = PlTaxDueTable::find(custTable.TaxPeriodPaymentCode_PL).VatDateIsPaymentDate;
                    break;
                case LedgerJournalACType::Vend :
                            vendTable = VendTable::findByCompany(offset                           ?
                                                                 _localLedgerJournalTrans.OffsetCompany :
                                                                 _localLedgerJournalTrans.Company,
                                                                 offset                           ?
                                                                 LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.OffsetLedgerDimension) :
                                                                 LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.LedgerDimension));
                    mandatoryVatDate     = vendTable.MandatoryVatDate_PL;
                    vatDateIsPaymentDate = PlTaxDueTable::find(vendTable.TaxPeriodPaymentCode_PL).VatDateIsPaymentDate;
                    break;
            }

            if (vatDateIsPaymentDate)
            {
                _ledgerJournalTrans.VatDueDate_W = _ledgerJournalTrans.Due;
            }
        }

        if (!TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            return;
        }

        if ((_ledgerJournalTrans.TaxItemGroup && _ledgerJournalTrans.TaxGroup) || _ledgerJournalTrans.TaxCode)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                select firstonly ledgerJournalTrans
                    where   ledgerJournalTrans.JournalNum        == _ledgerJournalTrans.JournalNum
                       &&   ledgerJournalTrans.Voucher           == _ledgerJournalTrans.Voucher
                       &&   ledgerJournalTrans.TransDate         == _ledgerJournalTrans.TransDate
                       && ((ledgerJournalTrans.LedgerDimension
                       &&   ledgerJournalTrans.Company
                       &&  (ledgerJournalTrans.AccountType       == LedgerJournalACType::Cust
                       ||   ledgerJournalTrans.AccountType       == LedgerJournalACType::Vend))
                       ||  (ledgerJournalTrans.OffsetLedgerDimension
                       &&   ledgerJournalTrans.OffsetCompany
                       &&  (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust
                       ||   ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)));

                if (ledgerJournalTrans)
                {
                    findMandatoryVatDate(ledgerJournalTrans);
                }
                else
                {
                    findMandatoryVatDate(_ledgerJournalTrans);
                }
            }

            TaxGroupHeading taxGroupHeading = TaxGroupHeading::find(_ledgerJournalTrans.TaxGroup);
            FillVATDueDate_W fillVATDueDate = taxGroupHeading.FillVATDueDate_W;

            if (   (!_ledgerJournalTrans.VatDueDate_W || VatDueDateFeature::isEnabled())
                && mandatoryVatDate 
                && (_ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::Approval || fillVATDueDate != FillVATDueDate_W::Manually))
            {
                if (_ledgerJournalTrans.TaxGroup 
                    && TaxVATDueDateUtility::isVATDueDateBasedOnDocumentDate(taxGroupHeading))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00030, funcName());
                    _ledgerJournalTrans.VatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateBasedOnDocumentDate(taxGroupHeading, _ledgerJournalTrans.DocumentDate);
                }
                else
                {
                    if ((SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll)
                        && !(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ])
                            && fillVATDueDate == FillVATDueDate_W::Manually))
                        || TaxVATDueDateUtility::isVATDueDateBasedOnPostingDate(taxGroupHeading)
                        || fillVATDueDate == FillVATDueDate_W::LastDeliveryDate)
                    {
                        _ledgerJournalTrans.VatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateBasedOnPostingDate(taxGroupHeading, _ledgerJournalTrans.TransDate);
                    }
                }
            }
        }
        else
        {
            if (_ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::Approval)
            {
                if (PurchParameters::find().DateOfExchRate_W != DateOfExchRate_W::DateOfVATRegister)
                {
                    _ledgerJournalTrans.VatDueDate_W = dateNull();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVatRegData_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the VAT Register data.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name = "_tmpVoucherMap">The voucher map.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    public static boolean checkVatRegData_W(LedgerJournalTrans _ledgerJournalTrans, Map _tmpVoucherMap = null)
    {
        boolean            ok        = true;
        Voucher            voucher   = LedgerJournalTrans::findTmpVoucher(_ledgerJournalTrans.Voucher, _tmpVoucherMap);
        LedgerJournalTrans ledgerJournalTransMain;
        boolean            plEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        LedgerJournalTable ledgerJournalTable;
        boolean            isPayment;

        if (((_ledgerJournalTrans.TaxGroup && _ledgerJournalTrans.TaxItemGroup) || _ledgerJournalTrans.TaxCode))
        {
            RetailParameters retailParameters = RetailParameters::find();
            boolean shouldSkipPolishGiftCardValidation = plEnabled
                && RetailG11NSkipPolishGiftCardValidationFlight::instance().isEnabled()
                && _ledgerJournalTrans.ledgerJournalTable() != null
                && _ledgerJournalTrans.ledgerJournalTable().RetailStatementId != ''
                && retailParameters.TaxOnGiftCards;

            if (plEnabled)
            {
                if (! _ledgerJournalTrans.VatDueDate_W && _ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::Approval)
                {
                    if (_ledgerJournalTrans.LedgerDimension && _ledgerJournalTrans.OffsetLedgerDimension)
                    {
                        ledgerJournalTransMain = _ledgerJournalTrans;
                    }
                    else
                    {
                        ledgerJournalTransMain = LedgerJournalTrans::mainAccount(_ledgerJournalTrans.JournalNum, voucher);
                        if (ledgerJournalTransMain.AccountType != LedgerJournalACType::Cust &&
                                ledgerJournalTransMain.AccountType != LedgerJournalACType::Vend)
                        {
                            ledgerJournalTransMain = _ledgerJournalTrans;
                        }
                    }

                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00016, funcName());

                    if ((ledgerJournalTransMain.AccountType == LedgerJournalACType::Cust && CustTable::find(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.LedgerDimension)).MandatoryVatDate_PL) ||
                            (ledgerJournalTransMain.AccountType == LedgerJournalACType::Vend && VendTable::find(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.LedgerDimension)).MandatoryVatDate_PL) ||
                            (ledgerJournalTransMain.AccountType != LedgerJournalACType::Vend && _ledgerJournalTrans.AccountType != LedgerJournalACType::Cust))
                    {
                        ok = checkFailed(strFmt("@GLS109269", voucher));
                    }
                }

                ledgerJournalTable = _ledgerJournalTrans.ledgerJournalTable();
                isPayment = (ledgerJournalTable.JournalType == LedgerJournalType::CustPayment || ledgerJournalTable.JournalType == LedgerJournalType::Payment);

                if (!shouldSkipPolishGiftCardValidation && !_ledgerJournalTrans.Addressing_PL && !isPayment && !ledgerJournalTable.isBillOfExchangePromissoryOrRemittance())
                {
                    ok = checkFailed(strFmt("@GLS109853", voucher));
                }
                if (!shouldSkipPolishGiftCardValidation && !_ledgerJournalTrans.CustVendName_PL && !isPayment && !ledgerJournalTable.isBillOfExchangePromissoryOrRemittance())
                {
                    ok = checkFailed(strFmt("@GLS109851", voucher));
                }
            }

            if (!shouldSkipPolishGiftCardValidation && ! _ledgerJournalTrans.DocumentDate && (plEnabled || _ledgerJournalTrans.IntraComVATDueDate_W))
            {
                ok = checkFailed(strFmt("@GLS109925", voucher));
            }

            if (_ledgerJournalTrans.IntraComVATDueDate_W &&
                    _ledgerJournalTrans.DocumentDate > _ledgerJournalTrans.VatDueDate_W)
            {
                ok = checkFailed("@GLS110105");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate date.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The date.</returns>
    public static TransDate exchRateDate_W(LedgerJournalTrans _ledgerJournalTrans)
    {
        TransDate exchRateDate;

        if (_ledgerJournalTrans.isExchangeRateOverrideByLocalization())
        {
            switch (PurchParameters::find().DateOfExchRate_W)
            {
                case DateOfExchRate_W::DateOfVATRegister:
                    exchRateDate = _ledgerJournalTrans.VatDueDate_W;
                    break;
                case DateOfExchRate_W::DocumentDate:
                    exchRateDate = _ledgerJournalTrans.DocumentDate;
                    break;
                case DateOfExchRate_W::DocumentDateEU:
                    if (TaxGroupHeading::find(_ledgerJournalTrans.TaxGroup).euTrade_W)
                    {
                        exchRateDate = _ledgerJournalTrans.DocumentDate;
                    }
                    break;
            }

            if (LedgerJournalTrans_W_Extension::isAutomaticDateDeterminationEnabled(_ledgerJournalTrans))
            {
                exchRateDate = min(
                    _ledgerJournalTrans.VatDueDate_W == dateNull() ? maxDate() : _ledgerJournalTrans.VatDueDate_W,
                    _ledgerJournalTrans.DocumentDate == dateNull() ? maxDate() : _ledgerJournalTrans.DocumentDate,
                    _ledgerJournalTrans.TransDate);
            }
        }
        else if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoPL, #isoIT]))
        {
            exchRateDate = _ledgerJournalTrans.determineExchangeRateDate();
        }

        return exchRateDate ? exchRateDate : _ledgerJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExchangeRateOverrideByLocalization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the ExchRateDate is overwritten by the localization logic.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if it is overwritten by localization; otherwise, false.</returns>
    internal static boolean isExchangeRateOverrideByLocalization(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoPL, #isoIT]))
        {
            LedgerJournalType journalType = _ledgerJournalTrans.ledgerJournalTable().JournalType;

            if (journalType == LedgerJournalType::VendInvoiceRegister ||
                journalType == LedgerJournalType::PurchaseLedger ||
                journalType == LedgerJournalType::VendInvoicePool)
            {
                switch (PurchParameters::find().DateOfExchRate_W)
                {
                    case DateOfExchRate_W::DateOfVATRegister:
                    case DateOfExchRate_W::DocumentDate:
                        return true;
                    case DateOfExchRate_W::DocumentDateEU:
                        if (TaxGroupHeading::find(_ledgerJournalTrans.TaxGroup).euTrade_W)
                        {
                            return true;
                        }
                    default:
                        return false;
                }
            }


            if (LedgerJournalTrans_W_Extension::isAutomaticDateDeterminationEnabled(_ledgerJournalTrans))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>represPersonCardEdit_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the representative person card information.
    /// </summary>
    /// <param name="_set">
    /// A Boolean determining whether to set the value.
    /// </param>
    /// <param name="_cardInfo">
    /// The value to be set.
    /// </param>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// Card information to set.
    /// </returns>
    /// <remarks>
    /// Returns the calculated representative person card information if tha corresponding table field is empty.
    /// </remarks>
    public static PayeeDocument_RU represPersonCardEdit_W(boolean _set, PayeeDocument_RU _cardInfo, LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_set)
        {
            _ledgerJournalTrans.RepresPersonCard_W = _cardInfo;
        }

        if (!_ledgerJournalTrans.RepresPersonCard_W && _ledgerJournalTrans.RCashDocRepresType != RCashDocRepresType::Person)
        {
            _ledgerJournalTrans.RepresPersonCard_W = _ledgerJournalTrans.represPersonCard_RU();
        }

        return _ledgerJournalTrans.RepresPersonCard_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>represPersonNameEdit_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the representative person name.
    /// </summary>
    /// <param name="_set">
    /// A Boolean determining whether to set the value.
    /// </param>
    /// <param name="_name">
    /// The value to be set.
    /// </param>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// Representative person name.
    /// </returns>
    /// <remarks>
    /// Returns the calculated represemtative person name if the corresponding table field is empty.
    /// </remarks>
    public static PersonName represPersonNameEdit_W(boolean _set, EmplName _name, LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_set)
        {
            _ledgerJournalTrans.RepresPersonName_W = _name;
        }

        if (!_ledgerJournalTrans.RepresPersonName_W && _ledgerJournalTrans.RCashDocRepresType != RCashDocRepresType::Person)
        {
            _ledgerJournalTrans.RepresPersonName_W = _ledgerJournalTrans.represPersonName_RU();
        }

        return _ledgerJournalTrans.RepresPersonName_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRepresPersonValues_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values of representative dependent fields.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <remarks>
    /// Sets the employee name and identity card fields depending on the representative person selected.
    /// </remarks>
    public static void setRepresPersonValues_W(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans this_Orig = _ledgerJournalTrans.orig();
        container represPersonNameCard;

        if (_ledgerJournalTrans.RCashDocRepresType == RCashDocRepresType::Person)
        {
            if (this_Orig.RCashDocRepresType != RCashDocRepresType::Person)
            {
                _ledgerJournalTrans.RepresPersonName_W = '';
                _ledgerJournalTrans.RepresPersonCard_W = '';
            }
        }
        else if (_ledgerJournalTrans.RCashDocRepresPersonId != '')
        {
            represPersonNameCard = RCashTransType::represPersonNameCard(_ledgerJournalTrans.rCashDocRepresPersonId,
                                                                        _ledgerJournalTrans.AccountType == LedgerJournalACType::RCash ? _ledgerJournalTrans.OffsetAccountType : _ledgerJournalTrans.AccountType,
                                                                        _ledgerJournalTrans.AccountType == LedgerJournalACType::RCash ? _ledgerJournalTrans.parmOffsetAccount() : _ledgerJournalTrans.parmAccount(),
                                                                        _ledgerJournalTrans.rCashDocRepresType);
            _ledgerJournalTrans.RepresPersonName_W = conPeek(represPersonNameCard, 1);
            _ledgerJournalTrans.RepresPersonCard_W = conPeek(represPersonNameCard, 2);
        }
        else
        {
            _ledgerJournalTrans.RepresPersonName_W = '';
            _ledgerJournalTrans.RepresPersonCard_W = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutomaticDateDeterminationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if automatic date determination feature for AR journals in Poland country is enabled or not.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// True, if automatic date determination feature is enabled, false otherwise.
    /// </returns>
    [Hookable(false)]
    public static boolean isAutomaticDateDeterminationEnabled(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean isEnabled = false;

        if (CustInvoiceBankExchangeRateEligibility_PL::isBankExchangeRateNotApplicableOnInvoice())
        {
            LedgerJournalTrans ledgerToCheck;

            select count(RecId) from ledgerToCheck
                where ledgerToCheck.Voucher == _ledgerJournalTrans.Voucher
                    && ledgerToCheck.JournalNum == _ledgerJournalTrans.JournalNum
                    && ledgerToCheck.Company == _ledgerJournalTrans.Company
                    && (ledgerToCheck.AccountType == LedgerJournalACType::Cust || ledgerToCheck.OffsetAccountType == LedgerJournalACType::Cust);

            isEnabled = ledgerToCheck.RecId > 0;
        }

        return isEnabled;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>