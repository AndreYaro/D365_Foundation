<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAlternateLayoutListPanel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides a <c>SysListPanel</c> implementation for alternate budget plan layouts.
/// </summary>
public class BudgetPlanAlternateLayoutListPanel extends SysListPanel
{
    AccessRight             accessRight;
    BudgetPlanningStageRule budgetPlanningStageRule;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(AccessRight _accessRight)
    {
        super();
        accessRight = _accessRight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    public void build()
    {
        super();

        if (this.accessRight == AccessRight::Delete)
        {
            separatorBuildGroupControl.enabled(true);
        }
        else
        {
            separatorBuildGroupControl.enabled(false);
        }

        groupControlSelected.widthMode(FormWidth::SizeToContent);
        groupControlSelected.heightMode(FormHeight::SizeToContent);
        groupControlAvailable.widthMode(FormWidth::SizeToContent);
        groupControlAvailable.heightMode(FormHeight::SizeToContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BudgetPlanAlternateLayoutListPanel construct(AccessRight _accessRight = AccessRight::View)
    {
        return new BudgetPlanAlternateLayoutListPanel(_accessRight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanningStageRule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BudgetPlanningStageRule parmBudgetPlanningStageRule(BudgetPlanningStageRule _budgetPlanningStageRule = budgetPlanningStageRule)
    {
        this.budgetPlanningStageRule = _budgetPlanningStageRule;
        return this.budgetPlanningStageRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetPlanAlternateLayoutListPanel</c> object.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>FormRun</c> object to display the list panel.
    /// </param>
    /// <param name="_parentId">
    /// The ID of the parent control.
    /// </param>
    /// <param name="_accessRight">
    /// The <c>AccessRight</c> object to set permissions for the form.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanAlternateLayoutListPanel</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BudgetPlanAlternateLayoutListPanel newForm(FormRun _formRun, int _parentId, AccessRight _accessRight)
    {
        BudgetPlanAlternateLayoutListPanel newListPanel = BudgetPlanAlternateLayoutListPanel::construct(_accessRight);
        newListPanel.parmFormRun(_formRun);
        newListPanel.parmParentId(_parentId);
        newListPanel.parmCaptionAvailable("@Budget:AvailableAlternateLayouts");
        newListPanel.parmCaptionSelected("@Budget:SelectedAlternateLayouts");
        newListPanel.build();

        return newListPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the data moved from the available list panel.
    /// </summary>
    /// <param name="_data">
    /// The items that were moved.
    /// </param>
    /// <remarks>
    /// Empty implementation needed as it is an abstract method on the base class.
    /// </remarks>
    public void addData(container _data)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the data moved from the selected list panel.
    /// </summary>
    /// <param name="_data">
    /// The items that were moved.
    /// </param>
    /// <remarks>
    /// Empty implementation needed as it is an abstract method on the base class.
    /// </remarks>
    public void removeData(container _data)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BudgetPlanAlternateLayout</c> table based on the current state of the available and selected <c>FormListControl</c> objects.
    /// </summary>
    /// <remarks>
    /// Only called when the user clicks the Ok button on the form.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateRecords()
    {
        this.removeAvailableAlternateLayouts();
        this.insertSelectedAlternateLayouts();
        BudgetPlanLineDefaultRowTemplateManager::generateDefaultRowTemplateRecordsForAlternateLayouts(this.budgetPlanningStageRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAvailableAlternateLayouts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all <c>BudgetPlanAlternateLayout</c> records from that database that are in the <c>FormListControl</c> object.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void removeAvailableAlternateLayouts()
    {
        BudgetPlanAlternateLayout   budgetPlanAlternateLayout;
        int                         layoutCount = viewAvailable.getCount();

        for (int i = 0; i < layoutCount; i++)
        {
            delete_from budgetPlanAlternateLayout
                where budgetPlanAlternateLayout.BudgetPlanLayout == conPeek(viewAvailable.getItem(i).data(), 1)
                    && budgetPlanAlternateLayout.BudgetPlanningStageRule == budgetPlanningStageRule.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSelectedAlternateLayouts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates all <c>BudgetPlanAlternateLayout</c> records that are in the selected <c>FormListControl</c> object.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertSelectedAlternateLayouts()
    {
        RecordInsertList            recordInsertList = new RecordInsertList(tableNum(BudgetPlanAlternateLayout), true, true, true, true, true);
        BudgetPlanAlternateLayout   budgetPlanAlternateLayout;
        BudgetPlanLayoutRecId       currentLayoutRecId;
        int                         layoutCount = viewSelected.getCount();

        for (int i = 0; i < layoutCount; i++)
        {
            currentLayoutRecId = conPeek(viewSelected.getItem(i).data(), 1);
            if (!BudgetPlanAlternateLayout::existsByLayoutStageRule(currentLayoutRecId, budgetPlanningStageRule.RecId))
            {
                budgetPlanAlternateLayout.clear();
                budgetPlanAlternateLayout.BudgetPlanningStageRule = budgetPlanningStageRule.RecId;
                budgetPlanAlternateLayout.BudgetPlanLayout = currentLayoutRecId;
                recordInsertList.add(budgetPlanAlternateLayout);
            }
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves items for the left and right lists of the list panel.
    /// </summary>
    /// <returns>
    /// A container that has the items for both the left and right side lists.
    /// </returns>
    public container getData()
    {
        return [this.getAvailableBudgetPlanLayoutList(), this.getSelectedBudgetPlanLayoutList()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableBudgetPlanLayoutList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>BudgetPlanLayout</c> records to display in the available layouts list panel.
    /// </summary>
    /// <returns>
    /// A container that has the items for the left list panel.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getAvailableBudgetPlanLayoutList()
    {
        BudgetPlanLayout            budgetPlanLayout;
        BudgetPlanAlternateLayout   budgetPlanAlternateLayout;
        BudgetPlanLayoutElement     budgetPlanLayoutElement;
        BudgetPlanColumn            budgetPlanColumn;
        container                   availableLayouts;

        while select RecId, Name
            from budgetPlanLayout
            where budgetPlanLayout.RecId != budgetPlanningStageRule.Layout
            exists join budgetPlanLayoutElement
                where budgetPlanLayoutElement.Layout == budgetPlanLayout.RecId
                exists join budgetPlanColumn
                    where budgetPlanColumn.RecId == budgetPlanLayoutElement.ElementDefinition
            notexists join budgetPlanAlternateLayout
                where budgetPlanAlternateLayout.BudgetPlanLayout == budgetPlanLayout.RecId
                    && budgetPlanAlternateLayout.BudgetPlanningStageRule == budgetPlanningStageRule.RecId
        {
            availableLayouts += [[budgetPlanLayout.RecId, budgetPlanLayout.Name]];
        }

        return availableLayouts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedBudgetPlanLayoutList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>BudgetPlanLayout</c> records to display in the selected layouts list panel.
    /// </summary>
    /// <returns>
    /// A container that has the items for the right list panel.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getSelectedBudgetPlanLayoutList()
    {
        BudgetPlanLayout            budgetPlanLayout;
        BudgetPlanAlternateLayout   budgetPlanAlternateLayout;
        container                   selectedLayouts;

        while select RecId, Name
            from budgetPlanLayout
            exists join budgetPlanAlternateLayout
                where budgetPlanAlternateLayout.BudgetPlanLayout == budgetPlanLayout.RecId
                    && budgetPlanAlternateLayout.BudgetPlanningStageRule == budgetPlanningStageRule.RecId
        {
            selectedLayouts += [[budgetPlanLayout.RecId, budgetPlanLayout.Name]];
        }

        return selectedLayouts;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
