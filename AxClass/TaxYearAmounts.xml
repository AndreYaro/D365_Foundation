<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxYearAmounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxYearAmounts extends TaxPeriodAmounts
{
    TaxReportVoucher    taxReportVoucher;
    TransDate           dateOfYear;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        protected void init(TransDate       _fromDate,
                        TransDate       _toDate,
                        TaxPeriod       _taxPeriod,
                        TaxRepVersion   _taxRepVersion,
                        TaxVersion      _taxRepCounter = 0,
                        NoYes           _updateNow = NoYes::No)
    {
        ;

        this.setParameters(_fromDate, _toDate,_taxPeriod);

        dateOfYear = TaxPeriodAmounts::startDateOfYear(fromDate);

        if (_taxRepCounter != 0)
            versionMax = _taxRepCounter;
        else
            versionMax = TaxReport::counterMax(_taxRepVersion, _taxPeriod, _fromDate);

        ttsbegin;

    /* Select all amounts before the actual period*/
        while select sum(TaxBaseAmount),
                     sum(TaxAmount),
                     sum(TaxAmountCur),
                     sum(SourceBaseAmountCur),
                     sum(TaxInCostPrice),
                     sum(TaxInCostPriceRegulated),
                     sum(TaxInCostPriceMST),
                     sum(TaxInCostPriceCur)
                from     taxTrans
                group by TaxDirection
              join taxReportVoucher
                where    taxReportVoucher.Voucher   == taxTrans.Voucher &&
                         taxReportVoucher.TaxPeriod == taxPeriod        &&
                         taxReportVoucher.ToDate    <  toDate           &&
                         taxReportVoucher.FromDate  >= dateOfYear
        {
            tmpTaxPeriodAmount.Amount           = taxTrans.TaxBaseAmount;
            tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxBaseAmount;
            tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
            tmpTaxPeriodAmount.insert();

            tmpTaxPeriodAmount.Amount           = taxTrans.TaxAmount;
            tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxAmount;
            tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
            tmpTaxPeriodAmount.insert();

            tmpTaxPeriodAmount.Amount           = taxTrans.TaxInCostPrice;
            tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxInCostPrice;
            tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
            tmpTaxPeriodAmount.insert();

            tmpTaxPeriodAmount.Amount           = taxTrans.TaxAmountCur;
            tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxAmountCur;
            tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
            tmpTaxPeriodAmount.insert();

            tmpTaxPeriodAmount.Amount           = taxTrans.SourceBaseAmountCur;
            tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::SourceBaseAmountCur;
            tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
            tmpTaxPeriodAmount.insert();

            tmpTaxPeriodAmount.Amount           = taxTrans.TaxInCostPriceRegulated;
            tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxInCostPriceRegulated;
            tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
            tmpTaxPeriodAmount.insert();

            tmpTaxPeriodAmount.Amount           = taxTrans.TaxInCostPriceMST;
            tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxInCostPriceMST;
            tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
            tmpTaxPeriodAmount.insert();

            tmpTaxPeriodAmount.Amount           = taxTrans.TaxInCostPriceCur;
            tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxInCostPriceCur;
            tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
            tmpTaxPeriodAmount.insert();
        }

    /* Select amounts in the actual period*/
        while select sum(TaxBaseAmount),
                     sum(TaxAmount),
                     sum(TaxAmountCur),
                     sum(SourceBaseAmountCur),
                     sum(TaxInCostPrice),
                     sum(TaxInCostPriceRegulated),
                     sum(TaxInCostPriceMST),
                     sum(TaxInCostPriceCur)
                from     taxTrans
                group by TaxDirection
                where    taxTrans.TaxRepCounter <= versionMax
              join taxReportVoucher
                where    taxReportVoucher.Voucher   == taxTrans.Voucher &&
                         taxReportVoucher.TaxPeriod == taxPeriod        &&
                         taxReportVoucher.ToDate    == toDate           &&
                         taxReportVoucher.FromDate  == fromDate
        {
            select firstonly forupdate tmpTaxPeriodAmount
                where tmpTaxPeriodAmount.TaxAmountType == TaxAmountType::TaxBaseAmount &&
                      tmpTaxPeriodAmount.TaxDirection  == taxTrans.TaxDirection;

            if (tmpTaxPeriodAmount)
            {
                tmpTaxPeriodAmount.Amount           += taxTrans.TaxBaseAmount;
                tmpTaxPeriodAmount.update();
            }
            else
            {
                tmpTaxPeriodAmount.Amount           = taxTrans.TaxBaseAmount;
                tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxBaseAmount;
                tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
                tmpTaxPeriodAmount.insert();
            }

            select firstonly forupdate tmpTaxPeriodAmount
                where tmpTaxPeriodAmount.TaxAmountType == TaxAmountType::TaxAmount &&
                      tmpTaxPeriodAmount.TaxDirection  == taxTrans.TaxDirection;

            if (tmpTaxPeriodAmount)
            {
                tmpTaxPeriodAmount.Amount           += taxTrans.TaxAmount;
                tmpTaxPeriodAmount.update();
            }
            else
            {
                tmpTaxPeriodAmount.Amount           = taxTrans.TaxAmount;
                tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxAmount;
                tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
                tmpTaxPeriodAmount.insert();
            }

            select firstonly forupdate tmpTaxPeriodAmount
                where tmpTaxPeriodAmount.TaxAmountType == TaxAmountType::TaxInCostPrice &&
                      tmpTaxPeriodAmount.TaxDirection  == taxTrans.TaxDirection;

            if (tmpTaxPeriodAmount)
            {
                tmpTaxPeriodAmount.Amount           += taxTrans.TaxInCostPrice;
                tmpTaxPeriodAmount.update();
            }
            else
            {
                tmpTaxPeriodAmount.Amount           = taxTrans.TaxInCostPrice;
                tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxInCostPrice;
                tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
                tmpTaxPeriodAmount.insert();
            }

            select firstonly forupdate tmpTaxPeriodAmount
                where tmpTaxPeriodAmount.TaxAmountType == TaxAmountType::TaxAmountCur &&
                      tmpTaxPeriodAmount.TaxDirection  == taxTrans.TaxDirection;

            if (tmpTaxPeriodAmount)
            {
                tmpTaxPeriodAmount.Amount           += taxTrans.TaxAmountCur;
                tmpTaxPeriodAmount.update();
            }
            else
            {
                tmpTaxPeriodAmount.Amount           = taxTrans.TaxAmountCur;
                tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxAmountCur;
                tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
                tmpTaxPeriodAmount.insert();
            }

            select firstonly forupdate tmpTaxPeriodAmount
                where tmpTaxPeriodAmount.TaxAmountType == TaxAmountType::SourceBaseAmountCur &&
                      tmpTaxPeriodAmount.TaxDirection  == taxTrans.TaxDirection;

            if (tmpTaxPeriodAmount)
            {
                tmpTaxPeriodAmount.Amount           += taxTrans.SourceBaseAmountCur;
                tmpTaxPeriodAmount.update();
            }
            else
            {
                tmpTaxPeriodAmount.Amount           = taxTrans.SourceBaseAmountCur;
                tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::SourceBaseAmountCur;
                tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
                tmpTaxPeriodAmount.insert();
            }

            select firstonly forupdate tmpTaxPeriodAmount
                where tmpTaxPeriodAmount.TaxAmountType == TaxAmountType::TaxInCostPriceRegulated &&
                      tmpTaxPeriodAmount.TaxDirection  == taxTrans.TaxDirection;

            if (tmpTaxPeriodAmount)
            {
                tmpTaxPeriodAmount.Amount           += taxTrans.TaxInCostPriceRegulated;
                tmpTaxPeriodAmount.update();
            }
            else
            {
                tmpTaxPeriodAmount.Amount           = taxTrans.TaxInCostPriceRegulated;
                tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxInCostPriceRegulated;
                tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
                tmpTaxPeriodAmount.insert();
            }

            select firstonly forupdate tmpTaxPeriodAmount
                where tmpTaxPeriodAmount.TaxAmountType == TaxAmountType::TaxInCostPriceMST &&
                      tmpTaxPeriodAmount.TaxDirection  == taxTrans.TaxDirection;

            if (tmpTaxPeriodAmount)
            {
                tmpTaxPeriodAmount.Amount           += taxTrans.TaxInCostPriceMST;
                tmpTaxPeriodAmount.update();
            }
            else
            {
                tmpTaxPeriodAmount.Amount           = taxTrans.TaxInCostPriceMST;
                tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxInCostPriceMST;
                tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
                tmpTaxPeriodAmount.insert();
            }

            select firstonly forupdate tmpTaxPeriodAmount
                where tmpTaxPeriodAmount.TaxAmountType == TaxAmountType::TaxInCostPriceCur &&
                      tmpTaxPeriodAmount.TaxDirection  == taxTrans.TaxDirection;

            if (tmpTaxPeriodAmount)
            {
                tmpTaxPeriodAmount.Amount           += taxTrans.TaxInCostPriceCur;
                tmpTaxPeriodAmount.update();
            }
            else
            {
                tmpTaxPeriodAmount.Amount           = taxTrans.TaxInCostPriceCur;
                tmpTaxPeriodAmount.TaxAmountType    = TaxAmountType::TaxInCostPriceCur;
                tmpTaxPeriodAmount.TaxDirection     = taxTrans.TaxDirection;
                tmpTaxPeriodAmount.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        ;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static TaxYearAmounts construct(TransDate      _fromDate,
                                                         TransDate      _toDate,
                                                         TaxPeriod      _taxPeriod,
                                                         TaxRepVersion  _taxRepVersion,
                                                         TaxVersion     _taxRepCounter = 0)
    {
        TaxYearAmounts  taxYearAmounts;
        ;

        taxYearAmounts = new TaxYearAmounts();

        taxYearAmounts.init(_fromDate, _toDate, _taxPeriod, _taxRepVersion, _taxRepCounter);

        return taxYearAmounts;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>