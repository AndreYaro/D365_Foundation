<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTableChangeProposalWorkflowEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The VendTableChangeProposalWorkflowEventHandler workflow event handler.
/// </summary>
public class  VendTableChangeProposalWorkflowEventHandler implements WorkflowCanceledEventHandler,  
	WorkflowCompletedEventHandler,
	WorkflowStartedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the corresponding workflow event.
    /// </summary>
    /// <param name = "_workflowEventArgs">The arguments object for the event handler.</param>
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        // no-op
    }

]]></Source>
			</Method>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the corresponding workflow event.
    /// </summary>
    /// <param name = "_workflowEventArgs">The arguments object for the event handler.</param>
    public void canceled(WorkflowEventArgs _workflowEventArgs)
    {
        this.clearWorkFlowState(_workflowEventArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event handler for the corresponding workflow event.
    /// This is the completion event. It will apply proposed changes, and remove the proposal,
    /// then clear the workflow state to allow for another submit.
    /// </summary>
    /// <param name = "_workflowEventArgs">The arguments object for the event handler.</param>
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        RecId vendRecId = _workflowEventArgs.parmWorkflowContext().parmRecId();
        VendTableChangeProposal proposal;
        select firstonly proposal where proposal.VendTable == vendRecId;

        VendTableChangeProposalApply applier = VendTableChangeProposalApply::construct(proposal);

        ttsbegin;
        applier.applyAndDelete();

        this.clearWorkFlowState(_workflowEventArgs);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWorkFlowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes logic to clear workflow state when a corresponding workflow is cancelled or completed.
    /// </summary>
    /// <param name = "_workflowEventArgs">The argument to identify the record associated with the workflow.</param>
    private void clearWorkFlowState(WorkflowEventArgs _workflowEventArgs)
    {
        WorkflowContext workflowContext = _workflowEventArgs.parmWorkflowContext();
        RecId vendRecId = workflowContext.parmRecId();

        ttsbegin;
        VendTable vend = VendTable::findRecId(vendRecId, true);
        vend.WorkflowState = VendTableChangeProposalWorkflowState::NotSubmitted;
        vend.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>