<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class VendInvoiceWorkflow
{
    Args args;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actionDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Opens a dialog box for resubmitting a vendor invoice.
    /// </summary>
    /// <param name="_workflowWorkItemActionDialog">
    ///     The <c>workflowWorkItemActionDialog</c> object to open.
    /// </param>
    /// <returns>
    ///     true if the dialog box was closed by pressing the Ok button; otherwise, false.
    /// </returns>
    protected boolean actionDialog(WorkflowWorkItemActionDialog _workflowWorkItemActionDialog)
    {
        _workflowWorkItemActionDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
        _workflowWorkItemActionDialog.run();
        return _workflowWorkItemActionDialog.parmIsClosedOK();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or sets the <c>Args</c> value from the caller.
    /// </summary>
    /// <param name="_args">
    ///     An <c>Args</c> value from the caller.
    /// </param>
    /// <returns>
    ///     The current <c>Args</c> value.
    /// </returns>
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reactivates the vendor invoice header workflow.
    /// </summary>
    /// <remarks>
    ///     This method continues the workflow by calling the <c>dispatchWorkItemAction</c> method in the
    ///     <c>WorkflowWorkItemActionManager</c> class with information about the current work item.
    /// </remarks>
    abstract public void reSubmit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Activates the vendor invoice workflow.
    /// </summary>
    /// <remarks>
    ///     This method starts the workflow configuration by calling the <c>activateFromWorkflowType</c> method
    ///     on the <c>Workflow</c> class with information about the vendor invoice record.
    /// </remarks>
    abstract public void submit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Opens a dialog box for submitting a vendor invoice.
    /// </summary>
    /// <param name="_workflowSubmitDialog">
    ///     The <c>WorkflowSubmitDialog</c> object to open.
    /// </param>
    /// <returns>
    ///     true if the dialog box was closed by pressing the Ok button; otherwise, false.
    /// </returns>
    protected boolean submitDialog(WorkflowSubmitDialog _workflowSubmitDialog)
    {
        _workflowSubmitDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
        _workflowSubmitDialog.run();
        return _workflowSubmitDialog.parmIsClosedOK();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the workflow dialog run event.
    /// </summary>
    protected void preWorkflowDialogRun()
    {
        // The event is handled here to support extensibility of callers to respond to the event.
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkflow</Name>
				<Source><![CDATA[
    static void cancelWorkflow(Common _buffer, workflowTypeName _templateName)
    {
        ListEnumerator listEnumerator;
        List workflowsToCancel;

        workflowsToCancel = VendInvoiceWorkflow::getWorkflowsToCancel(_buffer, _templateName);

        ttsbegin;

        listEnumerator = workflowsToCancel.getEnumerator();
        while (listEnumerator.moveNext())
        {
            Workflow::cancelWorkflow(listEnumerator.current(), "@SYS303429");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowsToCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the list of workflows to cancel.
    /// </summary>
    /// <param name="_buffer">
    ///     A workflow enabled record.
    /// </param>
    /// <param name="_templateName">
    ///     The workflow template name of the workflow configuration to cancel.
    /// </param>
    /// <returns>
    ///     A list of work item IDs.
    /// </returns>
    public static List getWorkflowsToCancel(Common _buffer, workflowTypeName _templateName)
    {
        List workflowsToCancel = new List(Types::Guid);

        WorkflowWorkItemTable workflowWorkItemTable;
        WorkflowVersionTable workflowVersionTable;
        WorkflowTable workflowTable;
        WorkflowTrackingStatusTable workflowTrackingStatusTable;

        while select CorrelationId, ConfigurationId from workflowWorkItemTable
            where workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending &&
                workflowWorkItemTable.RefRecId == _buffer.RecId &&
                workflowWorkItemTable.RefTableId == _buffer.TableId
            exists join workflowVersionTable
                where workflowVersionTable.ConfigurationId == workflowWorkItemTable.ConfigurationId
                exists join workflowTable
                    where workflowTable.RecId == workflowVersionTable.WorkflowTable &&
                        workflowTable.TemplateName == _templateName
        {
            workflowsToCancel.addEnd(workflowWorkItemTable.CorrelationId);
        }

        while select CorrelationId from workflowTrackingStatusTable
            where workflowTrackingStatusTable.ContextCompanyId == _buffer.DataAreaId &&
                workflowTrackingStatusTable.ContextTableId == _buffer.TableId &&
                workflowTrackingStatusTable.ContextRecId == _buffer.RecId &&
                workflowTrackingStatusTable.TrackingStatus == WorkflowTrackingStatus::Pending
            exists join workflowVersionTable
                where workflowVersionTable.RecId == workflowTrackingStatusTable.WorkflowVersionTable
                exists join workflowTable
                    where workflowTable.RecId == workflowVersionTable.WorkflowTable &&
                        workflowTable.TemplateName == _templateName
        {
            workflowsToCancel.addEnd(workflowTrackingStatusTable.CorrelationId);
        }

        return workflowsToCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserLineTaskOwnerOrApprovalOwner</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the pending task or approval work item status for a user.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    ///     The line record to which the work item is associated.
    /// </param>
    /// <returns>
    ///     A Boolean value that indicates whether the user has a pending <c>Task</c> or <c>Approval</c>
    ///     workflow work items.
    /// </returns>
    public static boolean isUserLineTaskOwnerOrApprovalOwner(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        return WorkflowWorkItem::isUserTaskOwner(_vendInvoiceInfoLine) || WorkflowWorkItem::isUserApprovalOwner(_vendInvoiceInfoLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserTaskOrApprovalOwner</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the pending task or approval work item status for a user.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///     The header record to which the work item is associated.
    /// </param>
    /// <returns>
    ///     A Boolean value that indicates whether the user has a pending work item that is equal to a
    ///     <c>Task</c> or an <c>Approval</c> workflow work item.
    /// </returns>
    public static boolean isUserTaskOrApprovalOwner(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return WorkflowWorkItem::isUserTaskOwner(_vendInvoiceInfoTable) || WorkflowWorkItem::isUserApprovalOwner(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendInvoiceWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>VendInvoiceWorkflow</c> class.
    /// </summary>
    /// <param name="_args">
    ///     An <c>Args</c> value from the caller.
    /// </param>
    /// <returns>
    ///     An instance of the <c>VendInvoiceWorkflow</c> class.
    /// </returns>
    public static VendInvoiceWorkflow newVendInvoiceWorkflow(Args _args)
    {
        VendInvoiceWorkflow vendInvoiceWorkflow;
        WorkflowWorkItemTable workItem;
        tableId tableId;

        if (_args && _args.caller())
        {
            workItem = _args.caller().getActiveWorkflowWorkItem();
        }

        if (workItem)
        {
            tableId = workItem.getRecord().TableId;
        }
        else
        {
            tableId = _args.record().TableId;
        }

        switch (tableId)
        {
            case tablenum(VendInvoiceInfoTable):
                vendInvoiceWorkflow = VendInvoiceHeaderWorkflow::construct();
                vendInvoiceWorkflow.parmArgs(_args);
                break;

            case tablenum(VendInvoiceInfoLine):
                vendInvoiceWorkflow = VendInvoiceLineWorkflow::construct();
                vendInvoiceWorkflow.parmArgs(_args);
                break;
        }

        return vendInvoiceWorkflow;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>