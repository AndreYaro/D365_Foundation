<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyLookupFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class DirPartyLookupFormEventHandler
{
    static TableId callerId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DirPartyLookup_Post_closeOkExtended</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes party on a caller buffer based on the selected record from the closeOk event of the DirPartyLookup form.
    /// </summary>
    /// <param name = "args">The arguments from the original method.</param>
    [PostHandlerFor(formstr(DirPartyLookup), formmethodstr(DirPartyLookup, closeOkExtended))]
    public static void DirPartyLookup_Post_closeOkExtended(XppPrePostArgs args)
    {
        HcmWorker                   hcmWorker;
        CustTable                   custTable;
        VendTable                   vendTable;
        smmBusRelTable              smmBusRelTable;
        smmLeadTable                smmLeadTable;
        smmOpportunityTable         smmOpportunityTable;
        smmQuotationCompetitorGroup smmCompetitorGroup;
        CaseDetailBase              caseDetail;

        FormRun         form                = args.getThis();
        Common          callerRecord        = args.getArg("_callerRecord");
        DirPartyTable   dirPartyTable       = args.getArg("_dirPartyTable");
        boolean         createNew           = args.getArg("_createNew");
        Object          callerDataSource    = args.getArg("_callerDataSource");
        DirPartyType    dirType             = args.getArg("_dirPartyType");

        switch (callerRecord.TableId)
        {
            case tableNum(HcmWorker) :
                hcmWorker = callerRecord;
                hcmWorker.Person = dirPartyTable.RecId;
                if (callerDataSource)
                {
                    callerDataSource.setParty(dirPartyTable);
                }
                break;

            case tableNum(CustTable) :
                custTable = callerRecord;
                custTable.Party = dirPartyTable.RecId;
                if (callerDataSource)
                {
                    callerDataSource.setParty(dirPartyTable);
                }
                break;

            case tableNum(VendTable) :
                vendTable = callerRecord;
                vendTable.Party = dirPartyTable.RecId;
                if (callerDataSource)
                {
                    callerDataSource.setParty(dirPartyTable);
                }
                break;

            case tableNum(smmBusRelTable) :
                smmBusRelTable = callerRecord;
                smmBusRelTable.Party = dirPartyTable.RecId;
                if (callerDataSource)
                {
                    callerDataSource.setParty(dirPartyTable);
                }
                break;

            case tableNum(smmLeadTable) :
                smmLeadTable = callerRecord;
                smmLeadTable.Party = dirPartyTable.RecId;
                if (callerDataSource)
                {
                    callerDataSource.setParty(dirPartyTable);
                }
                if (!createNew)
                {
                    smmLeadTable.modifiedField(fieldNum(smmLeadTable,Party));
                }
                break;

            case tableNum(smmOpportunityTable) :
                smmOpportunityTable = callerRecord;
                smmOpportunityTable.Party = dirPartyTable.RecId;
                if (callerDataSource)
                {
                    callerDataSource.setName(dirPartyTable.Name);
                }
                if (!createNew)
                {
                    smmOpportunityTable.modifiedField(fieldNum(smmOpportunityTable,Party));
                }
                break;

            case tableNum(smmQuotationCompetitorGroup) :
                smmCompetitorGroup = callerRecord;
                smmCompetitorGroup.Party = dirPartyTable.RecId;
                if (callerDataSource)
                {
                    callerDataSource.setName(dirPartyTable.Name);
                }
                break;

            case tableNum(CaseDetailBase) :
                caseDetail = callerRecord;
                caseDetail.Party = dirPartyTable.RecId;
                if (!createNew)
                {
                    caseDetail.modifiedField(fieldNum(CaseDetailBase,Party));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyLookup_Post_closeSelectExtended</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes party on a caller buffer based on the selected record from the closeSelected event of the DirPartyLookup form.
    /// </summary>
    /// <param name = "args">The arguments from the original method.</param>
    [PostHandlerFor(formStr(DirPartyLookup), formMethodStr(DirPartyLookup, closeSelectExtended))]
    public static void DirPartyLookup_Post_closeSelectExtended(XppPrePostArgs args)
    {
        smmLeadTable        smmLeadTable;
        smmOpportunityTable smmOpportunityTable;
        CaseDetail          caseDetail;

        FormRun         form                = args.getThis();
        Common          callerRecord        = args.getArg("_callerRecord");
        DirPartyTable   dirPartyTable       = args.getArg("_dirPartyTable");
        boolean         createNew           = args.getArg("_createNew");
        Object          callerDataSource    = args.getArg("_callerDataSource");

        switch (callerRecord.TableId)
        {
            case tableNum(smmLeadTable) :
                smmLeadTable = callerRecord;
                smmLeadTable.Party = dirPartyTable.RecId;
                if (callerDataSource)
                {
                    callerDataSource.setParty(dirPartyTable);
                }

                if (!createNew)
                {
                    smmLeadTable.modifiedField(fieldNum(smmLeadTable,Party));
                }
                break;

            case tableNum(smmOpportunityTable) :
                smmOpportunityTable = callerRecord;
                smmOpportunityTable.Party = dirPartyTable.RecId;
                if (callerDataSource)
                {
                    callerDataSource.setParty(dirPartyTable);
                }

                if (!createNew)
                {
                    smmOpportunityTable.modifiedField(fieldNum(smmOpportunityTable,Party));
                }
                break;

            case tableNum(CaseDetailBase) :
                caseDetail = callerRecord;
                caseDetail.Party = dirPartyTable.RecId;

                if (!createNew)
                {
                    caseDetail.modifiedField(fieldNum(CaseDetailBase,Party));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyLookup_Post_formInitExtended</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the party record from the caller record.
    /// </summary>
    /// <param name = "args">The arguments from the original method.</param>
    [PostHandlerFor(formstr(DirPartyLookup), formmethodstr(DirPartyLookup, formInitExtended))]
    public static void DirPartyLookup_Post_formInitExtended(XppPrePostArgs args)
    {
        HcmWorker                   hcmWorker;
        CustTable                   custTable;
        VendTable                   vendTable;
        smmBusRelTable              smmBusRelTable;
        smmLeadTable                smmLeadTable;
        smmOpportunityTable         smmOpportunityTable;
        smmQuotationCompetitorGroup smmCompetitorGroup;
        CaseDetailBase              caseDetail;
        UserExternalParty           userExternalParty;
        DirPartyRecId               party;
        DirPartyRelationship        dirPartyRelationship;

        FormRun         form            = args.getThis();
        Common          callerRecord    = args.getArg("_callerRecord");
        DirPartyNumber  partyNumber     = args.getArg("_partyNumber");
        DirPartyType    dirType         = args.getArg("_dirPartyType");

        switch (callerRecord.TableId)
        {
            case tableNum(HcmWorker) :
                hcmWorker = callerRecord;
                party = hcmWorker.Person;
                form.parmParty(party);
                break;

            case tableNum(CustTable) :
                custTable = callerRecord;
                party = custTable.Party;
                form.parmParty(party);
                break;

            case tableNum(VendTable) :
                vendTable = callerRecord;
                party = vendTable.Party;
                form.parmParty(party);
                break;

            case tableNum(smmBusRelTable) :
                smmBusRelTable = callerRecord;
                party = smmBusRelTable.Party;
                form.parmParty(party);
                break;

            case tableNum(smmLeadTable) :
                smmLeadTable = callerRecord;
                party = (smmLeadTable.Party && DirPartyTable::findRec(smmLeadTable.Party)) ? smmLeadTable.Party : DirPartyTable::find(partyNumber).RecId;
                form.parmParty(party);
                break;

            case tableNum(smmOpportunityTable) :
                smmOpportunityTable = callerRecord;
                party = (smmOpportunityTable.Party && DirPartyTable::findRec(smmOpportunityTable.Party)) ? smmOpportunityTable.Party : DirPartyTable::find(partyNumber).RecId;
                form.parmParty(party);
                break;

            case tableNum(smmQuotationCompetitorGroup) :
                smmCompetitorGroup = callerRecord;
                party = (smmCompetitorGroup.Party && DirPartyTable::findRec(smmCompetitorGroup.Party)) ? smmCompetitorGroup.Party : DirPartyTable::find(partyNumber).RecId;
                form.parmParty(party);
                break;

            case tableNum(CaseDetailBase) :
                caseDetail = callerRecord;
                party = (caseDetail.Party && DirPartyTable::findRec(caseDetail.Party)) ? caseDetail.Party : DirPartyTable::find(partyNumber).RecId;
                form.parmParty(party);
                break;

            case tableNum(UserExternalParty) :
                userExternalParty = callerRecord;
                party = (userExternalParty.ExternalParty && DirPartyTable::findRec(userExternalParty.ExternalParty)) ? userExternalParty.ExternalParty : DirPartyTable::find(partyNumber).RecId;
                form.parmParty(party);
                break;

            case tableNum(DirPartyRelationship) :
                dirPartyRelationship = callerRecord;
                FormControl callerControl = form.selectTarget();
                if (callerControl is FormReferenceControl && callerControl.fieldBinding().TableName() == tablestr(DirPartyRelationship))
                {
                    party = dirPartyRelationship.(callerControl.fieldBinding().fieldId());
                    form.parmParty(party);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyLookup_Post_showControlsExtended</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the visibility of RoleTypeFilter, CourseInstructorRoleTypeFilter and Continue button based on the caller context.
    /// </summary>
    /// <param name = "args">The arguments from the original method.</param>
    [PostHandlerFor(formStr(DirPartyLookup), formMethodStr(DirPartyLookup, showControlsExtended))]
    public static void DirPartyLookup_Post_showControlsExtended(XppPrePostArgs args)
    {
        FormRun         form            = args.getThis();
        Common          callerRecord    = args.getArg("_callerRecord");
        DirPartyType    dirType         = args.getArg("_dirPartyType");

        TableId callerDataSet = args.getArg("_callerDataSet");

        if (callerDataSet == tableNum(HcmApplicant))
        {
            FormComboBoxControl RoleTypeFilter;
            RoleTypeFilter = form.design().controlName(formcontrolstr(DirPartyLookup, RoleTypeFilter));
            RoleTypeFilter.visible(true);
        }

        if (callerDataSet == tableNum(HRMCourseInstructor))
        {
            FormComboBoxControl CourseInstructorRoleTypeFilter;
            CourseInstructorRoleTypeFilter = form.design().controlName(formcontrolstr(DirPartyLookup, CourseInstructorRoleTypeFilter));
            CourseInstructorRoleTypeFilter.visible(true);
        }

        callerId = callerDataSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyLookup_Post_addRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the DirPartyView as datasource and ranges to the DirPartyTable datasource of the form DirPartyLookup.
    /// </summary>
    /// <param name = "args">The arguments from the original method.</param>
    [PostHandlerFor(formStr(DirPartyLookup), formMethodStr(DirPartyLookup, addRanges))]
    public static void DirPartyLookup_Post_addRanges(XppPrePostArgs args)
    {
        FormRun         form                = args.getThis();
        FormDataSource  dirPartyTable_ds    = form.dataSource(formDataSourceStr(DirPartyTable, DirPartyTable)) as FormDataSource;

        dirPartyLookupEntitiesFilter dirPartyLookupEntitiesFilter = form.getDirPartyLookupEntitiesFilter();

        FilterStatus            statusProspect, statusCustomer, statusContact, statusCompetitor, statusWorker, statusApplicant, statusVendor, statusProspectVendor, statusLegalEntity;
        QueryBuildDataSource    qbdsDirPartyView;
        QueryBuildRange         qbrDataAreaId,qbrParty;
        str                     range, rangeToAdd, dataAreaId, setRange, viewName;

        if (!dirPartyLookupEntitiesFilter.parmDisableAllEntityTypeFilters())
        {
            qbdsDirPartyView = dirPartyTable_ds.query().dataSourceTable(tableNum(DirPartyView));

            if (!qbdsDirPartyView)
            {
                qbdsDirPartyView = dirPartyTable_ds.queryBuildDataSource().addDataSource(tableNum(DirPartyView), 'DirPartyViewFilterDataArea');
            }

            qbdsDirPartyView.clearSortIndex();
            qbdsDirPartyView.clearLinks();
            qbdsDirPartyView.clearRanges();

            qbdsDirPartyView.joinMode(JoinMode::ExistsJoin);
            qbdsDirPartyView.addLink(fieldNum(DirPartyTable,RecId), fieldNum(DirPartyView,Party));

            qbrDataAreaId = qbdsDirPartyView.addRange(fieldNum(DirPartyView, DataArea));
            qbrDataAreaId.status(RangeStatus::Hidden);

            qbrParty = qbdsDirPartyView.addRange(fieldNum(DirPartyView,Party));
            qbrParty.status(RangeStatus::Hidden);

            statusProspect = dirPartyLookupEntitiesFilter.parmFilterBusinessRelations();
            statusCustomer = dirPartyLookupEntitiesFilter.parmFilterCustomers();
            statusCompetitor = dirPartyLookupEntitiesFilter.parmFilterCompetitors();
            statusContact = dirPartyLookupEntitiesFilter.parmFilterContacts();
            statusWorker = dirPartyLookupEntitiesFilter.parmFilterEmployees();
            statusApplicant = dirPartyLookupEntitiesFilter.parmFilterApplicants();
            statusVendor = dirPartyLookupEntitiesFilter.parmFilterVendors();
            statusProspectVendor = dirPartyLookupEntitiesFilter.parmFilterProspectiveVendors();
            statusLegalEntity = dirPartyLookupEntitiesFilter.parmFilterLegalEntity();
            dataAreaId = dirPartyLookupEntitiesFilter.parmDataAreaId();

            if (callerId == tableNum(CustVendNetAgreement))
            {
                DirPartyLookupFormEventHandler::restrictRangeToCustomerAndVendorOnly(dirPartyTable_ds);
            }

            if (dataAreaId != '')
            {
                setRange = '(((%1.%2 == %3) && (%1.%4 == "%5")))';
            }
            else
            {
                setRange = '((%1.%2 == %3))';
            }

            if (statusProspect == FilterStatus::NotSet || statusCustomer == FilterStatus::NotSet || statusCompetitor == FilterStatus::NotSet ||
                statusContact == FilterStatus::NotSet || statusWorker == FilterStatus::NotSet || statusApplicant == FilterStatus::NotSet ||
                statusVendor == FilterStatus::NotSet || statusProspectVendor == FilterStatus::NotSet || statusLegalEntity == FilterStatus::NotSet)
            {
                qbdsDirPartyView.joinMode(JoinMode::NoExistsJoin);
            }
            else
            {
                qbdsDirPartyView.joinMode(JoinMode::ExistsJoin);
            }

            viewName = dirPartyTable_ds.query().dataSourceTable(tableNum(DirPartyView)).name();

            if (isConfigurationkeyEnabled(configurationKeyNum(smmsm)))
            {
                if (statusProspect != FilterStatus::Undefined)
                {
                    rangeToAdd = strFmt(setRange, viewName , fieldStr(DirPartyView, RoleType), enum2int(DirPartyRoleType::BusRel), fieldStr(DirPartyView, DataArea), dataAreaId);
                    range = (range ? strFmt('%1 || %2', range, rangeToAdd) : rangeToAdd);
                }

                if (statusCompetitor != FilterStatus::Undefined)
                {
                    rangeToAdd = strFmt(setRange, viewName , fieldStr(DirPartyView, RoleType), enum2int(DirPartyRoleType::Competitor), fieldStr(DirPartyView, DataArea), dataAreaId);
                    range = (range ? strFmt('%1 || %2', range, rangeToAdd) : rangeToAdd);
                }
            }

            if (statusContact != FilterStatus::Undefined)
            {
                rangeToAdd = strFmt(setRange, viewName , fieldStr(DirPartyView, RoleType), enum2int(DirPartyRoleType::ContactPerson), fieldStr(DirPartyView, DataArea), dataAreaId);
                range = (range ? strFmt('%1 || %2', range, rangeToAdd) : rangeToAdd);
            }

            if (statusCustomer != FilterStatus::Undefined)
            {
                rangeToAdd = strFmt(setRange, viewName , fieldStr(DirPartyView, RoleType), enum2int(DirPartyRoleType::Customer), fieldStr(DirPartyView, DataArea), dataAreaId);
                range = (range ? strFmt('%1 || %2', range, rangeToAdd) : rangeToAdd);
            }

            if (statusWorker != FilterStatus::Undefined)
            {
                rangeToAdd = strFmt(setRange, viewName , fieldStr(DirPartyView, RoleType), enum2int(DirPartyRoleType::Worker), fieldStr(DirPartyView, DataArea), dataAreaId);
                range = (range ? strFmt('%1 || %2', range, rangeToAdd) : rangeToAdd);
            }

            if (statusApplicant != FilterStatus::Undefined)
            {
                rangeToAdd = strFmt(setRange, viewName , fieldStr(DirPartyView, RoleType), enum2int(DirPartyRoleType::Applicant), fieldStr(DirPartyView, DataArea), dataAreaId);
                range = (range ? strFmt('%1 || %2', range, rangeToAdd) : rangeToAdd);
            }

            if (statusVendor != FilterStatus::Undefined)
            {
                rangeToAdd = strFmt(setRange, viewName , fieldStr(DirPartyView, RoleType), enum2int(DirPartyRoleType::Vendor), fieldStr(DirPartyView, DataArea), dataAreaId);
                range = (range ? strFmt('%1 || %2', range, rangeToAdd) : rangeToAdd);
            }

            if (statusProspectVendor != FilterStatus::Undefined)
            {
                rangeToAdd = strFmt(setRange, viewName , fieldStr(DirPartyView, RoleType), enum2int(DirPartyRoleType::ProspectiveVendor), fieldStr(DirPartyView, DataArea), dataAreaId);
                range = (range ? strFmt('%1 || %2', range, rangeToAdd) : rangeToAdd);
            }

            if (statusLegalEntity != FilterStatus::Undefined)
            {
                rangeToAdd = strFmt(setRange, viewName , fieldStr(DirPartyView, RoleType), enum2int(DirPartyRoleType::LegalEntity), fieldStr(DirPartyView, DataArea), dataAreaId);
                range = (range ? strFmt('%1 || %2', range, rangeToAdd) : rangeToAdd);
            }

            if (range)
            {
                qbrParty.value('(' + range + ')');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>restrictRangeToCustomerAndVendorOnly</Name>
				<Source><![CDATA[
    private static void restrictRangeToCustomerAndVendorOnly(FormDataSource _dirPartyTable)
    {
        QueryBuildDataSource customerDirPartyView;
        QueryBuildDataSource vendorDirPartyView;

        customerDirPartyView = DirPartyLookupFormEventHandler::findorCreateDirPartyViewQueryBuildDataSource(_dirPartyTable, enum2int(DirPartyRoleType::Customer));
        vendorDirPartyView = DirPartyLookupFormEventHandler::findorCreateDirPartyViewQueryBuildDataSource(_dirPartyTable, enum2int(DirPartyRoleType::Vendor));

        QueryBuildRange customerRoleTypeRange = SysQuery::findOrCreateRange(customerDirPartyView, fieldNum(DirPartyView, unionAllBranchId));
        QueryBuildRange vendorRoleTypeRange = SysQuery::findOrCreateRange(vendorDirPartyView, fieldNum(DirPartyView, unionAllBranchId));

        customerRoleTypeRange.value(queryValue(enum2int(DirPartyRoleType::Customer)));
        vendorRoleTypeRange.value(queryValue(enum2int(DirPartyRoleType::Vendor)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findorCreateDirPartyViewQueryBuildDataSource</Name>
				<Source><![CDATA[
    private static QueryBuildDataSource findorCreateDirPartyViewQueryBuildDataSource(FormDataSource _dirPartyTable, Counter _unionAllBranchId)
    {
        QueryBuildDataSource qbdsDirPartyView = _dirPartyTable.query().dataSourceTable(tablenum(DirPartyView), _unionAllBranchId);

        if (!qbdsDirPartyView)
        {
            qbdsDirPartyView = _dirPartyTable.queryBuildDataSource().addDataSource(tableStr(DirPartyView));
            qbdsDirPartyView.addLink(fieldNum(DirPartyTable, RecId), fieldNum(DirPartyView, Party), _dirPartyTable.name());
            qbdsDirPartyView.joinMode(JoinMode::ExistsJoin);
        }

        qbdsDirPartyView.enabled(true);

        return qbdsDirPartyView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RoleTypeFilter_OnSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the lookup form based on the selection made in the combobox.
    /// </summary>
    /// <param name = "sender">Form control</param>
    /// <param name = "e">The selection changed event arguments</param>
    [FormControlEventHandler(formControlStr(DirPartyLookup, RoleTypeFilter), FormControlEventType::SelectionChanged)]
    public static void RoleTypeFilter_OnSelectionChanged(FormControl sender, FormControlEventArgs e)
    {
        FormRun form = sender.formRun();
        DirPartyLookupEntitiesFilter dirPartyLookupEntitiesFilter = form.getDirPartyLookupEntitiesFilter();
        FormComboBoxControl RoleTypeFilter = sender as FormComboBoxControl;

        if (RoleTypeFilter.selection() == HRMApplicantType::Applicant)
        {
            dirPartyLookupEntitiesFilter.parmFilterApplicants(FilterStatus::Set);
        }
        else
        {
            dirPartyLookupEntitiesFilter.parmFilterApplicants(FilterStatus::NotSet);
        }

        FormDataSource dirPartyTable_ds = form.dataSource(formDataSourceStr(DirPartyTable, DirPartyTable)) as FormDataSource;

        dirPartyTable_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>CourseInstructorRoleTypeFilter_OnSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the lookup form based on the selection made in the combobox.
    /// </summary>
    /// <param name="sender">Form control</param>
    /// <param name="e">The selection changed event arguments</param>
    [FormControlEventHandler(formControlStr(DirPartyLookup, CourseInstructorRoleTypeFilter), FormControlEventType::SelectionChanged)]
    public static void CourseInstructorRoleTypeFilter_OnSelectionChanged(FormControl sender, FormControlEventArgs e)
    {
        FormRun form = sender.formRun();
        DirPartyLookupEntitiesFilter dirPartyLookupEntitiesFilter = form.getDirPartyLookupEntitiesFilter();
        FormComboBoxControl userRoleFilter = sender as FormComboBoxControl;

        switch (any2Enum(userRoleFilter.selection()))
        {
            case HcmCourseInstructorRoleTypeFilter::All:
                dirPartyLookupEntitiesFilter.parmFilterVendors(FilterStatus::Set);
                dirPartyLookupEntitiesFilter.parmFilterContacts(FilterStatus::Set);
                dirPartyLookupEntitiesFilter.parmFilterEmployees(FilterStatus::Set);
                break;

            case HcmCourseInstructorRoleTypeFilter::Contacts:
                dirPartyLookupEntitiesFilter.parmFilterVendors(FilterStatus::Undefined);
                dirPartyLookupEntitiesFilter.parmFilterContacts(FilterStatus::Set);
                dirPartyLookupEntitiesFilter.parmFilterEmployees(FilterStatus::Undefined);
                break;

            case HcmCourseInstructorRoleTypeFilter::Vendor:
                dirPartyLookupEntitiesFilter.parmFilterVendors(FilterStatus::Set);
                dirPartyLookupEntitiesFilter.parmFilterContacts(FilterStatus::Undefined);
                dirPartyLookupEntitiesFilter.parmFilterEmployees(FilterStatus::Undefined);
                break;

            case HcmCourseInstructorRoleTypeFilter::Worker:
                dirPartyLookupEntitiesFilter.parmFilterVendors(FilterStatus::Undefined);
                dirPartyLookupEntitiesFilter.parmFilterContacts(FilterStatus::Undefined);
                // Shows both employees and contractors
                dirPartyLookupEntitiesFilter.parmFilterEmployees(FilterStatus::Set);
                break;
        }

        FormDataSource dirPartyTable_ds = form.dataSource(formDataSourceStr(DirPartyTable, DirPartyTable)) as FormDataSource;

        if (dirPartyTable_ds)
        {
            dirPartyTable_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>