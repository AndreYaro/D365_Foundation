<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobSchedulerLock</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanJobSchedulerLock</c> class locks or unlocks kanban job scheduling by adding and
/// releasing the pessimistic locks on <c>KanbanJobScheduleLock</c> table.
/// </summary>
public class KanbanJobSchedulerLock
{
    #define.timeOutLimit(3)

    Map     mapWorkCellConnection;
    Map     mapWorkCellLockLevel;
    boolean useLockLevels;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquireLockWorkCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acquires a lock on a specified <c>kanbanJobScheduleLock</c> record in a separate user connection.
    /// </summary>
    /// <param name="_workCell">
    /// A record ID of a <c>WrkCtrResourceGroup</c> record.
    /// </param>
    /// <param name="_throwIfNotAcquired">
    /// A Boolean value that indicates whether an error must be thrown when the lock cannot be acquired;
    /// optional.
    /// </param>
    /// <returns>
    /// true if a new lock was acquired; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The lock could not be acquired.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean acquireLockWorkCell(
        WrkCtrResourceGroupRefRecId _workCell,
        boolean                     _throwIfNotAcquired = true)
    {
        KanbanJobScheduleLock   kanbanJobScheduleLock;
        boolean                 result = false;

        this.init();

        if (!mapWorkCellConnection.exists(_workCell))
        {
            // lock work cell by selecting a record in the KanbanJobSchedule table with pessimistic lock
            UserConnection userConnection = new UserConnection();
            kanbanJobScheduleLock.setConnection(userConnection);

            userConnection.ttsbegin();

            kanbanJobScheduleLock.queryTimeout(#timeOutLimit);

            select pessimisticlock kanbanJobScheduleLock
                where kanbanJobScheduleLock.WorkCell == _workCell;

            if (kanbanJobScheduleLock.queryTimedOut())
            {
                result = false;
            }
            else
            {
                // work cell has never been locked before, record does not exist
                if (!kanbanJobScheduleLock.RecId)
                {
                    kanbanJobScheduleLock.clear();
                    kanbanJobScheduleLock.WorkCell = _workCell;
                    kanbanJobScheduleLock.insert();
                    userConnection.ttscommit();
                    result = this.acquireLockWorkCell(_workCell);
                }
                else
                {
                    // save connection and level
                    mapWorkCellConnection.insert(_workCell,userConnection);
                    mapWorkCellLockLevel.insert(_workCell,0);
                    result = true;
                }
            }
        }
        else
        {
            result = false;
        }

        if (   !result
            && _throwIfNotAcquired)
        {
            WrkCtrResourceGroup wrkCtrResourceGroup = WrkCtrResourceGroup::find(_workCell);
            throw error(strfmt("@SYS339359",wrkCtrResourceGroup.WrkCtrId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireOrHoldLockWorkCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acquires or holds a lock on a <c>kanbanJobScheduleLock</c> record in a separate user connection.
    /// </summary>
    /// <param name="_workCell">
    /// The record ID of a <c>WrkCtrResourceGroup</c> record.
    /// </param>
    /// <param name="_throwIfNotAcquired">
    /// A Boolean value that indicates whether an error must be thrown when the lock could not be acquired;
    /// optional.
    /// </param>
    /// <returns>
    /// true if a new lock was acquired or held; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean acquireOrHoldLockWorkCell(
        WrkCtrResourceGroupRefRecId _workCell,
        boolean                     _throwIfNotAcquired = true)
    {
        this.init();

        boolean result = mapWorkCellConnection.exists(_workCell);

        if (result)
        {
            // hold
            if (useLockLevels)
            {
                // increase level
                int lockLevel = mapWorkCellLockLevel.lookup(_workCell);
                lockLevel++;
                mapWorkCellLockLevel.insert(_workCell,lockLevel);
            }
        }
        else
        {
            // aquire
            result = this.acquireLockWorkCell(_workCell,_throwIfNotAcquired);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class member variables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        if (!mapWorkCellConnection)
        {
            mapWorkCellConnection = new Map(Types::Int64,Types::Class);
        }

        if (!mapWorkCellLockLevel)
        {
            mapWorkCellLockLevel = new Map(Types::Int64,Types::Integer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseLockLevels</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmUseLockLevels(boolean _useLockLevels = useLockLevels)
    {
        useLockLevels = _useLockLevels;
        return useLockLevels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseAllLocks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases all the locks.
    /// </summary>
    /// <remarks>
    /// All the locks are released regardless of their level.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void releaseAllLocks()
    {
        // clear all remaining connections
        if (   mapWorkCellConnection
            && mapWorkCellConnection.elements())
        {
            MapEnumerator me = mapWorkCellConnection.getEnumerator();
            while (me.moveNext())
            {
                UserConnection userConnection = me.currentValue();
                if (userConnection)
                {
                    userConnection.ttscommit();
                    userConnection.finalize();
                }
            }
        }

        // clear maps
        mapWorkCellConnection = null;
        mapWorkCellLockLevel  = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseLockWorkCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the lock on a specified <c>kanbanJobScheduleLock</c> record.
    /// </summary>
    /// <param name="_workCell">
    /// The record ID of a <c>WrkCtrResourceGroup</c> record.
    /// </param>
    /// <returns>
    /// true if a lock was released; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean releaseLockWorkCell(WrkCtrResourceGroupRefRecId _workCell)
    {
        KanbanJobScheduleLock   kanbanJobScheduleLock;
        boolean                 result = false;

        this.init();

        if (mapWorkCellConnection.exists(_workCell))
        {
            int lockLevel = mapWorkCellLockLevel.lookup(_workCell);

            if (lockLevel == 0)
            {
                UserConnection userConnection = mapWorkCellConnection.lookup(_workCell);
                if (userConnection)
                {
                    kanbanJobScheduleLock.setConnection(userConnection);
                    userConnection.ttscommit();
                    userConnection.finalize();
                    result = true;
                }
                mapWorkCellConnection.remove(_workCell);
                mapWorkCellLockLevel.remove(_workCell);
            }
            else
            {
                lockLevel--;
                mapWorkCellLockLevel.insert(_workCell,lockLevel);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanJobSchedulerLock construct()
    {
        return new KanbanJobSchedulerLock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrphanedLocks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up all <c>KanbanJobScheduleLock</c> records that are related to non-eixisting work cells.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void deleteOrphanedLocks()
    {
        kanbanJobScheduleLock   kanbanJobScheduleLock;
        wrkCtrResourceGroup     wrkCtrResourceGroup;

        ttsBegin;

        // Record based deletion should be used here instead of set based. It is because delte_from will even block
        // other simultaneous user connections' operation on all other work cell locks that are not subject to deletion
        while select forupdate kanbanJobScheduleLock
            notexists join wrkCtrResourceGroup
                where wrkCtrResourceGroup.RecId == kanbanJobScheduleLock.WorkCell
        {
            kanbanJobScheduleLock.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanJobSchedulerLock</c> class.
    /// </summary>
    /// <param name="_useLockLevels">
    /// A Boolean value that indicates whether levels must be used when locking or releasing work cells.
    /// </param>
    /// <returns>
    /// A new <c>KanbanJobSchedulerLock</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanJobSchedulerLock newStandard(boolean _useLockLevels = true)
    {
        KanbanJobSchedulerLock  kanbanJobSchedulerLock = KanbanJobSchedulerLock::construct();

        kanbanJobSchedulerLock.parmUseLockLevels(_useLockLevels);

        return kanbanJobSchedulerLock;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
