<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqLineWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class PurchReqLineWorkflow
{
    Args args;
    PurchReqLine purchReqLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLine</Name>
				<Source><![CDATA[
    public PurchReqLine parmPurchReqLine(PurchReqLine  _purchReqLine = purchReqLine)
    {
        purchReqLine = _purchReqLine;

        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    ReSubmit a purchase requisition document and starts corresponding workflow.
    /// </summary>
    /// <param name="args">
    ///    An <c>Args</c> value from the caller.
    /// </param>
    public static void main(Args _args)
    {
        PurchReqLineWorkflow purchReqLineWorkflow = PurchReqLineWorkflow::construct();
        PurchReqLine purchReqLine = _args.record();
        purchReqLineWorkflow.parmArgs(_args);
        purchReqLineWorkflow.parmPurchReqLine(purchReqLine);

        RecId recId = _args.record().RecId;
        TableId tableId = _args.record().TableId;

        if (purchReqLineWorkflow.reSubmit())
        {
            purchReqLineWorkflow.performBudgetCheckAndSetRequisitionStatusToInReview(purchReqLine);
        }

        if (FormDataUtil::getFormDataSource(purchReqLine))
        {
            FormDataUtil::getFormDataSource(purchReqLine).reread();
            FormDataUtil::getFormDataSource(purchReqLine).refresh();
        }

        _args.caller().updateWorkflowControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBudgetCheckAndSetRequisitionStatusToInReview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs budget check for the purchase requisition and set requisition status to in review.
    /// </summary>
    /// <param name="_purchReqLine">
    ///    The <c>PurchReqLine</c> record to set.
    /// </param>
    public void performBudgetCheckAndSetRequisitionStatusToInReview(PurchReqLine _purchReqLine)
    {
        PurchReqTable purchReqTable = PurchReqTable::find(purchReqLine.PurchReqTable, true);
        if (purchReqTable && purchReqTable.RequisitionStatus != PurchReqRequisitionStatus::InReview)
        {
            ttsbegin;

            purchReqTable.RequisitionStatus         = PurchReqRequisitionStatus::InReview;
            purchReqTable.SubmittedBy               = curUserId();
            purchReqTable.SubmittedDateTime         = DateTimeUtil::utcNow();

            purchReqTable.performBudgetCheck();

            purchReqTable.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReqLineWorkflow construct()
    {
        return new PurchReqLineWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionDialog</Name>
				<Source><![CDATA[
    private boolean actionDialog(WorkflowWorkItemActionDialog _workflowWorkItemActionDialog)
    {
        _workflowWorkItemActionDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
        _workflowWorkItemActionDialog.run();
        return _workflowWorkItemActionDialog.parmIsClosedOK();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs budget check for the purchase order line when the workflow dialog run event occurs.
    /// </summary>
    private void preWorkflowDialogRun()
    {
        if (Ledger::isLedgerBudgetControlEnabled(Ledger::primaryForLegalEntity(purchReqLine.BuyingLegalEntity)))
        {
            // Perform budget check before confirming the comment dialog.
            // This gives the approver a chance to cancel their action if there is any budget error or warning.
            SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(purchReqLine, SourceDocumentLine::find(purchReqLine.SourceDocumentLine).AccountingStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resubmits the purchase requisition line to workflow.
    /// </summary>
    /// <returns>
	///    True if the line workflow is resubmitted successfully; otherwise, false.
    /// </returns>
    public boolean reSubmit()
    {
        if (purchReqLine != null
            && this.canSubmit(purchReqLine))
        {
            WorkflowWorkItemTable           workItem = args.caller().getActiveWorkflowWorkItem();
            boolean                         dispatchWorkItem = false;
            WorkflowComment                 comment;
            UserId                          targetUser;

            if (workItem.RecId)
            {
                WorkflowWorkItemActionDialog workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(workItem,
                                                                                                                    WorkflowWorkItemActionType::Resubmit,
                                                                                                                    new MenuFunction(args.menuItemName(), args.menuItemType()));
                if (this.actionDialog(workflowWorkItemActionDialog))
                {
                    comment = workflowWorkItemActionDialog.parmWorkflowComment();
                    targetUser = workflowWorkItemActionDialog.parmTargetUser();

                    dispatchWorkItem = true;
                }
            }

            if (dispatchWorkItem)
            {
                WorkflowWorkItemActionManager::dispatchWorkItemAction(workItem,
                                                                    comment,
                                                                    targetUser,
                                                                    WorkflowWorkItemActionType::Resubmit,
                                                                    args.menuItemName());
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a purchase Req Line can be submitted to workflow.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchReqLine</c> record that should be submitted.
    /// </param>
    /// <returns>
    /// true if workflow can be submitted; otherwise, false.
    /// </returns>
    public boolean canSubmit(PurchReqLine _purchReqLine)
    {
        boolean canSubmit = true;

        changecompany(_purchReqLine.buyingLegalEntity2DataArea())
        {
            canSubmit = PurchReqWorkflow::validateSubmissionRules(_purchReqLine) && PurchReqWorkflow::validateQuestionnaire(_purchReqLine.RecId);
  
            if (canSubmit && isConfigurationkeyEnabled(configurationKeyNum(Asset)))
            {
                canSubmit = PurchReqWorkflow::validateFixedAsset(purchReqLine.RecId);
            }
        }

        if (canSubmit 
            && purchReqLine.doDistributionsExist()
            && !purchReqLine.isFullyDistributed())
        {
            canSubmit  =  false;
        }

        canSubmit = canSubmit && this.validateAccountingDistributions(purchReqLine);

        if (canSubmit &&
            isConfigurationkeyEnabled(configurationKeyNum(Project)) &&
            ProjFundingLimitTrackingManager::hasLimitErrorSourceDocumentLine(purchReqLine.SourceDocumentLine))
        {
            canSubmit = checkFailed("@SYS4110062");
        }

        return canSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the accounting distributions for all lines of the <c>PurchReqTable</c> transaction.
    /// </summary>
    /// <param name="_purchReqTableId">
    /// The <c>PurchReqTable</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true if the distributions are valid; otherwise false.
    /// </returns>
    private boolean validateAccountingDistributions(PurchReqLine _purchReqLine)
    {
        PurchReqTable purchReqTable = PurchReqTable::find(_purchReqLine.PurchReqTable);

        if (purchReqTable.isConsumption())
        {
            SourceDocumentLine  sourceDocumentLine = SourceDocumentLine::find(_purchReqLine.SourceDocumentLine);

            // transition the lines to fully distributed, if this is not possible the line is not ready to be submitted
            if (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Draft
            || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed)
            {
                // Make sure the line is fully distributed
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(_purchReqLine, true, SourceDocumentLineAccountingStatus::FullyDistributed);
            }
            return SourceDocumentProvider::areSourceDocLineAccDistAccountValid(sourceDocumentLine, true, true);
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>