<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalCheckPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CFMJournalCheckPost extends RunBase implements JournalRunbaseCallbackable
{
    CFMJournalId journalId;
    JournalTableData journalTableData;

    JournalCheckPostType checkPostType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPRIncludedOpenJours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether Payment requests included in the given Payment schedule journal are included in another Payment schedule journal as well.
    /// </summary>
    /// <param name="_journalId">
    /// The number of given journal.
    /// </param>
    /// <returns>
    /// true if Payment requests of the given Payment schedule journal are included in another Payment schedule journal; otherwise, false.
    /// </returns>
    public static boolean checkPRIncludedOpenJours(CFMJournalId _journalId)
    {
        boolean result = true;
        CFMPaymentRequestTable paymentRequest;
        CFMJournalTransLog transLog1, transLog2;
        CFMJournalTable journal;

        while select crosscompany PaymentRequestId from paymentRequest
        join TableId from transLog2
            where transLog2.SourceType == CFMJournalTransSourceType::PaymentRequest
               && transLog2.SourceHeader == paymentRequest.RecId
               && transLog2.JournalTable != CFMJournalTable::find(_journalId).RecId
        join JournalId from journal
            where journal.RecId == transLog2.JournalTable
               && journal.Posted == NoYes::No
        exists join transLog1
            where transLog1.SourceType == CFMJournalTransSourceType::PaymentRequest
                && transLog1.SourceHeader == paymentRequest.RecId
                && transLog1.JournalTable == CFMJournalTable::find(_journalId).RecId
        {
            warning(strFmt("@Cashflowmanagement:PaymRequestIncludeInOpenPaymSchedJournal", paymentRequest.PaymentRequestId, journal.JournalId));
            result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        JournalForm journalForm = JournalForm::fromArgs(args);
        CFMJournalCheckPost journalCheckPost = CFMJournalCheckPost::newFromForm(args, journalForm);

        journalForm.runbaseMainStart();

        if (journalCheckPost.prompt())
        {
            try
            {
                journalCheckPost.runOperation();
                journalForm.runbaseMainEnd(journalCheckPost, false);
            }
            catch (Exception::Error)
            {
                journalForm.runbaseMainEnd(journalCheckPost, true);
            }
        }
        else
        {
            journalForm.runbaseMainCancel(journalCheckPost.parmJournalId());
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    private static CFMJournalCheckPost newFromForm(Args _args, JournalForm _journalForm)
    {
        JournalTableMap journalTable = _journalForm.journalTableData().journalTable();

        CFMJournalCheckPost journalCheckPost = new CFMJournalCheckPost();
        journalCheckPost.getLast();

        journalCheckPost.parmCheckPostType(_args.parmEnum());
        journalCheckPost.parmJournalId(journalTable.JournalId);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ClassDescription ret;

        if (checkPostType == JournalCheckPostType::Check)
        {
            ret = strFmt("@SYS62637", this.parmJournalId());
        }
        else
        {
            ret = strFmt("@Cashflowmanagement:ConfirmJournal", this.parmJournalId());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        dialog.addText("@Cashflowmanagement:DoYouWantFinalizeJour");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfTransferLines</Name>
				<Source><![CDATA[
    public Integer numOfTransferLines()
    {
        CFMJournalTrans journalTrans;

        select count(RecId) from journalTrans
            where journalTrans.JournalId == journalId;

        return int642int(journalTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packResult</Name>
				<Source><![CDATA[
    public container packResult()
    {
        return [this.numOfTransferLines(),
                this.transferJournalId(),
                false,
                false,
                false,
                conNull(),
                conNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckPostType</Name>
				<Source><![CDATA[
    public JournalCheckPostType parmCheckPostType(JournalCheckPostType _checkPostType = checkPostType)
    {
        checkPostType = _checkPostType;
        return checkPostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public CFMJournalId parmJournalId(CFMJournalId _journalId = journalId)
    {
        journalId = _journalId;
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    private void postJournal()
    {
        CFMJournalTable journalTable = CFMJournalTable::find(journalId, true);

        if (journalTable.JournalType == CFMJournalType::Fact)
        {
            this.updatePaymentRequestForFact();
        }
        else
        {
            this.updatePaymentRequestForPlan();
        }

        journalTable.Posted = NoYes::Yes;
        journalTable.PostedDateTime = DateTimeUtil::getSystemDateTime();
        journalTable.PostedUserId = curUserId();
        journalTable.update();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00127, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean ret = true;

        if (checkPostType == JournalCheckPostType::Post)
        {
            if (CFMJournalTable::find(journalId).JournalType == CFMJournalType::Plan)
            {
                this.validate();
            }

            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        super();

        try
        {
            ttsbegin;

            if (this.validate())
            {
                if (checkPostType == JournalCheckPostType::Post)
                {
                    this.postJournal();
                }
                else
                {
                    info("@SYS17146");
                }
            }
            else
            {
                info(strFmt("@SYS30708", journalId));
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferJournalId</Name>
				<Source><![CDATA[
    public JournalId transferJournalId()
    {
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentRequestForFact</Name>
				<Source><![CDATA[
    private void updatePaymentRequestForFact()
    {
        CFMJournalTrans trans;
        CFMPaymentRequestTable requestTable;
        CFMJournalTransLog log;

        update_recordSet requestTable
            setting Status = CFMPaymentRequestStatus::Accepted
        exists join log
            where log.SourceHeader == requestTable.RecId
                && log.SourceType == CFMJournalTransSourceType::PaymentRequest
                && log.Outdated == NoYes::No
        exists join trans
            where trans.RecId == log.JournalTrans
                && trans.JournalId == journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentRequestForPlan</Name>
				<Source><![CDATA[
    private void updatePaymentRequestForPlan()
    {
        CFMJournalTrans trans;
        CFMPaymentRequestTable requestTable;
        CFMJournalTransLog log;

        update_recordSet requestTable
            setting Status = CFMPaymentRequestStatus::Scheduled
            where requestTable.Status == CFMPaymentRequestStatus::Opened || requestTable.Status == CFMPaymentRequestStatus::Confirmed
        exists join log
            where log.SourceHeader == requestTable.RecId
                && log.SourceType == CFMJournalTransSourceType::PaymentRequest
                && log.Outdated == NoYes::No
        exists join trans
            where trans.RecId == log.JournalTrans
                && trans.JournalId == journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a journal for posting.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called. Default value is null.
    /// </param>
    /// <returns>
    /// true if the journal is valid for posting; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean isValid = true;

        CFMJournalTable journalTable = CFMJournalTable::find(journalId);

        if (! journalTable.JournalId)
        {
            isValid = checkFailed(strFmt("@SYS21496", journalId));
        }

        isValid = isValid && JournalTableData::newTable(journalTable).checkOpen();

        if (isValid)
        {
            CFMJournalTrans trans;

            select firstonly RecId from trans
                where trans.JournalId == journalId;

            if (!trans.RecId)
            {
                isValid = checkFailed("@SYS99244");
            }

            if (isValid &&
                checkPostType == JournalCheckPostType::Post &&
                journalTable.isInWFProcess() &&
                !journalTable.isWFApproved())
            {
                // The journal is in workflow approvals and not approved so it can't be posted.
                isValid = checkFailed(strFmt("@SYS110592", journalTable.JournalId));
            }

            isValid = isValid && this.validatePR();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePR</Name>
				<Source><![CDATA[
    private boolean validatePR()
    {
        CFMJournalTable journalTable = CFMJournalTable::find(journalId);

        boolean result = true;

        boolean infoMessage(SysInfoLogStr _message)
        {
            if (journalTable.JournalType == CFMJournalType::Fact)
            {
                error(_message);
                return false;
            }
            else
            {
                warning(_message);
                return true;
            }
        }
        CFMJournalTransLog transLog;

        select firstOnly RecId from transLog
            where transLog.JournalTable == journalTable.RecId;

        if (transLog.RecId)
        {
            CFMPaymentRequestTable requestTable;

            while select requestTable
                where requestTable.Outdated == NoYes::Yes
            exists join transLog
                where transLog.SourceType == CFMJournalTransSourceType::PaymentRequest
                   && transLog.SourceHeader == requestTable.RecId
                   && transLog.JournalTable == journalTable.RecId
            {
                result = infoMessage(strFmt("@Cashflowmanagement:PaymRequestIncludeInPaymSchedJournalIsOutdated", requestTable.PaymentRequestId, journalTable.JournalId)) && result;
            }

            while select requestTable
                where requestTable.Status != CFMPaymentRequestStatus::Confirmed
                   && requestTable.Status != CFMPaymentRequestStatus::Scheduled
            exists join transLog
                where transLog.SourceType == CFMJournalTransSourceType::PaymentRequest
                    && transLog.SourceHeader == requestTable.RecId
                    && transLog.JournalTable == journalTable.RecId
            {
                result = infoMessage(strFmt("@Cashflowmanagement:PaymRequestIncludeInPaymSchedJournalHasStatus", requestTable.PaymentRequestId, journalTable.JournalId, requestTable.Status)) && result;
            }

            while select requestTable
                where requestTable.OnHold == NoYes::Yes
            exists join transLog
                where transLog.SourceType == CFMJournalTransSourceType::PaymentRequest
                    && transLog.SourceHeader == requestTable.RecId
                    && transLog.JournalTable == journalTable.RecId
            {
                result = infoMessage(strFmt("@Cashflowmanagement:PaymRequestIncludeInPaymSchedJournalIsOnHold", requestTable.PaymentRequestId, journalTable.JournalId)) && result;
            }

            while select requestTable
                where requestTable.WorkflowStatus != CFMPaymentRequestWorkflowStatus::None
                    && requestTable.WorkflowStatus != CFMPaymentRequestWorkflowStatus::Approved
            exists join transLog
                where transLog.SourceType == CFMJournalTransSourceType::PaymentRequest
                    && transLog.SourceHeader == requestTable.RecId
                    && transLog.JournalTable == journalTable.RecId
            {
                if (this.isWorkflowStatusApplicable(requestTable.WorkflowStatus))
                {
                    result = infoMessage(strFmt("@Cashflowmanagement:PaymRequestIncludeInPaymSchedJournalHasWorkflowStatus", requestTable.PaymentRequestId, journalTable.JournalId, requestTable.WorkflowStatus)) && result;
                }
            }

            while select requestTable
                where requestTable.PaymentAccountNum == ''
            exists join transLog
                where transLog.SourceType == CFMJournalTransSourceType::PaymentRequest
                    && transLog.SourceHeader == requestTable.RecId
                    && transLog.JournalTable == journalTable.RecId
            {
                result = infoMessage(strFmt("@Cashflowmanagement:ReqstInPaymSchedJourNotContainPaymAccount", requestTable.PaymentRequestId, journalTable.JournalId)) && result;
            }
        }

        if (journalTable.IncludeOverduePayment)
        {
            CFMJournalTrans journalTrans, journalTransStorno;

            while select journalTrans
                where journalTrans.journalId == journalTable.JournalId
                   && journalTrans.TransDate == dateNull()
                   && journalTrans.CorrectionType == CFMCorrectionType::None
            exists join transLog
                where transLog.JournalTrans == journalTrans.RecId
            {
                select firstOnly RecId from journalTransStorno
                    where journalTransStorno.journalId == journalTable.JournalId
                       && journalTransStorno.TransDate != dateNull()
                       && journalTransStorno.CorrectionType == CFMCorrectionType::Reverse
                       && journalTransStorno.PaymentAmount == -journalTrans.PaymentAmount;

                if (journalTransStorno.RecId == 0)
                {
                    result = checkFailed(strFmt("@Cashflowmanagement:JournalContainsPaymRequestsWithOverduePaymDate", fieldStr(CFMJournalName, IncludeOverduePayment)));
                    break;
                }
            }
        }

        if (CFMAnalyticDataEditUncommitted::isJournalExistUncommittedValues(journalTable.RecId))
        {
            result = checkFailed("@Cashflowmanagement:JourContainsUncommittedChanges");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowStatusApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the workflow status is applicable.
    /// </summary>
    /// <param name = "_workflowStatus">The workflow status.</param>
    /// <returns>
    /// true if the workflow status is applicable; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method provides the extension point for the workflow status check.
    /// </remarks>
    protected boolean isWorkflowStatusApplicable(CFMPaymentRequestWorkflowStatus _workflowStatus)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>