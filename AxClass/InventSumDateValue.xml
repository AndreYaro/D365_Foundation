<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDateValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventSumDateValue extends InventSumDatePhysical
{
    CostAmount  postedValue;
    CostAmount  postedPhysicalValue;
    CostAmount  notPostedPhysicalValue;
    CostAmount  knownFinDiff;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventSum</Name>
				<Source><![CDATA[
    protected void addInventSum(InventSum _inventSum)
    {
        super(_inventSum);

        postedValue += _inventSum.PostedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransFinancial</Name>
				<Source><![CDATA[
    protected void addInventTransFinancial(InventTrans _inventTrans)
    {
        super(_inventTrans);

        if (!_inventTrans.PackingSlipReturned)
        {
            postedValue  -= _inventTrans.CostAmountPosted;
            knownFinDiff += (_inventTrans.CostAmountPosted - _inventTrans.CostAmountPhysical + _inventTrans.CostAmountAdjustment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedInventValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the estimated inventory value for a particular item.
    /// </summary>
    /// <returns>
    ///    The estimated inventory value amount.
    /// </returns>
    public CostAmount estimatedInventValue()
    {
        return this.inventoryValue() + knownFinDiff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the inventory value for a particular item.
    /// </summary>
    /// <returns>
    ///    The inventory value amount.
    /// </returns>
    public CostAmount inventoryValue()
    {
        return postedValue + postedPhysicalValue + notPostedPhysicalValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>knownFinDiff</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides access to the known financial difference amount.
    /// </summary>
    /// <returns>
    ///    The known financial difference amount for a particular item.
    /// </returns>
    public CostAmount knownFinDiff()
    {
        return knownFinDiff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notPostedPhysicalValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides access to the physical inventory value (not posted) for a particular item.
    /// </summary>
    /// <returns>
    ///    The inventory value.
    /// </returns>
    public CostAmount notPostedPhysicalValue()
    {
        return notPostedPhysicalValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedPhysicalValue</Name>
				<Source><![CDATA[
    public CostAmount postedPhysicalValue()
    {
        return postedPhysicalValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedValue</Name>
				<Source><![CDATA[
    public CostAmount postedValue()
    {
        return postedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventSettlement</Name>
				<Source><![CDATA[
    protected void selectInventSettlement()
    {
        InventSettlement    inventSettlement;

        select sum(CostAmountAdjustment) from inventSettlement
            where inventSettlement.ItemId                 == itemId                             &&
                  inventSettlement.Cancelled              == NoYes::No                          &&
                  inventSettlement.TransDate              >  perDate                            &&
                  // <GEERU>
                  inventSettlement.InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur &&
                  // </GEERU>
                  inventSettlement.SettleModel            != InventSettleModel::PhysicalValue;

        postedValue  -= inventSettlement.CostAmountAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventSum</Name>
				<Source><![CDATA[
    protected void selectInventSum()
    {
        InventSum   inventSum;

        select sum(PostedQty), sum(PostedValue), sum(Received), sum(Deducted),
                sum(Registered), sum(Picked), sum(PdsCWPostedQty),
                sum(PdsCWReceived), sum(PdsCWDeducted), sum(PdsCWRegistered),
                sum(PdsCWPicked)
            from inventSum
            where inventSum.ItemId  == itemId
                && inventSum.Closed == NoYes::No;

        this.addInventSum(inventSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingFinancial</Name>
				<Source><![CDATA[
    protected void selectInventTransPostingFinancial()
    {
        InventTransPosting  inventTransPostingFinancial;
        InventTrans         inventTrans;

        while select forceplaceholders TableId
            from inventTransPostingFinancial
            where  inventTransPostingFinancial.ItemId                   == itemId
                && inventTransPostingFinancial.InventTransPostingType   == InventTransPostingType::Financial
                && inventTransPostingFinancial.TransDate                > perDate
            join sum(CostAmountPhysical), sum(CostAmountPosted),
                sum(CostAmountAdjustment), sum(Qty), sum(PdsCWQty)
            from inventTrans
            group by StatusIssue, StatusReceipt, PackingSlipReturned
            where  inventTrans.Voucher                      == inventTransPostingFinancial.Voucher
                && inventTrans.DateFinancial                == inventTransPostingFinancial.TransDate
                && inventTrans.InventTransOrigin            == inventTransPostingFinancial.InventTransOrigin
        {
            this.addInventTransFinancial(inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingPhysical</Name>
				<Source><![CDATA[
    protected void selectInventTransPostingPhysical()
    {
        InventTrans                 inventTrans;
        InventTransPosting          inventTransPostingPhysical;

        while select forceplaceholders TableId
            from inventTransPostingPhysical
            where  inventTransPostingPhysical.ItemId                    == itemId
                && inventTransPostingPhysical.InventTransPostingType    == InventTransPostingType::Physical
                && inventTransPostingPhysical.TransDate                 > perDate
            join sum(CostAmountPhysical), sum(CostAmountPosted),
                sum(CostAmountAdjustment), sum(Qty), sum(PdsCWQty)
            from inventTrans
            group by StatusIssue, StatusReceipt, DateInvent
            where  inventTrans.VoucherPhysical              == inventTransPostingPhysical.Voucher
                && inventTrans.DatePhysical                 == inventTransPostingPhysical.TransDate
                && inventTrans.InventTransOrigin            == inventTransPostingPhysical.InventTransOrigin
        {
            this.addInventTransPhysical(inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueQty</Name>
				<Source><![CDATA[
        protected  void setValueQty()
    {
        super();

        this.selectInventSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePhysicalValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a posted physical inventory value or not posted physical inventory value.
    /// </summary>
    /// <param name="_posted">
    ///    A Boolean value that determines whether the posted or not posted physical inventory value should be
    ///    updated.
    /// </param>
    /// <param name="_amount">
    ///    The amount to add to either posted or not posted physical inventory value.
    /// </param>
    protected void updatePhysicalValues(boolean _posted, CostAmount _amount)
    {
        if (_posted)
            postedPhysicalValue += _amount;
        else
            notPostedPhysicalValue += _amount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>