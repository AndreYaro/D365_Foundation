<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_SL_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class AssetTableMethod_SL_PL extends AssetTableMethod
{
    AssetDepreciationTime   periods;
    AssetAmount             periodAmount;
    AssetAmount             periodAmountNotCost;
    AssetRevaluationAmount  revaluationAmount;
    boolean                 theEnd;
    AssetTransDate          previousDepreciationDate;
    AssetAmount             extraordinaryDepAmount;
    AssetAmount             periodAmountCost;
    real                    costFactorSaved;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount to depreciate for straight line Poland for the given interval.
    /// </summary>
    /// <returns>
    /// The amount to depreciate.
    /// </returns>
    public AssetAmount calc()
    {
        AssetTransDate              startOfPeriod;
        AssetAmount                 orgPeriodAmount;
        boolean                     costPart = assetBook.DeprPrevPeriods_PL || assetBook.DeprPrevPeriodsNonCost_PL;
        AssetAmount                 deprPrevCostAmount = costPart ? this.getAmountInCurrency(assetBook.DeprPrevPeriods_PL - assetBook.DeprPrevPeriodsNonCost_PL) : 0;
        AssetDepreciationRate_W     assetRate;
        AssetDepreciationPercentage factor;
        TransDate                   previousPeriodEndDate;

        startOfPeriod = deprInterval.startOfPeriod(periodstart);

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();
            previousPeriodEndDate = startOfPeriod - 1;
            this.setAmountToDepreciate(previousPeriodEndDate);

            if (isReportingCurrencyDepreciation)
            {
                extraordinaryDepAmount = - AssetTrans::amountReportingCurrencyPerDateTranstype(
                    assetBook.AssetId,
                    periodEnd,
                    assetBook.BookId,
                    AssetTransType::ExtraordinaryDepreciation);
            }
            else
            {
                extraordinaryDepAmount = - AssetTrans::amountMSTPerDateTranstype(
                    assetBook.AssetId,
                    periodEnd,
                    assetBook.BookId,
                    AssetTransType::ExtraordinaryDepreciation);
            }

            assetRate = AssetDepreciationGroup_W::findRate(assetBook.DepreciationGroupId_W, this.depDate());

            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }

            if (previousDepreciationDate &&
                deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                periods = round(periods + prevPeriods, 0);
                prevPeriods = 0;
            }

            this.calc_SL_RemainingLife();

            this.calcRestPeriod(startOfPeriod);
            periodAmountNotCost = 0;

            // If the straight method is used as an alternative method, a user is able to specify the multiplication factor that
            // needs to be used for the primary and alternative depreciation method.
            // Additionally, factor cannot be used with the non-cost functionality.
            if (!assetRate.CostLimit_PL)
            {
                if (useFactor_PL)
                {
                    factor = assetRate.FactorAlt ? assetRate.FactorAlt : 1;
                }
                else
                {
                    factor = assetRate.Factor ? assetRate.Factor : 1;
                }

                periodAmount = assetBook.roundDepreciationAmount(periodAmount * factor, isReportingCurrencyDepreciation);
            }

            if (periodAmount && (amountToDepreciate > prevDepAmount + prevDepAmountNotCost_PL + prevDepAmountExternal + extraordinaryDepAmount))
            {
                AssetAmount deprPrevPeriods = this.getAmountInCurrency(assetBook.DeprPrevPeriods_PL);

                if (assetRate.CostLimit_PL
                    && (amountToDepreciate - deprPrevPeriods))
                {
                    if (!costFactorSaved
                        && (amountToDepreciate - deprPrevPeriods))
                    {
                        costFactorSaved = (this.getAmountInCurrency(assetRate.CostLimit_PL) - deprPrevCostAmount) / (amountToDepreciate - deprPrevPeriods);
                    }

                    periodAmountNotCost = assetBook.roundDepreciationAmount(periodAmount * (1 - costFactorSaved), isReportingCurrencyDepreciation);
                    if (periodAmountNotCost < 0)
                    {
                        periodAmountNotCost = 0;
                    }
                    periodAmountCost = periodAmount - periodAmountNotCost;
                }
                else
                {
                    periodAmountCost = periodAmount;
                }
            }

            periods -= restPeriod;

            revaluationAmount = assetBook.roundDepreciationAmount(periodAmountCost  * this.revaluationFactor(), isReportingCurrencyDepreciation) - periodAmountCost;
            periodAmountCost += revaluationAmount;

            periodEnd++;

            periodstart = periodEnd;
            periodEnd   = deprInterval.endPeriod(periodstart);

            previousDepreciationDate = depreciationDate;
            orgPeriodAmount = periodAmount;

            if (periodAmountCost && (! prevPeriods))
            {
                periodAmountCost = assetBook.roundDepreciationAmount(periodAmountCost, isReportingCurrencyDepreciation);
            }

            if ((! prevPeriods) &&
                (amountToDepreciate <= (prevDepAmount + prevDepAmountNotCost_PL + periodAmountCost + periodAmountNotCost + prevDepAmountExternal + extraordinaryDepAmount)))
            {
                theEnd = true;
                if (amountToDepreciate < prevDepAmount + prevDepAmountNotCost_PL + periodAmountCost + periodAmountNotCost + prevDepAmountExternal + extraordinaryDepAmount)
                {
                    periodAmountCost = amountToDepreciate - (prevDepAmount + prevDepAmountNotCost_PL + prevDepAmountExternal + extraordinaryDepAmount);
                    if (assetRate.CostLimit_PL && costFactorSaved)
                    {
                        periodAmountNotCost = assetBook.roundDepreciationAmount(periodAmountCost * (1 - costFactorSaved), isReportingCurrencyDepreciation);
                       periodAmountCost = periodAmountCost - periodAmountNotCost;
                    }
                }
            }

            prevDepAmount           += periodAmountCost;
            prevDepAmountNotCost_PL += periodAmountNotCost;
        }
        else
        {
            periodAmountCost = 0;
        }

        return periodAmountCost + periodAmountNotCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SL_RemainingLife</Name>
				<Source><![CDATA[
        private void calc_SL_RemainingLife()
    {
        if (periods == 1)
        {
            periodAmount = assetBook.roundDepreciationAmount((amountToDepreciate -
                                     prevDepAmount -
                                     prevDepAmountNotCost_PL -
                                     prevDepAmountExternal -
                                     extraordinaryDepAmount) /
                                     round(periods + prevPeriods, 0),
                                     isReportingCurrencyDepreciation);
        }
        else if (periods > 0)
        {
            periodAmount = assetBook.roundDepreciationAmount((amountToDepreciate -
                                         prevDepAmount -
                                         prevDepAmountNotCost_PL -
                                         prevDepAmountExternal -
                                         extraordinaryDepAmount) /
                                         round(periods + prevPeriods, 0),
                                         isReportingCurrencyDepreciation);
        }
        else
        {
            periodAmount = 0;
            if (! dualDepreciation)
            {
                theEnd = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
        protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        super(_startOfPeriod);

        if (calculatePrevPeriods && ! amountToDepreciate)
        {
            prevPeriods += restPeriod;
        }
        else
        {
            calculatePrevPeriods = false;
            periodAmount = assetBook.roundDepreciationAmount(periodAmount * (restPeriod + prevPeriods), isReportingCurrencyDepreciation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>AssetTableeMethod</c> class.
    /// </summary>
    public void init()
    {
        super();

        periods  = assetBook.LifeTimeRest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
        public boolean next()
    {
        AssetAmount amountToDepriciateMax;
        AssetAmount amountToDepriciateCur;

        if (isReportingCurrencyDepreciation)
        {
            amountToDepriciateMax = AssetTrans::amountToDepriciateInReportingCurrency(
                assetBook.AssetId,
                maxDate(),
                assetBook.BookId);
            amountToDepriciateCur = AssetTrans::amountToDepriciateInReportingCurrency(
                assetBook.AssetId,
                depreciationDate ? prevMth(depreciationDate): depreciationDate,
                assetBook.BookId);
        }
        else
        {
            amountToDepriciateMax = AssetTrans::amountToDepriciate(
                assetBook.AssetId,
                maxDate(),
                assetBook.BookId);
            amountToDepriciateCur = AssetTrans::amountToDepriciate(
                assetBook.AssetId,
                depreciationDate ? prevMth(depreciationDate): depreciationDate,
                assetBook.BookId);
        }

        if (amountToDepriciateMax - amountToDepriciateCur > 0)
        {
            theEnd = false;
        }

        if (theEnd)
        {
            return false;
        }

        if (parmRunDate <= baseDate)
        {
            return false;
        }

        this.setDepDate();

    //
    //  This prevents depreciations with invalid dates from
    //  being handled.
    //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodAmountCost_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the taxable amount of the depreciation.
    /// </summary>
    /// <returns>
    ///     The taxable amount of the depreciation.
    /// </returns>
    public AssetAmount periodAmountCost_PL()
    {
        return periodAmountCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodAmountNotCost_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the non-taxable amount of the depreciation.
    /// </summary>
    /// <returns>
    ///     The non-taxable amount of the depreciation.
    /// </returns>
    public AssetAmount periodAmountNotCost_PL()
    {
        return periodAmountNotCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the revaluation amount of the given value model.
    /// </summary>
    /// <returns>
    ///     The revaluation amount of the given value model.
    /// </returns>
    public AssetRevaluationAmount revaluationAmount()
    {
        return revaluationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountToDepreciate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the <c>setAmountToDepreciate</c> method to eliminate the sale and scrap amounts for the
    /// current periods, as the sale and scrap amounts must affect depreciation calculations in the next
    /// period.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The date of the asset transaction.
    /// </param>
    protected void setAmountToDepreciate(AssetTransDate _assetTransDate = periodEnd)
    {
        TransDate depStartDate;
        depStartDate = assetBook.DepreciationStartDate ? assetBook.DepreciationStartDate :  deprInterval.startOfPeriod(_assetTransDate);

        super(_assetTransDate);

        if (isReportingCurrencyDepreciation)
        {
            amountToDepreciate -= AssetTrans::getSalesScrapValueReportingCurrency(assetBook.AssetId, assetBook.BookId, depStartDate, _assetTransDate);
        }
        else
        {
            amountToDepreciate -= AssetTrans::getSalesScrapValue(assetBook.AssetId, assetBook.BookId, depStartDate, _assetTransDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>