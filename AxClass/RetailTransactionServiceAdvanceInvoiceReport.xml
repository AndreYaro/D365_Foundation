<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceAdvanceInvoiceReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionServiceAdvanceInvoiceReport</c> class is used to run advance invoice report.
/// </summary>
[RetailTransactionServiceSrsReportAttribute('CustAdvanceInvoice')]
public class RetailTransactionServiceAdvanceInvoiceReport extends RetailTransactionServiceSrsReport
{
    private SalesId salesId;
    private RetailStoreId storeId;
    private RetailTerminalId terminalId;
    private RetailTransactionId transactionId;
    private boolean onlinePrintingMode;

    private SRSReportFileFormat fileFormat;

    private XmlDocument xmlResponse;

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the class instance.
    /// </summary>
    private void new()
    {
        // private constructor
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    public SalesId parmSalesId(SalesId _salesId = salesId)
    {
        salesId = _salesId;
        return salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStoreId</Name>
				<Source><![CDATA[
    public RetailStoreId parmStoreId(RetailStoreId _storeId = storeId)
    {
        storeId = _storeId;
        return storeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTerminalId</Name>
				<Source><![CDATA[
    public RetailTerminalId parmTerminalId(RetailTerminalId _terminalId = terminalId)
    {
        terminalId = _terminalId;
        return terminalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionId</Name>
				<Source><![CDATA[
    public RetailTransactionId parmTransactionId(RetailTransactionId _transactionId = transactionId)
    {
        transactionId = _transactionId;
        return transactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileFormat</Name>
				<Source><![CDATA[
    public SRSReportFileFormat parmFileFormat(SRSReportFileFormat _fileFormat = fileFormat)
    {
        fileFormat = _fileFormat;
        return fileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs SSRS advance invoice report.
    /// </summary>
    /// <param name="_reportDataXmlStr">
    /// Xml string containing parameters for the report.
    /// </param>
    /// <returns>
    /// Container with result (operation result, error message, reports content).
    /// </returns>
    protected container runReport(str _reportParametersXmlStr)
    {
        CzCustAdvanceInvoiceTable advanceInvoiceTable;
        int invoiceCount;
        boolean success;
        int fromLine;
        str error;

        try
        {
            fromLine = Global::infologLine();

            this.initReportParametersFromXml(_reportParametersXmlStr);

            while select advanceInvoiceTable
                where advanceInvoiceTable.SalesId == this.parmSalesId()
                      && (!this.parmTransactionId()
                          || ( advanceInvoiceTable.RetailStoreId == this.parmStoreId()
                            && advanceInvoiceTable.RetailTerminalId == this.parmTerminalId()
                            && advanceInvoiceTable.RetailTransactionId == this.parmTransactionId())
                         )
                      && (advanceInvoiceTable.Type == AdvanceInvoiceType_W::Common
                          || advanceInvoiceTable.Type == AdvanceInvoiceType_W::CreditNote)
            {
                invoiceCount++;
                container advanceInvoiceReport = this.runAdvanceInvoiceReport(advanceInvoiceTable);
                this.addReportDataToXmlResponse(advanceInvoiceReport);
            }

            if (!invoiceCount)
            {
                // this is correct situation only for online print mode.
                // it handles minor updates of customer order without money movements, e.g. line comment
                if (!onlinePrintingMode)
                {
                    throw error("@RetailAdvanceInvoice:NoAdvanceInvoiceForPrinting");
                }
            }

            success = true;
        }
        catch
        {
            error = RetailTransactionServiceUtilities::getInfologMessages(fromLine);
            eventSource.EventWriteOrdersRunReportError(funcName());
        }

        return [success, error, this.getXmlResponse()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReportDataToXmlResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds report data to xml response.
    /// </summary>
    /// <param name = "_reportData">The container with report file name and report data as a base64string.</param>
    private void addReportDataToXmlResponse(container _reportData)
    {
        XmlElement xmlReportsRootElement = this.getReportsRootElement();

        if (!xmlReportsRootElement)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        str reportFileName;
        str reportAsBase64String;

        [reportFileName, reportAsBase64String] = _reportData;

        XmlElement xmlReport = xmlResponse.createElement(reportFileName);
        xmlReport.innerText(reportAsBase64String);

        xmlReportsRootElement.appendChild(xmlReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportsRootElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets reports root element.
    /// </summary>
    /// <returns>The reports root element.</returns>
    private XmlElement getReportsRootElement()
    {
        const str ReportsHeaderElementId = 'Reports';

        if (!xmlResponse)
        {
            xmlResponse = XMLDocument::newBlank();
            xmlResponse.appendChild(xmlResponse.createElement(ReportsHeaderElementId));
        }

        return xmlResponse.getNamedElement(ReportsHeaderElementId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the xml response.
    /// </summary>
    /// <returns>The xml response.</returns>
    private str getXmlResponse()
    {
        return xmlResponse != null ? xmlResponse.toString() : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportParametersFromXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report parameters from the data xml.
    /// </summary>
    /// <param name = "_reportDataXmlStr">The report data xml.</param>
    private void initReportParametersFromXml(str _reportDataXmlStr)
    {
        XmlDocument xmlDoc = new XmlDocument();
        xmlDoc.loadXml(_reportDataXmlStr);

        XmlElement xmlRoot = xmlDoc.documentElement();

        this.parmSalesId(RetailTransactionServiceUtilities::GetValue(xmlRoot, 'SalesOrderId'));
        if (!this.parmSalesId())
        {
            throw error("@RetailAdvanceInvoice:SalesOrderIdNotSpecified");
        }

        this.parmTransactionId(RetailTransactionServiceUtilities::GetValue(xmlRoot, 'TransactionId'));

        // If there is transaction reference, it means we are printing invoice in online mode (after transaction conclusion).
        // If there is not one - ad-hoc printing mode.
        onlinePrintingMode = this.parmTransactionId() != '';

        if (onlinePrintingMode)
        {
            this.parmStoreId(RetailTransactionServiceUtilities::GetValue(xmlRoot, 'StoreId'));

            if (!this.parmStoreId())
            {
                throw error("@RetailAdvanceInvoice:StoreIdNotSpecified");
            }

            this.parmTerminalId(RetailTransactionServiceUtilities::GetValue(xmlRoot, 'TerminalId'));

            if (!this.parmTerminalId())
            {
                throw error("@RetailAdvanceInvoice:TerminalIdNotSpecified");
            }
        }

        str fileFormatAsStr = RetailTransactionServiceUtilities::GetValue(xmlRoot, 'FileFormat');

        if (!isInteger(fileFormatAsStr))
        {
            throw error("@RetailAdvanceInvoice:FileFormatNotSpecified");
        }

        this.parmFileFormat(str2int(fileFormatAsStr));

        if (!enum2Symbol(enumNum(SRSReportFileFormat), this.parmFileFormat()))
        {
            throw error("@RetailAdvanceInvoice:FileFormatNotSpecified");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAdvanceInvoiceReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs advance invoice report.
    /// </summary>
    /// <param name="_advanceInvoiceTable">
    /// Record of <c>CzCustAdvanceInvoiceTable</c> table.
    /// </param>
    /// <returns>
    /// The container with report file name and report data as a base64string.
    /// </returns>
    private container runAdvanceInvoiceReport(CzCustAdvanceInvoiceTable _advanceInvoiceTable)
    {
        str reportName = PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesAdvanceInvoice).getDefaultReportFormat();

        CustAdvanceInvoiceContract rdpContract = new CustAdvanceInvoiceContract();
        rdpContract.parmAdvanceInvoiceRecId(_advanceInvoiceTable.RecId);
        rdpContract.parmPrintCopyOriginal(PrintCopyOriginal::Original);

        CustAdvanceInvoiceController controller = new CustAdvanceInvoiceController();
        controller.parmReportName(reportName);
        controller.parmReportContract().parmRdpContract(rdpContract);

        SrsReportRdlDataContract rdlContract = controller.parmReportContract().parmRdlContract();
        rdlContract.parmLanguageId(_advanceInvoiceTable.LanguageId);
        rdlContract.parmLabelLanguageId(_advanceInvoiceTable.LanguageId);

        RetailTransactionServiceSrsReportPrintDestinationSettings printDestinationSettings = new RetailTransactionServiceSrsReportPrintDestinationSettings();
        printDestinationSettings.parmFileName(this.getReportFileName(reportName, _advanceInvoiceTable));
        printDestinationSettings.fileFormat(this.parmFileFormat());
        printDestinationSettings.printMediumType(SRSPrintMediumType::File);
        printDestinationSettings.imageFileFormat(SRSImageFileFormat::TIFF);
        printDestinationSettings.setDeviceInfo(this.updateDeviceInfo(printDestinationSettings.deviceInfo()));

        RetailTransactionServiceSrsReportDataContract reportDataContract = new RetailTransactionServiceSrsReportDataContract();
        reportDataContract.unpack(controller.parmReportContract().pack());
        reportDataContract.parmReportExecutionInfo(new SRSReportExecutionInfo());
        reportDataContract.parmPrintSettings(printDestinationSettings);

        new SrsReportRunService().runReport(reportDataContract);

        return [printDestinationSettings.parmFileName(), System.Convert::ToBase64String(reportDataContract.parmReportBytes())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report file name.
    /// </summary>
    /// <param name = "_reportName">The report name.</param>
    /// <param name = "_advanceInvoiceTable">Record of <c>CzCustAdvanceInvoiceTable</c> table.</param>
    /// <returns>The report file name.</returns>
    private str getReportFileName(str _reportName, CzCustAdvanceInvoiceTable _advanceInvoiceTable)
    {
        return strFmt('%1_%2', _reportName, _advanceInvoiceTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeviceInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the device info.
    /// <param name = "_deviceInfo">The current device info.</param>
    /// </summary>
    /// <returns>The updated device info.</returns>
    private str updateDeviceInfo(str _deviceInfo)
    {
        str updatedDeviceInfo = _deviceInfo;

        if (this.parmFileFormat() == SRSReportFileFormat::Image)
        {
            XmlDocument doc = XmlDocument::newXml(_deviceInfo, false);
            XmlElement devInfoElement = doc.getNamedElement('DeviceInfo');

            if (devInfoElement)
            {
                XmlElement dpiXElement = doc.createElement('DpiX');
                dpiXElement.innerText('300');
                devInfoElement.appendChild(dpiXElement);

                XmlElement dpiYElement = doc.createElement('DpiY');
                dpiYElement.innerText('300');
                devInfoElement.appendChild(dpiYElement);
            }

            updatedDeviceInfo = doc.toString();
        }

        return updatedDeviceInfo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>