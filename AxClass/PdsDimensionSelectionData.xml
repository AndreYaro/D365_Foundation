<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsDimensionSelectionData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsDimensionSelectionData
{
    Array           dimAttrRange;
    int             dimAttrCount;
    int64           valueKeyArray[];
    Array           dimAttrArray;
    str             valueStrArray[];
    str             valueNameArray[];
    DataSourceName  dsName;
    fieldName       dsFieldName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getValueKeyArray</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the dimension key for a particular index.
    /// </summary>
    /// <param name="_index">
    ///     The index to retrieve.
    /// </param>
    /// <returns>
    ///     The key of the dimension in that position.
    /// </returns>
    public int64 getValueKeyArray(int _index)
    {
        if (_index && (_index <= dimAttrCount))
        {
            return valueKeyArray[_index];
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueNameArray</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the dimension name for a particular index.
    /// </summary>
    /// <param name="_index">
    ///     The index to retrieve.
    /// </param>
    /// <returns>
    ///     The name of the dimension in that position.
    /// </returns>
    public str getValueNameArray(int _index)
    {
        if (_index && (_index <= dimAttrCount))
        {
            return valueNameArray[_index];
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueStrArray</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the string dimension value for a particular index.
    /// </summary>
    /// <param name="_index">
    ///     The index to retrieve.
    /// </param>
    /// <returns>
    ///     The value selected for the dimension in that position.
    /// </returns>
    public str getValueStrArray(int _index)
    {
        if (_index && (_index <= dimAttrCount))
        {
            return valueStrArray[_index];
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        dimAttrRange = new Array(Types::Container);
        dimAttrCount = 0;
        dimAttrArray = new Array(Types::Container);
        dsName       = '';
        dsFieldName  = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimAttrArray</Name>
				<Source><![CDATA[
        public Array parmDimAttrArray(Array _dimAttrArray = dimAttrArray)
    {
        dimAttrArray = _dimAttrArray;

        return dimAttrArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimAttribCount</Name>
				<Source><![CDATA[
        public int parmDimAttribCount(int _dimAttrCount = dimAttrCount)
    {
        dimAttrCount = _dimAttrCount;
        return dimAttrCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimAttribRange</Name>
				<Source><![CDATA[
        public Array parmDimAttribRange(Array _dimAttrRange = dimAttrRange)
    {
        dimAttrRange = _dimAttrRange;

        return dimAttrRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSFieldName</Name>
				<Source><![CDATA[
        public fieldName parmDSFieldName(fieldName _dsFieldName = dsFieldName)
    {
        dsFieldName = _dsFieldName;

        return dsFieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSName</Name>
				<Source><![CDATA[
        public DataSourceName parmDSName(DataSourceName _dsName = dsName)
    {
        dsName = _dsName;

        return dsName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueKeyArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values in the array named valueKeyArray.
    /// </summary>
    /// <param name="_valueKeyArray">
    /// The value to save in the array.
    /// </param>
    /// <param name="_index">
    /// The position the value is linked to in the array.
    /// </param>
    public void setValueKeyArray(DimensionDefault _valueKeyArray, int _index)
    {
        if (_index > dimAttrCount)
        {
            dimAttrCount = _index;
        }
        valueKeyArray[_index] = _valueKeyArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueNameArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values in the array containing the dimension names.
    /// </summary>
    /// <param name="_valueName">
    /// The string value to be added to the array.
    /// </param>
    /// <param name="_index">
    /// The position in which the value is inserted.
    /// </param>
    public void setValueNameArray(str _valueName, int _index)
    {
        if (_index > dimAttrCount)
        {
            dimAttrCount = _index;
        }
        valueNameArray[_index] = _valueName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueStrArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values in the array named valueStrArray.
    /// </summary>
    /// <param name="_valueStrArray">
    /// The string value to be added to the array.
    /// </param>
    /// <param name="_index">
    /// The position the value is linked to in the array.
    /// </param>
    public void setValueStrArray(str _valueStrArray, int _index)
    {
        if (_index > dimAttrCount)
        {
            dimAttrCount = _index;
        }
        valueStrArray[_index] = _valueStrArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query based on the selected dimension values.
    /// </summary>
    /// <param name="_query">
    /// The datasource query to be updated.
    /// </param>
    public void updateQuery(Query _query)
    {
        int                     i;
        NoYes                   includeRange;
        DimensionAttribute      attr;

        SysQuery::clearDimensionRangesFromQuery(_query);

        for (i = 1; i <= this.parmDimAttribCount(); i++)
        {
            includeRange = dimAttrRange.value(i);
            if (includeRange == NoYes::Yes)
            {
                if (valueKeyArray[i] != 0)
                {
                    attr = dimAttrArray.value(i);
                    SysQuery::addDimensionAttributeRange(_query, dsName, dsFieldName, DimensionComponent::DimensionAttribute, valueStrArray[i], attr.Name);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>