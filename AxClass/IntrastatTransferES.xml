<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatTransferES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Transfers intrastat in Spain country context.
/// </summary>
#ISOCountryRegionCodes
[IntrastatCountryRegion(#isoES)]
public class IntrastatTransferES extends IntrastatTransfer implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcProjInvoiceJourAccountNum</Name>
				<Source><![CDATA[
    protected CustAccount calcProjInvoiceJourAccountNum(ProjInvoiceJour _projInvoiceJour)
    {
        return ProjFundingSource::findCustAccount(_projInvoiceJour.ProjInvoiceProjId).CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromCustInvoiceJour</Name>
				<Source><![CDATA[
    public void loadFromCustInvoiceJour(IntrastatDirection  _direction, // this direction only determines the dispatchID - not the intrastat reporting direction
                                        CustInvoiceJour     custInvoiceJour)
    {
        super(_direction, custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromCustPckSlpJour</Name>
				<Source><![CDATA[
    public void loadFromCustPckSlpJour(IntrastatDirection   _direction, // this direction only determines the dispatchID - not the intrastat reporting direction
                                       CustPackingSlipJour  custPackingSlipJour)
    {
        super(_direction, custPackingSlipJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromProjInvoiceJour</Name>
				<Source><![CDATA[
    public void loadFromProjInvoiceJour(IntrastatDirection     _direction, // this direction only determines the dispatchID - not the intrastat reporting direction
                                        ProjInvoiceJour        _projInvoiceJour)
    {
        super(_direction, _projInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromVendInvoiceJour</Name>
				<Source><![CDATA[
    public void loadFromVendInvoiceJour(IntrastatDirection    _direction, // this direction only determines the dispatchID - not the intrastat reporting direction
                                        VendInvoiceJour       vendInvoiceJour)
    {
        super(_direction, vendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromVendPckSlpJour</Name>
				<Source><![CDATA[
    public void loadFromVendPckSlpJour(IntrastatDirection  _direction, // this direction only determines the dispatchID - not the intrastat reporting direction
                                       VendPackingSlipJour vendPackingSlipJour)
    {
        super(_direction, vendPackingSlipJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustInvoiceTrans(CustInvoiceJour             _custInvoiceJour,
                                                          CustInvoiceTrans            _custInvoiceTrans,
                                                          CustInvoiceJour_Intrastat   _custInvoiceJour_Intrastat = null,
                                                          CustInvoiceTrans_Intrastat  _custInvoiceTrans_Intrastat = null)
    {
        SalesLine salesLine = _custInvoiceTrans.salesLine();
        Intrastat intrastat = super(_custInvoiceJour, _custInvoiceTrans, _custInvoiceJour_Intrastat, _custInvoiceTrans_Intrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VatNum = CustTable::find(intrastat.AccountNum).getVatNumPrimaryRegistrationNumber();
        }

        intrastat.County = salesLine.CountyOrigDest ? salesLine.CountyOrigDest : intrastatParm.CountyOrigDest;

        this.initIntrastatDefaultParameters(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustPckSlpTrans(CustPackingSlipJour             _custPackingSlipJour,
                                                         CustPackingSlipTrans            _custPackingSlipTrans,
                                                         CustPackingSlipJour_Intrastat   _custPackingSlipJour_Intrastat = null,
                                                         CustPackingSlipTrans_Intrastat  _custPackingSlipTrans_Intrastat = null)
    {
        SalesLine salesLine = _custPackingSlipTrans.salesLine();
        Intrastat intrastat = super(_custPackingSlipJour, _custPackingSlipTrans, _custPackingSlipJour_Intrastat, _custPackingSlipTrans_Intrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VatNum = CustTable::find(intrastat.AccountNum).getVatNumPrimaryRegistrationNumber();
        }

        intrastat.County = salesLine.CountyOrigDest ? salesLine.CountyOrigDest : intrastatParm.CountyOrigDest;

        this.initIntrastatDefaultParameters(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromProjInvoiceItem</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromProjInvoiceItem(ProjInvoiceJour         _projInvoiceJour,
                                                         ProjInvoiceItem         _projInvoiceItem)
    {
        SalesLine salesLine = _projInvoiceItem.salesLine();
        SalesTable salesTable = salesLine.salesTable();
        Intrastat intrastat = super(_projInvoiceJour, _projInvoiceItem);

        intrastat.County = salesLine.CountyOrigDest ? salesLine.CountyOrigDest : intrastatParm.CountyOrigDest;

        if (!intrastat.TransactionCode && salesLine.TransactionCode)
        {
            intrastat.TransactionCode = salesLine.TransactionCode;
        }

        if (!intrastat.TransportMode && salesLine.Transport)
        {
            intrastat.TransportMode = salesLine.Transport;
        }

        if (!intrastat.Port && salesLine.Port)
        {
            intrastat.Port = salesLine.Port;
        }

        if (!intrastat.StatProcId && salesLine.StatProcId)
        {
            intrastat.StatProcId = salesLine.StatProcId;
        }

        this.initIntrastatDefaultParameters(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendInvoiceTrans(VendInvoiceJour             _vendInvoiceJour,
                                                          VendInvoiceTrans            _vendInvoiceTrans,
                                                          VendInvoiceJour_Intrastat   _vendInvoiceJour_Intrastat = null,
                                                          VendInvoiceTrans_Intrastat  _vendInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_vendInvoiceJour, _vendInvoiceTrans, _vendInvoiceJour_Intrastat, _vendInvoiceTrans_Intrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VatNum = VendTable::find(intrastat.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _vendInvoiceJour.InvoiceDate);
        }

        intrastat.State = _vendInvoiceTrans.DestState;
        intrastat.County = _vendInvoiceTrans.DestCounty;

        this.initIntrastatDefaultParameters(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendPckSlpTrans(VendPackingSlipJour             _vendPackingSlipJour,
                                                         VendPackingSlipTrans            _vendPackingSlipTrans,
                                                         VendPackingSlipJour_Intrastat   vendPackingSlipJour_Intrastat = null,
                                                         VendPackingSlipTrans_Intrastat  vendPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_vendPackingSlipJour, _vendPackingSlipTrans, vendPackingSlipJour_Intrastat, vendPackingSlipTrans_Intrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VatNum = VendTable::find(intrastat.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _vendPackingSlipJour.DocumentDate);
        }

        intrastat.State = _vendPackingSlipTrans.DestState;
        intrastat.County = _vendPackingSlipTrans.DestCounty;

        this.initIntrastatDefaultParameters(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatDefaultParameters</Name>
				<Source><![CDATA[
    private void initIntrastatDefaultParameters(Intrastat _intrastat)
    {
        if (!_intrastat.DlvTerm)
        {
            _intrastat.DlvTerm = intrastatParm.DlvTermParm;
        }

        if (!_intrastat.TransactionCode)
        {
            _intrastat.TransactionCode = intrastatParm.DefaultSalePurchase;
        }

        if (!_intrastat.TransportMode)
        {
            _intrastat.TransportMode = intrastatParm.TransportModeParm;
        }

        if (!_intrastat.Port)
        {
            _intrastat.Port = intrastatParm.PortParm;
        }

        if (!_intrastat.StatProcId)
        {
            _intrastat.StatProcId = intrastatParm.StatProcIdParm;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>