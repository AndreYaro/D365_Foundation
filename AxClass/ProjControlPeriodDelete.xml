<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjControlPeriodDelete</Name>
  <SourceCode>
    <Declaration><![CDATA[
class ProjControlPeriodDelete extends ProjControlPeriod implements BatchRetryable
{
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>action</Name>
        <Source><![CDATA[
        protected void action()
    {
        ProjControlPeriodTable  projControlPeriodTable;
        int                     i;

        // We Should NOT call super.

        if (queryRun.changed(tablenum(ProjWIPTable)))
        {
            i++;
            projWIPTable  = queryRun.get(tablenum(ProjWIPTable));
            this.progressSet(i);
            // If they don't have the same periodcode..... Don't even think about creating...

            if (projWIPTable.PeriodId == this.parmProjPeriodId())
            {
                if (! this.validate())
                {
                    throw error("@SYS21628");
                }

                // Delete...
                while select forupdate projControlPeriodTable
                    where   projControlPeriodTable.ProjId       == projWIPTable.ProjId
                    &&      projControlPeriodTable.ControlId    == projWIPTable.ControlId
                    &&      projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Created
                    &&      projControlPeriodTable.PeriodFrom   == this.parmProjPeriodFrom()
                {
                    this.parmForecastModelId(projControlPeriodTable.ModelId);
                    this.parmProjWIPProjId(projWIPTable.ProjId);
                    this.parmBeginningBalance(projControlPeriodTable.BeginningBalance);

                    if (this.parmShowInfoLog())
                    {
                        info(strfmt("@SYS76171",projControlPeriodTable.ProjId,projControlPeriodTable.PeriodTo,projControlPeriodTable.Version));
                    }
                    if (this.parmDeleteForecast() && !this.isForecastModelStopped())
                    {
                        if (this.parmShowInfoLog())
                        {
                            info("@SYS73671");
                        }

                        this.deleteForecast();
                    }

                    this.clearWIPPeriod();

                    projControlPeriodTable.delete();
                }
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>canOutput</Name>
        <Source><![CDATA[
        boolean canOutput()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>dialog</Name>
        <Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        Dialog   d = Dialog::newFormnameRunbase(formstr(projControlPeriod_delete),this);

        return this.dialogInternal(d);
    }

]]></Source>
      </Method>
      <Method>
        <Name>description</Name>
        <Source><![CDATA[
        private static ClassDescription description()
    {
        return "@SYS73681";
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>