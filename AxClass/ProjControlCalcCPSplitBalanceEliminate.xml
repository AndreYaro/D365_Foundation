<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlCalcCPSplitBalanceEliminate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjControlCalcCPSplitBalanceEliminate extends ProjControlCalcCPSplitBalance
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>capital</Name>
				<Source><![CDATA[
    AmountMST capital(
        ProjCostType    _costType)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consum</Name>
				<Source><![CDATA[
    AmountMST consum(
        ProjCostType    _costType)
    {
        switch (_costType)
        {
            case ProjCostType::Hour:
                return projControlColumnAccEstimatePrev.ConsumHourConsum;
            case ProjCostType::Cost:
                return projControlColumnAccEstimatePrev.ConsumExpConsum;
            case ProjCostType::Item:
                return projControlColumnAccEstimatePrev.ConsumItemConsum;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eliminationAmountTurnover</Name>
				<Source><![CDATA[
    AmountMST eliminationAmountTurnover(ProjControlPeriodTable _projControlPeriod)
    {
        return -this.wipAccruedTurnover(_projControlPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generalHoursQty</Name>
				<Source><![CDATA[
    ProjQtyEmpl generalHoursQty(
        ProjControlPeriodTable  _controlPeriodTable,
        ProjEstimateColumn      _estimateColumn,
        ProjQty                 _qtyEstimate    = 0
        )
    {
        switch (_estimateColumn)
        {
            case ProjEstimateColumn::Estimate:
                return 0;
            case ProjEstimateColumn::Accumulated:
                return projControlColumnAccEstimatePrev.GeneralHoursQty;
            case ProjEstimateColumn::Total:
                return projControlPeriodTableColumnAccEstimate.GeneralHoursQty;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plAccRevAccOnAcc</Name>
				<Source><![CDATA[
    AmountMST plAccRevAccOnAcc(
        ProjControlPeriodTable  _projControlPeriodTable,
        ProjEstimateColumn      _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
            return projControlPeriodTableColumnAccEstimate.plAccRevAccOnAcc;
        }

        return projControlColumnAccEstimatePrev.plAccRevAccOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plAccRevProduction</Name>
				<Source><![CDATA[
    AmountMST plAccRevProduction(
        ProjControlPeriodTable _projControlPeriodTable,
        ProjEstimateColumn     _estimateColumn)
    {
        switch (_estimateColumn)
        {
            case ProjEstimateColumn::Accumulated:
                return projControlColumnTotalEstimatePrev.plAccRevProduction;
            case ProjEstimateColumn::Estimate:
                return 0;
            case ProjEstimateColumn::Total:
                return projControlPeriodTableColumnAccEstimate.plAccRevProduction;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plAccRevProfit</Name>
				<Source><![CDATA[
    AmountMST plAccRevProfit(
        ProjControlPeriodTable          _projControlPeriodTable,
        ProjEstimateColumn              _estimateColumn,
        ProjControlPeriodTableColumn    _projControlPeriodTableColumnAccEstimate = _projControlPeriodTableColumnAccEstimate)
    {
        switch (_estimateColumn)
        {
            case ProjEstimateColumn::Estimate:
                return 0;
            case ProjEstimateColumn::Accumulated:
                return projControlColumnTotalEstimatePrev.plAccRevProfit;
            case ProjEstimateColumn::Total:
                return projControlPeriodTableColumnAccEstimate.plAccRevProfit;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostAccCost</Name>
				<Source><![CDATA[
    AmountMST plCostAccCost(
        ProjControlPeriodTable  _projControlPeriodTable,
        ProjEstimateColumn      _estimateColumn,
        ProjControlPeriodTableColumn _projControlPeriodTableColumnAccEstimate = null)
    {
        if (_estimateColumn)
        {
            return projControlPeriodTableColumnAccEstimate.plCostAccCost;
        }

        return projControlColumnAccEstimatePrev.plCostAccCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostExpenses</Name>
				<Source><![CDATA[
    ProjExpenses plCostExpenses(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
            return projControlPeriodTableColumnAccEstimate.ConsumExpNotCapital;
        }

        return _projControlPeriodTableColumn.ConsumExpNotCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostHour</Name>
				<Source><![CDATA[
    AmountMST plCostHour(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
            return projControlPeriodTableColumnAccEstimate.plCostHour;
        }

        return _projControlPeriodTableColumn.ConsumHourNotCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostItem</Name>
				<Source><![CDATA[
    ProjItem plCostItem(
        ProjControlPeriodTableColumn  _projControlPeriodTableColumnEstimate,
        ProjEstimateColumn            _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
            return projControlPeriodTableColumnAccEstimate.ConsumItemNotCapital;
        }

        return _projControlPeriodTableColumnEstimate.ConsumItemNotCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plInvRevInvoiceOnAcc</Name>
				<Source><![CDATA[
    AmountMST plInvRevInvoiceOnAcc(
        ProjControlPeriodTable  _projControlPeriodTable,
        ProjEstimateColumn      _estimateColumn)
    {
        return projControlColumnAccEstimatePrev.plInvRevInvoiceOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeWIPOffsetProd</Name>
				<Source><![CDATA[
    public LedgerPostingType postingTypeWIPOffsetProd()
    {
        return LedgerPostingType::ProjWIPProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeWIPOffsetProfit</Name>
				<Source><![CDATA[
    public LedgerPostingType postingTypeWIPOffsetProfit()
    {
        return LedgerPostingType::ProjWIPProfit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipAccrTurnoverProdCreditLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount wipAccrTurnoverProdCreditLedgerDimension(ProjFundingSourceRefID _fundingSourceID, TaxGroup _taxGroup = '')
    {
        if(contractLineBasedRevRecFeature && isContractLineUsed)
        {
            return ProjPosting::getLedgerDimension(ProjAccountType::WIPProduction, ProjWIPTable::getProjIdForRevenuePosting(projId), categoryId, _fundingSourceId, true, true, _taxGroup);
        }
        return ProjPosting::getLedgerDimension(ProjAccountType::WIPProduction, projId, categoryId, _fundingSourceId, true, true, _taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipAccrTurnovrProfitCredtLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount wipAccrTurnovrProfitCredtLedgerDimension(ProjFundingSourceRefID _fundingSourceID, TaxGroup _taxGroup = '' )
    {
        if(contractLineBasedRevRecFeature && isContractLineUsed)
        {
            return ProjPosting::getLedgerDimension(ProjAccountType::WIPProfit, ProjWIPTable::getProjIdForRevenuePosting(projId), categoryId, _fundingSourceId, true, true, _taxGroup);
        }
        return ProjPosting::getLedgerDimension(ProjAccountType::WIPProfit, projId, categoryId, _fundingSourceId, true, true, _taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipAccruedTurnover</Name>
				<Source><![CDATA[
    protected AmountMST wipAccruedTurnover(ProjControlPeriodTable _projControlPeriod)
    {
        return -this.contractSum(_projControlPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipAccruedTurnoverDebit</Name>
				<Source><![CDATA[
    boolean wipAccruedTurnoverDebit(ProjControlPeriodTable _projControlPeriod)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipAccruedTurnoverProd</Name>
				<Source><![CDATA[
    protected AmountMST wipAccruedTurnoverProd(ProjControlPeriodTable _projControlPeriod)
    {
        return -(select sum(wipAccruedTurnoverProd) from projControlPeriodTable
                    where projControlPeriodTable.ProjId          == this.parmProjId()  &&
                          projControlPeriodTable.PeriodStatus    == ProjControlPeriodStatus::Posted).wipAccruedTurnoverProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipAccruedTurnoverProdDebit</Name>
				<Source><![CDATA[
    public boolean wipAccruedTurnoverProdDebit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipAccruedTurnoverProfit</Name>
				<Source><![CDATA[
    protected AmountMST wipAccruedTurnoverProfit(ProjControlPeriodTable _projControlPeriod)
    {
        return -(select sum(wipAccruedTurnoverProfit) from projControlPeriodTable
                    where projControlPeriodTable.ProjId          == this.parmProjId()  &&
                          projControlPeriodTable.PeriodStatus    == ProjControlPeriodStatus::Posted).wipAccruedTurnoverProfit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipAccruedTurnoverProfitDebit</Name>
				<Source><![CDATA[
    public boolean wipAccruedTurnoverProfitDebit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceAccruedCost</Name>
				<Source><![CDATA[
    ProjAccruedCost wipCostpriceAccruedCost(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)

    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return -_projControlPeriodTableColumn.plCostAccCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceExp</Name>
				<Source><![CDATA[
    ProjExpenses wipCostpriceExp(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.ConsumExpCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceHour</Name>
				<Source><![CDATA[
    ProjHour wipCostpriceHour(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)

    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.ConsumHourCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceItem</Name>
				<Source><![CDATA[
    ProjItem wipCostpriceItem(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.ConsumItemCapital;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostpriceTotal</Name>
				<Source><![CDATA[
    ProjTotalWIPCostPrice wipCostpriceTotal(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.wipCostpriceItem+
               _projControlPeriodTableColumn.wipCostpriceHour+
               _projControlPeriodTableColumn.wipCostpriceExp+
               _projControlPeriodTableColumn.wipCostpriceAccruedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipInvoiceOnAcc</Name>
				<Source><![CDATA[
    AmountMST wipInvoiceOnAcc(
        ProjControlPeriodTable  _projControlPeriodTable)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipSalespriceProduction</Name>
				<Source><![CDATA[
    ProjProduction wipSalespriceProduction(ProjControlPeriodTableColumn _projControlPeriodTableColumn, ProjEstimateColumn _estimateColumn)
    {
        ;
        switch (_estimateColumn)
        {
            case ProjEstimateColumn::Accumulated:
                return 0;

            case ProjEstimateColumn::Estimate:
                return 0 - projControlColumnAccEstimatePrev.wipSalespriceProduction;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipSalespriceProfit</Name>
				<Source><![CDATA[
    ProjProfit wipSalespriceProfit(ProjControlPeriodTableColumn _projControlPeriodTableColumn, ProjEstimateColumn _estimateColumn)
    {
        ;
        switch (_estimateColumn)
        {
            case ProjEstimateColumn::Accumulated:
                return 0;

            case ProjEstimateColumn::Estimate:
                return 0 - projControlColumnAccEstimatePrev.wipSalesPriceProfit;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipSalespriceTotal</Name>
				<Source><![CDATA[
    ProjTotalWIPSalesprice wipSalespriceTotal(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.wipSalesPriceSalesValue+
               _projControlPeriodTableColumn.wipSalesPriceProfit+
               _projControlPeriodTableColumn.wipSalespriceProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipTotalGrossWIP</Name>
				<Source><![CDATA[
    ProjGrossWIP wipTotalGrossWIP(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return  _projControlPeriodTableColumn.wipCostpriceTotal+
                _projControlPeriodTableColumn.wipSalespriceTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipTotalNetWIP</Name>
				<Source><![CDATA[
    projNetWIP wipTotalNetWIP(
        ProjControlPeriodTableColumn    _projControlPeriodTableColumn,
        ProjEstimateColumn              _estimateColumn)
    {
        if (_estimateColumn == ProjEstimateColumn::Accumulated)
        {
            return 0;
        }

        return _projControlPeriodTableColumn.wipTotalGrossWIP-
               _projControlPeriodTableColumn.wipInvoiceOnAcc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>