<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailB2BProspectENInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Retrieves the retail event notification information.
/// </summary>
internal abstract class RetailB2BProspectENInfo extends RetailENInfo
{
    // Email template placeholders
    private const str FirstName = 'firstname';
    private const str LastName = 'lastname';
    private const str Company = 'company';
    private const str CommentsDocuRefName = '@Retail:B2BProspectCommentsLabel';

    Map                     parameterMap;
    RefRecId                b2bProspectId;
    smmBusRelTable          b2bProspect;
    RetailChannelTable      channel;
    SysEmailMessageTable    emailMessage;
    SysEmailAddress         emailAddress;
    LanguageId              languageId;
    str                     companyName;
    Notes                   b2bProspectComments;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolveENProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the event notification profile Id.
    /// </summary>
    /// <param name="_refRecId">
    /// Reference for RecId.
    /// </param>
    /// <returns>
    /// EventNotificationProfileId for <c>RetailChannelTable</c> table.
    /// </returns>
    protected RetailEventNotificationProfileId resolveENProfileId(RefRecId _refRecId)
    {
        LogisticsElectronicAddress  electronicAddress;
        RetailSmmBusRelTable        b2bProspectDetails;

        b2bProspectId = _refRecId;
        b2bProspect = smmBusRelTable::findRec(_refRecId);
        b2bProspectDetails = RetailSmmBusRelTable::findBySmmBusRelTableRefRecId(_refRecId);
        companyName = b2bProspectDetails.CompanyName;
        channel = RetailChannelTable::findByRecId(b2bProspectDetails.RetailChannel);
        electronicAddress = DirParty::primaryElectronicAddress(b2bProspect.Party, LogisticsElectronicAddressMethodType::Email);
        emailAddress = electronicAddress ? electronicAddress.Locator : '';
        b2bProspectComments = this.getB2BProspectComments(b2bProspect.DataAreaId, b2bProspect.RecId);

        var channelProfileId = channel.EventNotificationProfileId;
        var channelNotificationProfile = RetailEventNotificationProfile::find(channelProfileId);
        if (!channelNotificationProfile)
        {
            // No email notification profile found for profile id %1. To use this config, set a valid email notification profile for channel (%2).
            info(strFmt("@Retail:InvalidRetailEventNotificationProfileIdForChannel", channelProfileId, channel.RecId));
        }

        return channelProfileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameterMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills map with the values for placeholders.
    /// </summary>
    protected void initParameterMap()
    {
        SysEmailId      emailId;
        SysEmailTable   emailTable;
        DirPersonName   person;

        emailId = this.getEmailId();
        languageId = CompanyInfo::languageId();
        parameterMap = new Map(Types::String,Types::String);

        if (b2bProspect)
        {
            if (!languageId)
            {
                eventSource.EventWriteEmailNotificationLanguageNotFound(b2bProspectId);
            }

            emailMessage = SysEmailMessageTable::find(emailId, languageId);

            if (!emailMessage)
            {
                // Message not found for this language.
                emailTable = SysEmailTable::find(emailId);
                languageId = emailTable.DefaultLanguage;
                emailMessage = SysEmailMessageTable::find(emailId, languageId);

                if (!emailMessage)
                {
                    eventSource.EventWriteEmailNotificationEmailMessageNotFound(b2bProspectId);
                }
            }

            person = DirPersonName::find(b2bProspect.Party);

            parameterMap.insert(FirstName, person.FirstName);
            parameterMap.insert(LastName, person.LastName);
            parameterMap.insert(Company, companyName);
        }
        else
        {
            eventSource.EventWriteEmailNotificationProspectNotFound(b2bProspectId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToAddr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns email recipient address.
    /// </summary>
    /// <returns>
    /// To address of SysEmailAddress type.
    /// </returns>
    protected SysEmailAddress getToAddr()
    {
        return emailAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns email subject with replaced placeholders.
    /// </summary>
    /// <returns>
    /// String with the subject.
    /// </returns>
    protected str getMessageSubject()
    {
        return SysEmailMessage::stringExpand(emailMessage.Subject, parameterMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns email body with replaced placeholders.
    /// </summary>
    /// <returns>
    /// String with the email body.
    /// </returns>
    protected str parseEmailTemplate()
    {
        if (!emailMessage)
        {
            throw error(strfmt("@SYS74260", languageId));
        }

        str emailTemplate = emailMessage.LayoutType == SysEmailLayoutType::DynamicLayout
            ? emailMessage.XSLTMail
            : emailMessage.Mail;

        return SysEmailMessage::stringExpand(emailTemplate, parameterMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getB2BProspectComments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extracts B2B request comments from prospect attachments.
    /// </summary>
    /// <param name = "_dataAreaId">DataAreaId of <c>smmBusRelTable</c>.</param>
    /// <param name = "_prospectRcId">RecId of <c>smmBusRelTable</c>.</param>
    /// <returns>Returns B2B comment.</returns>
    private Notes getB2BProspectComments(DataAreaId _dataAreaId, RefRecId _prospectRcId)
    {
        DocuRef docuRef;

        select firstonly docuRef
            where docuRef.RefCompanyId    == b2bProspect.DataAreaId
               && docuRef.ActualCompanyId == b2bProspect.DataAreaId
               && docuRef.RefRecId        == b2bProspect.RecId
               && docuRef.TypeId          == DocuType::typeNote()
               && docuRef.Name            == CommentsDocuRefName;

        return docuRef ? docuRef.Notes : '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>