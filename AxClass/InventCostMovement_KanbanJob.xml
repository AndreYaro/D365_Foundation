<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostMovement_KanbanJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>inventCostMovement_KanbanJob</c> class implements the estimated and actual cost lists for
///    <c>KanbanJob</c> based movements.
/// </summary>
public class InventCostMovement_KanbanJob extends InventCostMovement
{
    InventDim                      issueInventDim;
    InventItemPrice                issueInventItemPrice;
    InventCostTransCostList        issueStdCostList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initActCostListPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the actual cost list.
    /// </summary>
    /// <remarks>
    ///    Variances can only occur for physical updates of the receipt for transfers.
    /// </remarks>
    protected void initActCostListPhysical()
    {
        if (    (inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobTransferIssue
             ||  inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobTransferReceipt)
             && inventTrans.isReceipt())
        {
            // Act = Std Cost of Issue
            actCostList = InventCostTransCostList::newFromList(issueStdCostList, inventTrans.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventCostMovement</c> object.
    /// </summary>
    /// <param name="_costTransState">
    ///    An <c>InventCostTransState</c> enumeration value.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher number.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date.
    /// </param>
    /// <param name="_isReturn">
    ///    A Boolean value that specifies whether the movement is a return movement.
    /// </param>
    public void initCostMovement(
        InventCostTransState _costTransState,
        Voucher              _voucher,
        TransDate            _transDate,
        boolean              _isReturn)
    {
        super(_costTransState, _voucher, _transDate, _isReturn);

        // Check if issued inventDimId has been set
        if (issueInventDim)
        {
            this.initIssueInventItemPrice();
            this.initIssueStdCostList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEstCostListPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the estimated cost list.
    /// </summary>
    /// <remarks>
    ///    Variances can only occur for physical updates of the receipt for transfers.
    /// </remarks>
    protected void initEstCostListPhysical()
    {
        if (    (inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobTransferIssue
             ||  inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobTransferReceipt)
             && inventTrans.isReceipt())
        {
            // Est = current Std Cost
            estCostList = InventCostTransCostList::newFromList(stdCostList, inventTrans.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIssueInventItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventItemPrice</c> record that holds the price for the issue side of the
    ///    transfer.
    /// </summary>
    protected void initIssueInventItemPrice()
    {
        issueInventItemPrice = InventItemPrice::stdCostFindDate(inventTable,
                                                                transDate,
                                                                '',
                                                                issueInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIssueStdCostList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventCostTransCostList</c> object for the issue side of the transfer.
    /// </summary>
    protected void initIssueStdCostList()
    {
        issueStdCostList = InventCostTransCostList::newStdCostList(issueInventItemPrice.RecId,
                                                                   this.varianceType(),
                                                                   dimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(InventMovement _inventMovement)
    {
        super(_inventMovement);

        // Set the issue inventory dimension
        if (_inventMovement.isTransfer())
        {
            issueInventDim = _inventMovement.transferIssueCostPriceInventDim();

            if (!issueInventDim)
            {
                throw error("@SCM:InventMovementIssueMissingInventDim");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventCostMovement_KanbanJob construct(InventMovement _inventMovement)
    {
        return new InventCostMovement_KanbanJob(_inventMovement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>