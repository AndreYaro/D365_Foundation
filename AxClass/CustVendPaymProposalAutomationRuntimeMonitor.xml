<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalAutomationRuntimeMonitor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendPaymProposalAutomationRuntimeMonitor</c> class handles monitoring running payment proposal automations and logging
/// success or failure messages based on the running status of the automation.
/// </summary>
internal final class CustVendPaymProposalAutomationRuntimeMonitor extends SysOperationServiceController
{
    private CustVendPaymProposalAutomationRuntimeMonitorContract contract;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    private CustVendPaymProposalAutomationRuntimeMonitorContract getContract()
    {
        return this.getDataContractObject(classStr(CustVendPaymProposalAutomationRuntimeMonitorContract)) as CustVendPaymProposalAutomationRuntimeMonitorContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@CashManagement:CustVendPaymProposalRuntimeMonitorCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMonitor</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void runMonitor(CustVendPaymProposalAutomationRuntimeMonitorContract _contract)
    {
        contract = _contract;

        if (contract.validate())
        {
            if (contract.parmIsFinalRuntimeMonitor())
            {
                this.validateFinalState();
            }
            else
            {
                this.validateCurrentState();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrentState</Name>
				<Source><![CDATA[
    private void validateCurrentState()
    {
        Batch batch;

        select count(RecId) from batch
            where batch.BatchJobId == contract.parmBatchJobId()
                && (batch.Status == BatchStatus::Canceled
                    || batch.Status == BatchStatus::Cancelling
                    || batch.Status == BatchStatus::Error);
        
        boolean isValid = batch.RecId == 0;

        if (!isValid)
        {
            this.logError();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinalState</Name>
				<Source><![CDATA[
    internal void validateFinalState()
    {
        Batch batch;

        select count(RecId) from batch
            where batch.BatchJobId == contract.parmBatchJobId()
                && batch.Status != BatchStatus::Finished
                && batch.RecId != BatchHeader::getCurrentBatchTask().RecId;

        boolean isValid = batch.RecId == 0;

        if (isValid)
        {
            if (this.journalIsRemoved())
            {
                this.logFinalJournalRemoved();
            }
            else
            {
                this.logFinalSuccess();
            }
        }
        else
        {
            this.logError();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logFinalSuccess</Name>
				<Source><![CDATA[
    private void logFinalSuccess()
    {
        ttsbegin;

        this.updateSourceLink(ProcessExecutionSourceStatus::Success, contract.parmSuccessMessage());

        this.insertMessageLog(Exception::Info, contract.parmSuccessMessage());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logFinalJournalRemoved</Name>
				<Source><![CDATA[
    private void logFinalJournalRemoved()
    {
        ttsbegin;

        this.updateSourceLink(ProcessExecutionSourceStatus::Warning, "@CashManagement:CustVendPaymProposalAvoidEmptyJournalWarning");

        this.insertMessageLog(Exception::Warning, "@CashManagement:CustVendPaymProposalAvoidEmptyJournalWarning");
        this.insertMessageLog(Exception::Info, contract.parmSuccessMessage());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    private void logError()
    {
        ttsbegin;

        this.updateSourceLink(ProcessExecutionSourceStatus::Error, contract.parmFailureMessage());

        this.insertMessageLog(Exception::Error, contract.parmFailureMessage());

        ttscommit;

        throw error(contract.parmFailureMessage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLink</Name>
				<Source><![CDATA[
    private void updateSourceLink(ProcessExecutionSourceStatus _status, ProcessExecutionMessage _message)
    {
        ProcessExecutionSourceLink sourceLink;

        select forupdate firstonly sourceLink
            where sourceLink.RecId == contract.parmProcessExecutionSourceLinkRecId();

        sourceLink.Message = _message;
        sourceLink.Status = _status;

        sourceLink.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMessageLog</Name>
				<Source><![CDATA[
    private void insertMessageLog(Exception _level, ProcessExecutionMessage _message)
    {
        ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
        messageLogItem.parmProcessExecutionSourceLink(contract.parmProcessExecutionSourceLinkRecId());
        messageLogItem.parmException(_level);
        messageLogItem.parmMessage(_message);

        ProcessExecutionMessageLog::insertMessage(messageLogItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalIsRemoved</Name>
				<Source><![CDATA[
    private boolean journalIsRemoved()
    {
        LedgerJournalTable ledgerJournalTable;
        select firstonly RecId from ledgerJournalTable
            where ledgerJournalTable.JournalNum == contract.parmJournalNum();
        return ledgerJournalTable.RecId == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>