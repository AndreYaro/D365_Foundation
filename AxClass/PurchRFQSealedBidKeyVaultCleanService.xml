<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedBidKeyVaultCleanService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PurchRFQSealedBidKeyVaultCleanService</c> class provides functionality to reset sealed bidding checkbox with clearing all related sealed records.
/// </summary>
internal final class PurchRFQSealedBidKeyVaultCleanService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processOperation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void processOperation()
    {
        this.cancelSealedRequestForQuotations();
        PurchRFQSealedBidManager::resetSealedBidKeyVault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelSealedRequestForQuotations</Name>
				<Source><![CDATA[
    private void cancelSealedRequestForQuotations()
    {
        PurchRFQCaseTable purchRFQCaseTable;
        PurchRFQTable rfqTable;
        PurchRFQReplyTable rfqReplyTable;
        PurchRFQSealedBidKeyVaultCertificateTableRelation sealedBidKeyVaultCertificateTableRelation;
        KeyVaultCertificateTable keyVaultCertificate;
        KeyVaultParameters keyVaultParameters;

        while select * from purchRFQCaseTable
            where purchRFQCaseTable.BidType == PurchRFQBidType::Sealed
            exists join rfqTable
                where purchRFQCaseTable.RFQCaseId == rfqTable.RFQCaseId
            exists join rfqReplyTable
                where rfqReplyTable.RFQId == rfqTable.RFQId
            exists join sealedBidKeyVaultCertificateTableRelation
                where sealedBidKeyVaultCertificateTableRelation.PurchRFQReplyTable == rfqReplyTable.RecId
            exists join keyVaultCertificate
                where keyVaultCertificate.RecId == sealedBidKeyVaultCertificateTableRelation.KeyVaultCertificateTable
            exists join keyVaultParameters
                where keyVaultParameters.RecId == keyVaultCertificate.KeyVaultRef
                    && keyVaultParameters.EnabledForSealedBidding == NoYes::Yes
        {
            PurchRFQCaseAmendment::cancelRequestForQuotation(purchRFQCaseTable, '@SCM:PurchRFQSealedBidKeyVaultCleanReasonForCancellation');
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>