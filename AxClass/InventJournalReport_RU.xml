<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventJournalReport_RU implements SysPackable, InventJournalReportInterface_RU
{
    Set                          supportedJournalTypes;
    InventJournalReportTable_RU  inventJournalReportTable;
    Name                         description;
    OffSessionId_RU              offSessionId;
    RefRecId                     analysisCode;
    JournalId                    journalId;
    boolean                      showPrintSettings;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        journalId,
        offSessionId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createExcelReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use this method to initialize new instance of XML Excel report
    /// </summary>
    /// <returns>
    /// New instance of report, type of report corresponds with type of descendant
    /// </returns>
    /// <remarks>
    /// cannot be made abstract, since not all descendants use excel for output
    /// </remarks>
    protected XMLExcelReport_RU createExcelReport()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns decription of report being printed
    /// </summary>
    /// <returns>
    /// Decription of report being printed
    /// </returns>
    /// <remarks>
    /// Name of report as specified in report type enume
    /// </remarks>
    public Name description()
    {
        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs current report to excel or something else
    /// </summary>
    /// <param name="_reportTable">
    /// header of a report which should be printed
    /// </param>
    public void doPrint(InventJournalReportTable_RU _reportTable)
    {
        if (this.isExcelReport())
        {
            this.print2Excel(_reportTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enabled</Name>
				<Source><![CDATA[
    public boolean enabled(InventJournalTable _inventJournalTable)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffSessionId</Name>
				<Source><![CDATA[
    public OffSessionId_RU getOffSessionId()
    {
        return offSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransError</Name>
				<Source><![CDATA[
    protected boolean hasTransError(JournalTransList _journalTransList)
    {
        return _journalTransList.journalTableData().journalErrorTransList().find(_journalTransList.item().LineNum) ||
               _journalTransList.journalTableData().journalErrorVoucherList().find(_journalTransList.item().Voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficialsDefault</Name>
				<Source><![CDATA[
    public void initOfficialsDefault(OffSessionId_RU _offSessionId)
    {
        OfficialsServ_RU    officialsServ = new OfficialsServ_RU();
        OfficialsTrans_RU   officialTrans;

        select count(RecId) from officialTrans
            where officialTrans.OffSessionId == _offSessionId &&
                  officialTrans.ReportType   == InventJournalReport_RU::inventJournalReportType2OffReportType(this.reportType());

        if ( ! officialTrans.RecId)
        {
            officialsServ.initTableInvent(this.reportType(), _offSessionId);
        }

        offSessionId = _offSessionId ? _offSessionId : officialsServ.newId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportData</Name>
				<Source><![CDATA[
    protected abstract XmlDocument initReportData(InventJournalReportTable_RU _reportTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReport</Name>
				<Source><![CDATA[
    protected void insertReport(Map _dateCostMap)
    {
        MapIterator         it = new MapIterator(_dateCostMap);

        while (it.more())
        {
            inventJournalReportTable.JournalId                     = journalId;
            inventJournalReportTable.OffSessionId                  = offSessionId;
            inventJournalReportTable.TransDate                     = it.key();
            inventJournalReportTable.TotalAmount                   = it.value();
            inventJournalReportTable.ReportTypeInvent              = this.reportType();
            inventJournalReportTable.AnalysisDimensionAttribute    = analysisCode;

            NumberSeq reportCodeSeq = NumberSeq::newGetNum(this.numberSequenceReference());
            inventJournalReportTable.ReportId = reportCodeSeq.num();

            inventJournalReportTable.insert();
            it.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExcelReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method determines whether current report is an excel report
    /// </summary>
    /// <returns>
    /// Whether current report is an excel report
    /// </returns>
    protected boolean isExcelReport()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalTypeSupported</Name>
				<Source><![CDATA[
    public boolean isJournalTypeSupported(InventJournalType _journalType)
    {
        return supportedJournalTypes.in(_journalType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalId</Name>
				<Source><![CDATA[
    public JournalId journalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItem</Name>
				<Source><![CDATA[
    abstract public str menuItem()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItem_Posted</Name>
				<Source><![CDATA[
    abstract public str menuItem_Posted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        supportedJournalTypes = new Set(Types::Enum);
        description           = enum2str(this.reportType());
        analysisCode          = InventParameters::find().AnalysisDimensionAttribute_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReference</Name>
				<Source><![CDATA[
    abstract protected NumberSequenceReference numberSequenceReference()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPrintSettings</Name>
				<Source><![CDATA[
    public boolean parmShowPrintSettings(boolean _showPrintSettings = showPrintSettings)
    {
        showPrintSettings = _showPrintSettings;
        return showPrintSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>print2Excel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs current report to excel
    /// </summary>
    /// <param name="_reportTable">
    /// header of a report which should be printed
    /// </param>
    protected void print2Excel(InventJournalReportTable_RU _reportTable)
    {
        Args                        args = new Args();
        SRSPrintDestinationSettings printSettings;

        XMLExcelReport_RU excelReport = this.createExcelReport();
        args.parm(this.initReportData(_reportTable).xml());
        excelReport.parmArgs(args);

        if (showPrintSettings)
        {
            container packedPrintSettings = classfactory.lastValueGet(curext(), curUserId(), UtilElementType::Class, classId2Name(classIdGet(this)), classStr(SRSPrintDestinationSettings));
            printSettings = new SRSPrintDestinationSettings(packedPrintSettings);
        }

        if (excelReport.init() &&
            (!showPrintSettings || SrsReportRunUtil::showSettingsDialog(printSettings)))
        {
            if (excelReport.isPdfConversionEnabled(printSettings))
            {
                excelReport.parmPrintDestinationSettings(printSettings);
            }

            excelReport.runOperation();
            if (showPrintSettings)
            {
                classfactory.lastValuePut(printSettings.pack(), curext(), curUserId(), UtilElementType::Class, classId2Name(classIdGet(this)), classStr(SRSPrintDestinationSettings));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportType</Name>
				<Source><![CDATA[
    public abstract InventJournalReportType_RU reportType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveReport</Name>
				<Source><![CDATA[
    public abstract void saveReport(JournalTransList _journalTransList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int         version     = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReportList</Name>
				<Source><![CDATA[
    public static List buildReportList(JournalNameId _journalNameId)
    {
        InventJournalReportParms_RU reportParms;
        List                        lst = new List(Types::Class);

        while select ReportType from reportParms
            where reportParms.InventJournalNameId == _journalNameId
        {
            lst.addEnd(InventJournalReport_RU::construct(reportParms.ReportType));
        }
        return lst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventJournalReport_RU construct(InventJournalReportType_RU _reportType)
    {
        switch (_reportType)
        {
            case InventJournalReportType_RU::Loss      :
                return new InventJournalReport_Loss_RU();

            case InventJournalReportType_RU::BOMReq    :
                return new InventJournalReport_BomReq_RU();

            case InventJournalReportType_RU::CountColl :
                return new InventJournalReport_CountColl_RU();

            case InventJournalReportType_RU::Transfer  :
                return new InventJournalReport_Transfer_RU();

            case InventJournalReportType_RU::CountingList :
                return new InventJournalReport_CountingList_RU();

            case InventJournalReportType_RU::CountingListInTransit :
                return new InventJournalReport_CntLstInTransit_RU();

            case InventJournalReportType_RU::CountingListBailee :
                return new InventJournalReport_CountListBailee_RU();

            default:
                return InventJournalReport_RU::constructExt(_reportType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalReportType2OffReportType</Name>
				<Source><![CDATA[
    public static OffReportType_RU inventJournalReportType2OffReportType(InventJournalReportType_RU _reportType)
    {
        switch (_reportType)
        {
            case InventJournalReportType_RU::BOMReq    :
                return OffReportType_RU::InventM11;

            case InventJournalReportType_RU::CountColl :
                return OffReportType_RU::InventINV19;

            case InventJournalReportType_RU::Loss      :
                return OffReportType_RU::InventTORG16;

            case InventJournalReportType_RU::Transfer  :
                return OffReportType_RU::InventTORG13;

            case InventJournalReportType_RU::CountingList:
                return OffReportType_RU::InventINV3;

            case InventJournalReportType_RU::CountingListInTransit:
                return OffReportType_RU::InventINV6;

            case InventJournalReportType_RU::CountingListBailee:
                return OffReportType_RU::InventINV5;

            default :
                return InventJournalReport_RU::inventJournalReportType2OffReportTypeExt(_reportType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventJournalReportTable_RU reportTable;

        if (! _args.record() ||
            _args.dataset() != tableNum(InventJournalTable))
            throw error(Error::missingRecord(funcName()));

        if (_args.parmEnumType() != enumNum(InventJournalReportType_RU))
            throw error(Error::wrongUseOfFunction(funcName()));

        while select reportTable
            where reportTable.JournalId        == _args.record().(fieldNum(InventJournalTable, JournalId)) &&
                  reportTable.ReportTypeInvent == _args.parmEnum()
        {
            InventJournalReport_RU::printReport(reportTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints inventory journal report.
    /// </summary>
    /// <param name="_reportTable">
    /// The <c>InventJournalReportTable_RU</c> record.
    /// </param>
    /// <param name="_showPrintSettings">
    /// Show printer settings dialog sign; optional.
    /// </param>
    public static void printReport(InventJournalReportTable_RU _reportTable, boolean _showPrintSettings = true)
    {
        if (_reportTable)
        {
            InventJournalReport_RU report = InventJournalReport_RU::construct(_reportTable.ReportTypeInvent);
            report.parmShowPrintSettings(_showPrintSettings);
            report.doPrint(_reportTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends construct method to support user extensions.
    /// </summary>
    /// <param name = "_reportType">The type of inventory journal report.</param>
    /// <exception>
    /// Inventory journal report type is not found.
    /// </exception>
    [Replaceable]
    protected static InventJournalReport_RU constructExt(InventJournalReportType_RU _reportType)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalReportType2OffReportTypeExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends inventJournalReportType2OffReportType method to support user extensions.
    /// </summary>
    /// <param name = "_reportType">The type of inventory journal report.</param>
    /// <exception>
    /// Inventory journal report type is not found.
    /// </exception>
    [Replaceable]
    protected static OffReportType_RU inventJournalReportType2OffReportTypeExt(InventJournalReportType_RU _reportType)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>