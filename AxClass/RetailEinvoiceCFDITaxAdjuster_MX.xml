<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEinvoiceCFDITaxAdjuster_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEinvoiceCFDITaxAdjuster_MX</c> class administers adjustment of tax lines for CFDI Global.
/// </summary>
internal final class RetailEinvoiceCFDITaxAdjuster_MX
{
    private Amount adjustmentStep;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountStep</Name>
				<Source><![CDATA[
    private static Amount amountStep(CurrencyCode _currencyCode)
    {
        Amount amountStep = Currency::find(_currencyCode).RoundingPrecision;

        amountStep = amountStep ? amountStep : 0.01;

        return amountStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineTaxBaseAmountAdjustmentRequired</Name>
				<Source><![CDATA[
    private boolean isLineTaxBaseAmountAdjustmentRequired(TaxAmount _taxAmount, TaxAmount _minValue, TaxAmount _maxValue)
    {
        return _taxAmount < _minValue || _taxAmount > _maxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTaxBaseAdjustmentStep</Name>
				<Source><![CDATA[
    private TaxAmount lineTaxBaseAdjustmentStep(TaxAmount _calculatedTaxAmount, TaxAmount _lineTaxAmount, TaxAmount _adjustmentStep)
    {
        TaxAmount adjustment;

        if (_calculatedTaxAmount > _lineTaxAmount)
        {
            adjustment = -_adjustmentStep;
        }
        else if (_calculatedTaxAmount < _lineTaxAmount)
        {
            adjustment = _adjustmentStep;
        }
        return adjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAuxData</Name>
				<Source><![CDATA[
    private container calculateAuxData(TmpEInvoiceTaxTrans_MX _taxTrans)
    {
        TaxAmount sourceTaxAmountCurMin = _taxTrans.SourceTaxAmountCur;
        TaxAmount sourceTaxAmountCurMax = _taxTrans.SourceTaxAmountCur;

        TaxAmount taxCalculatedFromBase = _taxTrans.taxAmountCalculated();
        if (taxCalculatedFromBase > _taxTrans.SourceTaxAmountCur)
        {
            sourceTaxAmountCurMax = _taxTrans.SourceTaxAmountCur + adjustmentStep;
        }
        else if (taxCalculatedFromBase < _taxTrans.SourceTaxAmountCur)
        {
            sourceTaxAmountCurMin = _taxTrans.SourceTaxAmountCur - adjustmentStep;
        }

        return [taxCalculatedFromBase, 
                sourceTaxAmountCurMin, 
                sourceTaxAmountCurMax];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRoomForChange</Name>
				<Source><![CDATA[
    private container calculateRoomForChange(TmpEInvoiceTaxTrans_MX _taxTrans, TaxAmount _sourceTaxAmountCurMin, TaxAmount _sourceTaxAmountCurMax)
    {
        Amount taxBaseAmountRoomDecrease = _sourceTaxAmountCurMin / _taxTrans.TaxValue * 100 - _taxTrans.SourceBaseAmountCur;
        Amount taxBaseAmountRoomIncrease = _sourceTaxAmountCurMax / _taxTrans.TaxValue * 100 - _taxTrans.SourceBaseAmountCur;
        
        return [roundUp(taxBaseAmountRoomDecrease, adjustmentStep),
                roundDown(taxBaseAmountRoomIncrease, adjustmentStep)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLineTaxBaseAmount</Name>
				<Source><![CDATA[
    private void adjustLineTaxBaseAmount(TmpEInvoiceTaxTrans_MX _taxTrans, TaxAmount _taxCalculatedFromBase, TaxAmount _minValue, TaxAmount _maxValue)
    {
        while (this.isLineTaxBaseAmountAdjustmentRequired(_taxTrans.taxAmountCalculated(), _minValue, _maxValue))
        {
            _taxTrans.Adjustment += this.lineTaxBaseAdjustmentStep(_taxCalculatedFromBase, _taxTrans.SourceTaxAmountCur, adjustmentStep);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLinesTaxBaseAmount</Name>
				<Source><![CDATA[
    private container adjustLinesTaxBaseAmount(TmpEInvoiceTaxTrans_MX _taxTrans)
    {
        Amount totalAdjustment;
        Amount totalBaseAmountRoomDecrease;
        Amount totalBaseAmountRoomIncrease;

        while select forupdate _taxTrans
            where _taxTrans.TaxValue
        {
            TaxAmount taxCalculatedFromBase;
            TaxAmount sourceTaxAmountCurMin;
            TaxAmount sourceTaxAmountCurMax;

            [taxCalculatedFromBase,
            sourceTaxAmountCurMin,
            sourceTaxAmountCurMax] = this.calculateAuxData(_taxTrans);

            this.adjustLineTaxBaseAmount(_taxTrans, taxCalculatedFromBase, sourceTaxAmountCurMin, sourceTaxAmountCurMax);

            if (_taxTrans.Adjustment)
            {
                totalAdjustment += _taxTrans.Adjustment;
                _taxTrans.update();
            }
            else 
            {
                [_taxTrans.TaxBaseAmountRoomDecrease,
                 _taxTrans.TaxBaseAmountRoomIncrease] = this.calculateRoomForChange(_taxTrans, sourceTaxAmountCurMin, sourceTaxAmountCurMax);
                
                if (_taxTrans.TaxBaseAmountRoomDecrease || _taxTrans.TaxBaseAmountRoomIncrease)
                {
                    totalBaseAmountRoomDecrease += _taxTrans.TaxBaseAmountRoomDecrease;
                    totalBaseAmountRoomIncrease += _taxTrans.TaxBaseAmountRoomIncrease;
                    _taxTrans.update();
                }
            }
        }

        return [totalAdjustment, totalBaseAmountRoomDecrease, totalBaseAmountRoomIncrease];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryForTotalAdjustment</Name>
				<Source><![CDATA[
    private void createQueryForTotalAdjustment(TmpEInvoiceTaxTrans_MX _taxTrans, Amount _signedStep)
    {
        if (_signedStep > 0)
        {
            select nofetch forupdate _taxTrans
                order by _taxTrans.TaxBaseAmountRoomIncrease desc
                where _taxTrans.TaxBaseAmountRoomIncrease >= _signedStep;
        }
        else
        {
            select nofetch forupdate _taxTrans
                order by _taxTrans.TaxBaseAmountRoomIncrease desc //realy we need TaxBaseAmountRoomDecrease asc, but they are opposite direction
                where _taxTrans.TaxBaseAmountRoomDecrease <= _signedStep;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEligibleForTotalAdjustment</Name>
				<Source><![CDATA[
    private boolean isEligibleForTotalAdjustment(TmpEInvoiceTaxTrans_MX _taxTrans)
    {
        return (_taxTrans.AdjustmentTotal > 0 && _taxTrans.TaxBaseAmountRoomIncrease >= _taxTrans.AdjustmentTotal) ||
               (_taxTrans.AdjustmentTotal < 0 && _taxTrans.TaxBaseAmountRoomDecrease <= _taxTrans.AdjustmentTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTaxBaseAmountTotal</Name>
				<Source><![CDATA[
    private Amount adjustTaxBaseAmountTotal(TmpEInvoiceTaxTrans_MX _taxTrans, Amount _totalLineAdjustment)
    {
        Amount totalAdjustment = _totalLineAdjustment;
        Amount signedStep = totalAdjustment > 0 ? -adjustmentStep : adjustmentStep;

        Amount previousTotalAdjustment;

        this.createQueryForTotalAdjustment(_taxTrans, signedStep);
        next _taxTrans;

        while (totalAdjustment && _taxTrans)
        {
            boolean startNextPass;
            _taxTrans.AdjustmentTotal += signedStep;
            if (this.isEligibleForTotalAdjustment(_taxTrans))
            {
                _taxTrans.update();
                totalAdjustment += signedStep;

                next _taxTrans;

                if (totalAdjustment && !_taxTrans)
                {
                    startNextPass = true;
                }
            }
            else
            {
                //it means that all next records in select have no room for changing
                //we should try to restart or finish
                startNextPass = true;
            }

            //in case processed all records but we have amount to distribute and in the last run there were distributions we try one more run
            if (startNextPass)
            {
                if (previousTotalAdjustment == totalAdjustment)
                {
                    break;
                }
                previousTotalAdjustment = totalAdjustment;
                this.createQueryForTotalAdjustment(_taxTrans, signedStep);
                next _taxTrans;
            }
        }
        return totalAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalLineAdjustmentCanBeDistributed</Name>
				<Source><![CDATA[
    private boolean totalLineAdjustmentCanBeDistributed(Amount _totalLineAdjustment, Amount _totalBaseAmountRoomDecrease, Amount _totalBaseAmountRoomIncrease)
    {
        return (_totalLineAdjustment > 0 && -_totalLineAdjustment > _totalBaseAmountRoomDecrease) || 
            (_totalLineAdjustment < 0 && -_totalLineAdjustment < _totalBaseAmountRoomIncrease);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAdjust</Name>
				<Source><![CDATA[
    private void doAdjust(TmpEInvoiceTaxTrans_MX _taxTrans)
    {
        Amount totalLineAdjustment, totalBaseAmountRoomDecrease, totalBaseAmountRoomIncrease;
        [totalLineAdjustment, totalBaseAmountRoomDecrease, totalBaseAmountRoomIncrease] = this.adjustLinesTaxBaseAmount(_taxTrans);

        if (this.totalLineAdjustmentCanBeDistributed(totalLineAdjustment, totalBaseAmountRoomDecrease, totalBaseAmountRoomIncrease))
        {
            if (this.adjustTaxBaseAmountTotal(_taxTrans, totalLineAdjustment))
            {
                //rollback all adjustments if total tax base amount is changed
                update_recordset _taxTrans
                    setting Adjustment = 0, AdjustmentTotal = 0;
            }
        }
        else if (totalLineAdjustment)
        {
            update_recordset _taxTrans
                setting Adjustment = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs adjustment of rounded tax base amount for given tax transaction.
    /// </summary>
    /// <param name = "_taxTrans">The tax transactions for adjust.</param>
    /// <param name = "_currencyCode">The tax transactions currency code.</param>
    public static void adjust(TmpEInvoiceTaxTrans_MX _taxTrans, CurrencyCode _currencyCode)
    {
        RetailEinvoiceCFDITaxAdjuster_MX adjuster = new RetailEinvoiceCFDITaxAdjuster_MX();
        adjuster.adjustmentStep = RetailEinvoiceCFDITaxAdjuster_MX::amountStep(_currencyCode);
        adjuster.doAdjust(_taxTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>