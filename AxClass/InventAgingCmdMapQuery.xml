<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAgingCmdMapQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventAgingCmdMapQuery</c> class is a command that maps data from a row in a <c>QueryRun</c> object.
/// </summary>
class InventAgingCmdMapQuery implements InventAgingICommand
{
    QueryRun                            queryRun;
    InventItemGroupItem                 inventItemGroupItem;
    InventTable                         inventTable;
    boolean                             updateInventDimParmFinancial;
    InventDim                           inventDim, inventDimFinancial;
    EcoResProductDimensionGroupProduct  productDimensionGroupProduct;
    EcoResStorageDimensionGroupItem     storageDimensionGroupItem;
    EcoResTrackingDimensionGroupItem    trackingDimensionGroupItem;
    InventDimParm                       inventDimParmFinancial;
    EcoResProductTranslation            productTranslation;
    InventTableModule                   inventTableModule;
    InventAgingReceiptView              inventAgingReceiptView;
    InventValueReportView               inventValueReportView;
    InventAgingValueReportView          inventAgingValueReportView;
    InventAgingQtyReportView            inventAgingQtyReportView;
    boolean                             fetchItemGroupId, fetchItemName, fetchUnit, fetchDimension,
                                        fetchProductDimensionGroup, fetchStorageDimensionGroup, fetchTrackingDimensionGroup,
                                        fetchInventValueReportView, fetchInventAgingReceiptView, fetchInventAgingQtyReportView,
                                        fetchInventAgingValueReportView;

    boolean isWarehouseInventoryTransactionStackEnabled = WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();
    boolean isReleaseMemoryFlightEnabled = InventCostRemoveCursorCopyToReleaseMemoryFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>QueryRun</c> object.
    /// </summary>
    /// <remarks>
    /// To provide financial dimensions the
    /// </remarks>
    public void execute()
    {
        boolean updateFinancialDimensions = false;

        if (fetchItemGroupId && queryRun.changed(tableNum(InventItemGroupItem)))
        {
            if (isReleaseMemoryFlightEnabled)
            {
                inventItemGroupItem = null;
            }
            inventItemGroupItem.data(queryRun.get(tableNum(InventItemGroupItem)));
        }
        if (queryRun.changed(tableNum(InventTable)))
        {
            if (isReleaseMemoryFlightEnabled)
            {
                inventTable = null;
            }
            inventTable.data(queryRun.get(tableNum(InventTable)));
        }
        if (fetchItemName && queryRun.changed(tableNum(EcoResProductTranslation)))
        {
            productTranslation = queryRun.get(tableNum(EcoResProductTranslation));
        }
        if (fetchUnit && queryRun.changed(tableNum(InventTableModule)))
        {
            inventTableModule = queryRun.get(tableNum(InventTableModule));
        }
        if (fetchProductDimensionGroup && queryRun.changed(tableNum(EcoResProductDimensionGroupProduct)))
        {
            productDimensionGroupProduct = queryRun.get(tableNum(EcoResProductDimensionGroupProduct));
            updateInventDimParmFinancial = true;
        }
        if (fetchStorageDimensionGroup && queryRun.changed(tableNum(EcoResStorageDimensionGroupItem)))
        {
            storageDimensionGroupItem = queryRun.get(tableNum(EcoResStorageDimensionGroupItem));
            updateInventDimParmFinancial = true;
        }
        if (fetchTrackingDimensionGroup && queryRun.changed(tableNum(EcoResTrackingDimensionGroupItem)))
        {
            trackingDimensionGroupItem = queryRun.get(tableNum(EcoResTrackingDimensionGroupItem));
            updateInventDimParmFinancial = true;
        }

        if (updateInventDimParmFinancial)
        {
            InventDimGroupSetup::newDimensionGroups(productDimensionGroupProduct.ProductDimensionGroup,
                                                    storageDimensionGroupItem.StorageDimensionGroup,
                                                    trackingDimensionGroupItem.TrackingDimensionGroup).inventDimParmActiveFinancialInventory(inventDimParmFinancial);
            updateInventDimParmFinancial = false;
            updateFinancialDimensions = true;
        }

        if (fetchDimension && (updateFinancialDimensions || queryRun.changed(tableNum(InventDim))))
        {
            if (isReleaseMemoryFlightEnabled)
            {
                inventDim = null;
                inventDimFinancial = null;
            }
            inventDim.data(queryRun.get(tableNum(InventDim)));
            inventDimFinancial.data(inventDim);
            inventDimFinancial.clearNotSelectedDim(inventDimParmFinancial);
        }

        if (fetchInventValueReportView && queryRun.changed(tableNum(InventValueReportView)))
        {
            inventValueReportView  = queryRun.get(tableNum(InventValueReportView));
        }

        if (fetchInventAgingValueReportView && queryRun.changed(tableNum(InventAgingValueReportView)))
        {
            inventAgingValueReportView  = queryRun.get(tableNum(InventAgingValueReportView));
            inventAgingValueReportView.copyInventoryDimensionsTo(inventDim);
            if (isReleaseMemoryFlightEnabled)
            {
                inventDimFinancial = null;
            }
            inventDimFinancial.data(inventDim);
            inventDimFinancial.clearNotSelectedDim(inventDimParmFinancial);
        }

        if (fetchInventAgingReceiptView && queryRun.changed(tableNum(InventAgingReceiptView)))
        {
            inventAgingReceiptView  = queryRun.get(tableNum(InventAgingReceiptView));

            if (isWarehouseInventoryTransactionStackEnabled)
            {
                inventAgingReceiptView.copyInventoryDimensionsTo(inventDim);
                if (isReleaseMemoryFlightEnabled)
                {
                    inventDimFinancial = null;
                }
                inventDimFinancial.data(inventDim);
                inventDimFinancial.clearNotSelectedDim(inventDimParmFinancial);
            }
        }

        if (fetchInventAgingQtyReportView && queryRun.changed(tableNum(InventAgingQtyReportView)))
        {
            inventAgingQtyReportView  = queryRun.get(tableNum(InventAgingQtyReportView));

            if (isWarehouseInventoryTransactionStackEnabled)
            {
                inventAgingQtyReportView.copyInventoryDimensionsTo(inventDim);
                if (isReleaseMemoryFlightEnabled)
                {
                    inventDimFinancial = null;
                }
                inventDimFinancial.data(inventDim);
                inventDimFinancial.clearNotSelectedDim(inventDimParmFinancial);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventAgingCmdMapQuery</c> class.
    /// </summary>
    /// <param name="_queryRun">
    /// An instance of the <c>QueryRun</c> class to map.
    /// </param>
    protected void initialize(QueryRun _queryRun)
    {
        queryRun = _queryRun;

        var query = queryRun.query();

        fetchItemGroupId = query.dataSourceTable(tableNum(InventItemGroupItem)) != null;
        fetchItemName = query.dataSourceTable(tableNum(EcoResProductTranslation)) != null;
        fetchUnit = query.dataSourceTable(tableNum(InventTableModule)) != null;
        fetchDimension = query.dataSourceTable(tableNum(InventDim)) != null;
        fetchProductDimensionGroup = query.dataSourceTable(tableNum(EcoResProductDimensionGroupProduct)) != null;
        fetchStorageDimensionGroup = query.dataSourceTable(tableNum(EcoResStorageDimensionGroupItem)) != null;
        fetchTrackingDimensionGroup = query.dataSourceTable(tableNum(EcoResTrackingDimensionGroupItem)) != null;
        fetchInventValueReportView = query.dataSourceTable(tableNum(InventValueReportView)) != null;
        fetchInventAgingValueReportView = query.dataSourceTable(tableNum(InventAgingValueReportView)) != null;
        fetchInventAgingReceiptView = query.dataSourceTable(tableNum(InventAgingReceiptView)) != null;
        fetchInventAgingQtyReportView = query.dataSourceTable(tableNum(InventAgingQtyReportView)) != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmount</Name>
				<Source><![CDATA[
    public CostAmount parmAmount()
    {
        if (fetchInventValueReportView)
        {
            return inventValueReportView.Amount;
        }
        else if (fetchInventAgingValueReportView)
        {
            return inventAgingValueReportView.Amount;
        }
        else
        {
            return 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim()
    {
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimFinancial</Name>
				<Source><![CDATA[
    public InventDim parmInventDimFinancial()
    {
        return inventDimFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParmFinancial</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParmFinancial(InventDimParm _inventDimParmFinancial = inventDimParmFinancial)
    {
        inventDimParmFinancial = _inventDimParmFinancial;

        return inventDimParmFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemGroupId</Name>
				<Source><![CDATA[
    public ItemGroupId parmItemGroupId()
    {
        return inventItemGroupItem.ItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return inventTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemRecId</Name>
				<Source><![CDATA[
    public RecId parmItemRecId()
    {
        return inventTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemName</Name>
				<Source><![CDATA[
    public ItemName parmItemName()
    {
        if (productTranslation && productTranslation.Name != '')
        {
            return productTranslation.Name;
        }
        return EcoResProduct::find(inventTable.Product).DisplayProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public InventQty parmQty()
    {
        if (fetchInventValueReportView)
        {
            return inventValueReportView.Qty;
        }
        else if (fetchInventAgingQtyReportView)
        {
            return inventAgingQtyReportView.Qty;
        }
        else if (fetchInventAgingValueReportView)
        {
            return inventAgingValueReportView.Qty;
        }
        else
        {
            return inventAgingReceiptView.Qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate()
    {
        if (fetchInventAgingReceiptView)
        {
            return inventAgingReceiptView.TransDate;
        }
        else if (fetchInventValueReportView)
        {
            return inventValueReportView.TransDate;
        }
        else if (fetchInventAgingValueReportView)
        {
            return inventAgingValueReportView.TransDate;
        }
        {
            return inventAgingQtyReportView.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnit</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnit()
    {
        return inventTableModule.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventAgingCmdMapQuery</c> class.
    /// </summary>
    /// <param name="_queryRun">
    /// The instance of the <c>QueryRun</c> class to map.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventAgingCmdMapQuery</c> class.
    /// </returns>
    public static InventAgingCmdMapQuery newFromQueryRun(QueryRun _queryRun)
    {
        InventAgingCmdMapQuery inventAgingCmdMapQuery = new InventAgingCmdMapQuery();
        inventAgingCmdMapQuery.initialize(_queryRun);

        return inventAgingCmdMapQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>