<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimGroupFieldSetupEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventDimGroupFieldSetupEnumerator
{
    ListEnumerator                          fieldListEnumerator;

    EcoResProductDimensionGroupRecId        productDimensionGroup;
    EcoResStorageDimensionGroupRecId        storageDimensionGroup;
    EcoResTrackingDimensionGroupRecId       trackingDimensionGroup;
    InventDimGroupFieldSetup                inventDimGroupFieldSetup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    public InventDimGroupFieldSetup current()
    {
        if (!inventDimGroupFieldSetup)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        return inventDimGroupFieldSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    public boolean moveNext()
    {
        boolean notFound()
        {
            inventDimGroupFieldSetup = null;
            return false;
        }

        if (!fieldListEnumerator)
        {
            return notFound();
        }

        while (fieldListEnumerator.moveNext())
        {
            FieldId dimFieldId = fieldListEnumerator.current();

            if (InventDim::isFieldIdEnabledProductDimension(dimFieldId))
            {
                if (!productDimensionGroup)
                {
                    // Treat as if the specified dimension isn't active
                    EcoResProductDimensionGroupFldSetup ecoResProductDimensionGroupFldSetup;
                    ecoResProductDimensionGroupFldSetup.DimensionFieldId = dimFieldId;
                    inventDimGroupFieldSetup = InventDimGroupFieldSetup::newEcoResProductDimensionGroupFldSetup(ecoResProductDimensionGroupFldSetup);
                }
                else
                {
                    inventDimGroupFieldSetup = EcoResProductDimGroupSetupCache::getFieldSetup(productDimensionGroup, dimFieldId);
                }
                return true;
            }
            else if (InventDim::isFieldIdStorageDimension(dimFieldId))
            {
                if (!storageDimensionGroup)
                {
                    return notFound();
                }

                inventDimGroupFieldSetup = EcoResStorageDimGroupSetupCache::getFieldSetup(storageDimensionGroup, dimFieldId);
                return true;
            }
            else if (InventDim::isFieldIdTrackingDimension(dimFieldId))
            {
                if (!trackingDimensionGroup)
                {
                    return notFound();
                }
                inventDimGroupFieldSetup = EcoResTrackingDimGroupSetupCache::getFieldSetup(trackingDimensionGroup, dimFieldId);
                return true;
            }
            // Field is not bound -> skip
        }
        return notFound();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldListEnumerator</Name>
				<Source><![CDATA[
    protected ListEnumerator parmFieldListEnumerator(ListEnumerator _fieldListEnumerator = fieldListEnumerator)
    {
        fieldListEnumerator = _fieldListEnumerator;

        return fieldListEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductDimensionGroup</Name>
				<Source><![CDATA[
    protected EcoResProductDimensionGroupRecId parmProductDimensionGroup(EcoResProductDimensionGroupRecId _productDimensionGroup = productDimensionGroup)
    {
        productDimensionGroup = _productDimensionGroup;

        return productDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorageDimensionGroup</Name>
				<Source><![CDATA[
    protected EcoResStorageDimensionGroupRecId parmStorageDimensionGroup(EcoResStorageDimensionGroupRecId _storageDimensionGroup = storageDimensionGroup)
    {
        storageDimensionGroup = _storageDimensionGroup;

        return storageDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackingDimensionGroup</Name>
				<Source><![CDATA[
    protected EcoResTrackingDimensionGroupRecId parmTrackingDimensionGroup(EcoResTrackingDimensionGroupRecId _trackingDimensionGroup = trackingDimensionGroup)
    {
        trackingDimensionGroup = _trackingDimensionGroup;

        return trackingDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        if (fieldListEnumerator)
        {
            fieldListEnumerator.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventDimGroupFieldSetupEnumerator construct()
    {
        return new InventDimGroupFieldSetupEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFieldListAndDimGroups</Name>
				<Source><![CDATA[
    static public InventDimGroupFieldSetupEnumerator newFieldListAndDimGroups(
        ListEnumerator                      _listEnumerator,
        EcoResProductDimensionGroupRecId    _productDimensionGroup,
        EcoResStorageDimensionGroupRecId    _storageDimensionGroup,
        EcoResTrackingDimensionGroupRecId   _trackingDimensionGroup)
    {
        InventDimGroupFieldSetupEnumerator  inventDimGroupFieldSetupEnumerator = InventDimGroupFieldSetupEnumerator::construct();

        inventDimGroupFieldSetupEnumerator.parmProductDimensionGroup(_productDimensionGroup);
        inventDimGroupFieldSetupEnumerator.parmStorageDimensionGroup(_storageDimensionGroup);
        inventDimGroupFieldSetupEnumerator.parmTrackingDimensionGroup(_trackingDimensionGroup);

        inventDimGroupFieldSetupEnumerator.parmFieldListEnumerator(_listEnumerator);

        return inventDimGroupFieldSetupEnumerator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>