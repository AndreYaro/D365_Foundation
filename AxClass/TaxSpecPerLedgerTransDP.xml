<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSpecPerLedgerTransDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxSpecPerLedgerTransDP</c> class handles the data processing for the <c>TaxSpecPerLedgerTrans</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(TaxSpecPerLedgerTrans)),
    SRSReportParameterAttribute(classStr(TaxSpecPerLedgerTransContract))
]
public class TaxSpecPerLedgerTransDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxSpecPerLedgerTransTmp taxSpecPerLedgerTransTmp;
    Query query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxSpecPerLedgerTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data for the report from the <c>TaxSpecPerLedgerTransTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>TaxSpecPerLedgerTransTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxSpecPerLedgerTransTmp))
    ]
    public TaxSpecPerLedgerTransTmp getTaxSpecPerLedgerTransTmp()
    {
        select taxSpecPerLedgerTransTmp;
        return taxSpecPerLedgerTransTmp; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        TaxSpecPerLedgerTransBaseHelper helper;
        TaxSpecPerLedgerTransContract contract;
        UserConnection connection;
        boolean isEasternEuropeOrVatDueDateFeatureEnabled = TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled();
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;
        NoYes isSuccessfulReport;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();
            taxEventSourceLog.TaxReportStart(identifier);
            stopWatch.Start();
            contract = this.parmDataContract() as TaxSpecPerLedgerTransContract;
            connection = new UserConnection();

            if (SysQuery::queryHasRangesOrFilters(this.parmQuery(), true))
            {
                if (isEasternEuropeOrVatDueDateFeatureEnabled)
                {
                    helper = new TaxSpecPerLedgerTransQueryBasedHelper_W();
                }
                else
                {
                    helper = new TaxSpecPerLedgerTransQueryBasedHelper();
                }
            }
            else
            {
                if (contract.parmTotalOnly())
                {
                    if (isEasternEuropeOrVatDueDateFeatureEnabled)
                    {
                        helper = new TaxSpecPerLedgerTransTotalsHelper_W();
                    }
                    else
                    {
                        helper = new TaxSpecPerLedgerTransTotalsHelper();
                    }
                }
                else
                {
                    if (isEasternEuropeOrVatDueDateFeatureEnabled)
                    {
                        helper = new TaxSpecPerLedgerTransDetailsHelper_W();
                    }
                    else
                    {
                        helper = new TaxSpecPerLedgerTransDetailsHelper();
                    }
                }
            }

            helper.parmUserConnection(connection);
            helper.parmReportContract(contract);
            helper.parmReportQuery(this.parmQuery());
            helper.process();
            TaxSpecPerLedgerTransTmp reportTable = helper.parmReportTable();

            insert_recordset taxSpecPerLedgerTransTmp
                (AccountingDate, AmountCredit,AmountDebit, FullyQualifiedAccount, FunctionalCurrencyAmount, GeneralJournalAccountEntry, GeneralJournalEntry,
                GeneralJournalEntryDataArea, IsCredit, JournalNumber, MainAccount, Name, RecordNumber, TaxAmount, TaxBaseAmount, TaxCode, TaxCodeName, TaxDirection,
                TaxInCostPriceMST, TaxPayable, TaxReceivable, TaxTrans, Text, TraceNum, VatDateVisible, VatDueDate_W, Voucher )
            select AccountingDate, AmountCredit,AmountDebit, FullyQualifiedAccount, FunctionalCurrencyAmount, GeneralJournalAccountEntry, GeneralJournalEntry,
                GeneralJournalEntryDataArea, IsCredit, JournalNumber, MainAccount, Name, RecordNumber, TaxAmount, TaxBaseAmount, TaxCode, TaxCodeName, TaxDirection,
                TaxInCostPriceMST, TaxPayable, TaxReceivable, TaxTrans, Text, TraceNum, VatDateVisible, VatDueDate_W, Voucher from reportTable;

            isSuccessfulReport = NoYes::Yes;
        }
        catch(Exception::Error)
        {
            isSuccessfulReport = NoYes::No;
            throw Exception::Error;
        }
        finally
        {
            connection.finalize();
            stopWatch.Stop();
            taxEventSourceLog.TaxReportStop(identifier, SysCountryRegionCode::countryInfo(), new MenuFunction(menuItemOutputStr(TaxSpecPerLedgerTrans), MenuItemType::Output).label(), 'TaxSpecPerLedgerTrans', isSuccessfulReport, stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>