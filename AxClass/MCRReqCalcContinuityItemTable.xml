<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRReqCalcContinuityItemTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRReqCalcContinuityItemTable</c> does
/// the calculations for continuity piece of
/// master planning.
/// </summary>
public class MCRReqCalcContinuityItemTable extends ReqCalc implements BatchRetryable
{
    QueryRun    query;

    Set         setItemForecast;
    Set         setItemSafety;

    #DEFINE.CurrentVersion(8)

    #LOCALMACRO.CurrentList
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the request calculate continuity item could be executed as batch.
    /// </summary>
    /// <returns>True to indicate this could be a batch job.</returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@MCR12105";
    }

]]></Source>
			</Method>
			<Method>
				<Name>covCalcItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs coverage calculation for one item list.
    /// </summary>
    /// <param name="_level">
    /// The level to process the list on.
    /// </param>
    /// <param name="_itemId">
    /// The item ID to process.
    /// </param>
    protected void covCalcItem(BOMLevel _level, ItemId _itemId)
    {
        #TimeConstants

        ReqSetupDim         setupDim;

        List                listCovDimSorted;
        ListEnumerator      leCovDimSorted;

        InventDimId         covInventDimId;
        Integer             dimElements;

        void doError()
        {
            warning(strFmt("@SYS26323", _itemId));
            reqTransCache.manageItemError(_itemId, hasErrors);
        }

        reqTransCache.setCurrentItem(_itemId);
        reqTransCache.setCurrentLevel(_level);

        scheduleOrdersList = new List(Types::String);

        WrkCtrSchedulerLogger::Instance().writeToLog(WrkCtrSchedulerLogEvent::Item, fieldLabelValue(tableNum(InventTable), fieldNum(InventTable, ItemId), _itemId));
        setPrefix(fieldLabelValue(tableNum(InventTable), fieldNum(InventTable, ItemId), _itemId));

        if (progress)
        {
            progress.setText(_itemId, 3);
            progress.incCount(1, 3);
        }

        try
        {
            // make sorted list of covDimId
            listCovDimSorted = reqTransCache.listCovDimSorted(_itemId, reqPlanData);
        }
        catch (Exception::Error)
        {
            doError();
        }

        // remember number of covDimId
        dimElements  = listCovDimSorted.elements();

        leCovDimSorted = listCovDimSorted.getEnumerator();
        while (leCovDimSorted.moveNext())
        {
            covInventDimId = leCovDimSorted.current();

            try
            {
                reqPlanData.createReqLogRestorePoint();

                ttsBegin;

                scheduleOrdersList = new List(Types::String);

                setupDim    = reqPlanData.newReqSetupDim(reqPlanData.newReqSetup(_itemId), covInventDimId);

                if (setupDim.mustBeCovPlanned())
                {
                    setPrefix(fieldLabelValue(tableNum(InventDim), fieldNum(InventDim, InventDimId), covInventDimId));

                    previousReceipt             = null;

                    this.covCalcDim(setupDim, _level);
                }

                this.insertUnscheduledOrders(scheduleOrdersList);

                setupDim.showInfolog();

                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                this.manageExceptionDeadLockRestoreReqCalc();
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if ( this.manageExceptionUpdateConflictRestoreReqCalc() )
                {
                    retry;
                }
            }
            catch (Exception::Error)
            {
                doError();
            }
            catch (Exception::CLRError)
            {
                doError();
            }
            catch (Exception::Info)
            {
                doError();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSafetyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a safety requirement transaction based on the passed parameters.
    /// </summary>
    /// <param name="_setupDim">
    /// The <c>ReqSetupDim</c> record to be used to create the safety requirement transaction.
    /// </param>
    /// <param name="_fromCoverage">
    /// A boolean value defining whether the safety requirement transaction should be created from coverage or not.
    /// </param>
    protected void createSafetyInvent(
        ReqSetupDim     _setupDim,
        boolean         _fromCoverage
        )
    {
        if (_setupDim.covRule() == ReqCovType::MinMax)
            super(_setupDim, _fromCoverage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the requirements based on the parameters of the current class instance.
    /// </summary>
    protected void deleteRequirement()
    {
        ReqTransCov         reqTransCov;
        ReqTrans            reqTrans;
        ReqPO               reqPO;
        WrkCtrCapRes        wrkCtrCapRes;
        ReqRoute            reqRoute;
        ReqRouteJob         reqRouteJob;

        reqTrans.skipDataMethods(true);
        reqTrans.skipDeleteActions(true);

        reqPO.skipDataMethods(true);
        reqPO.skipDeleteActions(true);

        reqRoute.skipDataMethods(true);
        reqRoute.skipDeleteActions(true);

        reqRouteJob.skipDataMethods(true);
        reqRouteJob.skipDeleteActions(true);

        reqTransCov.skipDataMethods(true);
        reqTransCov.skipDeleteActions(true);

        wrkCtrCapRes.skipDataMethods(true);
        wrkCtrCapRes.skipDeleteActions(true);

        delete_from reqTransCov
            where reqTransCov.PlanVersion            == this.reqPlanVersionRefRecId();

        delete_from reqTrans
            where reqTrans.PlanVersion            == this.reqPlanVersionRefRecId();

        delete_from reqPO
            where reqPO.PlanVersion            == this.reqPlanVersionRefRecId();

        delete_from wrkCtrCapRes
            where wrkCtrCapRes.PlanVersion            == this.reqPlanVersionRefRecId() &&
                  wrkCtrCapRes.RefType                == WrkCtrCapRefType::PlannedOrder
            notexists join reqPO
                  where wrkCtrCapRes.PlanVersion            == reqPO.PlanVersion         &&
                        wrkCtrCapRes.RefId                  == reqPO.RefId;

        delete_from reqRoute
            where reqRoute.PlanVersion            == this.reqPlanVersionRefRecId()
            notexists join reqPO
                  where reqRoute.PlanVersion            == reqPO.PlanVersion            &&
                        reqRoute.RefId                  == reqPO.RefId;

        delete_from reqRouteJob
            where reqRouteJob.PlanVersion            == this.reqPlanVersionRefRecId()
            notexists join reqPO
                  where reqRouteJob.PlanVersion            == reqPO.PlanVersion            &&
                        reqRouteJob.ReqPOId                == reqPO.RefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// The dialog of request for calculate continuity item.
    /// </summary>
    /// <returns>The dialog object.</returns>
    public Object dialog()
    {
        DialogGroup     helperGroup;
        DialogGroup     parametersGroup;
        Object          mainFormGroupOrig;

        dialog = super();

        // Save the original main form group so we can set it back later
        // This needs to be done because the dialog framework can't handle it automatically when showQueryValues is
        // set to true.
        mainFormGroupOrig   = dialog.mainFormGroup();

        parametersGroup     = dialog.addGroup("@SYS7764");
        dflReqPlanId        = dialog.addFieldValue(extendedTypeStr(MCRReqPlanIdContinuity), reqPlanId);
        parametersGroup.addFieldname(dflReqPlanId.name());
        // Modified the addFieldValue call to use isTaskTraceEnabled instead of dflIsTaskTraceEnabled because
        // it was returning a null value and causing an error when trying to run the dialog
        dflIsTaskTraceEnabled = dialog.addFieldValue(enumStr(NoYes), isTaskTraceEnabled, "@SYS107551", "@SYS107552");
        parametersGroup.addFieldname(dflIsTaskTraceEnabled.name());

        // Add helper page and group
        dialog.addTabPage("@SYS109435");
        helperGroup = dialog.addGroup("@SYS7764");

        dflmaxChildThreads    = dialog.addFieldValue(extendedTypeStr(ReqProcessNumThreads), maxChildThreads);
        helperGroup.addFieldname(dflmaxChildThreads.name());

        // Add comment page and field
        dialog.addTabPage("@SYS35300");
        dflComment              = dialog.addFieldValue(extendedTypeStr(ReqComment), comment);

        dialog.mainFormGroup(mainFormGroupOrig);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>futuresInitLevel</Name>
				<Source><![CDATA[
    protected void futuresInitLevel(BOMLevel _level)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reqPlanId           = dflReqPlanId.value();

        maxChildThreads     = dflmaxChildThreads.value();
        isTaskTraceEnabled  = dflIsTaskTraceEnabled.value();

        comment             = dflComment.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data for the items based on the current class variables.
    /// </summary>
    protected void insertData()
    {
        if (!thisIsChildThread)
        {
            if (progress)
            {
                progress.setText("@SYS107553");
            }

            try
            {
                reqTransCache.insertProcessItemsFromQuery(query.pack());
            }
            catch (Exception::Deadlock)
            {
                this.manageExceptionDeadLock();
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if ( this.manageExceptionUpdateConflict() )
                {
                    retry;
                }
            }
        }

        if (updateAllItems && maxChildThreads == 0)
        {
            this.insertDataComplete();
        }
        else
        {
            this.insertDataQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes data insert for all items.
    /// </summary>
    protected void insertDataComplete()
    {
        MCRContinuityCustLine    mcrContinuityCustLine;

        setItemForecast = new Set(Types::String);
        setItemSafety   = new Set(Types::String);

        while select ItemId from mcrContinuityCustLine
            group ItemId
        {
            setItemForecast.add(mcrContinuityCustLine.ItemId);
        }

        try
        {
            ttsBegin;

            this.deleteRequirement();

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            if (this.manageExceptionDeadLock())
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if ( this.manageExceptionUpdateConflict() )
            {
                retry;
            }
        }

        this.insertTasksForAllItems(ReqProcessStatus::Update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data item based on the passed parameters.
    /// </summary>
    /// <param name="_level">
    /// The bill of materials level to be used to insert the data item.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> value to be used to insert the data item.
    /// </param>
    protected void insertDataItem(BOMLevel _level, ItemId _itemId)
    {
        super(_level, _itemId);

        if (updateAllItems && maxChildThreads == 0)
        {
            this.updateDataItemComplete(_level, _itemId);
        }
        else
        {
            this.updateDataItemQuery(_level, _itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs one time actions for inserting data and creates the tasks for inserting data for each item list.
    /// </summary>
    protected void insertDataQuery()
    {
        if (!thisIsChildThread)
        {
            if (updateAllItems)
            {
                if (progress)
                {
                    progress.setText("@SYS107554", 1);
                }

                try
                {
                    ttsBegin;
                    this.deleteRequirement();
                    ttsCommit;
                }
                catch (Exception::Deadlock)
                {
                    if (this.manageExceptionDeadLock())
                    {
                        retry;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if ( this.manageExceptionUpdateConflict() )
                    {
                        retry;
                    }
                }
            }
        }

        this.insertTasksForAllItems(ReqProcessStatus::Update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReqLog</Name>
				<Source><![CDATA[
    protected void insertReqLog(boolean _cancelled)
    {
        if (!hasErrors)
            info("@SYS28664");
        else
            info("@SCM:ReqItemCoveragePartiallyUpdated");

        super(_cancelled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompleteUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether all items should be updated.
    /// </summary>
    /// <returns>
    /// true if all items should be updated; otherwise, false.
    /// </returns>
    public boolean isCompleteUpdate()
    {
        return updateAllItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        query = this.buildBaseQuery();

        reqCalcUpdate = ReqCalcUpdate::Regeneration;

        thisIsPeriodicProcess = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBaseQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the base query used to find items to schedule.
    /// </summary>
    /// <returns>The base query used to find items to schedule</returns>
    protected QueryRun buildBaseQuery()
    {
        Query queryLocal = new Query();
        queryLocal.addDataSource(tableNum(InventTable));
        return new QueryRun(queryLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, super(), query.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// The query to run.
    /// </summary>
    /// <returns>The query to run.</returns>
    public QueryRun queryRun()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        void doError()
        {
            if (!isReqLogMerged)
            {
                hasErrors = true;
                this.insertReqLog(true);
            }

            if (!thisIsChildThread)
                ReqProcessList::setStatus(processId, ReqProcessStatus::Error);
            else
                throw Exception::Error;
        }

        ttsBegin;
        updateAllItems = this.shouldUpdateAllItems(query);

        query.query().dataSourceTable(tableNum(InventTable)).addRange(fieldNum(InventTable, ItemType)).value(InventItemType::valueMustBeReqCreated());

        this.progressInitSeries();

        progress.update(true);

        if (this.isInBatch())
            progress = null;
        ttsCommit;

        try
        {
            super();
        }
        catch (Exception::Deadlock)
        {
            doerror();
        }
        catch (Exception::UpdateConflict)
        {
            doerror();
        }
        catch (Exception::UpdateConflictNotRecovered)
        {
            doerror();
        }
        catch (Exception::Error)
        {
            doerror();
        }
        catch (Exception::Internal)
        {
            doerror();
        }
        catch (Exception::DDEerror)
        {
            doerror();
        }
        catch (Exception::Sequence)
        {
            doerror();
        }
        catch (Exception::Info)
        {
            doError();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>safetyStockDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the safety stock date based on the conversion rule in the passed <c>ReqSetupDim</c> record.
    /// </summary>
    /// <param name="setupDim">
    /// The <c>ReqSetupDim</c> record used to get the safety stock date.
    /// </param>
    /// <returns>
    /// The safety stock date.
    /// </returns>
    protected TransDate safetyStockDate(ReqSetupDim     setupDim)
    {
        if (setupDim.covRule() == ReqCovType::MinMax)
            return reqPlanData.todaysdate();

        return super(setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Property to check if the query values should be visible.
    /// </summary>
    /// <returns>True to allow show query values.</returns>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version        = conPeek(packedClass, 1);
        container       packedQuery;
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version, base, packedQuery] = packedClass;
                super(base);
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    query = new QueryRun(packedQuery);
                }
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataItemComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the data item based on the passed parameters.
    /// </summary>
    /// <param name="_level">
    /// The bill of materials level to be used in updating the data item.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> to be used in updating the data item.
    /// </param>
    protected void updateDataItemComplete(BOMLevel _level, ItemId _itemId)
    {
        boolean         loopForecast;
        ReqSetup        setup;

        loopForecast    = setItemForecast.in(_itemId);

        if (loopForecast)
        {
            setup = reqPlanData.newReqSetup(_itemId);

            try
            {
                ttsBegin;
                if (setup.mustItemReqBeCreated())
                {
                    if (loopForecast)
                    {
                        this.mcrinsertItemContinuityInvent(setup);
                    }
                }
                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                if (this.manageExceptionDeadLock())
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if ( this.manageExceptionUpdateConflict() )
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataItemQuery</Name>
				<Source><![CDATA[
    private void updateDataItemQuery(BOMLevel _level, ItemId _itemId)
    {
        ReqSetup        setup;

        if (!_itemId)
        {
            return;
        }

        setup = reqPlanData.newReqSetup(_itemId);

        if (setup.mustItemReqBeCreated())
        {
            if (!updateAllItems)
            {
                try
                {
                    ttsBegin;
                    this.deleteItemRequirement(setup);
                    ttsCommit;
                }
                catch (Exception::Deadlock)
                {
                    if (this.manageExceptionDeadLock())
                    {
                        retry;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if ( this.manageExceptionUpdateConflict() )
                    {
                        retry;
                    }
                }
            }

            this.addItem2ReqTransCache(_itemId, false);
        }

        try
        {
            ttsBegin;
            this.mcrinsertItemContinuityInvent(setup);
            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            if (this.manageExceptionDeadLock())
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if ( this.manageExceptionUpdateConflict() )
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ReqTransUpdate</c> record based on the passed <c>ItemId</c>.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> used to update the <c>ReqTransUpdate</c> record.
    /// </param>
    protected void updateReqTransUpdate(ItemId _itemId)
    {
        // nothing to update
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the <c>MCRReqPlanContinuity</c> record exists.
    /// </summary>
    /// <param name="calledFrom">
    /// The calling object; optional.
    /// </param>
    /// <returns>
    /// true if the <c>MCRReqPlanContinuity</c> record exits; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        if (!MCRReqPlanContinuity::find(this.parmReqPlanId()).RecId)
            return checkFailed(strFmt("@MCR31332", this.parmReqPlanId()));

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRReqCalcContinuityItemTable construct()
    {
        return new MCRReqCalcContinuityItemTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@MCR12105";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        MCRReqCalcContinuityItemTable mcrReqCalcContinuityItemTable;
        mcrReqCalcContinuityItemTable = MCRReqCalcContinuityItemTable::newStandard();

        if (!mcrReqCalcContinuityItemTable.prompt())
            return;

        mcrReqCalcContinuityItemTable.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>MCRReqCalcContinuityItemTable</c> class
    /// and disables the automatic reservation.
    /// </summary>
    /// <returns>
    /// The newly contsructed <c>MCRReqCalcContinuityItemTable</c> class.
    /// </returns>
    public static MCRReqCalcContinuityItemTable newStandard()
    {
        MCRReqCalcContinuityItemTable mcrReqCalcContinuityItemTable  = MCRReqCalcContinuityItemTable::construct();
        mcrReqCalcContinuityItemTable.getLast();
        mcrReqCalcContinuityItemTable.parmAutoReserveCoverage(false);

        return mcrReqCalcContinuityItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunMultiThreaded</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunMultiThreaded()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>