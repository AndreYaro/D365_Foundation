<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementPair_CustApplicationSuite_IT_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SettlementPair_Cust))]
public final class SettlementPair_CustApplicationSuite_IT_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateCommission_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the commission information.
    /// </summary>
    /// <param name = "_company">The company to use for voucher search.</param>
    public void updateCommission_IT(dataAreaId _company)
    {
        CustTransOpen openTrans = custVendTransOpenDebit;
        CustTrans custTransDebit = openTrans.custTrans(); // Debit Transaction
        CustTrans custTransCredit = custVendTransCredit;

        if (!(custTransCredit.BillOfExchangeID
                && custTransCredit.BillOfExchangeStatus != CustVendNegInstStatus::Honored)
            && custTransCredit
            && custTransDebit)
        {

            CustInvoiceJour creditInvoiceJour = CustInvoiceJour::findFromCustTrans(
                custTransCredit.Invoice,
                custTransCredit.TransDate,
                custTransCredit.AccountNum);
            CustInvoiceJour debitInvoiceJour = CustInvoiceJour::findFromCustTrans(
                custTransDebit.Invoice,
                custTransDebit.TransDate,
                custTransDebit.AccountNum);

            if (creditInvoiceJour
                && debitInvoiceJour
                && creditInvoiceJour.CommissionType_IT != debitInvoiceJour.CommissionType_IT)
            {
                throw error("@ExtendedItallianLocalization:CommissionTypeMismatch");
            }

            Map invoices = new Map(Types::String, Types::Date);
            Voucher paymentVoucher;
            AmountCur creditAmount = -this.getSpecTransCredit().Balance01;

            if (custTransDebit.isInvoice()
                || custTransDebit.isCreditNote()
                || custTransDebit.BillOfExchangeID)
            {
                CustBillOfExchangeInvoice custBoeInvoice;

                if (CustTrans::isCustTransPaymentForCommission_IT(custTransCredit))
                {
                    if (custTransCredit.BillOfExchangeID)
                    {
                        while select InvoiceId, InvoiceDate from custBoeInvoice
                            where custBoeInvoice.BillOfExchangeId == custTransCredit.BillOfExchangeID
                        {
                            invoices.insert(custBoeInvoice.InvoiceId, custBoeInvoice.InvoiceDate);
                        }
                    }
                    else if (custTransDebit.Invoice)
                    {
                        invoices.insert(custTransDebit.Invoice, custTransDebit.TransDate);
                    }
                    else if (custTransDebit.BillOfExchangeID) // In case of non-BOE payment of a bill
                    {
                        while select InvoiceId, InvoiceDate from custBoeInvoice
                            where custBoeInvoice.BillOfExchangeId == custTransDebit.BillOfExchangeID
                        {
                            invoices.insert(custBoeInvoice.InvoiceId, custBoeInvoice.InvoiceDate);
                        }
                    }
                    else
                    {
                        CustBillOfExchangeTrans custBoeTrans;
                        //Check if a protested BOE exists
                        select firstOnly RecId from custBoeTrans
                            join RecId, InvoiceId from custBoeInvoice
                                where custBoeInvoice.BillOfExchangeId == custBoeTrans.BillOfExchangeId
                                    && custBoeTrans.Voucher == custTransDebit.Voucher
                                    && custBoeTrans.Status == CustVendNegInstStatus::Protested;

                        if (custBoeTrans.RecId)
                        {
                            invoices.insert(custBoeInvoice.InvoiceId, custBoeInvoice.InvoiceDate);
                        }
                    }
                }

                paymentVoucher = custTransCredit.Voucher;
            }
            else if (custTransCredit.isCreditNote() && custTransDebit.isPayment())
            {
                invoices.insert(custTransCredit.Invoice, custTransCredit.TransDate);
                paymentVoucher = custTransDebit.Voucher;
                creditAmount = -custVendTransOpenDebit.AmountMST;
            }

            if (!invoices.empty())
            {
                MapEnumerator e = invoices.getEnumerator();
                setprefix("@SYS334280");

                while (e.moveNext())
                {
                    CustInvoiceJour invoiceJour;
                    select firstonly invoiceJour
                        where invoiceJour.InvoiceId == e.currentKey()
                            && invoiceJour.InvoiceDate == e.currentValue()
                            && invoiceJour.CommissionType_IT == CommissionType_IT::Payment;

                    boolean commissionInserted;

                    if (invoiceJour)
                    {
                        Commission_Settlement_IT commission;

                        using (ContextPostNewCommission_IT contextPostNewCommission = new ContextPostNewCommission_IT())
                        {
                            contextPostNewCommission.postNewCommission = true;
                            CustInvoiceTrans invoiceTrans;
                            commission = Commission::newCommission(this.findLedgerVoucherByCompany(_company), invoiceJour, invoiceTrans);
                        }

                        commission.parmPaymentVoucher(paymentVoucher);

                        if (invoiceJour.InvoiceAmount)
                        {
                            commission.parmSettlementAdj(min(creditAmount/invoiceJour.InvoiceAmount, 1));
                        }
                        else
                        {
                            commission.parmSettlementAdj(1);
                        }

                        if (!this.checkExistingCommissionAccruingForInvoice(commission))
                        {
                            commission.run();
                            commissionInserted = commissionInserted || commission.commissionInserted();

                            if (commissionInserted)
                            {
                                info (strfmt("@ExtendedItallianLocalization:CommissionsAccruedForInvoice", invoiceJour.InvoiceId));
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistingCommissionAccruingForInvoice</Name>
				<Source><![CDATA[
    private boolean checkExistingCommissionAccruingForInvoice(Commission_Settlement_IT _commission)
    {
        CommissionTrans commissionTrans;

        select firstonly commissionTrans
            where commissionTrans.InvoiceId == _commission.invoiceId;

        CommissionAccruing_IT existingAccruing;
        if (commissionTrans)
        {
            existingAccruing = CommissionAccruing_IT::findFromCommissionTrans(
                commissionTrans,
                _commission.parmPaymentVoucher(),
                false);
        }
        return existingAccruing.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>