<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReverseChargeTaxSetupToggle</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReverseChargeTaxSetupToggle</c> class defines the feature of showing Reverse charge related UI elements.
/// </summary>
internal final class ReverseChargeTaxSetupToggle implements Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureRuntimeToggle
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return ReverseChargeTaxSetupToggle::isGlobalReverseChargeMenuEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGlobalReverseChargeMenuEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if reverse charge menu items should be shown.
    /// </summary>
    /// <returns>True, if reverse charge menu items should be shown; Otherwise, false.</returns>
    [Hookable(false)]
    public static boolean isGlobalReverseChargeMenuEnabled()
    {
        boolean result = true;

        if (ReverseCharge_GCC_Feature::isCountryRegionInGCC() || ReverseCharge_Global_Feature::isCountryRegionNotSupported())
        {
            result = false;
        }
        else if (!ReverseCharge_Global_Feature::isCountryRegionSupportedByDefault())
        {
            result = FeatureStateProvider::isFeatureEnabled(ReverseCharge_Global_Feature::instance())
                && ReverseChargeParameters_W::find().Enabled;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseChargeUIEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if reverse charge setup UI elements should be shown.
    /// </summary>
    /// <param name = "_checkGLParam">If the Reverse charge GL parameter has to be checked or not. Enabled by default.</param>
    /// <returns>True, if reverse charge setup UI elements should be shown; Otherwise, false.</returns>
    [Hookable(false)]
    public static boolean isReverseChargeUIEnabled(boolean _checkGLParam = true)
    {
        boolean result = true;

        if (ReverseCharge_Global_Feature::isCountryRegionNotSupported())
        {
            result = false;
        }
        else if (ReverseCharge_GCC_Feature::isCountryRegionInGCC())
        {
            result = FeatureStateProvider::isFeatureEnabled(ReverseCharge_GCC_Feature::instance());
        }
        else if (!ReverseCharge_Global_Feature::isCountryRegionSupportedByDefault())
        {
            result = FeatureStateProvider::isFeatureEnabled(ReverseCharge_Global_Feature::instance())
                && (_checkGLParam ? ReverseChargeParameters_W::find().Enabled : true);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the feature reference.
    /// </summary>
    /// <returns>The feature reference.</returns>
    [Hookable(false)]
    public static str getFeatureReference()
    {
        str featureReference;

        if (ReverseCharge_GCC_Feature::isCountryRegionInGCC()
            && FeatureStateProvider::isFeatureEnabled(ReverseCharge_GCC_Feature::instance()))
        {
            #ISOCountryRegionCodes
            featureReference = GlobalizationInstrumentationHelper::getFeatureRefByLegalEntityCountryRegion([
                [#isoBH, GlobalizationConstants::FeatureReferenceBH00001],
                [#isoKW, GlobalizationConstants::FeatureReferenceKW00001],
                [#isoOM, GlobalizationConstants::FeatureReferenceOM00001],
                [#isoQA, GlobalizationConstants::FeatureReferenceQA00001]]);
        }
        else if (!ReverseCharge_Global_Feature::isCountryRegionSupportedByDefault()
            && FeatureStateProvider::isFeatureEnabled(ReverseCharge_Global_Feature::instance()))
        {
            featureReference = GlobalizationConstants::FeatureReferenceGBL00001;
        }
        else
        {
            featureReference = GlobalizationConstants::FeatureReferenceEUR00022;
        }

        return featureReference;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>