<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDateEngineItemTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSumDateEngineItemTask extends InventSumDateEngine implements CostIAsyncRunnable
{
    List    itemsToProcess;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList1
         perDate,
         parmId,
         inventSumDateType,
         minus
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventSumDateEngineItemTask),
                                                          staticMethodStr(InventSumDateEngineItemTask, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static container runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventSumDateEngineItemTask inventSumDateEngineItemTask = new InventSumDateEngineItemTask();
        container packedInventSumDateEngineItemTask;

        try
        {
            [packedInventSumDateEngineItemTask] = params;
            inventSumDateEngineItemTask.unpack(packedInventSumDateEngineItemTask);

            inventSumDateEngineItemTask.parmUserConnection(new UserConnection());
            inventSumDateEngineItemTask.execute();

            return [true];
        }
        catch
        {
            return [false];
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    private void execute()
    {
        ListEnumerator itemEnumerator = itemsToProcess.getEnumerator();
        boolean allSuccess = true;
        while (itemEnumerator.moveNext())
        {
            ItemId itemId = itemEnumerator.current();
            try
            {
                this.selectInventOnHand_ItemBase(itemId);
                this.selectInventTransPostingPhysical_ItemBase(itemId);
                this.selectInventTransPostingFinancial_ItemBase(itemId);
                this.updateSign_ItemBase(itemId);
            }
            catch
            {
                warning(strFmt("@SCM:InventSumDateEngineItemException", itemId));
                allSuccess = false;
            }
        }
        if (!allSuccess) throw Exception::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDimTmpInventSum_ItemBase</Name>
				<Source><![CDATA[
    private void populateInventDimTmpInventSum_ItemBase(ItemId _itemId)
    {
        Query targetQuery = new Query();
        InventSum inventSum;
        int rangeCount = 1;

        if (userConnection)
        {
            inventSum.setConnection(userConnection);
        }

        QueryBuildDataSource qbds = targetQuery.addDataSource(tableNum(InventSum));
        qbds.addRange(fieldNum(InventSum, Closed)).value(queryValue(NoYes::No));
        qbds.addRange(fieldNum(InventSum, ItemId)).value(_itemId);

        qbds.addSelectionField(fieldNum(InventSum, ItemId));
        qbds.addSelectionField(fieldNum(InventSum, InventDimId));
        qbds.addOrderByField(fieldNum(InventSum, ItemId));
        qbds.addOrderByField(fieldNum(InventSum, InventDimId));
        qbds.orderMode(OrderMode::GroupBy);

        qbds = qbds.addDataSource(tableNum(InventDim));
        qbds.addLink(fieldNum(InventSum, InventDimId), fieldNum(InventDim, InventDimId));
        qbds.joinMode(JoinMode::ExistsJoin);

        SysQuery::mergeRanges(targetQuery, query, 2);

        QueryRun queryRun = new QueryRun(targetQuery);

        while (queryRun.next())
        {
            inventSum = queryRun.get(tableNum(inventSum));

            inventDimItemTmpInventSum.clear();
            inventDimItemTmpInventSum.itemId = inventSum.ItemId;
            inventDimItemTmpInventSum.inventDimId = inventSum.inventDimId;
            inventDimItemTmpInventSum.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDimTmpInventTrans_ItemBase</Name>
				<Source><![CDATA[
    private void populateInventDimTmpInventTrans_ItemBase(ItemId _itemId)
    {
        Query targetQuery = new Query();

        InventTrans inventTrans;

        if (userConnection)
        {
            inventTrans.setConnection(userConnection);
        }

        QueryBuildDataSource qbds = targetQuery.addDataSource(tableNum(InventTrans));
        qbds.addRange(fieldNum(InventTrans, ItemId)).value(_itemId);
        qbds.addRange(fieldNum(InventTrans, DateStatus)).value(queryRange(perDate, dateMax()));

        qbds.addSelectionField(fieldNum(inventTrans, ItemId));
        qbds.addSelectionField(fieldNum(inventTrans, InventDimId));
        qbds.addOrderByField(fieldNum(inventTrans, ItemId));
        qbds.addOrderByField(fieldNum(inventTrans, InventDimId));
        qbds.orderMode(OrderMode::GroupBy);

        qbds = qbds.addDataSource(tableNum(InventDim));
        qbds.addLink(fieldNum(inventTrans, InventDimId), fieldNum(inventDim, InventDimId));
        qbds.joinMode(JoinMode::ExistsJoin);

        SysQuery::mergeRanges(targetQuery, query, 2);

        QueryRun queryRun = new QueryRun(targetQuery);

        while (queryRun.next())
        {
            inventTrans = queryRun.get(tableNum(InventTrans));

            inventDimItemTmpInventTrans.clear();
            inventDimItemTmpInventTrans.itemId = inventTrans.ItemId;
            inventDimItemTmpInventTrans.inventDimId = inventTrans.inventDimId;
            inventDimItemTmpInventTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventOnHand_ItemBase</Name>
				<Source><![CDATA[
    protected void selectInventOnHand_ItemBase(ItemId _itemId)
    {
        InventSum               inventSum;
        InventTrans             inventTrans;
        InventSumDateTrans      inventSumDateTrans;

        if (userConnection)
        {
            inventSum.setConnection(userConnection);
            inventTrans.setConnection(userConnection);
            inventSumDateTrans.setConnection(userConnection);
        }

        this.populateInventDimTmpInventSum_ItemBase(_itemId);
        this.populateInventDimTmpInventTrans_ItemBase(_itemId);

        if (InventSumDateEngineDenormalizeInventSumDateTransToggle::instance().isEnabled())
        {
            insert_recordset inventSumDateTrans (ItemId, PostedQty, ReceivedQty, DeductedQty, RegisteredQty, PickedQty, InventDimId, ParmId, TransType, CostAmountPosted, #InventDimGroupAllFields)
            select ItemId, sum(PostedQty), sum(Received), sum(Deducted), sum(Registered), sum(Picked),
                    InventDimId, parmId /*scalar*/, inventSumDateType /*scalar*/, sum(PostedValue), #InventDimGroupAllFields
            from inventSum
                group by ItemId, InventDimId, #InventDimGroupAllFields
                where inventSum.Closed == NoYes::No
                   && inventSum.ItemId == _itemId
            exists join inventDimItemTmpInventSum
                where inventDimItemTmpInventSum.itemId == inventSum.ItemId &&
                      inventDimItemTmpInventSum.inventDimId == inventSum.InventDimId;

            insert_recordset inventSumDateTrans (ItemId, PostedQty, ReceivedQty, DeductedQty, RegisteredQty, PickedQty, InventDimId, ParmId, TransType, CostAmountPosted, #InventDimGroupAllFields)
            select ItemId, sum(PostedQty), sum(Received), sum(Deducted), sum(Registered), sum(Picked),
                    InventDimId, parmId /*scalar*/, inventSumDateType /*scalar*/, sum(PostedValue), #InventDimGroupAllFields
            from inventSum
                group by ItemId, InventDimId, #InventDimGroupAllFields
                where inventSum.Closed == NoYes::Yes
                   && inventSum.ItemId == _itemId
            exists join inventTrans
                where inventTrans.ItemId      == inventSum.ItemId
                    && inventTrans.InventDimId == inventSum.InventDimId
                    && inventTrans.DateStatus  >= perDate
            exists join inventDimItemTmpInventTrans
                where inventDimItemTmpInventTrans.itemId == inventSum.ItemId &&
                      inventDimItemTmpInventTrans.inventDimId == inventSum.InventDimId;
        }
        else
        {
            insert_recordset inventSumDateTrans (ItemId, PostedQty, ReceivedQty, DeductedQty, RegisteredQty, PickedQty, InventDimId, ParmId, TransType, CostAmountPosted)
                select ItemId, sum(PostedQty), sum(Received), sum(Deducted), sum(Registered), sum(Picked),
                       InventDimId, parmId /*scalar*/, inventSumDateType /*scalar*/, sum(PostedValue)
                from inventSum
                    group by ItemId, InventDimId
                    where inventSum.Closed == NoYes::No
                       && inventSum.ItemId == _itemId
                exists join inventDimItemTmpInventSum
                    where inventDimItemTmpInventSum.itemId == inventSum.ItemId &&
                          inventDimItemTmpInventSum.inventDimId == inventSum.InventDimId;

            insert_recordset inventSumDateTrans (ItemId, PostedQty, ReceivedQty, DeductedQty, RegisteredQty, PickedQty, InventDimId, ParmId, TransType, CostAmountPosted)
                select ItemId, sum(PostedQty), sum(Received), sum(Deducted), sum(Registered), sum(Picked),
                       InventDimId, parmId /*scalar*/, inventSumDateType /*scalar*/, sum(PostedValue)
                from inventSum
                    group by ItemId, InventDimId
                    where inventSum.Closed == NoYes::Yes
                       && inventSum.ItemId == _itemId
                exists join inventTrans
                    where inventTrans.ItemId      == inventSum.ItemId
                       && inventTrans.InventDimId == inventSum.InventDimId
                       && inventTrans.DateStatus  >= perDate
                exists join inventDimItemTmpInventTrans
                    where inventDimItemTmpInventTrans.itemId == inventSum.ItemId &&
                          inventDimItemTmpInventTrans.inventDimId == inventSum.InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingPhysical_ItemBase</Name>
				<Source><![CDATA[
    protected void selectInventTransPostingPhysical_ItemBase(ItemId _itemId)
    {
        InventTrans         inventTrans;
        
        InventSumDateTrans  inventSumDateTrans;
        InventSumDateTrans  inventSumDateTransNew;

        if (userConnection)
        {
            inventTrans.setConnection(userConnection);
            inventSumDateTrans.setConnection(userConnection);
            inventSumDateTransNew.setConnection(userConnection);
        }
        
        if (InventSumDateEngineDenormalizeInventSumDateTransToggle::instance().isEnabled())
        {
            // Received + Purchased: ReceivedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, ReceivedQty, ParmId, Sign, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  > perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusIssue                   == StatusIssue::None
                              && (inventTrans.StatusReceipt                 == StatusReceipt::Received
                              ||  inventTrans.StatusReceipt                 == StatusReceipt::Purchased);
        
            // Deducted + Sold: DeductedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, DeductedQty, ParmId, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                 == StatusReceipt::None
                              && (inventTrans.StatusIssue                   == StatusIssue::Deducted
                              ||  inventTrans.StatusIssue                   == StatusIssue::Sold);
        
            // Registered: RegisteredQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, RegisteredQty, ParmId, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.DateInvent                    != dateNull()
                              &&  inventTrans.DateInvent                    <= perDate
                              &&  inventTrans.Qty                           > 0;
        
            // Registered: RegisteredQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, RegisteredQty, ParmId, Sign, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId         == inventSumDateTrans.ItemId
                              &&  inventTrans.StatusReceipt  == StatusReceipt::Registered
                              &&  inventTrans.StatusIssue    == StatusIssue::None
                              &&  inventTrans.InventDimId    == inventSumDateTrans.InventDimId
                              &&  inventTrans.ValueOpen      == InventTransOpen::Yes
                              &&  inventTrans.DateInvent     >  perDate;
        
            // Picked: PickedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, PickedQty, ParmId, Sign, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.DateInvent                    != dateNull()
                              &&  inventTrans.DateInvent                    <= perDate
                              &&  inventTrans.Qty                           <= 0;
        
            // Picked: PickedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, PickedQty, ParmId, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId         == inventSumDateTrans.ItemId
                              &&  inventTrans.StatusReceipt  == StatusReceipt::None
                              &&  inventTrans.StatusIssue    == StatusIssue::Picked
                              &&  inventTrans.InventDimId    == inventSumDateTrans.InventDimId
                              &&  inventTrans.ValueOpen      == InventTransOpen::Yes
                              &&  inventTrans.DateInvent     >  perDate;
        }
        else
        {
            // Received + Purchased: ReceivedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, ReceivedQty, ParmId, Sign, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  > perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusIssue                   == StatusIssue::None
                              && (inventTrans.StatusReceipt                 == StatusReceipt::Received
                              ||  inventTrans.StatusReceipt                 == StatusReceipt::Purchased);
        
            // Deducted + Sold: DeductedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, DeductedQty, ParmId, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                 == StatusReceipt::None
                              && (inventTrans.StatusIssue                   == StatusIssue::Deducted
                              ||  inventTrans.StatusIssue                   == StatusIssue::Sold);
        
            // Registered: RegisteredQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, RegisteredQty, ParmId, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.DateInvent                    != dateNull()
                              &&  inventTrans.DateInvent                    <= perDate
                              &&  inventTrans.Qty                           > 0;
        
            // Registered: RegisteredQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, RegisteredQty, ParmId, Sign, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId         == inventSumDateTrans.ItemId
                              &&  inventTrans.StatusReceipt  == StatusReceipt::Registered
                              &&  inventTrans.StatusIssue    == StatusIssue::None
                              &&  inventTrans.InventDimId    == inventSumDateTrans.InventDimId
                              &&  inventTrans.ValueOpen      == InventTransOpen::Yes
                              &&  inventTrans.DateInvent     >  perDate;
        
            // Picked: PickedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, PickedQty, ParmId, Sign, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.DateInvent                    != dateNull()
                              &&  inventTrans.DateInvent                    <= perDate
                              &&  inventTrans.Qty                           <= 0;
        
            // Picked: PickedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, PickedQty, ParmId, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId         == inventSumDateTrans.ItemId
                              &&  inventTrans.StatusReceipt  == StatusReceipt::None
                              &&  inventTrans.StatusIssue    == StatusIssue::Picked
                              &&  inventTrans.InventDimId    == inventSumDateTrans.InventDimId
                              &&  inventTrans.ValueOpen      == InventTransOpen::Yes
                              &&  inventTrans.DateInvent     >  perDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingFinancial_ItemBase</Name>
				<Source><![CDATA[
    protected void selectInventTransPostingFinancial_ItemBase(ItemId _itemId)
    {
        InventTrans         inventTrans;
        
        InventSumDateTrans  inventSumDateTrans;
        InventSumDateTrans  inventSumDateTransNew;
        
        if (userConnection)
        {
            inventTrans.setConnection(userConnection);
            inventSumDateTrans.setConnection(userConnection);
            inventSumDateTransNew.setConnection(userConnection);
        }
        
        if (InventSumDateEngineDenormalizeInventSumDateTransToggle::instance().isEnabled())
        {
            // Purchased ReceivedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, ReceivedQty, ParmId, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId                  &&
                              inventSumDateTrans.TransType == InventSumDateType::Base &&
                              inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                             == StatusReceipt::Purchased
                              &&  inventTrans.StatusIssue                               == StatusIssue::None;

            // Sold DeductedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, DeductedQty, ParmId, Sign, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                             == StatusReceipt::None
                              &&  inventTrans.StatusIssue                               == StatusIssue::Sold;
        
            // PackingSlipReturned PostedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, PostedQty, ParmId, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.PackingSlipReturned                       != 0;
        
            // All PostedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, PostedQty, ParmId, Sign, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId;
        }
        else
        {
            // Purchased ReceivedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, ReceivedQty, ParmId, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId                  &&
                              inventSumDateTrans.TransType == InventSumDateType::Base &&
                              inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                             == StatusReceipt::Purchased
                              &&  inventTrans.StatusIssue                               == StatusIssue::None;
        
            // Sold DeductedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, DeductedQty, ParmId, Sign, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                             == StatusReceipt::None
                              &&  inventTrans.StatusIssue                               == StatusIssue::Sold;
        
            // PackingSlipReturned PostedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, PostedQty, ParmId, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.PackingSlipReturned                       != 0;
        
            // All PostedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, PostedQty, ParmId, Sign, CostAmountPosted)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                          &&  inventSumDateTrans.ItemId    == _itemId
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSign_ItemBase</Name>
				<Source><![CDATA[
    protected void updateSign_ItemBase(ItemId _itemId)
    {
        InventSumDateTrans          inventSumDateTrans;

        if (userConnection)
        {
            inventSumDateTrans.setConnection(userConnection);
        }

        update_recordset inventSumDateTrans
            setting ReceivedQty                     = -1 * inventSumDateTrans.ReceivedQty,
                    PostedQty                       = -1 * inventSumDateTrans.PostedQty,
                    DeductedQty                     = -1 * inventSumDateTrans.DeductedQty,
                    RegisteredQty                   = -1 * inventSumDateTrans.RegisteredQty,
                    PickedQty                       = -1 * inventSumDateTrans.PickedQty,
                    CostAmountPosted                = -1 * inventSumDateTrans.CostAmountPosted
            where inventSumDateTrans.ParmId == parmId
              &&  inventSumDateTrans.ItemId == _itemId
              &&  inventSumDateTrans.Sign   == minus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventSumDateEngineItemTask construct()
    {
        return new InventSumDateEngineItemTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static InventSumDateEngineItemTask newParameters(
        TransDate           _perDate,
        List                _itemsToProcess,
        ParmId              _parmId,
        InventSumDateType   _inventSumDateType,
        int                 _minus,
        Query               _query = new Query(queryStr(InventDimPhys)))
    {
        InventSumDateEngineItemTask inventSumDateEngine = InventSumDateEngineItemTask::construct();

        inventSumDateEngine.parmPerDate(_perDate);
        inventSumDateEngine.parmQuery(_query);

        inventSumDateEngine.parmItemsToProcess(_itemsToProcess);
        inventSumDateEngine.parmParmId(_parmId);
        inventSumDateEngine.parmInventSumDateType(_inventSumDateType);
        inventSumDateEngine.parmMinus(_minus);

        return inventSumDateEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemsToProcess</Name>
				<Source><![CDATA[
    public List parmItemsToProcess(List _itemsToProcess = itemsToProcess)
    {
        itemsToProcess = _itemsToProcess;
        return itemsToProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmId</Name>
				<Source><![CDATA[
    public ParmId parmParmId(ParmId _parmId = parmId)
    {
        parmId = _parmId;
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSumDateType</Name>
				<Source><![CDATA[
    public InventSumDateType parmInventSumDateType(InventSumDateType _inventSumDateType = inventSumDateType)
    {
        inventSumDateType = _inventSumDateType;
        return inventSumDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinus</Name>
				<Source><![CDATA[
    public int parmMinus(int _minus = minus)
    {
        minus = _minus;
        return minus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList1,query.pack(),itemsToProcess.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass,1);
        container queryContainer;
        container itemsToProcessContainer;
        container base;
    
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList1,queryContainer,itemsToProcessContainer] = _packedClass;
                break;
            default:
                return false;
        }

        query = Query::deserializeFromContainer(queryContainer);
        itemsToProcess = List::create(itemsToProcessContainer);

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>