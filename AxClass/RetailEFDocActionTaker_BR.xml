<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEFDocActionTaker_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Inquires the status of retail electronic fiscal documents with an unknown status and takes actions depending on their inquired status.
/// </summary>
/// <remarks>
/// If the retail electronic fiscal document was approved and contingency document exists, it tries to cancel approved document.
/// If the retail electronic fiscal document doesn't exist on the government database, it discards its number.
/// </remarks>
internal class RetailEFDocActionTaker_BR
{
    private Description cancelReasonComment;
    private boolean cancelBySubstitution;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToMapAsSet</Name>
				<Source><![CDATA[
    private void addToMapAsSet(Map _map, anytype _key, RetailFiscalDocument_BR _value)
    {
        Set localSet;

        if (_map)
        {
            if (!_map.exists(_key))
            {
                localSet = new Set(Types::Record);
                localSet.add(_value);
                _map.insert(_key, localSet);
            }
            else
            {
                localSet = _map.lookup(_key);
                localSet.add(_value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelBySubstitutionFiscalDocument</Name>
				<Source><![CDATA[
    private void cancelBySubstitutionFiscalDocument(FiscalDocument_BR _fiscalDocument, EFDocAccessKey_BR _substitutionAccessKey)
    {
        _fiscalDocument.CancelReasonComment = cancelReasonComment;
        _fiscalDocument.SubstitutionAccessKey = _substitutionAccessKey;
        _fiscalDocument.update();

        RetailEFDocState_BR retailFiscalDocState = this.getRetailEFDocState(_fiscalDocument);
        retailFiscalDocState.cancelBySubstitution();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelFiscalDocument</Name>
				<Source><![CDATA[
    private void cancelFiscalDocument(FiscalDocument_BR _fiscalDocument)
    {
        _fiscalDocument.CancelReasonComment = cancelReasonComment;
        _fiscalDocument.update();

        RetailEFDocState_BR retailFiscalDocState = this.getRetailEFDocState(_fiscalDocument);
        retailFiscalDocState.cancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>discardFiscalDocument</Name>
				<Source><![CDATA[
    private void discardFiscalDocument(FiscalDocument_BR _fiscalDocument)
    {
        RetailEFDocState_BR retailFiscalDocState = this.getRetailEFDocState(_fiscalDocument);
        retailFiscalDocState.discard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEFDocumentsPerFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the retail fiscal documents that should have an action taken and maps them to their fiscal establishment.
    /// </summary>
    /// <returns>
    /// A Map of retail fiscal documents per fiscal establishment.
    /// </returns>
    [Hookable(false)]
    protected Map getEFDocumentsPerFiscalEstablishment()
    {
        Map efDocumentsPerFiscalEstablishment = new Map(Types::String, Types::Class);
        RetailFiscalDocument_BR retailFiscalDocument;
        RetailEFDocumentToBeInquired_BR efDocumentToBeInquired;

        while select retailFiscalDocument
            exists join efDocumentToBeInquired
                where efDocumentToBeInquired.Status == RetailEFDocumentToBeInquiredStatus_BR::Unknown
                    && efDocumentToBeInquired.RetailFiscalDocument_BR == retailFiscalDocument.RecId
        {
            this.addToMapAsSet(efDocumentsPerFiscalEstablishment, retailFiscalDocument.FiscalEstablishment, retailFiscalDocument);
        }

        return efDocumentsPerFiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message format for the inquiry of electronic fiscal documents.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment that owns the fiscal document.
    /// </param>
    /// <param name="_fiscalDocumentModel">
    /// The model of the fiscal document that will be inquired.
    /// </param>
    /// <returns>
    /// An <c>IEFDocMsgFormat</c> object representing the message format for the inquiry of electronic fiscal documents.
    /// </returns>
    [Hookable(false)]
    protected IEFDocMsgFormat getMessageFormat(
        FiscalEstablishment_BR _fiscalEstablishment,
        FiscalDocumentModel_BR _fiscalDocumentModel)
    {
        FiscalDocument_BR fiscalDocument;
        fiscalDocument.Model = _fiscalDocumentModel;

        return EFDocFactory_BR::construct().createMsgFormat(_fiscalEstablishment, EFDocWebService_BR::SubmitInquire, fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailEFDocState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an object that handles the state of the fiscal document.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// The fiscal document that has its state handled.
    /// </param>
    /// <returns>
    /// An object that is responsible to handle the state of the fiscal document.
    /// </returns>
    [Hookable(false)]
    protected RetailEFDocState_BR getRetailEFDocState(FiscalDocument_BR _fiscalDocument)
    {
        return RetailEFDocState_BR::construct(_fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubstitutionAccessKey</Name>
				<Source><![CDATA[
    private EFDocAccessKey_BR getSubstitutionAccessKey(RetailFiscalDocument_BR _retailFiscalDocument)
    {
        FiscalDocument_BR       fiscalDocument;
        RetailFiscalDocument_BR retailFiscalDocument;

        select firstOnly AccessKey from retailFiscalDocument
            where retailFiscalDocument.transactionId == _retailFiscalDocument.transactionId
                && retailFiscalDocument.store == _retailFiscalDocument.store
                && retailFiscalDocument.terminal == _retailFiscalDocument.terminal
                && retailFiscalDocument.ContingencyMode == EFDocContingMode_BR::ConsumerEFDocOffline
            exists join fiscalDocument
            where retailFiscalDocument.AccessKey == fiscalDocument.AccessKey
                && fiscalDocument.Status == FiscalDocumentStatus_BR::Approved;

        return retailFiscalDocument.AccessKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transport object for the inquiry of electronic fiscal documents.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment that owns the fiscal document.
    /// </param>
    /// <param name="_model">
    /// The model of the fiscal document that will be inquired.
    /// </param>
    /// <returns>
    /// An <c>IEFDocMsgTransport</c> object representing the transport for the inquiry of electronic fiscal documents.
    /// </returns>
    [Hookable(false)]
    protected IEFDocMsgTransport getTransport(FiscalEstablishment_BR _fiscalEstablishment, FiscalDocumentModel_BR _model)
    {
        return EFDocFactory_BR::construct().createInquireTransport(_fiscalEstablishment, EFDocMessageType_BR::Submit, _fiscalEstablishment.getCurrentNfeContingencyModeMode(), _model);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inquires the current fiscal document status on the government.
    /// </summary>
    /// <param name="_transport">
    /// The transport that will be used to inquired the fiscal document status.
    /// </param>
    /// <param name="_messageFormat">
    /// The format object that will be used to construct the XML message.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment that owns the fiscal document.
    /// </param>
    /// <param name="_retailFiscalDocument">
    /// The retail fiscal document that will be inquired.
    /// </param>
    /// <returns>
    /// An <c>EFDocReturnCode_BR</c> that was returned by the government web service.
    /// </returns>
    [Hookable(false)]
    protected EFDocReturnCode_BR inquire(
        IEFDocMsgTransport _transport,
        EFDocMsgFormat_XmlInquire_BR _messageFormat,
        FiscalEstablishment_BR _fiscalEstablishment,
        RetailFiscalDocument_BR _retailFiscalDocument)
    {
        EFiscalDocumentReturnInfo_BR returnInfo = EFiscalDocumentReturnInfo_BR::newFromAccessKey(_retailFiscalDocument.Accesskey);
        IEFDocMsgStream_BR sendStream = _transport.getSendStream();
        EFDocEnvironment_BR environment = _fiscalEstablishment.ConsumerEFDocEnvironment;

        _messageFormat.writeForReceivedXml(sendStream, _retailFiscalDocument.AccessKey, environment);

        IEFDocMsgStream_BR returnStream = _transport.send();

        _messageFormat.read(returnStream, returnInfo);

        this.updateRetailFiscalTransData(_retailFiscalDocument, conPeek(sendStream.read(), 1), conPeek(returnStream.read(), 1), returnInfo);

        return returnInfo.parmReturnCodeStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailFiscalTransData</Name>
				<Source><![CDATA[
    private void updateRetailFiscalTransData(
        RetailFiscalDocument_BR _retailFiscalDocument,
        str _xmlReturnRequest,
        str _xmlReturnResponse,
        EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        ttsbegin;

        RetailTransactionFiscalTrans transactionFiscalTrans;

        str getStatusRequestStr = enum2Symbol(enumNum(EFDocWebService_BR), EFDocWebService_BR::Submit);

        select firstonly forupdate transactionFiscalTrans
        where transactionFiscalTrans.Channel == _retailFiscalDocument.Channel
            && transactionFiscalTrans.Store == _retailFiscalDocument.store
            && transactionFiscalTrans.Terminal == _retailFiscalDocument.terminal
            && transactionFiscalTrans.TransactionId == _retailFiscalDocument.transactionId
            && transactionFiscalTrans.RegisterInfo == getStatusRequestStr;

        transactionFiscalTrans.RegisterResponse = _xmlReturnResponse;

        if (!transactionFiscalTrans)
        {
            transactionFiscalTrans.Channel = _retailFiscalDocument.Channel;
            transactionFiscalTrans.Store = _retailFiscalDocument.store;
            transactionFiscalTrans.Terminal = _retailFiscalDocument.terminal;
            transactionFiscalTrans.TransactionId = _retailFiscalDocument.transactionId;
            transactionFiscalTrans.RegisterInfo = getStatusRequestStr;
        }

        transactionFiscalTrans.write();

        _retailFiscalDocument.selectForUpdate(true);
        _retailFiscalDocument.ApplicationVersion = _returnInfo.parmApplicationVersion();
        _retailFiscalDocument.ProtocolDate = _returnInfo.parmProcessDateTime();
        _retailFiscalDocument.ProtocolNumber = _returnInfo.parmProtocolNumber();
        _retailFiscalDocument.XmlReturnRequest = _xmlReturnRequest;
        _retailFiscalDocument.XmlReturnResponse = _xmlReturnResponse;
        _retailFiscalDocument.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquireEFDocumentStatusInAuthority</Name>
				<Source><![CDATA[
    private EFDocReturnCode_BR inquireEFDocumentStatusInAuthority(
        FiscalEstablishment_BR _fiscalEstablishment,
        RetailFiscalDocument_BR _retailFiscalDocument)
    {
        IEFDocMsgTransport transport = this.getTransport(_fiscalEstablishment, _retailFiscalDocument.Model);
        EFDocMsgFormat_XmlInquire_BR messageFormat = this.getMessageFormat(_fiscalEstablishment, _retailFiscalDocument.Model) as EFDocMsgFormat_XmlInquire_BR;

        return this.inquire(transport, messageFormat, _fiscalEstablishment, _retailFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFiscalDocument</Name>
				<Source><![CDATA[
    private FiscalDocument_BR postFiscalDocument(
        RetailFiscalDocument_BR _retailFiscalDocument,
        FiscalDocumentStatus_BR _fiscalDocumentStatus)
    {
        CustInvoiceJour custInvoiceJour = null;
        _retailFiscalDocument.Status = _fiscalDocumentStatus;

        RetailFiscalDocumentPost_BR fiscalDocumentPost = new RetailFiscalDocumentPost_BR(custInvoiceJour);
        fiscalDocumentPost.run(_retailFiscalDocument);

        return FiscalDocument_BR::findByAccessKey(_retailFiscalDocument.AccessKey, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the process of taking actions on the electronic fiscal documents with unknown status.
    /// </summary>
    [Hookable(false)]
    public void start()
    {
        Set selectedEFDocuments = new Set(Types::Record);
        Map efDocumentsPerFiscalEstablishment = this.getEFDocumentsPerFiscalEstablishment();
        MapEnumerator efDocumentsEnumerator = efDocumentsPerFiscalEstablishment.getEnumerator();
        EFDocFormatClassInfo_BR::checkDefaultData();

        while (efDocumentsEnumerator.moveNext())
        {
            try
            {
                FiscalEstablishmentId_BR fiscalEstablishmentId = efDocumentsEnumerator.currentKey();
                FiscalEstablishment_BR fiscalEstablishment = FiscalEstablishment_BR::findById(fiscalEstablishmentId);
                selectedEFDocuments = efDocumentsPerFiscalEstablishment.lookup(fiscalEstablishmentId);
                this.takeActionOnEFDocuments(fiscalEstablishment, selectedEFDocuments);
            }
            catch
            {
                // If the inquiry fails, then the problem is likely to be on the Tax Authority side.
                // In this case, we go to the next fiscal establishment on the map.
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeActionBasedOnReturnedStatus</Name>
				<Source><![CDATA[
    private void takeActionBasedOnReturnedStatus(
        FiscalDocumentStatus_BR _fiscalDocumentStatus,
        RetailFiscalDocument_BR _retailFiscalDocument)
    {
        RetailEFDocumentToBeInquiredStatus_BR status;
        FiscalDocument_BR fiscalDocument;

        ttsBegin;

        switch (_fiscalDocumentStatus)
        {
            case FiscalDocumentStatus_BR::Approved:
                EFDocAccessKey_BR approvedEfDocAccessKey;

                if (cancelBySubstitution)
                {
                    approvedEfDocAccessKey = this.getSubstitutionAccessKey(_retailFiscalDocument);
                }

                if (approvedEfDocAccessKey)
                {
                    status = RetailEFDocumentToBeInquiredStatus_BR::Canceled;

                    fiscalDocument = this.postFiscalDocument(_retailFiscalDocument, FiscalDocumentStatus_BR::CancelledBySubstitution);
                    this.cancelBySubstitutionFiscalDocument(fiscalDocument, approvedEfDocAccessKey);
                }
                else
                {
                    status = RetailEFDocumentToBeInquiredStatus_BR::Canceled;

                    fiscalDocument = this.postFiscalDocument(_retailFiscalDocument, FiscalDocumentStatus_BR::Cancelled);
                    this.cancelFiscalDocument(fiscalDocument);
                }
                break;

            case FiscalDocumentStatus_BR::Cancelled:
                status = RetailEFDocumentToBeInquiredStatus_BR::Canceled;

                this.postFiscalDocument(_retailFiscalDocument, FiscalDocumentStatus_BR::Cancelled);
                break;

            case FiscalDocumentStatus_BR::Rejected:
            case FiscalDocumentStatus_BR::RejectedNoFix:
                status = RetailEFDocumentToBeInquiredStatus_BR::Discarded;

                fiscalDocument = this.postFiscalDocument(_retailFiscalDocument, FiscalDocumentStatus_BR::Discarded);
                this.discardFiscalDocument(fiscalDocument);
                break;

            case FiscalDocumentStatus_BR::Discarded:
                status = RetailEFDocumentToBeInquiredStatus_BR::Discarded;

                this.postFiscalDocument(_retailFiscalDocument, FiscalDocumentStatus_BR::Discarded);
                break;

            case FiscalDocumentStatus_BR::Denied:
                status = RetailEFDocumentToBeInquiredStatus_BR::Denied;

                this.postFiscalDocument(_retailFiscalDocument, FiscalDocumentStatus_BR::Denied);
                break;

            case FiscalDocumentStatus_BR::Blank:
            default:
                status = RetailEFDocumentToBeInquiredStatus_BR::Unknown;
        }

        RetailEFDocumentToBeInquired_BR efDocumentToBeInquired = RetailEFDocumentToBeInquired_BR::findByRetailFiscalDocument(_retailFiscalDocument.RecId, true);
        efDocumentToBeInquired.Status = status;
        efDocumentToBeInquired.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeActionOnEFDocuments</Name>
				<Source><![CDATA[
    private void takeActionOnEFDocuments(
        FiscalEstablishment_BR _fiscalEstablishment,
        Set _retailEFDocuments)
    {
        SetEnumerator retailEFDocumentsEnumerator = _retailEFDocuments.getEnumerator();

        while (retailEFDocumentsEnumerator.moveNext())
        {
            try
            {
                RetailFiscalDocument_BR retailFiscalDocument = retailEFDocumentsEnumerator.current();

                EFDocReturnCode_BR returnCode = this.inquireEFDocumentStatusInAuthority(_fiscalEstablishment, retailFiscalDocument);
                EFDocInquiryReturnCodeAction_BR inquiryReturnCodeAction = new EFDocInquiryReturnCodeAction_BR(returnCode);

                this.takeActionBasedOnReturnedStatus(inquiryReturnCodeAction.status(), retailFiscalDocument);
            }
            catch
            {
                // We may not succeed in cancelling or discarding the fiscal document but should still try for the next ones.
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>RetailEFDocActionTaker_BR</c>.
    /// </summary>
    /// <returns>
    /// An instance of the <c>RetailEFDocActionTaker_BR</c> class.
    /// </returns>
    [Hookable(false)]
    public static RetailEFDocActionTaker_BR construct()
    {
        return new RetailEFDocActionTaker_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelBySubstitution</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmCancelBySubstitution(boolean _cancelBySubstitution = cancelBySubstitution)
    {
        cancelBySubstitution = _cancelBySubstitution;
        return cancelBySubstitution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelReasonComment</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Description parmCancelReasonComment(Description _cancelReasonComment = cancelReasonComment)
    {
        cancelReasonComment = _cancelReasonComment;
        return cancelReasonComment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>