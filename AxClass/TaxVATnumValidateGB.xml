<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVATnumValidateGB</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxVATnumValidateGB extends TaxVATNumValidate
{
    private const container formatGDHA = ['GD', 'HA'];
    private const int indicatorLength = 2;
    private const int mainPartLength = 9;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceGB00006, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGDHAFormat</Name>
				<Source><![CDATA[
    private boolean isGDHAFormat(VATNum _vatNum)
    {
        str formatIndicator = subStr(_vatNum, 1, indicatorLength);

        return conFind(formatGDHA, formatIndicator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modulo97</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the Modulo97 algorithm for the VAT number.
    /// </summary>
    /// <param name="_vatNumber">
    /// The stripped VAT number to validate.
    /// </param>
    /// <returns>
    /// true if the VAT number is a valid; otherwise false.
    /// </returns>
    private boolean modulo97(str _vatNumber)
    {
        const int modulo97 = 97;
        const int endDigit = 7;
        const int offsetPositive = 55;
        const int offsetNegative = 42;

        int pos, digit, result;

        boolean ret = true;

        for (pos = 1; pos <= endDigit; pos++)
        {
            digit = str2int(subStr(_vatNumber, pos, 1));
            result += digit * (mainPartLength - pos);
        }

        int checkSum = str2int(subStr(_vatNumber, pos, mainPartLength - endDigit));

        while (result > 0)
        {
            result -= modulo97;
        }

        result = any2Int(abs(result));

        if (result != checkSum)
        {
            if (result >= offsetPositive)
            {
                result -= offsetPositive;
            }
            else
            {
                result += offsetNegative;
            }

            if (result != checkSum)
            {
                ret = checkFailed("@SYS91679");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGDHAFormat</Name>
				<Source><![CDATA[
    private boolean validateGDHAFormat(VATNum _vatNum)
    {
        const int median = 500;
        const int numericPartLength = 3;

        boolean ret;

        str indicator   = subStr(_vatNum, 1, indicatorLength);
        str numericPart = strDel(_vatNum, 1, indicatorLength);

        ret = this.isNumeric(numericPart, numericPartLength);

        if (ret)
        {
            int number = str2int(numericPart);

            if ((indicator == conPeek(formatGDHA, 1) && number >= median)
                || (indicator == conPeek(formatGDHA, 2) && number < median))
            {
                ret = checkFailed("@SYS84772");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOthersFormat</Name>
				<Source><![CDATA[
    private boolean validateOthersFormat(VATNum _vatNum)
    {
        const int branchStart = 10;
        const int branchLength = 3;
        const int branchFormat = 12;

        boolean ret = true;
        str mainPart = _vatNum;

        if (strLen(_vatNum) == branchFormat)
        {
            int branch = str2int(subStr(_vatNum, branchStart, branchLength));
            mainPart = strDel(_vatNum, branchStart, branchLength);

            if (branch <= 0)
            {
                ret = checkFailed("@SYS84772");
            }
        }

        ret = ret && this.isNumeric(mainPart, mainPartLength);

        if (ret)
        {
            if (str2int(mainPart) > 0)
            {
                ret = this.modulo97(mainPart);
            }
            else
            {
                ret = checkFailed("@SYS84772");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVATNum</Name>
				<Source><![CDATA[
    boolean validateVATNum(VATNum _vatNum, LogisticsAddressCountryRegionId _countryRegionId = '')
    {
        boolean ret = true;

        if (_vatNum)
        {
            ret = this.isValidChars(_vatNum);

            if (ret)
            {
                if (this.isGDHAFormat(_vatNum))
                {
                    ret = this.validateGDHAFormat(_vatNum);
                }
                else
                {
                    ret = this.validateOthersFormat(_vatNum);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>