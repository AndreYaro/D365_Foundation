<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpItemizationManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TrvExpItemizationManager</c> class manages the interaction between the TrvExpenses form and the Calendar control
/// by fetching the subcategories for itemization, the itemized lines and also performing the CRUD operations for itemization
/// </summary>
class TrvExpItemizationManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>serializeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// A wrapper for the date2str method for the 'mm/dd/yyyy' format
    /// </summary>
    /// <param name = "dateValue">The date</param>
    /// <returns>
    /// A string that represents the date in the 'mm/dd/yyyy' format
    /// </returns>
    private static str serializeDate(date dateValue)
    {
        str dateValueLocal = date2Str
        (   dateValue,
            213,
            DateDay::Digits2,
            DateSeparator::Slash, // separator1
            DateMonth::Digits2,
            DateSeparator::Slash, // separator2
            DateYear::Digits4
        );
        return dateValueLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubCategoryList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of subcategories applicable for the cost type.
    /// </summary>
    /// <param name = "trvCostType">The cost type</param>
    /// <param name = "itemizedLineHeader">An expense that may have already used an inactive subcategory</param>
    /// <returns>
    /// List of <c>CalendarDataAttribute</c> that represents the subcategories of the cost type
    /// </returns>
    public static List getSubCategoryList(TrvCostType trvCostType, TrvExpTrans itemizedLineHeader = null)
    {
        List                        subcategoryList;
        TrvSharedSubCategory        trvSharedSubCategory;
        TrvExpSubCategory           trvExpSubCategory;
        int                         position;

        subcategoryList = new List(Types::Class);

        // The position variable determines the position of subcategory in the Calendar control and
        // guarantees that there are no gaps in the list
        position = 0;

        while select RecId, IsInactive from trvExpSubCategory
            order by DisplayOrder asc
            join Name, Description from trvSharedSubCategory
            where trvExpSubCategory.CostType == trvCostType.CostType 
                && trvSharedSubCategory.RecId == trvExpSubCategory.TrvSharedSubCategory
        {
            if (!trvExpSubCategory.IsInactive || 
                (itemizedLineHeader && TrvExpSubCategory::isSubCategoryUsedbyExpense(trvExpSubCategory.RecId, itemizedLineHeader.RecId)))
            {
                str id = int642str(trvExpSubCategory.RecId);
                CalendarDataAttribute itemizedCategory = new CalendarDataAttribute(id, trvSharedSubCategory.Name, position);

                itemizedCategory.parmIsEditable(true);
                itemizedCategory.parmDescription(trvSharedSubCategory.Description);

                subcategoryList.addEnd(itemizedCategory);
                position++;
            }
        }

        return subcategoryList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemizedLinesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the itemization lines for the an expense line
    /// </summary>
    /// <param name = "itemizedLineHeader">The expense line to itemize</param>
    /// <param name = "itemizedLinesDS">Data source with the itemized lines</param>
    /// <returns>
    /// List of <c>CalendarDataEntry</c> that represents the itemized lines for the expense line
    /// </returns>
    public static List getItemizedLinesList(TrvExpTrans itemizedLineHeader, FormDataSource itemizedLinesDS)
    {
        List        itemizedLinesList;
        TrvExpTrans itemizedLine;
        boolean     isCreditCardTransactionInLocalCurrency = itemizedLineHeader.isCreditCardTransanctionInLocalCurrency();
        itemizedLinesList = new List(Types::Class);

        for ( itemizedLine = itemizedLinesDS.getFirst(); itemizedLine; itemizedLine = itemizedLinesDS.getNext())
        {
            if (itemizedLine.ParentRecId == itemizedLineHeader.RecId)
            {
                CalendarDay             column;
                CalendarDataAttribute   row;
                CalendarDataEntry       cellEntry;
                str                     rowId;
                str                     cellId;

                column = new CalendarDay(TrvExpItemizationManager::serializeDate(itemizedLine.TransDate));
                rowId = int642str(itemizedLine.SubCategoryRecId);
                row = new CalendarDataAttribute(rowId);
                cellId = int642str(itemizedLine.RecId);

                if (isCreditCardTransactionInLocalCurrency)
                {
                    cellEntry = new CalendarDataEntry(cellId, itemizedLine.CreditCardTransactionCurrencyAmount, row, column);
                }
                else
                {
                    cellEntry = new CalendarDataEntry(cellId, itemizedLine.AmountCurr, row, column);
                }

                itemizedLinesList.addEnd(cellEntry);
            }
        }

        return itemizedLinesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the configurations for the the Calendar control for an expense line
    /// </summary>
    /// <param name = "expenseLine">The expense line</param>
    /// <returns>
    /// <c>CalendarOptions</c> that represents the configurations for the Calendar control
    /// </returns>
    public static CalendarOptions getCalendarOptions(TrvExpTrans expenseLine)
    {
        // the limit date will be a year from transaction date.
        date startDate = expenseLine.TransDate - 365;
        date endDate = expenseLine.TransDate + 365;

        CalendarOptions calendarOptions = new CalendarOptions(TrvExpItemizationManager::serializeDate(startDate), TrvExpItemizationManager::serializeDate(endDate));
        calendarOptions.parmDefaultStartDate(TrvExpItemizationManager::serializeDate(expenseLine.TransDate));
        calendarOptions.parmInactiveDatesFuture(false);
        return calendarOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditCardExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Estimates an exchange rate based on the <c>AmountCurr</c> and <c>AmountLocal</c> values from a
    /// credit card line in the <c>TrvPBSMaindata</c> object.
    /// </summary>
    /// <param name="_lineType">
    /// Indicates whether the next parameter is an itemizedLine or an itemizedHeader.
    /// </param>
    /// <param name="_trvExpTransRecId">
    /// A record ID of the row in the <c>TrvExpTrans</c> table that is used to map back to the credit card
    /// line.
    /// </param>
    /// <param name="_splitLineType">
    /// Expense split line type.
    /// </param>
    /// <returns>
    /// A container that contains the exchange rate, transaction currency code, and credit card currency
    /// code; otherwise, If no matching credit card record is found, this method returns <c>connull</c>.
    /// </returns>
    /// <remarks>
    /// The rate determined by this method is not a  exchange rate. It is a factor that is used to
    /// calculate between credit card amounts in the credit card currency and the currency in which the
    /// underlying transaction was recorded. This number is used in the itemization UI, which enables a
    /// user to enter itemized lines in the transaction currency despite that the expense line was recorded
    /// in the credit card currency.
    /// </remarks>
    public static container creditCardExchangeRate(TrvExpLineType _lineType , RefRecId _trvExpTransRecId, TrvExpSplitLineType _splitLineType = TrvExpSplitLineType::NoSplit)
    {
        ExchRate          exchRate = 1;  // for when we cannot calculate a value
        TrvPBSMaindata    trvPBSMaindata;
        TrvExpTrans       itemizedHeader, itemizedLine, splitHeader;
        CurrencyCode      currencyCodeLocal = '',
                          currencyCodeCurr = '';

        // pull local currency code from corresponding TrvPBSMainData row
        if ( _lineType == TrvExpLineType::ItemizedLine )
        {
            if (_splitLineType != TrvExpSplitLineType::SplitLine)
            {
                select firstonly RecId, ParentRecId from itemizedLine
                    where itemizedLine.RecId == _trvExpTransRecId
                    join RecId, pbsRecId from itemizedHeader where itemizedHeader.RecId == itemizedLine.ParentRecId
                    join AmountCurr, AmountLocal, ExchCodeLocal, ExchCode from trvPBSMaindata where trvPBSMaindata.RecId == itemizedHeader.pbsRecId;
            }
            else
            {
                select firstonly RecId, ParentRecId from itemizedLine
                        where itemizedLine.RecId == _trvExpTransRecId
                    join RecId, pbsRecId from itemizedHeader 
                        where itemizedHeader.RecId == itemizedLine.ParentRecId
                    join RecId, PBSRecId from splitHeader
                        where splitHeader.RecId == itemizedHeader.ParentRecId
                    join AmountCurr, AmountLocal, ExchCodeLocal, ExchCode from trvPBSMaindata where trvPBSMaindata.RecId == splitHeader.pbsRecId;
            }
        }
        else
        {
            if (_splitLineType != TrvExpSplitLineType::SplitLine)
            {
                select firstonly RecId, pbsRecId from itemizedHeader
                    where itemizedHeader.RecId == _trvExpTransRecId
                    join AmountCurr, AmountLocal, ExchCodeLocal, ExchCode from trvPBSMaindata where trvPBSMaindata.RecId == itemizedHeader.pbsRecId;
            }
            else
            {
                select firstonly RecId, pbsRecId from itemizedHeader
                        where itemizedHeader.RecId == _trvExpTransRecId
                    join  RecId, PBSRecId from splitHeader
                        where splitHeader.RecId == itemizedHeader.ParentRecId
                    join AmountCurr, AmountLocal, ExchCodeLocal, ExchCode from trvPBSMaindata where trvPBSMaindata.RecId == splitHeader.pbsRecId;
            }
        }

        if ( trvPBSMaindata.RecId != 0 && trvPBSMaindata.AmountCurr != 0 && trvPBSMaindata.AmountLocal != 0 )
        {
            exchRate = trvPBSMaindata.AmountLocal / trvPBSMaindata.AmountCurr;
            currencyCodeLocal = trvPBSMaindata.ExchCodeLocal;
            currencyCodeCurr = trvPBSMaindata.ExchCode;

            return [exchRate, currencyCodeLocal, currencyCodeCurr];
        }
        else
        {
            return conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currFromLocal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an amount in transaction currency to credit card currency.
    /// </summary>
    /// <param name="_amountLocal">
    /// The amount to convert, in transaction currency.
    /// </param>
    /// <param name="_lineType">
    /// The type of <c>TrvExpTrans</c> line that is specified; this value can be one of the
    /// <c>TrvExpLineType::ItemizedHeader</c> or <c>TrvExpLineType::ItemizedLine</c> enumeration types.
    /// </param>
    /// <param name="_trvExpTransRecId">
    /// The primary key of the <c>TrvExpTrans</c> table row that corresponds to this amount.
    /// </param>
    /// <param name="_splitLineType">
    /// Expense split line type.
    /// </param>
    /// <returns>
    /// The converted amount, in credit card currency.
    /// </returns>
    /// <remarks>
    /// This method looks up the exchange rate and currency codes from the corresponding
    /// <c>TrvPBSMaindata</c> record and uses this information to convert the currency. If there is no
    /// corresponding record, it returns the value specified in the <paramref name="_amountLocal" />
    /// parameter.
    /// </remarks>
    public static Amount currFromLocal( Amount _amountLocal, TrvExpLineType _lineType, RefRecId _trvExpTransRecId, TrvExpSplitLineType _splitLineType = TrvExpSplitLineType::NoSplit)
    {
        Amount          amountCurr = _amountLocal;
        container       conv = TrvExpItemizationManager::creditCardExchangeRate( _lineType, _trvExpTransRecId, _splitLineType);
        ExchRate        exchRate;
        CurrencyCode    currencyCodeLocal;

        if ( conv != conNull() )
        {
            exchRate = conPeek(conv,1);
            currencyCodeLocal = conPeek(conv,2);
            amountCurr = TrvExpItemizationManager::currFromLocalWithRate( _amountLocal, exchRate, currencyCodeLocal );
        }

        return amountCurr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currFromLocalWithRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the amount in transaction currency to credit card currency.
    /// </summary>
    /// <param name="_amountLocal">
    /// The amount in transaction currency.
    /// </param>
    /// <param name="_exchRate">
    /// The exchange rate as returned by the <c>EPTrvItemization::creditCardExchangeRate</c> method.
    /// </param>
    /// <param name="_currencyCodeCurr">
    /// The currency code that corresponds to the credit card currency; this is to make sure correct
    /// rounding is used.
    /// </param>
    /// <returns>
    /// The amount in credit card currency.
    /// </returns>
    public static Amount currFromLocalWithRate( Amount _amountLocal, ExchRate _exchRate, CurrencyCode _currencyCodeCurr )
    {
        return CurrencyExchangeHelper::amount(_amountLocal / _exchRate, _currencyCodeCurr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>localFromCurr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an amount in credit card currency to transaction currency.
    /// </summary>
    /// <param name="_amountCurr">
    /// The amount to convert in credit card currency.
    /// </param>
    /// <param name="_lineType">
    /// The type of <c>TrvExpTrans</c> line specified; this value can be either the
    /// <c>TrvExpLineType::ItemizedHeader</c> or the <c>TrvExpLineType::ItemizedLine</c> enumeration value.
    /// </param>
    /// <param name="_trvExpTransRecId">
    /// The primary key of the <c>TrvExpTrans</c> table row that corresponds to this amount.
    /// </param>
    /// <param name="_splitLineType">
    /// Expense split line type.
    /// </param>
    /// <returns>
    /// The converted amount in transaction currency.
    /// </returns>
    /// <remarks>
    /// This method looks up the exchange rate and currency codes from the corresponding
    /// <c>TrvPBSMaindata</c> record and uses this information to convert. When there is no corresponding
    /// record, this method returns the value specified in  the <paramref name="_amountLocal" /> parameter.
    /// </remarks>
    public static Amount localFromCurr( Amount _amountCurr, TrvExpLineType _lineType, RefRecId _trvExpTransRecId, TrvExpSplitLineType _splitLineType = TrvExpSplitLineType::NoSplit)
    {
        Amount          amountLocal = _amountCurr;
        container       conv = TrvExpItemizationManager::creditCardExchangeRate( _lineType, _trvExpTransRecId, _splitLineType);
        ExchRate        exchRate;
        CurrencyCode    currencyCodeLocal;

        if ( conv != conNull() )
        {
            [exchRate, currencyCodeLocal] = conv;
            amountLocal = TrvExpItemizationManager::localFromCurrWithRate( _amountCurr, exchRate, currencyCodeLocal );
        }

        return amountLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>localFromCurrWithRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts amount in credit card currency to transaction currency.
    /// </summary>
    /// <param name="_amountCurr">
    /// The amount in credit card currency.
    /// </param>
    /// <param name="_exchRate">
    /// The exchange rate specified by the <c>EPTrvItemization ::creditCardExchangeRate</c> method.
    /// </param>
    /// <param name="_currencyCodeLocal">
    /// A currency code that corresponds to the transaction currency; this is to make sure correct rounding
    /// is used.
    /// </param>
    /// <returns>
    /// The amount in transaction currency.
    /// </returns>
    public static Amount localFromCurrWithRate( Amount _amountCurr, ExchRate _exchRate, CurrencyCode _currencyCodeLocal )
    {
        return CurrencyExchangeHelper::amount(_amountCurr * _exchRate, _currencyCodeLocal);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>