<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalPreviewDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalPreviewDP</c> class is the data provider for the <c>LedgerJournalPreview</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(LedgerJournalPreviewContract))]
public class LedgerJournalPreviewDP extends SrsReportDataProviderPreProcessTempDB
{
    LedgerTransPreviewTmp_RU    ledgerTransPreviewTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillPostedData</Name>
				<Source><![CDATA[
    private void fillPostedData(LedgerJournalId _journalNumber)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        DimensionAttributeValueCombination  dimAttrValueCombination;
        GeneralJournalEntry                 generalJournalEntry;
        LedgerEntryJournal                  ledgerEntryJournal;
        MainAccount                         mainAccount;

        while select sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount) from generalJournalAccountEntry
                group by generalJournalAccountEntry.TransactionCurrencyCode, mainAccount.MainAccountId, mainAccount.Name
            join RecId from dimAttrValueCombination
                where dimAttrValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
            join RecId, MainAccountId from mainAccount
                where mainAccount.RecId == dimAttrValueCombination.MainAccount
            join RecId from generalJournalEntry
                where generalJournalEntry.RecId  == generalJournalAccountEntry.GeneralJournalEntry
                   && generalJournalEntry.Ledger == Ledger::current()
            join RecId from ledgerEntryJournal
                where ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal
                       && ledgerEntryJournal.JournalNumber  == _journalNumber
        {
            ledgerTransPreviewTmp.MainAccountId = mainAccount.MainAccountId;

            // As this is scoped by Ledger::current() and we cannot add mainAccount.RecId into the while, we will lookup by name for the default chart of accounts
            ledgerTransPreviewTmp.MainAccountName = MainAccount::getLocalizedNameByMainAccountId(mainAccount.MainAccountId);

            ledgerTransPreviewTmp.AmountCur = generalJournalAccountEntry.TransactionCurrencyAmount;
            ledgerTransPreviewTmp.AmountMST = generalJournalAccountEntry.AccountingCurrencyAmount;
            ledgerTransPreviewTmp.CurrencyCode = generalJournalAccountEntry.TransactionCurrencyCode;

            ledgerTransPreviewTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPreviewData</Name>
				<Source><![CDATA[
    private void fillPreviewData(RecId _tmpTableDataRecId)
    {
        TmpLedgerTransPreview_RU    ledgerTransPreviewSource;
        MainAccount                 mainAccount;
        SRSReportRunPermission      permission;

        // temporarily enable access to data cache
        permission = new SRSReportRunPermission();
        permission.assert();

        ledgerTransPreviewSource = SRSTmpTblMarshaller::getTmpTbl(_tmpTableDataRecId);
        SRSTmpTblMarshaller::deleteTmpTblData(_tmpTableDataRecId);

        // revert code access permissions
        CodeAccessPermission::revertAssert();

        while select sum(AmountCur), sum(AmountMST) from ledgerTransPreviewSource
            group by CurrencyCode, MainAccount
        {
            mainAccount = MainAccount::find(ledgerTransPreviewSource.MainAccount);

            ledgerTransPreviewTmp.MainAccountId = mainAccount.MainAccountId;
            ledgerTransPreviewTmp.MainAccountName = mainAccount.localizedName();

            ledgerTransPreviewTmp.AmountCur = ledgerTransPreviewSource.AmountCur;
            ledgerTransPreviewTmp.AmountMST = ledgerTransPreviewSource.AmountMST;
            ledgerTransPreviewTmp.CurrencyCode = ledgerTransPreviewSource.CurrencyCode;

            ledgerTransPreviewTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransPreviewTmp_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>LedgerTransPreviewTmp_RU</c> record.
    /// </summary>
    /// <returns>
    ///     The the <c>LedgerTransPreviewTmp_RU</c> record.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerTransPreviewTmp_RU))]
    public LedgerTransPreviewTmp_RU getLedgerTransPreviewTmp_RU()
    {
        select ledgerTransPreviewTmp;
        return ledgerTransPreviewTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// SSRS at runtime. The method should compute data and populate the data tables that will be returned
    /// to SSRS. This is a framework class. Customizing this class may cause problems with future upgrades
    /// to the software.
    /// </remarks>
    public void processReport()
    {
        LedgerJournalPreviewContract    contract;
        LedgerJournalId                 journalNumber;
        RecId                           tmpTableDataRecId;

        // Get contract info
        contract = this.parmDataContract() as LedgerJournalPreviewContract;
        journalNumber = contract.parmJournalNumber();

        // Check for posted journal (journalNumber is non-empty if posted)
        if (journalNumber)
        {
            this.fillPostedData(journalNumber);
        }
        else
        {
            tmpTableDataRecId = contract.parmTmpTableDataRecId();
            if (tmpTableDataRecId)
            {
                this.fillPreviewData(tmpTableDataRecId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>