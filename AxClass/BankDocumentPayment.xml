<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankDocumentElectronicPaym</c> class is the business class of bank document for electronic payment.
/// </summary>
abstract class BankDocumentPayment extends BankDocument
{
    LedgerJournalTrans  ledgerJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank document amount.
    /// </summary>
    /// <returns>
    ///     The Bank document amount.
    /// </returns>
    /// <remarks>
    ///     If there is any correction amount, the returned amount includes the correction amount.
    /// </remarks>
    public AmountCur getBankCurrencyAmount()
    {
        AmountCur bankCurrencyAmount;

        bankCurrencyAmount = documentMap.parmBankCurrencyAmount();

        if (!this.isCorrectionAmountUpdated())
        {
            bankCurrencyAmount += documentTable.getCorrectionBankCurrencyAmount();
        }

        return bankCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyCode</Name>
				<Source><![CDATA[
        public CurrencyCode getBankCurrencyCode()
    {
        return ledgerJournalTrans.BankCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankTransType</Name>
				<Source><![CDATA[
        public BankTransactionType getBankTransType()
    {
        return ledgerJournalTrans.BankTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
        [HookableAttribute(false)]
        public TransactionTextLarge getDescription()
    {
        return ledgerJournalTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
        public Num getDocumentNum()
    {
        return ledgerJournalTrans.DocumentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the original bank document amount.
    /// </summary>
    /// <returns>
    ///     The Bank document amount.
    /// </returns>
    /// <remarks>
    ///     The amount does not include correction amount.
    /// </remarks>
    public AmountCur getOriginalBankCurrencyAmount()
    {
        AmountCur bankCurrencyAmount;

        bankCurrencyAmount = documentMap.parmBankCurrencyAmount();

        if (this.isCorrectionAmountUpdated())
        {
            bankCurrencyAmount -= documentTable.getCorrectionBankCurrencyAmount();
        }

        return bankCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrignalBankDocumentStatusName</Name>
				<Source><![CDATA[
        public BankDocumentOrigDocumentStatus getOrignalBankDocumentStatusName()
    {
        return enum2str(ledgerJournalTrans.PaymentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPosted</Name>
				<Source><![CDATA[
        public JournalPosted getPosted()
    {
        return LedgerJournalTable::find(ledgerJournalTrans.JournalNum).Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReference</Name>
				<Source><![CDATA[
        public PaymReference getReference()
    {
        return ledgerJournalTrans.PaymReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyAccount</Name>
				<Source><![CDATA[
        public AccountNum getRelatedPartyAccount()
    {
        AccountNum    accountNum;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Bank)
        {
            accountNum = ledgerJournalTrans.parmOffsetAccount();
        }
        else if (ledgerJournalTrans.OffsetAccountType  == LedgerJournalACType::Bank)
        {
            accountNum = ledgerJournalTrans.parmAccount();
        }

        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyCompany</Name>
				<Source><![CDATA[
        public CompanyId getRelatedPartyCompany()
    {
        CompanyId company;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Bank)
        {
            company = ledgerJournalTrans.OffsetCompany;
        }
        else if (ledgerJournalTrans.OffsetAccountType  == LedgerJournalACType::Bank)
        {
            company = ledgerJournalTrans.Company;
        }

        return company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
        public CurrencyCode getTransactionCurrency()
    {
        return ledgerJournalTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyAmount</Name>
				<Source><![CDATA[
        public AmountCur getTransactionCurrencyAmount()
    {
        return ledgerJournalTrans.getBankTransactionCurrencyAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionDate</Name>
				<Source><![CDATA[
        public TransDate getTransactionDate()
    {
        return ledgerJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCorrectionAmountUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the payment amount has been updated for the correction amount.
    /// </summary>
    /// <returns>
    /// True if the payment amount has been updated for the correction amount; otherwise, false.
    /// </returns>
    private boolean isCorrectionAmountUpdated()
    {
        boolean result;

        if (this.getIsReconciled()
            && documentTable.isWithCorrection()
            && !BankAccountTrans::findBySource(documentMap.TableId, documentMap.RecId).AmountCorrect)
        {
            result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSourceBuffer</Name>
				<Source><![CDATA[
        protected void loadSourceBuffer()
    {
        ledgerJournalTrans = documentMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankDocumentStateChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deals with the event of bank document state change.
    /// </summary>
    /// <param name="_bankDocumentState">
    /// The bank document state.
    /// </param>
    protected void processBankDocumentStateChanged(BankDocumentState _bankDocumentState)
    {
        ttsBegin;

        this.processLedgerJournalTransPaymStatus(
            ledgerJournalTrans,
            _bankDocumentState.parmBankDocumentStatusChangeType());

        this.processBankAccountTransReconcileStatus(_bankDocumentState.parmBankDocumentStatusChangeType());
        this.processPaymentCorrection(_bankDocumentState.parmBankDocumentStatusChangeType());

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerJournalTransPaymStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the payment status of electronic payment.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The electronic payment.
    /// </param>
    /// <param name="_changeType">
    /// The bank document status change type.
    /// </param>
    protected void processLedgerJournalTransPaymStatus(
        LedgerJournalTrans              _ledgerJournalTrans,
        BankDocumentStatusChangeType    _changeType)
    {
        ttsBegin;
        _ledgerJournalTrans.selectForUpdate(true);
        switch (_changeType)
        {
            case BankDocumentStatusChangeType::Reconcile:
                _ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Recieved;
                break;

            case BankDocumentStatusChangeType::ReverseReconcile:
                _ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Sent;
                break;
        }
        _ledgerJournalTrans.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPaymentCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes payment correction amount.
    /// </summary>
    /// <param name="_changeType">
    /// The bank document state change type.
    /// </param>
    /// <remarks>
    /// For the unposted payment, if the transaction currency amount, the bank currency amount or the exchange rate
    /// has been ajusted in the reconciliation, the original fields value is not kept and they are not reverted
    /// back when the reconcilation is canceled.
    /// </remarks>
    protected void processPaymentCorrection(BankDocumentStatusChangeType    _changeType)
    {
        BankAccountTrans bankAccountTransLocal;

        if (documentTable.isWithCorrection())
        {
            if (_changeType == BankDocumentStatusChangeType::Reconcile)
            {
                if (ledgerJournalTrans.ledgerJournalTable().Posted)
                {
                    //deal with its bank transaction
                    bankAccountTransLocal = BankAccountTrans::findBySource(
                        ledgerJournalTrans.TableId,
                        ledgerJournalTrans.RecId);
                    BankDocument::postBankTransactionCorrection(bankAccountTransLocal.RecId, documentTable.getCorrectionBankCurrencyAmount());
                }
                else
                {
                    //deal with the payment
                    this.updatePaymentCorrectionAmount();

                    if (FeatureStateProvider::isFeatureEnabled(BankReconReverseCorrectAsPaymConfirmEnabledFeature::instance()))
                    {
                        // When bank reconciliation is earlier than payment posting with correction amount exists, the payment amount has already updated as the bank transaction amount during reconciliation,
                        // the correction amount is 0 for bank transaction, the correction amount should be cleared for bank document.
                        BankDocumentTable::updateCorrectionBankCurrencyAmount(documentTable.RecId, 0);
                        documentTable.reread();
                    }
                }
            }
            else if (_changeType == BankDocumentStatusChangeType::ReverseReconcile)
            {
                if (ledgerJournalTrans.ledgerJournalTable().Posted)
                {
                    if (FeatureStateProvider::isFeatureEnabled(BankReconReverseCorrectAsPaymConfirmEnabledFeature::instance()))
                    {
                        bankAccountTransLocal = BankAccountTrans::findBySource(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId);

                        if (bankAccountTransLocal.AmountCorrect)
                        {
                            // When bank reconciliation is later than payment posting with correction amount exists, the correction amount has already posted to payment voucher,
                            // need reverse bank transaction correction.
                            BankDocument::reverseBankTransactionCorrection(bankAccountTransLocal.RecId);
                        }
                    }
                    else
                    {
                        throw error("@SYS4082367");
                    }
                }
                else
                {
                    //clear correction amount
                    BankDocumentTable::updateCorrectionBankCurrencyAmount(documentTable.RecId, 0);
                    documentTable.reread();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentAmountDebitCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the payment debit credit amount.
    /// </summary>
    /// <param name="_amountCur">
    /// The updated amount.
    /// </param>
    private void updatePaymentAmountDebitCredit(AmountCur _amountCur)
    {
        //try positive first
        if (ledgerJournalTrans.AmountCurDebit != 0)
        {
            ledgerJournalTrans.AmountCurDebit = _amountCur;
        }
        else
        {
            ledgerJournalTrans.AmountCurCredit = _amountCur;
        }

        if (ledgerJournalTrans.getBankTransactionCurrencyAmount() != _amountCur)
        {
            //try negative side
            if (ledgerJournalTrans.AmountCurDebit != 0)
            {
                ledgerJournalTrans.AmountCurDebit = -_amountCur;
            }
            else
            {
                ledgerJournalTrans.AmountCurCredit = -_amountCur;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentCorrectionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates payment journal amount.
    /// </summary>
    private void updatePaymentCorrectionAmount()
    {
        AmountCur               transactionCurrencyAmount;
        boolean                 isTransactionCurrencyAmountAjusted;
        CurrencyCode            bankCurrencyCode;
        BankStmtISOReportEntry  statementLine;
        ExchRate                combinedExchRate;
        #define.ExchangeRateFactor(100)

        ttsBegin;
        ledgerJournalTrans.selectForUpdate(true);

        bankCurrencyCode = this.getBankCurrencyCode();

        //update the bank currency amount
        ledgerJournalTrans.BankCurrencyAmount += documentTable.getCorrectionBankCurrencyAmount();

        //update the transaction currency amount when the transaction currecy is same as bank currency
        //or the transaction currency amount is provided in bank statement line.
        if (bankCurrencyCode == ledgerJournalTrans.CurrencyCode)
        {
            transactionCurrencyAmount = ledgerJournalTrans.BankCurrencyAmount;
            isTransactionCurrencyAmountAjusted = true;
        }
        else
        {
            statementLine = documentTable.getMatchingStatementLine();
            CurrencyCodeISO ledgerJournalTransCurrencyCodeISO = Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode);
            AmountCur bankTransactionCurrencyAmount = ledgerJournalTrans.getBankTransactionCurrencyAmount();

            if (statementLine.BankStatementCounterCurrency == ledgerJournalTransCurrencyCodeISO
                && statementLine.BankStatementCounterCurrencyAmount
                && statementLine.BankStatementCounterCurrencyAmount != bankTransactionCurrencyAmount)
            {
                transactionCurrencyAmount = statementLine.BankStatementCounterCurrencyAmount;
                isTransactionCurrencyAmountAjusted = true;
            }
            else if (statementLine.BankStatementInstructedCurrency == ledgerJournalTransCurrencyCodeISO
                && statementLine.BankStatementInstructedCurrencyAmt
                && statementLine.BankStatementInstructedCurrencyAmt != bankTransactionCurrencyAmount)
    
            {
                transactionCurrencyAmount = statementLine.BankStatementInstructedCurrencyAmt;
                isTransactionCurrencyAmountAjusted = true;
            }
        }
        if (isTransactionCurrencyAmountAjusted)
        {
            //try update the payment amount based on correction amount
            this.updatePaymentAmountDebitCredit(transactionCurrencyAmount);
        }

        //update the exchange rate when the bank currency is same as accounting currency and different from transaction currency amount, adjust the exchange rate
        if (bankCurrencyCode    != ledgerJournalTrans.CurrencyCode
            && bankCurrencyCode == Ledger::accountingCurrency())
        {
            combinedExchRate = CurrencyExchange::calculateExchangeRate(
                ledgerJournalTrans.getBankTransactionCurrencyAmount(),
                ledgerJournalTrans.BankCurrencyAmount);

            if (ledgerJournalTrans.ExchRateSecond)
            {
                if (ExchangeRateHelper::isExchangeRate1Editable_Static(
                        Ledger::current(),
                        ledgerJournalTrans.CurrencyCode,
                        ledgerJournalTrans.TransDate))
                {
                    ledgerJournalTrans.ExchRate = (ledgerJournalTrans.ExchRateSecond * #ExchangeRateFactor) / combinedExchRate;
                }
                else if (ExchangeRateHelper::isExchangeRate2Editable_Static(
                        Ledger::current(),
                        ledgerJournalTrans.CurrencyCode,
                        ledgerJournalTrans.TransDate))
                {
                    ledgerJournalTrans.ExchRateSecond = (combinedExchRate * ledgerJournalTrans.ExchRate) / #ExchangeRateFactor;
                }
            }
            else
            {
                if (ExchangeRateHelper::isExchangeRate1Editable_Static(
                        Ledger::current(),
                        ledgerJournalTrans.CurrencyCode,
                        ledgerJournalTrans.TransDate))
                {
                    ledgerJournalTrans.ExchRate = combinedExchRate;
                }
            }
        }

        ledgerJournalTrans.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndToEndId</Name>
				<Source><![CDATA[
    public PaymentEndToEndId getEndToEndId()
    {
        return ledgerJournalTrans.iso20022EndToEndId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymId</Name>
				<Source><![CDATA[
    public PaymId getPaymId()
    {
        return ledgerJournalTrans.PaymId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>