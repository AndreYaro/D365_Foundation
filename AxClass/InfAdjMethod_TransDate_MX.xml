<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InfAdjMethod_TransDate_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c> InfAdjMethod_TransDate_MX</c> class handles the calculation of the inflation adjustment for
///    the transaction date adjustment method and returns the buffer of the temporary
///    <c>CapitalAdjReportTmp_MX</c> table, which is used for posting and reports.
/// </summary>
public class InfAdjMethod_TransDate_MX extends InfAdjMethod_MX
{
    GeneralJournalEntry                     generalJournalEntry;
    GeneralJournalAccountEntry              generalJournalAccountEntry;
    DimensionAttributeValueCombination      dimensionAttributeValueCombination;
    DimensionDisplayValue                   displayValue;
    LedgerDimensionAccount                  ledgerDimension;
    FiscalCalendarPeriod                    fiscalCalendarPeriod;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the functional currency amount.
    /// </summary>
    /// <param name="_startDate">
    /// The earliest date to consider for the transactions.
    /// </param>
    /// <param name="_endDate">
    /// The latest date to consider for the transactions.
    /// </param>
    /// <param name="_mainAccountRecId">
    /// The record ID of the account for which the transactions are retrieved.
    /// </param>
    /// <param name="_periodType">
    /// The period type that determines the type of transactions.
    /// </param>
    /// <param name="_displayValue">
    /// The display value of the main account with the combination of dimensions.
    /// </param>
    /// <param name="_considerInfAdj">
    /// A Boolean value that indicates whether to consider transactions that have the posting type of
    /// inflation adjustment; optional.
    /// </param>
    /// <returns>
    /// The accounting currency amount for an account and date range, considering the type of transaction.
    /// </returns>
    protected AmountMSTDebCred getAccountingCurrencyAmount(
        FromDate                _startDate,
        ToDate                  _endDate,
        RecId                   _mainAccountRecId,
        FiscalPeriodType        _periodType = FiscalPeriodType::Closing,
        DimensionDisplayValue   _displayValue = '',
        boolean                 _considerInfAdj = false)
    {
        DimensionAttributeValueCombination dimensionAttributeValueCombi;
        GeneralJournalAccountEntry         generalJournalAccEntry;

        select sum(AccountingCurrencyAmount) from generalJournalAccountEntry
            where generalJournalAccountEntry.PostingType                != LedgerPostingType::InflationAdjustment_MX
            join RecId, DisplayValue from dimensionAttributeValueCombination
                group by dimensionAttributeValueCombination.DisplayValue
                where dimensionAttributeValueCombination.RecId          == generalJournalAccountEntry.LedgerDimension
                   && dimensionAttributeValueCombination.MainAccount    == _mainAccountRecId
            join RecId from generalJournalEntry
                where generalJournalAccountEntry.GeneralJournalEntry    == generalJournalEntry.RecId
                   && generalJournalEntry.Ledger                        == Ledger::current()
                   && generalJournalEntry.AccountingDate                >= _startDate
                   && generalJournalEntry.AccountingDate                <= _endDate
            join RecId from fiscalCalendarPeriod
                where generalJournalEntry.FiscalCalendarPeriod          == fiscalCalendarPeriod.RecId
                   && fiscalCalendarPeriod.Type                         != _periodType;

        displayValue    = dimensionAttributeValueCombination.DisplayValue;

        select firstonly RecId
            from dimensionAttributeValueCombi
            exists join LedgerDimension from generalJournalAccEntry
            where dimensionAttributeValueCombi.RecId        == generalJournalAccEntry.LedgerDimension
               && dimensionAttributeValueCombi.DisplayValue == displayValue
               && dimensionAttributeValueCombi.MainAccount  == _mainAccountRecId;

        ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimFromLedgerDim(dimensionAttributeValueCombi.RecId);

        return generalJournalAccountEntry.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates according to the <c>CapitalAdjReportTmp_MX</c> temporary table for the transaction date
    ///    adjustment method.
    /// </summary>
    /// <param name="_fromDate">
    ///    The from date to be considered to select the range of transactions.
    /// </param>
    /// <param name="_toDate">
    ///    The start date to be considered to select a range of transactions.
    /// </param>
    /// <returns>
    ///    The buffer from the temporary <c>CapitalAdjReportTmp_MX</c> table after the calculation of the
    ///    inflation adjustment for the transaction date adjustment method.
    /// </returns>
    /// <remarks>
    ///    This method considers main accounts that meet the criteria for capital accounts and calculates the
    ///    inflation adjustment based on the formula defined.
    /// </remarks>
    public Common populateTmpTable(
        FromDate  _fromDate,
        ToDate    _toDate)
    {
        CapitalAdjReportTmp_MX  capitalTmp;
        MainAccount             mainAccount;
        FromDate                startDate;
        ToDate                  endDate;
        InpcRate_MX             rateOfToDate;
        CurrencyCode            currencyCode;
        boolean                 insertedCurrencyCode = false;

        fromDate = _fromDate;
        toDate   = _toDate;

        rateOfToDate = this.getInflationRate(mthofyr(toDate), year(toDate));
        currencyCode = Ledger::accountingCurrency();

        while select Type, RecId from mainAccount
            where mainAccount.InflationAdjustment_MX
               && mainAccount.AdjustmentMethod_MX == AdjustmentMethod_MX::TransactionDate
               && (mainAccount.Type               == DimensionLedgerAccountType::BalanceSheet
               || mainAccount.Type                == DimensionLedgerAccountType::Asset
               || mainAccount.Type                == DimensionLedgerAccountType::Liability
               || mainAccount.Type                == DimensionLedgerAccountType::Equity)
        {
            capitalTmp.AdjustmentMethod = AdjustmentMethod_MX::TransactionDate;

            select * from generalJournalAccountEntry
                join RecId from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                       && dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
                join RecId, minof(AccountingDate) from generalJournalEntry
                    where generalJournalEntry.RecId          == generalJournalAccountEntry.GeneralJournalEntry;

            if (generalJournalEntry.AccountingDate)
            {
                startDate            = generalJournalEntry.AccountingDate;
                endDate              = endmth(startDate);
            }

            while (endDate <= toDate)
            {
                capitalTmp.TransDate    = startDate;
                capitalTmp.TransAmount  = 0;

                capitalTmp.TransAmount      = this.getAccountingCurrencyAmount(startDate, endDate, mainAccount.RecId, FiscalPeriodType::Opening);

                if (capitalTmp.TransAmount)
                {
                    capitalTmp.LedgerDimension  = ledgerDimension;
                    capitalTmp.DisplayValue     = displayValue;
                    capitalTmp.MainAccountName  = MainAccount::getLocalizedName(mainAccount.RecId);
                    capitalTmp.TransMonthInpc = this.getInflationRate(mthofyr(startDate), year(startDate));
                    capitalTmp.InpcToDate     = rateOfToDate;
                    capitalTmp.InflationRatio = decround((rateOfToDate / capitalTmp.TransMonthInpc), 4);
                    capitalTmp.AdjustedAmount = (capitalTmp.TransAmount * capitalTmp.InflationRatio) - capitalTmp.TransAmount;
                    capitalTmp.AdjustedAmount = CurrencyExchange::round(capitalTmp.AdjustedAmount, currencyCode);

                    if (!insertedCurrencyCode)
                    {
                        capitalTmp.CurrencyCode = currencyCode;
                        insertedCurrencyCode    = true;
                    }
                    capitalTmp.insert();
                }

                startDate = endDate + 1;
                endDate   = endmth(startDate);
            }
        }

        return capitalTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>