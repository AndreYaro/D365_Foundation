<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRoutingSlipReportDP_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendRoutingSlipReportDP_PSN</c> class provides data
/// for the <c>VendRoutingSlipReport_PSN</c> SQL Server
/// Reporting Services report.
/// </summary>
[SRSReportQueryAttribute(querystr(VendRoutingSlipReportUnposted_PSN))]
public class VendRoutingSlipReportDP_PSN extends SRSReportDataProviderBase
{
    VendRoutingSlipReportTmp_PSN    vendRoutingSlipReportTmp_PSN;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDueAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount due for the passed in <c>SourceDocumentLineRecId</c> value and subtracts
    /// and withholdings or deductions defined in the passed in <c>VendDirective_PSN</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The <c>SourceDocumentLineRecId</c> value of the source document line to calculate a due amount for.
    /// </param>
    /// <param name="_vendDirective_PSN">
    /// The <c>VendDirective_PSN</c> record that is associated with the passed in <c>SourceDocumentLineRecId</c> value.
    /// </param>
    /// <returns>
    /// The amount due for the passed in <c>SourceDocumentLineRecId</c> value.
    /// </returns>
    private Amount getDueAmount(SourceDocumentLineRecId _sourceDocumentLineRecId, VendDirective_PSN _vendDirective_PSN)
    {
        Amount calculatedAmount = CustVendDirective_PSN::getDistributedAmountInBudgetingCurrency(_sourceDocumentLineRecId, DistributionLinesToSum_PSN::AllAmounts, true);

        return calculatedAmount - _vendDirective_PSN.WithholdAmount - _vendDirective_PSN.DeductAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal year based on the passed in <c>CustVendRoutingSlipIssueDate_PSN</c> value.
    /// </summary>
    /// <param name="_issueDate">
    /// The date to get the fiscal year for.
    /// </param>
    /// <returns>
    /// The <c>FiscalYearName</c> value of the fiscal year that the passed in date falls in.
    /// </returns>
    private FiscalYearName getFiscalYear(CustVendRoutingSlipIssueDate_PSN _issueDate)
    {
        RefRecId calendarId = Ledger::fiscalCalendar(CompanyInfo::current());

        return FiscalCalendarYear::findYearByCalendarDate(calendarId, _issueDate).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendRoutingSlipReportTmp_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>VendRoutingSlipReportTmp_PSN</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>VendRoutingSlipReportTmp_PSN</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(VendRoutingSlipReportTmp_PSN))]
    public VendRoutingSlipReportTmp_PSN getVendRoutingSlipReportTmp_PSN()
    {
        select vendRoutingSlipReportTmp_PSN;
        return vendRoutingSlipReportTmp_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTempRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>VendRoutingSlipReportTmp_PSN</c> temporary table using the data in the passed in <c>QueryRun</c> object.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object that contains the data to be inserted into the temporary table.
    /// </param>
    /// <param name="_unpostedQuery">
    /// A <c>Boolean</c> value signifying whether the passed in <c>QueryRun</c> object represents a query of unposted invoices.
    /// </param>
    private void insertTempRecord(QueryRun _queryRun, boolean _unpostedQuery = false)
    {
        VendDirective_PSN               vendDirective_PSN;
        VendRoutingSlip_PSN             vendRoutingSlip_PSN;
        VendInvoiceInfoLine             vendInvoiceInfoLine;
        VendInvoiceInfoTable            vendInvoiceInfoTable;
        MainAccount                     mainAccount;
        VendInvoiceTrans                vendInvoiceTrans;
        VendInvoiceJour                 vendInvoiceJour;
        VendTransOpen                   vendTransOpen;
        SourceDocumentLineRecId         sourceDocumentLineRecId;
        BankAccount                     bankAccount;
        VendBankAccount                 vendBankAccount;
        LogisticsPostalAddressView      logisticsPostalAddressView;

        if (_unpostedQuery)
        {
            vendInvoiceInfoLine     = _queryRun.get(tableNum(VendInvoiceInfoLine));
            vendInvoiceInfoTable    = _queryRun.get(tableNum(VendInvoiceInfoTable));

            sourceDocumentLineRecId                     = vendInvoiceInfoLine.SourceDocumentLine;
            bankAccount                                 = vendInvoiceInfoTable.VendBankAccountID;
            vendRoutingSlipReportTmp_PSN.InvoiceNumber  = vendInvoiceInfoTable.Num;
            vendRoutingSlipReportTmp_PSN.Creditor       = vendInvoiceInfoTable.InvoiceAccount;
            vendRoutingSlipReportTmp_PSN.PayeeAccountId = vendInvoiceInfoTable.VendBankAccountID;
        }
        else
        {
            vendInvoiceTrans    = _queryRun.get(tableNum(VendInvoiceTrans));
            vendInvoiceJour     = _queryRun.get(tableNum(VendInvoiceJour));
            vendTransOpen       = _queryRun.get(tableNum(vendTransOpen));

            sourceDocumentLineRecId                     = vendInvoiceTrans.SourceDocumentLine;
            bankAccount                                 = vendTransOpen.ThirdPartyBankAccountId;
            vendRoutingSlipReportTmp_PSN.InvoiceNumber  = vendInvoiceJour.InvoiceId;
            vendRoutingSlipReportTmp_PSN.Creditor       = vendInvoiceJour.InvoiceAccount;
        }

        vendDirective_PSN           = _queryRun.get(tableNum(VendDirective_PSN));
        vendRoutingSlip_PSN         = _queryRun.get(tableNum(VendRoutingSlip_PSN));
        mainAccount                 = _queryRun.get(tableNum(MainAccount));
        vendBankAccount             = _queryRun.get(tableNum(VendBankAccount));
        logisticsPostalAddressView  = _queryRun.get(tableNum(LogisticsPostalAddressView));

        vendRoutingSlipReportTmp_PSN.VendRoutingSlipId  = vendRoutingSlip_PSN.VendRoutingSlipId;
        vendRoutingSlipReportTmp_PSN.VendDirectiveId    = vendDirective_PSN.VendDirectiveId;
        vendRoutingSlipReportTmp_PSN.MainAccountNumber  = mainAccount.MainAccountId;
        vendRoutingSlipReportTmp_PSN.MainAccountName    = mainAccount.localizedName();
        vendRoutingSlipReportTmp_PSN.FiscalYear         = this.getFiscalYear(vendRoutingSlip_PSN.IssueDate);
        vendRoutingSlipReportTmp_PSN.DueAmount          = this.getDueAmount(sourceDocumentLineRecId, vendDirective_PSN);
        vendRoutingSlipReportTmp_PSN.PayeeAccountId     = vendBankAccount.AccountID;
        vendRoutingSlipReportTmp_PSN.PayeeAccountNumber = vendBankAccount.AccountNum;
        vendRoutingSlipReportTmp_PSN.PayeeName          = vendBankAccount.Name;
        vendRoutingSlipReportTmp_PSN.PayeeAddress       = logisticsPostalAddressView.Address;

        vendRoutingSlipReportTmp_PSN.insert();
        vendRoutingSlipReportTmp_PSN.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic and inserts data into the temporary table.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by SQL
    /// Server Reporting Services (SSRS) at run time. The method will populate the data
    /// table that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        Query                   postedQuery     = new Query(queryStr(VendRoutingSlipReportPosted_PSN));
        Query                   unpostedQuery   = this.parmQuery();
        QueryRun                queryRun        = new QueryRun(unpostedQuery);

        while (queryRun.next())
        {
            this.insertTempRecord(queryRun, true);
        }

        vendDirective_PSN::copyVendInvoiceRanges(unpostedQuery, postedQuery);

        queryRun = new queryRun(postedQuery);

        while (queryRun.next())
        {
            this.insertTempRecord(queryRun);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
