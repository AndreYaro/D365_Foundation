<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class  SalesQuotationTotals extends TradeTotals
{
    ModuleAxapta                callerModuleType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callerModuleType</Name>
				<Source><![CDATA[
    ModuleAxapta callerModuleType(ModuleAxapta  _callerModuleType = callerModuleType)
    {
        callerModuleType = _callerModuleType;

        return _callerModuleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount cashDiscAmount()
    {
        using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(orderTable.TableId, orderTable.RecId))
        {
            totalCashDisc = CustParameters::cashDiscAmount(this.cashDiscCode(),
                                                           this.currencyCode(),
                                                           this.totalAmount(),
                                                           this.totalAmount() - this.totalTaxAmount(),
                                                           this.cashDiscPercent());
        }
        return totalCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscDate</Name>
				<Source><![CDATA[
    public DiscDate  cashDiscDate()
    {
        return CustParameters::cashDiscDate(this.cashDiscCode(), this.documentDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the cost value of the current order line.
    /// </summary>
    /// <param name="_inventQty">
    /// The order line quantity in inventory units.
    /// </param>
    /// <returns>
    /// The cost value of the current order line.
    /// </returns>
    public CostAmount costValue(InventQty _inventQty)
    {
        CostAmount totalCostAmt = super(_inventQty);

        if (orderLine is SalesQuotationLine)
        {
            SalesQuotationLine salesQuotationLine = orderLine as SalesQuotationLine;

            if (salesQuotationLine.AccountType == LedgerJournalACType::Project
                || salesQuotationLine.OffsetAccountType == LedgerJournalACType::Project)
            {
                totalCostAmt = CurrencyExchangeHelper::amount(_inventQty * salesQuotationLine.CostPrice);
            }
        }

        return totalCostAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineQueryRun</Name>
				<Source><![CDATA[
    protected TradeTotalsIQueryRun createLineQueryRun()
    {
        return TradeTotalsQueryRun::newFromQueryRun(this.queryBuild());
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMax</Name>
				<Source><![CDATA[
    public AmountMST creditMax()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the item module type.
    /// </summary>
    /// <returns>
    /// The item module type for the order.
    /// </returns>
    protected ModuleInventPurchSales itemModuleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsQueryRun lineQueryRun = _lineQueryRun as TradeTotalsQueryRun;
        return this.queryGet(lineQueryRun.parmQueryRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunNext</Name>
				<Source><![CDATA[
    protected boolean lineQueryRunNext(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsQueryRun lineQueryRun = _lineQueryRun as TradeTotalsQueryRun;
        return this.nextLine(lineQueryRun.parmQueryRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    protected boolean nextLine(
        QueryRun    _queryRun)
    {
        return _queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareBalanceCalculation</Name>
				<Source><![CDATA[
    public void prepareBalanceCalculation()
    {
        calculateBalance  = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareCostValueCalculation</Name>
				<Source><![CDATA[
    public void prepareCostValueCalculation()
    {
        switch (callerModuleType)
        {
            case ModuleAxapta::SalesOrder:
                calculateCostValue  = true;
                break;

            case ModuleAxapta::Project:
                calculateCostValue  = true;
                break;

            default:
                calculateCostValue  = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareMarkupLineAmountCalculation</Name>
				<Source><![CDATA[
    public void prepareMarkupLineAmountCalculation()
    {
        switch (callerModuleType)
        {
            case ModuleAxapta::SalesOrder:
                calculateMarkupLineAmount  = true;
                break;

            case ModuleAxapta::Project:
                calculateMarkupLineAmount  = false;
                break;

            default:
                calculateMarkupLineAmount  = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareMarkupTableAmountCalculation</Name>
				<Source><![CDATA[
    public void prepareMarkupTableAmountCalculation()
    {
        switch (callerModuleType)
        {
            case ModuleAxapta::SalesOrder:
                calculateMarkupTableAmount  = true;
                break;

            case ModuleAxapta::Project:
                calculateMarkupTableAmount  = false;
                break;

            default:
                calculateMarkupTableAmount  = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuantitiesCalculation</Name>
				<Source><![CDATA[
    public void prepareQuantitiesCalculation()
    {
        switch (callerModuleType)
        {
            case ModuleAxapta::SalesOrder:
                calculateQuantities  = true;
                break;

            case ModuleAxapta::Project:
                calculateQuantities  = false;
                break;

            default:
                calculateQuantities  = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRemainQuantitiesCalculation</Name>
				<Source><![CDATA[
    public void prepareRemainQuantitiesCalculation()
    {
        switch (callerModuleType)
        {
            case ModuleAxapta::SalesOrder:
                calculateRemainQuantities  = true;
                break;

            case ModuleAxapta::Project:
                calculateRemainQuantities  = false;
                break;

            default:
                calculateRemainQuantities  = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTaxAmountCalculation</Name>
				<Source><![CDATA[
    public void prepareTaxAmountCalculation()
    {
        switch (callerModuleType)
        {
            case ModuleAxapta::SalesOrder:
                calculateTaxAmount  = true;
                break;

            case ModuleAxapta::Project:
                calculateTaxAmount  = true;
                break;

            default:
                calculateTaxAmount  = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    abstract protected QueryRun  queryBuild()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    abstract protected Common  queryGet(
        QueryRun    _transact)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the round-off amount for sales.
    /// </summary>
    /// <param name="_currencyCode">
    /// The <c>CurrencyCode</c> field for the current order line.
    /// </param>
    /// <returns>
    /// The <c>RoundOff</c> field defined for sales on the <c>Currency</c> table.
    /// </returns>
    protected RoundOff roundOff(CurrencyCode _currencyCode)
    {
        return Currency::roundOffSales(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the rounding form for sales.
    /// </summary>
    /// <param name="_currencyCode">
    /// The <c>CurrencyCode</c> field for the current order line.
    /// </param>
    /// <returns>
    /// The <c>RoundOffType</c> field defined for sales on the <c>Currency</c> table.
    /// </returns>
    protected RoundOffType roundOffType(CurrencyCode _currencyCode)
    {
        return Currency::roundOffTypeSales(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineRecId</Name>
				<Source><![CDATA[
    protected recId sourceLineRecId()
    {
        if (orderline.TableId == tablenum(SalesQuotationParmLine))
        {
            SalesQuotationParmLine salesQuotationParmLine = orderline;
            return salesQuotationParmLine.SalesQuotationLineRecId;
        }

        return orderLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesQuotationTotals construct(Common            _orderTable,
                                          SalesUpdate       _specQty         = SalesUpdate::All,
                                          AccountOrder      _sumBy           = AccountOrder::None,
                                          ParmId            _parmId          = '',
                                          QuotationIdBase   _sumQuotationId  = '',
                                          DocumentStatus    _documentStatus  = DocumentStatus::None)
    {
        switch (_orderTable.TableId)
        {
            case tableNum(SalesQuotationParmTable),
                 tableNum(SalesQuotationTable):
                return SalesQuotationTotals_Sales::construct(
                    _orderTable,
                    _specQty,
                    _sumBy,
                    _parmId,
                    _sumQuotationId,
                    _documentStatus);
        }

        throw(error(strFmt("@SYS19306", funcName())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTax</Name>
				<Source><![CDATA[
    static void showTax(str _menuItemDisplayStr, SalesQuotationTable _salesQuotationTable)
    {
        SalesQuotationTotals salesQuotationTotals = SalesQuotationTotals::construct(_salesQuotationTable);
        salesQuotationTotals.calc();
        Tax::showTaxes(_menuItemDisplayStr, salesQuotationTotals.tax(), _salesQuotationTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>