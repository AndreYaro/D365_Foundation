<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceOnhandChangeScheduleBatchJobInitialPush</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceOnhandChangeScheduleBatchJobInitialPush extends RunBaseBatch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        InventInventoryDataServiceOnhandChangeScheduleBatchJobInitialPush::performInitialPush();

        ttsbegin;
        InventoryServiceStatus atpStatus = InventInventoryDataServiceParameters::findWithPessimisticLock().InventoryServiceAtpStatus;

        if (atpStatus == InventoryServiceStatus::Enabling)
        {
            InventInventoryDataServiceBatchJobScheduler::scheduleAtpJob();
        }
        else if (atpStatus == InventoryServiceStatus::Disabling)
        {
            InventInventoryDataServiceParameters::updateAtpStatus(InventoryServiceStatus::Disabled);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventInventoryDataServiceOnhandChangeScheduleBatchJobInitialPush construct()
    {
        return new InventInventoryDataServiceOnhandChangeScheduleBatchJobInitialPush();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    internal static ClassDescription description()
    {
        return "@SCM:InventoryServiceATPInitialPushBatchJobDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {

        InventInventoryDataServiceParameters inventoryServiceParameters = InventInventoryDataServiceParameters::find();

        var serviceHealthChecker = new InventoryServiceServiceHealthChecker();

        var isEndpointValid = inventoryServiceParameters.InventoryServiceStatus != InventoryServiceStatus::Disabled ||
                              inventoryServiceParameters.InventoryServiceEndpoint != '' && serviceHealthChecker.checkHealth(inventoryServiceParameters.InventoryServiceEndpoint);

        if (!isEndpointValid)
        {
            var result = serviceHealthChecker.getServiceEndpoint();
            var endpoint = conPeek(result, 1);
            var errorMesg = conPeek(result, 2);

            if (errorMesg != '')
            {
                error(errorMesg);
            }
            else
            {
                if (endpoint != '')
                {
                    isEndpointValid = serviceHealthChecker.upsertEndpoint(endpoint, "@SCM:InventoryServiceEndpointIsNotSetProperlyAndAskForAutoFillInEndpointDialog");
                    
                    if (isEndpointValid)
                    {
                        inventoryServiceParameters = InventInventoryDataServiceParameters::find();
                    }
                }
                else
                {
                    error("@SCM:InventoryServiceEndpointIsNotSetProperlyAndCanNotBeGetAutomaticallyErrorMessage");
                }
            }
        }

        if (isEndpointValid)
        {
            if (inventoryServiceParameters.InventoryServiceAtpStatus == InventoryServiceStatus::Disabled)
            {
                if (Box::yesNo("@SCM:InventoryServiceAtpEnableDialog", DialogButton::No) == DialogButton::Yes &&
                InventInventoryDataServiceOnhandChangeScheduleBatchJobInitialPush::enableValidation())
                {
                    InventInventoryDataServiceOnhandChangeScheduleBatchJobInitialPush ohcsInitialPushBatchJob = InventInventoryDataServiceOnhandChangeScheduleBatchJobInitialPush::construct();

                    ttsbegin;
                    InventInventoryDataServiceParameters::updateAtpStatus(InventoryServiceStatus::Enabling);
                    ttscommit;
            
                    InventInventoryDataServiceBatchJobHelper::researchDataSources(args);
            
                    ohcsInitialPushBatchJob.batchInfo().parmBatchExecute(NoYes::Yes);
                    ohcsInitialPushBatchJob.doBatch();
                }
            }
            else
            {
                InventInventoryDataServiceBatchJobHelper::researchDataSources(args);
                error("@SCM:InventoryServiceAtpBatchJobErrorMessage");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performInitialPush</Name>
				<Source><![CDATA[
    internal static void performInitialPush()
    {
        InventInventoryDataServiceOnhandChangeScheduleQueue ohcsQueue;
        SalesATPReceiptInventTrans  atpReceiptInventTrans;
        SalesATPIssueInventTrans    atpIssueInventTrans;
        TransDate today = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        ohcsQueue.skipDataMethods(true);
        ohcsQueue.skipDatabaseLog(true);
        ohcsQueue.skipEvents(true);

        ttsbegin;

        insert_recordset ohcsQueue (Company, ItemId, InventDimId, DateExpected, StatusIssue, StatusReceipt, InventTransOrigin, Qty)
            select crosscompany DataAreaId, ItemId, InventDimId, DateExpected, StatusIssue, StatusReceipt, InventTransOrigin, sum(Qty) from atpReceiptInventTrans
                group by DataAreaId, ItemId, InventDimId, DateExpected, StatusIssue, StatusReceipt, InventTransOrigin
                where atpReceiptInventTrans.DateExpected >= today;

        insert_recordset ohcsQueue (Company, ItemId, InventDimId, DateExpected, StatusIssue, StatusReceipt, InventTransOrigin, Qty)
            select crosscompany DataAreaId, ItemId, InventDimId, DateExpected, StatusIssue, StatusReceipt, InventTransOrigin, sum(Qty) from atpIssueInventTrans
                group by DataAreaId, ItemId, InventDimId, DateExpected, StatusIssue, StatusReceipt, InventTransOrigin
                where atpIssueInventTrans.DateExpected >= today;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableValidation</Name>
				<Source><![CDATA[
    internal static boolean enableValidation()
    {
        InventoryServiceClient inventClient = new InventoryServiceClient();
        var isFeatureEnabled = inventClient.getFeatureStatus("scheduleConfiguration");

        if (isFeatureEnabled == false)
        {
            Error("@SCM:AtpFeatureIsNotEnabled");
            return false;
        }

        var ongoingJobQueryResponse = inventClient.getOngoingResyncOnHandScheduleV2Job();


        if (ongoingJobQueryResponse.parmIsOngoingJobExist())
        {
            Error("@SCM:AtpResetOngoingError");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>