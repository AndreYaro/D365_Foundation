<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesAlternativeItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesAlternativeItem
{
    InventDim   inventDim;
    InventDim   toInventDim;

    InventQty   qtyOrdered;

    ItemId      itemId;
    ItemId      alternativeItemId;

    boolean     checkAlternativeItem;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>alternativeItemId</Name>
				<Source><![CDATA[
        public ItemId alternativeItemId()
    {
        this.findAlternativeItem();

        return alternativeItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>alternativeProductDimension</Name>
				<Source><![CDATA[
        public InventDim alternativeProductDimension(
        EcoResProductDimGroupSetup      _dimSetup,
        InventDim                       _fromInventDim)
    {
        InventDim   inventDimLocal = _fromInventDim;

        this.findAlternativeItem();
        _dimSetup.copyProductDimensions(toInventDim, inventDimLocal);

        return inventDimLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>alternativeProductDimensionPrefix</Name>
				<Source><![CDATA[
        public FieldLabelValue alternativeProductDimensionPrefix()
    {
        this.findAlternativeItem();
        return toInventDim.preFixProductDim(EcoResProductDimGroupSetup::newItemId(alternativeItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAlternativeItem</Name>
				<Source><![CDATA[
        public boolean existAlternativeItem()
    {
        this.findAlternativeItem();

        return (alternativeItemId != itemId) || (!InventDim::isInventDimEqualProductDim(EcoResProductDimGroupSetup::newItemId(alternativeItemId), inventDim, toInventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAlternativeItem</Name>
				<Source><![CDATA[
        protected void findAlternativeItem()
    {
        if (!checkAlternativeItem)
        {
            [alternativeItemId, toInventDim] = InventTable::findAlternativeItem(itemId, inventDim, qtyOrdered);

            checkAlternativeItem = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
        public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        inventDim = _inventDim;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
        public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyOrdered</Name>
				<Source><![CDATA[
        InventQty parmQtyOrdered(InventQty _qtyOrdered = qtyOrdered)
    {
        qtyOrdered = _qtyOrdered;
        return qtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static SalesAlternativeItem construct()
    {
        return new SalesAlternativeItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAlternativeItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>SalesAlternativeItem</c> class.
    /// </summary>
    /// <param name="_common">
    ///    A record that holds the item that should be replaced.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>SalesAlternativeItem</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    An error is thrown if the passed in record is not supported by this method.
    /// </exception>
    static SalesAlternativeItem newAlternativeItem(Common _common)
    {
        SalesAlternativeItem    salesAlternativeItem = SalesAlternativeItem::construct();
        InventQty               qtyOrdered;
        ItemId                  itemId;
        InventDim               inventDim;

        switch (_common.TableId)
        {
            case tablenum(SalesLine) :
                SalesLine salesLine = _common;
                itemId              = salesLine.ItemId;
                qtyOrdered          = salesLine.QtyOrdered;
                inventDim           = salesLine.inventDim();
                break;

            case tablenum(SalesBasketLine) :
                salesLine.initFromSalesBasketLine(_common); //calculates qtyOrdered.
                itemId      = salesLine.ItemId;
                qtyOrdered  = salesLine.QtyOrdered;
                inventDim   = salesLine.inventDim();
                break;

            case tablenum(SalesQuotationLine) :
                SalesQuotationLine salesQuotationLine = _common;
                itemId = salesQuotationLine.ItemId;
                qtyOrdered = salesQuotationLine.QtyOrdered;
                inventDim = salesQuotationLine.inventDim();
                break;

            case tablenum(SalesQuotationBasketLine) :
                salesQuotationLine.initFromSalesQuotationBasketLine(_common); //calculates qtyOrdered.
                itemId              = salesQuotationLine.ItemId;
                qtyOrdered          = salesQuotationLine.QtyOrdered;
                inventDim           = salesQuotationLine.inventDim();
                break;

            default :
                throw error (Error::wrongUseOfFunction(funcname()));
        }

        salesAlternativeItem.parmInventDim(inventDim);
        salesAlternativeItem.parmItemId(itemId);
        salesAlternativeItem.parmQtyOrdered(qtyOrdered);

        return salesAlternativeItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
