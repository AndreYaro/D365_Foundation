<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVATNumValidateES</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxVATNumValidateES extends TaxVATNumValidate
{
    #define.NIF_NIE_Checks(['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D',
                            'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L',
                            'C', 'K', 'E'])

    #define.CIFChecks(['J', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'])

    #define.Digits('0123456789')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCIFCheckSum</Name>
				<Source><![CDATA[
        private int calculateCIFCheckSum(VATNum _cif)
    {
        #define.DigitsAreaLength(7)

        int     length = strlen(_cif);
        str     digitsArea;

        int     i;
        int     oddDigit;

        int     a;
        int     b;

        digitsArea = substr(_cif, 2, length - 2);
        digitsArea = strRFix(digitsArea, #DigitsAreaLength);

        // A = sum of all even digits in the digits area.
        a = 0;
        for (i = 2; i <= #DigitsAreaLength; i += 2)
        {
            a += str2int(substr(digitsArea, i, 1));
        }

        // Calculate "B"
        b = 0;
        for (i = 1; i <= #DigitsAreaLength; i += 2)
        {
            // For all odd digits in the digits area
            oddDigit = str2int(substr(digitsArea, i, 1));

            // Multiply by 2 each odd digit. Then increase the value of B by the sum of the resulting digits.
            b += sumDigits(2 * oddDigit);
        }

        // Calculate the checksum
        return (10 - ((a + b) mod 10)) mod 10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCIF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a <c>VATNum</c> value matches the CIF code pattern.
    /// </summary>
    /// <param name="_vatNum">
    /// The String value which is to be tested against the CIF code pattern.
    /// </param>
    /// <returns>
    /// true if the <c>VATNum</c> value matches the CIF code pattern; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  The following conditions describe the CIF code pattern.
    ///  <list type="bullet">
    ///   <item>
    ///   <description>The value is between 2 and 9 characters long.</description>
    ///   </item>
    ///   <item>
    ///   <description>The first character should be a valid CIF Type of Company character.</description>
    ///   </item>
    ///   <item>
    ///   <description>The value contains only digits in the digits area (everything in between the first and
    ///   the last characters).</description>
    ///   </item>
    ///   <item>
    ///   <description>The value ends with either a digit or one of the CIF control letters.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public boolean isCIF(VATNum _vatNum)
    {
        #define.CIFTypesOfCompany('ABCDEFGHJKNPQRSUVW')

        int     length = strlen(_vatNum);
        str     digitsArea;
        str     controlCharacter;

        // CIF code should contain at least a marker character and a control character.
        if (length < 2)
        {
            return false;
        }

        // Total length of a CIF code cannot be longer than 9 characters.
        if (length > 9)
        {
            return false;
        }

        // First character should be a valid CIF Type of Company character.
        if (strfind(_vatNum, #CIFTypesOfCompany, 1, 1) == 0)
        {
            return false;
        }

        // Digits area (everything between the first and the last character) can only contain digits.
        digitsArea = substr(_vatNum, 2, length - 2);
        if (strlen(digitsArea) != strlen(strkeep(digitsArea, #Digits)))
        {
            return false;
        }

        // Last character should either be a digit or should belong to the set of allowed CIF control letters.
        controlCharacter = substr(_vatNum, length, 1);
        if (strfind(controlCharacter, #Digits, 1, 1) == 0
            && strfind(controlCharacter, con2Str(#CIFChecks, ''), 1, 1) == 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNIE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>VATNum</c> value matches the NIE code pattern.
    /// </summary>
    /// <param name="_vatNum">
    /// The String value which is to be tested against the NIE code pattern.
    /// </param>
    /// <returns>
    /// true if the <c>VATNum</c> value matches the NIE code pattern; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  The following conditions describe the NIE code pattern.
    ///  <list type="bullet">
    ///   <item>
    ///   <description>The value is between 2 and 9 characters long.</description>
    ///   </item>
    ///   <item>
    ///   <description>The first character should be a valid NIE marker (X, Y or Z).</description>
    ///   </item>
    ///   <item>
    ///   <description>The value contains only digits in the digits area (everything in between the first and
    ///   the last characters).</description>
    ///   </item>
    ///   <item>
    ///   <description>The value ends with one of the allowed NIE control characters (which is the same as it
    ///   is for NIF).</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public boolean isNIE(VATNum _vatNum)
    {
        #define.NIEMarkers('XYZ')

        str     digitsArea;
        str     controlCharacter;
        int     length = strlen(_vatNum);

        // NIE number should contain at least a marker character and a control character.
        if (length < 2)
        {
            return false;
        }

        // Total length of an NIE code cannot be longer than 9 characters.
        if (length > 9)
        {
            return false;
        }

        // Marker is the first character of the VAT number and it should belong to the #NIEMarkers set of characters
        if (strfind(_vatNum, #NIEMarkers, 1, 1) == 0)
        {
            return false;
        }

        // Digits area (everything between marker and control character) can only contain digits.
        digitsArea = substr(_vatNum, 2, length - 2);
        if (strlen(digitsArea) != strlen(strkeep(digitsArea, #Digits)))
        {
            return false;
        }

        // Last character should belong to the set of allowed NIE control characters.
        controlCharacter = substr(_vatNum, length, 1);
        if (strfind(controlCharacter, con2Str(#NIF_NIE_Checks, ''), 1, 1) == 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNIF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>VATNum</c> value matches the NIF code pattern.
    /// </summary>
    /// <param name="_vatNum">
    /// The String value which is to be tested against the NIF code pattern.
    /// </param>
    /// <returns>
    /// true if the <c>VATNum</c> value matches the NIF code pattern; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  The following conditions describe the NIF code pattern.
    ///  <list type="bullet">
    ///   <item>
    ///   <description>The value is between 1 and 9 characters long.</description>
    ///   </item>
    ///   <item>
    ///   <description>The value contains only digits in the digits area (everything in between the first and
    ///   the last characters).</description>
    ///   </item>
    ///   <item>
    ///   <description>The value ends with one of the allowed NIF control characters.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public boolean isNIF(VATNum _vatNum)
    {
        str digitsArea;
        str controlCharacter;
        int length = strlen(_vatNum);

        // NIF code should contain at least a control character.
        if (length < 1)
        {
            return false;
        }

        // NIF codes longer than 9 characters are not allowed.
        if (length > 9)
        {
            return false;
        }

        // Can only contain digits in the digits area (everything except the last character).
        digitsArea = substr(_vatNum, 1, length - 1);
        if (strlen(digitsArea) != strlen(strkeep(digitsArea, #Digits)))
        {
            return false;
        }

        // Last character should belong to the set of allowed NIF control characters.
        controlCharacter = substr(_vatNum, length, 1);
        if (strfind(controlCharacter, con2Str(#NIF_NIE_Checks, ''), 1, 1) == 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCIF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>VATNum</c> value is a valid CIF code
    /// </summary>
    /// <param name="_vatNum">
    /// The String which is to be tested against the CIF code pattern.
    /// </param>
    /// <param name="_checkIsCIF">
    /// A Boolean value that indicates whether to check that the <c>VATNum</c> value follows the CIF code
    /// pattern; optional.
    /// </param>
    /// <returns>
    /// true if the <c>VATNum</c> value is a valid CIF code; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  The following describes the validation process.
    ///  <list type="bullet">
    ///   <item>
    ///    <description>
    ///    A check is performed to validate that the <c>VATNum</c> value follows the CIF code pattern.
    ///    </description>
    ///   </item>
    ///   <item>
    ///   <description>The CIF Checksum is calculated.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    A check is performed to validate that the last character of the <c>VATNum</c> value is a valid
    ///    control character for the CIF code.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public boolean validateCIF(VATNum _vatNum, boolean _checkIsCIF = true)
    {
        int     length = strlen(_vatNum);
        int     checksum;

        str     cifTypeOfCompany;
        str     expectedControlDigit;
        str     expectedControlLetter;
        str     actualControlCharacter;

        // Check whether the _vatNum value matches the CIF code pattern.
        if (_checkIsCIF && !this.isCIF(_vatNum))
        {
            return false;
        }

        // Calculate the checksum
        checksum = this.calculateCIFCheckSum(_vatNum);

        // Verify if the last character is a valid control character for this CIF code

        cifTypeOfCompany        = substr(_vatNum, 1, 1);
        actualControlCharacter  = substr(_vatNum, length, 1);
        expectedControlDigit    = int2str(checksum);
        expectedControlLetter   = conpeek(#CIFChecks, checksum + 1);

        if (strfind(cifTypeOfCompany, 'ABEH', 1, 1) != 0)
        {
            // If Type of Company character is either "A", "B", "E" or "H" then the control character should be a digit.
            return actualControlCharacter == expectedControlDigit;
        }
        else if (strfind(cifTypeOfCompany, 'KPQS', 1, 1) != 0)
        {
            // If Type of Company character is either "K", "P", "Q" or "S" then the control character should be a letter.
            return actualControlCharacter == expectedControlLetter;
        }
        else
        {
            // Otherwise control character can either be a digit or a letter
            return actualControlCharacter == expectedControlLetter || actualControlCharacter == expectedControlDigit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNIE</Name>
				<Source><![CDATA[
    ///<summary>
    /// Check whether the _vatNum value is a valid NIE code. The validation mechanism is the following
    /// <para> - Check whether the _vatNum value matches the NIE code pattern (see isNIE function's description).</para>
    /// <para> - Calculate checksum by replacing marker with a corresponding digit (X -> 0, Y -> 1, Z -> 2) and
    ///          applyng (mod 23) to the resulting digits area.</para>
    /// <para> - Find the the corresponding control character.</para>
    /// <para> - Compare it with the last character of the _vatNum value.</para>
    ///</summary>
    ///<param name="_vatNum">String which is to be tested against NIE code pattern.</param>
    ///<param name="_checkIsNIE">A boolean parameter which indicates wether it is necessary to check wether _vatNum follows NIE code pattern.</param>
    ///<returns>True if the _vatNum is a valid NIE code, otherwise False.</returns>
    public boolean validateNIE(VATNum _vatNum, boolean _checkIsNIE = true)
    {
        int     length = strlen(_vatNum);

        str     digitsArea;
        str     markerAsNumber;

        int     mod23Result;
        int     mod23Base;

        str     actualControlCharacter;
        str     expectedControlCharacter;

        // Check whether the _vatNum value matches NIE code pattern.
        if (_checkIsNIE && !this.isNIE(_vatNum))
        {
            return false;
        }

        // Digits area is everything between the marker (first character) and the control character (last)
        digitsArea = substr(_vatNum, 2, length - 2);

        // Left side of the digits area should be filled with zeros to make 7 characters
        digitsArea = strRFix(digitsArea, 7, '0');

        // Marker should be replaced with a corresponding number (X - 0, Y - 1, Z - 2)
        markerAsNumber = substr(_vatNum, 1, 1);
        markerAsNumber = strReplace(markerAsNumber, 'X', '0');
        markerAsNumber = strReplace(markerAsNumber, 'Y', '1');
        markerAsNumber = strReplace(markerAsNumber, 'Z', '2');

        // Apply the mod23 algorithm
        mod23Base = str2int(markerAsNumber + digitsArea);
        mod23Result = mod23Base mod 23;
        expectedControlCharacter = conpeek(#NIF_NIE_Checks, mod23result + 1);

        // And compare the actual control character with the expected one (last character of the _vatNum)
        actualControlCharacter = substr(_vatNum, length, 1);
        return actualControlCharacter == expectedControlCharacter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNIF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>VATNum</c> value is a valid NIF code.
    /// </summary>
    /// <param name="_vatNum">
    /// The String which is to be tested against the NIF code pattern.
    /// </param>
    /// <param name="_checkIsNIF">
    /// c
    /// </param>
    /// <returns>
    /// true if the <c>VATNum</c> value is a valid NIF code; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  The following describes the validation mechanism.
    ///  <list type="bullet">
    ///   <item>
    ///    <description>
    ///    A check is performed to validate that the <c>VATNum</c> value matches the NIF code pattern.
    ///    </description>
    ///   </item>
    ///   <item>
    ///   <description>The checksum is calculated by applying the digit (mod 23) to the digits
    ///   area.</description>
    ///   </item>
    ///   <item>
    ///   <description>The corresponding control character is found.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    A comparison is performed with the last character of the <c>VATNum</c> value.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public boolean validateNIF(VATNum _vatNum, boolean _checkIsNIF = true)
    {
        int     length = strlen(_vatNum);

        str     digitsArea;
        int     mod23Base;
        int     mod23result;

        str     expectedControlCharacter;
        str     actualControlCharacter;

        // Check whether the _vatNum value matches the NIF code pattern
        if (_checkIsNIF && !this.isNIF(_vatNum))
        {
            return false;
        }

        // Calculate checksum by applyng (mod 23) to the digits area.
        digitsArea  = substr(_vatNum, 1, length - 1);
        mod23Base   = str2int(digitsArea);
        mod23result = mod23Base mod 23;

        // Find the the expected control character.
        expectedControlCharacter = conpeek(#NIF_NIE_Checks, mod23result + 1);

        // Compare it with the last character of the _vatNum value.
        actualControlCharacter = substr(_vatNum, length, 1);
        return actualControlCharacter == expectedControlCharacter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmVATNumDialogBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the VAT Number validation dialog box and returns true if the button pressed is Ok. This method is called if VAT number
    /// validation has failed and to confirm if the user wishes to proceed
    /// </summary>
    /// <returns>true if the user presses Ok on the dialog</returns>
    /// <remarks>This method is replaceable, so to skip the dialog, create an extension class and override this method</remarks>
    [Replaceable]
    protected boolean confirmVATNumDialogBox()
    {
        return Box::okCancel("@SYS55105", DialogButton::Cancel) == DialogButton::Ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVATNum</Name>
				<Source><![CDATA[
        public boolean validateVATNum(VATNum _vatNum, LogisticsAddressCountryRegionId _countryRegionId = '')
    {
        boolean     result;
        str         trimmedVatNum;

        trimmedVatNum = strLRTrim(_vatNum);

        // CIF, NIF and NIE code patterns differ significantly. So if isCIF returned true then the code cannot be neither NIF nor NIE, e.t.c.

        if (this.isCIF(trimmedVatNum))
        {
            result = this.validateCIF(trimmedVatNum, false);
        }
        else if (this.isNIF(trimmedVatNum))
        {
            result = this.validateNIF(trimmedVatNum, false);
        }
        else if (this.isNIE(trimmedVatNum))
        {
            result = this.validateNIE(trimmedVatNum, false);
        }
        else
        {
            result = false;
        }

        result = result || this.confirmVATNumDialogBox();

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>