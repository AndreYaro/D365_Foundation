<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentPurchaseOrderGenerationTsk</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentPurchaseOrderGenerationTsk</c> class provides a processor implementation which
///    can create release purchase orders and lines.
/// </summary>
public class LeanDocumentPurchaseOrderGenerationTsk
    extends     LeanDocumentTask
    implements  PurchAutoCreateListener
{
    PurchAgreementGenerateReleaseOrder  purchaseOrderGenerator;
    PurchAgreementHeader                purchAgreementHeader;

    TmpPurchTable                       tmpPurchTable;
    TmpPurchLine                        tmpPurchLine;

    Map                                 tmpPurchLine2LineKeyMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the purchase order header record.
    /// </summary>
    protected void addPurchaseOrder()
    {
        tmpPurchTable.recordLevelSecurity(true);
        tmpPurchTable.clear();

        tmpPurchTable.initFromPurchAgreement(purchAgreementHeader);
        tmpPurchTable.insert();

        purchaseOrderGenerator.parmReleaseOrderTable(tmpPurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPurchaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a purchase order line for the particular data line.
    /// </summary>
    /// <param name="_lineKey">
    ///    The object that holds the key for the line to be created.
    /// </param>
    /// <param name="_lineData">
    ///    The object that holds the data of the line to be created.
    /// </param>
    protected void addPurchaseOrderLine(container _lineKey, LeanDocumentProcessingDataLine _lineData)
    {
        AgreementLineQuantityCommitment agreementLineQtyCommitment;
        Map                             lineAdditionalValues = _lineData.parmAdditionalValues();

        if (   !lineAdditionalValues.exists(tableNum(AgreementLine))
            || !lineAdditionalValues.exists(tableNum(InventDim)))
        {
            return;
        }

        LeanDocumentAggregationPurchKey lineKey = LeanDocumentAggregationPurchKey::newKey(_lineKey);

        // get necessary records
        agreementLineQtyCommitment.recordLevelSecurity(true);
        AgreementLine agreementLine = lineAdditionalValues.lookup(tableNum(AgreementLine));
        agreementLineQtyCommitment = AgreementLineQuantityCommitment::find(agreementLine.RecId);

        tmpPurchLine.clear();

        // init from the related records (parent and agreement line)
        purchaseOrderGenerator.initFromAgreementLineQuantityCommitment(tmpPurchLine, agreementLineQtyCommitment);
        purchaseOrderGenerator.initFromHeader(tmpPurchTable, tmpPurchLine);

        // As the agreement line may not have some dimensions, we use the one from the assigned kanban jobs
        InventDim purchLineInventDim = lineAdditionalValues.lookup(tableNum(InventDim));
        tmpPurchLine.InventDimId = purchLineInventDim.InventDimId;

        // define the qty and delivery date based on the aggregated values in the data line
        tmpPurchLine.DeliveryDate = _lineData.parmDeliveryDate();
        tmpPurchLine.PurchQty =
            EcoResProductUnitConverter::convertForReleasedProduct(agreementLine.ItemId,
																  agreementLine.InventDimId,
																  _lineData.parmLineQuantity(),
																  _lineData.parmLineUnitOfMeasure(),
																  UnitOfMeasure::findBySymbol(agreementLineQtyCommitment.ProductUnitOfMeasure).RecId,
																  NoYes::Yes);

        tmpPurchLine.insert();

        // Register editable inventory dimensions fields for current AgreementLineQuantityCommitment...
        purchaseOrderGenerator.registerEditableAgreementLineDimensions(agreementLineQtyCommitment);

        // store the key and line data for the handling the listener events (pre/post process of records)
        tmpPurchLine2LineKeyMap.insert(tmpPurchLine.RecId, LeanDocumentAggregationPurchKey::newKey(_lineKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProceedWithTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current state allows for executing the task.
    /// </summary>
    /// <returns>
    ///    true if execution is allowed; otherwise, false.
    /// </returns>
    protected boolean canProceedWithTask()
    {
        boolean result = true;

        result = result && super();

        result = result && purchAgreementHeader.RecId != 0;
        // if there're no lines, there should be no header
        Debug::assert(result);

        if (result
            && purchAgreementHeader.AgreementState == AgreementState::OnHold)
        {
            result = checkFailed(strFmt("@SYS335114",
                                    purchAgreementHeader.PurchNumberSequence,
                                    purchAgreementHeader.VendAccount));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The other object.
    /// </param>
    /// <returns>
    ///    true if the two objects hold the same state; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentPurchaseOrderGenerationTsk otherTask = otherObject as LeanDocumentPurchaseOrderGenerationTsk;

        return  otherObject == this
                || (otherTask != null
                    && super(otherTask));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance.
    /// </summary>
    protected void init()
    {
        super();

        tmpPurchLine2LineKeyMap = new Map(Types::Int64, Types::Class);

        // clean up the temp tables
        delete_from tmpPurchTable;
        delete_from tmpPurchLine;

        purchaseOrderGenerator  = PurchAgreementGenerateReleaseOrder::construct();
        purchAgreementHeader    = PurchAgreementHeader::find(processingData.parmSourceDocumentId());

        // initialize the generator
        purchaseOrderGenerator.parmPurchAgreementHeader(purchAgreementHeader);
        purchaseOrderGenerator.parmReleaseOrderTable(tmpPurchTable);
        purchaseOrderGenerator.parmReleaseOrderLine(tmpPurchLine);
        purchaseOrderGenerator.parmPurchAutoCreateListener(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchAgreementHeader</Name>
				<Source><![CDATA[
    protected PurchAgreementHeader parmPurchAgreementHeader(PurchAgreementHeader _purchAgreementHeader = purchAgreementHeader)
    {
        purchAgreementHeader = _purchAgreementHeader;

        return purchAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseOrderGenerator</Name>
				<Source><![CDATA[
    protected PurchAgreementGenerateReleaseOrder parmPurchaseOrderGenerator(PurchAgreementGenerateReleaseOrder _purchaseOrderGenerator = purchaseOrderGenerator)
    {
        purchaseOrderGenerator = _purchaseOrderGenerator;

        return purchaseOrderGenerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpPurchLine</Name>
				<Source><![CDATA[
    protected TmpPurchLine parmTmpPurchLine(TmpPurchLine _tmpPurchLine = tmpPurchLine)
    {
        tmpPurchLine = _tmpPurchLine;

        return tmpPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpPurchLine2LineKeyMap</Name>
				<Source><![CDATA[
    protected Map parmTmpPurchLine2LineKeyMap(Map _tmpPurchLine2LineKeyMap = tmpPurchLine2LineKeyMap)
    {
        tmpPurchLine2LineKeyMap = _tmpPurchLine2LineKeyMap;

        return tmpPurchLine2LineKeyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpPurchTable</Name>
				<Source><![CDATA[
    protected TmpPurchTable parmTmpPurchTable(TmpPurchTable _tmpPurchTable = tmpPurchTable)
    {
        tmpPurchTable = _tmpPurchTable;

        return tmpPurchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Intercepts the post creation of purchasing records.
    /// </summary>
    /// <param name="_sender">
    ///    The object that raises the event.
    /// </param>
    /// <param name="_buffer">
    ///    The buffer to be created.
    /// </param>
    public void recordCreated(Object _sender, Common _buffer)
    {
        PurchLine                       purchLineLocal;

        switch (_buffer.TableId)
        {
            case tableNum(PurchTable):
                break;

            // store the newly created PurchLine in the data object for further post-processing
            case tableNum(PurchLine):
                PurchLine purchLine = _buffer;
                Debug::assert(purchLine.RecId != 0);

                if (tmpPurchLine2LineKeyMap.exists(tmpPurchLine.RecId))
                {
                    purchLineLocal.data(purchLine);
                    LeanDocumentAggregationPurchKey lineKey = tmpPurchLine2LineKeyMap.lookup(tmpPurchLine.RecId);
                    LeanDocumentProcessingDataLine dataLine = processingData.parmDocumentLines().lookup(lineKey.key());
                    dataLine.parmAdditionalValues().insert(tableNum(PurchLine), purchLineLocal);
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordCreating</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Intercepts the creation of purchasing records.
    /// </summary>
    /// <param name="_sender">
    ///    The object that raises the event.
    /// </param>
    /// <param name="_buffer">
    ///    The buffer to be created.
    /// </param>
    public void recordCreating(Object _sender, Common _buffer)
    {
        switch (_buffer.TableId)
        {
            // pre-initialize PurchTable buffer
            case tableNum(PurchTable):
                PurchTable purchTable = _buffer;
                purchTable.DeliveryDate = processingData.parmDeliveryDate();
                purchTable.calculateRequestedShipAndReceiptDate(dateNull(), purchTable.DeliveryDate, SchedDirection::Backward);
                purchTable.SkipShipReceiptDateCalculation = true;
                break;

            // pre-initialize PurchLine buffer
            case tableNum(PurchLine):
                PurchLine purchLine = _buffer;

                if (tmpPurchLine2LineKeyMap.exists(tmpPurchLine.RecId))
                {
                    LeanDocumentAggregationPurchKey lineKey = tmpPurchLine2LineKeyMap.lookup(tmpPurchLine.RecId);
                    purchLine.PlanReference = lineKey.parmPlanReferenceRefRecId();
                    PlanReference planReference = PlanReference::find(purchLine.planReference);
                    if (planReference)
                    {
                        purchLine.DefaultDimension = planReference.mergeDimension(purchLine.DefaultDimension);
                    }
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the task.
    /// </summary>
    public void run()
    {
        // initialize current state from processing data
        this.init();

        if (!this.canProceedWithTask())
        {
            return;
        }

        // add the header
        this.addPurchaseOrder();

        // add the lines
        MapEnumerator enumLines = processingData.parmDocumentLines().getEnumerator();

        while (enumLines.moveNext())
        {
            LeanDocumentProcessingDataLine lineData = enumLines.currentValue();
            this.addPurchaseOrderLine(enumLines.currentKey(), lineData);
        }

        // get a cursor to the first line to be created (used by the PO generator)
        select tmpPurchLine;

        if (tmpPurchLine.RecId != 0
            && purchaseOrderGenerator.check())
        {
            // create purchase order & lines
            purchaseOrderGenerator.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Default class factory method.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>LeanDocumentPurchaseOrderGenerationTsk</c> class.
    /// </returns>
    public static LeanDocumentPurchaseOrderGenerationTsk newStandard()
    {
        return new LeanDocumentPurchaseOrderGenerationTsk();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>