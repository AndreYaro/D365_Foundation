<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysDefaultDataAllocateKey</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
/*
This class is base class for allocation like table pairs, e.g. LedgerAllocateKey/LedgerAllocateTrans.
*/
abstract public class SysDefaultDataAllocateKey extends SysDefaultData
{
    FormDataSource              form_DSLine;

    // Packed
    Integer                     units;
    PeriodUnit                  periodUnit;
    PeriodLength                periodLength;
    NoYes                       fixedStartDate;
    SysGroup                    createName;
    RecId                       defaultDimension;
    Name                        allocateKeyName;

    // Calc
    Integer                     total;

    container                   lastAllocationCon;

    #localmacro.CurrentList
        units,
        PeriodUnit,
        periodLength,
        createName,
        defaultDimension,
        fixedStartDate,
        allocateKeyName
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table buffer that is declared in the <c>classDeclaration</c> method.
    /// </summary>
    /// <returns>
    /// The table buffer that is used for the default data.
    /// </returns>
    abstract public Common buffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>bufferLine</Name>
				<Source><![CDATA[
    abstract public AllocateTransMap bufferLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdNumTmp</Name>
				<Source><![CDATA[
    public int64 createdNumTmp(Common cursor = null)
    {
        switch (curTableNo)
        {
            case 2:
                return super(this.bufferLine());
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTablePrim</Name>
				<Source><![CDATA[
    void deleteTablePrim(Common buffer = this.buffer(), boolean useCurBuffer = false)
    {
        super(this.bufferLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        switch (curTableNo)
        {
            case 1:
                return new DictTable(this.tableId()).label();
            case 2:
                return new DictTable(this.bufferLine().TableId).label();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>doKey</Name>
				<Source><![CDATA[
    void doKey(boolean useCurBuffer = false)
    {
        int                 x;
        AllocateTransMap    line;
        AllocateKeyMap      allocateKeyMap;

        if (! this.existDBKey(createName) && units > 0)
        {
            this.doRecord(useCurBuffer);

            total = real2int(periodLength / units);

            line = this.bufferLine();

            for (x = 1; x <= total; x++)
            {
                line.clear();
                line.initValue();

                allocateKeyMap = this.buffer();
                line.Id = allocateKeyMap.Id;
                this.initRecordLine(x);

                switch (periodUnit)
                {
                    case PeriodUnit::Day:
                        line.FreqCode = PeriodUnit::Day;
                        line.Freq     = units * x;
                        break;
                    case PeriodUnit::Month:
                        line.FreqCode = PeriodUnit::Month;
                        line.Freq     = x;
                        break;
                    case PeriodUnit::Year:
                        line.FreqCode = PeriodUnit::Year;
                        line.Freq     = x;
                        break;
                }

                line.AllocateTransMap::setSort1980();
                line.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTable</Name>
				<Source><![CDATA[
    void doTable(boolean _useCurBuffer = false)
    {
        this.doKey(_useCurBuffer);

        form_DS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init(boolean _reinit = false)
    {
        super();

        units       = this.suggestUnit();
        periodUnit  = this.suggestPeriodUnit();

        this.initFixedStartDate(NoYes::No);
        this.initAllocateKeyName('');
        this.initCreateName();

        this.setPeriodLength();
        this.setBufferLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreateName</Name>
				<Source><![CDATA[
    void initCreateName()
    {
        createName = this.suggestName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriodUnit</Name>
				<Source><![CDATA[
    public void initPeriodUnit(PeriodUnit _periodUnit)
    {
        this.parmPeriodUnit(_periodUnit);

        this.setPeriodLength();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    protected void initRecord()
    {
        AllocateKeyMap  buffer = this.buffer();

        buffer.Id       = createName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordLine</Name>
				<Source><![CDATA[
    abstract protected void initRecordLine(int  no)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnits</Name>
				<Source><![CDATA[
    public void initUnits(Integer _units)
    {
        this.parmUnits(_units);

        this.setPeriodLength();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFixedStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerAllocateKey</c> fixed start date value.
    /// </summary>
    /// <param name = "_fixed">The <c>LedgerAllocationKey</c> fixed start date value.</param>
    public void initFixedStartDate(NoYes _fixedStartDate)
    {
        this.parmFixedStartDate(_fixedStartDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllocateKeyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerAllocateKey</c> name value.
    /// </summary>
    /// <param name = "_allocateKeyName">The <c>LedgerAllocationKey</c> name value.</param>
    public void initAllocateKeyName(Name _allocateKeyName)
    {
        this.parmAllocateKeyName(_allocateKeyName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDBprim</Name>
				<Source><![CDATA[
    void insertDBprim(Common _buffer = null)
    {
        super();
        super(this.bufferLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllocationModified</Name>
				<Source><![CDATA[
    boolean isAllocationModified()
    {
        boolean modified;

        #localmacro.list
            units,
            PeriodUnit
        #endmacro

        modified = [#list] != lastAllocationCon;

        lastAllocationCon = [#list];

        return modified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#currentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packBufferPrim</Name>
				<Source><![CDATA[
    protected container packBufferPrim(Common _buffer = null)
    {
        container   bufferCon;
        container   bufferLineCon;

        bufferCon       = super();
        bufferLineCon   = super(this.bufferLine());

        return [bufferCon,bufferLineCon];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateName</Name>
				<Source><![CDATA[
    LedgerAllocateKeyId parmCreateName(LedgerAllocateKeyId _createName = createName)
    {
        createName = _createName;

        return createName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public RecId parmDefaultDimension(RecId _defaultDimension = defaultDimension)
    {
        defaultDimension = _defaultDimension;

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForm_DSLine</Name>
				<Source><![CDATA[
    final public FormDataSource parmForm_DSLine(FormDataSource _form_DS = form_DSLine)
    {
        form_DSLine = _form_DS;

        return form_DSLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodLength</Name>
				<Source><![CDATA[
    public PeriodLength parmPeriodLength(PeriodLength _periodLength = periodLength)
    {
        periodLength = _periodLength;

        return periodLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodUnit</Name>
				<Source><![CDATA[
    public PeriodUnit parmPeriodUnit(PeriodUnit _periodUnit = periodUnit)
    {
        periodUnit = _periodUnit;

        return periodUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnits</Name>
				<Source><![CDATA[
    public Integer parmUnits(Integer _units = units)
    {
        units = _units;

        return units;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedStartDate</Name>
				<Source><![CDATA[
    public Integer parmFixedStartDate(boolean _fixedStartDate = fixedStartDate)
    {
        fixedStartDate = _fixedStartDate;

        return fixedStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocateKeyName</Name>
				<Source><![CDATA[
    public Name parmAllocateKeyName(Name _allocateKeyName = allocateKeyName)
    {
        allocateKeyName = _allocateKeyName;

        return allocateKeyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBufferLine</Name>
				<Source><![CDATA[
    abstract void setBufferLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodLength</Name>
				<Source><![CDATA[
    void setPeriodLength()
    {
        switch (periodUnit)
        {
            case PeriodUnit::Day:
                switch (true)
                {
                    case units < 7:
                        periodLength = 30;
                        break;
                    default:
                        periodLength = real2int(roundUp(units*2,365));
                        break;
                }
                break;
            case PeriodUnit::Month:
                switch (true)
                {
                    case units < 5:
                        periodLength    = real2int(roundUp(units+1,12));
                        break;
                    default:
                        periodLength    = real2int(roundUp(units*2,units));
                        break;
                }
                break;
            case PeriodUnit::Year:
                switch (true)
                {
                    case units < 3:
                        periodLength    = real2int(roundUp(units+1,5));
                        break;
                    default:
                        periodLength    = real2int(roundUp(units*2,units));
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestName</Name>
				<Source><![CDATA[
    SysGroup suggestName()
    {
        SysGroup name = strfmt('%1.',units);

        switch (periodUnit)
        {
            case PeriodUnit::Day:
                name+="@SYS4569";
                break;
            case PeriodUnit::Month:
                name+="@SYS11451";
                break;
            case PeriodUnit::Year:
                name+="@SYS5563";
                break;
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestPeriodUnit</Name>
				<Source><![CDATA[
    PeriodUnit suggestPeriodUnit()
    {
        return PeriodUnit::Day;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestUnit</Name>
				<Source><![CDATA[
    int suggestUnit()
    {
        return 7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryNo</Name>
				<Source><![CDATA[
    NumberOf summaryNo()
    {
        return 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container c)
    {
        container base;

        [#currentList,base] = c;

        return super(base);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackBufferPrim</Name>
				<Source><![CDATA[
    public void unpackBufferPrim(container _c, Common _buffer = null)
    {
        super(conpeek(_c,1));
        super(conpeek(_c,2),this.bufferLine());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>