<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFOPValidation_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Responsible for validate the CFOP code chosen by user
/// </summary>
class CFOPValidation_BR
{
    RefRecId                    cfopTableRecId;
    CFOPAttributesDeterminer_BR cfopAttributes;

    boolean                     showInfolog;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCFOP</Name>
				<Source><![CDATA[
    /// <summary>
    /// It validates if the Chosen CFOP Matrix Record has the correct attributes
    /// (Operation ID, Transaction Type Direction and Location)
    /// </summary>
    /// <param name="_showInfolog">
    /// Indicates if the infolog have to be show.
    /// </param>
    /// <returns>
    /// It returns true if the validation is correct
    /// </returns>
    public boolean checkCFOP(boolean _showInfolog = true)
    {
        boolean ok = true;

        if (!this.validateCFOPMatrix(cfopTableRecId))
        {
            ok = _showInfolog && checkFailed(strFmt("@GLS63430",
                                                        CFOPTable_BR::find(cfopTableRecId).cfopId,
                                                        tablepname(CFOPMatrix_BR),
                                                        fieldpname(CFOPMatrix_BR, SalesPurchOperationType_BR),
                                                        fieldpname(CFOPMatrix_BR, Transactiontype)));
        }

        if (cfopTableRecId && !cfopAttributes.canDetermineLocation() )
        {
            ok = _showInfolog && checkFailed(strFmt("@GLS63431",fieldPName(CFOPTable_BR, cfopId)));
        }

        if (ok)
        {
            ok = this.validateCFOPTableAttributes(_showInfolog);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCFOP</Name>
				<Source><![CDATA[
    /// <summary>
    /// It responsible for getting the default CFOP Matrix Record
    /// </summary>
    /// <param name="_openUserDialog">
    /// if a question should be showed to the user or not
    /// </param>
    /// <returns>
    /// It returns the CFOPTable RecId found it, otherwise return 0
    /// </returns>
    /// <remarks>
    /// The default value is set if the original is different from the default value.
    /// If the original does not exist, or if the user answers "Yes" to the question (if the question is not showed the data is updated
    /// If the question is not showed the data is updated.
    /// </remarks>
    public RefRecId getDefaultCFOP(boolean   _openUserDialog = false)
    {
        RecId   defaultCFOPRecId;
        RecId   currentCFOPRecId;

        currentCFOPRecId = cfopTableRecId;

        if (cfopAttributes.canDetermineLocation())
        {
            defaultCFOPRecId = this.setDefaultCFOP();
        }
        else
        {
            defaultCFOPRecId = 0;
        }

        if (currentCFOPRecId == defaultCFOPRecId ||
           (_openUserDialog
            && currentCFOPRecId
            && Box::yesNo(strFmt("@GLS1009", "@GLS200"), DialogButton::No)== DialogButton::No))
        {
            return currentCFOPRecId;
        }

        currentCFOPRecId =  defaultCFOPRecId;

        return currentCFOPRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>CFOPValidation_BR</c> class.
    /// </summary>
    /// <param name="_attributes">
    /// The <c>CFOPAttributesDeterminer_BR</c> class instance that provides the CFOP attributes to be used in the CFOP validation process.
    /// </param>
    /// <param name="_cfopTableRecId">
    /// A <c>RefRecId</c> value that points to the <c>CFOPTable_BR</c> table record to be used in the CFOP validation process.
    /// </param>
    protected void new(CFOPAttributesDeterminer_BR _attributes, RefRecId _cfopTableRecId)
    {
        this.parmCfopattributes(_attributes);
        this.parmCfopTableRecId(_cfopTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCfopattributes</Name>
				<Source><![CDATA[
    public CFOPAttributesDeterminer_BR parmCfopattributes(CFOPAttributesDeterminer_BR _cfopattributes = cfopattributes)
    {
        cfopattributes = _cfopattributes;

        return cfopattributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCfopTableRecId</Name>
				<Source><![CDATA[
    public RefRecId parmCfopTableRecId(RefRecId _cfopTableRecId = cfopTableRecId)
    {
        cfopTableRecId = _cfopTableRecId;

        return cfopTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultCFOP</Name>
				<Source><![CDATA[
    /// <summary>
    /// It defines the default CFOP that should be used
    /// </summary>
    /// <returns>
    /// Return the RecId of CFOPTable
    /// </returns>
    /// <remarks>
    /// It will return the RecId if just one CFOP match is found according to attributes
    /// </remarks>
    private RefRecId  setDefaultCFOP()
    {
        Query           query;
        QueryRun        queryRun;
        CFOPTable_BR    localCFOPTable;

        query = cfopAttributes.lookupQuery();

        queryRun = new QueryRun(query);

        if (SysQuery::countLoops(queryRun) == 1)
        {
            queryRun.next();
            localCFOPTable = queryRun.get(tableNum(CFOPTable_BR));

            return localCFOPTable.RecId;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCFOPMatrix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the chosen CFOP in the transaction is present in CFOPMatrix
    /// with correct "operation Id" and "operation Type".
    /// </summary>
    /// <param name="_cfopTableRecId">
    /// CFOPTable RecId
    /// </param>
    /// <returns>
    /// Returns true if the CFOP information is allowed.
    /// </returns>
    public boolean  validateCFOPMatrix(RefRecId   _cfopTableRecId)
    {
        Query           query;

        query = cfopAttributes.lookupQuery();

        query.dataSourceTable(tableNum(CFOPTable_BR)).addRange(fieldNum(CFOPTable_BR, RecId)).value(queryValue(_cfopTableRecId));

        return SysQuery::countLoops(new queryRun(query));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCFOPTableAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is responsible for checking if the current CFOP is correct based on required attributes
    /// (Direction and Location)
    /// </summary>
    /// <param name="_showInfolog">
    /// Indicates if the infolog have to be show.
    /// </param>
    /// <returns>
    /// It returns true if the cfop is valid
    /// </returns>
    public boolean validateCFOPTableAttributes(boolean _showInfolog = true)
    {
        boolean         ok = true;
        CFOPTable_BR    cfopTable;

        cfopTable = CFOPTable_BR::find(cfopTableRecId);

        if (cfopattributes.getDirection() != cfopTable.Direction)
        {
            ok = _showInfolog && checkFailed(strFmt("@GLS63432",
                                                cfopTable.cfopId,
                                                cfopattributes.getDirection()));
        }

        if (cfopattributes.getLocation() != cfopTable.CustVendLocation)
        {
            ok = _showInfolog && checkFailed(strFmt("@GLS63432",
                                                cfopTable.cfopId,
                                                cfopattributes.getLocation()));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the correct instance of the <c>CFOPValidation_BR</c> class according to the transaction that is being performed.
    /// </summary>
    /// <param name="_tableTransaction">
    /// A record of the table that represents the kind of transaction that is requiring the CFOP validation.
    /// </param>
    /// <returns>
    /// An instance of the <c>CFOPValidation_BR</c> class to be used for CFOP validation.
    /// </returns>
    public static CFOPValidation_BR construct(Common _tableTransaction)
    {
        CFOPAttributesDeterminer_BR     attributes;
        RefRecId                        cfopTableRecId;

        attributes              = CFOPAttributesDeterminer_BR::construct(_tableTransaction);
        cfopTableRecId          = attributes.getCFOPTable().RecId;

        return new CFOPValidation_BR(attributes, cfopTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForProjItemRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the correct instance of the <c>CFOPValidation_BR</c> class for the project item requirement.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record.
    /// </param>
    /// <returns>
    /// An instance of the <c>CFOPValidation_BR</c> class to be used for CFOP validation.
    /// </returns>
    public static CFOPValidation_BR constructForProjItemRequirement(SalesLine _salesLine)
    {
        CFOPAttributesDeterminer_BR     attributes;
        RefRecId                        cfopTableRecId;

        attributes      = new ItemReqLineCFOPAttributesDeterminer_BR(_salesLine);
        cfopTableRecId  = _salesLine.salesLine_BR().DeliveryCFOPTable_BR;

        attributes.getCFOPAttributes();

        return new CFOPValidation_BR(attributes, cfopTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is responsible for checking if the current Delivery address has matching Country/region and State fields
    /// with that of Fiscal establishment address.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The Fiscal establishment record required for validating Delivery address.
    /// </param>
    /// <param name="_deliveryPostalAddressRecId">
    /// The Delivery postal adress record Id required for validation.
    /// </param>
    /// <param name="_showInfolog">
    /// The flag required to show the error message.
    /// </param>
    /// <returns>
    /// It returns true if the Delivery address is valid.
    /// </returns>
    static boolean validateDeliveryAddress(FiscalEstablishment_BR   _fiscalEstablishment,
                                           RefRecId                 _deliveryPostalAddressRecId,
                                           boolean                  _showInfolog = true)
    {
        DirPartyLocation        dirPartyLocation;
        LogisticsPostalAddress  deliveryAddress;
        LogisticsPostalAddress  fiscalEstablishmentAddress;
        boolean                 retValue = true;

        deliveryAddress = LogisticsPostalAddress::findRecId(_deliveryPostalAddressRecId);

        dirPartyLocation = DirPartyLocation::findRec(_fiscalEstablishment.DirPartyLocation);
        fiscalEstablishmentAddress = LogisticsPostalAddress::findByLocation(LogisticsLocation::find(dirPartyLocation.Location).RecId);

        if (deliveryAddress.CountryRegionId != fiscalEstablishmentAddress.CountryRegionId
            || deliveryAddress.State != fiscalEstablishmentAddress.State)
        {
            retValue = false;
            if (_showInfolog)
            {
                checkFailed("@Brazil:ConfigLogisticsLocationWrongAddress");
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// It validates if CFOP is present in CFOPMatrix with the correct attributes
    /// (Operation ID, Transaction Type, Direction and Location).
    /// </summary>
    /// <param name="_common">
    /// Record with CFOP attribute to be validated.
    /// </param>
    /// <returns>
    /// true if CFOP is valid for the given record; false otherwise.
    /// </returns>
    /// <remarks>
    /// The process happens entirely on the server to reduce RPC chattiness.
    /// </remarks>
    public static boolean validate(Common _common)
    {
        CFOPValidation_BR           cfopValidation;

        cfopValidation = CFOPValidation_BR::construct(_common);
        return cfopValidation.checkCFOP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>