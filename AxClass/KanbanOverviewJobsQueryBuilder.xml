<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanOverviewJobsQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    An AIF provider of kanban jobs for products.
/// </summary>
public class KanbanOverviewJobsQueryBuilder extends AifQueryBuilder
{
    KanbanOverviewJobsQueryBuilderArgs args;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>KanbanOverviewJobsQueryBuilderArgs</c> class member.
    /// </summary>
    /// <returns>
    /// A <c>KanbanOverviewJobsQueryBuilderArgs</c> object.
    /// </returns>
    protected KanbanOverviewJobsQueryBuilderArgs getArgs()
    {
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>QueryRun</c> object to fetch the jobs for a product.
    /// </summary>
    public void initialize()
    {
        QueryBuildRange         queryBuildRange;

        int                     rulesLength = conLen(this.getArgs().parmRulesRecId());
        int                     activitiesLength = conLen(this.getArgs().parmPlanActivitiesRecId());
        int                     idx;
        boolean                 filteredActivity = false;
        RefRecId                wrkCtrResourceGroup;
        List                    productDimFields = InventDim::dimProductDimFieldList();
        ListEnumerator          enumerator = (productDimFields) ? productDimFields.getEnumerator() : null;

        [wrkCtrResourceGroup] = this.getArgs().parmQueryArgs();

        query = new Query();

        // Kanban Job
        query.allowCrossCompany(true);

        QueryBuildDataSource qbdsKanbanJob = query.addDataSource(tableNum(KanbanJob));
        qbdsKanbanJob.fields().clearFieldList();
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, RecId));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, Kanban));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, Type));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, QuantityOrdered));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, ExpectedDateTime));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, DueDateTime));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, Status));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, wmsLocationId));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, InventLocationId));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, LeanScheduleGroupName));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, LeanScheduleGroupColor));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob, PlanActivityName));

        if (this.getArgs().parmFilterOnType())
        {
            queryBuildRange = qbdsKanbanJob.addRange(fieldNum(KanbanJob, Type));
            queryBuildRange.value(SysQuery::value(this.getArgs().parmKanbanJobType()));
        }

        if (this.getArgs().parmFilterOnStatus())
        {
            queryBuildRange = qbdsKanbanJob.addRange(fieldNum(KanbanJob, Status));
            queryBuildRange.value(SysQuery::value(this.getArgs().parmKanbanJobStatus()));
        }

        if (this.getArgs().parmFilterOnExecutable())
        {
            queryBuildRange = qbdsKanbanJob.addRange(fieldNum(KanbanJob, Executable));
            queryBuildRange.value(SysQuery::value(NoYes::Yes));
        }

        // Kanban
        QueryBuildDataSource qbdsKanban = qbdsKanbanJob.addDataSource(tableNum(Kanban));
        qbdsKanban.fields().clearFieldList();
        qbdsKanban.fields().addField(fieldNum(Kanban, RecId));
        qbdsKanban.fields().addField(fieldNum(Kanban, KanbanId));
        qbdsKanban.fields().addField(fieldNum(Kanban, ItemId));
        qbdsKanban.fields().addField(fieldNum(Kanban, ItemDataAreaId));
        qbdsKanban.fields().addField(fieldNum(Kanban, Express));
        qbdsKanban.fields().addField(fieldNum(Kanban, Status));
        qbdsKanban.fields().addField(fieldNum(Kanban, KanbanRule));
        qbdsKanban.fields().addField(fieldNum(Kanban, KanbanCardId));
        qbdsKanban.fields().addField(fieldNum(Kanban, InventDimId));
        qbdsKanban.fields().addField(fieldNum(Kanban, InventDimDataAreaId));

        qbdsKanban.fetchMode(QueryFetchMode::One2One);
        qbdsKanban.joinMode(JoinMode::InnerJoin);
        qbdsKanban.addLink(fieldNum(KanbanJob, Kanban), fieldNum(Kanban, RecId));

        queryBuildRange = qbdsKanban.addRange(fieldNum(Kanban, Status));
        queryBuildRange.value(SysQuery::valueNot(LeanKanbanStatus::Emptied));

        // InventTable
        QueryBuildDataSource qbdsInventTable = qbdsKanban.addDataSource(tableNum(InventTable));
        qbdsInventTable.fields().clearFieldList();
        qbdsInventTable.fields().addField(fieldNum(InventTable, RecId));
        qbdsInventTable.fields().addField(fieldNum(InventTable, ItemId));
        qbdsInventTable.fields().addField(fieldNum(InventTable, DataAreaId));
        qbdsInventTable.fields().addField(fieldNum(InventTable, Product));

        qbdsInventTable.fetchMode(QueryFetchMode::One2One);
        qbdsInventTable.joinMode(JoinMode::InnerJoin);
        qbdsInventTable.addLink(fieldNum(Kanban, ItemId), fieldNum(InventTable, ItemId));
        qbdsInventTable.addLink(fieldNum(Kanban, ItemDataAreaId), fieldNum(InventTable, DataAreaId));

        // InventDim
        QueryBuildDataSource qbdsInventDim = qbdsKanban.addDataSource(tableNum(InventDim));
        qbdsInventDim.fields().clearFieldList();
        qbdsInventDim.fields().addField(fieldNum(InventDim, RecId));
        qbdsInventDim.fields().addField(fieldNum(InventDim, InventDimId));
        qbdsInventDim.fields().addField(fieldNum(InventDim, DataAreaId));
        if (enumerator)
        {
            while (enumerator.moveNext())
            {
                qbdsInventDim.fields().addField(enumerator.current());
            }
        }

        qbdsInventDim.fetchMode(QueryFetchMode::One2One);
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.addLink(fieldNum(Kanban, InventDimId), fieldNum(InventDim, InventDimId));
        qbdsInventDim.addLink(fieldNum(Kanban, InventDimDataAreaId), fieldNum(InventDim, DataAreaId));

        // EcoResProductTranslation for product (non-variant, go through InventTable.Product)
        QueryBuildDataSource qbdsEcoResProductTranslation = qbdsKanban.addDataSource(tableNum(EcoResProductTranslation), 'EcoResProductTranslation');
        qbdsEcoResProductTranslation.fields().clearFieldList();
        qbdsEcoResProductTranslation.fields().addField(fieldNum(EcoResProductTranslation, RecId));
        qbdsEcoResProductTranslation.fields().addField(fieldNum(EcoResProductTranslation, Product));
        qbdsEcoResProductTranslation.fields().addField(fieldNum(EcoResProductTranslation, Name));
        qbdsEcoResProductTranslation.fields().addField(fieldNum(EcoResProductTranslation, Description));

        qbdsEcoResProductTranslation.fetchMode(QueryFetchMode::One2One);
        qbdsEcoResProductTranslation.joinMode(JoinMode::OuterJoin);
        qbdsEcoResProductTranslation.addLink(fieldNum(InventTable, Product), fieldNum(EcoResProductTranslation, Product), qbdsInventTable.name());

        queryBuildRange = qbdsEcoResProductTranslation.addRange(fieldNum(EcoResProductTranslation, LanguageId));
        queryBuildRange.value(SysQuery::value(this.getArgs().parmLanguageId()));

        // EcoResProductTranslation for product variant (go through InventDimCombination.DistinctProductVariant)
        QueryBuildDataSource qbdsInventDimCombination = qbdsKanban.addDataSource(tableNum(InventDimCombination), tableStr(InventDimCombination));
        qbdsInventDimCombination.fields().clearFieldList();
        qbdsInventDimCombination.fields().addField(fieldNum(InventDimCombination, RecId));
        qbdsInventDimCombination.fields().addField(fieldNum(InventDimCombination, ItemId));
        qbdsInventDimCombination.fields().addField(fieldNum(InventDimCombination, InventDimId));
        qbdsInventDimCombination.fields().addField(fieldNum(InventDimCombination, DataAreaId));
        qbdsInventDimCombination.fields().addField(fieldNum(InventDimCombination, DistinctProductVariant));
        qbdsInventDimCombination.relations(false);

        qbdsInventDimCombination.fetchMode(QueryFetchMode::One2One);
        qbdsInventDimCombination.joinMode(JoinMode::OuterJoin);
        qbdsInventDimCombination.addLink(fieldNum(Kanban, ItemId), fieldNum(InventDimCombination, ItemId));
        qbdsInventDimCombination.addLink(fieldNum(Kanban, InventDimId), fieldNum(InventDimCombination, InventDimId));
        qbdsInventDimCombination.addLink(fieldNum(Kanban, InventDimDataAreaId), fieldNum(InventDimCombination, DataAreaId));

        QueryBuildDataSource qbdsEcoResProductTranslationVariant = qbdsKanban.addDataSource(tableNum(EcoResProductTranslation), 'EcoResProductTranslationVariant');
        qbdsEcoResProductTranslationVariant.fields().clearFieldList();
        qbdsEcoResProductTranslationVariant.fields().addField(fieldNum(EcoResProductTranslation, RecId));
        qbdsEcoResProductTranslationVariant.fields().addField(fieldNum(EcoResProductTranslation, Product));
        qbdsEcoResProductTranslationVariant.fields().addField(fieldNum(EcoResProductTranslation, Name));
        qbdsEcoResProductTranslationVariant.fields().addField(fieldNum(EcoResProductTranslation, Description));

        qbdsEcoResProductTranslationVariant.fetchMode(QueryFetchMode::One2One);
        qbdsEcoResProductTranslationVariant.joinMode(JoinMode::OuterJoin);
        qbdsEcoResProductTranslationVariant.addLink(fieldNum(InventDimCombination, DistinctProductVariant), fieldNum(EcoResProductTranslation, Product), qbdsInventDimCombination.name());

        queryBuildRange = qbdsEcoResProductTranslationVariant.addRange(fieldNum(EcoResProductTranslation, LanguageId));
        queryBuildRange.value(SysQuery::value(this.getArgs().parmLanguageId()));

        if (wrkCtrResourceGroup ||
            (this.getArgs().parmPlanActivitiesRecId() &&
            activitiesLength > 0))
        {
            // Lean Production Flow
            QueryBuildDataSource qbdsLeanProductionFlowActivity = qbdsKanbanJob.addDataSource(tableNum(LeanProductionFlowActivity));
            qbdsLeanProductionFlowActivity.fetchMode(QueryFetchMode::One2One);
            qbdsLeanProductionFlowActivity.joinMode(JoinMode::InnerJoin);
            qbdsLeanProductionFlowActivity.addLink(fieldNum(KanbanJob, LeanProductionFlowActivity), fieldNum(LeanProductionFlowActivity, RecId));

            if (wrkCtrResourceGroup)
            {
                queryBuildRange = qbdsLeanProductionFlowActivity.addRange(fieldNum(LeanProductionFlowActivity, WrkCtrResourceGroup));
                queryBuildRange.value(SysQuery::value(wrkCtrResourceGroup));
            }

            if (this.getArgs().parmPlanActivitiesRecId() &&
                activitiesLength > 0)
            {
                filteredActivity = true;
                for (idx = 1; idx <= activitiesLength; idx++)
                {
                    queryBuildRange = qbdsLeanProductionFlowActivity.addRange(fieldNum(LeanProductionFlowActivity, PlanActivity));
                    queryBuildRange.status(RangeStatus::Locked);
                    queryBuildRange.value(strFmt('((%1.%2 = %3) && (%4.%5 = %6))',
                        qbdsKanban.name(),
                        fieldStr(Kanban, KanbanRule),
                        conPeek(this.getArgs().parmRulesRecId(), idx),
                        qbdsLeanProductionFlowActivity.name(),
                        fieldStr(LeanProductionFlowActivity, PlanActivity),
                        conPeek(this.getArgs().parmPlanActivitiesRecId(), idx)));
                }
            }
        }

        if (!filteredActivity)
        {
            rulesLength = conLen(this.getArgs().parmRulesRecId());
            for (idx = 1; idx <= rulesLength; idx++)
            {
                queryBuildRange = qbdsKanban.addRange(fieldNum(Kanban, KanbanRule));
                queryBuildRange.value(SysQuery::value(conPeek(this.getArgs().parmRulesRecId(), idx)));
            }
        }

        // Kanban Job Schedule
        QueryBuildDataSource qbdsKanbanJobSchedule = qbdsKanbanJob.addDataSource(tableNum(KanbanJobSchedule));
        qbdsKanbanJobSchedule.fields().clearFieldList();
        qbdsKanbanJobSchedule.fields().addField(fieldNum(KanbanJobSchedule, RecId));
        qbdsKanbanJobSchedule.fields().addField(fieldNum(KanbanJobSchedule, PlannedPeriod));
        qbdsKanbanJobSchedule.fields().addField(fieldNum(KanbanJobSchedule, Sequence));

        qbdsKanbanJobSchedule.fetchMode(QueryFetchMode::One2One);
        qbdsKanbanJobSchedule.joinMode(JoinMode::OuterJoin);
        qbdsKanbanJobSchedule.addLink(fieldNum(KanbanJob, RecId), fieldNum(KanbanJobSchedule, Job));

        // add the sorting fields
        qbdsKanbanJob.addOrderByField(fieldNum(KanbanJob, Status), SortOrder::Descending);
        qbdsKanban.addOrderByField(fieldNum(Kanban, Status), SortOrder::Descending);
        qbdsKanbanJobSchedule.addOrderByField(fieldNum(KanbanJobSchedule, PlannedPeriod), SortOrder::Ascending);
        qbdsKanbanJobSchedule.addOrderByField(fieldNum(KanbanJobSchedule, Sequence), SortOrder::Ascending);
        qbdsKanbanJob.addOrderByField(fieldNum(KanbanJob, Sequence), SortOrder::Ascending);

        // Initialize query run
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>KanbanOverviewJobsQueryBuilderArgs</c> class member.
    /// </summary>
    /// <param name="_args">
    ///    A <c>KanbanOverviewJobsQueryBuilderArgs</c> object.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The parameter is invalid.
    /// </exception>
    public void setArgs(AifQueryBuilderArgs _args)
    {
        //returns an error if this method is called and the args are NULL or if the
        //args class that is passed is not the correct class type.
        if (   !_args
            || classidget(_args) != classnum(KanbanOverviewJobsQueryBuilderArgs))
        {
            throw error("@SYS95118");
        }

        args = _args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanOverviewJobsQueryBuilder construct()
    {
        return new KanbanOverviewJobsQueryBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
