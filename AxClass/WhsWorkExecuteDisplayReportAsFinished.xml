<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayReportAsFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to report that the work is finished.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::ReportAsFinished)]
[WHSWorkExecuteMode(WHSWorkExecuteMode::ReportAsFinishedAndLocate)]
public class WhsWorkExecuteDisplayReportAsFinished extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildReportAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state to build PO Put Away screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_licensePlateId">
    /// The license plate id.
    /// </param>
    /// <param name="_extraText">
    /// Label text.
    /// </param>
    /// <param name="_outputLocationRequiresLicensePlate">
    /// A flag determining if the license plate control should be shown to the user; optional.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildReportAsFinished(container           _con,
                                    WHSLicensePlateId   _licensePlateId = '',
                                    str                 _extraText = '',
                                    boolean             _outputLocationRequiresLicensePlate = true)
    {
        container       ret = _con;
        WHSInventTable  whsInventTable;
        InventDim       inventDim;
        boolean         canEditItem;
        InventQty       proposalQty;
        ProdQty         wHSDefaultProdQty;

        WHSRFMenuItemTable menuItemTable = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));

        ret += [this.buildControl(#RFLabel, 'ProdPutaway', menuItemTable.rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];

        if (pass.exists(#ProdId) && pass.lookup(#ProdId) != '')
        {
            ret += [this.buildControl(#RFText, #ProdId, "@WAX725", 1, pass.lookup(#ProdId), extendedTypeNum(ProdId), '', 0, false)];

            canEditItem = ProdTable::find(pass.lookup(#ProdId)).ProdType == ProdType::Process
                            && !pass.hasvalue(#ItemId);

            ret += [this.buildControl(#RFText, #ItemId, "@WAX1240", 1, pass.lookup(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, canEditItem)];

            if (pass.hasValue(#ItemId) && (!pass.hasValue(#Qty)))
            {
                if (InventTable::find(pass.lookup(#ItemId)).PmfProductType == PmfProductType::Co_Product ||
                    InventTable::find(pass.lookup(#ItemId)).PmfProductType == PmfProductType::By_Product)
                {
                    if (PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId)))
                    {
                        proposalQty = ProdUpdReportFinished::pmfCWCoByProposalQtyGood(this.findProdCoByFromPass(pass));
                    }
                    else
                    {
                        proposalQty = ProdUpdReportFinished::pmfCoByProposalQtyGood(this.findProdCoByFromPass(pass));
                    }
                    
                    wHSDefaultProdQty = WHSInventTable::find(pass.lookup(#ItemId)).ProdQty;
                }
                else
                {
                    if (PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId)))
                    {
                        proposalQty = ProdUpdReportFinished::pdsCWProposalQtyGood(pass.lookup(#ProdId));
                    }
                    else
                    {
                        proposalQty = ProdUpdReportFinished::proposalQtyGood(pass.lookup(#ProdId));
                    }
                    wHSDefaultProdQty   = WHSProdTable::find(pass.lookup(#ProdId)).ProdQty;
                }

                UnitOfMeasureSymbol defaultProdUnit = WHSUOMSeqGroupTable::getDefaultProdUOM(pass.lookup(#ItemId));
                InventQty           proposalQtyDefaultProdUnit = proposalQty;

                InventDim inventDimFromProd;

                if (pass.exists(#ProdId))
                {
                    inventDimFromProd = InventDim::find(ProdTable::find(pass.lookup(#ProdId)).InventDimId);
                }

                proposalQtyDefaultProdUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(pass.lookup(#ItemId), 
                                                                                                                    inventDimFromProd.InventDimId,
                                                                                                                    proposalQty, 
                                                                                                                    WHSCatchWeightHelper::inventHandlingUnitId(pass.lookup(#ItemId)), 
                                                                                                                    defaultProdUnit, 
                                                                                                                    NoYes::Yes);

                if (wHSDefaultProdQty > 0)
                {
                    if (proposalQtyDefaultProdUnit > 0)
                    {
                        pass.insert(#Qty, min(proposalQtyDefaultProdUnit, whsDefaultProdQty));
                    }
                    else
                    {
                        pass.insert(#Qty, '');
                    }
                }
                else
                {
                    if (proposalQtyDefaultProdUnit > 0)
                    {
                        pass.insert(#Qty, proposalQtyDefaultProdUnit);
                    }
                    else
                    {
                        pass.insert(#Qty, '');
                    }
                }

                pass.insert(#SelectedValueUOM, defaultProdUnit);
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, #ProdId, "@WAX725", 1, '', extendedTypeNum(ProdId), '', 0)];
            ret += [this.buildControl(#RFText, #ItemId, "@WAX1240", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];
        }

        if (pass.exists(#ItemId) && pass.lookup(#ItemId) != '')
        {
            whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", InventTable::find(whsInventTable.ItemId).productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }

            if (pass.exists(#ProdId))
            {
                inventDim = this.retrieveInventDimFromPass();
            }

            ret = this.buildReportAsFinishedDimensions(ret, inventDim);
        }

        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0)];

        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));

        // Builds the batch control elements
        ret = this.buildBatchOverrideIfMenuItemAllows(ret, inventDim.InventBatchId, _licensePlateId, _outputLocationRequiresLicensePlate);

        // Create the batch immediately after entry as it needs to be committed. Since the RAF process runs in a new session, it will not see uncommitted data from the mobile device session.
        this.createBatchFromPassIfBatchOverrideMenuEnabled(menuItemTable);

        // Only adds the license plate control if it wasn't added via batch override.
        if (_outputLocationRequiresLicensePlate && !this.getControlLocation(ret, #LicensePlateId))
        {
            ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, _licensePlateId, extendedTypeNum(WHSLicensePlateId), '', 0, WHSRFMenuItemTable::generatedLPEnabled(pass.lookupStr(#MenuItem)))];
        }

        if (menuItemTable.DisplayContainerTypeCode)
        {
            if (pass.hasValue(#LicensePlateId))
            {
                ret = this.buildContainerType(ret, pass.lookupStr(#ContainerType));
            }
            else if (!pass.exists(#Initiation) && pass.hasValue(#ContainerType))
            {
                pass.remove(#ContainerType);
            }
        }

        /* 
            The item must have one of the following conditions met for the catch weight control to be drawn to the screen:
                1. Catch weight enabled, non catch weight tag tracked
                2. Catch weight enabled, catch weight tag tracked, requires aggregate weight checks and not auto-selecting inbound catch weight tags
        */
        boolean isCatchWeightTagTracked = WHSInventTable::isCatchWeightTagTracked(whsInventTable.ItemId);

        if (PdsGlobal::pdsIsCWItem(whsInventTable.ItemId)
            && (!isCatchWeightTagTracked
                || (isCatchWeightTagTracked
                    && WHSInventTable::shouldCaptureAggregateWeight(whsInventTable.ItemId))
                    && !WHSCatchWeightTagAutoSelect::useAutoSelectionForInbound(pass)))
        {
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, '', extendedTypeNum(Weight), '', 0)];
        }

        if (menuItemTable.ShowDisposition)
        {
            ret = this.buildDispositon(ret, pass.lookupStr(#Disposition), true, true);
        }

        if (menuItemTable.WHSAllowEndJob)
        {
            ret = this.buildEndJob(ret, true, pass.lookupStr(#RAFEndJob));
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProdCoByFromPass</Name>
				<Source><![CDATA[
    private PmfProdCoBy findProdCoByFromPass(WHSRFPassthrough _pass)
    {
        return PmfProdCoBy::findByProdIdItemIdInventDim(_pass.parmProdId(), _pass.parmItemId(), _pass.createInventDimFromPass());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchFromPassIfBatchOverrideMenuEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new batch when the batch override menu is enabled.
    /// </summary>
    /// <param name="_menuItemTable">A <c>WHSRFMenuItemTable</c> buffer to check if the override batch menu is enabled.</param>
    private void createBatchFromPassIfBatchOverrideMenuEnabled(WHSRFMenuItemTable _menuItemTable)
    {
        if (_menuItemTable.OverrideInventBatchId
            && pass.exists(#BatchId) && pass.lookup(#BatchId) 
            && pass.exists(#ItemId) && pass.lookup(#ItemId))
        {
            InventBatch inventBatch = InventBatch::find(pass.lookup(#BatchId), pass.lookup(#ItemId));

            if (!inventBatch)
            {
                InventTable inventTable     = InventTable::find(pass.lookup(#ItemId));

                inventBatch.InventBatchId   = pass.lookup(#BatchId);
                inventBatch.ItemId          = pass.lookup(#ItemId);
                inventBatch.initializeProductionDate();
                inventBatch.ExpDate         = inventTable.isShelfLifeItem() ? inventBatch.ProdDate : dateNull();

                inventBatch.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReportAsFinishedDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates RF display to show label controls for production order dimensions.
    /// </summary>
    /// <param name="_con">
    /// The current RF display container.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions that label controls will be built for.
    /// </param>
    /// <returns>
    /// An updated RF display container with added label controls.
    /// </returns>
    private container buildReportAsFinishedDimensions(
        container   _con,
        InventDim   _inventDim)
    {
        container       ret = _con;
        InventDimParm   inventDimParm;
        ListEnumerator  le;
        FieldId         dimFieldId;
        boolean         skipBatchDimControl;

        inventDimParm.initFromInventDim(_inventDim);

        // Only build the base inventory batch dimension control if the RF menu item is not configured for batch number override.
        skipBatchDimControl = WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).OverrideInventBatchId;
        InventTable inventTable = InventTable::find(pass.parmItemId());

        le = inventDimParm.selectedDimFields().getEnumerator();

        while (le.moveNext())
        {
            dimFieldId = le.current();

            // Don't build controls for specific dimensions
            if (this.mustShowInventoryDimensionForItem(inventTable, dimFieldId)
                &&  dimFieldId      != fieldNum(InventDim, InventSiteId)
                &&  dimFieldId      != fieldNum(InventDim, InventLocationId)
                &&  dimFieldId      != fieldNum(InventDim, LicensePlateId)
                &&  dimFieldId      != fieldNum(InventDim, wmsLocationId)
                &&  !(dimFieldId    == fieldNum(InventDim, InventBatchId)
                    && skipBatchDimControl))
            {
                ret += [this.buildControl(#RFLabel,
                                          fieldId2name(tableNum(InventDim), dimFieldId),
                                          strFmt("%1: %2", new DictField(tableNum(InventDim), dimFieldId).label(), _inventDim.(dimFieldId)),
                                          1, '', #WHSRFUndefinedDataType, '', 0, false)];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEndJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Builds an end production order combobox control on the RF device.
    /// </summary>
    /// <param name="_con">
    ///  Container with built up RF controls.
    /// </param>
    /// <param name="_enabled">
    ///  Determines whether or not the end production order combobox control is enabled.
    /// </param>
    /// <param name="_selected">
    ///  Value selected in the RF device for the end production order parameter.
    /// </param>
    /// <returns>
    ///  Returns container with RF controls.
    /// </returns>
    public container buildEndJob(
                            container   _con,
                            boolean     _enabled,
                            str         _selected = '')
    {
        container   ret = _con;
        str         elements;
        str         selected = _selected;

        elements = enum2str(NoYes::No) + '||' + enum2str(NoYes::Yes);

        if (!selected)
        {
            selected = enum2str(NoYes::No);
        }

        ret += [this.buildControl(#RFCombobox, #RAFEndJob, 'End Job', 1, elements, #WHSRFUndefinedDataType, '', 0, _enabled, selected)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container of form layout information to be displayed on a RF device.
    /// </summary>
    /// <param name="_con">
    ///    A container of form state information.
    /// </param>
    /// <param name="_buttonClicked">
    ///    The name of a button that was clicked; optional.
    /// </param>
    /// <returns>
    ///    A container of form layout information to be displayed on a RF device.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The user is in a warehouse that is different from the warehouse where work is executed.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    The work class is invalid.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    The work class is invalid.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    The work line is invalid.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    The work line is invalid.
    /// </exception>
    container displayForm(container _con, str _buttonClicked = '')
    {
        Set                         excludeLocationId = new Set(Types::String);
        WHSWorkExecuteDisplay       workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        WHSLicensePlateId           licensePlateId;
        WhsWorkExecute              workExecute = WhsWorkExecute::construct();
        WHSWorkBuildId              workBuildId;
        WMSLocationId               newLocationId;
        container                   ret = conNull();
        container                   tmpPass;
        container                   con = _con;
        container                   tmpCon;
        int                         hasError = 0;
        boolean                     recall;
        boolean                     addCancel = true;
        container                   tmpFieldValues;
        WHSRFPassthrough            fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean                     complete;
        WHSRFPassthrough            globalPass;
        boolean                     inventBatchChanged;
        boolean                     itemIdChanged;
        InventDim                   productionDimensions;
        boolean                     displayContainerType;
        boolean                     uomChanged;

        globalPass = pass;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));
        pass = this.combineMaps(globalPass, pass);

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        if (_buttonClicked == #RFOverride)       // Override
        {
            step = #OverrideStep1;
        }
        else if (_buttonClicked == #RFFull && step != 0)  // Full (Split)
        {
            step = #SplitWork;
        }
        else if (_buttonClicked == #RFNoLocation)  // Suggest Location (NoLocation)
        {
            workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
            if (pass.exists(#ExcludedLocations))
            {
                excludeLocationId = this.buildLocationListFromStr(pass.lookup(#ExcludedLocations));
            }
            else
            {
                excludeLocationId = this.buildLocationListFromStr(workLine.wmsLocationId);
            }
            [newLocationId, tmpCon] = workExecute.findNewLocation(workLine, excludeLocationId);
            excludeLocationId = Set::create(tmpCon);
            pass.insert(#SuggestLocation, 1);
            pass.insert(#ExcludedLocations, this.buildLocationListFromSet(excludeLocationId));
            if (pass.exists(#PrevStep))
            {
                step = pass.lookup(#PrevStep);
            }
            else
            {
                pass.insert(#NoValidation, '1');
            }
        }
        else if (_buttonClicked == #RFSplitPut)
        {
            this.validateSplitPutAllowed();
            step = #SplitPutWork;
        }

        switch (step)
        {
            case 0,1:
                if (pass.exists(#WorkComplete))
                {
                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                    pass.remove(#WorkComplete);
                    addCancel = false;

                    ret = this.addClusterMessages(ret);
                }

                if (step)
                {
                    if (hasError)
                    {
                        con = this.removeErrorMessages(con);
                    }
                    if (WHSWorkExecuteDisplayReportAsFinishedQtyWithScanningLimitFlight::instance().isEnabled())
                    {
                        [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                    }
                    else
                    {
                        [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                    }
                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);

                    inventBatchChanged = this.fieldValueChanged(fieldValues, #BatchId);
                    itemIdChanged = this.fieldValueChanged(fieldValues, #ItemId);
                    uomChanged = this.fieldValueChanged(fieldValues, #UOM);
                    displayContainerType = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).DisplayContainerTypeCode;

                    pass = this.combineMaps(pass, fieldValues);
                    hasError = this.hasError(con);
                    if (hasError)
                    {
                        ret = con;
                        ret = this.rebuildDimUOM(ret, false, #UOM);
                        ret = this.rebuildBatchDisposition(ret);
                        addCancel = false;
                        break;
                    }
                    if (!pass.parmLicensePlateId() && pass.parmUOM() && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP && pass.hasValue(#ItemId))
                    {
                        licensePlateId = WHSLicensePlate::generateLicensePlateId(pass.lookup(#ItemId), pass.lookup(#UOM));
                        pass.insert(#LicensePlateId, licensePlateId);
                        fieldValues.insert(#LicensePlateId, licensePlateId);
                    }
                }
                else
                {
                    if (pass.parmProdId() && pass.parmUOM() && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP)
                    {
                        licensePlateId = WHSLicensePlate::generateLicensePlateId(pass.lookup(#ItemId), pass.lookup(#UOM));
                        pass.insert(#LicensePlateId, licensePlateId);
                        fieldValues.insert(#LicensePlateId, licensePlateId);
                    }
                    else if (!WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP)
                    {
                        if (pass.parmLicensePlateId())
                        {
                            pass.remove(#LicensePlateId);
                            fieldValues.insert(#LicensePlateId, '');
                        }
                    }
                    step = 1;
                }

                if (itemIdChanged && pass.exists(#ProdId) && pass.exists(#ItemId))
                {
                    if (!PmfProdCoBy::validateBatchOrderTransItem(pass.lookup(#ProdId), pass.lookup(#ItemId)))
                    {
                        pass.insert(#ItemId, '');
                        fieldValues.insert(#ItemId, '');
                        ret = this.addErrorLabel(ret, "@WAX758", WHSRFColorText::Error);
                    }
                }

                boolean outputLocationRequiresLP = this.productionRAFRequiresLicensePlate();

                con = this.buildReportAsFinished(ret, licensePlateId, '', outputLocationRequiresLP);

                if (!InventLocation::find(WHSWorkUserSession::find(userId).InventLocationId).DefaultProductionFinishGoodsLocation)
                {
                    throw error("@WAX5380");
                }

                if (pass.parmQty() != 0)
                {
                    fieldValues.insert(#Qty, pass.lookup(#Qty));
                    fieldValues.insert(#SelectedValueUOM, pass.lookup(#SelectedValueUOM));
                }

                // If container type is displayed and the user has entered an LP into the mobile device, ensure that
                // RAF screen is displayed once more to allow container type to be set.
                if (displayContainerType
                &&  this.displayContainerTypeDuringRAF(licensePlateId))
                {
                    // Reassign license plate Id to the one entered by the user
                    licensePlateId = pass.lookupStr(#LicensePlateId);
                }

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    // If inventory batch has changed, remove the expiration date and rebuild the screen.
                    if (inventBatchChanged)
                    {
                        complete = false;
                        pass.remove(#ExpDate);

                        // If the batch ID changes, remove the default disposition code and potency warning.
                        if (pass.exists(#BatchDispositionDefault))
                        {
                            pass.remove(#BatchDispositionDefault);
                        }

                        if (pass.exists(#PotencyValueWarn))
                        {
                            pass.remove(#PotencyValueWarn);
                        }

                        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP && pass.exists(#LicensePlateId))
                        {
                            licensePlateId = pass.lookupStr(#LicensePlateId);
                        }

                        ret = conNull();
                        ret = this.buildReportAsFinished(ret, licensePlateId);
                        break;
                    }

                    // If the unit of measure has been changed and the container type is being displayed, update the container type to reflect the new unit of measure
                    if (uomChanged
                    &&  displayContainerType)
                    {
                        complete = false;

                        if (pass.exists(#ContainerType))
                        {
                            pass.remove(#ContainerType);
                        }

                        ret = conNull();
                        ret = this.buildReportAsFinished(ret, licensePlateId);
                        break;
                    }

                    if (outputLocationRequiresLP)
                    {
                        // if the license plate id has been generated but not shown to the user.
                        if (complete && licensePlateId)
                        {
                            complete = false;
                        }
                    }
                    else
                    {
                        if (this.indexOfBuildControlFromContainer(_con, #LicensePlateId))
                        {
                            // confirm to the user that LP is not required
                            complete = false;
                        }
                    }

                    if (complete
                        && outputLocationRequiresLP
                        && !pass.lookupStr(#LicensePlateId))
                    {
                        complete = false;
                    }

                    if (complete)
                    {
                        productionDimensions = ProdTable::find(pass.lookup(#ProdId)).inventDim();

                        if (productionDimensions.InventLocationId != pass.lookup(#InventLocationId))
                        {
                            addCancel = true;
                            throw error("@WAX1239");
                        }
                        
                        if (WHSInventTable::mustCaptureCatchWeightTagsPerCatchWeightUnit(pass.lookup(#ItemId), pass.lookup(#MenuItem))
                        &&  !pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
                        {
                            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, 1);
                            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty, WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                                                        pass.lookup(#UOM),
                                                                                                        pass.lookupNum(#Qty),
                                                                                                        productionDimensions.inventDimId));

                            WHSCatchWeightTagAutoSelect autoSelect = WHSCatchWeightTagAutoSelectReportAsFinished::newFromParams(mode, pass);
                            if (autoSelect.canUseAutoSelection())
                            {
                                autoSelect.process();
                            }
                            else
                            {
                                ret = conNull();
                                ret = this.buildCWTagCapture(ret, false);

                                step = #CatchWeightTagCapture;
                                break;
                            }
                        }

                        if (pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
                        {
                            pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty);
                        }

                        WHSWorkCreateProdPut workCreateProdPut = this.initializeWHSWorkCreateProdPut(productionDimensions);

                        boolean qualityManagementBlock;
                        boolean qualityManagementExecuted;

                        [qualityManagementExecuted, qualityManagementBlock] = this.qualityManagementCreateBeforeReportAsFinished(workCreateProdPut);

                        if (qualityManagementBlock)
                        {
                            ret = conIns(ret, 1, conPeek(this.addErrorLabelFromInfolog(conNull(), infologLine(), WHSRFColorText::Error), 1));
                        }
                        else
                        {
                            if (outputLocationRequiresLP)
                            {
                                WHSLicensePlate::createLicensePlate(pass.parmLicensePlateId(), true, this.getDefaultContainerTypeCode());
                                workCreateProdPut.parmTargetLicensePlateId(pass.parmLicensePlateId());
                            }
                        
                            if (this.mustSetCoByProductInventDim())
                            {
                                workCreateProdPut.parmCoByProductInventDim(pass.createInventDimFromPass());
                            }

                            // Auto Generate catch weight tag records based on configs
                            if (PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId))
                                && WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId))
                                && WHSInventTable::shouldCaptureAggregateWeight(pass.lookup(#ItemId))
                                && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateCatchWeightTag)
                            {
                                WHSCatchWeightTagCreationSource tagSource = WHSCatchWeightTagCreationSource::instantiateFromSource(ProdTable::find(pass.lookup(#ProdId)), pass);
                                WHSCatchWeightTagCreationMethod tagMethod = WHSCatchWeightTagCreationMethod::newAutoTagCreation(workCreateProdPut.parmInventHandlingQty(), workCreateProdPut.parmCatchWeight());
                                WHSCatchWeightTagCreator tagCreator = WHSCatchWeightTagCreator::construct();
                                WHSCatchWeightTagCollection catchWeightTagCollection = tagCreator.createCatchWeightTags(tagSource, tagMethod);

                                this.trackAutoGeneratedCatchWeightTags(catchWeightTagCollection);
                            }

                            workCreateProdPut.parmRespectFlushingPrinciple(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RespectFlushingPrincipleForWHSReportedOverproduction);

                            if (qualityManagementExecuted)
                            {
                                using (WHSQualityManagementCreateBeforeReportAsFinishedContext context = WHSQualityManagementCreateBeforeReportAsFinishedContext::construct())
                                {
                                    workBuildId = workCreateProdPut.createReportFinished();
                                }
                            }
                            else
                            {
                                workBuildId = workCreateProdPut.createReportFinished();
                            }

                            if (PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId))
                                && pass.exists(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList))
                            {
                                WHSCatchWeightTagLastRegistration::updateCatchWeightTagRegistrationWorkLine(str2con(pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList)),
                                    WHSWorkTable::findSingleInboundWorkByWorkBuildId(workBuildId).WorkId);
                            }
                        
                            this.updateCatchWeightTagDimensions(workCreateProdPut.parmRAFJournalId());

                            if (pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight))
                            {
                                pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);
                            }

                            if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PrintLabel)
                            {
                                if (workBuildId != '')
                                {
                                    this.buildLicensePlateLabels(workBuildId);
                                }
                                else if (WHSReportAsFinishedPrintLabelNoWorkFlight::instance().isEnabled())
                                {
                                    this.buildLicensePlateLabelsWithoutWork(pass.lookup(#ProdId));
                                }
                            }

                            if (mode == WHSWorkExecuteMode::ReportAsFinishedAndLocate && workBuildId != '')
                            {
                                workLine = WHSWorkTable::getFirstWorkLineByWorkBuildId(workBuildId, userId);
                                if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                                {
                                    throw error("@WAX1459");
                                }
                                workTable = workLine.whsWorkTable();

                                if (workLine)
                                {
                                    pass.insert(#DetermineStep, 1);
                                    con = this.updateModeStepPass(con, mode, step, pass);
                                    [ret, step, recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                                    pass = new WHSRFPassthrough(Types::String, Types::String);
                                    pass = WHSRFPassthrough::create(tmpPass);

                                    if (step == #Restart)
                                    {
                                        step = 0;
                                    }
                                    else if (step == #StepOne)
                                    {
                                        step = 2;
                                        pass.insert(#DetermineStep, 1);
                                    }

                                    con = this.updateModeStepPass(ret, mode, step, pass);
                                    con = conPoke(con, 1, [mode, step]);
                                    workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                                    ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                                    pass = new WHSRFPassthrough(Types::String, Types::String);
                                    pass = WHSRFPassthrough::create(conPeek(ret, 2));
                                    if (pass.exists(#WorkId) && pass.exists(#LineNum))
                                    {
                                        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                                        workTable = workLine.whsWorkTable();
                                    }
                                }
                            }
                            else
                            {
                                if (workBuildId != '')
                                {
                                    WHSWorkTable::autoExecuteWorkInWorkBuildId(workBuildId);
                                }

                                // clean up the variables so that a new production order can be reported as finished.
                                pass.insert(#WorkComplete, 1);
                                pass.remove(#ProdId);
                                pass.remove(#ItemId);
                                pass.remove(#Qty);
                                pass.remove(#BatchId);
                                pass.remove(#LicensePlateId);
                                pass.remove(#SelectedValueUOM);
                                pass.remove(#UOM);

                                boolean continueToNextStep;

                                [continueToNextStep, ret] = this.assigningPutawayCluster(ret, workBuildId, 0, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)));

                                if (continueToNextStep)
                                {
                                    break;
                                }

                                step = 0;
                                con = this.updateModeStepPass(ret, mode, step, pass);
                                workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                                ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                                pass = new WHSRFPassthrough(Types::String, Types::String);
                                pass = WHSRFPassthrough::create(conPeek(ret, 2));
                            }
                        }
                    }
                }
                else
                {
                    ret = con;
                }
                break;
            
            case #SortReceive:
                ret = this.stepSortReceive(con, _buttonClicked);
                break;

            case #CatchWeightTagCapture:
                ret = this.processCatchWeightTagCaptureRAF(hasError, con);
                break;

            default:
                if (pass.exists(#WorkId))
                {
                    if (pass.exists(#LineNum))
                    {
                        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                    }
                    else
                    {
                        workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);
                    }

                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }

                    if (workLine)
                    {
                        workTable = workLine.whsWorkTable();
                        con = conPoke(con, 2, pass.pack());
                        workBuildId = workTable.WorkBuildId;
                        [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                        pass = WHSRFPassthrough::create(tmpPass);

                        if (step == #Restart)
                        {
                            // Check for additional work to execute in case of cross docking
                            workLine = WHSWorkTable::findOpenCrossDockWorkByWorkBuildId(workBuildId, userId);
    
                            if (workLine.RecId != 0)
                            {
                                if (pass.exists(#WorkComplete))
                                {
                                    pass.remove(#WorkComplete);
                                }

                                this.restartForCrossDockInbound();
                                con = this.updateModeStepPass(con, mode, step, pass);
                                [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                                pass = WHSRFPassthrough::newReset(pass);
                                pass = WHSRFPassthrough::create(tmpPass);
                            }
                            else
                            {
                                step = 0;
                            }
                        }
                        else if (step == #StepOne)
                        {
                            step = 2;
                            pass.insert(#DetermineStep, 1);
                        }

                        if (recall)
                        {
                            if (mode == WHSWorkExecuteMode::ReportAsFinishedAndLocate
                            &&	step == 0)
                            {
                                workLine = WHSWorkTable::getFirstWorkLineOnOpenWorkByWorkBuildId(WHSWorkTable::find(pass.lookupStr(#PrevWorkId)).WorkBuildId, userId);

                                if (workLine)
                                {
                                    workTable = workLine.whsWorkTable();
                                    pass.insert(#DetermineStep, 1);
                                    pass.insert(#InventLocationId, workTable.InventLocationId);
         
                                    if (workTable.hasNoOtherOpenWorkForWorkBuildId())
                                    {
                                        pass.insert(#WorkId, workLine.WorkId);
                                        pass.parmLineNum(workLine.LineNum);
                                        step = 2;
                                    }
                                    else
                                    {
                                        ret = this.updateModeStepPass(ret, mode, step, pass);
                                        [con, step, recall, tmpPass] = this.processWorkLine(workLine, ret, mode, step, userId, '', _buttonClicked, false);
                                        pass = WHSRFPassthrough::create(tmpPass);
                                    }
                                }
                            }

                            con = this.updateModeStepPass(con, mode, step, pass);
                            con = conPoke(con, 1, [mode, step]);
                            workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                            ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                            pass = WHSRFPassthrough::create(conPeek(ret, 2));
                            
                            if (pass.exists(#WorkId) && pass.exists(#LineNum))
                            {
                                workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                                workTable = workLine.whsWorkTable();
                            }
                        }
                    }
                    else
                    {
                        throw error("@WAX859");
                    }
                }
                else
                {
                    throw error("@WAX859");
                }
                break;
        }

        if (step > 1)
        {
            ret = this.addButtons(ret);
        }
        else if (addCancel)
        {
            ret = this.addCancelButton(ret, 1, true);
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLicensePlateLabels</Name>
				<Source><![CDATA[
    protected void buildLicensePlateLabels(WHSWorkBuildId _workBuildId)
    {
        WHSLicensePlateLabelBuild labelBuild = new WHSLicensePlateLabelBuild(
            WHSWorkTable::getFirstWorkLineByWorkBuildId(_workBuildId, userId).WorkId,
            null,
            pass.lookup(#MenuItem),
            pass.lookup(#UserId));

        labelBuild.buildLicensePlateLabels();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLicensePlateLabelsWithoutWork</Name>
				<Source><![CDATA[
    private void buildLicensePlateLabelsWithoutWork(ProdId _prodId)
    {
        ProdTable prodOrder = ProdTable::find(_prodId);

        WHSLicensePlateLabelBuildWithoutWorkParameters parameters = new WHSLicensePlateLabelBuildWithoutWorkParameters(prodOrder,
                                                                                                                    WHSWorkTransType::ProdPut,
                                                                                                                    pass.lookup(#UOM),
                                                                                                                    pass.lookupReal(#Qty),
                                                                                                                    '',
                                                                                                                    '',
                                                                                                                    pass.lookup(#LicensePlateId),
                                                                                                                    pass.lookup(#UserId));
                                                                                                                            
                                                                                                                                                
        WHSLicensePlateLabelBuildWithoutWork labelBuild = WHSLicensePlateLabelBuildWithoutWork::newFromWorkTransTypeAndParameters(WHSWorkTransType::ProdPut, parameters);

        labelBuild.buildLicensePlateLabels();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetCoByProductInventDim</Name>
				<Source><![CDATA[
    private boolean mustSetCoByProductInventDim()
    {
        PmfProductType coByProductType = InventTable::find(pass.lookup(#ItemId)).PmfProductType;

        return coByProductType == PmfProductType::Co_Product || coByProductType == PmfProductType::By_Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCatchWeightTagDimensions</Name>
				<Source><![CDATA[
    private void updateCatchWeightTagDimensions(ProdJournalId _rafJournalId)
    {
        if (_rafJournalId
            && pass.exists(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList))
        {
            ItemId          itemId;
            InventTransId   inventTransId;
            PmfProductType  productionType = InventTable::find(pass.lookup(#ItemId)).PmfProductType;
                
            if (productionType == PmfProductType::Co_Product
                || productionType == PmfProductType::By_Product)
            {
                PmfProdCoBy prodCoBy = this.findProdCoByFromPass(pass);
                itemId = prodCoBy.ItemId;
                inventTransId = prodCoBy.InventTransId;
            }
            else
            {
                ProdTable prodTable = ProdTable::find(pass.lookup(#ProdId));
                itemId = prodTable.ItemId;
                inventTransId = prodTable.InventTransId;
            }

            if (!this.retrieveInventDimFromPass().wMSLocationId)
            {
                InventTrans         inventTrans;
                InventTransOrigin   inventTransOrigin;
                ProdJournalProd     prodJournalProd;

                select firstOnly InventDimId from inventTrans
                    where  inventTrans.StatusReceipt != 0
                        && inventTrans.StatusIssue   == 0
                        && inventTrans.ItemId        == itemId
                    exists join inventTransOrigin
                        where  inventTransOrigin.RecId          == inventTrans.InventTransOrigin
                            && inventTransOrigin.InventTransId  == inventTransId
                    exists join prodJournalProd
                        where  prodJournalProd.JournalId     == _rafJournalId
                            && prodJournalProd.Voucher       == inventTrans.VoucherPhysical
                            && prodJournalProd.InventTransId == inventTransId
                            && prodJournalProd.ItemId        == itemId;

                if (inventTrans.RecId)
                {
                    this.updateAllCatchWeightTagDimensions(InventDim::find(WHSCatchWeightTag::inventDimWithTagSpecificDimensions(inventTrans.inventDim(), itemId)));
                }
            }
        }

        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWHSWorkCreateProdPut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>WHSWorkCreateProdPut</c> class for creating the warehouse production put.
    /// </summary>
    /// <param name = "_productionDimensions">The dimensions for the production.</param>
    /// <returns>The new <c>WHSWorkCreateProdPut</c> instance.</returns>
    protected WHSWorkCreateProdPut initializeWHSWorkCreateProdPut(InventDim _productionDimensions)
    {
        WHSWorkCreateProdPut workCreateProdPut = new WHSWorkCreateProdPut(ProdTable::find(pass.lookup(#ProdId)));
        workCreateProdPut.parmCreatedBy(userId);
        workCreateProdPut.parmItemId(pass.lookup(#ItemId));

        if (pass.hasValue(#BatchId))
        {
            // Pass in the batch and all assigned attributes.
            workCreateProdPut.parmInventBatchId(pass.lookup(#BatchId));
            workCreateProdPut.parmBatchExpDate(WHSRFControlData::convertDateFormatStr2Date(pass.lookupStr(#ExpDate), pass.lookupStr(#UserId)));
            workCreateProdPut.parmBatchDispCode(pass.lookupStr(#BatchDisposition));
            workCreateProdPut.parmBatchPotencyValue(pass.lookupStr(#Potency));
        }
              
        workCreateProdPut.parmWorkTemplateCode(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).WorkTemplateCode);
        workCreateProdPut.parmInventHandlingQty(WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                                        pass.lookup(#UOM),
                                                                                        pass.lookupNum(#Qty),
                                                                                        _productionDimensions.inventDimId));
        workCreateProdPut.parmCatchWeight(pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight));

        workCreateProdPut.parmDispositionCode(pass.lookupStr(#Disposition));

        // End production order mobile device menu item parameter is enabled and has a value
        if (pass.hasValue(#RAFEndJob))
        {
            NoYes endJob;
            workCreateProdPut.parmEndJob(str2enum(endJob, pass.lookup(#RAFEndJob)));
        }
        else
        {
            workCreateProdPut.parmEndJob(NoYes::No);
        }

        return workCreateProdPut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatErrorMessage</Name>
				<Source><![CDATA[
    protected str formatErrorMessage(str _errorString)
    {
        if (   strScan(_errorString, "@SYS28536", 1, strLen(_errorString)) 
            && !strScan(_errorString, "@SYS26712", 1, strLen(_errorString)))
        {
            _errorString = "@WAX2497";
        }

        return _errorString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionRAFRequiresLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the production output location is LP controlled.
    /// </summary>
    /// <returns>True if the location is LP controlled; false otherwise.</returns>
    protected boolean productionRAFRequiresLicensePlate()
    {
        boolean ret = true;

        if (pass.exists(#ProdId) && pass.exists(#ItemId))
        {
            ProdId prodId = pass.lookup(#ProdId);
            ItemId itemId = pass.lookup(#ItemId);
            if (prodId != '' && itemId != '')
            {
                var currentDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
                ret = ProdTable::find(prodId)
                    .defaultOutputLocationIsLPControlled(itemId, currentDate);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCatchWeightTagCaptureRAF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the catch weight tag capture display step for report as finished product.
    /// </summary>
    /// <param name="_hasError">
    /// True if mobile device screen has an error message; otherwise False.
    /// </param>
    /// <param name="_con">
    /// The current mobile device container being built.
    /// </param>
    /// <returns>
    /// An updated mobile device container.
    /// </returns>
    private container processCatchWeightTagCaptureRAF(boolean _hasError, container _con)
    {
        container           ret = _con;
        WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        

        if (_hasError)
        {
            ret = conDel(ret, #RFErrorLoc, 1);
        }

        container tmpFieldValues;
        if (WHSWorkExecuteDisplayReportAsFinishedQtyWithScanningLimitFlight::instance().isEnabled())
        {
            [ret, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, ret, pass);
        }
        else
        {
            [ret, tmpFieldValues] = WHSRFControlData::processData(ret, pass);
        }
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);
        boolean hasError = this.hasError(ret);

        if (hasError)
        {
            return ret;
        }
        
        if (!fieldValues.empty())
        {
            boolean complete;
            [ret, complete] = this.processFieldValues(ret, fieldValues);

            if (complete)
            {
                WHSCatchWeightTag   tagRecord = this.createCatchWeightTagForRAFProduct();
                
                // Remove current Tag Id and increment Tag Counter
                pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag);
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight))
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight));
                }
                else
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight) + pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight)));
                }

                // Check to see if all tags have been captured
                if (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) > pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight);
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter);

                    step = 1;
                    ret = this.updateModeStepPass(conNull(), mode, step, pass);
                    ret = this.displayForm(ret);
                }
                else
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight);

                    ret = conNull();
                    ret = this.buildCWTagCapture(ret, false);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCatchWeightTagFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a catch weight tag for the reported as finished product by Item ID and source line.
    /// </summary>
    /// <param name = "_itemId">Item ID.</param>
    /// <param name = "_common">A source line to create the tags from.</param>
    private WHSCatchWeightTag createCatchWeightTagFromSource(ItemId _itemId, Common _common)
    {
        WHSCatchWeightTag tagrecord;

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            WHSCatchWeightTagCreationSource tagSource = WHSCatchWeightTagCreationSource::instantiateFromSource(_common, pass);
            WHSCatchWeightTagCreationMethod tagMethod = WHSCatchWeightTagCreationMethod::newSingleTagCreation(
                                                    pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag),
                                                    pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight));

            WHSCatchWeightTagCreator tagCreator = WHSCatchWeightTagCreator::construct();
            tagrecord = tagCreator.createCatchWeightTags(tagSource, tagMethod).getCollectionIterator().value();
        }

        return tagrecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCatchWeightTagForRAFProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a catch weight tag for the reported as finished product.
    /// </summary>
    /// <returns>A catch weight tag for the reported as finished product.</returns>
    private WHSCatchWeightTag createCatchWeightTagForRAFProduct()
    {
        PmfProductType      productionType = InventTable::find(pass.parmItemId()).PmfProductType;
        WHSCatchWeightTag   tagRecord;

        if (productionType == PmfProductType::Co_Product
           || productionType == PmfProductType::By_Product)
        {
            PmfProdCoBy prodCoBy = this.findProdCoByFromPass(pass);
            tagRecord = this.createCatchWeightTagFromSource(prodCoBy.ItemId, prodCoBy);
        }
        else
        {
            ProdTable prodTable = ProdTable::find(pass.lookup(#ProdId));
            tagRecord = this.createCatchWeightTagFromSource(prodTable.ItemId, prodTable);
        }

        this.trackScannedCatchWeightTags(tagRecord.RecId);

        return tagRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveInventDimFromPass</Name>
				<Source><![CDATA[
    private InventDim retrieveInventDimFromPass()
    {
        InventDim inventDim;

        if (ProdTable::find(pass.lookup(#ProdId)).ProdType == ProdType::Standard)
        {
            inventDim = InventDim::find(ProdTable::find(pass.lookup(#ProdId)).InventDimId);
        }
        else
        {
            inventDim = this.findProdCoByFromPass(pass).inventDim();
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityManagementCreateBeforeReportAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create quality order before reporting as finished.
    /// </summary>
    /// <param name = "_workCreateProdPut">Work create class.</param>
    /// <returns>Container with identifiers if quality order creatin was executed and if it block report as finished process.</returns>
    private container qualityManagementCreateBeforeReportAsFinished(WHSWorkCreateProdPut _workCreateProdPut)
    {
        boolean qualityManagementBlock;
        boolean qualityManagementExecuted;

        ProdTable prodTable = ProdTable::find(pass.lookup(#ProdId));

        Qty qtyGood;
        Qty pdsCWBatchGood;

        if (PdsGlobal::pdsIsCWItem(prodTable.ItemId))
        {
            qtyGood = _workCreateProdPut.parmCatchWeight();
            pdsCWBatchGood = _workCreateProdPut.parmInventHandlingQty();
        }
        else
        {
            qtyGood = _workCreateProdPut.parmInventHandlingQty();
        }

        if (qtyGood || pdsCWBatchGood)
        {
            InventQualityManagementCreateHandler::createProductionReportFinishedBefore(
                                                    prodTable,
                                                    qtyGood,
                                                    pdsCWBatchGood);

            qualityManagementExecuted = true;

            using (WHSQualityManagementCreateBeforeReportAsFinishedContext context = WHSQualityManagementCreateBeforeReportAsFinishedContext::construct())
            {
                InventQualityManagementBlockHandler::blockProductionReportFinished(prodTable);

                if (context.parmHasError())
                {
                    qualityManagementBlock = true;
                }
            }
        }

        return [qualityManagementExecuted, qualityManagementBlock];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        switch (true)
        {
            case _control is WhsControlQty:
                if (WHSWorkExecuteDisplayReportAsFinishedQtyWithScanningLimitFlight::instance().isEnabled())
                {
                    return WhsControlQty::checkScannedQuantityLimit(_control, _value);
                }
                break;
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>