<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProdFlowStatusAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanProductionFlowValidate</c> class validates the integrity of a production flow.
/// </summary>
public class LeanProdFlowStatusAction extends RunBaseBatch implements BatchRetryable
{
    LeanProductionFlow      leanProductionFlow;
    Plan                    plan;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
         leanProductionFlow,
         plan
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether to save the last values.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the process can execute as batch journal.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a caption string.
    /// </summary>
    /// <returns>
    ///    The caption string.
    /// </returns>
    public ClassDescription caption()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the dialog window.
    /// </summary>
    /// <param name="dialog">
    ///    An instance of the <c>DialogRunbase</c> class.
    /// </param>
    /// <param name="forceOnClient">
    ///    A Boolean value that indicates whether the dialog window must be forced to the client.
    /// </param>
    /// <returns>
    ///    An instance of the <c>Dialog</c> class.
    /// </returns>
    public Object dialog(
        DialogRunbase dialog  = null,
        boolean forceOnClient = false)
    {
        dialog = super();

        dialog.addGroup(this.caption());

        DialogField dialogPlanName = dialog.addFieldValue(extendedtypestr(PlanName),this.plan().planReference().PlanName,
                                                          "@SYS7399",
                                                          "@SYS152548");

        DialogField dialogVersionNum = dialog.addFieldValue(extendedtypestr(PlanVersionNum),this.plan().VersionNum,
                                                            "@SYS131812",
                                                            "@SYS152546");

        dialogPlanName.allowEdit(false);
        dialogVersionNum.allowEdit(false);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanPlanStatusAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the action performed by the class.
    /// </summary>
    /// <returns>
    ///    A <c>LeanPlanStatusAction</c> enumeration value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanPlanStatusAction leanPlanStatusAction()
    {
        return LeanPlanStatusAction::Activate; //default
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanProductionFlow</Name>
				<Source><![CDATA[
    public LeanProductionFlow parmLeanProductionFlow(LeanProductionFlow _leanProductionFlow = leanProductionFlow)
    {
        leanProductionFlow = _leanProductionFlow;

        return leanProductionFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>Plan</c> record related to the <c>LeanProductionFlow</c> table buffer.
    /// </summary>
    /// <returns>
    /// A <c>Plan</c> record.
    /// </returns>
    protected Plan plan()
    {
        if (!plan)
        {
            plan = Plan::find(leanProductionFlow.Plan);
        }

        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the production flow and sets the required takt time.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount
        boolean     throwErrorInCatch = true;

        setprefix(strfmt("@SYS303299",
                         LeanProdFlowStatusAction::description(),
                         leanProductionFlow.planReference().PlanName,
                         leanProductionFlow.plan().VersionNum));

        try
        {
            ttsbegin;
            if (!this.validate())
            {
                throw error("@SYS18447");
            }

            if (this.runStatusAction())
            {
                info(strfmt("@SYS303300",this.caption()));
            }
            else
            {
                throwErrorInCatch = false;
                throw error(strfmt("@SYS303302",this.caption()));
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch
        {
            if (throwErrorInCatch)
            {
                throw error(strfmt("@SYS303302",this.caption()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the process can run impersonated.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the status action.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method should be overridden in derived classes.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean runStatusAction()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates input parameters.
    /// </summary>
    /// <param name="_calledFrom">
    ///    An instance of the <c>Object</c> class that represents the caller; optional.
    /// </param>
    /// <returns>
    ///    true if the validation succeeds; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean result = super(_calledFrom);

        if (!result)
        {
            warning("@SYS303303");
        }

        result =    result
                 && leanProductionFlow.RecId
                 && this.plan().RecId
                 && leanProductionFlow.legalEntity() == CompanyInfo::current();

        if (!result)
        {
            warning("@SYS303304");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS303305";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LeanProductionFlow          leanProductionFlow;

        if (   _args
            && (_args.dataset()     == tablenum(Plan)
            ||  _args.dataset()     == tablenum(LeanProductionFlow))
            && _args.parmEnumType() == enumnum(LeanPlanStatusAction))
        {
            if (_args.dataset() == tablenum(LeanProductionFlow))
            {
                leanProductionFlow = _args.record();
            }
            else
            {
                leanProductionFlow = LeanProductionFlow::findPlan(_args.record().RecId);
            }

            LeanProdFlowStatusAction leanProdFlowStatusAction = LeanProdFlowStatusAction::newLeanProductionFlow(leanProductionFlow,_args.parmEnum());

            if (leanProdFlowStatusAction.prompt())
            {
                leanProdFlowStatusAction.runOperation();
            }
        }
        else
        {
            throw error("@SYS303306");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLeanProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanProdFlowStatusAction</c> class.
    /// </summary>
    /// <param name="_leanProductionFlow">
    ///    A <c>LeanProductionFlow</c> record that is used to initialize the instance of the class.
    /// </param>
    /// <param name="_leanPlanStatusAction">
    ///    A <c>LeanPlanStatusAction</c> enumeration value that is used to initialize the object.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LeanProdFlowStatusAction</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    No production flow record ID was specified.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The <c>LeanPlanStatusAction</c> enumeration value specified was invalid.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanProdFlowStatusAction newLeanProductionFlow(
        LeanProductionFlow    _leanProductionFlow,
        LeanPlanStatusAction  _leanPlanStatusAction)
    {
        LeanProdFlowStatusAction    leanProdFlowStatusAction;

        if (!_leanProductionFlow)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        switch (_leanPlanStatusAction)
        {
            case LeanPlanStatusAction::Validate:
                leanProdFlowStatusAction = LeanProdFlowStatusAction_Validate::newLeanProductionFlow(_leanProductionFlow);
                break;
            case LeanPlanStatusAction::Approve:
                leanProdFlowStatusAction = LeanProdFlowStatusAction_Approve::newLeanProductionFlow(_leanProductionFlow);
                break;
            case LeanPlanStatusAction::Activate:
                leanProdFlowStatusAction = LeanProdFlowStatusAction_Activate::newLeanProductionFlow(_leanProductionFlow);
                break;
            case LeanPlanStatusAction::Deactivate:
                leanProdFlowStatusAction = LeanProdFlowStatusAction_Deactivate::newLeanProductionFlow(_leanProductionFlow);
                break;
            case LeanPlanStatusAction::Recalculate:
                leanProdFlowStatusAction = LeanProdFlowStatusAction_Recalculate::newLeanProductionFlow(_leanProductionFlow);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return leanProdFlowStatusAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>