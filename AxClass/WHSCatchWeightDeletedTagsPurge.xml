<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightDeletedTagsPurge</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCatchWeightDeletedTagsPurge</c> class is used to run batch job to purge deleted catch weight tags
/// </summary>
public class WHSCatchWeightDeletedTagsPurge extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    DialogField     dialogDaysToKeep;
    PositiveDays    daysToKeep;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        daysToKeep
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunBase dialog = super();

        dialogDaysToKeep = dialog.addFieldValue(extendedTypeStr(PositiveDays), daysToKeep, "@WAX3411", "@WAX3131");
        dialog.allowUpdateOnSelectCtrl(true);
        if (daysToKeep == 0) 
        {
            dialogDaysToKeep.value(30);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        daysToKeep = dialogDaysToKeep.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfDaysToKeep</Name>
				<Source><![CDATA[
    private PositiveDays numberOfDaysToKeep()
    {
        return daysToKeep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            #OCCRetryCount
        
            try
            {
                ttsbegin;

                utcDateTime beforeDateTime = DateTimeUtil::utcNow();
             
                // If days to keep is 0 everything should be purged and date is set to tomorrow
                if (this.numberOfDaysToKeep() == 0)
                {
                    beforeDateTime = DateTimeUtil::addDays(beforeDateTime, 1);
                }
                else
                {
                    beforeDateTime = DateTimeUtil::addDays(beforeDateTime, -this.numberOfDaysToKeep());
                }

                WHSCatchWeightTag                   wHSCatchWeightTag;
                WHSCatchWeightTagLastRegistration   wHSCatchWeightTagLastRegistration;
            
                delete_from wHSCatchWeightTag
                exists join wHSCatchWeightTagLastRegistration
                where wHSCatchWeightTag.TagNumber                       == wHSCatchWeightTagLastRegistration.TagNumber
                &&    wHSCatchWeightTag.IsDeleted                       == NoYes::Yes
                &&    wHSCatchWeightTagLastRegistration.CreatedDateTime <  beforeDateTime;

                // Delete tags which are marked for deletion (IsDelete = true), but the tag has been modified or updated.
                // These sort of updates are NOT registered in the last registration table.
                delete_from wHSCatchWeightTag
                where wHSCatchWeightTag.IsDeleted        == NoYes::Yes
                &&    wHSCatchWeightTag.ModifiedDateTime <  beforeDateTime;

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static WHSCatchWeightDeletedTagsPurge construct()
    {
        return new WHSCatchWeightDeletedTagsPurge();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@WAX:CatchWeightDeletedTagsPurge";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        WHSCatchWeightDeletedTagsPurge catchWeightDeletedTagsPurge = WHSCatchWeightDeletedTagsPurge::construct();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(catchWeightDeletedTagsPurge))
        {
            if (catchWeightDeletedTagsPurge.prompt())
            {
                catchWeightDeletedTagsPurge.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WHSCatchWeightDeletedTagsPurge));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSCatchWeightDeletedTagsPurge);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>