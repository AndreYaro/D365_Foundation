<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplBalanceClose_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplBalanceClose_RU extends LedgerJournalTransCreate_RU
{
    private const str LocalizationFeatureReference = 'EEU-00047';
    EmplParameters_RU       emplParameters;

    AmountCur               amountCur;
    CurrencyCode            currencyCode;
    EmployeeId_RU           emplId;
    NoYes                   autoPosting;
    PostingProfile          postingProfile;

    DialogField             dialogAmountCur;
    DialogField             dialogAutoPosting;

    LedgerJournalTable      ledgerJournalTable;
    LedgerJournalTrans      ledgerJournalTrans;

    #define.CurrentVersion(1)

    #localMacro.CurrentList
        autoPosting
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoPosting</Name>
				<Source><![CDATA[
    protected void autoPosting()
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        ;
        if (! autoPosting)
            return;

        ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable,
                                                                               NoYes::Yes,
                                                                               NoYes::No);
        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalAmount</Name>
				<Source><![CDATA[
    protected Amount calcTotalAmount()
    {
        totalAmount = amountCur;
        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTable</Name>
				<Source><![CDATA[
    protected boolean createTable()
    {
        ledgerJournalTable.OffsetAccountType    = LedgerJournalACType::Employee_RU;

        ledgerJournalTable.parmOffsetAccount(emplId);

        ledgerJournalTable.CurrencyCode         = currencyCode;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected boolean createTrans()
    {
        ledgerJournalTrans.OffsetAccountType        = LedgerJournalACType::Employee_RU;

        ledgerJournalTrans.parmOffsetAccount(emplId);

        ledgerJournalTrans.OffsetPostingProfile_RU  = postingProfile ?
                                                      postingProfile :
                                                      emplParameters.PostingProfile;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogField     dialogField;
        DialogRunbase   dialog = super();

        dialog.addGroup("@SYS15191");
        dialogField = dialog.addFieldValue(extendedTypeStr(EmployeeId_RU), emplId);
        dialogField.enabled(false);
        dialogField.allowEdit(false);

        dialogAmountCur = dialog.addFieldValue(extendedTypeStr(Amount), amountCur, "@SYS13465");

        dialogField = dialog.addFieldValue(extendedTypeStr(CurrencyCode), currencyCode);
        dialogField.enabled(false);
        dialogField.allowEdit(false);

        if (postingProfile)
        {
            dialogField = dialog.addFieldValue(extendedTypeStr(PostingProfile), postingProfile);
            dialogField.enabled(false);
            dialogField.allowEdit(false);
        }

        dialog.addGroup("@SYS5943");
        dialogAutoPosting = dialog.addFieldValue(enumStr(NoYes), autoPosting, "@SYS11318", "@SYS11318");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        autoPosting = dialogAutoPosting.value();
        amountCur   = dialogAmountCur.value();
        totalAmount = amountCur;

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());
        emplParameters = EmplParameters_RU::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountCur</Name>
				<Source><![CDATA[
    public AmountCur parmAmountCur(AmountCur _amountCur)
    {
        ;
        amountCur = _amountCur;
        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        ;
        currencyCode = _currencyCode;
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmployeeId</Name>
				<Source><![CDATA[
    public EmployeeId_RU parmEmployeeId(EmployeeId_RU _emplId)
    {
        emplId = _emplId;
        return emplId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile</Name>
				<Source><![CDATA[
    public PostingProfile parmPostingProfile(PostingProfile _postingProfile)
    {
        ;
        postingProfile = _postingProfile;
        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate)
    {
        ;
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBalance</Name>
				<Source><![CDATA[
    public void setBalance(EmplBalance_RU _emplBalance)
    {
        if (_emplBalance.parmCurrencyCode() == CompanyInfoHelper::standardCurrency())
        {
            this.parmAmountCur(_emplBalance.amountMST() +
                               _emplBalance.amountMSTExchAdj() +
                               _emplBalance.amountMSTExchAdjForecast());
        }
        else
        {
            this.parmAmountCur(_emplBalance.amountCur());
        }

        this.parmCurrencyCode(_emplBalance.parmCurrencyCode());

        this.parmEmployeeId(_emplBalance.accountNum());

        this.parmPostingProfile(_emplBalance.postingProfile());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    protected static void execute(Args _callerArgs, EmplBalanceClose_RU _balanceClose)
    {
        Object callerForm;

        if (_callerArgs && _callerArgs.caller())
        {
            callerForm = _callerArgs.caller();
            if (callerForm is FormRun &&
                callerForm.name() == formStr(EmplBalance_RU))
            {
                _balanceClose.setBalance(callerForm.getEmplBalance());
                _balanceClose.parmTransDate(callerForm.toDate());
            }
        }

        if (_balanceClose.prompt())
        {
            _balanceClose.runOperation();
            if (callerForm)
            {
                callerForm.selectionChanged();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>