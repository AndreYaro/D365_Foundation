<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarSourcePurchaseOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PaymCalendarSourcePurchaseOrder</c> class provides an interface that is used to find payment
/// calendars when the source is the purchase table.
/// </summary>
public class PaymCalendarSourcePurchaseOrder implements PaymCalendarIDerivationSource, PaymCalendarIBankAddress
{
    private PurchTable purchTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated with the bank account.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getBankPostalAddress()
    {
        VendTable vendTable;
        VendBankAccount vendBankAccount;
        LogisticsPostalAddress logisticsPostalAddress;

        vendTable = VendTable::findByCompany(purchTable.dataAreaId, purchTable.InvoiceAccount);
        vendBankAccount = VendBankAccount::findByCompany(vendTable.dataAreaId, vendTable.AccountNum, vendTable.BankAccount);
        logisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(vendBankAccount.Location);

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the third-party entity.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getPrimaryPostalAddress()
    {
        VendTable vendTable;
        LogisticsPostalAddress logisticsPostalAddress;

        vendTable = VendTable::findByCompany(purchTable.dataAreaId, purchTable.InvoiceAccount);
        logisticsPostalAddress = vendTable.postalAddress();

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(PurchTable _purchTable)
    {
        purchTable = _purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public PaymCalendarModuleType parmModuleType()
    {
        return PaymCalendarModuleType::Vendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode()
    {
        return purchTable.PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmPaymTermDataAreaId()
    {
        return purchTable.dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermId</Name>
				<Source><![CDATA[
    public PaymTermId parmPaymTermId()
    {
        return purchTable.Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the due date so that it falls on a business day per specified calendar source.
    /// </summary>
    /// <param name="_dueDate">
    /// The original due date.
    /// </param>
    /// <param name="_updatePolicy">
    /// A value that specifies the search direction when seeking the next valid business day.
    /// </param>
    /// <param name="_purchTable">
    /// The purchase table buffer that specifies the calendar source.
    /// </param>
    /// <returns>
    /// The adjusted due date.
    /// </returns>
    public static DueDate adjustDate(DueDate _dueDate, PaymentDueDateUpdatePolicy _updatePolicy, PurchTable _purchTable)
    {
        PaymCalendarProcessor paymCalendarProcessor;
        PaymCalendarSourcePurchaseOrder calendarSource;
        DueDate dueDate;

        paymCalendarProcessor = PaymCalendarProcessor::construct();
        calendarSource = PaymCalendarSourcePurchaseOrder::newCalendarSource(_purchTable);

        dueDate = paymCalendarProcessor.adjustDate(_dueDate, _updatePolicy, calendarSource);

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourcePurchaseOrder</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PaymCalendarSourcePurchaseOrder</c> class.
    /// </returns>
    private static PaymCalendarSourcePurchaseOrder construct()
    {
        return new PaymCalendarSourcePurchaseOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_purchTable">
    /// The purchase table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> table which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    /// <remarks>
    /// If no adjustment is needed, the original date is returned.
    /// </remarks>
    public static PaymCalendarAdjustedDate getAdjustedDate(PurchTable _purchTable)
    {
        return PaymCalendarSourcePurchaseOrder::getAdjustedDatePrivate(_purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDatePrivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so that it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_purchTable">
    /// The purchase table buffer that specifies the due date and the calendar source.
    /// </param>
    /// <returns>
    /// An instance of the <c>PaymCalendarAdjustedDate</c> table which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    private static PaymCalendarAdjustedDate getAdjustedDatePrivate(PurchTable _purchTable)
    {
        PaymTerm paymTerm;
        PaymCalendarSourcePurchaseOrder calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymCalendarAdjustedDate paymCalendarAdjustedDate;

        paymTerm = PaymTerm::find(_purchTable.Payment);

        if (paymTerm.VendorUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
        {
            calendarSource = PaymCalendarSourcePurchaseOrder::newCalendarSource(_purchTable);
            paymCalendarProcessor = PaymCalendarProcessor::construct();
            paymCalendarAdjustedDate = paymCalendarProcessor.getAdjustedDate(_purchTable.FixedDueDate, paymTerm.VendorUpdateDueDate, calendarSource);
        }
        else
        {
            paymCalendarAdjustedDate = PaymCalendarAdjustedDate::construct(_purchTable.FixedDueDate);
        }

        return paymCalendarAdjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalendarSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourcePurchaseOrder</c> class.
    /// </summary>
    /// <param name="_purchTable">
    /// A reference to a populated <c>PurchTable</c> record.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PaymCalendarSourcePurchaseOrder</c> class.
    /// </returns>
    public static PaymCalendarSourcePurchaseOrder newCalendarSource(PurchTable _purchTable)
    {
        PaymCalendarSourcePurchaseOrder paymCalendarSourcePurchaseOrder;

        paymCalendarSourcePurchaseOrder = PaymCalendarSourcePurchaseOrder::construct();
        paymCalendarSourcePurchaseOrder.initialize(_purchTable);

        return paymCalendarSourcePurchaseOrder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>