<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MainAccountContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a data contract class for main account
[DataContractAttribute]
class MainAccountContract
{
    MainAccountNum              mainAccountId;
    AccountName                 name;
    Name                        ledgerChartOfAccounts;
    DimensionLedgerAccountType  type;
    DimensionLedgerAccountReportingType reportingAccountType;
    AccountCategoryRef          accountCategoryRef;
    DebCredProposal             debitCreditProposal;
    DebCredProposal             debitCreditCheck;
    DebCredBalanceDemand        debitCreditBalanceDemand;
    NoYes                       exchangeAdjusted;
    LedgerMonetary              monetary;
    LedgerClosing               closing;
    NoYes                       mandatoryPaymentReference;
    LedgerAccountExt            consolidationMainAccount;
    LedgerSRUCode               sruCode;
    CurrencyCode                currencyCode;
    FieldControl                validateCurrency;
    userId                      userInfoId;
    FieldControl                validateUser;
    LedgerPostingType           postingType;
    FieldControl                validatePosting;
    MainAccountNum              offsetLedgerDimension;
    MainAccountNum              openingAccount;
    NoYes                       isSuspended;
    NoYes                       isBlockedforManualEntry;
    DimensionActiveFrom         activeFrom;
    DimensionActiveTo           activeTo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAccountCategoryRef</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public AccountCategoryRef parmAccountCategoryRef(AccountCategoryRef _accountCategoryRef = accountCategoryRef)
    {
        accountCategoryRef = _accountCategoryRef;
        return accountCategoryRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveFrom</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public DimensionActiveFrom parmActiveFrom(DimensionActiveFrom _activeFrom = activeFrom)
    {
        activeFrom = _activeFrom;

        if (activeFrom < dateNull())
        {
            activeFrom = dateNull();
        }

        return activeFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveTo</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public DimensionActiveTo parmActiveTo(DimensionActiveTo _activeTo = activeTo)
    {
        activeTo = _activeTo;

        if (activeTo < dateNull())
        {
            activeTo = dateNull();
        }

        return activeTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClosing</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public LedgerClosing parmClosing(LedgerClosing _closing = closing)
    {
        closing = _closing;
        return closing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsolidationMainAccount</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public LedgerAccountExt parmConsolidationMainAccount(LedgerAccountExt _consolidationMainAccount = consolidationMainAccount)
    {
        consolidationMainAccount = _consolidationMainAccount;
        return consolidationMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebitCreditBalanceDemand</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public DebCredBalanceDemand parmDebitCreditBalanceDemand(DebCredBalanceDemand _debitCreditBalanceDemand = debitCreditBalanceDemand)
    {
        debitCreditBalanceDemand = _debitCreditBalanceDemand;
        return debitCreditBalanceDemand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebitCreditCheck</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    //DebCredProposal             debitCreditCheck;
    public DebCredProposal parmDebitCreditCheck(DebCredProposal _debitCreditCheck = debitCreditCheck)
    {
        debitCreditCheck = _debitCreditCheck;
        return debitCreditCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebitCreditProposal</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public DebCredProposal parmDebitCreditProposal(DebCredProposal _debitCreditProposal = debitCreditProposal)
    {
        debitCreditProposal = _debitCreditProposal;
        return debitCreditProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeAdjusted</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public NoYes parmExchangeAdjusted(NoYes _exchangeAdjusted = exchangeAdjusted)
    {
        exchangeAdjusted = _exchangeAdjusted;
        return exchangeAdjusted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBlockedforManualEntry</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public NoYes parmIsBlockedforManualEntry(NoYes _isBlockedforManualEntry = isBlockedforManualEntry)
    {
        isBlockedforManualEntry = _isBlockedforManualEntry;
        return isBlockedforManualEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSuspended</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public NoYes parmIsSuspended(NoYes _isSuspended = isSuspended)
    {
        isSuspended = _isSuspended;
        return isSuspended;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerChartOfAccounts</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public Name parmLedgerChartOfAccounts(Name _ledgerChartOfAccounts = ledgerChartOfAccounts)
    {
        ledgerChartOfAccounts = _ledgerChartOfAccounts;
        return ledgerChartOfAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainAccountId</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public MainAccountNum parmMainAccountId(MainAccountNum _mainAccountId = mainAccountId)
    {
        mainAccountId = _mainAccountId;
        return mainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMandatoryPaymentReference</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public NoYes parmMandatoryPaymentReference(NoYes _mandatoryPaymentReference = mandatoryPaymentReference)
    {
        mandatoryPaymentReference = _mandatoryPaymentReference;
        return mandatoryPaymentReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMonetary</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public LedgerMonetary parmMonetary(LedgerMonetary _monetary = monetary)
    {
        monetary = _monetary;
        return monetary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public AccountName parmName(AccountName _name = name)
    {
        name = _name;
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetLedgerDimension</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public MainAccountNum parmOffsetLedgerDimension(MainAccountNum _offsetLedgerDimension = offsetLedgerDimension)
    {
        offsetLedgerDimension = _offsetLedgerDimension;
        return offsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpeningAccount</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public MainAccountNum parmOpeningAccount(MainAccountNum _openingAccount = openingAccount)
    {
        openingAccount = _openingAccount;
        return openingAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingType</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public LedgerPostingType parmPostingType(LedgerPostingType _postingType = postingType)
    {
        postingType = _postingType;
        return postingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingAccountType</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public DimensionLedgerAccountReportingType parmReportingAccountType(DimensionLedgerAccountReportingType _reportingAccountType = reportingAccountType)
    {
        reportingAccountType = _reportingAccountType;
        return reportingAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSRUCode</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public LedgerSRUCode parmSRUCode(LedgerSRUCode _sruCode = sruCode)
    {
        sruCode = _sruCode;
        return sruCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmType</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public DimensionLedgerAccountType parmType(DimensionLedgerAccountType _type = type)
    {
        type = _type;
        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserInfoId</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    //    UserId                      userInfoId;
    public userId parmUserInfoId(userId _userInfoId = userInfoId)
    {
        userInfoId = _userInfoId;
        return userInfoId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateCurrency</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    //    FieldControl                validateCurrency;
    public FieldControl parmValidateCurrency(FieldControl _validateCurrency = validateCurrency)
    {
        validateCurrency = _validateCurrency;
        return validateCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidatePosting</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public FieldControl parmValidatePosting(FieldControl _validatePosting = validatePosting)
    {
        validatePosting = _validatePosting;
        return validatePosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateUser</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    //    FieldControl                validateUser;
    public FieldControl parmValidateUser(FieldControl _validateUser = validateUser)
    {
        validateUser = _validateUser;
        return validateUser;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>