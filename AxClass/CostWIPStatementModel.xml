<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostWIPStatementModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CostWIPStatementModel</c> models the WIP statement.
/// </summary>
public class CostWIPStatementModel extends CostStatementModel
{
    private const Level     total       = 0;
    private const Level     subtotal    = 1;
    private const Level     line        = 2;

    CostAmount              endingBalance;
    ProdId                  prodId;

    Query                   query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId = _prodId;

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryUsingInventoryStatementCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for the statement that uses the cost statement cache.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class with the query for the statement.
    /// </returns>
    protected void buildQueryUsingInventoryStatementCache()
    {
        query = new Query();
        query.queryType(QueryType::Union);

        var qbdsStatementCachePeriod = query.addDataSource(tableNum(CostStatementCache));
        qbdsStatementCachePeriod.addSelectionField(fieldNum(CostStatementCache, Amount), SelectionField::Sum);
        qbdsStatementCachePeriod.addSelectionField(fieldNum(CostStatementCache, TransDate), SelectionField::Max);
        qbdsStatementCachePeriod.addGroupByField(fieldNum(CostStatementCache, StatementLineCategoryLevel2));
        qbdsStatementCachePeriod.addRange(fieldNum(CostStatementCache, TransDate)).value(queryRange(fromDate, toDate));
        qbdsStatementCachePeriod.addRange(fieldNum(CostStatementCache, StatementType)).value(queryValue(CostStatementType::WIP));

        var qbdsStatementCacheBeginningBalance = query.addDataSource(tableNum(CostStatementCache));
        qbdsStatementCacheBeginningBalance.unionType(UnionType::UnionAll);
        qbdsStatementCacheBeginningBalance.addSelectionField(fieldNum(CostStatementCache, Amount), SelectionField::Sum);
        qbdsStatementCacheBeginningBalance.addSelectionField(fieldNum(CostStatementCache, TransDate), SelectionField::Max);
        qbdsStatementCacheBeginningBalance.addGroupByField(fieldNum(CostStatementCache, StatementLineCategoryLevel2));
        qbdsStatementCacheBeginningBalance.addRange(fieldNum(CostStatementCache, TransDate)).value(queryRange(dateNull(), fromDate - 1));
        qbdsStatementCacheBeginningBalance.addRange(fieldNum(CostStatementCache, StatementType)).value(queryValue(CostStatementType::WIP));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for the statement.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class with the query for the statement.
    /// </returns>
    protected void buildQuery()
    {
        query = new Query();

        var qbdsInventValue = query.addDataSource(tableNum(CostStatementView));
        qbdsInventValue.addSelectionField(fieldNum(CostStatementView, Amount), SelectionField::Sum);
        qbdsInventValue.addGroupByField(fieldNum(CostStatementView, TransDate));
        qbdsInventValue.addGroupByField(fieldNum(CostStatementView, StatementLineCategoryLevel2));
        qbdsInventValue.addRange(fieldNum(CostStatementView, TransDate)).value(queryRange(dateNull(), toDate));
        qbdsInventValue.addRange(fieldNum(CostStatementView, StatementType)).value(queryValue(CostStatementType::WIP));
        if (prodId)
        {
            qbdsInventValue.addRange(fieldNum(CostStatementView, ReferenceType)).value(queryValue(InventCostTransRefType::Production));
            qbdsInventValue.addRange(fieldNum(CostStatementView, Reference)).value(prodId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    protected void create()
    {
        if (prodId)
        {
            CostStatementViewBuilder::main(null);
            this.buildQuery();
        }
        else
        {
            this.buildQueryUsingInventoryStatementCache();
        }

        var queryRun = new QueryRun(query);

        var mapQuery = CostWIPStatementCmdMapQuery::newFromQueryRun(queryRun);
        var aggregator = CostWIPStatementCmdAggregate::newFromParameters(mapQuery);
        aggregator.parmFromDate(fromDate);
        aggregator.parmToDate(toDate);

        var commandList = InventAgingCmdList::construct().add(mapQuery).add(aggregator);

        InventAgingQueryProcessor::newFromParameters(queryRun, commandList).execute();

        this.addLine(total,
                     "@SCM:CostStatementBeginningBalance",
                     0.0,
                     aggregator.parmBeginningBalance());
        this.addLine(subtotal,
                     "@SCM:CostStatementNetConversionCost",
                     0.0,
                     aggregator.parmNetConversionCost());
        this.addLine(line,
                     "@SCM:CostStatementConsumedMaterialCost",
                     0.0,
                     aggregator.parmConsumedMaterialCost());
        this.addLine(line,
                     "@SCM:CostStatementConsumedManufacturingCost",
                     0.0,
                     aggregator.parmConsumedManufacturingCost());
        this.addLine(line,
                     "@SCM:CostStatementConsumedOutsourcingCost",
                     0.0,
                     aggregator.parmConsumedOutsourcingCost());
        this.addLine(line,
                     "@SCM:CostStatementConsumedIndirectCost",
                     0.0,
                     aggregator.parmConsumedIndirectCost());
        this.addLine(subtotal,
                     "@SCM:CostStatementNetCostOfGoodsManufactured",
                     0.0,
                     aggregator.parmNetCostOfGoodsManufactured());
        this.addLine(line,
                     "@SCM:CostStatementManufacturedCost",
                     0.0,
                     aggregator.parmManufacturedCost());
        this.addLine(line,
                     "@SCM:CostStatementVariances",
                     0.0,
                     aggregator.parmVariances());
        this.addLine(total,
                     "@SCM:CostStatementEndingBalance",
                     0.0,
                     aggregator.parmEndingBalance());

        endingBalance = aggregator.parmEndingBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostWIPStatementModel construct()
    {
        return new CostWIPStatementModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndingBalance</Name>
				<Source><![CDATA[
    public CostAmount parmEndingBalance()
    {
        return endingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public str description()
    {
        return '@SCM:WIPProductionInventory';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>