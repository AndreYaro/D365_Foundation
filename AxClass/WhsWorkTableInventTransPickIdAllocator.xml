<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkTableInventTransPickIdAllocator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WhsWorkTableInventTransPickIdAllocator extends WhsInventTransPickIdAllocator
{    
    #define.InitialPickLineSelectFieldList(CapturedWeight, LoadLineRefRecId, ItemId, InventDimId, LocatedLPId, InventQtyWork, WorkId, LineNum)
    #define.ContainerLineSelectFieldList(ContainerId, ItemId, LoadLine, InventDimId, Qty, UnitId)

    private Map itemAndDimsToLoadLineMap; // [itemId, pickedInventDimHashValue] -> List<int64>: maps itemId and full picked InventDimId to a list of load line RecIds
    private Map loadLineQtyRemainingMap; // int64 -> real: holds the remaining quantities that can be assigned to load lines
    private List workTablesToProcessBeforeAllocating; // of WorkTable

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForNewAllocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initForNewAllocation()
    {
        super();
        
        itemAndDimsToLoadLineMap = new Map(Types::Container, Types::Class);
        loadLineQtyRemainingMap = new Map(Types::Int64, Types::Real);

        this.initWorkTablesToProcessBeforeAllocatingList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkTablesToProcessBeforeAllocatingList</Name>
				<Source><![CDATA[
    private void initWorkTablesToProcessBeforeAllocatingList()
    {
        workTablesToProcessBeforeAllocating = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WhsWorkTableInventTransPickIdAllocator construct()
    {
        return new WhsWorkTableInventTransPickIdAllocator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignWorkTable</Name>
				<Source><![CDATA[
    internal void assignWorkTable(WHSWorkTable _workTable)
    {
        if (!WHSInventTransPickIdAllocationConfigurationProvider::isInventTransPickIdAllocationEnabled())
        {
            return;
        }
        
        workTablesToProcessBeforeAllocating.addEnd(_workTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeAllocatePickIds</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void beforeAllocatePickIds()
    {
        this.processAssignedWorkTables();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAssignedWorkTables</Name>
				<Source><![CDATA[
    private void processAssignedWorkTables()
    {
        ListEnumerator workTablesToProcessBeforeAllocatingEnum = workTablesToProcessBeforeAllocating.getEnumerator();
        while (workTablesToProcessBeforeAllocatingEnum.moveNext())
        {
            this.processWorkTable(workTablesToProcessBeforeAllocatingEnum.current());
        }

        this.initWorkTablesToProcessBeforeAllocatingList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWorkTable</Name>
				<Source><![CDATA[
    private void processWorkTable(WHSWorkTable _workTable)
    {
        using (var processWorkTableActivity = this.processWorkTableActivity())
        {
            processWorkTableActivity.addCustomProperty('workType', enum2Value(_workTable.WorkTransType));
            processWorkTableActivity.addCustomProperty('hasLoadLineDetails', int2Str(_workTable.HasWorkLineLoadLineDetails));

            if (_workTable.HasWorkLineLoadLineDetails)
            {
                if (_workTable.WorkTransType == WHSWorkTransType::PackedContainerPicking)
                {
                    if (_workTable.ContainerId)
                    {
                        this.assignContainerPickingWork(_workTable);
                    }
                    else if (WHSContainerTable::existsContainerGroupingLicensePlateId(_workTable.TargetLicensePlateId))
                    {
                        this.assignContainerGroupingPickingWork(_workTable);
                    }
                    else
                    {
                        throw error(Error::wrongUseOfFunction(funcName()));
                    }
                }
                else
                {
                    this.assignWorkLineLoadLineDetails(_workTable, processWorkTableActivity);
                }
            }
            else
            {            
                this.assignInitialPickWorkLines(_workTable);            
                this.assignInitialPickWorkLinesFromCombinedWork(_workTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignContainerPickingWork</Name>
				<Source><![CDATA[
    private void assignContainerPickingWork(WHSWorkTable _workTable)
    {
        WHSContainerLine containerLine;
        WHSContainerTable containerTable;        

        containerLine.checkInvalidFieldAccess(true);

        while select #ContainerLineSelectFieldList from containerLine
            exists join containerTable
            where containerTable.ContainerId == containerLine.ContainerId
               && (containerTable.ContainerId == _workTable.ContainerId
                   || containerTable.ParentContainerId == _workTable.ContainerId)
               && containerTable.ContainerStatus == WHSContainerStatus::Closed
            
        {
            this.assignContainerLine(_workTable, containerLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignContainerLine</Name>
				<Source><![CDATA[
    private void assignContainerLine(WHSWorkTable _workTable, 
                                     WHSContainerLine _containerLine)
    {
        InventDim containerLineInventDim = _containerLine.inventDim();
        if (containerLineInventDim.LicensePlateId != _containerLine.ContainerId)
        {
            containerLineInventDim.LicensePlateId = _containerLine.ContainerId;
        }

        this.addLoadLineToMap(_containerLine.LoadLine, _containerLine.ItemId, containerLineInventDim);
        this.increaseLoadLineQtyRemaining(_containerLine.LoadLine, _containerLine.getInventoryHandlingQuantity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignContainerGroupingPickingWork</Name>
				<Source><![CDATA[
    private void assignContainerGroupingPickingWork(WHSWorkTable _workTable)
    {
        WHSContainerLine containerLine;
        WHSContainerTable containerTable;
        WHSLoadLine loadLine;

        containerLine.checkInvalidFieldAccess(true);

        while select #ContainerLineSelectFieldList from containerLine
            exists join containerTable
            where containerTable.ContainerId == containerLine.ContainerId
               && containerTable.ContainerGroupingLicensePlateId == _workTable.TargetLicensePlateId
               && containerTable.ContainerStatus == WHSContainerStatus::Closed
            
        {
            this.assignContainerLine(_workTable, containerLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignWorkLineLoadLineDetails</Name>
				<Source><![CDATA[
    private void assignWorkLineLoadLineDetails(WHSWorkTable _workTable, SysInstrumentationActivityContext _currentActivityContext)
    {                        
        boolean consolidatedLinesFound = this.assignInitialPickWorkLinesAndTraverseLPConsolidation(0, _workTable, _workTable.WorkId);
        _currentActivityContext.addCustomProperty('consolidatedLinesFound', int2Str(consolidatedLinesFound));

        if (!consolidatedLinesFound)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignInitialPickWorkLinesAndTraverseLPConsolidation</Name>
				<Source><![CDATA[
    private boolean assignInitialPickWorkLinesAndTraverseLPConsolidation(int _level, WHSWorkTable _putWorkTable, WHSWorkId _currentWorkId)
    {
        const int MaxIterationCounter = 42;

        if (_level > MaxIterationCounter)
        {
            throw error(strFmt("@WAX:MaximumNumberOfIterationsInMethodReached", MaxIterationCounter, funcName()));
        }

        WHSWorkLine initialPickingLine;
        initialPickingLine.checkInvalidFieldAccess(true);

        while select #InitialPickLineSelectFieldList from initialPickingLine
            where initialPickingLine.WorkId == _currentWorkId
               && initialPickingLine.WorkType == WHSWorkType::Pick
               && initialPickingLine.WorkStatus == WHSWorkStatus::Closed
               && initialPickingLine.LoadLineRefRecId
               && initialPickingLine.QtyWork > 0
        {
            this.assignInitialPickWorkLine(_putWorkTable, initialPickingLine);
        }

        WHSWorkLine consolidationTargetWorkLine;
        WHSConsolidatedWorkLine consolidatedWorkLineLink;
        WHSWorkLine consolidationOriginWorkLine;   
        boolean consolidatedLinesFound;

        while select consolidatedWorkLineLink
            join WorkId from consolidationOriginWorkLine
            exists join consolidationTargetWorkLine
            where consolidatedWorkLineLink.ConsolidatedWorkLine == consolidationTargetWorkLine.RecId
               && consolidatedWorkLineLink.OriginWorkLine == consolidationOriginWorkLine.RecId
               && consolidationTargetWorkLine.WorkId == _currentWorkId
               && consolidationTargetWorkLine.WorkStatus == WHSWorkStatus::Closed
        {
            this.assignInitialPickWorkLinesAndTraverseLPConsolidation(_level + 1, _putWorkTable, consolidationOriginWorkLine.WorkId);
            
            consolidatedLinesFound = true;
        }

        return consolidatedLinesFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignInitialPickWorkLinesFromCombinedWork</Name>
				<Source><![CDATA[
    private void assignInitialPickWorkLinesFromCombinedWork(WHSWorkTable _putWorkTable)
    {
        WHSWorkLine initialPickingLine;
        WHSWorkTable combinedInitialPickingWork;

        initialPickingLine.checkInvalidFieldAccess(true);

        while select #InitialPickLineSelectFieldList from initialPickingLine
            where initialPickingLine.WorkType == WHSWorkType::Pick
               && initialPickingLine.WorkStatus == WHSWorkStatus::Combined
               && initialPickingLine.LoadLineRefRecId
               && initialPickingLine.QtyWork > 0
            exists join combinedInitialPickingWork
                where combinedInitialPickingWork.WorkId == initialPickingLine.WorkId
                   && combinedInitialPickingWork.CombinedWorkId == _putWorkTable.WorkId
                   && combinedInitialPickingWork.WorkStatus == WHSWorkStatus::Combined
        {
            this.assignInitialPickWorkLine(_putWorkTable, initialPickingLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignInitialPickWorkLines</Name>
				<Source><![CDATA[
    private void assignInitialPickWorkLines(WHSWorkTable _workTable)
    {
        WHSWorkLine initialPickingLine;
        initialPickingLine.checkInvalidFieldAccess(true);

        while select #InitialPickLineSelectFieldList from initialPickingLine
            where initialPickingLine.WorkId == _workTable.WorkId
               && initialPickingLine.WorkType == WHSWorkType::Pick
               && initialPickingLine.WorkStatus == WHSWorkStatus::Closed
               && initialPickingLine.LoadLineRefRecId
               && initialPickingLine.QtyWork > 0
        {
            this.assignInitialPickWorkLine(_workTable, initialPickingLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignInitialPickWorkLine</Name>
				<Source><![CDATA[
    private void assignInitialPickWorkLine(WHSWorkTable _workTable, WHSWorkLine _initialPickWorkLine)
    {
        if (_initialPickWorkLine.CapturedWeight > 0)
        {
            // CW not supported yet
            return;
        }

        boolean hasDimTracking;
        WHSDimTracking dimTracking;
        InventDim dimTrackingInventDim;        

        while select dimTracking
            where dimTracking.WorkId  == _initialPickWorkLine.WorkId
               && dimTracking.LineNum == _initialPickWorkLine.LineNum
            join dimTrackingInventDim
                where dimTrackingInventDim.inventDimId == dimTracking.InventDimId
        {
            hasDimTracking = true;           
            this.addLoadLineToMap(_initialPickWorkLine.LoadLineRefRecId,
                                  _initialPickWorkLine.ItemId,
                                  this.sanitizeInventDimOfInitialPickingLine(dimTrackingInventDim, _workTable, _initialPickWorkLine));
        }

        if (!hasDimTracking)
        {
            if (_initialPickWorkLine.LocatedLPId)
            {
                WHSWorkInventTrans initialPickWorkInventTrans;
                WHSInventTransOriginWorkFrom initialPickInventTransOrigin;
                InventTrans initialPickInventTrans;

                while select initialPickInventTrans
                    exists join initialPickInventTransOrigin
                    where initialPickInventTransOrigin.InventTransOrigin == initialPickInventTrans.InventTransOrigin
                    exists join initialPickWorkInventTrans
                    where initialPickWorkInventTrans.RecId == initialPickInventTransOrigin.WorkInventTransIssue
                       && initialPickWorkInventTrans.WorkId == _initialPickWorkLine.WorkId
                       && initialPickWorkInventTrans.LineNum == _initialPickWorkLine.LineNum
                {
                    this.addLoadLineToMap(_initialPickWorkLine.LoadLineRefRecId,
                                          _initialPickWorkLine.ItemId,
                                          this.sanitizeInventDimOfInitialPickingLine(initialPickInventTrans.inventDim(), _workTable, _initialPickWorkLine));
                }
            }
            else
            {
                this.addLoadLineToMap(_initialPickWorkLine.LoadLineRefRecId,
                                      _initialPickWorkLine.ItemId,
                                      this.sanitizeInventDimOfInitialPickingLine(_initialPickWorkLine.inventDim(), _workTable, _initialPickWorkLine));
            }
        }

        this.increaseLoadLineQtyRemaining(_initialPickWorkLine.LoadLineRefRecId, _initialPickWorkLine.InventQtyWork);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sanitizeInventDimOfInitialPickingLine</Name>
				<Source><![CDATA[
    private InventDim sanitizeInventDimOfInitialPickingLine(InventDim _initialPickWorkLineInventDim, WHSWorkTable _initialPickWork, WHSWorkLine _initialPickLine)
    {
        boolean targetLPSet = false;

        if (_initialPickLine.LocatedLPId && _initialPickLine.LocatedLPId != _initialPickWork.TargetLicensePlateId)
        {
            _initialPickWorkLineInventDim.LicensePlateId = _initialPickLine.LocatedLPId;            
        }
        else
        {
            _initialPickWorkLineInventDim.LicensePlateId = _initialPickWork.TargetLicensePlateId;
        }

        WHSToteReuseTable toteReuseTable = WHSToteReuseTable::find(_initialPickWorkLineInventDim.LicensePlateId, _initialPickWork.WorkId);
        if (toteReuseTable)
        {
            _initialPickWorkLineInventDim.LicensePlateId = toteReuseTable.TmpToteId;
        }

        return _initialPickWorkLineInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadLineToMap</Name>
				<Source><![CDATA[
    private void addLoadLineToMap(WHSLoadLineRefRecId _loadLineRecId, ItemId _loadLineItemId, InventDim _fullPickedInventDim)
    {
        container loadLineItemIdAndInventDimIdContainer = this.determineItemAndDimsToLoadLineMapKey(_loadLineItemid, _fullPickedInventDim);

        Set itemIdAndInventDimIdLoadLineSet;
        if (itemAndDimsToLoadLineMap.exists(loadLineItemIdAndInventDimIdContainer))
        {
            itemIdAndInventDimIdLoadLineSet = itemAndDimsToLoadLineMap.lookup(loadLineItemIdAndInventDimIdContainer);
        }
        else
        {
            itemIdAndInventDimIdLoadLineSet = new Set(Types::Int64);
            itemAndDimsToLoadLineMap.add(loadLineItemIdAndInventDimIdContainer, itemIdAndInventDimIdLoadLineSet);
        }

        itemIdAndInventDimIdLoadLineSet.add(_loadLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseLoadLineQtyRemaining</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void increaseLoadLineQtyRemaining(WHSLoadLineRefRecId _loadLineRefRecId, InventQty _inventQtyRemainingToAdjustBy)
    {
        InventQty currentQtyRemainingForLoadLine = 0;
        
        if (loadLineQtyRemainingMap.exists(_loadLineRefRecId))
        {
            currentQtyRemainingForLoadLine = loadLineQtyRemainingMap.lookup(_loadLineRefRecId);
        }

        currentQtyRemainingForLoadLine += _inventQtyRemainingToAdjustBy;

        loadLineQtyRemainingMap.add(_loadLineRefRecId, currentQtyRemainingForLoadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseLoadLineQtyRemaining</Name>
				<Source><![CDATA[
    private InventQty decreaseLoadLineQtyRemaining(WHSLoadLineRefRecId _loadLineRefRecId, InventQty _inventQtyRemainingToAdjustBy)
    {
        if (!loadLineQtyRemainingMap.exists(_loadLineRefRecId))
        {
            return 0;
        }

        InventQty currentQtyRemainingForLoadLine = loadLineQtyRemainingMap.lookup(_loadLineRefRecId);
        
        if (currentQtyRemainingForLoadLine > _inventQtyRemainingToAdjustBy)
        {
            loadLineQtyRemainingMap.add(_loadLineRefRecId, currentQtyRemainingForLoadLine - _inventQtyRemainingToAdjustBy);
            return _inventQtyRemainingToAdjustBy;
        }
        else
        {
            loadLineQtyRemainingMap.remove(_loadLineRefRecId);
            return currentQtyRemainingForLoadLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePickIdAllocaton</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ListEnumerator executePickIdAllocaton(InventMovement _inventMovement, InventDimId _pickedInventDimId, InventQty _inventQty)
    {
        InventDim pickedInventDim = InventDim::find(_pickedInventDimId);
        container itemAndDimsToLoadLineMapKey = this.determineItemAndDimsToLoadLineMapKey(_inventMovement.itemId(), pickedInventDim);
        InventDimId inventDimIdKey = conPeek(itemAndDimsToLoadLineMapKey, 2);
            
        InventQty runningInventQty = _inventQty;
        List pickIds = new List(Types::Class); // of WhsLoadLineInventoryPickIdAllocation

        if (itemAndDimsToLoadLineMap.exists(itemAndDimsToLoadLineMapKey))
        {
            Set loadLinesSet = itemAndDimsToLoadLineMap.lookup(itemAndDimsToLoadLineMapKey);
            SetEnumerator loadLinesSetEnum = loadLinesSet.getEnumerator();
                            
            while (loadLinesSetEnum.moveNext() && runningInventQty > 0)
            {
                WHSLoadLineRefRecId loadLineRecId = loadLinesSetEnum.current();
                InventQty loadLineAllocatedQty = this.decreaseLoadLineQtyRemaining(loadLineRecId, runningInventQty);

                if (loadLineAllocatedQty > 0)
                {                    
                    pickIds.addEnd(new WhsLoadLineInventTransPickIdAllocation(this.determinePickIdForLoadLine(loadLineRecId), loadLineAllocatedQty));
                    runningInventQty -= loadLineAllocatedQty;
                }
            }
        }

        if (runningInventQty > 0)
        {
            error(strFmt("@WAX:UnableToAllocatePickIdForItemDim", _inventMovement.itemId(), InventDim::find(inventDimIdKey).prefix()));
            throw error(strFmt("@WAX:PickIdErrorInsufficientQty", _inventQty, runningInventQty));
        }

        return pickIds.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineItemAndDimsToLoadLineMapKey</Name>
				<Source><![CDATA[
    private container determineItemAndDimsToLoadLineMapKey(ItemId _itemId, InventDim _inventDim)
    {
        _inventDim.wMSLocationId = '';
        
        return [_itemId, _inventDim.hash3Value()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsAllocationComplete</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean determineIsAllocationComplete()
    {
        return loadLineQtyRemainingMap.elements() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWorkTableActivity</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext processWorkTableActivity()
    {
        return instrumentationLogger.activityContext(instrumentationLogger.activity('WhsWorkTableInventTransPickIdAllocator.processWorkTable'));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>