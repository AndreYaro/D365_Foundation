<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalFormTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalFormTrans</c> class helps with form initialization and managing the enabled and
///    disabled state of controls.
/// </summary>
class LedgerJournalFormTrans extends JournalFormTrans
{
    FormMenuButtonControl       ctrlPostJournalMenu;
    FormMenuButtonControl       ctrlCheckJournalMenu;
    FormMenuButtonControl       ctrlFunctionMenu;
    FormMenuButtonControl       ctrlPaymentReconciliationButton;
    FormMenuButtonControl       ctrlPaymentProposalMenu;
    FormMenuButtonControl       ctrlPaymentStatusMenu;
    FormMenuButtonControl       ctrlPeriodicJournalMenu;
    FormMenuButtonControl       ctrlDimensionMenu;

    FormRealControl             ctrlExchRate;
    FormRealControl             ctrlExchRateSecond;
    FormRealControl             ctrlReportingExchRate;
    FormRealControl             ctrlReportingExchRateSecond;
    FormCheckBoxControl         ctrlTriangulation;

    FormDateControl             ctrlTransDate;
    FormDateControl             ctrlTransDateGrid;

    FormCheckBoxControl         ctrlBankDepositVoucherTab;
    FormCheckBoxControl         ctrlBankDepositVoucherGrid;

    FormStringControl           ctrlRecipientName;

    FormButtonControl           ctrlSettlementButton;
    FormFunctionButtonControl   ctrlDepositSlipButton;

    FormMenuButtonControl       ctrlCourseButton;
    FormButtonControl           ctrlReportAsReadyButton;
    FormButtonControl           ctrlApproveButton;
    FormButtonControl           ctrlRejectButton;
    FormButtonControl           ctrlBankChequeReuseButton;

    FormControl                 ctrlMassTransactionReversalButton;
    FormControl                 ctrlMassTransactionReversalFailuresButton;

    FormFunctionButtonControl   ctrlVoucherTransButton;
    FormFunctionButtonControl   ctrlDeleteTransactionsButton;
    FormFunctionButtonControl   ctrlAccrualButton;
    FormFunctionButtonControl   ctrlBalanceControlButton;
    FormFunctionButtonControl   ctrlGetTransactionsButton;
    FormFunctionButtonControl   ctrlSplitPostingButton;
    FormFunctionButtonControl   ctrlFurtherPostingButton;
    FormFunctionButtonControl   ctrlCreditInvoicing;
    FormCommandButtonControl    ctrlCopyPeriodicButton;
    FormFunctionButtonControl   ctrlJournalTextsButton;
    FormFunctionButtonControl   ctrlBankPromissoryNoteCancelButton;
    FormFunctionButtonControl   ctrlTradeBLWIChangeCodeButton;
    FormFunctionButtonControl   ctrlLedgerInAccountStatementTransButton;
    FormFunctionButtonControl   ctrlLedgerInAccountStatementTotalButton;
    FormFunctionButtonControl   ctrlSalesTaxMenu;
    FormFunctionButtonControl   ctrlCancelNoteOrDocumentButton;
    FormButtonControl           ctrlSelectSettledNoteButton;
    FormFunctionButtonControl   ctrlChangePaymentMethodButton;
    FormFunctionButtonControl   ctrlImportPaymentsButton;
    FormFunctionButtonControl   ctrlExecutionDateButton;
    FormFunctionButtonControl   ctrlCreatePaymentButton;
    FormFunctionButtonControl   ctrlSelectVoucherTemplateButton;
    FormFunctionButtonControl   ctrlSaveVoucherTemplateButton;
    FormFunctionButtonControl   ctrlPostJournalButton;
    FormFunctionButtonControl   ctrlPostJournalBatchButton;
    FormFunctionButtonControl   ctrlPostAndTransferJournalButton;

    // <GEERU>
    FormFunctionButtonControl   ctrlJournalTransDateSetButton;
    #ISOCountryRegionCodes
    // </GEERU>

    FormFunctionButtonControl   ctrlAccountDimensionButton;
    FormFunctionButtonControl   ctrlOffsetAccountDimensionButton;
    FormFunctionButtonControl   ctrlPaymFeeAccountDimensionButton;

    // Offset account type and offset account controls
    FormComboBoxControl         ctrlOffsetAccountTypeTab;
    FormComboBoxControl         ctrlOffsetAccountTypeGrid;
    FormControl                 ctrlOffsetAccountTab;
    FormControl                 ctrlOffsetAccountGrid;

    // Tax amount fields
    FormRealControl             calculatedTaxAmount;
    FormRealControl             actualTaxAmount;

    FormControl ctrlErrorExists;

    LedgerJournalTrans ledgerJournalTrans;
    LedgerJournalEngine ledgerJournalEngine;
    LedgerJournalCheckPostResults checkPostResults;

    // The following are state variables that are used when enabling/disabling
    // form elements. They are intialized by initFormElementEnablingValues()

    // Flag that indicates whether or not the journal is an active workflow
    // approvals document.
    boolean isActiveWFApprovalDocument;

    // Flag that indicates whether or not the workflow-affected UI elements
    // are enabled.
    boolean isUIElementWFApprovalEnabled;

    // Flag that indicates whether or not the datasource is disabled for the
    // current workflow approvals state.
    boolean isDatasourceDisabledForWFApproval;

    // Flag that indicates whether or not the edit mode for a workflow approved
    // journal needs to be selected.
    boolean needToSelectWFApprovalsApprovedEditMode;

    // Flag that indicates whether or not an approved journal is in the Processing
    // Payment mode.
    boolean isProcessingPaymentOnAprovedJournal;

    // Flag that indicates whether or not the Payment Status Button can be enabled
    // for the workflow approval mode.
    boolean isPayStatusButtonAvailForWFApproval;

    str                         mcrExecuteFromClass;

    FormFunctionButtonControl   ctrlDeductionButton;
    // <GIN>
    FormFunctionButtonControl   ctrlChallanInformationButton;
    FormFunctionButtonControl   ctrlDefermentSchedule;
    NoYes                       vatGoodsType;
    FormComboBoxControl         ctrlExciseNone_IN;
    FormComboBoxControl         ctrlExciseManufacture_IN;
    FormComboBoxControl         ctrlExciseTraders_IN;

    FormReferenceGroupControl   ctrlECCNumber;
    FormReferenceGroupControl   ctrlManECCRegistrationNumberTable;
    FormReferenceGroupControl   ctrlTraderECCRegistrationNumberTable;
    FormFunctionButtonControl   ctrlGSTTransactionIdButton;
    FormFunctionButtonControl   ctrlUpdatedGSTDetailsButton;
    // </GIN>

    // <GEERU>
    FactureSource_RU            factureSource;
    FormFunctionButtonControl   ctrlCashDueAnnouncementButton_RU;
    FormFunctionButtonControl   ctrlCancelCashDueAnnounceButton_RU;
    FormGroupControl            ctrlCurrencyConvert_RU;
    // </GEERU>
    FormFunctionButtonControl   ctrlLedgerJournalTransDailyTAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buttonClickedFunctions</Name>
				<Source><![CDATA[
    public void buttonClickedFunctions(LedgerJournalTrans _ledgerJournalTrans)
    {
        this.setCreditInvoicingButtonEnabled(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    public void datasourceCreatePre()
    {
        if (ledgerJournalEngine.numberSeqFormHandlerJournal())
        {
            ledgerJournalEngine.numberSeqFormHandlerJournal().formMethodDataSourceCreatePre();

            // If LedgerJournalTransDupVoucherInsertIfEmptyFlight is enabled, all "creating new journal line" will be done manually except on opening a new journal.
            // On every journal line, we track if NumberSeqFormHandler is properly triggered to prevent any duplicate voucher number issue.
            if (FeatureStateProvider::isFeatureEnabled(LedgerJournalTransDupVoucherInsertIfEmptyFlight::instance()))
            {
                LedgerJournalTransTypeInstrumentation::logJournalLineCreation();
            }
        }

        ledgerJournalEngine.preCreate(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    public void datasourceInitPost(JournalTransMap _journalTrans)
    {
        super(_journalTrans);
        ledgerJournalTrans = _journalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs initialization for the active event for a data source.
    /// </summary>
    public void datasourceLinkActivePre()
    {
        super();

        // Initialize state variables used to determine enabled/disabled states for form buttons.
        this.initFormElementEnablingValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableAgreementFields_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables <c>AccountAgreementId_RU</c> and <c>OffsetAccountAgreementId_RU</c> fields for the active event for the data source.
    /// </summary>
    public void enableAgreementFields_RU()
    {
        void setAllowEdit(FieldId _fieldNum, LedgerJournalACType _accountType)
        {
            FormDataObject agreementFieldObject;

            agreementFieldObject = journalTrans_ds.object(_fieldNum);

            if (agreementFieldObject)
            {
                agreementFieldObject.allowEdit((_accountType == LedgerJournalACType::Cust || _accountType == LedgerJournalACType::Vend));
            }
        }

        if (journalTrans_ds)
        {
            setAllowEdit(fieldNum(LedgerJournalTrans, AccountAgreementId_RU),       ledgerJournalTrans.AccountType);
            setAllowEdit(fieldNum(LedgerJournalTrans, OffsetAccountAgreementId_RU), ledgerJournalTrans.OffsetAccountType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables buttons for the active event for the data source.
    /// </summary>
    public void enableButtonsActive()
    {
        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        boolean isFunctionsButtonEnabled;

        super();

        this.setPostMenuButtonEnabled();
        this.setFormViewEditMode();

        // Functions Button
        if (!isProcessingPaymentOnAprovedJournal)
        {
            isFunctionsButtonEnabled = this.setFunctionMenuButtonEnabled();

            if (isFunctionsButtonEnabled)
            {
                this.setSettlementButtonEnable();
                this.setSplitPostingButtonEnable();
                this.setDepositSlipButtonEnabled();
                this.setJournalTextsButtonEnabled();
                this.setDeleteTransactionsButtonEnabled();
                this.setGetTransactionsButtonEnable();
                this.setFurtherPostingButtonEnable();
                this.setAccrualButtonEnabled();
                this.setSelectVoucherTemplateButtonEnabled();
                this.setSaveVoucherTemplateButtonEnabled();

                // <GEERU>
                if (countryRegion_RU)
                {
                    this.setJournalTransDateSetButtonEnabled_RU();
                }
                // </GEERU>
            }
        }

        // Sales tax Button
        this.setSalesTaxMenuButtonEnable();

        this.setCheckMenuButtonEnabled();
        this.setCourseButtonEnable();
        this.setVoucherTransButtonEnabled();
        this.setBalanceControlButtonEnabled();
        this.setCopyPeriodicButtonEnable();
        this.setPeriodicJournalMenuButtonEnabled();

        // <GEERU>
        if (countryRegion_RU)
        {
            this.setCashDueAnnouncementButtonEnabled_RU();
            this.setCancelCashDueAnnounceButtonEnabled_RU();
        }
        // </GEERU>

        // <GIN>
        if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && TaxParameters::isVATEnable_IN())
        {
            this.setDefermentScheduleEnabled_IN();
        }
        if (TaxParameters::checkTaxParameters_IN())
        {
            this.setChallanInformationButtonEnabled_IN();
        }
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.setGSTTransactionIdButtonEnabled_IN();
            this.setUpdateGSTDetailsButtonEnabled_IN();
        }
        // </GIN>

        // <GJP>
        if (LedgerParameters::isTAccount())
        {
            this.setCtrlLedgerJournalTransDailyTAccount();
        }
        // </GJP>
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCashDueAnnounceRelatedField_RU</Name>
				<Source><![CDATA[
    public void enableCashDueAnnounceRelatedField_RU()
    {
        boolean allowEdit = ledgerJournalTrans.AnnouncementNum_RU ? false : true;

        if (journalTrans_ds)
        {
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, TransDate)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, AccountType)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, LedgerDimension)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, Txt)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, AmountCurDebit)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, AmountCurCredit)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, CurrencyCode)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, OffsetAccountType)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, OffsetLedgerDimension)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, BankTransType)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, DocumentNum)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, DocumentDate)).allowEdit(allowEdit);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, BankDepositVoucher)).allowEdit(allowEdit);
            journalTrans_ds.allowDelete(allowEdit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableChallanInformation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable challanger information.
    /// </summary>
    /// <returns>
    /// If 'True', the challanger information is enabled.
    /// </returns>
    public boolean enableChallanInformation_IN()
    {
        boolean check;

        if ((ledgerJournalTrans.AccountType          == LedgerJournalACType::Vend
            && (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank
            || ledgerJournalTrans.OffsetAccountType  == LedgerJournalACType::Ledger)
            && (ledgerJournalTrans.AmountCurDebit > 0
            || ledgerJournalTrans.AmountCurCredit <0))
            || ((ledgerJournalTrans.AccountType      == LedgerJournalACType::Bank
            || ledgerJournalTrans.AccountType        == LedgerJournalACType::Ledger)
            && ledgerJournalTrans.OffsetAccountType  == LedgerJournalACType::Vend
            && (ledgerJournalTrans.AmountCurDebit < 0
            || ledgerJournalTrans.AmountCurCredit > 0))
            || (ledgerJournalTrans.AccountType       == LedgerJournalACType::Vend
            && ledgerJournalTrans.OffsetAccountType  == LedgerJournalACType::Vend))
        {
            check = true;
        }

        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCurrencyConvert_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// If bank transaction type's ID is not empty and bank transaction extended type is not equals None,
    /// currency converter fields group is enable, otherwise - disable
    /// </summary>
    public void enableCurrencyConvert_RU()
    {
        boolean allowEdit = false;

        if (ctrlCurrencyConvert_RU)
        {
            if (ledgerJournalTrans.BankTransType != '' &&
                BankTransType::find(ledgerJournalTrans.BankTransType).BankAdvancedTransType_RU != BankAdvancedTransType_RU::None)
            {
                allowEdit = true;
            }

            ctrlCurrencyConvert_RU.allowEdit(allowEdit && ! ledgerJournalTrans.BankCurrencyTransferLog_RU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDimensionButtonsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the financial dimension menu items on the lines form are enabled.
    /// </summary>
    /// <param name="_custVendPaymJournalFee">
    /// The current <c>CustVendPaymJournalFee</c> record.
    /// </param>
    public void enableDimensionButtonsActive(CustVendPaymJournalFee _custVendPaymJournalFee = null)
    {
        this.setAccountDimensionButtonEnable();
        this.setOffsetAccountDimensionButtonEnable();
        this.setPaymFeeAccountDimensionButtonEnable(_custVendPaymJournalFee);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFactureAutoCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables Facture Auto Create field in GL Journal
    /// </summary>
    public void enableFactureAutoCreate()
    {
        if (journalTrans_ds)
        {
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, CustFactureAutoCreate_RU)).enabled(
                ledgerJournalTrans.AccountType       == LedgerJournalACType::Cust ||
                ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFieldsActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables fields on the active event for the data source.
    /// </summary>
    public void enableFieldsActive()
    {
        boolean     journalLineIsDependantOnSettlement;
        // <GEERU>
        boolean     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        LedgerJournalTable ledgerJournalTable;

        super();

        this.hideTaxAmountFields();

        this.setExchRateEnabled();

        this.setReportingExchRateEnabled();

        if (ctrlTransDateGrid || ctrlTransDate)
        {
            if (CFMParameters::isPaymentRequestsEnabled() && CFMPaymentRequestPaymentLink::isGeneratedFromPaymentSchedule(ledgerJournalTrans))
            {
                journalLineIsDependantOnSettlement = false;
            }
            else
            {
                journalLineIsDependantOnSettlement  = ledgerJournalTrans.isDependantOnSettlement();
            }

            if (ctrlTransDateGrid)
            {
                ctrlTransDateGrid.allowEdit(!journalLineIsDependantOnSettlement);
            }

            if (ctrlTransDate)
            {
                ctrlTransDate.allowEdit(!journalLineIsDependantOnSettlement);
            }
        }

        if (ctrlRecipientName)
        {
            ctrlRecipientName.visible(BankParameters::find().AllowBankLedgerCheck);
            ctrlRecipientName.allowEdit(ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger);
        }

        if (isDatasourceDisabledForWFApproval)
        {
            journalTrans_ds.allowCreate(false);
            journalTrans_ds.allowDelete(false);
            journalTrans_ds.allowEdit(false);
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            this.enableAgreementFields_RU();
        }
        // </GEERU>

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            ledgerJournalEngine.allowEditVatRegister_PL(ledgerJournalTrans);
        }
        // </GEEPL>

        // When FixOffsetAccount is set, the offset account type and offset account and not editable
        ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);
        if (ledgerJournalTable.FixedOffsetAccount == NoYes::Yes)
        {
            if (ctrlOffsetAccountTypeTab)
            {
                ctrlOffsetAccountTypeTab.allowEdit(false);
            }
            if (ctrlOffsetAccountTypeGrid)
            {
                ctrlOffsetAccountTypeGrid.allowEdit(false);
            }
            if (ctrlOffsetAccountTab)
            {
                ctrlOffsetAccountTab.allowEdit(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger);
            }
            if (ctrlOffsetAccountGrid)
            {
                ctrlOffsetAccountGrid.allowEdit(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger);
            }
        }
        // <GEERU>
        if (countryRegion_RU)
        {
            this.enableCashDueAnnounceRelatedField_RU();
            this.enableCurrencyConvert_RU();
            this.enableFactureAutoCreate();
        }

        if (RCashParameters::isCashModuleEnabled())
        {
            this.enableRepresPersonId_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableRepresPersonId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the Representative field.
    /// </summary>
    /// <remarks>
    /// Representative field should be disabled for Person representative type.
    /// </remarks>
    public void enableRepresPersonId_RU()
    {
        FormDataObject fdo;

        if (journalTrans_ds)
        {
            fdo = journalTrans_ds.object(fieldNum(LedgerJournalTrans, RCashDocRepresPersonId));
            if (fdo)
            {
                switch (ledgerJournalTrans.RCashDocRepresType)
                {
                    case RCashDocRepresType::Person :
                        fdo.enabled(true);
                        fdo.allowEdit(false);
                        break;
                    case RCashDocRepresType::Other :
                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
                        {
                            fdo.enabled(true);
                            fdo.allowEdit(true);
                        }
                        else
                        {
                            fdo.enabled(false);
                            fdo.allowEdit(false);
                        }
                        break;
                    default :
                        fdo.enabled(true);
                        fdo.allowEdit(true);
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    public void formClosePre()
    {
        JournalFormTable ledgerJournalFormTable = this.getJournalFormTable();

        ledgerJournalFormTable.formRunLines(null);

        if (journalTableData)
        {
            // Avoid updating posted journals. It bumps the change tracking version.
            if (this.allowEditAndCreateLines())
            {
                journalTableData.updateBlock(JournalBlockLevel::InUse,JournalBlockLevel::None);
            }

            ledgerJournalFormTable.updateFormCacheCurrent(journalTableData.journalTable(),true);
            ledgerJournalFormTable.datasourceActivePre();
            ledgerJournalFormTable.datasourceActivePost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        // <GEERU>
        QueryBuildRange criteriaRecId;
        // </GEERU>

        initJournalTypeId = journalFormTable.journalTypeId();

        LedgerILedgerJournalEngineProvider ledgerJournalEngineProvider = formRunObject as LedgerILedgerJournalEngineProvider;

        if (ledgerJournalEngineProvider)
        {
            ledgerJournalEngine = ledgerJournalEngineProvider.ledgerJournalEngine();

            this.initJournalTransFromCaller();

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.initFactureSource_RU();

                if (factureSource)
                {
                    criteriaRecId = findOrCreateRange_W(journalTrans_ds.query().dataSourceTable(tableNum(LedgerJournalTrans)), fieldNum(LedgerJournalTrans, RecId), factureSource.transRange());
                    criteriaRecId.status(RangeStatus::Hidden);
                    ledgerJournalEngine.newJournalActive(ledgerJournalEngine.ledgerJournalTable());
                }
            }
            // </GEERU>
        }
        
        QueryBuildDataSource qbds = journalTrans_ds.query().datasourceTable(tableNum(LedgerJournalTrans));

        if (qbds &&
            journalTrans_ds &&
            journalTrans_ds.index() == indexNum(LedgerJournalTrans, NumVoucherIdx) &&
            journalTrans_ds.query().orderByFieldCount(qbds) == 0)
        {
            // The NumVoucherIdx index contains the Invoice field between Voucher and LineNum, the desired sorting should
            // exclude this field.
            qbds.addSortField(fieldNum(LedgerJournalTrans, Partition));
            qbds.addSortField(fieldNum(LedgerJournalTrans, DataAreaId));
            qbds.addSortField(fieldNum(LedgerJournalTrans, JournalNum));
            qbds.addSortField(fieldNum(LedgerJournalTrans, Voucher));
            qbds.addSortField(fieldNum(LedgerJournalTrans, LineNum));
        }

        FormDataObject vatDueDateDataObject = journalTrans_ds.object(fieldNum(LedgerJournalTrans, VatDueDate_W));
        if (vatDueDateDataObject)
        {
            vatDueDateDataObject.visible(TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled());
        }

        // Having InsertIfEmpty might introduce unexpected and/or unwanted inserts which might lead to duplicate voucher number issue,
        // disabling InsertIfEmpty property permanently but keep "add new line on creating new journal" behaviour to minimize breaking changes to customers
        // All inserting new line should be done manually by user, except when opening a new jouranl (or a journal without any lines saved in db)
        if (FeatureStateProvider::isFeatureEnabled(LedgerJournalTransDupVoucherInsertIfEmptyFlight::instance())
            && journalTrans_ds && journalTrans_ds.insertIfEmpty())
        {
            // CustPaymEntry form has its own "manually inserting new line" logic in formRun
            if (formRun.name() != formStr(CustPaymEntry))
            {
                journalTrans_ds.insertIfEmpty(false);
                formRun.OnPostRun += eventhandler(this.onPostFormRunAddNewLineToNewJournal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPostFormRunAddNewLineToNewJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new line to a new journal, to mitigate side effect from disabling InsertIfEmpty
    /// Disposes the event handler after the job is done
    /// </summary>
    [Hookable(false)]
    public void onPostFormRunAddNewLineToNewJournal(xFormRun _sender, FormEventArgs _event)
    {
        if (ledgerJournalEngine && ledgerJournalEngine.ledgerJournalTable().numOfLines() == 0
            && journalTrans_ds && !journalTrans_ds.insertIfEmpty())
        {
            journalTrans_ds.create();
            formRun.OnPostRun -= eventhandler(this.onPostFormRunAddNewLineToNewJournal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a query that contains records from the <c>ReasonTable</c> table that are set up for the
    ///    <c>LedgerJournalTrans</c> table account type and offset account type.
    /// </summary>
    /// <returns>
    ///    The query that contains the records from the <c>ReasonTable</c> table that are set up for the
    ///    <c>LedgerJournalTrans</c> table account type and offset account type.
    /// </returns>
    public Query getReasonQuery()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRangeAccountType;
        QueryBuildRange         queryBuildRangeOffsetAccountType;

        // Create the query datasource
        queryBuildDataSource = query.addDataSource(tableNum(ReasonTable));

        // Restrict the reason code for the account type
        switch (ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust :
                queryBuildRangeAccountType = queryBuildDataSource.addRange(fieldNum(ReasonTable, Cust));
                break;

            case LedgerJournalACType::Vend :
                queryBuildRangeAccountType = queryBuildDataSource.addRange(fieldNum(ReasonTable, Vend));
                break;

            case LedgerJournalACType::Ledger :
                queryBuildRangeAccountType = queryBuildDataSource.addRange(fieldNum(ReasonTable, Ledger));
        }

        if (queryBuildRangeAccountType)
        {
            queryBuildRangeAccountType.value(enum2str(NoYes::Yes));
        }

        // Restrict the reason code for the offset account type
        switch (ledgerJournalTrans.OffsetAccountType)
        {
            case LedgerJournalACType::Bank :
                queryBuildRangeOffsetAccountType = queryBuildDataSource.addRange(fieldNum(ReasonTable, Bank));
                break;
        }

        if (queryBuildRangeOffsetAccountType)
        {
            queryBuildRangeOffsetAccountType.value(enum2str(NoYes::Yes));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideTaxAmountFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides tax amount fields depending on the journal name parameter.
    /// </summary>
    public void hideTaxAmountFields()
    {
        boolean hideTaxAmounts;

        hideTaxAmounts = ledgerJournalEngine.parmLedgerJournalTable().ledgerJournalName().TaxHideAmountFields;

        if (actualTaxAmount &&
            hideTaxAmounts)
        {
            actualTaxAmount.visible(false);
        }

        if (calculatedTaxAmount &&
            hideTaxAmounts)
        {
            calculatedTaxAmount.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    public void initDatasourceAllow()
    {
        boolean             allow;
        LedgerJournalTable  ledgerJournalTable;
        NumberSequenceTable numberSequenceTable;

        super();

        if (!ctrlVoucherGrid && !ctrlVoucherTab)
        {
            return;
        }

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT])
            && ledgerJournalEngine.ledgerJournalTable().AssetTransferType_LT != LtAssetTransferType::NotTransfer)
        {
            journalTrans_ds.allowEdit(false);
        }
        // </GEELT>

        allow = journalTrans_ds.allowEdit();

        if (allow)
        {
            ledgerJournalTable  = ledgerJournalEngine.parmLedgerJournalTable();
            numberSequenceTable = NumberSequenceTable::find(ledgerJournalTable.NumberSequenceTable);

            allow = allow && (ledgerJournalTable.ledgerJournalName().NewVoucher == NewVoucher::Manually ||
                              numberSequenceTable.AllowChangeDown                                       ||
                              numberSequenceTable.AllowChangeUp);
        }

        if (ctrlVoucherGrid)
        {
            ctrlVoucherGrid.allowEdit(allow);
        }

        if (ctrlVoucherTab)
        {
            ctrlVoucherTab.allowEdit(allow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFactureSource_RU</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    protected void initFactureSource_RU()
    {
        Object      caller;
        DictClass   dict;

        if (formRun && formRun.args().parmObject() && !factureSource &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            caller = formRun.args().parmObject();
            dict   = new DictClass(classIdGet(caller));

            while (dict && dict.id() != classNum(Object))
            {
                if (dict.id() == classNum(FactureSource_RU))
                {
                    this.parmFactureSource_RU(caller);
                    break;
                }

                dict = new DictClass(dict.extend());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormElementEnablingValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the editable state of workflow affected controls.
    /// </summary>
    /// <remarks>
    ///    This method caches workflow states, etc., to class fields. It should be called whenever the
    ///    <c>LedgerJournalTable</c> table backing this class is updated.
    /// </remarks>
    public void initFormElementEnablingValues()
    {
        LedgerJournalTable ledgerJournalTable = ledgerJournalEngine.parmLedgerJournalTable();

        // Set class variables that are used to enable/disable form elements
        isActiveWFApprovalDocument   = this.isActiveWFApprovalDocument();
        isUIElementWFApprovalEnabled = this.isUIElementWFApprovalEnabled();
        isDatasourceDisabledForWFApproval = this.isDatasourceDisabledForWFApproval();

        // Initialize needToSelectWFApprovalsApprovedEditMode, isProcessingPaymentOnAprovedJournal and isPayStatusButtonAvailForWFApproval
        needToSelectWFApprovalsApprovedEditMode = false;
        isProcessingPaymentOnAprovedJournal = false;
        if (ledgerJournalTable.isWFApprovalApproved() && !ledgerJournalEngine.posted())
        {
            LedgerJournalFormTable ledgerJournalFormTable = journalFormTable as LedgerJournalFormTable;
            if (ledgerJournalFormTable.parmIsWFApprovedModeSelected())
            {
                ledgerJournalFormTable.parmIsWFApprovedModeSelected(false);
                isProcessingPaymentOnAprovedJournal = this.isProcessingPaymentOnAprovedJournal();
            }
            else
            {
                needToSelectWFApprovalsApprovedEditMode = true;
            }
        }
        isPayStatusButtonAvailForWFApproval = isProcessingPaymentOnAprovedJournal ||
                (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::NotSubmitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveWFApprovalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the journal is an active workflow approvals document.
    /// </summary>
    /// <returns>
    ///    true if an active workflow approvals document; otherwise, false.
    /// </returns>
    protected boolean isActiveWFApprovalDocument()
    {
        LedgerJournalTable ledgerJournalTable = ledgerJournalEngine.parmLedgerJournalTable();

        return ledgerJournalTable.isInWFApprovalProcess() && !ledgerJournalEngine.posted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDatasourceDisabledForWFApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the data source should be disabled for the current workflow state.
    /// </summary>
    /// <returns>
    ///    true if the data source is to be disabled; otherwise, false.
    /// </returns>
    protected boolean isDatasourceDisabledForWFApproval()
    {
        LedgerJournalTable ledgerJournalTable = ledgerJournalEngine.ledgerJournalTable();

        return ledgerJournalTable.isInWFApprovalProcess() && !ledgerJournalTable.isWFUserPermittedToEdit(this.parmWorkflowWorkItemTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the journal is currently allowed to be modified.
    /// </summary>
    /// <returns>
    ///    true if the journal is currently allowed to be modified; otherwise, false.
    /// </returns>
    public boolean isJournalEnabled()
    {
        boolean enabled;

        enabled = journalTableData.blockLevel() != JournalBlockLevel::System;
        enabled = enabled && !ledgerJournalEngine.posted();

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessingPaymentOnAprovedJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the user can process payments for a workflow approvals approved journal.
    /// </summary>
    /// <returns>
    ///    true if the journal is non-editable in a workflow approvals approved state and the user has chosen
    ///    to process payments; otherwise, false.
    /// </returns>
    protected boolean isProcessingPaymentOnAprovedJournal()
    {
        LedgerJournalFormTable ledgerJournalFormTable = journalFormTable;

        return ledgerJournalFormTable.parmIsProcessingPaymentOnApprovedJounal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUIElementWFApprovalEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a user interface (UI) element can be enabled based on current workflow state.
    /// </summary>
    /// <returns>
    ///    true if the UI element can be enabled; otherwise, false.
    /// </returns>
    protected boolean isUIElementWFApprovalEnabled()
    {
        LedgerJournalTable ledgerJournalTable = ledgerJournalEngine.parmLedgerJournalTable();

        return ledgerJournalTable.isInWFApprovalProcess() && ledgerJournalTable.isWFUserPermittedToEdit(this.parmWorkflowWorkItemTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageEditingModeForApprovedWFApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the lines form should be closed so that the edit mode of the approved journal
    ///    can be changed.
    /// </summary>
    /// <remarks>
    ///    This is necessary for the case when a user is changing the selected journal to a workflow approvals
    ///    approved journal with the lines form already opened. In this case, it is not known whether the
    ///    journal should be in review, edit or process payments mode. This uses a review (read-only) mode if
    ///    the user selects No.
    /// </remarks>
    public void manageEditingModeForApprovedWFApproval()
    {
        if (needToSelectWFApprovalsApprovedEditMode)
        {
            needToSelectWFApprovalsApprovedEditMode = false;
            Box::info("@SYS109632");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayCurrencyBeModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the exchange rate of the journal line may be modified.
    /// </summary>
    /// <returns>
    ///    true if the exchange rate may be modified; otherwise, false.
    /// </returns>
    protected boolean mayCurrencyBeModified()
    {
        return ledgerJournalEngine.mayCurrencyBeModified(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maySecondaryCurrencyBeModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the secondary exchange rate of the journal line may be modified.
    /// </summary>
    /// <returns>
    ///    true if the secondary exchange rate may be modified; otherwise, false.
    /// </returns>
    protected boolean maySecondaryCurrencyBeModified()
    {
        return ledgerJournalEngine.maySecondaryCurrencyBeModified(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrExecuteFromClass</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a string indicating that the invoice journal is called from a class.
    /// </summary>
    /// <returns>
    ///    A string indicating the invoice journal is called from a class.
    /// </returns>
    str mcrExecuteFromClass()
    {
        return mcrExecuteFromClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualTaxAmount</Name>
				<Source><![CDATA[
    public FormRealControl parmActualTaxAmount(FormRealControl _actualTaxAmount = actualTaxAmount)
    {
        actualTaxAmount = _actualTaxAmount;

        return actualTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculatedTaxAmount</Name>
				<Source><![CDATA[
    public FormRealControl parmCalculatedTaxAmount(FormRealControl _calculatedTaxAmount = calculatedTaxAmount)
    {
        calculatedTaxAmount = _calculatedTaxAmount;

        return calculatedTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlAccountDimensionButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlAccountDimensionButton(FormFunctionButtonControl _ctrlAccountDimensionButton = ctrlAccountDimensionButton)
    {
        ctrlAccountDimensionButton = _ctrlAccountDimensionButton;
        return ctrlAccountDimensionButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlAccrualButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlAccrualButton(FormFunctionButtonControl _ctrlAccrualButton = ctrlAccrualButton)
    {
        ctrlAccrualButton = _ctrlAccrualButton;

        return ctrlAccrualButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlApproveButton</Name>
				<Source><![CDATA[
    public FormButtonControl parmCtrlApproveButton(FormButtonControl _ctrlApproveButton = ctrlApproveButton)
    {
        ctrlApproveButton = _ctrlApproveButton;

        return ctrlApproveButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlBalanceControButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlBalanceControButton(FormFunctionButtonControl _ctrlBalanceControlButton = ctrlBalanceControlButton)
    {
        ctrlBalanceControlButton = _ctrlBalanceControlButton;

        return ctrlBalanceControlButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlBankChequeReuseButton</Name>
				<Source><![CDATA[
    public FormButtonControl parmCtrlBankChequeReuseButton(FormButtonControl _ctrlBankChequeReuseButton = ctrlBankChequeReuseButton)
    {
        ctrlBankChequeReuseButton = _ctrlBankChequeReuseButton;

        return ctrlBankChequeReuseButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlBankDepositVoucherGrid</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmCtrlBankDepositVoucherGrid(FormCheckBoxControl _ctrlBankDepositVoucherGrid = ctrlBankDepositVoucherGrid)
    {
        ctrlBankDepositVoucherGrid = _ctrlBankDepositVoucherGrid;

        return ctrlBankDepositVoucherGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlBankDepositVoucherTab</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmCtrlBankDepositVoucherTab(FormCheckBoxControl _ctrlBankDepositVoucherTab = ctrlBankDepositVoucherTab)
    {
        ctrlBankDepositVoucherTab = _ctrlBankDepositVoucherTab;

        return ctrlBankDepositVoucherTab;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlBankPromissoryNoteCancelButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlBankPromissoryNoteCancelButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlBankPromissoryNoteCancelButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlBankPromissoryNoteCancelButton</c> class variable.
    /// </returns>
    public FormFunctionButtonControl parmCtrlBankPromissoryNoteCancelButton(FormFunctionButtonControl _ctrlBankPromissoryNoteCancelButton = ctrlBankPromissoryNoteCancelButton)
    {
        ctrlBankPromissoryNoteCancelButton = _ctrlBankPromissoryNoteCancelButton;
        return ctrlBankPromissoryNoteCancelButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCancelCashDueAnnouncement_RU</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlCancelCashDueAnnouncement_RU(FormFunctionButtonControl _ctrlCancelCashDueAnnounceButton = ctrlCancelCashDueAnnounceButton_RU)
    {
        ctrlCancelCashDueAnnounceButton_RU = _ctrlCancelCashDueAnnounceButton;

        return ctrlCancelCashDueAnnounceButton_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCancelNoteOrDocumentButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlCancelNoteOrDocumentButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlCancelNoteOrDocumentButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlCancelNoteOrDocumentButton</c> class variable.
    /// </returns>
    public FormFunctionButtonControl parmCtrlCancelNoteOrDocumentButton(FormFunctionButtonControl _ctrlCancelNoteOrDocumentButton = ctrlCancelNoteOrDocumentButton)
    {
        ctrlCancelNoteOrDocumentButton = _ctrlCancelNoteOrDocumentButton;
        return ctrlCancelNoteOrDocumentButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCashDueAnnouncementButton_RU</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlCashDueAnnouncementButton_RU(FormFunctionButtonControl _ctrlCashDueAnnounceButton = ctrlCashDueAnnouncementButton_RU)
    {
        ctrlCashDueAnnouncementButton_RU = _ctrlCashDueAnnounceButton;

        return ctrlCashDueAnnouncementButton_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlChallanInformationButton_IN</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlChallanInformationButton_IN(FormFunctionButtonControl _ctrlChallanInformationButton = ctrlChallanInformationButton)
    {
        ctrlChallanInformationButton = _ctrlChallanInformationButton;

        return ctrlChallanInformationButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlChangePaymentMethodButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlChangePaymentMethodButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlChangePaymentMethodButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlChangePaymentMethodButton</c> class variable.
    /// </returns>
    public FormFunctionButtonControl parmCtrlChangePaymentMethodButton(FormFunctionButtonControl _ctrlChangePaymentMethodButton = ctrlChangePaymentMethodButton)
    {
        ctrlChangePaymentMethodButton = _ctrlChangePaymentMethodButton;
        return ctrlChangePaymentMethodButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCheckJournalMenu</Name>
				<Source><![CDATA[
    public FormMenuButtonControl parmCtrlCheckJournalMenu(FormMenuButtonControl _ctrlCheckJournalMenu = ctrlCheckJournalMenu)
    {
        ctrlCheckJournalMenu = _ctrlCheckJournalMenu;

        return ctrlCheckJournalMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCopyPeriodicButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlCopyPeriodicButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlCopyPeriodicButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlCopyPeriodicButton</c> class variable.
    /// </returns>
    public FormCommandButtonControl parmCtrlCopyPeriodicButton(FormCommandButtonControl _ctrlCopyPeriodicButton = ctrlCopyPeriodicButton)
    {
        ctrlCopyPeriodicButton = _ctrlCopyPeriodicButton;
        return ctrlCopyPeriodicButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCourseButton</Name>
				<Source><![CDATA[
    public FormMenuButtonControl parmCtrlCourseButton(FormMenuButtonControl _ctrlCourseButton = ctrlCourseButton)
    {
        ctrlCourseButton = _ctrlCourseButton;

        return ctrlCourseButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCreatePaymentButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlCreatePaymentButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlCreatePaymentButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlCreatePaymentButton</c> class variable.
    /// </returns>
    public FormFunctionButtonControl parmCtrlCreatePaymentButton(FormFunctionButtonControl _ctrlCreatePaymentButton = ctrlCreatePaymentButton)
    {
        ctrlCreatePaymentButton = _ctrlCreatePaymentButton;
        return ctrlCreatePaymentButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCreditInvoicing</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlCreditInvoicing(FormFunctionButtonControl _ctrlCreditInvoicing = ctrlCreditInvoicing)
    {
        ctrlCreditInvoicing = _ctrlCreditInvoicing;

        return ctrlCreditInvoicing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCurrencyConvert_RU</Name>
				<Source><![CDATA[
    public FormGroupControl parmCtrlCurrencyConvert_RU(FormGroupControl _ctrlCurrencyConvert_RU = ctrlCurrencyConvert_RU)
    {
        ctrlCurrencyConvert_RU = _ctrlCurrencyConvert_RU;

        return ctrlCurrencyConvert_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlDefermentSchedule_IN</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlDefermentSchedule_IN(FormFunctionButtonControl _ctrlDefermentSchedule = ctrlDefermentSchedule)
    {
        ctrlDefermentSchedule = _ctrlDefermentSchedule;

        return ctrlDefermentSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlDeleteTransactionsButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlDeleteTransactionsButton(FormFunctionButtonControl _ctrlDeleteTransactionsButton = ctrlDeleteTransactionsButton)
    {
        ctrlDeleteTransactionsButton = _ctrlDeleteTransactionsButton;

        return ctrlDeleteTransactionsButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlDepositSlipButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlDepositSlipButton(FormFunctionButtonControl _ctrlDepositSlipButton = ctrlDepositSlipButton)
    {
        ctrlDepositSlipButton = _ctrlDepositSlipButton;

        return ctrlDepositSlipButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlDimensionMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlDimensionMenu</c> class variable.
    /// </summary>
    /// <param name="_ctrlDimensionMenu">
    ///    The control to which the variable is pointed; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlDimensionMenu</c> class variable.
    /// </returns>
    public FormMenuButtonControl parmCtrlDimensionMenuButton(FormMenuButtonControl _ctrlDimensionMenu = ctrlDimensionMenu)
    {
        ctrlDimensionMenu = _ctrlDimensionMenu;
        return ctrlDimensionMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlECCNumber</Name>
				<Source><![CDATA[
    public FormReferenceGroupControl  parmCtrlECCNumber(FormReferenceGroupControl  _ctrlECCNumber = ctrlECCNumber)
    {
        ctrlECCNumber = _ctrlECCNumber;

        return ctrlECCNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlExchRate</Name>
				<Source><![CDATA[
    public FormRealControl parmCtrlExchRate(FormRealControl _ctrlExchRate = ctrlExchRate)
    {
        ctrlExchRate = _ctrlExchRate;

        return ctrlExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlExchRateSecond</Name>
				<Source><![CDATA[
    public FormRealControl parmCtrlExchRateSecond(FormRealControl _ctrlExchRateSecond = ctrlExchRateSecond)
    {
        ctrlExchRateSecond = _ctrlExchRateSecond;

        return ctrlExchRateSecond;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlReportingExchRate</Name>
				<Source><![CDATA[
    public FormRealControl parmCtrlReportingExchRate(FormRealControl _ctrlReportingExchRate = ctrlReportingExchRate)
    {
        ctrlReportingExchRate = _ctrlReportingExchRate;

        return ctrlReportingExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlReportingExchRateSecond</Name>
				<Source><![CDATA[
    public FormRealControl parmCtrlReportingExchRateSecond(FormRealControl _ctrlReportingExchRateSecond = ctrlReportingExchRateSecond)
    {
        ctrlReportingExchRateSecond = _ctrlReportingExchRateSecond;

        return ctrlReportingExchRateSecond;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlExciseManufacture_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlExciseManufacture_IN</c> class variable.
    /// </summary>
    /// <param name="_ctrlExciseManufacture_IN">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlExciseManufacture_IN</c> class variable.
    /// </returns>
    public FormComboBoxControl parmCtrlExciseManufacture_IN(FormComboBoxControl _ctrlExciseManufacture_IN = ctrlExciseManufacture_IN)
    {
        ctrlExciseManufacture_IN = _ctrlExciseManufacture_IN;

        return ctrlExciseManufacture_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlExciseNone_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlExciseNone_IN</c> class variable.
    /// </summary>
    /// <param name="_ctrlExciseNone_IN">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlExciseNone_IN</c> class variable.
    /// </returns>
    public FormComboBoxControl parmCtrlExciseNone_IN(FormComboBoxControl _ctrlExciseNone_IN = ctrlExciseNone_IN)
    {
        ctrlExciseNone_IN = _ctrlExciseNone_IN;

        return ctrlExciseNone_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlExciseTraders_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlExciseTraders_IN</c> class variable.
    /// </summary>
    /// <param name="_ctrlExciseTraders_IN">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlExciseTraders_IN</c> class variable.
    /// </returns>
    public FormComboBoxControl parmCtrlExciseTraders_IN(FormComboBoxControl _ctrlExciseTraders_IN = ctrlExciseTraders_IN)
    {
        ctrlExciseTraders_IN = _ctrlExciseTraders_IN;

        return ctrlExciseTraders_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlExecutionDateButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlExecutionDateButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlExecutionDateButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlExecutionDateButton</c> class variable.
    /// </returns>
    public FormFunctionButtonControl parmCtrlExecutionDateButton (FormFunctionButtonControl _ctrlExecutionDateButton = ctrlExecutionDateButton)
    {
        ctrlExecutionDateButton = _ctrlExecutionDateButton;
        return ctrlExecutionDateButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlFunctionMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlFunctionMenu</c> class variable.
    /// </summary>
    /// <param name="_ctrlFunctionMenu">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlFunctionMenu</c> class variable.
    /// </returns>
    public FormMenuButtonControl parmCtrlFunctionMenuButton(FormMenuButtonControl _ctrlFunctionMenu = ctrlFunctionMenu)
    {
        ctrlFunctionMenu = _ctrlFunctionMenu;
        return ctrlFunctionMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlFurtherPostingButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlFurtherPostingButton(FormFunctionButtonControl _ctrlFurtherPostingButton = ctrlFurtherPostingButton)
    {
        ctrlFurtherPostingButton = _ctrlFurtherPostingButton;

        return ctrlFurtherPostingButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGetTransactionsButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlGetTransactionsButton(FormFunctionButtonControl _ctrlGetTransactionsButton = ctrlGetTransactionsButton)
    {
        ctrlGetTransactionsButton = _ctrlGetTransactionsButton;

        return ctrlGetTransactionsButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlImportPaymentsButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlImportPaymentsButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlImportPaymentsButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlImportPaymentsButton</c> class variable.
    /// </returns>
    public FormFunctionButtonControl parmCtrlImportPaymentsButton(FormFunctionButtonControl _ctrlImportPaymentsButton = ctrlImportPaymentsButton)
    {
        ctrlImportPaymentsButton = _ctrlImportPaymentsButton;
        return ctrlImportPaymentsButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlJournalTextsButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlJournalTextsButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlJournalTextsButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlJournalTextsButton</c> class variable.
    /// </returns>
    public FormFunctionButtonControl parmCtrlJournalTextsButton(FormFunctionButtonControl _ctrlJournalTextsButton = ctrlJournalTextsButton)
    {
        ctrlJournalTextsButton = _ctrlJournalTextsButton;
        return ctrlJournalTextsButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlJournalTransDateSetButton_RU</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlJournalTransDateSetButton_RU(FormFunctionButtonControl _ctrlJournalTransDateSetButton = ctrlJournalTransDateSetButton)
    {
        ctrlJournalTransDateSetButton = _ctrlJournalTransDateSetButton;

        return ctrlJournalTransDateSetButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlLedgerInAccountStatementTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlLedgerInAccountStatementTotalButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlLedgerInAccountStatementTotalButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlLedgerInAccountStatementTotalButton</c> class variable.
    /// </returns>
    public FormFunctionButtonControl parmCtrlLedgerInAccountStatementTotal(FormFunctionButtonControl _ctrlLedgerInAccountStatementTotalButton = ctrlLedgerInAccountStatementTotalButton)
    {
        ctrlLedgerInAccountStatementTotalButton = _ctrlLedgerInAccountStatementTotalButton;
        return ctrlLedgerInAccountStatementTotalButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlLedgerInAccountStatementTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlLedgerInAccountStatementTransButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlLedgerInAccountStatementTransButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlLedgerInAccountStatementTransButton</c> class variable.
    /// </returns>
    public FormFunctionButtonControl parmCtrlLedgerInAccountStatementTrans(FormFunctionButtonControl _ctrlLedgerInAccountStatementTransButton = ctrlLedgerInAccountStatementTransButton)
    {
        ctrlLedgerInAccountStatementTransButton = _ctrlLedgerInAccountStatementTransButton;
        return ctrlLedgerInAccountStatementTransButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlLedgerJournalTransDailyTAccount</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlLedgerJournalTransDailyTAccount(FormFunctionButtonControl _ctrlLedgerJournalTransDailyTAccount = ctrlLedgerJournalTransDailyTAccount)
    {
        ctrlLedgerJournalTransDailyTAccount = _ctrlLedgerJournalTransDailyTAccount;

        return ctrlLedgerJournalTransDailyTAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlManECCRegistrationNumberTable</Name>
				<Source><![CDATA[
    public FormReferenceGroupControl  parmCtrlManECCRegistrationNumberTable(FormReferenceGroupControl  _ctrlManECCRegistrationNumberTable = ctrlManECCRegistrationNumberTable)
    {
        ctrlManECCRegistrationNumberTable = _ctrlManECCRegistrationNumberTable;

        return ctrlManECCRegistrationNumberTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlOffsetAccountDimensionButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlOffsetAccountDimensionButton(FormFunctionButtonControl _ctrlOffsetAccountDimensionButton = ctrlOffsetAccountDimensionButton)
    {
        ctrlOffsetAccountDimensionButton = _ctrlOffsetAccountDimensionButton;
        return ctrlOffsetAccountDimensionButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlOffsetAccountGrid</Name>
				<Source><![CDATA[
    public FormControl parmCtrlOffsetAccountGrid(FormControl _ctrlOffsetAccountGrid = ctrlOffsetAccountGrid)
    {
        ctrlOffsetAccountGrid = _ctrlOffsetAccountGrid;

        return ctrlOffsetAccountGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlOffsetAccountTab</Name>
				<Source><![CDATA[
    public FormControl parmCtrlOffsetAccountTab(FormControl _ctrlOffsetAccountTab = ctrlOffsetAccountTab)
    {
        ctrlOffsetAccountTab = _ctrlOffsetAccountTab;

        return ctrlOffsetAccountTab;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlOffsetAccountTypeGrid</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmCtrlOffsetAccountTypeGrid(FormComboBoxControl _ctrlOffsetAccountTypeGrid = ctrlOffsetAccountTypeGrid)
    {
        ctrlOffsetAccountTypeGrid = _ctrlOffsetAccountTypeGrid;

        return ctrlOffsetAccountTypeGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlOffsetAccountTypeTab</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmCtrlOffsetAccountTypeTab(FormComboBoxControl _ctrlOffsetAccountTypeTab = ctrlOffsetAccountTypeTab)
    {
        ctrlOffsetAccountTypeTab = _ctrlOffsetAccountTypeTab;

        return ctrlOffsetAccountTypeTab;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPaymentProposalButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlPaymentProposalMenu</c> class variable.
    /// </summary>
    /// <param name="_ctrlPaymentProposalMenu">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlPaymentProposalMenu</c> class variable.
    /// </returns>
    public FormMenuButtonControl parmCtrlPaymentProposalButton(FormMenuButtonControl  _ctrlPaymentProposalMenu = ctrlPaymentProposalMenu)
    {
        ctrlPaymentProposalMenu = _ctrlPaymentProposalMenu;
        return ctrlPaymentProposalMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPaymentProposalMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlPaymentProposalMenu</c> class variable.
    /// </summary>
    /// <param name="_ctrlPaymentProposalMenu">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlPaymentProposalMenu</c> class variable.
    /// </returns>
    public FormMenuButtonControl parmCtrlPaymentProposalMenuButton(FormMenuButtonControl _ctrlPaymentProposalMenu = ctrlPaymentProposalMenu)
    {
        ctrlPaymentProposalMenu = _ctrlPaymentProposalMenu;
        return ctrlPaymentProposalMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPaymentReconciliationButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlPaymentReconciliationButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlPaymentReconciliationButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlPaymentReconciliationButton</c> class variable.
    /// </returns>
    public FormMenuButtonControl parmCtrlPaymentReconciliationButton(FormMenuButtonControl _ctrlPaymentReconciliationButton = ctrlPaymentReconciliationButton)
    {
        ctrlPaymentReconciliationButton = _ctrlPaymentReconciliationButton;
        return ctrlPaymentReconciliationButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPaymentStatusMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlPaymentStatusMenu</c> class variable.
    /// </summary>
    /// <param name="_ctrlPaymentStatusMenu">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlPaymentStatusMenu</c> class variable.
    /// </returns>
    public FormMenuButtonControl parmCtrlPaymentStatusMenuButton(FormMenuButtonControl _ctrlPaymentStatusMenu = ctrlPaymentStatusMenu)
    {
        ctrlPaymentStatusMenu = _ctrlPaymentStatusMenu;
        return ctrlPaymentStatusMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPaymFeeAccountDimensionButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlPaymFeeAccountDimensionButton(FormFunctionButtonControl _ctrlPaymFeeAccountDimensionButton = ctrlPaymFeeAccountDimensionButton)
    {
        ctrlPaymFeeAccountDimensionButton = _ctrlPaymFeeAccountDimensionButton;
        return ctrlPaymFeeAccountDimensionButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPeriodicJournalMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlPeriodicJournalMenu</c> class variable.
    /// </summary>
    /// <param name="_ctrlPeriodicJournalMenu">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlPeriodicJournalMenu</c> class variable.
    /// </returns>
    public FormMenuButtonControl parmCtrlPeriodicJournalMenuButton(FormMenuButtonControl _ctrlPeriodicJournalMenu = ctrlPeriodicJournalMenu)
    {
        ctrlPeriodicJournalMenu = _ctrlPeriodicJournalMenu;
        return ctrlPeriodicJournalMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPostJournalMenu</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlPostJournalMenu</c> class variable.
    /// </summary>
    /// <param name="_ctrlPostJournalMenu">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlPostJournalMenu</c> class variable.
    /// </returns>
    public FormMenuButtonControl parmCtrlPostJournalMenu(FormMenuButtonControl _ctrlPostJournalMenu = ctrlPostJournalMenu)
    {
        ctrlPostJournalMenu = _ctrlPostJournalMenu;
        return ctrlPostJournalMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPostJournalButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlPostJournalButton(FormFunctionButtonControl _ctrlPostJournalButton = ctrlPostJournalButton)
    {
        ctrlPostJournalButton = _ctrlPostJournalButton;
        return ctrlPostJournalButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPostJournalBatchButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlPostJournalBatchButton(FormFunctionButtonControl _ctrlPostJournalBatchButton = ctrlPostJournalBatchButton)
    {
        ctrlPostJournalBatchButton = _ctrlPostJournalBatchButton;
        return ctrlPostJournalBatchButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPostAndTransferJournalButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlPostAndTransferJournalButton(FormFunctionButtonControl _ctrlPostAndTransferJournalButton = ctrlPostAndTransferJournalButton)
    {
        ctrlPostAndTransferJournalButton = _ctrlPostAndTransferJournalButton;
        return ctrlPostAndTransferJournalButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmctrlRecipientName</Name>
				<Source><![CDATA[
    public FormStringControl parmctrlRecipientName(FormStringControl _ctrlRecipientName = ctrlRecipientName)
    {
        ctrlRecipientName = _ctrlRecipientName;

        return ctrlRecipientName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlRejectButton</Name>
				<Source><![CDATA[
    public FormButtonControl parmCtrlRejectButton(FormButtonControl _ctrlRejectButton = ctrlRejectButton)
    {
        ctrlRejectButton = _ctrlRejectButton;

        return ctrlRejectButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlReportAsReadyButton</Name>
				<Source><![CDATA[
    public FormButtonControl parmCtrlReportAsReadyButton(FormButtonControl _ctrlReportAsReadyButton = ctrlReportAsReadyButton)
    {
        ctrlReportAsReadyButton = _ctrlReportAsReadyButton;

        return ctrlReportAsReadyButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlSalesTaxMenu</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlSalesTaxMenu</c> class variable.
    /// </summary>
    /// <param name="_ctrlSalesTaxMenu">
    ///    The control to point the variable to.
    /// </param>
    /// <returns>
    ///    The <c>ctrlSalesTaxMenu</c> class variable.
    /// </returns>
    public FormFunctionButtonControl parmCtrlSalesTaxMenu(FormFunctionButtonControl _ctrlSalesTaxMenu = ctrlSalesTaxMenu)
    {
        ctrlSalesTaxMenu = _ctrlSalesTaxMenu;
        return ctrlSalesTaxMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlSaveVoucherTemplateButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlSaveVoucherTemplateButton</c> class field.
    /// </summary>
    /// <param name="_ctrlSaveVoucherTemplateButton">
    ///    The control to which to point the field; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlSaveVoucherTemplateButton</c> class field.
    /// </returns>
    public FormFunctionButtonControl parmCtrlSaveVoucherTemplateButton(FormFunctionButtonControl _ctrlSaveVoucherTemplateButton = ctrlSaveVoucherTemplateButton)
    {
        ctrlSaveVoucherTemplateButton = _ctrlSaveVoucherTemplateButton;

        return ctrlSaveVoucherTemplateButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlSelectSettledNoteButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlSelectSettledNoteButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlSelectSettledNoteButton">
    ///    The control to which to point the variable; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlSelectSettledNoteButton</c> class variable.
    /// </returns>
    public FormButtonControl parmCtrlSelectSettledNoteButton(FormButtonControl _ctrlSelectSettledNoteButton = ctrlSelectSettledNoteButton)
    {
        ctrlSelectSettledNoteButton = _ctrlSelectSettledNoteButton;
        return ctrlSelectSettledNoteButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlSelectVoucherTemplateButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlSelectVoucherTemplateButton</c> class field.
    /// </summary>
    /// <param name="_ctrlSelectVoucherTemplateButton">
    ///    The control to which to point the field.
    /// </param>
    /// <returns>
    ///    The <c>ctrlSelectVoucherTemplateButton</c> class field.
    /// </returns>
    public FormFunctionButtonControl parmCtrlSelectVoucherTemplateButton(FormFunctionButtonControl _ctrlSelectVoucherTemplateButton = ctrlSelectVoucherTemplateButton)
    {
        ctrlSelectVoucherTemplateButton = _ctrlSelectVoucherTemplateButton;

        return ctrlSelectVoucherTemplateButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlSettlementButton</Name>
				<Source><![CDATA[
    public FormButtonControl parmCtrlSettlementButton(FormButtonControl _ctrlSettlementButton = ctrlSettlementButton)
    {
        ctrlSettlementButton = _ctrlSettlementButton;

        return ctrlSettlementButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlSplitPostingButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlSplitPostingButton(FormFunctionButtonControl _ctrlSplitPostingButton = ctrlSplitPostingButton)
    {
        ctrlSplitPostingButton = _ctrlSplitPostingButton;

        return ctrlSplitPostingButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTradeBLWIChangeCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlTradeBLWIChangeCodeButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlTradeBLWIChangeCodeButton">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlTradeBLWIChangeCodeButton</c> class variable.
    /// </returns>
    public FormFunctionButtonControl parmCtrlTradeBLWIChangeCode(FormFunctionButtonControl _ctrlTradeBLWIChangeCodeButton = ctrlTradeBLWIChangeCodeButton)
    {
        ctrlTradeBLWIChangeCodeButton = _ctrlTradeBLWIChangeCodeButton;
        return ctrlTradeBLWIChangeCodeButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTraderECCRegistrationNumberTable</Name>
				<Source><![CDATA[
    public FormReferenceGroupControl parmCtrlTraderECCRegistrationNumberTable(FormReferenceGroupControl  _ctrlTraderECCRegistrationNumberTable = ctrlTraderECCRegistrationNumberTable)
    {
        ctrlTraderECCRegistrationNumberTable = _ctrlTraderECCRegistrationNumberTable;

        return ctrlTraderECCRegistrationNumberTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTransDateGrid</Name>
				<Source><![CDATA[
    public FormDateControl parmCtrlTransDateGrid(FormDateControl _ctrlTransDateGrid = ctrlTransDateGrid)
    {
        ctrlTransDateGrid = _ctrlTransDateGrid;

        return ctrlTransDateGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTransDateTab</Name>
				<Source><![CDATA[
    public FormDateControl parmCtrlTransDateTab(FormDateControl _ctrlTransDate = ctrlTransDate)
    {
        ctrlTransDate = _ctrlTransDate;

        return ctrlTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTriangulation</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmCtrlTriangulation(FormCheckBoxControl _ctrlTriangulation = ctrlTriangulation)
    {
        ctrlTriangulation = _ctrlTriangulation;

        return ctrlTriangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlVoucherTransButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlVoucherTransButton(FormFunctionButtonControl _ctrlVoucherTransButton = ctrlVoucherTransButton)
    {
        ctrlVoucherTransButton = _ctrlVoucherTransButton;

        return ctrlVoucherTransButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlErrorExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a <c>FormControl</c> for the error exists image.
    /// </summary>
    /// <param name = "_ctrlErrorExists">The <c>FormControl</c> for the error exists image; optional.</param>
    /// <returns>The <c>FormControl</c> for the error exists image.</returns>
    public FormControl parmCtrlErrorExists(FormControl _ctrlErrorExists = ctrlErrorExists)
    {
        ctrlErrorExists = _ctrlErrorExists;

        return ctrlErrorExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefermentScheduleEnable_IN</Name>
				<Source><![CDATA[
    NoYes parmDefermentScheduleEnable_IN(NoYes _vatGoodsType = NoYes::No)
    {
        vatGoodsType = _vatGoodsType;

        return vatGoodsType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureSource_RU</Name>
				<Source><![CDATA[
    public FactureSource_RU parmFactureSource_RU(FactureSource_RU _factureSource = factureSource)
    {
        factureSource = _factureSource;
        return factureSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlMassTransactionReversalButton</Name>
				<Source><![CDATA[
    public FormControl parmCtrlMassTransactionReversalButton(FormControl _massTransactionReversalButton = ctrlMassTransactionReversalButton)
    {
        ctrlMassTransactionReversalButton = _massTransactionReversalButton;
        return ctrlMassTransactionReversalButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlMassTransactionReversalFailuresButton</Name>
				<Source><![CDATA[
    public FormControl parmCtrlMassTransactionReversalFailuresButton(FormControl _massTransactionReversalFailuresButton = ctrlMassTransactionReversalFailuresButton)
    {
        ctrlMassTransactionReversalFailuresButton = _massTransactionReversalFailuresButton;
        return ctrlMassTransactionReversalFailuresButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsActiveWFApprovalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the journal is an active workflow approvals document.
    /// </summary>
    /// <returns>
    ///    true if the journal is an active workflow approvals document; otherwise, false.
    /// </returns>
    public boolean parmIsActiveWFApprovalDocument()
    {
        return isActiveWFApprovalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDisableDataSourceForWFApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the data source should be disabled for the current workflow state.
    /// </summary>
    /// <returns>
    ///    true if the data source should be disabled; otherwise, false.
    /// </returns>
    public boolean parmIsDisableDataSourceForWFApproval()
    {
        return isDatasourceDisabledForWFApproval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPayStatusButtonAvailForWFApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the Payment Status button can be enabled.
    /// </summary>
    /// <returns>
    ///    true if the Payment Status button on the journal can be enabled when in the workflow approval mode;
    ///    otherwise, false.
    /// </returns>
    public boolean parmIsPayStatusButtonAvailForWFApproval()
    {
        return isPayStatusButtonAvailForWFApproval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsProcessingPaymentOnAprovedJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the user can process payments for a workflow approvals approved journal.
    /// </summary>
    /// <returns>
    ///    true if the journal is non-editable in a workflow approvals approved state and the user has chosen
    ///    to process payments; otherwise, false.
    /// </returns>
    public boolean parmIsProcessingPaymentOnAprovedJournal()
    {
        return isProcessingPaymentOnAprovedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsUIElementWFApprovalEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a User Interface (UI) element can be enabled based on the current workflow state.
    /// </summary>
    /// <returns>
    ///    true if the UI element is to be enabled; otherwise, false.
    /// </returns>
    public boolean parmIsUIElementWFApprovalEnabled()
    {
        return isUIElementWFApprovalEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRCtrlDeductionButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or sets a <c>FormFunctionButtonControl</c> for the deduction button button control.
    /// </summary>
    /// <param name="_ctrlDeductionButton">
    ///     The <c>FormFunctionButtonControl</c> for the deduction button; optional.
    /// </param>
    /// <returns>
    ///     The <c>FormFunctionButtonControl</c> for the deduction button.
    /// </returns>
    public FormFunctionButtonControl parmMCRCtrlDeductionButton(FormFunctionButtonControl _ctrlDeductionButton = ctrlDeductionButton)
    {
        ctrlDeductionButton = _ctrlDeductionButton;
        return ctrlDeductionButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckPostResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a <c>LedgerJournalCheckPostResults</c> for the check post results instance.
    /// </summary>
    /// <param name = "_checkPostResults">The <c>LedgerJournalCheckPostResults</c> instance.</param>
    /// <returns>The <c>LedgerJournalCheckPostResults</c> instance.</returns>
    public LedgerJournalCheckPostResults parmCheckPostResults(LedgerJournalCheckPostResults _checkPostResults = checkPostResults)
    {
        // If the local variable is not set then fetch the results from LedgerJournalEngine.
        if (!_checkPostResults)
        {
            checkPostResults = ledgerJournalEngine.getPostingResults();
        }
        // If a value was passed into the method then set the local variable for later use.
        else if (!prmisDefault(_checkPostResults))
        {
            checkPostResults = _checkPostResults;
        }

        return checkPostResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemTable</Name>
				<Source><![CDATA[
    public WorkflowWorkItemTable parmWorkflowWorkItemTable()
    {
        LedgerJournalFormTable ledgerJournalFormTable = this.getJournalFormTable();

        return ledgerJournalFormTable.parmWorkflowWorkItemTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the database search for journal lines.
    /// </summary>
    public void researchJournalLines()
    {
        LedgerJournalTable ledgerJournalTable = formRunObject.ledgerJournalTable();

        ledgerJournalEngine.clearVoucher();
        ledgerJournalTable.JournalTotalDebit    = 0;
        ledgerJournalTable.JournalTotalCredit   = 0;
        ledgerJournalTable.JournalTotalDebitReportingCurrency = 0;
        ledgerJournalTable.JournalTotalCreditReportingCurrency = 0;
        ledgerJournalEngine.newJournalActive(ledgerJournalTable);
        journalTrans_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountDimensionButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the button for the financial dimension account of the lines form is enabled.
    /// </summary>
    protected void setAccountDimensionButtonEnable()
    {
        boolean enabled = true;

        if (ctrlAccountDimensionButton != null)
        {
            enabled = enabled && (ledgerJournalTrans.AccountType != LedgerJournalACType::Ledger);

            // Comment to prevent method from reverting back to SYS

            ctrlAccountDimensionButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccrualButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the accrual button of the lines form.
    /// </summary>
    protected void setAccrualButtonEnabled()
    {
        boolean enabled;

        if (ctrlAccrualButton)
        {
            enabled = this.isJournalEnabled() && ledgerJournalTrans.Company == curext();

            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlAccrualButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBalanceControlButtonEnabled</Name>
				<Source><![CDATA[
    protected void setBalanceControlButtonEnabled()
    {
        if (ctrlBalanceControlButton)
        {
            ctrlBalanceControlButton.enabled(this.isJournalEnabled());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCancelCashDueAnnounceButtonEnabled_RU</Name>
				<Source><![CDATA[
    protected void setCancelCashDueAnnounceButtonEnabled_RU()
    {
        boolean enabled = ledgerJournalTrans.AnnouncementNum_RU && ! ledgerJournalEngine.posted();

        if (ctrlCancelCashDueAnnounceButton_RU)
        {
            ctrlCancelCashDueAnnounceButton_RU.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashDueAnnouncementButtonEnabled_RU</Name>
				<Source><![CDATA[
    public void setCashDueAnnouncementButtonEnabled_RU()
    {
        boolean          enabled              = ledgerJournalTrans.AnnouncementNum_RU || ! ledgerJournalEngine.posted();
        JournalFormTable tempJournalFormTable = this.getJournalFormTable();

        if (ctrlCashDueAnnouncementButton_RU)
        {
            enabled = enabled && ((ledgerJournalTrans.AccountType       == LedgerJournalACType::Bank) ^
                                  (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank));

            enabled = enabled && BankTransType::find(ledgerJournalTrans.BankTransType).CreateCashDueAnnouncement_RU == NoYes::Yes;

            if (tempJournalFormTable.journalTypeId() == LedgerJournalType::RCash)
            {
                enabled = enabled && LedgerJournalTrans_RCash::find(ledgerJournalTrans.RecId).TransStatus == RCashTransStatus::Approved;
            }

            ctrlCashDueAnnouncementButton_RU.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCFDIWithholdingTaxFieldEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the CFDI Withholding tax field.
    /// </summary>
    public void setCFDIWithholdingTaxFieldEnabled(FormDataSource _formDataSoure)
    {
        if (_formDataSoure.table() == tableNum(LedgerJournalTrans_W))
        {
            LedgerJournalTrans_W ledgerJournalTrans_W = _formDataSoure.cursor();
            CFDIWithholdingType_MX::complementFldEnabledByWithholdingType(ledgerJournalTrans_W.WithholdingTypeCode_MX, tableFieldgroupStr(LedgerJournalTrans_W, CFDIWithholdingTax_MX), _formDataSoure);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChallanInformationButtonEnabled_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets challange information button enabled.
    /// </summary>
    protected void setChallanInformationButtonEnabled_IN()
    {
        boolean enabled = (journalTableData.blockLevel() != JournalBlockLevel::System)
                           && ledgerJournalEngine.posted();

        if (ctrlChallanInformationButton)
        {
            if (ctrlChallanInformationButton && this.enableChallanInformation_IN())
            {
                ctrlChallanInformationButton.enabled(enabled);
            }
            else
            {
                ctrlChallanInformationButton.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckMenuButtonEnabled</Name>
				<Source><![CDATA[
    protected void setCheckMenuButtonEnabled()
    {
        boolean enabled = journalTableData.blockLevel() != JournalBlockLevel::System && ! ledgerJournalEngine.posted();

        if (ctrlCheckJournalMenu)
        {
            ctrlCheckJournalMenu.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCopyPeriodicButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the period journal button on the lines form.
    /// </summary>
    protected void setCopyPeriodicButtonEnable()
    {
        boolean enabled;

        if (ctrlCopyPeriodicButton)
        {
            enabled = this.isJournalEnabled();

            enabled = enabled && journalTrans_ds.allowCreate();

            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }
            else
            {
                enabled = enabled && (!ledgerJournalEngine.approved() || !ledgerJournalEngine.approveActive());
            }

            ctrlCopyPeriodicButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCourseButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the course (original approvals) button.
    /// </summary>
    protected void setCourseButtonEnable()
    {
        if (!ctrlCourseButton)
        {
            return;
        }

        if (ledgerJournalEngine.parmLedgerJournalTable().isInWFApprovalProcess())
        {
            // The journal is in workflow approvals, so disable the old approvals button.
            ctrlCourseButton.enabled(false);
        }
        else
        {
            if (ledgerJournalEngine.approveActive())
            {
                ctrlCourseButton.visible(true);
                ctrlCourseButton.enabled(!ledgerJournalEngine.posted());
            }
            else
            {
                ctrlCourseButton.visible(false);
                ctrlCourseButton.enabled(false);
            }

            if (ctrlCourseButton.enabled())
            {
                if (ledgerJournalEngine.reportedAsReady())
                {
                    if (ctrlReportAsReadyButton)
                    {
                        ctrlReportAsReadyButton.enabled(false);
                    }

                    if (ctrlApproveButton)
                    {
                        ctrlApproveButton.enabled(!ledgerJournalEngine.approved() || ledgerJournalEngine.rejected());
                    }

                    if (ctrlRejectButton)
                    {
                        ctrlRejectButton.enabled(!ledgerJournalEngine.rejected());
                    }
                }
                else
                {
                    if (ctrlReportAsReadyButton)
                    {
                        ctrlReportAsReadyButton.enabled(true);
                    }

                    if (ctrlApproveButton)
                    {
                        ctrlApproveButton.enabled(false);
                    }

                    if (ctrlApproveButton)
                    {
                        ctrlRejectButton.enabled(false);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCreditInvoicingButtonEnabled</Name>
				<Source><![CDATA[
    private void setCreditInvoicingButtonEnabled(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (ctrlCreditInvoicing != null)
        {
            switch (_ledgerJournalTrans.AccountType)
            {
                case LedgerJournalACType::Cust:
                    ctrlCreditInvoicing.visible(CustVendCreditInvoicingTable::useCreditInvoicingReporting());

                    ctrlCreditInvoicing.enabled(
                        (_ledgerJournalTrans.AmountCurCredit > 0 
                         || _ledgerJournalTrans.AmountCurDebit < 0
                         || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])) // allow debit-notes for Italy
                        && _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Project);

                    break;

                case LedgerJournalACType::Vend:
                    boolean isCreditInvoiceingForVendorInvoicesFeatureEnabled = FeatureStateProvider::isFeatureEnabled(CreditInvoicingForVendorInvoicesFeature::instance());
                    ctrlCreditInvoicing.visible(isCreditInvoiceingForVendorInvoicesFeatureEnabled
                        || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES, #isoSE, #isoPL, #isoIT]));

                    ctrlCreditInvoicing.enabled(
                        (isCreditInvoiceingForVendorInvoicesFeatureEnabled
                         || _ledgerJournalTrans.AmountCurDebit > 0
                         || _ledgerJournalTrans.AmountCurCredit < 0
                         || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])) // allow debit-notes for Italy
                        && _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Project);

                    break;

                default:
                    ctrlCreditInvoicing.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCtrlLedgerJournalTransDailyTAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the control ledger journal transaction daily account.
    /// </summary>
    protected void setCtrlLedgerJournalTransDailyTAccount()
    {
        if (ctrlLedgerJournalTransDailyTAccount)
        {
            ctrlLedgerJournalTransDailyTAccount.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefermentScheduleEnabled_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets deferment schedule enabled.
    /// </summary>
    protected void setDefermentScheduleEnabled_IN()
    {
        boolean enabled = journalTableData.blockLevel() != JournalBlockLevel::System && ledgerJournalEngine.posted();

        if (ctrlDefermentSchedule)
        {
            if (!enabled)
            {
                ctrlDefermentSchedule.enabled(enabled);
            }
            else
            {
                if (vatGoodsType)
                {
                    ctrlDefermentSchedule.enabled(enabled);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeleteTransactionsButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the delete transactions button on the lines form.
    /// </summary>
    protected void setDeleteTransactionsButtonEnabled()
    {
        boolean enabled;

        if (ctrlDeleteTransactionsButton)
        {
            enabled = this.isJournalEnabled();

            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlDeleteTransactionsButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDelTransButtonEnabledForJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the enabled state for the delete transactions button based on the payment status of a journal
    ///    line.
    /// </summary>
    /// <param name="_paymentStatus">
    ///    The payment status of the journal line.
    /// </param>
    /// <remarks>
    ///    This method is typically called from the <c>active</c> method on the data source of the journal
    ///    that has a delete transactions button.
    /// </remarks>
    public void setDelTransButtonEnabledForJournalLine(CustVendPaymStatus _paymentStatus)
    {
        boolean applyDeleteJournalLinesEnabling;

        // Initialize applyDeleteJournalLinesEnabling to the current state of the button (if defined)
        applyDeleteJournalLinesEnabling = ctrlDeleteTransactionsButton ? ctrlDeleteTransactionsButton.enabled() : true;

        if (isActiveWFApprovalDocument)
        {
            if (isProcessingPaymentOnAprovedJournal)
            {
                // Prior logic has disabled the field, and it needs to remain disabled.
                applyDeleteJournalLinesEnabling = false;
            }
            else
            {
                if (!isUIElementWFApprovalEnabled)
                {
                    // Prior logic has disabled the field, and it needs to remain disabled.
                    applyDeleteJournalLinesEnabling = false;
                }
            }
        }

        if (applyDeleteJournalLinesEnabling)
        {
            if (_paymentStatus == CustVendPaymStatus::Sent)
            {
                ctrlDeleteTransactionsButton.enabled(false);
            }
            else
            {
                ctrlDeleteTransactionsButton.enabled(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepositSlipButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the deposit slip button on the lines form.
    /// </summary>
    protected void setDepositSlipButtonEnabled()
    {
        boolean enabled;

        if (ctrlDepositSlipButton)
        {
            enabled = ledgerJournalEngine.posted();

            ctrlDepositSlipButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExchRateEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setExchRateEnabled()
    {
        if (ctrlExchRate)
        {
            ctrlExchRate.enabled(this.mayCurrencyBeModified());
        }

        if (ctrlExchRateSecond)
        {
            ctrlExchRateSecond.enabled(this.maySecondaryCurrencyBeModified());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportingExchRateEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the reporting currency exchange rate controls.
    /// </summary>    
    protected void setReportingExchRateEnabled()
    {
        if (Ledger::reportingCurrency())
        {
            ExchangeRateCalculation exchangeRateCalculation = ExchangeRateCalculation::newExchangeDate(Ledger::reportingCurrencyExchangeRateType(),
                                                                                            ledgerJournalTrans.CurrencyCode,
                                                                                            Ledger::reportingCurrency(),
                                                                                            ledgerJournalTrans.TransDate);

            // Checks ledger reporting and accounting currency are not same and document currency not same as ledger reporting currency.
            boolean canEditReportingCurrencyExchangeRate = ledgerJournalTrans.LedgerJournalReportingCurrencyExchangeRates::canEditReportingCurrencyExchangeRate();

            if (ctrlReportingExchRate)
            {
                ctrlReportingExchRate.enabled(Ledger::isReportingCurrencyDefined());
                ctrlReportingExchRate.allowEdit(canEditReportingCurrencyExchangeRate);
            }

            if (ctrlReportingExchRateSecond)
            {
                ctrlReportingExchRateSecond.enabled(Ledger::isReportingCurrencyDefined());
                ctrlReportingExchRateSecond.allowEdit(canEditReportingCurrencyExchangeRate);
            }
        }
        else
        {
            if (ctrlReportingExchRate)
            {
                ctrlReportingExchRate.enabled(false);
            }

            if (ctrlReportingExchRateSecond)
            {
                ctrlReportingExchRateSecond.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFunctionMenuButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the function button on the lines form
    /// </summary>
    /// <returns>
    ///    true if the function button is enabled; otherwise, false.
    /// </returns>
    protected boolean setFunctionMenuButtonEnabled()
    {
        boolean enabled = true;

        if (ctrlFunctionMenu)
        {
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlFunctionMenu.enabled(enabled);
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFurtherPostingButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the additional posting button on the lines form.
    /// </summary>
    protected void setFurtherPostingButtonEnable()
    {
        boolean enabled;

        if (ctrlFurtherPostingButton)
        {
            enabled = this.isJournalEnabled();

            enabled = enabled && journalTrans_ds.allowEdit();
            enabled = enabled && (!ledgerJournalEngine.approved() || !ledgerJournalEngine.approveActive());

            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlFurtherPostingButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGetTransactionsButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the get transactions button on the lines form.
    /// </summary>
    protected void setGetTransactionsButtonEnable()
    {
        boolean enabled;
        LedgerJournalTable ledgerJournalTable = ledgerJournalEngine.parmLedgerJournalTable();

        if (ctrlGetTransactionsButton)
        {
            enabled = this.isJournalEnabled();

            enabled = enabled && journalTrans_ds.allowCreate();

            if (ledgerJournalTable.isInWFApprovalProcess())
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }
            else
            {
                enabled = enabled && (!ledgerJournalEngine.approved() || !ledgerJournalEngine.approveActive());
            }

            ctrlGetTransactionsButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalTextsButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the journal texts button on the lines form.
    /// </summary>
    protected void setJournalTextsButtonEnabled()
    {
        boolean enabled = true;

        if (ctrlJournalTextsButton)
        {
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlJournalTextsButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalTransDateSetButtonEnabled_RU</Name>
				<Source><![CDATA[
    protected void setJournalTransDateSetButtonEnabled_RU()
    {
        if (ctrlJournalTransDateSetButton)
        {
            ctrlJournalTransDateSetButton.enabled(this.isJournalEnabled());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerInAcctStatTotalButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the lines form's functions->import account statements (totals) button.
    /// </summary>
    protected void setLedgerInAcctStatTotalButtonEnable()
    {
        boolean enabled = true;

        if (ctrlLedgerInAccountStatementTotalButton)
        {
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlLedgerInAccountStatementTotalButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerInAcctStatTranButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the lines form's functions->import account statements (trans) button.
    /// </summary>
    protected void setLedgerInAcctStatTranButtonEnable()
    {
        boolean enabled = true;

        if (ctrlLedgerInAccountStatementTransButton)
        {
            if (isActiveWFApprovalDocument)
            {
                enabled =  enabled && isUIElementWFApprovalEnabled;
            }

            ctrlLedgerInAccountStatementTransButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOffsetAccountDimensionButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the financial dimension offset account button of the lines form is enabled.
    /// </summary>
    protected void setOffsetAccountDimensionButtonEnable()
    {
        boolean enabled = true;

        if (ctrlOffsetAccountDimensionButton != null)
        {
            enabled = enabled && (ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Ledger);
            enabled = enabled && (ledgerJournalTrans.parmOffsetLedgerDimension() != 0);

            // Comment to prevent method from reverting back to SYS

            ctrlOffsetAccountDimensionButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymFeeAccountDimensionButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the financial dimension payment fee account button of the lines form is enabled.
    /// </summary>
    /// <param name="_custVendPaymJournalFee">
    /// The current <c>CustVendPaymJournalFee</c> record.
    /// </param>
    protected void setPaymFeeAccountDimensionButtonEnable(CustVendPaymJournalFee _custVendPaymJournalFee)
    {
        boolean enabled = true;

        if (ctrlPaymFeeAccountDimensionButton != null)
        {
            if (_custVendPaymJournalFee == null)
            {
                enabled = false;
            }
            else
            {
                enabled = enabled && (_custVendPaymJournalFee.LedgerJournalACType != LedgerJournalACType::Ledger);
                enabled = enabled && (_custVendPaymJournalFee.FeeId != '');
                enabled = enabled && (!_custVendPaymJournalFee.isCompanyEqualToLedgerJournalTransCompany(ledgerJournalTrans));
            }

            ctrlPaymFeeAccountDimensionButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodicJournalMenuButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the periodic journal menu button on the lines form.
    /// </summary>
    /// <returns>
    ///    true if the button is enabled; otherwise, false.
    /// </returns>
    protected boolean setPeriodicJournalMenuButtonEnabled()
    {
        boolean enabled = true;

        if (ctrlPeriodicJournalMenu)
        {
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlPeriodicJournalMenu.enabled(enabled);
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormViewEditMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Enables or disables the lines form.
    /// </summary>
    protected void setFormViewEditMode()
    {
        boolean enabled = this.isJournalEnabled();

        ViewEditMode viewEditMode = enabled ? ViewEditMode::Edit : ViewEditMode::View;

        formRun.viewEditModeHelper().setViewEditMode(viewEditMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostMenuButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the post button on the lines form.
    /// </summary>
    protected void setPostMenuButtonEnabled()
    {
        LedgerJournalTable ledgerJournalTable = ledgerJournalEngine.parmLedgerJournalTable();
        boolean enabled = this.isJournalEnabled();

        if (ledgerJournalTable.isInWFApprovalProcess())
        {
            enabled = enabled && ledgerJournalTable.isWFApprovalApproved();
        }
        else
        {
            enabled = enabled && ledgerJournalEngine.approved();
        }

        if (ctrlPostJournalMenu)
        {
            ctrlPostJournalMenu.enabled(enabled);
        }
        else
        {
            if (ctrlPostJournalButton)
            {
                ctrlPostJournalButton.enabled(enabled);

                if (ctrlPostJournalBatchButton)
                {
                    ctrlPostJournalBatchButton.enabled(enabled);
                }
            }

            if (ctrlPostAndTransferJournalButton)
            {
                ctrlPostAndTransferJournalButton.enabled(enabled);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTaxMenuButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the sales tax button on the lines form.
    /// </summary>
    protected void setSalesTaxMenuButtonEnable()
    {
        boolean enabled = true;

        if (ctrlSalesTaxMenu)
        {
            ctrlSalesTaxMenu.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSaveVoucherTemplateButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the Save voucher template menu item on the lines form.
    /// </summary>
    protected void setSaveVoucherTemplateButtonEnabled()
    {
        if (ctrlSaveVoucherTemplateButton)
        {
            ctrlSaveVoucherTemplateButton.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectVoucherTemplateButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the Select voucher template menu item on the lines form.
    /// </summary>
    protected void setSelectVoucherTemplateButtonEnabled()
    {
        boolean enabled;

        if (ctrlSelectVoucherTemplateButton)
        {
            enabled = this.isJournalEnabled();

            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlSelectVoucherTemplateButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettlementButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the lines form's function->settlement button.
    /// </summary>
    protected void setSettlementButtonEnable()
    {
        boolean enabled;

        if (ctrlSettlementButton)
        {
            enabled = this.isJournalEnabled();

            if (enabled && !ledgerJournalTrans.isCompanyIntercompany())
            {
                // Transaction is not intercompany - settlement button is enabled
                enabled = enabled;
            }
            else if (enabled && ledgerJournalTrans.isCompanyIntercompany() && isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
            {
                // Transaction is intercompany and configuration key is enabled - settlement button is enabled
                enabled = enabled;
            }
            else
            {
                enabled = false;
            }

            enabled = enabled && (ledgerJournalTrans.parmLedgerDimension());
            enabled = enabled && ledgerJournalTrans.BankPromissoryNoteNum == '';
            enabled = enabled && (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust   ||
                                  ledgerJournalTrans.AccountType == LedgerJournalACType::Vend);
            enabled = enabled && ledgerJournalTrans.ledgerJournalTable().ProtestSettledBill == NoYes::No;
            enabled = enabled && ledgerJournalTrans.allowSettlement();

            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }
            else
            {
                enabled = enabled && (!ledgerJournalEngine.approved() || !ledgerJournalEngine.approveActive());
            }

            ctrlSettlementButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSplitPostingButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the lines form's functions->breakdown of voucher button.
    /// </summary>
    protected void setSplitPostingButtonEnable()
    {
        boolean enabled;
        LedgerJournalTable ledgerJournalTable = ledgerJournalEngine.parmLedgerJournalTable();
        ;

        if (ctrlSplitPostingButton)
        {
            enabled = this.isJournalEnabled();

            enabled = enabled && journalTrans_ds.allowCreate();
            enabled = enabled && journalTrans_ds.allowEdit();

            if (ledgerJournalTable.isInWFApprovalProcess())
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }
            else
            {
                enabled = enabled && (!ledgerJournalEngine.approved() || !ledgerJournalEngine.approveActive());
            }

            ctrlSplitPostingButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTradeBLWIChangeCodeButtonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the change BLWI code button on the lines form.
    /// </summary>
    protected void setTradeBLWIChangeCodeButtonEnable()
    {
        boolean enabled = true;

        if (ctrlTradeBLWIChangeCodeButton)
        {
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlTradeBLWIChangeCodeButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherTransButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setVoucherTransButtonEnabled()
    {
        boolean enabled = journalTableData.blockLevel() != JournalBlockLevel::System && ledgerJournalEngine.posted();

        if (ctrlVoucherTransButton)
        {
            ctrlVoucherTransButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMassTransactionReversalButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of mass reversal buttons on journal lines forms.
    /// </summary>
    internal void setMassTransactionReversalButtonVisibility()
    {
        LedgerJournalTable ledgerJournalTable = ledgerJournalEngine.parmLedgerJournalTable();

        boolean shouldMassReversalButtonsBeVisible = (ledgerJournalTable.Posted == NoYes::Yes);
    
        ctrlMassTransactionReversalButton.visible(shouldMassReversalButtonsBeVisible);
        ctrlMassTransactionReversalFailuresButton.visible(shouldMassReversalButtonsBeVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form state after journal validation is complete.
    /// </summary>
    public void validateJournalPost()
    {
        checkPostResults = ledgerJournalEngine.getPostingResults();

        if (checkPostResults && ctrlErrorExists)
        {
            ctrlErrorExists.visible(checkPostResults.errorInJournalLine());
        }

        // Research is needed to account for record updates during the validation process.
        journalTrans_ds.research(true);

        if (formRun is LedgerIJournalFormRefreshable)
        {
            LedgerIJournalFormRefreshable callingForm = formRun.args().caller() as LedgerIJournalFormRefreshable;

            if (callingForm != null)
            {
                callingForm.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeOfficeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    public void customizeOfficeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        LedgerJournalFormTable ledgerJournalFormTable = this.getJournalFormTable() as LedgerJournalFormTable;

        if (ledgerJournalFormTable)
        {
            ledgerJournalFormTable.customizeOfficeMenuOptions(_menuOptions);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOpenExcelTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform initialization for opening journal excel template.
    /// </summary>
    public void initializeOpenExcelTemplate()
    {
        LedgerJournalFormTable ledgerJournalFormTable = this.getJournalFormTable() as LedgerJournalFormTable;

        if (ledgerJournalFormTable)
        {
            ledgerJournalFormTable.initializeOpenExcelTemplate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGSTTransactionIdButton_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>ctrlGSTTransactionIdButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlGSTTransactionIdButton">
    /// The control to point the variable to; optional.
    /// </param>
    /// <returns>
    /// The <c>_ctrlGSTTransactionIdButton</c> class variable.
    /// </returns>
    // <GIN>
    public FormFunctionButtonControl parmCtrlGSTTransactionIdButton_IN(FormFunctionButtonControl _ctrlGSTTransactionIdButton = ctrlGSTTransactionIdButton)
    {
        ctrlGSTTransactionIdButton = _ctrlGSTTransactionIdButton;

        return ctrlGSTTransactionIdButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGSTTransactionIdButtonEnabled_IN</Name>
				<Source><![CDATA[
    // </GIN>

    /// <summary>
    /// Enables or disables the TransactionIdInformation_IN button.
    /// </summary>
    // <GIN>
    protected void setGSTTransactionIdButtonEnabled_IN()
    {
        if (ctrlGSTTransactionIdButton)
        {
            ctrlGSTTransactionIdButton.enabled(journalTableData.blockLevel() != JournalBlockLevel::System
                                            && ledgerJournalEngine.posted());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlUpdateGSTDetailsButton_IN</Name>
				<Source><![CDATA[
    // </GIN>

    /// <summary>
    /// Gets or sets the <c>ctrlUpdatedGSTDetailsButton</c> class variable.
    /// </summary>
    /// <param name="_ctrlUpdatedGSTDetailsButton">
    /// The control to point the variable to; optional.
    /// </param>
    /// <returns>
    /// The <c>ctrlUpdatedGSTDetailsButton</c> class variable.
    /// </returns>
    // <GIN>
    public FormFunctionButtonControl parmCtrlUpdateGSTDetailsButton_IN(FormFunctionButtonControl _ctrlUpdatedGSTDetailsButton = ctrlUpdatedGSTDetailsButton)
    {
        ctrlUpdatedGSTDetailsButton = _ctrlUpdatedGSTDetailsButton;

        return ctrlUpdatedGSTDetailsButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpdateGSTDetailsButtonEnabled_IN</Name>
				<Source><![CDATA[
    // </GIN>

    /// <summary>
    /// Sets update GST details button enabled.
    /// </summary>
    // <GIN>
    protected void setUpdateGSTDetailsButtonEnabled_IN()
    {
        boolean enabled = (journalTableData.blockLevel() != JournalBlockLevel::System)
                       && ledgerJournalEngine.posted();

        if (ctrlUpdatedGSTDetailsButton)
        {
            if (ctrlUpdatedGSTDetailsButton && this.enableChallanInformation_IN())
            {
                ctrlUpdatedGSTDetailsButton.enabled(enabled);
            }
            else
            {
                ctrlUpdatedGSTDetailsButton.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxGroupAllowEditInTaxIntegration</Name>
				<Source><![CDATA[
    // </GIN>

    /// <summary>
    /// Enable or disable the tax group fields for tax integration. 
    /// </summary>
    /// <param name = "_isTaxIntegrationEnabledForJournalType">Jouranl type</param>
    /// <param name = "_isOverrideSalesTax">Enable or disable for the Override Sales Tax</param>
    internal void updateTaxGroupAllowEditInTaxIntegration(boolean _isTaxIntegrationEnabledForJournalType, boolean _isOverrideSalesTax)
    {
        if (_isTaxIntegrationEnabledForJournalType
            && journalTrans_ds)
        {
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, TaxGroup)).allowEdit(_isOverrideSalesTax);
            journalTrans_ds.object(fieldNum(LedgerJournalTrans, TaxItemGroup)).allowEdit(_isOverrideSalesTax);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoLedgerJournalTransTaxExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert data fro the <c>LedgerJournalTransTaxExtension</c> table.
    /// </summary>
    internal void insertIntoLedgerJournalTransTaxExtension(LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension)
    {
        LedgerJournalType journalType = ledgerJournalTrans.ledgerJournalTable().JournalType;

        if (journalTrans_ds
            && (journalType == LedgerJournalType::PurchaseLedger
                || journalType == LedgerJournalType::Approval))
        {
            ledgerJournalTransTaxExtension.LedgerJournalTrans = ledgerJournalTrans.RecId;
            if (journalType== LedgerJournalType::Approval)
            {
                //The default value is yes just to be consistent with Core tax. 
                //If the default value is No, tax will be calculated on top of the original tax and post will be unbalanced if no any other action.
                //For this purpose, we also hide Override sales tax on the invoice approval header and journal name of invoice approval for this purpose.
                ledgerJournalTransTaxExtension.OverrideSalesTax = true;
            }
            if (ledgerJournalTransTaxExtension.validateWrite())
            {
                ledgerJournalTransTaxExtension.insert();

                journalTrans_ds.reread();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>