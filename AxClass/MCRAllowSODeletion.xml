<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRAllowSODeletion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRAllowSODeletion</c> determines whether or not
/// a sales order can be deleted.
/// </summary>
public class MCRAllowSODeletion
{
    salesID     salesID;
    RecId       salesTableRecId;
    salesStatus salesStatus;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowDeleteForDirectShip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables direct shipment deletion based on the drop ship status.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID to determine deletion eligibility.
    /// </param>
    /// <returns>
    /// true if the direct ship order can be deleted; otherwise, false.
    /// </returns>
    public boolean allowDeleteForDirectShip (InventTransId _inventTransId = '')
    {
        SalesLine salesLine;
        SalesTable salesTable;
        MCRSalesLineDropShipment mcrSalesLineDropShipment;

        select firstonly RecId from salesLine
            where salesLine.SalesId == salesId
                && (salesLine.InventTransId == _inventTransId || _inventTransId == '')
            exists join salesTable
            where salesTable.SalesId == salesLine.SalesId
                && salesTable.InterCompanyAutoCreateOrders == NoYes::No
            exists join mcrSalesLineDropShipment
            where mcrSalesLineDropShipment.SalesLine == salesLine.RecId
               && mcrSalesLineDropShipment.DropShipStatus != MCRDropShipStatus ::ToBeDropShipped
               && mcrSalesLineDropShipment.DropShipStatus != MCRDropShipStatus ::None;

        if (salesLine)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDeleteForInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables inventory deletion based on the drop ship status.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID to determine deletion eligibility.
    /// </param>
    /// <returns>
    /// true if the inventory can be deleted; otherwise, false.
    /// </returns>
    public boolean allowDeleteForInventory(InventTransId _inventTransId = '')
    {
        InventTrans inventTrans;

        QueryRun queryRun = new QueryRun(this.buildInventTransCreateLinesQuery(_inventTransId));
        queryRun.next();
        inventTrans = queryRun.get(tableNum(InventTrans));

        if (inventTrans)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDeleteForPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables payment deletion based on the customer payment status.
    /// </summary>
    /// <returns>
    /// true if the payment can be deleted; otherwise, false.
    /// </returns>
    public boolean allowDeleteForPayments ()
    {
        MCRCustPaymTable mcrCustPaymTable;
        MCRCustPaym  mcrCustPaym;

        while select mcrCustPaymTable
            where mcrCustPaymTable.CustPaymType
               && mcrCustPaymTable.RefRecId == salesTableRecId
               && mcrCustPaymTable.RefTableId == tableNum(SalesTable)
        {
            mcrCustPaym = MCRCustPaym::construct(mcrCustPaymTable, false);
            // Cannot return the value returned from validateDelete because
            //  of multiple payments.  But if one payment is not allowed to be
            //  deleted, do not allow the sales order to be deleted.
            if (!mcrCustPaym.validateDelete(false))
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDeletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if deletion is allowed.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID to determine delete eligibility; optional.
    /// </param>
    /// <returns>
    /// true if delete is allowed; otherwise, false.
    /// </returns>
    protected boolean allowDeletion(InventTransId _inventTransId = '')
    {
        boolean ret = true;

        //Disable the ability to delete sales orders, if the delete security key is off.
        if (MCRAllowSODeletion::securityAllowsDelete())
        {
            if (salesStatus == salesStatus::Backorder)
            {
                if (ret)
                {
                    ret = this.AllowDeleteForInventory(_inventTransId);
                }
                if (ret)
                {
                    ret = this.AllowDeleteForDirectShip(_inventTransId);
                }
                if (ret)
                {
                    ret = this.allowDeleteForPayments();
                }
            }
            else
            {
                ret = false;
            }
        }
        else
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>MCRAllowSODeletion</c> class.
    /// </summary>
    /// <param name="_salesTable">
    /// The current sales table record.
    /// </param>
    public void new(salesTable _salesTable)
    {
        salesID = _salesTable.salesID;
        salesTableRecId = _salesTable.RecId;
        salesStatus = _salesTable.SalesStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSalesOrderDeletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if deletion of the sales order is allowed.
    /// </summary>
    /// <param name="_salesTable">
    /// The current sales table record.
    /// </param>
    /// <param name="_inventTransId">
    /// The inventory transaction ID to determine delete eligibility; optional.
    /// </param>
    /// <returns>
    /// true if deletion is allowed; otherwise, false.
    /// </returns>
    public static boolean allowSalesOrderDeletion(
        SalesTable      _salesTable,
        InventTransId   _inventTransId = '')
    {
        MCRAllowSODeletion  allowSODeletion = new MCRAllowSODeletion(_salesTable);

        return allowSODeletion.allowDeletion(_inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>securityAllowsDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the table access based on the security setting.
    /// </summary>
    /// <returns>
    /// true if the security has an access type of delete; otherwise, false.
    /// </returns>
    public static boolean securityAllowsDelete()
    {
        return hasTableAccess(tableNum(SalesTable), AccessType::Delete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransCreateLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>InventTrans</c> <c>Query</c> instance with relevant Selection fields and ranges.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID to determine delete eligibility.
    /// </param>
    /// <returns>
    /// The created <c>InventTrans</c> <c>Query</c> instance.
    /// </returns>
    protected Query buildInventTransCreateLinesQuery(InventTransId _inventTransId)
    {
        Query inventTransQuery = new Query();

        QueryBuildDataSource inventTransQueryBuildDS = inventTransQuery.addDataSource(tableNum(InventTrans));

        inventTransQueryBuildDS.firstOnly(true);
        inventTransQueryBuildDS.addSelectionField(fieldNum(InventTrans, RecId));

        inventTransQueryBuildDS.addRange(fieldNum(InventTrans, StatusIssue)).value(strFmt(
            '((%1.%2 != %3) && (%1.%4 != %5) && (%1.%6 != %7) && (%1.%8 != %9)))',
            inventTransQueryBuildDS.name(),
            fieldStr(InventTrans, StatusIssue),   enum2int(StatusIssue::OnOrder),
            fieldStr(InventTrans, StatusIssue),   enum2int(StatusIssue::ReservOrdered),
            fieldStr(InventTrans, StatusIssue),   enum2int(StatusIssue::ReservPhysical),
            fieldStr(InventTrans, StatusReceipt), enum2int(StatusReceipt::Ordered)));

        QueryBuildDataSource inventTransOriginQueryBuildDS = inventTransQueryBuildDS.addDataSource(tableNum(InventTransOrigin));
        inventTransOriginQueryBuildDS.joinMode(JoinMode::ExistsJoin);
        inventTransOriginQueryBuildDS.relations(true);

        QueryBuildDataSource salesLineQueryBuildDS = inventTransOriginQueryBuildDS.addDataSource(tableNum(SalesLine));
        salesLineQueryBuildDS.joinMode(JoinMode::InnerJoin);
        salesLineQueryBuildDS.relations(true);

        inventTransQuery = this.addSalesLineCreateLinesRanges(inventTransQuery, _inventTransId);

        return inventTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesLineCreateLinesRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>InventTrans</c> <c>QueryRange</c> for <c>buildInventTransCreateLinesQuery</c> method.
    /// </summary>
    /// <param name = "_salesLineQuery">
    /// The query with datasource added as <c>SalesLine</c>.
    /// </param>
    /// <param name = "_inventTransId">
    /// The inventory transaction ID to determine delete eligibility.
    /// </param>
    /// <returns>
    /// The created <c>InventTrans</c> <c>Query</c> with ranges applied on <c>SalesLine</c> datasource.
    /// </returns>
    protected Query addSalesLineCreateLinesRanges(Query _salesLineQuery, InventTransId _inventTransId)
    {
        _salesLineQuery.dataSourceTable(tablenum(SalesLine)).addRange(fieldNum(salesLine, SalesId)).value(queryValue(salesId));
        _salesLineQuery.dataSourceTable(tablenum(SalesLine)).addRange(fieldNum(salesLine, InventTransId)).value(queryValue(_inventTransId));
        _salesLineQuery.dataSourceTable(tablenum(SalesLine)).addRange(fieldNum(salesLine, InventTransId)).value(queryValue(_inventTransId == ''));

        return _salesLineQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>