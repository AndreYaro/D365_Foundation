<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPeriodicDiscountPublisherEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class RetailPeriodicDiscountPublisherEventHandler
{
    private static int productsBatchSize = 400;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DMFDefinitionGroupExecution_onMappedEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Data event handler to set context, avoid too many batch jobs when import data entity.
    /// </summary>
    /// <param name = "entity">The data entity buffer.</param>
    /// <param name = "_eventArgs">The data event args.</param>
    [DataEventHandler(tableStr(EcoResReleasedProductVariantEntity), DataEventType::MappedEntityToDataSource), DataEventHandler(tableStr(EcoResReleasedProductVariantV2Entity), DataEventType::MappedEntityToDataSource)]
    public static void DMFDefinitionGroupExecution_onMappedEntityToDataSource(Common _sender, DataEventArgs _eventArgs)
    {
        RetailPeriodicDiscountPublisherEventHandler::setContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DMFDefinitionGroupExecution_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Data event handler to trigger a batch job after the import is completed.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">The data event args.</param>
    [DataEventHandler(tableStr(DMFDefinitionGroupExecution), DataEventType::Updated)]
    public static void DMFDefinitionGroupExecution_onUpdated(Common sender, DataEventArgs e)
    {
        if (RetailPricingUseLegacyRetailPeriodicDiscountPublisherFlight::instance().isEnabled() || !RetailPeriodicDiscountPublisherEventHandler::isDataImporting())
        {
            return;
        }

        DMFDefinitionGroupExecution updatedInstance = sender;

        if (updatedInstance.TargetStatus == DMFBatchJobStatus::Finished)
        {
            DMFEntity dmfEntity = DMFEntity::find(updatedInstance.Entity);

            DMFOperationType operationType = DMFUtil::getOperationTypeForExecution(updatedInstance.ExecutionId);

            if (operationType == DMFOperationType::Import)
            {
                DMFExecutionSummaryStatus entityExecutionStatus = DMFExecutionStatusHelper::GetEntityExecutionSummaryStatus(updatedInstance);

                if (entityExecutionStatus == DMFExecutionSummaryStatus::Succeeded || entityExecutionStatus == DMFExecutionSummaryStatus::PartiallySucceeded)
                {
                    List productRecIds = new List(Types::Int64);

                    if (dmfEntity.TargetEntity == tableStr(EcoResReleasedProductVariantV2Entity))
                    {
                        EcoResReleasedProductVariantV2Staging ecoResReleasedProductVariantV2Staging;

                        while select itemnumber from ecoResReleasedProductVariantV2Staging
                            group by itemnumber
                            where ecoResReleasedProductVariantV2Staging.executionid == updatedInstance.ExecutionId
                        {
                            InventTable inventTable = InventTable::find(ecoResReleasedProductVariantV2Staging.itemnumber);
                            if (RetailPeriodicDiscountPublisher::isAssociatedWithDiscount(inventTable.Product))
                            {
                                productRecIds.addEnd(inventTable.Product);

                                if (productRecIds.elements() >= productsBatchSize)
                                {
                                    RetailPeriodicDiscountPublisher::publishProductVariantsChanges(RetailPeriodicDiscountPublisherEventHandler::list2con(productRecIds));
                                    productRecIds = new List(Types::Int64);
                                }
                            }
                        }
                    }

                    if (dmfEntity.TargetEntity == tableStr(EcoResReleasedProductVariantEntity))
                    {
                        EcoResReleasedProductVariantStaging ecoResReleasedProductVariantStaging;

                        while select itemnumber from ecoResReleasedProductVariantStaging
                            group by itemnumber
                            where ecoResReleasedProductVariantStaging.executionid == updatedInstance.ExecutionId
                        {
                            InventTable inventTable = InventTable::find(ecoResReleasedProductVariantStaging.itemnumber);
                            if (RetailPeriodicDiscountPublisher::isAssociatedWithDiscount(inventTable.Product))
                            {
                                productRecIds.addEnd(inventTable.Product);

                                if (productRecIds.elements() >= productsBatchSize)
                                {
                                    RetailPeriodicDiscountPublisher::publishProductVariantsChanges(RetailPeriodicDiscountPublisherEventHandler::list2con(productRecIds));
                                    productRecIds = new List(Types::Int64);
                                }
                            }
                        }
                    }

                    if (productRecIds.elements() > 0)
                    {
                        RetailPeriodicDiscountPublisher::publishProductVariantsChanges(RetailPeriodicDiscountPublisherEventHandler::list2con(productRecIds));
                    }
                }
            }
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContext</Name>
				<Source><![CDATA[
    private static void setContext()
    {
        RetailPeriodicDiscountPublisherContext context = RetailPeriodicDiscountPublisherContext::current();

        if (context == null)
        {
            context = RetailPeriodicDiscountPublisherContext::construct();
        }

        context.parmDataImporting(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataImporting</Name>
				<Source><![CDATA[
    internal static boolean isDataImporting()
    {
        RetailPeriodicDiscountPublisherContext context = RetailPeriodicDiscountPublisherContext::current();

        return context != null && context.parmDataImporting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>list2con</Name>
				<Source><![CDATA[
    private static container list2con(List list)
    {
        // First three elements in pack return value are version, type and count
        return conDel(list.pack(), 1, 3);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>