<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRInventDimCtrl_Frm_ItemList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRInventDimCtrl_Frm_ItemList</c> is used for controlling the dimension display.
/// </summary>
class MCRInventDimCtrl_Frm_ItemList extends InventDimCtrl_Frm_Editable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setupShowAllProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether all product dimensions are to be visible on the dimension setup form.
    /// </summary>
    /// <returns>
    /// Always false for mcrItemList.
    /// Because storage dimension could be filled in by user in Item list form or populated from item default dimension when item list generation.
    /// </returns>
    public boolean setupShowAllProductDimensions()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRInventDimCtrl_Frm_ItemList construct()
    {
        return new MCRInventDimCtrl_Frm_ItemList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>MCRInventDimCtrl_Frm_ItemList</c> class.
    /// </summary>
    /// <param name="_formRun">
    /// The instance of the <c>formControl</c> class where the inventory dimensions should be controlled.
    /// </param>
    /// <returns>
    /// An instance of the <c>MCRInventDimCtrl_Frm_ItemList</c> class.
    /// </returns>
    public static MCRInventDimCtrl_Frm_ItemList newFromForm(FormRun _formRun)
    {
        MCRInventDimCtrl_Frm_ItemList  inventDimCtrl_Frm = MCRInventDimCtrl_Frm_ItemList::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl_Frm.parmCallingElement(adapter);
        inventDimCtrl_Frm.init();
        return inventDimCtrl_Frm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingMustShowGridField_delegate</Name>
				<Source><![CDATA[
    delegate void kittingMustShowGridField_delegate(FieldId _dimFieldId, EventHandlerResult _resultValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingMustShowGridField</Name>
				<Source><![CDATA[
    protected boolean kittingMustShowGridField(FieldId _dimFieldId, boolean _default)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingMustShowGridField_delegate(_dimFieldId, resultValue);
        return resultValue.hasResult() ? resultValue.booleanResult() : _default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowGridField</Name>
				<Source><![CDATA[
    protected NoYes mustShowGridField(FieldId _dimFieldId)
    {
        return this.kittingMustShowGridField(_dimFieldId, super(_dimFieldId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>