<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailKeyCommandCopier</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Copies the sender profile data to the receiver profile.
/// </summary>
class RetailKeyCommandCopier extends RunBase
{
    RetailHardwareProfileId    fromProfileId;
    RetailHardwareProfileId    toProfileId;
    boolean                 overrideExisting;

    DialogField dialogFieldFromProfileId;
    DialogField dialogFieldToProfileId;
    DialogField dialogFieldOverrideExisting;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the dialog class and adds the fields to the dialog.
    /// </summary>
    /// <returns>
    /// The dialog class object.
    /// </returns>
    public Object dialog()
    {
        Dialog dialog;
        ;

        dialog = super();

        dialog.addGroup("@RET2823");
        dialogFieldFromProfileId = dialog.addFieldValue(extendedTypeStr(RetailHardwareProfileId), fromProfileId);

        dialog.addGroup("@RET2825");
        dialogFieldToProfileId = dialog.addFieldValue(extendedTypeStr(RetailHardwareProfileId), toProfileId);

        if (toProfileId)
        {
            dialogFieldToProfileId.enabled(false);
        }

        dialogFieldOverrideExisting = dialog.addFieldValue(extendedTypeStr(NoYesId), overrideExisting, "@RET2824");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the field values from the dialog box.
    /// </summary>
    /// <returns>
    /// true, if the values are retrieved else, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        fromProfileId = dialogFieldFromProfileId.value();
        toProfileId = dialogFieldToProfileId.value();
        overrideExisting = dialogFieldOverrideExisting.value();

        if (!fromProfileId)
        {
            ret = checkFailed("@RET2826");
        }

        if (!toProfileId)
        {
            ret = checkFailed("@RET2827");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromHardwareProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the receiver profile ID.
    /// </summary>
    /// <param name="_hardwareProfile">
    /// The current instance of <c>RetailHardwareProfile</c> table.
    /// </param>
    void initFromHardwareProfile(RetailHardwareProfile _hardwareProfile)
    {
        toProfileId = _hardwareProfile.profileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides or copies the sender profile data into the reciever profile based on the user interaction receieved from the dialog.
    /// </summary>
    public void run()
    {
        RetailKeyCommand       fromKeyCommand;
        RetailKeyCommand       toKeyCommand;

        if (fromProfileId != toProfileId)
        {
            ttsbegin;

            while select fromKeyCommand
                where fromKeyCommand.profileId == fromProfileId
            {
                toKeyCommand = RetailKeyCommand::find(toProfileId, fromKeyCommand.keyName, true);

                if (toKeyCommand)
                {
                    if (overrideExisting)
                    {
                        toKeyCommand.delete();
                        toKeyCommand = fromKeyCommand.data();
                        toKeyCommand.profileId = toProfileId;
                        toKeyCommand.insert();
                    }
                }
                else
                {
                    toKeyCommand = fromKeyCommand.data();
                    toKeyCommand.profileId = toProfileId;
                    toKeyCommand.insert();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;

        ret = super(packedClass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method calls the main method with the argument class passed as a parameter.
    /// </summary>
    /// <param name="_hardwareProfile">
    /// Table buffer of the <c>RetailHardwareProfile</c>.
    /// </param>
    /// <remarks>
    /// args.record, gets and sets the record from the table on which the caller object is working.
    /// </remarks>
    public static void copy(RetailHardwareProfile _hardwareProfile)
    {
        Args args = new Args();
        ;
        args.record(_hardwareProfile);

        RetailKeyCommandCopier::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    Static public ClassDescription description()
    {
        return "@RET2822";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the hardware profile and copies the profile data.
    /// </summary>
    /// <param name="_args">
    /// The hardware profile data record.
    /// </param>
    public static void main(Args _args)
    {
        RetailKeyCommandCopier    keyCommandCopier = new RetailKeyCommandCopier();

        if (_args)
        {
            switch (_args.dataset())
            {
                case tablenum(RetailHardwareProfile)   :   keyCommandCopier.initFromHardwareProfile(_args.record());
                                                        break;
            }
        }

        if (keyCommandCopier.prompt())
        {
            keyCommandCopier.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>