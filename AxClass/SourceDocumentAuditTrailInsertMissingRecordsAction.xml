<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentAuditTrailInsertMissingRecordsAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Data maintenance action to insert all missing audit trail records.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
[DataMaintenanceFeatureClass(classStr(SourceDocumentAuditTrailInsertMissingRecordsFlight))]
internal final class SourceDocumentAuditTrailInsertMissingRecordsAction
    implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionParameters, IDataMaintenanceActionScheduleParameters
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@SourceDocumentAccountingFramework:AuditTrailRecoverMissingRecordsActionCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@SourceDocumentAccountingFramework:AuditTrailRecoverMissingRecordsActionDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::Misc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::General;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(SourceDocumentAuditTrailInsertMissingRecordsTask));
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        boolean issueExists;
        utcdatetime cutOffDate;
        utcdatetime backOffDate;
        utcdatetime currentDate;
        
        GeneralJournalEntry generalJournalEntry;
        TransactionLog transactionLog;

        SourceDocumentParameters sourceDocParamFind = SourceDocumentParameters::find();

        currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        cutOffDate = DateTimeUtil::addDays(currentDate, -sourceDocParamFind.MissingAuditTrailDMActionNumOfPriorDaysToInclude);
        backOffDate = DateTimeUtil::addDays(currentDate, -sourceDocParamFind.MissingAuditTrailDMActionNumOfRecentDaysToExclude);
                        
        select firstOnly crosscompany CreatedTransactionId from generalJournalEntry
            where generalJournalEntry.TransferId != 0 &&
                generalJournalEntry.CreatedDateTime >= cutOffDate &&
                generalJournalEntry.CreatedDateTime < backOffDate
            notexists join transactionLog
                where transactionLog.CreatedTransactionId == generalJournalEntry.CreatedTransactionId &&
                    transactionLog.Partition == generalJournalEntry.Partition &&
                    transactionLog.DataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId;

        issueExists = generalJournalEntry.RecId != 0;
 
        DataMaintenanceOpportunityResult scanResult = DataMaintenanceOpportunityResult::construct();
        scanResult.parmOpportunityFound(issueExists);
        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters</Name>
				<Source><![CDATA[
    public DataMaintenanceActionParameters parameters()
    {
        DataMaintenanceActionParameters actionParameters = new DataMaintenanceActionParameters();
        actionParameters.IsSystemAction = false;

        return actionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionScheduleParameters scheduleParameters()
    {
        DataMaintenanceActionScheduleParameters params = new DataMaintenanceActionScheduleParameters();
        params.Frequency = DataMaintenanceActionScheduleFrequency::EveryDay;

        return params;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>