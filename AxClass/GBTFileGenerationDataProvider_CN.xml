<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTFileGenerationDataProvider_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GBTFileGenerationDataProvider_CN</c> class provides data for GBT generating xml.
/// </summary>
/// <remarks>
/// This is base class of GBT data provider class.
/// </remarks>
class GBTFileGenerationDataProvider_CN
{
    FiscalYearName fiscalYearName;
    TransDate startPeriodtDate;
    TransDate endPeriodDate;
    RefRecId fiscalCalendarYearRecId;
    CompanyName companyCurrencyName;
    container fiscalPeriodRecIdCon;
    GBTDataProvider_CN GBTDataProvider;
    FiscalCalendarPeriod fiscalCalendarPeriod;
    PeriodName reportingPeriodName;

    GBTParameters_CN gbtParameters;

    GBTGLReports_CN gbtGLReports_CN;
    GBTGLReportsData_CN gbtGLReportsData_CN;
    Map mainAccountMap;
    Set mainAccountNumSet;
    Set mainAccountAddtionalNumberSet;
    Set mainAccountSet;
    const str Separator = '|';

    #ISOCountryRegionCodes
    #LedgerGBT_CN

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmStartPeriodtDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmStartPeriodtDate(TransDate _startPeriodtDate = startPeriodtDate)
    {
        startPeriodtDate = _startPeriodtDate;

        return startPeriodtDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndPeriodDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmEndPeriodDate(TransDate _endPeriodDate = endPeriodDate)
    {
        endPeriodDate = _endPeriodDate;

        return endPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalYearName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FiscalYearName parmFiscalYearName(FiscalYearName _fiscalYearName = fiscalYearName)
    {
        fiscalYearName = _fiscalYearName;

        return fiscalYearName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyCurrencyName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CompanyName parmCompanyCurrencyName(CompanyName _companyCurrencyName = companyCurrencyName)
    {
        companyCurrencyName = _companyCurrencyName;

        return companyCurrencyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalCalendarYear</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmFiscalCalendarYear(RefRecId _fiscalCalendarYearRecId = fiscalCalendarYearRecId)
    {
        fiscalCalendarYearRecId = _fiscalCalendarYearRecId;
        return fiscalCalendarYearRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmFiscalPeriod(container _fiscalPeriodRecIdCon = fiscalPeriodRecIdCon)
    {
        fiscalPeriodRecIdCon = _fiscalPeriodRecIdCon;
        return fiscalPeriodRecIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGBTDataProvider</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTDataProvider_CN parmGBTDataProvider(GBTDataProvider_CN _GBTDataProvider = GBTDataProvider)
    {
        GBTDataProvider = _GBTDataProvider;

        return GBTDataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FiscalCalendarPeriod parmFiscalCalendarPeriod(FiscalCalendarPeriod _fiscalCalendarPeriod = fiscalCalendarPeriod)
    {
        fiscalCalendarPeriod = _fiscalCalendarPeriod;
        return fiscalCalendarPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGBTParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTParameters_CN parmGBTParameters(GBTParameters_CN _gbtParameters = gbtParameters)
    {
        gbtParameters = _gbtParameters;
        return gbtParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingPeriodName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PeriodName parmReportingPeriodName(PeriodName _reportingPeriodName = reportingPeriodName)
    {
        reportingPeriodName = _reportingPeriodName;
        return reportingPeriodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentAssetBookByAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the current asset, returns the first asset book having a current posting layer.
    /// </summary>
    /// <param name="_assetId">
    /// A AssetId value that is used for select current asset book.
    /// </param>
    /// <returns>
    /// An asset book in the current posting layer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AssetBook getCurrentAssetBookByAssetId(AssetId   _assetId)
    {
        AssetBook      assetBook;
        AssetBookTable assetBookTable;

        select firstonly assetBook
        where assetBook.AssetId == _assetId
        exists join assetBookTable
            where assetBookTable.BookId == assetBook.BookId
               && assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current;

        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAssetBalanceByAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>AssetSumCalc_Trans</c> for the given asset values.
    /// </summary>
    /// <param name="_assetId">
    /// The id of the asset.
    /// </param>
    /// <param name="_bookId">
    /// The book id to which the asset belongs.
    /// </param>
    /// <param name="_dateFrom">
    /// The start of the date range.
    /// </param>
    /// <param name="_dateTo">
    /// The end of the date range.
    /// </param>
    /// <returns>
    /// An instance of the <c>AssetSumCalc_Trans</c> class
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AssetSumCalc_Trans calcAssetBalanceByAssetTrans(
        AssetId _assetId,
        AssetBookId _bookId,
        TransDate _dateFrom = dateNull(),
        TransDate _dateTo = endPeriodDate)
    {
        AssetSumCalc_Trans assetSumTrans = new AssetSumCalc_Trans();

        assetSumTrans = AssetSumCalc_Trans::newAssetPeriod(_assetId, _bookId, _dateFrom, _dateTo);

        return assetSumTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillChartOfAccountParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Chart of account parameters for the <c>GBTChartOfAccountParametersTmp_CN</c>
    /// </summary>
    /// <returns>The <c>GBTChartOfAccountParametersTmp_CN</c></returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTChartOfAccountParametersTmp_CN fillChartOfAccountParameters()
    {
        DimensionAttribute                  dimAttr;
        DictField                           dimValueDictField;
        LedgerChartOfAccountsTree_CN        ledgerChartOfAccountTree;
        LedgerChartOfAccountsTreeLevel_CN   ledgerChartOfAccountsTreeLevel;
        str                                 formatOfAccountNumber;
        DictEnum                            dictEnum = new DictEnum(enumNum(DimensionSegmentDelimiter));
        GBTChartOfAccountParametersTmp_CN   chartOfAccountParametersTmp;

        ledgerChartOfAccountTree = LedgerChartOfAccountsTree_CN::findByLedgerChartOfAccounts(LedgerChartOfAccounts::current());
        chartOfAccountParametersTmp.Separator = DimensionParameters::getDimensionSegmentDelimiter();

        //Calculates format Of account number base on ledgerChartOfAccountsTreeLevel setups
        while select Level, Length from ledgerChartOfAccountsTreeLevel order by Level
                where ledgerChartOfAccountsTreeLevel.LedgerChartOfAccountsTree_CN == ledgerChartOfAccountTree.RecId
        {
            if (ledgerChartOfAccountsTreeLevel.Level == 1)
            {
                formatOfAccountNumber = int2str(ledgerChartOfAccountsTreeLevel.Length);
            }
            else
            {
                formatOfAccountNumber += #Dash + int2str(ledgerChartOfAccountsTreeLevel.Length);
            }
        }
        chartOfAccountParametersTmp.FormatOfAccountNumber = formatOfAccountNumber;

        //Calculates the string length of cashflow dimension value
        dimAttr = DimensionAttribute::findByName(GBTParameters.CashFlowDimension);
        dimValueDictField = new DictField(dimAttr.BackingEntityTableId, dimAttr.BackingEntityValueFieldId);
        chartOfAccountParametersTmp.FormatOfCashFlowCode = GBTParameters.CashflowCodeFormat;

        chartOfAccountParametersTmp.insert();

        return chartOfAccountParametersTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Main account for the <c>GBTMainAccountTmp_CN</c>
    /// </summary>
    /// <returns>The <c>GBTMainAccountTmp_CN</c></returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTMainAccountTmp_CN fillMainAccount()
    {
        MainAccount             mainAccount;
        LedgerAccountUtility_CN accountUtility = new LedgerAccountUtility_CN();
        int                     levelOfAccount;
        RecId                   currentChartOfAccountsRecId;
        GBTMainAccountTmp_CN    mainAccountTmp;
        RecordInsertList        mainAccountTmpList;
        DictEnum                dictEnum = new DictEnum(enumNum(DimensionLedgerAccountType));

        mainAccountTmpList = new RecordInsertList(tableNum(GBTMainAccountTmp_CN), true, true, true, true, true, mainAccountTmp);

        currentChartOfAccountsRecId = LedgerChartOfAccounts::current();

        while select MainAccountId, Name, Type, DebitCreditProposal, LedgerChartOfAccounts from mainAccount
            order by MainAccountId
            where mainAccount.LedgerChartOfAccounts == currentChartOfAccountsRecId
        {
            mainAccountTmp.AccountNumber = mainAccount.MainAccountId;
            mainAccountTmp.AccountName = mainAccount.Name;

            //Calculates level of main account
            levelOfAccount = accountUtility.getAccountLevelbyAccountNum(strrem(mainAccount.MainAccountId, GBTFileGenerationHelper_CN::getSeparatorCharByChartOfAccount()), currentChartOfAccountsRecId);
            mainAccountTmp.LevelOfAccount = levelOfAccount;

            mainAccountTmp.AccountType = dictEnum.value2Label(enum2int(GBTDataProvider.getMainAccountType(mainAccount)));
            mainAccountTmp.Balance = GBTDataProvider.getDebitCreditSymbol(mainAccount);
            mainAccountTmpList.add(mainAccountTmp);
        }

        mainAccountTmpList.insertDatabase();
        return mainAccountTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Account structre for the <c>GBTAccountStructureTmp_CN</c>
    /// </summary>
    /// <returns>The <c>GBTAccountStructureTmp_CN</c></returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTAccountStructureTmp_CN fillAccountStructure()
    {
        MainAccount mainAccount;
        DimensionHierarchy dimensionHierarchy;
        LedgerStructure ledgerStructure;
        DimensionAttribute dimensionAttribute;
        RecordInsertList accountStructureTmpList;
        GBTAccountStructureTmp_CN accountStructureTmp;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        accountStructureTmpList = new RecordInsertList(tableNum(GBTAccountStructureTmp_CN), true, true, true, true, true, accountStructureTmp);
        mainAccountSet = new Set(Types::String);
        List dimensionAttributeList = new List(Types::Int64);

        // Account structures
        while select dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId
            join MainAccountId from mainAccount
                where mainAccount.RecId  == dimensionAttributeValueCombination.MainAccount
            exists join dimensionHierarchy
                where dimensionHierarchy.RecId == dimensionAttributeValueCombination.AccountStructure
                    && dimensionHierarchy.IsDraft   == NoYes::NO
            exists join RecId from ledgerStructure
                where ledgerStructure.DimensionHierarchy == dimensionHierarchy.RecId
                    && ledgerStructure.Ledger == Ledger::current()

        {
            if (!mainAccountSet.in(mainAccount.MainAccountId))
            {
                dimensionAttributeList = GBTFileGenerationHelper_CN::getAssistAccounting(dimensionAttributeValueCombination.RecId);

                if (dimensionAttributeList)
                {
                    ListEnumerator listEnumerator = dimensionAttributeList.getEnumerator();
                    while (listEnumerator.moveNext())
                    {
                        dimensionAttribute = dimensionAttribute::find(listEnumerator.current());
                        accountStructureTmp.AccountNumber = mainAccount.MainAccountId;
                        accountStructureTmp.AdditionalDimension = dimensionAttribute.localizedName();
                        accountStructureTmp.AdditionalDimensionName = dimensionAttribute.ReportColumnName;
                        accountStructureTmp.DimensionValueFrom = GBTFileGenerationHelper_CN::getDimensionValueFrom(dimensionAttribute.Name);
                        accountStructureTmp.DimensionDescription = dimensionAttribute.localizedName();
                        accountStructureTmpList.add(accountStructureTmp);
                        mainAccountSet.add(mainAccount.MainAccountId);
                    }
                }
            }
        }

        accountStructureTmpList.insertDatabase();

        return accountStructureTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCashflowInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Cashflow info for the <c>GBTCashflowInfoTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTCashflowInfoTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTCashflowInfoTmp_CN fillCashflowInfo()
    {
        DimensionAttribute      dimAttr;
        Query                   dimAttrValueQuery;
        QueryRun                dimAttrValueQueryRun;
        QueryBuildDataSource    qbsDimAttrValue;
        QueryBuildDataSource    qbsDimAttrDirCategory;
        boolean                 fromCustomDimension = false;
        Common                  common;
        DimensionValue          dimValue;
        DimensionAttributeValue dimAttrValue;
        DimensionAttributeValue dimAttrValueTmp;
        Common                  commonTmp;
        DimensionValue          parentCashflowItem;
        DictTable               dictTable;
        RecordInsertList        cashflowInfoTmpList;
        GBTCashflowInfoTmp_CN   cashflowInfoTmp;
        cashflowInfoTmpList = new RecordInsertList(tableNum(GBTCashflowInfoTmp_CN), true, true, true, true, true, cashflowInfoTmp);

        //From cashflow dimension value, which is set up in GBT parameters, and also should be used in financial statement: cashflow main body.
        dimAttr = DimensionAttribute::findByLocalizedName(GBTParameters.CashFlowDimension);
        fromCustomDimension = (dimAttr.BackingEntityTableId == tableNum(DimensionFinancialTag));
        dimAttrValueQuery = new Query();

        qbsDimAttrValue = dimAttrValueQuery.addDataSource(dimAttr.BackingEntityType);
        if (fromCustomDimension)
        {
            qbsDimAttrDirCategory = qbsDimAttrValue.addDataSource(tableNum(DimensionAttributeDirCategory));
            qbsDimAttrDirCategory.addLink(fieldNum(DimensionFinancialTag, FinancialTagCategory), fieldNum(DimensionAttributeDirCategory, DirCategory));
            qbsDimAttrDirCategory.addRange(fieldNum(DimensionAttributeDirCategory, DimensionAttribute)).value(queryValue(dimAttr.RecId));
        }
        dimAttrValueQueryRun = new QueryRun(dimAttrValueQuery);
        while (dimAttrValueQueryRun.next())
        {
            common      = dimAttrValueQueryRun.get(dimAttr.BackingEntityType);
            dimValue    = common.(dimAttr.ValueAttribute);

            dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimAttr.RecId, common.RecId);

            cashflowInfoTmp.CashflowCode = dimValue;
            cashflowInfoTmp.CashflowCodeName = common.(dimAttr.NameAttribute);
            cashflowInfoTmp.CashflowCodeDescription = common.(dimAttr.NameAttribute);
            cashflowInfoTmp.Level = GBTFileGenerationHelper_CN::getCashflowItemLevelByLength(strLen(dimValue));
            cashflowInfoTmp.IsTheEndLevel = cashflowInfoTmp.Level == 3 ? 1 : 0;

            // Checks parent cashflow dimension item whether exist
            parentCashflowItem = GBTFileGenerationHelper_CN::getCashflowItemParentNode(dimValue);
            dictTable = new DictTable(dimAttr.BackingEntityType);
            commonTmp = dictTable.makeRecord();
            select firstOnly RecId, EntityInstance from dimAttrValueTmp
                where dimAttrValueTmp.DimensionAttribute == dimAttr.RecId
                join commonTmp
                    where commonTmp.TableId == dimAttr.BackingEntityType
                        && commonTmp.RecId == dimAttrValueTmp.EntityInstance
                        && commonTmp.(dimAttr.ValueAttribute) == parentCashflowItem;

            cashflowInfoTmp.ParentCashFlowCode = dimAttrValueTmp.RecId ? parentCashflowItem : '';

            cashflowInfoTmp.CashflowDataFrom = #CashflowDataFrom_Part1;
            cashflowInfoTmp.CashflowCodeType = dimAttrValue.GroupDimension;
            cashflowInfoTmpList.add(cashflowInfoTmp);
        }

        cashflowInfoTmpList.insertDatabase();
        return cashflowInfoTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAccountBalanceAndNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Account balance and Net amount for the <c>GBTAccountBalanceAndNetAmountTmp_CN</c>
    /// </summary>
    /// <returns>The <c>GBTAccountBalanceAndNetAmountTmp_CN</c></returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTAccountBalanceAndNetAmountTmp_CN fillAccountBalanceAndNetAmount()
    {
        FiscalCalendarPeriod    tmpFiscalCalendarPeriod;
        int                     i;
        RecordInsertList accountBalanceAndNetAmountTmpList;
        GBTAccountBalanceAndNetAmountTmp_CN accountBalanceAndNetAmountTmp;

        accountBalanceAndNetAmountTmpList = new RecordInsertList(tableNum(GBTAccountBalanceAndNetAmountTmp_CN), true, true, true, true, true, accountBalanceAndNetAmountTmp);

        mainAccountMap = new Map(Types::String, Types::Class);
        mainAccountAddtionalNumberSet = new Set(Types::String);

        i = 1;
        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            mainAccountNumSet = new Set(Types::String);
            tmpFiscalCalendarPeriod = FiscalCalendarPeriod::find(conPeek(fiscalPeriodRecIdCon, i));
            this.insertDimensionCombBalanceAndNetAmount(tmpFiscalCalendarPeriod, accountBalanceAndNetAmountTmpList, accountBalanceAndNetAmountTmp);
            this.insertTotalMainAccBalanceAndNetAmount(tmpFiscalCalendarPeriod, accountBalanceAndNetAmountTmpList, accountBalanceAndNetAmountTmp);
            i++;
        }

        MainAccount mainAccount;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        str additionalNumber;
        MapEnumerator mapEnumerator = mainAccountMap.getEnumerator();

		void insertAccountBalanceWithoutVoucherTransaction()
        {
            accountBalanceAndNetAmountTmp.clear();
            accountBalanceAndNetAmountTmp.LegerAccount = mainAccount.MainAccountId;
            accountBalanceAndNetAmountTmp.AdditionalDimensionNumber = additionalNumber;
            accountBalanceAndNetAmountTmp.CurrencyCode = mainAccount.CurrencyCode ? mainAccount.CurrencyCode : Ledger::accountingCurrency();
            accountBalanceAndNetAmountTmp.FiscalPeriod = mapEnumerator.currentKey();
            accountBalanceAndNetAmountTmp.FiscalYear = fiscalYearName;
            accountBalanceAndNetAmountTmp.DBCROfTheBeginningBalance = GBTDataProvider.getDebitCreditSymbol(mainAccount);
            accountBalanceAndNetAmountTmp.DBCROfTheEndingBalance = accountBalanceAndNetAmountTmp.DBCROfTheBeginningBalance;
            accountBalanceAndNetAmountTmpList.add(accountBalanceAndNetAmountTmp);
		}

        while (mapEnumerator.moveNext())
        {
            mainAccountNumSet = mapEnumerator.currentValue();

            while select MainAccountId, LedgerChartOfAccounts, CurrencyCode, DebitCreditProposal, Type from mainAccount
                outer join RecId from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
            {
                additionalNumber = GBTFileGenerationHelper_CN::getAdditionalDimensions(dimensionAttributeValueCombination.RecId);
                if (additionalNumber)
                {
                    str key = mapEnumerator.currentKey() + Separator + mainAccount.MainAccountId + Separator + additionalNumber;
                    // Populates the assist accounting info without voucher transaction record
                    if (!mainAccountAddtionalNumberSet.in(key))
                    {
                        insertAccountBalanceWithoutVoucherTransaction();
					}
				}
				else
                {
                    // Populates the main accounting info without voucher transaction record
					if (!mainAccountNumSet.in(mainAccount.MainAccountId))
					{
                        insertAccountBalanceWithoutVoucherTransaction();
                        mainAccountNumSet.add(mainAccount.MainAccountId);
					}
                }
            }
        }

        accountBalanceAndNetAmountTmpList.insertDatabase();

        return accountBalanceAndNetAmountTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionCombBalanceAndNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts dimension comb balance and net amount of GBT data provider.
    /// </summary>
    /// <param name="_fiscalCalendarPeriod">
    /// The fiscal calendar period.
    /// </param>
    /// <param name="_accountBalanceAndNetAmountTmpList">
    /// The RecordInsertList for the table GBTAccountBalanceAndNetAmountTmp_CN.
    /// </param>
    /// <param name="_accountBalanceAndNetAmountTmp">
    /// The table GBTAccountBalanceAndNetAmountTmp_CN.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertDimensionCombBalanceAndNetAmount(
        FiscalCalendarPeriod    _fiscalCalendarPeriod,
        RecordInsertList _accountBalanceAndNetAmountTmpList,
        GBTAccountBalanceAndNetAmountTmp_CN _accountBalanceAndNetAmountTmp)
    {
        DimensionAttributeValueCombination      ledgerDimension;
        MainAccount                             mainAccount;
        LedgerBalanceDimAttrValueComboAmounts   balance;
        DimensionHierarchy                      dimHerarchy;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        GeneralJournalEntry                     generalJournalEntry;

        AmountMST                               beginningAccountingCurrencyBalance;
        AmountMST                               beginningTransactionCurrencyBalance;
        AmountMST                               endingAccountingCurrencyBalance;
        AmountMST                               endingTransactionCurrencyBalance;

        AmountMST                               accountingCurrencyCreditNetAmount;
        AmountMST                               TransactionCurrencyCreditNetAmount;
        AmountMST                               accountingCurrencyDebitNetAmount;
        AmountMST                               transactionCurrencyDebitNetAmount;

        while select RecId, AccountStructure, DisplayValue from ledgerDimension
            join MainAccountId, CurrencyCode, Type, DebitCreditProposal from mainAccount
                where mainAccount.RecId == LedgerDimension.MainAccount
                    && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
            exists join GeneralJournalEntry from generalJournalAccountEntry
                where generalJournalAccountEntry.LedgerDimension == ledgerDimension.RecId
            exists join generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                        && generalJournalEntry.AccountingDate <= _fiscalCalendarPeriod.EndDate
                        && generalJournalEntry.Ledger == Ledger::current()
            exists join dimHerarchy
                where dimHerarchy.RecId == ledgerDimension.AccountStructure
                    && dimHerarchy.StructureType == DimensionHierarchyType::AccountStructure
        {
            _accountBalanceAndNetAmountTmp.clear();
            //fills additional dimensions
            _accountBalanceAndNetAmountTmp.AdditionalDimensionNumber = GBTFileGenerationHelper_CN::getAdditionalDimensions(ledgerDimension.RecId);
            //Fiscal period
            _accountBalanceAndNetAmountTmp.FiscalPeriod = _fiscalCalendarPeriod.Name;

            str key = _fiscalCalendarPeriod.Name + Separator + mainAccount.MainAccountId + Separator + _accountBalanceAndNetAmountTmp.AdditionalDimensionNumber;

            if (mainAccountAddtionalNumberSet.in(key))
            {
                continue;
            }

            [beginningAccountingCurrencyBalance,
                beginningTransactionCurrencyBalance,
                accountingCurrencyCreditNetAmount,
                transactionCurrencyCreditNetAmount,
                accountingCurrencyDebitNetAmount,
                transactionCurrencyDebitNetAmount] = GBTFileGenerationHelper_CN::calculateBalanceByMainaccount(mainAccount.MainAccountId, _fiscalCalendarPeriod, _accountBalanceAndNetAmountTmp.AdditionalDimensionNumber);

            mainAccountAddtionalNumberSet.add(key);

            boolean isCredit;
            if (mainAccount.DebitCreditProposal == DebCredProposal::Credit)
            {
                isCredit = true;
            }

            //fills main account id
            _accountBalanceAndNetAmountTmp.LegerAccount = mainAccount.MainAccountId;

            //Currency code
            _accountBalanceAndNetAmountTmp.CurrencyCode = mainAccount.CurrencyCode ? mainAccount.CurrencyCode : Ledger::accountingCurrency();
            //Unit of measure
            _accountBalanceAndNetAmountTmp.UnitOfMeasure = '';
            //Fiscal year
            _accountBalanceAndNetAmountTmp.FiscalYear = fiscalYearName;

            //Beginning
            //DB/CR of the Beginning balance
            _accountBalanceAndNetAmountTmp.DBCROfTheBeginningBalance = GBTDataProvider.getDebitCreditSymbol(mainAccount);
            //The beginning quantity
            _accountBalanceAndNetAmountTmp.BeginningQuantity = 0;
            //The beginning balance in reporting currency
            _accountBalanceAndNetAmountTmp.BeginningBalanceInTransactionCurrency = isCredit ? -beginningTransactionCurrencyBalance : beginningTransactionCurrencyBalance;
            //The beginning balance in accounting currency
            _accountBalanceAndNetAmountTmp.BeginningBalanceInAccountingCurrency = isCredit ? -beginningAccountingCurrencyBalance : beginningAccountingCurrencyBalance;

            //Net amount
            //Debit quantity
            _accountBalanceAndNetAmountTmp.DebitQuantity = 0;
            //Debit amount in transaction currency
            _accountBalanceAndNetAmountTmp.DebitAmountInTransactionCurrency = transactionCurrencyDebitNetAmount;
            //Debit amount in accounting currency
            _accountBalanceAndNetAmountTmp.DebitAmountInAccountingCurrency = accountingCurrencyDebitNetAmount;

            //Credit quantity
            _accountBalanceAndNetAmountTmp.CreditQuantity = 0;
            //Debit amount in transaction currency
            _accountBalanceAndNetAmountTmp.CreditAmountInTransactionCurrency = transactionCurrencyCreditNetAmount;
            //Debit amount in accounting currency
            _accountBalanceAndNetAmountTmp.CreditAmountInAccountingCurrency = accountingCurrencyCreditNetAmount;

            //Ending
            endingAccountingCurrencyBalance     = beginningAccountingCurrencyBalance + (accountingCurrencyDebitNetAmount - accountingCurrencyCreditNetAmount);
            endingTransactionCurrencyBalance    = beginningTransactionCurrencyBalance + (transactionCurrencyDebitNetAmount - transactionCurrencyCreditNetAmount);

            //DB/CR of the ending balance
            _accountBalanceAndNetAmountTmp.DBCROfTheEndingBalance = GBTDataProvider.getDebitCreditSymbol(mainAccount);
            //The ending quantity
            _accountBalanceAndNetAmountTmp.EndingQuantity = 0;
            //The ending balance in reporting currency
            _accountBalanceAndNetAmountTmp.EndingBalanceInTransactionCurrency = isCredit ? -endingTransactionCurrencyBalance : endingTransactionCurrencyBalance;
            //The ending balance in accounting currency
            _accountBalanceAndNetAmountTmp.EndingBalanceInAccountingCurrency = isCredit ? -endingAccountingCurrencyBalance : endingAccountingCurrencyBalance;

            _accountBalanceAndNetAmountTmpList.add(_accountBalanceAndNetAmountTmp);
            mainAccountNumSet.add(_accountBalanceAndNetAmountTmp.LegerAccount);
            mainAccountMap.insert(_accountBalanceAndNetAmountTmp.FiscalPeriod, mainAccountNumSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTotalMainAccBalanceAndNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts total main account balance and net amount of the GBT data provider.
    /// </summary>
    /// <param name="_fiscalCalendarPeriod">
    /// The fiscal calendar period.
    /// </param>
    /// <param name="_accountBalanceAndNetAmountTmpList">
    /// The RecordInsertList for the table GBTAccountBalanceAndNetAmountTmp_CN.
    /// </param>
    /// <param name="_accountBalanceAndNetAmountTmp">
    /// The table GBTAccountBalanceAndNetAmountTmp_CN.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertTotalMainAccBalanceAndNetAmount(
        FiscalCalendarPeriod    _fiscalCalendarPeriod,
        RecordInsertList _accountBalanceAndNetAmountTmpList,
        GBTAccountBalanceAndNetAmountTmp_CN _accountBalanceAndNetAmountTmp)
    {
        MainAccount mainAccount;
        LedgerBalanceMainAccountByCurrency totalMainAccountBalance = LedgerBalanceMainAccountByCurrency::construct();

        AmountMST                               beginningAccountingCurrencyBalance;
        AmountMST                               endingAccountingCurrencyBalance;

        AmountMST                               accountingCurrencyCreditNetAmount;
        AmountMST                               accountingCurrencyDebitNetAmount;

        while select LedgerChartOfAccounts, Type, MainAccountId, CurrencyCode, DebitCreditProposal from mainAccount
            where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                && mainAccount.Type                 == DimensionLedgerAccountType::Total
        {
            _accountBalanceAndNetAmountTmp.clear();
            //fills main account id
            _accountBalanceAndNetAmountTmp.LegerAccount = mainAccount.MainAccountId;

            //fills additional dimensions
            //No additional dimension for Total main account

            //Currency code
            _accountBalanceAndNetAmountTmp.CurrencyCode = mainAccount.CurrencyCode ? mainAccount.CurrencyCode : Ledger::accountingCurrency();
            //Unit of measure
            _accountBalanceAndNetAmountTmp.UnitOfMeasure = '';
            //Fiscal year
            _accountBalanceAndNetAmountTmp.FiscalYear = fiscalYearName;
            //Fiscal period
            _accountBalanceAndNetAmountTmp.FiscalPeriod = _fiscalCalendarPeriod.Name;

            FromDate fromDate;
            ToDate toDate;

            [fromDate, toDate] = GBTFileGenerationHelper_CN::getAccountingDateRange(_fiscalCalendarPeriod);

            //Beginning
            totalMainAccountBalance.parmAccountingDateRange(fromDate, toDate);
            totalMainAccountBalance.parmIncludeRegularPeriod(fromDate == toDate ? false : true);
            totalMainAccountBalance.parmIncludeClosingPeriod(true);
            totalMainAccountBalance.parmIncludeOpeningPeriod(true);
            totalMainAccountBalance.parmIncludeClosingPeriodBySystem(true);
            totalMainAccountBalance.calculateBalance(mainAccount);

            beginningAccountingCurrencyBalance  = totalMainAccountBalance.getAccountingCurrencyBalance();
            boolean isCredit;
            if (mainAccount.DebitCreditProposal == DebCredProposal::Credit)
            {
                isCredit = true;
            }
            //DB/CR of the Beginning balance
            _accountBalanceAndNetAmountTmp.DBCROfTheBeginningBalance = GBTDataProvider.getDebitCreditSymbol(mainAccount);
            //The beginning quantity
            _accountBalanceAndNetAmountTmp.BeginningQuantity = 0;
            //The beginning balance in reporting currency
            _accountBalanceAndNetAmountTmp.BeginningBalanceInTransactionCurrency = isCredit ? -beginningAccountingCurrencyBalance : beginningAccountingCurrencyBalance;
            //The beginning balance in accounting currency
            _accountBalanceAndNetAmountTmp.BeginningBalanceInAccountingCurrency = isCredit ? -beginningAccountingCurrencyBalance : beginningAccountingCurrencyBalance;

            //Net amount
            totalMainAccountBalance.parmAccountingDateRange(_fiscalCalendarPeriod.StartDate, _fiscalCalendarPeriod.EndDate);
            totalMainAccountBalance.parmIncludeRegularPeriod(true);
            totalMainAccountBalance.parmIncludeClosingPeriod(false);
            totalMainAccountBalance.parmIncludeOpeningPeriod(false);
            totalMainAccountBalance.parmIncludeClosingPeriodBySystem(false);
            totalMainAccountBalance.calculateBalance(mainAccount);

            accountingCurrencyCreditNetAmount   = totalMainAccountBalance.getAccountingCurrencyCreditBalance();
            accountingCurrencyDebitNetAmount    = totalMainAccountBalance.getAccountingCurrencyDebitBalance();
            //Debit quantity
            _accountBalanceAndNetAmountTmp.DebitQuantity = 0;
            //Debit amount in transaction currency
            _accountBalanceAndNetAmountTmp.DebitAmountInTransactionCurrency = abs(accountingCurrencyDebitNetAmount);
            //Debit amount in accounting currency
            _accountBalanceAndNetAmountTmp.DebitAmountInAccountingCurrency = abs(accountingCurrencyDebitNetAmount);

            //Credit quantity
            _accountBalanceAndNetAmountTmp.CreditQuantity = 0;
            //Debit amount in transaction currency
            _accountBalanceAndNetAmountTmp.CreditAmountInTransactionCurrency = abs(accountingCurrencyCreditNetAmount);
            //Debit amount in accounting currency
            _accountBalanceAndNetAmountTmp.CreditAmountInAccountingCurrency = abs(accountingCurrencyCreditNetAmount);

            //Ending
            endingAccountingCurrencyBalance     = beginningAccountingCurrencyBalance + (accountingCurrencyDebitNetAmount - accountingCurrencyCreditNetAmount);

            //DB/CR of the ending balance
            _accountBalanceAndNetAmountTmp.DBCROfTheEndingBalance = GBTDataProvider.getDebitCreditSymbol(mainAccount);
            //The ending quantity
            _accountBalanceAndNetAmountTmp.EndingQuantity = 0;
            //The ending balance in reporting currency
            _accountBalanceAndNetAmountTmp.EndingBalanceInTransactionCurrency = isCredit ? -endingAccountingCurrencyBalance : endingAccountingCurrencyBalance;
            //The ending balance in accounting currency
            _accountBalanceAndNetAmountTmp.EndingBalanceInAccountingCurrency = isCredit ? -endingAccountingCurrencyBalance : endingAccountingCurrencyBalance;

            _accountBalanceAndNetAmountTmpList.add(_accountBalanceAndNetAmountTmp);

            mainAccountNumSet.add(_accountBalanceAndNetAmountTmp.LegerAccount);
            mainAccountMap.insert(_accountBalanceAndNetAmountTmp.FiscalPeriod, mainAccountNumSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Ledger voucher for the <c>GBTLedgerVoucherTmp_CN</c>
    /// </summary>
    /// <returns>The <c>GBTLedgerVoucherTmp_CN</c></returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTLedgerVoucherTmp_CN fillLedgerVoucher()
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalEntry_W               generalJournalEntryW;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        LedgerVoucherType_CN                ledgerVoucherType;
        LedgerJournalTrans                  ledgerJournalTrans;
        LedgerEntryJournal                  ledgerEntryJournal;
        int                                 lineNum;
        RecId                               gjeRecIdTmp;
        ExchangeRateTypeName                exchRateTypeName;
        RecordInsertList                    ledgerVoucherTmpList;
        GBTLedgerVoucherTmp_CN              ledgerVoucherTmp;
        DictEnum                            dictEnum = new DictEnum(enumNum(LedgerPostingType));
        Set setSubledgerVoucher = new Set(Types::String);

        ledgerVoucherTmpList = new RecordInsertList(tableNum(GBTLedgerVoucherTmp_CN), true, true, true, true, true, ledgerVoucherTmp);

        exchRateTypeName = ExchangeRateType::find(Ledger::defaultExchangeRateType(CompanyInfo::current())).Name;

        while select Text, LedgerDimension, TransactionCurrencyCode, TransactionCurrencyAmount, PostingType, AccountingCurrencyAmount, GeneralJournalEntry, IsCredit from generalJournalAccountEntry
            order by GeneralJournalEntry.AccountingDate
            join AccountingDate, DocumentNumber, DocumentDate, CreatedBy, LedgerEntryJournal, SubledgerVoucher from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.AccountingDate <= endPeriodDate
                    && generalJournalEntry.AccountingDate >= startPeriodtDate
            outer join Voucher_CN, LedgerVoucherType_CN from generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
            outer join id, Num, DefaultPreparedByWorker, DefaultApprover from ledgerVoucherType
                where ledgerVoucherType.RecId == generalJournalEntryW.LedgerVoucherType_CN
        {
            ledgerVoucherTmp.clear();
            MainAccountNum mainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(GeneraljournalAccountEntry.LedgerDimension);
            str key = mainAccountNum + generalJournalEntry.SubledgerVoucher + enum2Str(generalJournalAccountEntry.IsCredit);
            GeneralJournalAccountEntry generalJournalAccountEntrySum;
            GeneralJournalEntry generalJournalEntrySum;

            if (setSubledgerVoucher.in(key))
            {
                continue;
            }
            else
            {
                select sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount) from generalJournalAccountEntrySum
                    group by generalJournalAccountEntrySum.LedgerDimension, generalJournalEntrySum.SubledgerVoucher
                    where generalJournalAccountEntrySum.LedgerDimension == GeneraljournalAccountEntry.LedgerDimension
                        && generalJournalAccountEntrySum.IsCredit == generalJournalAccountEntry.IsCredit
                    join generalJournalEntrySum
                        where generalJournalEntrySum.RecId == generalJournalAccountEntrySum.GeneralJournalEntry
                            && generalJournalEntrySum.Ledger == Ledger::current()
                            && generalJournalEntrySum.SubledgerVoucher == generalJournalEntry.SubledgerVoucher;
                setSubledgerVoucher.add(key);
            }

            ledgerVoucherTmp.VoucherDate = GBTFileGenerationHelper_CN::dateStrForGBT(generalJournalEntry.AccountingDate);
            ledgerVoucherTmp.FiscalYear = fiscalYearName;
            ledgerVoucherTmp.FiscalPeriod = FiscalCalendarPeriod::findPeriodByCalendarDate(Ledger::fiscalCalendar(), generalJournalEntry.AccountingDate, FiscalPeriodType::Operating).Name;
            ledgerVoucherTmp.VoucherType = ledgerVoucherType.Num;
            ledgerVoucherTmp.ChineseVoucherNumber = generalJournalEntryW.Voucher_CN;

            if (gjeRecIdTmp != generalJournalAccountEntry.GeneralJournalEntry)
            {
                lineNum = 1;
                gjeRecIdTmp = generalJournalAccountEntry.GeneralJournalEntry;
            }

            ledgerVoucherTmp.VoucherLineNumber = lineNum;
            lineNum++;

            ledgerVoucherTmp.TransactionText = generalJournalAccountEntry.Text;

            ledgerVoucherTmp.LegerAccount = mainAccountNum;

            //fills additional dimension
            ledgerVoucherTmp.AdditionalDimensionNumber = GBTFileGenerationHelper_CN::getAdditionalDimensions(GeneraljournalAccountEntry.LedgerDimension);

            ledgerVoucherTmp.CurrencyCode = GeneraljournalAccountEntry.TransactionCurrencyCode;
            ledgerVoucherTmp.UnitOfMeasure = #StringBlank;
            ledgerVoucherTmp.DebitQuantity = 0;
            ledgerVoucherTmp.CreditQuantity = 0;
            if (generalJournalAccountEntry.IsCredit)
            {
                ledgerVoucherTmp.DebitAmountInTransactionCurrency = #Amount_Zero;
                ledgerVoucherTmp.DebitAmountInAccountingCurrency = #Amount_Zero;
                ledgerVoucherTmp.CreditAmountInTransactionCurrency = -generalJournalAccountEntrySum.TransactionCurrencyAmount;
                ledgerVoucherTmp.CreditAmountInAccountingCurrency = -generaljournalAccountEntrySum.AccountingCurrencyAmount;
            }
            else
            {
                ledgerVoucherTmp.DebitAmountInTransactionCurrency = generalJournalAccountEntrySum.TransactionCurrencyAmount;
                ledgerVoucherTmp.DebitAmountInAccountingCurrency = generaljournalAccountEntrySum.AccountingCurrencyAmount;
                ledgerVoucherTmp.CreditAmountInTransactionCurrency = #Amount_Zero;
                ledgerVoucherTmp.CreditAmountInAccountingCurrency = #Amount_Zero;
            }

            ledgerVoucherTmp.ExchangeRateType = exchRateTypeName;
            ledgerVoucherTmp.ExchangeRate = GBTDataProvider.getExchangeRate(generaljournalAccountEntry.getAccountingExchangeRate());
            ledgerVoucherTmp.UnitPrice = 0;
            ledgerVoucherTmp.AdditionalFieldsInVoucherHead = #StringBlank;
            ledgerVoucherTmp.AdditionalFieldsInVoucherLine = #StringBlank;

            select firstOnly PaymMode, JournalNum, Attachments_CN, BankTransType, DocumentNum, DocumentDate from ledgerJournalTrans
                where LedgerJournalTrans.Voucher_CN == generalJournalEntryW.Voucher_CN
                    && LedgerJournalTrans.TransDate == generalJournalEntry.AccountingDate
                    && ledgerJournalTrans.LedgerDimension == generaljournalAccountEntry.LedgerDimension
                exists join ledgerEntryJournal
                     where ledgerEntryJournal.JournalNumber == ledgerJournalTrans.JournalNum
                        && ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal;
            ledgerVoucherTmp.PaymentMethod = ledgerJournalTrans.BankTransType;

            ledgerVoucherTmp.DocumentType = BankTransType::find(ledgerJournalTrans.BankTransType).Name;
            ledgerVoucherTmp.DocumentNumber = ledgerJournalTrans.DocumentNum;
            if (ledgerJournalTrans.DocumentNum)
            {
                ledgerVoucherTmp.DocumentDate = GBTFileGenerationHelper_CN::dateStrForGBT(ledgerJournalTrans.DocumentDate);
            }
            ledgerVoucherTmp.NumberOfOriginalDocuments = ledgerJournalTrans.Attachments_CN;
            ledgerVoucherTmp.Preparer = DirPerson::find(HcmWorker::find(ledgerVoucherType.DefaultPreparedByWorker).Person).Name;
            ledgerVoucherTmp.Approver = DirPerson::find(HcmWorker::find(ledgerVoucherType.DefaultApprover).Person).Name;
            ledgerVoucherTmp.LastModifier = DirPerson::find(DirPersonUser::find(generalJournalEntry.createdBy).PersonParty).Name;
            ledgerVoucherTmp.PostFlag = #PostFlag;
            ledgerVoucherTmp.VoidFlag = #VoidFlag;
            ledgerVoucherTmp.PostingType = dictEnum.value2Label(enum2int(generalJournalAccountEntry.PostingType));
            ledgerVoucherTmpList.add(ledgerVoucherTmp);
        }
        ledgerVoucherTmpList.insertDatabase();
        return ledgerVoucherTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCashflowVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Cashflow voucher for the <c>GBTCashflowVoucherTmp_CN</c>
    /// </summary>
    /// <returns>The <c>GBTCashflowVoucherTmp_CN</c></returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTCashflowVoucherTmp_CN fillCashflowVoucher()
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalEntry_W               generalJournalEntryW;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        LedgerVoucherType_CN                ledgerVoucherType;
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeLevelValueView    dimAttrLevelValueView;
        int                                 cashflowVourchLineNum;
        RecId                               currentGeneralJournalEntryRecId;
        GBTFillCashFlowInfoDataHelper_CN    fillCashFlowInfoDataHelper = new GBTFillCashFlowInfoDataHelper_CN();
        RecordInsertList                    cashflowVoucherTmpList;
        GBTCashflowVoucherTmp_CN            cashflowVoucherTmp;
        DimensionAttributeTranslation       dimensionAttributeTranslation;

        cashflowVoucherTmpList = new RecordInsertList(tableNum(GBTCashflowVoucherTmp_CN), true, true, true, true, true, cashflowVoucherTmp);
        fillCashFlowInfoDataHelper.initCashflowDimInfoMap();

        while select Text, LedgerDimension, TransactionCurrencyAmount, AccountingCurrencyAmount, GeneralJournalEntry, TransactionCurrencyCode from generalJournalAccountEntry
            order by GeneralJournalEntry
            join AccountingDate from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.AccountingDate <= endPeriodDate
                    && generalJournalEntry.AccountingDate >= startPeriodtDate
            outer join Voucher_CN, LedgerVoucherType_CN from generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
            outer join id, Num from ledgerVoucherType
                where ledgerVoucherType.RecId   == generalJournalEntryW.LedgerVoucherType_CN
            join DimensionAttribute, DisplayValue from dimAttrLevelValueView
                where dimAttrLevelValueView.ValueCombinationRecId == generalJournalAccountEntry.LedgerDimension
            join dimensionAttribute
                where dimensionAttribute.RecId == dimAttrLevelValueView.DimensionAttribute
            join dimensionAttributeTranslation
                where dimensionAttributeTranslation.DimensionAttribute == dimensionAttribute.RecId
                    && dimensionAttributeTranslation.LanguageId == currentUserLanguage()
                    && dimensionAttributeTranslation.Name == GBTParameters.CashFlowDimension
        {
            cashflowVoucherTmp.VoucherType = ledgerVoucherType.Num;
            cashflowVoucherTmp.ChineseVoucherNumber = generalJournalEntryW.Voucher_CN;
            cashflowVoucherTmp.CurrencyCode = GeneraljournalAccountEntry.TransactionCurrencyCode;

            if (currentGeneralJournalEntryRecId != generalJournalAccountEntry.GeneralJournalEntry)
            {
                cashflowVourchLineNum = 1;
                currentGeneralJournalEntryRecId = generalJournalAccountEntry.GeneralJournalEntry;
            }

            cashflowVoucherTmp.CashflowVoucherLineNumber = cashflowVourchLineNum;
            cashflowVourchLineNum++;

            cashflowVoucherTmp.CashflowCode = dimAttrLevelValueView.DisplayValue;
            cashflowVoucherTmp.CashflowText = GBTFileGenerationHelper_CN::getDimensionValueDescription(DimensionAttribute::find(dimAttrLevelValueView.DimensionAttribute), dimAttrLevelValueView.DisplayValue);
            cashflowVoucherTmp.CashflowType = DimensionAttributeValue::findByDimensionAttributeAndValueNoError(dimensionAttribute, dimAttrLevelValueView.DisplayValue).GroupDimension;
            cashflowVoucherTmp.TransactionCurrencyAmount = abs(generalJournalAccountEntry.TransactionCurrencyAmount);
            cashflowVoucherTmp.AccountingCurrencyAmount = abs(generaljournalAccountEntry.AccountingCurrencyAmount);
            cashflowVoucherTmpList.add(cashflowVoucherTmp);
        }
        cashflowVoucherTmpList.insertDatabase();
        return cashflowVoucherTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGLReports</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTGLReports_CN getGLReports()
    {
        select firstonly gbtGLReports_CN;

        return gbtGLReports_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGLReportsData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTGLReportsData_CN getGLReportsData()
    {
        select firstonly gbtGLReportsData_CN;

        return gbtGLReportsData_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReportsData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate GBT tables with report data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateReportsData()
    {
        GBTFinancialReportHandler_CN financialReportHandler
            = GBTFinancialReportHandler_CN::construct(gbtGLReports_CN, gbtGLReportsData_CN);

        FiscalCalendarPeriod reportingPeriod
            = FiscalCalendarPeriod::findByCalendarYearPeriod(fiscalCalendarYearRecId, reportingPeriodName);

        if (reportingPeriod)
        {
            financialReportHandler.loadReportDataFromMR(gbtParameters.BalanceSheet, #ReportCode_BalanceSheet, reportingPeriod.EndDate, reportingPeriod.Name);
            financialReportHandler.loadReportDataFromMR(gbtParameters.IncomeSheet, #ReportCode_IncomeSheet, reportingPeriod.EndDate, reportingPeriod.Name);
            financialReportHandler.loadReportDataFromMR(gbtParameters.CashflowMajorSheet, #ReportCode_Cashflow, reportingPeriod.EndDate, reportingPeriod.Name);
            financialReportHandler.loadReportDataFromMR(gbtParameters.ChangesOfOwnersEquity, #ReportCode_ChangesOfOwnersEquity, reportingPeriod.EndDate, reportingPeriod.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the transaction type for the temporary table GBTTransactionTypeTmp_CN
    /// </summary>
    /// <returns>The temporary table GBTTransactionTypeTmp_CN </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTTransactionTypeTmp_CN fillTransactionType()
    {
        DictEnum dictEnum = new DictEnum(enumNum(LedgerTransType));
        int         i = 1;
        container   countryRegionCodeCon;
        RecordInsertList transactionTypeTmpList;
        GBTTransactionTypeTmp_CN transactionTypeTmp;

        transactionTypeTmpList = new RecordInsertList(tableNum(GBTTransactionTypeTmp_CN), true, true, true, true, true, transactionTypeTmp);

        while (i < dictEnum.values())
        {
            countryRegionCodeCon = dictEnum.index2CountryRegionCodes(i);

            if (conLen(countryRegionCodeCon) == 0 || conFind(countryRegionCodeCon, #isoCN) != 0)
            {
                transactionTypeTmp.LedgerTransTypeId = int2str(dictEnum.index2Value(i));;
                transactionTypeTmp.LedgerTransTypeName = dictEnum.index2Label(i);
                transactionTypeTmpList.add(transactionTypeTmp);
            }
            i++;
        }

        transactionTypeTmpList.insertDatabase();

        return transactionTypeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillARTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the account receivable transaction for the temporary table GBTARTransactionsTmp_CN
    /// </summary>
    /// <returns>The temporary table GBTARTransactionsTmp_CN</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTARTransactionsTmp_CN fillARTransactions()
    {
        CustTrans                           custTrans;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry_W               generalJournalEntryW;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        LedgerVoucherType_CN                ledgerVoucherType;
        MainAccountNum                      mainAccountNum;
        MainAccount                         mainAccount;
        RecId                               ledgerDimensionRecId;
        CustInvoiceJour                     custInvoiceJour;
        ProjId                              projIdTmp;

        GBTARTransactionsTmp_CN             ARTransactionsTmp;
        RecordInsertList                    ARTransactionsTmpList;

        ARTransactionsTmpList = new RecordInsertList(tableNum(GBTARTransactionsTmp_CN), true, true, true, true, true, ARTransactionsTmp);

        while select Voucher, AccountNum, TransDate, Invoice, PostingProfile, DocumentDate, ExchRate, AmountMST, CurrencyCode,
            AmountCur, Txt, DueDate, Closed, LastSettleVoucher, TransType, DocumentNum, PaymMode, Settlement, BillOfExchangeID from custTrans
            where custTrans.TransDate <= endPeriodDate
                && custTrans.TransDate >= startPeriodtDate
                && custTrans.Closed != dateNull()
            outer join SalesId from custInvoiceJour
                where custInvoiceJour.LedgerVoucher     == custTrans.Voucher
                    && custInvoiceJour.InvoiceAccount   == custTrans.AccountNum
                    && custInvoiceJour.InvoiceDate      == custTrans.TransDate
                    && custInvoiceJour.InvoiceId        == custTrans.Invoice
        {
            ARTransactionsTmp.clear();
            ARTransactionsTmp.AccountNum = custTrans.AccountNum;

            select firstOnly RecId from generalJournalEntry
                where generalJournalEntry.Ledger == Ledger::current()
            outer join PostingType, LedgerDimension from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::CustBalance
            outer join LedgerVoucherType_CN, Voucher_CN from generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
            outer join Id, Num from ledgerVoucherType
                where ledgerVoucherType.RecId == generalJournalEntryW.LedgerVoucherType_CN
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry    == generalJournalEntry.RecId
                    && subledgerVoucherGeneralJournalEntry.Voucher               == custTrans.Voucher;

            mainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(generalJournalAccountEntry.LedgerDimension);
            ARTransactionsTmp.MainAccountNum = mainAccountNum;
            ARTransactionsTmp.DocumentDate = GBTFileGenerationHelper_CN::dateStrForGBT(custTrans.DocumentDate);
            ARTransactionsTmp.TransDate = GBTFileGenerationHelper_CN::dateStrForGBT(custTrans.TransDate);
            ARTransactionsTmp.FiscalYearName = FiscalYearName;
            ARTransactionsTmp.FiscalPeriod = GBTDataProvider.getFiscalCalendarPeriod(fiscalCalendarYearRecId, custTrans.Transdate).Name;
            ARTransactionsTmp.ChineseVoucherType = ledgerVoucherType.Num;
            ARTransactionsTmp.ChineseVoucherNumber = generalJournalEntryW.Voucher_CN ? generalJournalEntryW.Voucher_CN : custTrans.Voucher;
            ARTransactionsTmp.PrimaryCurrency = companyCurrencyName;
            ARTransactionsTmp.ExchangeRate = GBTDataProvider.getExchangeRate(custTrans.ExchRate);

            if (generalJournalAccountEntry.PostingType == LedgerPostingType::CustBalance)
            {
                ARTransactionsTmp.DocumentType = custTrans.AmountMST > 0 ? #DocumentTypeCode1 : #DocumentTypeCode3;
            }

            mainAccount = MainAccount::findByMainAccountId(mainAccountNum);
            ARTransactionsTmp.DBCRPproposalOfTheLedgerAccount = GBTDataProvider.getDebitCreditSymbol(mainAccount);
            ARTransactionsTmp.BalanceInLocalCurrency = 0;
            ARTransactionsTmp.BalanceInOtherCurrency = 0;
            ARTransactionsTmp.AmountMST = custTrans.AmountMST;
            ARTransactionsTmp.TransactionCurrency = Currency::find(custTrans.CurrencyCode).Txt;
            ARTransactionsTmp.AmountCur = custTrans.AmountCur;
            ARTransactionsTmp.Txt = custTrans.Txt;
            ARTransactionsTmp.DueDate = GBTFileGenerationHelper_CN::dateStrForGBT(custTrans.DueDate);
            if (ARTransactionsTmp.DocumentType == #DocumentTypeCode3)
            {
                ARTransactionsTmp.SettlementVoucher = custTrans.Closed ? GeneralJournalEntry_W::findByGeneralJournalEntry(GeneralLedgerExtension::findByReferenceNumber(custTrans.LastSettleVoucher).RecId).Voucher_CN : '';
                ARTransactionsTmp.Closed = GBTFileGenerationHelper_CN::dateStrForGBT(custTrans.Closed);
            }
            ARTransactionsTmp.TransType = int2Str(enum2int(custTrans.TransType));
            ARTransactionsTmp.DocumentNum = custTrans.DocumentNum;
            ARTransactionsTmp.Invoice = custTrans.Invoice;
            ARTransactionsTmp.ContractNumber = '';

            projIdTmp = SalesTable::find(custInvoiceJour.SalesId).ProjId;
            ARTransactionsTmp.ProjId = projIdTmp;

            ARTransactionsTmp.PaymMode = custTrans.PaymMode;
            if (custTrans.TransType == LedgerTransType::Payment)
            {
                ARTransactionsTmp.PaymentDate = GBTFileGenerationHelper_CN::dateStrForGBT(custTrans.TransDate);
            }
            ARTransactionsTmp.Settlement = enum2int(custTrans.Settlement);
            ARTransactionsTmp.BillOfExchangeID = custTrans.BillOfExchangeID;

            ARTransactionsTmpList.add(ARTransactionsTmp);
        }

        ARTransactionsTmpList.insertDatabase();

        return ARTransactionsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAPTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the account payable transaction for the temporary table GBTAPTransactionsTmp_CN
    /// </summary>
    /// <returns>The temporary table GBTAPTransactionsTmp_CN</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTAPTransactionsTmp_CN fillAPTransactions()
    {
        VendTrans                           vendTrans;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalEntry_W               generalJournalEntryW;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        ledgerVoucherType_CN                ledgerVoucherType;
        MainAccountNum                      mainAccountNum;
        MainAccount                         mainAccount;
        RecId                               ledgerDimensionRecId;

        VendInvoiceJour                     vendInvoiceJour;
        ProjId                              projIdTmp;

        GBTAPTransactionsTmp_CN             APTransactionsTmp;
        RecordInsertList                    APTransactionsTmpList;

        APTransactionsTmpList = new RecordInsertList(tableNum(GBTAPTransactionsTmp_CN), true, true, true, true, true, APTransactionsTmp);

        while select Voucher, AccountNum, TransDate, Invoice, PostingProfile, DocumentDate, ExchRate, AmountMST, CurrencyCode,
            AmountCur, DueDate, Txt, Closed, LastSettleVoucher, TransType, DocumentNum, PaymMode, Settlement, PromissoryNoteID from vendTrans
            where vendTrans.TransDate <= endPeriodDate
                && vendTrans.TransDate >= startPeriodtDate
                && vendTrans.Closed != dateNull()
            outer join PurchId from vendInvoiceJour
                where vendInvoiceJour.LedgerVoucher     == vendTrans.Voucher
                    && vendInvoiceJour.InvoiceAccount   == vendTrans.AccountNum
                    && vendInvoiceJour.InvoiceDate      == vendTrans.TransDate
                    && vendInvoiceJour.InvoiceId        == vendTrans.Invoice
        {
            APTransactionsTmp.clear();

            APTransactionsTmp.AccountNum = vendTrans.AccountNum;

            select firstOnly RecId from generalJournalEntry
                where generalJournalEntry.Ledger == Ledger::current()
            outer join PostingType, LedgerDimension from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance
            outer join LedgerVoucherType_CN, Voucher_CN from generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
            outer join Id, Num from ledgerVoucherType
                where ledgerVoucherType.RecId == generalJournalEntryW.LedgerVoucherType_CN
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry    == generalJournalEntry.RecId
                    && subledgerVoucherGeneralJournalEntry.Voucher               == vendTrans.Voucher;

            mainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(generalJournalAccountEntry.LedgerDimension);

            APTransactionsTmp.MainAccountNum = mainAccountNum;
            APTransactionsTmp.DocumentDate = GBTFileGenerationHelper_CN::dateStrForGBT(vendTrans.DocumentDate);
            APTransactionsTmp.TransDate = GBTFileGenerationHelper_CN::dateStrForGBT(vendTrans.TransDate);
            APTransactionsTmp.FiscalYearName = fiscalYearName;
            APTransactionsTmp.FiscalPeriod = GBTDataProvider.getFiscalCalendarPeriod(fiscalCalendarYearRecId, vendTrans.Transdate).Name;
            APTransactionsTmp.ChineseVoucherType = ledgerVoucherType.Num;
            APTransactionsTmp.ChineseVoucherNumber = generalJournalEntryW.Voucher_CN ? generalJournalEntryW.Voucher_CN : vendTrans.Voucher;
            APTransactionsTmp.PrimaryCurrency = companyCurrencyName;
            APTransactionsTmp.ExchangeRate = GBTDataProvider.getExchangeRate(vendTrans.ExchRate);

            if (generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance)
            {
                APTransactionsTmp.DocumentType = vendTrans.AmountMST < 0 ? #DocumentTypeCode2 : #DocumentTypeCode4;
            }

            mainAccount = MainAccount::findByMainAccountId(mainAccountNum);
            APTransactionsTmp.DBCRPproposalOfTheLedgerAccount = GBTDataProvider.getDebitCreditSymbol(mainAccount);
            APTransactionsTmp.BalanceInLocalCurrency = 0;
            APTransactionsTmp.BalanceInOtherCurrency = 0;
            APTransactionsTmp.AmountMST = -vendTrans.AmountMST;
            APTransactionsTmp.TransactionCurrency = Currency::find(vendTrans.CurrencyCode).Txt;
            APTransactionsTmp.AmountCur = -vendTrans.AmountCur;
            APTransactionsTmp.Txt = vendTrans.Txt;
            APTransactionsTmp.DueDate = GBTFileGenerationHelper_CN::dateStrForGBT(vendTrans.DueDate);

            if (APTransactionsTmp.DocumentType == #DocumentTypeCode4)
            {
                APTransactionsTmp.SettlementVoucher = vendTrans.Closed ? GeneralJournalEntry_W::findByGeneralJournalEntry(GeneralLedgerExtension::findByReferenceNumber(vendTrans.LastSettleVoucher).RecId).Voucher_CN : '';
                APTransactionsTmp.Closed = GBTFileGenerationHelper_CN::dateStrForGBT(vendTrans.Closed);
            }

            APTransactionsTmp.TransType = int2Str(enum2int(vendTrans.TransType));
            APTransactionsTmp.DocumentNum = vendTrans.DocumentNum;
            APTransactionsTmp.Invoice = vendTrans.Invoice;
            APTransactionsTmp.ContractNumber = '';

            projIdTmp = PurchTable::find(vendInvoiceJour.PurchId).ProjId;
            APTransactionsTmp.ProjId = projIdTmp;

            APTransactionsTmp.PaymMode = vendTrans.PaymMode;
            if (vendTrans.TransType == LedgerTransType::Payment)
            {
                APTransactionsTmp.PaymentDate = GBTFileGenerationHelper_CN::dateStrForGBT(vendTrans.TransDate);
            }
            APTransactionsTmp.Settlement = enum2int(vendTrans.Settlement);
            APTransactionsTmp.BillOfExchangeID = vendTrans.PromissoryNoteID;
            APTransactionsTmpList.add(APTransactionsTmp);
        }

        APTransactionsTmpList.insertDatabase();

        return APTransactionsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetChangeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the fixed asset change type for the <c>GBTFixedAssetChangeTypeTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTFixedAssetChangeTypeTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTFixedAssetChangeTypeTmp_CN fillFixedAssetChangeType()
    {
        GBTFixedAssetChangeTypeTmp_CN fixedAssetChangeTypeTmp;

        //BD01: 资产购入
        fixedAssetChangeTypeTmp.TransTypeCode = #FixedAssetTransactionTypeCode1;
        fixedAssetChangeTypeTmp.TransTypeName = #FixedAssetTransactionTypeName1;
        fixedAssetChangeTypeTmp.doInsert();

        //BD02: 资产处置
        fixedAssetChangeTypeTmp.TransTypeCode = #FixedAssetTransactionTypeCode2;
        fixedAssetChangeTypeTmp.TransTypeName = #FixedAssetTransactionTypeName2;
        fixedAssetChangeTypeTmp.doInsert();

        //BD03: 资产减值
        fixedAssetChangeTypeTmp.TransTypeCode = #FixedAssetTransactionTypeCode3;
        fixedAssetChangeTypeTmp.TransTypeName = #FixedAssetTransactionTypeName3;
        fixedAssetChangeTypeTmp.doInsert();

        //BD04: 资产重估
        fixedAssetChangeTypeTmp.TransTypeCode = #FixedAssetTransactionTypeCode4;
        fixedAssetChangeTypeTmp.TransTypeName = #FixedAssetTransactionTypeName4;
        fixedAssetChangeTypeTmp.doInsert();

        //BD05: 资产原值变更
        fixedAssetChangeTypeTmp.TransTypeCode = #FixedAssetTransactionTypeCode5;
        fixedAssetChangeTypeTmp.TransTypeName = #FixedAssetTransactionTypeName5;
        fixedAssetChangeTypeTmp.doInsert();

        //BD06: 资产位置变更
        fixedAssetChangeTypeTmp.TransTypeCode = #FixedAssetTransactionTypeCode6;
        fixedAssetChangeTypeTmp.TransTypeName = #FixedAssetTransactionTypeName6;
        fixedAssetChangeTypeTmp.doInsert();

        return fixedAssetChangeTypeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetCardInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the fixed asset card info for the <c>GBTFixedAssetCardInfoTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTFixedAssetCardInfoTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTFixedAssetCardInfoTmp_CN fillFixedAssetCardInfo()
    {
        AssetTable              assetTable;
        AssetBook               assetBookCurrent;
        AssetBook               assetBookTmp;
        AssetBookTable          assetBookTableTmp;
        AssetTrans              assetTranslatest;
        AssetTrans              depAssetTranslatest;
        AssetSumCalc_Trans      assetSumTrans;
        AssetId                 assetId;
        AssetBookId             bookId;
        FiscalCalendarPeriod    tmpFiscalCalendarPeriod;
        RefRecId                fiscalPeriodRecId;
        int                     i;
        AmountMST               acquisitionValue;

        LedgerDimensionDefaultAccount   acquisitionAccount;
        LedgerDimensionDefaultAccount   writeUpDownAccount;
        LedgerDimensionDefaultAccount   depreciationAccount;

        GBTFixedAssetCardInfoTmp_CN fixedAssetCardInfoTmp;
        RecordInsertList fixedAssetCardInfoTmpList;
        DictEnum        dictEnum = new DictEnum(enumNum(AssetTransType));

        fixedAssetCardInfoTmpList = new RecordInsertList(tableNum(GBTFixedAssetCardInfoTmp_CN), true, true, true, true, true, fixedAssetCardInfoTmp);

        i = 1;

        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            fiscalPeriodRecId = conPeek(fiscalPeriodRecIdCon, i);

            while select AssetId, AssetGroup, Name, UnitOfMeasure, Quantity, Condition, NameAlias, RecId from assetTable
                order by assetTable.NameAlias, assetTable.AssetId
                join Status, DisposalDate from assetBookTmp
                where assetBookTmp.AssetId  == assetTable.AssetId
                    join Name, EndDate from tmpFiscalCalendarPeriod
                        where ((tmpFiscalCalendarPeriod.EndDate < assetBookTmp.DisposalDate)
                                || (!assetBookTmp.DisposalDate
                                && (assetBookTmp.Status == AssetStatus::Closed ||
                                    assetBookTmp.Status == AssetStatus::Suspended ||
                                    assetBookTmp.Status == AssetStatus::Open ||
                                    assetBookTmp.Status == AssetStatus::NoAcquisition)))
                            && tmpFiscalCalendarPeriod.RecId == fiscalPeriodRecId
                exists join assetBookTableTmp
                where assetBookTableTmp.BookId == assetBookTmp.BookId
                   && assetBookTableTmp.CurrentOperationsTax == CurrentOperationsTax::Current
            {
                assetId = assetTable.AssetId;

                fixedAssetCardInfoTmp.AssetCardNumber = assetTable.NameAlias;
                fixedAssetCardInfoTmp.AssetGroup = assetTable.AssetGroup;
                fixedAssetCardInfoTmp.AssetId = assetId;
                fixedAssetCardInfoTmp.AssetName = assetTable.Name;

                //gets current asset book with asset table's assetId
                assetBookCurrent    = this.getCurrentAssetBookByAssetId(assetId);
                bookId              = assetBookCurrent.BookId;

                fixedAssetCardInfoTmp.AcquisitionDate = GBTFileGenerationHelper_CN::dateStrForGBT(assetBookCurrent.AcquisitionDate);
                fixedAssetCardInfoTmp.FiscalPeriodName = tmpFiscalCalendarPeriod.Name;
                fixedAssetCardInfoTmp.UnitOfMeasure = assetTable.UnitOfMeasure;
                fixedAssetCardInfoTmp.Quantity = assetTable.Quantity;
                fixedAssetCardInfoTmp.TransType = GBTFileGenerationHelper_CN::getAssetChangeTypeByDate(assetId, bookId, tmpFiscalCalendarPeriod.EndDate);
                fixedAssetCardInfoTmp.DepreciationProfile = assetBookCurrent.DepreciationProfile;
                fixedAssetCardInfoTmp.Condition = GBTFileGenerationHelper_CN::getAssetCoditionIdByDate(assetTable, tmpFiscalCalendarPeriod.EndDate);
                fixedAssetCardInfoTmp.LifeTime = assetBookCurrent.LifeTime;
                fixedAssetCardInfoTmp.AssetDepreciatedMonths = GBTFileGenerationHelper_CN::calcDepreciatedMonths(assetBookCurrent.DepreciationStartDate, tmpFiscalCalendarPeriod.EndDate);
                fixedAssetCardInfoTmp.CompanyCurrencyName = companyCurrencyName;

                //calculates fixed asset balance
                assetSumTrans = this.calcAssetBalanceByAssetTrans(assetId, bookId, dateNull(), tmpFiscalCalendarPeriod.EndDate);
                acquisitionValue =  assetSumTrans.acquisitionValue();
                fixedAssetCardInfoTmp.AcquisitionValue = acquisitionValue;
                fixedAssetCardInfoTmp.DepreciatedValue = abs(assetSumTrans.depreciationValue());
                fixedAssetCardInfoTmp.NetBookValue = assetSumTrans.netBookValue();
                fixedAssetCardInfoTmp.WritedownValue = assetSumTrans.writeUpDownAdjValue();

                fixedAssetCardInfoTmp.SalvageRate = GBTDataElementTypeInfo_CN::trimTrailingZeros(num2Str((acquisitionValue ? assetBookCurrent.ScrapValue / acquisitionValue : 0), 0, 2, 1, 0));
                fixedAssetCardInfoTmp.ScrapValue = assetBookCurrent.ScrapValue;

                //gets lastest depreciation asset trans
                select firstOnly AmountMST from depAssetTranslatest
                    order by RecId desc
                    where depAssetTranslatest.AssetId == assetId
                        && depAssetTranslatest.BookId == bookId
                        && depAssetTranslatest.TransType == AssetTransType::Depreciation
                        && depAssetTranslatest.TransDate <= tmpFiscalCalendarPeriod.EndDate
                        && depassettranslatest.TransDate >= tmpFiscalCalendarPeriod.StartDate;

                //Fixed asset depreciation rate
                fixedAssetCardInfoTmp.DepreciationRate = GBTDataElementTypeInfo_CN::trimTrailingZeros(num2Str((acquisitionValue ? abs(depAssetTranslatest.AmountMST) / acquisitionValue : 0), 0, 4, 1, 0));
                fixedAssetCardInfoTmp.DepreciationValue = abs(depAssetTranslatest.AmountMST);

                fixedAssetCardInfoTmp.ConsumptionUnit = assetBookCurrent.ConsumptionUnitId;
                fixedAssetCardInfoTmp.ConsumptionQtyEstimated = assetBookCurrent.ConsumptionQtyEstimated;
                fixedAssetCardInfoTmp.PostedConsumption = assetBookCurrent.consumptionQtyPosted();

                acquisitionAccount = AssetLedgerAccounts::assetLedgerDimension(
                        assetId,
                        bookId,
                        AssetTransType::Acquisition,
                        assetTable.postingProfile(bookId));
                writeUpDownAccount = AssetLedgerAccounts::assetLedgerDimension(
                        assetId,
                        bookId,
                        AssetTransType::WriteDownAdj,
                        assetTable.postingProfile(bookId));
                depreciationAccount = AssetLedgerAccounts::assetLedgerDimension(
                        assetId,
                        bookId,
                        AssetTransType::Depreciation,
                        assetTable.postingProfile(bookId));

                fixedAssetCardInfoTmp.LedgerAccountForAcquisition = LedgerDimensionFacade::getMainAccountFromLedgerDimension(acquisitionAccount).MainAccountId;
                fixedAssetCardInfoTmp.LedgerAccountForWriteUpDown = LedgerDimensionFacade::getMainAccountFromLedgerDimension(writeUpDownAccount).MainAccountId;
                fixedAssetCardInfoTmp.LedgerAccountForDepreciation = LedgerDimensionFacade::getMainAccountFromLedgerDimension(depreciationAccount).MainAccountId;
                fixedAssetCardInfoTmpList.add(fixedAssetCardInfoTmp);
            }

            i++;
        }

        fixedAssetCardInfoTmpList.insertDatabase();
        return fixedAssetCardInfoTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the fixed asset card for the <c>GBTFixedAssetCardTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTFixedAssetCardTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTFixedAssetCardTmp_CN fillFixedAssetCard()
    {
        AssetTable              assetTable;
        FiscalCalendarPeriod    tmpFiscalCalendarPeriod;
        RefRecId                fiscalPeriodRecId;
        int                     i;
        AssetBook               assetBookTmp;
        AssetBookTable          assetBookTableTmp;
        GBTFixedAssetCardTmp_CN fixedAssetCardTmp;
        RecordInsertList fixedAssetCardTmpList;

        fixedAssetCardTmpList = new RecordInsertList(tableNum(GBTFixedAssetCardTmp_CN), true, true, true, true, true, fixedAssetCardTmp);
        i = 1;

        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            fiscalPeriodRecId = conPeek(fiscalPeriodRecIdCon, i);
            while select AssetId, Barcode, Location, Model, NameAlias from assetTable
                order by assetTable.NameAlias, assetTable.AssetId
                join Status, DisposalDate from assetBookTmp
                where assetBookTmp.AssetId  == assetTable.AssetId
                    join Name, EndDate from tmpFiscalCalendarPeriod
                        where ((tmpFiscalCalendarPeriod.EndDate < assetBookTmp.DisposalDate)
                                || (!assetBookTmp.DisposalDate
                                && (assetBookTmp.Status == AssetStatus::Closed ||
                                    assetBookTmp.Status == AssetStatus::Suspended ||
                                    assetBookTmp.Status == AssetStatus::Open ||
                                    assetBookTmp.Status == AssetStatus::NoAcquisition)))
                            && tmpFiscalCalendarPeriod.RecId == fiscalPeriodRecId
                    exists join assetBookTableTmp
                    where assetBookTableTmp.BookId == assetBookTmp.BookId
                        && assetBookTableTmp.CurrentOperationsTax == CurrentOperationsTax::Current
            {
                fixedAssetCardTmp.AssetCardNumber = assetTable.NameAlias;
                fixedAssetCardTmp.Name = tmpFiscalCalendarPeriod.Name;
                fixedAssetCardTmp.Barcode = assetTable.Barcode;
                fixedAssetCardTmp.Location = GBTFileGenerationHelper_CN::getAssetLocationIdByDate(assetTable, tmpFiscalCalendarPeriod.EndDate);
                fixedAssetCardTmp.Model = assetTable.Model;
                fixedAssetCardTmpList.add(fixedAssetCardTmp);
            }
            i++;
        }
        fixedAssetCardTmpList.insertDatabase();
        return fixedAssetCardTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetUsage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the fixed asset usage for the <c>GBTFixedAssetUsageTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTFixedAssetUsageTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTFixedAssetUsageTmp_CN fillFixedAssetUsage()
    {
        FiscalCalendarPeriod        tmpFiscalCalendarPeriod;
        RefRecId                    fiscalPeriodRecId;
        int                         i;
        AssetTable                  assetTable;
        AssetBook                   assetBookTmp;
        AssetBookTable              assetBookTableTmp;
        AssetAllocationRule_CN      assetAllocationRule;
        AssetAllocationRuleLine_CN  assetAllocationRuleline;
        AssetLedgerAccounts         assetLedgerAccountsDep, assetLedgerAccountsExDep;

        GBTFixedAssetUsageTmp_CN fixedAssetUsageTmp;
        RecordInsertList fixedAssetUsageTmpList;

        fixedAssetUsageTmpList = new RecordInsertList(tableNum(GBTFixedAssetUsageTmp_CN), true, true, true, true, true, fixedAssetUsageTmp);

        i = 1;
        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            fiscalPeriodRecId = conPeek(fiscalPeriodRecIdCon, i);
            while select AssetId, Barcode, Location, Department, NameAlias from assetTable
                order by assetTable.NameAlias, assetTable.AssetId
            join BookId, PostingProfile, Status, DisposalDate from assetBookTmp
            where assetBookTmp.AssetId  == assetTable.AssetId
                join Name from tmpFiscalCalendarPeriod
                    where ((tmpFiscalCalendarPeriod.EndDate < assetBookTmp.DisposalDate)
                            || (!assetBookTmp.DisposalDate
                            && (assetBookTmp.Status == AssetStatus::Closed ||
                                assetBookTmp.Status == AssetStatus::Suspended ||
                                assetBookTmp.Status == AssetStatus::Open ||
                                assetBookTmp.Status == AssetStatus::NoAcquisition)))
                        && tmpFiscalCalendarPeriod.RecId == fiscalPeriodRecId
                exists join assetBookTableTmp
                where assetBookTableTmp.BookId == assetBookTmp.BookId
                   && assetBookTableTmp.CurrentOperationsTax == CurrentOperationsTax::Current
            {
                assetLedgerAccountsDep = AssetLedgerAccounts::findForAllocationRule_CN(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    AssetTransType::Depreciation,
                    assetBookTmp.PostingProfile);
                assetLedgerAccountsExDep = AssetLedgerAccounts::findForAllocationRule_CN(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    AssetTransType::ExtraordinaryDepreciation,
                    assetBookTmp.PostingProfile);

                while select LocalizedValue, Percentage from assetAllocationRuleline
                    order by assetAllocationRuleline.AssetAllocationRule
                    where assetAllocationRuleline.AssetAllocationRule == assetLedgerAccountsDep.AssetAllocationRule
                        || assetAllocationRuleline.AssetAllocationRule == assetLedgerAccountsExDep.AssetAllocationRule
                    exists join assetAllocationRule
                        where assetAllocationRule.RecId == assetAllocationRuleLine.AssetAllocationRule
                {
                    fixedAssetUsageTmp.AssetCardNumber = assetTable.NameAlias;
                    fixedAssetUsageTmp.Barcode = assetTable.Barcode;
                    fixedAssetUsageTmp.Name = tmpFiscalCalendarPeriod.Name;
                    fixedAssetUsageTmp.LocalizedValue = assetAllocationRuleline.LocalizedValue;
                    fixedAssetUsageTmp.Percentage = assetAllocationRuleline.Percentage;
                    fixedAssetUsageTmpList.add(fixedAssetUsageTmp);
                }
            }
            i++;
        }
        fixedAssetUsageTmpList.insertDatabase();
        return fixedAssetUsageTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetDisposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the fixed asset disposal for the <c>GBTFixedAssetDisposalTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTFixedAssetDisposalTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTFixedAssetDisposalTmp_CN fillFixedAssetDisposal()
    {
        AssetTable assetTable;
        FiscalCalendarPeriod fiscalCalendarPeriodTmp;
        RefRecId fiscalPeriodRecId;
        AssetBook assetBookTmp;
        AssetBookTable assetBookTableTmp;
        GBTFixedAssetDisposalTmp_CN fixedAssetDisposalTmp;

        RecordInsertList fixedAssetDisposalTmpList  = new RecordInsertList(tableNum(GBTFixedAssetDisposalTmp_CN), true, true, true, true, true, fixedAssetDisposalTmp);

        DictEnum dictEnum = new DictEnum(enumNum(AssetTransType));

        int i = 1;
        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            fiscalPeriodRecId = conPeek(fiscalPeriodRecIdCon, i);
            while select AssetId, Name, Barcode, Location, Model, Quantity, NameAlias from assetTable
                order by assetTable.NameAlias, assetTable.AssetId
                join Status, DisposalDate, BookId, ScrapValue from assetBookTmp
                    where assetBookTmp.AssetId  == assetTable.AssetId
                join Name, StartDate, EndDate from fiscalCalendarPeriodTmp
                    where fiscalCalendarPeriodTmp.RecId == fiscalPeriodRecId
                        && (assetBookTmp.DisposalDate >= fiscalCalendarPeriodTmp.StartDate
                            && assetBookTmp.DisposalDate <= fiscalCalendarPeriodTmp.EndDate)
                exists join assetBookTableTmp
                    where assetBookTableTmp.BookId == assetBookTmp.BookId
                        && assetBookTableTmp.CurrentOperationsTax == CurrentOperationsTax::Current
            {
                AssetTrans  assetTransDisposal = GBTFileGenerationHelper_CN::findAssetDisposalTrans(assetTable.AssetId, assetBookTmp.BookId, assetBookTmp.DisposalDate);

                fixedAssetDisposalTmp.DisposalNumber = assetTransDisposal.Voucher;
                fixedAssetDisposalTmp.TransDate = GBTFileGenerationHelper_CN::dateStrForGBT(assetBookTmp.DisposalDate);
                fixedAssetDisposalTmp.TransType = GBTFileGenerationHelper_CN::getAssetChangeTypeCode(assetTransDisposal.TransType);
                fixedAssetDisposalTmp.AssetCardNumber = assetTable.NameAlias;
                fixedAssetDisposalTmp.AssetName = assetTable.Name;
                fixedAssetDisposalTmp.AssetId = assetTable.AssetId;
                fixedAssetDisposalTmp.Quantity = assetTable.Quantity;
                fixedAssetDisposalTmp.FiscalPeriodName = fiscalCalendarPeriodTmp.Name;
                fixedAssetDisposalTmp.ScrapValue = assetBookTmp.ScrapValue;
                fixedAssetDisposalTmp.Reason = ReasonTableRef::find(assetTransDisposal.ReasonRefRecId).Reason;

                AmountMST deductedValue = AssetTrans::amountMSTPerDateTransTypes(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    [AssetTransType::AcqAdjPriorYears,
                        AssetTransType::AcqAdjThisYear,
                        AssetTransType::AcqPriorYears,
                        AssetTransType::AcqThisYear],
                    assetTransDisposal.TransDate,
                    assetTransDisposal.TransDate);

                AmountMST depreciatedValue = AssetTrans::amountMSTPerDateTransTypes(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    [AssetTransType::DepAdjPriorYears,
                        AssetTransType::DepAdjThisYear,
                        AssetTransType::DepPriorYears,
                        AssetTransType::DepThisYear,
                        AssetTransType::ExtraDepPriorYears,
                        AssetTransType::ExtraDepThisYear],
                    assetTransDisposal.TransDate,
                    assetTransDisposal.TransDate);

                AmountMST writeUpDownValue = AssetTrans::amountMSTPerDateTransTypes(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    [AssetTransType::WriteUpAdjPriorYears,
                        AssetTransType::WriteUpAdjThisYear,
                        AssetTransType::WriteDownAdjPriorYears,
                        AssetTransType::WriteDownAdjThisYear],
                    assetTransDisposal.TransDate,
                    assetTransDisposal.TransDate);

                AmountMST profitLoss = AssetTrans::amountMSTPerDateTransTypes(
                    assetTable.AssetId,
                    assetBookTmp.BookId,
                    [AssetTransType::ProfitLoss],
                    assetTransDisposal.TransDate,
                    assetTransDisposal.TransDate);

                fixedAssetDisposalTmp.DeductedValue = abs(deductedValue);
                fixedAssetDisposalTmp.DepreciatedValue = depreciatedValue;
                fixedAssetDisposalTmp.WriteUpDownValue = writeUpDownValue;
                if (profitLoss >= 0)
                {
                    fixedAssetDisposalTmp.DisposalValue = profitLoss;
                    fixedAssetDisposalTmp.DisposalCost = #Real_Zero;
                }
                else
                {
                    fixedAssetDisposalTmp.DisposalValue = #Real_Zero;
                    fixedAssetDisposalTmp.DisposalCost = profitLoss;
                }

                fixedAssetDisposalTmpList.add(fixedAssetDisposalTmp);
            }
            i++;
        }

        fixedAssetDisposalTmpList.insertDatabase();
        return fixedAssetDisposalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetDisposalAddition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the fixed asset disposal addition for the <c>GBTFixedAssetDisposalAdditionTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTFixedAssetDisposalAdditionTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTFixedAssetDisposalAdditionTmp_CN fillFixedAssetDisposalAddition()
    {
        AssetTable assetTable;
        FiscalCalendarPeriod fiscalCalendarPeriodTmp;
        RefRecId fiscalPeriodRecId;
        AssetBook assetBookTmp;
        AssetBookTable assetBookTableTmp;
        AssetTrans assetTrans;

        GBTFixedAssetDisposalAdditionTmp_CN fixedAssetDisposalAdditionTmp;
        RecordInsertList fixedAssetDisposalAdditionTmpList = new RecordInsertList(tableNum(GBTFixedAssetDisposalAdditionTmp_CN), true, true, true, true, true, fixedAssetDisposalAdditionTmp);

        int i = 1;
        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            fiscalPeriodRecId = conPeek(fiscalPeriodRecIdCon, i);
            while select AssetId, Barcode, Location, Model, NameAlias from assetTable
                order by assetTable.NameAlias, assetTable.AssetId
                join Status, DisposalDate, BookId from assetBookTmp
                    where assetBookTmp.AssetId  == assetTable.AssetId
                join Name from fiscalCalendarPeriodTmp
                    where fiscalCalendarPeriodTmp.RecId == fiscalPeriodRecId
                        && (assetBookTmp.DisposalDate >= fiscalCalendarPeriodTmp.StartDate
                            && assetBookTmp.DisposalDate <= fiscalCalendarPeriodTmp.EndDate)
                exists join assetBookTableTmp
                    where assetBookTableTmp.BookId == assetBookTmp.BookId
                        && assetBookTableTmp.CurrentOperationsTax == CurrentOperationsTax::Current
            {
                AssetTrans  assetTransDisposal = GBTFileGenerationHelper_CN::findAssetDisposalTrans(assetTable.AssetId, assetBookTmp.BookId, assetBookTmp.DisposalDate);

                fixedAssetDisposalAdditionTmp.DisposalNumber = assetTransDisposal.Voucher;
                fixedAssetDisposalAdditionTmp.AssetCardNumber = assetTable.NameAlias;
                fixedAssetDisposalAdditionTmp.FiscalPeriodName = fiscalCalendarPeriodTmp.Name;
                fixedAssetDisposalAdditionTmp.Barcode = assetTable.Barcode;
                fixedAssetDisposalAdditionTmpList.add(fixedAssetDisposalAdditionTmp);
            }

            i++;
        }

        fixedAssetDisposalAdditionTmpList.insertDatabase();
        return fixedAssetDisposalAdditionTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFixedAssetChangeHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the fixed asset change history for the <c>GBTFixedAssetChangeHistoryTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTFixedAssetChangeHistoryTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTFixedAssetChangeHistoryTmp_CN fillFixedAssetChangeHistory()
    {
        AssetChangesHistory ach;
        AssetTable          assetTable;
        ReasonTableRef      reasonTableRef;
        GBTFixedAssetChangeHistoryTmp_CN fixedAssetChangeHistoryTmp;
        RecordInsertList fixedAssetChangeHistoryTmpList;
        AssetLocationTransferHistory_CN assetLocationTransferHistoryCN;

        fixedAssetChangeHistoryTmpList = new RecordInsertList(tableNum(GBTFixedAssetChangeHistoryTmp_CN), true, true, true, true, true, fixedAssetChangeHistoryTmp);

        int i = 1;
        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            FiscalCalendarPeriod fiscalCalendarPeriodLocal = FiscalCalendarPeriod::find(conPeek(fiscalPeriodRecIdCon, i));

            int         transactionNumber = 1;
            utcDateTime fcpEndDateTime = DateTimeUtil::newDateTime(fiscalCalendarPeriodLocal.EndDate, timeMax());
            utcDateTime fcpStartDateTime = DateTimeUtil::newDateTime(fiscalCalendarPeriodLocal.StartDate, 0);

            while select Assetid, ReasonRefRecId, ChangeDateTime, OldValue, NewValue, FieldChanged from ach
                where ach.ChangeDateTime <= fcpEndDateTime
                    && ach.ChangeDateTime >= fcpStartDateTime
                outer join Name, Barcode, NameAlias from assetTable
                    where assetTable.AssetId == ach.Assetid
                outer join Reason, ReasonComment from reasonTableRef
                    where reasonTableRef.RecId == ach.ReasonRefRecId
            {
                fixedAssetChangeHistoryTmp.TransactionNumber = transactionNumber;
                fixedAssetChangeHistoryTmp.ChangeDateTime = GBTFileGenerationHelper_CN::dateStrForGBT(DateTimeUtil::date(ach.ChangeDateTime));
                fixedAssetChangeHistoryTmp.FiscalPeriodName = fiscalCalendarPeriodLocal.Name;
                fixedAssetChangeHistoryTmp.AssetCardNumber = assetTable.NameAlias;
                fixedAssetChangeHistoryTmp.AssetId = ach.Assetid;
                fixedAssetChangeHistoryTmp.AssetName = assetTable.Name;
                fixedAssetChangeHistoryTmp.FieldChanged = ach.FieldChanged;
                fixedAssetChangeHistoryTmp.Barcode = assetTable.Barcode;
                fixedAssetChangeHistoryTmp.OldValue = Num2Str(ach.OldValue, 0, 20, 1, 3);
                fixedAssetChangeHistoryTmp.NewValue = Num2Str(ach.NewValue, 0, 20, 1, 3);
                fixedAssetChangeHistoryTmp.Reason = reasonTableRef.Reason + ', ' + reasonTableRef.ReasonComment;
                fixedAssetChangeHistoryTmpList.add(fixedAssetChangeHistoryTmp);
                transactionNumber++;
            }

            while select assetLocationTransferHistoryCN
                where assetLocationTransferHistoryCN.TransferDate <= fiscalCalendarPeriodLocal.EndDate
                    && assetLocationTransferHistoryCN.TransferDate >= fiscalCalendarPeriodLocal.StartDate
                outer join Name, Barcode, NameAlias from assetTable
                    where assetTable.AssetId == assetLocationTransferHistoryCN.AssetId
            {
                fixedAssetChangeHistoryTmp.TransactionNumber = transactionNumber;
                fixedAssetChangeHistoryTmp.ChangeDateTime = GBTFileGenerationHelper_CN::dateStrForGBT(assetLocationTransferHistoryCN.TransferDate);
                fixedAssetChangeHistoryTmp.FiscalPeriodName = fiscalCalendarPeriodLocal.Name;
                fixedAssetChangeHistoryTmp.AssetCardNumber = assetTable.NameAlias;
                fixedAssetChangeHistoryTmp.AssetId = assetLocationTransferHistoryCN.AssetId;
                fixedAssetChangeHistoryTmp.AssetName = assetTable.Name;
                fixedAssetChangeHistoryTmp.FieldChanged = GBTFileGenerationHelper_CN::getAssetChangeTypeCode(#LocationChangeTypeValue);
                fixedAssetChangeHistoryTmp.Barcode = assetTable.Barcode;
                fixedAssetChangeHistoryTmp.OldValue = assetLocationTransferHistoryCN.FromLocation;
                fixedAssetChangeHistoryTmp.NewValue = assetLocationTransferHistoryCN.ToLocation;
                fixedAssetChangeHistoryTmp.Reason = assetLocationTransferHistoryCN.TransferComment;
                fixedAssetChangeHistoryTmpList.add(fixedAssetChangeHistoryTmp);
                transactionNumber++;
            }
            i++;
        }

        fixedAssetChangeHistoryTmpList.insertDatabase();

        return fixedAssetChangeHistoryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillELedgerBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills E-Ledger book for the <c>GBTELedgerBookTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTELedgerBookTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTELedgerBookTmp_CN fillELedgerBook()
    {
        GBTELedgerBookTmp_CN eLedgerBookTmp;
        str currentMonth;
        str eBoookNumber;
        str eBookName;

        LedgerChartOfAccounts ledgerChartOfAccounts = LedgerChartOfAccounts::find(Ledger::current());

        eLedgerBookTmp.EBoookNumber = ledgerChartOfAccounts.Name;
        eLedgerBookTmp.EBookName = ledgerChartOfAccounts.Description;
        eLedgerBookTmp.CompanyName = companyinfo::find().Name();
        eLedgerBookTmp.OrgNumber = gbtParameters.OrgNumber;
        eLedgerBookTmp.OrganizationType = #OrganizationType;
        eLedgerBookTmp.Industry = gbtParameters.Industry;
        eLedgerBookTmp.SoftwareDeveloper = #SoftwareDeveloper;
        eLedgerBookTmp.AXVersionNumber = #AXVersionNumber;
        eLedgerBookTmp.CompanyCurrencyName = companyCurrencyName;
        eLedgerBookTmp.FiscalYearName = fiscalYearName;
        eLedgerBookTmp.GBTVersion = #GBTVersion;

        eLedgerBookTmp.doInsert();

        return eLedgerBookTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFiscalPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the fiscal period for the <c>GBTFiscalPeriodTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTFiscalPeriodTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTFiscalPeriodTmp_CN fillFiscalPeriod()
    {
        FiscalcalendarPeriod fiscalCalendarPeriodLocal;
        GBTFiscalPeriodTmp_CN fiscalPeriodTmp;
        RecordInsertList fiscalPeriodTmpList;

        fiscalPeriodTmpList = new RecordInsertList(tableNum(GBTFiscalPeriodTmp_CN), true, true, true, true, true, fiscalPeriodTmp);

        while select Name, StartDate, EndDate from fiscalCalendarPeriodLocal
            where fiscalCalendarPeriodLocal.FiscalCalendarYear == fiscalCalendarPeriod.FiscalCalendarYear
                && fiscalCalendarPeriodLocal.Type == FiscalPeriodType::Operating
        {
            fiscalPeriodTmp.FiscalYearName = fiscalYearName;
            fiscalPeriodTmp.Name = fiscalCalendarPeriodLocal.Name;
            fiscalPeriodTmp.StartDate = GBTFileGenerationHelper_CN::dateStrForGBT(fiscalCalendarPeriodLocal.StartDate);
            fiscalPeriodTmp.EndDate = GBTFileGenerationHelper_CN::dateStrForGBT(fiscalCalendarPeriodLocal.EndDate);
            fiscalPeriodTmpList.add(fiscalPeriodTmp);
        }
        fiscalPeriodTmpList.insertDatabase();

        return fiscalPeriodTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDepartment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the department information for the <c>GBTDepartmentTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTDepartmentTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTDepartmentTmp_CN fillDepartment()
    {
        OMOperatingUnit             omOperatingUnit;
        OMOperatingUnit             omOperatingUnitParent;
        OMInternalOrganization      omInternalOrganizationParent;
        OMHierarchyRelationship     omHierarchyRelationship;
        utcDateTime                 curDate;
        RefRecId                    hierarchyTypeRecId;
        GBTDepartmentTmp_CN         departmentTmp;
        RecordInsertList            departmentTmpList;

        departmentTmpList = new RecordInsertList(tableNum(GBTDepartmentTmp_CN), true, true, true, true, true, departmentTmp);

        curDate = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
        hierarchyTypeRecId = this.getDepartmentHierarchyType();

        while select RecId, OMOperatingUnitNumber, Name from omOperatingUnit
            where omOperatingUnit.OMOperatingUnitType == OMOperatingUnitType::OMDepartment
            outer join ParentOrganization from omHierarchyRelationship
                where omHierarchyRelationship.ChildOrganization == omOperatingUnit.RecId
                    && omHierarchyRelationship.ValidFrom <= curDate
                    && omHierarchyRelationship.ValidTo >= curDate
                    && omHierarchyRelationship.HierarchyType == hierarchyTypeRecId
                outer join Name, OrganizationType from omInternalOrganizationParent
                    where omInternalOrganizationParent.RecId == omHierarchyRelationship.ParentOrganization
                    outer join OMOperatingUnitNumber from omOperatingUnitParent
                        where omInternalOrganizationParent.OrganizationType == OMInternalOrganizationType::OperatingUnit
                            && omOperatingUnitParent.RecId == omInternalOrganizationParent.RecId
        {
            departmentTmp.OMOperatingUnitNumber = omOperatingUnit.OMOperatingUnitNumber;
            departmentTmp.Name = omOperatingUnit.Name;

            if (strLen(omOperatingUnit.OMOperatingUnitNumber) == 1)
            {
                departmentTmp.ParentDepartment = '';
            }
            else
            {
                departmentTmp.ParentDepartment = omOperatingUnitParent.OMOperatingUnitNumber ? omOperatingUnitParent.OMOperatingUnitNumber : omInternalOrganizationParent.Name;
            }

            departmentTmpList.add(departmentTmp);
        }

        departmentTmpList.insertDatabase();
        return departmentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillEmployee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the employee information for the <c>GBTEmployeeTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTEmployeeTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTEmployeeTmp_CN fillEmployee()
    {
        HcmWorker                       hcmWorker;
        HcmPersonIdentificationNumber   hcmPersonIdentificationNumber;
        HcmPersonPrivateDetails         hcmPersonPrivateDetails;
        HcmEmployment                   hcmEmployment;
        utcDateTime                     curDate;
        GBTEmployeeTmp_CN employeeTmp;
        RecordInsertList employeeTmpList;

        employeeTmpList = new RecordInsertList(tableNum(GBTEmployeeTmp_CN), true, true, true, true, true, employeeTmp);

        curDate = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
        while select hcmWorker
            outer join IdentificationType, IdentificationNumber from hcmPersonIdentificationNumber
                where hcmPersonIdentificationNumber.Person      == hcmWorker.Person
                    && hcmPersonIdentificationNumber.IsPrimary  == NoYes::Yes
            outer join Gender, BirthDate from hcmPersonPrivateDetails
                where hcmPersonPrivateDetails.Person    == hcmWorker.Person
            outer join ValidFrom, ValidTo from hcmEmployment
                where hcmEmployment.Worker == hcmWorker.RecId
                    && hcmEmployment.LegalEntity == CompanyInfo::current()
                    && hcmEmployment.ValidFrom <= curDate
                    && hcmEmployment.ValidTo >= curDate
        {
            employeeTmp.PersonnelNumber = hcmWorker.PersonnelNumber;
            employeeTmp.EmployeeName = hcmWorker.name();
            employeeTmp.IdentificationDocument = HcmIdentificationType::find(hcmPersonIdentificationNumber.IdentificationType).IdentificationTypeId;
            employeeTmp.IdentificationNumber =  hcmPersonIdentificationNumber.IdentificationNumber;
            employeeTmp.Gender = enum2Str(hcmPersonPrivateDetails.Gender);
            employeeTmp.BirthDate = GBTFileGenerationHelper_CN::dateStrForGBT(hcmPersonPrivateDetails.BirthDate);

            if (hcmWorker.isEmployee())
            {
                employeeTmp.DepartmentCode = HcmWorkerHelper::getPrimaryDepartment(hcmWorker.RecId).OMOperatingUnitNumber;
            }
            else
            {
                utcdatetime minValidDate = DateTimeUtil::minValue();
                utcdatetime maxValidDate = DateTimeUtil::maxValue();
                OMOperatingUnit OMOperatingUnit;

                select firstonly validTimeState(minValidDate, maxValidDate) hcmEmployment
                    where hcmEmployment.Worker == hcmWorker.RecId
                        && hcmEmployment.LegalEntity == CompanyInfo::current();

                utcdatetime validTo = hcmEmployment.ValidTo == minValidDate ? minValidDate : DateTimeUtil::addDays(hcmEmployment.ValidTo, -1);
                employeeTmp.DepartmentCode = OMOperatingUnit::find(
                    HcmPositionDetail::findByPosition(HcmWorkerHelper::getPrimaryPosition(hcmWorker.RecId, validTo), DateTimeUtil::utcNow()).Department,
                    OMOperatingUnitType::OMDepartment).OMOperatingUnitNumber;
            }

            employeeTmp.ValidFrom = hcmEmployment.ValidFrom == DateTimeUtil::minValue() ? '' :GBTFileGenerationHelper_CN::dateStrForGBT(DateTimeUtil::date(hcmEmployment.ValidFrom));
            employeeTmp.ValidTo = hcmEmployment.ValidTo == DateTimeUtil::maxValue() ? '' : GBTFileGenerationHelper_CN::dateStrForGBT(DateTimeUtil::date(hcmEmployment.ValidTo));
            employeeTmpList.add(employeeTmp);
        }

        employeeTmpList.insertDatabase();
        return employeeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustomDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the custom dimension attribute for the <c>GBTCustomDimensionAttributeTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTCustomDimensionAttributeTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTCustomDimensionAttributeTmp_CN fillCustomDimensionAttribute()
    {
        DimensionAttribute      dimAttr;
        QueryRun                dimAttQueryRun;
        GBTCustomDimensionAttributeTmp_CN customDimensionAttributeTmp;
        RecordInsertList customDimensionAttributeTmpList;
        DimensionAttributeTranslation  dimensionAttributeTranslation;

        customDimensionAttributeTmpList = new RecordInsertList(tableNum(GBTCustomDimensionAttributeTmp_CN), true, true, true, true, true, customDimensionAttributeTmp);

        dimAttQueryRun = this.getDimAttrQueryRun();
        while (dimAttQueryRun.next())
        {
            dimAttr = dimAttQueryRun.get(tableNum(DimensionAttribute));
            dimensionAttributeTranslation = DimensionAttributeTranslation::findByDimensionAttributeLanguage(dimAttr.RecId, currentUserLanguage());
            //is Custom list or Not Workers, Customers, Vendors, department, and not cashflow dimension set in GBT paramters
            //since cashflow shall be exported seperately.
            if (dimAttr.BackingEntityTableId == tableNum(DimensionFinancialTag) && dimensionAttributeTranslation && dimensionAttributeTranslation.Name != GBTParameters.CashFlowDimension)
            {
                customDimensionAttributeTmp.Name = dimAttr.Name;
                customDimensionAttributeTmp.ReportColumnName = dimAttr.ReportColumnName;
                customDimensionAttributeTmp.DimensionDesc = '';
                customDimensionAttributeTmp.InHierarchy = '0';
                customDimensionAttributeTmp.NumberingRule = '';
                customDimensionAttributeTmpList.add(customDimensionAttributeTmp);
            }
        }

        customDimensionAttributeTmpList.insertDatabase();
        return customDimensionAttributeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustomDimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the custom dimension attribute value for the <c>GBTCustomDimensionAttributeValueTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTCustomDimensionAttributeValueTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTCustomDimensionAttributeValueTmp_CN fillCustomDimensionAttributeValue()
    {
        #Dimensions

        DimensionAttribute      dimAttr;
        QueryRun                dimAttQueryRun;
        Query                   dimAttrValueQuery;
        QueryRun                dimAttrValueQueryRun;
        QueryBuildDataSource    qbsDimAttrValue;
        QueryBuildDataSource    qbsDimAttrDirCategory;
        Common                  common;
        GBTCustomDimensionAttributeValueTmp_CN customDimensionAttributeValueTmp;
        RecordInsertList customDimensionAttributeValueTmpList;
        boolean                 fromCustomDimension = false;
        DimensionAttributeTranslation  dimensionAttributeTranslation;

        customDimensionAttributeValueTmpList = new RecordInsertList(tableNum(GBTCustomDimensionAttributeValueTmp_CN), true, true, true, true, true, customDimensionAttributeValueTmp);
        dimAttQueryRun = this.getDimAttrQueryRun();

        while (dimAttQueryRun.next())
        {
            dimAttr = dimAttQueryRun.get(tableNum(DimensionAttribute));
            dimensionAttributeTranslation = DimensionAttributeTranslation::findByDimensionAttributeLanguage(dimAttr.RecId, currentUserLanguage());
            //is Custom list or Not Workers, Customers, Vendors, department, and not cashflow dimension set in GBT paramters
            //since cashflow shall be exported seperately.
            fromCustomDimension = (dimAttr.BackingEntityTableId == tableNum(DimensionFinancialTag));

            if (fromCustomDimension && dimensionAttributeTranslation && dimensionAttributeTranslation.Name != GBTParameters.CashFlowDimension)
            {
                dimAttrValueQuery = new Query();
                qbsDimAttrValue = dimAttrValueQuery.addDataSource(dimAttr.BackingEntityType);

                if (fromCustomDimension)
                {
                    qbsDimAttrDirCategory = qbsDimAttrValue.addDataSource(tableNum(DimensionAttributeDirCategory));
                    qbsDimAttrDirCategory.addLink(fieldNum(DimensionFinancialTag, FinancialTagCategory), fieldNum(DimensionAttributeDirCategory, DirCategory));
                    qbsDimAttrDirCategory.addRange(fieldNum(DimensionAttributeDirCategory, DimensionAttribute)).value(queryValue(dimAttr.RecId));
                }

                dimAttrValueQueryRun = new QueryRun(dimAttrValueQuery);
                while (dimAttrValueQueryRun.next())
                {
                    common = dimAttrValueQueryRun.get(dimAttr.BackingEntityType);

                    customDimensionAttributeValueTmp.Name = dimAttr.Name;
                    customDimensionAttributeValueTmp.DimensionValueID = common.(dimAttr.ValueAttribute);
                    customDimensionAttributeValueTmp.DimensionValueName = common.(dimAttr.NameAttribute);
                    customDimensionAttributeValueTmp.DimensionValueDesc = '';
                    customDimensionAttributeValueTmp.DimensionValueParent = '';
                    customDimensionAttributeValueTmp.DimensionValueHierarchy = '1';
                    customDimensionAttributeValueTmpList.add(customDimensionAttributeValueTmp);
                }
            }
        }

        customDimensionAttributeValueTmpList.insertDatabase();
        return customDimensionAttributeValueTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaymentMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the payment method for the <c>GBTPaymentMethodTmp_CN</c>.
    /// </summary>
    /// <returns>The <c>GBTPaymentMethodTmp_CN</c>.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public GBTPaymentMethodTmp_CN fillPaymentMethod()
    {
        CustPaymModeTable   custPaymModeTable;
        VendPaymModeTable   vendPaymModeTable;
        GBTPaymentMethodTmp_CN paymentMethodTmp;
        RecordInsertList paymentMethodTmpList;

        paymentMethodTmpList = new RecordInsertList(tableNum(GBTPaymentMethodTmp_CN), true, true, true, true, true, paymentMethodTmp);
        //Combines Cust payment method and vend payment method then fill to data set
        //1.Loops cust payment methods and fill records to data set firstly
        while select PaymMode, Name from custPaymModeTable
        {
            paymentMethodTmp.PaymMode = custPaymModeTable.PaymMode;
            paymentMethodTmp.Name = custPaymModeTable.Name;
            paymentMethodTmpList.add(paymentMethodTmp);
        }
        //2. Loops vend payment methods and fill records which vend payment methods doesn't exist in cust payment methods to data set
        while select PaymMode, Name from vendPaymModeTable
        {
            if (!CustPaymModeTable::find(vendPaymModeTable.PaymMode).RecId)
            {
                paymentMethodTmp.PaymMode = vendPaymModeTable.PaymMode;
                paymentMethodTmp.Name = vendPaymModeTable.Name;
                paymentMethodTmpList.add(paymentMethodTmp);
            }
        }

        paymentMethodTmpList.insertDatabase();

        return paymentMethodTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimAttrQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a queryrun to select dimension attribute.
    /// </summary>
    /// <returns>
    /// The QueryRun object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun getDimAttrQueryRun()
    {
        Query                   dimAttQuery;
        QueryRun                dimAttQueryRun;
        QueryBuildDataSource    dimAttQBDS, coaQBDS;

        dimAttQuery = new Query();
        dimAttQBDS = dimAttQuery.addDataSource(tableNum(DimensionAttribute));
        dimAttQBDS.addRange(fieldNum(DimensionAttribute, Type)).value(SysQuery::valueNot(DimensionAttributeType::DynamicAccount));

        //exclude main account
        dimAttQBDS.addRange(fieldNum(DimensionAttribute, RecId)).value(SysQuery::valueNot(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)));

        //current chart of account
        coaQBDS = dimAttQBDS.addDataSource(tableNum(DimensionAttributeSetItem));
        coaQBDS.joinMode(JoinMode::ExistsJoin);
        coaQBDS.fetchMode(QueryFetchMode::One2One);
        coaQBDS.addLink(fieldNum(DimensionAttribute, RecId), fieldNum(DimensionAttributeSetItem, DimensionAttribute));
        coaQBDS.addRange(fieldNum(DimensionAttributeSetItem, DimensionAttributeSet)).value(queryValue(DimensionCache::getDimensionAttributeSetForLedger()));

        dimAttQueryRun = new QueryRun(dimAttQuery);

        return dimAttQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepartmentHierarchyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>RecId</c> of the default <c>OMHierarchyType</c> assigned to the organization chart purpose.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the default <c>OMHierarchyType</c> assigned to the organization chart purpose.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RefRecId getDepartmentHierarchyType()
    {
        OMHierarchyPurpose  omHierarchyPurpose;
        RefRecId            hierarchyType = 0;
        int64               hierarchyRecordCount;

        // get a count of the number of hierarchies assigned to the organization chart purpose
        select count(RecId) from omHierarchyPurpose
            where omHierarchyPurpose.HierarchyPurpose == HierarchyPurpose::OrganizationChart;

        hierarchyRecordCount = omHierarchyPurpose.RecId;

        switch (hierarchyRecordCount)
        {
            case any2Int64(1):
                // only a single hierarchy exists for the organization chart purpose, so use it
                select firstonly HierarchyType from omHierarchyPurpose
                    where omHierarchyPurpose.HierarchyPurpose == HierarchyPurpose::OrganizationChart;
                hierarchyType = omHierarchyPurpose.HierarchyType;
                break;

            default :
                // multiple hierarchies exist for the organization chart purpose, so attempt to find the default
                hierarchyType = HcmDepartmentHierarchy::getDefaultHierarchyType();
                break;
        }

        return hierarchyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static GBTFileGenerationDataProvider_CN construct(
        TransDate _startPeriodtDate,
        TransDate _endPeriodDate,
        FiscalYearName _fiscalYearName,
        RefRecId _fiscalCalendarYearRecId,
        container _fiscalPeriodRecIdCon,
        FiscalCalendarPeriod _fiscalCalendarPeriod,
        PeriodName _reportingPeriodName)
    {
        GBTFileGenerationDataProvider_CN GBTFileGenerationDataProvider = new GBTFileGenerationDataProvider_CN();

        GBTFileGenerationDataProvider.parmStartPeriodtDate(_startPeriodtDate);
        GBTFileGenerationDataProvider.parmEndPeriodDate(_endPeriodDate);
        GBTFileGenerationDataProvider.parmFiscalYearName(_fiscalYearName);
        GBTFileGenerationDataProvider.parmFiscalCalendarYear(_fiscalCalendarYearRecId);
        GBTFileGenerationDataProvider.parmFiscalPeriod(_fiscalPeriodRecIdCon);
        GBTFileGenerationDataProvider.parmFiscalCalendarPeriod(_fiscalCalendarPeriod);
        GBTFileGenerationDataProvider.parmGBTDataProvider(new GBTDataProvider_CN());
        GBTFileGenerationDataProvider.parmGBTParameters(GBTParameters_CN::find());
        GBTFileGenerationDataProvider.parmCompanyCurrencyName(Currency::find(Ledger::accountingCurrency()).Txt);
        GBTFileGenerationDataProvider.parmReportingPeriodName(_reportingPeriodName);

        return GBTFileGenerationDataProvider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>