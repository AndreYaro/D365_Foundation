<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayExceptionHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecuteDisplayExceptionHandler</c> class is responsible for handling exceptions while executing a 
/// <c>WHSWorkExecuteDisplay</c> class.
/// </summary>
public class WHSWorkExecuteDisplayExceptionHandler extends WHSWorkExecutionExceptionHandler
{
    #WHSRF

    private WhsrfPassthrough passOrig;
    private WHSWorkExecuteMode modeOrig;
    private int stepOrig;
    private WHSUserId userId;
    private container conOrig;
    private WhsWorkExecuteDisplay workExecuteDisplay;

    private WhsrfPassthrough pass;
    private WHSWorkExecuteMode mode;
    private int step;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>WHSWorkExecuteDisplayExceptionHandler</c> class.
    /// </summary>
    /// <param name = "_workExecuteDisplay">
    /// An instance of the <c>WhsWorkExecuteDisplay</c> class.
    /// </param>
    /// <param name = "_passOrig">
    /// The original value of the pass.
    /// </param>
    /// <param name = "_modeOrig">
    /// The original value of the mode.
    /// </param>
    /// <param name = "_stepOrig">
    /// The original value of the step.
    /// </param>
    /// <param name = "_conOrig">
    /// The original container having the values in the request.
    /// </param>
    /// <param name = "_userId">
    /// The user id of the user executing the current session.
    /// </param>
    /// <returns>
    /// The created instance of the <c>WHSWorkExecuteDisplayExceptionHandler</c> class.
    /// </returns>
    public static WHSWorkExecuteDisplayExceptionHandler construct(
        WhsWorkExecuteDisplay _workExecuteDisplay,
        WhsrfPassthrough _passOrig,
        WHSWorkExecuteMode _modeOrig,
        int _stepOrig,
        container _conOrig,
        WHSUserId _userId)
    {
        WHSWorkExecuteDisplayExceptionHandler exceptionHandler = new WHSWorkExecuteDisplayExceptionHandler();
        exceptionHandler.workExecuteDisplay = _workExecuteDisplay;
        exceptionHandler.passOrig = _passOrig;
        exceptionHandler.conOrig = _conOrig;
        exceptionHandler.stepOrig = _stepOrig;
        exceptionHandler.userId = _userId;

        return exceptionHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetState</Name>
				<Source><![CDATA[
    protected void resetState()
    {
        pass = passOrig;
        mode = modeOrig;
        step = stepOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePassValues</Name>
				<Source><![CDATA[
    protected void removePassValues()
    {
        if (workExecuteDisplay.parmPassValuesToRemoveOnException())
        {
            var enum = workExecuteDisplay.parmPassValuesToRemoveOnException().getEnumerator();
            while (enum.moveNext())
            {
                pass.remove(enum.current());
            }
            conOrig = workExecuteDisplay.updateModeStepPass(conOrig, mode, step, pass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdatedFormContainer</Name>
				<Source><![CDATA[
    protected container createUpdatedFormContainer(int _infoLogLineStart)
    {
        container restoredCon = WhsRFControlSelectionRestorer::restore(conOrig, userId);
        container formContainer = this.includeErrorMessage(restoredCon, _infoLogLineStart + 1, workExecuteDisplay);

        return formContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeErrorMessage</Name>
				<Source><![CDATA[
    private container includeErrorMessage(container _con, int _infologLinesStart, WHSWorkExecuteDisplay _workExecuteDisplay)
    {
        if (conLen(_con) >= #FieldControlStartLoc)
        {
            if (_workExecuteDisplay.hasError(_con))
            {
                _con = conDel(_con, #RFErrorLoc, 1);
            }
            container errorCon;
            [errorCon] = _workExecuteDisplay.addErrorLabelFromInfolog(conNull(), _infologlinesStart, WHSRFColorText::Error);
            _con = conIns(_con, #RFErrorLoc, errorCon);
        }
        return _con;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>