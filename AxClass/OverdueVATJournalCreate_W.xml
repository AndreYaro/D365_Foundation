<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OverdueVATJournalCreate_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>OverdueVATJournalCreate_W</c> used to create overdue debt journal for VAT reversal.
/// </summary>
abstract class OverdueVATJournalCreate_W extends OverdueJournalCreate_W
{
    FromDate fromDate;
    ToDate toDate;

    TaxAmount vatAmountMST, reverseTaxAmountMST;
    TaxAmountCur vatAmountCur, reverseTaxAmountCur;

    Amount reverseAmountMST;
    AmountCur reverseAmountCur;

    DialogField dfTransDate;
    DialogField dfFromDate;
    DialogField dfToDate;
    DialogField dfDescription;

    DialogRunbase dialog;

    QueryRun queryRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates earliest date transactions on which will be chosen for processing.
    /// </summary>
    /// <returns>
    /// Date value.
    /// </returns>
    private FromDate calcFromDate()
    {
        return dfTransDate.value() - overdueJournalSettings.MaxDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates VAT amount for given <c>OverdueDebtJournalLine_W</c> line.
    /// </summary>
    /// <param name="_overdueDebtJournalLine">
    /// <c>OverdueDebtJournalLine_W</c> being processed.
    /// </param>
    private void calcTaxAmount(OverdueDebtJournalLine_W _overdueDebtJournalLine)
    {
        CustVendTrans   custVendTrans = _overdueDebtJournalLine.custVendTrans();
        TaxAmount       overdueTaxAmountMST;
        TaxAmountCur    overdueTaxAmountCur;

        this.calcVATAmount(custVendTrans);

        if (reverseAmountCur + _overdueDebtJournalLine.OverDueAmountCur == custVendTrans.AmountCur)
        {
            overdueTaxAmountMST = vatAmountMST - reverseTaxAmountMST;
            overdueTaxAmountCur = vatAmountCur - reverseTaxAmountCur;
        }
        else
        {
            overdueTaxAmountMST = CurrencyExchangeHelper::amount(_overdueDebtJournalLine.OverdueAmountMST / custVendTrans.AmountMST * vatAmountMST);
            overdueTaxAmountCur = CurrencyExchangeHelper::amount(_overdueDebtJournalLine.OverdueAmountCur / custVendTrans.AmountCur * vatAmountCur, custVendTrans.CurrencyCode);
        }

        _overdueDebtJournalLine.OverdueTaxAmountCur = overdueTaxAmountCur;
        _overdueDebtJournalLine.OverdueTaxAmountMST = overdueTaxAmountMST;

        reverseTaxAmountCur  += overdueTaxAmountCur;
        reverseTaxAmountMST  += overdueTaxAmountMST;
        reverseAmountCur     += _overdueDebtJournalLine.OverdueAmountCur;
        reverseAmountMST     += _overdueDebtJournalLine.OverdueAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates latest date transactions on which will be chosen for processing.
    /// </summary>
    /// <returns>
    /// Date value.
    /// </returns>
    private ToDate calcToDate()
    {
        return dfTransDate.value() - overdueJournalSettings.MinDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVATAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total VAT amount on invoice.
    /// </summary>
    /// <param name="_custVendTrans">
    /// <c>CustVendTrans</c> record which relates to invoice.
    /// </param>
    private void calcVATAmount(CustVendTrans _custVendTrans)
    {
        TaxTrans        taxTrans;
        TaxTable        taxTable;
        
        if (!vatAmountCur)
        {
            while select
                    SourceRegulateAmountCur,
                    TaxInCostPriceRegulated,
                    SourceTaxAmountCur,
                    TaxInCostPrice,
                    TaxAmount
                from taxTrans
                where taxTrans.Voucher   == _custVendTrans.Voucher   &&
                      taxTrans.TransDate == _custVendTrans.TransDate &&
                     (taxTrans.TaxDirection == TaxDirection::IncomingTax ||
                      taxTrans.TaxDirection == TaxDirection::OutgoingTax)
                join TableId from taxTable
                    where taxTable.TaxCode == taxTrans.TaxCode &&
                         (taxTable.TaxType_W == TaxType_W::VAT ||
                          taxTable.TaxType_W == TaxType_W::VATReduced ||
                          taxTable.TaxType_W == TaxType_W::VATZero)
            {
                if (taxTrans.SourceRegulateAmountCur)
                    vatAmountCur += taxTrans.SourceRegulateAmountCur;
                else
                    vatAmountCur += taxTrans.SourceTaxAmountCur;

                if (taxTrans.TaxInCostPriceRegulated)
                {
                    vatAmountCur -= taxTrans.TaxInCostPriceRegulated;
                }
                else
                {
                    vatAmountCur -= taxTrans.TaxInCostPrice;
                }

                vatAmountMST += (taxTrans.TaxAmount - taxTrans.TaxInCostPrice);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates dialog window.
    /// </summary>
    /// <returns>
    /// <c>DialogRunBase</c> object.
    /// </returns>
    public Object dialog()
    {
        dialog = super();

        //following lines equivalent to: dfTransDate = dialog.addFieldValue(typeid(TransDate), systemDateGet());
        DictType dictType = new DictType(extendedTypeNum(TransDate));
        dfTransDate = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), dictType.label(), "@SYS14475");
        dfTransDate.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(OverdueVATJournalCreate_W, fld990_1_modified), this);
        
        dialog.addGroup("@SYS40");
        dfFromDate = dialog.addFieldValue(extendedTypeStr(FromDate), this.calcFromDate());
        dfToDate   = dialog.addFieldValue(extendedTypeStr(ToDate), this.calcToDate());

        dfFromDate.allowEdit(false);
        dfToDate.allowEdit(false);

        dfDescription = dialog.addField(extendedTypeStr(Description));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld990_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets values to "From date" and "To date" fields when date of journal modified.
    /// </summary>
    /// <param name = "_ctrl">The associated date control.</param>
    /// <returns>
    /// True if modified succeed; Otherwise false.
    /// </returns>
    public boolean fld990_1_modified(FormDateControl _ctrl)  // dfTransDate
    {
        boolean ret;

        ret = _ctrl.modified();

        if (ret)
        {
            dfFromDate.value(this.calcFromDate());
            dfToDate.value(this.calcToDate());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets values from dialog.
    /// </summary>
    /// <returns>
    /// Boolean value.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        transDate  = dfTransDate.value();
        description = dfDescription.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOverdueTurnJournalLine</Name>
				<Source><![CDATA[
    protected OverdueTurnJournalLine_W initOverdueTurnJournalLine(OverdueDebtJournalLine_W _previousDebtLine, OverdueDebtJournalLine_W _currentDebtLine)
    {
        OverdueTurnJournalLine_W overdueTurnJournalLine;

        overdueTurnJournalLine = super(_previousDebtLine, _currentDebtLine);
        overdueTurnJournalLine.Exclude = this.isInvoiceExcluded(overdueTurnJournalLine.TransRefRecId);

        return overdueTurnJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceExcluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if Excluded mark must be set on debt line.
    /// </summary>
    /// <param name="_custVendTransRefRecId">
    /// <c>RecId</c> of <c>CustVendTrans</c> which related to invoice.
    /// </param>
    /// <returns>
    /// True if "Excluded" mark must be set; Otherwise false.
    /// </returns>
    /// <remarks>
    /// The mark must be set only if lines with that mark exist in previous journals and not exist lines by that invoice where mark is not set.
    /// The second condition means that despite line originally was excluded, but then in next journal excluded mark was removed.
    /// </remarks>
    protected boolean isInvoiceExcluded(RefRecId _custVendTransRefRecId)
    {
        OverdueTurnJournalLine_W    line  = this.overdueTurnJournalLine();
        OverdueJournalTable_W       table = this.overdueJournalTable();
        
        select firstonly Exclude from line
            order by Exclude
            where line.TransRefRecId == _custVendTransRefRecId
        exists join table
            where table.JournalId == line.JournalId &&
                  table.Cancelled == NoYes::No;

        return line.Exclude;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if new <c>OverdueTurnJournalLine_W</c> line must be created.
    /// </summary>
    /// <param name="_overdueTurnJournalLine">
    /// <c>OverdueTurnJournalLine_W</c> which is checked.
    /// </param>
    /// <returns>
    /// True if line must be created; Otherwise false.
    /// </returns>
    protected boolean mustCreateLine(OverdueTurnJournalLine_W _overdueTurnJournalLine)
    {
        return _overdueTurnJournalLine.OverdueTaxAmountCur ||
               _overdueTurnJournalLine.OverdueTaxAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        overdueJournalSettings = OverdueJournalSettings_W::findJournalType(this.journalType());

        Query query = new Query();
        QueryBuildDataSource qbdsCustVendTrans = query.addDataSource(this.custVendTransTableId());
        qbdsCustVendTrans.addRange(this.invoiceFieldId()).value(SysQuery::valueNotEmptyString());
        qbdsCustVendTrans.addSortField(fieldNum(Common, RecId));
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChosenDebtLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax amounts and sets excluded mark to chosen overdue debt lines.
    /// </summary>
    /// <param name="_debtLinesList">
    /// <c>RecordSortedList</c> object, which contains records which must be processed.
    /// </param>
    /// <returns>
    /// <c>RecordSortedList</c> object.
    /// </returns>
    protected RecordSortedList processChosenDebtLines(RecordSortedList _debtLinesList)
    {
        boolean     nextLine;
        RefRecId    prevRefRecId;
        
        nextLine = _debtLinesList.first(overdueDebtJournalLine);

        while (nextLine)
        {
            if (prevRefRecId != overdueDebtJournalLine.TransRefRecId)
            {
                this.resetAmounts();

                prevRefRecId         = overdueDebtJournalLine.TransRefRecId;
            }

            this.calcTaxAmount(overdueDebtJournalLine);
            _debtLinesList.ins(overdueDebtJournalLine, true);

            nextLine = _debtLinesList.next(overdueDebtJournalLine);
        }
        return _debtLinesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>QueryRun</c>, which is used by the <c>QueryPrompt</c>.
    /// </summary>
    /// <returns>
    /// The <c>QueryRun</c>, which is used by the <c>QueryPrompt</c>.
    /// </returns>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets amounts used for tax calculation to zero values.
    /// </summary>
    private void resetAmounts()
    {
        reverseTaxAmountCur  = 0;
        reverseTaxAmountMST  = 0;
        reverseAmountCur     = 0;
        reverseAmountMST     = 0;
        vatAmountCur         = 0;
        vatAmountMST         = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a Select button is to be added to the dialog.
    /// </summary>
    /// <returns>Always true.</returns>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates values entered at the dialog.
    /// </summary>
    /// <param name="calledFrom">
    /// called object.
    /// </param>
    /// <returns>
    /// True if check succeed; Otherwise false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (!transDate)
        {
            ret = checkFailed("@SYS24455");
        }

        if (previousJournalTable.TransDate >= transDate)
        {
            ret = checkFailed("@SYS4003608");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>