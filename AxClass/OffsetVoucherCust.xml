<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OffsetVoucherCust</Name>
	<SourceCode>
		<Declaration><![CDATA[
class OffsetVoucherCust extends OffsetVoucher
{
    CustTrans custTrans;
    private boolean isAutoSettled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfCanBeSettled_RU</Name>
				<Source><![CDATA[
    protected boolean checkIfCanBeSettled_RU(
        CustVendTrans _custTransDebet,
        CustVendTrans _custTransCredit)
    {
        TransDate settleDate;
        CustTrans custTransDebit = _custTransDebet;
        CustTrans custTransCredit =_custTransCredit;
        switch (datePrinciple)
        {
            case SettleDatePrinc::DaysDate:
                settleDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                break;
            case SettleDatePrinc::SelectDate:
                settleDate = datePrincipleSaveDate;
                break;
            case SettleDatePrinc::DateOfPayment:
                settleDate = max(custTransDebit.TransDate, custTransCredit.TransDate);
                break;
        }

        settleDate = max(settleDate, max(custTransDebit.TransDate, custTransCredit.TransDate));
        return CustTrans::checkIfCanBeSettled_RU(custTransDebit, custTransCredit, settleDate, CustVendTransPostingLog_RU::usePostingLog(), dimSettlementType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAutoSettlementQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customized settlement query based on the attributes selected by user.
    /// </summary>
    /// <param name="_custSettlementPriorityProcessing">
    ///    The <c>CustSettlementPriorityProcessing</c> object.
    /// </param>
    /// <param name="_settlementPriority">
    /// This indicates whether the settlement priority is turned on.
    /// </param>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> map holding customer transaction.
    /// </param>
    /// <returns>
    /// Returns the records of the <c>TmpCustOpenLines</c> table.
    /// </returns>
    protected Query getAutoSettlementQuery(CustSettlementPriorityProcessing _custSettlementPriorityProcessing, NoYes _settlementPriority, CustVendTrans _custVendTrans)
    {
        Query query;
        CustSettlementPriority custSettlementPriority;
        QueryBuildDataSource qbdsCustTransOpen;
        QueryBuildDataSource qbdsCustTrans;
        QueryBuildRange range;

        // Creating query for iterating open transactions
        query = new Query(queryStr(custAutoSettlement));
        qbdsCustTransOpen = query.dataSourceTable(tableNum(CustTransOpen));
        qbdsCustTrans = query.dataSourceTable(tableNum(CustTrans));

        // defining static ranges and their values
        range = qbdsCustTransOpen.addRange(fieldNum(CustTransOpen, AccountNum));
        range.value(SysQuery::value(_custVendTrans.AccountNum));
        range = qbdsCustTrans.addRange(fieldNum(CustTrans, RecId));
        range.value(SysQuery::valueNot(_custVendTrans.RecId));
        range = qbdsCustTrans.addRange(fieldNum(CustTrans, Approved));
        range.value(SysQuery::value(NoYes::Yes));
        range = qbdsCustTrans.addRange(fieldNum(CustTrans, Settlement));
        range.value(SysQuery::value(NoYes::Yes));
        range = qbdsCustTrans.addRange(fieldNum(CustTrans, Prepayment));
        range.value(SysQuery::value(NoYes::No));
        range = qbdsCustTrans.addRange(fieldNum(CustTrans, AccountNum));
        range.value(SysQuery::value(_custVendTrans.AccountNum));

        if (_settlementPriority)
        {
            while select Attribute, Direction from custSettlementPriority order by Priority desc where custSettlementPriority.Enabled == NoYes::Yes
            {
                this.updateQueryRangeOrderByForAutoSettlementQuery(query, _custSettlementPriorityProcessing, custSettlementPriority);
            }
        }
        else
        {
            _custSettlementPriorityProcessing.parmQueryBuildDataSource(query.dataSourceTable(tableNum(CustTransOpen)));
            _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTransOpen, DueDate), CustSettlementAttributeDirection::Ascending);
            _custSettlementPriorityProcessing.parmQueryBuildDataSource(query.dataSourceTable(tableNum(CustTrans)));
            _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTrans, Voucher), CustSettlementAttributeDirection::Ascending);
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRangeOrderByForAutoSettlementQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the query range order by for the auto settlement query.
    /// </summary>
    /// <param name = "_query">The quto settlement query.</param>
    /// <param name = "_custSettlementPriorityProcessing">The customer settlement priority processing.</param>
    /// <param name = "_custSettlementPriority">The customer settlement priority.</param>
    protected void updateQueryRangeOrderByForAutoSettlementQuery(
        Query _query,
        CustSettlementPriorityProcessing _custSettlementPriorityProcessing,
        CustSettlementPriority _custSettlementPriority)
    {
        switch (_custSettlementPriority.Attribute)
        {
            case CustSettlementPriorityAttribute::TranscationAmount:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_query.dataSourceTable(tableNum(CustTransOpen)));
                _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTransOpen, AmountCur), _custSettlementPriority.Direction);
                break;

            case CustSettlementPriorityAttribute::CashDiscountDate:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_query.dataSourceTable(tableNum(CustTransOpen)));
                _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTransOpen, SettlementPriorityCashDiscDate), _custSettlementPriority.Direction);
                break;

            case CustSettlementPriorityAttribute::DueDate:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_query.dataSourceTable(tableNum(CustTransOpen)));
                _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTransOpen, DueDate), _custSettlementPriority.Direction);
                break;

            case CustSettlementPriorityAttribute::Billing:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_query.dataSourceTable(tableNum(CustBillingClassification)));
                _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustBillingClassification, SettlementPriority), _custSettlementPriority.Direction);
                break;

            case CustSettlementPriorityAttribute::TransactionType:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_query.dataSourceTable(tableNum(CustSettlementTransactionPriority)));
                _custSettlementPriorityProcessing.parmQueryBuildDataSource().addOrderByField(fieldNum(CustSettlementTransactionPriority, Priority), SortOrder::Descending);
                break;

            case CustSettlementPriorityAttribute::TransactionDate:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_query.dataSourceTable(tableNum(CustTrans)));
                _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTrans, TransDate), _custSettlementPriority.Direction);
                break;

            case CustSettlementPriorityAttribute::Voucher:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_query.dataSourceTable(tableNum(CustTrans)));
                _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTrans, Voucher), _custSettlementPriority.Direction);
                break;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxMSTDiff</Name>
				<Source><![CDATA[
    protected AmountCur maxMSTDiff()
    {
        return CustParameters::find().MaxMSTDiff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBeAutoSettled</Name>
				<Source><![CDATA[
    protected boolean mayBeAutoSettled(SettlementType settlementType = SettlementType::None)
    {
        boolean mayBeAutoSettled;

        // Sales order/Freetext MCR populates the MCRPaymOrderID.
        // Selected transactions from sales orders, free text should not be auto settled
        // as in MCR we match them up with their payments. One way to decipher if this
        // selected transaction is from MCR is to check the MCRPaymOrderID.
        boolean isMCRTransaction = custVendTrans.MCRPaymOrderID != ""
            && isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter))
            && RetailMCRChannelTable::findForCurrentUser().MCREnableOrderCompletion;

        if (isMCRTransaction &&
            (settlementType == SettlementType::OpenTransact || settlementType == SettlementType::SelectedTransact))
        {
            mayBeAutoSettled = false;
        }
        else if (settlementType == SettlementType::OpenTransact)
        {
            mayBeAutoSettled = true;
        }
        else
        {
            mayBeAutoSettled = CustParameters::find().AutoSettle;
        }

        return mayBeAutoSettled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SettlementType settlementType, Common common)
    {
        custVendTrans = custTrans;

        super(settlementType,
              common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the Customer open transactions based on the settlement priority.
    /// </summary>
    /// <param name="_custVendTrans">
    ///    The <c>CustVendTrans</c> map holding customer transaction.
    /// </param>
    /// <param name="_settlementType">
    ///    The <c>SettlmentType</c> base enumeration value.
    /// </param>
    /// <remarks>
    ///    This is the overridden method and performs automatic settlement of customer open transactions only
    ///    when the settlement priority is enabled.Otherwise it calls its super and returns.
    /// </remarks>
    public void updateNow(CustVendTrans _custVendTrans, SettlementType _settlementType)
    {
        CustVendTrans trans = _custVendTrans.data();
        CustVendTransOpen custVendTransOpen = _custVendTrans.transOpen();

        if (CustParameters::find().UsePriorityOnAutoSettlement == NoYes::No)
        {
            super(_custVendTrans, _settlementType);
            return;
        }
        else
        {
            custVendTrans = _custVendTrans;
        }

        // Create query for iterating open transactions
        Query openTransactionQuery = this.getOpenTransactionQuery(_custVendTrans);

        // Add all the companies in the centralized payments hierarchy.
        this.updateCompanyRangeForOpenTransactionQuery(openTransactionQuery, custVendTransOpen);
        
        // Create priority processing
        CustSettlementPriorityProcessing custSettlementPriorityProcessing;
        CustBillingClassification custVendBillingClassification;
        SpecTransManager specTransManager;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            specTransManager = SpecTransManager::newFromSpec(specCommon);
            custVendBillingClassification = CustBillingClassification::find(trans.CustBillingClassification);

            custSettlementPriorityProcessing = CustSettlementPriorityProcessing::constructOffsetVoucherCust(openTransactionQuery, specTransManager);
        }
        else
        {
            custSettlementPriorityProcessing = CustSettlementPriorityProcessing::constructOffsetVoucherCust(openTransactionQuery);
        }

        if (CustSettlementPriority::findByAttribute(CustSettlementPriorityAttribute::CashDiscountDate).Enabled)
        {
            custSettlementPriorityProcessing.calcSettlementPriorityCashDiscDate(custVendTransOpen.TransDate);
        }

        isAutoSettled = this.canMarkOpenTransactionsBasedOnSettlementPriority(_custVendTrans, custVendTransOpen, _settlementType);
        if (!isAutoSettled)
        {
            return;
        }

        // Update the query
        CustSettlementPriority custSettlementPriority;
        while select Attribute, Direction from custSettlementPriority order by Priority desc where custSettlementPriority.Enabled == NoYes::Yes
        {
            this.updateQueryRangeOrderByForOpenTransactionQuery(openTransactionQuery, custSettlementPriorityProcessing, custSettlementPriority);
        }

        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        RefRecId custTableRecId = CustTable::find(trans.AccountNum).RecId;

        CustTransOpen openTrans;
        QueryRun queryRun;
        AmountCur amountToSettle;
        boolean allowMarking = true;
        boolean shouldMarkOpenInvoiceLinesByBillingCode;
        CustBillingClassification custTransBillingClassification;
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::AutosettlementMarkByBillingCode))
            {
                activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyAutoSettlementContext, int642Str(custTableRecId));

                queryRun = new QueryRun(this.getAutoSettlementQuery(custSettlementPriorityProcessing, CustParameters::find().UseSettlementPriority, _custVendTrans));

                CustParameters custParameters = CustParameters::findByCompany(specCommon.company());

                shouldMarkOpenInvoiceLinesByBillingCode = this.shouldMarkOpenInvoiceLinesByInvoiceLineBillingCode(custParameters);

                if (shouldMarkOpenInvoiceLinesByBillingCode)
                {
                    if (custVendTransOpen.AmountCur > 0 )
                    {
                        while (queryRun.next())
                        {
                            openTrans = queryRun.get(tableNum(CustTransOpen));
                            trans = openTrans.custTrans();
                            custTransBillingClassification = CustBillingClassification::find(trans.CustBillingClassification);

                            if (openTrans.AmountCur < 0)
                            {
                                if (custTransBillingClassification.RestrictCreditNote)
                                {
                                    if (custVendBillingClassification.RecId == custTransBillingClassification.RecId)
                                    {
                                        allowMarking = true;
                                        amountToSettle  += abs(openTrans.AmountCur);
                                        paymentAmount  += this.markTransaction(_custVendTrans, trans, custVendTransOpen, openTrans.data());
                                    }
                                    else
                                    {
                                        allowMarking = false;
                                    }
                                }
                                else
                                {
                                    allowMarking = true;
                                    amountToSettle  += abs(openTrans.AmountCur);
                                    paymentAmount  += this.markTransaction(_custVendTrans, trans, custVendTransOpen, openTrans.data());
                                }
                            }
                        }
                    }
                    else
                    {
                        amountToSettle = custVendTransOpen.AmountCur;
                    }

                    // Credit note amount is passed as amount to settle
                    if (this.shouldInsertAllLinesAccrossInvoices(allowMarking, _custVendTrans, custVendTransOpen, custVendBillingClassification, custSettlementPriorityProcessing, amountToSettle))
                    {
                        paymentAmount = this.insertAllLinesAccrossInvoices(_custVendTrans, custVendTransOpen, custVendBillingClassification, custSettlementPriorityProcessing, amountToSettle);
                    }
                }
            }
        }
        else
        {
            queryRun = new QueryRun(openTransactionQuery);
        }

        if (paymentAmount != 0 || !shouldMarkOpenInvoiceLinesByBillingCode || !isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (paymentAmount != 0 && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                paymentAmount = abs(custVendTransOpen.AmountCur) - abs(paymentAmount);
            }

            using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::AutosettlementMarkByPriority))
            {
                activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyAutoSettlementContext, int642Str(custTableRecId));

                while (queryRun.next())
                {
                    openTrans = queryRun.get(tableNum(CustTransOpen));
                    trans = openTrans.custTrans();

                    parmUseDatePrinciple = false;

                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                    {
                        custTransBillingClassification = CustBillingClassification::find(trans.CustBillingClassification);

                        if (custVendTransOpen.AmountCur < 0)
                        {
                            if (custVendBillingClassification.RestrictCreditNote)
                            {
                                if (custVendBillingClassification.RecId != custTransBillingClassification.RecId)
                                {
                                    allowMarking = false;
                                }
                                else
                                {
                                    allowMarking = true;
                                }
                            }
                        }
                        else
                        {
                            if (custTransBillingClassification.RestrictCreditNote)
                            {
                                if (custVendBillingClassification.RecId != custTransBillingClassification.RecId)
                                {
                                    allowMarking = false;
                                }
                                else
                                {
                                    allowMarking = true;
                                }
                            }
                            else
                            {
                                allowMarking = true;
                            }
                        }
                        if (allowMarking)
                        {
                            paymentAmount  += this.markTransaction(_custVendTrans, trans, custVendTransOpen, openTrans.data());
                        }
                    }
                    else
                    {
                        paymentAmount  += this.markTransaction(_custVendTrans, trans, custVendTransOpen, openTrans.data());
                    }

                    if (abs(custVendTransOpen.AmountCur) <= abs(paymentAmount))
                    {
                        // if payment amount is exhausted, exit inner loop
                        boolean isExhausted = true;
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsAutoSettled</Name>
				<Source><![CDATA[
    public boolean getIsAutoSettled()
    {
        return isAutoSettled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpenTransactionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the open transaction query.
    /// </summary>
    /// <param name = "_custVendTrans">The customer or vendor transaction.</param>
    /// <returns>The open transaction query.</returns>
    protected Query getOpenTransactionQuery(CustVendTrans _custVendTrans)
    {
        /*
         *  Query structure.
         *
         *  CustTransOpen (root)
         *  |-- CustTrans
         *      |-- CustTable
         *      |-- CustLedgerTransMapping
         *          |-- CustSettlementTransactionPriority
         */

        // Creating query for iterating open transactions
        Query openTransactionQuery = new Query();
        openTransactionQuery.allowCrossCompany(true);

        QueryBuildDataSource qbdsCustTransOpen = openTransactionQuery.addDataSource(tableNum(CustTransOpen));

        QueryBuildDataSource qbdsCustTrans = qbdsCustTransOpen.addDataSource(tableNum(CustTrans));
        qbdsCustTrans.relations(true);
        qbdsCustTrans.joinMode(JoinMode::InnerJoin);

        QueryBuildDataSource qbdsCustTable = qbdsCustTrans.addDataSource(tableNum(CustTable));
        qbdsCustTable.joinMode(JoinMode::InnerJoin);
        qbdsCustTable.fetchMode(QueryFetchMode::One2One);
        qbdsCustTable.addLink(fieldNum(CustTrans, AccountNum), fieldNum(CustTable, AccountNum));

        QueryBuildDataSource qbdsCustLedgerTransTypeMapping = qbdsCustTrans.addDataSource(tableNum(CustLedgerTransTypeMapping));
        qbdsCustLedgerTransTypeMapping.joinMode(JoinMode::OuterJoin);
        qbdsCustLedgerTransTypeMapping.fetchMode(QueryFetchMode::One2One);
        qbdsCustLedgerTransTypeMapping.addLink(fieldNum(CustTrans, TransType), fieldNum(CustLedgerTransTypeMapping, LedgerTransType));

        QueryBuildDataSource qbdsCustSettlementTransactionPriority = qbdsCustLedgerTransTypeMapping.addDataSource(tableNum(CustSettlementTransactionPriority));
        qbdsCustSettlementTransactionPriority.joinMode(JoinMode::OuterJoin);
        qbdsCustSettlementTransactionPriority.fetchMode(QueryFetchMode::One2One);
        qbdsCustSettlementTransactionPriority.addLink(fieldNum(CustLedgerTransTypeMapping, CustSettleTransType), fieldNum(CustSettlementTransactionPriority, TransactionType));

        // Defining static ranges and their values
        // Range on customer's Party to find customers in other companies.
        DirPartyRecId customerParty = CustTable::find(_custVendTrans.AccountNum).Party;
        QueryBuildRange range = qbdsCustTable.addRange(fieldNum(CustTable, Party));
        range.value(SysQuery::value(customerParty));

        // Exclude the current CustVendTrans record.
        range = qbdsCustTrans.addRange(fieldNum(CustTrans, RecId));
        range.value(SysQuery::valueNot(_custVendTrans.RecId));

        // CustTrans w/ these attributes.
        range = qbdsCustTrans.addRange(fieldNum(CustTrans, Approved));
        range.value(SysQuery::value(NoYes::Yes));
        range = qbdsCustTrans.addRange(fieldNum(CustTrans, Settlement));
        range.value(SysQuery::value(NoYes::Yes));
        range = qbdsCustTrans.addRange(fieldNum(CustTrans, Prepayment));
        range.value(SysQuery::value(NoYes::No));

        // Use the CustSettlementTransactionPriority as defined by the current company context.
        range = qbdsCustSettlementTransactionPriority.addRange(fieldNum(CustSettlementTransactionPriority, Company));
        range.value(queryValue(curExt()));

        if (!isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (!SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
            {
                range = qbdsCustTrans.addRange(fieldNum(CustTrans, Prepayment));
                range.value(SysQuery::value(NoYes::No));
            }

            boolean countryRegion_RUEE = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL]);
            if (countryRegion_RUEE)
            {
                findOrCreateRange_W(qbdsCustTransOpen, fieldNum(CustTransOpen, DueDate), SysQuery::range(parmDateFrom, parmDateTo));
            }
        }

        return openTransactionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRangeOrderByForOpenTransactionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the open transaction query range order by based on the customer settlement priority.
    /// </summary>
    /// <param name = "_openTransactionQuery">The open transaction query.</param>
    /// <param name = "_custSettlementPriorityProcessing">The customer settlement priority processing.</param>
    /// <param name = "_custSettlementPriority">The customer settlement priority.</param>
    protected void updateQueryRangeOrderByForOpenTransactionQuery(
        Query _openTransactionQuery,
        CustSettlementPriorityProcessing _custSettlementPriorityProcessing,
        CustSettlementPriority _custSettlementPriority)
    {
        switch (_custSettlementPriority.Attribute)
        {
            case CustSettlementPriorityAttribute::TranscationAmount:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_openTransactionQuery.dataSourceTable(tableNum(CustTransOpen)));
                _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTransOpen, AmountCur), _custSettlementPriority.Direction);
                break;

            case CustSettlementPriorityAttribute::CashDiscountDate:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_openTransactionQuery.dataSourceTable(tableNum(CustTransOpen)));
                _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTransOpen, SettlementPriorityCashDiscDate), _custSettlementPriority.Direction);
                break;

            case CustSettlementPriorityAttribute::DueDate:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_openTransactionQuery.dataSourceTable(tableNum(CustTransOpen)));
                _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTransOpen, DueDate), _custSettlementPriority.Direction);
                break;

            case CustSettlementPriorityAttribute::TransactionType:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_openTransactionQuery.dataSourceTable(tableNum(CustSettlementTransactionPriority)));
                _custSettlementPriorityProcessing.parmQueryBuildDataSource().addOrderByField(fieldNum(CustSettlementTransactionPriority, Priority), SortOrder::Descending);
                break;

            case CustSettlementPriorityAttribute::TransactionDate:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_openTransactionQuery.dataSourceTable(tableNum(CustTrans)));
                _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTrans, TransDate), _custSettlementPriority.Direction);
                break;

            case CustSettlementPriorityAttribute::Voucher:
                _custSettlementPriorityProcessing.parmQueryBuildDataSource(_openTransactionQuery.dataSourceTable(tableNum(CustTrans)));
                _custSettlementPriorityProcessing.updateQueryRangeOrderBy(fieldNum(CustTrans, Voucher), _custSettlementPriority.Direction);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCompanyRangeForOpenTransactionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the company range for the open transaction query.
    /// </summary>
    /// <param name = "_openTransactionQuery">The open transaction query.</param>
    /// <param name = "_custVendTransOpen">The customer open customer or vendor transaction.</param>
    protected void updateCompanyRangeForOpenTransactionQuery(Query _openTransactionQuery, CustVendTransOpen _custVendTransOpen)
    {
        container companyList;
        int i;

        _openTransactionQuery.clearCompanyRange();

        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        {
            companyList = CustVendOpenTransManager::findSharedServiceCompanies(_custVendTransOpen.company());

            for (i = 1; i <= conLen(companyList); i++)
            {
                _openTransactionQuery.addCompanyRange(conPeek(companyList, i));
            }
        }
        else
        {
            _openTransactionQuery.addCompanyRange(curext());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMarkOpenTransactionsBasedOnSettlementPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Can mark open transactions based on the settlement priority.
    /// </summary>
    /// <param name = "_custVendTrans">The customer or vendor transaction.</param>
    /// <param name = "_custVendTransOpen">The open customer or vendor transaction.</param>
    /// <param name = "_settlementType">The settlement type.</param>
    /// <returns>True when the invoices can be marked based on settlement priority.</returns>
    protected boolean canMarkOpenTransactionsBasedOnSettlementPriority(CustVendTrans _custVendTrans, CustVendTransOpen _custVendTransOpen, SettlementType _settlementType)
    {
        boolean ret;

        if (!SpecTrans::existOtherRefRecords(specCommon.company(), specCommon.TableId, specCommon.RecId, _custVendTransOpen.company(), _custVendTransOpen.TableId, _custVendTransOpen.RecId) &&
            _custVendTrans.Prepayment == NoYes::No &&
            _custVendTrans.Approved == NoYes::Yes &&
            _custVendTrans.Settlement == NoYes::Yes)
        {
            if (this.mayBeAutoSettled(_settlementType))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldMarkOpenInvoiceLinesByInvoiceLineBillingCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should mark open invoice lines by invoice line billing code.
    /// </summary>
    /// <param name = "_custParameters">The customer parameters.</param>
    /// <returns>True when open invoice lines should be marked by invoice line billing code; otherwise false.</returns>
    protected boolean shouldMarkOpenInvoiceLinesByInvoiceLineBillingCode(CustParameters _custParameters)
    {
        boolean ret;

        if (_custParameters.MarkOpenInvoiceLine == NoYes::Yes
            && _custParameters.SpanBillingCodeAcrossInvoices == NoYes::Yes
            && _custParameters.InvoiceLinePriority == CustInvoiceLinePriority::BillingCode)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInsertAllLinesAccrossInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should insert all lines across invoices.
    /// </summary>
    /// <param name = "_allowMarking">Allow marking.</param>
    /// <param name = "_custVendTrans">The customer or vendor transaction.</param>
    /// <param name = "_custVendTransOpen">The open customer or vendor transaction.</param>
    /// <param name = "_custVendBillingClassification">The customer or vendor billing classification.</param>
    /// <param name = "_custSettlementPriorityProcessing">The customer settlement priority processing.</param>
    /// <param name = "_amountToSettle">The amount to settle.</param>
    /// <returns>True when all lines should be inserted across invoices; otherwise false.</returns>
    protected boolean shouldInsertAllLinesAccrossInvoices(
        boolean _allowMarking,
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen,
        CustBillingClassification _custVendBillingClassification,
        CustSettlementPriorityProcessing _custSettlementPriorityProcessing,
        AmountCur _amountToSettle)
    {
        boolean ret;

        if (_allowMarking && _custVendTransOpen.AmountCur < 0)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAllLinesAccrossInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert all lines across invoices.
    /// </summary>
    /// <param name = "_custVendTrans">The customer or vendor transaction.</param>
    /// <param name = "_custVendTransOpen">The open customer or vendor transaction.</param>
    /// <param name = "_custVendBillingClassification">The customer or vendor billing classification.</param>
    /// <param name = "_custSettlementPriorityProcessing">The customer settlement priority processing.</param>
    /// <param name = "_amountToSettle">The amount to settle.</param>
    /// <returns>Returns the remaining settlement amount.</returns>
    protected AmountCur insertAllLinesAccrossInvoices(
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen,
        CustBillingClassification _custVendBillingClassification,
        CustSettlementPriorityProcessing _custSettlementPriorityProcessing,
        AmountCur _amountToSettle)
    {
        AmountCur payment = _custSettlementPriorityProcessing.insertAllLinesAccrossInvoices(
            abs(_amountToSettle),
            _custVendTrans.AccountNum,
            _custVendBillingClassification.RestrictCreditNote,
            _custVendBillingClassification);

        return payment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>