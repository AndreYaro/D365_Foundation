<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPurchaseOrderDPDimHistoryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchPurchaseOrderDPDimHistoryBuilder</c> class builds the storage dimension and the data to be entered to temporary table for the <c>PurchPurchaseOrderDP</c> class.
/// </summary>
class PurchPurchaseOrderDPDimHistoryBuilder extends SalesPurchDimHistoryBuilder
{
    private PurchTableAllVersions purchTableAllVersions;
    private PurchLineAllVersions purchLineAllVersions;
    private PurchaseOrderId purchaseOrderId;
        
    private boolean isProforma;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIsProforma</Name>
				<Source><![CDATA[
    public boolean parmIsProforma(boolean _isProforma = isProforma)
    {
        isProforma = _isProforma;
        return isProforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseOrderId</Name>
				<Source><![CDATA[
    public PurchaseOrderId parmPurchaseOrderId(PurchaseOrderId _purchaseOrderId = purchaseOrderId)
    {
        purchaseOrderId = _purchaseOrderId;
        return purchaseOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTableAllVersions</Name>
				<Source><![CDATA[
    public PurchTableAllVersions parmPurchTableAllVersions(PurchTableAllVersions _purchTableAllVersions = purchTableAllVersions)
    {
        purchTableAllVersions = _purchTableAllVersions;
        return purchTableAllVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLineAllVersions</Name>
				<Source><![CDATA[
    public PurchLineAllVersions parmPurchLineAllVersions(PurchLineAllVersions _purchLineAllVersions = purchLineAllVersions)
    {
        purchLineAllVersions = _purchLineAllVersions;
        return purchLineAllVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return purchLineAllVersions.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionStringForVersion</Name>
				<Source><![CDATA[
    protected void buildDimensionStringForVersion()
    {
        InventReportDimHistory inventReportDimHistory;
        InventDim inventDim;

        while select inventReportDimHistory
            where inventReportDimHistory.InventTransId      == purchLineAllVersions.InventTransId &&
                  inventReportDimHistory.TransRefId         == purchaseOrderId &&
                  inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::PurchPurchaseOrder
            join inventDim
                    where inventDim.InventDimId        == inventReportDimHistory.InventDimId
        {
            this.inventDimPrint(inventReportDimHistory.Qty, inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    protected LanguageId languageId()
    {
        return purchTableAllVersions.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQuantity</Name>
				<Source><![CDATA[
    protected Qty lineQuantity()
    {
        return purchLineAllVersions.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUnitOfMeasure</Name>
				<Source><![CDATA[
    protected UnitOfMeasureSymbol lineUnitOfMeasure()
    {
        return purchLineAllVersions.PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProformaDimensionStringForStockedProduct</Name>
				<Source><![CDATA[
    protected void buildProformaDimensionStringForStockedProduct()
    {
        InventQty qtyRemain = purchLineAllVersions.QtyOrdered;

        if (qtyRemain)
        {
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;
            InventDim inventDim;

            while select inventTransOrigin
                where inventTransOrigin.InventTransId    == purchLineAllVersions.InventTransId &&
                    inventTransOrigin.ReferenceCategory  == InventTransType::Purch
                join inventTrans
                    order by StatusReceipt, InventDimId
                    where inventTrans.InventTransOrigin  == inventTransOrigin.RecId &&
                        inventTrans.StatusReceipt        == StatusReceipt::Ordered &&
                        inventTrans.StatusIssue          == StatusIssue::None
                join inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
            {
                if (this.mustPrintTransactionQuantity(inventTransOrigin, inventTrans, inventDim))
                {
                    qtyRemain = this.inventDimPrintForTransaction(qtyRemain, inventTrans.Qty, inventDim);

                    if (!qtyRemain)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    protected boolean isProforma()
    {
        return isProforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockedProduct</Name>
				<Source><![CDATA[
    protected boolean isStockedProduct()
    {
        return purchLineAllVersions.StockedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchPurchaseOrderDPDimHistoryBuilder construct()
    {
        return new PurchPurchaseOrderDPDimHistoryBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>