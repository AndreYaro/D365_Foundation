<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatalogUIActionHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the UI action for catalogs.
/// </summary>
class CatalogUIActionHandler
{
    boolean calledFromListForm;
    Catalog catalog;
    FormRun callerForm;
    FormDataSource callerDS;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the catalog.
    /// </summary>
    /// <remarks>
    /// Creates a new instance of <c>CatalogManager</c> class and sets the catalog state.
    /// </remarks>
    private void activate()
    {
        CatalogManager catalogManager = CatalogManager::construct(catalog.RecId);

        if (CatalogStateTransitionValidator::canTransition(catalog, CatalogState::Draft, true))
        {
            catalogManager.setCatalogState(CatalogState::Draft, true /*force action*/);
        }
        else
        {
            warning(strFmt("@RET15099", catalog.name()));
        }

        callerDS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new catalog by copying an existing catalog.
    /// </summary>
    private void copy()
    {
        Catalog targetCatalog;
        CatalogManager catalogManager = CatalogManager::construct(catalog.RecId);
        MenuFunction menuFunction;
        Args args = new Args();

        targetCatalog = catalogManager.copyCatalog();

        if (calledFromListForm)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                menuFunction = new MenuFunction(menuitemDisplayStr(RetailCatalogDetails), MenuItemType::Display);
            }
            else
            {
                menuFunction = new MenuFunction(menuitemDisplayStr(CatalogDetails), MenuItemType::Display);
            }

            args.record(args.lookupRecord(targetCatalog));
            menuFunction.openMode(OpenMode::Edit);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a catalog.
    /// </summary>
    /// <remarks>
    /// Shows a message saying catalog cannot be deleted if the catalog is not deleted.
    /// </remarks>
    private void delete()
    {
        CatalogManager catalogManager = CatalogManager::construct(catalog.RecId);
        DialogButton dialogButton;

        if (CatalogStateTransitionValidator::canTransition(catalog, CatalogState::Deleted))
        {
            dialogButton = Box::yesNo("@RET15117", DialogButton::No, "@RET15116");

            if (dialogButton == DialogButton::Yes)
            {
                catalogManager.deleteCatalog();
            }
        }
        else
        {
            warning(strFmt("@RET15100", catalog.name()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>edit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows to open the catalog in edit mode.
    /// </summary>
    /// <returns>rue if user clicks Yes to pop-up and Catalog is moved to Draft state; otherwise, false.</returns>
    public boolean edit()
    {
        CatalogManager catalogManager = CatalogManager::construct(catalog.RecId);

        if (!CatalogStateTransitionValidator::canTransition(catalog, CatalogState::Draft))
        {
            DialogButton dialogButton = Box::yesNo("@RET15042", DialogButton::No, "@RET15043");
            if (dialogButton != DialogButton::Yes)
            {
                // Avoid opening the record in edit mode.
                return false;
            }
        }

        catalogManager.setCatalogState(CatalogState::Draft, true /*force action*/);
        catalogManager.cancelCatalogApprovalWorkflow(catalog.RecId);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inactivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catalog state to inactive.
    /// </summary>
    private void inactivate()
    {
        CatalogManager catalogManager = CatalogManager::construct(catalog.RecId);

        if (CatalogStateTransitionValidator::canTransition(catalog, CatalogState::Inactive))
        {
            catalogManager.setCatalogState(CatalogState::Inactive, false /*force action*/);
        }
        else
        {
            warning(strFmt("@RET15101", catalog.name()));
        }

        callerDS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>publish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publishes the catalog.
    /// </summary>
    private void publish()
    {
        //RetailCatalogPublish
        MenuFunction menuFunction;
        Args args = new Args();

        menuFunction = new MenuFunction(menuitemDisplayStr(RetailCatalogPublish), MenuItemType::Display);
        args.caller(callerForm);
        args.record(catalog);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retracts a catalog. The result is removing the listing from all the channels of the catalog.
    /// </summary>
    private void retract()
    {
        CatalogManager catalogManager = CatalogManager::construct(catalog.RecId);
        DialogButton dialogButton;

        if (CatalogStateTransitionValidator::canTransition(catalog, CatalogState::Retracted))
        {
            dialogButton = Box::yesNo("@RET15118", DialogButton::No, "@RET15119");

            if (dialogButton == DialogButton::Yes)
            {
                catalogManager.retractCatalog();
            }
        }
        else
        {
             warning("@RET15120");
        }

        callerDS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the caller for the catalog.
    /// </summary>
    /// <param name="_caller">
    /// Object of class <c>FormRun</c>.
    /// </param>
    private void setCaller(FormRun _caller)
    {
        callerForm = _caller;

        if (callerForm)
        {
            if (formStr(RetailCatalogDetails) == _caller.name())
            {
                calledFromListForm = true;
            }

            callerDS = callerForm.dataSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catalog information.
    /// </summary>
    /// <param name="_catalog">
    /// Instance of <c>catalog</c> table.
    /// </param>
    public void setCatalog(Catalog _catalog)
    {
        catalog = _catalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CatalogUIActionHandler construct()
    {
        return new CatalogUIActionHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Catalog sourceCatalog = _args.record();
        CatalogUIActionType requestedAction = _args.parmEnum();
        CatalogUIActionHandler handler = CatalogUIActionHandler::construct();
        FormRun callerForm = _args.caller();

        if (!sourceCatalog)
        {
            // No associated record was found.
            error("@RET15082");
            return;
        }

        handler.setCatalog(sourceCatalog);
        handler.setCaller(callerForm);

        switch (requestedAction)
        {
            case CatalogUIActionType::Edit:
                handler.edit();
                break;
            case CatalogUIActionType::Inactivate:
                handler.inactivate();
                break;

            case CatalogUIActionType::Activate:
                handler.activate();
                break;

            case CatalogUIActionType::Copy:
                handler.copy();
                break;

            case CatalogUIActionType::Publish:
                handler.publish();
                break;

            case CatalogUIActionType::Retract:
                handler.retract();
                break;

            case CatalogUIActionType::Delete:
                handler.delete();
                break;

            default:
                warning(strFmt("@RET15110", enum2str(requestedAction)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>