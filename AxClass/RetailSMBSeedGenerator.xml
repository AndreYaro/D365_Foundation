<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSMBSeedGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generates all the data for the RetailSMB configuration.
/// </summary>
class RetailSMBSeedGenerator extends RunBase
{
    #AOT
    #ISOCountryRegionCodes
    #RetailCDX
    #RetailSMB
    #define.FunctionalityProfile('FN001')
    #define.AccountReceivable('130100')
    #define.ChannelDataGroup("@REX4160173")
    public const str InventoryBOMJounalNameId = 'IBOM';
    public const str InventoryBOMJounalName = '@Retail:InventoryBOMJournal';
    private boolean redeployChartOfAccounts = NoYes::Yes;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAddressBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the RetailCust and RetailVend address books.
    /// </summary>
    private void createAddressBook()
    {
        DirAddressBook dirAddressBook;

        // Customer address book not found - create new
        if (!DirAddressBook::find(#CustomerAddressBook))
        {
            ttsbegin;
            dirAddressBook.initValue();
            dirAddressBook.Name = #CustomerAddressBook;
            dirAddressBook.Description = #CustomerAddressBookDesc;
            dirAddressBook.insert();
            ttscommit;
        }

        // Vendor address book not found - create new
        if (!DirAddressBook::find(#VendorAddressBook))
        {
            ttsBegin;
            dirAddressBook.clear();
            dirAddressBook.initValue();
            dirAddressBook.Name = #VendorAddressBook;
            dirAddressBook.Description = #VendorAddressBookDesc;
            dirAddressBook.insert();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBarcodeSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create bar code setup.
    /// </summary>
    private void createBarcodeSetup()
    {
        BarcodeSetup barcodeSetup;

        //We use aliases from RMS as barcodes in AX. Those aliases may be different strings and there are no rules (masks) for them. On the other hand, barcodeSetupId field is mandatory.
        //Creating barcodeSetup that allows different strings for barcodes

        if (!barcodeSetup::find(#barcodeSetupId))
        {
            barcodeSetup.initValue();
            barcodeSetup.barcodeSetupId = #barcodeSetupId;
            barcodeSetup.barcodeType = BarcodeType::NoBarcode;
            barcodeSetup.minimumLength = 0;
            barcodeSetup.maximumLength = 25;
            barcodeSetup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBuyerGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the buyer group.
    /// </summary>
    private void createBuyerGroup()
    {
        InventBuyerGroup        buyerGroup;

        if (!InventBuyerGroup::find(#BuyerGroup))
        {
            buyerGroup.initValue();
            buyerGroup.Group = #BuyerGroup;
            buyerGroup.Description = #BuyerGroup;

            buyerGroup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCDXWorkingFolders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configure CDX file storage provider
    /// </summary>
    private void createCDXWorkingFolders()
    {
        #WinAPI

        RetailCDXFileStorageProvider    cdxFileStorageProvider;
        str                             cdxPath = System.IO.Path::Combine(System.IO.Path::GetPathRoot(System.Environment::get_SystemDirectory()), 'CDX');
        str                             downloadPath = System.IO.Path::Combine(cdxPath, 'Download');
        str                             uploadPath = System.IO.Path::Combine(cdxPath, 'Upload');

        // Create RetailCDXFileStorageProvider record
        select forUpdate cdxFileStorageProvider
            where cdxFileStorageProvider.Name == #TemporaryFileName;

        if (!cdxFileStorageProvider)
        {
            try
            {
                // Create folders
                if (!System.IO.Directory::Exists(cdxPath))
                {
                    System.IO.Directory::CreateDirectory(cdxPath);
                }

                if (!System.IO.Directory::Exists(downloadPath))
                {
                    System.IO.Directory::CreateDirectory(downloadPath);
                }

                if (!System.IO.Directory::Exists(uploadPath))
                {
                    System.IO.Directory::CreateDirectory(uploadPath);
                }
            }
            catch (Exception::CLRError)
            {
                warning(#WorkingFolderCreationFailed);
            }

            cdxFileStorageProvider.initValue();
            cdxFileStorageProvider.Name = #TemporaryFileName;
            cdxFileStorageProvider.PackageStoreType = RetailCDXPackageStoreType::File;
            cdxFileStorageProvider.ShareDownloadPath = downloadPath;
            cdxFileStorageProvider.ShareUploadPath = uploadPath;
            cdxFileStorageProvider.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChannelDataGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the channel data group.
    /// </summary>
    private void createChannelDataGroup()
    {
        RetailCDXDataGroup retailCDXDataGroup;

        // Check the existance of Channel Data group
        select firstOnly RecId from retailCDXDataGroup
            where retailCDXDataGroup.Name == #ChannelDataGroup;

        // If channel data group not exist - create new
        if (!RetailCDXDataGroup)
        {
            retailCDXDataGroup.initValue();
            retailCDXDataGroup.Name = #ChannelDataGroup;
            retailCDXDataGroup.ChannelSchema = (select firstOnly RecId from RetailConnChannelSchema where RetailConnChannelSchema.SchemaType == RetailConnChannelSchemaTypeEnum::AX63).RecID;
            retailCDXDataGroup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChartOfAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the chart of accounts.
    /// </summary>
    private void createChartOfAccounts()
    {
        LedgerChartOfAccounts   chartOfAccounts;
        Map                     smbSupportedMainAccounts;

        void ImportMainAccountCategories()
        {
            int             i;
            XML             xmlData;
            XmlDocument     xmlDoc;
            XmlElement      xmlRoot;
            XmlElement      xmlRecord;
            XmlNodeList     xmlRecordList;
            MainAccountCategory     mainAccountCategory;
            AccountCategoryRef      accountCategoryRef;

            // Load data from resource
            [xmlData] = SysResource::getResourceNodeData(SysResource::getResourceNode(resourceStr(RetailSMBMainAccountCategory)));
            xmlDoc = XmlDocument::newXml(xmlData);

            xmlRoot = xmlDoc.documentElement();
            xmlRecordList = xmlRoot.childNodes();
            if (xmlRecordList)
            {
                // Go through each record to populate MainAccountCategory table
                for (i = 0; i < xmlRecordList.length(); i++)
                {
                    xmlRecord = xmlRecordList.item(i);

                    accountCategoryRef = str2int(xmlRecord.getAttribute('AccountCategoryRef'));

                    select forupdate mainAccountCategory where mainAccountCategory.AccountCategoryRef == accountCategoryRef;

                    if (!mainAccountCategory)
                    {
                        mainAccountCategory.AccountCategoryRef = accountCategoryRef;
                        mainAccountCategory.Description = xmlRecord.getAttribute('Description');
                        mainAccountCategory.AccountCategory = xmlRecord.getAttribute('AccountCategory');
                        mainAccountCategory.AccountType = str2int(xmlRecord.getAttribute('AccountType'));
                        mainAccountCategory.Closed = str2int(xmlRecord.getAttribute('Closed'));

                        mainAccountCategory.insert();
                    }
                }
            }
        }

        Map getSMBSupportedMainAccounts()
        {
            Map accountsToBeImported = new Map(Types::String, Types::String);

            accountsToBeImported.insert(#CashAccount, "@REX1242");
            accountsToBeImported.insert(#CheckAccount, "@RET3266");
            accountsToBeImported.insert(#CardAccount, "@RET3018");
            accountsToBeImported.insert(#VoucherAccount, "@SYS86923");
            accountsToBeImported.insert(#GiftcardAccount, "@RET4497");
            accountsToBeImported.insert(#CurrencyAccount, "@RET3072");
            accountsToBeImported.insert(#LoyaltyAccount, "@RET4355");
            accountsToBeImported.insert(#PennyDiffAccount, "@SYS67985");
            accountsToBeImported.insert(#BankAccount, "@SYS24585");
            accountsToBeImported.insert(this.getAccountsReceivableAccountNumber(#AccountReceivable), "@SYS108575");
            accountsToBeImported.insert(#AccountsReceivableClearing, "@REX1243");
            accountsToBeImported.insert(#InterUnitReceivableAccount, "@SYS109910");
            accountsToBeImported.insert(#InventoryAccount, "@RET1783");
            accountsToBeImported.insert(#InventoryMiscAccount, "@REX1245");
            accountsToBeImported.insert(#InventoryClearingAccount, "@REX1246");
            accountsToBeImported.insert(#InventoryClearingShippedUninvoicedAccount, "@REX1247");
            accountsToBeImported.insert(#PurchaseAccrualAccount, "@REX1248");
            accountsToBeImported.insert(#PurchaseAccruedSalesTaxOnReceiptAccount, "@REX1249");
            accountsToBeImported.insert(#AccountsPayable, "@SYS107973");
            accountsToBeImported.insert(#InterUnitPayableAccount, "@SYS109911");
            accountsToBeImported.insert(#AccountsPayableClearing, "@REX1250");
            accountsToBeImported.insert(#CommissionsPayableAccount, "@REX1251");
            accountsToBeImported.insert(#StateTaxPayableAccount, "@REX1281");
            accountsToBeImported.insert(#SalesTaxPayableClearing, "@REX1282");
            accountsToBeImported.insert(#RetainedEarningsAccount, "@SYS108396");
            accountsToBeImported.insert(#SalesAccount, "@RET2565");
            accountsToBeImported.insert(#MiscellaneousChargesAccount, "@REX1252");
            accountsToBeImported.insert(#PurchaseCashDiscountsAccount, "@REX1253");
            accountsToBeImported.insert(#VendorSalesDiscountsAccount, "@REX1254");
            accountsToBeImported.insert(#COGSAccount, "@SYS302640");
            accountsToBeImported.insert(#OtherVariancesToStandardCostAccount, "@REX1255");
            accountsToBeImported.insert(#PurchasePriceVarianceAccount, "@REX1256");
            accountsToBeImported.insert(#CostChangeVarianceAccount, "@REX1257");
            accountsToBeImported.insert(#InventoryCostRevaluationAccount, "@REX1258");
            accountsToBeImported.insert(#ProductionPriceVarianceAccount, "@SYS103337");
            accountsToBeImported.insert(#ProductionQuantityVarianceAccount, "@SYS117625");
            accountsToBeImported.insert(#ProductionSubstitutionVarianceAccount, "@SYS117624");
            accountsToBeImported.insert(#ProductionLotSizeVarianceAccount, "@SYS117626");
            accountsToBeImported.insert(#StandardCostPriceInventoryAdjustmentsAccount, "@REX1259");
            accountsToBeImported.insert(#InventoryAdjustmentAccount, "@SYS339141");
            accountsToBeImported.insert(#DiscountAndAllowancesTakenAccount, "@REX1260");
            accountsToBeImported.insert(#CashDiscountsTakenAccount, "@REX1261");
            accountsToBeImported.insert(#FreightTransportationInAccount, "@REX1262");
            accountsToBeImported.insert(#CommissionExpenseAccount, "@SYS321829");
            accountsToBeImported.insert(#OfficeSuppliesExpenseAccount, "@REX1263");
            accountsToBeImported.insert(#CashDiscrepanciesAccount, "@REX1264");
            accountsToBeImported.insert(#RoundingDifferenceAccount, "@REX1265");
            accountsToBeImported.insert(#BadDeptExpenseAccount, "@REX1266");
            accountsToBeImported.insert(#MiscellaneousExpenseAccount, "@REX1269");
            accountsToBeImported.insert(#CurrencyAdjustmentLossRealizedAccount, "@REX1283");
            accountsToBeImported.insert(#CurrencyAdjustmentLossUnrealizedAccount, "@REX1284");
            accountsToBeImported.insert(#CurrencyAdjustmentProfitsRealizedAccount, "@REX1285");
            accountsToBeImported.insert(#CurrencyAdjustmentProfitsUnrealizedAccount, "@REX1286");
            accountsToBeImported.insert(#ErrorAccount, "@SYS16120");

            return accountsToBeImported;
        }

        void ImportMainAccounts()
        {
            int             i;
            str             mainAccountId;
            XML             xmlData;
            XmlDocument     xmlDoc;
            XmlElement      xmlRoot;
            XmlElement      xmlRecord;
            XmlNodeList     xmlRecordList;
            MainAccount     mainAccount;

            // Load data from resource
            [xmlData] = SysResource::getResourceNodeData(SysResource::getResourceNode(resourceStr(RetailSMBMainAccounts)));
            xmlDoc = XmlDocument::newXml(xmlData);

            xmlRoot = xmlDoc.documentElement();
            xmlRecordList = xmlRoot.childNodes();
            if (xmlRecordList)
            {
                // Go through each record to populate MainAccount table
                for (i = 0; i < xmlRecordList.length(); i++)
                {
                    xmlRecord = xmlRecordList.item(i);

                    mainAccountId = xmlRecord.getAttribute('MainAccountId');

                    if (!MainAccount::findByMainAccountId(mainAccountId, false, chartOfAccounts.RecId))
                    {
                        mainAccount.MainAccountId               = mainAccountId;
                        mainAccount.LedgerChartOfAccounts       = chartOfAccounts.RecId;
                        mainAccount.Name                        = smbSupportedMainAccounts.lookup(mainAccountId);
                        mainAccount.AccountCategoryRef          = str2int(xmlRecord.getAttribute('AccountCategoryRef'));
                        mainAccount.AdjustmentMethod_MX         = str2int(xmlRecord.getAttribute('AdjustmentMethod_MX'));
                        mainAccount.CloseType                   = str2int(xmlRecord.getAttribute('CloseType'));
                        mainAccount.Closing                     = str2int(xmlRecord.getAttribute('Closing'));
                        mainAccount.ConsolidationMainAccount    = xmlRecord.getAttribute('ConsolidationMainAccount');
                        mainAccount.CurrencyCode                = xmlRecord.getAttribute('CurrencyCode');
                        mainAccount.DebitCreditBalanceDemand    = str2int(xmlRecord.getAttribute('DebitCreditBalanceDemand'));
                        mainAccount.DebitCreditCheck            = str2int(xmlRecord.getAttribute('DebitCreditCheck'));
                        mainAccount.DebitCreditProposal         = str2int(xmlRecord.getAttribute('DebitCreditProposal'));
                        mainAccount.ExchangeAdjusted            = str2int(xmlRecord.getAttribute('ExchangeAdjusted'));
                        mainAccount.InflationAdjustment_MX      = str2int(xmlRecord.getAttribute('InflationAdjustment_MX'));
                        mainAccount.MainAccountTemplate         = str2int(xmlRecord.getAttribute('MainAccountTemplate'));
                        mainAccount.MandatoryPaymentReference   = str2int(xmlRecord.getAttribute('MandatoryPaymentReference'));
                        mainAccount.Monetary                    = str2int(xmlRecord.getAttribute('Monetary'));
                        mainAccount.OffsetLedgerDimension       = str2int(xmlRecord.getAttribute('OffsetLedgerDimension'));
                        mainAccount.OpeningAccount              = str2int(xmlRecord.getAttribute('OpeningAccount'));
                        mainAccount.ParentMainAccount           = str2int(xmlRecord.getAttribute('ParentMainAccount'));
                        mainAccount.PostingType                 = any2Enum(xmlRecord.getAttribute('PostingType'));
                        mainAccount.RepomoType_MX               = str2int(xmlRecord.getAttribute('RepomoType_MX'));
                        mainAccount.ReportingAccountType        = str2int(xmlRecord.getAttribute('ReportingAccountType'));
                        mainAccount.SRUCode                     = xmlRecord.getAttribute('SRUCode');
                        mainAccount.TransferYearEndAccount_ES   = str2int(xmlRecord.getAttribute('TransferYearEndAccount_ES'));
                        mainAccount.Type                        = str2int(xmlRecord.getAttribute('Type'));
                        mainAccount.UnitOfMeasure               = str2int(xmlRecord.getAttribute('UnitOfMeasure'));
                        mainAccount.UserInfoId                  = xmlRecord.getAttribute('UserInfoId');
                        mainAccount.ValidateCurrency            = str2int(xmlRecord.getAttribute('ValidateCurrency'));
                        mainAccount.ValidatePosting             = str2int(xmlRecord.getAttribute('ValidatePosting'));
                        mainAccount.ValidateUser                = str2int(xmlRecord.getAttribute('ValidateUser'));

                        mainAccount.insert();
                    }
                }
            }
        }

        if (!LedgerChartOfAccounts::findByName(#ChartOfAccounts))
        {
            ttsBegin;

            // Create standard chart of accounts
            chartOfAccounts.initValue();
            chartOfAccounts.Name = #ChartOfAccounts;
            chartOfAccounts.Description = #ChartOfAccountsDescription;
            chartOfAccounts.insert();

            // Import main account categories
            ImportMainAccountCategories();

            // Import main accounts
            smbSupportedMainAccounts = getSMBSupportedMainAccounts();
            ImportMainAccounts();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Retail customer group.
    /// </summary>
    private void createCustGroup()
    {
        CustGroup custGroup;

        // Customer group not found - create new
        if (!CustGroup::find(#CustGroup))
        {
            custGroup.initValue();
            custGroup.CustGroup = #CustGroup;
            custGroup.Name = #CustGroup;
            custGroup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the default customer and assigns it to the RetailCust address book.
    /// </summary>
    private void createCustomer()
    {
        CustTable custTable;
        DirPartyTable dirPartyTable;
        DirAddressBookParty dirAddressBookParty;
        DirAddressBookRecId dirAddressBookRecId;

        // Customer not found - create default customer
        if (!CustTable::find(#Customer))
        {
            ttsbegin;

            // Party not found - create new party of 'Person' type
            dirPartyTable = DirPartyTable::findByName(#CustomerPartyName, DirPartyType::Person);
            if (!dirPartyTable)
            {
                dirPartyTable = DirPartyTable::createNew(DirPartyType::Person, #CustomerPartyName);
            }

            dirAddressBookRecId = DirAddressBook::find(#CustomerAddressBook).RecId;
            dirAddressBookParty = DirAddressBookParty::find(dirAddressBookRecId, dirPartyTable.RecId);

            // Party address not found - create address book for party
            if (!dirAddressBookParty)
            {
                dirAddressBookParty.AddressBook = dirAddressBookRecId;
                dirAddressBookParty.Party = dirPartyTable.RecId;
                dirAddressBookParty.insert();
            }

            custTable.initValue();
            custTable.AccountNum = #Customer;
            custTable.CustGroup = #CustGroup;
            custTable.Currency = SystemParameters::find(false).SystemCurrencyCode;
            custTable.Party = dirPartyTable.RecId;
            custTable.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustomerPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create customer posting profile
    /// </summary>
    private void createCustomerPostingProfile()
    {
        CustLedger          custLedger;

        void addCustPostingProfileLedgerAccounts(
            int                             accountCode,
            PostingProfileAccountRelation   num,
            MainAccountNum                  clearingAccount,
            MainAccountNum                  summaryAccount,
            MainAccountNum                  writeOffAccount,
            CollectionLetterCourseId        collectionLetterCourse = '')
        {
            CustLedgerAccounts  custLedgerAccounts;

            custLedgerAccounts.initValue();

            custLedgerAccounts.PostingProfile = #PostingProfile;
            custLedgerAccounts.AccountCode = accountCode;
            custLedgerAccounts.Num = num;
            custLedgerAccounts.CollectionLetterCourse = collectionLetterCourse;
            custLedgerAccounts.ClearingLedgerDimension = this.getLedgerDimension(clearingAccount);
            custLedgerAccounts.SummaryLedgerDimension = this.getLedgerDimension(summaryAccount);
            custLedgerAccounts.WriteOffLedgerDimension = this.getLedgerDimension(writeOffAccount);

            custLedgerAccounts.insert();
        }

        if (!CustLedger::exist(#PostingProfile))
        {
            ttsBegin;

            // Create customer posting profile
            custLedger.initValue();

            custLedger.PostingProfile = #PostingProfile;
            custLedger.Name = #PostingProfileDescription;
            custLedger.Settlement = NoYes::Yes;
            custLedger.Interest = NoYes::Yes;
            custLedger.CollectionLetter = NoYes::Yes;

            custLedger.insert();

            // Set up customer posting profile ledgers
            addCustPostingProfileLedgerAccounts(2, '', #BankAccount, this.getAccountsReceivableAccountNumber(#AccountReceivable), #BadDeptExpenseAccount);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExchangeRateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create exchange rate types.
    /// </summary>
    private void createExchangeRateType()
    {
        void createExchangeRateTypeImpl(str name)
        {
            ExchangeRateType    exchangeRate;

            if (!ExchangeRateType::findByName(name))
            {
                exchangeRate.Name = Name;
                exchangeRate.insert();
            }
        }

        createExchangeRateTypeImpl(#ExchangeRateTypeDefault);
        createExchangeRateTypeImpl(#ExchangeRateTypeBudget);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the fiscal calendar.
    /// </summary>
    private void createFiscalCalendar()
    {
        FiscalCalendar      fiscalCalendar;

        // Create Fiscal calendar if not already exists
        if (!FiscalCalendar::existByCalendarId(#FiscalCalendarId))
        {
            ttsbegin;

            fiscalCalendar.CalendarId = #FiscalCalendarId;
            fiscalCalendar.Description = #FiscalCalendarDescription;
            fiscalCalendar.Insert();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalYears</Name>
				<Source><![CDATA[
    private void createFiscalYears()
    {
        FiscalCalendar      fiscalCalendar;
        date                startDate;
        date                endDate;
        int                 i;
        int                 thisYear;
        str                 fiscalYearName;
        int                 periodQty      = 1;
        PeriodUnit          periodUnit     = PeriodUnit::Month;

        // Initialize this year and FiscalYearName
        thisYear = DateTimeUtil::year(DateTimeUtil::getSystemDateTime());
        fiscalYearName = int2str(thisYear);

        // Find FiscalCalender with FiscalCalendarId = 'RetailFisc'
        fiscalCalendar = FiscalCalendar::findByCalendarId(#FiscalCalendarId);

        if (fiscalCalendar.RecId) // If Fiscal calendar exists
        {
            if (!FiscalCalendars::existFiscalYear(fiscalCalendar.RecId, fiscalYearName)) // If Fiscal year doesn't exist
            {
                ttsBegin;

                for (i = 0; i < #NumberOfCalendarYears; i++)
                {
                    startDate = mkDate(1, 1, thisYear);
                    endDate = mkDate(31, 12, thisYear);

                    // Create Fiscal year
                    FiscalCalendars::createYear(fiscalCalendar.RecId, startDate, endDate, periodQty, periodUnit, fiscalYearName, true);

                    // Increment this year and FiscalYearName
                    thisYear++;
                    fiscalYearName = int2str(thisYear);
                }

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFunctionalityProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the FN001 functionality profile.
    /// </summary>
    private void createFunctionalityProfile()
    {
        RetailFunctionalityProfile retailFunctionalityProfile;
        LogisticsAddressCountryRegionId companyCountryRegionId;

        if (!RetailFunctionalityProfile::find(#FunctionalityProfile))
        {
            retailFunctionalityProfile.initValue();
            retailFunctionalityProfile.profileId = #FunctionalityProfile;
            retailFunctionalityProfile.name = #FunctionalityProfile;
            retailFunctionalityProfile.printXReportOnTerminal = NoYes::Yes;
            retailFunctionalityProfile.aggregateItems = NoYes::Yes;
            retailFunctionalityProfile.aggregatePayments = NoYes::Yes;
            companyCountryRegionId = CompanyInfo::find().postalAddress().CountryRegionId;

            if (companyCountryRegionId)
            {
                retailFunctionalityProfile.supportedCountryRegionISOCode = LogisticsAddressCountryRegion::find(companyCountryRegionId).ISOcode;
            }

            retailFunctionalityProfile.insert();

            this.populateRetailReceiptMasks();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailReceiptMasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>RetailReceiptMasks</c> records.
    /// </summary>
    /// <param name = "_receiptTransType">
    /// The receipt transaction type enumeration value.
    /// </param>
    /// <param name = "_mask">
    /// The receipt mask.
    /// </param>
    protected final void createRetailReceiptMasks(RetailReceiptTransactionType _receiptTransType, anytype _mask)
    {
        RetailReceiptMasks retailReceiptMasks;

        retailReceiptMasks.initValue();
        retailReceiptMasks.FuncProfileId = #FunctionalityProfile;
        retailReceiptMasks.ReceiptTransType = _receiptTransType;
        retailReceiptMasks.Mask = _mask;
        retailReceiptMasks.IsIndependent = NoYes::Yes;

        retailReceiptMasks.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRetailReceiptMasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>RetailReceiptMasks</c> table.
    /// </summary>
    [Wrappable(true)]
    protected final void populateRetailReceiptMasks()
    {
        this.createRetailReceiptMasks(RetailReceiptTransaction::Sale,                 'SSSSTTTT1#####'); // S = Store#, T = Transaction#
        this.createRetailReceiptMasks(RetailReceiptTransaction::Return,               'SSSSTTTT2#####');
        this.createRetailReceiptMasks(RetailReceiptTransaction::SalesOrder,           'SSSSTTTT3#####');
        this.createRetailReceiptMasks(RetailReceiptTransaction::Quote,                'SSSSTTTT4#####');
        this.createRetailReceiptMasks(RetailReceiptTransaction::SuspendedTransaction, 'SSSSTTTT5#####');
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHCMApprovalGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Retail time and attendance approval group.
    /// </summary>
    private void createHCMApprovalGroup()
    {
        JmgGroupApprove jmgGroupApprove;

        select RecId from jmgGroupApprove
            where jmgGroupApprove.GroupId == #HCMApprovalGroupId;

        if (!jmgGroupApprove.RecId)
        {
            jmgGroupApprove.initValue();
            jmgGroupApprove.GroupId = #HCMApprovalGroupId;
            jmgGroupApprove.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHCMCalculationGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Retail time and attendance calculation group.
    /// </summary>
    private void createHCMCalculationGroup()
    {
        JmgGroupCalc jmgGroupCalc;

        select RecId from jmgGroupCalc
            where jmgGroupCalc.GroupId == #HCMCalculationGroupId;

        if (!jmgGroupCalc.RecId)
        {
            jmgGroupCalc.initValue();
            jmgGroupCalc.GroupId = #HCMCalculationGroupId;
            jmgGroupCalc.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHCMTimeProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Retail time profile.
    /// </summary>
    private void createHCMTimeProfile()
    {
        JmgProfileTable jmgProfileTable;

        if (!JmgProfileTable::find(#HCMTimeProfileId))
        {
            jmgProfileTable.initValue();
            jmgProfileTable.Profile = #HCMTimeProfileId;
            jmgProfileTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHCMTimeProfileGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Retail time profile group.
    /// </summary>
    private void createHCMTimeProfileGroup()
    {
        JmgProfileGroup jmgProfileGroup;

        select RecId from jmgProfileGroup
            where jmgProfileGroup.ProfileGroupId == #HCMTimeProfileGroupId;

        if (!jmgProfileGroup.RecId)
        {
            jmgProfileGroup.initValue();
            jmgProfileGroup.ProfileGroupId = #HCMTimeProfileGroupId;
            jmgProfileGroup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ICnt and IPL inventory journal names.
    /// </summary>
    private void createInventoryJournalName()
    {
        InventJournalName   inventJournalName;
        InventParameters    inventParameters;
        RetailParameters    retailParameters;

        ttsBegin;

        NumberSequenceReference InventJournalVoucherIdNumSeq = InventParameters::numRefInventJournalVoucherId(); // gets the invent journal voucher number sequence reference.

        if (!InventJournalName::find(#InventoryCountingJounal))
        {
            inventJournalName.initValue();
            inventJournalName.JournalNameId = #InventoryCountingJounal;
            inventJournalName.DetailSummary = DetailSummary::Summary;
            inventJournalName.JournalType   = InventJournalType::Count;
            inventJournalName.VoucherNumberSequenceTable = InventJournalVoucherIdNumSeq.NumberSequenceId;
            inventJournalName.insert();
        }

        if (!InventJournalName::find(RetailSMBSeedGenerator::InventoryBOMJounalNameId))
        {
            inventJournalName.clear();
            inventJournalName.initValue();
            inventJournalName.JournalNameId = RetailSMBSeedGenerator::InventoryBOMJounalNameId;
            inventJournalName.Description = RetailSMBSeedGenerator::InventoryBOMJounalName;
            inventJournalName.DetailSummary = DetailSummary::Summary;
            inventJournalName.JournalType   = InventJournalType::BOM;
            inventJournalName.VoucherNumberSequenceTable = InventJournalVoucherIdNumSeq.NumberSequenceId;
            inventJournalName.insert();
        }

        if (!InventJournalName::find(#LossProfitJournalNameId))
        {
            inventJournalName.clear();
            inventJournalName.initValue();
            inventJournalName.JournalNameId   = #LossProfitJournalNameId;
            inventJournalName.Description     = #LossProfitJournalName;
            inventJournalName.JournalType     = InventJournalType::LossProfit;
            inventJournalName.VoucherNumberSequenceTable = InventJournalVoucherIdNumSeq.NumberSequenceId;
            inventJournalName.insert();
        }

        //set Inventory parameter for Inventory adjustment journal.
        inventParameters = InventParameters::find(true);
        inventParameters.CountJournalNameId = #InventoryCountingJounal;
        inventParameters.LossProfitJournalNameId = #LossProfitJournalNameId;
        inventParameters.BOMJournalNameId = RetailSMBSeedGenerator::InventoryBOMJounalNameId;
        inventParameters.update();

        retailParameters = RetailParameters::find(true);
        retailParameters.defaultInventJournalName = #InventoryCountingJounal;
        retailParameters.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the DEF item group.
    /// </summary>
    private void createItemGroup()
    {
        InventItemGroup inventItemGroup;

        if (!InventItemGroup::find(#ItemGroupId))
        {
            inventItemGroup.initValue();
            inventItemGroup.ItemGroupId = #ItemGroupId;
            inventItemGroup.Name = #ItemGroupName;
            inventItemGroup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Manager and Cashier jobs and assigns corresponding POS permission group.
    /// </summary>
    private void createJob()
    {
        HcmJob      hcmJob;
        HcmTitle    hcmTitle;
        HcmJobDetail hcmJobDetail;
        RetailJobPosPermissionGroup jobPosPermissionGroup;

        void createJob(HcmJobId _jobId)
        {
            hcmJob = HcmJob::findByJob(_jobId);

            if (!hcmJob.RecId)
            {
                // create job
                hcmJob.initValue();
                hcmJob.JobId = _jobId;
                hcmJob.insert();

                //create and assign Retail POS permission group on Job
                jobPosPermissionGroup.initValue();
                jobPosPermissionGroup.RetailPosPermissionGroup = (select RecId from RetailPosPermissionGroup where RetailPosPermissionGroup.PosPermissionGroupId == _jobId).RecId;
                jobPosPermissionGroup.Job = hcmJob.RecId;
                jobPosPermissionGroup.insert();

                hcmTitle = HcmTitle::findByTitle(_jobId);
                if (!hcmTitle.RecId)
                {
                    //create hcmTitle
                    hcmTitle.clear();
                    hcmTitle.initValue();
                    hcmTitle.TitleId = _jobId;
                    hcmTitle.insert();
                }

                //create hcmJobDetails
                hcmJobDetail.initValue();
                hcmJobDetail.Job = hcmJob.RecId;
                hcmJobDetail.Title = hcmTitle.RecId;
                hcmJobDetail.Description = _jobId;
                // validfrom and validto needs to be set else title/description wouldn't populate on UI
                hcmJobDetail.ValidFrom = DateTimeUtil::getSystemDateTime();
                hcmJobDetail.ValidTo = DateTimeUtil::maxValue();
                hcmJobDetail.insert();
            }
        }

        createJob(#ManagerJobId);
        createJob(#CashierJobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create ledger for the current company.
    /// </summary>
    private void createLedger()
    {
        Ledger                      ledger;
        CompanyInfo                 legalEntity;
        LedgerGainLossAccount       ledgerGainLossAccount;

        void setupLedgerStructure()
        {
            DimensionHierarchy              dimensionHierarchy;
            DimensionHierarchyLevel         dimHierarchyLevel;
            BudgetControlConfiguration      budgetControlConfiguration;
            DimensionConstraintNode         constraintNode;
            DimensionConstraintNodeCriteria criteria;

            RecId                           treeRecId;
            DimensionConstraintTree         dimConstraintTree;

            // Create a dimension hierarchy
            dimensionHierarchy = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::AccountStructure, #AccountStructure);

            if (dimensionHierarchy.RecId == 0)
            {
                treeRecId = DimensionTree::createTree(
                    #AccountStructure,      // Name
                #AccountStructure,      // Description
                DimensionHierarchyType::AccountStructure,     // StructureType
                    true);                  // IsDraft

                // We succesfully created the tree, now find the associated hierarchy
                select firstonly dimensionHierarchy
                    join RecId from dimConstraintTree where
                        dimConstraintTree.DimensionHierarchy == dimensionHierarchy.RecId &&
                        dimConstraintTree.RecId == treeRecId;

                dimHierarchyLevel.initValue();
                dimHierarchyLevel.DimensionAttribute = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
                dimHierarchyLevel.DimensionHierarchy = dimensionHierarchy.RecId;
                dimHierarchyLevel.Level = 1;
                dimHierarchyLevel.insert();

                constraintNode.initValue();
                constraintNode.DimensionHierarchyLevel = dimHierarchyLevel.RecId;
                constraintNode.Ordinal = 1;
                constraintNode.DimensionConstraintTree = dimConstraintTree.RecId;
                constraintNode.doInsert();

                criteria.initValue();
                criteria.DimensionConstraintNode = constraintNode.RecId;
                criteria.Ordinal = 1;
                criteria.WildCardString = '%';
                criteria.doInsert();

                DimensionTree::activateDraft(treeRecId);

                // Associate the account structure with ledger
                LedgerStructure::createLedgerStructure(dimensionHierarchy.RecId, ledger.RecId);

                // Update budget control configuration
                budgetControlConfiguration.PrimaryLedger = ledger.RecId;
                budgetControlConfiguration.IsActive  = NoYes::Yes;
                budgetControlConfiguration.DimensionHierarchyAccountStructure = dimensionHierarchy.RecId;
                budgetControlConfiguration.doInsert();
            }
        }

        void setupGainLossAccount(CurrencyGainLossAccountType accountType, MainAccountNum mainAccountId)
        {
            select ledgerGainLossAccount
                where ledgerGainLossAccount.Ledger == ledger.RecId
                    && ledgerGainLossAccount.AccountType == accountType;

            if (!ledgerGainLossAccount)
            {
                ledgerGainLossAccount.initValue();
                ledgerGainLossAccount.AccountType = accountType;
                ledgerGainLossAccount.LedgerDimension = this.getLedgerDimension(mainAccountId);
                ledgerGainLossAccount.Ledger = ledger.RecId;
                ledgerGainLossAccount.insert();
            }
        }

        void initializeMainAccountBalance()
        {
            DimensionHierarchy              focusDimensionHierarchy;
            DimensionFocusProcessBalance    dimensionFocusProcessBalance;

            focusDimensionHierarchy = DimensionHierarchy::getMainAccountFocus(false);

            if (focusDimensionHierarchy.RecId != 0 && focusDimensionHierarchy.FocusState == DimensionFocusBalanceInitializationState::NotInitialized)
            {
                dimensionFocusProcessBalance = DimensionFocusProcessBalance::construct(NoYes::No, focusDimensionHierarchy);
                dimensionFocusProcessBalance.runOperation();
            }
        }

        legalEntity = CompanyInfo::find(true);
        ledger = Ledger::findByLegalEntity(legalEntity.RecId, true);

        ttsBegin;

        // Create ledger
        ledger.initValue();

        ledger.Name = curext();
        ledger.Description = curext();
        ledger.PrimaryForLegalEntity = legalEntity.RecId;
        ledger.ChartOfAccounts = LedgerChartOfAccounts::findByName(#ChartOfAccounts).RecId;
        ledger.FiscalCalendar = FiscalCalendar::findByCalendarId(#FiscalCalendarId).RecId;
        ledger.AccountingCurrency = SystemParameters::find(false).SystemCurrencyCode;
        ledger.ReportingCurrency = SystemParameters::find(false).SystemCurrencyCode;
        ledger.DefaultExchangeRateType = ExchangeRateType::findByName(#ExchangeRateTypeDefault).RecId;
        ledger.BudgetExchangeRateType = ExchangeRateType::findByName(#ExchangeRateTypeBudget).RecId;

        ledger.write();

        // set up ledger structure
        setupLedgerStructure();

        // Set up GainLoss accounts
        setupGainLossAccount(CurrencyGainLossAccountType::RealizedGain, #CurrencyAdjustmentProfitsRealizedAccount);
        setupGainLossAccount(CurrencyGainLossAccountType::RealizedLoss, #CurrencyAdjustmentLossRealizedAccount);
        setupGainLossAccount(CurrencyGainLossAccountType::UnrealizedGain, #CurrencyAdjustmentProfitsUnrealizedAccount);
        setupGainLossAccount(CurrencyGainLossAccountType::UnrealizedLoss, #CurrencyAdjustmentLossUnrealizedAccount);

        // Initialize main account balance
        initializeMainAccountBalance();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogisticsAddressState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates default Address States.
    /// </summary>
    private void createLogisticsAddressState()
    {
        void LogisticsAddressState(LogisticsAddressStatename _name, LogisticsAddressStateId _stateId, LogisticsAddressCountryRegionId _countryRegionId, Timezone _timeZone)
        {
            LogisticsAddressState logisticsAddressState;

            // Check if the Country being referenced exists.
            if (LogisticsAddressCountryRegion::checkExist(_countryRegionId))
            {
                // Look for the record with specified State & Country codes in LogisticsAddressState.
                logisticsAddressState = LogisticsAddressState::find(_countryRegionId, _stateId);

                if (!logisticsAddressState) // Create if not already exists
                {
                    ttsbegin;
                    logisticsAddressState.Name = _name;
                    logisticsAddressState.StateId = _stateId;
                    logisticsAddressState.CountryRegionId = _countryRegionId;
                    logisticsAddressState.TimeZone = _timeZone;
                    logisticsAddressState.insert();
                    ttscommit;
                }
            }
        }

        // LogisticsAddressState(Name, StateId, CountryRegionId, TimeZone);
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]))
        {
            LogisticsAddressState('Alaska', 'AK', 'USA', 2);
            LogisticsAddressState('Alabama', 'AL', 'USA', 15);
            LogisticsAddressState('Arkansas', 'AR', 'USA', 15);
            LogisticsAddressState('American Samoa', 'AS', 'USA', 65);
            LogisticsAddressState('Arizona', 'AZ', 'USA', 75);
            LogisticsAddressState('California', 'CA', 'USA', 59);
            LogisticsAddressState('Colorado', 'CO', 'USA', 47);
            LogisticsAddressState('Connecticut', 'CT', 'USA', 29);
            LogisticsAddressState('District of Columbia', 'DC', 'USA', 29);
            LogisticsAddressState('Delaware', 'DE', 'USA', 29);
            LogisticsAddressState('Florida', 'FL', 'USA', 29);
            LogisticsAddressState('Federated States of Micronesia', 'FM', 'USA', 20);
            LogisticsAddressState('Georgia', 'GA', 'USA', 29);
            LogisticsAddressState('Guam', 'GU', 'USA', 39);
            LogisticsAddressState('Hawaii', 'HI', 'USA', 39);
            LogisticsAddressState('Iowa', 'IA', 'USA', 15);
            LogisticsAddressState('Idaho', 'ID', 'USA', 58);
            LogisticsAddressState('Illinois', 'IL', 'USA', 15);
            LogisticsAddressState('Indiana', 'IN', 'USA', 74);
            LogisticsAddressState('Kansas', 'KS', 'USA', 15);
            LogisticsAddressState('Kentucky', 'KY', 'USA', 15);
            LogisticsAddressState('Louisiana', 'LA', 'USA', 15);
            LogisticsAddressState('Massachusetts', 'MA', 'USA', 29);
            LogisticsAddressState('Maryland', 'MD', 'USA', 29);
            LogisticsAddressState('Maine', 'ME', 'USA', 29);
            LogisticsAddressState('Marshall Islands', 'MH', 'USA', 32);
            LogisticsAddressState('Michigan', 'MI', 'USA', 29);
            LogisticsAddressState('Minnesota', 'MN', 'USA', 15);
            LogisticsAddressState('Missouri', 'MO', 'USA', 15);
            LogisticsAddressState('Northern Mariana Islands', 'MP', 'USA', 71);
            LogisticsAddressState('Mississippi', 'MS', 'USA', 15);
            LogisticsAddressState('Montana', 'MT', 'USA', 75);
            LogisticsAddressState('North Carolina', 'NC', 'USA', 29);
            LogisticsAddressState('North Dakota', 'ND', 'USA', 15);
            LogisticsAddressState('Nebraska', 'NE', 'USA', 15);
            LogisticsAddressState('New Hampshire', 'NH', 'USA', 29);
            LogisticsAddressState('New Jersey', 'NJ', 'USA', 29);
            LogisticsAddressState('New Mexico', 'NM', 'USA', 47);
            LogisticsAddressState('Nevada', 'NV', 'USA', 58);
            LogisticsAddressState('New York', 'NY', 'USA', 29);
            LogisticsAddressState('Ohio', 'OH', 'USA', 29);
            LogisticsAddressState('Oklahoma', 'OK', 'USA', 15);
            LogisticsAddressState('Oregon', 'OR', 'USA', 58);
            LogisticsAddressState('Pennsylvania', 'PA', 'USA', 29);
            LogisticsAddressState('Puerto Rico', 'PR', 'USA', 6);
            LogisticsAddressState('Palau', 'PW', 'USA', 72);
            LogisticsAddressState('Rhode Island', 'RI', 'USA', 29);
            LogisticsAddressState('South Carolina', 'SC', 'USA', 29);
            LogisticsAddressState('South Dakota', 'SD', 'USA', 15);
            LogisticsAddressState('Tennesee', 'TN', 'USA', 15);
            LogisticsAddressState('Texas', 'TX', 'USA', 15);
            LogisticsAddressState('Utah', 'UT', 'USA', 75);
            LogisticsAddressState('Virginia', 'VA', 'USA', 29);
            LogisticsAddressState('U.S. Virgin Islands', 'VI', 'USA', 6);
            LogisticsAddressState('Vermont', 'VT', 'USA', 29);
            LogisticsAddressState('Washington', 'WA', 'USA', 58);
            LogisticsAddressState('Wisconsin', 'WI', 'USA', 15);
            LogisticsAddressState('West Virginia', 'WV', 'USA', 29);
            LogisticsAddressState('Wyoming', 'WY', 'USA', 75);
            LogisticsAddressState('California', 'CA', 'USA', 0);
            LogisticsAddressState('Colorado', 'CO', 'USA', 0);
            LogisticsAddressState('Florida', 'FL', 'USA', 0);
            LogisticsAddressState('Georgia', 'GA', 'USA', 0);
            LogisticsAddressState('Idaho', 'ID', 'USA', 0);
            LogisticsAddressState('Montana', 'MT', 'USA', 0);
            LogisticsAddressState('North Dakota', 'ND', 'USA', 0);
            LogisticsAddressState('Nevada', 'NV', 'USA', 0);
            LogisticsAddressState('New York', 'NY', 'USA', 0);
            LogisticsAddressState('Oregon', 'OR', 'USA', 0);
            LogisticsAddressState('Texas', 'TX', 'USA', 0);
            LogisticsAddressState('Washington', 'WA', 'USA', 0);
            LogisticsAddressState('Wyoming', 'WY', 'USA', 0);
            LogisticsAddressState('California', 'CA', 'USA', 0);
            LogisticsAddressState('Colorado', 'CO', 'USA', 0);
            LogisticsAddressState('Florida', 'FL', 'USA', 0);
            LogisticsAddressState('Georgia', 'GA', 'USA', 0);
            LogisticsAddressState('Idaho', 'ID', 'USA', 0);
            LogisticsAddressState('Illinois', 'IL', 'USA', 0);
            LogisticsAddressState('IN', 'IN', 'USA', 0);
            LogisticsAddressState('Kentucky', 'KY', 'USA', 0);
            LogisticsAddressState('Maryland', 'MD', 'USA', 0);
            LogisticsAddressState('Minnesota', 'MN', 'USA', 0);
            LogisticsAddressState('Montana', 'MT', 'USA', 0);
            LogisticsAddressState('North Dakota', 'ND', 'USA', 0);
            LogisticsAddressState('New Jersey', 'NJ', 'USA', 0);
            LogisticsAddressState('New Mexico', 'NM', 'USA', 0);
            LogisticsAddressState('Nevada', 'NV', 'USA', 0);
            LogisticsAddressState('New York', 'NY', 'USA', 0);
            LogisticsAddressState('OH', 'OH', 'USA', 0);
            LogisticsAddressState('Oregon', 'OR', 'USA', 0);
            LogisticsAddressState('Rhode Island', 'RI', 'USA', 0);
            LogisticsAddressState('Tennessee', 'TN', 'USA', 0);
            LogisticsAddressState('Texas', 'TX', 'USA', 0);
            LogisticsAddressState('Utah', 'UT', 'USA', 0);
            LogisticsAddressState('Vermont', 'VT', 'USA', 0);
            LogisticsAddressState('Washington', 'WA', 'USA', 0);
            LogisticsAddressState('West Virginia', 'WV', 'USA', 0);
            LogisticsAddressState('Wyoming', 'WY', 'USA', 0);
        }
        else
        {
            // Customers or partners please initialize states here for non-US countries.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the DEF and  NotStocked inventory model group.
    /// </summary>
    private void createModelGroup()
    {
        InventModelGroup inventModelGroup;

        void createGroup(InventModelGroupId _modelGroupId,
            InventModelName _modelName,
            NoYes _isStockedProduct,
            InventModel _inventModel = InventModel::FIFO)
        {
            if (!InventModelGroup::find(_modelGroupId))
            {
                ttsbegin;

                inventModelGroup.initValue();
                inventModelGroup.ModelGroupId           = _modelGroupId;
                inventModelGroup.Name                   = _modelName;
                inventModelGroup.StockedProduct         = _isStockedProduct;
                inventModelGroup.NegativePhysical       = _isStockedProduct;
                inventModelGroup.PostOnhandPhysical     = NoYes::No;
                inventModelGroup.PostOnhandFinancial    = NoYes::No;
                inventModelGroup.PostPhysicalPurchase   = NoYes::No;
                inventModelGroup.InventModel            = _inventModel;

                inventModelGroup.insert();

                ttscommit;
            }
        }

        createGroup(#ModelGroupId, #ModelGroupName, NoYes::Yes, InventModel::AverageCost);
        createGroup(#ModelGroupIdNotStocked, #ModelGroupNameNotStocked, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create number sequences.
    /// </summary>
    private void createNumberSeq()
    {
        TmpNumberSeqCreate      tmpNumberSeqCreate;
        NumberSequenceTable     basi_1;
        NumberSequenceTable     prod_6;

        // Generates TmpNumberSeqCreate records
        TmpNumberSeqCreate::buildWizardList(tmpNumberSeqCreate);

        ttsbegin;

        while select tmpNumberSeqCreate
            where tmpNumberSeqCreate.NumberSequence != ''
        {
            // Generate number sequence
            NumberSequenceTable::createFromTmpNumberSeqCreate(tmpNumberSeqCreate);
        }

        // Fix number sequences
        select forUpdate basi_1 where basi_1.NumberSequence == 'Basi_1';
        if (basi_1)
        {
            basi_1.Continuous = NoYes::No;
            if (basi_1.NextRec < 100001)
            {
                basi_1.NextRec = 100001;
            }
            basi_1.update();
        }

        // Fix number sequences for product id
        select forUpdate prod_6 where prod_6.NumberSequence == 'Prod_6';
        if (prod_6)
        {
            prod_6.Manual = NoYes::No;
            prod_6.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOMHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the assortment organizational hierarchy.
    /// </summary>
    private void createOMHierarchy()
    {
        OMMultipleHierarchy     omMultipleHierarchy;
        OMOrganizationHierarchy omOrganizationHierarchy;
        OMHierarchyPurpose      omHierarchyPurpose;

        void createOMHierarchy(anytype _Name, anytype _hierarchyPurpose, anytype _isDefault)
        {
            // Creates an Organization hierarchy
            omMultipleHierarchy = OMMultipleHierarchy::construct(_Name);
            omMultipleHierarchy.addPurpose(_hierarchyPurpose, false);

            if (_isDefault)
            {
                ttsbegin;
                select forupdate firstonly omHierarchyPurpose
                where omHierarchyPurpose.HierarchyPurpose == _hierarchyPurpose
                   && omHierarchyPurpose.HierarchyType == OMHierarchyType::findName(_Name).RecId;

                omHierarchyPurpose.IsDefault = _isDefault;
                omHierarchyPurpose.update();
                ttscommit;
            }

            omOrganizationHierarchy = new OMOrganizationHierarchy(omMultipleHierarchy);
            if (!omOrganizationHierarchy.rootNode())
            {
                omOrganizationHierarchy.enterEditMode(false);
                omOrganizationHierarchy.addRootNode(CompanyInfo::current());
                omOrganizationHierarchy.saveDraft();
            }
        }

        //Create assortment hierarchy
        createOMHierarchy(#AssortmentHierarchy, HierarchyPurpose::RetailAssortment, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ARPay payment journal name.
    /// </summary>
    private void createPaymentJournalName()
    {
        LedgerJournalName ledgerJournalName;
        NumberSequenceTable seqTable;

        ttsBegin;
        if (!ledgerJournalName::find(#PaymentJournalId))
        {
            seqTable = NumberSequenceTable::findByNaturalKey(curext()+#PaymentJournalId);
            // create a number sequence if it doesn't exist
            if (!seqTable)
            {
                seqTable.initValue();
                seqTable.NumberSequence = curext() + #PaymentJournalId;
                seqTable.InUse = NoYes::Yes;
                seqTable.AnnotatedFormat = NumberSeq::createAnnotatedFormatFromFormat(#PaymentJournalNumberSequenceFormat);
                seqTable.Format = #PaymentJournalNumberSequenceFormat;
                seqTable.Continuous = NoYes::Yes;
                seqTable.insert();
            }

            ledgerJournalName.initValue();
            ledgerJournalName.JournalName = #PaymentJournalId;
            ledgerJournalName.JournalType = LedgerJournalType::CustPayment;
            ledgerJournalName.NumberSequenceTable = seqTable.RecId;
            ledgerJournalName.insert();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPosPermissionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Manager and Cashier POS permission groups.
    /// </summary>
    private void createPosPermissionGroup()
    {
        void createPermissionGroup(RetailPosPermissionGroupId _permissionGrpId,
                                    RetailManagerPrivileges _managerPrivileges)
        {
            RetailPosPermissionGroup retailPosPermissionGroup;

            select RecId from retailPosPermissionGroup where
                retailPosPermissionGroup.PosPermissionGroupId == _permissionGrpId;

            if (!retailPosPermissionGroup.RecId)
            {
                retailPosPermissionGroup.PosPermissionGroupId       = _permissionGrpId;
                retailPosPermissionGroup.Name                       = _permissionGrpId;
                retailPosPermissionGroup.AllowFloatingTenderDeclaration = NoYes::Yes;
                retailPosPermissionGroup.AllowOpenDrawerOnly        = NoYes::Yes;
                retailPosPermissionGroup.AllowPriceOverride         = RetailPriceOverride::HigherOnly;
                retailPosPermissionGroup.AllowTenderDeclaration     = NoYes::Yes;
                retailPosPermissionGroup.AllowTransactionSuspension = NoYes::Yes;
                retailPosPermissionGroup.AllowTransactionVoiding    = NoYes::Yes;
                retailPosPermissionGroup.AllowZReportPrinting       = NoYes::Yes;
                retailPosPermissionGroup.AllowXReportPrinting   = _managerPrivileges;
                retailPosPermissionGroup.ManagerPrivileges      = _managerPrivileges;
                retailPosPermissionGroup.AllowBlindClose        = _managerPrivileges;
                retailPosPermissionGroup.AllowChangeNoVoid      = _managerPrivileges;
                retailPosPermissionGroup.AllowCreateOrder       = _managerPrivileges;
                retailPosPermissionGroup.AllowEditOrder         = _managerPrivileges;
                retailPosPermissionGroup.AllowMultipleLogins    = _managerPrivileges;
                retailPosPermissionGroup.AllowMultipleShiftLogon= _managerPrivileges;
                retailPosPermissionGroup.AllowRetrieveOrder     = _managerPrivileges;
                retailPosPermissionGroup.AllowSalesTaxChange    = _managerPrivileges;
                retailPosPermissionGroup.MaximumDiscountPct     = _managerPrivileges == NoYes::Yes? 100 : 10;
                retailPosPermissionGroup.MaxTotalDiscountPct = _managerPrivileges == NoYes::Yes? 100 : 0;
                retailPosPermissionGroup.MaxLineDiscountAmount  = 0;
                retailPosPermissionGroup.MaxLineReturnAmount    = 0;
                retailPosPermissionGroup.MaxTotalDiscountAmount = 0;
                retailPosPermissionGroup.MaxTotalReturnAmount   = 0;
                retailPosPermissionGroup.UseHandheld = NoYes::Yes;

                retailPosPermissionGroup.insert();
            }
        }

        createPermissionGroup(#ManagerPermissionGroup, NoYes::Yes); //create manager permission group
        createPermissionGroup(#CashierPermissionGroup, NoYes::No); //create cashier permission group
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Pric and Disc agreement journal names.
    /// </summary>
    private void createPriceDiscJournalName()
    {
        PriceDiscAdmName priceDiscAdmName;

        if (!PriceDiscAdmName::find(#PriceJournalName))
        {
            priceDiscAdmName.initValue();
            priceDiscAdmName.JournalName = #PriceJournalName;
            priceDiscAdmName.insert();
        }

        if (!PriceDiscAdmName::find(#DiscountJournalName))
        {
            priceDiscAdmName.initValue();
            priceDiscAdmName.JournalName = #DiscountJournalName;
            priceDiscAdmName.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record into table <c>PriceParameters</c>
    /// </summary>
    /// <remarks>
    /// This function creates record entry into table PriceParameters and update
    /// some fields which are required to be marked. This is needed to avail retail trade agreement price setup.
    /// </remarks>
    private void createPriceParameters()
    {
        PriceParameters priceParameters = PriceParameters::find();

        ttsBegin;

        select forUpdate priceParameters where priceParameters.Key == 0;
        priceParameters.SalesPriceGroupItem = NoYes::Yes;
        priceParameters.SalesPriceAllItem   = NoYes::Yes;
        priceParameters.SalesLineAllAll     = NoYes::Yes;
        priceParameters.SalesLineAllGroup   = NoYes::Yes;

        priceParameters.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductDimensionGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates product dimension group.
    /// </summary>
    private void createProductDimensionGroups()
    {
        EcoResProductDimensionGroup             productDimensionGroup;
        EcoResProductDimensionGroupFldSetup     productDimensionGroupFldSetup;
        FieldId                                 dimFieldId;
        int                                     lineNumber = 100;

        void setupProductDimGroupDimField(
            FieldName           _dimFieldName,
            boolean             _isActive)
        {
            dimFieldId = fieldName2Id(tablenum(InventDim), _dimFieldName);

            DictField dictField = new DictField(tablenum(InventDim), dimFieldId);
            
            DictConfigurationKey dictConfigurationKey = new DictConfigurationKey(dictField.configurationKeyId());

            if (dictConfigurationKey.enabled())
            {
                productDimensionGroupFldSetup = EcoResProductDimensionGroupFldSetup::findByDimensionGroupFieldId(productDimensionGroup.RecId, dimFieldId, true);

                productDimensionGroupFldSetup.IsActive                    = _isActive;
                productDimensionGroupFldSetup.IsPurchPriceSearchEnabled   = true;
                productDimensionGroupFldSetup.IsSalesPriceSearchEnabled   = true;

                productDimensionGroupFldSetup.write();
            }
        }

        void setupProductDimGroupDimFields(
            boolean             _dimFieldIsActiveConfig,
            boolean             _dimFieldIsActiveSize,
            boolean             _dimFieldIsActiveColor,
            boolean             _dimFieldIsActiveStyle,
            boolean             _dimFieldIsActiveVersion)
        {
            // There is a validation that at least 1 other dimension is active; so firstly we
            // Set all dimension fields to active, and then we set filed(s) to inactive to
            // work around the validation.
            setupProductDimGroupDimField(fieldstr(InventDim, configId), true);
            setupProductDimGroupDimField(fieldstr(InventDim, InventSizeId), true);
            setupProductDimGroupDimField(fieldstr(InventDim, InventColorId), true);
            setupProductDimGroupDimField(fieldstr(InventDim, InventStyleId), true);
            setupProductDimGroupDimField(fieldstr(InventDim, InventVersionId), true);

            if (!_dimFieldIsActiveConfig)
            {
                setupProductDimGroupDimField(fieldstr(InventDim, configId), false);
            }

            if (!_dimFieldIsActiveSize)
            {
                setupProductDimGroupDimField(fieldstr(InventDim, InventSizeId), false);
            }

            if (!_dimFieldIsActiveColor)
            {
                setupProductDimGroupDimField(fieldstr(InventDim, InventColorId), false);
            }

            if (!_dimFieldIsActiveStyle)
            {
                setupProductDimGroupDimField(fieldstr(InventDim, InventStyleId), false);
            }

            if (!_dimFieldIsActiveVersion)
            {
                setupProductDimGroupDimField(fieldstr(InventDim, InventVersionId), false);
            }
        }

        void createProductDimensionGroup(
            str                 _dimGroupName,
            str                 _dimGroupDescription,
            boolean             _dimFieldIsActiveConfig,
            boolean             _dimFieldIsActiveSize,
            boolean             _dimFieldIsActiveColor,
            boolean             _dimFieldIsActiveStyle,
            boolean             _dimFieldIsActiveVersion)
        {
            if (!EcoResProductDimensionGroup::findByDimensionGroupName(_dimGroupName))
            {
                ttsBegin;

                // Create product dimension group
                productDimensionGroup.initValue();
                productDimensionGroup.Name = _dimGroupName;
                productDimensionGroup.Description = _dimGroupDescription;
                productDimensionGroup.insert();

                // set up product dimension group fields
                setupProductDimGroupDimFields(_dimFieldIsActiveConfig, _dimFieldIsActiveSize, _dimFieldIsActiveColor, _dimFieldIsActiveStyle, _dimFieldIsActiveVersion);

                ttsCommit;
            }
        }

        createProductDimensionGroup('PG_1', #PG_1, true, false, false, false, false);
        createProductDimensionGroup('PG_2', #PG_2, false, true, false, false, false);
        createProductDimensionGroup('PG_3', #PG_3, false, false, true, false, false);
        createProductDimensionGroup('PG_4', #PG_4, false, false, false, true, false);

        createProductDimensionGroup('PG_5', #PG_5, true, true, false, false, false);
        createProductDimensionGroup('PG_6', #PG_6, true, false, true, false, false);
        createProductDimensionGroup('PG_7', #PG_7, true, false, false, true, false);
        createProductDimensionGroup('PG_8', #PG_8, false, true, true, false, false);
        createProductDimensionGroup('PG_9', #PG_9, false, true, false, true, false);
        createProductDimensionGroup('PG_10', #PG_10, false, false, true, true, false);

        createProductDimensionGroup('PG_11', #PG_11, true, true, true, false, false);
        createProductDimensionGroup('PG_12', #PG_12, true, true, false, true, false);
        createProductDimensionGroup('PG_13', #PG_13, true, false, true, true, false);
        createProductDimensionGroup('PG_14', #PG_14, false, true, true, true, false);

        createProductDimensionGroup('PG_15', #PG_15, true, true, true, true, false);
        
        createProductDimensionGroup('PG_16', #PG_16, true, false, false, false, true);
        createProductDimensionGroup('PG_17', #PG_17, false, true, false, false, true);
        createProductDimensionGroup('PG_18', #PG_18, false, false, true, false, true);
        createProductDimensionGroup('PG_19', #PG_19, false, false, false, true, true);

        createProductDimensionGroup('PG_20', #PG_20, true, true, false, false, true);
        createProductDimensionGroup('PG_21', #PG_21, true, false, true, false, true);
        createProductDimensionGroup('PG_22', #PG_22, true, false, false, true, true);
        createProductDimensionGroup('PG_23', #PG_23, false, true, true, false, true);
        createProductDimensionGroup('PG_24', #PG_24, false, true, false, true, true);
        createProductDimensionGroup('PG_25', #PG_25, false, false, true, true, true);

        createProductDimensionGroup('PG_26', #PG_26, true, true, true, false, true);
        createProductDimensionGroup('PG_27', #PG_27, true, true, false, true, true);
        createProductDimensionGroup('PG_28', #PG_28, true, false, true, true, true);
        createProductDimensionGroup('PG_29', #PG_29, false, true, true, true, true);

        createProductDimensionGroup('PG_30', #PG_30, true, true, true, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Retail Product Category hierarchy and assigns it the Retail product hierarchy role.
    /// </summary>
    private void createProductHierarchy()
    {
        EcoResCategoryHierarchy     ecoResCategoryHierarchy;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;

        if (!EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Retail))
        {
            ecoResCategoryHierarchy = EcoResCategoryHierarchy::findByName(#RetailProductHierarchy);
            if (!ecoResCategoryHierarchy)
            {
                ecoResCategoryHierarchy = ecoResCategoryHierarchy::findOrCreateCategoryHierarchy(#RetailProductHierarchy, EcoResCategoryHierarchyModifier::Category);
            }

            ecoResCategoryHierarchyRole.initValue();
            ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole = EcoResCategoryNamedHierarchyRole::Retail;
            ecoResCategoryHierarchyRole.CategoryHierarchy = ecoResCategoryHierarchy.RecId;
            ecoResCategoryHierarchyRole.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductReleationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Lot matrix, Kit and Parent-child product relation types.
    /// </summary>
    private void createProductReleationType()
    {
        void createRelationType(Name _relationTypeName)
        {
            EcoResProductRelationType               relationType;
            EcoResProductRelationTypeTranslation    relationTypeTrans;

            if (!EcoResProductRelationType::find(_relationTypeName))
            {
                ttsBegin;

                // create Product relation type
                relationType.initValue();
                relationType.Name = _relationTypeName;
                relationType.insert();

                // create Product relation type translation
                relationTypeTrans.initValue();
                relationTypeTrans.ProductRelationType = relationType.RecId;
                relationTypeTrans.FriendlyName = relationType.Name;
                relationTypeTrans.Description = _relationTypeName;
                relationTypeTrans.Language = SystemParameters::getSystemLanguageId();
                relationTypeTrans.insert();

                ttsCommit;
            }
        }

        createRelationType(#RelationTypeLotMatrix);
        createRelationType(#RelationTypeKit);
        createRelationType(#RelationTypeParentChild);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchReqApprovalWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a workflow to automatically approve purchase reqs
    /// </summary>
    private void createPurchReqApprovalWorkflow()
    {
        WorkflowConfiguration       workflowConfiguration;
        WorkflowVersionTable        workflowConfigurationTable;
        WorkflowTable               workflowTable;

        workflowConfiguration = WorkflowConfiguration::newConfiguration_TemplateName(workFlowTypeStr(PurchReqReview));
        workflowConfigurationTable = workflowConfiguration.parmConfiguration();
        workflowConfigurationTable.Enabled = NoYes::Yes;
        workflowTable = workflowConfiguration.parmWorkflow();
        workflowTable.DataArea = curext();
        workflowConfiguration.saveDefinitionVersion();

        workflowConfigurationTable = WorkflowVersionTable::find(workflowConfiguration.parmConfigurationId(), true);
        workflowTable = workflowConfigurationTable.workflowTable(true);
        workflowTable.DefaultConfiguration = NoYes::Yes;
        workflowTable.Module = ModuleAxapta::PurchaseOrder;
        workflowTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchReqBusinessJustificationCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create purchase requisition justification codes.
    /// </summary>
    private void createPurchReqBusinessJustificationCodes()
    {
        PurchReqBusinessJustificationCodes justificationCode;

        select firstOnly justificationCode
            where justificationCode.Description == #PurchReqJustificationCodeDesc;

        if (!justificationCode)
        {
            ttsBegin;
            justificationCode.initValue();
            justificationCode.Description = #PurchReqJustificationCodeDesc;
            justificationCode.Reason = #PurchReqJustificationCodeDesc;
            justificationCode.insert();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceiptProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Default receipt profile.
    /// </summary>
    private void createReceiptProfile()
    {
        RetailReceiptProfile        receiptProfile;
        RetailReceiptProfileLine    receiptProfileLine;
        RetailFormLayout            formLayout;
        DictEnum                    dictEnum;
        RetailReceipt               receipt;
        int                         i;

        if (!RetailReceiptProfile::find(#RetailReceiptProfileId))
        {
            receiptProfile.initValue();
            receiptProfile.ProfileId = #RetailReceiptProfileId;
            receiptProfile.insert();

            dictEnum = new DictEnum(enumNum(RetailReceipt));

            for (i = 0; i < dictEnum.values(); i++)
            {
                receipt = dictEnum.index2Value(i);

                select firstonly FormLayoutId from formLayout
                    where formLayout.LayoutType == receipt;

                if (formLayout.RecId != 0)
                {
                    receiptProfileLine.initValue();
                    receiptProfileLine.ReceiptType = receipt;
                    receiptProfileLine.FormLayoutId = formLayout.FormLayoutId;
                    receiptProfileLine.ProfileId = #RetailReceiptProfileId;
                    receiptProfileLine.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSampelChannleDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sample channel database profile.
    /// </summary>
    private void createSampelChannleDatabase()
    {
        RetailCDXDataGroup          dataGroup;
        RetailConnDatabaseProfile   dbProfile;

        if (!RetailConnDatabaseProfile::find(#ChannelDatabaseProfileName))
        {
            select firstOnly RecId from dataGroup
                where dataGroup.Name == #ChannelDataGroup;

            ttsBegin;

            dbProfile.initValue();
            dbProfile.Name = #ChannelDatabaseProfileName;
            dbProfile.DataGroup = dataGroup.RecId;
            dbProfile.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduleParameters</Name>
				<Source><![CDATA[
    private void createScheduleParameters()
    {
        RetailConnParameters connParameters;

        ttsBegin;
        connParameters = RetailConnParameters::find(true);

        if (!connParameters.HQMsgDBServerName)
        {
            connParameters.HQMsgDBServerName = System.Environment::MachineName;
            connParameters.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStorageDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Con-Dim storage dimension group.
    /// </summary>
    private void createStorageDimensionGroup()
    {
        EcoResStorageDimensionGroup ecoResStorageDimensionGroup;

        if (!EcoResStorageDimensionGroup::findByDimensionGroupName(#StorageDimensionGroupName))
        {
            ecoResStorageDimensionGroup.Name = #StorageDimensionGroupName;
            ecoResStorageDimensionGroup.IsWarehouseMandatoryEnabled = NoYes::Yes;
            ecoResStorageDimensionGroup.IsWarehousePrimaryStockingEnabled = NoYes::Yes;
            ecoResStorageDimensionGroup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSysPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Default purchasing policy
    /// </summary>
    private void createSysPolicy()
    {
        SysPolicyType       sysPolicyType;
        SysPolicy           sysPolicy;

        // Ensure existence of sysPolicyType for purchasing policy.
        void createSysPolicyType()
        {
            select firstonly sysPolicyType
                where sysPolicyType.PolicyType == SysPolicyTypeEnum::PurchasingPolicy;

            if (!sysPolicyType)
            {
                ttsBegin;
                sysPolicyType.initValue();
                sysPolicyType.PolicyType = SysPolicyTypeEnum::PurchasingPolicy;
                sysPolicyType.HierarchyPurpose = HierarchyPurpose::PurchaseControl;
                sysPolicyType.insert();
                ttsCommit;
            }
        }

        select firstonly sysPolicy
            where sysPolicy.Name == #SysPolicyName;

        if (!sysPolicy)
        {
            // Ensure policy type has been created
            createSysPolicyType();

            ttsbegin;
            sysPolicy.Name = #SysPolicyName;
            sysPolicy.IsActive = NoYes::Yes;
            sysPolicy.PolicyType = sysPolicyType.RecId;
            sysPolicy.Description = #SysPolicyName;
            sysPolicy.initValue();
            sysPolicy.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSysPolicyRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the purchasing policy rule
    /// </summary>
    private void createSysPolicyRule()
    {
        SysPolicy               sysPolicy;
        SysPolicyRuleType       sysPolicyRuleType;
        SysPolicyRule           sysPolicyRule;

        void creatSysPolicyRuleType()
        {
            select firstOnly sysPolicyRuleType
                where sysPolicyRuleType.Name == #SysPolicyRuleTypeName;

            if (!sysPolicyRuleType)
            {
                ttsbegin;

                sysPolicyRuleType.initValue();
                sysPolicyRuleType.Name = #SysPolicyRuleTypeName;
                sysPolicyRuleType.PolicyType = SysPolicyType::findByEnum(SysPolicyTypeEnum::PurchasingPolicy).RecId;
                sysPolicyRuleType.IsPrecedenceSupported = NoYes::Yes;
                sysPolicyRuleType.RuleFormName = #SysPolicyRuleTypeName;
                sysPolicyRuleType.insert();

                ttscommit;
            }
        }

        select firstonly sysPolicy
            where sysPolicy.Name == #SysPolicyName;

        select firstOnly sysPolicyRule
            where sysPolicyRule.Policy == sysPolicy.RecId;

        if (!sysPolicyRule)
        {
            // Ensure existence of policy rule type
            creatSysPolicyRuleType();

            ttsbegin;

            sysPolicyRule.initValue();
            sysPolicyRule.Policy = sysPolicy.RecId;
            sysPolicyRule.PolicyRuleType = sysPolicyRuleType.RecId;
            sysPolicyRule.ValidFrom = DateTimeUtil::utcNow();
            sysPolicyRule.ValidTo = DateTimeUtil::maxValue();
            sysPolicyRule.insert();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAuthority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Default tax authority
    /// </summary>
    private void createTaxAuthority()
    {
        TaxAuthorityAddress taxAuthority;

        if (!TaxAuthorityAddress::find(#TaxAuthority))
        {
            taxAuthority.initValue();
            taxAuthority.TaxAuthority = #TaxAuthority;
            taxAuthority.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxLedgerPostingGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Retail tax ledger posting group.
    /// </summary>
    private void createTaxLedgerPostingGroup()
    {
        TaxLedgerAccountGroup taxLedgerAccountGroup;

        if (!TaxLedgerAccountGroup::find(#TaxAccountGroup))
        {
            taxLedgerAccountGroup.initValue();
            taxLedgerAccountGroup.TaxAccountGroup = #TaxAccountGroup;
            // Add required tax ledger dimensions for posting
            taxLedgerAccountGroup.TaxOutgoingLedgerDimension = this.getLedgerDimension(#StateTaxPayableAccount);
            taxLedgerAccountGroup.TaxReportLedgerDimension = this.getLedgerDimension(#SalesTaxPayableClearing);
            taxLedgerAccountGroup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxSettlementPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Month tax settlement period.
    /// </summary>
    private void createTaxSettlementPeriod()
    {
        TaxPeriodHead taxPeriodHead;

        if (!TaxPeriodHead::find(#TaxPeriod))
        {
            taxPeriodHead.initValue();
            taxPeriodHead.TaxPeriod = #TaxPeriod;
            taxPeriodHead.TaxAuthority = #TaxAuthority;
            taxPeriodHead.PeriodUnit = PeriodUnit::Month;
            taxPeriodHead.QtyUnit = 1;
            taxPeriodHead.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrackingDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Serialized tracking dimension group.
    /// </summary>
    /// <remarks>
    /// This function creates a new tracking group id where serial number is active.
    /// </remarks>
    private void createTrackingDimensionGroup()
    {
        EcoResTrackingDimensionGroup            trackingDimGrp;
        EcoResTrackingDimensionGroupFldSetup    trackingDimGrpFldSetup;

        ttsBegin;
        trackingDimGrp = EcoResTrackingDimensionGroup::findByDimensionGroupName(#SerializedTrackingDimensionGroupName);
        if (!trackingDimGrp.RecId)
        {
            trackingDimGrp.Name = #SerializedTrackingDimensionGroupName;
            trackingDimGrp.Description = #serialTrackingDimGroupName;
            trackingDimGrp.insert();

            trackingDimGrpFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(trackingDimGrp.RecId, fieldNum(InventDim, InventSerialId), true);

            trackingDimGrpFldSetup.IsActive = NoYes::Yes;
            trackingDimGrpFldSetup.IsPrimaryStockingEnabled = NoYes::Yes;
            trackingDimGrpFldSetup.IsPhysicalInventoryEnabled = NoYes::Yes;
            trackingDimGrpFldSetup.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionServiceProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the JBB transaction service profile.
    /// </summary>
    private void createTransactionServiceProfile()
    {
        RetailTransactionServiceProfile retailTransactionServiceProfile;

        if (!RetailTransactionServiceProfile::find(#TransactionServiceProfile))
        {
            ttsBegin;

            retailTransactionServiceProfile.initValue();
            retailTransactionServiceProfile.AudienceUrn = #TransactionServiceProfile_AudienceUrn;
            retailTransactionServiceProfile.IdentityProvider = #TransactionServiceProfile_IdentityProvider;
            retailTransactionServiceProfile.profileId = #TransactionServiceProfile;
            retailTransactionServiceProfile.Language = SystemParameters::getSystemLanguageId();
            retailTransactionServiceProfile.TSVersion = RetailProfileVersion::AX62;
            retailTransactionServiceProfile.TSStaff = NoYes::No;
            retailTransactionServiceProfile.ServerServiceName = #TSWebApplicationName;
            retailTransactionServiceProfile.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Pcs unit of measure.
    /// </summary>
    private void createUnitOfMeasure()
    {
        InventParameters inventParameters;
        UnitOfMeasure uom;

        ttsBegin;
        if (!UnitOfMeasure::findBySymbol(#UnitOfMeasure))
        {
            uom.initValue();
            uom.Symbol = #UnitOfMeasure;
            uom.UnitOfMeasureClass = UnitOfMeasureClass::Quantity;
            uom.DecimalPrecision = 2;
            uom.SystemOfUnits = UnitOfMeasureSystemOfUnits::None;
            uom.insert();
        }

        inventParameters = InventParameters::find(true);
        if (!inventParameters.DefaultUnitId)
        {
            inventParameters.DefaultUnitId = #UnitOfMeasure;
            inventParameters.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Retail vendor group.
    /// </summary>
    private void createVendGroup()
    {
        VendGroup vendGroup;

        // Vendor group not found - create new
        if (!VendGroup::find(#VendGroup))
        {
            vendGroup.initValue();
            vendGroup.VendGroup = #VendGroup;
            vendGroup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the 'one-time-vendor' and assigns it to the 'RetailVend' address book.
    /// </summary>
    private void createVendor()
    {
        VendTable vendTable;
        DirPartyTable dirPartyTable;
        DirAddressBookParty dirAddressBookParty;
        DirAddressBookRecId dirAddressBookRecId;

        // Vendor not found - create 'one-time-vendor'
        if (!VendTable::find(#Vendor))
        {
            ttsbegin;

            dirPartyTable = DirPartyTable::findByName(#VendorPartyName, DirPartyType::Person);

            // Party not found - create new party of 'Person' type
            if (!dirPartyTable)
            {
                dirPartyTable = DirPartyTable::createNew(DirPartyType::Person, #VendorPartyName);
            }

            dirAddressBookRecId = DirAddressBook::find(#VendorAddressBook).RecId;
            dirAddressBookParty = DirAddressBookParty::find(dirAddressBookRecId, dirPartyTable.RecId);

            // Party address not found - create address book for party
            if (!dirAddressBookParty)
            {
                dirAddressBookParty.AddressBook = dirAddressBookRecId;
                dirAddressBookParty.Party = dirPartyTable.RecId;
                dirAddressBookParty.insert();
            }

            vendTable.initValue();
            vendTable.AccountNum = #Vendor;
            vendTable.VendGroup = #VendGroup;
            vendTable.Currency = SystemParameters::find(false).SystemCurrencyCode;
            vendTable.Party = dirPartyTable.RecId;
            vendTable.OneTimeVendor = NoYes::Yes;
            vendTable.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create vendor posting profile.
    /// </summary>
    private void createVendorPostingProfile()
    {
        VendLedger          vendLedger;

        void addVendPostingProfileLedgerAccounts(
            int                             accountCode,
            PostingProfileAccountRelation   num,
            MainAccountNum                  clearingAccount,
            MainAccountNum                  summaryAccount)
        {
            VendLedgerAccounts  vendLedgerAccounts;

            vendLedgerAccounts.initValue();

            vendLedgerAccounts.PostingProfile = #PostingProfile;
            vendLedgerAccounts.AccountCode = accountCode;
            vendLedgerAccounts.Num = num;
            vendLedgerAccounts.ClearingLedgerDimension = this.getLedgerDimension(clearingAccount);
            vendLedgerAccounts.SummaryLedgerDimension = this.getLedgerDimension(summaryAccount);

            vendLedgerAccounts.insert();
        }

        if (!VendLedger::exist(#PostingProfile))
        {
            ttsBegin;

            // Create customer posting profile
            vendLedger.initValue();

            vendLedger.PostingProfile = #PostingProfile;
            vendLedger.Name = #PostingProfileDescription;
            vendLedger.Settlement = NoYes::Yes;
            vendLedger.Cancel = NoYes::Yes;

            vendLedger.insert();

            // Set up vendor posting profile ledgers
            addVendPostingProfileLedgerAccounts(2, '', #BankAccount, #AccountsPayable);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVisualProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the VP001 visual profile.
    /// </summary>
    private void createVisualProfile()
    {
        RetailVisualProfile retailVisualProfile;

        if (!RetailVisualProfile::find(#VisualProfile))
        {
            retailVisualProfile.initValue();
            retailVisualProfile.profileId = #VisualProfile;
            retailVisualProfile.name = #VisualProfileName;
            retailVisualProfile.FullScreenMode = NoYes::Yes;
            retailVisualProfile.designAllowedOnPos = NoYes::Yes;
            retailVisualProfile.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get ledger demension for main account
    /// </summary>
    /// <param name="mainAccountId">
    /// Main account number
    /// </param>
    /// <returns>
    /// Return ledger dimension of the main account
    /// </returns>
    private LedgerDimensionAccount getLedgerDimension(MainAccountNum mainAccountId)
    {
        LedgerDimensionBuilder          ledgerDimensionBuilder;
        DimensionAttributeValue         dimAttrValue;
        LedgerDimensionAccount          ledgerDimension;
        MainAccount                     mainAccount;
        DimensionAttributeSetStorage    dimAttrSetStorage;
        DimensionAttribute              dimAttr;
        RecId                           dimAttId_MainAccount;
        RecId                           dimensionAttributeSetId;

        // Return 0 if the account is empty
        if (mainAccountId == "")
        {
            return 0;
        }

        dimAttId_MainAccount = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
        dimAttr = DimensionAttribute::find(dimAttId_MainAccount);

        // Create dimension set
        dimAttrSetStorage = new DimensionAttributeSetStorage();
        dimAttrSetStorage.addItem(dimAttr.RecId, dimAttr.HashKey, NoYes::Yes);
        dimensionAttributeSetId = dimAttrSetStorage.save();

        // Setup the builder
        ledgerDimensionBuilder = LedgerDimensionBuilder::construct(dimensionAttributeSetId);
        ledgerDimensionBuilder.setDimensionAttributes(new List(Types::Int64));
        ledgerDimensionBuilder.setTagCategories(new Map(Types::Int64, Types::Int64));

        // Locate the main account
        mainAccount = MainAccount::findByMainAccountId(mainAccountId);

        // Get the ledger dimension for the main account
        dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimAttId_MainAccount, mainAccount.RecId, false, true);
        ledgerDimension = ledgerDimensionBuilder.getLedgerDimension(mainAccountId, dimAttrValue.RecId, dimAttrValue.HashKey, new Map(Types::Int64, Types::String));

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDispositionCodeForCustomerOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a default disposition code and sets it as the disposition code used for custoomer orders.
    /// </summary>
    private void setDefaultDispositionCodeForCustomerOrder()
    {
        // create the default disposition code.
        ReturnDispositionCode returnDispositionCode;
        
        select returnDispositionCode
            where returnDispositionCode.DispositionCodeId == #CustomerOrderDefaultDispositionCode &&
            returnDispositionCode.DispositionAction == DispositionAction::Credit;

        if (returnDispositionCode.RecId == 0) // if the disposition code does not exist create it.
        {
            returnDispositionCode.DispositionCodeId = #CustomerOrderDefaultDispositionCode;
            returnDispositionCode.DispositionAction = DispositionAction::Credit;
            returnDispositionCode.Description = 'No charge. Put item back into inventory, credit customer';
            returnDispositionCode.insert();
        }

        ttsbegin;
        // Default the disposition code property of retail parameter to th above disposition code record.
        RetailParameters retailParameters = RetailParameters::find(true /*forupdate = true*/);
        retailParameters.ReturnDispositionCodeId = returnDispositionCode.DispositionCodeId;
        retailParameters.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates ledger journal names and their corresponding number sequences.
    /// </summary>
    private void createLedgerJournalNames()
    {
        str ledgerJournalNameId;
        str offsetLedgerDimension;
        str currencyCode;
        str numberSequenceKey;
        str numberSequenceFormat;

        NumberSequenceTable         seqTable;
        LedgerJournalName           ledger;
        Map                         ledgerJournalDescriptions;
        
        XML             xmlData;
        XmlDocument     xmlDoc;
        XmlElement      xmlRoot;
        XmlElement      xmlRecord;
        XmlNodeList     xmlRecordList;

        Map getJournalDescriptions()
        {
            Map journalDescriptions = new Map(Types::String, Types::String);

            journalDescriptions.insert(#AllocationJournalDescription, "@Retail:LedgerAllocations");
            journalDescriptions.insert(#APInvAppJournalDescription, "@Retail:APInvoiceApproval");
            journalDescriptions.insert(#APInvoiceJournalDescription, "@SYS135157");
            journalDescriptions.insert(#APInvRegJournalDescription, "@Retail:APInvoiceRegister");
            journalDescriptions.insert(#BudgetJournalDescription, "@Retail:BudgetAppropriation");
            journalDescriptions.insert(#CheckRevJournalDescription, "@Retail:CheckReversal");
            journalDescriptions.insert(#CustPayJournalDescription, "@SYS23013");
            journalDescriptions.insert(#DepRevJournalDescription, "@Retail:DepositReversal");
            journalDescriptions.insert(#FABudgetJournalDescription, "@Retail:FABudget");
            journalDescriptions.insert(#FACurJournalDescription, "@Retail:FixedAssetEntriesCurrent");
            journalDescriptions.insert(#FADepBookJournalDescription, "@Retail:FADepreciationBook");
            journalDescriptions.insert(#FAOperJournalDescription, "@Retail:FixedAssetEntriesOperations");
            journalDescriptions.insert(#FATaxJournalDescription, "@Retail:FixedAssetEntriesTax");
            journalDescriptions.insert(#FrtJrnJournalDescription, "@PRO1153");
            journalDescriptions.insert(#IntJrnJournalDescription, "@Retail:IntercompanyJournal");
            journalDescriptions.insert(#PayrollJournalDescription, "@Retail:PayrollJournal");
            journalDescriptions.insert(#PerJrnJournalDescription, "@Retail:PeriodicJournal");
            journalDescriptions.insert(#PrjJrnJournalDescription, "@SYS3432");
            journalDescriptions.insert(#ServExpJournalDescription, "@Retail:ServiceExpenses");
            journalDescriptions.insert(#TrvExpJournalDescription, "@SYS90729");
            journalDescriptions.insert(#VendPayJournalDescription, "@GLS50729");
            journalDescriptions.insert(#WriteOffJournalDescription, "@SYS129421");

            return journalDescriptions;
        }

        // Load data from resource
        [xmlData] = SysResource::getResourceNodeData(SysResource::getResourceNode(resourceStr(RetailSMBLedgerJournalNames)));
        xmlDoc = XmlDocument::newXml(xmlData);
        xmlRoot = xmlDoc.documentElement();
        xmlRecordList = xmlRoot.childNodes();

        if (xmlRecordList)
        {
            ttsbegin;
            ledgerJournalDescriptions = getJournalDescriptions();

            // Go through each record to populate MainAccount table
            for (int i = 0; i < xmlRecordList.length(); i++)
            {
                xmlRecord = xmlRecordList.item(i);

                ledgerJournalNameId = xmlRecord.getAttribute('JournalName');

                if (!LedgerJournalName::find(ledgerJournalNameId))
                {
                    numberSequenceKey = xmlRecord.getAttribute('NumberSequenceTable');
                    seqTable = NumberSequenceTable::findByNaturalKey(numberSequenceKey);

                    // create a number sequence if it doesn't exist
                    if (!seqTable)
                    {
                        seqTable.initValue();
                        seqTable.NumberSequence = numberSequenceKey;
                        seqTable.InUse = any2Enum(xmlRecord.getAttribute('NumberSequenceInUse'));
                        numberSequenceFormat = xmlRecord.getAttribute('NumberSequenceFormat');
                        seqTable.AnnotatedFormat = NumberSeq::createAnnotatedFormatFromFormat(numberSequenceFormat);
                        seqTable.Format = numberSequenceFormat;
                        seqTable.Continuous = any2Enum(xmlRecord.getAttribute('NumberSequenceContinuous'));
                        seqTable.NumberSequenceScope = NumberSequenceScope::findByNaturalKey(curext(), 0,0,0,OMOperatingUnitType::None).RecId;
                        seqTable.insert();
                    }

                    ledger.initValue();
                    ledger.JournalName = ledgerJournalNameId;
                    ledger.Name = ledgerJournalDescriptions.lookup(ledgerJournalNameId);
                    ledger.NumberSequenceTable = seqTable.RecId;
                    ledger.JournalType = any2Enum(xmlRecord.getAttribute('JournalType'));
                    ledger.LedgerJournalInclTax = any2Enum(xmlRecord.getAttribute('LedgerJournalInclTax'));
                    ledger.FixedOffsetAccount = any2Enum(xmlRecord.getAttribute('FixedOffsetAccount'));
                    ledger.offsetAccountType = LedgerJournalACType::Ledger;
                    ledger.OffsetLedgerDimension = this.getLedgerDimension(xmlRecord.getAttribute('OffsetLedgerDimension'));
                    ledger.CurrencyCode = xmlRecord.getAttribute('CurrencyCode') ? SystemParameters::find(false).SystemCurrencyCode : "";
                    ledger.CurrentOperationsTax = any2Enum(xmlRecord.getAttribute('CurrentOperationsTax'));
                    ledger.insert();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultInvoiceJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets invoice default journal name.
    /// </summary>
    private void setDefaultInvoiceJournalName()
    {
        RetailParameters    retailParameters;
        LedgerJournalName   ledgerJournalName;

        ledgerJournalName = LedgerJournalName::find(#CustPayJournalDescription);
        retailParameters = RetailParameters::find(true);

        if(ledgerJournalName)
        {
            ttsBegin;
            retailParameters.PrePaymentLedgerJournalName = ledgerJournalName.JournalName;
            retailParameters.PrepaymentLedgerDimension = ledgerJournalName.OffsetLedgerDimension;
            retailParameters.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RetailSMBSeedGenerator::UpdateSystemParameters();
        RetailSMBSeedGenerator::UpdateSharedParameters();
        ISOCurrencyCode::createDefaultData();
        Currency::createDefaultData();
        JmgTimeCalcParmeters::restoreDefaultSetup();
        RetailSMBSeedGenerator::CreateNumberSequence();

        this.createLogisticsAddressState();
        this.createOMHierarchy();
        this.createAddressBook();
        this.createVendGroup();
        this.createVendor();
        this.createCustGroup();
        this.createCustomer();
        this.createProductHierarchy();
        this.createUnitOfMeasure();
        this.createItemGroup();
        this.createModelGroup();
        this.createInventoryJournalName();
        this.createPriceDiscJournalName();
        this.createTrackingDimensionGroup();
        this.createTransactionServiceProfile();
        this.createVisualProfile();
        this.createFunctionalityProfile();
        this.createCDXWorkingFolders();
        this.createChannelDataGroup();
        this.createSampelChannleDatabase();
        this.updateRetailConnSchedule();
        this.createPosPermissionGroup();
        this.createProductReleationType();
        this.createJob();
        this.createPaymentJournalName();
        this.createStorageDimensionGroup();
        this.createExchangeRateType();
        this.createFiscalCalendar();

        if (redeployChartOfAccounts)
        {
            this.createChartOfAccounts();
            this.createLedger();
            this.createTaxLedgerPostingGroup();
            this.setupAccountsForAutoTransactions();
            this.createCustomerPostingProfile();
            this.createVendorPostingProfile();
            this.setupInventPostingAccounts();
            this.createLedgerJournalNames();
            this.createFiscalYears();
        }

        this.updateAccountPayableParameters();
        this.updateAccountReceivableParameters();
        this.createTaxAuthority();
        this.createTaxSettlementPeriod();
        this.createBarcodeSetup();
        this.createHCMApprovalGroup();
        this.createHCMCalculationGroup();
        this.createHCMTimeProfile();
        this.createHCMTimeProfileGroup();
        this.createPriceParameters();
        this.createReceiptProfile();
        this.createBuyerGroup();
        this.createProductDimensionGroups();
        this.updateLanguageForLegalEntity();
        this.createSysPolicy();
        this.createSysPolicyRule();
        this.createPurchReqBusinessJustificationCodes();
        this.createScheduleParameters();
        this.createEmailTemplate();
        this.createCallCenterParameters();
        this.setDefaultDispositionCodeForCustomerOrder();
        this.setDefaultInvoiceJournalName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupAccountsForAutoTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup accounts for automatic transactions
    /// </summary>
    private void setupAccountsForAutoTransactions()
    {
        void setupAccountForPostingType(LedgerPostingType code, MainAccountNum mainAccountId)
        {
            LedgerSystemAccounts systemAccounts;

            if (!LedgerSystemAccounts::exist(code))
            {
                systemAccounts.initValue();
                systemAccounts.Code = code;
                systemAccounts.LedgerDimension = this.getLedgerDimension(mainAccountId);
                systemAccounts.insert();
            }
        }

        ttsBegin;

        setupAccountForPostingType(LedgerPostingType::MSTDiffSecond, #ErrorAccount);
        setupAccountForPostingType(LedgerPostingType::ErrorAccount, #ErrorAccount);
        setupAccountForPostingType(LedgerPostingType::MSTDiff, #RoundingDifferenceAccount);
        setupAccountForPostingType(LedgerPostingType::YearResult, #RetainedEarningsAccount);
        setupAccountForPostingType(LedgerPostingType::CashDiscount, #PurchaseCashDiscountsAccount);
        setupAccountForPostingType(LedgerPostingType::ConsolidateDiffBalance, #ErrorAccount);
        setupAccountForPostingType(LedgerPostingType::CustCashDisc, #PurchaseCashDiscountsAccount);
        setupAccountForPostingType(LedgerPostingType::CustInvoiceDisc, #VendorSalesDiscountsAccount);
        setupAccountForPostingType(LedgerPostingType::VendCashDisc, #CashDiscountsTakenAccount);
        setupAccountForPostingType(LedgerPostingType::VendInvoiceDisc, #DiscountAndAllowancesTakenAccount);
        setupAccountForPostingType(LedgerPostingType::SalesFreight, #FreightTransportationInAccount);
        setupAccountForPostingType(LedgerPostingType::SalesFee, #MiscellaneousChargesAccount);
        setupAccountForPostingType(LedgerPostingType::SalesRoundOff, #RoundingDifferenceAccount);
        setupAccountForPostingType(LedgerPostingType::PurchaseInvoiceRoundOff, #RoundingDifferenceAccount);
        setupAccountForPostingType(LedgerPostingType::PurchStdProfit, #StandardCostPriceInventoryAdjustmentsAccount);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupInventPostingAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set up inventory/warehouse posting accounts.
    /// </summary>
    private void setupInventPostingAccounts()
    {
        void addDefaultInventPostingAccount(InventAccountType accountType, MainAccountNum mainAccountId)
        {
            InventPosting   inventPosting;

            select firstonly inventPosting
                where inventPosting.ItemCode == InventPostingItemCode::All
                    && inventPosting.InventAccountType == accountType;

            if (inventPosting.RecId == 0)
            {
                inventPosting.initValue();

                inventPosting.InventAccountType = accountType;
                inventPosting.ItemCode = InventPostingItemCode::All;
                inventPosting.LedgerDimension = this.getLedgerDimension(mainAccountId);

                inventPosting.insert();
            }
        }

        ttsBegin;

        // Sales order
        addDefaultInventPostingAccount(InventPosting::salesAccount2AccountType(InventAccountTypeSales::PackingSlip), #InventoryClearingShippedUninvoicedAccount);
        addDefaultInventPostingAccount(InventPosting::salesAccount2AccountType(InventAccountTypeSales::PackingSlipOffsetAccount), #AccountsReceivableClearing);
        addDefaultInventPostingAccount(InventPosting::salesAccount2AccountType(InventAccountTypeSales::Issue), #InventoryMiscAccount);
        addDefaultInventPostingAccount(InventPosting::salesAccount2AccountType(InventAccountTypeSales::Consumption), #COGSAccount);
        addDefaultInventPostingAccount(InventPosting::salesAccount2AccountType(InventAccountTypeSales::Revenue), #SalesAccount);
        addDefaultInventPostingAccount(InventPosting::salesAccount2AccountType(InventAccountTypeSales::Disc), #DiscountAndAllowancesTakenAccount);
        addDefaultInventPostingAccount(InventPosting::salesAccount2AccountType(InventAccountTypeSales::Commission), #CommissionExpenseAccount);
        addDefaultInventPostingAccount(InventPosting::salesAccount2AccountType(InventAccountTypeSales::CommissionOffsetAccount), #CommissionsPayableAccount);

        // Purchase order
        addDefaultInventPostingAccount(InventPosting::purchAccount2AccountType(InventAccountTypePurch::PackingSlip), #InventoryClearingAccount);
        addDefaultInventPostingAccount(InventPosting::purchAccount2AccountType(InventAccountTypePurch::PackingSlipOffsetAccount), #AccountsPayableClearing);
        addDefaultInventPostingAccount(InventPosting::purchAccount2AccountType(InventAccountTypePurch::Receipt), #InventoryMiscAccount);
        addDefaultInventPostingAccount(InventPosting::purchAccount2AccountType(InventAccountTypePurch::Consumption), #OfficeSuppliesExpenseAccount);
        addDefaultInventPostingAccount(InventPosting::purchAccount2AccountType(InventAccountTypePurch::Disc), #VendorSalesDiscountsAccount);
        addDefaultInventPostingAccount(InventPosting::purchAccount2AccountType(InventAccountTypePurch::StdProfit), #StandardCostPriceInventoryAdjustmentsAccount);
        addDefaultInventPostingAccount(InventPosting::purchAccount2AccountType(InventAccountTypePurch::StdLoss), #StandardCostPriceInventoryAdjustmentsAccount);
        addDefaultInventPostingAccount(InventPosting::purchAccount2AccountType(InventAccountTypePurch::StdOffsetAccount), #InventoryAccount);
        addDefaultInventPostingAccount(InventPosting::purchAccount2AccountType(InventAccountTypePurch::PackingSlipPurchaseOffsetAccount), #PurchaseAccrualAccount);
        addDefaultInventPostingAccount(InventPosting::purchAccount2AccountType(InventAccountTypePurch::PackingSlipTax), #PurchaseAccruedSalesTaxOnReceiptAccount);
        addDefaultInventPostingAccount(InventPosting::purchAccount2AccountType(InventAccountTypePurch::Expense), #MiscellaneousExpenseAccount);

        // Inventory
        addDefaultInventPostingAccount(InventPosting::inventAccount2AccountType(InventAccountTypeInvent::StdProfit), #StandardCostPriceInventoryAdjustmentsAccount);
        addDefaultInventPostingAccount(InventPosting::inventAccount2AccountType(InventAccountTypeInvent::StdLoss), #StandardCostPriceInventoryAdjustmentsAccount);
        addDefaultInventPostingAccount(InventPosting::inventAccount2AccountType(InventAccountTypeInvent::Issue), #InventoryMiscAccount);
        addDefaultInventPostingAccount(InventPosting::inventAccount2AccountType(InventAccountTypeInvent::Loss), #InventoryAdjustmentAccount);
        addDefaultInventPostingAccount(InventPosting::inventAccount2AccountType(InventAccountTypeInvent::Receipt), #InventoryMiscAccount);
        addDefaultInventPostingAccount(InventPosting::inventAccount2AccountType(InventAccountTypeInvent::Profit), #InventoryAdjustmentAccount);
        addDefaultInventPostingAccount(InventPosting::inventAccount2AccountType(InventAccountTypeInvent::InterUnitPayable), #InterUnitPayableAccount);
        addDefaultInventPostingAccount(InventPosting::inventAccount2AccountType(InventAccountTypeInvent::InterUnitReceivable), #InterUnitReceivableAccount);
        addDefaultInventPostingAccount(InventPosting::inventAccount2AccountType(InventAccountTypeInvent::IssueFixedAsset), #OfficeSuppliesExpenseAccount);

        // Standard cost variance
        addDefaultInventPostingAccount(InventPosting::varianceAccount2AccountType(InventAccountTypeStdCostVariance::ProdProductionPriceVariance), #PurchasePriceVarianceAccount);
        addDefaultInventPostingAccount(InventPosting::varianceAccount2AccountType(InventAccountTypeStdCostVariance::InventCostRevaluation), #InventoryCostRevaluationAccount);
        addDefaultInventPostingAccount(InventPosting::varianceAccount2AccountType(InventAccountTypeStdCostVariance::InventCostChangeVariance), #CostChangeVarianceAccount);
        addDefaultInventPostingAccount(InventPosting::varianceAccount2AccountType(InventAccountTypeStdCostVariance::ProdLotSizeVariance), #ProductionLotSizeVarianceAccount);
        addDefaultInventPostingAccount(InventPosting::varianceAccount2AccountType(InventAccountTypeStdCostVariance::ProdProductionPriceVariance), #ProductionPriceVarianceAccount);
        addDefaultInventPostingAccount(InventPosting::varianceAccount2AccountType(InventAccountTypeStdCostVariance::ProdQuantityVariance), #ProductionQuantityVarianceAccount);
        addDefaultInventPostingAccount(InventPosting::varianceAccount2AccountType(InventAccountTypeStdCostVariance::ProdSubstitutionVariance), #ProductionSubstitutionVarianceAccount);
        addDefaultInventPostingAccount(InventPosting::varianceAccount2AccountType(InventAccountTypeStdCostVariance::InventRoundingVariance), #OtherVariancesToStandardCostAccount);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountPayableParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set up posting profiles for account payable.
    /// </summary>
    private void updateAccountPayableParameters()
    {
        VendParameters vendParameters = VendParameters::find(true);

        ttsBegin;

        if (redeployChartOfAccounts)
        {
            // Update posting profiles
            vendParameters.PostingProfile = #PostingProfile;
            vendParameters.PrepaymentPostingProfile = #PostingProfile;
        }

        vendParameters.TaxOnPrepayment = NoYes::Yes;

        vendParameters.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountReceivableParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set up posting profiles for account receivable.
    /// </summary>
    private void updateAccountReceivableParameters()
    {
        CustParameters custParameters = CustParameters::find(true);
        MainAccount mainAccount;
        LedgerChartOfAccounts ledgerChartOfAccounts;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        ledgerChartOfAccounts = LedgerChartOfAccounts::findByName(#ChartOfAccounts);
        mainAccount = MainAccount::findByMainAccountId(#CreditCardPaymentPostingMainAccountID, false, ledgerChartOfAccounts.RecId);
        
        select dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.MainAccount == mainAccount.RecId;

        ttsBegin;

        if (redeployChartOfAccounts)
        {
            // Update posting profiles
            custParameters.PostingProfile = #PostingProfile;
            custParameters.PrepaymentPostingProfile = #PostingProfile;
            custParameters.CreditCardPostingLedgerDimension = dimensionAttributeValueCombination.RecId;

            // Update settle account
            custParameters.ClearingLedgerDimension = this.getLedgerDimension(#BankAccount);
        }

        // Update Call Center Price Details
        custParameters.MCREnablePriceDetails = NoYes::Yes;

        custParameters.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLanguageForLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set language for current company
    /// </summary>
    private void updateLanguageForLegalEntity()
    {
        CompanyInfo legalEntity = CompanyInfo::find(true);
        legalEntity.LanguageId = LanguageTable::defaultLanguage();
        legalEntity.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailConnSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the scheduler jobs with channel data group.
    /// </summary>
    private void updateRetailConnSchedule()
    {
        RecId dataGroupRecId;
        RetailConnSchedule  retailConnSchedule;
        RetailCDXScheduleDataGroup retailCDXScheduleDataGroup;

        dataGroupRecId = (Select firstOnly RecId from RetailCDXDataGroup where RetailCDXDataGroup.Name == #ChannelDataGroup).RecId;

        ttsBegin;
        while select RecId from retailConnSchedule
        {
            if (retailConnSchedule.RecId)
            {
                // Check for the existance of the mapping between schedule and Channel data group.
                select firstOnly retailCDXScheduleDataGroup
                    where  retailCDXScheduleDataGroup.Schedule ==  retailConnSchedule.RecId
                        && retailCDXScheduleDataGroup.DataGroup == dataGroupRecId;

                // If  mapping between schedule and Channel data group not exist - create mapping.
                if (!retailCDXScheduleDataGroup)
                {
                    retailCDXScheduleDataGroup.Schedule = retailConnSchedule.RecId;
                    retailCDXScheduleDataGroup.DataGroup = dataGroupRecId;
                    retailCDXScheduleDataGroup.insert();
                }
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return strfmt("@REX1196");
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailSMBSeedGenerator retailSMBSeedGenerator = new RetailSMBSeedGenerator();

        if (_args && _args.parmObject())
        {
            RetailSMBSeedGeneratorSettings settings = _args.parmObject();

            retailSMBSeedGenerator.redeployChartOfAccounts = settings.parmReDeployChartOfAccounts();
        }

        // If args are null initializing the redeployChartOfAccounts as false, if ChartOfAccounts already exists.
        if (_args == null)
        {
            retailSMBSeedGenerator.redeployChartOfAccounts = Ledger::findByLegalEntity(CompanyInfo::find(true).RecId).ChartOfAccounts ? false : true;
        }

        retailSMBSeedGenerator.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateSystemParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set default language/region.
    /// </summary>
    public static void UpdateSystemParameters()
    {
        System.Globalization.CultureInfo    ci;
        System.Globalization.RegionInfo     ri;
        LanguageTable                       languageTable;
        SystemParameters                    sysParameters;
        CompanyInfo                         companyInfo;
        str                                 currencyCode;

        // Get OS culture and region info
        ci = System.Globalization.CultureInfo::get_InstalledUICulture();
        ri = new System.Globalization.RegionInfo(ci.get_LCID());

        // Try to locate the record in LanguageTable
        select firstonly RecId, LanguageId from languageTable index Key
            where languageTable.LabelFile == true && languageTable.LanguageId == ci.get_Name();

        if (languageTable.RecId == 0)
        {
            // Fall back to en-US
            select firstonly RecId, LanguageId from languageTable
                where languageTable.LanguageId == 'en-us';
        }

        // Fall back to USD if the currency code is not supported by AX
        currencyCode = ri.get_ISOCurrencySymbol();
        if (!ISOCurrencyCode::exist(currencyCode))
        {
            currencyCode = 'USD';
        }

        ttsBegin;

        sysParameters = SystemParameters::find(true);

        // Set system language and currency code
        if (sysParameters.SystemLanguageId == '')
        {
            sysParameters.SystemLanguageId = languageTable.LanguageId;
        }

        if (sysParameters.SystemCurrencyCode == '')
        {
            sysParameters.SystemCurrencyCode = currencyCode;
        }

        sysParameters.SystemLineNumberIncrement = 10;

        sysParameters.update();

        // Set language for company
        companyInfo = CompanyInfo::find(true);
        if (companyInfo.LanguageId == '')
        {
            companyInfo.LanguageId = languageTable.LanguageId;
        }
        companyInfo.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the default email templates.
    /// </summary>
    private void createEmailTemplate()
    {
        // Create sysEmailtable entries for E-mail templates
        Void createEmailTable( SysEmailId _emailId, SysEmailDescriptionType _description, EmailProfileName _senderName)
        {
            SysEmailTable   emailTable;

            emailTable = SysEmailTable::find(_emailId,true);
            if (!emailTable)
            {
                emailTable.EmailId = _emailId;
                emailTable.DefaultLanguage = SystemParameters::getSystemLanguageId();
                emailTable.Description = _description;
                emailTable.SenderAddr = #AdminEmailAddress;
                emailTable.SenderName = _senderName;
                emailTable.Priority = eMailPriority::Normal;
                emailTable.insert();
            }
        }

        // Get template resource name for E-mail templates
        str emailMessageTemplateResource(str resourceName)
        {
            ResourceNode templateNode;
            container templateData;
            str templateStr;

            templateNode = SysResource::getResourceNode(resourceName);
            if (templateNode)
            {
                templateData = SysResource::getResourceNodeData(templateNode);
                templateStr = conpeek(templateData, 1);
            }

            return templateStr;
        }

        // Create sysEmailmessagetable entries for E-mail templates
        void createEmailMessageTable( SysEmailId _emailId, str _resourceName, SysEmailSubject _subject)
        {
            SysEmailMessageTable    emailMessageTable;

            emailMessageTable = SysEmailMessageTable::find(_emailId,SystemParameters::getSystemLanguageId(),true);
            if (!emailMessageTable)
            {
                emailMessageTable.EmailId = _emailId;
                emailMessageTable.LanguageId = SystemParameters::getSystemLanguageId();
                emailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
                emailMessageTable.Mail = emailMessageTemplateResource(_resourceName);
                emailMessageTable.Subject = _subject;
                emailMessageTable.insert();
            }
        }

        ttsBegin;
        createEmailTable(#NewOrder, "@SYP4910091", "@SYP4910100");
        createEmailTable(#ConfirmOrder, "@SYP4910092", "@SYP4910100");
        createEmailTable(#PackOrder, "@SYP4910093", "@SYP4910100");
        createEmailTable(#PickOrder, "@SYP4910094", "@SYP4910100");
        createEmailTable(#ShipOrder, "@SYP4910095", "@SYP4910100");
        createEmailTable(#PaymentFailed, "@SYP4910089", "@SYP4910100");
        createEmailTable(#NewCustomer, "@SYP4910096", "@SYP4910100");
        createEmailTable(#ResetPassword, "@SYP4910097", "@SYP4910100");
        createEmailTable(#EmailReceipt, "@SYP4910098", "@SYP4910100");
        createEmailTable(#CustActive, "@SYP4910099", "@SYP4910100");
        createEmailTable(#NewReplacementOrder, "@Retail:ReplacementOrderCreationEmail", "@SYP4910100");

        createEmailMessageTable(#NewOrder, #NewOrderMessageTemplate, "@SYP4910101");
        createEmailMessageTable(#ConfirmOrder, #ConfirmOrderMessageTemplate, "@SYP4910102");
        createEmailMessageTable(#PackOrder, #PackOrderMessageTemplate, "@SYP4910079");
        createEmailMessageTable(#PickOrder, #PickOrderMessageTemplate, "@SYP4910080");
        createEmailMessageTable(#ShipOrder, #ShipOrderMessageTemplate, "@SYP4910082");
        createEmailMessageTable(#PaymentFailed, #PaymentFailureMessageTemplate, "@SYP4910083");
        createEmailMessageTable(#NewCustomer, #NewCustomerMessageTemplate, "@SYP4910084");
        createEmailMessageTable(#ResetPassword, #ResetPasswordMessageTemplate, "@SYP4910085");
        createEmailMessageTable(#EmailReceipt, #EmailReceiptMessageTemplate, "@SYP4910086");
        createEmailMessageTable(#CustActive, #CustomerActivationMessageTemplate, "@SYP4910087");
        createEmailMessageTable(#NewReplacementOrder, #NewReplacementOrderMessageTemplate, "@Retail:YourReplacementOrderHasBeenReceived");
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCallCenterParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record into table <c>MCROrderParameters</c>
    /// </summary>
    /// <remarks>
    /// This function creates record entry into table PriceParameters and update
    /// some fields which are required to be marked. This is needed to avail retail trade agreement price setup.
    /// </remarks>
    private void createCallCenterParameters()
    {
        ttsBegin;

        MCROrderParameters parameters = MCROrderParameters::find(true);
        SalesParameters salesParams = SalesParameters::find(true);
        LedgerJournalName ledger = LedgerJournalName::find(#GeneralJournalNameId);

        if (redeployChartOfAccounts)
        {
            // Create the GenJrn journal name for Call Center.
            if (!ledger)
            {
                ledger.initValue();
                ledger.JournalName = #GeneralJournalNameId;
                ledger.Name = #GeneralJournalName;
                ledger.DetailSummary = DetailSummary::Detail;
                ledger.JournalType   = LedgerJournalType::Daily;
                ledger.offsetAccountType = LedgerJournalACType::Ledger;
                ledger.OffsetLedgerDimension = this.getLedgerDimension(#BankAccount);
                ledger.NumberSequenceTable = NumberSequenceTable::findByNaturalKey(#GeneralJournalNumberSequence).RecId;
                ledger.CurrencyCode = SystemParameters::find(false).SystemCurrencyCode;
                ledger.insert();
            }

            // General
            parameters.ContinuityRevenueJournal = #GeneralJournalNameId;
            parameters.ContinuityPaymentProfile = #PostingProfile;
        }

        // Holds
        parameters.MCRMinScore = #CallCenterHoldMinScore;
        parameters.MCRFraudBadZipScore = #CallCenterHoldFraudBadZipScore;
        parameters.MCRFraudBadZipAddressScore = #CallCenterHoldFraudBadZipAddressScore;

        // Refund
        // - journal name
        parameters.OrderCreditJournalName = #GeneralJournalNameId;

        // Installment plan
        parameters.InstallmentAuth = MCRInstallmentAuth::OrderDate;
        parameters.InstallPlanApplyMiscCharge = MCRInstallPlanApplyMiscCharge::InstallPlan;
        
        // Installment plan
        parameters.InstallReauthLimit = #CallCenterInstallmentReauthorizationLimit;

        // Display
        // Display colors
        parameters.MCRPriceOverrideLineColor = #CallCenterDisplayPriceOverrideColor;
        parameters.MCRReturnOrderColor = #CallCenterDisplayReturnOrderColor;
        parameters.MCRSOWithReturnOrderColor = #CallCenterDisplaySOWithReturnColor;
        parameters.MCRReplacementOrderColor = #CallCenterDisplayReplacementOrderColor;
        
        parameters.update();

        // MCR Sales Parameters
        // Payment - Out of balance checking
        salesParams.MCROverpaidReviewThreshold = #CallCenterPaymentOverpaidReviewThresholdPercent;
        salesParams.MCRUnderpaidReviewThreshold = #CallCenterPaymentUnderpaidReviewThresholdPercent;
        salesParams.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateSharedParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set transaction profile.
    /// </summary>
    public static void UpdateSharedParameters()
    {
        RetailSharedParameters sharedParameters;

        sharedParameters = RetailSharedParameters::find(true);
        ttsBegin;
        sharedParameters.transactionServiceProfile = #TransactionServiceProfile;
        sharedParameters.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create number sequence.
    /// </summary>
    public static void CreateNumberSequence()
    {
        TmpNumberSeqCreate      tmpNumberSeqCreate;
        NumberSequenceTable     basi_1;
        NumberSequenceTable     prod_6;

        // Generates TmpNumberSeqCreate records
        TmpNumberSeqCreate::buildWizardList(tmpNumberSeqCreate);

        ttsbegin;

        while select tmpNumberSeqCreate
            where tmpNumberSeqCreate.NumberSequence != ''
        {
            // Generate number sequence
            NumberSequenceTable::createFromTmpNumberSeqCreate(tmpNumberSeqCreate);
        }

        // Fix number sequences
        select forUpdate basi_1 where basi_1.NumberSequence == 'Basi_1';
        if (basi_1)
        {
            basi_1.Continuous = NoYes::No;
            if (basi_1.NextRec < 100001)
            {
                basi_1.NextRec = 100001;
            }
            basi_1.update();
        }

        // Fix number sequences for product id
        select forUpdate prod_6 where basi_1.NumberSequence == 'Prod_6';
        if (prod_6)
        {
            prod_6.Manual = NoYes::No;
            prod_6.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountsReceivableAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number.
    /// </summary>
    /// <param name = "_accountNumber">
    /// The account number.
    /// </param>
    /// <returns>
    /// Returns the account number.
    /// </returns>
    [Wrappable(true)]
    protected final AccountNumber getAccountsReceivableAccountNumber(AccountNumber _accountNumber)
    {
        return _accountNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>