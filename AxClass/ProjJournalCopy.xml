<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjJournalCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjJournalCopy extends RunBase
{
    ProjJournalId       journalIdFrom;
    NoYes               journalReverse;
    ProjJournalType     projJournalType;

    ProjJournalTable    projJournalTableFrom;
    ProjJournalTable    projJournalTableTo;
    JournalTableData    journalTableData;

    Voucher             voucher_last;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        journalIdFrom,
        journalReverse,
        ProjJournalType
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyBegBalTrans</Name>
				<Source><![CDATA[
    private void copyBegBalTrans()
    {
        ProjBegBalJournalTrans_CostSales        projBegBalJournalTrans_CostSalesFrom;
        ProjBegBalJournalTrans_CostSales        projBegBalJournalTrans_CostSalesTo;

        ProjBegBalJournalTrans_Fee              projBegBalJournalTrans_FeeFrom;
        ProjBegBalJournalTrans_Fee              projBegBalJournalTrans_FeeTo;

        ProjBegBalJournalTrans_OnAcc            projBegBalJournalTrans_OnAccFrom;
        ProjBegBalJournalTrans_OnAcc            projBegBalJournalTrans_OnAccTo;

        while select projBegBalJournalTrans_CostSalesFrom
            where projBegBalJournalTrans_CostSalesFrom.JournalId == projJournalTableFrom.JournalId
        {
            projBegBalJournalTrans_CostSalesTo.initFromBegBalJournalTrans(projBegBalJournalTrans_CostSalesFrom);

            projBegBalJournalTrans_CostSalesTo.JournalId      = projJournalTableTo.JournalId;

            projBegBalJournalTrans_CostSalesTo.insert();
        }

        while select projBegBalJournalTrans_FeeFrom
            where projBegBalJournalTrans_FeeFrom.JournalId == projJournalTableFrom.JournalId
        {
            projBegBalJournalTrans_FeeTo.initFromBegBalJournalTrans(projBegBalJournalTrans_FeeFrom);

            if (this.parmJournalReverse())
            {
                projBegBalJournalTrans_FeeTo.reverseTrans();
            }

            projBegBalJournalTrans_FeeTo.JournalId      = projJournalTableTo.JournalId;

            projBegBalJournalTrans_FeeTo.insert();
        }

        while select projBegBalJournalTrans_OnAccFrom
            where projBegBalJournalTrans_OnAccFrom.JournalId == projJournalTableFrom.JournalId
        {
            projBegBalJournalTrans_OnAccTo.initFromBegBalJournalTrans(projBegBalJournalTrans_OnAccFrom);

            if (this.parmJournalReverse())
            {
                projBegBalJournalTrans_OnAccTo.reverseTrans();
            }

            projBegBalJournalTrans_OnAccTo.JournalId      = projJournalTableTo.JournalId;

            projBegBalJournalTrans_OnAccTo.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTrans</Name>
				<Source><![CDATA[
    private void copyTrans()
    {
        ProjJournalTrans      projJournalTransFrom;
        ProjJournalTrans      projJournalTransTo;
        ProjJournalTransData  projJournalTransData;

        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>

        projJournalTransData  = journalTableData.journalStatic().newJournalTransData(projJournalTransTo,journalTableData);
        while select projJournalTransFrom
            where projJournalTransFrom.JournalId == projJournalTableFrom.JournalId
        {
            projJournalTransTo.initFromProjJournalTrans(projJournalTransFrom);

            if (this.parmJournalReverse())
            {
                projJournalTransTo.reverseJournal(projJournalTableTo.JournalType);
            }

            projJournalTransTo.JournalId      = projJournalTableTo.JournalId;
            projJournalTransTo.Voucher        = '';

            if (projJournalTableTo.VoucherDraw == JournalVoucherDraw::Entering)
            {
                projJournalTransData.initVoucher(voucher_last,false);               // Voucher is assigned
            }

            projJournalTransData.addJournalTransVoucher();
            projJournalTransTo.insert();

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                TaxServiceTariff::insertTaxServiceTariffForNewParent(projJournalTransFrom.TableId, projJournalTransFrom.RecId, projJournalTransTo.TableId, projJournalTransTo.RecId);
            }
            // </GEEPL>

            voucher_last = projJournalTransTo.Voucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(projJournalCopy),this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalIdFrom</Name>
				<Source><![CDATA[
    ProjJournalId parmJournalIdFrom(ProjJournalId _journalIdFrom = journalIdFrom)
    {
        journalIdFrom = _journalIdFrom;

        return journalIdFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalReverse</Name>
				<Source><![CDATA[
    NoYes parmJournalReverse(NoYes _journalReverse = journalReverse)
    {
        journalReverse = _journalReverse;

        return journalReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjJournalType</Name>
				<Source><![CDATA[
    ProjJournalType parmProjJournalType(ProjJournalType _projJournalType = projJournalType)
    {
        projJournalType = _projJournalType;

        return projJournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        if (!this.validate())
        {
            return;
        }

        try
        {
            ttsbegin;

            projJournalTableFrom = ProjJournalTable::find(journalIdFrom);

            projJournalTableTo.data(projJournalTableFrom.data());
            projJournalTableTo.JournalId = JournalTableData::newTable(projJournalTableTo).nextJournalId();
            projJournalTableTo.Posted = NoYes::No;
            projJournalTableTo.PostedDateTime = utcDateTimeNull();
            projJournalTableTo.PostedUserId = '';
            projJournalTableTo.JournalIdOriginal = projJournalTableFrom.JournalId;
            projJournalTableTo.SystemBlocked = NoYes::No;
            projJournalTableTo.SessionId = 0;
            projJournalTableTo.Status = '';
            
            projJournalTableTo.insert();
            
            //Beginning Balances does not use Voucher Numbers which updates the line count on record insert
            if (projJournalTableFrom.JournalType != ProjJournalType::BegBalance)
            {
                projJournalTableTo.NumOfLines = 0;
            }

            journalTableData = JournalTableData::newTable(projJournalTableTo);

            if (projJournalTableFrom.JournalType == ProjJournalType::BegBalance)
            {
                this.copyBegBalTrans();
            }
            else
            {
                this.copyTrans();
            }

            if (this.parmJournalReverse())
            {
                info(strfmt("@SYS310080", projJournalTableFrom.JournalId, projJournalTableFrom.JournalType));
            }
            else
            {
                info(strfmt("@SYS62960", projJournalTableTo.JournalId, projJournalTableTo.JournalType));
            }
            journalTableData.updateBlock(JournalBlockLevel::None,JournalBlockLevel::None);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion   :
                [version,#CurrentList] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean             ret = true;
        ProjJournalTable  projJournalTable;

        ret = super();

        projJournalTable = ProjJournalTable::find(journalIdFrom);
        if (!projJournalTable.RecId)
        {
            ret = checkFailed(strfmt("@SYS17145", journalIdFrom));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProjJournalCopy construct()
    {
        ProjJournalCopy   projJournalCopy = new ProjJournalCopy();

        return projJournalCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS65049";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ProjJournalTable      projJournalTable;
        ProjJournalCopy       projJournalCopy = ProjJournalCopy::construct();

        projJournalCopy.getLast();

        if (args && args.dataset() == tablenum(ProjJournalTable))
        {
            projJournalTable = args.record();
            projJournalCopy.parmJournalIdFrom(projJournalTable.JournalId);
            projJournalCopy.parmProjJournalType(projJournalTable.JournalType);
            if (args.menuItemName() == menuitemactionstr(ProjJournalCopyReverse))
            {
                projJournalCopy.parmJournalReverse(NoYes::Yes);
            }
            else
            {
                projJournalCopy.parmJournalReverse(NoYes::No);
            }
        }

        if (projJournalCopy.prompt())
        {
            projJournalCopy.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>