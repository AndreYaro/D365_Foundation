<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransactionLineReplicate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetTransactionLineReplicate</c> class manages the budget transaction line replication
///    process.
/// </summary>
class BudgetTransactionLineReplicate
{
    PeriodUnit intervalType;
    Periods interval;
    TransDate expiryDate;

    BudgetTransactionHeader budgetTransactionHeader;
    BudgetTransactionLine budgetTransactionLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBudgetTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the source <c>BudgetTransactionLine</c> record before replicating the source budget
    ///    transaction line.
    /// </summary>
    /// <returns>
    ///    true if the budget transaction line is valid; otherwise, false.
    /// </returns>
    protected boolean checkBudgetTransactionLine()
    {
        boolean ret = true;

        if (BudgetTransactionHeader::checkExist(budgetTransactionLine.BudgetTransactionHeader) == false ||
            budgetTransactionHeader.isUserBlocked() == true)
        {
            // Budget transaction does not exist or is in use by another user; throw error to cancel the BudgetTransaction Line creation.
            throw error("@SYS21628");
        }

        if (budgetTransactionHeader.checkBudgetTransAvailableToComplete() == false)
        {
            // Source Budget transaction has already been processed; throw error to cancel the BudgetTransaction Line creation.
            ret = checkFailed("@SYS23025");
            throw error("@SYS21628");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetTransactionLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates new budget transaction lines by using the source budget transaction line and the
    ///    replication rules.
    /// </summary>
    protected void createBudgetTransactionLines()
    {
        BudgetTransactionLine budgetTransactionLineNew;

        TransDate newTransactionLineDate;
        LineNum currentLineNum;
        Futures futures;

        ttsbegin;

        futures = Futures::construct(budgetTransactionLine.Date, interval, intervalType);
        newTransactionLineDate = futures.next();

        // Get the maximum line number using the budget transaction header buffer.
        currentLineNum = budgetTransactionHeader.maxLineNumber();

        while (newTransactionLineDate <= expiryDate)
        {
            budgetTransactionLineNew.clear();

            // Copy the data's from the source transaction line to the new line.
            buf2Buf(budgetTransactionLine, budgetTransactionLineNew);

            budgetTransactionLineNew.Date = newTransactionLineDate;
            budgetTransactionLineNew.LineNumber = this.getNextLineNum(currentLineNum);

            if (BudgetTransactionManager::validateLedgerDimension(budgetTransactionLineNew.LedgerDimension,newTransactionLineDate) &&
                budgetTransactionLineNew.validateWrite())
            {
                budgetTransactionLineNew.write();
            }
            else
            {
                throw error("@SYS112891");
            }

            currentLineNum = budgetTransactionLineNew.LineNumber;
            futures = Futures::construct(budgetTransactionLineNew.Date, interval, intervalType);
            newTransactionLineDate = futures.next();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the next line number by using the current line number.
    /// </summary>
    /// <param name="_currentLineNum">
    ///    A <c>LineNum</c> value to use in the new line number calculation.
    /// </param>
    /// <returns>
    ///    The next line number as a <c>LineNum</c> value.
    /// </returns>
    protected LineNum getNextLineNum(LineNum _currentLineNum)
    {
        LineNum newLineNum;

        newLineNum = _currentLineNum + 1 ;

        // The newLineNum value should not be zero,If it is then increment it by one.
        newLineNum = newLineNum == 0 ? (newLineNum + 1) : newLineNum;

        return newLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class instance.
    /// </summary>
    /// <param name="_budgetTransactionLineId">
    ///    The record ID of the <c>BudgetTransactionLine</c> record to replicate.
    /// </param>
    /// <param name="_intervalType">
    ///    The interval type.
    /// </param>
    /// <param name="_interval">
    ///    The interval.
    /// </param>
    /// <param name="_expiryDate">
    ///    The expiry date.
    /// </param>
    protected void initialize(
        RecId _budgetTransactionLineId,
        PeriodUnit _intervalType,
        Periods _interval,
        TransDate _expiryDate)
    {
        budgetTransactionLine = BudgetTransactionLine::find(_budgetTransactionLineId);
        budgetTransactionHeader = BudgetTransactionHeader::find(budgetTransactionLine.BudgetTransactionHeader);
        intervalType = _intervalType;
        interval = _interval;
        expiryDate = _expiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the replication process.
    /// </summary>
    protected void process()
    {
        if (this.checkBudgetTransactionLine() && this.validateParameters())
        {
            // When the source budget transaction line is a valid one.
            this.createBudgetTransactionLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the interval and expiry date values.
    /// </summary>
    /// <returns>
    ///    true if the given interval and expiry date values are valid; otherwise, false.
    /// </returns>
    protected boolean validateParameters()
    {
        boolean ret = true;

        if (interval <= 0)
        {
            ret = checkFailed(strfmt("@SYS109719", "@SYS41392"));
        }
        else if (expiryDate < budgetTransactionLine.Date)
        {
            ret = checkFailed(strfmt("@SYS134786", budgetTransactionLine.Date));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replicateLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Replicates the <c>BudgetTransactionLine</c> record by using the specified parameters.
    /// </summary>
    /// <param name="_budgetTransactionLineId">
    ///    The record ID of the <c>BudgetTransactionLine</c> record to replicate.
    /// </param>
    /// <param name="_intervalType">
    ///    The interval type.
    /// </param>
    /// <param name="_interval">
    ///    The interval.
    /// </param>
    /// <param name="_expiryDate">
    ///    The expiry date.
    /// </param>
    public static void replicateLine(
        RecId _budgetTransactionLineId,
        PeriodUnit _intervalType,
        Periods _interval,
        TransDate _expiryDate)
    {
        BudgetTransactionLineReplicate budgetTransactionLineReplicate;

        budgetTransactionLineReplicate = new BudgetTransactionLineReplicate();
        budgetTransactionLineReplicate.initialize(_budgetTransactionLineId, _intervalType, _interval, _expiryDate);
        budgetTransactionLineReplicate.process();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>