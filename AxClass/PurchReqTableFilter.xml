<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqTableFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchReqTableFilter</c> class is used to build a filter that can be applied to grids showing
///    purchase requisitions in the Enterprise Portal.
/// </summary>
class PurchReqTableFilter
{
    str                     delimiter;
    PurchReqTableFilterType filterType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>filterAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter for the <c>PurchReqTableFilterType::All</c> type.
    /// </summary>
    /// <returns>
    /// A string that contains the all filter for the <c>PurchReqTable</c> table.
    /// </returns>
    protected str filterAll()
    {
        return this.filterCurrentEmpl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter for the <c>PurchReqTableFilterType::Approved</c> type.
    /// </summary>
    /// <returns>
    /// A string that contains the approved filter for the <c>PurchReqTable</c> table.
    /// </returns>
    protected str filterApproved()
    {
        return this.filterCurrentEmpl() +
               delimiter +
               this.statusApproved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterAssignedAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter for the <c>PurchReqTableFilterType::AssignedAll</c> type.
    /// </summary>
    /// <returns>
    /// A string that contains the assigned all filter for the <c>PurchReqTable</c> table.
    /// </returns>
    protected str filterAssignedAll()
    {
        PurchReqTable           purchReqTable;
        WorkflowWorkItemTable   workflowWorkItemTable;
        str                     filterCondition;

        while select PurchReqId from purchReqTable
            exists join workflowWorkItemTable
            where purchReqTable.RecId   == workflowWorkItemTable.RefRecId   &&
                  purchReqTable.TableId == workflowWorkItemTable.RefTableId &&
                  workflowWorkItemTable.CompanyId   == curext() &&
                  workflowWorkItemTable.UserId      == curUserId() &&
                  workflowWorkItemTable.Status      == WorkflowWorkItemStatus::Pending
        {
            if (filterCondition)
            {
                filterCondition += delimiter;
            }
            filterCondition += fieldId2name(tableNum(PurchReqTable), fieldNum(PurchReqTable, PurchReqId)) + '=' + purchReqTable.PurchReqId;
        }

        if (!filterCondition) //Ensure that no records are shown.
        {
            filterCondition = fieldId2name(tableNum(PurchReqTable), fieldNum(PurchReqTable,RecId)) + '=' + int642str(0);
        }

        return filterCondition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a filter for the <see cref="T:PurchReqTableFilterType" /> created type.
    /// </summary>
    /// <returns>
    ///    A string that contains the created filter for the <see cref="T:PurchReqTable" />.
    /// </returns>
    protected str filterCreated()
    {
        return fieldId2name(tableNum(PurchReqTable), fieldNum(PurchReqTable, CreatedBy)) + '=' + curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterCreatedApproved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a filter for the <see cref="T:PurchReqTableFilterType" /> created approved filter.
    /// </summary>
    /// <returns>
    ///    A string that contains the created approved filter for the <see cref="T:PurchReqTable" />.
    /// </returns>
    protected str filterCreatedApproved()
    {
        return this.filterCreated() +
               delimiter +
               this.statusApproved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterCurrentEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter for the current user.
    /// </summary>
    /// <returns>
    /// A string that contains the current user filter for the <c>PurchReqTable</c> table.
    /// </returns>
    protected str filterCurrentEmpl()
    {
        return fieldId2name(tableNum(PurchReqTable), fieldNum(PurchReqTable, Originator)) + '=' + int642str(HcmWorker::userId2Worker(curUserId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterDirectReportsAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter for the <c>PurchReqTableFilterType::DirectReportsAll</c> type.
    /// </summary>
    /// <returns>
    /// A string that contains the direct reports all filter for the <c>PurchReqTable</c> table.
    /// </returns>
    protected str filterDirectReportsAll()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterDirectReportsApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter for the <c>PurchReqTableFilterType::DirectReportsApproved</c> type.
    /// </summary>
    /// <returns>
    /// A string that contains the direct reports approved filter for the <c>PurchReqTable</c> table.
    /// </returns>
    protected str filterDirectReportsApproved()
    {
        return this.filterDirectReportsAll() +
               delimiter +
               this.statusApproved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter for the <c>PurchReqTableFilterType::Draft</c> type.
    /// </summary>
    /// <returns>
    /// A string that contains the draft filter for the <c>PurchReqTable</c> table.
    /// </returns>
    protected str filterDraft()
    {
        return this.filterCurrentEmpl() +
               delimiter +
               this.status('=', PurchReqRequisitionStatus::Draft);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterDraftPurposeConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter for the <c>RequisitionPurpose::Consumption</c> type.
    /// </summary>
    /// <returns>
    /// A string that contains the submitted filter for the <c>PurchReqTable</c> table.
    /// </returns>
    protected str filterDraftPurposeConsumption()
    {
        return this.filterDraft() + delimiter + this.filterPurpose(RequisitionPurpose::Consumption);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter to use on the requisition purpose.
    /// </summary>
    /// <param name="_purpose">
    /// The purpose to use in the filter.
    /// </param>
    /// <returns>
    /// A string that contains the purpose filter for the <see cref="T:PurchReqTable" />.
    /// </returns>
    protected str filterPurpose(RequisitionPurpose _purpose)
    {
        return fieldId2name(tableNum(PurchReqTable),
                            fieldNum(PurchReqTable, RequisitionPurpose)) +  '=' + int2str(_purpose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterReportsAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter for the <c>PurchReqTableFilterType::ReportsAll</c> type.
    /// </summary>
    /// <returns>
    /// A string that contains the reports all filter for the <c>PurchReqTable</c> table.
    /// </returns>
    protected str filterReportsAll()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterReportsApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter for the <c>PurchReqTableFilterType::ReportsApproved</c> type.
    /// </summary>
    /// <returns>
    /// A string that contains the reports approved filter for the <c>PurchReqTable</c> table.
    /// </returns>
    protected str filterReportsApproved()
    {
        return this.filterReportsAll() +
               delimiter +
               this.statusApproved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterSubmitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter for the <c>PurchReqTableFilterType::Submitted</c> type.
    /// </summary>
    /// <returns>
    /// A string that contains the submitted filter for the <c>PurchReqTable</c> table.
    /// </returns>
    protected str filterSubmitted()
    {
        return this.filterCurrentEmpl() +
               delimiter +
               this.status('=', PurchReqRequisitionStatus::InReview);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEPFilterCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter to be used on grids in the Enterprise Portal matching the filter type passed to the
    /// class.
    /// </summary>
    /// <returns>
    /// A string that contains the filter for the <c>PurchReqTable</c> table.
    /// </returns>
    public str getEPFilterCondition()
    {
        str filterCondition;

        switch (filterType)
        {
            case PurchReqTableFilterType::All :
                filterCondition =   this.filterAll();
                break;

            case PurchReqTableFilterType::Approved :
                filterCondition =   this.filterApproved();
                break;

            case PurchReqTableFilterType::Draft :
                filterCondition =   this.filterDraft();
                break;

            case PurchReqTableFilterType::Submitted :
                filterCondition =   this.filterSubmitted();
                break;

            case PurchReqTableFilterType::DirectReportsAll :
                filterCondition = this.filterDirectReportsAll();
                break;

            case PurchReqTableFilterType::DirectReportsApproved :
                filtercondition = this.filterDirectReportsApproved();
                break;

            case PurchReqTableFilterType::ReportsAll :
                filtercondition = this.filterReportsAll();
                break;

            case PurchReqTableFilterType::ReportsApproved :
                filterCondition = this.filterReportsApproved();
                break;

            case PurchReqTableFilterType::AssignedAll :
                filterCondition = this.filterAssignedAll();
                break;

            case PurchReqTableFilterType::Created :
                filterCondition =   this.filterCreated();
                break;

            case PurchReqTableFilterType::CreatedApproved :
                filterCondition =   this.filterCreatedApproved();
                break;

            case PurchReqTableFilterType::DraftPurposeConsumption :
                filterCondition =   this.filterDraftPurposeConsumption();
                break;

            case PurchReqTableFilterType::None :
            default :
                filterCondition = '';
        }

        return filterCondition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDelimiter</Name>
				<Source><![CDATA[
        public str parmDelimiter(str _delimiter = delimiter)
    {
        delimiter = _delimiter;
        return delimiter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterType</Name>
				<Source><![CDATA[
        public PurchReqTableFilterType parmFilterType(PurchReqTableFilterType _filterType = filterType)
    {
        filterType = _filterType;
        return filterType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a filter to use on the purchase requisition status.
    /// </summary>
    /// <param name="_operator">
    /// The operator that specifies the operations to perform in the filter.
    /// </param>
    /// <param name="_status">
    /// The status to use in the filter.
    /// </param>
    /// <returns>
    /// A string that contains the status filter for the <see cref="T:PurchReqTable" />.
    /// </returns>
    protected str status(str _operator, PurchReqRequisitionStatus _status)
    {
        return fieldId2name(tableNum(PurchReqTable),
                            fieldNum(PurchReqTable, RequisitionStatus)) +  _operator + int2str(_status);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusApproved</Name>
				<Source><![CDATA[
        protected str statusApproved()
    {
        str statusApprovedStr;

        void addStatus(PurchReqRequisitionStatus _status)
        {
            if (statusApprovedStr)
                statusApprovedStr += ',';
            statusApprovedStr += int2str(_status);
        }

        addStatus(PurchReqRequisitionStatus::Approved);

        return fieldId2name(tableNum(PurchReqTable),
                            fieldNum(PurchReqTable, RequisitionStatus)) +  '=' + statusApprovedStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PurchReqTableFilter construct()
    {
        return new PurchReqTableFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEPFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PurchReqTableFilter</c> class to be used on the Enterprise
    ///    Portal.
    /// </summary>
    /// <param name="_filterType">
    ///    The type that controls which filter to build.
    /// </param>
    /// <param name="_delimiter">
    ///    The delimiter that is used to separate the filter conditions.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PurchReqTableFilter</c> class.
    /// </returns>
    static PurchReqTableFilter newEPFilter(PurchReqTableFilterType _filterType,
                                           str                     _delimiter)
    {
        PurchReqTableFilter filter = PurchReqTableFilter::construct();

        filter.parmFilterType(_filterType);
        filter.parmDelimiter(_delimiter);
        return filter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>