<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostPeriodTopVariancesQueryable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostPeriodTopVariancesQueryable</c> class is a base class for implementing
/// cost calculation period top variances cache queries on the Cost Administration workspace.
/// </summary>
[SysQueryableExtension(SysQueryableTypeEnum::Xpp)]
public abstract class CostPeriodTopVariancesQueryable implements SysIQueryableObjectExecutable
{
    SysDataCacheContextId                       context;
    CostPeriodCompareArgs                       costPeriodCompareArgs;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public void execute(SysIDataCacheContext _cacheContext)
    {
        context = _cacheContext.parmId();

        this.getFilterValues(_cacheContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterValues</Name>
				<Source><![CDATA[
    protected abstract void getFilterValues(SysIDataCacheContext _cacheContext)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public SysQueryablePacked pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodFromFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current costing period from the specified filter.
    /// </summary>
    /// <param name=_filter>The source filter from which to get the costing period.</param>
    /// <returns>The <c>CostPeriodCompareArgs</c> instance representing the costing period.</returns>
    protected static CostPeriodCompareArgs getPeriodFromFilter(SysIFilter _filter)
    {
        FromDate   fromDate = SysFilterValueHelper::getFirstValueRecordFromFilterForType(_filter, SysFilterValueTypeEnum::Date, extendedTypeNum(FromDate));
        ToDate     toDate = SysFilterValueHelper::getFirstValueRecordFromFilterForType(_filter, SysFilterValueTypeEnum::Date, extendedTypeNum(ToDate));

        return CostPeriodCompareArgs::newFromDates(fromDate, toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(SysQueryablePacked _packed)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMethod</Name>
				<Source><![CDATA[
    public SysDataChangeDetectionMethodEnum parmMethod()
    {
        return SysDataChangeDetectionMethodEnum::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIdentifier</Name>
				<Source><![CDATA[
    public SysQueryableIdentifier parmIdentifier()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public str parmDescription()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDependencySet</Name>
				<Source><![CDATA[
    public SysIDataChangeDetectionDependencySet parmDependencySet()
    {
        SysIDataChangeDetectionDependencySet dependencySet = SysDataChangeDetectionDependencySetFactory::newFromType(SysDataChangeDetectionDependencyTypeEnum::None);

        return dependencySet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>