<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRDateUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRDateUtil</c> class handles the date utility for multi-channel retail.
/// </summary>
class MCRDateUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dateOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for a overlaping dates.
    /// </summary>
    /// <param name="currentFromDate">
    /// The current from date.
    /// </param>
    /// <param name="currentToDate">
    /// The current to date.
    /// </param>
    /// <param name="checkAgainstFromDate">
    /// The from date to check against.
    /// </param>
    /// <param name="checkAgainstToDate">
    /// The to date to check against.
    /// </param>
    /// <returns>
    /// true if the date ranges overlap; otherwise, false.
    /// </returns>
    public static boolean dateOverlap(TransDate currentFromDate,
                                TransDate currentToDate,
                                TransDate checkAgainstFromDate,
                                TransDate checkAgainstToDate)
    {
        boolean datesOverlap = false;

        if (currentFromDate  == checkAgainstFromDate
            || currentToDate == checkAgainstToDate)
        {
            datesOverlap = true;
        }

        if (!datesOverlap
            && checkAgainstToDate   >= currentFromDate
            && checkAgainstFromDate <= currentToDate)
        {
            datesOverlap = true;
        }

        if (!datesOverlap
            &&
            (currentToDate >= checkAgainstFromDate
             || ! currentToDate)
            &&
            (currentFromDate <= checkAgainstToDate
             || ! checkAgainstToDate))
        {
            datesOverlap = true;
        }

        return datesOverlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthUSName2Num</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the number associated with the specified month name.
    /// </summary>
    /// <param name="_monthName">
    /// The name of the month.
    /// </param>
    /// <returns>
    /// The number associated with the month name.
    /// </returns>
    public static int monthUSName2Num(str _monthName)
    {
        int ret;
        str monthName = _monthName;
        #Define.month1('january')
        #Define.jan('jan')
        #Define.month2('february')
        #Define.feb('feb')
        #Define.month3('march')
        #Define.mar('mar')
        #Define.month4('april')
        #Define.apr('apr')
        #Define.month5('may')
        #Define.month6('june')
        #Define.jun('jun')
        #Define.month7('july')
        #Define.jul('jul')
        #Define.month8('august')
        #Define.aug('aug')
        #Define.month9('september')
        #Define.sep('sep')
        #Define.month10('october')
        #Define.oct('oct')
        #Define.month11('november')
        #Define.nov('nov')
        #Define.month12('december')
        #Define.dec('dec');

        monthName = strLwr(_monthName);

        switch (monthName)
        {
            case #month1:
            case #jan:
                ret = 1;
                break;
            case #month2:
            case #feb:
                ret = 2;
                break;
            case  #month3:
            case #mar:
                ret = 3;
                break;
            case #month4:
            case #apr:
                ret = 4;
                break;
            case #month5:
                ret = 5;
                break;
            case #month6:
            case #jun:
                ret = 6;
                break;
            case #month7:
            case #jul:
                ret = 7;
                break;
            case #month8:
            case #aug:
                ret = 8;
                break;
            case #month9:
            case #sep:
                ret = 9;
                break;
            case #month10:
            case #oct:
                ret = 10;
                break;
            case #month11:
            case #nov:
                ret = 11;
                break;
            case #month12:
            case #dec:
                ret = 12;
                break;
            default:
                ret = 0;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shiftDateTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Shifts a date and time up or down a set number of seconds.
    /// </summary>
    /// <param name="_date">
    /// The date that is being shifted.
    /// </param>
    /// <param name="_time">
    /// The time that is being shifted.
    /// </param>
    /// <param name="_secsToShift">
    /// The number of second to shift the date and time.
    /// </param>
    /// <returns>
    /// The shifted date and time.
    /// </returns>
    /// <remarks>
    /// This makes the assumption that the day starts at 0 seconds and goes to
    ///     86399 as the last second of the day.
    /// </remarks>
    public static container shiftDateTimeZone(date _date, int _time, int _secsToShift)
    {
        #define.SecondsInDay(86400)
        int       newTime, returnTime;
        date      returnDate;

        newTime = _time + _secsToShift;
        if (newTime < 0)
        {
            returnTime = #SecondsInDay + newTime;
            returnDate = _date - 1;
        }
        else if (newTime >= #SecondsInDay)
        {
            returnTime = newTime - #SecondsInDay;
            returnDate = _date + 1;
        }
        else
        {
            returnTime = newTime;
            returnDate = _date;
        }

        return [returnDate, returnTime];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>