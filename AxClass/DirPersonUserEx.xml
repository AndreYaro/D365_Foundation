<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPersonUserEx</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DirPersonUserEx
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>busRelAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a business relaion account associated with the current user relation.
    /// </summary>
    /// <param name="_dataAreaId">
    /// DataAreaId to get business relation account from.
    /// </param>
    /// <returns>
    /// A business relation account.
    /// </returns>
    public static smmBusRelAccount busRelAccount(DirPersonUser dirPersonUser, dataAreaId _dataAreaId = curext())
    {
        if (_dataAreaId != curext())
        {
            changeCompany(_dataAreaId)
            {
                return smmBusRelTable::findByParty(UserExternalParty::findPerson(dirPersonUser.PersonParty, UserExternalPartyEntityType::BusinessRelation).ExternalParty).BusRelAccount;
            }
        }
        else
        {
            return smmBusRelTable::findByParty(UserExternalParty::findPerson(dirPersonUser.PersonParty, UserExternalPartyEntityType::BusinessRelation).ExternalParty).BusRelAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns contactPersonId related to person.
    /// </summary>
    /// <param name="_dataAreaId">
    /// DataareaId to get contact person Id from.
    /// </param>
    /// <returns>
    /// ContactPersonId
    /// </returns>
    public static ContactPersonId contactPersonId(DirPersonUser dirPersonUser, dataAreaId _dataAreaId = curext())
    {
        if (_dataAreaId != curext())
        {
            changeCompany(_dataAreaId)
            {
                return ContactPerson::findByPartyRecId(dirPersonUser.PersonParty).ContactPersonId;
            }
        }
        else
        {
            return ContactPerson::findByPartyRecId(dirPersonUser.PersonParty).ContactPersonId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a customer account associated with the current user relation.
    /// </summary>
    /// <param name="_dataAreaId">
    /// DataAreaId to get customer account from.
    /// </param>
    /// <returns>
    /// A customer account.
    /// </returns>
    public static CustAccount custAccount(DirPersonUser dirPersonUser, dataAreaId _dataAreaId = curext())
    {
        if (_dataAreaId != curext())
        {
            changeCompany(_dataAreaId)
            {
                return CustTable::findByPartyRecId(UserExternalParty::findPerson(dirPersonUser.PersonParty, UserExternalPartyEntityType::Customer).ExternalParty).AccountNum;
            }
        }
        else
        {
            return CustTable::findByPartyRecId(UserExternalParty::findPerson(dirPersonUser.PersonParty, UserExternalPartyEntityType::Customer).ExternalParty).AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a vendor account associated with the current user relation.
    /// </summary>
    /// <param name="_dataAreaId">
    /// DataAreaId to get vendor account from.
    /// </param>
    /// <returns>
    /// A vendor account.
    /// </returns>
    public static VendAccount vendAccount(DirPersonUser dirPersonUser, dataAreaId _dataAreaId = curext())
    {
        if (_dataAreaId != curext())
        {
            changeCompany(_dataAreaId)
            {
                return VendTable::findByPartyRecId(UserExternalParty::findPerson(dirPersonUser.PersonParty, UserExternalPartyEntityType::Vendor).ExternalParty).AccountNum;
            }
        }
        else
        {
            return VendTable::findByPartyRecId(UserExternalParty::findPerson(dirPersonUser.PersonParty, UserExternalPartyEntityType::Vendor).ExternalParty).AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker</Name>
				<Source><![CDATA[
    public static CrmWorkerRecId worker(DirPersonUser dirPersonUser)
    {
        return HcmWorker::findByPerson(dirPersonUser.PersonParty).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBusRelAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>DirPersonUser</c> table that is based on a business relation account.
    /// </summary>
    /// <param name="_smmBusRelAccount">
    /// Business relation account.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>DirPersonUser</c> table.
    /// </returns>
    public static DirPersonUser findByBusRelAccount(smmBusRelAccount _smmBusRelAccount, boolean   _forUpdate = false)
    {
        DirPersonUser      dirPersonUser;
        UserExternalParty  userExternalParty;
        smmBusRelTable     smmBusRelTable;

        if (_smmBusRelAccount)
        {
            dirPersonUser.selectForUpdate(_forUpdate);

            select firstonly dirPersonUser
            join ExternalParty from userExternalParty
            join  BusRelAccount, Party from smmBusRelTable
                where dirPersonUser.User == userExternalParty.User
                && userExternalParty.ExternalParty == smmBusRelTable.Party
                &&  smmBusRelTable.BusRelAccount == _smmBusRelAccount;
        }

        return dirPersonUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUserWorkerReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record ID reference in the <c>HcmWorker</c> table for a user.
    /// </summary>
    /// <param name="_userId">
    /// A <c>UserId</c> value.
    /// </param>
    /// <returns>
    /// A <c>HcmWorker</c> record ID.
    /// </returns>
    /// <remarks>
    /// The record ID reference returned can be zero.
    /// </remarks>
    public static HcmWorkerRecId findUserWorkerReference(userId _userId = curUserId())
    {
        DirPersonUser   dirPersonUser;

        select firstonly PersonParty from dirPersonUser
            where dirPersonUser.User == _userId;

        return HcmWorker::findByPerson(dirPersonUser.PersonParty).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentWorkerPersonnelNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a personnel number in the <c>HcmWorker</c> table for a current user.
    /// </summary>
    /// <returns>
    /// A <c>HcmPersonnelNumberId</c> value.
    /// </returns>
    public static HcmPersonnelNumberId currentWorkerPersonnelNumber()
    {
        HcmWorker hcmWorker;

        select firstonly PersonnelNumber from hcmWorker
            where hcmWorker.RecId == HcmWorkerLookup::currentWorker();

        return hcmWorker.PersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the current user relation for a worker.
    /// </summary>
    /// <param name="_worker">
    /// A worker for which to find a user relation.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>DirPersonUser</c> table.
    /// </returns>
    public static DirPersonUser findWorker(HcmWorkerRecId _worker, boolean _forUpdate = false)
    {
        DirPersonUser  dirPersonUser;
        HcmWorker      hcmWorker;

        if (_worker)
        {
            dirPersonUser.selectForUpdate(_forUpdate);

            select firstonly dirPersonUser
                join Person,RecId from  hcmWorker
                where   dirPersonUser.PersonParty == hcmWorker.Person &&
                        hcmWorker.RecId ==  _worker;
        }

        return dirPersonUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2UserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>UserId</c> value that is associated with a worker.
    /// </summary>
    /// <param name="_recId">
    /// The <c>HcmWorkerRecId</c> value to find.
    /// </param>
    /// <returns>
    /// The <c>UserId</c> value that is associated with the worker.
    /// </returns>
    public static userId worker2UserId(HcmWorkerRecId _recId)
    {
        HcmWorker       worker;
        DirPersonUser   personUser;

        select User from personUser
            exists join worker where personUser.PersonParty==worker.Person &&
                        worker.RecId==_recId;

        return personUser.User;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>