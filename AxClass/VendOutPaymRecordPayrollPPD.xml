<?xml version="1.0" encoding="utf-8"?>

<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>VendOutPaymRecordPayrollPPD</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// Generates a single record in the direct deposit output file
/// in the NACHA PPD format for the payroll application. The payroll
/// class uses worker related information for the receiver whereas the
/// base class uses vendor.
/// </summary>
/// <remarks>
/// Extends the class <c>VendOutPaymRecord_NACHA_PPD</c>
/// </remarks>
class VendOutPaymRecordPayrollPPD extends VendOutPaymRecord_NACHA_PPD
{
    #define.RoutingNumLength(8)
    #define.PayrollInterfaceName('Payroll NACHA PPD')
    #define.blankRoutingNumber('0')
    #define.blank(' ')
    #define.blankRoutingNumber('0')

    Amount              sumAmount;
    BankAccount         accountID;
    BankAccountTable    bankAccountTable;


    //Offsets:

    //Field Lengths:

    HcmWorkerBankAccount    workerBankAccount;
    PayrollBankAccountDisbursement  workerDisbursement;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>checkValues</Name>
        <Source><![CDATA[
    /// <summary>
    ///     Validates specific payroll payment details for a supplied <c>LedgerJournalTrans</c> buffer.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     A <c>LedgerJournalTrans</c> buffer; optional.
    /// </param>
    /// <param name="_progress">
    ///     A <c>RunbaseProgress</c> reference; optional.
    /// </param>
    /// <returns>
    ///     true if the validation passes; otherwise false.
    /// </returns>
    public boolean checkValues(LedgerJournalTrans  _ledgerJournalTrans = null,
                               RunbaseProgress     _progress           = null)

    {
        boolean ret = true, ok = true;
        LedgerJournalTrans  paymentJrnlTrans;

        if (VendPaymMethodVal::exist(_ledgerJournalTrans.PaymMode, VendPaymentValidate::PaymReference)
            && !_ledgerJournalTrans.PaymReference)
        {
            ok = checkFailed("@SYS24523");
        }

        ret = ret && ok;
        if (ok)
        {
            paymentJrnlTrans = custVendPaym.ledgerJournalTrans();

            // Only transactions with Debit Amounts can be used from Accounts Payable
            if (custVendPaym.paymAmountInSendersCurrency() <= 0)
            {
                // Payment  must be a debit amount greater than zero.
                ok = checkFailed(strFmt("@SYS98765", paymentJrnlTrans.parmAccount()));
                ret = ret && ok;
            }

            if (!custVendPaym.recieversBankAccount())
            {
                // Bank account number on account '%1' for vendor '%2' is missing.
                ok = checkFailed(strFmt("@Payroll:TheBankAccountNumberOnAccount1ForWorker2IsMissing", custVendPaym.recieversBankAccountId(), custVendPaym.sendersIdentificationOfReciever()));
                ret = ret && ok;
            }
            if (!custVendPaym.recieversBankRegistrationNumber())
            {
                // Bank account number on account '%1' for vendor '%2' is missing.
                ok = checkFailed(strFmt("@Payroll:TheRoutingNumberOnAccount1ForWorker2IsMissing", custVendPaym.recieversBankAccountId(), custVendPaym.sendersIdentificationOfReciever()));
                ret = ret && ok;
            }
        }

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>fillField02</Name>
        <Source><![CDATA[
        protected void fillField02()
    {
        // Transaction code for NACHA PPD file format: length 2: postion 02-03
        this.strInsert(custVendOutPaym.getTransactionCodeEmployee(this.parmWorkerBankAccount(), this.parmWorkerDisbursement()), #transactionCodeOffset);
    }

]]></Source>
      </Method>
      <Method>
        <Name>initEndRecord</Name>
        <Source><![CDATA[
    /// <summary>
    ///     Initializes the end PPD payment output record.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initEndRecord()
    {
        nacha_ppd_Record = conNull();
        transactionAmount = 0;
        bankRoutingNumber = strRep(#blankRoutingNumber, #RoutingNumLength);
        outputRecord = strRep(#blank, 94);
    }

]]></Source>
      </Method>
      <Method>
        <Name>initRecord</Name>
        <Source><![CDATA[
        protected void initRecord()
    {
        transactionAmount = 0;
        bankRoutingNumber = strRep(#blankRoutingNumber, #RoutingNumLength);
        outputRecord = strRep(#blank, 94);
    }

]]></Source>
      </Method>
      <Method>
        <Name>interfaceName</Name>
        <Source><![CDATA[
        public PaymInterfaceName interfaceName()
    {
        return #PayrollInterfaceName;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmWorkerBankAccount</Name>
        <Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public HcmWorkerBankAccount parmWorkerBankAccount(HcmWorkerBankAccount _workerBankAccount = workerBankAccount)
    {
        workerBankAccount = _workerBankAccount;
        return workerBankAccount;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmWorkerDisbursement</Name>
        <Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public PayrollBankAccountDisbursement parmWorkerDisbursement(PayrollBankAccountDisbursement _accountDisbursement = workerDisbursement)
    {
        workerDisbursement = _accountDisbursement;
        return workerDisbursement;
    }

]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>