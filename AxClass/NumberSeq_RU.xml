<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeq_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This class creates continuous series, but doesn't use released numbers.
// Released numbers can be fetched in useNumFromList() method
final class NumberSeq_RU extends NumberSeq
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNumFromList</Name>
				<Source><![CDATA[
    protected Integer getNumFromList(
        NumberSequenceConnection      _connection,
        NumberSequenceTable _table)
    {
        NumberSequenceList  list;
        Integer             ret     =  #NextRecordNull;
        int                 prevNum = _table.NextRec;

        if (! _table.Continuous)
            return ret;

        _connection.setConnection(list);

        select forupdate list
            order by NextRec desc
            where list.NumberSequenceId == _table.RecId  &&
                  list.Status           == NumStatus::Free;

        while (list && list.NextRec == prevNum - 1)
        {
            prevNum --;
            next list;
        }

        if (prevNum != _table.NextRec)
        {
            select forupdate firstonly list
                where list.NumberSequenceId == _table.RecId     &&
                      list.NextRec          == prevNum          &&
                      list.Status           == NumStatus::Free;

            if (list)
            {
                ret           = list.NextRec;

                list.Status   = NumStatus::Active;
                list.TransId  = makeDecisionLater ? 0 : globalTransId;
                list.update();

                if (_table.InUse == NoYes::No)
                {
                    _table.InUse = NoYes::Yes;
                    _table.update();
                }
                sequenceUpdated = true;
            }
        }
        else
        {
            ret = super(_connection, _table);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useNumFromList</Name>
				<Source><![CDATA[
        public boolean useNumFromList(NumberSequenceTable   _table,
                                  Num                   _num,
                                  NumStatus             _status = NumStatus::Free)
    {
        NumberSequenceList  numberSequenceList;
        boolean             ret = false;

        if (_table.Continuous)
        {
            using (NumberSequenceConnection numberSequenceConnection = NumberSequenceConnection::construct())
            {
                try
                {
                    numberSequenceConnection.setConnection(numberSequenceList);
                    numberSequenceConnection.tts_begin();

                    select forupdate firstonly numberSequenceList
                        where numberSequenceList.NumberSequenceId == _table.RecId &&
                            numberSequenceList.NextRec == NumberSeq::numRemoveFormat(_num, _table.Format) &&
                            numberSequenceList.Status == _status;

                    if (numberSequenceList)
                    {
                        numberSequenceList.delete();
                        ret = true;
                    }

                    numberSequenceConnection.tts_commit();
                }
                catch
                {
                    numberSequenceConnection.tts_abort();
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGetNum</Name>
				<Source><![CDATA[
        public static NumberSeq newGetNum(NumberSequenceReference  _numberSequenceReference,
                                      boolean                  _makeDecisionLater           = false,
                                      boolean                  _dontThrowOnMissingRefSetUp  = false)
    {
        NumberSeq               numberSeq;
        NumberSequenceTable     numberSequenceTableNum;

        if (!_numberSequenceReference)
        {
            if (_dontThrowOnMissingRefSetUp)
            {
                return null;
            }
            throw error(strfmt("@SYS53912"));
        }

        numberSequenceTableNum = NumberSequenceTable::find(_numberSequenceReference.NumberSequenceId);
        if (!numberSequenceTableNum)
        {
            if (_dontThrowOnMissingRefSetUp)
            {
                return null;
            }
            throw error(strfmt("@SYS53911",_numberSequenceReference.referenceLabel(),_numberSequenceReference.referenceModuleLabel()));
        }

        if (numberSequenceTableNum.Continuous)
            numberSeq = new NumberSeq_RU();
        else
            numberSeq = new NumberSeq_Fast();

        numberSeq.parmNumberSequenceCode(numberSequenceTableNum.NumberSequence);
        numberSeq.parmNumberSequenceId(numberSequenceTableNum.RecId);
        numberSeq.parmRefTableNum(_numberSequenceReference);
        numberSeq.parmNumTableNum(numberSequenceTableNum);
        numberSeq.parmMakeDecisionLater(_makeDecisionLater);

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGetNumFromCode</Name>
				<Source><![CDATA[
        public static NumberSeq newGetNumFromCode(
            NumberSequenceCode  _numberSequenceCode,
            NumberSeqScope      _scope                       = NumberSeqScopeFactory::createDefaultScope(),
            boolean             _makeDecisionLater           = false,
            boolean             _dontThrowOnMissingRefSetUp  = false)
    {
        return NumberSeq_RU::newGetNumFromId(
                    NumberSequenceTable::findByNaturalKey(_numberSequenceCode, _scope.getId()).RecId,
                    _makeDecisionLater,
                    _dontThrowOnMissingRefSetUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGetNumFromId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>NumberSeq</c> class.
    /// </summary>
    /// <param name="_numberSequenceId">
    /// The record ID of number sequence.
    /// </param>
    /// <param name="_makeDecisionLater">
    /// The initial value for parameter makeDecisionLater of <c>NumberSeq</c> class.
    /// </param>
    /// <param name="_dontThrowOnMissingRefSetUp">
    /// true if need throw on missing number sequence reference; otherwise, false.
    /// </param>
    /// <returns>
    /// A instance of the <c>NumberSeq</c> class; otherwise, a null.
    /// </returns>
    public static NumberSeq newGetNumFromId(RefRecId            _numberSequenceId,
                                            boolean             _makeDecisionLater           = false,
                                            boolean             _dontThrowOnMissingRefSetUp  = false
                                           )
    {
        NumberSeq               numberSeq;
        NumberSequenceTable     numberSequenceTableNum = NumberSequenceTable::find(_numberSequenceId);

        if (!numberSequenceTableNum)
        {
            if (_dontThrowOnMissingRefSetUp)
            {
                return null;
            }
            throw error(strfmt("@SYS26271", _numberSequenceId));
        }

        if (numberSequenceTableNum.Continuous)
            numberSeq = new NumberSeq_RU();
        else
            numberSeq = new NumberSeq_Fast();

        numberSeq.parmNumberSequenceId(_numberSequenceId);
        numberSeq.parmNumberSequenceCode(numberSequenceTableNum.NumberSequence);
        numberSeq.parmMakeDecisionLater(_makeDecisionLater);

        return numberSeq;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>