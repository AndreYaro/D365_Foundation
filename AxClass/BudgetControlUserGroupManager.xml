<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlUserGroupManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlUserGroupManager</c> class provides an interface for managing the
/// <c>BudgetOverrideUserGroupOption</c> table, the <c>BudgetControlRuleUserGroupOption</c> table, the
/// <c>BudgetGroupUserGroupOption</c> table, and the <c>BudgetControlUserGroupSuppressWarnings</c>
/// table.
/// </summary>
public class BudgetControlUserGroupManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupForDeletedUserGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the records in the <c>BudgetControlUserGroupSuppressWarnings</c> table that reference a
    /// removed user group from the draft budget control configuration.
    /// </summary>
    public static void cleanupForDeletedUserGroups()
    {
        UserGroupInfo                           userGroupInfo;
        BudgetControlUserGroupSuppressWarnings  budgetControlUserGroupSuppressWarnings;
        BudgetControlConfiguration              budgetControlConfiguration;

        ttsbegin;

        delete_from budgetControlUserGroupSuppressWarnings
            exists join budgetControlConfiguration
                where budgetControlConfiguration.RecId == budgetControlUserGroupSuppressWarnings.BudgetControlConfiguration
                    && budgetControlConfiguration.IsActive == NoYes::No
            notexists join userGroupInfo
                where budgetControlUserGroupSuppressWarnings.UserGroupInfo == userGroupInfo.Id;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetControlRuleUserGroupOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in the <c>BudgetControlRuleUserGroupOption</c> table.
    /// </summary>
    /// <param name="_budgetControlRuleRecId">
    /// The budget control rule record ID for the records to create.
    /// </param>
    /// <param name="_userGroupOptions">
    /// The <c>Set</c> that contains the <c>BudgetOverrideUserGroupOption</c> table records.
    /// </param>
    public static void createBudgetControlRuleUserGroupOption(
        RefRecId _budgetControlRuleRecId,
        Set _userGroupOptions)
    {
        if (_budgetControlRuleRecId != 0)
        {
            SetEnumerator userGroupOptionsEnumerator = _userGroupOptions.getEnumerator();

            ttsbegin;

            BudgetControlRuleUserGroupOption budgetControlRuleUserGroupOption;
            BudgetOverrideUserGroupOption budgetOverrideUserGroupOption;

            while (userGroupOptionsEnumerator.moveNext())
            {
                budgetOverrideUserGroupOption = userGroupOptionsEnumerator.current();

                budgetControlRuleUserGroupOption.clear();
                budgetControlRuleUserGroupOption.BudgetOverrideUserGroupOption = budgetOverrideUserGroupOption.RecId;
                budgetControlRuleUserGroupOption.BudgetControlRule = _budgetControlRuleRecId;
                budgetControlRuleUserGroupOption.OverrideOverbudgetOption = budgetOverrideUserGroupOption.DefaultOverBudgetOption;

                if (budgetControlRuleUserGroupOption.validateWrite())
                {
                    budgetControlRuleUserGroupOption.write();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetGroupUserGroupOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in the <c>BudgetGroupUserGroupOption</c> table.
    /// </summary>
    /// <param name="_budgetGroupRecId">
    /// The budget group record ID for the records to create.
    /// </param>
    /// <param name="_userGroupOptions">
    /// The <c>Set</c> that contains the <c>BudgetOverrideUserGroupOption</c> table records.
    /// </param>
    public static void createBudgetGroupUserGroupOption(
        RefRecId _budgetGroupRecId,
        Set _userGroupOptions)
    {
        if (_budgetGroupRecId != 0)
        {
            SetEnumerator userGroupOptionsEnumerator = _userGroupOptions.getEnumerator();

            ttsbegin;

            BudgetGroupUserGroupOption budgetGroupUserGroupOption;
            BudgetOverrideUserGroupOption budgetOverrideUserGroupOption;

            while (userGroupOptionsEnumerator.moveNext())
            {
                budgetOverrideUserGroupOption = userGroupOptionsEnumerator.current();

                budgetGroupUserGroupOption.clear();
                budgetGroupUserGroupOption.BudgetOverrideUserGroupOption = budgetOverrideUserGroupOption.RecId;
                budgetGroupUserGroupOption.BudgetGroup = _budgetGroupRecId;
                budgetGroupUserGroupOption.OverrideOverbudgetOption = budgetOverrideUserGroupOption.DefaultOverBudgetOption;

                if (budgetGroupUserGroupOption.validateWrite())
                {
                    budgetGroupUserGroupOption.write();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>