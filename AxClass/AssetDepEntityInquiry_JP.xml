<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepEntityInquiry_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The asset depreciation entity inquiry
/// </summary>
class AssetDepEntityInquiry_JP
{
    // One instance of entity inquirier only works for on entity group
    AssetDepEntityGroup_JP          assetDepEntityGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the base query
    /// </summary>
    /// <param name="_entityTypeList">
    /// The entity type list
    /// </param>
    /// <param name="_entityDateFrom">
    /// The entity date from
    /// </param>
    /// <param name="_entityDateTo">
    /// The entity date to
    /// </param>
    /// <param name="_transTypeList">
    /// The transaction type list
    /// </param>
    /// <param name="_transDateFrom">
    /// The transaction date from
    /// </param>
    /// <param name="_transDateTo">
    /// The transaction date to
    /// </param>
    /// <param name="_entitySourceRecId">
    /// The entity source record id
    /// </param>
    /// <returns>
    /// Returns the built query
    /// </returns>
    protected Query buildQueryBase(
        container                       _entityTypeList,
        AssetTransDate                  _entityDateFrom         = dateNull(),
        AssetTransDate                  _entityDateTo           = dateMax(),
        container                       _transTypeList          = conNull(),
        AssetTransDate                  _transDateFrom          = dateNull(),
        AssetTransDate                  _transDateTo            = dateMax(),
        RefRecId                        _entitySourceRecId      = 0)
    {
        Query                   q;
        QueryBuildDataSource    qbds;
        int                     i;

        //
        // Build query
        //

        // AssetDepEntityTrans_JP
        q = new Query();
        qbds = q.addDataSource(tableNum(AssetDepEntityTrans_JP));
        qbds.addSelectionField(fieldNum(AssetDepEntityTrans_JP, AccountingCurrencyAmount), SelectionField::Sum);

        if (_transDateFrom != dateNull() || _transDateTo != dateMax())
        {
            qbds.addRange(fieldNum(AssetDepEntityTrans_JP, TransDate)).value(SysQuery::range(_transDateFrom, _transDateTo));
        }

        if (_transTypeList != conNull())
        {
            for (i = 1; i <= conLen(_transTypeList); i++)
            {
                qbds.addRange(fieldNum(AssetDepEntityTrans_JP, TransType)).value(SysQuery::value(enum2int(conPeek(_transTypeList, i))));
            }
        }

        // AssetDepEntityTrans_JP --> AssetDepEntity_JP
        qbds = q.dataSourceTable(tableNum(AssetDepEntityTrans_JP)).addDataSource(tableNum(AssetDepEntity_JP));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.relations(true);
        qbds.addRange(fieldNum(assetDepEntity_JP, AssetDepEntityGroup_JP)).value(SysQuery::value(assetDepEntityGroup.RecId));

        if (_entityTypeList != conNull())
        {
            for (i = 1; i <= conLen(_entityTypeList); i++)
            {
                qbds.addRange(fieldNum(assetDepEntity_JP, EntityType)).value(SysQuery::value(enum2int(conPeek(_entityTypeList, i))));
            }
        }

        if (_entityDateFrom != dateNull() || _entityDateTo != dateMax())
        {
            qbds.addRange(fieldNum(AssetDepEntity_JP, EntityDate)).value(SysQuery::range(_entityDateFrom, _entityDateTo));
        }

        if (_entitySourceRecId != 0)
        {
            qbds.addRange(fieldNum(AssetDepEntity_JP, AssetDepEntitySource_JP)).value(SysQuery::value(_entitySourceRecId));
        }

        return q;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the summary based on specified parameters.
    /// </summary>
    /// <param name="_entityTypeList">
    /// A container that includes the list of entity types.
    /// </param>
    /// <param name="_entityDateFrom">
    /// The start date of the date range for entities. Optional.
    /// </param>
    /// <param name="_entityDateTo">
    /// The end date of the date range for entities. Optional.
    /// </param>
    /// <param name="_entityValidDate">
    /// The date that the entities must be valid. Optional.
    /// </param>
    /// <param name="_transTypeList">
    /// A container that includes the list of transaction types. Optional.
    /// </param>
    /// <param name="_transDateFrom">
    /// The start date of the date range for transactions. Optional.
    /// </param>
    /// <param name="_transDateTo">
    /// The start end of the date range for transactions. Optional.
    /// </param>
    /// <param name="_entitySourceRecId">
    /// The record ID of entity source record. Optional.
    /// </param>
    /// <returns>
    /// The summary amount.
    /// </returns>
    public AssetAmount calcSum(
        container                       _entityTypeList,
        AssetTransDate                  _entityDateFrom         = dateNull(),
        AssetTransDate                  _entityDateTo           = dateMax(),
        AssetTransDate                  _entityValidDate        = dateNull(),
        container                       _transTypeList          = conNull(),
        AssetTransDate                  _transDateFrom          = dateNull(),
        AssetTransDate                  _transDateTo            = dateMax(),
        RefRecId                        _entitySourceRecId      = 0)
    {
        AssetAmount             ret;
        Query                   q;
        QueryRun                qr;
        QueryBuildDataSource    qbds;
        AssetDepEntityTrans_JP  assetDepEntityTransLoc;

        //
        // Build query
        //

        q = this.buildQueryBase(
            _entityTypeList,
            _entityDateFrom,
            _entityDateTo,
            _transTypeList,
            _transDateFrom,
            _transDateTo,
            _entitySourceRecId);

        // AssetDepEntityTrans_JP --> AssetDepEntity_JP
        qbds = q.dataSourceTable(tableNum(AssetDepEntity_JP));
        if (_entityValidDate != dateNull())
        {
            // The effective date range of an entity is [dateNull(), ValidTo]
            SysQuery::findOrCreateRange(qbds, fieldNum(assetDepEntity_JP, ValidTo)).value(SysQuery::range(_entityValidDate, dateMax()));
        }

        //
        // Run
        //
        qr = new QueryRun(q);
        if (qr.next())
        {
            assetDepEntityTransLoc = qr.get(tableNum(AssetDepEntityTrans_JP));
            ret = assetDepEntityTransLoc.AccountingCurrencyAmount;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcSumForEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates summary for entity
    /// </summary>
    /// <param name="_entityRecId">
    /// The entity record id
    /// </param>
    /// <param name="_transTypeList">
    /// The transaction type list
    /// </param>
    /// <param name="_transDateFrom">
    /// The transaction date from
    /// </param>
    /// <param name="_transDateTo">
    /// The transaction date to
    /// </param>
    /// <returns>
    /// Returns the calculated amount
    /// </returns>
    public AssetAmount calcSumForEntity(
        RefRecId            _entityRecId,
        container           _transTypeList          = conNull(),
        AssetTransDate      _transDateFrom          = dateNull(),
        AssetTransDate      _transDateTo            = dateMax())
    {
        AssetAmount             ret;
        Query                   q;
        QueryRun                qr;
        QueryBuildDataSource    qbds;
        int                     i;
        AssetDepEntityTrans_JP  assetDepEntityTransLoc;

        //
        // Build query
        //

        // AssetDepEntityTrans_JP
        q = new Query();
        qbds = q.addDataSource(tableNum(AssetDepEntityTrans_JP));
        qbds.addSelectionField(fieldNum(AssetDepEntityTrans_JP, AccountingCurrencyAmount), SelectionField::Sum);
        qbds.addRange(fieldNum(AssetDepEntityTrans_JP, AssetDepEntity_JP)).value(SysQuery::value(_entityRecId));

        if (_transDateFrom != dateNull() || _transDateTo != dateMax())
        {
            qbds.addRange(fieldNum(AssetDepEntityTrans_JP, TransDate)).value(SysQuery::range(_transDateFrom, _transDateTo));
        }

        if (_transTypeList != conNull())
        {
            for (i = 1; i <= conLen(_transTypeList); i++)
            {
                qbds.addRange(fieldNum(AssetDepEntityTrans_JP, TransType)).value(SysQuery::value(enum2int(conPeek(_transTypeList, i))));
            }
        }

        //
        // Run
        //
        qr = new QueryRun(q);
        if (qr.next())
        {
            assetDepEntityTransLoc = qr.get(tableNum(AssetDepEntityTrans_JP));
            ret = assetDepEntityTransLoc.AccountingCurrencyAmount;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcSumOfExpiredOnDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates summary of expired on date
    /// </summary>
    /// <param name="_expiredDate">
    /// The expired date
    /// </param>
    /// <param name="_entityTypeList">
    /// The entity type list
    /// </param>
    /// <param name="_entityDateFrom">
    /// The entity date from
    /// </param>
    /// <param name="_entityDateTo">
    /// The entity date to
    /// </param>
    /// <param name="_transTypeList">
    /// The transaction type list
    /// </param>
    /// <param name="_transDateFrom">
    /// The transation date from
    /// </param>
    /// <param name="_transDateTo">
    /// The transation date to
    /// </param>
    /// <param name="_entitySourceRecId">
    /// The entity source record id
    /// </param>
    /// <returns>
    /// The summary amount.
    /// </returns>
    public AssetAmount calcSumOfExpiredOnDate(
        AssetTransDate                  _expiredDate,
        container                       _entityTypeList,
        AssetTransDate                  _entityDateFrom         = dateNull(),
        AssetTransDate                  _entityDateTo           = dateMax(),
        container                       _transTypeList          = conNull(),
        AssetTransDate                  _transDateFrom          = dateNull(),
        AssetTransDate                  _transDateTo            = dateMax(),
        RefRecId                        _entitySourceRecId      = 0)
    {
        AssetAmount             ret;
        Query                   q;
        QueryRun                qr;
        QueryBuildDataSource    qbds;
        AssetDepEntityTrans_JP  assetDepEntityTransLoc;

        //
        // Build query
        //

        q = this.buildQueryBase(
            _entityTypeList,
            _entityDateFrom,
            _entityDateTo,
            _transTypeList,
            _transDateFrom,
            _transDateTo,
            _entitySourceRecId);

        // AssetDepEntityTrans_JP --> AssetDepEntity_JP
        qbds = q.dataSourceTable(tableNum(AssetDepEntity_JP));

        // For the entity expired on specified date, its "ValidTo" date must be the day before the specified expired date.
        SysQuery::findOrCreateRange(qbds, fieldNum(assetDepEntity_JP, ValidTo)).value(SysQuery::value(_expiredDate - 1));

        //
        // Run
        //
        qr = new QueryRun(q);
        if (qr.next())
        {
            assetDepEntityTransLoc = qr.get(tableNum(AssetDepEntityTrans_JP));
            ret = assetDepEntityTransLoc.AccountingCurrencyAmount;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <C>AssetDepEntityGroup_JP</C>
    /// </summary>
    /// <param name="_assetDepEntityGroup">
    /// The asset depreciation entity group
    /// </param>
    protected void new(AssetDepEntityGroup_JP _assetDepEntityGroup)
    {
        assetDepEntityGroup     = _assetDepEntityGroup;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <C>AssetDepEntityInquiry_JP</C>
    /// </summary>
    /// <param name="_assetId">
    /// The asset id
    /// </param>
    /// <param name="_bookId">
    /// The book id
    /// </param>
    /// <returns>
    /// Returns the instance
    /// </returns>
    public static AssetDepEntityInquiry_JP construct(
        AssetId             _assetId,
        AssetBookMergeId    _bookId)
    {
        AssetDepEntityInquiry_JP    assetDepEntityInquiry;

        assetDepEntityInquiry = new AssetDepEntityInquiry_JP(
            AssetDepEntityGroup_JP::findOrCreate(
                _assetId,
                _bookId));

        return assetDepEntityInquiry;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>