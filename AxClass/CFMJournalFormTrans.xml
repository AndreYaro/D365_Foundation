<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalFormTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The classes which are post fixed with cfmFormTrans contains the code used to
///    control and manage the header and line forms.
/// </summary>
public final class CFMJournalFormTrans extends JournalFormTrans
{
    FormFunctionButtonControl ctrlDeleteTrans;
    FormButtonControl ctrlEditBalance;
    FormFunctionButtonControl ctrlTransLog;
    boolean editBalanceState;
    QueryBuildRange qbrSourceType1, qbrSourceType2;
    FormDataObject paymentAmountObj;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buttonClickedEditBalance</Name>
				<Source><![CDATA[
    public void buttonClickedEditBalance()
    {
        formRun.lock();

        editBalanceState = !editBalanceState;

        if (editBalanceState)
        {
            qbrSourceType1.value(queryValue(CFMJournalTransSourceType::OpeningBalanceCash));
            qbrSourceType2.value(queryValue(CFMJournalTransSourceType::OpeningBalanceBank));
        }
        else
        {
            qbrSourceType1.value(SysQuery::valueUnlimited());
            qbrSourceType2.value(SysQuery::valueUnlimited());
        }

        journalTrans_ds.executeQuery();

        this.updateDesign();

        formRun.unLock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    public void datasourceActivePost()
    {
        super();
        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    public void datasourceInitPost(JournalTransMap _journalTrans)
    {
        super(_journalTrans);

        QueryBuildDataSource qbdsCFMJournalTrans = journalTrans_ds.query().dataSourceTable(tableNum(CFMJournalTrans));

        qbrSourceType1 = qbdsCFMJournalTrans.addRange(fieldnum(CFMJournalTrans, SourceType));
        qbrSourceType2 = qbdsCFMJournalTrans.addRange(fieldnum(CFMJournalTrans, SourceType));

        allowEditFieldsOnFormDS_W(journalTrans_ds, false);
        paymentAmountObj = journalTrans_ds.object(fieldnum(CFMJournalTrans, PaymentAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedTransTypePost</Name>
				<Source><![CDATA[
    public void fieldModifiedTransTypePost()
    {
        RPayJournalTrans payJournalTrans = journalTrans;
        payJournalTrans.Number = "";
        formRun.redraw();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        super();

        journalTrans_ds.allowEdit(false);

        SysDictTable sdt = new SysDictTable(tableNum(CFMJournalTrans));
        Counter i;

        for (i = sdt.fieldGroupCnt(); i > 0; i--)
        {

            if (sdt.fieldGroup(i) == tablefieldgroupstr(CFMJournalTrans, AggregationFields))
            {
                SysDictFieldGroup fieldGroup = new SysDictFieldGroup(sdt.id(), sdt.fieldGroup(i));
                for (Counter j = fieldGroup.numberOfFields(); j; j--)
                {
                    journalTrans_ds.object(fieldGroup.field(j)).visible(false);
                }
                break;
            }
        }

        CFMJournalTable journalTable = journalFormTable.journalTable();
        container aggregationFieldsContainer = journalTable.aggregationFieldIdsContainer();

        for (i = conLen(aggregationFieldsContainer); i > 0; i--)
        {
            journalTrans_ds.object(conPeek(aggregationFieldsContainer, i)).visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditable</Name>
				<Source><![CDATA[
    private boolean isEditable()
    {
        CFMJournalTable journalTable = journalFormTable.journalTable();

        return !journalTable.Posted && (journalTable.WorkflowStatus == CFMJournalWorkflowStatus::None || journalTable.WorkflowStatus == CFMJournalWorkflowStatus::NotSubmitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlDeleteTrans</Name>
				<Source><![CDATA[
    public FormControl parmCtrlDeleteTrans(FormFunctionButtonControl _ctrlDeleteTrans = ctrlDeleteTrans)
    {
        ctrlDeleteTrans = _ctrlDeleteTrans;
        return ctrlDeleteTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlEditBalance</Name>
				<Source><![CDATA[
    public FormControl parmCtrlEditBalance(FormButtonControl _ctrlEditBalance = ctrlEditBalance)
    {
        ctrlEditBalance = _ctrlEditBalance;
        return ctrlEditBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTransLog</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlTransLog(FormFunctionButtonControl _ctrlTransLog = ctrlTransLog)
    {
        ctrlTransLog = _ctrlTransLog;
        return ctrlTransLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    protected void updateDesign()
    {
        journalTrans_ds.allowEdit(editBalanceState && this.isEditable());
        paymentAmountObj.allowEdit(editBalanceState);

        ctrlTransLog.visible(!editBalanceState);

        ctrlEditBalance.text(editBalanceState ? "@Cashflowmanagement:ViewAllLines" : "@Cashflowmanagement:EditBeginningBalance");

        formRun.design().caption(editBalanceState ? "@Cashflowmanagement:EditBeginningBalance" : "@Cashflowmanagement:PaymentScheduleJournalLines" );
        formRun.redraw();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>