<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendPaymProposalController</c> class is the controller class for the
///    <c>CustVendPaymProposal</c> report.
/// </summary>
public class CustVendPaymProposalController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendCreatePaymJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>CustVendCreatePaymJournal</c> class by using the arguments that
    ///    are specified by the <c>main</c> method.
    /// </summary>
    /// <param name="_args">
    ///    The <c>Args</c> object that contains the arguments to use for the report.
    /// </param>
    /// <returns>
    ///    The <c>CustVendCreatePaymJournal</c> class.
    /// </returns>
    private CustVendCreatePaymJournal custVendCreatePaymJournal(Args _args)
    {
        FormRun sysSetupFormRun;
        DialogRunbase dialogRunbase;
        CustVendCreatePaymJournal custVendCreatePaymJournal;

        if (SysDictClass::isEqualOrSuperclass(classIdGet(_args.caller()), classNum(CustVendCreatePaymJournal)))
        {
            custVendCreatePaymJournal = _args.caller();
        }
        if (_args.caller() is FormRun)
        {
            sysSetupFormRun = _args.caller();
        }
        if (sysSetupFormRun && sysSetupFormRun.args().caller() is DialogRunbase)
        {
            dialogRunbase = sysSetupFormRun.args().caller();
        }
        if (dialogRunbase && dialogRunbase.caller())
        {
            if (SysDictClass::isEqualOrSuperclass(classIdGet(dialogRunbase.caller()), classNum(CustVendCreatePaymJournal)))
            {
                custVendCreatePaymJournal = dialogRunbase.caller();
            }
        }
        return custVendCreatePaymJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the UI parameters.
    /// </summary>
    /// <param name="_arg">
    ///    The <c>Args</c> object that contains the arguments to use for the report.
    /// </param>
    /// <remarks>
    ///    The arguments that were created by the <c>main</c> method to use to initialize the values of the UI
    ///    parameters.
    /// </remarks>
    public void initFromCaller(Args _arg)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans;
        CustVendPaymProposalLine custVendPaymProposalLine;
        boolean proposal;
        JournalId journalId;
        LedgerJournalType journalType;

        CustVendPaymProposalContract contract = this.parmReportContract().parmRdpContract() as CustVendPaymProposalContract;
        contract.parmGroupingBy(PaymProposalReportedBy::Account);

        CustVendCreatePaymJournal custVendCreatePaymJournal = this.custVendCreatePaymJournal(_arg);

        if (custVendCreatePaymJournal)
        {
            proposal = true;
            journalType = LedgerJournalTable::find(custVendCreatePaymJournal.ledgerJournalId()).JournalType;
            journalId = custVendCreatePaymJournal.ledgerJournalId();
        }
        else
        {
            if (_arg && _arg.record())
            {
                switch (_arg.record().TableId)
                {
                    case tableNum(LedgerJournalTrans):
                        proposal = false;
                        ledgerJournalTrans = _arg.record();
                        journalId = ledgerJournalTrans.JournalNum;
                        journalType = LedgerJournalTable::find(ledgerJournalTrans.JournalNum).JournalType;
                        break;
                    case tableNum(CustVendPaymProposalLine):
                        proposal = true;
                        custVendPaymProposalLine = _arg.record();
                        journalId = custVendPaymProposalLine.JournalId;
                        journalType = LedgerJournalTable::find(custVendPaymProposalLine.JournalId).JournalType;
                        break;
                    case tableNum(LedgerJournalTable):
                        proposal = false;
                        journalId = ledgerJournalTable.JournalNum;
                        journalType = LedgerJournalTable::find(custVendPaymProposalLine.JournalId).JournalType;
                        break;
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }

        contract.parmModuleCustVend(LedgerJournalName::journalType2ModuleCustVend(journalType));
        contract.parmJournalId(journalId);
        contract.parmJournalType(journalType);
        contract.parmProposal(proposal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract before a dialog box is displayed to the user.
    /// </summary>
    protected void prePromptModifyContract()
    {
        this.initFromCaller(this.parmArgs());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before you run the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        if (this.isInBatch())
        {
            // In batch prePromptModifyContract() is not called so initialize the parameters.
            this.initFromCaller(this.parmArgs());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the query values will be added to the dialog box.
    /// </summary>
    /// <param name="parameterName">
    /// The name of the query parameter in the data contract.
    /// </param>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// Used by the query UI builder.
    /// </remarks>
    public boolean showQueryValues(str _parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendPaymProposalController controller = new CustVendPaymProposalController();
        controller.parmReportName(ssrsReportStr(CustVendPaymProposal, Report));
        controller.parmArgs(_args);
        controller.parmDisableRefreshButton(true);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>