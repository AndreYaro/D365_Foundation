<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRankingDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchRankingDP</c> class provides data for the <c>PurchRanking</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(PurchRanking)),
    SRSReportParameterAttribute(classstr(PurchRankingContract))
]
public class PurchRankingDP extends SRSReportDataProviderPreProcessTempDB
{
    PurchReport_Ranking     purchRanking;
    PurchRankingTmp         purchRankingTmp;

    TmpAccountSum           sortRecord;
    RecordSortedList        sortArray;

    Integer                 ranking;
    Integer                 outputQty;
    purchRanking            outputSorting;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPercent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates a percentage.
    /// </summary>
    /// <param name="_x">
    ///    The value for which the percentage is to be calculated.
    /// </param>
    /// <param name="_totalX">
    ///    The total value.
    /// </param>
    /// <returns>
    ///    The calculated percentage.
    /// </returns>
    private Percent calcPercent(real _x, real _totalX)
    {
        if (_totalX)
        {
            return (100*_x/_totalX);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchRankingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>PurchRankingTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('PurchRankingTmp')
    ]
    public PurchRankingTmp getPurchRankingTmp()
    {
        select * from purchRankingTmp;
        return purchRankingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the selected records into the temporary table.
    /// </summary>
    private void insertIntoTempTable()
    {
        purchRankingTmp.Ranking         = this.ranking();
        purchRankingTmp.OrderAccount    = this.orderAccount();
        purchRankingTmp.VendName        = this.vendName();
        purchRankingTmp.Revenue         = this.revenue();
        purchRankingTmp.PurchQty        = this.purchQty();
        purchRankingTmp.Percent         = this.percent();
        purchRankingTmp.TotalRevenue    = this.totalRevenue();
        purchRankingTmp.TotalQty        = this.totalQty();
        purchRankingTmp.TotalPercent    = this.totalpercent();

        purchRankingTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the order account.
    /// </summary>
    /// <returns>
    ///    The order account.
    /// </returns>
    private VendAccount orderAccount()
    {
        return sortRecord.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the percentage.
    /// </summary>
    /// <returns>
    ///    The calculated percentage.
    /// </returns>
    private Percent percent()
    {
        switch (purchRanking.outputSorting())
        {
            case purchRanking::Revenue: return this.calcPercent(this.revenue(), this.totalRevenue());
            case purchRanking::Qty:     return this.calcPercent(this.purchQty(), this.totalQty());
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This is the main method that processes the whole report logic and inserts the data into the
    ///    temporary table.
    /// </remarks>
    public void processReport()
    {
        QueryRun                qr;
        SysDictEnum             sysDictEnum;
        PurchRankingContract    contract = this.parmDataContract() as PurchRankingContract;

        sysDictEnum     = new SysDictEnum(enumnum(purchRanking));
        outputQty       = contract.parmNoOfRecords();
        outputSorting   = contract.parmRanking();

        qr              = new QueryRun(this.parmQuery());

        purchRanking    = new PurchReport_Ranking(sortRecord,qr);

        purchRanking.outputQty(outputQty);
        purchRanking.outputSorting(outputSorting);

        purchRanking.run();

        sortArray       = purchRanking.sortArray();
        outputQty       = purchRanking.outputQty();

        purchRanking.quantity();

        // Need to sort revenue record based on account number
        if (purchRanking.outputSorting() != purchRanking::Revenue && purchRanking.outputSorting() != purchRanking::Qty)
        {
            sortArray = this.sortOutputQtyByAccountNumber();            
        }
        
        while (ranking < outputQty && sortArray.next(sortRecord))
        {
            this.insertIntoTempTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the corresponding purchase quantity from the list.
    /// </summary>
    /// <returns>
    ///    The corresponding purchase quantity.
    /// </returns>
    private PurchQty purchQty()
    {
        return -sortRecord.Balance03;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ranking</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the ranking.
    /// </summary>
    /// <returns>
    ///    The calculated ranking.
    /// </returns>
    private int ranking()
    {
        ranking++;
        return ranking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revenue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the corresponding revenue value from the list.
    /// </summary>
    /// <returns>
    ///    The corresponding revenue value.
    /// </returns>
    private AmountMST revenue()
    {
        return -sortRecord.Balance01;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalpercent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total revenue.
    /// </summary>
    /// <returns>
    ///    The calculated total revenue.
    /// </returns>
    private Percent totalpercent()
    {
        if (this.totalRevenue())
        {
            return 0;
        }
        return 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total quantity.
    /// </summary>
    /// <returns>
    ///    The total quantity.
    /// </returns>
    private PurchQty totalQty()
    {
        return purchRanking.totalQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total revenue.
    /// </summary>
    /// <returns>
    ///    The total revenue.
    /// </returns>
    private AmountMST totalRevenue()
    {
        return purchRanking.totalRevenue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the vendor.
    /// </summary>
    /// <returns>
    ///    The vendor name.
    /// </returns>
    private Name vendName()
    {
        return VendTable::find(sortRecord.AccountNum).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortOutputQtyByAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sorts the record based on account number sequence.
    /// </summary>
    /// <returns>
    ///    The record sorted list contains record sorted by account number.
    /// </returns>
    private RecordSortedList sortOutputQtyByAccountNumber()
    {
        RecordSortedList sortArrayByAccountNum = new RecordSortedList(tablenum(TmpAccountSum));
        sortArrayByAccountNum.sortOrder(fieldnum(TmpAccountSum, AccountNum));
        Integer numberOfRecords = 0;
        while (numberOfRecords < outputQty && sortArray.next(sortRecord))
        {
            sortArrayByAccountNum.ins(sortRecord);
            numberOfRecords++;
        }

        return sortArrayByAccountNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>