<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximAuthorization_Annual_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim authorization annual class.
/// </summary>
class EximAuthorization_Annual_IN extends EximAuthorization_IN implements BatchRetryable
{
    TmpEximAnnualConsumption_IN tmpAnnualConsumption;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applySion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply the sion method.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void applySion()
    {
        EximSionTableRecId_IN            sionTableRecId;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;

        authorizationSchemesTable = EximAuthorizationSchemesTable_IN::find(authorizationSchemesTableRecId);

        sionTableRecId = EximSionTable_IN::findPeriod(authorizationSchemesTable.EximProductGroupTable,
                                                      authorizationSchemesTable.AuthorizationDateTime).RecId;
        if (sionTableRecId)
        {
            tmpImportableItems = null;

            while select tmpAnnualConsumption
                where tmpAnnualConsumption.AuthorizationSchemesTableRecId == authorizationSchemesTable.RecId
            {
                this.insertTmpImportableItems(sionTableRecId,
                                              tmpAnnualConsumption.RecId,
                                              tmpAnnualConsumption.AssessableValue,
                                              tmpAnnualConsumption.ItemId,
                                              tmpAnnualConsumption.Unit,
                                              tmpAnnualConsumption.Qty);
            }
        }

        this.parmTmpEximImportableItems(tmpImportableItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cumulativeAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get cumulative assessable value.
    /// </summary>
    /// <returns>
    /// The isntance of the <c>AmountMST</c> class.
    /// </returns>
    public AmountMST cumulativeAssessableValue()
    {
        EximAnnualConsumption_IN annualConsumption;
        ;

        select sum(AssessableValue) from annualConsumption
            where annualConsumption.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId;

        return annualConsumption.AssessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes source record.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The id of the source record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteItem(RefRecId _sourceRecId)
    {
        ;

        if (_sourceRecId)
        {
            delete_from tmpImportableItems
                where tmpImportableItems.SourceRecId == _sourceRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes table records.
    /// </summary>
    public void deleteRecords()
    {
        EximAnnualConsumption_IN annualConsumption;
        ;

        delete_from annualConsumption
            where annualConsumption.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAnnualConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts new annual consumption.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertAnnualConsumption()
    {
        EximAnnualConsumption_IN annualConsumption;
        EximImportableItems_IN   importableItems;
        ;

        while select tmpAnnualConsumption
        {
            annualConsumption.ItemId                         = tmpAnnualConsumption.ItemId;
            annualConsumption.Qty                            = tmpAnnualConsumption.Qty;
            annualConsumption.Unit                           = tmpAnnualConsumption.Unit;
            annualConsumption.Price                          = tmpAnnualConsumption.Price;
            annualConsumption.AssessableValue                = tmpAnnualConsumption.AssessableValue;
            annualConsumption.AuthorizationSchemesTableRecId = authorizationSchemesTableRecId;
            annualConsumption.insert();

            while select tmpImportableItems
                where tmpImportableItems.SourceRecId == tmpAnnualConsumption.RecId
            {
                importableItems.ItemId                         = tmpImportableItems.ItemId;
                importableItems.Unit                           = tmpImportableItems.Unit;
                importableItems.Qty                            = tmpImportableItems.Qty;
                importableItems.Value                          = tmpImportableItems.Value;
                importableItems.SourceRecId                    = annualConsumption.RecId;
                importableItems.AuthorizationBasis             = EximAuthorizationBasis_IN::AnnualConsumption;
                importableItems.AuthorizationSchemesTableRecId = authorizationSchemesTableRecId;
                importableItems.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpAnnualConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts temporary annual consumption.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertTmpAnnualConsumption()
    {
        EximAnnualConsumption_IN    annualConsumption;
        EximImportableItems_IN      importableItems;
        TmpEximAnnualConsumption_IN tmpAnnualConsumptionLoc;
        TmpEximImportableItems_IN   tmpImportableItemsLoc;
        ;

        ttsbegin;
        while select annualConsumption
            where annualConsumption.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId
        {
            tmpAnnualConsumptionLoc.clear();
            tmpAnnualConsumptionLoc.ItemId                         = annualConsumption.ItemId;
            tmpAnnualConsumptionLoc.Qty                            = annualConsumption.Qty;
            tmpAnnualConsumptionLoc.Unit                           = annualConsumption.Unit;
            tmpAnnualConsumptionLoc.Price                          = annualConsumption.Price;
            tmpAnnualConsumptionLoc.AssessableValue                = annualConsumption.AssessableValue;
            tmpAnnualConsumptionLoc.AuthorizationSchemesTableRecId = annualConsumption.AuthorizationSchemesTableRecId;
            tmpAnnualConsumptionLoc.insert();

            while select ItemId, Unit, Qty, Value
                from importableItems
                where importableItems.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId
                   && importableItems.AuthorizationBasis             == EximAuthorizationBasis_IN::AnnualConsumption
                   && importableItems.SourceRecId                    == annualConsumption.RecId
            {
                tmpImportableItemsLoc.clear();
                tmpImportableItemsLoc.ItemId      = importableItems.ItemId;
                tmpImportableItemsLoc.Unit        = importableItems.Unit;
                tmpImportableItemsLoc.Qty         = importableItems.Qty;
                tmpImportableItemsLoc.Value       = importableItems.Value;
                tmpImportableItemsLoc.SourceRecId = tmpAnnualConsumptionLoc.RecId;
                tmpImportableItemsLoc.insert();
            }
        }
        ttscommit;

        this.parmTmpEximAnnualConsumption(tmpAnnualConsumptionLoc);
        this.parmTmpEximImportableItems(tmpImportableItemsLoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEximAnnualConsumption</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TmpEximAnnualConsumption_IN parmTmpEximAnnualConsumption(TmpEximAnnualConsumption_IN _tmpAnnualConsumption = tmpAnnualConsumption)
    {
        tmpAnnualConsumption = _tmpAnnualConsumption;

        return tmpAnnualConsumption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        #OCCRetryCount
        ;

        try
        {
            ttsbegin;
            this.deleteRecords();

            this.insertAnnualConsumption();

            this.insertSummaryImportableItems();

            this.updateScheme();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>