<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffCalculatedTransactions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementWriteOffCalculatedTransactions</c> class contains the result set of potential write off transactions
/// and potential transaction amounts for settle remainder.
/// </summary>
internal final class SettlementWriteOffCalculatedTransactions
{
    private CurrencyCode adjustmentCurrency;
    private AmountCur potentialAdjustmentAmount;
    private SpecTransWriteOffTmp specTransWriteOffTmpState;
    private SpecTransWriteOffTmp specTransWriteOffTmpBalanceState;

    private container legalEntities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>saveSpecTransWriteOffTmpState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new set of <c>SpecTrans</c> records to be included during write off processing.
    /// </summary>
    /// <param name = "_writeOffTmp">The set of references to <c>SpecTrans</c> records </param>
    /// <remarks>
    /// Included records take a snapshot of associated <c>SpecTrans</c> records at the time of call.
    /// The balances in the adjustment transactions represent the original marked amounts, not the write off adjusted amounts.
    /// </remarks>
    internal void saveSpecTransWriteOffTmpState(SpecTransWriteOffTmp _writeOffTmp)
    {
        SpecTrans specTrans;

        // Copy the state of specTrans prior to write off adjustment. This constitutes the list of all write off transactions.
        insert_recordset specTransWriteOffTmpState
            (SpecTransRecId, Balance01, CashDiscToTake, CurrencyCode, RefCompany, RefTableId, RefRecId)
            select RecId, Balance01, CashDiscToTake, Code, RefCompany, RefTableId, RefRecId from specTrans
                join _writeOffTmp
                    where  _writeOffTmp.SpecTransRecId == specTrans.RecId;

        legalEntities = conNull();
        while select RefCompany from specTransWriteOffTmpState
                group by RefCompany
        {
            legalEntities += [specTransWriteOffTmpState.RefCompany];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSpecTransWriteOffTmpBalanceState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the updates to <c>SpecTrans</c> to be applied against existing balances if the potential write off is accepted.
    /// </summary>
    /// <param name = "_writeOffTmp">The updated balances for existing transactions.</param>
    internal void saveSpecTransWriteOffTmpBalanceState(SpecTransWriteOffTmp _writeOffTmp)
    {
        specTransWriteOffTmpBalanceState = _writeOffTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of legal entities for all write off transactions.
    /// </summary>
    /// <returns>The set of legal entities for all write off transactions.</returns>
    internal container getAdjustmentLegalEntities()
    {
        return legalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWriteOffAdjustmentTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current set of write off adjustment transactions.
    /// </summary>
    /// <returns>The current set of write off adjustment transactions.</returns>
    internal SpecTransWriteOffTmp getWriteOffAdjustmentTransactions()
    {
        return specTransWriteOffTmpState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransUpdatedBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of updated balances for the <c>SpecTrans</c> records to adjust for write off.
    /// </summary>
    /// <returns>The set of updated balances.</returns>
    internal SpecTransWriteOffTmp getSpecTransUpdatedBalances()
    {
        return specTransWriteOffTmpBalanceState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPotentialAdjustmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the potential adjustment amount. The potential adjustment amount represents the calculated estimate of
    /// the total write off amount across all legal entities.
    /// </summary>
    /// <param name = "_potentialAdjustmentAmount">The potential adjustment amount.</param>
    /// <returns>The potential adjustment amount.</returns>
    internal AmountCur parmPotentialAdjustmentAmount(AmountCur _potentialAdjustmentAmount = potentialAdjustmentAmount)
    {
        potentialAdjustmentAmount = _potentialAdjustmentAmount;
        return potentialAdjustmentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new set of potential transactions.
    /// </summary>
    /// <returns>The new potential transaction class.</returns>
    internal static SettlementWriteOffCalculatedTransactions construct()
    {
        return new SettlementWriteOffCalculatedTransactions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new set of potential transactions.
    /// </summary>
    /// <param name = "_currencyCode">The currency code for the potential adjustment amount.</param>
    /// <returns>The new potential transaction class.</returns>
    internal static SettlementWriteOffCalculatedTransactions newFromCurrency(CurrencyCode _currencyCode)
    {
        SettlementWriteOffCalculatedTransactions calculatedTransactions = SettlementWriteOffCalculatedTransactions::construct();
        calculatedTransactions.adjustmentCurrency = _currencyCode;

        return calculatedTransactions;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>