<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationBIReportHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles drillthrough events from the Vendor invoice automation PowerBI report and launches appropriate forms with filtering based on the BI report, page, or visual.
/// </summary>
internal class VendInvoiceAutomationBIReportHandler
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildReportDrillThru</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribe to drillthrough events on specific sections and handle launching filtered forms.
    /// </summary>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    [SubscribesTo(classstr(PowerBIReportControl), delegatestr(PowerBIReportControl, buildReportDrillThru))]
    public static void buildReportDrillThru(PBIReportSelectedData _data)
    {
        if (!_data || _data.dataPoints().empty())
        {
            return;
        }

        if (_data.report().displayName() == 'VendInvoiceAutomationAnalytics')
        {
            VendInvoiceAutomationBIReportHandler handler = new VendInvoiceAutomationBIReportHandler();
            handler.currentPage(_data);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPage</Name>
				<Source><![CDATA[
    private void currentPage(PBIReportSelectedData _data)
    {
        switch (_data.page().displayName())
        {
            case 'Invoices that failed to import':
                this.invoicesFailedToImport(_data);
                break;
            case 'Automation status':
                this.openVendorInvoices(_data);
                break;
            case 'Reasons for automation failures':
                this.failedVendorInvoices(_data);
                break;
            case 'Workflow status':
                this.pendingVendorInvoices(_data);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForInvoicesFailedToImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Append query restrictions based on the data in the <c>PBIReportSelectedData</c> object for vendor invoices failed to import.
    /// </summary>
    /// <param name = "_query">The query to modify.</param>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    /// <param name = "_graph">The graph that is being acted on.</param>
    internal static void buildQueryForInvoicesFailedToImport(Query _query, PBIReportSelectedData _data, VendInvoiceAutomationBIGraph _graph)
    {
        if (_graph == VendInvoiceAutomationBIGraph::InvoicesFailedToImportPerCompany)
        {
            VendInvoiceAutomationBIReportHandler::queryInvoicesFailedToImportPerCompany(_query, _data);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForOpenVendorInvoicesListPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Append query restrictions based on the data in the <c>PBIReportSelectedData</c> object for open vendor invoices.
    /// </summary>
    /// <param name = "_query">The query to modify.</param>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    /// <param name = "_graph">The graph that is being acted on.</param>
    internal static void buildQueryForOpenVendorInvoicesListPage(Query _query, PBIReportSelectedData _data, VendInvoiceAutomationBIGraph _graph)
    {
        switch(_graph)
        {
            case VendInvoiceAutomationBIGraph::AutomationStatusPerCompany:
                VendInvoiceAutomationBIReportHandler::queryTouchlessInvoicesPerCompany(_query, _data);
                break;
            case VendInvoiceAutomationBIGraph::OpenInvoicesFailedByCompany:
                VendInvoiceAutomationBIReportHandler::queryOpenVendorInvoicesFailedReasonPerCompany(_query, _data);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForPendingVendorInvoicesListPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Append query restrictions based on the data in the <c>PBIReportSelectedData</c> object for pending vendor invoices.
    /// </summary>
    /// <param name = "_query">The query to modify.</param>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    /// <param name = "_graph">The graph that is being acted on.</param>
    internal static void buildQueryForPendingVendorInvoicesListPage(Query _query, PBIReportSelectedData _data, VendInvoiceAutomationBIGraph _graph)
    {
        if (_graph == VendInvoiceAutomationBIGraph::WorkflowStatusPerCompany)
        {
            VendInvoiceAutomationBIReportHandler::queryPendingVendorInvoicesPerCompany(_query, _data);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryPendingVendorInvoicesPerCompany</Name>
				<Source><![CDATA[
    private static void queryPendingVendorInvoicesPerCompany(Query _query, PBIReportSelectedData _data)
    {
        VendInvoiceAutomationBIReportHandler::getQueryBasePendingVendorInvoicesPerCompany(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBasePendingVendorInvoicesPerCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends additional data sources as required and applies query ranges to show filtered data on the caller form
    /// </summary>
    /// <param name = "_query">The query to modify.</param>
    private static void getQueryBasePendingVendorInvoicesPerCompany(Query _query)
    { 
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(SysWorkflowTable), tableNum(VendInvoiceInfoTable));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(VendInvoiceInfoTable, TableId), fieldNum(SysWorkflowTable, ContextTableId));
        qbds.addLink(fieldNum(VendInvoiceInfoTable, RecId), fieldNum(SysWorkflowTable, ContextRecId));
        
        QueryBuildDataSource qbdsBIWorkflowView = qbds.addDataSource(tableNum(VendInvoiceBIWorkflowAssignmentView));
        qbdsBIWorkflowView.joinMode(JoinMode::InnerJoin);
        qbdsBIWorkflowView.addLink(fieldNum(SysWorkflowTable, RootCorrelationId), fieldNum(VendInvoiceBIWorkflowAssignmentView, RootCorrelationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInvoicesFailedToImportPerCompany</Name>
				<Source><![CDATA[
    private static void queryInvoicesFailedToImportPerCompany(Query _query, PBIReportSelectedData _data)
    {
        VendInvoiceAutomationBIReportHandler::getQueryBaseInvoicesFailedToImport(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBaseTouchlessInvoicesPerCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends additional data sources as required and applies query ranges to show filtered data on the caller form
    /// </summary>
    /// <param name = "_query">The query to modify.</param>
    private static void getQueryBaseTouchlessInvoicesPerCompany(Query _query)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(VendInvoiceAutomationBIVendTransView), tableNum(VendTrans));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(VendTrans, RecId), fieldNum(VendInvoiceAutomationBIVendTransView, VendTransRecId));
        qbds.addRange(fieldNum(VendInvoiceAutomationBIVendTransView, TouchedStatus)).value(SysQuery::value(0));
        qbds.addRange(fieldNum(VendInvoiceAutomationBIVendTransView, IsLast30Days)).value(SysQuery::value(1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTouchlessInvoicesPerCompany</Name>
				<Source><![CDATA[
    private static void queryTouchlessInvoicesPerCompany(Query _query, PBIReportSelectedData _data)
    {
        VendInvoiceAutomationBIReportHandler::getQueryBaseTouchlessInvoicesPerCompany(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryOpenVendorInvoicesFailedReasonPerCompany</Name>
				<Source><![CDATA[
    private static void queryOpenVendorInvoicesFailedReasonPerCompany(Query _query, PBIReportSelectedData _data)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(VendInvoiceAutomationVendTransFailedReasonsView), tableNum(VendTrans));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(VendTrans, RecId), fieldNum(VendInvoiceAutomationVendTransFailedReasonsView, VendTransRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBaseInvoicesFailedToImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends additional data sources as required and applies query ranges to show filtered data on the caller form
    /// </summary>
    /// <param name = "_query">The query to modify.</param>
    private static void getQueryBaseInvoicesFailedToImport(Query _query)
    {
        QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(_query, tableNum(VendInvoiceAutomationBIImportFailureView), tableNum(VendorInvoiceHeaderStaging));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(VendorInvoiceHeaderStaging, RecId), fieldNum(VendInvoiceAutomationBIImportFailureView, RecId));
        qbds.addRange(fieldNum(VendInvoiceAutomationBIImportFailureView, Company)).value(SysQuery::value(curExt()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicesFailedToImport</Name>
				<Source><![CDATA[
    private void invoicesFailedToImport(PBIReportSelectedData _data)
    {
        if (_data.visual().title() == 'Invoices that failed to import per company')
        {
            changecompany(VendInvoiceAutomationBIReportHandler::getIdentityListValue(_data))
            {
                this.runMenuFunction(menuItemDisplayStr(VendInvoiceAutomationBIHeaderStagingListPage), _data, VendInvoiceAutomationBIGraph::InvoicesFailedToImportPerCompany);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openVendorInvoices</Name>
				<Source><![CDATA[
    private void openVendorInvoices(PBIReportSelectedData _data)
    {
        if (_data.visual().title() == 'Per company')
        {
            changecompany(VendInvoiceAutomationBIReportHandler::getIdentityListValue(_data))
            {
                this.runMenuFunction(menuItemDisplayStr(VendInvoiceAutomationBIOpenInvoicesListPage), _data, VendInvoiceAutomationBIGraph::AutomationStatusPerCompany);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>failedVendorInvoices</Name>
				<Source><![CDATA[
    private void failedVendorInvoices(PBIReportSelectedData _data)
    {
        if (_data.visual().title() == 'Invoices failed by company')
        {
            changecompany(VendInvoiceAutomationBIReportHandler::getIdentityListValue(_data))
            {
                this.runMenuFunction(menuItemDisplayStr(VendInvoiceAutomationBIOpenInvoicesListPage), _data, VendInvoiceAutomationBIGraph::OpenInvoicesFailedByCompany);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pendingVendorInvoices</Name>
				<Source><![CDATA[
    private void pendingVendorInvoices(PBIReportSelectedData _data)
    {
        if (_data.visual().title() == 'Per company')
        {
            changecompany(VendInvoiceAutomationBIReportHandler::getIdentityListValue(_data))
            {
                this.runMenuFunction(menuItemDisplayStr(VendInvoiceAutomationBIPendingInvoicesListPage), _data, VendInvoiceAutomationBIGraph::WorkflowStatusPerCompany);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIdentityListValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the first value in the identity list from the <c>PowerBIReportSelectedData</c> object.
    /// </summary>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    /// <returns>The first value of the identities list.</returns>
    private static str getIdentityListValue(PBIReportSelectedData _data)
    {
        ListIterator iterator = new ListIterator(_data.dataPoints());
        List identitiesList = iterator.value().identities();
        ListEnumerator enum = identitiesList.getEnumerator();
        enum.moveNext();

        return enum.current().identityEquals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMenuFunction</Name>
				<Source><![CDATA[
    private void runMenuFunction(str _menuItem, Object _object, VendInvoiceAutomationBIGraph _graph)
    {
        Args args = new Args();
        args.parmObject(_object);
        args.menuItemName(_menuItem);
        args.parmEnumType(enumNum(VendInvoiceAutomationBIGraph));
        args.parmEnum(_graph);

        new MenuFunction(_menuItem, MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>