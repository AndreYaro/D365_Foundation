<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandAutoAssign</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanCommandAutoAssign</c> class encapsulates the business logic around the
/// auto-assignement of circulating cards for a rule that uses cards.
/// </summary>
public class LeanCommandAutoAssign extends LeanCommandBase
{
    LeanRuleData    leanRuleData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignKanban</Name>
				<Source><![CDATA[
        private boolean assignKanban(
        KanbanRule _kanbanRule,
        Kanban     _kanban,
        KanbanCard _kanbanCard)
    {
        boolean     manualKanbansNeedCards = _kanbanRule.type().manualKanbansNeedCards();

        // case 1:
        // the rule doesn't use circulating cards OR
        // the rule uses circulating cards, but the kanban is manual and
        // configuration is that manual kanbans don't need circulating cards
        // => then we need to create a one-time card
        if (_kanbanRule.UsesCirculatingCards == NoYes::No
            || (_kanban.Manual == NoYes::Yes
                && !manualKanbansNeedCards))
        {
            KanbanCard newCard = KanbanCard::createForKanban(_kanban, _kanbanRule.CardsNumberSequence);
            if (newCard)
            {
                newCard.setPrintStatusToPrintAutomatically(_kanban, _kanbanRule);
            }
        }
        else
        {
            // case 2:
            // the rule uses circulating cards

            // handle loop breaking cases
            if (!_kanbanCard.RecId
                || _kanbanRule.CardAssignmentType != KanbanCardAssignmentType::Automatic)
            {
                if (manualKanbansNeedCards)
                {
                    // in this case we break the loop because:
                    // 1. we either need circulating cards for all kanbans and if there
                    //    isn't any free cards -> nothing can be assigned
                    // 2. we run in Manual card assignment and all kanbans need
                    //    circulating cards -> nothing can be assigned
                    return false; // break
                }
                else
                {
                    // in this case we don't break the loop, because
                    // there could be some manual kanbans to create one-time cards for
                    return true; // continue;
                }
            }

            // if the free card doesn't belong to the rule for which we're performing
            // the auto-assignment (it could be fetched from a replacement rule), then
            // we try to reassign it
            if (_kanbanCard.KanbanRule != _kanbanRule.RecId)
            {
                KanbanCard reassignedCard = KanbanCard::find(_kanbanCard.RecId, true);
                reassignedCard.reAssignToRule(_kanbanRule);

                // only transfer back the FK in order not to disrupt the cursor
                _kanbanCard.KanbanRule = reassignedCard.KanbanRule;
            }

            // at this point we are sure that:
            // - the kanban needs a circulating card
            // - there is a free card
            // - rule is configured for auto-assignment
            KanbanCard::assignToKanban(_kanbanCard, _kanban);
            _kanbanCard.setPrintStatusToPrintAutomatically(_kanban, _kanbanRule);

            next _kanbanCard;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the auto-assignement of circulating cards logic.
    /// </summary>
    /// <returns>
    /// true if the auto-assignement was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is executed within a transaction scope provided by the <c>LeanRulesEngine</c> class.
    /// </remarks>
    protected boolean execute()
    {
        boolean                 result     = true;
        KanbanRule              kanbanRule = leanRuleData.parmKanbanRule();
        Kanban                  kanban;
        Kanban                  kanban2;
        kanban                  kanbanNotAssigned;
        KanbanCard              kanbanCard;
        KanbanCard              kanbanCard2;
        KanbanCard              kanbanCardAssigned;
        LeanCoverageKanbanRule  filterLeanCoverageKanbanRule = leanRuleData.parmLeanCoverageKanbanRule();
        LeanCoverageKanbanRule  leanCoverageKanbanRule;
        KanbanJob               kanbanJob;

        if (kanbanRule.LegalEntity != CompanyInfo::current())
        {
            result = checkFailed(strFmt("@SYS332730",kanbanRule.RuleId));
        }

        if (result)
        {
            // Circulating cards are considered free (unassigned) if
            // there is no record in KanbanAssignedCard table, OR the record
            // links to a kanban with status "Emptied".

            // we also pick all free cards from all the prior rules in the
            // replacement chain the rule belongs to

            // open a cursor for retrieving free cards
            select kanbanCard
                where kanbanCard.CardType               == KanbanCardType::Circulating
            exists join leanCoverageKanbanRule
                where leanCoverageKanbanRule.KanbanRule == kanbanCard.KanbanRule
                   && leanCoverageKanbanRule.Coverage   == filterLeanCoverageKanbanRule.Coverage
                   && leanCoverageKanbanRule.ValidFrom  <= filterLeanCoverageKanbanRule.ValidFrom
            notexists join kanbanCard2
                where kanbanCard2.RecId                 == kanbanCard.RecId
                   && kanbanCard2.CardType              == KanbanCardType::Circulating
            exists join kanban2
                where kanban2.RecId                     == kanbanCard2.Kanban
                   && kanban2.Status                    != LeanKanbanStatus::Emptied
                   && kanban2.LegalEntity               == kanbanRule.LegalEntity;

            // first we process the unassigned kanbans with jobs that are Planned
            while select kanban
                where kanban.KanbanRule == kanbanRule.RecId
                   && kanban.Status     == LeanKanbanStatus::NotAssigned
            exists join kanbanJob
                where kanbanJob.Kanban  == kanban.RecId
                   && kanbanJob.Status  == LeanKanbanJobStatus::Planned
            notexists join kanbanCardAssigned
                where kanban.RecId      == kanbanCardAssigned.Kanban
            {
                if (!this.assignKanban(kanbanRule, kanban, kanbanCard))
                {
                    break;
                }
            }

            // Note: we need two selects, because in AX it's not possible to order by an aggregate field,
            //       otherwise those two select statements can be merged into one
            // second we process all the other kanbans
            while select kanban
            exists join kanbanNotAssigned
                where kanbanNotAssigned.KanbanRule  == kanbanRule.RecId
                   && kanbanNotAssigned.Status      == LeanKanbanStatus::NotAssigned
                   && kanbanNotAssigned.RecId       == kanban.RecId
            notexists join kanbanCardAssigned
                where kanbanNotAssigned.RecId       == kanbanCardAssigned.Kanban
            {
                if (!this.assignKanban(kanbanRule, kanban, kanbanCard))
                {
                    break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanRuleData</Name>
				<Source><![CDATA[
        public LeanRuleData parmLeanRuleData(LeanRuleData _leanRuleData = leanRuleData)
    {
        leanRuleData = _leanRuleData;

        return leanRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static LeanCommandAutoAssign construct()
    {
        return new LeanCommandAutoAssign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>LeanCommandAutoAssign</c> class.
    /// </summary>
    /// <param name="_leanRuleData">
    /// The rule for which to auto-assign the circulating cards.
    /// </param>
    /// <returns>
    /// A <c>LeanCommandAutoAssign</c> class instance.
    /// </returns>
    public static LeanCommandAutoAssign newStandard(
        LeanRuleData _leanRuleData
        )
    {
        LeanCommandAutoAssign leanCommandAutoAssign = LeanCommandAutoAssign::construct();

        leanCommandAutoAssign.parmLeanRuleData(_leanRuleData);

        return leanCommandAutoAssign;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
