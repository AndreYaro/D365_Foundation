<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTCustVendHelper_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
/// <summary>
/// The <c>SAFTCustVendHelper_W</c> calculates open balances, turnover
/// and find open invoices from counteragent perspective on a particular dates.
/// </summary>
public class SAFTCustVendHelper_W
{
    boolean calcBalance = true;
    protected TmpCustVendBalance_W custVendBalanceTmp;
    protected TmpCustVendOpenInvoices_W openInvoicesTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustomersWithOpenBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs all internal processing for Customer side and provides access
    /// to customers having not empty balances on reporting period start or end.
    /// </summary>
    /// <param name = "_dateFrom">The reporting period start.</param>
    /// <param name = "_dateTo">The reporting period end.</param>
    /// <returns>ArrayList contining <c>CustTable</c> records.</returns>
    [ERTableName(tableStr(CustTable))]
    public ArrayList getCustomersWithOpenBalances(date _dateFrom, date _dateTo)
    {
        return this.getCustVendWithOpenBalances(_dateFrom, _dateTo, ModuleCustVend::Cust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorsWithOpenBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs all internal processing for Vendor side and provides access
    /// to vendors having not empty balances on reporting period start or end.
    /// </summary>
    /// <param name = "_dateFrom">The reporting period start.</param>
    /// <param name = "_dateTo">The reporting period end.</param>
    /// <returns>ArrayList contining <c>VendTable</c> records.</returns>
    [ERTableName(tableStr(VendTable))]
    public ArrayList getVendorsWithOpenBalances(date _dateFrom, date _dateTo)
    {
        return this.getCustVendWithOpenBalances(_dateFrom, _dateTo, ModuleCustVend::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessedBalancesTmpByCustVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects balance info distributed by posting profiles/general ledger accounts
    /// for particular customer or vendor.
    /// </summary>
    /// <param name = "_accountNum">The customer or vendor account identifier</param>
    /// <returns>ArrayList of <c>TmpCustVendBalance_W</c> records.</returns>
    /// <remarks>
    /// Assumes that <c>getCustomersWithOpenBalances<c> 
    /// or <c>getVendorsWithOpenBalances</c> method was called before.
    /// </remarks>
    [ERTableName(tableStr(TmpCustVendBalance_W))]
    public ArrayList getProcessedBalancesTmpByCustVendAccount(CustVendAC _accountNum)
    {
        ArrayList custVendTmps = new System.Collections.ArrayList();
        while select custVendBalanceTmp
            where custVendBalanceTmp.AccountNum == _accountNum
        {
            custVendTmps.Add(custVendBalanceTmp.data());
        }
        return custVendTmps;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessedOpenInvoicesTmpByCustVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects info for particular customer or vendor invoices, that was open
    /// on the date of reporting period start.
    /// </summary>
    /// <param name = "_accountNum">The customer or vendor account identifier.</param>
    /// <returns>ArrayList of <c>TmpCustVendOpenInvoices_W</c> records.</returns>
    /// <remarks>
    /// Assumes that <c>getCustomersWithOpenBalances<c>
    /// or <c>getVendorsWithOpenBalances</c> method was called before.
    /// </remarks>
    [ERTableName(tableStr(TmpCustVendOpenInvoices_W))]
    public ArrayList getProcessedOpenInvoicesTmpByCustVendAccount(CustVendAC _accountNum)
    {
        ArrayList openInvoicesTmps = new System.Collections.ArrayList();
        while select openInvoicesTmp
            where openInvoicesTmp.AccountNum == _accountNum
        {
            openInvoicesTmps.Add(openInvoicesTmp.data());
        }
        return openInvoicesTmps;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessedBalancesTmp</Name>
				<Source><![CDATA[
    internal TmpCustVendBalance_W getProcessedBalancesTmp()
    {
        return custVendBalanceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessedOpenInvoicesTmp</Name>
				<Source><![CDATA[
    internal TmpCustVendOpenInvoices_W getProcessedOpenInvoicesTmp()
    {
        return openInvoicesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustVendBalanceTmp</Name>
				<Source><![CDATA[
    private void fillCustVendBalanceTmp(
        date _dateFrom,
        date _dateTo,
        CustVendTrans _custVendTrans,
        CustVendLedgerAccounts _custVendLedgerAccounts,
        CustVendTable _custVendTable
        )
    {
        GeneralJournalEntry gje;
        GeneralJournalAccountEntry gjae;
        MainAccount mainAccount;
        TmpCustVendBalance_W customerBalanceProcessingTmp, customerTurnoverProcessingTmp;

        ttsBegin;

        custVendBalanceTmp.skipDatabaseLog(true);
        custVendBalanceTmp.skipEvents(true);

        customerBalanceProcessingTmp.skipDatabaseLog(true);
        customerBalanceProcessingTmp.skipEvents(true);

        customerTurnoverProcessingTmp.skipDatabaseLog(true);
        customerTurnoverProcessingTmp.skipEvents(true);

        insert_recordset customerBalanceProcessingTmp(AccountNum, PostingProfile, OpeningBalance)
        select AccountNum, PostingProfile, sum(AmountMST) from _custVendTrans
            group by AccountNum, PostingProfile
            where _custVendTrans.TransDate < _dateFrom;

        insert_recordset customerTurnoverProcessingTmp(AccountNum, PostingProfile, Turnover)
        select AccountNum, PostingProfile, sum(AmountMST) from _custVendTrans
            group by AccountNum, PostingProfile
                where _custVendTrans.TransDate >= _dateFrom
                    && _custVendTrans.TransDate <= _dateTo;
        
        insert_recordset custVendBalanceTmp(AccountNum, PostingProfile, OpeningBalance, Turnover)
        select AccountNum, PostingProfile, OpeningBalance from customerBalanceProcessingTmp
        join Turnover from customerTurnoverProcessingTmp
            where customerBalanceProcessingTmp.AccountNum == customerTurnoverProcessingTmp.AccountNum
                && customerBalanceProcessingTmp.PostingProfile == customerTurnoverProcessingTmp.PostingProfile
                && (customerBalanceProcessingTmp.OpeningBalance != 0 || customerTurnoverProcessingTmp.Turnover != 0);

        insert_recordset custVendBalanceTmp(AccountNum, PostingProfile, Turnover)
        select AccountNum, PostingProfile, Turnover from customerTurnoverProcessingTmp
            where customerTurnoverProcessingTmp.Turnover != 0
            notexists join customerBalanceProcessingTmp
                where customerBalanceProcessingTmp.AccountNum == customerTurnoverProcessingTmp.AccountNum
                    && customerBalanceProcessingTmp.PostingProfile == customerTurnoverProcessingTmp.PostingProfile;

        insert_recordset custVendBalanceTmp(AccountNum, PostingProfile, OpeningBalance)
        select AccountNum, PostingProfile, OpeningBalance from customerBalanceProcessingTmp
            where customerBalanceProcessingTmp.OpeningBalance != 0
            notexists join customerTurnoverProcessingTmp
                where customerBalanceProcessingTmp.AccountNum == customerTurnoverProcessingTmp.AccountNum
                    && customerBalanceProcessingTmp.PostingProfile == customerTurnoverProcessingTmp.PostingProfile;

        this.updateMainAccountFromSummaryLedgerDimension(_custVendLedgerAccounts, _custVendTable);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMainAccountFromSummaryLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>AccountId</c> field with the summary main account for each row of <c>TmpCustVendBalance_W</c>.
    /// </summary>
    /// <remarks>
    /// Performance: Updates the posting profile summary ledger dimension in reverse priority order.
    /// Higher priority posting profile settings will overwrite lower priority.
    /// This avoids the need to individually inspect posting profiles to determine the correct summary ledger dimension.
    /// </remarks>
    private void updateMainAccountFromSummaryLedgerDimension(CustVendLedgerAccounts _custVendLedgerAccounts, CustVendTable _custVendTable)
    {
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        MainAccount mainAccount;

        update_recordSet custVendBalanceTmp
            setting AccountId = mainAccount.MainAccountId
        join _custVendLedgerAccounts
            where _custVendLedgerAccounts.PostingProfile == custVendBalanceTmp.PostingProfile
                && _custVendLedgerAccounts.AccountCode == TableGroupAll::All
        join dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == _custVendLedgerAccounts.SummaryLedgerDimension
        join MainAccountId from mainAccount
            where mainAccount.RecId == dimensionAttributeValueCombination.MainAccount;

        update_recordSet custVendBalanceTmp
            setting AccountId = mainAccount.MainAccountId
        join _custVendTable
            where custVendBalanceTmp.AccountNum == _custVendTable.AccountNum
        join _custVendLedgerAccounts
            where _custVendLedgerAccounts.CustVendAC == _custVendTable.GroupId
                && _custVendLedgerAccounts.PostingProfile == custVendBalanceTmp.PostingProfile
                && _custVendLedgerAccounts.AccountCode == TableGroupAll::GroupId
        join dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == _custVendLedgerAccounts.SummaryLedgerDimension
        join MainAccountId from mainAccount
            where mainAccount.RecId == dimensionAttributeValueCombination.MainAccount;

        update_recordSet custVendBalanceTmp
            setting AccountId = mainAccount.MainAccountId
        join _custVendLedgerAccounts
            where _custVendLedgerAccounts.CustVendAC == custVendBalanceTmp.AccountNum
                && _custVendLedgerAccounts.PostingProfile == custVendBalanceTmp.PostingProfile
                && _custVendLedgerAccounts.AccountCode == TableGroupAll::Table
        join dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == _custVendLedgerAccounts.SummaryLedgerDimension
        join MainAccountId, Name from mainAccount
            where mainAccount.RecId == dimensionAttributeValueCombination.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOpenInvoices</Name>
				<Source><![CDATA[
    private void fillOpenInvoices(
        date _dateFrom,
        CustVendTransOpen _custVendTransOpen,
        CustVendSettlement _custVendSettlement,
        CustVendTrans _custVendTrans)
    {
        TmpCustVendOpenInvoices_W openInvoicesLocal;

        ttsbegin;

        openInvoicesLocal.skipDatabaseLog(true);
        openInvoicesLocal.skipEvents(true);

        openInvoicesTmp.skipDatabaseLog(true);
        openInvoicesTmp.skipEvents(true);
        
        //invoices, open now and not having settlements after the date
        insert_recordset openInvoicesTmp(AccountNum, UnpaidAmountMST, UnpaidAmountCur,
            InvoiceId, TransDate, Voucher, CurrencyCode, DocumentDate, AmountMST, AmountCur)
        select AccountNum, maxof(AmountMST), maxof(AmountCur) from _custVendTransOpen
            group by AccountNum
        join Invoice, TransDate, Voucher, maxof(CurrencyCode), maxof(DocumentDate), maxof(AmountMST), maxof(AmountCur) from _custVendTrans
            group by Invoice, TransDate, Voucher
            where _custVendTrans.RecId == _custVendTransOpen.RefRecId
                && _custVendTrans.Invoice != ''
                && _custVendTrans.TransDate < _dateFrom
        notexists join _custVendSettlement
            where _custVendSettlement.TransDate >= _dateFrom
                && _custVendSettlement.TransRecId == _custVendTrans.RecId;

        //invoices, closed now and having settlements after the date - step I
        insert_recordset openInvoicesLocal(InvoiceId, TransDate, Voucher, AccountNum, CurrencyCode, DocumentDate, AmountMST, AmountCur,
            SettleAfterDateAmountMST, SettleAfterDateAmountCur)
        select Invoice, TransDate, Voucher, AccountNum, maxof(CurrencyCode), maxof(DocumentDate), maxOf(AmountMST), maxof(AmountCur) from _custVendTrans
            group by Invoice, AccountNum, TransDate, Voucher
            where _custVendTrans.Invoice != ''
                && _custVendTrans.TransDate < _dateFrom
                && _custVendTrans.Closed >= _dateFrom
        join sum(SettleAmountMST), sum(SettleAmountCur) from _custVendSettlement
            where _custVendSettlement.TransDate >= _dateFrom
                && _custVendSettlement.TransRecId == _custVendTrans.RecId;

        //invoices, open now and having settlements after the date - step I
        insert_recordset openInvoicesLocal(AccountNum, UnpaidAmountMST, UnpaidAmountCur,
            InvoiceId, TransDate, Voucher, CurrencyCode, DocumentDate, AmountMST, AmountCur,
            SettleAfterDateAmountMST, SettleAfterDateAmountCur)
        select AccountNum, maxof(AmountMST), maxof(AmountCur) from _custVendTransOpen
            group by AccountNum
        join Invoice, TransDate, Voucher, maxof(CurrencyCode), maxof(DocumentDate), maxof(AmountMST), maxof(AmountCur) from _custVendTrans
            group by Invoice, TransDate, Voucher
        where _custVendTrans.RecId == _custVendTransOpen.RefRecId
        && _custVendTrans.Invoice != ''
                && _custVendTrans.TransDate < _dateFrom
        join sum(SettleAmountMST), sum(SettleAmountCur) from _custVendSettlement
            where _custVendSettlement.TransDate >= _dateFrom
                && _custVendSettlement.TransRecId == _custVendTrans.RecId;

        // step II for both previous
        insert_recordset openInvoicesTmp(AccountNum, UnpaidAmountMST, UnpaidAmountCur,
            InvoiceId, TransDate, Voucher, CurrencyCode, DocumentDate, AmountMST, AmountCur,
            SettleAfterDateAmountMST, SettleAfterDateAmountCur)
        select AccountNum, UnpaidAmountMST, UnpaidAmountCur,
            InvoiceId, TransDate, Voucher, CurrencyCode, DocumentDate, AmountMST, AmountCur,
            SettleAfterDateAmountMST, SettleAfterDateAmountCur from openInvoicesLocal
            where (openInvoicesLocal.SettleAfterDateAmountMST + openInvoicesLocal.UnpaidAmountMST != 0)
                ||(openInvoicesLocal.SettleAfterDateAmountCur + openInvoicesLocal.UnpaidAmountCur != 0);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendWithOpenBalances</Name>
				<Source><![CDATA[
    private ArrayList getCustVendWithOpenBalances(date _dateFrom, date _dateTo, ModuleCustVend _custVend)
    {
        CustVendTable custVendTable;
        CustVendTrans custVendTrans;
        CustVendSettlement custVendSettlement;
        CustVendTransOpen custVendTransOpen;
        CustVendLedgerAccounts custVendLedgerAccounts;

        if (_custVend == ModuleCustVend::Cust)
        {
            custVendTable = new DictTable(tableNum(CustTable)).makeRecord();
            custVendTrans = new DictTable(tableNum(CustTrans)).makeRecord();
            custVendSettlement = new DictTable(tableNum(CustSettlement)).makeRecord();
            custVendTransOpen = new DictTable(tableNum(CustTransOpen)).makeRecord();
            custVendLedgerAccounts = new DictTable(tableNum(CustLedgerAccounts)).makeRecord();
        }
        else
        {
            custVendTable = new DictTable(tableNum(VendTable)).makeRecord();
            custVendTrans = new DictTable(tableNum(VendTrans)).makeRecord();
            custVendSettlement = new DictTable(tableNum(VendSettlement)).makeRecord();
            custVendTransOpen = new DictTable(tableNum(VendTransOpen)).makeRecord();
            custVendLedgerAccounts = new DictTable(tableNum(VendLedgerAccounts)).makeRecord();
        }

        if (calcBalance)
        {
            this.fillCustVendBalanceTmp(_dateFrom, _dateTo, custVendTrans, custVendLedgerAccounts, custVendTable);
            this.fillOpenInvoices(_dateFrom, custVendTransOpen, custVendSettlement, custVendTrans);
            calcBalance = false;
        }

        ArrayList custVendTmps = new System.Collections.ArrayList();
        while select custVendTable
        exists join custVendBalanceTmp
            where custVendBalanceTmp.AccountNum == custVendTable.AccountNum
        {
            custVendTmps.Add(custVendTable.data());
        }
        return custVendTmps;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>