<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdStatusDecrease</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdUpdStatusDecrease</c> class is used for decreasing status of production order.
/// </summary>
/// <remarks>
///    This is the engine for production decrease status functionality. All other classes for decrease
///    production status are inherited from this class.
/// </remarks>
class ProdUpdStatusDecrease extends ProdUpd
{
    ProdParmStatusDecrease  prodParmStatusDecrease;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkWIPCalculationBefore_RU</Name>
				<Source><![CDATA[
    public boolean checkWIPCalculationBefore_RU()
    {
        if (prodTable.calculatingWIP_RU() && prodTable.firstWIPCalculationDate_RU())
        {
            return checkFailed(strfmt("@GLS115879", prodTable.ProdId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    void cleanUp()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdateProduction</Name>
				<Source><![CDATA[
    void endUpdateProduction()
    {  
        prodTable.status().setPreviousProdStatus();
        prodTable.update();

        this.addUpdateRec(prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJobFinished</Name>
				<Source><![CDATA[
    boolean isJobFinished()
    {
        return prodTable.ProdStatus == prodParmStatusDecrease.WantedStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer parmParmBuffer(ParmBuffer _prodParm = prodParmStatusDecrease)
    {
        prodParmStatusDecrease  = _prodParm;

        return prodParmStatusDecrease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDerived</Name>
				<Source><![CDATA[
    void reverseDerived(ProdBOM  prodBOM)
    {
        ProdParmStatusDecrease  derivedProdParmStatusDecrease;

        if (prodParmStatusDecrease.DerivedProd && prodBOM.InventRefType == InventRefType::Production)
        {
            ProdTable derivedProdTable = ProdTable::find(prodBOM.InventRefId);

            if (derivedProdTable && derivedProdTable.InventRefType == InventRefType::ProdLine && derivedProdTable.InventRefTransId == prodBOM.InventTransId)
            {
                if (ProdStatusOrderedList::newFromOrder().isAfter(derivedProdTable.ProdStatus, prodParmStatusDecrease.WantedStatus))
                {
                    if (!derivedProdTable.status().runStatusDecrease(null,true))
                        checkFailed(strfmt("@SYS25687",derivedProdTable.ProdId));
                    else
                    {
                        derivedProdParmStatusDecrease.data(prodParmStatusDecrease);
                        derivedProdParmStatusDecrease.ProdId = derivedProdTable.ProdId;
                        derivedProdParmStatusDecrease.ParmId = '';
                        derivedProdParmStatusDecrease.RecId  = 0;
                        derivedProdTable.status().runStatusDecrease(derivedProdParmStatusDecrease,false,this);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        #OCCRetryCount
        setprefix(ProdMultiStatusDecrease::description());
        setprefix(#PreFixField(ProdParmStatusDecrease,ProdId));

        try
        {
            using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::UpdateStatusDecreaseRun, ProdParmStatusDecrease.RecId))
            {
                ttsbegin;

                this.setParameters();

                if (isProdUpdProductionTypeTelemetryFlightEnabled)
                {
                    this.addInstrumentationAdditionalParametersToStopEvent(m);
                }

                ProdStatus originalStatus = prodTable.ProdStatus;

                if (!this.validate())
                {
                    throw Exception::Error;
                }

                // <GEERU>
                if (!this.checkWIPCalculationBefore_RU())
                {
                    throw Exception::Error;
                }
                // </GEERU>

                this.cleanUp();

                this.endUpdateProduction();

                this.updateJobJournal(ParmJobStatus::Executed);

                if (originalStatus == prodTable.ProdStatus)
                {
                    throw error(strFmt("@SCM:ProdUpdStatusDecreaseStuck", originalStatus));
                }

                TransactionLog::create(TransactionLogType::ProdStatusDecrease,  strfmt("@SYS76498", prodTable.ProdId, "@SYS85827"));

                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
            InventCleanOrphanChildReference::clearChildReference(InventCleanOrphanChildReference::getFromCache(InventTransOrigin::findByInventTransId(prodTable.InventTransId)));

            this.updateJobJournal(ParmJobStatus::ContainErrors);
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    void setParameters()
    {
        this.initProdTable(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether status can be reset.
    /// </summary>
    /// <returns>
    ///    true if the status can be reset; otherwise, false.
    /// </returns>

    boolean validate()
    {
        boolean ret;
        ret = super();

        // Check if a not finished, not canceled inventory closing exists
        if (ret)
        {
            if (InventClosingPrintDetailedUnfinishedClosingInfoFlight::instance().isEnabled())
            {
                ret = InventClosing::checkUnfinishedClosing();
            }
            else
            {
                if (InventClosing::unresolvedClosingExist())
                {
                    ret = checkFailed("@SYS116068");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdUpdStatusDecrease construct(ProdStatus prodStatus)
    {
        ProdStatusFactoryAttribute attr = new ProdStatusFactoryAttribute(prodStatus);
        ProdUpdStatusDecrease prodUpdStatusDecrease = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(ProdUpdStatusDecrease), attr) as ProdUpdStatusDecrease;

        if (classIdGet(prodUpdStatusDecrease) == classNum(ProdUpdStatusDecrease))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return prodUpdStatusDecrease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    static ProdUpdStatusDecrease newParmBuffer(ProdParmStatusDecrease prodParmStatusDecrease)
    {
        if (! prodParmStatusDecrease.ParmId)
        {
            prodParmStatusDecrease.skipTTSCheck(true);
            prodParmStatusDecrease.ParmBuffer::initParmId();
            prodParmStatusDecrease.write();
        }

        ProdUpdStatusDecrease prodUpdStatusDecrease = ProdUpdStatusDecrease::construct(prodParmStatusDecrease.prodTable().ProdStatus);
        prodUpdStatusDecrease.parmParmBuffer(prodParmStatusDecrease);

        return prodUpdStatusDecrease;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>