<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCreateEmplTaxListTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rPayCreateEmplTaxListTrans
{
    RPayTaxListTrans rPayTaxListTrans, tmpTaxListTrans;

    RPayTaxNDFLReportData   taxReportData;
    RecordInsertList        insertList;     //structure to store base records
    Map                     refNumbers,
                            rateInclState;  //states to define include whether or not for every tax status;

    container           branchesPack;       //packed set with branch codes
    RHRMEmplId          emplId;
    ReportPeriod_RU     payPeriod, reportPeriod;
    RPayNDFLSelectEmpl  selectEmpl;
    RPayNDFLType        reportType;
    RefRecId            taxListRef;

    Counter             number;
    boolean             calcEmptyRates, temporary;
    boolean             taxByBranch;
    boolean             calcTaxPayment;

    Map                 paymentsMap;
    #RPayNDFLReport
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTransAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container calcTransAmount(RPayRateCode _rateCode, BranchId_RU _branchId)
    {
        container       taxSum;
        container       ret;
        RPayAmount      deductedAmount, restOfPayment;
        container       mapKey;

        taxSum = RPayTaxReportValue::getTotalAmounts(emplId,
                                                     _rateCode,
                                                     _branchId,
                                                     payPeriod,
                                                     reportPeriod,
                                                     endmth(dateStartYr(payPeriod)),
                                                     false,
                                                     calcTaxPayment,
                                                     taxByBranch);
        ret += conPeek(taxSum, 1);
        ret += conPeek(taxSum, 3);
        ret += conPeek(taxSum, 4);

        if (calcTaxPayment)
        {
            mapKey = [emplId, _branchId];

            if (paymentsMap.exists(mapKey))
            {
                deductedAmount = conPeek(taxSum, 4);
                restOfPayment = paymentsMap.lookup(mapKey);
            }
            else
            {
                deductedAmount = conPeek(taxSum, 4);
                restOfPayment = conPeek(taxSum, 5);
            }

            ret += min(deductedAmount, restOfPayment); //transfered amount

            paymentsMap.insert(mapKey,
                (restOfPayment > deductedAmount) ?
                    restOfPayment - deductedAmount :
                    0);
        }
        else
        {
            ret += conPeek(taxSum, 4); //transfered amount
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void create()
    {
        ListEnumerator          listEnum;
        MapEnumerator           mapEnum;
        BranchId_RU             tmpBranchId;
        container               transAmount, constate;
        List                    taxList;
        container               taxListCon, rateInclStateCon;
        RPayRateCode            transRateCode;
        BranchId_RU             transBranchId;
        RPayTaxRateIncludeType  tmpIncludeType;
        int                     reportSign, tmpReportSign;
        boolean                 emplDebt;
        RPayEmplTaxStatus       taxStatus = taxReportData.taxEmplStatus();

        while (taxReportData.moveNext())
        {
            transRateCode  = taxReportData.taxEmplSum().TaxRateCode;
            if (taxByBranch)
            {
                transBranchId       = taxReportData.taxEmplSum().BranchId;
            }
            else
            {
                transBranchId = '';
            }
            transAmount    = this.calcTransAmount(transRateCode, transBranchId);

            constate       = taxReportData.reportType2Value(conPeek(transAmount, 2), conPeek(transAmount, 3));
            reportSign     = conPeek(constate, 1);

            if (rateInclState.exists(transBranchId))
            {
                [tmpIncludeType, tmpReportSign] = rateInclState.lookup(transBranchId);
            }
            else
            {
                tmpIncludeType = RPayTaxRateIncludeType::IncludePotential; //define initial state
                tmpReportSign  = 0;
            }

            tmpIncludeType = min(conPeek(constate, 2), tmpIncludeType); //define next state for current rate and perform transition

            if (tmpIncludeType == RPayTaxRateIncludeType::No)
            {
                rateInclState.insert(transBranchId, [tmpIncludeType, reportSign, new List(Types::Record).pack()]);
                continue;
            }

            rPayTaxListTrans.clear();
            rPayTaxListTrans.TableRecId     = taxListRef;
            rPayTaxListTrans.EmplId         = emplId;
            rPayTaxListTrans.TaxRateCode    = transRateCode;
            rPayTaxListTrans.BranchId       = transBranchId;
            rPayTaxListTrans.ReportSign     = reportSign;
            rPayTaxListTrans.TaxStatus      = taxStatus;

            this.updateTransAmount(transAmount);

            if (rPayTaxListTrans.isNotZeroTrans())
            {
                reportSign = max(tmpReportSign, reportSign); //sign with debt has more priority
                if (rateInclState.exists(transBranchId))//set new state
                {
                    rateInclStateCon = rateInclState.lookup(transBranchId);
                    taxList = List::create(conPeek(rateInclStateCon, 3));
                }
                else
                {
                    taxList = new List(Types::Record);
                }
                taxList.addEnd(rPayTaxListTrans);
                rateInclState.insert(transBranchId, [tmpIncludeType, reportSign, taxList.pack()]); //set new state
            }
        }

        //insert temporary records for every tax status
        mapEnum = rateInclState.getEnumerator();

        while (mapEnum.moveNext())
        {
            tmpBranchId                    = mapEnum.currentKey();
            [tmpIncludeType, tmpReportSign, taxListCon] = mapEnum.currentValue();

            if (tmpIncludeType != RPayTaxRateIncludeType::Include)
            {
                continue;
            }

            taxList = List::create(taxListCon);
            listEnum = taxList.getEnumerator();

            while (listEnum && listEnum.moveNext())
            {
                rPayTaxListTrans = listEnum.current();

                if (refNumbers.exists(rPayTaxListTrans.BranchId))
                {
                    number = refNumbers.lookup(rPayTaxListTrans.BranchId);
                }
                else
                {
                    ++number;
                    refNumbers.insert(rPayTaxListTrans.BranchId, number);
                }

                rPayTaxListTrans.ReferenceNumber = number;

                this.updateRestOfTransferedAmount(rPayTaxListTrans);

                if (tmpReportSign == #EmplDebtSign && tmpReportSign != rPayTaxListTrans.ReportSign)
                {
                    rPayTaxListTrans.ReportSign                 = tmpReportSign;
                    rPayTaxListTrans.IncomeSum                  = 0;
                    rPayTaxListTrans.TaxSum                     = 0;
                    rPayTaxListTrans.AddTaxSum                  = 0;
                    rPayTaxListTrans.BudgetTransferedTaxAmount  = 0;
                }

                emplDebt = emplDebt || tmpReportSign == #EmplDebtSign;

                this.writeTrans();
            }
        }

        if (!emplDebt && selectEmpl == RPayNDFLSelectEmpl::Debt)
        {
            warning(strFmt("@RUP3402", emplId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void init(ReportPeriod_RU     _payPeriod,
                        ReportPeriod_RU     _reportPeriod,
                        RPayNDFLSelectEmpl  _selectEmpl,
                        RPayNDFLType        _reportType,
                        RefRecId            _taxListRef,
                        boolean             _temporary,
                        boolean             _taxByBranch = false,
                        container           _branchesPack = conNull(),
                        boolean             _calcTaxPayment = false)
    {
        payPeriod       = _payPeriod;
        reportPeriod    = _reportPeriod;
        selectEmpl      = _selectEmpl;
        reportType      = _reportType;
        taxListRef      = _taxListRef;
        number          = 0;
        temporary       = _temporary;
        taxByBranch     = _taxByBranch;
        branchesPack    = _branchesPack;
        calcTaxPayment  = _calcTaxPayment;

        calcEmptyRates  = reportType == RPayNDFLType::EmplDebt   ||
                         (reportType == RPayNDFLType::All        &&
                          selectEmpl == RPayNDFLSelectEmpl::All) ||
                         (reportType == RPayNDFLType::TaxCode    &&
                          selectEmpl == RPayNDFLSelectEmpl::All);

        tmpTaxListTrans.setTmp();

        if ((_temporary  && _taxListRef) ||
            (!_temporary && !_taxListRef))
        {
            throw error(Error::missingParameter(null));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReverseIncomeAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initReverseIncomeAmount()
    {
        RPayAmount  baseAmount, taxAmount;
        ;

        taxAmount  = rPayTaxListTrans.AddTaxSum - rPayTaxListTrans.TaxSum; //overwrite with new amount as diferrence
        baseAmount = RPayTaxReportValue::calcReverseIncomeAmount(rPayTaxListTrans.TaxRateCode,
                                                                 payPeriod,
                                                                 taxAmount);

        rPayTaxListTrans.IncomeSum                 = baseAmount;
        rPayTaxListTrans.AddTaxSum                 = taxAmount;
        rPayTaxListTrans.TaxSum                    = 0;
        rPayTaxListTrans.BudgetTransferedTaxAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
        insertList = new RecordInsertList(tableNum(RPayTaxListTrans));
        paymentsMap = new Map(Types::Container, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmpl</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void setEmpl(RHRMEmplId _emplId)
    {
        emplId         = _emplId;
        refNumbers     = new Map(Types::String, Types::Integer);
        rateInclState  = new Map(Types::String, Types::Container);

        taxReportData = RPayTaxNDFLReportData::construct(emplId,
                                                         payPeriod,
                                                         reportPeriod,
                                                         selectEmpl,
                                                         reportType,
                                                         taxByBranch,
                                                         branchesPack);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFirstRefNumber</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void setFirstRefNumber(Integer _refNumber)
    {
        number = _refNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxListTrans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RPayTaxListTrans tmpTaxListTrans()
    {
        return tmpTaxListTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRestOfTransferedAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void updateRestOfTransferedAmount(RPayTaxListTrans _rPayTaxListTrans)
    {
        container mapKey;

        if (calcTaxPayment)
        {
            mapKey = [_rPayTaxListTrans.EmplId, _rPayTaxListTrans.BranchId];
            if (paymentsMap.exists(mapKey) &&
                paymentsMap.lookup(mapKey) != 0)
            {
                _rPayTaxListTrans.BudgetTransferedTaxAmount += paymentsMap.lookup(mapKey);
                paymentsMap.insert(mapKey, 0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void updateTransAmount(container _conTransAmount)
    {
        ;
        rPayTaxListTrans.AddTaxSum                  = conPeek(_conTransAmount, 2);
        rPayTaxListTrans.TaxSum                     = conPeek(_conTransAmount, 3);
        rPayTaxListTrans.BudgetTransferedTaxAmount  = conPeek(_conTransAmount, 4);

        if (rPayTaxListTrans.ReportSign == 2)
        {
            this.initReverseIncomeAmount();
        }
        else
        {
            rPayTaxListTrans.IncomeSum = conPeek(_conTransAmount, 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeListTrans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void writeListTrans()
    {
        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTrans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void writeTrans()
    {
        if (temporary)
        {
            if (!tmpTaxListTrans.isTmp())
            {
                tmpTaxListTrans.setTmp();
            }

            tmpTaxListTrans.data(rPayTaxListTrans);
            tmpTaxListTrans.insert();
        }
        else
        {
            insertList.add(rPayTaxListTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static RPayCreateEmplTaxListTrans construct(ReportPeriod_RU     _payPeriod,
                                                ReportPeriod_RU     _reportPeriod,
                                                RPayNDFLSelectEmpl  _selectEmpl,
                                                RPayNDFLType        _reportType,
                                                RefRecId            _taxListRef,
                                                boolean             _temporary,
                                                boolean             _taxByBranch = false,
                                                container           _branchesPack = conNull(),
                                                boolean             _calcTaxPayment = false)
    {
        RPayCreateEmplTaxListTrans  createTaxListTrans;

        createTaxListTrans = new RPayCreateEmplTaxListTrans();
        createTaxListTrans.init(
            _payPeriod,
            _reportPeriod,
            _selectEmpl,
            _reportType,
            _taxListRef,
            _temporary,
            _taxByBranch,
            _branchesPack,
            _calcTaxPayment);

        return createTaxListTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>