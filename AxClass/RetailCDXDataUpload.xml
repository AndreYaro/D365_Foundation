<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDataUpload</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail CDX data upload.
/// </summary>
abstract class RetailCDXDataUpload extends RunBaseBatch
{
    RefRecId dataGroupRecId;
    RetailConnJobId jobId;
    RetailCDXRowVersion lastSyncVer;
    RetailCDXScheduleRefRecId scheduleRecId;
    container targetDataStore;

    guid      correlationId;
    private RecId batchJobId;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        dataGroupRecId,
        jobId,
        lastSyncVer,
        scheduleRecId,
        targetDataStore,
        correlationId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        str caption = 'Task';

        if (this.scheduleRecId != 0)
        {
            RetailConnSchedule schedule;
            select firstOnly Name from schedule
                where schedule.RecId == this.scheduleRecId;
            str scheduleName = strFmt('Schedule:%1', schedule.Name);
            caption = System.String::Join(' :: ',caption, scheduleName);
        }

        if (this.dataGroupRecId != 0)
        {
            RetailCDXDataGroup dataGroup;
            select firstOnly Name from dataGroup
                where dataGroup.RecId == this.dataGroupRecId;

            str dataGroupName = strFmt('DataGroup:%1', dataGroup.Name);
            caption = System.String::Join(' :: ',caption, dataGroupName);
        }

        if (this.jobId != '')
        {
            str jobName = strFmt('JobId:%1', this.jobId);
            caption = System.String::Join(' :: ',caption, jobName);
        }

        return caption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDataGroupRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of data group rec id.
    /// </summary>
    /// <param name="_dataGroupRecID">
    /// The value of <c>RetailDataGroupRecId</c>; optional.
    /// </param>
    /// <returns>
    /// Data group recId.
    /// </returns>
    public RefRecId paramDataGroupRecID(RefRecId _dataGroupRecID)
    {
        dataGroupRecId = _dataGroupRecId;

        return dataGroupRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of job id.
    /// </summary>
    /// <param name="_jobId">
    /// The value of <c>RetailConnJobID</c>; optional.
    /// </param>
    /// <returns>
    /// Retail job id.
    /// </returns>
    public RetailConnJobId paramJobId(RetailConnJobId _jobId = jobId)
    {
        jobId = _jobId;

        return jobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramLastSyncVer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of last data sync version.
    /// </summary>
    /// <param name="_lastSyncVer">
    /// The value of <c>RetailCDXRowVersion</c>; optional.
    /// </param>
    /// <returns>
    /// Last data sync row version.
    /// </returns>
    public RetailCDXRowVersion paramLastSyncVer(RetailCDXRowVersion _lastSyncVer = lastSyncVer)
    {
        lastSyncVer = _lastSyncVer;
        return lastSyncVer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramScheduleRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of schedule rec id.
    /// </summary>
    /// <param name="_scheduleRecID">
    /// The value of <c>RetailCDXScheduleRefRecID</c>; optional.
    /// </param>
    /// <returns>
    /// Retail schedule rec id.
    /// </returns>
    public RetailCDXScheduleRefRecId paramScheduleRecID(RetailCDXScheduleRefRecId _scheduleRecID = scheduleRecID)
    {
        scheduleRecID = _scheduleRecID;

        return scheduleRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramTargetDataStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of target data store.
    /// </summary>
    /// <param name="_targetDataStore">
    /// The value of <c>targetDataStore</c>; optional.
    /// </param>
    /// <returns>
    /// Target data store.
    /// </returns>
    public container paramTargetDataStore(container _targetDataStore = targetDataStore)
    {
        targetDataStore = _targetDataStore;

        return targetDataStore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramCorrelationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the correlation Id..
    /// </summary>
    /// <param name="_correlationId">The correlation Id.</param>
    /// <returns>The correlation Id.</returns>
    internal guid paramCorrelationId(guid _correlationId = correlationId)
    {
        correlationId = _correlationId;

        return correlationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramBatchJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the Batch job Id..
    /// </summary>
    /// <param name="_batchJobId">The batch job Id.</param>
    /// <returns>The Batch job Id.</returns>
    internal RecId paramBatchJobId(RecId _batchJobId = batchJobId)
    {
        batchJobId = _batchJobId;

        return batchJobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    abstract public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>