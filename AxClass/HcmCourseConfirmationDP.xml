<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmCourseConfirmationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>HcmCourseConfirmationDP</c> class is the report data provider class for the
///    <c>HcmCourseConfirmation</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(HcmCourseConfirmation)),
    SRSReportParameterAttribute(classStr(HcmCourseConfirmationContract))
]
public class  HcmCourseConfirmationDP extends SRSReportDataProviderBase
{
    HRMCourseTable              hrmCourseTable;
    HRMCourseAttendee           hrmCourseAttendee;
    HRMCourseAttendeeLine       hrmCourseAttendeeLine;
    HcmCourseConfirmationTmp    hcmCourseConfirmationTmp;
    HRMCourseConfirmation       hrmCourseConfirmation;
    FormLetterRemarks           confirmFormLetterRemarks;
    HRMCourseLocation           hrmCourseLocation;
    HRMCourseRoom               hrmCourseRoom;
    CompanyInfo                 companyInfo;
    TempStr                     tempStrDate, tempStrTime;
    str                         startDateAndTime;
    str                         endDateAndTime;
    LabelString                 labelString;
    Label                       label;
    LabelString                 bodyText;
    LabelString                 labelText;

    #define.EmptyString('')
    #define.Space(' ')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>courseAttendeeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the customer.
    /// </summary>
    /// <returns>
    /// The name of the customer.
    /// </returns>
    private DirPartyName courseAttendeeName()
    {
        if (this.custAccountName() == #EmptyString)
        {
            return DirPartyTable::findRec(hrmCourseAttendee.Person).Name;
        }
        else
        {
            return #EmptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the customer account.
    /// </summary>
    /// <returns>
    /// Gets the name of the customer account.
    /// </returns>
    private Name custAccountName()
    {
        ContactPerson   contactPerson;

        if (ContactPerson::findByPartyRecId(hrmCourseAttendee.Person).RecId)
        {
            contactPerson = ContactPerson::findByPartyRecId(hrmCourseAttendee.Person);

            if (contactPerson)
            {
                return contactPerson.partyName();
            }
        }

        return #EmptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHcmCourseConfirmationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the records from temporary <c>HcmCourseConfirmationTmp</c> table.
    /// </summary>
    /// <returns>
    /// The records that are in the temporary <c>HcmCourseConfirmationTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute('HcmCourseConfirmationTmp')
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HcmCourseConfirmationTmp getHcmCourseConfirmationTmp()
    {
        select  hcmCourseConfirmationTmp;
        return  hcmCourseConfirmationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the temporary <c>HcmCourseConfirmationTmp</c> table.
    /// </summary>
    private void insertTmpTable()
    {
        LogisticsPostalAddress  postalAddress;

        hcmCourseConfirmationTmp.CustAccountName                    = this.custAccountName();
        hcmCourseConfirmationTmp.TrackDescription                   = hrmCourseAttendeeLine.trackDescription();
        hcmCourseConfirmationTmp.CourseLocationDescription          = hrmCourseLocation.Description;
        hcmCourseConfirmationTmp.SessionDescription                 = hrmCourseAttendeeLine.sessionDescription();
        hcmCourseConfirmationTmp.CourseRoomDescription              = hrmCourseRoom.Description;
        hcmCourseConfirmationTmp.Name                               = this.courseAttendeeName();

        hcmCourseConfirmationTmp.Address                            = DirParty::primaryPostalAddress(hrmCourseAttendee.Person).Address;
        hcmCourseConfirmationTmp.CompanyName                        = CompanyInfo::find().name();
        hcmCourseConfirmationTmp.CompanyAddress                     = companyInfo.postalAddress().Address;
        hcmCourseConfirmationTmp.HrmCourseSessionTrackId            = hrmCourseAttendeeLine.HrmCourseSessionTrackId;
        hcmCourseConfirmationTmp.Description                        = hrmCourseTable.Description;
        hcmCourseConfirmationTmp.HrmCourseSessionId                 = hrmCourseAttendeeLine.HrmCourseSessionId;
        hcmCourseConfirmationTmp.AgendaDate                         = hrmCourseAttendeeLine.agendaDate();
        hcmCourseConfirmationTmp.AgendaTime                         = hrmCourseAttendeeLine.agendaTime();
        hcmCourseConfirmationTmp.LabelString                        = bodyText;
        hcmCourseConfirmationTmp.StartDateTime                      = startDateAndTime;
        hcmCourseConfirmationTmp.LabelText                          = labelText;
        hcmCourseConfirmationTmp.EndDateTime                        = endDateAndTime;
        hcmCourseConfirmationTmp.FormLetterRemarks                  = confirmFormLetterRemarks.Txt;

        postalAddress = LogisticsPostalAddress::findByLocation(hrmCourseLocation.Location);
        if (postalAddress.RecId)
        {
            hcmCourseConfirmationTmp.CourseLocationCountyName           = postalAddress.County;

            var addressStringBuilderParameters = LogisticsPostalAddressStringBuilderParameters::constructFromLogisticsPostalAddress(postalAddress);
            hcmCourseConfirmationTmp.CourseLocationAddress              = LogisticsPostalAddressStringBuilder::buildAddressStringFromParameters(addressStringBuilderParameters);

            hcmCourseConfirmationTmp.CourseLocationStateName            = postalAddress.Street;
            hcmCourseConfirmationTmp.CourseLocationCountryRegionName    = LogisticsAddressCountryRegionTranslation::find(postalAddress.CountryRegionId).ShortName;
        }
        hcmCourseConfirmationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// at runtime. The method computes data and populates the data tables that will be returned to .
    /// </remarks>
    public void processReport()
    {
        QueryRun        qr;
        LanguageId      languageId;
        ContactPerson   contactPerson;
        boolean         isSetup;

        companyInfo = CompanyInfo::find();

        qr = new QueryRun(this.parmQuery());

        while (qr.next())
        {
            hrmCourseTable      = qr.get(tableNum(HRMCourseTable));
            hrmCourseAttendee   = qr.get(tableNum(HRMCourseAttendee));

            if (SysReportRun::changed(qr,tableNum(HRMCourseTable)))
            {
                hrmCourseRoom     = HRMCourseRoom::find(hrmCourseTable.HrmCourseRoomId);
                hrmCourseLocation = HRMCourseLocation::find(hrmCourseRoom.HrmCourseLocationId);
            }

            if (SysReportRun::changed(qr,tableNum(HRMCourseAttendee)))
            {
                if (HcmWorker::findByPerson(hrmCourseAttendee.Person).RecId || HcmApplicant::findByPerson(hrmCourseAttendee.Person).RecId)
                {
                    languageId = CompanyInfo::languageId();
                }
                else
                {
                    if (ContactPerson::findByPartyRecId(hrmCourseAttendee.Person).RecId)
                    {
                        contactPerson = ContactPerson::findByPartyRecId(hrmCourseAttendee.Person);

                        languageId = contactPerson.ecpGetLanguage();

                        if (! languageId)
                        {
                            languageId = CompanyInfo::languageId();
                        }
                    }
                }

                confirmFormLetterRemarks = FormLetterRemarks::find(languageId, FormTextType::HRMCourseConfirmation);

                if (! confirmFormLetterRemarks)
                {
                    confirmFormLetterRemarks = FormLetterRemarks::find(CompanyInfo::languageId(), FormTextType::HRMCourseConfirmation);
                }

                this.setText(languageId);

                if (hrmCourseTable.Setup == HRMCourseSetup::AgendaSession)
                {
                    while select hrmCourseAttendeeLine
                        where hrmCourseAttendeeLine.Person == hrmCourseAttendee.Person
                    {
                        this.insertTmpTable();
                        isSetup  = true;
                    }
                }

                languageId = #EmptyString;
            }

            if (!isSetup)
            {
                this.insertTmpTable();
            }

            isSetup = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets text field values.
    /// </summary>
    /// <param name="languageId">
    /// A parameter language ID.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setText(LanguageId languageId)
    {
        label = label?new Label(languageId):new Label();

        labelString = label.extractString("@SYS34401");
        bodyText    = labelString;
        labelString = label.extractString("@SYS34402");
        labelText   = strFmt(labelString, hrmCourseTable.Description);
        labelText   = labelText + #Space + label.extractString("@SYS34403");
        labelString = label.extractString("@SYS34404");

        hrmCourseTable.StartDateTime = DateTimeUtil::applyTimeZoneOffset(hrmCourseTable.StartDateTime,DateTimeUtil::getCompanyTimeZone());
        hrmCourseTable.EndDateTime   = DateTimeUtil::applyTimeZoneOffset(hrmCourseTable.EndDateTime,DateTimeUtil::getCompanyTimeZone());

        tempStrDate      = date2StrUsr(DateTimeUtil::date(hrmCourseTable.StartDateTime), DateFlags::FormatAll);
        tempStrTime      = time2str(DateTimeUtil::time(hrmCourseTable.StartDateTime), TimeSeparator::Colon, TimeFormat::AMPM);
        startDateAndTime = strFmt(labelString, tempStrDate, tempStrTime);

        tempStrDate     = date2StrUsr(DateTimeUtil::date(hrmCourseTable.EndDateTime), DateFlags::FormatAll);
        tempStrTime     = time2str(DateTimeUtil::time(hrmCourseTable.EndDateTime),  TimeSeparator::Colon, TimeFormat::AMPM);
        endDateAndTime  = strFmt(labelString, tempStrDate, tempStrTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>