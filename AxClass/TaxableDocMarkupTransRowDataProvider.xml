<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocMarkupTransRowDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxableDocMarkupTransRowDataProvider extends TaxableDocumentRowDataProviderLine
{
    MarkupTrans                 markupTrans;
    SalesPurchJournalLine       sourceTransLine;
    TaxModelTaxable             taxModelTaxableOfSourceTransLine;

    boolean                     isMarkupTransRebindingNeeded;

    #define.RootTableIndex(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillInFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill in data to taxable document row instance.
    /// </summary>
    /// <param name="_lineObj">
    /// Taxable document row instance.
    /// </param>
    public void fillInFields(TaxableDocumentLineObject _lineObj)
    {
        AmountCur markupAmountInMarkupCurrency      = taxModelTaxable.getLineAmount();
        AmountCur markupAmountInTransactionCurrency = CurrencyExchangeHelper::curAmount2CurAmount(
        markupAmountInMarkupCurrency, markupTrans.CurrencyCode, taxModelTaxableOfSourceTransLine.getTransactionCurrency(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false);

        super(_lineObj);

        this.addFieldValue(_lineObj, TaxEngineModelFields::MarkupTransChargeCode, markupTrans.markupCode);

        this.addFieldValue(_lineObj, TaxEngineModelFields::ProductType, EcoResProductType::Service);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValidFields</Name>
				<Source><![CDATA[
    protected void initValidFields()
    {
        super();

        validFields.add(TaxEngineModelFields::MarkupTransChargeCode, Types::String);
        validFields.add(TaxEngineModelFields::ProductType, Types::Enum, enumNum(EcoResProductType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineType</Name>
				<Source><![CDATA[
    protected TaxableDocumentLineType getLineType()
    {
        return TaxableDocumentLineType::MiscChargeLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTransLine</Name>
				<Source><![CDATA[
    private void getSourceTransLine()
    {
        switch (relatedRecordsQueryRun.getNo(#RootTableIndex).TableId)
        {
            // Get source transaction line of MarkupTrans for sales invoices
        case tableNum(SalesParmTable):
            isMarkupTransRebindingNeeded    = true;
            sourceTransLine                 = relatedRecordsQueryRun.get(tableNum(SalesParmLine));
            break;

            // Get source transaction line of MarkupTrans for sales quotation sending
        case tableNum(SalesQuotationParmTable):
            isMarkupTransRebindingNeeded    = true;
            sourceTransLine                 = relatedRecordsQueryRun.get(tableNum(SalesQuotationParmLine));
            break;

            // Get source transaction line of MarkupTrans for project sales invoices sending
        case tableNum(TaxEngineProjItemSOTransHeader):
            isMarkupTransRebindingNeeded    = true;
            sourceTransLine                 = relatedRecordsQueryRun.get(tableNum(ProjProposalItem));
            break;

        default :
            // Never calculate and post tax for header level charge
            sourceTransLine = SalesPurchJournalLine::findRecId(markupTrans.TransTableId, markupTrans.TransRecId);
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMainTable</Name>
				<Source><![CDATA[
    protected void initMainTable()
    {
        markupTrans = mainRecord as MarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedTables</Name>
				<Source><![CDATA[
    protected void initRelatedTables()
    {
        this.getSourceTransLine();

        if (isMarkupTransRebindingNeeded)
        {
            markupTrans.TransTableId    = sourceTransLine.SourceTableId;
            markupTrans.TransRecId      = sourceTransLine.SourceRecId;
        }

        taxModelTaxableOfSourceTransLine = TaxModelDocLineFactory::newTaxModelDocLine(sourceTransLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>