<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventVoucherDetailsDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventVoucherDetails_CN</c> class provides data for the <c>InventVoucherDetails_CN</c> SSRSS.
/// </summary>
/// <remarks>
/// This is the Report Data Provider class for the <c>InventVoucherDetails_CN</c> SSRS report.
/// </remarks>
[
    SRSReportParameterAttribute(classstr(InventVoucherDetailsContract_CN))
]
class InventVoucherDetailsDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    InventLocationId    warehouse;
    ItemId              itemId;
    TransDate           fromDate;
    ToDate              toDate;
    boolean             isStandardCost;

    InventVoucherDetailsTmp_CN      inventVoucherDetailsTmp;
    InventVoucherDetailsContract_CN contract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getinventVoucherDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>InventVoucherDetailsTmp_CN</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>InventVoucherDetailsTmp_CN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventVoucherDetailsTmp_CN))
    ]
    public InventVoucherDetailsTmp_CN getinventVoucherDetailsTmp()
    {
        select inventVoucherDetailsTmp;
        return inventVoucherDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerAccountByAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger account number by account type
    /// </summary>
    /// <param name="_accountType">
    /// Invent account type that is used for getting the ledger account number.
    /// </param>
    /// <param name="_itemId">
    /// Item Id that is used for getting Item group id.
    /// </param>
    /// <returns>
    /// Ledger account.
    /// </returns>
    private InventLedgerAccountId getLedgerAccountByAccountType(InventAccountType _accountType, ItemId _itemId)
    {
        InventPosting                           inventPostingLocal;
        InventLedgerAccountId                   ledgerAccountLocal;

        InventTable inventTableLocal = InventTable::find(_itemId);
        InventModelGroup inventModelGroupLocal = inventTableLocal.modelGroup();
        if (inventModelGroupLocal.StandardCost == NoYes::Yes || inventModelGroupLocal.InventModel == InventModel::StdCost)
        {
            InventItemGroup inventItemGroupLocal = inventTableLocal.itemGroup();
            select firstOnly LedgerDimension from inventPostingLocal
                where inventPostingLocal.ItemCode           == InventPostingItemCode::GroupId
                    && inventPostingLocal.InventAccountType == _accountType
                    && inventPostingLocal.ItemRelation      == inventItemGroupLocal.ItemGroupId;

            ledgerAccountLocal = inventPostingLocal.ledgerAccountName();
            isStandardCost = true;
        }

        return ledgerAccountLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventVoucherDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes query and gets datas to initialize InventVoucherDetailsTmp_CN table.
    /// </summary>
    private void initInventVoucherDetailsTmp()
    {
        InventTrans                             inventTransTmp;
        InventTrans                             inventTransBalance;
        InventTrans                             inventTransVariance;
        InventDim                               inventDimTmp;
        InventDim                               inventDimBalance;
        InventSettlement                        inventSettlementBalance;
        InventSettlement                        inventSettlementVariance;
        GeneraljournalEntry                     generalJournalEntryLocal;
        GeneraljournalEntry_W                   generalJournalEntryLocalW;
        GeneraljournalAccountEntry              generaljournalAccountEntryLocal;
        SubledgerVoucherGeneralJournalEntry     subledgerVoucherGeneralJournalEntryLocal;

        Qty                                     itemBalanceQty = 0;
        Amount                                  itemBalanceAmount = 0;
        Amount                                  itemBalanceVariance = 0;
        ItemId                                  itemIdBalance;

        Query query = new Query(queryStr(InventVoucherDetails_CN));
        query = InventVoucherDetailsDP_CN::initQueryByDataContract(query, contract);

        QueryRun queryRun = new QueryRun(query);
        isStandardCost = false;
        while (queryRun.next())
        {
            InventTrans       InventTransLocal       = queryRun.get(tableNum(InventTrans));
            InventDim         inventDimLocal         = queryRun.get(tableNum(InventDim));
            InventTransOrigin inventTransOriginLocal = queryRun.get(tableNum(inventTransOrigin));

            inventVoucherDetailsTmp.clear();
            inventVoucherDetailsTmp.FromDate = fromDate;
            inventVoucherDetailsTmp.ToDate   = toDate;
            // InventTrans's quantity never can be zero.
            CostPrice itemCostPrice = inventTransLocal.CostAmountPosted / inventTransLocal.Qty;

            // Gets Chiness voucher
            select firstOnly RecId from generalJournalEntryLocal
                where generalJournalEntryLocal.Ledger == Ledger::current()
            outer join Voucher_CN from generalJournalEntryLocalW
                where generalJournalEntryLocalW.GeneralJournalEntry == generalJournalEntryLocal.RecId
            outer join Text from generaljournalAccountEntryLocal
                where generaljournalAccountEntryLocal.GeneralJournalEntry == generalJournalEntryLocal.RecId
            exists join subledgerVoucherGeneralJournalEntryLocal
                where subledgerVoucherGeneralJournalEntryLocal.GeneralJournalEntry == generalJournalEntryLocal.RecId
                    && subledgerVoucherGeneralJournalEntryLocal.Voucher == inventTransLocal.Voucher
                    && subledgerVoucherGeneralJournalEntryLocal.VoucherDataAreaId == inventTransLocal.dataAreaId
                    && subledgerVoucherGeneralJournalEntryLocal.AccountingDate == inventTransLocal.DateFinancial;

            //If generalJournalEntryLocal.Voucher_CN is not empty, it will be printed in report, else inventTransLocal.Voucher will be printed.
            inventVoucherDetailsTmp.Voucher = generalJournalEntryLocalW.Voucher_CN ? generalJournalEntryLocalW.Voucher_CN : inventTransLocal.Voucher;

            inventVoucherDetailsTmp.VocucherDescription = generaljournalAccountEntryLocal.Text;
            inventVoucherDetailsTmp.InventTransType     = inventTransOriginLocal.ReferenceCategory;
            inventVoucherDetailsTmp.VoucherDate         = inventTransLocal.DateFinancial;
            InventDirection directionLocal              = inventTransLocal.direction();

            // Item information
            InventTable inventTableLocal = InventTable::find(inventTransLocal.ItemId);
            inventVoucherDetailsTmp.ItemId          = inventTransLocal.ItemId;
            inventVoucherDetailsTmp.ItemName        = inventTableLocal.itemName();
            inventVoucherDetailsTmp.ItemGroupName   = inventTableLocal.itemGroup().Name;

            // Price, quantity, amount information
            if (inventTransLocal.ItemId != itemIdBalance)
            {
                itemIdBalance = inventTransLocal.ItemId;
                itemBalanceQty = 0;
                //Calculates the trans information of balance
                select sum(Qty), sum(CostAmountPosted) from inventTransTmp
                    group by ItemId
                    where inventTransTmp.ItemId         == inventTransLocal.ItemId
                        && InventTransTmp.DateFinancial >= fromDate
                        && inventTransTmp.DateFinancial <= toDate
                        exists join InventDimTmp
                        where inventDimTmp.inventDimId          == inventTransTmp.inventDimId
                            && InventDimTmp.InventLocationId    == inventDimLocal.InventLocationId;

                //Calculates the settlement information of balance
                select sum(CostAmountAdjustment), ItemId from inventSettlementBalance
                    group by ItemId
                    where inventSettlementBalance.Cancelled             == NoYes::No
                        && inventSettlementBalance.Posted               == NoYes::Yes
                        && inventSettlementBalance.OperationsPosting    == LedgerPostingType::InventStdCostRoundingVariance
                        && inventSettlementBalance.TransDate            == toDate
                        exists join inventTransBalance
                        where inventSettlementBalance.ItemId        == inventTransBalance.ItemId
                            && inventSettlementBalance.TransRecId   == inventTransBalance.RecId
                            && inventSettlementBalance.Voucher      == inventTransBalance.Voucher
                            && inventTransBalance.ItemId            == inventTransLocal.ItemId
                            && inventTransBalance.DateFinancial     >= fromDate
                            && inventTransBalance.DateFinancial     <= toDate
                            exists join inventDimBalance
                            where inventDimBalance.inventDimId       == inventTransBalance.inventDimId
                                && inventDimBalance.InventLocationId == warehouse;

                //When there are both trans information and settlement information for the same item,
                //sum the trans and settlement information for balance information
                if (inventTransTmp.ItemId == inventSettlementBalance.ItemId)
                {
                    itemBalanceQty      = inventTransTmp.Qty;
                    itemBalanceAmount   = inventTransTmp.CostAmountPosted + inventSettlementBalance.CostAmountAdjustment;
                    itemBalanceVariance = inventSettlementBalance.CostAmountAdjustment;
                }
                else
                {
                    itemBalanceQty      = 0;
                    itemBalanceAmount   = 0;
                    itemBalanceVariance = 0;
                }

                // Ledger account information
                inventVoucherDetailsTmp.LedgerAccount   = this.getLedgerAccountByAccountType(InventAccountType::InventReceipt, InventTransLocal.ItemId);
                inventVoucherDetailsTmp.VarianceAccount = this.getLedgerAccountByAccountType(InventAccountType::InventStdCostRoundingVariance, inventTransLocal.ItemId);
            }

            // Receipt and issue information
            if (directionLocal == InventDirection::Receipt)
            {
                // If inventTrans direction is receipt, setting trans information for the receipt information.
                inventVoucherDetailsTmp.ReceiptQty       = inventTransLocal.Qty;
                inventVoucherDetailsTmp.ReceiptAmount    = inventTransLocal.CostAmountPosted;
                // InventTrans's quantity never can be zero.
                inventVoucherDetailsTmp.ReceiptCostPrice = inventVoucherDetailsTmp.ReceiptAmount / inventVoucherDetailsTmp.ReceiptQty;
            }
            else if (directionLocal == InventDirection::Issue)
            {
                // If inventTrans direction is receipt, setting trans information for the receipt information.
                inventVoucherDetailsTmp.IssueQty        = -inventTransLocal.Qty;
                inventVoucherDetailsTmp.IssueAmount     = -InventTransLocal.CostAmountPosted;
                // InventTrans's quantity never can be zero.
                inventVoucherDetailsTmp.IssueCostPrice  = inventVoucherDetailsTmp.IssueAmount / inventVoucherDetailsTmp.IssueQty;
            }

            // Variance information
            select sum(CostAmountAdjustment) from inventSettlementVariance
                where inventSettlementVariance.Cancelled             == NoYes::No
                    && inventSettlementVariance.Posted               == NoYes::Yes
                    && inventSettlementVariance.TransDate            <= toDate
                    exists join inventTransVariance
                    where inventSettlementVariance.ItemId        == inventTransVariance.ItemId
                        && inventSettlementVariance.TransRecId   == inventTransVariance.RecId
                        && inventSettlementVariance.Voucher      == inventTransVariance.Voucher
                        && inventSettlementVariance.SettleModel == InventSettleModel::Adjustment
                        && inventTransVariance.RecId             == inventTransLocal.RecId;

            itemBalanceQty      += inventTransLocal.Qty;
            itemBalanceAmount   += inventTransLocal.CostAmountPosted;
            // InventTrans's quantity never can be zero.
            inventVoucherDetailsTmp.CostPrice = InventTransLocal.CostAmountPosted / inventTransLocal.Qty;
            inventVoucherDetailsTmp.BalanceQty       = itemBalanceQty;
            inventVoucherDetailsTmp.BalanceAmount    = itemBalanceAmount;

            if (inventVoucherDetailsTmp.BalanceQty)
            {
                inventVoucherDetailsTmp.BalanceCostPrice = inventVoucherDetailsTmp.BalanceAmount / inventVoucherDetailsTmp.BalanceQty;
            }
            else
            {
                inventVoucherDetailsTmp.BalanceCostPrice = 0;
            }

            //Calculates debit variance and credit variance when current item's invent model is standard cost
            if (isStandardCost)
            {
                if (inventSettlementVariance.CostAmountAdjustment < 0)
                {
                    if (directionLocal == InventDirection::Receipt)
                    {
                        //If sum of current item's settlement cost amount asjustment is less than zero and current inventTrans direction is receipt,
                        //debit variance equals absolute value of sum of the current item's settlement cost amount asjustment
                        inventVoucherDetailsTmp.DebitVariance = abs(inventSettlementVariance.CostAmountAdjustment);
                    }
                    else if (directionLocal == InventDirection::Issue)
                    {
                        //If sum of current item's settlement cost amount asjustment is less than zero and current inventTrans direction is issue,
                        //credit variance equals absolute value of sum of the current item's settlement cost amount asjustment
                        inventVoucherDetailsTmp.CreditVariance = abs(inventSettlementVariance.CostAmountAdjustment);
                    }
                }
                else if (inventSettlementVariance.CostAmountAdjustment > 0)
                {
                    if (directionLocal == InventDirection::Receipt)
                    {
                        //If sum of current item's settlement cost amount asjustment is greater than zero and current inventTrans direction is receipt,
                        //debit variance equals sum of the current item's settlement cost amount asjustment
                        inventVoucherDetailsTmp.CreditVariance = inventSettlementVariance.CostAmountAdjustment;
                    }
                    else if (directionLocal == InventDirection::Issue)
                    {
                        //If sum of current item's settlement cost amount asjustment is greater than zero and current inventTrans direction is issue,
                        //debit variance equals sum of the current item's settlement cost amount asjustment
                        inventVoucherDetailsTmp.DebitVariance = inventSettlementVariance.CostAmountAdjustment;
                    }
                }
            }

            itemBalanceVariance += inventSettlementVariance.CostAmountAdjustment;
            inventVoucherDetailsTmp.EndingVariance = -itemBalanceVariance;

            inventVoucherDetailsTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services (SSRS) report.
    /// </summary>
    /// <remarks>
    /// This method will be called by SSRS at run time.The method will compute the data and populate the
    /// data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        // Gets parameters from Contract class
        contract = this.parmDataContract() as InventVoucherDetailsContract_CN;

        warehouse  = contract.parmWarehouse();
        itemId     = contract.parmItemId();

        fromDate  = contract.parmPeriodContract().parmFromDate();
        if (!fromDate)
        {
            fromDate = InventSRSHelper_CN::getCurrentPeriodDate();
        }

        toDate    = contract.parmPeriodContract().parmToDate();
        if (!toDate)
        {
            toDate = InventSRSHelper_CN::getCurrentPeriodDate(false);
        }

        this.initInventVoucherDetailsTmp();

        select firstOnly recId from inventVoucherDetailsTmp;
        if (!inventVoucherDetailsTmp.RecId)
        {
            inventVoucherDetailsTmp.clear();
            inventVoucherDetailsTmp.FromDate = fromDate;
            inventVoucherDetailsTmp.ToDate   = toDate;
            inventVoucherDetailsTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryByDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize query by data contract.
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    /// <param name="_contract">
    /// The invent voucher details contract.
    /// </param>
    /// <returns>
    /// The query.
    /// </returns>
    public static Query initQueryByDataContract(Query _query, InventVoucherDetailsContract_CN _contract)
    {
        ItemId itemId = _contract.parmItemId();
        InventLocationId warehouse = _contract.parmWarehouse();
        FromDate fromDate = _contract.parmPeriodContract().parmFromDate();
        if (!fromDate)
        {
            fromDate = InventSRSHelper_CN::getCurrentPeriodDate();
        }

        ToDate toDate = _contract.parmPeriodContract().parmToDate();
        if (!toDate)
        {
            toDate = InventSRSHelper_CN::getCurrentPeriodDate(false);
        }

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(InventTrans)),
            fieldNum(InventTrans, ItemId)).value(itemId);

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(InventTrans)),
            fieldNum(InventTrans, DateFinancial)).value(queryRange(fromDate, toDate));

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(InventDim)),
            fieldNum(InventDim, InventLocationId)).value(warehouse);

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
