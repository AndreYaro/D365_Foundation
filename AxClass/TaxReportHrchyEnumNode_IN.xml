<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHrchyEnumNode_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the hierarchy enum node tree for tax report.
/// </summary>
class TaxReportHrchyEnumNode_IN extends TaxReportHrchyNode_IN
{
    EnumId      refEnumId;
    int         refEnumValue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodeTypeLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enum label of the node.
    /// </summary>
    /// <returns>
    /// The label for node type.
    /// </returns>
    public str getNodeTypeLabel()
    {
        return new DictEnum(refEnumId).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();

        refEnumValue = -1;
        this.parmNodeType(TaxReportHierarchyNodeType_IN::EnumNode);
        this.parmClassId(classNum(TaxReportHrchyEnumNode_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefEnumId</Name>
				<Source><![CDATA[
        public EnumId parmRefEnumId(EnumId _refEnumId = 0)
    {
        if (refEnumId == 0 && _refEnumId != 0)
        {
            refEnumId = _refEnumId;
        }
        return refEnumId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefEnumValue</Name>
				<Source><![CDATA[
        public int parmRefEnumValue(int _refEnumValue = -1)
    {
        DictEnum        enum;

        if (refEnumValue == -1 && _refEnumValue != -1)
        {
            refEnumValue = _refEnumValue;
        }

        if (_refEnumValue != -1)
        {
            //Need to set DisplayValue and fake comboDisplayValue
            enum = new DictEnum(refEnumId);
            this.parmDisplayValue(enum.value2Name(refEnumValue));
            this.parmComboDisplayValue(int2str(refEnumValue));
        }

        return refEnumValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persist</Name>
				<Source><![CDATA[
        public void persist()
    {
        TaxReportHierarchyNode_IN  tableNode;

        super();

        tableNode = TaxReportHierarchyNode_IN::find(this.parmRecId(), true);
        if (tableNode.RecId)
        {
            ttsBegin;

            tableNode.RefEnumId = refEnumId;
            tableNode.RefEnumValue = refEnumValue;
            tableNode.update();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static TaxReportHrchyEnumNode_IN construct()
    {
        TaxReportHrchyEnumNode_IN enumNode = new TaxReportHrchyEnumNode_IN();
        return enumNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromBaseNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new <c>TaxReportHrchyEnumNode_IN</c> from the <c>TaxReportHrchyNode_IN</c> instance.
    /// </summary>
    /// <param name="_baseNode">
    /// The <c>TaxReportHrchyNode_IN</c> instance.
    /// </param>
    /// <returns>
    /// The new <c>TaxReportHrchyEnumNode_IN</c>.
    /// </returns>
    public static TaxReportHrchyEnumNode_IN constructFromBaseNode(TaxReportHrchyNode_IN _baseNode)
    {
        TaxReportHrchyEnumNode_IN enumNode = new TaxReportHrchyEnumNode_IN();
        enumNode.parmNodeId(_baseNode.parmNodeId());
        enumNode.parmCanMatch(_baseNode.parmCanMatch());
        enumNode.parmCanSettle(_baseNode.parmCanSettle());
        enumNode.parmCanPost(_baseNode.parmCanPost());
        enumNode.parmNodeType(_baseNode.parmNodeType());
        enumNode.parmParentId(_baseNode.parmParentId());
        enumNode.parmClassId(_baseNode.parmClassId());
        enumNode.parmDisplayValue(_baseNode.parmDisplayValue());
        enumNode.parmComboDisplayValue(_baseNode.parmComboDisplayValue());
        enumNode.parmComboDisplayValueStr(_baseNode.parmComboDisplayValueStr());
        enumNode.parmLevel(_baseNode.parmLevel());
        enumNode.parmLeftId(_baseNode.parmLeftId());
        enumNode.parmRightId(_baseNode.parmRightId());
        enumNode.parmTaxReportHierarchyVersion(_baseNode.parmTaxReportHierarchyVersion());
        enumNode.parmRecId(_baseNode.parmRecId());

        return enumNode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>