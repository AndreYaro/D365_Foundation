<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgStampJournalTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgStampJournalTransfer</c> class transfers the registrations for workers.
/// </summary>
public final class JmgStampJournalTransfer
{
    JmgStampJournalTable    jmgStampJournalTable;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmJmgStampJournalTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final JmgStampJournalTable parmJmgStampJournalTable(JmgStampJournalTable _jmgStampJournalTable = jmgStampJournalTable)
    {
        JmgStampJournalTable = _jmgStampJournalTable;
        return JmgStampJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>JmgStampJournalTransfer</c> class instance.
    /// </summary>
    /// <returns>
    /// The <c>JmgStampJournalTransfer</c> class instance.
    /// </returns>
    [Hookable(false)]
    public static JmgStampJournalTransfer construct()
    {
        return new JmgStampJournalTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>JmgStampJournalTransfer</c> class.
    /// </summary>
    /// <param name = "_jmgStampJournalTable">
    /// A <c>JmgStampJournalTable</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>JmgStampJournalTransfer</c> class instance.
    /// </returns>
    [Hookable(false)]
    public static JmgStampJournalTransfer newFromJournalTable(JmgStampJournalTable _jmgStampJournalTable)
    {
        JmgStampJournalTransfer jmgStampJournal = JmgStampJournalTransfer::construct();

        jmgStampJournal.parmJmgStampJournalTable(_jmgStampJournalTable);
        return jmgStampJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Approves the registrations that are associated with the <c>JmgStampJournalTable</c> record.
    /// </summary>
    private void approve()
    {
        JmgStampJournalApprove approve = JmgStampJournalApprove::newFromJournalTable(jmgStampJournalTable);
        approve.initializeFromTransfer(this);
        approve.approve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>Query</c> object for selecting <c>JmgStampJournalTrans</c> records.
    /// </summary>
    /// <returns>
    /// An <c>Query</c> object.
    /// </returns>
    protected Query journalTransQuery(boolean _forupdate = false)
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSourceJournalTrans = query.addDataSource(tableNum(JmgStampJournalTrans));

        queryBuildDataSourceJournalTrans.update(_forupdate);
        queryBuildDataSourceJournalTrans.addRange(fieldNum(JmgStampJournalTrans, Worker)).value(queryValue(jmgStampJournalTable.Worker));
        queryBuildDataSourceJournalTrans.addRange(fieldNum(JmgStampJournalTrans, ProfileDate)).value(queryValue(jmgStampJournalTable.ProfileDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to journal has been approved.
    /// </summary>
    /// <returns>
    /// true if journal has been approved; otherwise false.
    /// </returns>
    protected boolean isApproved()
    {
        return jmgStampJournalTable.Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertTransferEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to insert transfer events.
    /// </summary>
    /// <returns>
    /// true if needs to insert transfer events; otherwise false.
    /// </returns>    
    [Replaceable]
    protected boolean mustInsertTransferEvents()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertJmgStampTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to insert <c>JmgStampTrans</c>.
    /// </summary>
    /// <returns>
    /// true if needs to insert <c>JmgStampTrans</c>; otherwise false.
    /// </returns>
    [Replaceable]
    protected boolean mustInsertJmgStampTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetToTransferred</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to set the journal to transferred.
    /// </summary>
    /// <returns>
    /// true if needs to set the journal to transferred; otherwise false.
    /// </returns>
    [Replaceable]
    protected boolean mustSetToTransferred()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStampTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts stamp transaction record based on <c>JmgStampJournalTrans</c> record buffer.
    /// </summary>
    /// <param name = "_jmgStampJournalTrans">
    /// A <c>JmgStampJournalTrans</c> record buffer.
    /// </param>
    /// <param name = "_jmgTransferEvents">
    /// A <c>JmgTransferEvents</c> object.
    /// </param>
    /// <param name = "_transferToHRM">
    /// A boolean value that indicates whether to create absence transaction.
    /// </param>
    /// <param name = "_hrmAbsenceTable">
    /// A <c>HRMAbsenceTable</c> record buffer.
    /// </param>
    /// <param name = "_slizeOvertimeManual">
    /// The <c>NoYes::Yes</c> enumeration value if overtime cost have been manually assigned to
    /// registrations for the day; otherwise, the <c>NoYes::No</c> value.
    /// </param>
    protected void insertStampTrans(
        JmgStampJournalTrans    _jmgStampJournalTrans, 
        JmgTransferEvents       _jmgTransferEvents, 
        boolean                 _transferToHRM, 
        HRMAbsenceTable         _hrmAbsenceTable, 
        NoYesId                 _slizeOvertimeManual)
    {
        HRMAbsenceTrans hrmAbsenceTrans;
        
        if (this.mustInsertJmgStampTrans())
        {
            setPrefix(#PreFixField(_jmgStampJournalTrans, TransId));
            JmgStampTrans jmgStampTrans = this.createJmgStampTrans(_jmgStampJournalTrans, _jmgTransferEvents, _slizeOvertimeManual);

            jmgStampTrans.insert();

            if (this.mustCreateAbsenceTrans(_transferToHRM, jmgStampTrans))
            {
                hrmAbsenceTrans.initFromJmgStampTrans(jmgStampTrans, _hrmAbsenceTable.HrmAbsenceTableId);
                hrmAbsenceTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJmgStampTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates transferred journal registration.
    /// </summary>
    /// <param name = "_jmgStampJournalTrans">
    /// A logbook record to initialize transferred journal registration.
    /// </param>
    /// <param name = "_jmgTransferEvents">
    /// A <c>JmgTransferEvents</c> object.
    /// </param>
    /// <param name = "_slizeOvertimeManual">
    /// The <c>NoYes::Yes</c> enumeration value if overtime cost have been manually assigned to
    /// registrations for the day; otherwise, the <c>NoYes::No</c> value.
    /// </param>
    /// <returns>The <c>JmgStampTrans</c> table buffer.</returns>
    protected JmgStampTrans createJmgStampTrans(JmgStampJournalTrans _jmgStampJournalTrans, JmgTransferEvents _jmgTransferEvents, NoYesId _slizeOvertimeManual)
    {
        JmgStampTrans jmgStampTrans = JmgStampTrans::newFrom_StampJournalTrans(_jmgStampJournalTrans);
        _jmgTransferEvents.calcSlizeCost(jmgStampJournalTable, jmgStampTrans, _slizeOvertimeManual);

        return jmgStampTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateAbsenceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the absence transaction must be created.
    /// </summary>
    /// <param name = "_transferToHRM">
    /// A boolean value that indicates whether to create absence transaction.
    /// </param>
    /// <param name = "_jmgStampTrans">
    /// The transferred journal registration record.
    /// </param>
    /// <returns>true if the absence transaction must be created; otherwise, false.</returns>
    protected boolean mustCreateAbsenceTrans(boolean _transferToHRM, JmgStampTrans _jmgStampTrans)
    {
        return _transferToHRM && _jmgStampTrans.JourRegType == JmgJourRegTypeEnum::Absence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteStampJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>JmgStampJournalTrans</c> records.
    /// </summary>
    /// <param name = "_jmgTransferEvents">
    /// A <c>JmgTransferEvents</c> object.
    /// </param>
    /// <param name = "_transferToHRM">
    /// A boolean value that indicates whether to create absence transaction.
    /// </param>
    /// <param name = "_hrmAbsenceTable">
    /// A <c>HRMAbsenceTable</c> record buffer.
    /// </param>
    /// <param name = "_slizeOvertimeManual">
    /// The <c>NoYes::Yes</c> enumeration value if overtime cost have been manually assigned to
    /// registrations for the day; otherwise, the <c>NoYes::No</c> value.
    /// </param>
    protected void deleteStampJournalTrans(JmgTransferEvents _jmgTransferEvents, boolean _transferToHRM, HRMAbsenceTable _hrmAbsenceTable, NoYesId _slizeOvertimeManual)
    {
        JmgStampJournalTrans jmgStampJournalTrans;
        QueryRun queryRun = new QueryRun(this.journalTransQuery(true));
        while (queryRun.next())
        {
            jmgStampJournalTrans = queryRun.get(tableNum(JmgStampJournalTrans));

            this.insertStampTrans(jmgStampJournalTrans, _jmgTransferEvents, _transferToHRM, _hrmAbsenceTable, _slizeOvertimeManual);

            jmgStampJournalTrans.delete();

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the registrations that are associated with the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// An attempt is made to transfer registrations on a future profile date.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The project journals have not been correctly configured in Time and attendance parameters.
    /// </exception>
    public void run()
    {
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampTrans           jmgStampTrans;
        JmgTransferEvents       jmgTransferEvents;
        NoYesId                 slizeOvertimeManual = NoYes::No;
        boolean                 transferToHRM;
        HRMAbsenceTable         hrmAbsenceTable;
        int                     insertedPayEvents = 0;

        jmgStampJournalTable.reread();

        if (!this.isApproved())
        {
            this.approve();
        }

        if (!this.isApproved())
        {
            jmgStampJournalTable.Transferred   = NoYes::No;
            jmgStampJournalTable.TransferredByWorker = 0;
            jmgStampJournalTable.update();
            return;
        }

        if (jmgStampJournalTable.ProfileDate > JmgProfileSeconds::getSysDate())
        {
            throw error("@SYS41405");
        }

        if (jmgStampJournalTable.Transferred == NoYes::Yes)
        {
            throw error("@SCM:JmgPreventTransferTwice");
        }

        if (JmgParameters::find().ProjJournalNameId == '')
        {
            QueryRun queryRun = new QueryRun(this.journalTransQuery());
            
            while (queryRun.next())
            {
                jmgStampJournalTrans = queryRun.get(tableNum(JmgStampJournalTrans));
                if (jmgStampJournalTrans.Module == JmgModuleEnum::PROJ)
                {
                    throw error("@SYS115869");
                }
            }
        }

        ttsbegin;

        setPrefix(#PreFixField(jmgStampJournalTable, Worker));
        transferToHRM = isConfigurationkeyEnabled(configurationKeyNum(HRMManagementAbsence)) && JmgParameters::find().TransferAbsenceToHRM == NoYes::Yes;

        if (transferToHRM &&
            (select firstonly RecId
                from jmgStampJournalTrans
                where jmgStampJournalTrans.Worker       == jmgStampJournalTable.Worker      &&
                      jmgStampJournalTrans.ProfileDate  == jmgStampJournalTable.ProfileDate &&
                      jmgStampJournalTrans.JourRegType  == JmgJourRegTypeEnum::Absence).RecId)
        {
            hrmAbsenceTable = this.findAbsenceJournal();
            if (!hrmAbsenceTable)
            {
                jmgStampJournalTable.setError(strFmt("@SYS39961",
                                     HcmWorker::find(jmgStampJournalTable.Worker).name(),
                                     HRMAbsenceTableStatus::created,
                                     HRMAbsenceTableStatus::rejected,
                                     jmgStampJournalTable.ProfileDate));
                jmgStampJournalTable.update();
                ttscommit;
                return;
            }
        }

        if ((select firstonly RecId from jmgOvertimeSlize
                 where jmgOvertimeSlize.Worker      == jmgStampJournalTable.Worker &&
                       jmgOvertimeSlize.ProfileDate == jmgStampJournalTable.ProfileDate).RecId)
        {
            slizeOvertimeManual = NoYes::Yes;
        }

        // Delete all pay count unit id related pay events
        jmgStampJournalTable.deletePayCountEvents();

        jmgTransferEvents = new JmgTransferEvents();

        if (this.mustInsertTransferEvents())
        {
            jmgTransferEvents.createPayEventsArray(jmgStampJournalTable);
            jmgTransferEvents.insertEvents();
            insertedPayEvents += jmgTransferEvents.getInsertedEventsCount();

            // Calculate all pay count unit id related pay events
            insertedPayEvents += jmgStampJournalTable.insertPayCountEvents();

            if (insertedPayEvents == 0)
            {
                // show a message if there is a pay agreement exists but no pay events were created
                warning(strfmt("@GLS3800021",
                            HcmWorker::find(jmgStampJournalTable.Worker).name(),
                            jmgStampJournalTable.ProfileDate));
            }
        }

        JmgPieceRateCalc::calcPieceRateFromStampTable(jmgStampJournalTable);
        JmgPieceRateCalc::insertEvents(jmgStampJournalTable);

        JmgPayAdjustment jmgPayAdjustment = JmgPayAdjustment::construct();
        jmgPayAdjustment.payAdjust(jmgStampJournalTable.Worker,jmgStampJournalTable.ProfileDate,jmgStampJournalTable.PayAgreement);

        jmgTransferEvents.calcCostToSlize();

        this.deleteStampJournalTrans(jmgTransferEvents, transferToHRM, hrmAbsenceTable, slizeOvertimeManual);

        if (this.mustSetToTransferred())
        {
            jmgStampJournalTable.setError('');
            jmgStampJournalTable.Transferred   = true;
            jmgStampJournalTable.TransferredByWorker = HcmWorker::userId2Worker(curUserId());
            jmgStampJournalTable.update();
        }

        JmgFlex::sumEmployee(JmgEmployee::find(jmgStampJournalTable.Worker), jmgStampJournalTable.ProfileDate);

        // Post updates
        JmgTransaction::postChanges(jmgStampJournalTable);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAbsenceJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the absence journal to use when transferring absence registrations that are associated to
    /// the <c>JmgStampJournalTable</c> record to HRM.
    /// </summary>
    /// <returns>
    /// A <c>HRMAbsenceTable</c> record to use when transferring absence registrations.
    /// </returns>
    protected HRMAbsenceTable findAbsenceJournal()
    {
        HRMAbsenceTable hrmAbsenceTable;

        hrmAbsenceTable = HRMAbsenceTable::findDate(jmgStampJournalTable.Worker, jmgStampJournalTable.ProfileDate, HRMAbsenceTableStatus::created);

        if (!hrmAbsenceTable)
        {
            hrmAbsenceTable = HRMAbsenceTable::findDate(jmgStampJournalTable.Worker, jmgStampJournalTable.ProfileDate, HRMAbsenceTableStatus::rejected);
        }

        return hrmAbsenceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performTransferCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the cancel of transfer of registrations.
    /// </summary>
    protected void performTransferCancel()
    {
        jmgStampJournalTable.transferCancelExecute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferred</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal has been transferred.
    /// </summary>
    /// <returns>
    /// true if the journal has been transferred; otherwise, false.
    /// </returns>
    protected boolean isTransferred()
    {
        return jmgStampJournalTable.Transferred;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a previous transfer of registrations that are associated with the
    /// <c>JmgStampJournalTable</c> record.
    /// </summary>
    public void cancel()
    {
        JmgPayEvents    jmgPayEvents;
        JmgParameters   jmgParameters;

        if (!this.isTransferred())
        {
            return;
        }

        if ((select firstonly RecId from jmgPayEvents
                 where jmgPayEvents.Worker         == jmgStampJournalTable.Worker      &&
                       jmgPayEvents.ProfileDate    == jmgStampJournalTable.ProfileDate &&
                       jmgPayEvents.PayTransferred == NoYes::Yes).RecId)
        {
            jmgParameters = JmgParameters::find();
            if (jmgParameters.ErrorLevelOnCancelation == JmgErrorTolerance::Error)
            {
                throw error("@SYS38846");
            }

            if (jmgParameters.ErrorLevelOnCancelation == JmgErrorTolerance::Warning)
            {
                warning(strFmt("@SYS39011", HcmWorker::find(jmgStampJournalTable.Worker).PersonnelNumber));
            }
        }
        this.performTransferCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipExecuteCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the cancel execution should run or not.
    /// </summary>
    /// <returns>
    /// true if the execution should be stopped; otherwise, false.
    /// </returns>
    protected boolean mustSkipExecuteCancel()
    {
        return (!jmgStampJournalTable.Transferred || (JmgParameters::find().ErrorLevelOnCancelation == JmgErrorTolerance::Error && this.findJmgPayEvents() != 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelExecute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the cancel of transfer of registrations.
    /// </summary>
    public void cancelExecute()
    {
        JmgPayEvents            jmgPayEvents;
        boolean                 transferToHRM;
        HRMAbsenceTable         hrmAbsenceTable;

        
        if (this.mustSkipExecuteCancel())
        {
            return;
        }

        ttsbegin;

        transferToHRM = isConfigurationkeyEnabled(configurationKeyNum(HRMManagementAbsence)) && JmgParameters::find().TransferAbsenceToHRM;
        if (transferToHRM)
        {
            select firstonly hrmAbsenceTable
            where hrmAbsenceTable.Worker        == jmgStampJournalTable.Worker      &&
                  hrmAbsenceTable.StartDate     <= jmgStampJournalTable.ProfileDate &&
                  (hrmAbsenceTable.EndDate      >= jmgStampJournalTable.ProfileDate
                   || hrmAbsenceTable.EndDate   == dateNull());

            if (hrmAbsenceTable && HRMAbsenceTrans::existTrans(hrmAbsenceTable.HrmAbsenceTableId, jmgStampJournalTable.ProfileDate))
            {
                if (hrmAbsenceTable.Status  == HRMAbsenceTableStatus::created   ||
                hrmAbsenceTable.Status  == HRMAbsenceTableStatus::rejected)
                {
                    SysDaDeleteStatement deleteStatement = new SysDaDeleteStatement();
                    deleteStatement.execute(new SysDaDeleteObject(this.buildHrmAbsenceTransQueryForDelete(hrmAbsenceTable)));
                }
                else
                {
                    jmgStampJournalTable.setError(strFmt("@SYS39963", hrmAbsenceTable.Status));
                    jmgStampJournalTable.update();
                    ttscommit;
                    return;
                }
            }
        }

        delete_from jmgPayEvents
        where jmgPayEvents.Worker      == jmgStampJournalTable.Worker &&
              jmgPayEvents.ProfileDate == jmgStampJournalTable.ProfileDate;

        // Update pay events related to count units.
        jmgStampJournalTable.deletePayCountEvents();
        jmgStampJournalTable.insertPayCountEvents();

        JmgPayAdjustment jmgPayAdjustment = JmgPayAdjustment::construct();
        jmgPayAdjustment.payAdjust(jmgStampJournalTable.Worker, jmgStampJournalTable.ProfileDate, jmgStampJournalTable.PayAgreement);

        this.createJmgStampJournalTrans();

        jmgStampJournalTable.Transferred    = NoYes::No;
        jmgStampJournalTable.TransferredByWorker  = 0;
        jmgStampJournalTable.update();

        JmgFlex::sumEmployee(JmgEmployee::find(jmgStampJournalTable.Worker), jmgStampJournalTable.ProfileDate);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildHrmAbsenceTransQueryForDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query object for <c>JmgStampJournalTrans</c> delete.
    /// </summary>
    /// <param name = "_hrmAbsenceTable">
    /// A <c>HRMAbsenceTable</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>SysDaQueryObject</c> class instance.
    /// </returns>
    protected SysDaQueryObject buildHrmAbsenceTransQueryForDelete(HRMAbsenceTable _hrmAbsenceTable)
    {
        HrmAbsenceTrans  hrmAbsenceTrans;
        SysDaQueryObject queryObject = new SysDaQueryObject(hrmAbsenceTrans);

        SysDaQueryExpression expression = new SysDaEqualsExpression(
            new SysDaFieldExpression(hrmAbsenceTrans, fieldStr(HrmAbsenceTrans, HrmAbsenceTableId)),
            new SysDaFieldExpression(_hrmAbsenceTable, fieldStr(HRMAbsenceTable, HrmAbsenceTableId)));

        expression.and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(hrmAbsenceTrans, fieldStr(HrmAbsenceTrans, TransDate)),
                new SysDaFieldExpression(jmgStampJournalTable, fieldStr(jmgStampJournalTable, ProfileDate))));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJmgStampJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transferred journal registration.
    /// </summary>
    protected void createJmgStampJournalTrans()
    {
        JmgStampTrans jmgStampTrans;

        QueryRun queryRun = new QueryRun(this.buildJmgStampTransQuery());

        while (queryRun.next())
        {
            jmgStampTrans = queryRun.get(tableNum(JmgStampTrans));
            JmgStampJournalTrans jmgStampJournalTrans = JmgStampJournalTrans::newFrom_StampTrans(jmgStampTrans);
            jmgStampJournalTrans.insert();

            // Dimension values are reset during insert. Update with correct values.
            jmgStampJournalTrans.DefaultDimension          = jmgStampTrans.DefaultDimension;
            jmgStampJournalTrans.OriginalTransaction = buf2Con(jmgStampJournalTrans);
            jmgStampJournalTrans.update();

            jmgStampTrans.doDelete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildJmgStampTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query object for <c>JmgStampTrans</c> select.
    /// </summary>
    /// <returns>
    /// The query object.
    /// </returns>
    protected query buildJmgStampTransQuery()
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSourceJmgStampTrans = query.addDataSource(tableNum(JmgStampTrans));

        queryBuildDataSourceJmgStampTrans.update(true);
        queryBuildDataSourceJmgStampTrans.addRange(fieldNum(JmgStampTrans, Worker)).value(queryValue(jmgStampJournalTable.Worker));
        queryBuildDataSourceJmgStampTrans.addRange(fieldNum(JmgStampTrans, ProfileDate)).value(queryValue(jmgStampJournalTable.ProfileDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJmgPayEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>JmgPayEvents</c> record
    /// </summary>
    /// <returns>The RecId of the <c>JmgPayEvents</c> record </returns>
    private RefRecId findJmgPayEvents()
    {
        JmgPayEvents  jmgPayEvents;

        select firstonly RecId from jmgPayEvents
                    where jmgPayEvents.Worker         == jmgStampJournalTable.Worker
                       && jmgPayEvents.ProfileDate    == jmgStampJournalTable.ProfileDate
                       && jmgPayEvents.PayTransferred == NoYes::Yes;

        return jmgPayEvents.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>