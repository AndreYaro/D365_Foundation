<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobUpdComplete</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanJobUpdComplete</c> class performs status updates for kanban jobs with target status completed.
/// </summary>
public class KanbanJobUpdComplete extends KanbanJobUpd
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>receiveKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Receives the kanban if all kanban jobs are in the completed status.
    /// </summary>
    protected void receiveKanban()
    {
        KanbanJobStatus     kanbanJobStatusLocal = kanbanJob.status(updateKanban);

        if (kanbanJobStatusLocal.mustSynchronizeKanbanStatus())
        {
            KanbanStatus kanbanStatus = KanbanStatus::newKanbanKanbanJobStatusUpdate(kanbanJob.kanban(),kanbanJobStatusUpdate);
            kanbanStatus.run(kanbanJobStatusLocal.correspondingKanbanStatus(kanbanJob.Status));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions for the complete status update.
    /// </summary>
    protected void runStatus()
    {
        this.setQualityMeasures();
        this.setEndDateTime();
        this.setQuantities();
        this.setNewCurrentJob();
        this.setStatus(LeanKanbanJobStatus::Completed);
        this.updateKanbanJob();
        this.beginLedger();
        this.updateInventoryKanbanJob();
        this.updatePhysicalPickingList(FlushingPrincipKanban::End);
        this.commitLedger();
        this.updateSourceDocumentLineStatus();
        this.updateJobOrderedQuantities();
        this.updateNextKanbanJob();
        this.receiveKanban();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEndDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the actual end date of the kanban job.
    /// </summary>
    protected void setEndDateTime()
    {
        kanbanJob.ActualEndDateTime = kanbanJobStatusUpdate.TransactionDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewCurrentJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the new current job on the related <c>Kanban</c> table record.
    /// </summary>
    protected void setNewCurrentJob()
    {
        KanbanJob   kanbanJobNewCurrent = kanbanJob.nextJob(true);

        if (kanbanJobNewCurrent.RecId)
        {
            kanbanJob.kanban(true).setCurrentJob(kanbanJobNewCurrent.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQualityMeasures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the quality measure for the kanban job.
    /// </summary>
    protected void setQualityMeasures()
    {
        KanbanJobQualityMeasure::setQualityMeasure(kanbanJob,kanbanJobStatusUpdate.FirstTimeThrough);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the received quantity and scrapped quantity of the kanban job.
    /// </summary>
    protected void setQuantities()
    {
        kanbanJob.QuantityReceived  = kanbanJobStatusUpdate.QuantityReceived;
        kanbanJob.QuantityScrapped  = kanbanJobStatusUpdate.QuantityScrapped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory transactions for the kanban job, if it is required.
    /// </summary>
    protected void updateInventoryKanbanJob()
    {
        KanbanJobType           kanbanJobType = kanbanJob.type();
        Qty                     inventQty;

        if (kanbanJobType.mustBeInventoryControlled())
        {
            InventMovement inventMovement = kanbanJob.inventMovement();

            if (kanbanJob.QuantityReceived)
            {
                if (   kanbanJobStatusUpdate.InventDimId
                    && kanbanJobStatusUpdate.InventDimId != InventDim::inventDimIdBlank()
                    && kanbanJobType.mustBeInventoryControlledReceipt())
                {
                    InventMovement inventMovementReceipt = kanbanJob.inventMovement(InventMovSubType::TransferReceipt);
                    InventUpd_ChangeDimension::updateForceInventTrans(
                                                            inventMovementReceipt,
                                                            kanbanJobStatusUpdate.inventDim(),
                                                            true,
                                                            true,
                                                            inventMovementReceipt.inventdim());
                }
                switch (kanbanJobType.mustEndUpdateFinancial())
                {
                    case false:
                        InventUpd_Physical inventUpd_Physical = InventUpd_Physical::newKanbanJob(inventMovement);
                        inventUpd_Physical.updateNow(ledgerVoucher);

                        if (KanbanItemCheckMovement::newStandard(inventMovement,false,true).isAllowed())
                        {
                            // Trigger the indirect and direct manufacturing cost
                            if (kanbanJob.type().mustBeWIPIssueMovement())
                            {
                                inventQty = -inventUpd_Physical.movement().inventModelType().inventCostMovement().totalQty();
                            }
                            else
                            {
                                inventQty = inventUpd_Physical.movement().inventModelType().inventCostMovement().totalQty();
                            }
                        }

                        if (inventMovement.isTransfer())
                        {
                            inventMovement     = kanbanJob.inventMovement(InventMovSubType::TransferReceipt);
                            inventUpd_Physical = InventUpd_Physical::newKanbanJob(inventMovement);
                            inventUpd_Physical.updateNow(ledgerVoucher);
                        }
                        break;
                    case true:

                        InventUpd_Financial inventUpd_Financial = InventUpd_Financial::newKanbanMovement(inventMovement,
                                                                                                         ledgerVoucher,
                                                                                                         kanbanJob.QuantityReceived * inventMovement.transSign(),
                                                                                                         0,
                                                                                                         0);
                        inventUpd_Financial.updateNow();
                        if (inventMovement.isTransfer())
                        {
                            inventMovement      = kanbanJob.inventMovement(InventMovSubType::TransferReceipt);

                            inventUpd_Financial = InventUpd_Financial::newKanbanMovement(inventMovement,
                                                                                    ledgerVoucher,
                                                                                    kanbanJob.QuantityReceived * inventMovement.transSign(),
                                                                                    0,
                                                                                    -inventUpd_Financial.updCostAmountInvent());
                            inventUpd_Financial.updateNow();
                        }
                        break;
                }
            }

            if (kanbanJobType.mustEndUpdateFinancial() == false &&
                KanbanItemCheckMovement::newStandard(inventMovement,false,true).isAllowed())
            {
                InventItemPrice inventItemPrice = InventItemPrice::stdCostFindDate(inventMovement.inventTable(),
                                                                                    inventMovement.transDate(),
                                                                                    '',
                                                                                    inventMovement.inventdim());

                // Trigger the indirect and direct manufacturing cost
                if (kanbanJob.type().mustBeWIPIssueMovement())
                {
                    costUpd.addDirectMaterialConsumption(inventItemPrice, inventQty - kanbanJob.QuantityScrapped);
                }
                else
                {
                    costUpd.addDirectMaterialFinished(inventItemPrice, inventQty + kanbanJob.QuantityScrapped);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJobOrderedQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ordered quantity of following jobs.
    /// </summary>
    protected void updateJobOrderedQuantities()
    {
        if (kanbanJob.QuantityReceived != kanbanJob.QuantityOrdered)
        {
            kanbanJob.updateOrderedQuantities(kanbanJob.QuantityReceived);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNextKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the date and inventory dimensions of the next kanban jobs.
    /// </summary>
    protected void updateNextKanbanJob()
    {
        KanbanJobType               kanbanJobType = kanbanJob.type();
        InventTrans                 inventTrans;
        InventMovement              inventMovement;
        InventTable                 inventTable;
        InventDim                   toInventDim;
        InventDimParm               inventDimParm;
        InventTransOriginId         inventTransOriginId;
        InventDimGroupSetup         inventDimGroupSetup;

        ttsbegin;

        if (kanbanJobType.mustBeInventoryControlled())
        {
            inventMovement      = kanbanJob.inventMovement();
            inventTransOriginId = inventMovement.isTransfer()
                                    ? inventMovement.transferInventTransOriginId()
                                    : inventMovement.inventTransOriginId();
        }

        KanbanDateCalculation::newKanbanJob(kanbanJob).setExpectedDateTimeTransfer(kanbanJob);

        // next transfer jobs
        KanbanJob nextKanbanJob = kanbanJob.nextJob(true);
        while (   nextKanbanJob
               && !nextKanbanJob.type().canHaveStatus(LeanKanbanJobStatus::Planned))
        {
            if (   kanbanJobType.mustBeInventoryControlled()
                && nextKanbanJob.type().mustBeInventoryControlled())
            {
                inventMovement = nextKanbanJob.inventMovement();
                InventDim inventDim = inventMovement.inventdim();
                inventDimParm.initFromInventDim(inventDim);

                //transfer inventory dimensions from the kanban job receipt to the next job
                while select sum(Qty), InventDimId, ItemId from inventTrans
                    group by InventDimId, ItemId
                    where inventTrans.InventTransOrigin == inventTransOriginId
                {
                    if (!inventTable)
                    {
                        inventTable         = inventTrans.inventTable();
                        inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
                    }
                    toInventDim.data(inventDim);
                    toInventDim.copyDimParmDim(inventDimGroupSetup, inventTrans.inventDim(), KanbanJob::nextJobInventDimParm());
                    toInventDim = InventDim::findOrCreate(toInventDim);

                    if (toInventDim.InventDimId != inventDim.InventDimId)
                    {
                        InventUpd_ChangeDimension inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(inventMovement,inventDim,inventDimParm,toInventDim,-inventTrans.Qty);
                        inventUpd_ChangeDimension.updateNow();
                    }
                }
            }

            nextKanbanJob = nextKanbanJob.nextJob(true);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceDocumentLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of job related source document lines to confirmed.
    /// </summary>
    protected void updateSourceDocumentLineStatus()
    {
        SourceDocumentLineImplementationList    sourceDocumentLineImplementationList = SourceDocumentLineImplementationList::construct();

        ttsbegin;
        KanbanJobIssue kanbanJobIssue = KanbanJobIssue::findKanbanJob(kanbanJob.RecId);
        if (kanbanJobIssue)
        {
            sourceDocumentLineImplementationList.addEnd(kanbanJobIssue);
        }

        KanbanJobReceipt kanbanJobReceipt = KanbanJobReceipt::findKanbanJob(kanbanJob.RecId);
        if (kanbanJobReceipt)
        {
            sourceDocumentLineImplementationList.addEnd(kanbanJobReceipt);
        }

        this.completeSourceDocument(kanbanJob, sourceDocumentLineImplementationList, SourceDocumentAccountingStatus::Completed);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static KanbanJobUpd construct()
    {
        return new KanbanJobUpdComplete();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
