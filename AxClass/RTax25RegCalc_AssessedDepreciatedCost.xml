<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_AssessedDepreciatedCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Class <c>rTax25RegCalc_AssessedDepreciatedCost</c> used to calculate register "Depreciation cost", which contains
/// net book values of fixed assets for each month of period or cadastral values of fixed assets.
/// </summary>
/// <remarks>
///  Register will be used in calculation of assessed tax declaration.
/// </remarks>
public final class rTax25RegCalc_AssessedDepreciatedCost extends RTax25RegCalc implements BatchRetryable
{
    RAssetStandardId        standardId;
    TransDate               beginningOfYear;
    RAssetAssessedInitDate  assetInitDate;
    boolean                 isCorrection;

    RTax25CalculationType   calculationType;
    DialogField             dialogCalculationType;

    private Map registerPeriodsMap;
    private Map cadastCostChangePeriodsMap;

    #define.LawDate2013(01\01\2013)

    #define.currentVersion(1)
    #localMacro.currentList
    calculationType
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAssets</Name>
				<Source><![CDATA[
    private RTax25RegisterLineNum64 addAssets(
        RAssetTable _rAssetTable,
        TaxCode _taxCode,
        OKATO_RU _okato,
        RAssetAcquisitionDate _acquisitionDate,
        boolean _movables,
        RTax25RegisterLineNum64 _refLineNumber = 0)
    {
        container createContainer()
        {
            container distributionShare;
            RAssetTaxAllowance taxAllowance;

            if (_rAssetTable.TaxAllowanceRecId)
            {
                taxAllowance = RAssetTaxAllowance::find(_rAssetTable.TaxAllowanceRecId);
            }

            distributionShare = RAssetDistribution::getDistributionShare(_rAssetTable.AccountNum, _taxCode, _okato);

            return ['', '', '', '', 0, false, 0.0,
                    _rAssetTable.AccountNum, _rAssetTable.Name,
                    (conPeek(distributionShare, 1) - conPeek(distributionShare, 2)) ?
                    int2str(conPeek(distributionShare, 1)) + "@SYS35673" + int2str(conPeek(distributionShare, 2)) : '',
                    dateNull(), 0., 0.,
                    '',
                     0., 0., 0, 0, 0, 0,
                    enum2str(_rAssetTable.AssetType),
                    _acquisitionDate,
                    TaxAuthorityAddress::findByOKATO_RU(_okato).TaxAuthority,
                    RAssetLocation::find(_rAssetTable.location(dateTo)).BranchId,
                    _rAssetTable.location(dateTo),
                    taxAllowance.TaxAllowanceId,
                    _refLineNumber];
        }

        RTax25RegisterTrans_AssessedDeprCost assessedDeprCostHeader = regQuery.addBodyRecord(
            0,
            createContainer(),
            _rAssetTable.TableId,
            _rAssetTable.RecId);

        return assessedDeprCostHeader.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPeriod</Name>
				<Source><![CDATA[
    private void addPeriod(
        RAssetTable _rAssetTable,
        TaxCode     _taxCode,
        TransDate   _transDate,
        OKATO_RU     _okato,
        boolean      _movables,
        Integer      _assetKind = 0,
        RTax25RegisterLineNum64 _refLineNumber = 0)
    {
        const real RoundFactor = 0.01;
        const real RoundFactor4 = 0.0001;
        const int Two = 2;
        RAssetLocation location = RAssetLocation::findOKATO(_okato);
        TransDate startLifeDate;
        TransDate endLifeDate;

        container calculateOwnershipFactor()
        {
            RAssetTrans rAssetTrans, rassetTransStorno;
            container   fraction;
            EndDate     endDate     = RAssetStandards::find(_rAssetTable.AccountNum, standardId).DisposalDate;
            int         denominator, numerator;
            int         addMth;

            const int midMonth = 15;

            select firstonly TransDate from rAssetTrans
                order TransDate asc
                where rAssetTrans.AccountNum          == _rAssetTable.AccountNum        &&
                        rAssetTrans.AssetStandardId     == standardId                    &&
                        rAssetTrans.AssetTransType      == RAssetTransType::Acquisition  &&
                        rAssetTrans.TransDate           <= dateTo
            notexists join firstonly rassetTransStorno
                where rassetTransStorno.AccountNum      == rAssetTrans.AccountNum          &&
                        rassetTransStorno.AssetStandardId == rAssetTrans.AssetStandardId     &&
                        rassetTransStorno.AssetTransType  == RAssetTransType::Acquisition    &&
                        rassetTransStorno.RecId           == rAssetTrans.StornoRecId         &&
                        rassetTransStorno.TransDate       >= beginningOfYear                 &&
                        rassetTransStorno.TransDate       <= dateTo;

            startLifeDate = rAssetTrans.TransDate > dateFrom ? rAssetTrans.TransDate : dateFrom;

            endLifeDate = (endDate && endDate < dateTo) ? endDate : dateTo;

            if (dayOfMth(startLifeDate) <= midMonth)
            {
                addMth++;
            }
            if (dayOfMth(endLifeDate) <= midMonth)
            {
                addMth--;
            }

            numerator = mthOfYr(endLifeDate) - mthOfYr(startLifeDate) + addMth;
            denominator = mthOfYr(dateTo) - mthOfYr(dateFrom) + 1; //this must be equal to 3 for quarter journal and 12 for final year journal

            fraction = this.fractionReduction([numerator, denominator]);

            return [round(numerator / denominator, RoundFactor4), numerator];
        }

        Months calculateCostPeriodMonths()
        {
            TransDate cadrCostPeriodFrom = this.getDateFromForCadastrCostChangePeriod(_transDate);
            TransDate cadrCostPeriodTo = this.getDateToForCadastrCostChangePeriod(_transDate);

            TransDate startDate = startLifeDate > cadrCostPeriodFrom
                ? startLifeDate
                : cadrCostPeriodFrom;
            TransDate endDate = endLifeDate < cadrCostPeriodTo
                ? endLifeDate
                : cadrCostPeriodTo;

            return mthofyr(endDate) - mthofyr(startDate) + 1;
        }

        container createContainer()
        {
            RAssetAmount  netBookValue, cadastralValue;
            RAssetOwnedShare numeratorOwnedShare;
            RAssetOwnedShare denominatorOwnedShare;
            RAssetTaxAccountingFactor costChangeFactor;
            RAssetTaxAccountingFactor ownershipFactor;
            RAssetDistribution assetDistribution = RAssetDistribution::findLocationTaxCode(_rAssetTable.AccountNum, location.Location, _taxCode);
            Months costChangePeriod;
            Months ownershipPeriod;

            if (this.mustCalcCadastralValue(_rAssetTable))
            {
                RAssetTaxInfoValue assetTaxInfoValue = RAssetTaxInfoValue::newParameters(_rAssetTable.AccountNum, 0, _transDate);

                cadastralValue = assetTaxInfoValue.getTaxBase();
                numeratorOwnedShare = assetTaxInfoValue.getNumeratorShare();
                denominatorOwnedShare = assetTaxInfoValue.getDenominatorShare();
                [ownershipFactor, ownershipPeriod] = calculateOwnershipFactor();
                costChangePeriod = calculateCostPeriodMonths();
                costChangeFactor = ownershipPeriod ? round(costChangePeriod / ownershipPeriod, RoundFactor4) : 1;
            }
            else if (assetInitDate == RAssetAssessedInitDate::Acquisition || (_rAssetTable.VehiclePlateDate && _transDate > _rAssetTable.VehiclePlateDate))
            {
                netBookValue = RAssetSumCalc_Trans::newAssetPeriod(
                    _rAssetTable.AccountNum,
                    standardId,
                    _transDate - 1).netBookValue();
            }

            container distributionShare = RAssetDistribution::getDistributionShare(_rAssetTable.AccountNum, _taxCode, _okato);

            return ['', '', '', '', 0, false, 0.0, '', '', '',
                    _transDate > dateTo && year(_transDate) > year(dateTo) ? DateTimeUtil::getStartOfYearDate(preferredLocale, _transDate) - 1 : mkDate(1, mthOfYr(_transDate), year(_transDate)),
                    round(netBookValue, RoundFactor),
                    round(netBookValue, RoundFactor),
                    (numeratorOwnedShare - denominatorOwnedShare) ? strFmt('%1%2%3', numeratorOwnedShare, "@SYS35673", denominatorOwnedShare) : '',
                    round(cadastralValue, RoundFactor),
                    round(cadastralValue * (conPeek(distributionShare, 1) / conPeek(distributionShare, Two)), RoundFactor),
                    ownershipPeriod,
                    ownershipFactor,
                    costChangePeriod,
                    costChangeFactor,
                    "",
                    dateNull(), "", "", "", "", _refLineNumber];
        }

        regQuery.addBodyRecord(0, createContainer(), _rAssetTable.TableId, _rAssetTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates data for register "Depreciated cost".
    /// </summary>
    /// <remarks>
    ///  First, it goes through all fixed assets with types Vehicle, Realty, Other and Tangible which already acquired and acquiring is not reversed yet.
    /// These fixed assets selected to map, which groups fixed assets related to the same RCOAD, KBK, section and tax code together.
    /// Then net book value is calculated on end of each month for these fixed assets. For fixed assets related to section 3 cadastral value is taken.
    /// For movables, only net book value for end of period calculated.
    /// </remarks>
    public void calc()
    {
        QueryRun            queryRun;
        RAssetTable         rAssetTable;
        RTax25TaxTable      rTax25TaxTable;
        RAssetDistribution  rAssetDistribution;
        RAssetLocation      rAssetLocation;

        boolean             dateEndYearTo   = dateTo == DateTimeUtil::getEndOfYearDate(preferredLocale, dateTo);
        CompanyInfo         companyInfo     = CompanyInfo::find();

        RAssetAcquisitionDate   acquisitionDate;

        RAssetDisposalDate      disposalDate;
        Map                     sectionOrderMap = new Map(Types::Container, Types::Class);
        MapEnumerator           me;

        const int AssetKindOutsideRussia = 4;

        void insertMap(TaxCode _taxCode, OKATO_RU _okato = '')
        {
            container   key;
            Map         rAssetTableMap;

            if (_taxCode ||
                rAssetTable.AssessedTaxNontaxable)
            {
                key = [rAssetTable.sectionNum(),
                       rAssetTable.AssessedTaxNontaxable,
                       _okato ? _okato : rAssetTable.findOKATO(_taxCode, dateTo, "", true),
                       RTax25TaxTable::find(RTax25TaxModule::Asset_RU, _taxCode).PaymentOrderBudgetReceiptClassCode,
                       _taxCode,
                       rAssetTable.rAssetKindTaxBaseType().RailwayAsset,
                       rAssetTable.rAssetRailwayFactors(dateTo).Factor];

                if (sectionOrderMap.exists(key))
                {
                    rAssetTableMap = sectionOrderMap.lookup(key);
                }
                else
                {
                    rAssetTableMap = new Map(Types::Record, Types::Date);
                }

                rAssetTableMap.insert(rAssetTable, acquisitionDate);
                sectionOrderMap.insert(key, rAssetTableMap);
            }
        }

        void fillSections()
        {
            MapEnumerator           mapEnumerator;
            Map                     rAssetTableMap;
            TransDate       transDate;
            TransDate       toEndDate = endmth(nextMth(dateTo));
            boolean         outSection;
            int             sectionNum;
            TaxCode         taxCode;
            OKATO_RU        okato;
            boolean         nonTaxable;
            NoYes           railwayAsset;
            Factor          railwayFactor;

            PaymentOrderBudgetReceiptClassCode_RU pobrcc;

            [sectionNum, nonTaxable, okato, pobrcc, taxCode, railwayAsset, railwayFactor] = me.currentKey();
            rAssetTableMap = me.currentValue();
            int assetKind = sectionNum mod 100;

            if (!rAssetTableMap ||
                (assetKind == AssetKindOutsideRussia && !dateEndYearTo))
            {
                return;
            }
   
            RTax25RegisterLineNum64 refLineNumberBody;

            mapEnumerator = rAssetTableMap.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                rAssetTable     = mapEnumerator.currentKey();
                acquisitionDate = mapEnumerator.currentValue();

                if (!outSection)
                {
                    RTax25RegisterTrans_AssessedDeprCost assessedDeprCostHeader = regQuery.addBodyRecord(
                        0,
                        this.createHeaderWithAssetKind(
                            okato,
                            pobrcc,
                            taxCode,
                            int2str(sectionNum div 100),
                            nonTaxable,
                            assetKind,
                            railwayAsset,
                            railwayFactor));

                    refLineNumberBody = assessedDeprCostHeader.LineNumber;

                    outSection = true;
                }

                RTax25RegisterLineNum64 refLineNumberAsset = this.addAssets(rAssetTable, taxCode, okato, acquisitionDate, nonTaxable, refLineNumberBody);

                if (rAssetTable.assessedTaxBaseType() != RAssetAssessedTaxBaseType::CadastralValue && !nonTaxable) //taxable and not section 3
                {
                    transDate = beginningOfYear;
                    while (transDate <= toEndDate)
                    {
                        this.addPeriod(rAssetTable, taxCode, transDate, okato, nonTaxable, assetKind, refLineNumberAsset);
                        transDate = nextMth(transDate);
                    }
                }
                else
                {
                    //Map objects with periods are populated for each asset or distribution
                    this.createMapsWithPeriodDates(rAssetTable);

                    MapEnumerator periodMapEnum = registerPeriodsMap.getEnumerator();

                    while (periodMapEnum.moveNext())
                    {
                        this.addPeriod(
                            rAssetTable,
                            taxCode,
                            nonTaxable ? toEndDate : periodMapEnum.currentKey(),
                            okato,
                            nonTaxable,
                            assetKind,
                            refLineNumberAsset);
                    }
                }
            }
        }

        queryRun = new QueryRun(this.initQuery());

        while (queryRun.next())
        {
            rAssetTable = queryRun.get(tableNum(RAssetTable));

            disposalDate = this.getDisposalDate(rAssetTable.AccountNum);

            if (disposalDate)
            {
                continue;
            }

            acquisitionDate = this.getAcquisitionDate(rAssetTable.AccountNum);

            if (!acquisitionDate)
            {
                continue;
            }

            if (rAssetTable.AssessedTaxNonTaxable == NoYes::No && rAssetTable.isMovablesFixedAssetType())
            {
                continue;
            }

            if (rAssetTable.isDistribution())
            {
                while select TaxCode, Location from rAssetDistribution
                join TableId from rTax25TaxTable
                join okato from rAssetLocation
                    where rAssetDistribution.AssetId    == rAssetTable.AccountNum
                       && !rAssetDistribution.Owner
                       && rTax25TaxTable.TaxCode        == rAssetDistribution.TaxCode
                       && rTax25TaxTable.SalesTaxType   == TaxType_W::AssessedTax
                       && rAssetLocation.Location       == rAssetDistribution.Location
                {
                    insertMap(rAssetDistribution.TaxCode, rAssetLocation.okato);
                }
            }
            else
            {
                insertMap(rAssetTable.TaxCode);
            }
        }

        try
        {
            ttsbegin;

            super();

            me = sectionOrderMap.getEnumerator();
            while (me.moveNext())
            {
                fillSections();
            }

            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container createHeader(OKATO_RU                              _okato,
                                     PaymentOrderBudgetReceiptClassCode_RU _pobrcC  = "",
                                     TaxCode                               _taxCode = "",
                                     RAssetSection                         _section = "",
                                     boolean                               _movables = false)
    {
        return [_okato, _pobrcC, _taxCode, _section,  "", "", "", dateNull(), 0., 0., '', 0., 0., 0, 0, 0, 0, "", dateNull(), "", "", "", ""];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeaderWithAssetKind</Name>
				<Source><![CDATA[
    protected container createHeaderWithAssetKind(
        OKATO_RU _okato,
        PaymentOrderBudgetReceiptClassCode_RU _pobrcC  = "",
        TaxCode _taxCode = "",
        RAssetSection _section = "",
        boolean _movables = false,
        Integer _assetKind = 0,
        NoYes _railwayAsset = NoYes::No,
        Factor _railwayFactor = 0.00)
    {
        return [_okato, _pobrcC, _taxCode, _section, _assetKind, _railwayAsset, _railwayFactor, "", "", "", dateNull(), 0., 0., '', 0., 0., 0, 0, 0, 0, "", dateNull(), "", "", "", ""];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMapsWithPeriodDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates maps which contain periods which are necessary to calculate certain tax data and divide register transaction records.
    /// </summary>
    /// <param name="_assetTable">
    /// An asset table record.
    /// </param>
    /// <param name="_assetDistribution">
    /// An asset distribution table record.
    /// </param>
    /// <remarks>
    /// Map objects contain periods which are useable for dividing register transaction based on a certain conditions
    /// and also for calculating a certain data for the register.
    ///
    /// Each map is structured like this:
    /// [KEY:periodStartDate, VALUE:periodEndDate]
    ///
    /// <c>registerPeriodsMap</c> is used to divide register transaction record using a nececcary conditions.
    /// <c>cadastCostChangePeriodsMap</c> contains periods divided by changes in cadastial cost for an asset or asset distribution.
    /// <c>build3yrLandPeriodsMap</c> contains periods which are divided by the building date + 3 years, if that date is inside the tax period.
    /// </remarks>
    private void createMapsWithPeriodDates(RAssetTable _assetTable)
    {
        SysQueryRun historyQuery = this.getHistoryQuery(_assetTable.AccountNum, dateFrom, dateTo);
        RAssetTaxAllowanceHistory historyRecord;
        TransDate threeYearsAfterBuildDate;
        TaxBase taxBaseBuf;

        Map fillMapEndingDates(Map _periodsMap)
        {
            MapEnumerator me = _periodsMap.getEnumerator();
            TransDate periodStart, periodEnd;
            boolean first = true;
            Map newMap = new Map(Types::Date, Types::Date);

            while(me.moveNext())
            {
                if (first)
                {
                    first = false;
                    periodStart = me.currentKey();
                }
                else
                {
                    periodEnd = me.currentKey();
                    newMap.insert(periodStart, periodEnd - 1);

                    periodStart = periodEnd;
                }
            }

            periodEnd = dateTo;
            newMap.insert(periodStart, periodEnd);

            return newMap;
        }

        registerPeriodsMap = new Map(Types::Date, Types::Date);
        cadastCostChangePeriodsMap = new Map(Types::Date, Types::Date);

        //add register period starting date
        registerPeriodsMap.insert(dateStartMth(dateFrom), dateNull());
        cadastCostChangePeriodsMap.insert(dateStartMth(dateFrom), dateNull());

        //add dates from history
        if (RAssetTaxAllowanceHistory::nonZeroTaxBaseExists(_assetTable.AccountNum))
        {
            //first history record - earlier or equal the dateFrom date
            historyQuery.next();
            historyRecord = historyQuery.get(tableNum(RAssetTaxAllowanceHistory));
            taxBaseBuf = historyRecord.TaxBase;

            //history records inside the register period
            while(historyQuery.next())
            {
                historyRecord = historyQuery.get(tableNum(RAssetTaxAllowanceHistory));
                
                if (historyRecord.TaxBase != taxBaseBuf)
                {
                    registerPeriodsMap.insert(dateStartMth(historyRecord.StartDate), dateNull());
                    cadastCostChangePeriodsMap.insert(dateStartMth(historyRecord.StartDate), dateNull());
                }

                taxBaseBuf = historyRecord.TaxBase;
            }
        }

        //for all maps add period ending dates as map values
        registerPeriodsMap = fillMapEndingDates(registerPeriodsMap);
        cadastCostChangePeriodsMap = fillMapEndingDates(cadastCostChangePeriodsMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;
    
        this.getLast();
    
        ret = super(_registerJournalTrans, _batch);

        standardId = RAssetParameters::standardIdDefault();
        beginningOfYear = DateTimeUtil::getStartOfYearDate(preferredLocale, dateFrom);
        assetInitDate   = RAssetParameters::find().AssessedTaxInitDate;

        isCorrection = _registerJournalTrans.registerJournalTable().CorrectedRecId != 0;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunBase dialog = super();
    
        if (isCorrection)
        {
            dialog.addGroup("@SYS7764");
            dialogCalculationType = dialog.addField(enumStr(RTax25CalculationType));
        }
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fractionReduction</Name>
				<Source><![CDATA[
    private container fractionReduction(container _share)
    {
        int num = conPeek(_share, 1);
        int den = conPeek(_share, 2);

        if (num mod 2 == 0
            && den mod 2 == 0)
        {
            return this.fractionReduction([num / 2, den / 2]);
        }

        if (num mod 3 == 0
            && den mod 3 == 0)
        {
            return this.fractionReduction([num / 3, den / 3]);
        }

        return [num, den];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFromForCadastrCostChangePeriod</Name>
				<Source><![CDATA[
    private TransDate getDateFromForCadastrCostChangePeriod(TransDate _date)
    {
        return this.getDateFromMap(cadastCostChangePeriodsMap, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFromMap</Name>
				<Source><![CDATA[
    private TransDate getDateFromMap(Map _map, TransDate _date)
    {
        MapEnumerator me = _map.getEnumerator();
        TransDate periodStart, periodEnd;

        while(me.moveNext())
        {
            periodStart = me.currentKey();
            periodEnd = me.currentValue();

            if (_date >= periodStart && _date <= periodEnd)
            {
                break;
            }
        }

        return periodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateToForCadastrCostChangePeriod</Name>
				<Source><![CDATA[
    private TransDate getDateToForCadastrCostChangePeriod(TransDate _date)
    {
        return this.getDateToForMap(cadastCostChangePeriodsMap, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateToForMap</Name>
				<Source><![CDATA[
    private TransDate getDateToForMap(Map _map, TransDate _date)
    {
        MapEnumerator me = _map.getEnumerator();
        TransDate periodStart, periodEnd;

        while(me.moveNext())
        {
            periodStart = me.currentKey();
            periodEnd = me.currentValue();

            if (_date >= periodStart && _date <= periodEnd)
            {
                break;
            }
        }

        return periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAcquisitionDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Searching for earliest acquisition.
    /// </summary>
    /// <param name="_rAssetId">
    ///   Id of fixed asset.
    /// </param>
    /// <returns>
    ///   <c>RAssetTrans</c> record.
    /// </returns>
    /// <remarks>
    ///   Do not take into account acquisitions which were reversed before beginning of year, or those which were made after beginning of year and were reversed after beginning of year.
    /// </remarks>
    private RAssetAcquisitionDate getAcquisitionDate(RAssetId _rAssetId)
    {
        RAssetTrans     rAssetTrans, rAssetTransStorno;
        TransLink_RU    transLink;
    
        select firstonly TransDate, RecId from rAssetTrans
            order by TransDate
            where rAssetTrans.AccountNum            == _rAssetId
               && rAssetTrans.AssetStandardId       == standardId
               && rAssetTrans.AssetTransType        == RAssetTransType::Acquisition
               && rAssetTrans.TransDate             <  beginningOfYear
        notexists join rAssetTransStorno
            where rAssetTransStorno.AccountNum      == _rAssetId
               && rAssetTransStorno.AssetStandardId == standardId
               && rAssetTransStorno.AssetTransType  == RAssetTransType::Acquisition
               && rAssetTransStorno.RecId           == rAssetTrans.StornoRecId
               && rAssetTransStorno.TransDate       <  beginningOfYear;
    
        if (!rAssetTrans.RecId)
        {
            select firstonly TransDate, RecId from rAssetTrans
                order by TransDate
                where rAssetTrans.AccountNum            == _rAssetId
                   && rAssetTrans.AssetStandardId       == standardId
                   && rAssetTrans.AssetTransType        == RAssetTransType::Acquisition
                   && rAssetTrans.TransDate             >= beginningOfYear
                   && rAssetTrans.TransDate             <= dateTo
            notexists join rAssetTransStorno
                where rAssetTransStorno.AccountNum      == _rAssetId
                   && rAssetTransStorno.AssetStandardId == standardId
                   && rAssetTransStorno.AssetTransType  == RAssetTransType::Acquisition
                   && rAssetTransStorno.RecId           == rAssetTrans.StornoRecId
                   && rAssetTransStorno.TransDate       >= beginningOfYear
                   && rAssetTransStorno.TransDate       <= dateTo;
        }
    
        if (!rAssetTrans.RecId && calculationType == RTax25CalculationType::Partial)
        {
            select firstonly TransDate, RecId from rAssetTrans
                order by TransDate
                where rAssetTrans.AccountNum            == _rAssetId
                   && rAssetTrans.AssetStandardId       == standardId
                   && rAssetTrans.AssetTransType        == RAssetTransType::Acquisition
                   && rAssetTrans.TransDate             <  beginningOfYear
            exists join rAssetTransStorno
                where rassetTransStorno.AccountNum      == _rAssetId
                   && rassetTransStorno.AssetStandardId == standardId
                   && rassetTransStorno.AssetTransType  == RAssetTransType::Acquisition
                   && rassetTransStorno.RecId           == rAssetTrans.StornoRecId
                   && rassetTransStorno.TransDate       <  beginningOfYear
            exists join transLink
                where transLink.RefTableId    == rAssetTransStorno.TableId &&
                      transLink.RefSec        == rAssetTransStorno.RecId   &&
                      transLink.AccountingDate > beginningOfYear;
    
            if (!rAssetTrans.RecId)
            {
                select firstonly TransDate, RecId from rAssetTrans
                    order by TransDate
                    where rAssetTrans.AccountNum            == _rAssetId
                       && rAssetTrans.AssetStandardId       == standardId
                       && rAssetTrans.AssetTransType        == RAssetTransType::Acquisition
                       && rAssetTrans.TransDate             >= beginningOfYear
                       && rAssetTrans.TransDate             <= dateTo
                exists join rAssetTransStorno
                    where rassetTransStorno.AccountNum      == _rAssetId
                       && rassetTransStorno.AssetStandardId == standardId
                       && rassetTransStorno.AssetTransType  == RAssetTransType::Acquisition
                       && rassetTransStorno.RecId           == rAssetTrans.StornoRecId
                       && rassetTransStorno.TransDate       >= beginningOfYear
                       && rassetTransStorno.TransDate       <= dateTo
                exists join transLink
                    where transLink.RefTableId    == rAssetTransStorno.TableId &&
                          transLink.RefSec        == rAssetTransStorno.RecId   &&
                          transLink.AccountingDate > dateTo;
            }
        }
    
        return rAssetTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisposalDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrives disposal date of fixed asset. If date found, such fixed asset will be excluded from register calculation.
    /// </summary>
    /// <param name="_rAssetId">
    ///  Id of fixed asset.
    /// </param>
    /// <returns>
    ///  Date of disposal of fixed asset.
    /// </returns>
    /// <remarks>
    ///  Fixed assets which were disposed before beginning of year excluded from calculation.
    /// But for partial correction, we must take into account only records which were made only before beginning of year.
    /// </remarks>
    private RAssetDisposalDate getDisposalDate(RAssetId _rAssetId)
    {
        RAssetTrans             rAssetTrans;
        TransLink_RU            transLink;

        if (calculationType == RTax25CalculationType::Partial)
        {
            select firstonly TransDate, RecId from rAssetTrans
                order by TransDate
                where rAssetTrans.AccountNum            == _rAssetId
                   && rAssetTrans.AssetStandardId       == standardId
                   && (rAssetTrans.AssetTransType       == RAssetTransType::Disposal
                   || rAssetTrans.AssetTransType        == RAssetTransType::DisposalSale
                   || rAssetTrans.AssetTransType        == RAssetTransType::DisposalScrap)
                   && rAssetTrans.TransDate             <  beginningOfYear
                notexists join transLink
                    where transLink.RefTableId       == rAssetTrans.TableId &&
                          transLink.RefSec           == rAssetTrans.RecId   &&
                          transLink.AccountingDate   >= beginningOfYear;
        }
        else
        {
            select firstonly TransDate, RecId from rAssetTrans
                order by TransDate
                where rAssetTrans.AccountNum            == _rAssetId
                   && rAssetTrans.AssetStandardId       == standardId
                   && rAssetTrans.StornoRecId           == 0
                   && (rAssetTrans.AssetTransType       == RAssetTransType::Disposal
                   || rAssetTrans.AssetTransType        == RAssetTransType::DisposalSale
                   || rAssetTrans.AssetTransType        == RAssetTransType::DisposalScrap)
                   && rAssetTrans.TransDate             <  beginningOfYear;
        }
    
        return rAssetTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
    
        ret = super();
    
        if (isCorrection)
        {
            calculationType = dialogCalculationType.value();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoryQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query which iterates over the asset history records.
    /// </summary>
    /// <param name="_assetId">
    /// An asset id.
    /// </param>
    /// <param name="_assetDistribution">
    /// A distribution recId.
    /// </param>
    /// <param name="_dateFrom">
    /// A starting date of the period.
    /// </param>
    /// <param name="_dateTo">
    /// An ending date of the period.
    /// </param>
    /// <returns>
    /// A <c>QueryRun</c> object for a history records query.
    /// </returns>
    /// <remarks>
    /// The query gathers the history records for the given period
    /// plus the last record from the dateFrom perspertive.
    /// </remarks>
    private QueryRun getHistoryQuery(RAssetId _assetId, TransDate _dateFrom, TransDate _dateTo)
    {
        Query query = new query();
        QueryBuildDataSource qbdsRAssetHistory;
        TransDate firstHistoryRecDate = RAssetTaxAllowanceHistory::findLast(_dateFrom, _assetId, false).StartDate;

        qbdsRAssetHistory = query.addDataSource(tablenum(RAssetTaxAllowanceHistory));
        qbdsRAssetHistory.addSortField(fieldNum(RAssetTaxAllowanceHistory, StartDate), SortOrder::Ascending);
        findOrCreateRange_W(qbdsRAssetHistory, fieldNum(RAssetTaxAllowanceHistory, AssetId), queryValue(_assetId));
        findOrCreateRange_W(qbdsRAssetHistory, fieldNum(RAssetTaxAllowanceHistory, StartDate), queryRange(firstHistoryRecDate, _dateTo));

        return new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes query which selects fixed assets which will be processed in register.
    /// </summary>
    /// <returns>
    ///  <c>Query</c> object.
    /// </returns>
    /// <remarks>
    ///  For partial correction, only those fixed assets selected which has transactions in register period made after period end.
    /// </remarks>
    private Query initQuery()
    {
        QueryBuildDataSource qbds, qbdsAssetTrans, qbdsAssetTable;
        Query                query = new Query();

        qbdsAssetTable = query.addDataSource(tableNum(RAssetTable));

        qbdsAssetTable.addRange(fieldNum(RAssetTable, AssetType)).value(int2Str(any2Int(RAssetType::LandBuilding)));
        qbdsAssetTable.addRange(fieldNum(RAssetTable, AssetType)).value(RAssetTable::movablesFixedAssetTypeStr());

        qbds = qbdsAssetTable.addDataSource(tableNum(RAssetStandards));
        qbds.addLink(fieldNum(RAssetTable, AccountNum), fieldNum(RAssetStandards, AssetId));
        qbds.addRange(fieldNum(RAssetStandards, AssetStandardId)).value(queryValue(standardId));
        qbds.joinMode(JoinMode::ExistsJoin);
    
        if (calculationType == RTax25CalculationType::Partial)
        {
            qbdsAssetTrans = qbds.addDataSource(tableNum(RAssetTrans));
            qbdsAssetTrans.addLink(fieldNum(RAssetStandards, AssetId), fieldNum(RAssetTrans, AccountNum));
            qbdsAssetTrans.addRange(fieldNum(RAssetTrans, AssetStandardId)).value(queryValue(standardId));
            qbdsAssetTrans.addRange(fieldNum(RAssetTrans, TransDate)).value(queryRange(SysQuery::valueUnlimited(), dateTo));
            qbdsAssetTrans.joinMode(JoinMode::ExistsJoin);
    
            qbds = qbdsAssetTrans.addDataSource(tableNum(TransLink_RU));
            qbds.addLink(fieldNum(RAssetTrans, TableId), fieldNum(TransLink_RU, RefTableId));
            qbds.addLink(fieldNum(RAssetTrans, RecId), fieldNum(TransLink_RU, RefSec));
            qbds.addRange(fieldNum(TransLink_RU, AccountingDate)).value(queryRange(dateTo + 1, SysQuery::valueUnlimited()));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.fetchMode(QueryFetchMode::One2One);
        }
    
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalcCadastralValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Defines, which assets must be caclulated using cadastral value.
    /// </summary>
    /// <param name="_rAssetTable">
    ///  <c>RAssetTable</c> record.
    /// </param>
    /// <returns>
    ///  True, if fixed asset value must be calculated using cadastral value, otherwise false.
    /// </returns>
    private boolean mustCalcCadastralValue(RAssetTable _rAssetTable)
    {
        return _rAssetTable.AssetType == RAssetType::LandBuilding &&
           _rAssetTable.assessedTaxBaseType() == RAssetAssessedTaxBaseType::CadastralValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion, #currentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Performs operations after register is calculated.
    /// </summary>
    /// <remarks>
    ///  For this register, saves type of calculation and reverts values in SysLastValue to Full calculation.
    /// </remarks>
    public void postCalc()
    {
        registerJournalTrans.CalculationType = calculationType;
    
        super();
    
        calculationType = RTax25CalculationType::Full;
    
        this.saveLast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container   packedSuper;
        Version     version = RunBase::getVersion(packedClass);
        boolean     ret = true;
    
        switch (version)
        {
            case #currentVersion:
                [version, #currentList, packedSuper] = packedClass;
                ret = super(packedSuper);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>