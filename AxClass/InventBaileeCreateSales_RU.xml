<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBaileeCreateSales_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventBaileeCreateSales_RU extends RunBaseBatch implements BatchRetryable
{
    DialogRunbase       dialog;

    NoYes               calcSumByDay;
    DialogField         dialogCalcSumByDay;
    protected const str DialogCalcSumByDayName = 'dialogCalcSumByDay';

    CustAccount         custAccount;
    DialogField         dialogCustAccount;
    protected const str DialogCustAccountName = 'dialogCustAccount';

    SalesAgreementId    salesAgreementId;
    DialogField         dialogSalesAgreementId;
    protected const str DialogSalesAgreementIdName = 'dialogSalesAgreementId';

    InventJournalNameId inventJournalNameId;
    DialogField         dialogInventJournalNameId;
    protected const str DialogInventJournalNameIdName = 'dialogInventJournalNameId';

    MainAccountNum      mainAccountNumOffset;
    DialogField         dialogmainAccountNumOffset;

    NoYes               inventJournalStorno;
    DialogField         dialogInventJournalStorno;
    protected const str DialogInventJournalStornoName = 'dialogInventJournalStorno';

    InventDim           inventJournalTransInventDim;
    DialogGroup         dialogGroupInventJournalTransInventDim;
    protected const str DialogDimName = 'dialogDim';

    QueryRun            queryRun;
    Map                 inventBatchMap;
    Map                 inventJournalMap;
    Map                 salesTableMap;
    Map                 salesLineMap;

    protected const Version CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventJournalTrans</Name>
				<Source><![CDATA[
    protected InventJournalId createInventJournalTrans(InventBaileeCalcTable_RU _calcTable)
    {
        InventBaileeCalcTrans_RU    calcTrans;

        InventJournalTable          inventJournalTable;
        InventJournalTrans          inventJournalTrans;

        InventJournalTableData      journalTableData;

        InventDim                   inventDim;
        InventBatchId               inventBatchId;
        InventBatch                 inventBatch;

        TransDate                   transDate;
        InventQty                   qty;
        ItemId                      calcItemId;
        PriceCur                    calcPrice;
        Map                         calcTransMap = new Map(Types::Container, Types::Real);

        void createInventJournalTable()
        {
            if (inventJournalMap.exists([_calcTable.InventOwnerId, _calcTable.CurrencyCode]))
            {
                inventJournalTable = inventJournalMap.lookup([_calcTable.InventOwnerId, _calcTable.CurrencyCode]);
            }

            journalTableData = JournalTableData::newTable(inventJournalTable);

            if (! inventJournalTable.RecId)
            {
                inventJournalTable.JournalId      = journalTableData.nextJournalId();
                journalTableData.initFromJournalName(InventJournalName::find(inventJournalNameId));
                journalTableData.initFromJournalName(journalTableData.journalStatic().findJournalName(inventJournalTable.JournalNameId));
                inventJournalTable.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountId(mainAccountNumOffset);
                inventJournalTable.insert();

                info(strFmt("@GLS115631", inventJournalTable.JournalId),
                     '',
                     SysInfoAction_TableField::newBuffer(inventJournalTable));
            }
        }

        while select * from calcTrans
            where calcTrans.CalcId          == _calcTable.CalcId
               && calcTrans.CalcAmountCur
        {
            for (transDate = (calcTrans.FromDate + calcTrans.CalcFreeDays);
            transDate <= (calcSumByDay ? (calcTrans.FromDate + calcTrans.CalcFreeDays) : calcTrans.ToDate);
            transDate++)
            {
                if (! inventBatchMap.exists([_calcTable.InventOwnerId,
                                             _calcTable.CurrencyCode,
                                             calcTrans.CalcItemId,
                                             calcTrans.CalcPrice,
                                             transDate]))
                {
                    InventNumGroup inventNumGroup = InventNumGroup::find(InventTable::find(calcTrans.CalcItemId).BatchNumGroupId);
                    if (! inventNumGroup)
                    {
                        throw error(strFmt("@SYS3312",inventNumGroup.NumGroupId));
                    }

                    inventNumGroup.InclExpectedDate     = NoYes::No;
                    inventNumGroup.InclInventTransId    = NoYes::No;
                    inventNumGroup.InclReferenceId      = NoYes::No;
                    inventBatchId = inventNumGroup.buildNumberParameters(dateNull(), '', '', extendedTypeNum(InventBatchId));
                    if (! inventBatchId)
                    {
                        throw error(strFmt("@SYS54023", inventNumGroup.NumGroupId));
                    }

                    if (! InventBatch::exist(inventBatchId, calcTrans.CalcItemId))
                    {
                        inventBatch.InventBatchId = inventBatchId;
                        inventBatch.ItemId        = calcTrans.CalcItemId;
                        inventBatch.ProdDate      = transDate;
                        inventBatch.ExpDate       = calcTrans.ToDate;
                        inventBatch.insert();
                    }

                    inventBatchMap.insert([_calcTable.InventOwnerId,
                                           _calcTable.CurrencyCode,
                                           calcTrans.CalcItemId,
                                           calcTrans.CalcPrice,
                                           transDate], inventBatchId);
                }

                inventBatchId = inventBatchMap.lookup([_calcTable.InventOwnerId,
                                                       _calcTable.CurrencyCode,
                                                       calcTrans.CalcItemId,
                                                       calcTrans.CalcPrice,
                                                       transDate]);

                qty = 0;
                if (calcTransMap.exists([calcTrans.CalcItemId, calcTrans.CalcPrice, inventBatchId]))
                {
                    qty = calcTransMap.lookup([calcTrans.CalcItemId, calcTrans.CalcPrice, inventBatchId]);
                }
                Factor qtyFactor = 1.0;
                if (! calcSumByDay)
                {
                    qtyFactor = (calcTrans.ToDate - (calcTrans.FromDate + calcTrans.CalcFreeDays) + 1);
                    if (! qtyFactor)
                    {
                        qtyFactor = 1.0;
                    }
                }
                calcTransMap.insert([calcTrans.CalcItemId, calcTrans.CalcPrice, inventBatchId], calcTrans.CalcQty / qtyFactor + qty);
            }
        }

        inventJournalTable = null;
        MapEnumerator calcTransEnumerator = calcTransMap.getEnumerator();
        while (calcTransEnumerator.moveNext())
        {
            [calcItemId, calcPrice, inventBatchId] = calcTransEnumerator.currentKey();
            qty = calcTransEnumerator.currentValue();
            if (! qty)
            {
                continue;
            }

            if (! inventJournalTable)
            {
                createInventJournalTable();
            }

            inventJournalTrans.clear();
            InventJournalTransData journalTransData = journalTableData.journalStatic().newJournalTransData(inventJournalTrans, journalTableData);
            if (inventJournalTable.NumOfLines)
            {
                journalTransData.parmLastLineNum(inventJournalTable.NumOfLines);
            }
            journalTransData.initFromJournalTable();

            inventJournalTrans.TransDate    = _calcTable.CalcDate;
            inventJournalTrans.ItemId       = calcItemId;
            inventJournalTrans.Qty          = qty;

            SalesAgreementHeaderExt_RU salesAgreementHeaderExt = _calcTable.inventOwner().salesAgreementHeaderExt();
            SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(salesAgreementHeaderExt.AgreementHeader);
            inventJournalTrans.DefaultDimension = salesAgreementHeader ?
                                                  salesAgreementHeader.DefaultDimension :
                                                  _calcTable.inventOwner().custTable().DefaultDimension;

            inventDim.initFromInventDim(inventJournalTransInventDim);
            inventDim.InventOwnerId_RU      = _calcTable.InventOwnerId;
            inventDim.InventBatchId         = inventBatchId;
            inventJournalTrans.InventDimId  = InventDim::findOrCreate(inventDim).InventDimId;

            if (inventJournalTrans.Qty < 0 && inventJournalStorno)
            {
                inventJournalTrans.Storno_RU = NoYes::Yes;
            }

            journalTransData.create();
        }
        if (inventJournalTable)
        {
            inventJournalTable.update();
            inventJournalMap.insert([_calcTable.InventOwnerId, _calcTable.CurrencyCode], inventJournalTable);
        }

        return inventJournalTable.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSales</Name>
				<Source><![CDATA[
    protected void createSales()
    {
        Query                   query = new Query();

        QueryBuildDataSource qbdsInventSum = query.addDataSource(tableNum(InventSum));
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            qbdsInventSum.addRange(fieldNum(InventSum, InventProfileId_RU)).value(inventJournalTransInventDim.InventProfileId_RU);
        }

        QueryBuildDataSource qbdsInventDim = qbdsInventSum.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.relations(true);
        qbdsInventDim.addRange(fieldNum(InventDim, InventProfileId_RU)).value(inventJournalTransInventDim.InventProfileId_RU);

        QueryBuildDataSource qbdsInventOwner = qbdsInventDim.addDataSource(tableNum(InventOwner_RU));
        qbdsInventOwner.joinMode(JoinMode::ExistsJoin);
        qbdsInventOwner.relations(true);
        qbdsInventOwner.addRange(fieldNum(InventOwner_RU, AccountType)).value(queryValue(InventOwnerAccountType_RU::Vend));

        if (custAccount)
        {
            qbdsInventOwner.addRange(fieldNum(InventOwner_RU, AccountNumRelated)).value(custAccount);
        }

        if (salesAgreementId)
        {
            qbdsInventOwner.addRange(fieldNum(InventOwner_RU, RelatedAgreementHeaderExt)).value(
                queryValue(AgreementHeaderExt_RU::findByAgreementId(salesAgreementId).RecId));
        }

        QueryRun queryRunInventSum = new QueryRun(query);
        while (queryRunInventSum.next())
        {
            InventSum inventSum = queryRunInventSum.get(tableNum(InventSum));
            InventDim inventDim = queryRunInventSum.get(tableNum(InventDim));
            InventIAvailability inventAvailability = InventAvailabilityProvider::findBySumDim(inventSum, inventDim).parmInventAvailability();

            InventQtyAvailPhysical availPhysical = inventAvailability.availPhysical();

            if (availPhysical != 0.0)
            {
                this.createSalesLine(inventDim, inventSum.ItemId, availPhysical, inventAvailability.ordered());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLine</Name>
				<Source><![CDATA[
    protected void createSalesLine(
        InventDim               _inventDim,
        ItemId                  _itemId,
        InventQtyAvailPhysical  _availPhysical,
        InventQtyOrdered        _ordered)
    {
        CurrencyCode                currencyCode;
        SalesTable                  salesTable;
        SalesLine                   salesLine;
        InventDim                   inventDimPhysical;

        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>

        if (_availPhysical < 0 && _availPhysical + _ordered >= 0)
        {
            return;
        }
        inventDimPhysical.copyDimPhysical_RU(InventDimGroupSetup::newItemId(_itemId), _inventDim);
        inventDimPhysical = InventDim::findOrCreate(inventDimPhysical);
        if (_inventDim.InventOwnerId_RU)
        {
            SalesAgreementHeaderExt_RU salesAgreementHeaderExt = _inventDim.inventOwner_RU().salesAgreementHeaderExt();
            SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(salesAgreementHeaderExt.AgreementHeader);

            currencyCode = salesAgreementHeader?
                           salesAgreementHeader.Currency :
                           _inventDim.inventOwner_RU().custTable().Currency;
        }
        else
        {
            currencyCode = CompanyInfoHelper::standardCurrency();
        }

        if (salesLineMap.exists([_inventDim.InventOwnerId_RU,
                                 currencyCode,
                                 _availPhysical > 0.0,
                                 _itemId,
                                 inventDimPhysical.InventDimId]))
        {
            salesLine = salesLineMap.lookup([_inventDim.InventOwnerId_RU,
                                             currencyCode,
                                             _availPhysical > 0.0,
                                             _itemId,
                                             inventDimPhysical.InventDimId]);
        }

        if (! salesLine)
        {
            // create new sales order line
            if (salesTableMap.exists([_inventDim.InventOwnerId_RU, currencyCode, _availPhysical > 0.0]))
            {
                salesTable = salesTableMap.lookup([_inventDim.InventOwnerId_RU, currencyCode, _availPhysical > 0.0]);
            }
            else
            if (! salesTable)
            {
                salesTable = this.createSalesTable(InventOwner_RU::find(_inventDim.InventOwnerId_RU), currencyCode);
                salesTableMap.insert([_inventDim.InventOwnerId_RU, currencyCode, _availPhysical > 0.0], salesTable);
            }

            InventTable inventTable = InventTable::find(_itemId);

            salesLine.clear();
            salesLine.SalesId = salesTable.SalesId;
            salesLine.initFromSalesTable(salesTable);
            salesLine.ItemId  = _itemId;
            salesLine.initFromInventTable(inventTable);
            salesLine.SalesUnit     = inventTable.inventUnitId();
            salesLine.SalesQty      = _availPhysical > 0 ?
                                          _availPhysical :
                                          _availPhysical + _ordered;
            salesLine.Reservation   = ItemReservation::Automatic;
            salesLine.InventDimId   = _inventDim.InventDimId;
            if (_inventDim.InventBatchId)
            {
                salesLine.PriceAgreementDate_RU = InventBatch::find(_inventDim.InventBatchId, _itemId).ProdDate;
            }

            salesLine.createLine(NoYes::No,     // validate
                                 NoYes::No,     // initFromSalesTable
                                 NoYes::No,     // initFromInventTable
                                 NoYes::Yes,    // calcInventQty
                                 NoYes::Yes,    // searchMarkup
                                 NoYes::Yes,    // searchPrice
                                 NoYes::Yes);   // checkReservation

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                TaxServiceTariff::insertTaxServiceTariffForNewParent(salesTable.TableId, salesTable.RecId, salesLine.TableId, salesLine.RecId);
            }
            // </GEEPL>
        }
        else
        {
            // update existing sales order line
            salesLine.SalesQty += _availPhysical > 0 ?
                                          _availPhysical :
                                          _availPhysical + _ordered;
            salesLine.salesQtyModified();
            salesLine.update();
        }
        salesLineMap.insert([_inventDim.InventOwnerId_RU,
                             currencyCode,
                             _availPhysical > 0.0,
                             _itemId,
                             inventDimPhysical.InventDimId], salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTable</Name>
				<Source><![CDATA[
    protected SalesTable createSalesTable(InventOwner_RU _inventOwner, CurrencyCode _currencyCode)
    {
        SalesTable salesTable;
        SalesTable_RU salesTableRU;
        CustTable custTable = CustTable::findByPartyRecId(_inventOwner.vendTable().Party);

        salesTable.initValue();
        salesTable.SalesId     = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
        salesTable.SalesType   = SalesType::Sales;
        salesTable.CustAccount = custTable.AccountNum;
        salesTable.initFromCustTable();

        // don't need to retrieve SalesTable_RU for a new SalesTable record
        salesTableRU.AgreementHeaderExt_RU = _inventOwner.RelatedAgreementHeaderExt;

        SalesAgreementHeaderExt_RU salesAgreementHeaderExt = SalesAgreementHeaderExt_RU::find(salesTableRU.AgreementHeaderExt_RU);
        SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(salesAgreementHeaderExt.AgreementHeader);
        if (salesAgreementHeader)
        {
            salesTable.packSalesTable_RU(salesTableRU);
            salesTable.initFromSalesAgreementHeader(salesAgreementHeader);
            salesTableRU = salesTable.salesTable_RU();
        }

        salesTable.CurrencyCode             = _currencyCode;
        salesTableRU.InventProfileType_RU   = InventProfileType_RU::NotSpecified;
        salesTableRU.InventProfileId_RU     = '';

        salesTable.packSalesTable_RU(salesTableRU);
        salesTable.insert();

        info(strFmt("@GLS115633", salesTable.SalesId),
                '',
                SysInfoAction_TableField::newBuffer(salesTable));

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogGroup     group2Col, groupLeft, groupRight;
        InventDimParm   inventDimParmDisabled;

        dialog = super();

        group2Col = dialog.addGroup('');
        group2Col.frameType(FormFrameType::None);
        group2Col.columns(2);
        group2Col.widthMode(1);

        groupLeft = dialog.addGroup('', group2Col);
        groupLeft.frameType(FormFrameType::None);
        groupLeft.widthMode(1);

        dialog.addGroup("@GLS114984", groupLeft);

        dialog.customFieldName_RU(DialogCalcSumByDayName);
        dialogCalcSumByDay = dialog.addFieldValue(extendedTypeStr(NoYesId), calcSumByDay, "@GLS115635", "@GLS115636");

        dialog.addGroup("@GLS115589", groupLeft);

        dialog.customFieldName_RU(DialogCustAccountName);
        dialogCustAccount = dialog.addFieldValue(extendedTypeStr(CustAccount), custAccount);

        dialog.customFieldName_RU(DialogSalesAgreementIdName);
        dialogSalesAgreementId = dialog.addFieldValue(extendedTypeStr(SalesAgreementId), salesAgreementId);
        dialogSalesAgreementId.lookupButton(FormLookupButton::Always);

        groupRight = dialog.addGroup('', group2Col);
        groupRight.frameType(FormFrameType::None);
        groupRight.widthMode(1);

        dialog.addGroup("@SYS26703", groupLeft);

        dialog.customFieldName_RU(DialogInventJournalNameIdName);
        dialogInventJournalNameId = dialog.addFieldValue(extendedTypeStr(InventJournalNameMovement), inventJournalNameId, "@SYS6790");
        dialogInventJournalNameId.mandatory_RU(true);

        dialogmainAccountNumOffset = dialog.addFieldValue(extendedTypeStr(MainAccountNum), mainAccountNumOffset, "@SYS11162", "@SYS4451");

        dialog.customFieldName_RU(DialogInventJournalStornoName);
        dialogInventJournalStorno = dialog.addFieldValue(extendedTypeStr(NoYesId), inventJournalStorno, "@GLS112464", "@SYS10336");

        inventDimParmDisabled.initProductDimensionsAllGroups();
        inventDimParmDisabled.InventBatchIdFlag     = NoYes::Yes;
        inventDimParmDisabled.InventOwnerIdFlag_RU  = NoYes::Yes;
        inventDimParmDisabled.InventSerialIdFlag    = NoYes::Yes;
        inventDimParmDisabled.InventGTDIdFlag_RU    = NoYes::Yes;
        dialogGroupInventJournalTransInventDim = inventJournalTransInventDim.addFieldsToDialog_RU(dialog,
                                                                                                  "@SYS53627",
                                                                                                  inventDimParmDisabled,
                                                                                                  groupRight,
                                                                                                  DialogDimName);

        this.dialogActivateFields();

        dialog.allowControlMethodOverload_RU(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogActivateFields</Name>
				<Source><![CDATA[
    protected void dialogActivateFields()
    {
        dialogSalesAgreementId.enabled(dialogCustAccount.value() != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCustAccount_modified</Name>
				<Source><![CDATA[
    protected boolean dialogCustAccount_modified()
    {
        boolean ret = dialog.curFormControl_RU().modified();

        dialog.dialogOnClient_RU().updateServer();

        dialogSalesAgreementId.value('');

        this.dialogActivateFields();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogDim_InventLocationId_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates dialogInventSiteId dialog field value when dialogDim_InventLocationId value is modified.
    /// </summary>
    /// <returns>
    ///     true if dialogDim_InventLocationId value is modified; otherwise, false.
    /// </returns>
    protected boolean dialogDim_InventLocationId_modified()
    {
        const str DialogInventSiteIdFieldName = 'dialogDim_InventSiteId';

        FormStringControl inventLocationIdControl = dialog.curFormControl_RU();
        InventLocationId  inventLocationId = inventLocationIdControl.text();
        boolean ret = inventLocationIdControl.modified();

        dialog.dialogOnClient_RU().updateServer();

        if (inventLocationId)
        {
            InventLocation inventLocation = inventLocation::find(inventLocationId);
            DialogField dialogInventSiteId = dialog.getDialogClass(DialogInventSiteIdFieldName);
            if (dialogInventSiteId)
            {
                dialogInventSiteId.value(inventLocation.InventSiteId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogDim_InventProfileId_RU_lookup</Name>
				<Source><![CDATA[
    protected void dialogDim_InventProfileId_RU_lookup()
    {
        dialog.dialogOnClient_RU().updateServer();
        InventProfile_RU::lookupInventProfileId(dialog.curFormControl_RU(), InventProfileType_RU::General);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogInventJournalNameId_modified</Name>
				<Source><![CDATA[
    protected boolean dialogInventJournalNameId_modified()
    {
        boolean ret = dialog.curFormControl_RU().modified();

        dialog.dialogOnClient_RU().updateServer();

        dialogmainAccountNumOffset.value(this.offsetAccountFromJournalNameId(dialogInventJournalNameId.value()));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSalesAgreementId_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates lookup for dialogSalesAgreementId dialog field.
    /// </summary>
    protected void dialogSalesAgreementId_lookup()
    {
        SalesTable salesTable;

        dialog.dialogOnClient_RU().updateServer();
        salesTable.CustAccount = dialogCustAccount.value();
        SalesAgreementHeader::salesAgreementLookup(dialog.curFormControl_RU(), salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        calcSumByDay            = dialogCalcSumByDay.value();
        custAccount             = dialogCustAccount.value();
        salesAgreementId        = dialogSalesAgreementId.value();
        inventJournalNameId     = dialogInventJournalNameId.value();
        mainAccountNumOffset    = dialogmainAccountNumOffset.value();
        inventJournalStorno     = dialogInventJournalStorno.value();
        inventJournalTransInventDim.getFromDialog_RU(dialog, dialogGroupInventJournalTransInventDim);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        inventJournalNameId = InventParameters::find().InventBaileeJournalNameId_RU;
        if (inventJournalNameId && ! mainAccountNumOffset)
        {
            mainAccountNumOffset = this.offsetAccountFromJournalNameId(inventJournalNameId);
        }

        if (! queryRun)
        {
            queryRun = new QueryRun(this.query());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        inventJournalMap    = new Map(Types::Container, Types::Record);
        inventBatchMap      = new Map(Types::Container, Types::String);
        salesTableMap       = new Map(Types::Container, Types::Record);
        salesLineMap        = new Map(Types::Container, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountFromJournalNameId</Name>
				<Source><![CDATA[
    private MainAccountNum offsetAccountFromJournalNameId(InventJournalNameId _inventJournalNameId)
    {
        return LedgerDimensionFacade::getMainAccountFromLedgerDimension(InventJournalName::find(_inventJournalNameId).LedgerDimension).MainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, 
            calcSumByDay,
            custAccount,
            salesAgreementId,
            inventJournalNameId,
            mainAccountNumOffset,
            inventJournalStorno,
            inventJournalTransInventDim,
            queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    public CustAccount parmCustAccount(CustAccount _custAccount = custAccount)
    {
        custAccount = _custAccount;
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventJournalNameId</Name>
				<Source><![CDATA[
    public InventJournalNameId parmInventJournalNameId(InventJournalNameId _inventJournalNameId = inventJournalNameId)
    {
        inventJournalNameId = _inventJournalNameId;
        return inventJournalNameId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventJournalStorno</Name>
				<Source><![CDATA[
    public NoYes parmInventJournalStorno(NoYes _inventJournalStorno = inventJournalStorno)
    {
        inventJournalStorno = _inventJournalStorno;
        return inventJournalStorno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventJournalTransInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventJournalTransInventDim(InventDim _inventJournalTransInventDim = inventJournalTransInventDim)
    {
        inventJournalTransInventDim = _inventJournalTransInventDim;
        return inventJournalTransInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainAccountNumOffset</Name>
				<Source><![CDATA[
    public MainAccountNum parmMainAccountNumOffset(MainAccountNum _mainAccountNumOffset = mainAccountNumOffset)
    {
        mainAccountNumOffset = _mainAccountNumOffset;
        return mainAccountNumOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAgreementId</Name>
				<Source><![CDATA[
    public SalesAgreementId parmSalesAgreementId(SalesAgreementId _salesAgreementId = salesAgreementId)
    {
        salesAgreementId = _salesAgreementId;
        return salesAgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventJournals</Name>
				<Source><![CDATA[
    protected void postInventJournals()
    {
        MapEnumerator                   mapEnumerator   = inventJournalMap.getEnumerator();
        Set                             postedJournals  = new Set(Types::Record);
        while (mapEnumerator.moveNext())
        {
            InventJournalTable inventJournalTable = mapEnumerator.currentValue();
            if (! postedJournals.in(inventJournalTable))
            {
                var journalCheckPost = InventJournalCheckPost::newJournalCheckPost(JournalCheckPostType::Post, inventJournalTable);
                journalCheckPost.parmAutoBlock(true);
                journalCheckPost.parmThrowCheckFailed(true);
                journalCheckPost.parmTransferErrors(false);
                journalCheckPost.runOperation();

                info(strFmt("@GLS115634", inventJournalTable.JournalId),
                     '',
                     SysInfoAction_TableField::newBuffer(inventJournalTable));

                postedJournals.add(inventJournalTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    protected Query query()
    {
        Query                   query = new Query();
        QueryBuildDataSource qbdsCalcTable = query.addDataSource(tableNum(InventBaileeCalcTable_RU));

        QueryBuildRange qbrClosed = qbdsCalcTable.addRange(fieldNum(InventBaileeCalcTable_RU, Closed));
        qbrClosed.status(RangeStatus::Hidden);
        qbrClosed.value(queryValue(NoYes::No));

        QueryBuildRange qbrInventJournalId = qbdsCalcTable.addRange(fieldNum(InventBaileeCalcTable_RU, InventJournalId));
        qbrInventJournalId.status(RangeStatus::Hidden);
        qbrInventJournalId.value(SysQuery::valueEmptyString());

        QueryBuildDataSource qbdsInventOwner = qbdsCalcTable.addDataSource(tableNum(InventOwner_RU));
        qbdsInventOwner.joinMode(JoinMode::InnerJoin);
        qbdsInventOwner.relations(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        const int RetryNum = 5;

        setPrefix(InventBaileeCreateSales_RU::description());

        if (! this.validate())
        {
            throw error("@SYS18447");
        }

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00050, funcName());

        try
        {
            ttsbegin;

            setPrefix(strFmt("@GLS115629", InventJournalType::Movement));

            QueryBuildDataSource qbdsCalcTable = queryRun.query().dataSourceTable(tableNum(InventBaileeCalcTable_RU));
            qbdsCalcTable.update(true);

            QueryBuildDataSource qbdsInventOwner = queryRun.query().dataSourceTable(tableNum(InventOwner_RU));
            if (custAccount)
            {
                qbdsInventOwner.addRange(fieldNum(InventOwner_RU, AccountNumRelated)).value(custAccount);
            }
            if (salesAgreementId)
            {
                qbdsInventOwner.addRange(fieldNum(InventOwner_RU, RelatedAgreementHeaderExt)).value(
                    queryValue(AgreementHeaderExt_RU::findByAgreementId(salesAgreementId).RecId));
            }

            while (queryRun.next())
            {
                InventBaileeCalcTable_RU calcTable = queryRun.get(tableNum(InventBaileeCalcTable_RU));

                calcTable.InventJournalId   = this.createInventJournalTrans(calcTable);
                calcTable.Closed            = NoYes::Yes;
                calcTable.update();
            }

            this.postInventJournals();

            ttscommit;

            ttsbegin;

            setPrefix("@GLS115630");

            this.createSales();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            queryRun.reset();
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch 
        {
            error(strFmt("@SYS63093","@GLS115557"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   packedQuery;

        switch (version)
        {
            case CurrentVersion:
                [version, calcSumByDay, custAccount,salesAgreementId, inventJournalNameId,
                    mainAccountNumOffset, inventJournalStorno, inventJournalTransInventDim, packedQuery] = packedClass;
                
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean              ok = super(calledFrom);

        boolean hasRelatedVendor()
        {
            DirPartyTable   dirPartyTable;
            CustTable       custTable;
            VendTable       vendTable;

            select firstOnly Party from custTable
            where custTable.AccountNum == custAccount
            join firstOnly RecId from dirPartyTable
            where dirPartyTable.RecId == custTable.Party
            join firstOnly Party from vendTable
            where vendTable.Party == dirPartyTable.RecId;

            return vendTable.Party != 0 ? true : false;
        }

        if (custAccount)
        {
            if (! hasRelatedVendor())
            {
                ok = checkFailed("@GLS115615");
            }
        }
        if (salesAgreementId)
        {
            SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::findAgreementId(salesAgreementId);
            if (salesAgreementHeader.CustAccount != custAccount)
            {
                ok = checkFailed("@GLS115616");
            }
            if (! salesAgreementHeader.purchAgreementHeader_RU())
            {
                ok = checkFailed("@GLS115617");
            }
        }

        if (! inventJournalNameId)
        {
            ok = checkFailed(strFmt("@GLS115618", "@SCM:SCM_Journal_Title_Movement"));
        }

        if (! mainAccountNumOffset || ! LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountId(mainAccountNumOffset))
        {
            ok = checkFailed("@GLS115619");
        }

        if (! inventJournalTransInventDim.InventProfileId_RU)
        {
            ok = checkFailed("@GLS115620");
        }
        else
        {
            InventProfile_RU inventProfile = InventProfile_RU::find(inventJournalTransInventDim.InventProfileId_RU);
            if (inventProfile)
            {
                if (! inventProfile.InventOwnerIdCheckSalesOrder)
                {
                    ok = checkFailed("@GLS115621");
                }
                if (inventProfile.InventProfileType != InventProfileType_RU::General)
                {
                    ok = checkFailed(strFmt("@GLS115622", InventProfileType_RU::General));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventBaileeCreateSales_RU construct()
    {
        return new InventBaileeCreateSales_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS115557";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        InventBaileeCreateSales_RU inventBaileeCreateSales = InventBaileeCreateSales_RU::construct();

        if (inventBaileeCreateSales.prompt())
        {
            inventBaileeCreateSales.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>