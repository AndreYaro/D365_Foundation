<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCaseCopying</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesPurchCopyFactory(SalesPurchCopy::CopyAllHeader, tableStr(PurchRFQCaseTable))]
[SalesPurchCopyFactory(SalesPurchCopy::CopyAllLines, tableStr(PurchRFQCaseTable))]
public class PurchRFQCaseCopying extends PurchCopyingBase
{
    PurchRFQCaseTable   purchRFQCaseTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyHeader</Name>
				<Source><![CDATA[
    void copyHeader()
    {
        select firstonly tmpFrmVirtualHeader;

        if (tmpFrmVirtualHeader.RecId)
        {
            tmpFrmVirtualHeader.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLine</Name>
				<Source><![CDATA[
    protected void copyLine(TmpFrmVirtual _tmpFrmVirtualLines)
    {
        Common                      fromTrans;
        PurchRFQCaseLine            fromPurchRFQCaseLine;
        VendInvoiceTrans            fromVendInvoiceTrans;
        PurchLine                   fromPurchLine;
        AgreementLine               fromAgreementLine;
        CurrencyCode                currencyCode;
        PurchRFQCaseLine            purchRFQCaseLine;

        purchRFQCaseLine.clear();

        purchRFQCaseLine.LineNum = this.lineNum();
        purchRFQCaseLine.initFromPurchRFQCaseTable(purchRFQCaseTable);

        switch (tmpFrmVirtualLines.TableNum)
        {
            case tableNum(PurchRFQCaseLine):
                fromPurchRFQCaseLine = PurchRFQCaseLine::findRecId(tmpFrmVirtualLines.RecordNo);
                fromTrans = fromPurchRFQCaseLine;
                purchRFQCaseLine.initFromPurchRFQCaseLine(fromPurchRFQCaseLine, copyPrecisely, !searchPrice, copyQty, tmpFrmVirtualLines.Qty, tmpFrmVirtualLines.PdsCWQty);
                if (purchRFQCaseLine.CurrencyCode != fromPurchRFQCaseLine.CurrencyCode)
                {
                    currencyCode = fromPurchRFQCaseLine.CurrencyCode;
                }
                break;

            case tableNum(AgreementLineQuantityCommitment):
            case tableNum(AgreementLineVolumeCommitment):
            case tableNum(AgreementLine):
                fromAgreementLine = AgreementLine::find(tmpFrmVirtualLines.RecordNo);
                fromTrans = fromAgreementLine;
                purchRFQCaseLine.initFromAgreementLine(fromAgreementLine,copyPrecisely, !searchPrice, copyQty, tmpFrmVirtualLines.Qty, tmpFrmVirtualLines.PdsCWQty);
                if (purchRFQCaseLine.CurrencyCode != fromAgreementLine.currencyCode())
                {
                    currencyCode = fromAgreementLine.currencyCode();
                }
                break;

            case tableNum(PurchLine):
                fromPurchLine = PurchLine::findRecId(tmpFrmVirtualLines.RecordNo);
                fromTrans = fromPurchLine;
                purchRFQCaseLine.initFromPurchLine(fromPurchLine, copyPrecisely, !searchPrice, copyQty, tmpFrmVirtualLines.Qty, tmpFrmVirtualLines.PdsCWQty);
                if (purchRFQCaseLine.CurrencyCode != fromPurchLine.CurrencyCode)
                {
                    currencyCode = fromPurchLine.CurrencyCode;
                }
                break;

            case tableNum(VendInvoiceTrans):
                fromVendInvoiceTrans = VendInvoiceTrans::findRecId(tmpFrmVirtualLines.RecordNo);
                fromTrans = fromVendInvoiceTrans;
                purchRFQCaseLine.initFromVendInvoiceTrans(fromVendInvoiceTrans, copyPrecisely, !searchPrice, copyQty, tmpFrmVirtualLines.Qty, tmpFrmVirtualLines.PdsCWQty);
                if (purchRFQCaseLine.CurrencyCode != fromVendInvoiceTrans.CurrencyCode)
                {
                    currencyCode = fromVendInvoiceTrans.CurrencyCode;
                }
                purchRFQCaseLine.ItemRefType        = InventRefType::Purch;
                purchRFQCaseLine.InventRefId        = fromVendInvoiceTrans.PurchID;
                purchRFQCaseLine.InventRefTransId   = fromVendInvoiceTrans.InventTransId;
                break;

            case tableNum(VendPackingSlipTrans):
                fromTrans = VendPackingSlipTrans::findRecId(tmpFrmVirtualLines.RecordNo);
                purchRFQCaseLine.initFromVendPackingSlipTrans(fromTrans, copyPrecisely, !searchPrice, copyQty, tmpFrmVirtualLines.Qty);
                break;
        }

        if (copyQty)
        {
            purchRFQCaseLine.PurchQty     = purchRFQCaseLine.PurchQty;
            purchRFQCaseLine.PurchQty     = decRound(purchRFQCaseLine.PurchQty * qtyFactor, UnitOfMeasure::unitOfMeasureDecimalPrecision(
                UnitOfMeasure::unitOfMeasureIdBySymbol(purchRFQCaseLine.PurchUnit)));
            purchRFQCaseLine.QtyOrdered   = purchRFQCaseLine.QtyOrdered;
            purchRFQCaseLine.QtyOrdered   = purchRFQCaseLine.QtyOrdered * qtyFactor;
        }
        else
        {
            purchRFQCaseLine.PurchQty     = 0;
            purchRFQCaseLine.QtyOrdered   = 0;
        }

        if (currencyCode)
        {
            purchRFQCaseLine.PurchPrice  = ExchangeRateHelper::curPrice2CurPrice(purchRFQCaseLine.PurchPrice, currencyCode, purchRFQCaseLine.CurrencyCode);
            purchRFQCaseLine.LineDisc    = ExchangeRateHelper::curPrice2CurPrice(purchRFQCaseLine.LineDisc, currencyCode, purchRFQCaseLine.CurrencyCode);
            purchRFQCaseLine.MultiLnDisc = ExchangeRateHelper::curPrice2CurPrice(purchRFQCaseLine.MultiLnDisc, currencyCode, purchRFQCaseLine.CurrencyCode);
            purchRFQCaseLine.PurchMarkup = ExchangeRateHelper::curPrice2CurPrice(purchRFQCaseLine.PurchMarkup, currencyCode, purchRFQCaseLine.CurrencyCode);
            purchRFQCaseLine.LineAmount  = CurrencyExchangeHelper::curAmount2CurAmount(purchRFQCaseLine.LineAmount, currencyCode, purchRFQCaseLine.CurrencyCode);
        }

        purchRFQCaseLine.LineAmount    = purchRFQCaseLine.LineAmount;
        purchRFQCaseLine.LineAmount    = purchRFQCaseLine.calcLineAmount();
        InventMovement::bufferSetRemainQty(purchRFQCaseLine);
        purchRFQCaseLine.createLine(1, 0, 0, !copyPrecisely, searchPrice, false);

        if (copyMarkup)
        {
            Markup::copy(false, fromTrans, purchRFQCaseLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLines</Name>
				<Source><![CDATA[
    protected void deleteLines()
    {
        PurchRFQCaseLine   purchRFQCaseLine;

        while select forupdate purchRFQCaseLine
              where purchRFQCaseLine.rfqCaseId == purchRFQCaseTable.rfqCaseId
                &&  purchRFQCaseLine.StatusHigh == PurchRFQStatus::Created
        {
            if (purchRFQCaseLine.validateDelete())
                purchRFQCaseLine.delete(true, false);
            else
                throw error("@SYS18722");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void initParameters(PurchCopyingContract _contract)
    {
        purchRFQCaseTable   = _contract.parmCallingTable() as PurchRFQCaseTable;
        super(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCode</Name>
				<Source><![CDATA[
    /**
        Prompts the user if the currency code is being changed as a consequence of the copying
        Note - The actual recalculation does not take place in this method
    **/
    protected void promptConvertCurrencyCode()
    {
        select firstonly tmpFrmVirtualHeader;

        if (tmpFrmVirtualHeader)
        {
            switch (tmpFrmVirtualHeader.TableNum)
            {
                case tableNum(PurchRFQCaseTable)           :
                        headerCurrencyCode = PurchRFQCaseTable::findRecId(tmpFrmVirtualHeader.RecordNo).CurrencyCode;
                        break;
                default                             :
                        headerCurrencyCode = purchRFQCaseTable.CurrencyCode;
                        break;
            }

            if (headerCurrencyCode != purchRFQCaseTable.CurrencyCode &&
                 (PurchLine::exist(purchRFQCaseTable.rfqCaseId) || MarkupTrans::exist(purchRFQCaseTable.TableId, purchRFQCaseTable.RecId)))
            {
                [convertCurrency, tradeCurencyConversion] = PurchTable::promptConvertCurrencyCode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCopy</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes a copying on the server
    /// </summary>
    /// <param name="_salesPurchCopy">
    ///   An element from the <c>SalesPurchCopy</c> enum.
    /// </param>
    /// <param name="_packedContract">
    ///   A packed version of the <c>PurchCopyingContract</c> class.
    /// </param>
    public static void newCopy(
        SalesPurchCopy          _salesPurchCopy,
        PurchCopyingContract    _contract)
    {
        PurchRFQCaseTable purchRFQCaseTable;

        PurchRFQCaseCopying purchCopying = PurchCopyingBase::construct(_salesPurchCopy, purchRFQCaseTable);

        purchCopying.initParameters(_contract);
        purchCopying.copy();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>