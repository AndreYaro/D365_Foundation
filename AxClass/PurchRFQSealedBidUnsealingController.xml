<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedBidUnsealingController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQSealedBidUnsealingController</c> class is used to unseal RFQ cases.
/// </summary>
internal final class PurchRFQSealedBidUnsealingController extends RunBaseBatch implements BatchRetryable
{
    private PurchRFQCaseRecId rfqCaseRecId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.ParmList
        rfqCaseRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRFQCaseTableRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal PurchRFQCaseRecId parmRFQCaseTableRecId(PurchRFQCaseRecId _rfqCaseRecId = rfqCaseRecId)
    {
        rfqCaseRecId = _rfqCaseRecId;
        return rfqCaseRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container pack()
    {
        return  [#CurrentVersion, #ParmList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean unpack(container _packedClass)
    {
        boolean status;
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmList] = _packedClass;
                status = true;
                break;

            default:
                status = false;
        }
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Object dialog()
    {
        return this.dialogInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static ClassDescription description()
    {
        return "@SCM:PurchRFQUnsealingHandler";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchRFQCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate new instance of the PurchRFQSealedBidUnsealingController class.
    /// </summary>
    /// <param name="_rfqCaseRecId">The <c>PurchRFQCaseRecId</c> of the RFQ Case to be unsealed.</param>
    /// <returns>New instance of the PurchRFQSealedBidUnsealingController class</returns>
    [Hookable(false)]
    public static PurchRFQSealedBidUnsealingController newPurchRFQCase(PurchRFQCaseRecId _rfqCaseRecId)
    {
        PurchRFQSealedBidUnsealingController unsealingController = new PurchRFQSealedBidUnsealingController();

        unsealingController.getLast();
        unsealingController.parmRFQCaseTableRecId(_rfqCaseRecId);

        return unsealingController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard constructor pattern to create a new instance of PurchRFQSealedBidUnsealingController.
    /// </summary>
    /// <param name="_rfqCaseRecId">The <c>PurchRFQCaseRecId</c> of the RFQ Case to be unsealed.</param>
    /// <returns>New instance of PurchRFQSealedBidUnsealingController</returns>
    internal static PurchRFQSealedBidUnsealingController construct(PurchRFQCaseRecId _rfqCaseRecId)
    {
        return PurchRFQSealedBidUnsealingController::newPurchRFQCase(_rfqCaseRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void main(Args _args)
    {      
        PurchRFQCaseTable rfqCaseTable = _args.record() as PurchRFQCaseTable;

        if(!rfqCaseTable.RecId)
        {
            throw error(error::missingRecord(tableStr(PurchRFQCaseTable)));
        }

        PurchRFQSealedBidUnsealingController unsealingHandler = PurchRFQSealedBidUnsealingController::construct(rfqCaseTable.RecId);

        if (unsealingHandler.prompt())
        {
            unsealingHandler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        #OCCRetryCount

        try
        {
            PurchRFQSealedBidManager::unsealPurchRFQ(this.parmRFQCaseTableRecId());
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>