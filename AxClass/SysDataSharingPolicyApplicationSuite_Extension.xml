<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysDataSharingPolicyApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SysDataSharingPolicyApplicationSuite_Extension</c> contains the ApplicationSuite extending logic for the data shared tables.
/// </summary>
[ExtensionOf(tableStr(SysDataSharingPolicy))]
public final class SysDataSharingPolicyApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>crossCompaniesByCompanyAndTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static SetEnumerator crossCompaniesByCompanyAndTable(DataAreaId _currentCompanyId, TableName _tableName, boolean _skipCurrentCompany = true)
    {
        Set companySet = SysDataSharingPolicy::crossCompaniesByCompanyAndTableSet(_currentCompanyId, _tableName, _skipCurrentCompany);
        return companySet.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossCompaniesByCompanyAndTableSet</Name>
				<Source><![CDATA[
    private static Set crossCompaniesByCompanyAndTableSet(DataAreaId _currentCompanyId, TableName _tableName, boolean _skipCurrentCompany = true)
    {
        Set companySet = new Set(Types::String);

        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(_currentCompanyId, _tableName);

        if (policy.RecId && policy.IsEnabled)
        {
            if ((!_skipCurrentCompany || policy.MasterCompany != _currentCompanyId)
                && policy.MasterCompany)
            {
                companySet.add(policy.MasterCompany);
            }

            SysDataSharingOrganizationEnabled   enabledOrganization;
            while select enabledOrganization
                where enabledOrganization.DataSharingPolicy == policy.RecId
                   && (!_skipCurrentCompany || enabledOrganization.DataSharingCompany != _currentCompanyId)
            {
                companySet.add(enabledOrganization.DataSharingCompany);
            }
        }
        else
        {
            if (!_skipCurrentCompany)
            {
                companySet.add(_currentCompanyId);
            }
        }

        return companySet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossCompaniesByCompanyAndTables</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static SetEnumerator crossCompaniesByCompanyAndTables(DataAreaId _currentCompanyId, container _tableNames, boolean _skipCurrentCompany = true)
    {
        Set companySet;

        for (int i = 1; i <= conLen(_tableNames); i++)
        {
            TableName tableName = conPeek(_tableNames, i);

            Set companySetForTable = SysDataSharingPolicy::crossCompaniesByCompanyAndTableSet(_currentCompanyId, tableName, _skipCurrentCompany);

            if (!companySet)
            {
                companySet = companySetForTable;
            }
            else
            {
                companySet = Set::intersection(companySet, companySetForTable);
            }
        }

        return companySet.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSharingPolicyEnabledByCompanyAndTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isSharingPolicyEnabledByCompanyAndTable(DataAreaId _companyId, TableName _tableName)
    {
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(_companyId, _tableName);
        return policy.RecId && policy.IsEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSharingPolicyByCompanyAndTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static SysDataSharingPolicy findSharingPolicyByCompanyAndTable(DataAreaId _companyId, TableName _tableName)
    {
        SysDataSharingPolicy policy;

        boolean                             foundPolicy;
        SysDataSharingOrganizationEnabled   enabledOrganization;
        SysDataSharingRuleEnabled           enabledRule;
            
        while select enabledRule
            where enabledRule.SharedTableName == _tableName
            join policy
                where policy.RecId == enabledRule.DataSharingPolicy
            outer join enabledOrganization
                where enabledOrganization.DataSharingPolicy     == policy.RecId &&
                      enabledOrganization.DataSharingCompany    == _companyId
        {
            if (enabledOrganization.RecId)
            {
                foundPolicy = true;
                break;
            }

            if (policy.MasterCompany == _companyId)
            {
                foundPolicy = true;
                break;
            }
        }

        if (!foundPolicy)
        {
            policy = null;
        }

        return policy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areCompaniesInSupportedContryRegions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean areCompaniesInSupportedContryRegions(SysDataSharingPolicyRecId _policyRecId, TableName _tableName = '', container _unsupportedDataSharingCountryRegions = conNull())
    {
        boolean canEnable = true;
        
        LogisticsAddressCountryRegionISOCode    countryRegionISOCode;
        DataAreaId                              sharingCompanyId;

        SysDataSharingOrganization dataSharingOrganization;
        while select dataSharingOrganization
            where dataSharingOrganization.DataSharingPolicy == _policyRecId
        {
            if (!sharingCompanyId)
            {
                sharingCompanyId        = dataSharingOrganization.DataSharingCompany;
                countryRegionISOCode    = SysCountryRegionCode::countryInfo(dataSharingOrganization.DataSharingCompany);
            }
            else
            {
                if (countryRegionISOCode != SysCountryRegionCode::countryInfo(dataSharingOrganization.DataSharingCompany))
                {
                    canEnable = false;
                    break;
                }
            }
        }

        if (canEnable && sharingCompanyId && SysDataSharingPolicy::isSingleDataSharingPolicy(_policyRecId))
        {
            if (countryRegionISOCode != SysCountryRegionCode::countryInfo(SysDataSharingPolicy::find(_policyRecId).MasterCompany))
            {
                canEnable = false;
            }
        }
        
        if (!canEnable)
        {
            return checkFailed(strFmt("@ApplicationSuite_SysSharing:DataSharingPolicyCountryRegionWarning", _tableName));
        }
        else
        {
            if (sharingCompanyId && conLen(_unsupportedDataSharingCountryRegions))
            {
                canEnable = SysDataSharingPolicy::unsupportedIsoCountryCodes(sharingCompanyId, _tableName, _unsupportedDataSharingCountryRegions);
            }
        }

        return canEnable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompaniesAreInSupportedContryRegions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean validateCompaniesAreInSupportedContryRegions(
        SysDataSharingPolicyRecId _policyRecId,
        TableName _tableName = '',
        container _unsupportedDataSharingCountryRegions = conNull())
    {
        boolean canEnable = true;
        
        LogisticsAddressCountryRegionISOCode    countryRegionISOCode;
        DataAreaId                              sharingCompanyId;

        SysDataSharingOrganization dataSharingOrganization;
        while select dataSharingOrganization
            where dataSharingOrganization.DataSharingPolicy == _policyRecId
        {
            if (!sharingCompanyId)
            {
                sharingCompanyId = dataSharingOrganization.DataSharingCompany;
            }
        }

        if (sharingCompanyId 
            && conLen(_unsupportedDataSharingCountryRegions))
        {
            canEnable = SysDataSharingPolicy::unsupportedIsoCountryCodes(sharingCompanyId, _tableName, _unsupportedDataSharingCountryRegions);
        }

        return canEnable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areCompaniesInSameContryRegions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean areCompaniesInSameContryRegions(SysDataSharingPolicyRecId _policyRecId)
    {
        boolean areCompaniesInSameContryRegions = true;
        
        LogisticsAddressCountryRegionISOCode    countryRegionISOCode;
        DataAreaId                              sharingCompanyId;

        SysDataSharingOrganization dataSharingOrganization;
        while select dataSharingOrganization
            where dataSharingOrganization.DataSharingPolicy == _policyRecId
        {
            if (!sharingCompanyId)
            {
                sharingCompanyId        = dataSharingOrganization.DataSharingCompany;
                countryRegionISOCode    = SysCountryRegionCode::countryInfo(dataSharingOrganization.DataSharingCompany);
            }
            else
            {
                if (countryRegionISOCode != SysCountryRegionCode::countryInfo(dataSharingOrganization.DataSharingCompany))
                {
                    areCompaniesInSameContryRegions = false;
                    break;
                }
            }
        }

        if (areCompaniesInSameContryRegions && sharingCompanyId && SysDataSharingPolicy::isSingleDataSharingPolicy(_policyRecId))
        {
            if (countryRegionISOCode != SysCountryRegionCode::countryInfo(SysDataSharingPolicy::find(_policyRecId).MasterCompany))
            {
                areCompaniesInSameContryRegions = false;
            }
        }

        return areCompaniesInSameContryRegions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableCollection</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean canEnableCollection(SysDataSharingPolicyRecId _policyRecId, List _sharingList, TableName _tableName)
    {
        boolean canEnable = true;

        Query   dataSharingRuleQuery = new Query();
        QueryBuildDataSource    dataSharingRuleDataSource = dataSharingRuleQuery.addDataSource(tableNum(SysDataSharingRule));

        dataSharingRuleDataSource.addSelectionField(fieldNum(SysDataSharingRule, RecId), SelectionField::Count);
        dataSharingRuleDataSource.addRange(fieldNum(SysDataSharingRule, DataSharingPolicy)).value(queryValue(_policyRecId));

        ListEnumerator  sharingListEnumerator = _sharingList.getEnumerator();
        str             tableList;

        while (sharingListEnumerator.moveNext())
        {
            dataSharingRuleDataSource.addRange(fieldNum(SysDataSharingRule, SharedTableName)).value(queryValue(sharingListEnumerator.current()));

            if (tableList != '')
            {
                tableList += ' ';
            }
            tableList += sharingListEnumerator.current();
        }

        QueryRun queryRun = new QueryRun(dataSharingRuleQuery);
        queryRun.next();

        SysDataSharingRule  tableListRule = queryRun.get(tableNum(SysDataSharingRule));

        if (tableListRule.RecId != 0)
        {
            if (tableListRule.RecId != _sharingList.elements())
            {
                canEnable = checkFailed(strFmt("@ApplicationSuite_SysSharing:DataSharingPolicyMissingRelatedTablesWarning", _tableName, tableList));
            }
        }

        return canEnable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIncludedImplicitly</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isIncludedImplicitly(SysDataSharingPolicyRecId _policyRecId, TableName _tableName)
    {
        boolean                         isIncluded = false;

        SysDataSharingTableField        stagingInventTableFKField;
        SysDataSharingForeignKeyTable   foreignKeyTable;
        SysDataSharingRule              stagingRule;

        select firstonly RecId from stagingInventTableFKField
            where stagingInventTableFKField.DataSharingPolicy    == _policyRecId    &&
                  stagingInventTableFKField.IsForeignKey         == NoYes::Yes      &&
                  stagingInventTableFKField.IsShared             == NoYes::Yes
            exists join foreignKeyTable
                where foreignKeyTable.SourceTableName == stagingInventTableFKField.TableName &&
                      foreignKeyTable.SourceFieldName == stagingInventTableFKField.FieldName &&
                      foreignKeyTable.DestinationTableName == _tableName
            notexists join stagingRule
                where stagingRule.DataSharingPolicy == _policyRecId &&
                      stagingRule.SharedTableName   == foreignKeyTable.DestinationTableName;

        if (stagingInventTableFKField.RecId)
        {
            isIncluded = !checkFailed(strFmt("@ApplicationSuite_SysSharing:DataSharingPolicyCrossCheckWarning", _tableName));
        }

        return isIncluded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedIsoCountryCodes</Name>
				<Source><![CDATA[
    private static boolean unsupportedIsoCountryCodes(DataAreaId _sharingCompanyId, TableName _tableName, container _isoCountryCodes)
    {
        boolean isSupported = true;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(_isoCountryCodes, _sharingCompanyId))
        {
            isSupported = checkFailed(strFmt("@ApplicationSuite_SysSharing:DataSharingPolicyUnsupportedCountryRegionsWarning", _tableName, SysCountryRegionCode::countryInfo(_sharingCompanyId)));
        }

        return isSupported;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>