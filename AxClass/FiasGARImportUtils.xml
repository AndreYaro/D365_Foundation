<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiasGARImportUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class FiasGARImportUtils
{
    internal static const str ADDR_OBJ = 'ADDR_OBJ';
    internal static const str APARTMENT = 'APARTMENT';
    internal static const str HOUSE = 'HOUSE';
    internal static const str ROOM = 'ROOM';
    internal static const str STEAD = 'STEAD';
    internal static const str MUN_HIERARCHY = 'MUN_HIERARCHY';
    internal static const str MetadataADDHOUSE = 'ADDHOUSE';
    internal static const str MetadataOPERATIONE = 'OPERATION';

    internal static const str AddressHeirarchyFileNameFormat = 'AS_%1';
    internal static const str ParamsFileNameFormat = 'AS_%1_PARAMS';
    internal static const str MeataDataFileNameFormat = 'AS_%1_TYPES';

    // GAR address types that can be imported
    internal static const container AddressTypes = [ADDR_OBJ, APARTMENT, HOUSE, STEAD, ROOM];
    // GAR metadata types that can be imported
    internal static const container MetadataTypes = [MetadataADDHOUSE, MetadataOPERATIONE, ADDR_OBJ, APARTMENT, HOUSE, ROOM];

    // ER models that required to import GAR address
    internal static const str AddrObjModelName = 'GAR address import';
    internal static const str HierarchyModelName = 'GAR hierarchy import';
    internal static const str MetadataModelName = 'GAR metadata import';
    internal static const str ParamsModelName = 'GAR parameters import';
    internal static const str ConfigurationFormat = '%1 %2(RU)';

    // GAR levels in Address object
    internal static const str AddressObjectLevelState = '1';
    internal static const str AddressObjectLevelCounty = '3';
    internal static const str AddressObjectLevelUrbanRuralSettlement = '4';
    internal static const str AddressObjectLevelCityWithLevelNumTwo = '2';
    internal static const str AddressObjectLevelCityWithLevelNumFive = '5';
    internal static const str AddressObjectLevelLocality = '6';
    internal static const str AddressObjectLevelDistrict = '7';
    internal static const str AddressObjectLevelStreet = '8';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAddressFileNamePrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets GAR address file name prefix.
    /// E.g, address file name prefix should be AS_ADDR_OBJ if _fileName is AS_ADDR_OBJ_20211213_ca419d77-f4ed-4577-82f5-ef45bebd91d5.XML
    /// </summary>
    /// <param name = "_fileName">The full file name in GAR.</param>
    /// <returns>File name prefix.</returns>
    internal static str getAddressFileNamePrefix(str _fileName)
    {
        str fileNamePrefix;
        str fileNamePattern = '^([A-Z_])+';
        System.Text.RegularExpressions.Regex regex  = new System.Text.RegularExpressions.Regex(fileNamePattern);
        System.Text.RegularExpressions.Match regExMatch = regex.Match(_fileName);

        if (regExMatch && regExMatch.Success)
        {
            fileNamePrefix = regExMatch.get_Value();
            fileNamePrefix = strDel(fileNamePrefix, strLen(fileNamePrefix), 1);
        }
        return fileNamePrefix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressFileNameSuffix</Name>
				<Source><![CDATA[
    /// <summary>
    /// GAR address files name is in plural, except AS_ADDR_OBJ. All of GAR metadata files name is in singular.
    /// e.g., address file with name AS_HOUSES_20211213_a290d244-cea8-4b16-9faf-b76a48a51946.XML, address type is HOUSE, file name suffix is HOUSES.
    /// </summary>
    /// <param name = "_addrTypeName">The address type name.</param>
    /// <returns>The GAR files name surffix.</returns>
    internal static str getAddressFileNameSuffix(str _addrTypeName)
    {
        const str pluralInAddrFileName = 'S';

        if (_addrTypeName != FiasGARImportUtils::ADDR_OBJ)
        {
            _addrTypeName += pluralInAddrFileName;
        }
        return _addrTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllowedImportFielType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if GAR file is allowed import.
    /// E.g, file name with AS_HOUSES prefix should be allowed import, but file name with AS_CARPLACES should not import.
    /// </summary>
    /// <param name = "_fileNamePrefix">The file name prefix.</param>
    /// <returns>true if allowed import, otherwise false.</returns>
    internal static boolean isAllowedImportFielType(str _fileNamePrefix)
    {
        boolean isAllowedImport = false;

        if (_fileNamePrefix == strFmt(AddressHeirarchyFileNameFormat, FiasGARImportUtils::MUN_HIERARCHY))
        {
            return true;
        }

        for (int i = 1; i <= conLen(FiasGARImportUtils::AddressTypes); i++)
        {
            str addressFileNameSuffix = FiasGARImportUtils::getAddressFileNameSuffix(conPeek(FiasGARImportUtils::AddressTypes, i));
            if (_fileNamePrefix == strFmt(AddressHeirarchyFileNameFormat, addressFileNameSuffix)
                || _fileNamePrefix == strFmt(ParamsFileNameFormat, addressFileNameSuffix))
            {
                return true;
            }
        }

        for (int i = 1; i <= conLen(FiasGARImportUtils::MetadataTypes); i++)
        {
            if (_fileNamePrefix == strFmt(MeataDataFileNameFormat, conPeek(FiasGARImportUtils::MetadataTypes, i)))
            {
                return true;
            }
        }

        return isAllowedImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>garLevelToLogisticsAddressElement</Name>
				<Source><![CDATA[
    internal static LogisticsAddressElement garLevelToLogisticsAddressElement(str _importLevel)
    {
        LogisticsAddressElement addressElement;
        switch (_importLevel)
        {
            case FiasGARImportUtils::AddressObjectLevelState:
                addressElement = LogisticsAddressElement::State;
                break;

            case FiasGARImportUtils::AddressObjectLevelCounty:
                addressElement = LogisticsAddressElement::County;
                break;

            case FiasGARImportUtils::AddressObjectLevelCityWithLevelNumTwo:
            case FiasGARImportUtils::AddressObjectLevelCityWithLevelNumFive:
                addressElement = LogisticsAddressElement::City;
                break;

            case FiasGARImportUtils::AddressObjectLevelUrbanRuralSettlement:
                addressElement = LogisticsAddressElement::Settlement_RU;
                break;

            case FiasGARImportUtils::AddressObjectLevelLocality:
                addressElement = LogisticsAddressElement::Locality_RU;
                break;

            case FiasGARImportUtils::AddressObjectLevelDistrict:
                addressElement = LogisticsAddressElement::District;
                break;

            case FiasGARImportUtils::AddressObjectLevelStreet:
                addressElement = LogisticsAddressElement::StreetName;
                break;
        }
        return addressElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsAddressElementToLogisticsAddressTableId</Name>
				<Source><![CDATA[
    internal static TableId logisticsAddressElementToLogisticsAddressTableId(LogisticsAddressElement _addressElement)
    {
        TableId logisticsAddressTableId;
        switch (_addressElement)
        {
            case LogisticsAddressElement::State:
                logisticsAddressTableId = tableNum(LogisticsAddressState);
                break;

            case LogisticsAddressElement::County:
                logisticsAddressTableId = tableNum(LogisticsAddressCounty);
                break;

            case LogisticsAddressElement::Settlement_RU:
            case LogisticsAddressElement::City:
            case LogisticsAddressElement::Locality_RU:
                logisticsAddressTableId = tableNum(LogisticsAddressCity);
                break;

            case LogisticsAddressElement::District:
                logisticsAddressTableId = tableNum(LogisticsAddressDistrict);
                break;

            case LogisticsAddressElement::StreetName:
                logisticsAddressTableId = tableNum(LogisticsAddressStreet_RU);
                break;
        }
        return logisticsAddressTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the kind of logistics address elemment by table ID.
    /// </summary>
    /// <param name = "_tableId">
    /// ID of element's table.
    /// </param>
    /// <returns>
    /// Kind of element.
    /// </returns>
    internal static LogisticsAddressElement getElement(TableId _tableId)
    {
        switch(_tableId)
        {
            case tableNum(LogisticsAddressState):
                return LogisticsAddressElement::State;

            case tableNum(LogisticsAddressCounty):
                return LogisticsAddressElement::County;

            case tableNum(LogisticsAddressCity):
                return LogisticsAddressElement::City;

            case tableNum(LogisticsAddressDistrict):
                return LogisticsAddressElement::District;

            case tableNum(LogisticsAddressStreet_RU):
                return LogisticsAddressElement::StreetName;

            case tableNum(LogisticsAddressHouseNumber_RU):
                return LogisticsAddressElement::House_RU;

            case tableNum(LogisticsAddressSteadNumber_RU):
                return LogisticsAddressElement::Stead_RU;

            case tableNum(LogisticsAddressFlatNumber_RU):
                return LogisticsAddressElement::Flat_RU;
        }

        return LogisticsAddressElement::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiasGARAddressTypeToTableName</Name>
				<Source><![CDATA[
    internal static str fiasGARAddressTypeToTableName(str _addressType)
    {
        str fiasGARTableId;
        switch (_addressType)
        {
            case FiasGARImportUtils::ADDR_OBJ:
                fiasGARTableId = tableStr(FiasGARAddressObject);
                break;

            case FiasGARImportUtils::APARTMENT:
                fiasGARTableId =tableStr(FiasGARApartment);
                break;

            case FiasGARImportUtils::HOUSE:
                fiasGARTableId = tableStr(FiasGARHouse);
                break;

            case FiasGARImportUtils::ROOM:
                fiasGARTableId = tableStr(FiasGARRoom);
                break;

            case FiasGARImportUtils::STEAD:
                fiasGARTableId = tableStr(FiasGARSteads);
                break;

            default:
                break;
        }
        return fiasGARTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiasGARMetadataTypeToTableName</Name>
				<Source><![CDATA[
    internal static str fiasGARMetadataTypeToTableName(str _metadataTypeName)
    {
        str fiasGARMetadataTableStr;
        switch (_metadataTypeName)
        {
            case FiasGARImportUtils::MetadataADDHOUSE:
            case FiasGARImportUtils::HOUSE:
                fiasGARMetadataTableStr = tableStr(FiasGARHouseTypes);
                break;

            case FiasGARImportUtils::MetadataOPERATIONE:
                fiasGARMetadataTableStr = tableStr(FIASOperationStatuses_RU);
                break;

            case FiasGARImportUtils::ADDR_OBJ:
                fiasGARMetadataTableStr = tableStr(FiasGARAddrObjTypes);
                break;

            case FiasGARImportUtils::APARTMENT:
                fiasGARMetadataTableStr = tableStr(FiasGARApartmentTypes);
                break;

            case FiasGARImportUtils::ROOM:
                fiasGARMetadataTableStr = tableStr(FiasGARRoomTypes);
                break;

            default:
                break;
        }
        return fiasGARMetadataTableStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeActiveAddressFromNotFoundRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// delete from LogisticsAddressNotFoundRecords_RU
    ///     exsits join LogisticsAddressFiasGuidCodes_RU
    ///         where LogisticsAddressNotFoundRecords_RU.RefTableId == LogisticsAddressFiasGuidCodes_RU.RefTableId
    ///             && LogisticsAddressNotFoundRecords_RU.RefRecId == LogisticsAddressFiasGuidCodes_RU.RefRecId
    ///     exsits join FiasGARAddressObject
    ///         where LogisticsAddressFiasGuidCodes_RU.FiasGuidId == FiasGARAddressObject.ObjectGuid
    ///             && FiasGARAddressObject.IsActual == '1'
    ///             && FiasGARAddressObject.IsActive == '1'
    ///     exsits join FIASOperationStatuses_RU
    ///         where FiasGARAddressObject.OperTypeId == FIASOperationStatuses_RU.OperationStatus
    ///             && FIASOperationStatuses_RU.FiasOperationType_RU != FiasOperationType_RU::DeleteOperation;
    /// </summary>
    /// <param name = "_fiasGARAddressTable">A table id of FiasGAR* table</param>
    /// <param name = "_isActive">IsActive field id on FiasGAR* table</param>
    /// <param name = "_isActual">IsActual field id on FiasGAR* table</param>
    /// <param name = "_operTypeId">OperTypeId field id on FiasGAR* table</param>
    /// <param name = "_objectGuid">ObjectGuid field id on FiasGAR* table</param>
    internal static void removeActiveAddressFromNotFoundRecords(
        TableId _fiasGARAddressTable,
        FieldId _isActive,
        FieldId _isActual,
        FieldId _operTypeId,
        FieldId _objectGuid)
    {
        ttsbegin;
        Query query = new Query();
        query.addDataSource(tableNum(LogisticsAddressNotFoundRecords_RU));
        QueryBuildDataSource queryBuildDSGuidTable = query.dataSourceTable(tableNum(LogisticsAddressNotFoundRecords_RU)).addDataSource(tableNum(LogisticsAddressFiasGuidCodes_RU));
        queryBuildDSGuidTable.joinMode(JoinMode::ExistsJoin);
        queryBuildDSGuidTable.addLink(fieldNum(LogisticsAddressNotFoundRecords_RU, RefTableId), fieldNum(LogisticsAddressFiasGuidCodes_RU, RefTableId));
        queryBuildDSGuidTable.addLink(fieldNum(LogisticsAddressNotFoundRecords_RU, RefRecId), fieldNum(LogisticsAddressFiasGuidCodes_RU, RefRecId));

        QueryBuildDataSource fiasGARAddressTableDS = queryBuildDSGuidTable.addDataSource(_fiasGARAddressTable);
        fiasGARAddressTableDS.joinMode(JoinMode::ExistsJoin);
        fiasGARAddressTableDS.addLink(fieldNum(LogisticsAddressFiasGuidCodes_RU, FiasGuidId), _objectGuid);
        fiasGARAddressTableDS.addRange(_isActive).value('1');
        fiasGARAddressTableDS.addRange(_isActual).value('1');

        QueryBuildDataSource operStatusDS = fiasGARAddressTableDS.addDataSource(tableNum(FIASOperationStatuses_RU));
        operStatusDS.joinMode(JoinMode::ExistsJoin);
        operStatusDS.addLink(_operTypeId, fieldNum(FIASOperationStatuses_RU, OperationStatus));
        operStatusDS.addRange(fieldnum(FIASOperationStatuses_RU, FiasOperationType_RU)).value(SysQuery::valueNot(FiasOperationType_RU::DeleteOperation));
        Query::delete_from(query);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatesExistingFiasGuid</Name>
				<Source><![CDATA[
    internal static void updatesExistingFiasGuid(
        TableId _fiasGARAddressTable,
        FieldId _isActive,
        FieldId _isActual,
        fieldId _objectGuid,
        FieldId _operTypeId,
        FieldId _objectId,
        date _validDate,
        LogisticsAddressImportVersionId_RU _versionId)
    {
        ttsbegin;
        Query fiasGuidCodesQuery = new Query();
        fiasGuidCodesQuery.addDataSource(tableNum(LogisticsAddressFiasGuidCodes_RU));

        QueryBuildDataSource fiasGARAddressQBDS = fiasGuidCodesQuery.dataSourceTable(tableNum(LogisticsAddressFiasGuidCodes_RU)).addDataSource(_fiasGARAddressTable);
        fiasGARAddressQBDS.joinMode(JoinMode::InnerJoin);
        fiasGARAddressQBDS.addRange(_isActive).value('1');
        fiasGARAddressQBDS.addRange(_isActual).value('1');
        fiasGARAddressQBDS.addLink(fieldNum(LogisticsAddressFiasGuidCodes_RU, FiasGuidId), _objectGuid);

        QueryBuildDataSource hierarchyDS = fiasGARAddressQBDS.addDataSource(tableNum(FiasGARMUNHierarchy));
        hierarchyDS.joinMode(JoinMode::InnerJoin);
        hierarchyDS.addRange(fieldnum(FiasGARMUNHierarchy, IsActive)).value('1');
        hierarchyDS.addRange(fieldnum(FiasGARMUNHierarchy, StartDate)).value(SysQuery::range(dateNull(), _validDate));
        hierarchyDS.addRange(fieldnum(FiasGARMUNHierarchy, EndDate)).value(SysQuery::range(_validDate, dateMax()));
        hierarchyDS.addLink(fieldNum(FiasGARMUNHierarchy, ObjectId), _objectId);

        Map fieldSetMap = new Map(Types::String, Types::String);
        fieldSetMap.insert(fieldStr(LogisticsAddressFiasGuidCodes_RU, FiasObjectId), FiasGARImportUtils::formattedQueryValue(fiasGuidCodesQuery.dataSourceTable(tableNum(FiasGARMUNHierarchy)).name(), fieldStr(FiasGARMUNHierarchy, ObjectId)));
        fieldSetMap.insert(fieldStr(LogisticsAddressFiasGuidCodes_RU, FiasParentObjectId), FiasGARImportUtils::formattedQueryValue(fiasGuidCodesQuery.dataSourceTable(tableNum(FiasGARMUNHierarchy)).name(), fieldStr(FiasGARMUNHierarchy, ParentObjId)));
        fieldSetMap.insert(fieldStr(LogisticsAddressFiasGuidCodes_RU, OKTMO), FiasGARImportUtils::formattedQueryValue(fiasGuidCodesQuery.dataSourceTable(tableNum(FiasGARMUNHierarchy)).name(), fieldStr(FiasGARMUNHierarchy, OKTMO)));
        fieldSetMap.insert(fieldStr(LogisticsAddressFiasGuidCodes_RU, VersionId), int642Str(_versionId));
        Query::update_recordset(fieldSetMap, fiasGuidCodesQuery);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formattedQueryValue</Name>
				<Source><![CDATA[
    internal static str formattedQueryValue(str _tableStr, str _field)
    {
        return strFmt('%1.%2', _tableStr, _field);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentAddressRecId</Name>
				<Source><![CDATA[
    internal static common getParentAddressRecId(LogisticsAddressFiasGuidCodes_RU _logisticsAddressFiasGuidCodesParent, TableId _childTableId = 0)
    {
        common parentAddrress;
        if (_logisticsAddressFiasGuidCodesParent.RecId)
        {
            switch (_logisticsAddressFiasGuidCodesParent.RefTableId)
            {
                case tableNum(LogisticsAddressState):
                    LogisticsAddressState logisticsAddressState;
                    select firstonly crosscompany RecId, TableId from logisticsAddressState
                        where logisticsAddressState.RecId == _logisticsAddressFiasGuidCodesParent.RefRecId
                            && logisticsAddressState.TableId == _logisticsAddressFiasGuidCodesParent.RefTableId;

                    parentAddrress = logisticsAddressState;
                    break;

                case tableNum(LogisticsAddressCounty):
                    LogisticsAddressCounty logisticsAddressCounty;
                    select firstonly crosscompany RecId, TableId from logisticsAddressCounty
                        where logisticsAddressCounty.RecId == _logisticsAddressFiasGuidCodesParent.RefRecId
                            && logisticsAddressCounty.TableId == _logisticsAddressFiasGuidCodesParent.RefTableId;

                    parentAddrress = logisticsAddressCounty;
                    break;

                case tableNum(LogisticsAddressCity):
                    LogisticsAddressCity logisticsAddressCity;
                    select firstonly crosscompany RecId, TableId from logisticsAddressCity
                        where logisticsAddressCity.RecId == _logisticsAddressFiasGuidCodesParent.RefRecId
                            && logisticsAddressCity.TableId == _logisticsAddressFiasGuidCodesParent.RefTableId;

                    parentAddrress = logisticsAddressCity;
                    break;

                case tableNum(LogisticsAddressDistrict):
                    LogisticsAddressDistrict logisticsAddressDistrict;
                    select firstonly crosscompany RecId, TableId from logisticsAddressDistrict
                        where logisticsAddressDistrict.RecId == _logisticsAddressFiasGuidCodesParent.RefRecId
                            && logisticsAddressDistrict.TableId == _logisticsAddressFiasGuidCodesParent.RefTableId;

                    parentAddrress = logisticsAddressDistrict;
                    break;

                case tableNum(LogisticsAddressStreet_RU):
                    if (_childTableId == tableNum(LogisticsAddressStreet_RU))
                    {
                        LogisticsAddressFiasGuidCodes_RU fiasGuidCodesParent;
                        select firstonly crosscompany fiasGuidCodesParent
                            where fiasGuidCodesParent.FiasObjectId == _logisticsAddressFiasGuidCodesParent.FiasParentObjectId;
                        parentAddrress = FiasGARImportUtils::getParentAddressRecId(fiasGuidCodesParent);
                    }
                    else
                    {
                        LogisticsAddressStreet_RU logisticsAddressStreet;
                        select firstonly crosscompany RecId, TableId from logisticsAddressStreet
                            where logisticsAddressStreet.RecId == _logisticsAddressFiasGuidCodesParent.RefRecId
                                && logisticsAddressStreet.TableId == _logisticsAddressFiasGuidCodesParent.RefTableId;

                        parentAddrress = logisticsAddressStreet;
                    }
                    break;

                case tableNum(LogisticsAddressHouseNumber_RU):
                    LogisticsAddressHouseNumber_RU logisticsAddressHouseNumber_RU;
                    select firstonly crosscompany RecId, TableId from logisticsAddressHouseNumber_RU
                        where logisticsAddressHouseNumber_RU.RecId == _logisticsAddressFiasGuidCodesParent.RefRecId
                            && logisticsAddressHouseNumber_RU.TableId == _logisticsAddressFiasGuidCodesParent.RefTableId;

                    parentAddrress = logisticsAddressHouseNumber_RU;
                    break;

                default:
                    break;
            }
        }
        return parentAddrress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCityDistrictStreetFromAddress</Name>
				<Source><![CDATA[
    internal static container getCityDistrictStreetFromAddress(Common _addressTable)
    {
        RecId cityRecId = 0, districtRecId = 0, streetRecId = 0;
        str stateId, countyId;

        switch (_addressTable.TableId)
        {
            case tableNum(LogisticsAddressCounty):
                LogisticsAddressCounty logisticsAddressCounty = _addressTable as LogisticsAddressCounty;
                stateId = logisticsAddressCounty.StateId;
                countyId = logisticsAddressCounty.CountyId;
                break;

            case tableNum(LogisticsAddressCity):
                LogisticsAddressCity logisticsAddressCity = _addressTable as LogisticsAddressCity;
                cityRecId = logisticsAddressCity.RecId;
                stateId = logisticsAddressCity.StateId;
                countyId = logisticsAddressCity.CountyId;
                break;

            case tableNum(LogisticsAddressDistrict):
                LogisticsAddressDistrict logisticsAddressDistrict = _addressTable as LogisticsAddressDistrict;
                cityRecId = logisticsAddressDistrict.City;
                districtRecId = logisticsAddressDistrict.RecId;
                stateId = logisticsAddressDistrict.StateId_RU;
                countyId = logisticsAddressDistrict.CountyId_RU;
                break;

            case tableNum(LogisticsAddressStreet_RU):
                LogisticsAddressStreet_RU logisticsAddressStreet = _addressTable as LogisticsAddressStreet_RU;
                cityRecId = logisticsAddressStreet.City;
                districtRecId = logisticsAddressStreet.District;
                streetRecId = logisticsAddressStreet.RecId;
                stateId = logisticsAddressStreet.State;
                countyId = logisticsAddressStreet.County;
                break;

            default:
                break;
        }

        return [cityRecId, districtRecId, streetRecId, stateId, countyId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableChanged</Name>
				<Source><![CDATA[
    internal static boolean isTableChanged(Common _record, Common _recordOrig)
    {
        if (_record.TableId != _recordOrig.TableId)
        {
            error("@FIAS:DiffTableErrorWhenCompareRecordChange");
            return false;
        }

        DictTable dictTable = new DictTable(_record.TableId);

        for (int i = dictTable.fieldCnt(); i; i--)
        {
            FieldId fieldId = dictTable.fieldCnt2Id(i);
            if (_record.(fieldId) != _recordOrig.(fieldId))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resubordinationOperationForAddressObjects</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates addresses as not found if address object level has changed.
    /// It means that address object now may has different hierarchy if the operation status is ResubordinationOperation.
    /// The PrevId and NextId hints the change history of this Address object.
    /// </summary>
    /// <param name = "_logisticAddressRecord">The logistics address object.</param>
    /// <param name = "_addressObject">The address object.</param>
    /// <param name = "_operStatus">The operation status.</param>
    internal static void resubordinationOperationForAddressObjects(Common _logisticAddressRecord, FiasGARAddressObject _addressObject, FIASOperationType_RU _operStatus)
    {
        if (_addressObject.RecId && _operStatus == FIASOperationType_RU::ResubordinationOperation)
        {
            FiasGARAddressObject addressObjectPrev;
            LogisticsAddressFiasGuidCodes_RU fiasGuidCodesPrev;
            select firstOnly crosscompany RecId from addressObjectPrev
                where addressObjectPrev.Id == _addressObject.PrevId
                    && addressObjectPrev.Level != _addressObject.Level
                join RecId, RefTableId, RefRecId from fiasGuidCodesPrev
                    where fiasGuidCodesPrev.FiasGuidId == addressObjectPrev.ObjectGuid
                        && fiasGuidCodesPrev.RefTableId != _logisticAddressRecord.TableId;

            if (fiasGuidCodesPrev)
            {
                ttsbegin;
                LogisticsAddressNotFoundRecords_RU::markAddressAsNotFound(
                    fiasGuidCodesPrev.RefTableId,
                    fiasGuidCodesPrev.RefRecId,
                    _logisticAddressRecord.TableId,
                    _logisticAddressRecord.RecId,
                    LogisticsAddressNotFoundReason_RU::Moved);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>