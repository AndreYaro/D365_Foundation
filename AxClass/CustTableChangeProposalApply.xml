<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTableChangeProposalApply</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains functionality for applying an approved change proposal to <c>CustTable</c>.
/// </summary>
public class CustTableChangeProposalApply
{
    CustTableChangeProposal proposal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class.
    /// </summary>
    /// <param name = "_proposal">The record containing changes to be applied.</param>
    /// <returns>The constructed object</returns>
    public static CustTableChangeProposalApply construct(CustTableChangeProposal _proposal)
    {
        CustTableChangeProposalApply result = new CustTableChangeProposalApply();
        result.proposal = _proposal;
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>applyAndDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies and persists the changes contained in a change proposal, then deletes the change proposal record.
    /// </summary>
    public void applyAndDelete()
    {
        if (!proposal.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        this.apply();
        this.removeChangeProposal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets values of <c>CustTable</c> fields based on change proposal data.
    /// </summary>
    /// <param name = "_custTableToUpdate">
    /// <c>CustTable</c> table buffer.
    /// </param>
    /// <param name = "_dirPartyToUpdate">
    /// <c>DirPartyTable</c> table buffer.
    /// </param>
    protected void initializeCustTable(CustTable _custTableToUpdate, DirPartyTable _dirPartyToUpdate)
    {
        if(proposal.IsChangedCreditMax)
        {
            _custTableToUpdate.CreditMax = proposal.CreditMax;
        }

        if(proposal.IsChangedName)
        {
            _dirPartyToUpdate.Name = proposal.Name;
        }

        if(proposal.IsChangedTaxGroup)
        {
            _custTableToUpdate.TaxGroup = proposal.TaxGroup;
        }

        if(proposal.IsChangedCustGroupId)
        {
            _custTableToUpdate.CustGroup = proposal.CustGroupId;
        }

        if(proposal.IsChangedPaymMode)
        {
            _custTableToUpdate.PaymMode = proposal.CustPaymMode;
        }

        if(proposal.IsChangedPaymSpec)
        {
            _custTableToUpdate.PaymSpec = proposal.CustPaymSpec;
        }

        if(proposal.IsChangedVATNum)
        {
            _custTableToUpdate.VATNum = proposal.VATNum;
        }

        if(proposal.IsChangedBankAccountId)
        {
            _custTableToUpdate.BankAccount = proposal.BankAccountId;
        }

        if(proposal.IsChangedCashDiscBaseDays)
        {
            _custTableToUpdate.CashDiscBaseDays = proposal.CashDiscBaseDays;
        }

        if(proposal.IsChangedCashDiscCode)
        {
            _custTableToUpdate.CashDisc = proposal.CashDiscCode;
        }

        if(proposal.IsChangedCreditRating)
        {
            _custTableToUpdate.CreditRating = proposal.CreditRating;
        }

        if(proposal.IsChangedCustExcludeCollectionFee)
        {
            _custTableToUpdate.CustExcludeCollectionFee = proposal.CustExcludeCollectionFee;
        }

        if(proposal.IsChangedCustExcludeInterestCharges)
        {
            _custTableToUpdate.CustExcludeInterestCharges = proposal.CustExcludeInterestCharges;
        }

        if(proposal.IsChangedCustPaymTermId)
        {
            _custTableToUpdate.PaymTermId = proposal.CustPaymTermId;
        }

        if(proposal.IsChangedInvoiceAccount)
        {
            _custTableToUpdate.InvoiceAccount = proposal.InvoiceAccount;
        }

        if(proposal.IsChangedMandatoryCreditLimit)
        {
            _custTableToUpdate.MandatoryCreditLimit = proposal.MandatoryCreditLimit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies and persists the changes.
    /// </summary>
    protected void apply()
    {
        CustTable custToUpdate = CustTable::findRecId(proposal.CustTable, true);
        DirPartyTable dirPartyToUpdate = DirPartyTable::findRec(custToUpdate.Party, true);

        this.initializeCustTable(custToUpdate, dirPartyToUpdate);

        ttsbegin;
        if (custToUpdate.RecId)
        {
            custToUpdate.update();
        }
        
        if (dirPartyToUpdate.RecId)
        {
            dirPartyToUpdate.update();
        }

        boolean runCreditLimitUpdate = proposal.IsChangedCreditMax && proposal.UpdateEstimatesWhenCreditMaxChanged;
                
        // Credit limit update 
        if (runCreditLimitUpdate)
        {
            this.updateEstimatedValueOnOpenSalesOrderRelatedToCustomer();
        }

        this.removeChangeProposal();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeChangeProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the change proposal, typically after it is successfully applied.
    /// </summary>
    private void removeChangeProposal()
    {
        CustTableChangeProposal proposalToDelete;

        delete_from proposalToDelete where proposalToDelete.RecId == proposal.RecId;
        
        proposal.RecId = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimatedValueOnOpenSalesOrderRelatedToCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the estimated value on open sales orders related to customer.
    /// </summary>
    private void updateEstimatedValueOnOpenSalesOrderRelatedToCustomer()
    {
        CustTable custTable = CustTable::findRecId(proposal.CustTable);
        CustCreditLimit custCreditLimit = CustCreditLimit::construct(custTable);

        if (custCreditLimit.shouldCheckCreditAvailable() && custTable.existOpenOrders())
        {
            MenuFunction menuSecurityCheck = new MenuFunction(menuitemActionStr(salesCreditLimitCheck), MenuItemType::Action);
            if (menuSecurityCheck.checkAccessRights())
            {
                SalesCreditLimitCheck salesCreditLimitCheck = SalesCreditLimitCheck::construct();
                salesCreditLimitCheck.parmCustAccount(custTable.AccountNum);

                // Run the credit limit check update routine, which normally happens in the UI after credit limit change
                // in batch, since UI is not possible in WF and running it as part of WF itself would make errors harder to see
                this.scheduleBatch(salesCreditLimitCheck);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules a one-off batch job.
    /// </summary>
    /// <param name = "_task">The task to execute in batch.</param>
    private void scheduleBatch(SalesCreditLimitCheck _task)
    {
        SysRecurrenceData sysRecurrenceData = SysRecurrence::setRecurrenceEndAfter(SysRecurrence::defaultRecurrence(), 0);
    
        BatchInfo localBatchInfo = _task.batchinfo();
        localBatchInfo.parmGroupId(''); // no group
        BatchHeader batchHeader = batchHeader::construct();
        batchHeader.addTask(_task);
        batchHeader.parmRecurrenceData(sysRecurrenceData);
        batchHeader.save();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>