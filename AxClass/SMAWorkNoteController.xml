<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaWorkNoteController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SMAWorkNoteController</c> class is the controller class for the <c>SMAWorkNote</c> report.
/// </summary>
public class SmaWorkNoteController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract before dialog box is displayed to the user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract, common use case is to add, change, or both a query.
    /// This method is called only during interactive scenario, before rendering the UI to user.For batch
    /// scenario, we do not call this method, since there is no user interaction and contract values are
    /// already saved in batch.Do not initialize any instance variables in this code if they are used
    /// during the lifetime of the controller, because these will fail in batch cases.
    /// </remarks>
    public void prePromptModifyContract()
    {
        SMAWorkNoteContract     contract;

        contract = this.parmReportContract().parmRdpContract() as SMAWorkNoteContract;

        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()), contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges.
    /// </summary>
    /// <param name="_query">
    /// Gets or sets the query object.
    /// </param>
    /// <param name="_contract">
    /// Gets or sets the contract object.
    /// </param>
    public void setRanges(
        Query _query,
        SMAWorkNoteContract _contract)
    {
        MultiSelectionHelper    multiSelectionHelper;
        InternalExternal        argsDescription;

        argsDescription = this.parmArgs().parmEnum();

        if (argsDescription == InternalExternal::Internal)
        {
            _contract.parmParameterType(true);
        }
        else
        {
            _contract.parmParameterType(false);
        }
        _query.dataSourceTable(tableNum(SMAServiceOrderTable)).clearRanges();

        if (this.parmArgs().dataset() == tableNum(SMAServiceOrderTable) && this.parmArgs().caller())
        {
            multiSelectionHelper = MultiSelectionHelper::createFromCaller(this.parmArgs().caller());
            multiSelectionHelper.createQueryRanges(_query.dataSourceTable(tableNum(SMAServiceOrderTable)), fieldStr(SMAServiceOrderTable, ServiceOrderId));
        }

        if (this.parmArgs() && this.parmArgs().parmEnum())
        {
            _contract.parmMenuItemName(this.parmArgs().parmEnum());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        SMAWorkNoteController controller  = new SMAWorkNoteController();

        controller.parmReportName(ssrsReportStr(SMAWorkNote, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>