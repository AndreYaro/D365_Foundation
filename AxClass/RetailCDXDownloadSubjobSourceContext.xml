<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDownloadSubjobSourceContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailCDXDownloadSubjobSourceContext</c> represents the source context for a subjob related download sync operations.
/// </summary>
internal class RetailCDXDownloadSubjobSourceContext
{
    RetailCDXDataTranslator  translator;
    RetailCdxCsvDataOutput   writer;
    RetailCDXDataSyncContext dataSyncCtx;

    RetailConnSubJobId      subjobId;

    Name                    dataGroupName;
    RefRecId                dataGroupRecId;

    RetailConnTableName     axSourceTableName;
    RetailConnTableName     channelTableName;
    Map                     relatedTablesMap = new Map(Types::String, Types::Int64); //[RelationName, RelatedTableId]
    boolean                 isAXTableTempDB;
    int                     relatedTableCount;
    int                     columnCount;

    RetailCDXFileSize       fileSize;  // not used anymore
    int64                   changedRows; // not used anymore
    int                     channelSpecificRows;  // not used anymore
    int                     packedDeletedRows;
    int                     packedChannelSpecificRows; // not used anymore

    private RetailCDXDataDistributionTableFilterType tableFilterType;

    RetailCDXDownloadSubjobSourceLogger logger;

    RetailCdxAllowSkipDataSync allowSkipDataSync;

    private boolean shouldFilterCdxEntityData;

    private boolean isOptimizedPropagation;

    private Map sessionDataFileContextMap;  //key is sessionType and value is RetailCDXDownloadSessionDataFileContext

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>RetailCDXDownloadSubjobSourceContext</c> class.
    /// </summary>
    internal void new(RetailConnSubJobId _subJobId, RetailCDXDataSyncContext _ctContext, RetailCDXDataTranslator _translator, RetailCdxCsvDataOutput _writer)
    {
        dataSyncCtx = _ctContext;
        subjobId    = _subJobId;
        writer      = _writer;
        translator  = _translator;

        this.initSubjobProperties();

        logger = new RetailCDXDownloadSubjobSourceLogger(this.paramDataSyncContext(), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramSubjobLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>RetailCDXDownloadSubjobSourceLogger</c> logger object.
    /// </summary>
    /// <param name="_ctContext">The logger object.</param>
    /// <returns>The <c>RetailCDXDownloadSubjobSourceLogger</c> logger object.</returns>
    internal RetailCDXDownloadSubjobSourceLogger paramSubjobLogger(RetailCDXDownloadSubjobSourceLogger _logger = logger)
    {
        logger = _logger;

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramSubjobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the subjob Id.
    /// </summary>
    /// <param name = "_subjobId">The subjob Id.</param>
    /// <returns>The subjob Id.</returns>
    internal RetailConnSubJobID paramSubjobId(RetailConnSubJobID _subjobId = subjobId)
    {
        subjobId = _subjobId;

        return subjobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramAXSourceTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the name of AX table being used as the source of the download sync.
    /// </summary>
    /// <param name = "_axSourceTableName">The AX table name.</param>
    /// <returns>The AX table name.</returns>
    internal RetailConnTableName paramAXSourceTableName(RetailConnTableName _axSourceTableName = axSourceTableName)
    {
        axSourceTableName = _axSourceTableName;

        return axSourceTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramAllowSkipDataSync</Name>
				<Source><![CDATA[
    internal RetailCdxAllowSkipDataSync paramAllowSkipDataSync(RetailCdxAllowSkipDataSync _allowSkipDataSync = allowSkipDataSync)
    {
        allowSkipDataSync = _allowSkipDataSync;

        return allowSkipDataSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramIsAXTableTempDB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the flag which specifies whether the AX table is a temporary table or not.
    /// </summary>
    /// <param name = "_isAXTableTempDB">The falg which indicates if the current AX table is temporary table or not.</param>
    /// <returns>True if the AX table being used by the context is temporary table; false otherwise.</returns>
    internal boolean paramIsAXTableTempDB(boolean _isAXTableTempDB = isAXTableTempDB)
    {
        isAXTableTempDB = _isAXTableTempDB;

        return isAXTableTempDB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramChannelTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the channel table name which is being used as a target of the download sync.
    /// </summary>
    /// <param name = "_channelTableName">The channel table name.</param>
    /// <returns>The chanel table name.</returns>
    internal RetailConnTableName paramChannelTableName(RetailConnTableName _channelTableName = channelTableName)
    {
        channelTableName = _channelTableName;

        return channelTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramRelatedTableCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the number of tables that are related to the current AX table that is being used as a
    /// source of the subjob's download sync operation.
    /// </summary>
    /// <param name = "_relatedTableCount">The number of related tables.</param>
    /// <returns>The number of related tables.</returns>
    internal int paramRelatedTableCount(int _relatedTableCount = relatedTableCount)
    {
        relatedTableCount = _relatedTableCount;

        return relatedTableCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramPackedDeletedRows</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the number of rows to be deleted that are added in the subjob downlod packet.
    /// </summary>
    /// <param name = "_packedDeletedRows">The number of rows to be deleted from the target table.</param>
    /// <returns>The number of rows to be deleted from the target table.</returns>
    internal int paramPackedDeletedRows(int _packedDeletedRows = packedDeletedRows)
    {
        packedDeletedRows = _packedDeletedRows;

        return packedDeletedRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramColumnCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the number of columns in the subjob packet.
    /// </summary>
    /// <param name = "_columnCount">The number of columns.</param>
    /// <returns>The number of columns.</returns>
    internal int paramColumnCount(int _columnCount = columnCount)
    {
        columnCount = _columnCount;

        return columnCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramTableFilterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the data distribution table filter type.
    /// </summary>
    /// <param name = "_tableFilterType">The data distribution table filter type.</param>
    /// <returns>The data distribution table filter type.</returns>
    internal RetailCDXDataDistributionTableFilterType paramTableFilterType(RetailCDXDataDistributionTableFilterType _tableFilterType = tableFilterType)
    {
        tableFilterType = _tableFilterType;

        return tableFilterType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseFilteredRecordsTempTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the intermediate temp tables should be used in calculating the final set of records that need to be synchronized.
    /// </summary>
    /// <returns>True if the subjob needs to use intermediate temp tables to calculate the final set of records that need to be synchronized; false otherwise.</returns>
    internal boolean shouldUseFilteredRecordsTempTables(RetailCDXDataDistributionTableFilterType _tableFilterType = this.paramTableFilterType())
    {
        boolean shouldUseFilteredRecordsTempTables = false;

        if (!this.dataSyncCtx.paramNewLESet().empty())
        {
            // if a new LE is detected during incremental sync then the final set of records that need to be synchronized have to be calculated and saved in
            // the intermediate 'filtered record temp tables' as cdx would have to pick all records from the new LE even if they are not changed recently and hence not detected by change tracking.
            shouldUseFilteredRecordsTempTables = true;
        }
        else if (RetailCdxDataDistributionQuery::hasDataDistributionEntityType(this.paramAXSourceTableName(), this.dataSyncCtx.getChannelSchema()))
        {
            // if the table being synchronized has data distribution entity type then the final set of records that need to be synchronized have to be calculated and saved in
            // the intermediate 'filtered record temp tables' so as to flag the records that should be skipped for offline databases in case the entity is flagged to be filtered out for offline scenario.
            shouldUseFilteredRecordsTempTables = true;
        }
        else
        {
            // for all other scenarios whether to use the 'filtered record temp tables' for calculating the final set of records to be synced solely
            // depends on the <c>RetailCDXDataDistributionTableFilterType</c> of the current table being synchronized.
            shouldUseFilteredRecordsTempTables = RetailCDXDataDistributionTable::useFilteredRecordsTempTable(_tableFilterType);
        }

        return shouldUseFilteredRecordsTempTables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableIdFromRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related table's table Id for the specified table relation.
    /// </summary>
    /// <param name = "tableRelationName">The table relation name.</param>
    /// <returns>The <c>TableId</c> of the related table or 0 if the corresponding <c>TableId</c> is not found.</returns>
    internal TableId getTableIdFromRelation(str tableRelationName)
    {
        TableId relatedTableId = 0;

        if (this.relatedTablesMap.exists(tableRelationName))
        {
            relatedTableId = this.relatedTablesMap.lookup(tableRelationName);
        }

        return relatedTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDataSyncContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns current data sync context.
    /// </summary>
    /// <param name="_ctContext">
    /// Data sync context.
    /// </param>
    /// <returns>
    /// Current data sync context.
    /// </returns>
    internal RetailCDXDataSyncContext paramDataSyncContext(RetailCDXDataSyncContext _ctContext = dataSyncCtx)
    {
        dataSyncCtx = _ctContext;

        return dataSyncCtx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the download operation for the current subjob.
    /// </summary>
    internal void execute()
    {
        int currentSessionCount = dataSyncCtx.setAllSessionsAsCurrent();

        if (currentSessionCount > 0)
        {

            Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
            System.Exception ex;

            writer.setCurrentSessions(dataSyncCtx.getCurrentSessions());

            try
            {
                logger.logCDXSubjobDownloadSourceCreateCSVPacketStart();

                this.prepareChangedRecords();

                if (this.shouldUseFilteredRecordsTempTables())
                {
                    //Filter channel specific changed data. Include info from related tables
                    this.prepareChannelSpecificData();
                }

                //Populate channel specific temp tables
                //Handles support for all N-1 schemas
                this.transformForChannelSchema();

                //Write data into a file in xml/binary as required
                this.writeData();

                this.subJobCleanUp();
            }
            catch (xppEx)
            {
                ex = xppEx;
                logger.logCDXSubjobDownloadSourceCreateCSVPacketFailure(ex);
                throw error(strFmt("@Retail:CreateCSVPacketErrorMsg", this.paramSubjobId()));
            }
            catch (ex)
            {
                logger.logCDXSubjobDownloadSourceCreateCSVPacketFailure(ex);
                throw error(strFmt("@Retail:CreateCSVPacketErrorMsg", this.paramSubjobId()));
            }
            finally
            {
                this.paramDataSyncContext().addException(ex);
                logger.logCDXSubjobDownloadSourceCreateCSVPacketStop(ex);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareChangedRecords</Name>
				<Source><![CDATA[
    private void prepareChangedRecords()
    {
        if (!dataSyncCtx.paramIsInitSync())
        {
            // detect changed records
            RetailCDXChangeTracking ct = RetailCDXChangeTracking::createInstance(this);

            ct.runChangeTracking();

            // add detected new channel to the change tracking temp table.
            RetailCDXChangeRefTable1 changeTrackingTmpTable = this.paramDataSyncContext().openChangeRefTable1();
            SetEnumerator newChannelEnumerator = dataSyncCtx.paramNewChannelSet().getEnumerator();
            while (newChannelEnumerator.moveNext())
            {
                // insert the detected channel, that is included to the datastore with a new new 'channel to datastore mapping', to the change tracking temp table.
                // this is required because an existing channel (which is not newly created) can be added to an existing datastore and in such scenario we need to
                // add the newly mapped channel to the  change tracking table so that its content and its corresponding contents from tables referenced by the channel table are included in the sync process.
                RefRecId channelRecId = newChannelEnumerator.current();
                changeTrackingTmpTable.SYS_CHANGE_OPERATION = 'I';
                changeTrackingTmpTable.RefRecID = channelRecId;
                changeTrackingTmpTable.RefTableID = tableNum(RetailChannelTable);
                changeTrackingTmpTable.NodeID = -1;
                changeTrackingTmpTable.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareChannelSpecificData</Name>
				<Source><![CDATA[
    private void prepareChannelSpecificData()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        System.Exception ex;

        try
        {
            logger.logCDXSubjobDownloadSourceFilterChannelDataStart();

            RetailCDXDataFilterManagerBase dataFilterManager;

            // use the new data filter manager class when the cache based query feature is enabled and is full sync, otherwise still use the old class
            if (dataSyncCtx.paramIsCacheBasedQueryEnabled())
            {
                dataFilterManager = new RetailCDXDataFilterManager();
            }
            else
            {
                dataFilterManager = new RetailCDXChannelSpecificData();
            }

            dataFilterManager.paramDataSyncContext(dataSyncCtx);
            dataFilterManager.paramSubjobSourceContext(this);
            dataFilterManager.paramLEContainer(dataSyncCtx.paramLEContainer());

            TableName tableName;

            container subJobAXSourceTables;
            if (this.paramIsAXTableTempDB())
            {
                SetEnumerator cursor = this.relatedTablesMap.valueSet().getEnumerator();
                while (cursor.moveNext())
                {
                    subJobAXSourceTables += tableId2Name(cursor.current());
                }
            }
            else
            {
                subJobAXSourceTables = [this.paramAXSourceTableName()];
            }

            for (int i = 1; i <= conLen(subJobAXSourceTables); ++i)
            {
                tableName = conPeek(subJobAXSourceTables, i);
                dataFilterManager.runQueryForTable(tableName, dataSyncCtx.paramIsInitSync());
            }

            // delta sync with new channels
            if (!dataSyncCtx.paramIsInitSync() && !dataSyncCtx.paramNewChannelSet().empty())
            {
                this.handleNewChannels(dataFilterManager, subJobAXSourceTables);
            }
        }
        catch (xppEx)
        {
            ex = xppEx;
            logger.logCDXSubjobDownloadSourceFilterChannelDataFailure(ex);
            throw error(strFmt("@Retail:ChannelDataFilterErrMsg", this.paramSubjobId()));
        }
        catch (ex)
        {
            logger.logCDXSubjobDownloadSourceFilterChannelDataFailure(ex);
            throw error(strFmt("@Retail:ChannelDataFilterErrMsg", this.paramSubjobId()));
        }
        finally
        {
            this.paramDataSyncContext().addException(ex);
            logger.logCDXSubjobDownloadSourceFilterChannelDataStop(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleNewChannels</Name>
				<Source><![CDATA[
    protected void handleNewChannels(RetailCDXDataFilterManagerBase dataFilterManager, container subJobAXSourceTables)
    {
        dataFilterManager.handleNewlyMappedChannels(subJobAXSourceTables);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDataFileContextMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the download session data file context.
    /// </summary>
    /// <param name = "_sessionDataFileContextMap">The download session data file context map.</param>
    /// <returns>The download session data file context.</returns>
    internal Map paramDataFileContextMap(Map _sessionDataFileContextMap = sessionDataFileContextMap)
    {
        sessionDataFileContextMap = _sessionDataFileContextMap;

        return sessionDataFileContextMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShouldFilterCdxEntityData</Name>
				<Source><![CDATA[
    internal boolean parmShouldFilterCdxEntityData(boolean _shouldFilterCdxEntityData = shouldFilterCdxEntityData)
    {
        shouldFilterCdxEntityData = _shouldFilterCdxEntityData;
        return this.shouldFilterCdxEntityData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsOptimizedPropagation</Name>
				<Source><![CDATA[
    internal boolean parmIsOptimizedPropagation(boolean _isOptimizedPropagation = isOptimizedPropagation)
    {
        isOptimizedPropagation = _isOptimizedPropagation;
        return this.isOptimizedPropagation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSkipRecordFieldId</Name>
				<Source><![CDATA[
    internal FieldId getSkipRecordFieldId()
    {
        FieldId skipRecordFieldId;

        if (dataSyncCtx.paramIsCacheBasedQueryEnabled())
        {
            if (dataSyncCtx.paramIsInitSync())
            {
                skipRecordFieldId = fieldNum(RetailTmpCDXDataDistributionFilteredRecords, SkipRecord);
            }
            else
            {
                skipRecordFieldId = fieldNum(RetailTmpCDXDataDistributionDeltaSyncFilteredRecords, SkipRecord);
            }
        }
        else
        {
            skipRecordFieldId = fieldNum(RetailCDXChangeRefTable2, SkipRecord);
        }

        return skipRecordFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSubjobProperties</Name>
				<Source><![CDATA[
    private void initSubjobProperties()
    {
        RetailConnSchedulerSubjobTable subJob;

        select AXTableName, ChannelTableName, AllowSkipDataSync
            from subJob
            where subJob.subJobId == this.paramSubjobId();

        if (!subJob)
        {
            throw error(strFmt("@Retail:SubjobNotFoundErrMsg", this.paramSubjobId()));
        }
        
        this.paramAXSourceTableName(subJob.AXTableName);
        this.paramChannelTableName(subJob.ChannelTableName);

        this.sessionDataFileContextMap = new Map(Types::Enum, Types::Class); // key:RetailCDXDownloadSessionType,  value: RetailCDXDownloadSessionDataFileContext

        // determine if the table being synced by this subjob is configured in the table distribution to filter out some records comming from entity types marked to be
        // skipped or excluded from the dataFiltered (data lite) version of the session.
        this.parmShouldFilterCdxEntityData(RetailConnSchedulerSubjobTable::shouldFilterCdxEntityData(this.paramSubjobId()));


        RetailConnScheduleJobMapping scheduleJobMapping;
        RetailCDXScheduleDataGroup scheduleDataGroup;
        RetailConnSchedulerJobLine otherJobLine;

        // mark allow skip if either subjob or job is marked as skip;
        // if subjob is shared among multiple jobs used by the current datagroup then do not mark subjob as allow skip data sync.
        select firstonly RecId from otherJobLine
            where otherJobLine.subJobId == this.paramSubjobId() && 
                  otherJobLine.jobId != dataSyncCtx.paramJobID()                          // check if the subjob is also used by jobs other than current job.
            exists join scheduleJobMapping
                where scheduleJobMapping.SchedulerJobId == otherJobLine.jobId
            exists join scheduleDataGroup
                where  scheduleDataGroup.Schedule == scheduleJobMapping.ScheduleRecId && 
                       scheduleDataGroup.DataGroup == dataSyncCtx.paramDataGroupRecID();  // restrict check to current datagroup.

        this.paramAllowSkipDataSync(subJob.AllowSkipDataSync || (dataSyncCtx.paramAllowSkipDataSync() && !otherJobLine.RecId));

        // set table filter type
        tableFilterType = RetailCDXDataDistributionTable::find(dataSyncCtx.getChannelSchema(), tableName2Id(subJob.AXTableName)).Type;

        this.isAXTableTempDB = RetailConnReplicationUtilities::isTableTempDB(subJob.axTableName);

        if (this.isAXTableTempDB)
        {
            // process related tables is the source table is a temporary table.
            str tblRelationName = RetailCDXConstants::RelTableRelationName;
            
            TableId tid = RetailConnReplicationUtilities::getTableIDFromRelation(subJob.axTableName, tblRelationName);

            int relatedTblCount = 0;
            while (tid)
            {
                relatedTablesMap.insert(tblRelationName, tid);

                relatedTblCount++;
                tblRelationName = strFmt('%1%2',RetailCDXConstants::RelTableRelationName, int2str(relatedTblCount));

                tid = RetailConnReplicationUtilities::getTableIDFromRelation(subJob.axTableName, tblRelationName);
            }

            this.paramRelatedTableCount(relatedTblCount);
        }

        if (translator != null)
        {
            translator.paramSubJobSourceContext(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformForChannelSchema</Name>
				<Source><![CDATA[
    //Populate temp DB tables specific to the channel schema
    //Used for N-1 data translation.
    private void transformForChannelSchema()
    {
        if (translator)
        {
            translator.preDataOutput(dataSyncCtx.paramLEContainer());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeData</Name>
				<Source><![CDATA[
    private void writeData()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        System.Exception ex;

        try
        {
            logger.logCDXSubjobDownloadSourceWriteDataPacketStart();

            writer.paramSubjobContext(this);

            if (!dataSyncCtx.paramIsInitSync())
            {
                writer.processDelete();
            }

            RetailConnSchedulerSubjobTable subjob;
            select subjob
            where subjob.ForReferenceOnly == NoYes::No &&
                  subjob.subJobId == subjobId;

            if (subjob)
            {
                writer.writeData(subjobId);
            }
        }
        catch (xppEx)
        {
            ex = xppEx;
            logger.logCDXSubjobDownloadSourceWriteDataPacketFailure(ex);
            throw error(xppEx.Message);
        }
        catch (ex)
        {
            logger.logCDXSubjobDownloadSourceWriteDataPacketFailure(ex);
            throw error(ex.Message);
        }
        finally
        {
            this.paramDataSyncContext().addException(ex);
            logger.logCDXSubjobDownloadSourceWriteDataPacketStop(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subJobCleanUp</Name>
				<Source><![CDATA[
    private void subJobCleanUp()
    {
        if (translator != null)
        {
            translator.paramSubJobSourceContext(null);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>