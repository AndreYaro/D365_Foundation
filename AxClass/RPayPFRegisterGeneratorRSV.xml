<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFRegisterGeneratorRSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFRegisterGeneratorRSV implements IRPayReportRunClass
{
    ReportPeriod_RU                 periodEndDate,
                                    periodTransLimitDate;
    QueryRun                        queryRun;

    RPayRateCode                    studentRate;
    RPayPFReportParmContractGeneratorRSV    parmContract;
    RPayPFReportCtrl                        reportData;
    IRPayPFReportCommand                    totalFundCommand, studentsCommand;
    IRPayPFReportDataIterator               dataIterator;

    #RPayPFReport_RSV1
    #RPayPFReportRSV_Excel_2013
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    private void checkAndPrepareParameters()
    {
        studentRate     = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2014, 5, '', '', false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRate</Name>
				<Source><![CDATA[
    private RPayRateTrans findRate(RPayRateCode _payRateCode, RHRMEmplId _emplId, TransDate _transDate = periodEndDate)
    {
        TransDate               transDate = _transDate;
        RPayRateTrans           rPayRateTrans;

        do
        {
            rPayRateTrans = RPayRateTrans::find(_payRateCode, transDate, _emplId);

            if (! rPayRateTrans.RecId)
                break;

            transDate = rPayRateTrans.RateDate - 1;
        }
        while (! any2int(rPayRateTrans.RateValue));

        return rPayRateTrans;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getBookMark</Name>
				<Source><![CDATA[
    protected str getBookMark(int _row, int _col, RPayPFTariff _tariff)
    {
        return (_tariff ==RPayPFTariff::Invalid ? 'i' : '') + 's2R' + int2str(_row) + 'c' + int2str(_col);
    }
]]></Source>
			</Method>
			<Method>
				<Name>getFSSData</Name>
				<Source><![CDATA[
    RPayAmount getFSSData(int _row, int _col, RPayPFTariff _tariff)
    {
        RPayAmount value;

        switch (_row)
        {
            case 271:
                value = this.getValue(this.getBookmark(_row, _col, _tariff)).parmFundTotalAmount();
                break;
            case 272:
            case 273:
            case 274:
                value = this.getValue(this.getBookmark(_row, _col, _tariff)).parmDeductionAmount();
                break;
            case 276:
                value = this.getValue(this.getBookmark(_row, _col, _tariff)).parmFundAmount();
                break;
        }
        return value;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getStudentsData</Name>
				<Source><![CDATA[
    container getStudentsData()
    {
        container       tmpCon;
        RPayRateTrans   rpayRateTrans;
        RPayAmount      fundTotalAmount,
                        fundAmountMth1,
                        fundAmountMth2,
                        fundAmountMth3;
        RHRMEmplId      keyEmplId;
        container       studentsData;

        studentsCommand.parmValue(connull());
        dataIterator = studentsCommand.iterator();

        while (dataIterator.more())
        {
            tmpCon = dataIterator.value();

            if (tmpCon == connull())
            {
                break;
            }

            [keyEmplId] = conpeek(tmpCon, 1);
            [#emplValueList] = conpeek(tmpCon, 2);

            rpayRateTrans = this.rateTrans(studentRate, keyEmplId);
            studentsData += [[keyEmplId,
                             strupr(rpayRateTrans.DocSeries) + ' ' + rpayRateTrans.DocNumber,
                             rpayRateTrans ? rPayRateTrans.DocDate : datenull(),
                             rpayRateTrans ? substr(rpayRateTrans.Notes, 1, strlen(rpayRateTrans.Notes) - 11) : '',
                             rpayRateTrans ? str2date(substr(rpayRateTrans.Notes, strlen(rpayRateTrans.Notes), -10), 123) : datenull(),
                             fundTotalAmount,
                             fundAmountMth1,
                             fundAmountMth2,
                             fundAmountMth3]];
            dataIterator.moveNext();
        }

        return studentsData;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    protected RPayPFReportValueContract_RSV getValue(Bookmark _bookmark)
    {
        container  conValues, conValue;
        RPayPFReportValueContract_RSV retValue = new RPayPFReportValueContract_RSV();

        totalFundCommand.parmValue([_bookmark]);
        dataIterator = totalFundCommand.iterator();

        conValues = dataIterator.value();

        if (conValues)
        {
            conValue  = conpeek(conValues, 2);
            retValue.unpack(conValue);
        }

        return retValue;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    public container parmContract()
    {
        return parmContract.pack();
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodEndDate</Name>
				<Source><![CDATA[
    public ReportPeriod_RU parmPeriodEndDate(ReportPeriod_RU _periodEndDate = periodEndDate)
    {
        periodEndDate = _periodEndDate;

        return periodEndDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodTransLimitDate</Name>
				<Source><![CDATA[
    public ReportPeriod_RU parmPeriodTransLimitDate(ReportPeriod_RU _periodTransLimitDate = periodTransLimitDate)
    {
        periodTransLimitDate = _periodTransLimitDate;

        return periodTransLimitDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmQueryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;

        return queryRun;
    }
]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    public void prepareData()
    {
        this.checkAndPrepareParameters();

        parmContract = new RPayPFReportParmContractGeneratorRSV();
        parmContract.reportStartPeriod(dateStartYr(periodEndDate));
        parmContract.reportEndPeriod(periodEndDate);
        parmContract.periodTransLimitPeriod(periodTransLimitDate);

        parmContract.queryRun(queryRun.pack());

        reportData = RPayPFReportCtrl::construct(this);
        reportData.prepareData();

        totalFundCommand = new RPayPFReportCommandRSV_2013(reportData.reportData(), [#TotalAmountDS]);
        studentsCommand  = new RPayPFReportCommandRSV_2013(reportData.reportData(), [#StudentDS]);
    }
]]></Source>
			</Method>
			<Method>
				<Name>rateTrans</Name>
				<Source><![CDATA[
    private RPayRateTrans rateTrans(RPayRateCode _rateCode, RHRMEmplId _emplId, TransDate _rateDate = dateNull())
    {
        RPayRateTrans          rPayRateTrans;

        if (prmisdefault(_rateDate))
        {
            rPayRateTrans = this.findRate(_rateCode, _emplId);
        }
        else
        {
            rPayRateTrans = this.findRate(_rateCode, _emplId, _rateDate);
        }

        if (rPayRateTrans.RecId)
        {
            return rPayRateTrans;
        }

        return null;
    }
]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    public RPayPFReportCtrl reportData()
    {
        return new RPayPFReportCtrlGeneratorRSV();
    }
]]></Source>
			</Method>
			<Method>
				<Name>newRPayPFRegisterGeneratorRSV</Name>
				<Source><![CDATA[
    static RPayPFRegisterGeneratorRSV newRPayPFRegisterGeneratorRSV(
        ReportPeriod_RU _periodEndDate,
        ReportPeriod_RU _periodTransLimitDate,
        container       _queryRunPack)
    {
        RPayPFRegisterGeneratorRSV rPayPFRegisterGeneratorRSV = new rPayPFRegisterGeneratorRSV();

        rPayPFRegisterGeneratorRSV.parmPeriodEndDate(_periodEndDate);
        rPayPFRegisterGeneratorRSV.parmPeriodTransLimitDate(_periodTransLimitDate);
        rPayPFRegisterGeneratorRSV.parmQueryRun(new QueryRun(_queryRunPack));

        return rPayPFRegisterGeneratorRSV;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>