<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowForecastTimeSeriesResultBalanceLastUpdatedValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CashFlowForecastTimeSeriesResultBalanceLastUpdatedValidator extends CashFlowLastUpdatedValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal final static CashFlowForecastTimeSeriesResultBalanceLastUpdatedValidator construct()
    {
        CashFlowForecastTimeSeriesResultBalanceLastUpdatedValidator validator = new CashFlowForecastTimeSeriesResultBalanceLastUpdatedValidator();
        validator.init();

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToleranceDays</Name>
				<Source><![CDATA[
    protected int getToleranceDays()
    {
        return 8;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLogOutsideToleranceWithZeroRows</Name>
				<Source><![CDATA[
    protected boolean shouldLogOutsideToleranceWithZeroRows()
    {
        boolean shouldLogOutsideToleranceWithZeroRows;

        PowerAIInsightsStateMachineFacade stateMachine = PowerAIInsightsStateMachineFacade::newForFeatureName(FinanceInsightsConstants::CashFlowInsightsFeatureNameV2);
        PowerAIInsightsStateMachineState currentState = stateMachine.getCurrentState();
        
        if (currentState == CashFlowInsightsStateMachineState::ExternalDataServicePolling)
        {
            DataJobServiceState dataJobServiceState = stateMachine.fetchPipelineState();
            DataJobServiceInitializeStatus initializeStatus = dataJobServiceState.parmInitializationStatus();
            if (initializeStatus == DataJobServiceInitializeStatus::Completed)
            {
                SysPowerAIModelState powerAIModelState = dataJobServiceState.parmPowerAIModelState();
                if (powerAIModelState != null 
                    && (powerAIModelState.parmStatus() == SysPowerAIStatus::Scheduled || powerAIModelState.parmStatus() == SysPowerAIStatus::Published))
                {
                    shouldLogOutsideToleranceWithZeroRows = true;
                }
            }
        }

        return shouldLogOutsideToleranceWithZeroRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    protected boolean exists()
    {
        return CashFlowForecastTimeSeriesResultBalance::exists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastModifiedDateTime</Name>
				<Source><![CDATA[
    protected utcdatetime lastModifiedDateTime()
    {
        return CashFlowForecastTimeSeriesResultBalance::lastModifiedDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    protected boolean isActive()
    {
        return CashflowInsightsActivation::isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOutsideTolerance</Name>
				<Source><![CDATA[
    protected void logOutsideTolerance()
    {
        logger.logWarning(strFmt('The CashFlowForecastTimeSeriesResultBalance data has not been updated for %1 days.', this.getToleranceDays()));

        result.addMessage(FinanceInsightsPipelineMessage::newWarningMessage(strFmt("@CashFlowManagement:CashFlowForecastTimeSeriesResultBalanceLastUpdatedTolerance", this.getToleranceDays())));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>