<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeqModulePayroll</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>NumberSeqModulePayroll</c> class is used to configure number sequences in the Payroll module.
/// </summary>
/// <remarks>
/// The details of configuring number sequence is in method loadModule().
/// </remarks>

public class NumberSeqModulePayroll extends NumberSeqApplicationModule
{
    #Define.MAXSEQRANGE(99999999)
    /// <summary>
    ///    Configures all of the data types that are used by the module.
    /// </summary>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadModule</Name>
				<Source><![CDATA[
    protected void loadModule()
    {
        NumberSeqDatatype datatype = NumberSeqDatatype::construct();

        this.setUpEarningStatementsIds(datatype);

        this.setUpPayStatementIds(datatype);

        this.setupElectronicPaymentNumber(datatype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the Payroll module for this class.
    /// </summary>
    /// <returns>
    ///    The module specific ID.
    /// </returns>

    public NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::Payroll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpEarningStatementsIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures the data types of Earning statement ids
    /// </summary>
    /// <param name="datatype">
    ///    The value of the number sequence datatype
    /// </param>
    public void setUpEarningStatementsIds(NumberSeqDatatype datatype)
    {
        /* Setup earning statement ids */
        datatype.parmDatatypeId(extendedTypeNum(PayrollEarningStatementId));
        datatype.parmReferenceHelp(literalStr("@Payroll:UniqueKeyForEarningStatementsYouUseTheKeyWhenCreatingNewEarn"));
        datatype.parmReferenceLabel(literalStr("@Payroll:EarningsStatementNumber"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(#MAXSEQRANGE);
        datatype.parmSortField(1);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpPayStatementIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures the data types of Pay statement ids
    /// </summary>
    /// <param name="datatype">
    ///    The value of the number sequence datatype
    /// </param>
    public void setUpPayStatementIds(NumberSeqDatatype datatype)
    {
        /* Setup pay statement ids */
        datatype.parmDatatypeId(extendedTypeNum(PayrollPayStatementId));
        datatype.parmReferenceHelp(literalStr("@Payroll:UniqueKeyForPayStatementsYouUseTheKeyWhenCreatingANewPayStat"));
        datatype.parmReferenceLabel(literalStr("@Payroll:PayStatementDocumentNumber"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(#MAXSEQRANGE);
        datatype.parmSortField(2);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        datatype.parmDatatypeId(extendedTypeNum(PayrollPayStatementVoucher));
        datatype.parmReferenceHelp(literalStr("@Payroll:TheUniqueCodeThatIsUsedWhenPayStatementsArePostedToTheGenera"));
        datatype.parmReferenceLabel(literalStr("@Payroll:PayStatementVoucher"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(#MAXSEQRANGE);
        datatype.parmSortField(3);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        datatype.parmDatatypeId(extendedTypeNum(PayrollVendorInvoiceNum));
        datatype.parmReferenceHelp(literalStr("@Payroll:TheUniqueIDThatIsAssignedAutomaticallyWhenInvoicesAreCreated"));
        datatype.parmReferenceLabel(literalStr("@Payroll:VendorInvoiceNumber"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(#MAXSEQRANGE);
        datatype.parmSortField(4);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        datatype.parmDatatypeId(extendedTypeNum(PayrollPayStatementBatchNumber));
        datatype.parmReferenceHelp(literalStr("@Payroll:TheBatchNumberIsDeterminedByTheNumberSequenceThatIsAssignedT"));
        datatype.parmReferenceLabel(literalStr("@SYS53635"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(#MAXSEQRANGE);
        datatype.parmSortField(5);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupElectronicPaymentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures the data types of Electronic payment numbers
    /// </summary>
    /// <param name="_datatype">
    ///     The value of the number sequence datatype
    /// </param>
    public void setupElectronicPaymentNumber(NumberSeqDatatype _datatype)
    {
        // Electronic Payment reference
        _datatype.parmDatatypeId(extendedTypeNum(PayrollElectronicPaymentNumber));
        _datatype.parmReferenceLabel('@PayrollProcessing:PayrollElectronicPaymentNumber');
        _datatype.parmReferenceHelp(literalStr('@PayrollProcessing:PayrollElectronicPaymentNumberHelpText'));
        _datatype.parmWizardIsContinuous(true);
        _datatype.parmWizardIsManual(NoYes::No);
        _datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        _datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        _datatype.parmWizardHighest(#MAXSEQRANGE);
        _datatype.parmSortField(41);

        _datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(_datatype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModulesMapSubsciber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Appends the current class to the map that links modules to number sequence data type generators.
    /// </summary>
    [SubscribesTo(classstr(NumberSeqGlobal),delegatestr(NumberSeqGlobal,buildModulesMapDelegate))]
    static void buildModulesMapSubsciber(Map numberSeqModuleNamesMap)
    {
        NumberSeqGlobal::addModuleToMap(classnum(NumberSeqModulePayroll), numberSeqModuleNamesMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>