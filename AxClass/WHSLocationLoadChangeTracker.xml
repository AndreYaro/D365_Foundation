<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationLoadChangeTracker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLocationLoadChangeTracker</c> class provides a mechanism
/// for accounting for physical on hand changes in the <c>WHSLocationLoad</c> table.
/// </summary>
class WHSLocationLoadChangeTracker
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>trackPhysicalOnHandChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tracks the physical on hand change in order to account for it
    /// in the <c>WHSLocationLoad</c> table.
    /// </summary>
    /// <param name="_args">
    /// The information about the change to the physical on hand.
    /// </param>
    public void trackPhysicalOnHandChange(InventPhysicalOnHandChangeArgs _args)
    {
        EcoResReleasedProductUnitConverter unitConverter = EcoResReleasedProductUnitConverter::construct();
        WHSLocationLoad locationLoadDelta;
        locationLoadDelta.adjustForOnHandChange(_args, unitConverter);

        if (locationLoadDelta.isVolumetricsPopulated())
        {
            WHSLocationLoad locationLoad = this.findLocationLoadByLocationWithPessimisticLock(_args.parmWMSLocation());

            if (locationLoad)
            {
                locationLoad.applyDelta(locationLoadDelta);
                locationLoad.update();
            }
            else
            {
                this.createLocationLoad(_args, locationLoadDelta);
            }
        }
        else if (!WHSLocationLoad::existsByLocation(_args.parmWMSLocation()))
        {
            this.createEmptyLocationLoad(_args);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmptyLocationLoad</Name>
				<Source><![CDATA[
    private void createEmptyLocationLoad(InventPhysicalOnHandChangeArgs _args)
    {
        WHSLocationLoad locationLoadDelta;

        this.createLocationLoad(_args, locationLoadDelta);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLocationLoad</Name>
				<Source><![CDATA[
    private void createLocationLoad(InventPhysicalOnHandChangeArgs _args, WHSLocationLoad _locationLoadDelta)
    {
        WHSLocationLoad locationLoad;

        try
        {
            locationLoad.initFromLocationOnHand(_args.parmWMSLocation(), _args.parmWHSLocationProfile(), _args.parmInventDim().LicensePlateId);
            locationLoad.applyDelta(_locationLoadDelta);
            locationLoad.insert();
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::lastDuplicateKeyViolatingTable() == locationLoad.TableId)
            {
                locationLoad = this.findLocationLoadByLocationWithPessimisticLock(_args.parmWMSLocation());

                if (!locationLoad)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }

                locationLoad.applyDelta(_locationLoadDelta);
                locationLoad.update();
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocationLoadByLocationWithPessimisticLock</Name>
				<Source><![CDATA[
    // Does pessimistic lock to reduce the amount of update conflicts in this code path.
    private WHSLocationLoad findLocationLoadByLocationWithPessimisticLock(WMSLocation _wmsLocation)
    {
        WHSLocationLoad locationLoad;

        select firstOnly pessimisticlock locationLoad
            where  locationLoad.InventLocationId == _wmsLocation.InventLocationId
                && locationLoad.WMSLocationId    == _wmsLocation.wMSLocationId;

        return locationLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSLocationLoadChangeTracker construct()
    {
		return new WHSLocationLoadChangeTracker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePhysicalOnHandOnLocationChanging</Name>
				<Source><![CDATA[
    [
        SubscribesTo(classStr(InventUpdate), delegatestr(InventUpdate, physicalOnHandChanging)),
        SubscribesTo(classStr(WHSInventoryTransactionRegistrationAction), delegatestr(WHSInventoryTransactionRegistrationAction, physicalOnHandChanging))
    ]
    /// <summary>
    /// Makes necessary adjustments to the <c>WHSLocationLoad</c> table
    /// when physical on hand is about to change.
    /// </summary>
    /// <param name="_context">
    /// The physical on hand change context.
    /// </param>
    /// <param name="_args">
    /// The information that describes the change of the physical on hand.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The <c>_context</c> must implement the <c>WHSILocationLoadTrackingContext</c> interface.
    /// Otherwise an error will be thrown.
    /// </exception>
    public static void handlePhysicalOnHandOnLocationChanging(
        Object                          _context,
        InventPhysicalOnHandChangeArgs  _args)
    {
        WHSILocationLoadTrackingContext loadTrackingContext = _context as WHSILocationLoadTrackingContext;
        if (!loadTrackingContext)
        {
			// changes to physical on hand on a location must be tracked. otherwise we will have inconsistent data in WHSLocationLoad
			throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!_args.parmInventDim().wMSLocationId)
        {
            return;
        }

        WHSLocationProfile locationProfile = _args.parmWHSLocationProfile();
        if (locationProfile && locationProfile.isVolumetricsEnabled())
        {
            loadTrackingContext.parmWHSLocationLoadChangeTracker().trackPhysicalOnHandChange(_args);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>