<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionManagerBank</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalizingDefinitionManagerBank</c> class provides the journalizing definition
///    implementation that is specific to the bank module.
/// </summary>
class JournalizingDefinitionManagerBank extends JournalizingDefinitionManager
{
    BankId                  bankId;
    VendPaymMode            vendPaymModeId;
    BankTransactionTypes    bankTransactionTypes;
    JournalizingDefinitionBankTrans  journalizingDefinitionBankTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the journalizing definition ID by using the parameter values.
    /// </summary>
    /// <returns>
    ///    The journalizing definition ID based on the class parameter.
    /// </returns>
    /// <remarks>
    ///    This method is a bank-specific implementation of the <c>getDefaultJournalizingDefinition</c> method
    ///    of the <c>JournalizingDefinitionManager</c> class.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The journalizing definition ID cannot be found for the given parameter values.
    /// </exception>
    public JournalizingDefinitionId getDefaultJournalizingDefinition()
    {
        BankGroupId                         bankGroupId = BankAccountTable::find(this.parmBankId()).BankGroupId;

        select firstonly JournalizingDefinition from
        journalizingDefinitionBankTrans
        order by BankCode asc, VendPaymModeCode  asc
        where
            (
              (journalizingDefinitionBankTrans.BankCode == TableGroupAll::Table &&
              journalizingDefinitionBankTrans.BankId == this.parmBankId()) ||
              (journalizingDefinitionBankTrans.BankCode == TableGroupAll::GroupId &&
              journalizingDefinitionBankTrans.BankGroupId == bankGroupId) ||
              journalizingDefinitionBankTrans.BankCode == TableGroupAll::All ) &&
            (
              (journalizingDefinitionBankTrans.VendPaymModeCode == TableAll::Table &&
              journalizingDefinitionBankTrans.VendPaymModeId == this.parmVendPaymModeId()) ||
              journalizingDefinitionBankTrans.VendPaymModeCode == TableAll::All ) &&
              journalizingDefinitionBankTrans.BankTransactionTypes == bankTransactionTypes;

        return journalizingDefinitionBankTrans.JournalizingDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankId</Name>
				<Source><![CDATA[
        BankId parmBankId(BankId    _bankId = bankId)
    {
        bankId  = _bankId;
        return  bankId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankTransactionTypes</Name>
				<Source><![CDATA[
        BankTransactionTypes parmBankTransactionTypes(BankTransactionTypes _bankTransactionTypes = bankTransactionTypes)
    {
        bankTransactionTypes = _bankTransactionTypes;
        return  bankTransactionTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPaymModeId</Name>
				<Source><![CDATA[
        VendPaymMode parmVendPaymModeId(VendPaymMode _vendPaymModeId = vendPaymModeId)
    {
        vendPaymModeId = _vendPaymModeId;
        return  vendPaymModeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertLedgerJourTypeToBankTransTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the Bank transaction type for the <c>journalizingDefinitionBankTrans</c>.
    /// </summary>
    /// <param name="_ledgerJournalType">
    ///     The ledger Journal Type which is used to set the Bank transaction type.
    /// </param>
    /// <returns>
    ///     The <c>BankTransactionTypes</c> value.
    /// </returns>
    public static BankTransactionTypes convertLedgerJourTypeToBankTransTypes(LedgerJournalType _ledgerJournalType)
    {
        BankTransactionTypes bankTransactionTypes = -1;

        if (_ledgerJournalType == LedgerJournalType::Payment)
        {
            bankTransactionTypes = BankTransactionTypes::Paymentjournal;
        }
        else if (_ledgerJournalType == LedgerJournalType::VendPromissoryNoteDraw)
        {
            bankTransactionTypes = BankTransactionTypes::PromisoryNotes;
        }
        else if (_ledgerJournalType == LedgerJournalType::VendPaymRemittance)
        {
            bankTransactionTypes = BankTransactionTypes::RemitPromissoryNotes;
        }
        else if (_ledgerJournalType == LedgerJournalType::VendPromissoryNoteRedraw)
        {
            bankTransactionTypes = BankTransactionTypes::RedrawPromissoryNotes;
        }
        else if (_ledgerJournalType == LedgerJournalType::VendPromissoryNoteSettle)
        {
            bankTransactionTypes = BankTransactionTypes::SettlePromissoryNotes;
        }
        else if (_ledgerJournalType == LedgerJournalType::PayrollDisbursement)
        {
            bankTransactionTypes = BankTransactionTypes::PayrollDisbursementJournal;
        }

        return bankTransactionTypes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>