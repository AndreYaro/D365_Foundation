<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPaymentJournalDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendPaymentJournalDP</c> class is a report data provider class for the Microsoft SQL
/// Server Reporting Services report.
/// </summary>
[SRSReportQueryAttribute(queryStr(VendPaymentJournal))]
[SRSReportParameterAttribute(classStr(VendPaymentJournalContract))]
class VendPaymentJournalDP extends SrsReportDataProviderPreProcessTempDB
{
    private LedgerJournalTable ledgerJournalTable;
    protected LedgerJournalTable ledgerJournalTable_1;
    private LedgerJournalTrans ledgerJournalTrans, ledgerJournalTrans_1;
    private VendTrans tmpVendTrans;
    protected VendTrans vendTrans;
    protected VendTransOpen vendTransOpen;
    protected VendSettlement vendSettlement;
    protected SpecTrans specTrans;
    private LedgerJournalId lastJournalNum;
    private AccountNum lastAccountNum;
    private Amount sumPaymSettleAmountCur;
    private Query query;
    protected VendPaymentJournalTmp vendPaymentJournalTmp;
    private RecId ledgerJournalTransRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNumberOfJourChecks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the total number of checks inside a journal.
    /// </summary>
    /// <returns>
    /// A <c>BankChequeNum</c> type variable that contains many checks.
    /// </returns>
    /// <remarks>
    /// This method counts the check inside a journal and return that count.
    /// </remarks>
    private BankChequeNum getNumberOfJourChecks()
    {
        LedgerJournalTrans localLedgerJournalTrans;
        BankChequeNum recordCountStr;

        select count(RecId) from localLedgerJournalTrans
            where localLedgerJournalTrans.BankChequeNum
                && localLedgerJournalTrans.JournalNum == lastJournalNum;

        recordCountStr = int642str(localLedgerJournalTrans.RecId);
        return recordCountStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendPaymentJournalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>VendPaymentJournalTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///  An instance of the <c>VendPaymentJournalTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(VendPaymentJournalTmp))]
    public VendPaymentJournalTmp getVendPaymentJournalTmp()
    {
        select vendPaymentJournalTmp
            order by vendPaymentJournalTmp.RecId;

        return vendPaymentJournalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataFromLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize fields of <c>VendPaymentJournalTmp</c> table buffer from <c>LedgerJournalTable</c> table buffer.
    /// </summary>
    protected void populateDataFromLedgerJournalTable()
    {
        vendPaymentJournalTmp.JournalNum = ledgerJournalTable_1.JournalNum;
        vendPaymentJournalTmp.Name = ledgerJournalTable_1.Name;
        vendPaymentJournalTmp.Posted = ledgerJournalTable_1.Posted;
        vendPaymentJournalTmp.NumberOfJourChecks = this.getNumberOfJourChecks();
        vendPaymentJournalTmp.DetailsPrinted = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize fields of <c>VendPaymentJournalTmp</c> table buffer from <c>LedgerJournalTrans</c> table buffer.
    /// </summary>
    protected void populateDataFromLedgerJournalTrans()
    {
        vendPaymentJournalTmp.Amount = ledgerJournalTrans_1.amount();
        vendPaymentJournalTmp.LedgerDimension = ledgerJournalTrans_1.parmLedgerDimension();
        vendPaymentJournalTmp.MainAccountId = ledgerJournalTrans_1.parmAccount();
        vendPaymentJournalTmp.AccountName = ledgerJournalTrans_1.accountName();
        vendPaymentJournalTmp.Txt = ledgerJournalTrans_1.Txt;
        vendPaymentJournalTmp.TransDate = ledgerJournalTrans_1.TransDate;
        vendPaymentJournalTmp.Voucher = ledgerJournalTrans_1.Voucher;
        vendPaymentJournalTmp.BankChequeNum = ledgerJournalTrans_1.BankChequeNum;
        vendPaymentJournalTmp.AmountCurDebit = ledgerJournalTrans_1.AmountCurDebit;
        vendPaymentJournalTmp.AmountCurCredit = ledgerJournalTrans_1.AmountCurCredit;
        vendPaymentJournalTmp.CurrencyCode = ledgerJournalTrans_1.CurrencyCode;
        vendPaymentJournalTmp.DetailsPrinted = NoYes::No;
        vendPaymentJournalTmp.IsFirstInvoice = NoYes::No;
        vendPaymentJournalTmp.IsLastInvoice = NoYes::No;
        vendPaymentJournalTmp.SumPaymSettleAmount = 0.0;
        vendPaymentJournalTmp.PaymSettleAmountCur = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataFromVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize fields of <c>VendPaymentJournalTmp</c> table buffer from <c>VendTrans</c> table buffer.
    /// </summary>
    protected void populateDataFromVendTrans()
    {
        vendPaymentJournalTmp.Invoice = tmpVendTrans.Invoice;
        vendPaymentJournalTmp.IsFirstAccount = NoYes::No;
        vendPaymentJournalTmp.VendTransTransDate = tmpVendTrans.TransDate;
        vendPaymentJournalTmp.VendTransCurrencyCode = tmpVendTrans.CurrencyCode;
        vendPaymentJournalTmp.AmountCur = tmpVendTrans.AmountCur;
        vendPaymentJournalTmp.SettleAmountCur = this.vendTransSettleAmountCur();
        vendPaymentJournalTmp.UtilizedCashDisc = -vendSettlement.UtilizedCashDisc;
        vendPaymentJournalTmp.PennyDiff = vendSettlement.PennyDiff;
        vendPaymentJournalTmp.RemainAmount = tmpVendTrans.remainAmountCur();
        vendPaymentJournalTmp.PaymSettleAmountCur = this.vendTransPaymSettleAmountCur();
        vendPaymentJournalTmp.IsFromVendTrans = NoYes::Yes;
        vendPaymentJournalTmp.DetailsPrinted = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTrans</c> table buffer.
    /// </summary>
    /// <returns>
    /// The <c>VendTrans</c> buffer.
    /// </returns>
    [Hookable(true)]
    protected final VendTrans getCurrentVendTrans()
    {
        return tmpVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataFromSpecTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize fields of <c>VendPaymentJournalTmp</c> table buffer from <c>SpecTrans</c> table buffer.
    /// </summary>
    protected void populateDataFromSpecTrans()
    {
        vendPaymentJournalTmp.Invoice = vendTrans.Invoice;
        vendPaymentJournalTmp.IsFirstAccount = NoYes::No;
        vendPaymentJournalTmp.VendTransTransDate = vendTrans.TransDate;
        vendPaymentJournalTmp.VendTransCurrencyCode = vendTrans.CurrencyCode;
        vendPaymentJournalTmp.AmountCur = this.specTransInvoiceAmountCur();
        vendPaymentJournalTmp.OpeningBalance = this.specTransOpeningBalance();
        vendPaymentJournalTmp.SettleAmountCur = this.specTransSettleAmountCur();
        vendPaymentJournalTmp.DiscountTaken = this.specTransDiscountTaken();
        vendPaymentJournalTmp.RemainAmount = this.specTransRemainAmount();
        vendPaymentJournalTmp.PaymSettleAmountCur = this.specTransPaymSettleAmountCur();
        vendPaymentJournalTmp.IsFromVendTrans = NoYes::No;
        vendPaymentJournalTmp.DetailsPrinted = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs business logic processing to populate the temporary table buffer and sends it to the
    /// Reporting Services report to display.
    /// </summary>
    /// <remarks>
    /// This method will be called by Reporting Services at runtime. The method should compute data and
    /// populate the data tables that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        QueryRun qr;
        boolean detailsPrinted = false;
        boolean isFirstInvoice = false;
        boolean isFirstAccount = true;
        Set vendTransRecIdMap = new Set(Types::Int64);
        RecId recId;
        CompanyId cId;

        VendPaymentJournalContract contract = this.parmDataContract() as VendPaymentJournalContract;
        ledgerJournalTransRecId = contract.parmLedgerJournalTransRecId();

        query = this.parmQuery();

        if (ledgerJournalTransRecId != 0)
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(ledgerJournalTransRecId, false);
            ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);

            this.setRange();
        }
        else
        {
            return;
        }

        qr = new QueryRun(query);

        while (qr.next())
        {
            ledgerJournalTable_1 = qr.get(ledgerJournalTable_1.TableId);
            if (lastJournalNum != ledgerJournalTable_1.JournalNum)
            {
                isFirstAccount = true;
            }

            lastJournalNum = ledgerJournalTable_1.JournalNum;
            this.populateDataFromLedgerJournalTable();

            ledgerJournalTrans_1 = qr.get(ledgerJournalTrans_1.TableId);
            this.populateDataFromLedgerJournalTrans();

            detailsPrinted = false;

            sumPaymSettleAmountCur = 0.0;

            // If the payment has been posted, get settlement details from VendTrans and VendSettlement.
            if (ledgerJournalTable_1.Posted)
            {
                LedgerJournalTrans ledgerJournalTransPayment;

                if (ledgerJournalTrans_1.isCompanyIntercompany())
                {
                    ledgerJournalTransPayment = LedgerJournalTrans::findIntercompanyPayment(ledgerJournalTrans_1);
                }
                else
                {
                    ledgerJournalTransPayment = ledgerJournalTrans_1;
                }

                changecompany(ledgerJournalTransPayment.Company)
                {
                    DimensionAttributeValueCombination dimAttrValueCombo;
                    VendTrans orgVendTrans;

                    while select orgVendTrans
                        order by orgVendTrans.RecId
                        where orgVendTrans.Voucher == ledgerJournalTransPayment.Voucher
                            && orgVendTrans.TransDate == ledgerJournalTransPayment.TransDate
                            && orgVendTrans.TransType == LedgerTransType::Payment
                    join RecId from dimAttrValueCombo
                        where dimAttrValueCombo.RecId == ledgerJournalTransPayment.LedgerDimension
                            && dimAttrValueCombo.DisplayValue == orgVendTrans.AccountNum
                    {
                        // Added check if the VendTrans.RecId exists in the set because of
                        // scenarios where multiple vendor transactions exist with the same voucher number.
                        if (vendTransRecIdMap.in(orgVendTrans.RecId))
                        {
                            // Already printed this vendor transactions settle, continue
                            // to see it there additional customer transaction with same voucher.
                            continue;
                        }
                        else
                        {
                            vendTransRecIdMap.add(orgVendTrans.RecId);
                            cId = orgVendTrans.company();
                            isFirstInvoice = false;

                            while select crossCompany vendSettlement order by TransDate
                                where vendSettlement.OffsetRecid == orgVendTrans.RecId
                                    && vendSettlement.OffsetAccountNum == orgVendTrans.AccountNum
                                    && vendSettlement.OffsetCompany == orgVendTrans.company()
                            {
                                tmpVendTrans = VendTrans::findByCompany(vendSettlement.company(), vendSettlement.TransRecId);
                                sumPaymSettleAmountCur += this.vendTransPaymSettleAmountCur();
                                this.populateDataFromVendTrans();

                                detailsPrinted = true;

                                if (!isFirstInvoice)
                                {
                                    isFirstInvoice = true;
                                    vendPaymentJournalTmp.IsFirstInvoice = NoYes::Yes;
                                }
                                else
                                {
                                    vendPaymentJournalTmp.IsFirstInvoice = NoYes::No;
                                }

                                if (isFirstAccount)
                                {
                                    vendPaymentJournalTmp.IsFirstAccount = NoYes::Yes;
                                    isFirstAccount = false;
                                }

                                vendPaymentJournalTmp.insert();
                                recId = vendPaymentJournalTmp.RecId;
                            }
                            // found Vendor transaction for the voucher can now break.
                            break;
                        }
                    }
                }
            }
            else // Else, if unposted, get data from SpecTrans.
            {
                isFirstInvoice = false;
                while select crosscompany specTrans
                    where specTrans.SpecRecId == ledgerJournalTrans_1.RecId
                        && specTrans.SpecTableId == ledgerJournalTrans_1.TableId
                        && specTrans.SpecCompany == ledgerJournalTrans_1.company()
                {
                    changecompany(ledgerJournalTrans_1.Company)
                    {
                        vendTransOpen = specTrans.vendTransOpen();
                        vendTrans = specTrans.vendTrans();
                        tmpVendTrans = vendTrans;
                    }
                    sumPaymSettleAmountCur += this.specTransPaymSettleAmountCur();
                    this.populateDataFromSpecTrans();

                    detailsPrinted = true;

                    if (!isFirstInvoice)
                    {
                        isFirstInvoice = true;
                        vendPaymentJournalTmp.IsFirstInvoice = NoYes::Yes;
                    }
                    else
                    {
                        vendPaymentJournalTmp.IsFirstInvoice = NoYes::No;
                    }
                    if (isFirstAccount)
                    {
                        vendPaymentJournalTmp.IsFirstAccount = NoYes::Yes;
                        isFirstAccount = false;
                    }
                    vendPaymentJournalTmp.insert();
                    recId = vendPaymentJournalTmp.RecId;
                }
            }

            if (!detailsPrinted)
            {
                if (isFirstAccount)
                {
                    vendPaymentJournalTmp.IsFirstAccount = NoYes::Yes;
                    isFirstAccount = false;
                }

                vendPaymentJournalTmp.insert();
                vendPaymentJournalTmp.clear();
            }
            else
            {
                ttsbegin;
                select forupdate vendPaymentJournalTmp
                    where vendPaymentJournalTmp.RecId == recId;

                vendPaymentJournalTmp.SumPaymSettleAmount = sumPaymSettleAmountCur;
                vendPaymentJournalTmp.IsLastInvoice = NoYes::Yes;
                vendPaymentJournalTmp.update();
                ttscommit;

                isFirstAccount = true;
                vendPaymentJournalTmp.clear();
                sumPaymSettleAmountCur = 0.0;
            }
            detailsPrinted = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    private void setRange()
    {
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange queryBuildRangeJournalNum;
        QueryBuildRange queryBuildRangePosted;

        if (ledgerJournalTable)
        {
            queryBuildDataSource = query.dataSourceTable(tableNum(LedgerJournalTable));

            // If the LedgerJournalTable datasource does not exist on the report, create it.
            if (!queryBuildDataSource)
            {
                queryBuildDataSource = query.addDataSource(tableNum(LedgerJournalTable));
            }

            queryBuildDataSource.addSortField(fieldNum(LedgerJournalTable, JournalNum), SortOrder::Ascending);

            // Create the JournalNum range.
            queryBuildRangeJournalNum = queryBuildDataSource.findRange(fieldNum(LedgerJournalTable, JournalNum));
            if (!queryBuildRangeJournalNum)
            {
                queryBuildRangeJournalNum = queryBuildDataSource.addRange(fieldNum(LedgerJournalTable, JournalNum));
            }

            // Create the Posted range
            queryBuildRangePosted = queryBuildDataSource.findRange(fieldNum(LedgerJournalTable, Posted));
            if (!queryBuildRangePosted)
            {
                queryBuildRangePosted = queryBuildDataSource.addRange(fieldNum(LedgerJournalTable, Posted));
            }

            // Set the range values
            queryBuildRangeJournalNum.value(queryValue(ledgerJournalTable.JournalNum));
            queryBuildRangePosted.value(enum2str(ledgerJournalTable.Posted));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransDiscountTaken</Name>
				<Source><![CDATA[
    private Amount specTransDiscountTaken()
    {
        VendTransCashDisc vendTransCashDisc;
        Amount cashDiscAmount;
        Amount overUnderDiscountAllowed;

        vendTransCashDisc = VendTransCashDisc::findCashDisc(tableNum(VendTransOpen), vendTransOpen.RecId);

        // If there is at least one Cash Discount Amount
        if (vendTransCashDisc)
        {
            // Find the appropriate cash discount
            switch (vendTransOpen.UseCashDisc)
            {
                case UseCashDisc::Normal:
                    // Find the first cash discount record by date (logically, should usually have the highest discount)
                    cashDiscAmount = VendTransCashDisc::findCashDisc(
                        tableNum(VendTransOpen),
                        vendTransOpen.RecId,
                        ledgerJournalTrans_1.TransDate,
                        VendPaymModeTable::discGraceDays(vendTrans.PaymMode)).CashDiscAmount;
                    break;

                case UseCashDisc::Always:
                    // Find the first record not taking TransDate into consideration.  This should be the first Cash Discount by date.
                    cashDiscAmount = VendTransCashDisc::findCashDisc(tableNum(VendTransOpen), vendTransOpen.RecId).CashDiscAmount;
                    break;

                case UseCashDisc::Never:
                    return 0;

                default:
                    return 0;
            }
        }
        else // No Cash Discount Amount records, so return 0.
        {
            return 0;
        }

        // If the invoice is being paid in full.
        overUnderDiscountAllowed = CurrencyExchangeHelper::curAmount(VendParameters::find().MaxMSTOverUnder, tmpVendTrans.CurrencyCode, tmpVendTrans.TransDate);
        if ((this.specTransOpeningBalance() + this.specTransSettleAmountCur() -cashDiscAmount) <= overUnderDiscountAllowed)
        {
            return -cashDiscAmount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransInvoiceAmountCur</Name>
				<Source><![CDATA[
    private Amount specTransInvoiceAmountCur()
    {
        return vendTrans.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransOpeningBalance</Name>
				<Source><![CDATA[
    private AmountCur specTransOpeningBalance()
    {
        return this.specTransInvoiceAmountCur() - vendTrans.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransPaymSettleAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the current <c>SpecTrans</c> table payment settlement amount.
    /// </summary>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    private real specTransPaymSettleAmountCur()
    {
        Amount paymSettleAmount;

        if (ledgerJournalTrans_1.CurrencyCode == vendTrans.CurrencyCode)
        {
            // Currency code are the same so just round the amount for invoice currency.
            paymSettleAmount = CurrencyExchangeHelper::amount(this.specTransSettleAmountCur(), ledgerJournalTrans.CurrencyCode);
        }
        else if (specTrans.CrossRate != 0)
        {
            // Use the cross rate to calcuate the payment currency. Round the result.
            paymSettleAmount = CurrencyExchangeHelper::amount(this.specTransSettleAmountCur() * specTrans.CrossRate / 100, ledgerJournalTrans.CurrencyCode);
        }
        else
        {
            // First convert the invoice currency to the MST currency and then convert MST to payment currency. Round the result.
            paymSettleAmount = CurrencyExchangeHelper::mstAmount(this.specTransSettleAmountCur(), vendTrans.CurrencyCode, ledgerJournalTrans.TransDate, UnknownNoYes::Unknown, 0, 0, false);
            paymSettleAmount = CurrencyExchangeHelper::curAmount(paymSettleAmount, ledgerJournalTrans.CurrencyCode, ledgerJournalTrans_1.TransDate, UnknownNoYes::Unknown, ledgerJournalTrans_1.ExchRate);
        }

        return paymSettleAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransRemainAmount</Name>
				<Source><![CDATA[
    private Amount specTransRemainAmount()
    {
        return this.specTransOpeningBalance() + this.specTransSettleAmountCur() + this.specTransDiscountTaken();
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransSettleAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>SpecTrans</c> table settlement amount.
    /// </summary>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    private real specTransSettleAmountCur()
    {
        return -specTrans.Balance01;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTransPaymSettleAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the vendor payment transaction settlement amount.
    /// </summary>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    private Amount vendTransPaymSettleAmountCur()
    {
        VendSettlement tmpVendSettlement;
        Amount paymSettleAmountCur;

        select firstonly crosscompany SettleAmountCur from tmpVendSettlement
            where tmpVendSettlement.OffsetRecid == vendSettlement.TransRecId
                && tmpVendSettlement.TransRecId == vendSettlement.OffsetRecid
                && tmpVendSettlement.SettlementGroup == vendSettlement.SettlementGroup
                && tmpVendSettlement.OffsetCompany == tmpVendTrans.company();

        // No easy way to determine if settlement record is a reversal or not, so going with the
        //  assumption that Payment and Payment currency amount will always carry same sign.
        paymSettleAmountCur = tmpVendSettlement.SettleAmountCur;

        if (this.vendTransSettleAmountCur() > 0)
        {
            if (!(paymSettleAmountCur > 0))
            {
                paymSettleAmountCur = -paymSettleAmountCur;
            }
        }
        else
        {
            if (paymSettleAmountCur > 0)
            {
                paymSettleAmountCur = -paymSettleAmountCur;
            }
        }
        return paymSettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTransSettleAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the vendor transaction settlement amount.
    /// </summary>
    /// <returns>
    /// The calculated amount.
    /// </returns>
    private Amount vendTransSettleAmountCur()
    {
        return -1 * ((vendSettlement.SettleAmountCur - vendSettlement.UtilizedCashDisc) + vendSettlement.PennyDiff);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>