<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentDataProvider</c> class is a base abstract class for the kanban job providers
///    that are used during the subcontracting documents creation.
/// </summary>
public abstract class LeanDocumentDataProvider implements LeanDocumentDataProviderInterface
{
    Query       query;
    QueryRun    queryRun;
    boolean     isCurrentRecordValidCache;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds and sets range values to the query object.
    /// </summary>
    /// <param name="_tableId">
    ///    The table ID.
    /// </param>
    /// <param name="_fieldId">
    ///    The field ID.
    /// </param>
    /// <param name="_rangeValue">
    ///    The range value.
    /// </param>
    /// <param name="_ignoreZero">
    ///    A Boolean value that indicates whether zeros in the value parameter must be ignored.
    /// </param>
    protected void addRange(tableId _tableId,
                            fieldId _fieldId,
                            str _rangeValue,
                            boolean _ignoreZero = true)
    {
        #define.emptyString('')
        #define.emptyInt('0')

        QueryBuildDataSource        qbds = query.dataSourceTable(_tableId);
        QueryBuildRange             qbdr = SysQuery::findOrCreateRange(qbds, _fieldId);

        // only add ranges for non-empty values (which for integers will be '0')
        if (_rangeValue != #emptyString
            && (!_ignoreZero
                || _rangeValue != #emptyInt))
        {
            qbdr.value(_rangeValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The other object.
    /// </param>
    /// <returns>
    ///    true if the two objects hold the same state; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentDataProvider otherProvider = otherObject as LeanDocumentDataProvider;

        return  otherObject == this
                || ( otherProvider != null
                        && query.name()                 == otherProvider.parmQuery().name()
                        && isCurrentRecordValidCache    == otherProvider.parmIsCurrentRecordValidCache());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a table buffer that is related to the current record.
    /// </summary>
    /// <param name="_tableId">
    ///    The type ID to retrieve data from the current record.
    /// </param>
    /// <returns>
    ///    A buffer of the required type, if there is a current record and such a buffer; otherwise, null.
    /// </returns>
    public Common getCurrentRecord(tableId _tableId)
    {
        if (!this.parmIsCurrentRecordValidCache()
            || !queryRun)
        {
            // not initialized or next() not called
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return queryRun.get(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal state of the providers.
    /// </summary>
    protected void init()
    {
        if (!query)
        {
            throw error(Error::missingParameter(this));
        }

        queryRun                    = new QueryRun(query);
        isCurrentRecordValidCache   = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrentRecordValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a runtime hook for validating the current record.
    /// </summary>
    /// <returns>
    ///    true if the current record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The main assumption is that not all constraints of the provider can be modeled with a query object.
    ///    Therefore, you must have a way to provide per-record validation.
    /// </remarks>
    protected boolean isCurrentRecordValid()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>LeanDocumentDataProvider</c> class.
    /// </summary>
    /// <param name="_query">
    ///    The query object that is used as the main source of the provider.
    /// </param>
    protected void new(Query _query)
    {
        query                   = _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Iterates the provider to the next kanban job.
    /// </summary>
    /// <returns>
    ///    true if there is a next record that satisfies the conditions; otherwise, false.
    /// </returns>
    public boolean next()
    {
        boolean isCurrentRecordValidLocal = false;

        // provide local scope of validity so implicit calls to getCurrentRecord()
        // can be executed
        isCurrentRecordValidCache = true;

        while (!isCurrentRecordValidLocal
                && queryRun.next())
        {
            isCurrentRecordValidLocal = this.isCurrentRecordValid();
        }

        // adjust the cached validity to the actual state
        isCurrentRecordValidCache = isCurrentRecordValidLocal;

        return isCurrentRecordValidLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCurrentRecordValidCache</Name>
				<Source><![CDATA[
        protected boolean parmIsCurrentRecordValidCache(boolean _isCurrentRecordValidCache = isCurrentRecordValidCache)
    {
        isCurrentRecordValidCache = _isCurrentRecordValidCache;

        return isCurrentRecordValidCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
        protected Query parmQuery(Query _query = query)
    {
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
        private QueryRun parmQueryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;

        return queryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>