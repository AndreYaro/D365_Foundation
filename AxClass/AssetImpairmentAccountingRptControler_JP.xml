<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentAccountingRptControler_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller of asset impairment accounting report.
/// </summary>
public class AssetImpairmentAccountingRptControler_JP extends SrsReportRunController implements BatchRetryable
{    
    AssetImpairmentAccountingRptContract_JP     contract;
    AssetImpairmentTestResult_JP                testResultTable;
    container                                   testNumCon;

    #define.CurrentVersion(1)
    #localmacro.VersionList
        testNumCon
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        int enumValue;
        enumValue = args.parmEnum();

        if (testNumCon == conNull())
        {
            switch (enumValue)
            {
                case AssetImpairmentSharedAssetsMethod_JP::Method1:
                    testNumCon = [contract.parmTestResultNumber(), ''];
                    break;

                case AssetImpairmentSharedAssetsMethod_JP::Method2:
                    testNumCon = ['', contract.parmTestResultNumber()];
                    break;
            }
        }
        else
        {
            testNumCon = conPoke(testNumCon, enumValue, contract.parmTestResultNumber());
        }

        return [#CurrentVersion, testNumCon, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00014] ],
            funcName()
        );

        contract        = this.parmReportContract().parmRdpContract();
        testResultTable = args.record() as AssetImpairmentTestResult_JP;

        if (testResultTable)
        {
            contract.parmTestResultNumber(testResultTable.TestNum);
        }
        else
        {
            if (testNumCon == conNull())
            {
                contract.parmTestResultNumber('');
            }
            else
            {
                contract.parmTestResultNumber(conPeek(testNumCon, args.parmEnum()));
            }
        }

        contract.parmImpairmentMethod(args.parmEnum());
        this.setDialogCaption();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        super();

        this.setReportName();
        this.setDialogCaption();

        SRSPrintDestinationSettings printSetting  = this.parmReportContract().parmPrintSettings();
        ISrsReportFileFormatContract fileFormatContract = this.parmReportContract().parmRdpContract() as ISrsReportFileFormatContract;

        if (this.isInBatch())
        {
            printSetting.printMediumType(SRSPrintMediumType::Archive);
        }
        else
        {
            SrsReportFileFormatControllerHelper::setPrintMedium(printSetting, fileFormatContract.parmFileFormat(), this.parmReportName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the dialog caption.
    /// </summary>
    public void setDialogCaption()
    {
        switch (args.parmEnum())
        {
            case AssetImpairmentSharedAssetsMethod_JP::Method1:
                this.parmDialogCaption("@SYP4880389");
                break;

            case AssetImpairmentSharedAssetsMethod_JP::Method2:
                this.parmDialogCaption("@SYP4880390");
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects report
    /// </summary>
    protected void setReportName()
    {
        contract = this.parmReportContract().parmRdpContract();

        str ssrsReportName = this.getReportName();

        this.getReportContract().parmReportName(ssrsReportName);
        this.parmReportName(ssrsReportName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    protected SRSCatalogItemName getReportName()
    {
        SRSCatalogItemName ssrsReportName;

        if (args.parmEnum() == AssetImpairmentSharedAssetsMethod_JP::Method1)
        {
            if (contract.parmDetailsLevel() == AssetImpairmentReportDetailsLevel_JP::TotalsOnly)
            {
                ssrsReportName = ssrsReportStr(AssetImpairmentAccountingReport_JP, TotalsOnlyReport);
            }
            else
            {
                ssrsReportName = ssrsReportStr(AssetImpairmentAccountingReport_JP, DetailsReport);
            }
        }
        else
        {
            if (contract.parmDetailsLevel() == AssetImpairmentReportDetailsLevel_JP::TotalsOnly)
            {
                ssrsReportName = ssrsReportStr(AssetImpairmentAccountingReport_JP, MethodTwoTotalsOnlyReport);
            }
            else
            {
                ssrsReportName = ssrsReportStr(AssetImpairmentAccountingReport_JP, MethodTwoDetailsReport);
            }
        }

        return ssrsReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedState)
    {
        container   packedSuper;
        boolean     ret;
        int         version;

        version = SysOperationHelper::getVersion(packedState);

        switch (version)
        {
            case #CurrentVersion:
                [version, #VersionList, packedSuper] = packedState;
                ret = super(packedSuper);
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppress print setting.
    /// </summary>
    /// <returns>false</returns>
    public boolean showPrintSettings()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00019] ],
            funcName()
        );

        AssetImpairmentAccountingRptControler_JP controller  = new AssetImpairmentAccountingRptControler_JP();

        controller.parmReportName(ssrsReportStr(AssetImpairmentAccountingReport_JP, TotalsOnlyReport));
        controller.parmArgs(_args);
        controller.getReportContract().parmRdpContract().parmFileFormat(SRSReportFileFormat::PDF);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>