<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqMRPSetupDiagnosticsRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqMRPSetupDiagnosticsRule</c> class is used to check master planning setup.
/// </summary>
[DiagnosticsRuleAttribute]
public final class ReqMRPSetupDiagnosticsRule implements IDiagnosticsRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates master planning setup.
    /// </summary>
    /// <returns>
    /// An instance of <c>DiagnosticsRuleValidationResult</c> which contains the validation result.
    /// </returns>
    [DiagnosticsRuleSubscriptionAttribute(DiagnosticsArea::Manufacturing, "@SCM:MRPSetupDiagnosticsRuleName", DiagnosticsRunFrequency::Monthly, "@SCM:MRPSetupDiagnosticsRuleDescription")]
    public DiagnosticsRuleValidationResult validate()
    {
        const int maxBundleSize = 100;
        const int limitNumOfItemPerBatch = 10000;
        DiagnosticsRuleValidationResult validationResult = DiagnosticsRuleValidationResult::construct();
        ReqParameters       reqParameters;
        ReqLog reqLog;
        container bundleSizeDataArea, useCacheMaxDataArea, useCacheMinDataArea;

        while select crosscompany DataAreaId, avg(NumOfItems)
            from reqLog
            group by reqLog.DataAreaId, reqParameters.UseCache, reqParameters.BundleSize
            where reqLog.EndDateTime <= DateTimeUtil::getSystemDateTime()
                && reqLog.EndDateTime >= DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), -30)  // Set to 30 since the run frequency is Monthly
            join BundleSize, UseCache from reqParameters
            where reqParameters.DataAreaId == reqLog.DataAreaId
        {
            if (reqLog.NumOfItems && reqParameters.BundleSize > maxBundleSize)
            {
                bundleSizeDataArea += [reqLog.DataAreaId];
            }

            if (reqLog.NumOfItems > limitNumOfItemPerBatch && reqParameters.UseCache != ReqUseCache::Maximum)
            {
                useCacheMaxDataArea += [reqLog.DataAreaId];
            }

            if (reqLog.NumOfItems <= limitNumOfItemPerBatch && reqParameters.UseCache != ReqUseCache::Minimum)
            {
                useCacheMinDataArea += [reqLog.DataAreaId];
            }
        }

        if (conLen(bundleSizeDataArea))
        {
            validationResult.addValidationResult("@SCM:MRPBatchBundleSizeValidationMessage", DiagnosticsValidationSeverity::Low, "@SCM:MRPBatchBundleSizeValidationRecommendation");
            validationResult.addValidationDetail("@SYS315616", con2Str(bundleSizeDataArea));
        }

        if (conLen(useCacheMaxDataArea))
        {
            validationResult.addValidationResult("@SCM:MRPUseCacheMaximumValidationMessage", DiagnosticsValidationSeverity::Low, "@SCM:MRPUseCacheMaximumValidationRecommendation");
            validationResult.addValidationDetail("@SYS315616", con2Str(useCacheMaxDataArea));
        }

        if (conLen(useCacheMinDataArea))
        {
            validationResult.addValidationResult("@SCM:MRPUseCacheMinimumValidationMessage", DiagnosticsValidationSeverity::Low, "@SCM:MRPUseCacheMinimumValidationRecommendation");
            validationResult.addValidationDetail("@SYS315616", con2Str(useCacheMinDataArea));
        }

        return validationResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>