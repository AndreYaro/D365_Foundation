<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorRulesChannel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCommerceValidatorRulesChannel</c> class validates channel rules.
/// </summary>
public class RetailCommerceValidatorRulesChannel
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate entity type list.
    /// </summary>
    /// <returns>The map containing all entity types and their descriptions.</returns>
    public static Map getEntityType()
    {
        Map entityList = new Map(Types::String,Types::Container);

        entityList.insert("@Retail:RetailCommerceValidatorChannelEntityId", [RetailCommerceValidatorEntityFunction::Functional, tableNum(RetailInternalOrganization), classStr(RetailCommerceValidatorRulesChannel)]);

        return entityList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRulesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate rule list.
    /// </summary>
    /// <returns>The map containing all rules and rule related properties.</returns>
    public static Map getRulesList()
    {
        Map rulesList = new Map(Types::String,Types::Container);

        // Validates channels without category hierarchy.
        rulesList.insert("@Retail:RetailCommerceValidatorChannelRule001", [
            "@Retail:RetailCommerceValidatorChannelEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorChannelRule001Description",
            'validateChannelCategoryHierarchyMissing',
            formStr(RetailInternalOrganization),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        // Validates channels for cloud search configuration setup.
        rulesList.insert("@Retail:RetailCommerceValidatorChannelRule002", [
            "@Retail:RetailCommerceValidatorChannelEntityId",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorChannelRule002Description",
            'validateCloudSearchConfiguration',
            formStr(RetailParameters),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        return rulesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChannelCategoryHierarchyMissing</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Channel-Ru-001': Channel category hierarchy is missing
    /// Validates if Channel category hierarchy is missing or not, logs an error if missing.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    public static container validateChannelCategoryHierarchyMissing(RetailCommerceValidatorTests _validatorTest)
    {
        int resultsCounter = 0;
        RetailInternalOrganization  retailInternalOrganization;
        OMInternalOrganization  oMInternalOrganization;
        RetailCommerceValidator  retailCommerceValidator;
        
        select firstonly OMOperatingUnitId from retailCommerceValidator
             where retailCommerceValidator.ValidationId == _validatorTest.ValidationId
          notexists join retailInternalOrganization
            where retailInternalOrganization.InternalOrganization == retailCommerceValidator.OMOperatingUnitId &&
                  retailInternalOrganization.CategoryHierarchy != 0;

        if (retailCommerceValidator.OMOperatingUnitId)
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextChannel(
                    _validatorTest.ValidationId,
                    retailCommerceValidator.OMOperatingUnitId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    "@Retail:RetailCommerceValidatorChannelRule001Description",
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorChannelRule001"
                    );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCloudSearchConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Channel-Ru-002': Cloud search configuration is missing
    /// Validates if cloud search/ azure search configuration is enabled or not, logs an error if not enabled.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    public static container validateCloudSearchConfiguration(RetailCommerceValidatorTests _validatorTest)
    {
        int resultsCounter = 0;
        RetailOnlineChannelTable onlineChannelTable;
        RetailCommerceValidator retailCommerceValidator;

        // Make sure, it is an online channel.
        select firstonly OMOperatingUnitId from onlineChannelTable
            join CurrentBatchJobId from retailCommerceValidator
                where retailCommerceValidator.OMOperatingUnitId == onlineChannelTable.OMOperatingUnitID
                    && retailCommerceValidator.ValidationId == _validatorTest.ValidationId;

        if (onlineChannelTable.OMOperatingUnitId)
        {
            boolean azureSeachEnabled = RetailConfigurationParameters::IsUseAzureSearchEnabled();

            if (!azureSeachEnabled)
            {
                Name cloudSearchProviderName = 'ProductSearch.CloudSearchProvider';
                RetailConfigurationParameters retailConfigParameters;

                // CloudSearchProvider is going to be deprecated, this code will be removed after it is fully deprecated.
                select firstonly retailConfigParameters
                    where retailConfigParameters.Name == cloudSearchProviderName
                        && retailConfigParameters.Value == 'CommerceProductSearch';

                azureSeachEnabled = retailConfigParameters.RecId ? true : false;
            }

            if (!azureSeachEnabled)
            {
                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextChannel(
                    _validatorTest.ValidationId,
                    onlineChannelTable.OMOperatingUnitId);

                // Validation is performed on channel's legal entity, so curExt() will fetch the channel's legal entity.
                str description = strFmt("@Retail:RetailCommerceValidatorCloudSearchNotEnabled", curExt());

                RetailCommerceValidatorLog validatorLog;

                select firstonly validatorLog
                    where validatorLog.ValidationId == _validatorTest.ValidationId
                        && validatorLog.TestId == _validatorTest.TestId
                        && validatorLog.RuleId == _validatorTest.RuleId
                        && validatorLog.BatchJobId == retailCommerceValidator.CurrentBatchJobId
                        && validatorLog.ContextRecId == logContext.RecId
                        && validatorLog.MetricId == "@Retail:ValidationRuleCounterMetricId"
                        && validatorLog.Description == description
                        && validatorLog.LogType == RetailCommerceValidatorLogType::Error;

                // Log the rule only once as this is single setup issue in commerce parameters.
                if (!validatorLog.RecId)
                {
                    // Log the issue
                    RetailCommerceValidatorLog::addLog(
                        logContext,
                        "@Retail:ValidationRuleCounterMetricId",
                        description,
                        _validatorTest.TestId,
                        "@Retail:RetailCommerceValidatorChannelRule002"
                        );

                    // Increase the counter of issues
                    resultsCounter++;
                }
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>