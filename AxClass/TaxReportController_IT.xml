<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportController_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportController_IT</c> class is the controller class for the <c>TaxReport_IT</c> report.
/// </summary>
public class TaxReportController_IT extends SrsReportRunController implements BatchRetryable
{
    TaxReport_IT            taxReport_IT;
    TmpTaxReport_IT         tmpTaxReport_IT;
    TmpTaxReport_ITSummary  tmpTaxReport_ITSummary;
    TaxBookSection          taxBookSection;
    boolean                 printEndSections;
    TaxReportPeriod         taxReportPeriod;
    Counter                 maxCounterVATPaymentLines;
    TaxReportTmp_IT         taxReportTmp_IT;
    TaxBookId               taxBookId;

    PageNo                  firstPageNo;
    boolean                 separateTaxSummary;
    PageNo                  firstPageSummary;
    RecId                   taxBookRecIdSummary;
    NoYes                   updateNow;
    TaxReportContract_IT    contract;

    public boolean printPlafond_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFirstPage</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the summary information for the first page of the report.
    /// </summary>
    void initFirstPage()
    {
        TaxBook  taxBook;

        if (TaxAuthorityAddress::find(TaxPeriodHead::find(taxReport_IT.parmTaxPeriod()).TaxAuthority).SeparateTaxSummary)
        {
            separateTaxSummary = true;
            firstPageSummary = TaxBookStatus::getFirstPageNo(taxReportPeriod,
                                                             '',
                                                             updateNow);
            taxBookRecIdSummary = 0;
        }
        else
        {
            separateTaxSummary = false;
            select TaxBookId from taxBook
                where taxBook.TaxPeriod == taxReport_IT.parmTaxPeriod()
                   && taxBook.PrintEndSections;

            firstPageSummary = TaxBookStatus::getFirstPageNo(taxReportPeriod,
                                                             taxBook.TaxBookId,
                                                             updateNow);
            taxBookRecIdSummary = taxBook.RecId;
        }

        contract.parmTaxBookRecIdSummary(taxBookRecIdSummary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFrom_args</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the required input values when the report is opened from menu item or form.
    /// </summary>
    /// <param name="_args">
    ///    Hold the properties of the invoking object.
    /// </param>
    /// <returns>
    ///    false if report execution is cancelled. true if report execution succeeds.
    /// </returns>
    public boolean initFrom_args(Args  _args)
    {
        TaxReportVoucher taxReportVoucher;

        if (_args && _args.dataset() == tableNum(TaxReportVoucher))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00029, funcName());

            taxReportVoucher = _args.record();

            contract.parmTaxPeriod(taxReportVoucher.TaxPeriod);
            contract.parmFromDate(taxReportVoucher.FromDate);
            contract.parmTaxBookTypeJournal(TaxBookTypeJournal::Empty);
            contract.parmFromTaxBookRecId(0);
            contract.parmToTaxBookRecId(0);
            contract.parmPrintVATBooks(true);
            contract.parmPrintVATSummary(true);
            contract.parmPrintVATPayment(true);

            taxReport_IT = new TaxReport_IT();
            taxReport_IT.parmTaxPeriod(taxReportVoucher.TaxPeriod);
            taxReport_IT.parmFromDate(taxReportVoucher.FromDate);
            taxReport_IT.parmToDate(taxReportVoucher.ToDate);

            taxReportPeriod = TaxReportPeriod::find(contract.parmTaxPeriod(),
                                                    contract.parmFromDate());

            updateNow = false;
        }
        else if (_args && classIdGet(_args.caller()) == classNum(TaxReport_IT))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00029, funcName());

            taxReport_IT = _args.caller();

            contract.parmTaxPeriod(taxReport_IT.taxPeriod());
            contract.parmFromDate(taxReport_IT.fromDate());
            contract.parmTaxBookTypeJournal(TaxBookTypeJournal::Empty);
            contract.parmFromTaxBookRecId(0);
            contract.parmToTaxBookRecId(0);
            contract.parmPrintVATBooks(true);
            contract.parmPrintVATSummary(true);
            contract.parmPrintVATPayment(true);
            contract.parmPrintPlafond_IT(true);
            contract.parmPrintReport(taxReport_IT.parmPrintReport());

            taxReportPeriod = TaxReportPeriod::find(contract.parmTaxPeriod(),
                                                    contract.parmFromDate());

            updateNow = taxReport_IT.update();

            if (updateNow)
            {
                this.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::File);
                this.parmReportContract().parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);
                this.parmReportContract().parmPrintSettings().fileName(taxReport_IT.parmFileName());
                this.parmReportContract().parmPrintSettings().overwriteFile(true);

                taxReport_IT.parmIncludeZeroLines(contract.parmIncludeZeroLines());
                taxReport_IT.parmIncludeReverseTrans(contract.parmIncludeReverseTrans());
            }
            else
            {
                this.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::Screen);
            }
        }
        else
        {
            taxReportPeriod = TaxReportPeriod::find(contract.parmTaxPeriod(),
                                                    contract.parmFromDate());

            taxReport_IT = new TaxReport_IT();
            taxReport_IT.parmTaxPeriod(contract.parmTaxPeriod());
            taxReport_IT.parmFromDate(taxReportPeriod.FromDate);
            taxReport_IT.parmToDate(taxReportPeriod.ToDate);

            updateNow = false;
        }

        if (!taxReportPeriod)
        {
            throw error(strFmt("@VatDueDate:PeriodIntervalForTheDateDoesNotExist",
                                date2StrUsr(contract.parmFromDate(), DateFlags::FormatAll), contract.parmTaxPeriod()));
        }

        contract.parmUpdateNow(updateNow);
        contract.parmTaxReport_IT(SysOperationHelper::base64Encode(taxReport_IT.pack()));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the required values for report execution and calls appropriate methods to populate the
    ///    data.
    /// </summary>
    /// <returns>
    ///    The <c>RecId</c> value of the temporary table where the report data is stored.
    /// </returns>
    [SysObsolete('The method is moved to the TaxReportDP_IT class.', false, 1\08\2020)]
    public RecId fetch()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdate</Name>
				<Source><![CDATA[
    public NoYes parmUpdate(NoYes _updateNow = updateNow)
    {
        updateNow = _updateNow;
        return updateNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        const str SeparateTaxSummaryParameterName = 'SeparateTaxSummary';
        const str FirstPageSummaryParameterName = 'FirstPageSummary';
        const str SummaryTaxBookRecIdParameterName ='SummaryTaxBookRecId';
        const str TaxPeriodRecIdParameterName = 'TaxReportPeriodRecId';
        const str UpdatePageNumbersParameterName = 'UpdatePageNumbers';
        const str ReportUseVatDueDateParameterName = 'ReportUseVatDueDate_W';

        contract = this.parmReportContract().parmRdpContract() as TaxReportContract_IT;

        this.initFrom_args(this.parmArgs());
        this.initFirstPage();
        this.fetch();

        SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();
        if (rdlContract)
        {
            rdlContract.setValue(SeparateTaxSummaryParameterName, separateTaxSummary);
            rdlContract.setValue(FirstPageSummaryParameterName, firstPageSummary);
            rdlContract.setValue(SummaryTaxBookRecIdParameterName, int642str(taxBookRecIdSummary));
            rdlContract.setValue(TaxPeriodRecIdParameterName, int642str(taxReportPeriod.RecId));
            rdlContract.setValue(UpdatePageNumbersParameterName, this.parmUpdate());
            rdlContract.setValue(ReportUseVatDueDateParameterName, TaxParameters::reportUseVatDueDate_W());
        }

        if (updateNow && !contract.parmPrintReport())
        {
            // In case feature is enabled, we are repathing output to archive and then omit printing to
            // archive in the TaxReport_IT_EventHandlers class by subscribing to the "toArchive" delegate.
            this.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::Archive);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastPageNo</Name>
				<Source><![CDATA[
    // This method is obsolete and will be removed in the future version of the product
    [SysObsoleteAttribute('This method is obsolete and will be removed in the future version of the product', true, 15\6\2020)]
    void setLastPageNo(RecId _taxBookRecId, PageNo _lastPageNo)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxReportController_IT  controller = new TaxReportController_IT();

        controller.parmReportName(ssrsReportStr(TaxReport_IT, Report));
        controller.parmArgs(_args);
        controller.initDefaultValues();

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingComplete</Name>
				<Source><![CDATA[
    // This method is obsolete and will be removed in the future version of the product
    [SysObsoleteAttribute('This method is obsolete and will be removed in the future version of the product', true, 15\6\2020)]
    public static void renderingComplete(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether to show the dialog or not.
    /// </summary>
    protected void prePromptModifyContract()
    {
        super();

        if ((args && args.dataset() == tableNum(TaxReportVoucher)) ||
                (args && classIdGet(args.caller()) == classNum(TaxReport_IT)))
        {
            if (!BatchHeader::isExecutingInBatch())
            {
                this.parmShowDialog(true);
                this.showBatchTab(false);
            }
            else
            {
                this.parmShowDialog(false);
            }
        }
        else
        {
            this.parmShowDialog(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultValues</Name>
				<Source><![CDATA[
    private void initDefaultValues()
    {
        contract = this.parmReportContract().parmRdpContract() as TaxReportContract_IT;
        boolean IncludeZeroLines;
        boolean IncludeReverseTrans;

        if (args && args.dataset() == tableNum(TaxReportVoucher))
        {
            TaxReportVoucher taxReportVoucher = args.record();
            includeZeroLines = taxReportVoucher.IncludeZeroLines_IT;
            includeReverseTrans = taxReportVoucher.IncludeReverseTrans_IT;
        }
        else if (args && classIdGet(args.caller()) == classNum(TaxReport_IT))
        {
            taxReport_IT = args.caller();

            TaxReportPeriod taxReportPeriodLoc = TaxReportPeriod::find(taxReport_IT.taxPeriod(), taxReport_IT.fromDate());

            TaxReportVoucher taxReportVoucher;
            select firstonly taxReportVoucher
                where taxReportVoucher.TaxPeriod == taxReportPeriodLoc.TaxPeriod
                    && taxReportVoucher.FromDate == taxReportPeriodLoc.FromDate
                    && taxReportVoucher.ToDate == taxReportPeriodLoc.ToDate;

            if (taxReportVoucher)
            {
                includeZeroLines = taxReportVoucher.IncludeZeroLines_IT;
                includeReverseTrans = taxReportVoucher.IncludeReverseTrans_IT;
            }
            else
            {
                TaxPeriodHead taxPeriodHead = TaxPeriodHead::find(taxReport_IT.taxPeriod());
                includeZeroLines = taxPeriodHead.IncludeZeroLines_IT;
                includeReverseTrans = taxPeriodHead.IncludeReverseTrans_IT;
            }
        }

        contract.parmIncludeZeroLines(includeZeroLines);
        contract.parmIncludeReverseTrans(includeReverseTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogClose</Name>
				<Source><![CDATA[
    protected void dialogClose()
    {
        if (dialogCanceled
            && taxReport_IT
            && taxReport_IT.update())
        {
            taxReport_IT.parmUpdateNow(NoYes::No);
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>