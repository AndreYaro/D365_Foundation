<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingRuleExecutionPair</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendNettingRuleExecutionPair implements INettingRuleExecutionPair
{
    private RecId pairRecId;
    private CustVendNettingRuleExecutionPairCurrencyCode currencyCode;
    private CustVendNettingRuleNettingSequence sequence;
    private boolean includeCredDebtNote;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPairRecId</Name>
				<Source><![CDATA[
    public RecId getPairRecId()
    {
        return pairRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCodeProvider</Name>
				<Source><![CDATA[
    public INettingRuleCurrencycodeProvide getCurrencyCodeProvider()
    {
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNettingMatchingSequence</Name>
				<Source><![CDATA[
    public CustVendNettingRuleNettingSequence getNettingMatchingSequence()
    {
        return sequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNoteDebitNoteIncluded</Name>
				<Source><![CDATA[
    public boolean isCreditNoteDebitNoteIncluded()
    {
        return includeCredDebtNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CustVendNettingRuleExecutionPair construct(RecId _pairRecId, CustVendNettingRuleExecutionPairCurrencyCode _currencyCode, CustVendNettingRuleNettingSequence _sequence, NoYes _includeCredDebtNote)
    {
        CustVendNettingRuleExecutionPair pair = new CustVendNettingRuleExecutionPair();

        pair.pairRecId = _pairRecId;
        pair.currencyCode = _currencyCode;
        pair.sequence = _sequence;
        pair.includeCredDebtNote = _includeCredDebtNote;

        return pair;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRangeFromCriteria</Name>
				<Source><![CDATA[
    private static str getQueryRangeFromCriteria(CustVendNettingRuleCriteria _criteria, ModuleCustVend _module)
    {
        str queryRange;
        FieldName fieldOfValue = _module == ModuleCustVend::Cust ? fieldStr(CustVendNettingPair, CreditAccountNum) : fieldStr(CustVendNettingPair, DebitAccountNum);
        FieldName fieldOfValueCompany = _module == ModuleCustVend::Cust ? fieldStr(CustVendNettingPair, CreditCompany) : fieldStr(CustVendNettingPair, DebitCompany);
        switch (_criteria.Operator)
        {
            case CustVendNettingRuleCriteriaNettingOperator::Eq:
                queryRange = strFmt(
                    '((%1 == "%2") && (%3 == "%4"))',
                    fieldOfValue,
                    _criteria.Value,
                    fieldOfValueCompany,
                    _criteria.ValueCompany);
                break;
            case CustVendNettingRuleCriteriaNettingOperator::Neq:
                queryRange = strFmt(
                    '((%1 != "%2") || (%3 != "%4"))',
                    fieldOfValue,
                    _criteria.Value,
                    fieldOfValueCompany,
                    _criteria.ValueCompany);
                break;
            default:
                break;
        }
        return queryRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRulePairsFromRule</Name>
				<Source><![CDATA[
    internal static ListEnumerator getRulePairsFromRule(Name _ruleName)
    {
        CustVendNettingRule rule = CustVendNettingRule::find(_ruleName);

        CustVendNettingRuleNettingSequence sequence = rule.Sequence;
        NoYes includeCredDebtNote = rule.IncludeCredDebtNote;

        CustVendNettingRuleCriteria currencyCodeCriteria = CustVendNettingRuleCriteria::find(_ruleName, CustVendNettingRuleNettingCriteriaType::InvCurrency);
        CustVendNettingRuleExecutionPairCurrencyCode currencyCode = CustVendNettingRuleExecutionPairCurrencyCode::construct(currencyCodeCriteria.Value, currencyCodeCriteria.Operator);

        List pairs = new List(Types::Class);
        QueryRun queryRun = CustVendNettingRuleExecutionPair::generateQueryRunFromRule(rule);
        while (queryRun.next())
        {
            pairs.addEnd(CustVendNettingRuleExecutionPair::construct(queryRun.get(tableNum(CustVendNettingPair)).RecId, currencyCode, sequence, includeCredDebtNote));
        }

        return pairs.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQueryRunFromRule</Name>
				<Source><![CDATA[
    private static QueryRun generateQueryRunFromRule(CustVendNettingRule _rule)
    {
        Name ruleName = _rule.Name;
        Query query = new Query();
        switch (_rule.Selection)
        {
            case CustVendNettingRuleNettingAgreementSelection::Selected:
                CustVendNettingRuleExecutionPair::addDataSourcesForRuleSelected(query, ruleName);
                break;
            case CustVendNettingRuleNettingAgreementSelection::All:
                CustVendNettingRuleExecutionPair::addDataSourcesForRuleAll(query);
                break;
            default:
                break;
        }

        CustVendNettingRuleExecutionPair::addNettingPairDS(query);
        CustVendNettingRuleExecutionPair::applyCustVendCriteriaForQuery(query, ruleName);
        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSourcesForRuleAll</Name>
				<Source><![CDATA[
    private static void addDataSourcesForRuleAll(Query _query)
    {
        QueryBuildDataSource agreement = _query.addDataSource(tableNum(CustVendNettingAgreement));
        agreement.addSelectionField(fieldNum(CustVendNettingAgreement, RecId));
        agreement.addRange(fieldNum(CustVendNettingAgreement, AgreementStatus)).value(queryValue(CustVendNettingStatus::Active));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSourcesForRuleSelected</Name>
				<Source><![CDATA[
    private static void addDataSourcesForRuleSelected(Query _query, Name _ruleName)
    {
        QueryBuildDataSource ruleAgreement = _query.addDataSource(tableNum(CustVendNettingRuleAgreement));
        ruleAgreement.addSelectionField(fieldNum(CustVendNettingRuleAgreement, RecId));
        ruleAgreement.addSortField(fieldNum(CustVendNettingRuleAgreement, AgreementPriority), SortOrder::Ascending);
        ruleAgreement.addRange(fieldNum(CustVendNettingRuleAgreement, RuleName)).value(queryValue(_ruleName));

        QueryBuildDataSource agreement = ruleAgreement.addDataSource(tableNum(CustVendNettingAgreement));
        agreement.addSelectionField(fieldNum(CustVendNettingAgreement, RecId));
        agreement.addRange(fieldNum(CustVendNettingAgreement, AgreementStatus)).value(queryValue(CustVendNettingStatus::Active));
        agreement.addLink(fieldNum(CustVendNettingRuleAgreement, AgreementName), fieldNum(CustVendNettingAgreement, Name), ruleAgreement.name());
        agreement.joinMode(JoinMode::InnerJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNettingPairDS</Name>
				<Source><![CDATA[
    private static void addNettingPairDS(Query _query)
    {
        QueryBuildDataSource agreement = _query.dataSourceTable(tableNum(CustVendNettingAgreement));
        QueryBuildDataSource pair = agreement.addDataSource(tableNum(CustVendNettingPair));
        pair.addSelectionField(fieldNum(CustVendNettingPair, RecId));
        pair.addLink(fieldNum(CustVendNettingAgreement, RecId), fieldNum(CustVendNettingPair, CustVendNettingAgreement), agreement.name());
        pair.joinMode(JoinMode::InnerJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCustVendCriteriaForQuery</Name>
				<Source><![CDATA[
    private static void applyCustVendCriteriaForQuery(Query _query, Name _ruleName)
    {
        CustVendNettingRuleCriteria custCriteria = CustVendNettingRuleCriteria::find(_ruleName, CustVendNettingRuleNettingCriteriaType::CustAccount);
        CustVendNettingRuleCriteria vendCriteria = CustVendNettingRuleCriteria::find(_ruleName, CustVendNettingRuleNettingCriteriaType::VendAccount);

        QueryBuildDataSource pair = _query.dataSourceTable(tableNum(CustVendNettingPair));

        if (custCriteria)
        {
            pair.addRange(fieldNum(CustVendNettingPair, CreditAccountNum)).value(CustVendNettingRuleExecutionPair::getQueryRangeFromCriteria(custCriteria, ModuleCustVend::Cust));
        }
        if (vendCriteria)
        {
            pair.addRange(fieldNum(CustVendNettingPair, DebitAccountNum)).value(CustVendNettingRuleExecutionPair::getQueryRangeFromCriteria(vendCriteria, ModuleCustVend::Vend));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>