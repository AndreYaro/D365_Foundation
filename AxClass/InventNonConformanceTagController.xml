<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventNonConformanceTagController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventNonConformanceTagController</c> class is the controller class for the
/// <c>InventNonConformanceTag</c> report.
/// </summary>
class InventNonConformanceTagController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the report query and parameters by using the caller settings.
    /// </summary>
    protected void prePromptModifyContract()
    {
        if (this.parmArgs() && this.parmArgs().dataset() == tableNum(InventNonConformanceTable))
        {
            InventNonConformanceTable inventNonConformanceTable = this.parmArgs().record();
            Query query = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
            QueryBuildDataSource queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tableNum(InventNonConformanceTable));
            QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventNonConformanceTable, InventNonConformanceID));
            queryBuildRange.value(inventNonConformanceTable.InventNonConformanceID);

            this.addRestrictionRangeValue(query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRestrictionRangeValue</Name>
				<Source><![CDATA[
    private void addRestrictionRangeValue(Query _query)
    {
        InventTestReportSetup inventTestReportSetup;
        DocuRestriction restriction;
        int nonConformanceTagCount = 0;

        while select DocuRestriction from inventTestReportSetup
                where inventTestReportSetup.InventTestReport == InventTestReport::NonConformanceTag
        {
            nonConformanceTagCount++;
            restriction = inventTestReportSetup.DocuRestriction;
        }

        if (nonConformanceTagCount == 1)
        {
            QueryBuildDataSource queryBuildDataSourceDocuRef = SysQuery::findOrCreateDataSource(_query, tableNum(DocuRef));
            QueryBuildRange queryBuildRangeRestriction = SysQuery::findOrCreateRange(queryBuildDataSourceDocuRef, fieldNum(DocuRef, Restriction));
            queryBuildRangeRestriction.value(queryValue(restriction));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventNonConformanceTagController construct()
    {
        return new InventNonConformanceTagController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        InventNonConformanceTagController controller  = InventNonConformanceTagController::construct();
        controller.parmReportName(ssrsReportStr(InventNonConformanceTag, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>