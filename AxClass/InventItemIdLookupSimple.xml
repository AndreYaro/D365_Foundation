<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemIdLookupSimple</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemIdLookupSimple</c> class provides query building for lookups for ItemId in InventTable using the <c>InventItemIdLookupSimpleView</c> view.
/// </summary>
public class InventItemIdLookupSimple
{
    Query                       query;
    QueryBuildDataSource        inventItemIdLookupSimpleViewQbds;
    boolean                     isItemTypeFiltered = false;
    List                        lookupFields;

    private EcoResInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs new instance of the object.
    /// </summary>
    protected void new()
    {
        lookupFields = new List(Types::Integer);
        query = new Query();
        inventItemIdLookupSimpleViewQbds = query.addDataSource(tableNum(InventItemIdLookupSimpleView));
        inventItemIdLookupSimpleViewQbds.addSortField(fieldNum(InventItemIdLookupSimpleView, ItemId));
        inventItemIdLookupSimpleViewQbds.firstFast(true);

        if (FeatureStateProvider::isFeatureEnabled(EcoResProductTranslationFallbackFeature::instance()) && EcoResProductParameters::find().UseFallbackTranslation)
        {
            inventItemIdLookupSimpleViewQbds.addRange(fieldNum(InventItemIdLookupSimpleView, LanguageId)).value(EcoResProductParametersFallbackLanguage::getSelectedFallbackLanguage());
            inventItemIdLookupSimpleViewQbds.addRange(fieldNum(InventItemIdLookupSimpleView, LanguageId)).value(SysQuery::valueEmptyString());
        }

        instrumentationLogger = EcoResInstrumentationLogger::createLogger(classStr(InventItemIdLookupSimple));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs new instance of the object.
    /// </summary>
    public static InventItemIdLookupSimple construct()
    {
        return new InventItemIdLookupSimple();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemIdLookupSimpleViewQbds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>QueryBuildDataSource</c> object for the query.
    /// </summary>
    /// <returns>The <c>QueryBuildDataSource</c> object for the query.</returns>
    protected QueryBuildDataSource inventItemIdLookupSimpleViewQbds()
    {
        return inventItemIdLookupSimpleViewQbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStandardFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds standard item lookup fields: ItemId, NameAlias, ProductName, Item group, Item Type.
    /// </summary>
    protected void addStandardFields()
    {
        this.addLookupField(fieldNum(InventItemIdLookupSimpleView, ItemId));
        this.addLookupField(fieldNum(InventItemIdLookupSimpleView, NameAlias));
        this.addLookupField(fieldNum(InventItemIdLookupSimpleView, ProductName));
        this.addLookupField(fieldNum(InventItemIdLookupSimpleView, ItemGroupId));
        if (!isItemTypeFiltered)
        {
            this.addLookupField(fieldNum(InventItemIdLookupSimpleView,ItemType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLookupField</Name>
				<Source><![CDATA[
    private void addLookupField(FieldId _fieldId)
    {
        lookupFields.addEnd(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPmfProductTypeField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends PmfProductType field to the lookup grid.
    /// </summary>
    protected void addPmfProductTypeField()
    {
        this.addLookupField(fieldnum(InventItemIdLookupSimpleView, PmfProductType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDefaultOrderTypeField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends DefaultOrderType field to the lookup grid.
    /// </summary>
    protected void addDefaultOrderTypeField()
    {
        this.addLookupField(fieldnum(InventItemIdLookupSimpleView, DefaultOrderType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters grid by Item Type.
    /// </summary>
    /// <param name="_itemType">Item Type to filter to.</param>
    public void filterItemType(ItemType _itemType)
    {
        inventItemIdLookupSimpleViewQbds.addRange(fieldNum(InventItemIdLookupSimpleView, ItemType)).value(queryValue(_itemType));
        isItemTypeFiltered = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterDefaultOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid by Default Order Type.
    /// </summary>
    /// <param name="_poType">Default Order Type to filter to.</param>
    public void filterDefaultOrderType(ReqPOType _poType)
    {
        inventItemIdLookupSimpleViewQbds.addRange(fieldNum(InventItemIdLookupSimpleView,DefaultOrderType)).value(queryValue(_poType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterPmfProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to PmfProductType.
    /// </summary>
    /// <param name="_pmfproductType">Value to filter to.</param>
    /// <param name="_isNot">Whether condition should be not equal.</param>
    public void filterPmfProductType(PmfProductType _pmfproductType, boolean _isNot = false)
    {
        str value = _isNot ? SysQuery::valueNot(_pmfproductType) : queryValue(_pmfproductType);
        inventItemIdLookupSimpleViewQbds.addRange(fieldNum(InventItemIdLookupSimpleView, PmfProductType)).value(value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterCanBeProduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items that can be produced.
    /// </summary>
    public void filterCanBeProduced()
    {
        inventItemIdLookupSimpleViewQbds.addRange(fieldNum(InventItemIdLookupSimpleView, ItemType)).value(InventItemType::valueCanBeProduced());
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterOnlyInventoried</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items that can be stocked.
    /// </summary>
    public void filterOnlyInventoried()
    {
        InventInventoriedPolicy::addInventoriedRangeToInventTable(inventItemIdLookupSimpleViewQbds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterOnlyNonStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items that are not stocked.
    /// </summary>
    public void filterOnlyNonStocked()
    {
        InventInventoriedPolicy::addNonStockedRangeToInventTable(inventItemIdLookupSimpleViewQbds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterItemModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items with specified Item Model Group.
    /// </summary>
    /// <param name = "_itemModelGroup">Type of the Item Model Group</param>
    public void filterItemModelGroup(InventModel _itemModelGroup)
    {
        QueryBuildDataSource qbdsInventModelGroupItem = this.inventItemIdLookupSimpleViewQbds().addDataSource(tableNum(InventModelGroupItem));
        qbdsInventModelGroupItem.joinMode(JoinMode::ExistsJoin);
        qbdsInventModelGroupItem.relations(true);

        QueryBuildDataSource qbdsInventModelGroup = qbdsInventModelGroupItem.addDataSource(tableNum(InventModelGroup));
        qbdsInventModelGroup.joinMode(JoinMode::ExistsJoin);
        qbdsInventModelGroup.relations(true);
        qbdsInventModelGroup.addRange(fieldNum(InventModelGroup, InventModel)).value(queryValue(_itemModelGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterItemIdPrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items with this wildcard.
    /// </summary>
    /// <param name="_itemIdPrefix">ItemId wildcard.</param>
    public void filterItemIdPrefix(str _itemIdPrefix)
    {
        inventItemIdLookupSimpleViewQbds.addRange(fieldNum(InventItemIdLookupSimpleView,ItemId)).value(SysQuery::valueLikeAfter(_itemIdPrefix));
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items with an ItemGroupId.
    /// </summary>
    /// <param name = "_itemGroupId">Value of the ItemGroupId.</param>
    public void filterItemGroupId(ItemGroupId _itemGroupId)
    {
        inventItemIdLookupSimpleViewQbds.addRange(fieldNum(InventItemIdLookupSimpleView, ItemGroupId)).value(queryValue(_itemGroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup operation.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    protected void displayLookup(FormStringControl _ctrl)
    {
        using (var releaseProductActivityContext = instrumentationLogger.productActivities().itemIdLookup())
        {
            var sysTableLookup = SysTableLookup::newParameters(
            tableNum(InventItemIdLookupSimpleView),
            _ctrl,
            true,
            FormControlAmbiguousReferenceResolver::useExistingOrCreate(
                _ctrl,
                AbsoluteFieldBinding::construct(
                    fieldStr(InventItemIdLookupSimpleView, ItemId),
                    tableStr(InventItemIdLookupSimpleView)),
                AbsoluteFieldBinding::construct(
                    fieldStr(InventItemIdLookupSimpleView, NameAlias),
                    tableStr(InventItemIdLookupSimpleView))));

            sysTableLookup.parmQuery(query);
            ListEnumerator le = lookupFields.getEnumerator();
            while (le.moveNext())
            {
                FieldId fieldId = le.current();
                sysTableLookup.addLookupfield(fieldId);
            }

            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBOMItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table containing only BOM items.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    public static void lookupBOMItemId(FormStringControl _ctrl)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::BOM);

        // service items need to be excluded from the lookup
        inventItemIdLookupSimple.filterCanBeProduced();
        inventItemIdLookupSimple.filterOnlyInventoried();

        inventItemIdLookupSimple.addStandardFields();

        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBulkPackItemForSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table containing only items compatible with the containerized packaging.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    public static void lookupBulkPackItemForSetup(FormStringControl   _ctrl)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.filterItemType(ItemType::Item);
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::Formula);

        //the not-exists join will suffice as a filter
        QueryBuildDataSource queryBuildDataSourceCW = inventItemIdLookupSimple.inventItemIdLookupSimpleViewQbds().addDataSource(tableNum(PdsCatchWeightItem));
        queryBuildDataSourceCW.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId), fieldNum(PdsCatchWeightItem, ItemId));
        queryBuildDataSourceCW.joinMode(JoinMode::NoExistsJoin);

        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFormulaItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table containing only Formula items.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_includeCoProducts">
    /// If set to true, items of type co product are included in lookup.
    /// </param>
    /// <param name="_itemId">
    /// <c>ItemId</c> used in filtering the lookup.
    /// </param>
    /// <remarks>
    /// Performs a lookup of items with item type of formula.  If the item with _itemId is a co-product,
    /// only items that have formulas with the _itemId as a co-product are included in the lookup.
    /// </remarks>
    public static void lookupFormulaItemId(
        FormStringControl   _ctrl,
        boolean             _includeCoProducts = false,
        ItemId              _itemId = '')
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.filterItemType(ItemType::Item);

        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::Formula);
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::MainItem);

        if (InventTable::find(_itemId).PmfProductType == PmfProductType::Co_Product)
        {
            inventItemIdLookupSimple.filterPmfProductType(PmfProductType::Co_Product);

            QueryBuildDataSource qbdsBOMVersion = inventItemIdLookupSimple.inventItemIdLookupSimpleViewQbds().addDataSource(tableNum(BOMVersion));
            qbdsBOMVersion.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId) ,fieldNum(BOMVersion, ItemId));
            qbdsBOMVersion.joinMode(JoinMode::ExistsJoin);

            QueryBuildDataSource qbdsCoBy = qbdsBOMVersion.addDataSource(tableNum(PmfFormulaCoBy));
            qbdsCoBy.addLink(fieldNum(BOMVersion, RecId), fieldNum(PmfFormulaCoBy, bomVersionRefRecId));
            qbdsCoBy.addRange(fieldNum(PmfFormulaCoBy, ItemId)).value(_itemId);
        }
        else if (_includeCoProducts)
        {
            inventItemIdLookupSimple.filterPmfProductType(PmfProductType::Co_Product);
        }

        inventItemIdLookupSimple.addStandardFields();

        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table, optional show only WHS enabled items
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_showOnlyWHSEnabled">
    /// A Boolean value that indicates whether to show only WHS enabled items; optional.
    /// </param>
    public static void lookupItem(FormStringControl _ctrl, boolean _showOnlyWHSEnabled = false)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        if (_showOnlyWHSEnabled)
        {
            QueryBuildDataSource    dsEcoResStorageDimensionGroup;
            QueryBuildDataSource    dsEcoResResStorageDimensionGroupItem;

            dsEcoResResStorageDimensionGroupItem =
                inventItemIdLookupSimple.inventItemIdLookupSimpleViewQbds().addDataSource(tableNum(EcoResStorageDimensionGroupItem));
            dsEcoResResStorageDimensionGroupItem.joinMode(JoinMode::ExistsJoin);
            dsEcoResResStorageDimensionGroupItem.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId), fieldNum(EcoResStorageDimensionGroupItem, ItemId));
            dsEcoResResStorageDimensionGroupItem.addLink(fieldNum(InventItemIdLookupSimpleView, DataAreaId), fieldNum(EcoResStorageDimensionGroupItem, ItemDataAreaId));

            dsEcoResStorageDimensionGroup = dsEcoResResStorageDimensionGroupItem.addDataSource(tableNum(EcoResStorageDimensionGroup));
            dsEcoResStorageDimensionGroup.joinMode(JoinMode::ExistsJoin);
            dsEcoResStorageDimensionGroup.relations(true);

            dsEcoResStorageDimensionGroup.addRange(fieldNum(EcoResStorageDimensionGroup, IsWarehouseWHSEnabled)).value(queryValue(NoYes::Yes));
        }

        inventItemIdLookupSimple.addStandardFields();

        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCatchWeightItemTagWithFullDimensionTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table showing just the warehouse managed catch weight items that are tag with full dimension tracking enabled.
    /// </summary>
    /// <param name="_ctrl">The form string control object with which to perform the lookup.</param>
    [Hookable(false)]
    internal static void lookupCatchWeightItemTagWithFullDimensionTracking(FormStringControl _ctrl)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        QueryBuildDataSource dsWHSInventTable = inventItemIdLookupSimple.inventItemIdLookupSimpleViewQbds().addDataSource(tableNum(WHSInventTable));
        dsWHSInventTable.joinMode(JoinMode::ExistsJoin);
        dsWHSInventTable.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId), fieldNum(WHSInventTable, ItemId));
        
        QueryBuildDataSource dsPolicy = dsWHSInventTable.addDataSource(tableNum(WHSCatchWeightItemHandlingPolicy));
        dsPolicy.joinMode(JoinMode::ExistsJoin);
        dsPolicy.relations(true);
        dsPolicy.addRange(fieldNum(WHSCatchWeightItemHandlingPolicy, CatchWeightTagTracking)).value(queryValue(NoYes::Yes));
        dsPolicy.addRange(fieldNum(WHSCatchWeightItemHandlingPolicy, CatchWeightTagDimensionTrackingMethod)).value(queryValue(WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions));

        inventItemIdLookupSimple.addStandardFields();

        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemByTrackingDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and displays a lookup from which the user can select for items tracked by a specific dimension only.
    /// </summary>
    /// <param name="_control">
    ///    The calling form control.
    /// </param>
    /// <param name="_inventDimTrackingFieldId">
    ///    The inventory dimension tracking field ID that must be an active dimension for the items shown in the lookup; optional.
    /// </param>
    /// <remarks>
    ///    If <paramref name="_inventDimTrackingFieldId"/> is not specified then it defaults to the inventory batch dimension field.
    /// </remarks>
    public static void lookupItemByTrackingDimension(FormStringControl _control, FieldId _inventDimTrackingFieldId = fieldNum(InventDim, InventBatchId))
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        QueryBuildDataSource    dsInventTable = inventItemIdLookupSimple.inventItemIdLookupSimpleViewQbds();

        QueryBuildDataSource dsEcoResTrackingDimensionGroupItem = dsInventTable.addDataSource(tableNum(EcoResTrackingDimensionGroupItem));
        dsEcoResTrackingDimensionGroupItem.joinMode(JoinMode::ExistsJoin);
        dsEcoResTrackingDimensionGroupItem.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId), fieldNum(EcoResTrackingDimensionGroupItem, ItemId));
        dsEcoResTrackingDimensionGroupItem.addLink(fieldNum(InventItemIdLookupSimpleView, DataAreaId), fieldNum(EcoResTrackingDimensionGroupItem, ItemDataAreaId));

        QueryBuildDataSource dsEcoResTrackingDimensionGroup = dsEcoResTrackingDimensionGroupItem.addDataSource(tableNum(EcoResTrackingDimensionGroup));
        dsEcoResTrackingDimensionGroup.joinMode(JoinMode::ExistsJoin);
        dsEcoResTrackingDimensionGroup.relations(true);

        QueryBuildDataSource dsEcoResTrackingDimensionGroupFldSetup = dsEcoResTrackingDimensionGroup.addDataSource(tableNum(EcoResTrackingDimensionGroupFldSetup));
        dsEcoResTrackingDimensionGroupFldSetup.joinMode(JoinMode::ExistsJoin);
        dsEcoResTrackingDimensionGroupFldSetup.relations(true);

        dsEcoResTrackingDimensionGroupFldSetup.addRange(fieldNum(EcoResTrackingDimensionGroupFldSetup, DimensionFieldId)).value(queryValue(_inventDimTrackingFieldId));
        dsEcoResTrackingDimensionGroupFldSetup.addRange(fieldNum(EcoResTrackingDimensionGroupFldSetup, IsActive)).value(queryValue(NoYes::Yes));

        inventItemIdLookupSimple.filterOnlyInventoried();

        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.addLookupField(fieldNum(InventItemIdLookupSimpleView, PmfProductType));

        inventItemIdLookupSimple.displayLookup(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdAsset_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find asset items.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    /// <param name="_showAsset">
    ///    true if the asset group ID should be displayed; otherwise, false.
    /// </param>
    public static void lookupItemIdAsset_RU(FormStringControl _ctrl, boolean _showAsset = true)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.inventItemIdLookupSimpleViewQbds()
            .addRange(fieldNum(InventItemIdLookupSimpleView, AssetGroupId_RU))
            .value(_showAsset ? SysQuery::valueNotEmptyString() : SysQuery::valueEmptyString());

        inventItemIdLookupSimple.addStandardFields();
        if (_showAsset)
        {
            inventItemIdLookupSimple.addLookupfield(fieldNum(InventItemIdLookupSimpleView, AssetGroupId_RU));
        }
        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanBeProduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and displays a lookup for ItemId with only producible items.
    /// </summary>
    /// <param name = "_ctrl">The FormStringControl object where the lookup values should be displayed.</param>
    public static void lookupItemIdCanBeProduced(FormStringControl _ctrl)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.filterCanBeProduced();
        inventItemIdLookupSimple.filterOnlyInventoried();
        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanBeTransferred</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds items that can be transferred.
    /// </summary>
    /// <param name="_lookupctrl">
    ///    The <c>FormStringControl</c> object where the lookup values should be displayed.
    /// </param>
    /// <remarks>
    ///    Whether an item can be transferred depends on its item type, and is determined by the return value of the <c>InventItemType.canBeTransferred</c> method.
    /// </remarks>
    public static void lookupItemIdCanBeTransferred(FormStringControl _lookupctrl)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        QueryBuildDataSource queryBuildDataSource = inventItemIdLookupSimple.inventItemIdLookupSimpleViewQbds();
        queryBuildDataSource.addRange(fieldNum(InventItemIdLookupSimpleView, ItemType)).value(InventItemType::valueCanBeTransferred());
        inventItemIdLookupSimple.filterOnlyInventoried();

        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.displayLookup(_lookupctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanHaveBOMFormula</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find BOM and formula items.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    public static void lookupItemIdCanHaveBOMFormula(FormStringControl _ctrl)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.filterCanBeProduced();
        inventItemIdLookupSimple.filterOnlyInventoried();
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::BOM);
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::Formula);
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::MainItem);

        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.addPmfProductTypeField();
        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanHaveCoProdBOMFormula</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find BOM items, formula items and co-products.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    public static void lookupItemIdCanHaveCoProdBOMFormula(FormStringControl _ctrl)
    {
        inventItemIdLookupSimple inventItemIdLookupSimple = inventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.filterCanBeProduced();
        inventItemIdLookupSimple.filterOnlyInventoried();
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::BOM);
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::Formula);
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::MainItem);
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::Co_Product);

        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.addPmfProductTypeField();
        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdDefaultOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a lookup for selecting items with the specified default order type.
    /// </summary>
    /// <param name="_ctrl">
    ///     The string control calling the lookup.
    /// </param>
    /// <param name="_poType">
    ///     The default order type to search for.
    /// </param>
    /// <param name="_stockedProduct">
    ///     A <c>NoYes</c> value that specifies the stocking policy for the item.
    /// </param>
    public static void lookupItemIdDefaultOrderType(FormStringControl _ctrl, ReqPOType _poType, NoYes _stockedProduct)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.filterItemType(ItemType::Item);
        inventItemIdLookupSimple.filterDefaultOrderType(_poType);
        inventItemIdLookupSimple.filterOnlyInventoried();

        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.addPmfProductTypeField();
        inventItemIdLookupSimple.addDefaultOrderTypeField();

        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup based on item wildcard and item types
    /// </summary>
    /// <param name = "_ctrl">The control for which to open a lookup.</param>
    /// <param name = "_filterStr">ItemId wildcard.</param>
    /// <param name = "_itemTypes">Item types lookup is filtered to.</param>
    public static void lookupItemIdType(
        FormStringControl   _ctrl,
        str                 _filterStr,
        Set                 _itemTypes)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.filterItemIdPrefix(_filterStr);

        if (_itemTypes)
        {
            SetEnumerator se = _itemTypes.getEnumerator();
            while (se.moveNext())
            {
                ItemType currentItemType = se.current();
                inventItemIdLookupSimple.filterItemType(currentItemType);
            }
        }

        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdTypePricingTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find items that can be used for a commodity pricing template.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    /// <param name="_filterStr">
    ///    A filter expression for the item ID.
    /// </param>
    /// <param name="_productTypes">
    ///    A list of product types to filter the result list.
    /// </param>
    public static void lookupItemIdTypePricingTemplate(
        FormStringControl   _ctrl,
        str                 _filterStr,
        Set                 _productTypes)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.filterItemIdPrefix(_filterStr);
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::MainItem, true);

        if (_productTypes)
        {
            SetEnumerator se = _productTypes.getEnumerator();
            while (se.moveNext())
            {
                PmfProductType productType = se.current();
                inventItemIdLookupSimple.filterPmfProductType(productType);
            }
        }

        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemsForQuotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the items which belongs to a catalog for a specified <c>MCRSourceID</c> source code.
    /// </summary>
    /// <param name="_callingControl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_sourceID">
    /// A specified <c>MCRSourceID</c> source code.
    /// </param>
    public static void lookupItemsForQuotes(FormControl _callingControl, MCRSourceID _sourceID)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        QueryBuildDataSource    queryBuildDataSourceInventTable = inventItemIdLookupSimple.inventItemIdLookupSimpleViewQbds();
        Catalog catalog = Catalog::find(MCRSourceCodeSetup::find(_sourceID).Catalog);

        if (catalog)
        {
            // Catalog exists, show items related to catalog
            QueryBuildDataSource queryBuildDataSourceCatalogProduct = queryBuildDataSourceInventTable.addDataSource(tablenum(CatalogProduct));
            queryBuildDataSourceCatalogProduct.addLink(fieldNum(InventItemIdLookupSimpleView, Product), fieldNum(CatalogProduct, Product));
            queryBuildDataSourceCatalogProduct.joinMode(JoinMode::InnerJoin);

            queryBuildDataSourceCatalogProduct.addRange(fieldNum(CatalogProduct, Catalog)).value(queryValue(catalog.RecId));
        }
        else
        {
            // Catalog doesn't exist, show all items
            QueryBuildDataSource queryBuildDataSourceMCRInventTable = queryBuildDataSourceInventTable.addDataSource(tableNum(MCRInventTable));
            queryBuildDataSourceMCRInventTable.relations(true);
            queryBuildDataSourceMCRInventTable.joinMode(JoinMode::NoExistsJoin);
            queryBuildDataSourceMCRInventTable.addRange(fieldnum(MCRInventTable, ContinuityScheduleId)).value(sysQuery::valueNotEmptyString());
        }

        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.displayLookup(_callingControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemTypeCoByProducts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find co-products and by-products.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    public static void lookupItemTypeCoByProducts(FormStringControl   _ctrl)
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.filterItemType(ItemType::Item);
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::By_Product);
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::Co_Product);

        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.addPmfProductTypeField();
        inventItemIdLookupSimple.displayLookup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPmfBulkItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds bulk items for the specified BOMId.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    /// <param name="_bomId">
    ///    The ID of the BOM.
    /// </param>
    /// <param name="_packedItemId">
    ///     The ID of the packed item.
    /// </param>
    public static void lookupPmfBulkItem(
        FormStringControl   _lookupCtrl,
        BOMId               _bomId,
        ItemId              _packedItemId
        )
    {
        InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();

        inventItemIdLookupSimple.filterItemType(ItemType::Item);
        inventItemIdLookupSimple.filterPmfProductType(PmfProductType::Formula);

        QueryBuildDataSource queryBuildDataSource = inventItemIdLookupSimple.inventItemIdLookupSimpleViewQbds();

        QueryBuildDataSource qbdsBOM  = queryBuildDataSource.addDataSource(tableNum(BOM));
        qbdsBOM.joinMode(JoinMode::InnerJoin);
        qbdsBOM.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId), fieldNum(BOM, ItemId));
        qbdsBOM.addRange(fieldNum(BOM, bomId)).value(queryValue(_bomId));

        QueryBuildDataSource qbdsBulkConv = qbdsBOM.addDataSource(tableNum(PmfBulkItemConv));
        qbdsBulkConv.joinMode(JoinMode::InnerJoin);
        qbdsBulkConv.addLink(fieldNum(BOM, ItemId), fieldNum(PmfBulkItemConv, BulkItem));
        qbdsBulkConv.addRange(fieldNum(PmfBulkItemConv, PackedItem)).value(queryValue(_packedItemId));

        inventItemIdLookupSimple.addStandardFields();
        inventItemIdLookupSimple.displayLookup(_lookupCtrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPmfPlanningItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a lookup form for formula or planning items that can be used for planning a given co-product item.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control that initiated this lookup.
    /// </param>
    /// <param name="_coProductId">
    /// The co-product item id for which this lookup is for.
    /// </param>
    /// <remarks>
    /// The lookup that this creates will show only formula or planning items that can
    /// be used as a planning item for <paramref name="_coProductId"/>. If
    /// the planning item is defined for the co-product then just that
    /// formula item will be shown. Otherwise, this will show all the formula
    /// items that have the co-product on any of its BOM versions, ignoring the
    /// active status of those BOM versions.
    /// </remarks>
    public static void lookupPmfPlanningItem(
        FormStringControl   _ctrl,
        ItemId              _coProductId)
    {
        InventTable             coProduct = InventTable::find(_coProductId);

        if (coProduct.PmfPlanningItemId)
        {
            InventItemIdLookupSimple inventItemIdLookupSimple = InventItemIdLookupSimple::construct();
            // Only show the default planning item
            inventItemIdLookupSimple.filterItemIdPrefix(coProduct.PmfPlanningItemId);

            inventItemIdLookupSimple.addStandardFields();
            inventItemIdLookupSimple.displayLookup(_ctrl);
        }
        else
        {
            // Show all planning or formula items that has the co-product as output
            InventTable::lookupFormulaItemId(_ctrl, false, _coProductId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new <c>Query</c> class from an <c>Args</c> object.
    /// </summary>
    /// <param name="_args">
    ///    The <c>Args</c> object from which to initialize.
    /// </param>
    /// <returns>
    ///    A <c>Query</c> class.
    /// </returns>
    /// <remarks>
    ///    The new instance is based on either the <c>_args.parmObject</c> method or the extended data type on
    ///    the caller control.
    /// </remarks>
    public static Query queryFromArgs(Args _args)
    {
        InventLookupItemId inventLookupItemId = _args.parmObject() as InventLookupItemId;

        if (inventLookupItemId)
        {
            return inventLookupItemId.getQuery();
        }

        ExtendedDataTypeName edtName = InventLookupItemId::extendedDataTypeNameFromArgs(_args);
        return InventItemIdLookupSimple::queryFromExtendedDataType(edtName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFromExtendedDataType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new <c>Query</c> class from the name of an extended data type.
    /// </summary>
    /// <param name="_typeName">
    ///    The name of the extended data type.
    /// </param>
    /// <returns>
    ///    A <c>Query</c> class.
    /// </returns>
    public static Query queryFromExtendedDataType(ExtendedDataTypeName _typeName)
    {
        var inventItemIdLookupSimple = InventItemIdLookupSimple::construct();
        inventItemIdLookupSimple.configureByExtendedDataTypeName(_typeName);

        return inventItemIdLookupSimple.parmQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureByExtendedDataTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the lookup for a given extended data type.
    /// </summary>
    /// <param name = "_typeName">The name of the extended data type.</param>
    protected void configureByExtendedDataTypeName(ExtendedDataTypeName _typeName)
    {
        InventLookupItemId  inventLookupItemId;

        switch (_typeName)
        {
            case extendedTypeStr(ItemIdProduction):
                this.filterCanBeProduced();
                this.filterOnlyInventoried();
                break;

            case extendedTypeStr(ItemIdInventoried):
                this.filterOnlyInventoried();
                break;

            case extendedTypeStr(MCRItemIdLookup):
                inventItemIdLookupSimpleViewQbds.clearDynalinks(); //Otherwise will only show current item for the field
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>