<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundOrderLineUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class WHSOutboundOrderLineUpdater extends WHSSourceLineUpdater
{
    internal WHSOutboundShippableOrderLineMap orderLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    public void initFromBuffer(Common _common)
    {
        this.setCommonBuffer(_common);

        if (PdsGlobal::pdsIsCWItem(orderLine.ItemId))
        {
            inventHandlingUOM = PdsCatchWeightItem::pdsCWUnitId(orderLine.ItemId);
            newUOMSymbol = orderLine.pdsCWUnitId();
            newInventHandlingQty = orderLine.PdsCWRemainInventPhysical;
        }
        else
        {
            inventHandlingUOM = InventTableModule::find(orderLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
            newUOMSymbol = orderLine.UnitOfMeasureSymbol;
            newInventHandlingQty = orderLine.RemainInventQuantity;
        }

        productRefRecId = InventTable::itemProduct(orderLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateQuantityLeftToLoad</Name>
				<Source><![CDATA[
    internal WHSQtyLeftToLoad recalculateQuantityLeftToLoad(WHSQtyLeftToLoad _originalQuantityLeftToLoad)
    {
        // Convert orig QtyLeftToLoad to new UOM
        WHSQtyLeftToLoad newQuantityLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
            orderLine.ItemId,
            orderLine.InventDimId,
            _originalQuantityLeftToLoad,
            oldUOMSymbol,
            newUOMSymbol,
            NoYes::No);

        // For order Line decrease that causes LoadLine descrease, qtyLeftToLoad will be zero
        if (loadLineDiffHandlingQty < 0)
        {
            newQuantityLeftToLoad = 0;
        }
        else // If loadLineQty increased or didn't change we need to look at diff in orderLine qty.
        {
            // Change in orderLine minus change in loadLine qty converted to loadLine newUOM
            Qty convDiffQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                orderLine.ItemId,
                orderLine.InventDimId,
                (newInventHandlingQty - oldInventHandlingQty) - loadLineDiffHandlingQty,
                inventHandlingUOM,
                newUOMSymbol,
                NoYes::No);

            newQuantityLeftToLoad += convDiffQty;
        }

        return newQuantityLeftToLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateReleasedQuantity</Name>
				<Source><![CDATA[
    internal WHSReleasedQty recalculateReleasedQuantity(WHSReleasedQty _originalReleasedQuantity)
    {
        WHSReleasedQty newReleasedQuantity = _originalReleasedQuantity;
        
        WHSLoadLine loadLine;

        select sum(PickedQty) from loadLine
            where loadLine.InventTransId == orderLine.InventTransId;

        // If not picked released quantity is zero, then we know that the loadLine increase or decrease wasn't for a loadLine on a shipment.
        if (loadLineDiffHandlingQty && (_originalReleasedQuantity - loadLine.PickedQty))
        {
            newReleasedQuantity += loadLineDiffHandlingQty;
        }

        return newReleasedQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonBuffer</Name>
				<Source><![CDATA[
    internal protected void setCommonBuffer(Common _common)
    {
        if (!(_common is WHSOutboundShippableOrderLineMap))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        orderLine = _common as WHSOutboundShippableOrderLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdFromBuffer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected ItemId getItemIdFromBuffer()
    {
        return orderLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateTable</Name>
				<Source><![CDATA[
    internal boolean mustUpdateTable()
    {
        return newInventHandlingQty != oldInventHandlingQty || oldUOMSymbol != newUOMSymbol || loadLineDiffHandlingQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>