<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Vir_Transfer_Closing</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventMov_Vir_Transfer_Closing extends InventMov_Vir_Transfer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustToFixedReceiptPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a receipt should be adjusted to fixed receipt price.
    /// </summary>
    /// <returns>
    ///    true if a receipt should be adjusted to fixed receipt price; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The virtual transfer of the inventory closing should always get the price that the closing has
    ///    computed.
    /// </remarks>
    public boolean adjustToFixedReceiptPrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transaction can be created on this location based on the movement type.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Do not restrict creating the virtual inventory transactions for the inventory closing.
    /// </remarks>
    boolean canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventSites</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transaction can be created on this site based on the movement type.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Do not restrict creating the virtual inventory transactions for the inventory closing.
    /// </remarks>
    boolean canBeOnAllInventSites()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCountingLocks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether locks exist for the specified inventory dimension.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimension for the transaction.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Do not restrict creating the virtual inventory transactions for the inventory closing.
    /// </remarks>
    boolean checkCountingLocks(InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
    public boolean checkUpdateEstimated(
        InventUpd_Estimated     _updateNow,
        InventMovement          _this_Orig)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimatedMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the estimated transactions must be updated.
    /// </summary>
    /// <param name="_movement_Orig">
    ///    The <c>inventory movement</c> class that contains the original values.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Always update the estimated values when you create virtual transactions for the inventory closing
    ///    to make sure that issue and receipt transaction hold the same financial dimensions.
    /// </remarks>
    public boolean checkUpdateEstimatedMovement(InventMovement _movement_Orig)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDoPhysicalOnHandCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if physical on-hand check should be done for this movement.
    /// </summary>
    /// <returns>false as physical on-hand availability check should be skipped for summed up transactions.</returns>
    public boolean mustDoPhysicalOnHandCheck()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateFinancial</Name>
				<Source><![CDATA[
    public boolean checkUpdateFinancial(InventUpd_Financial _updateNow)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysical</Name>
				<Source><![CDATA[
    public boolean checkUpdatePhysical(InventUpd_Physical _updateNow)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateStandard</Name>
				<Source><![CDATA[
    public boolean checkUpdateStandard(TransDate _transDate, NoYes _checkItemPostingDate = NoYes::Yes)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::SummedUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAutoDimLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to update the dimensions based on the movement type.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    Do not allow changes of the dimensions for the virtual inventory transactions for the inventory
    ///    closing.
    /// </remarks>
    public boolean updateAutoDimLocationId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerFinancial</Name>
				<Source><![CDATA[
    public CostAmount updateLedgerFinancial(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _updateNow,
        boolean                 _allowNegative = false)
    {
        return _updateNow.parmCostAmountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerFinancialSecCur_RU</Name>
				<Source><![CDATA[
    public CostAmountSecCur_RU updateLedgerFinancialSecCur_RU(
        LedgerVoucher       _ledgerVoucher,
        InventUpd_Financial _updateNow,
        boolean             _allowNegative = false)
    {
        return _updateNow.parmCostAmountCurSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSerialNumIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the serial number for the issue transaction.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction to update.
    /// </param>
    /// <param name="_inventTrans_orig">
    ///    A buffer that contains the original values of the inventory transaction.
    /// </param>
    /// <param name="_inventDim">
    ///    The inventory dimension for this transaction.
    /// </param>
    /// <remarks>
    ///    When creating virtual inventory transactions for the inventory closing, do not update serial
    ///    numbers.Both the issue and the receipt transaction must hold the same financial dimensions.
    /// </remarks>
    void updateSerialNumIssue(
        InventTrans     _inventTrans,
        InventTrans     _inventTrans_orig,
        InventDim       _inventDim = InventDim::find(_inventTrans.InventDimId))
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSerialNumReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the serial number for the receipt transaction.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction to update.
    /// </param>
    /// <param name="_inventTrans_orig">
    ///    A buffer that contains the original values of the inventory transaction.
    /// </param>
    /// <param name="_inventDim">
    ///    The inventory dimension for this transaction.
    /// </param>
    /// <remarks>
    ///    When creating virtual inventory transactions for the inventory closing, do not update serial
    ///    numbers.Both the issue and the receipt transaction must hold the same financial dimensions.
    /// </remarks>
    void updateSerialNumReceipt(
        InventTrans     _inventTrans,
        InventTrans     _inventTrans_orig,
        InventDim       _inventDim = InventDim::find(_inventTrans.InventDimId))
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useEnteredPriceAsCost</Name>
				<Source><![CDATA[
    public boolean useEnteredPriceAsCost()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTableCostPrice</Name>
				<Source><![CDATA[
    public boolean mustUpdateInventTableCostPrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTrans</Name>
				<Source><![CDATA[
    static InventMovement newInventTrans(InventTrans _inventTrans)
    {
        InventTransOrigin               inventTransOrigin = _inventTrans.inventTransOrigin();

        InventMov_Vir_Transfer_Closing movement_Virtuel = new InventMov_Vir_Transfer_Closing(null);

        movement_Virtuel.parmTransQty(_inventTrans.Qty);
        movement_Virtuel.parmTransDate(_inventTrans.DateFinancial);
        movement_Virtuel.parmInventTransId(inventTransOrigin.InventTransId);
        movement_Virtuel.parmItemId(inventTransOrigin.ItemId);
        movement_Virtuel.parmInventDimId(_inventTrans.InventDimId);

        return movement_Virtuel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    static InventMovement newParameters(
        InventTransId           _inventTransId,
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        TransDate               _transDate,
        InventQty               _qty,
        PdsCWInventQty          _cwQty)
    {
        InventMov_Vir_Transfer_Closing movement_Virtuel = new InventMov_Vir_Transfer_Closing(null);

        movement_Virtuel.parmTransQty(_qty);
        movement_Virtuel.pdsCWParmTransQty(_cwQty);
        movement_Virtuel.parmTransDate(_transDate);
        movement_Virtuel.parmInventTransId(_inventTransId);
        movement_Virtuel.parmItemId(_itemId);
        movement_Virtuel.parmInventDimId(_inventDimId);
        movement_Virtuel.parmMustBeQuarantineControlled();

        return movement_Virtuel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>