<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTopChannelsReportDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Data;
using ACM = Microsoft.Dynamics.AX.Analytics.CalculationModel;

/// <summary>
/// The <c>RetailTopChannelsReportDataProvider</c> class is the
/// data provider class for retail top OU performers report.
/// </summary>
[SRSReportParameterAttribute(classstr(RetailTopChannelsParameterContract))]
class RetailTopChannelsReportDataProvider extends SRSReportDataProviderBase
{
    RetailTopChannelsReportTable table;
    RetailTopChannelsParameterContract dc;
    ACM.NumericExpression grossProfitMarginPercentage;
    ACM.NumericExpression grossProfitMargin;
    ACM.DynamicMeasureDefinition amount;
    ACM.DynamicMeasureDefinition cogs;
    ACM.DynamicMeasureDefinition quantity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize measure definitions.
    /// </summary>
    public void new()
    {
        super();

        amount = new ACM.DynamicMeasureDefinition(
                    tableStr(RetailTopChannelsView),
                    fieldStr(RetailTopChannelsView, LineAmountMST),
                    ACM.Aggregation::Sum
                );

        cogs = new ACM.DynamicMeasureDefinition(
                    tableStr(RetailTopChannelsView),
                    fieldStr(RetailTopChannelsView, COGS),
                    ACM.Aggregation::Sum
                );

        quantity = new ACM.DynamicMeasureDefinition(
                tableStr(RetailTopChannelsView),
                fieldStr(RetailTopChannelsView, InventQty),
                ACM.Aggregation::Sum
            );

        grossProfitMargin = amount.Subtract(cogs);

        ACM.LogicalExpression isAmountZero = amount.CompareEquals(0);

        grossProfitMarginPercentage = new ACM.If(
                isAmountZero,
                ACM.Null::ConstValue,
                grossProfitMargin.Divide(amount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(RetailTopChannelsReportTable))]
    public RetailTopChannelsReportTable getTable()
    {
        select table;
        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the report.
    /// </summary>
    public void processReport()
    {
        dc = this.parmDataContract();
        this.populateData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the query and insert data into temp table.
    /// </summary>
    void populateData()
    {
        try
        {
            SysQueryRun::ExecuteInManagedStack(true);

            Query q = new Query();
            QueryBuildDataSource  qds = q.addDataSource(tableNum(RetailTopChannelsView));

            // Add fields.
            qds.addSelectionFieldWithAlias('ChannelId', fieldNum(RetailTopChannelsView, ChannelId));
            qds.addSelectionFieldWithAlias('ChannelName', fieldNum(RetailTopChannelsView, ChannelName));
            qds.addCalculationField(amount, 'LineAmountMST' );
            qds.addCalculationField(cogs,'COGS');
            qds.addCalculationField(quantity, 'Quantity');
            qds.addCalculationField(grossProfitMargin, 'GrossProfitMargin');
            qds.addCalculationField(grossProfitMarginPercentage, 'GrossProfitMarginPercentage');
            qds.addGroupByField(fieldNum(RetailTopChannelsView, ChannelId));
            qds.addGroupByField(fieldNum(RetailTopChannelsView, ChannelName));
            this.AddSortOrder(qds);
            q.topRows(dc.parmTopCount());

            //Add ranges.
            QueryBuildRange dateTimeRange = qds.addRange(fieldnum(RetailTopChannelsView, InvoiceDate));
            dateTimeRange.value(SysQuery::range(dc.parmFromDate(), dc.parmToDate()));

            //Build Mappings
            Map m = this.getMappings();

            // run the query and insert the query results into the form datasource
            QueryRun::runAndPopulate(q, table, m);
        }
        finally
        {
            SysQueryRun::ExecuteInManagedStack(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMappings</Name>
				<Source><![CDATA[
    private Map getMappings()
    {
        Map m = new Map(Types::String, Types::String);
        m.insert('ChannelId', fieldStr(RetailTopChannelsReportTable, ChannelId));
        m.insert('ChannelName', fieldStr(RetailTopChannelsReportTable, ChannelName));
        m.insert('LineAmountMST', fieldStr(RetailTopChannelsReportTable, Amount));
        m.insert('COGS', fieldStr(RetailTopChannelsReportTable, COGS));
        m.insert('Quantity', fieldStr(RetailTopChannelsReportTable, Quantity));
        m.insert('GrossProfitMargin', fieldStr(RetailTopChannelsReportTable, Margin));
        m.insert('GrossProfitMarginPercentage', fieldStr(RetailTopChannelsReportTable, Percentage));

        return m;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddSortOrder</Name>
				<Source><![CDATA[
    private void AddSortOrder(QueryBuildDataSource qbd)
    {
        switch (dc.parmOrderBy())
        {
            case RetailReportOrderBy::Amount:
                qbd.addOrderByCalculationField(amount, SortOrder::Descending);
                break;
            case RetailReportOrderBy::Profit:
                qbd.addOrderByCalculationField(grossProfitMargin, SortOrder::Descending);
                break;
            case RetailReportOrderBy::Quantity:
                qbd.addOrderByCalculationField(quantity, SortOrder::Descending);
                break;
            case RetailReportOrderBy::ProfitPercentage:
                qbd.addOrderByCalculationField(grossProfitMarginPercentage, SortOrder::Descending);
                qbd.addOrderByCalculationField(grossProfitMargin, SortOrder::Descending);
                break;
            default:
                throw Global::error("@Retail:RetailReportOrderByNotSupported");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>