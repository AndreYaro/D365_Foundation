<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholJournalTotals_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AlcoholJournalTotals_RU</c> class performs some calculations about transes.
/// </summary>
public class AlcoholJournalTotals_RU
{
    private FromDate                    fromDate;
    private ToDate                      toDate;
    private BranchId_RU                 branchId;
    private EmplBoolean                 isBeer;
    private KeySum                      keySumTotals;
    private Query                       query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotals</Name>
				<Source><![CDATA[
    public void calcTotals()
    {
        AlcoholJournalTrans_RU      alcoholJournalTrans;
        QueryRun                    queryRun;
        UnitOfMeasureSymbol         unitIdDal = InventParameters::find().AlcoholUnitId_RU;
        QueryBuildRange             qbrDirection;
        QueryBuildDataSource        qbdsAlcoholJournalTrans;

        real getQty()
        {
            return UnitOfMeasureConverter::convert(alcoholJournalTrans.TotalQty,
                                               UnitOfMeasure::unitOfMeasureIdBySymbol(alcoholJournalTrans.TotalQtyUnitId),
                                               UnitOfMeasure::unitOfMeasureIdBySymbol(unitIdDal),
                                               NoYes::Yes);
        }

        keySumTotals = KeySum::construct(2,2);

        qbdsAlcoholJournalTrans = query.dataSourceTable(tableNum(AlcoholJournalTrans_RU));
        qbdsAlcoholJournalTrans.orderMode(OrderMode::GroupBy);
        qbdsAlcoholJournalTrans.addSelectionField(fieldNum(AlcoholJournalTrans_RU, TotalQty), SelectionField::Sum);
        qbdsAlcoholJournalTrans.addGroupByField(fieldNum(AlcoholJournalTrans_RU, Direction));
        qbdsAlcoholJournalTrans.addSortField(fieldNum(AlcoholJournalTrans_RU, AlcoholProductionTypeId));
        qbdsAlcoholJournalTrans.addSortField(fieldNum(AlcoholJournalTrans_RU, TotalQtyUnitId));
        
        queryRun = new QueryRun(query);

        container contData;

        while (queryRun.next())
        {           
            alcoholJournalTrans = queryRun.get(tableNum(AlcoholJournalTrans_RU));

            if (alcoholJournalTrans.Direction == InventDirection::Receipt)
            {
                contData = [getQty(), 0];
            }
            else if (alcoholJournalTrans.Direction == InventDirection::Issue)
            {
                contData = [0, getQty()];
            }

            keySumTotals.updateNow([alcoholJournalTrans.AlcoholProductionTypeId, unitIdDal], contData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeySumTotals</Name>
				<Source><![CDATA[
    public container getKeySumTotals()
    {
        return keySumTotals.export();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        QueryBuildDataSource        qbdsAlcoholJournalTrans, qbdsAlcoholJournalTable, qbdsProdType;

        query = AlcoholJournalTotals_RU::getDefaultQuery();

        qbdsAlcoholJournalTrans = query.dataSourceTable(tableNum(AlcoholJournalTrans_RU));
        qbdsAlcoholJournalTrans.addRange(fieldNum(AlcoholJournalTrans_RU, TransDate)).value(queryRange(fromDate, toDate));

        if (branchId)
        {
            qbdsAlcoholJournalTable = query.dataSourceTable(tableNum(AlcoholJournalTable_RU));
            qbdsAlcoholJournalTable.addRange(fieldNum(AlcoholJournalTable_RU, BranchId)).value(queryValue(branchId));
        }

        if (isBeer != EmplBoolean::None)
        {
            qbdsProdType = query.dataSourceTable(tableNum(AlcoholProductionType_RU));
            qbdsProdType.addRange(fieldNum(AlcoholProductionType_RU, IsBeer)).value(isBeer == EmplBoolean::Yes ? queryValue(NoYes::Yes) : queryValue(NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBranchId</Name>
				<Source><![CDATA[
    public BranchId_RU parmBranchId(BranchId_RU _branchId = branchId)
    {
        branchId = _branchId;
        return branchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBeer</Name>
				<Source><![CDATA[
    public EmplBoolean parmIsBeer(EmplBoolean _isBeer = isBeer)
    {
        isBeer = _isBeer;
        return isBeer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = query)
    {
        query = _query;
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static AlcoholJournalTotals_RU newParameters(FromDate         _fromDate,
                                                        ToDate           _toDate,
                                                        BranchId_RU      _branchId,
                                                        EmplBoolean      _isBeer)
    {
        AlcoholJournalTotals_RU   totals = AlcoholJournalTotals_RU::construct();

        totals.parmFromDate(_fromDate);
        totals.parmToDate(_toDate);
        totals.parmBranchId(_branchId);
        totals.parmIsBeer(_isBeer);

        totals.initQuery();

        return totals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static AlcoholJournalTotals_RU construct()
    {
        return new AlcoholJournalTotals_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultQuery</Name>
				<Source><![CDATA[
    static Query getDefaultQuery(JoinMode _joinMode = JoinMode::ExistsJoin)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsAlcoholJournalTrans, qbdsAlcoholJournalTable, qbdsInventTable, qbdsProdType;

        qbdsAlcoholJournalTrans = query.addDataSource(tableNum(AlcoholJournalTrans_RU));

        qbdsAlcoholJournalTable = qbdsAlcoholJournalTrans.addDataSource(tableNum(AlcoholJournalTable_RU));
        qbdsAlcoholJournalTable.relations(true);
        qbdsAlcoholJournalTable.fetchMode(QueryFetchMode::One2One);
        qbdsAlcoholJournalTable.joinMode(_joinMode);

        qbdsInventTable = qbdsAlcoholJournalTrans.addDataSource(tableNum(InventTable));
        qbdsInventTable.relations(true);
        qbdsInventTable.fetchMode(QueryFetchMode::One2One);
        qbdsInventTable.joinMode(_joinMode);

        qbdsProdType = qbdsInventTable.addDataSource(tableNum(AlcoholProductionType_RU));
        qbdsProdType.relations(true);
        qbdsProdType.joinMode(_joinMode);

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>