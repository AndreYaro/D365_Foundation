<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Prod_JournalProd_CoBy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// class for Co/By Raf journal
/// </summary>
public class InventMov_Prod_JournalProd_CoBy extends InventMov_ProdCoBy
{
    ProdJournalProd prodJournalProd;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchProdDate</Name>
				<Source><![CDATA[
    ///<summary>
    /// This method returns co/by trans date
    /// </summary>
    /// <param name="_inventTrans">
    /// Inventory transaction</param>
    /// <returns>
    /// returns Co/by trans date
    /// </returns>
    public InventBatchProdDate batchProdDate(InventTrans _inventTrans = null)
    {
        return prodJournalProd.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>childBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/set the child buffer: ProdJournalProd record
    /// </summary>
    /// <param name="_prodJournalProd">
    /// Production journal record
    /// </param>
    /// <returns>
    /// returns Production journal record
    /// </returns>
    public Common childBuffer(Common _prodJournalProd = prodJournalProd)
    {
        prodJournalProd = _prodJournalProd;
        return prodJournalProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initalizes the inventrans record
    /// </summary>
    /// <param name="_inventTrans">
    /// Inventory transaction record
    /// </param>
    /// <param name="_movement_orig">
    /// Original movement
    /// </param>
    public void initInventTransFromBuffer(
        InventTrans     _inventTrans,
        InventMovement  _movement_orig)
    {
        super(_inventTrans,_movement_orig);

        _inventTrans.TransChildType      = this.transChildType();
        _inventTrans.TransChildRefId     = this.transChildRefId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChildBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the child reference id.
    /// </summary>
    /// <param name="_inventDimId">
    /// InventDimId
    /// </param>
    /// <param name="_qtyNow">
    /// Qty
    /// </param>
    /// <param name="_qtyNowUnit">
    /// Unit Qty
    /// </param>
    /// <param name="_splitMovement">
    /// Split movement flag
    /// </param>
    /// <param name="_updateClass">
    /// updating class object
    /// </param>
    /// <param name="_pdsQtyNow">
    /// CW Qty
    /// </param>
    /// <returns>
    /// returns child reference id
    /// </returns>
    public InventTransChildRefId insertChildBuffer(
        InventDimId     _inventDimId,
        InventQty       _qtyNow,
        UnitQty         _qtyNowUnit,
        boolean         _splitMovement,
        Object          _updateClass = null,
        PdsCWInventQty  _pdsQtyNow = 0)
    {
        return prodJournalProd.InventTransChildRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the inventDimid.
    /// </summary>
    /// <returns>
    /// returns inventDimId
    /// </returns>
    public InventDimId inventDimId()
    {
        return prodJournalProd.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustClearChildRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Must child reference be cleared when updating items picked or registered
    /// </summary>
    /// <returns>
    /// returns flag
    /// </returns>
    public boolean mustClearChildRef()
    {
        return prodJournalProd.InventReturnFlag ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// Production Co/by
    /// </param>
    /// <param name="_prodJournalProd">
    /// Production journal
    /// </param>
    protected void new(
        PmfProdCoBy         _pmfProdCoBy,
        ProdJournalProd     _prodJournalProd
        )
    {
        prodJournalProd  = _prodJournalProd;

        super(_pmfProdCoBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAdjustInventoryQuantity</Name>
				<Source><![CDATA[
    public void pdsAdjustInventoryQuantity(InventQty _inventQty)
    {
        super(_inventQty);

        if (_inventQty!= 0 && this.pdsCWItem())
        {
            prodJournalProd.QtyGood += _inventQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateBufferWithAdjustedQuantity</Name>
				<Source><![CDATA[
    public void pdsUpdateBufferWithAdjustedQuantity(InventDimId _inventDimId = this.inventDimId())
    {
        super(_inventDimId);
        
        if (!prodJournalProd.RecId && ProdCatchWeightCoProductDeferredRafFlight::instance().isEnabled())
        {
            return;
        }

        // update the journal line, so that the adjusted inventory and RAF quantities are persisted.
        if (prodJournalProd.selectForUpdate())
        {
            prodJournalProd.doUpdate();
        }
        else
        {
            var prodJournalProdLocal = ProdJournalProd::findRecId(prodJournalProd.RecId, true);
            prodJournalProdLocal.QtyGood = prodJournalProd.QtyGood;
            prodJournalProdLocal.doUpdate();
            prodJournalProd.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBaseAttributeValue</Name>
				<Source><![CDATA[
    public PDSBaseValue pdsBaseAttributeValue()
    {
        return prodJournalProd.PDSBaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCanHaveBatchInheritance</Name>
				<Source><![CDATA[
    public boolean pdsCanHaveBatchInheritance()
    {
        return #PDSLotGenealogyEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsInheritBatchData</Name>
				<Source><![CDATA[
    public void pdsInheritBatchData(InventBatch _inventBatch, InventTrans _inventTrans = null)
    {
        PDSBatchInheritor_Prod::newMovementBatch(this, _inventBatch, _inventTrans).inherit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCheckUpdateInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the current Inventory Movement can be inventory updated or not.
    /// </summary>
    /// <returns>
    /// Whether the current Inventory Movement can be inventory updated or not.
    /// </returns>
    public boolean pmfCheckUpdateInvent()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the inventDimid.
    /// </summary>
    /// <param name="_dimId">
    /// InventDimId
    /// </param>
    public void setInventDimId(InventDimId _dimId)
    {
        super(_dimId);

        prodJournalProd.InventDimId = _dimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transChildRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the child refId
    /// </summary>
    /// <returns>
    /// returns child refid
    /// </returns>
    public InventTransChildRefId transChildRefId()
    {
        if (prodJournalProd.InventReturnFlag)
        {
            return super();
        }

        return prodJournalProd.InventTransChildRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transChildType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the child type
    /// </summary>
    /// <returns>
    /// returns child type
    /// </returns>
    public InventTransChildType transChildType()
    {
        if (prodJournalProd.InventReturnFlag)
        {
            return super();
        }

        return prodJournalProd.InventTransChildType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// Production Co/by
    /// </param>
    /// <param name="_prodJournalProd">
    /// Production journal
    /// </param>
    /// <returns>
    /// returns instance
    /// </returns>
    public static InventMov_Prod_JournalProd_CoBy construct(
        PmfProdCoBy         _pmfProdCoBy,
        ProdJournalProd     _prodJournalProd)
    {
        return new InventMov_Prod_JournalProd_CoBy(
                                    _pmfProdCoBy,
                                    _prodJournalProd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(boolean _updateReservation = true)
    {
        PmfProdCoBy pmfProdCoByBuffer = buffer as PmfProdCoBy;
        
        // ensure that remainder estimation propagates inventory dimensions from co/by product, not report as finished line
        Common childBuffer = null;

        pmfProdCoByBuffer.update(false, childBuffer);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>