<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQVendQuestionAnswerFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQVendQuestionAnswerFormHelper</c> is a helper class for <c>PurchRFQVendQuestionAnswer</c> form.
/// </summary>
internal final class PurchRFQVendQuestionAnswerFormHelper
{
    private static boolean isCurrentUserProcurementAgent;
    internal FormRun formRun;
    private FormRun callerForm;
    private Common callerRecord;
    internal FormStringControl purchRFQVendPostedGroupQuestionAnswer_GroupCode;
    private FormCheckBoxControl purchRFQVendPostedQuestionAnswer_IsDirectResponse;
    private FormStringControl groupCodeDetail;
    private FormCheckBoxControl isDirectResponseDetail;
    private FormStringControl vendorQuestionCutOffDate;
    private FormFunctionButtonControl sendAnswers;
    private FormGridControl formGridProcurementAgent;
    private FormTabControl formTabNotPublishedQuestionVendor;
    private FormTabControl formTabPublishedResponsesVendor;
    private FormGroupControl formGroupProcurementAgent;
    private FormGroupControl formGroupVendor;
    private FormDataSource postedQuestionAnswer_ds;
    private FormDataSource postedGroupQuestionAnswer_ds;
    private FormDataSource pendingQuestionAnswer_ds;
    private FormDataSource pendingGroupQuestionAnswer_ds;
    private FormCommandButtonControl deleteButton;

    #SysSystemDefinedButtons

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal static PurchRFQVendQuestionAnswerFormHelper newFromParameters(
        boolean _isCurrentUserProcurementAgent,
        FormRun _formRun,
        PurchRFQVendPostedQuestionAnswer _postedQuestionAnswer,
        FormDataSource _postedQuestionAnswer_ds)
    {
        PurchRFQVendQuestionAnswerFormHelper purchRFQVendQuestionAnswerFormHelper = new PurchRFQVendQuestionAnswerFormHelper();
              
        purchRFQVendQuestionAnswerFormHelper.parmIsCurrentUserProcurementAgent(_isCurrentUserProcurementAgent);
        purchRFQVendQuestionAnswerFormHelper.init(_formRun, _postedQuestionAnswer, _postedQuestionAnswer_ds);

        return purchRFQVendQuestionAnswerFormHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCurrentUserProcurementAgent</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal boolean parmIsCurrentUserProcurementAgent(boolean _isCurrentUserProcurementAgent = isCurrentUserProcurementAgent)
    {
        isCurrentUserProcurementAgent = _isCurrentUserProcurementAgent;

        return isCurrentUserProcurementAgent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches <c>PurchRFQVendCreateQuestion</c> form in order to create a new question.
    /// </summary>
    /// <param name="_callerForm">
    /// An instance of the parent form.
    /// </param>
    /// <returns>
    /// Returns true when submit button in the <c>PurchRFQVendCreateQuestion</c> form is clicked.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    internal boolean create(FormRun _callerForm = null)
    {
        Args args = new Args();

        formRun = _callerForm;

        args.name(formStr(PurchRFQVendCreateQuestion));
        args.caller(formRun);
        args.record(callerRecord);
        FormRun purchRFQVendCreateQuestion = classfactory.formRunClass(args);
        purchRFQVendCreateQuestion.init();
        purchRFQVendCreateQuestion.run();
        purchRFQVendCreateQuestion.wait();

        return purchRFQVendCreateQuestion.closedOk();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes formRun to the caller form and other form controls on the form.
    /// Also calls methods required for opening the form initially.
    /// </summary>
    /// <param name = "_formRun"> A variable pointing to the form calling this class.</param>
    /// <param name = "_postedQuestionAnswer">A record for <c>PurchRFQVendPostedQuestionAnswer</c> table.</param>
    /// <param name = "_postedQuestionAnswer_ds">A datasource buffer for <c>PurchRFQVendPostedQuestionAnswer</c> table.</param>
    [Hookable(false), Wrappable(false)]
    internal void init(
        FormRun _formRun,
        PurchRFQVendPostedQuestionAnswer _postedQuestionAnswer,
        FormDataSource _postedQuestionAnswer_ds)
    {
        this.setFormRun(_formRun, _formRun.args().caller(), _formRun.args().record());
        this.initControls();
        this.updateDesign(_postedQuestionAnswer);
        
        vendorQuestionCutOffDate.text(datetime2Str(DateTimeUtil::applyTimeZoneOffset(PurchRFQCaseTable::findRecId(callerRecord.RecId).VendorQuestionCutoffDateTime, DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the formRun variable to the calling form.
    /// </summary>
    /// <param name = "_formRun"> A variable pointing to the form calling this class.</param>
    /// <param name = "_callerForm"> A variable pointing to the calling form.</param>
    /// <param name = "_callerRecord"> A variable pointing to the calling record.</param>
    [Hookable(false), Wrappable(false)]
    internal void setFormRun(FormRun _formRun, FormRun _callerForm, Common _callerRecord)
    {
        formRun = _formRun;
        callerForm = _callerForm;
        callerRecord = _callerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form control variables to the form controls of the calling form.
    /// </summary>
    [Hookable(false), Wrappable(false)]
    internal void initControls()
    {
        purchRFQVendPostedGroupQuestionAnswer_GroupCode = formRun.control(formRun.controlId(formControlStr(PurchRFQVendQuestionAnswer, PurchRFQVendPostedGroupQuestionAnswer_GroupCode))) as FormStringControl;
        purchRFQVendPostedQuestionAnswer_IsDirectResponse = formRun.control(formRun.controlId(formControlStr(PurchRFQVendQuestionAnswer, PurchRFQVendPostedQuestionAnswer_IsDirectResponse))) as FormCheckBoxControl;
        groupCodeDetail = formRun.control(formRun.controlId(formControlStr(PurchRFQVendQuestionAnswer, GroupCodeDetail))) as FormStringControl;
        isDirectResponseDetail = formRun.control(formRun.controlId(formControlStr(PurchRFQVendQuestionAnswer, IsDirectResponseDetail))) as FormCheckBoxControl;
        vendorQuestionCutOffDate = formRun.control(formRun.controlId(formControlStr(PurchRFQVendQuestionAnswer, VendorQuestionCutoffDateTime))) as FormStringControl;
        sendAnswers = formRun.control(formRun.controlId(formControlStr(PurchRFQVendQuestionAnswer, SendAnswers))) as FormFunctionButtonControl;
        postedQuestionAnswer_ds = formRun.dataSource(formDataSourceStr(PurchRFQVendQuestionAnswer, PurchRFQVendPostedQuestionAnswer));
        postedGroupQuestionAnswer_ds = formRun.dataSource(formDataSourceStr(PurchRFQVendQuestionAnswer, PurchRFQVendPostedGroupQuestionAnswer));
        pendingQuestionAnswer_ds = formRun.dataSource(formDataSourceStr(PurchRFQVendQuestionAnswer, PurchRFQVendPendingQuestionAnswer));
        pendingGroupQuestionAnswer_ds = formRun.dataSource(formDataSourceStr(PurchRFQVendQuestionAnswer, PurchRFQVendPendingGroupQuestionAnswer));
        deleteButton = formRun.control(formRun.controlId(#SystemDefinedDeleteButton)) as FormCommandButtonControl;
        formGridProcurementAgent = formRun.control(formRun.controlId(formControlStr(PurchRFQVendQuestionAnswer, FormGrid))) as FormGridControl;
        formTabNotPublishedQuestionVendor = formRun.control(formRun.controlId(formControlStr(PurchRFQVendQuestionAnswer, FormTabNotPublishedQuestionVendorView))) as FormTabControl;
        formTabPublishedResponsesVendor = formRun.control(formRun.controlId(formControlStr(PurchRFQVendQuestionAnswer, FormTabPublishedResponses))) as FormTabControl;
        formGroupProcurementAgent = formRun.control(formRun.controlId(formControlStr(PurchRFQVendQuestionAnswer, FormGroup))) as FormGroupControl;
        formGroupVendor = formRun.control(formRun.controlId(formControlStr(PurchRFQVendQuestionAnswer, FormGroupVendorView))) as FormGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the design of the form based on whether it is opened by the buyer or the vendor
    /// </summary>
    /// <param name = "_postedQuestionAnswer">A record for <c>PurchRFQVendPostedQuestionAnswer</c> table.</param>
    [Hookable(false), Wrappable(false)]
    internal void updateDesign(PurchRFQVendPostedQuestionAnswer _postedQuestionAnswer)
    {
        this.setFieldsVisibility();
        this.setFieldsEditability(_postedQuestionAnswer);
        this.setActionPaneButtonVisibility();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of fields in the grid based on the user role.
    /// </summary>
    [Hookable(false), Wrappable(false)]
    internal void setFieldsVisibility()
    {
        formGridProcurementAgent.visible(isCurrentUserProcurementAgent);
        formTabNotPublishedQuestionVendor.visible(!isCurrentUserProcurementAgent);
        formTabPublishedResponsesVendor.visible(!isCurrentUserProcurementAgent);

        formGroupProcurementAgent.visible(isCurrentUserProcurementAgent);
        formGroupVendor.visible(!isCurrentUserProcurementAgent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsEditability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets editability of fields in the grid based on the user role.
    /// </summary>
    /// <param name = "_postedQuestionAnswer">A record for <c>PurchRFQVendPostedQuestionAnswer</c> table.</param>
    [Hookable(false), Wrappable(false)]
    internal void setFieldsEditability(PurchRFQVendPostedQuestionAnswer _postedQuestionAnswer)
    {
        purchRFQVendPostedQuestionAnswer_IsDirectResponse.allowEdit(_postedQuestionAnswer && !_postedQuestionAnswer.IsAnswerPublishedToVendor);
        purchRFQVendPostedGroupQuestionAnswer_GroupCode.allowEdit(_postedQuestionAnswer && !_postedQuestionAnswer.IsAnswerPublishedToVendor);
        groupCodeDetail.allowEdit(_postedQuestionAnswer && !_postedQuestionAnswer.IsAnswerPublishedToVendor);
        isDirectResponseDetail.allowEdit(_postedQuestionAnswer && !_postedQuestionAnswer.IsAnswerPublishedToVendor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActionPaneButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of action pane buttons based on the user role and calling form.
    /// </summary>
    [Hookable(false), Wrappable(false)]
    internal void setActionPaneButtonVisibility()
    {
        sendAnswers.visible(isCurrentUserProcurementAgent);

        PurchRFQVendorQuestionCutoffDateTime questionCutoffDate = this.getCutoffDateForVendorQuestions();

        if (callerForm.name() == formStr(PurchRFQCaseTable)
            || callerForm.name() == formStr(PurchRFQCaseTableListPage)
            || (questionCutoffDate != DateTimeUtil::minValue() && questionCutoffDate < DateTimeUtil::utcNow()))
        {
            this.showHideNewButton(false);
            this.showHideDeleteButton(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showHideNewButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the system defined new button on the form
    /// </summary>
    /// <param name = "_isVisible"> boolean variable to set the button to visible or not </param>
    [Hookable(false), Wrappable(false)]
    internal void showHideNewButton(boolean _isVisible)
    {
        FormCommandButtonControl newButton = formRun.control(formRun.controlId(#SystemDefinedNewButton)) as FormCommandButtonControl;
        
        if (newButton)
        {
            newButton.visible(_isVisible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showHideDeleteButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the system defined delete button on the form
    /// </summary>
    /// <param name = "_isVisible"> boolean variable to set the button to visible or not </param>
    [Hookable(false), Wrappable(false)]
    internal void showHideDeleteButton(boolean _isVisible)
    {
        if (deleteButton)
        {
            deleteButton.visible(_isVisible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupQuestionAnswerMissing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows informational message if group code exists but group question/answer not exists.
    /// </summary>
    /// <param name="_rfqCaseId">RFQ Case Id field value.</param>
    /// <param name="_groupCode">Group code field value.</param>
    /// <returns>
    /// True if any group code group question/answer is missing; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    internal boolean groupQuestionAnswerMissing(PurchRFQCaseId _rfqCaseId, PurchRFQVendorQuestionGroupCode _groupCode)
    {
        boolean ret;
        PurchRFQVendPostedGroupQuestionAnswer postedGroupQuestionAnswer = PurchRFQVendPostedGroupQuestionAnswer::findByRFQCaseIdGroupCode(_rfqCaseId, _groupCode);

        if (postedGroupQuestionAnswer
            && (!postedGroupQuestionAnswer.GroupAnswer
                || !postedGroupQuestionAnswer.GroupQuestion))
        {
            ret = true;
            checkFailed(strFmt('@SCM:PurchRFQMissingGroupQuestionAnswerError', _groupCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCutoffDateForVendorQuestions</Name>
				<Source><![CDATA[
    private PurchRFQVendorQuestionCutoffDateTime getCutoffDateForVendorQuestions()
    {
        PurchRFQVendorQuestionCutoffDateTime questionCutoffDate;

        if (callerRecord.TableId == tableNum(PurchRFQCaseTable))
        {
            questionCutoffDate = PurchRFQCaseTable::findRecId(callerRecord.RecId).VendorQuestionCutoffDateTime;
        }
        else if (callerRecord.TableId == tableNum(PurchRFQTable))
        {
            questionCutoffDate = PurchRFQCaseTable::find(PurchRFQTable::findRecId(callerRecord.RecId).RFQCaseId).VendorQuestionCutoffDateTime;
        }

        return questionCutoffDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>