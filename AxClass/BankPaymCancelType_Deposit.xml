<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymCancelType_Deposit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPaymCancelType_Deposit</c> provides the functionality to cancel a bank account transaction initiated for a deposit.
/// </summary>
public class BankPaymCancelType_Deposit extends BankPaymCancelType
{
    BankDeposit bankDepositToCancel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('Method init has been deprecated. Please use initV2 method instead.', true, 30\5\2022)]
    public void init(Common _common,
        CustVendPaymJournalFee  _paymentJournalFee,
        BankAccountTrans _bankAccountTransToCancel,
        ReasonRefRecID _reasonRefID,
        LedgerVoucher _ledgerVoucher,
        LedgerVoucherObject _ledgerVoucherObject,
        AmountMST _accountingCurrencyAmount,
        AmountCur _transactionCurrencyAmount,
        AmountCur _bankTransTransactionCurrencyAmount,
        BankTransactionType _paymReference,
        TransTxt _txt)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateExchangeRateHelper</Name>
				<Source><![CDATA[
    public CurrencyExchangeHelper populateExchangeRateHelper(GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        CurrencyExchangeHelper exchangeRateHelper;

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(_generalJournalAccountEntry.company()).RecId),
            ledgerVoucherObject.parmAccountingDate());

        exchangeRateHelper.parmExchangeRate1(_generalJournalAccountEntry.getAccountingExchangeRate());
        exchangeRateHelper.parmExchangeRate2(0);
        exchangeRateHelper.parmReportingExchangeRate1(_generalJournalAccountEntry.getReportingExchangeRate());

        return exchangeRateHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveLedgerDimensionForTransaction</Name>
				<Source><![CDATA[
    protected LedgerDimensionAccount retrieveLedgerDimensionForTransaction(GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        LedgerDimensionAccount ledgerDimension;

        ledgerDimension = _generalJournalAccountEntry.LedgerDimension;

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceSpecificValues</Name>
				<Source><![CDATA[
    public BankAccountTrans setSourceSpecificValues(BankAccountTrans _bankAccountTrans)
    {
        _bankAccountTrans.PaymReference = bankDepositToCancel.PaymReference;
        _bankAccountTrans.SourceTableId = bankDepositToCancel.TableId;
        _bankAccountTrans.SourceRecId = bankDepositToCancel.RecId;

        return _bankAccountTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initV2</Name>
				<Source><![CDATA[
    protected void initV2(Common _common, CustVendPaymJournalFee _paymentJournalFee, BankAccountTrans _bankAccountTransToCancel, ReasonRefRecID _reasonRefID, LedgerVoucher _ledgerVoucher, LedgerVoucherObject _ledgerVoucherObject, AmountMST _accountingCurrencyAmount, AmountMSTSecondary _reportingCurrencyAmount, AmountCur _transactionCurrencyAmount, AmountCur _bankTransTransactionCurrencyAmount, BankTransactionType _paymReference, TransTxt _txt)
    {
        if (_common.TableId != bankDepositToCancel.TableId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        bankDepositToCancel = _common;
        paymentJournalFee = _paymentJournalFee;
        bankAccountTransToCancel = _bankAccountTransToCancel;
        reasonRefID = ReasonTableRef::checkCreateInCompany( _reasonRefID, bankAccountTransToCancel.DataAreaId);
        voucher = _ledgerVoucherObject.parmVoucher();
        cancelDate = _ledgerVoucherObject.parmAccountingDate();
        accountingCurrencyAmount = _accountingCurrencyAmount;
        reportingCurrencyAmount = _reportingCurrencyAmount;
        transactionCurrencyAmount = _transactionCurrencyAmount;
        bankTransTransactionCurrencyAmount = _bankTransTransactionCurrencyAmount;
        paymReference = _paymReference;
        txt = _txt;
        ledgerVoucher = _ledgerVoucher;
        ledgerVoucherObject = _ledgerVoucherObject;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>