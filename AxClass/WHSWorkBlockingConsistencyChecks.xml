<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkBlockingConsistencyChecks</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkBlockingConsistencyChecks</c> class handles the recalculation of the blocking reasons of works.
/// </summary>
internal final class WHSWorkBlockingConsistencyChecks
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMissingBlockingReasons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the missing blocking reason for the passed work.
    /// </summary>
    /// <param name = "_workTable">Work table record.</param>
    /// <param name = "_blockingReasonTypes">A container with thr blocking reasons that should be checked if missing.</param>
    [Hookable(false)]
    internal static void addMissingBlockingReasons(WHSWorkTable _workTable, container _blockingReasonTypes)
    {
        WHSWorkBlocking workBlocking = WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(_workTable.WorkId);

        for (int i = 1; i <= conLen(_blockingReasonTypes); i++)
        {
            WHSWorkBlockingReasonType reasonType = conPeek(_blockingReasonTypes, i);
            WHSWorkBlockingReason blockingReason = WHSWorkBlockingReason::newFromReasonType(reasonType, _workTable);

            WHSWorkUnBlockingValidationResult canUnblockResult = blockingReason.canUnBlockReason();

            if (!canUnblockResult.parmCanUnBlockResult() && !blockingReason.isBlocked())
            {
                workBlocking.tryBlockWorkWithReasonType(reasonType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReasonsForBlockedWorkWithNoReasons</Name>
				<Source><![CDATA[
    private static void addReasonsForBlockedWorkWithNoReasons(WHSWorkTable _worktable)
    {
        WHSWorkBlockingConsistencyChecks::addMissingBlockingReasons(_worktable, WHSWorkBlocking::blockingReasonTypes());

        if (!WHSWorkBlockingReasonAssociation::blockingReasonExist(_worktable.WorkId))
        {
            WHSWorkBlocking workBlocking = WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(_worktable.WorkId);
            workBlocking.tryBlockWorkWithReasonType(WHSWorkBlockingReasonType::Undefined);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReasonsForAllBlockedWorksWithNoBlockingReasons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the blocking reasons for all the blocked works which do not have a blocking reason.
    /// </summary>
    [Hookable(false)]
    internal static void addReasonsForAllBlockedWorksWithNoBlockingReasons()
    {
        WHSWorkTable                        workTable;
        WHSWorkBlockingReasonAssociation    workBlockingReasonAssociation;

        while select workTable
            where workTable.Frozen == NoYes::Yes
               && (workTable.WorkStatus != WHSWorkStatus::Cancelled
                    && workTable.WorkStatus != WHSWorkStatus::Closed)
            notexists join workBlockingReasonAssociation
                where workTable.WorkId == workBlockingReasonAssociation.WorkId
        {
            ttsbegin;

            WHSWorkBlockingConsistencyChecks::addReasonsForBlockedWorkWithNoReasons(workTable);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReasonsFromNotFrozenWorks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the blocking reasons for all the not blocked works which do not have a blocking reason.
    /// </summary>
    [Hookable(false)]
    internal static void removeReasonsFromNotFrozenWorks()
    {
        WHSWorkTable                        workTable;
        WHSWorkBlockingReasonAssociation    workBlockingReasonAssociation;

        delete_from workBlockingReasonAssociation
            exists join workTable
                where workTable.WorkId == workBlockingReasonAssociation.WorkId
                   && workTable.Frozen == NoYes::No
                   && (workTable.WorkStatus != WHSWorkStatus::Cancelled
                   && workTable.WorkStatus != WHSWorkStatus::Closed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNoLongerAccurateReasons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the blocking reasons which are not in sync with the data.
    /// </summary>
    [Hookable(false)]
    internal static void removeNoLongerAccurateReasons()
    {
        WHSWorkBlockingConsistencyChecks::removeNoLongerAccurateHeldWaveReason();
        WHSWorkBlockingConsistencyChecks::removeNoLongerAccurateReplenishmentReason();
        WHSWorkBlockingConsistencyChecks::removeNoLongerAccurateStagingOverpickReason();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsBlockedWorkWithNoReasons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the blocking reasons for all the not blocked works which do not have a blocking reason.
    /// </summary>
    [Hookable(false)]
    internal static boolean existsBlockedWorkWithNoReasons()
    {
        WHSWorkTable                        workTable;
        WHSWorkBlockingReasonAssociation    workBlockingReasonAssociation;

        select firstonly workTable
            where workTable.Frozen == NoYes::Yes
               && (workTable.WorkStatus != WHSWorkStatus::Cancelled
                    && workTable.WorkStatus != WHSWorkStatus::Closed)
            notexists join workBlockingreasonAssociation
                where workTable.WorkId == workBlockingreasonAssociation.WorkId;

        return workTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNoLongerAccurateHeldWaveReason</Name>
				<Source><![CDATA[
    private static void removeNoLongerAccurateHeldWaveReason()
    {
        WHSWorkTable                        workTable;
        WHSWorkBlockingReasonAssociation    workBlockingReasonAssociation;
        WHSWaveTable                        waveTable;

        while select WorkId from workTable
            where workTable.Frozen == NoYes::Yes
               && (workTable.WorkStatus != WHSWorkStatus::Cancelled
                    && workTable.WorkStatus != WHSWorkStatus::Closed)
            exists join workBlockingreasonAssociation
                where workTable.WorkId == workBlockingreasonAssociation.WorkId
                   && workBlockingreasonAssociation.ReasonType == WHSWorkBlockingReasonType::HeldWave
            notexists join waveTable
                where waveTable.WaveId == workTable.WaveId
                    && waveTable.waveStatus <= WHSWaveStatus::Held
        {
            WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(workTable.WorkId)
                .tryUnBlockWorkWithReasonType(WHSWorkBlockingReasonType::HeldWave);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNoLongerAccurateReplenishmentReason</Name>
				<Source><![CDATA[
    private static void removeNoLongerAccurateReplenishmentReason()
    {
        WHSWorkTable                        workTable;
        WHSWorkBlockingReasonAssociation    workBlockingReasonAssociation;
        WHSReplenWorkLink                   replenWorkLink;
        WHSWorkTable                        replenishmentWorkTable;

        while select WorkId from workTable
            where workTable.Frozen == NoYes::Yes
               && (workTable.WorkStatus != WHSWorkStatus::Cancelled
                    && workTable.WorkStatus != WHSWorkStatus::Closed)
            exists join workBlockingReasonAssociation
                where workTable.WorkId == workBlockingReasonAssociation.WorkId
                   && workBlockingReasonAssociation.ReasonType == WHSWorkBlockingReasonType::UnProcessedReplenishmentWork
            notexists join replenWorkLink
                where replenWorkLink.DemandWorkId == workTable.WorkId
            exists join replenishmentWorkTable
                where replenishmentWorkTable.WorkId      == replenWorkLink.ReplenWorkId
                    && replenishmentWorkTable.WorkStatus != WHSWorkStatus::Closed
                    && replenishmentWorkTable.WorkStatus != WHSWorkStatus::Cancelled
                    && replenishmentWorkTable.WorkStatus != WHSWorkStatus::Combined             
        {
            WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(workTable.WorkId)
                .tryUnBlockWorkWithReasonType(WHSWorkBlockingReasonType::UnProcessedReplenishmentWork);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNoLongerAccurateStagingOverpickReason</Name>
				<Source><![CDATA[
    private static void removeNoLongerAccurateStagingOverpickReason()
    {
        WHSWorkFrozen                       workFrozen;
        WHSWorkTable                        workTable;
        WHSWorkTable                        relatedWorkTable;
        WHSWorkBlockingReasonAssociation    workBlockingReasonAssociation;

        while select WorkId from workTable
            where workTable.Frozen == NoYes::Yes
               && (workTable.WorkStatus != WHSWorkStatus::Cancelled
                    && workTable.WorkStatus != WHSWorkStatus::Closed)
            exists join workBlockingReasonAssociation
                where workTable.WorkId == workBlockingReasonAssociation.WorkId
                && workBlockingReasonAssociation.ReasonType == WHSWorkBlockingReasonType::UnProcessedOverPickWork
            notexists join workFrozen
                where workFrozen.FrozenWorkId == workTable.WorkId
            exists join relatedWorkTable
                where relatedWorkTable.WorkId == workFrozen.WorkId
                   && (relatedWorkTable.WorkStatus == WHSWorkStatus::Open
                       || relatedWorkTable.WorkStatus == WHSWorkStatus::InProcess)
        {
            WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(workTable.WorkId)
                .tryUnBlockWorkWithReasonType(WHSWorkBlockingReasonType::UnProcessedOverPickWork);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>