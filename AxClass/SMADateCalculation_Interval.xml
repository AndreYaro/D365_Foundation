<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>smaDateCalculation_Interval</Name>
  <SourceCode>
    <Declaration><![CDATA[
class smaDateCalculation_Interval extends SMADateCalculation
{
    SMAAgreementInterval    agreementInterval;
    TransDate               prevDate;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>addMonthNumber</Name>
        <Source><![CDATA[
        private date addMonthNumber(date _startDate, int _number)
    {
        #define.dateFormatDateMonthYear(123)
        #define.months(12)

        int     monthNumber;
        int     yearNumber;
        date    retDate;

        monthNumber = mthofyr(_startDate) + _number mod #months;

        yearNumber = year(_startDate) + _number div #months;

        if (monthNumber <= 0)
        {
            monthNumber += #months;
            yearNumber --;
        }

        if (monthNumber > #months)
        {
            monthNumber -= #months;
            yearNumber ++;
        }

        retDate = str2date(strfmt("%1 %2 %3", dayofmth(_startDate), monthNumber, yearNumber), #dateFormatDateMonthYear);

        return retDate;
    }
]]></Source>
      </Method>
      <Method>
        <Name>getDates</Name>
        <Source><![CDATA[
        public container getDates(SMAAgreementLine _agreementLine)
    {
        #define.dateFormatDateMonthYear(123)
        #define.months(12)
        #define.daysPerWeek(7)

        container   dateList;
        int         counter;
        int         cycles;
        date        controlDate;

        // Get the information from the line
        this.parmSMAAgreementLine(_agreementLine);
        this.setInterval();

        // Find the real from date
        if (continous)
        {
            // Get the right from date, depended on continous
            prevDate = agreementLine.StartDate;

            // Insert the start date as first element in the datelist.
            dateList = conins(dateList, 1, prevDate);
        }
        else
        {
            // Adjust the from date to the last date
            switch (agreementInterval.IntervalUnit)
            {
                case SMADayWeekMonthYear::Day   :
                        prevDate        = agreementLine.StartDate + ((periodFromDate - agreementLine.StartDate) div agreementInterval.Frequency) * agreementInterval.Frequency;
                        prevDate        = prevDate - agreementInterval.Frequency;
                        break;

                case SMADayWeekMonthYear::Week  :
                        prevDate        = agreementLine.StartDate + ((periodFromDate - agreementLine.StartDate) div (agreementInterval.Frequency * #daysPerWeek)) * ((agreementInterval.Frequency) * #daysPerWeek);
                        prevDate        = prevDate - (agreementInterval.Frequency * #daysPerWeek);
                        break;

                case SMADayWeekMonthYear::Month :
                        cycles          = (#months * (year(periodFromDate) - year(agreementLine.StartDate)) + (mthofyr(periodFromDate) - mthofyr(agreementLine.StartDate)))  div agreementInterval.Frequency;
                        prevDate        = this.addMonthNumber(agreementLine.StartDate, (cycles - 1) * agreementInterval.Frequency);
                        break;

                case SMADayWeekMonthYear::Year  :
                        cycles          = (year(periodFromDate) - year(agreementLine.StartDate)) div agreementInterval.Frequency;
                        prevDate        = str2date(strfmt("%1 %2 %3", dayofmth(agreementLine.StartDate), mthofyr(agreementLine.StartDate), year(agreementLine.StartDate) + (cycles - 1) * agreementInterval.Frequency), #dateFormatDateMonthYear);
                        break;

                default :
                        prevDate        = agreementLine.StartDate;
                        break;
            }
        }

        // Calculating the number of times the interval repeates within the given period.
        switch (agreementInterval.IntervalUnit)
        {
            case SMADayWeekMonthYear::Day   :
                    cycles  = (periodToDate - prevDate) div (agreementInterval.Frequency);
                    break;

            case SMADayWeekMonthYear::Week  :
                    cycles  = (periodToDate - prevDate) div ((agreementInterval.Frequency) * #daysPerWeek);
                    break;

            case SMADayWeekMonthYear::Month :
                    cycles  = ((year(periodToDate) - year(prevDate)) * #months + mthofyr(periodToDate) - mthofyr(prevDate)) div agreementInterval.Frequency;
                    break;

            case SMADayWeekMonthYear::Year  :
                    cycles  = (year(periodToDate) - year(prevDate)) div agreementInterval.Frequency;
                    break;

            default :
                    cycles  = 1;
                    break;
        }

        // Create list with all dates the number of times calculated. Add one to 'counter' if continous is selected.
        for (counter = 1; counter <= cycles; counter++)
        {
            controlDate = this.getNextDate();
            if ((continous || controlDate >= max(periodFromDate, latestStartDate)) && (controlDate <= min(periodToDate, earlistEndDate)))
            {
                dateList = conins(dateList, counter + continous, controlDate);
            }
        }

        return dateList;
    }
]]></Source>
      </Method>
      <Method>
        <Name>getNextDate</Name>
        <Source><![CDATA[
        public date getNextDate()
    {
        #define.dateFormatDateMonthYear(123)
        #define.daysPerWeek(7)

        int         counter;
        int         fixedDayOfMth;

        switch (agreementInterval.IntervalUnit)
        {
            case SMADayWeekMonthYear::Day :
                prevDate += agreementInterval.Frequency;
                break;

            case SMADayWeekMonthYear::Week :
                prevDate += #daysPerWeek * agreementInterval.Frequency;
                break;

            case SMADayWeekMonthYear::Month :
                fixedDayOfMth = dayofmth(agreementLine.StartDate);
                for (counter = 1; counter <= agreementInterval.Frequency; counter++)
                {
                    prevDate = nextmth(prevDate);

                    prevDate = str2date(strfmt("%1 %2 %3", fixedDayOfMth, mthofyr(prevDate), year(prevDate)), #dateFormatDateMonthYear);
                }
                break;

            case SMADayWeekMonthYear::Year :
                for (counter = 1; counter <= agreementInterval.Frequency; counter++)
                {
                    prevDate = nextyr(prevDate);
                }
                break;
        }

        return prevDate;
    }
]]></Source>
      </Method>
      <Method>
        <Name>setInterval</Name>
        <Source><![CDATA[
        void setInterval()
    {
        agreementInterval = SMAAgreementInterval::find(agreementLine.IntervalId);
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>