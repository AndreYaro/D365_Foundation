<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentPostedTransController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SourceDocumentPostedTransController</c> class is the controller class for the
/// <c>SourceDocumentPostedTrans</c> report.
/// </summary>
public class SourceDocumentPostedTransController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        SourceDocumentPostedTransContract sourceDocumentPostedTransContract = this.parmReportContract().parmRdpContract() as SourceDocumentPostedTransContract;

        FiscalCalendarRecId       fiscalCalendarRecId = Ledger::fiscalCalendar();
        date                      currentDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        AdvancedLedgerEntryHeader advancedLedgerEntryHeader;

        #define.SourceRelationType('Advanced ledger entry source document')

        if (args
            && args.caller() is Originaldocuments
            && args.dataset() == tableNum(AdvancedLedgerEntryHeader))
        {
            //
            // Set specific parameters because that is how we force it to print a specific document.
            // Don't load the last values because they could overwrite the parameter values we set
            // because it also controls saving the last values and that is not correct for the values we set
            //
            advancedLedgerEntryHeader = args.record() as AdvancedLedgerEntryHeader;
            sourceDocumentPostedTransContract.parmFromDate(advancedLedgerEntryHeader.AccountingDate);
            sourceDocumentPostedTransContract.parmToDate(advancedLedgerEntryHeader.AccountingDate);
            sourceDocumentPostedTransContract.parmDocumentNumber(advancedLedgerEntryHeader.TransactionNumber);
            this.parmLoadFromSysLastValue(false);
        }
        else
        {
            // Provide a default date because the last value is empty for Date and Source document type controls.
            if (!sourceDocumentPostedTransContract.parmFromDate())
            {
                sourceDocumentPostedTransContract.parmFromDate(FiscalCalendars::findFirstDayofYear(fiscalCalendarRecId, currentDate));
            }

            if (!sourceDocumentPostedTransContract.parmToDate())
            {
                sourceDocumentPostedTransContract.parmToDate(FiscalCalendars::findLastDayofYear(fiscalCalendarRecId, currentDate));
            }
        }

        if (!sourceDocumentPostedTransContract.parmSourceDocumentType())
        {
            sourceDocumentPostedTransContract.parmSourceDocumentType(#SourceRelationType);
            sourceDocumentPostedTransContract.parmSourceDocumentRelationType(tableNum(AdvancedLedgerEntryHeader));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SourceDocumentPostedTransController controller = new SourceDocumentPostedTransController();

        controller.parmReportName(ssrsReportStr(SourceDocumentPostedTrans, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>