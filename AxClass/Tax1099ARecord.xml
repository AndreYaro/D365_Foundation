<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099ARecord</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Identifies a single payer in the electronic 1099 form, can have multiple child B-Records but must be matched with one C-Record
/// </summary>
public class Tax1099ARecord extends Tax1099ElectronicBodyRecord
{
    protected const Tax1099ERecordType recordType_A = 'A'; /* Payer */

    CompanyInfo companyInfo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a Tax1099ARecord from given information
    /// </summary>
    /// <param name = "_companyInfo">The payer's company info</param>
    /// <param name = "_currentType">The current type of 1099 being produced</param>
    /// <returns>A Tax1099ARecord</returns>
    public static Tax1099ARecord construct(CompanyInfo _companyInfo, Tax1099Type _currentType)
    {
        return new Tax1099ARecord(_companyInfo, _currentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(CompanyInfo _companyInfo, Tax1099Type _currentType)
    {
        super(_currentType);
        companyInfo = _companyInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the A-Record for use in electronic 1099 file
    /// </summary>
    /// <param name = "_realSequenceNumber">The line in which this record will appear in the file</param>
    /// <param name = "_calendarYear">The calendar year to which this file will belong</param>
    /// <param name = "_isCombinedFiling">Whether combined State/Federal filing is to be used for this file</param>
    /// <param name = "_localIRSPayerRec">Table buffer containing transaction information (Optional argument)</param>
    /// <returns>A Tax1099ERecord embodying a formatted, 750 character string</returns>
    public Tax1099ERecord generateRecord(real _realSequenceNumber, Tax1099CalendarYear _calendarYear, boolean _isCombinedFiling, Tax1099IRSPayerRec _localIRSPayerRec = null)
    {
        // Payer "A" Record
        // Identifies the Payer (the institution or person making payments) the type of document being reported, and
        // other miscellaneous information.

        this.fillOutputRecord();

        // Record Type: Required. Enter A. Field Position: 1
        this.strInsert(recordType_A, 1);

        // Payment Year: Required. Enter 2004. Field Position: 2-5
        this.strInsert(_calendarYear, 2);

        // Combined Federal/State Filer: Field Position: 6
        if (_isCombinedFiling)
        {
            this.strInsert('1', 6);
        }

        // Blank. Field Position: 7-11

        // Tranmsitter's TIN: Required. Field Position: 12-20
        this.strInsert(this.formatNumericOnly(companyInfo.Tax1099RegNum), 12);

        // Payer Name Control: Field Position: 21-24
        this.strInsert(companyInfo.NameControl, 21);

        // Last Filing Indicator: Field Position: 25
        if (companyInfo.LastFilingIndicator == NoYes::Yes)
        {
            this.strInsert('1', 25);
        }

        // Type of Return: Required. Field Position: 26-27
        // returnType is set in the calling code in Run
        this.strInsert(Tax1099Base::getReturnTypeFromTax1099Type(currentTax1099Type), 26);

        // Amount Codes: Required. Field Position: 28-45
        Tax1099IForm tax1099Form = Tax1099Base::createTax1099IForm(currentTax1099Type);
        var amountCodes = tax1099Form.fillAmountCodes(_localIRSPayerRec);

        this.strInsert(amountCodes, 28);

        // Blank Field Position: 46-51

        // Foreign Entitiy Indicator. Field Position: 52
        if (companyInfo.ForeignEntityIndicator == NoYes::Yes)
        {
            this.strInsert('1', 52);
        }

        // First Payer Name Line. Field Position: 53-92
        this.strInsert(companyInfo.name(), 53);

        // Second Payer Name Line. Field Position: 93-132
        // Blank as we do not allow printing with a transfer agent

        // Transfer Agent Indicator. Field Position: 133
        this.strInsert('0', 133);

        LogisticsPostalAddress postalAddress = companyInfo.postalAddress();

        // Payer Shipping Address. Field Position: 134-173
        this.strInsert(this.formatStreet(postalAddress.Street), 134);

        // Payer City. Field Position: 174-213
        this.strInsert(postalAddress.City, 174);

        // Payer State. Field Position: 214-215
        this.strInsert(postalAddress.State, 214);

        // Payer Zip Code. Field Position: 216-224
        this.strInsert(this.formatNumericOnly(postalAddress.ZipCode), 216);

        // Payer Number & Extension. Field Position: 225-239
        str tmpPhoneAndExt = this.formatNumericOnly(companyInfo.phone() + companyInfo.phoneLocal());
        this.strInsert(subStr(tmpPhoneAndExt, 1, 15), 225);

        // Blank. Field Position: 240-499

        // Record Sequence Number. Field Position: 500-507
        this.strInsert(num2Str0(_realSequenceNumber, 8, 0, 0, 0), 500);

        // Blank. Field Position: 508-748
        // Blank. Field Position: 749-750 - (CR/LF)

        return output;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>