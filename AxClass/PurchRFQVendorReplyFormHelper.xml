<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQVendorReplyFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQVendorReplyFormHelper</c> is a base helper class for the vendor bidding related forms.
/// </summary>
internal abstract class PurchRFQVendorReplyFormHelper
{
    protected FormRun formRun;
    protected FormGroupControl requestedLineValues;
    protected FormGroupControl replyLineValues;
    protected FormFunctionButtonControl purchRFQReplyStartBid;
    protected FormFunctionButtonControl purchRFQReplyDecline;
    protected FormFunctionButtonControl purchRFQReplyRecall;
    protected FormFunctionButtonControl purchRFQReplyReset;
    protected FormFunctionButtonControl purchRFQReplyLineReset;
    protected FormFunctionButtonControl purchRFQLineAddAlternate;
    protected FormFunctionButtonControl purchRFQLineRemoveAlternate;
    protected FormFunctionButtonControl purchRFQReplySend;
    protected FormFunctionButtonControl purchRFQReplyEncryptionAuditLog;
    protected FormFunctionButtonControl purchRFQVendQuestionAnswer;
    protected FormButtonControl completeQuestionnaire;
    protected FormDateControl purchRFQReplyTable_ValidityDateStart;
    protected FormDateControl purchRFQReplyTable_ValidityDateEnd;
    protected FormRealControl lineDetails_PdsCWMain_PdsCWQty;
    protected FormStringControl lineDetails_PdsCWMain_pdsCWUnitId;
    protected FormRealControl lineDetails_PurchRFQReplyLine_PdsCWQty;
    protected FormStringControl lineDetails_PurchRFQReplyLine_pdsCWUnitId;
    protected FormStringControl inventDistinctProductExpanded_DisplayProductNumber;
    protected FormGroupControl replyPayments;
    protected FormGroupControl replyDeliveryDetails;
    protected FormGroupControl replyValidity;
    protected FormGroupControl replyAmountsGroup;
    protected FormGroupControl replyDetailsGroup;
    protected FormGroupControl replyLineLeadTime;
    protected FormGroupControl replyLineValid;

    protected boolean isEditAllowed;

    #SysSystemDefinedButtons

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates a new instance of the class
    /// </summary>
    [Wrappable(false)]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes formRun to the caller form and other form controls on the form.
    /// Also calls methods required for opening the form initially.
    /// </summary>
    /// <param name = "_formRun"> A variable pointing to the calling form </param>
    /// <param name = "_purchRFQReplyTable"> <c>PurchRFQReplyTable</c> table record </param>
    /// <param name = "_purchRFQCaseTable"> <c>PurchRFQCaseTable</c> table record </param>
    /// <param name = "_purchRFQTable"> <c>PurchRFQTable</c> table record </param>
    /// <param name = "_purchRFQReplyTable_ds"> <c>PurchRFQReplyTable</c> table form datasource </param>
    /// <param name = "_purchRFQReplyLine_ds"> <c>PurchRFQReplyLine</c> table form datasource </param>
    [Hookable(false), Wrappable(false)]
    internal void init(
        FormRun _formRun,
        PurchRFQReplyTable _purchRFQReplyTable,
        PurchRFQCaseTable _purchRFQCaseTable,
        PurchRFQTable _purchRFQTable,
        FormDataSource _purchRFQReplyTable_ds,
        FormDataSource _purchRFQReplyLine_ds)
    {
        this.setFormRun(_formRun);
        this.initControls();
        this.hideAttachmentButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the formRun variable to the calling form
    /// </summary>
    /// <param name = "_formRun"> Form calling this class </param>
    [Hookable(false), Wrappable(false)]
    protected void setFormRun(FormRun _formRun)
    {
        formRun = _formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form control variables to the form controls of the calling form 
    /// </summary>
    [Hookable(false), Wrappable(false)]
    protected void initControls()
    {
        requestedLineValues = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, RequestedLineValues))) as FormGroupControl;
        replyLineValues = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, ReplyLineValues))) as FormGroupControl;
        purchRFQReplyStartBid = formRun.design().controlName(formControlStr(PurchRFQVendReply, PurchRFQReplyStartBid)) as FormFunctionButtonControl;
        purchRFQReplyDecline = formRun.design().controlName(formControlStr(PurchRFQVendReply, PurchRFQReplyDecline)) as FormFunctionButtonControl;
        purchRFQReplyRecall = formRun.design().controlName(formControlStr(PurchRFQVendReply, PurchRFQReplyRecall)) as FormFunctionButtonControl;
        purchRFQReplyReset = formRun.design().controlName(formControlStr(PurchRFQVendReply, PurchRFQReplyReset)) as FormFunctionButtonControl;
        purchRFQReplyLineReset = formRun.design().controlName(formControlStr(PurchRFQVendReply, PurchRFQReplyLineReset)) as FormFunctionButtonControl;
        purchRFQLineAddAlternate = formRun.design().controlName(formControlStr(PurchRFQVendReply, PurchRFQLineAddAlternate)) as FormFunctionButtonControl;
        purchRFQLineRemoveAlternate = formRun.design().controlName(formControlStr(PurchRFQVendReply, PurchRFQLineRemoveAlternate)) as FormFunctionButtonControl;
        purchRFQReplySend = formRun.design().controlName(formControlStr(PurchRFQVendReply, PurchRFQReplySend)) as FormFunctionButtonControl;
        purchRFQReplyEncryptionAuditLog = formRun.design().controlName(formControlStr(PurchRFQVendReply, PurchRFQReplyEncryptionAuditLog)) as FormFunctionButtonControl;
        purchRFQVendQuestionAnswer = formRun.design().controlName(formControlStr(PurchRFQVendReply, purchRFQVendQuestionAnswer)) as FormFunctionButtonControl;
        completeQuestionnaire = formRun.design().controlName(formControlStr(PurchRFQVendReply, CompleteQuestionnaire)) as FormButtonControl;
        purchRFQReplyTable_ValidityDateStart = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, PurchRFQReplyTable_ValidityDateStart))) as FormDateControl;
        purchRFQReplyTable_ValidityDateEnd = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, PurchRFQReplyTable_ValidityDateEnd))) as FormDateControl;
        lineDetails_PdsCWMain_PdsCWQty = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, LineDetails_PdsCWMain_PdsCWQty))) as FormRealControl;
        lineDetails_PdsCWMain_pdsCWUnitId = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, LineDetails_PdsCWMain_pdsCWUnitId))) as FormStringControl;
        lineDetails_PurchRFQReplyLine_PdsCWQty = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, LineDetails_PurchRFQReplyLine_PdsCWQty))) as FormRealControl;
        lineDetails_PurchRFQReplyLine_pdsCWUnitId = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, LineDetails_PurchRFQReplyLine_pdsCWUnitId))) as FormStringControl;
        inventDistinctProductExpanded_DisplayProductNumber = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, InventDistinctProductExpanded_DisplayProductNumber))) as FormStringControl;
        replyPayments = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, ReplyPayments))) as FormGroupControl;
        replyDeliveryDetails = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, ReplyDeliveryDetails))) as FormGroupControl;
        replyValidity = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, ReplyValidity))) as FormGroupControl;
        replyAmountsGroup = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, ReplyAmountsGroup))) as FormGroupControl;
        replyDetailsGroup = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, ReplyDetailsGroup))) as FormGroupControl;
        replyLineLeadTime = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, ReplyLineLeadTime))) as FormGroupControl;
        replyLineValid = formRun.control(formRun.controlId(formControlStr(PurchRFQVendReply, ReplyLineValid))) as FormGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideAttachmentButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the system defined attachment button on the form
    /// </summary>
    [Hookable(false), Wrappable(false)]
    internal void hideAttachmentButton()
    {
        FormCommandButtonControl attachButton = formRun.control(formRun.controlId(#SystemDefinedAttachButton)) as FormCommandButtonControl;

        if (attachButton)
        {
            attachButton.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showHideEditButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the system defined edit button on the form
    /// </summary>
    /// <param name = "_isVisible"> boolean variable to set the button to visible or not </param>
    [Hookable(false), Wrappable(false)]
    internal void showHideEditButton(boolean _isVisible)
    {
        FormCommandButtonControl editButton = formRun.control(formRun.controlId(#SystemDefinedViewEditButton)) as FormCommandButtonControl;

        if (editButton)
        {
            editButton.visible(_isVisible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showHideSaveButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the system defined save button on the form
    /// </summary>
    /// <param name = "_isVisible"> boolean variable to set the button to visible or not </param>
    [Hookable(false), Wrappable(false)]
    internal void showHideSaveButton(boolean _isVisible)
    {
        FormCommandButtonControl saveButton = formRun.control(formRun.controlId(#SystemDefinedSaveButton)) as FormCommandButtonControl;

        if (saveButton)
        {
            saveButton.visible(_isVisible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActionPaneButtonsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visible property for the buttons on the action pane of the form
    /// </summary>
    /// <param name = "_purchRFQTable"> <c>PurchRFQTable</c> table record </param>
    /// <param name = "_purchRFQCaseTable"> <c>PurchRFQCaseTable</c> table record </param>
    /// <param name = "_purchRFQReplyTable"> <c>PurchRFQReplyTable</c> table record </param>
    [Hookable(false), Wrappable(false)]
    internal void setActionPaneButtonsVisibility(PurchRFQTable _purchRFQTable, PurchRFQCaseTable _purchRFQCaseTable, PurchRFQReplyTable _purchRFQReplyTable)
    {
        boolean isRFQExpired = _purchRFQCaseTable.isRFQExpiredForCurrentUser();
       

        PurchRFQReplyDecline.visible((_purchRFQReplyTable.ReplyProgressStatus == PurchRFQReplyProgressStatus::NotStarted
                                         || _purchRFQReplyTable.ReplyProgressStatus == PurchRFQReplyProgressStatus::VendorEditing
                                         || _purchRFQReplyTable.isProcurementAgentEditing())
                                     && !isRFQExpired
                                     && _purchRFQTable.StatusHigh < PurchRFQStatus::Accepted);

        PurchRFQReplyRecall.visible(_purchRFQReplyTable.ReplyProgressStatus == PurchRFQReplyProgressStatus::SubmittedByVendor
                                    && _purchRFQTable.StatusHigh == PurchRFQStatus::Received
                                    && !isRFQExpired
                                    && _purchRFQTable.IsBidInProgress);

        boolean isRFQReplyEditAllowed = _purchRFQTable.IsBidInProgress
                                        && !isRFQExpired
                                        && _purchRFQReplyTable.isEditAllowed();

        this.showHideEditButton(isRFQReplyEditAllowed && formRun.viewEditModeHelper().isInViewMode());
        this.showHideSaveButton(isRFQReplyEditAllowed && formRun.viewEditModeHelper().isInEditMode());
        PurchRFQReplyReset.visible(isRFQReplyEditAllowed);
        PurchRFQReplyLineReset.visible(isRFQReplyEditAllowed);
        PurchRFQLineAddAlternate.visible(isRFQReplyEditAllowed && _purchRFQCaseTable.AllowAlternates);
        PurchRFQLineRemoveAlternate.visible(isRFQReplyEditAllowed && _purchRFQCaseTable.AllowAlternates);
        PurchRFQReplySend.visible(isRFQReplyEditAllowed);
        CompleteQuestionnaire.visible(isRFQReplyEditAllowed);
        purchRFQVendQuestionAnswer.visible(_purchRFQCaseTable.IsVendorQuestionEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsEditability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allowEdit property for the reply table fields of the form
    /// </summary>
    /// <param name = "_purchRFQTable"> <c>PurchRFQTable</c> table record </param>
    /// <param name = "_purchRFQReplyTable"> <c>PurchRFQReplyTable</c> table record </param>
    /// <param name = "_purchRFQReplyTable_ds"> <c>PurchRFQReplyTable</c> table form datasource </param>
    [Hookable(false), Wrappable(false)]
    internal void setFieldsEditability(PurchRFQTable _purchRFQTable, PurchRFQReplyTable _purchRFQReplyTable, FormDataSource _purchRFQReplyTable_ds)
    {
        isEditAllowed = _purchRFQTable.IsBidInProgress && _purchRFQReplyTable.isEditAllowed();
         
        _purchRFQReplyTable_ds.allowEdit(isEditAllowed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visible property for the reply table fields on the form
    /// </summary>
    /// <param name = "_purchRFQTable"> <c>PurchRFQTable</c> table record </param>
    /// <param name = "_purchRFQReplyTable_ds"> <c>PurchRFQReplyTable</c> table form datasource </param>
    [Hookable(false), Wrappable(false)]
    internal void setFieldsVisibility(PurchRFQTable _purchRFQTable, FormDataSource _purchRFQReplyTable_ds)
    {
        boolean isPurchAgreementType = _purchRFQTable.RFQType == PurchRFQType::PurchAgreement;
        PurchRFQReplyTable_ValidityDateStart.visible(isPurchAgreementType);
        PurchRFQReplyTable_ValidityDateEnd.visible(isPurchAgreementType);
          
        _purchRFQReplyTable_ds.object(fieldNum(PurchRFQReplyTable, ValidityDateStart)).mandatory(isPurchAgreementType);
        _purchRFQReplyTable_ds.object(fieldNum(PurchRFQReplyTable, ValidityDateEnd)).mandatory(isPurchAgreementType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineFieldsEditability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visible property for the reply line fields on the form
    /// </summary>
    /// <param name = "_purchRFQLine"> <c>PurchRFQLine</c> table record </param>
    /// <param name = "_purchRFQReplyLine_ds"> <c>PurchRFQReplyLine</c> table form datasource </param>
    /// <param name = "_purchRFQLine_ds"> <c>PurchRFQLine</c> table form datasource </param>
    [Wrappable(false)]
    internal abstract void setLineFieldsEditability(PurchRFQLine _purchRFQLine, FormDataSource _purchRFQReplyLine_ds, FormDataSource _purchRFQLine_ds)
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the buttons on the action pane tab for the reply lines of the form
    /// </summary>
    /// <param name = "_purchRFQLine"> <c>PurchRFQLine</c> table record </param>
    [Hookable(false), Wrappable(false)]
    internal void enableDisableLineButtons(PurchRFQLine _purchRFQLine)
    {
        purchRFQLineAddAlternate.enabled(_purchRFQLine.addAlternateAllowed());
        purchRFQLineRemoveAlternate.enabled(_purchRFQLine.IsAlternate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>navigateBackToList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the current form and navigates back to the previous form that was open
    /// </summary>
    /// <param name = "_record"> The current record open on the form </param>
    [Wrappable(false)]
    internal abstract void navigateBackToList(Common _record)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatchWeightVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the quantity and unit fields for reply lines in line details on the form
    /// </summary>
    /// <param name = "_purchRFQLine"></param>
    [Hookable(false), Wrappable(false)]
    internal void setCatchWeightVisibility(PurchRFQLine _purchRFQLine)
    {
        boolean isCatchWeight = PdsGlobal::pdsIsCWItem(_purchRFQLine.ItemId);

        lineDetails_PdsCWMain_PdsCWQty.visible(isCatchWeight);
        lineDetails_PdsCWMain_pdsCWUnitId.visible(isCatchWeight);
        lineDetails_PurchRFQReplyLine_PdsCWQty.visible(isCatchWeight);
        lineDetails_PurchRFQReplyLine_pdsCWUnitId.visible(isCatchWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAlternateClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when the add alternate line button is clicked
    /// </summary>
    /// <param name = "_purchRFQLine_ds"> The <c>PurchRFQLine</c> table form datasource </param>
    /// <param name = "_purchRFQLine"> The <c>PurchRFQLine</c> table record </param>
    [Hookable(false), Wrappable(false)]
    internal void addAlternateClicked(FormDataSource _purchRFQLine_ds, PurchRFQLine _purchRFQLine)
    {
        _purchRFQLine_ds.positionToRecord(_purchRFQLine.alternateLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewQuestionnaireAnswersClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when the view questionnaire answers button on the form is clicked
    /// </summary>
    /// <param name = "_purchRFQTableKMCollection"> The <c>PurchRFQTableKMCollection</c> table record </param>
    /// <param name = "_purchRFQTable"> The <c>PurchRFQTable</c> table record </param>
    [Hookable(false), Wrappable(false)]
    internal void viewQuestionnaireAnswersClicked(PurchRFQTableKMCollection _purchRFQTableKMCollection, PurchRFQTable _purchRFQTable)
    {
        if (_purchRFQTableKMCollection.kmCollectionId)
        {
            KMVirtualNetworkAnswerTable kmVirtualNetworkAnswerTable = _purchRFQTable.kmVirtualNetworkAnswerTable(_purchRFQTableKMCollection.kmCollectionId);

            if (kmVirtualNetworkAnswerTable)
            {
                Args args = new Args();
    
                args.record(kmVirtualNetworkAnswerTable);
    
                new MenuFunction(menuitemOutputStr(PurchRFQReplyViewQuestionnaireAnswers), MenuItemType::Output).run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeQuestionnaireClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when the complete questionnaire button on the form is clicked
    /// </summary>
    /// <param name = "_purchRFQTableKMCollection"> The <c>PurchRFQTableKMCollection</c> table record </param>
    [Hookable(false), Wrappable(false)]
    internal void completeQuestionnaireClicked(PurchRFQTableKMCollection _purchRFQTableKMCollection)
    {
        KmQuestionnaireRun_Win32_PurchRFQ kmQuestionnaireRun = new KmQuestionnaireRun_Win32_PurchRFQ();
            
        kmQuestionnaireRun.setCallingReferences(_purchRFQTableKMCollection.TableId, _purchRFQTableKMCollection.RecId);
        kmQuestionnaireRun.setPurchRFQCallerDataSource(_purchRFQTableKMCollection);
    
        if (kmQuestionnaireRun.set(KMQuestionnaireRunMode::PurchRFQ, _purchRFQTableKMCollection.kmCollectionId, DirPersonUser::current().PersonParty))
        {
            kmQuestionnaireRun.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>