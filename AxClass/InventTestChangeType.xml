<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTestChangeType</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventTestChangeType extends RunBase
{
    DialogRunbase           dialog;

    InventTestId            inventTestId;
    InventTestType          inventTestType;
    UnitOfMeasureSymbol     testUnitId;
    InventTestInstrumentId  inventTestInstrumentId;

    DialogField             fieldInventTestType;
    DialogField             fieldInventTestUnitId;

    #define.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        inventTestType,
        testUnitId,
        inventTestId,
        InventTestInstrumentId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        fieldInventTestType = dialog.addField(enumStr(InventTestType),"@SYS113733", "@SYS113736");
        fieldInventTestUnitId = dialog.addFieldValue(extendedTypeStr(UnitOfMeasureSymbol), testUnitId, fieldPName(InventTestTable, TestUnitId));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements control method overriding on the dialog.
    /// </summary>
    /// <param name="_dialog">
    ///    The dialog instance used by the class.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);

        this.dialogUpdateUnitField();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdateUnitField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the unit field with required values and sets the <c>allowEdit</c> property for the control.
    /// </summary>
    protected void dialogUpdateUnitField()
    {
        if (fieldInventTestUnitId && fieldInventTestType)
        {
            if (!InventTestTable::testTypeCanHaveUnit(fieldInventTestType.value()))
            {
                fieldInventTestUnitId.value('');
            }
            else if (inventTestInstrumentId)
            {
                fieldInventTestUnitId.value(InventTestInstrument::find(inventTestInstrumentId).Unit);
            }
            fieldInventTestUnitId.allowEdit(InventTestTable::userCanChangeUnit(fieldInventTestType.value(), inventTestInstrumentId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld1_1_selectionChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the unit field when the test type is changed.
    /// </summary>
    /// <returns>
    ///    The value returned by the <c>selectionChange</c> method of the calling control.
    /// </returns>
    public boolean fld1_1_selectionChange()
    {
        Object      control = dialog.formRun().controlCallingMethod();
        int         ret     = control.selectionChange();

        this.dialogUpdateUnitField();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        this.parmInventTestType(fieldInventTestType.value());
        this.parmTestUnitId(fieldInventTestUnitId.value());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTestId</Name>
				<Source><![CDATA[
    public InventTestId parmInventTestId(InventTestId _inventTestId = inventTestId)
    {
        inventTestId = _inventTestId;

        return inventTestId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTestInstrumentId</Name>
				<Source><![CDATA[
    public InventTestInstrumentId parmInventTestInstrumentId(InventTestInstrumentId _inventTestInstrumentId = inventTestInstrumentId)
    {
        inventTestInstrumentId = _inventTestInstrumentId;

        return inventTestInstrumentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTestType</Name>
				<Source><![CDATA[
    public InventTestType parmInventTestType(InventTestType _inventTestType = inventTestType)
    {
        inventTestType = _inventTestType;

        return inventTestType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTestUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmTestUnitId(UnitOfMeasureSymbol _testUnitId = testUnitId)
    {
        testUnitId = _testUnitId;

        return testUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        try
        {
            ttsbegin;

            this.process();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that integer tests don't have decimals.
    /// </summary>
    /// <param name="calledFrom">
    ///    This parameter is not used in this class. See the base class, <c>RunBase</c>, for a description.
    /// </param>
    /// <returns>
    ///    true if the validation succeeded; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        InventTestTable inventTestTable = InventTestTable::find(inventTestId);
        this.initInventTestTableFromDlg(inventTestTable);
        ret = inventTestTable.validateWrite() && ret;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTestChangeType construct()
    {
        return new InventTestChangeType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS113734";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (!args || !args.dataset() || args.dataset() != tableNum(InventTestTable))
        {
            throw error(strFmt("@SYS113735", classStr(InventTestChangeType), tableStr(InventTestTable)));
        }

        InventTestTable inventTestTable = args.record();
        InventTestChangeType inventTestChangeType = InventTestChangeType::construct();
        inventTestChangeType.setupInventTestChangeType(inventTestChangeType, inventTestTable.TestId, inventTestTable.TestInstrumentId);

        if (inventTestChangeType.prompt())
        {
            inventTestChangeType.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    protected void process()
    {
        if (this.shouldUpdateInventTestTable())
        {
            if (this.updateInventTestTable() < 1)
            {
                throw error("@SYS18447");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateInventTestTable</Name>
				<Source><![CDATA[
    protected boolean shouldUpdateInventTestTable()
    {
        return InventTestGroupMember::checkTestUsed(inventTestId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTestTable</Name>
				<Source><![CDATA[
    [Replaceable]
    protected int updateInventTestTable()
    {
        InventTestTable inventTestTable;

        update_recordset inventTestTable
                    setting TestType    = this.parmInventTestType(),
                            TestUnitId  = this.parmTestUnitId()
                    where inventTestTable.TestId == inventTestId;

        return inventTestTable.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTestTableFromDlg</Name>
				<Source><![CDATA[
    protected void initInventTestTableFromDlg(InventTestTable _inventTestTable)
    {
        _inventTestTable.TestType = inventTestType;
        _inventTestTable.TestUnitId = testUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupInventTestChangeType</Name>
				<Source><![CDATA[
    private void setupInventTestChangeType(InventTestChangeType _inventTestChangeType, InventTestId _inventTestId, InventTestInstrumentId _inventTestInstrumentId)
    {
        _inventTestChangeType.getLast();
        _inventTestChangeType.parmInventTestId(_inventTestId);
        _inventTestChangeType.parmInventTestInstrumentId(_inventTestInstrumentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>