<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetRetirementResultAggregator_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Aggregator for asset retirement result explorer.
/// </summary>
class AssetRetirementResultAggregator_JP
{
    AssetRetirementCostResultPeriodTmp_JP   resultPeriod;
    AssetRetirementCostResultTmp_JP         result;
    RefRecId                                documentEntryRecId;

    AssetDepBookCalendarScheduleManager_JP  calendarScheduleManager;
    AssetDepBookTableMap_JP                 assetBookTableMap;
    AssetDocumentEntry_JP                   assetDocumentEntry;
    AssetRetirementObligation_JP            retirementObligation;

    Map                                     accumulateAmountMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePresentValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculation of the ARO present value.
    /// </summary>
    /// <returns>
    /// An array of ARO posting amount. The first posting amount is taken as the acquisition amount.
    /// </returns>
    protected Array calculatePresentValue()
    {
        return AssetRetirementPresentValueProvider_JP::calculate(documentEntryRecId, dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes and generate the result.
    /// </summary>
    protected void doProcess()
    {
        AssetDocumentPresentValueResult_JP      resultLocal;
        int                                     i;
        Array                                   calculationResultArray;
        AssetRetirementSumCalcResultTmp_JP      transactionSumResult;

        calculationResultArray = this.calculatePresentValue();
        //beginging
        this.processBegining(calculationResultArray);
        //from second element in the array, each of which is period ending
        for (i = 2; i <= calculationResultArray.lastIndex(); i++)
        {
            resultLocal = calculationResultArray.value(i);

            if (this.insertNewPeriod(resultLocal, i))
            {
                transactionSumResult = this.getTransactionSumResult(calculationResultArray, i);
                this.insertNewResult(transactionSumResult, i);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the aggregation result.
    /// </summary>
    /// <returns>
    /// The aggregation result.
    /// </returns>
    public AssetRetirementCostResultTmp_JP getResult()
    {
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the period of the aggregation result.
    /// </summary>
    /// <returns>
    /// The period of the aggregation result.
    /// </returns>
    public AssetRetirementCostResultPeriodTmp_JP getResultPeriod()
    {
        return resultPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionSumResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction summary result. For the plan, it is just the plan result.
    /// </summary>
    /// <param name="_calculationResultArray">
    /// The presnt value calculation result array.
    /// </param>
    /// <param name="_idx">
    /// The period index.
    /// </param>
    /// <returns>
    /// The transaction summary result.
    /// </returns>
    protected AssetRetirementSumCalcResultTmp_JP getTransactionSumResult(
        Array   _calculationResultArray,
        int     _idx)
    {
        AssetRetirementSumCalcResultTmp_JP  sumResult;
        AssetDocumentPresentValueResult_JP  resultLocal;

        //consider the first acqusition
        if (_idx == 2)
        {
            resultLocal = _calculationResultArray.value(1);
            sumResult.clear();
            sumResult.Amount = resultLocal.parmAdjustmentAmount();
            sumResult.Type = AssetRetirementObligationResultType_JP::Aquisition;
            sumResult.insert();
        }

        //adjustment
        resultLocal = _calculationResultArray.value(_idx);
        if (resultLocal.parmAdjustmentAmount())
        {
            sumResult.clear();
            sumResult.Amount = resultLocal.parmAdjustmentAmount();
            if (sumResult.Amount > 0)
            {
                sumResult.Type = AssetRetirementObligationResultType_JP::Upward;
            }
            else
            {
                sumResult.Type = AssetRetirementObligationResultType_JP::Downward;
            }
            sumResult.insert();
        }

        //interest
        if (resultLocal.parmInterestAmount())
        {
            sumResult.clear();
            sumResult.Amount = resultLocal.parmInterestAmount();
            sumResult.Type = AssetRetirementObligationResultType_JP::Interest;
            sumResult.insert();
        }

        return sumResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization of aggregator.
    /// </summary>
    protected void initialize()
    {
        int i;
        assetDocumentEntry = AssetDocumentEntry_JP::find(documentEntryRecId);
        assetBookTableMap = AssetDepBookTableMap_JP::find(
            AssetBookType::ValueModel,
            assetDocumentEntry.BookId);
        calendarScheduleManager = new AssetDepBookCalendarScheduleManager_JP(assetBookTableMap);
        retirementObligation = AssetRetirementObligation_JP::findByDocumentEntry(documentEntryRecId);

        accumulateAmountMap = new Map(Types::Enum, Types::Real);
        for (i = 1; i < enumCnt(AssetRetirementObligationResultType_JP); i++)
        {
            accumulateAmountMap.insert(i, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts new period.
    /// </summary>
    /// <param name="_presentValueResult">
    /// The present value result.
    /// </param>
    /// <param name="_idx">
    /// The period index.
    /// </param>
    /// <returns>
    /// True if new period is inserted.
    /// </returns>
    public boolean insertNewPeriod(AssetDocumentPresentValueResult_JP _presentValueResult, int _idx)
    {
        FiscalCalendarYear      fiscalCalendarYear;
        RefRecId                fiscalCalendarRecId;
        boolean                 isNewPeriod;
        int                     quarterNum;

        fiscalCalendarRecId = calendarScheduleManager.getFiscalCalendar(_presentValueResult.parmTransactionDate());
        fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId, _presentValueResult.parmTransactionDate());

        if (fiscalCalendarYear)
        {
            resultPeriod.clear();
            resultPeriod.Index = _idx;
            resultPeriod.Name = fiscalCalendarYear.Name;
            if (retirementObligation.PostingFrequency == AssetRetirementPostingFrequency_JP::Quarterly)
            {
                quarterNum = LedgerFiscalCalendar::findQuarterByDate(fiscalCalendarRecId, _presentValueResult.parmTransactionDate());
                if (quarterNum > 0)
                {
                    resultPeriod.Quarter = quarterNum - 1;
                }
            }
            resultPeriod.insert();
            isNewPeriod = true;
        }

        return isNewPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert new result.
    /// </summary>
    /// <param name="_sumResult">
    /// The transaction sum result.
    /// </param>
    /// <param name="_idx">
    /// The period index.
    /// </param>
    public void insertNewResult(AssetRetirementSumCalcResultTmp_JP _sumResult, int _idx)
    {
        AssetRetirementSumCalcResultTmp_JP sumResultLocal;
        int i;
        AssetRetirementObligationResultType_JP typeLocal;

        sumResultLocal.setTmpData(_sumResult);

        for (i = 1; i < enumCnt(AssetRetirementObligationResultType_JP); i++)
        {
            typeLocal = i;
            if (this.isTypeIncluded(typeLocal))
            {
                select firstOnly sumResultLocal
                    where sumResultLocal.Type == typeLocal;

                result.clear();
                result.Type = typeLocal;
                result.AccumulateYearAmount = accumulateAmountMap.lookup(typeLocal);
                result.CurrentYearAmount = sumResultLocal.Amount;
                result.Index = _idx;
                result.insert();

                accumulateAmountMap.insert(result.Type, accumulateAmountMap.lookup(result.Type) + result.CurrentYearAmount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTypeIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the type is included.
    /// </summary>
    /// <param name="_type">
    /// Transaction type.
    /// </param>
    /// <returns>
    /// True if the type is included; otherwise, false.
    /// </returns>
    protected boolean isTypeIncluded(AssetRetirementObligationResultType_JP _type)
    {
        return _type != AssetRetirementObligationResultType_JP::Depreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00018] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentEntryRecId</Name>
				<Source><![CDATA[
    public RefRecId parmDocumentEntryRecId(RefRecId _documentEntryRecId = documentEntryRecId)
    {
        documentEntryRecId = _documentEntryRecId;

        return documentEntryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBegining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes begining balance.
    /// </summary>
    /// <param name="_calculationResultArray">
    /// The calculation array.
    /// </param>
    protected void processBegining(Array _calculationResultArray)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>AssetRetirementResultAggregator_JP</c>.
    /// </summary>
    /// <param name="_documentEntryRecId">
    /// The document entry record id.
    /// </param>
    /// <param name="_isPosted">
    /// Whether the aggregation is for posted amount.
    /// </param>
    /// <returns>
    /// An instance of <c>AssetRetirementResultAggregator_JP</c>.
    /// </returns>
    public static AssetRetirementResultAggregator_JP construct(RefRecId _documentEntryRecId, boolean _isPosted = false)
    {
        AssetRetirementResultAggregator_JP aggregator;

        if (_isPosted)
        {
            aggregator = new AssetRetirementResultAggregatorPosted_JP();
        }
        else
        {
            aggregator = new AssetRetirementResultAggregator_JP();
        }

        aggregator.parmDocumentEntryRecId(_documentEntryRecId);
        aggregator.initialize();
        return aggregator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the process of calculation.
    /// </summary>
    /// <param name="_documentEntryRecId">
    /// The document entry record id.
    /// </param>
    /// <param name="_isPosted">
    /// Whether the aggregation is for posted amount.
    /// </param>
    /// <returns>
    /// A container containing calculation result.
    /// </returns>
    public static container performProcess(RefRecId _documentEntryRecId, boolean _isPosted = false)
    {
        AssetRetirementResultAggregator_JP      aggregator;
        AssetRetirementCostResultTmp_JP         resultLocal;
        AssetRetirementCostResultPeriodTmp_JP   resultPeriodLocal;
        container                               resultContainer;
        container                               resultPeriodContainer;

        aggregator = AssetRetirementResultAggregator_JP::construct(_documentEntryRecId, _isPosted);
        aggregator.doProcess();

        resultLocal.setTmpData(aggregator.getResult());
        resultPeriodLocal.setTmpData(aggregator.getResultPeriod());

        while select resultLocal
        {
            resultContainer += [resultLocal];
        }

        while select resultPeriodLocal
        {
            resultPeriodContainer += [resultPeriodLocal];
        }

        return [resultPeriodContainer, resultContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the asset retirement result.
    /// </summary>
    /// <param name="_documentEntryRecId">
    /// The document entry recrod id.
    /// </param>
    /// <param name="_isPosted">
    /// Whether to get posted result.
    /// </param>
    /// <param name="_targetResultPeriod">
    /// The target tmp table for the period.
    /// </param>
    /// <param name="_targetResult">
    /// The target tmp table for the result.
    /// </param>
    public static void process(
        RefRecId _documentEntryRecId,
        boolean _isPosted,
        AssetRetirementCostResultPeriodTmp_JP _targetResultPeriod,
        AssetRetirementCostResultTmp_JP _targetResult)
    {
        container resultPeriodContainer;
        container resultContainer;
        AssetRetirementCostResultPeriodTmp_JP   resultPeriodLocal;
        AssetRetirementCostResultTmp_JP         resultLocal;
        int                                     i;
        int                                     length;

        [resultPeriodContainer, resultContainer] = AssetRetirementResultAggregator_JP::performProcess(
            _documentEntryRecId,
            _isPosted);

        length = conLen(resultPeriodContainer);
        for (i = 1; i <= length; i++)
        {
            resultPeriodLocal.data(conPeek(resultPeriodContainer, i));
            resultPeriodLocal.insert();
        }

        length = conLen(resultContainer);
        for (i = 1; i <= length; i++)
        {
            resultLocal.data(conPeek(resultContainer, i));
            resultLocal.insert();
        }

        _targetResultPeriod.setTmpData(resultPeriodLocal);
        _targetResult.setTmpData(resultLocal);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>