<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostManagementInstrumentationBackflushCostingActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CostManagementInstrumentationBackflushCostingActivities
{
    private const str ActivityNamePrefix             = 'BackflushCosting.';

    private const str ClearMaterialIssuesWIP         = '.ClearMaterialIssuesWIP';
    private const str ClearMaterialReceiptsWIP       = '.ClearMaterialReceiptsWIP';
    private const str ClearOutsourcingWIP            = '.ClearOutsourcingWIP';
    private const str PostIndirectCosts              = '.PostIndirectCosts';
    private const str CalcVariances                  = '.CalcVariances';
    private const str EndLedgerVoucher               = '.EndLedgerVoucher';
    private const str UpdateWIPFinal                 = '.UpdateWIPFinal';
    private const str InitLedgerVoucher              = '.InitLedgerVoucher';
    private const str CreateTasks                    = '.CreateTasks';
    private const str CalcNetRealized                = '.CalcNetRealized';
    private const str ClearWIPAccounts               = '.ClearWIPAccounts';
    private const str ExecuteBase                    = 'ExecuteBase';
    
    private const str InventTableRecId               = 'InventTableRecId';
    private const str PlanReferenceRecId             = 'PlanReferenceRecId';
    private const str LeanProductionFlowCostingRecId = 'LeanProductionFlowCostingRecId';
    private const str LeanCostingToDate              = 'LeanCostingToDate';
    private const str PlanDefaultDimensions          = 'PlanDefaultDimensions';
    private const str SplitLedgerVoucherTransactions = 'SplitLedgerVoucherTransactions';
    private const str EnableFullBatchParallelization = 'EnableFullBatchParallelization';
    private const str PostPersistableSupported       = 'IsLedgerPostPersistableSupported';
    private const str InBatch                        = 'IsInBatch';
    private const str Resumed                        = 'IsResumed';
    private const str MultipleOrSingle               = 'MultiOrSingle';

    private CostManagementInstrumentationLogger instrumentationLogger;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(CostManagementInstrumentationLogger _instrumentationLogger)
    {
        instrumentationLogger = _instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static CostManagementInstrumentationBackflushCostingActivities newFromLogger(CostManagementInstrumentationLogger _instrumentationLogger)
    {
        return new CostManagementInstrumentationBackflushCostingActivities(_instrumentationLogger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMaterialIssuesWIP</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext clearMaterialIssuesWIP(
        str                                 _className,
        RecId                               _inventTableRecId,
        ToDate                              _leanCostingToDate,
        RecId                               _planReferenceRecId,
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        DimensionDefault                    _planDefaultDimensions,
        boolean                             _splitLedgerVoucherTransactions = true)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + ClearMaterialIssuesWIP);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';
        
        activityContext.AddCustomProperty(ActivityNamePrefix + InventTableRecId,               int642str(_inventTableRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + LeanCostingToDate,              date2str(_leanCostingToDate, 321, 2, 0, 2, 0, 4, DateFlags::None));
        activityContext.AddCustomProperty(ActivityNamePrefix + PlanReferenceRecId,             int642str(_planReferenceRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + LeanProductionFlowCostingRecId, int642Str(_leanProductionFlowCostingRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + PlanDefaultDimensions,          int642Str(_planDefaultDimensions));
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMaterialReceiptsWIP</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext clearMaterialReceiptsWIP(
        str                                 _className,
        RecId                               _inventTableRecId,
        ToDate                              _leanCostingToDate,
        RecId                               _planReferenceRecId,
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        DimensionDefault                    _planDefaultDimensions,
        boolean                             _splitLedgerVoucherTransactions = true)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + ClearMaterialReceiptsWIP);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';
        
        activityContext.AddCustomProperty(ActivityNamePrefix + InventTableRecId,               int642str(_inventTableRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + LeanCostingToDate,              date2str(_leanCostingToDate, 321, 2, 0, 2, 0, 4, DateFlags::None));
        activityContext.AddCustomProperty(ActivityNamePrefix + PlanReferenceRecId,             int642str(_planReferenceRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + LeanProductionFlowCostingRecId, int642Str(_leanProductionFlowCostingRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + PlanDefaultDimensions,          int642Str(_planDefaultDimensions));
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearOutsourcingWIP</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext clearOutsourcingWIP(
        str                                 _className,
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        boolean                             _splitLedgerVoucherTransactions = true)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + ClearOutsourcingWIP);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';
        
        activityContext.AddCustomProperty(ActivityNamePrefix + LeanProductionFlowCostingRecId, int642str(_leanProductionFlowCostingRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postIndirectCosts</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext postIndirectCosts(
        str                                 _className,
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        boolean                             _splitLedgerVoucherTransactions = false)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + PostIndirectCosts);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';

        activityContext.AddCustomProperty(ActivityNamePrefix + LeanProductionFlowCostingRecId, int642str(_leanProductionFlowCostingRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVariances</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calcVariances(
        str                                 _className,
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        boolean                             _splitLedgerVoucherTransactions = false)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + CalcVariances);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';

        activityContext.AddCustomProperty(ActivityNamePrefix + LeanProductionFlowCostingRecId, int642str(_leanProductionFlowCostingRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endLedgerVoucher</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext endLedgerVoucher(
        str                                 _className,
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        boolean                             _splitLedgerVoucherTransactions = false)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + EndLedgerVoucher);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';

        activityContext.AddCustomProperty(ActivityNamePrefix + LeanProductionFlowCostingRecId, int642str(_leanProductionFlowCostingRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWIPFinal</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateWIPFinal(
        str                                 _className,
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        boolean                             _splitLedgerVoucherTransactions = false)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + UpdateWIPFinal);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';

        activityContext.AddCustomProperty(ActivityNamePrefix + LeanProductionFlowCostingRecId, int642str(_leanProductionFlowCostingRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext initLedgerVoucher(
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        str                                 _className,
        boolean                             _splitLedgerVoucherTransactions = false)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + InitLedgerVoucher);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';

        activityContext.AddCustomProperty(ActivityNamePrefix + LeanProductionFlowCostingRecId, int642str(_leanProductionFlowCostingRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext createTasks(
        str                                 _className,
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        str                                 _taskName,
        boolean                             _splitLedgerVoucherTransactions = true)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + CreateTasks + _taskName);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';

        activityContext.AddCustomProperty(ActivityNamePrefix + LeanProductionFlowCostingRecId, int642str(_leanProductionFlowCostingRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNetRealized</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calcNetRealized(
        str                                 _className,
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        boolean                             _splitLedgerVoucherTransactions = false)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + CalcNetRealized);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';

        activityContext.AddCustomProperty(ActivityNamePrefix + LeanProductionFlowCostingRecId, int642str(_leanProductionFlowCostingRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWIPAccounts</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext clearWIPAccounts(
        str                                 _className,
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        boolean                             _splitLedgerVoucherTransactions = false)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + _className + ClearWIPAccounts);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';

        activityContext.AddCustomProperty(ActivityNamePrefix + LeanProductionFlowCostingRecId, int642str(_leanProductionFlowCostingRecId));
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeBase</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext executeBase(
        boolean _splitLedgerVoucherTransactions,
        boolean _enableFullBatchParallelization,
        boolean _isLedgerPostPersistableSupported,
        boolean _isInBatch,
        boolean _isResumed)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + ExecuteBase);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);
        str splitLedgerVoucherTransactionsStr = _splitLedgerVoucherTransactions ? 'True' : 'False';
        str enableFullBatchParallelizationStr = _enableFullBatchParallelization ? 'True' : 'False';
        str isLedgerPostPersistableSupported = _isLedgerPostPersistableSupported ? 'True' : 'False';
        str isInBatch = _isInBatch ? 'True' : 'False';
        str isResumed = _isResumed ? 'True' : 'False';
        str multiOrSingle = _splitLedgerVoucherTransactions && _isLedgerPostPersistableSupported ? 'Multi' : 'Single';

        activityContext.AddCustomProperty(ActivityNamePrefix + MultipleOrSingle, multiOrSingle);
        activityContext.AddCustomProperty(ActivityNamePrefix + SplitLedgerVoucherTransactions, splitLedgerVoucherTransactionsStr);
        activityContext.AddCustomProperty(ActivityNamePrefix + EnableFullBatchParallelization, enableFullBatchParallelizationStr);
        activityContext.AddCustomProperty(ActivityNamePrefix + PostPersistableSupported, isLedgerPostPersistableSupported);
        activityContext.AddCustomProperty(ActivityNamePrefix + InBatch, isInBatch);
        activityContext.AddCustomProperty(ActivityNamePrefix + Resumed, isResumed);

        return activityContext;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>