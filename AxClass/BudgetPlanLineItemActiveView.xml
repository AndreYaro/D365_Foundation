<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLineItemActiveView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides information and functionality for a <c>BudgetPlanLineActiveView</c> record.
/// </summary>
public class BudgetPlanLineItemActiveView extends BudgetPlanLineItem
{
    boolean                     calledFromForm;
    BudgetPlanLineActiveView    budgetPlanLineActiveView;
    BudgetPlanLineActiveView    originalBudgetPlanLineActiveView;
    const str                   emptyString = '';
    const RecId                 emptyRecId = 0;
    BudgetPlanLayoutRecId       budgetPlanLayoutRecId;
    DimensionHierarchyId        dimensionHierarchyId;
    Level                       dimensionPosition;
    Map                         attributePositions = new Map(Types::Int64, Types::Integer);

    public static readonly FieldId   activeViewLineTransactionCurrencyCodeFieldId = fieldNum(BudgetPlanLineActiveView, TransactionCurrencyCode);
    public static readonly FieldId   activeViewLinePositionFieldId = fieldNum(BudgetPlanLineActiveView, Position);
    public static readonly FieldId   activeViewLineProposedAssetFieldId = fieldNum(BudgetPlanLineActiveView, ProposedAsset);
    public static readonly FieldId   activeViewLineProposedProjectFieldId = fieldNum(BudgetPlanLineActiveView, ProposedProject);
    public static readonly FieldId   activeViewLineAssetIdFieldId = fieldNum(BudgetPlanLineActiveView, AssetId);
    public static readonly FieldId   activeViewLineCommentFieldId = fieldNum(BudgetPlanLineActiveView, Comment);
    public static readonly FieldId   activeViewLineProjectIdFieldId = fieldNum(BudgetPlanLineActiveView, ProjectId);
    public static readonly FieldId   activeViewLineIsRecurringFieldId = fieldNum(BudgetPlanLineActiveView, IsRecurring);
    public static readonly FieldId   activeViewLineIsNewRequestFieldId = fieldNum(BudgetPlanLineActiveView, IsNewRequest);
    public static readonly FieldId   activeViewLineDimensionValuesFieldId1 = fieldNum(BudgetPlanLineActiveView, DimensionValue1);
    public static readonly FieldId   activeViewLineDimensionValuesFieldId2 = fieldNum(BudgetPlanLineActiveView, DimensionValue2);
    public static readonly FieldId   activeViewLineDimensionValuesFieldId3 = fieldNum(BudgetPlanLineActiveView, DimensionValue3);
    public static readonly FieldId   activeViewLineDimensionValuesFieldId4 = fieldNum(BudgetPlanLineActiveView, DimensionValue4);
    public static readonly FieldId   activeViewLineDimensionValuesFieldId5 = fieldNum(BudgetPlanLineActiveView, DimensionValue5);
    public static readonly FieldId   activeViewLineDimensionValuesFieldId6 = fieldNum(BudgetPlanLineActiveView, DimensionValue6);
    public static readonly FieldId   activeViewLineDimensionValuesFieldId7 = fieldNum(BudgetPlanLineActiveView, DimensionValue7);
    public static readonly FieldId   activeViewLineDimensionValuesFieldId8 = fieldNum(BudgetPlanLineActiveView, DimensionValue8);
    public static readonly FieldId   activeViewLineDimensionValuesFieldId9 = fieldNum(BudgetPlanLineActiveView, DimensionValue9);
    public static readonly FieldId   activeViewLineDimensionValuesFieldId10 = fieldNum(BudgetPlanLineActiveView, DimensionValue10);
    public static readonly FieldId   activeViewLineDimensionValuesFieldId11 = fieldNum(BudgetPlanLineActiveView, DimensionValue11);
    public static readonly FieldId   activeViewLineDimensionNameFieldId1 = fieldNum(BudgetPlanLineActiveView, DimensionName1);
    public static readonly FieldId   activeViewLineDimensionNameFieldId2 = fieldNum(BudgetPlanLineActiveView, DimensionName2);
    public static readonly FieldId   activeViewLineDimensionNameFieldId3 = fieldNum(BudgetPlanLineActiveView, DimensionName3);
    public static readonly FieldId   activeViewLineDimensionNameFieldId4 = fieldNum(BudgetPlanLineActiveView, DimensionName4);
    public static readonly FieldId   activeViewLineDimensionNameFieldId5 = fieldNum(BudgetPlanLineActiveView, DimensionName5);
    public static readonly FieldId   activeViewLineDimensionNameFieldId6 = fieldNum(BudgetPlanLineActiveView, DimensionName6);
    public static readonly FieldId   activeViewLineDimensionNameFieldId7 = fieldNum(BudgetPlanLineActiveView, DimensionName7);
    public static readonly FieldId   activeViewLineDimensionNameFieldId8 = fieldNum(BudgetPlanLineActiveView, DimensionName8);
    public static readonly FieldId   activeViewLineDimensionNameFieldId9 = fieldNum(BudgetPlanLineActiveView, DimensionName9);
    public static readonly FieldId   activeViewLineDimensionNameFieldId10 = fieldNum(BudgetPlanLineActiveView, DimensionName10);
    public static readonly FieldId   activeViewLineDimensionNameFieldId11 = fieldNum(BudgetPlanLineActiveView, DimensionName11);
    public static readonly FieldId   activeViewLineBudgetClassFieldId = fieldNum(BudgetPlanLineActiveView, BudgetClass);
    public static readonly FieldId   activeViewLineBudgetPlanHeaderFieldId = fieldNum(BudgetPlanLineActiveView, BudgetPlanHeader);
    public static readonly FieldId   activeViewLineLedgerDimensionFieldId = fieldNum(BudgetPlanLineActiveView, LedgerDimension);
    public static readonly FieldId   activeViewLineLineNumberFieldId = fieldNum(BudgetPlanLineActiveView, LineNumber);
    public static readonly TableName proposedAssetTableStr = tableStr(BudgetPlanProposedAsset);
    public static readonly TableName proposedProjectTableStr = tableStr(BudgetPlanProposedProject);
    public static readonly TableName budgetPlanLineTableStr = tableStr(BudgetPlanLine);
    public static readonly TableName assetTableStr = tableStr(AssetTable);
    public static readonly TableName hcmPositionForecastTableStr = tableStr(HcmPositionForecast);
    public static readonly TableName projTableStr = tableStr(ProjTable);
    public static readonly TableName mainAccountTableStr = tableStr(MainAccount);
    public static readonly FieldName budgetPlanLineLedgerDimension = fieldStr(BudgetPlanLine, LedgerDimension);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBudgetPlanLayoutRecId</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutRecId parmBudgetPlanLayoutRecId(BudgetPlanLayoutRecId _budgetPlanLayoutRecId = budgetPlanLayoutRecId)
    {
        budgetPlanLayoutRecId = _budgetPlanLayoutRecId;

        return budgetPlanLayoutRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the index of a <c>DimensionAttributeRecId</c> record in the <c>DimensionValues</c> array for a <c>BudgetPlanLineActiveView</c> record.
    /// </summary>
    /// <param name = "_dimensionAttribute">
    /// The <c>DimensionAttributeRecId</c> to search for the index position.
    /// </param>
    /// <returns>
    /// The <c>Level</c> value of the index position.
    /// </returns>
    protected Level findDimensionPosition(DimensionAttributeRecId _dimensionAttribute)
    {
        if (!attributePositions.exists(_dimensionAttribute))
        {
            attributePositions.insert(_dimensionAttribute, DimensionHierarchyLevel::findByDimensionHierarchyAndDimAttribute(
                                                                BudgetPlanLayout::find(budgetPlanLayoutRecId).DimensionHierarchy,
                                                                _dimensionAttribute).Level);
        }

        return attributePositions.lookup(_dimensionAttribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns default values to <c>BudgetPlanLineActiveView</c> fields.
    /// </summary>
    public void defaultRow()
    {
        this.defaultLineNumber();
        this.setSourceDataAreaId();
        this.defaultCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the <c>LineNumber</c> value on the <c>BudgetPlanLineActiveView</c> table record.
    /// </summary>
    protected void defaultLineNumber()
    {
        budgetPlanLineActiveView.LineNumber = budgetPlanLineActiveView.LineNumber == 0 ? budgetPlanLineActiveView.getNextLineNum() : budgetPlanLineActiveView.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsRecurring</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the is recurring field of the <c>BudgetPlanLineActiveView</c> record.
    /// </summary>
    protected void defaultIsRecurring()
    {
        budgetPlanLineActiveView.IsRecurring = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>TransactionCurrencyCode</c> field of the <c>BudgetPlanLineActiveView</c> record.
    /// </summary>
    protected void defaultCurrency()
    {
        if (!budgetPlanLineActiveView.TransactionCurrencyCode)
        {
            BudgetPlanHeader header = BudgetPlanHeader::find(budgetPlanLineActiveView.BudgetPlanHeader);
            if (BudgetPlanLayoutHelper::isCurrencyInLayout(header.Layout))
            {
                budgetPlanLineActiveView.TransactionCurrencyCode = header.Currency;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies or sets additional field values based on the modified field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case activeViewLineAssetIdFieldId:
                this.modifiedAssetId();
                break;
            case activeViewLineProjectIdFieldId:
                this.modifiedProjectId();
                break;
            case activeViewLineDimensionValuesFieldId1:
                BudgetPlanActiveView::setDimensionNameValues(budgetPlanLineActiveView, 1);
                break;
            case activeViewLineDimensionValuesFieldId2:
                BudgetPlanActiveView::setDimensionNameValues(budgetPlanLineActiveView, 2);
                break;
            case activeViewLineDimensionValuesFieldId3:
                BudgetPlanActiveView::setDimensionNameValues(budgetPlanLineActiveView, 3);
                break;
            case activeViewLineDimensionValuesFieldId4:
                BudgetPlanActiveView::setDimensionNameValues(budgetPlanLineActiveView, 4);
                break;
            case activeViewLineDimensionValuesFieldId5:
                BudgetPlanActiveView::setDimensionNameValues(budgetPlanLineActiveView, 5);
                break;
            case activeViewLineDimensionValuesFieldId6:
                BudgetPlanActiveView::setDimensionNameValues(budgetPlanLineActiveView, 6);
                break;
            case activeViewLineDimensionValuesFieldId7:
                BudgetPlanActiveView::setDimensionNameValues(budgetPlanLineActiveView, 7);
                break;
            case activeViewLineDimensionValuesFieldId8:
                BudgetPlanActiveView::setDimensionNameValues(budgetPlanLineActiveView, 8);
                break;
            case activeViewLineDimensionValuesFieldId9:
                BudgetPlanActiveView::setDimensionNameValues(budgetPlanLineActiveView, 9);
                break;
            case activeViewLineDimensionValuesFieldId10:
                BudgetPlanActiveView::setDimensionNameValues(budgetPlanLineActiveView, 10);
                break;
            case activeViewLineDimensionValuesFieldId11:
                BudgetPlanActiveView::setDimensionNameValues(budgetPlanLineActiveView, 11);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>SourceDataAreaId</c> field of the <c>BudgetPlanLineActiveView</c> table record.
    /// </summary>
    public void setSourceDataAreaId()
    {
        if (budgetPlanLineActiveView.AssetId || budgetPlanLineActiveView.ProjectId)
        {
            budgetPlanLineActiveView.SourceDataAreaId = BudgetPlan::getDataAreaId(budgetPlanLineActiveView.BudgetPlanHeader);
        }
        else
        {
            budgetPlanLineActiveView.SourceDataAreaId = emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddNewBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a new <c>BudgetPlanLine</c> record can be created given the current <c>BudgetPlanColumn</c> record
    /// that the line is being created under.
    /// </summary>
    /// <param name = "_budgetPlanColumn">
    /// The <c>BudgetPlanColumn</c> record to check for column rule filters.
    /// </param>
    /// <returns>
    /// true if a <c>BudgetPlanLine</c> record can can be added; otherwise, false.
    /// </returns>
    public boolean canAddNewBudgetPlanLine(BudgetPlanColumn _budgetPlanColumn)
    {
        return (!BudgetPlanColumnRule::checkLessThanOrGreaterColumnFilterExists(_budgetPlanColumn, true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID that corresponds with the field to be validated.
    /// </param>
    /// <returns>
    /// true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldId)
    {
        BudgetPlanHeader budgetPlanHeaderValidate = BudgetPlanHeader::find(budgetPlanLineActiveView.BudgetPlanHeader);
        BudgetPlan budgetPlan = BudgetPlan::construct();
        budgetPlan.parmBudgetPlanHeader(budgetPlanHeaderValidate);

        boolean isValid = true;

        switch (_fieldId)
        {
            case activeViewLineAssetIdFieldId:
                isValid = budgetPlan.checkBudgetPlanCurrentLayoutForEdit(budgetPlanLineActiveView) && this.validateAssetId() && !BudgetPlan::isUserBlocked(budgetPlanHeaderValidate, true);
                break;

            case activeViewLineProposedAssetFieldId:
                isValid = budgetPlan.checkBudgetPlanCurrentLayoutForEdit(budgetPlanLineActiveView) && this.validateProposedAsset() && !BudgetPlan::isUserBlocked(budgetPlanHeaderValidate, true);
                break;

            case activeViewLineProjectIdFieldId:
                isValid = budgetPlan.checkBudgetPlanCurrentLayoutForEdit(budgetPlanLineActiveView) && this.validateProjectId() && !BudgetPlan::isUserBlocked(budgetPlanHeaderValidate, true);
                break;

            case activeViewLineProposedProjectFieldId:
                isValid = budgetPlan.checkBudgetPlanCurrentLayoutForEdit(budgetPlanLineActiveView) && this.validateProposedProject() && !BudgetPlan::isUserBlocked(budgetPlanHeaderValidate, true);
                break;

            case activeViewLineCommentFieldId:
                isValid = BudgetPlanLayoutHelper::checkCanEditColumn(this.budgetPlanLayoutRecId, _fieldId) && !BudgetPlan::isUserBlocked(budgetPlanHeaderValidate, true);
                break;

            case activeViewLineTransactionCurrencyCodeFieldId:
                isValid = budgetPlanLineActiveView.isNewRecord()
                    || (budgetPlan.checkBudgetPlanCurrentLayoutForEdit(budgetPlanLineActiveView) && !BudgetPlan::isUserBlocked(budgetPlanHeaderValidate, true));
                isValid = isValid && this.validatePlanCurrencyCode();
                break;

            case activeViewLineBudgetClassFieldId,
                activeViewLineIsRecurringFieldId,
                activeViewLineIsNewRequestFieldId,
                activeViewLinePositionFieldId,
                activeViewLineDimensionValuesFieldId1,
                activeViewLineDimensionValuesFieldId2,
                activeViewLineDimensionValuesFieldId3,
                activeViewLineDimensionValuesFieldId4,
                activeViewLineDimensionValuesFieldId5,
                activeViewLineDimensionValuesFieldId6,
                activeViewLineDimensionValuesFieldId7,
                activeViewLineDimensionValuesFieldId8,
                activeViewLineDimensionValuesFieldId9,
                activeViewLineDimensionValuesFieldId10,
                activeViewLineDimensionValuesFieldId11:
                isValid = budgetPlanLineActiveView.isNewRecord()
                    || (budgetPlan.checkBudgetPlanCurrentLayoutForEdit(budgetPlanLineActiveView) && !BudgetPlan::isUserBlocked(budgetPlanHeaderValidate, true));
                break;

            case activeViewLineBudgetPlanHeaderFieldId,
                activeViewLineLedgerDimensionFieldId,
                activeViewLineLineNumberFieldId,
                activeViewLineDimensionNameFieldId1,
                activeViewLineDimensionNameFieldId2,
                activeViewLineDimensionNameFieldId3,
                activeViewLineDimensionNameFieldId4,
                activeViewLineDimensionNameFieldId5,
                activeViewLineDimensionNameFieldId6,
                activeViewLineDimensionNameFieldId7,
                activeViewLineDimensionNameFieldId8,
                activeViewLineDimensionNameFieldId9,
                activeViewLineDimensionNameFieldId10,
                activeViewLineDimensionNameFieldId11:
                break;

            default:
                // Zero values in non-editable columns from the worksheet should be allowed through validation
                boolean bypassValidation = !FormDataUtil::isFormDataSource(budgetPlanLineActiveView)
                    && !BudgetPlanLayoutHelper::checkCanEditColumn(this.budgetPlanLayoutRecId, _fieldId, false)
                    && (budgetPlanLineActiveView.getFieldValue(fieldId2Name(tableNum(BudgetPlanLineActiveView), _fieldId)) == 0);

                if (!bypassValidation)
                {
                    isValid = this.canAddNewBudgetPlanLine(BudgetPlanColumn::find(BudgetPlanLayoutMapping::findByLayoutFieldNum(this.budgetPlanLayoutRecId, _fieldId).Column))
                        && !BudgetPlan::isUserBlocked(budgetPlanHeaderValidate, true)
                        && BudgetPlanLayoutHelper::checkCanEditColumn(this.budgetPlanLayoutRecId, _fieldId);
                }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerDimension</Name>
				<Source><![CDATA[
    protected boolean validateLedgerDimension()
    {
        boolean ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        BudgetPlanHeader        = fieldStr(BudgetPlanLineActiveView, BudgetPlanHeader);
        AssetId                 = fieldStr(BudgetPlanLineActiveView, AssetId);
        BudgetClass             = fieldStr(BudgetPlanLineActiveView, BudgetClass);
        ProjectId               = fieldStr(BudgetPlanLineActiveView, ProjectId);
        ProposedAsset           = fieldStr(BudgetPlanLineActiveView, ProposedAsset);
        ProposedProject         = fieldStr(BudgetPlanLineActiveView, ProposedProject);
        LedgerDimension         = fieldStr(BudgetPlanLineActiveView, LedgerDimension);
        IsRecurring             = fieldStr(BudgetPlanLineActiveView, IsRecurring);
        TransactionCurrencyCode = fieldStr(BudgetPlanLineActiveView, TransactionCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanLineActiveView</Name>
				<Source><![CDATA[
    public BudgetPlanLineActiveView parmBudgetPlanLineActiveView(BudgetPlanLineActiveView _budgetPlanLineActiveView = budgetPlanLineActiveView)
    {
        budgetPlanLineActiveView     = _budgetPlanLineActiveView;
        // Point the common record to the BudgetPlanLineActiveView buffer
        budgetPlanLineActiveViewLine = budgetPlanLineActiveView;

        return budgetPlanLineActiveView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionHierarchyId</Name>
				<Source><![CDATA[
    public DimensionHierarchyId parmDimensionHierarchyId(DimensionHierarchyId _dimensionHierarchyId = dimensionHierarchyId)
    {
        dimensionHierarchyId = _dimensionHierarchyId;

        return dimensionHierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns class instance values.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId"> The record ID of the <c>BudgetPlanHeader</c> record. </param>
    /// <param name = "_budgetPlanLineActiveView"> The buffer of the <c>BudgetPlanLineActiveView</c> record. </param>
    protected void initialize(BudgetPlanHeaderRecId _budgetPlanHeaderRecId, BudgetPlanLineActiveView _budgetPlanLineActiveView)
    {
        BudgetPlanHeader    budgetPlanHeaderInitialize  = BudgetPlanHeader::find(_budgetPlanHeaderRecId);
        BudgetPlanLayout    budgetPlanLayout            = BudgetPlanLayout::find(budgetPlanHeaderInitialize.Layout);

        this.budgetPlanLayoutRecId            = budgetPlanLayout.RecId;
        this.dimensionHierarchyId             = budgetPlanLayout.DimensionHierarchy;
        this.calledFromForm                   = FormDataUtil::isFormDataSource(_budgetPlanLineActiveView);
        originalBudgetPlanLineActiveView.data(_budgetPlanLineActiveView.orig());
        this.parmBudgetPlanLineActiveView(_budgetPlanLineActiveView);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromActiveViewLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BudgetPlanLineItemActiveView</c> class.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveView"> The buffer of the <c>BudgetPlanLineActiveView</c> record. </param>
    /// <returns> An instance of the <c>BudgetPlanLineItemActiveView</c> class. </returns>
    public static BudgetPlanLineItemActiveView newFromActiveViewLine(BudgetPlanLineActiveView _budgetPlanLineActiveView)
    {
        BudgetPlanLineItemActiveView budgetPlanLineItemActiveView = BudgetPlanLineItemActiveView::construct();
        budgetPlanLineItemActiveView.initialize(_budgetPlanLineActiveView.BudgetPlanHeader, _budgetPlanLineActiveView);

        return budgetPlanLineItemActiveView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanLineItemActiveView construct()
    {
        return new BudgetPlanLineItemActiveView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the corresponding <c>BudgetPlanLine</c>s.
    /// </summary>
    public void insert()
    {
        super();

        if (!this.calledFromForm)
        {
            this.createUpdateBudgetPlanLine(true);

            BudgetPlanLineActiveViewDetailStatus::createBudgetPlanLineActiveViewDetailStatus(
                budgetPlanLineActiveView.BudgetPlanHeader,
                budgetPlanLineActiveView.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the corresponding <c>BudgetPlanLine</c>s.
    /// </summary>
    public void update()
    {
        super();

        if (!this.calledFromForm)
        {
            if (BudgetPlanLineActiveViewDetailStatus::existsByHeaderActiveView(budgetPlanLineActiveView.BudgetPlanHeader, budgetPlanLineActiveView.RecId))
            {
                BudgetPlanActiveView::refreshBudgetPlanLineActiveViewDetail(budgetPlanLineActiveView.BudgetPlanHeader);
            }

            this.createUpdateBudgetPlanLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdateBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the corresponding <c>BudgetPlanLine</c> records.
    /// </summary>
    /// <param name = "_createNew"> Boolean true if a new <c>BudgetPlanLineActiveView</c> is being inserted; optional. </param>
    protected void createUpdateBudgetPlanLine(boolean _createNew = false)
    {
        BudgetPlanLayoutMapping layoutMapping;
        LanguageId              currentUserLanguage = currentUserLanguage();

        // Loop through each column updateable or insertable and create budget plan line records
        // If the active view line is new, skip dimension and row attribute columns
        while select FieldId, FieldName, IsRow, Ordinal, HasDimensionFilter
            from layoutMapping
            order by IsRow desc, HasDimensionFilter desc, Ordinal
            where layoutMapping.Layout       == this.budgetPlanLayoutRecId
                && layoutMapping.LanguageId  == currentUserLanguage
                && layoutMapping.IsEditable  == NoYes::Yes
                && layoutMapping.InWorksheet == NoYes::Yes
                && (!_createNew
                    || layoutMapping.IsRow   == NoYes::No)
                && (!_createNew
                    || layoutMapping.Ordinal != 0)
        {
            if (originalBudgetPlanLineActiveView.orig().getFieldValue(layoutMapping.FieldName) == budgetPlanLineActiveView.getFieldValue(layoutMapping.FieldName))
            {
                // Field value hasn't changed, skip update or insert
                continue;
            }

            if (!budgetPlanLineActiveView.LedgerDimension
                || layoutMapping.HasDimensionFilter
                || BudgetPlanLineFieldActiveViewMapping::getBudgetPlanLineFieldName(layoutMapping.FieldName) == BudgetPlanLayoutManager::getSqlFieldName(budgetPlanLineTableStr, budgetPlanLineLedgerDimension))
            {
                budgetPlanLineActiveView.LedgerDimension = BudgetPlanLedgerDimensionPivotControl::generateLedgerDimensionForRequest(
                                                                BudgetPlanLedgerDimensionPivotRequest::construct()
                                                                    .setBudgetPlanLineActiveView(this.budgetPlanLineActiveView)
                                                                    .setOrdinal(BudgetPlanLayoutManager::getOrdinalForLayoutFieldNum(this.budgetPlanLayoutRecId, layoutMapping.FieldId)));
            }

            BudgetPlanActiveView::createBudgetPlanLines(
                BudgetPlanLineRequest::construct()
                    .setBudgetPlanLineActiveView(this.budgetPlanLineActiveView)
                    .setBudgetPlanLineFieldNum(layoutMapping.FieldId)
                    .setBudgetPlanLineFieldName(BudgetPlanLineFieldActiveViewMapping::getBudgetPlanLineFieldName(layoutMapping.FieldName))
                    .setIsRowElement(layoutMapping.IsRow));

            if (layoutMapping.HasDimensionFilter)
            {
                budgetPlanLineActiveView.LedgerDimension = 0;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>