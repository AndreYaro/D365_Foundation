<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFlowServiceRequirements</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanFlowServiceRequirements</c> class provides an interface to a service requirement
///    calculation for a specified <c>KanbanFlow</c> record.
/// </summary>
public class KanbanFlowServiceRequirements
{
    KanbanFlow              kanbanFlow;
    KanbanRule              kanbanRule;
    InventDim               inventDim;
    ItemId                  itemId;
    InventDimId             inventDimId;
    InventQty               inventQty;
    InventTable             inventTable;
    UnitOfMeasure           inventUnitOfMeasure;

    boolean                 cachedServiceRequirement;

    Map                     mapActivityRequirement;
    Map                     mapServiceRequirement;
    MapEnumerator           meActivityRequirement;
    MapEnumerator           meServiceRequirement;
    int                     foundRequirements;

    PlanActivityRefRecId    currentPlanActivityRecId;
    container               currentRequiredItemIdInventDimId;
    InventQty               currentRequiredInventQty;

    real                    kanbanQtyRatio;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a service requirement to the result map.
    /// </summary>
    /// <param name="_planActivityService">
    ///    A <c>PlanActivityService</c> record.
    /// </param>
    /// <remarks>
    ///    The results are stored in a two-level map. The inner map links a service item to a
    ///    quantity in its inventory unit. The outer map stores an instance of the inner map per plan activity.
    /// </remarks>
    private void addRequirement(PlanActivityService _planActivityService)
    {
        if (_planActivityService)
        {
            // calculate the quantity
            InventQty requiredInventQty = this.calcRequiredPlanActivityServiceQuantity(_planActivityService);

            if (requiredInventQty)
            {
                container requiredItemIdInventDimId = [_planActivityService.ItemId,_planActivityService.mergeInventDim(inventDim,true,false).InventDimId];

                // get or create the inner map
                if (mapActivityRequirement.exists(_planActivityService.PlanActivity))
                {
                    mapServiceRequirement = mapActivityRequirement.lookup(_planActivityService.PlanActivity);
                }
                else
                {
                    mapServiceRequirement = new Map(Types::Container,Types::Real);
                }

                // update quantity
                if (mapServiceRequirement.exists(requiredItemIdInventDimId))
                {
                    requiredInventQty += mapServiceRequirement.lookup(requiredItemIdInventDimId);
                }
                else
                {
                    foundRequirements++;
                }

                // update maps
                mapServiceRequirement.insert(requiredItemIdInventDimId,requiredInventQty);
                mapActivityRequirement.insert(_planActivityService.PlanActivity,mapServiceRequirement);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPlanActivityServiceRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the service requirements for the specified <c>PlanActivity</c> buffer.
    /// </summary>
    /// <param name="_planActivity">
    /// A <c>PlanActivity</c> table buffer.
    /// </param>
    /// <remarks>
    /// In the two-level activity hierarchy, an activity can have multiple service requirements.
    /// </remarks>
    private void calcPlanActivityServiceRequirements(PlanActivity _planActivity)
    {
        PlanActivityRelationship    planActivityRelationship;
        PlanConstraint              planConstraint;
        PlanActivity                planActivity;

        //activity itself
        PlanActivityService planActivityService = PlanActivityService::findPlanActivity(_planActivity.RecId,
                                                                                        itemId,
                                                                                        inventDimId);

        this.addRequirement(planActivityService);

        //the next aggregated level
        while select * from planActivityRelationship
            where planActivityRelationship.IndependentPlanActivity == _planActivity.RecId
            join TableId from planConstraint
                where planConstraint.RecId          == planActivityRelationship.Constraint
                   && planConstraint.ConstraintType == ConstraintTypes::Aggregation
            exists join planActivity
                where planActivity.RecId == planActivityRelationship.DependentPlanActivity
                   && ( planActivity.PlanActivityType == PlanActivityType::Process
                     || planActivity.PlanActivityType == PlanActivityType::Transfer)
        {
            planActivityService = PlanActivityService::findPlanActivity(planActivityRelationship.DependentPlanActivity,
                                                                        itemId,
                                                                        inventDimId);
            this.addRequirement(planActivityService);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRequiredPlanActivityServiceQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the required quantity in inventory unit for the given <c>PlanActivityService</c> record.
    /// </summary>
    /// <param name="_planActivityService">
    /// A <c>PlanActivityService</c> record.
    /// </param>
    /// <returns>
    /// The required quantity in inventory unit.
    /// </returns>
    /// <remarks>
    /// Unit conversion will throw an error if the conversion is not defined.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// An unhandled quantity calculation base was encountered.
    /// </exception>
    private InventQty calcRequiredPlanActivityServiceQuantity(PlanActivityService _planActivityService)
    {
        InventQty               requiredInventQty;
        InventQty               serviceQuantity;
        UnitOfMeasureRecId      serviceUnitOfMeasureRecId;
        real                    kanbanQuantityRatio = kanbanQtyRatio;

        if (_planActivityService)
        {
            InventTable serviceInventTable = InventTable::find(_planActivityService.ItemId);
            UnitOfMeasure serviceInventUnitOfMeasure = UnitOfMeasure::findBySymbol(serviceInventTable.inventUnitId());

            if (   serviceInventTable
                && serviceInventUnitOfMeasure)
            {
                switch (_planActivityService.ServiceQuantityCalculationBase)
                {
                    case PlanActivityServiceQuantityBase::Jobs:
                        serviceQuantity           = 1.0;
                        serviceUnitOfMeasureRecId = _planActivityService.ServiceUnitOfMeasure;
                        break;
                    case PlanActivityServiceQuantityBase::ProductQuantityGood,
                         PlanActivityServiceQuantityBase::TotalOutputItemQuantity:
                        serviceQuantity           = inventQty;
                        serviceUnitOfMeasureRecId = _planActivityService.ServiceUnitOfMeasure;
                        kanbanQuantityRatio       = 1.0;
                        break;
                    case PlanActivityServiceQuantityBase::ActivityTime:
                        // get the ratio that is calculated for the runtime in seconds
                        // service item inventory unit is expected to be convertible to seconds
                        PlanActivity planActivity = PlanActivity::find(_planActivityService.PlanActivity);

                        LeanThroughputRatio throughputRatio = LeanScheduleGroup::throughputRatio(planActivity.wrkCtrResourceGroup().RecId,
                                                                                    itemId,
                                                                                    inventDimId);

                        serviceQuantity = PlanActivityTimeCalculation::newPlannedActivity(planActivity,
                                                                                          inventTable.ItemId,
                                                                                          inventDimId,
                                                                                          (inventQty/kanbanQuantityRatio),
                                                                                          UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.inventUnitId()),
                                                                                          throughputRatio).runTimeSeconds();

                        serviceUnitOfMeasureRecId = ProdTimeUnitOfMeasure::unitOfMeasureByType(ProdTimeUnitType::Seconds);
                        break;
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
            }

            // apply the service ratio
            serviceQuantity   = serviceQuantity * _planActivityService.ServiceRatio;

            // apply the kanban quantity ratio
            serviceQuantity   = serviceQuantity * kanbanQuantityRatio;

            // convert to inventory unit
            requiredInventQty = EcoResProductUnitConverter::convertForReleasedProduct(serviceInventTable.ItemId,
                                                                                      inventDimId,
                                                                                      serviceQuantity,
                                                                                      serviceUnitOfMeasureRecId,
                                                                                      serviceInventUnitOfMeasure.RecId,
                                                                                      NoYes::Yes);
        }

        return requiredInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServiceRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the service requirements for the <c>KanbanFlow</c> object that is specified in the class
    /// constructor.
    /// </summary>
    /// <param name="_forceRecalc">
    /// A Boolean value that indicates whether a recalculation must be forced.
    /// </param>
    /// <returns>
    /// true if a calculation was performed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The result is cached. Subsequent calls will not compute the result again.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean calcServiceRequirements(boolean _forceRecalc = false)
    {
        KanbanFlowActivityRelationship      kanbanFlowActivityRelationship;
        LeanProdFlowPlanActivityRelation    leanProdFlowPlanActivityRelation;
        PlanActivityRelationship            planActivityRelationship;
        PlanActivity                        planActivity;
        RefRecId                            previousPlanActivityRecId;
        boolean                             result;

        setPrefix(KanbanFlowServiceRequirements::description());
        setPrefix(strFmt("@SYS14077",itemId));

        if (   !cachedServiceRequirement
            || _forceRecalc)
        {
            cachedServiceRequirement = true;
            result                   = true;
            this.init();

            //single activity flow
            if (   kanbanFlow.FirstPlanPlanActivity == kanbanFlow.LastPlanPlanActivity
                || !kanbanFlow.FirstPlanPlanActivity)
            {
                planActivity = kanbanFlow.lastPlanActivity();
                if (planActivity)
                {
                    this.calcPlanActivityServiceRequirements(planActivity);
                }
            }
            else
            {
                //multiple activity flow
                while select TableId from kanbanFlowActivityRelationship
                    order by Sequence
                    where kanbanFlowActivityRelationship.KanbanFlow  == kanbanFlow.RecId
                    join ProductionFlow from leanProdFlowPlanActivityRelation
                        where leanProdFlowPlanActivityRelation.RecId == kanbanFlowActivityRelationship.LeanProdFlowActivityRelation
                    join planActivityRelationship
                        where planActivityRelationship.RecId         == leanProdFlowPlanActivityRelation.PlanActivityRelationship
                {
                    planActivity = planActivityRelationship.independentActivity();
                    if (   planActivity
                        && planActivity.RecId != previousPlanActivityRecId)
                    {
                        this.calcPlanActivityServiceRequirements(planActivity);
                        previousPlanActivityRecId = planActivity.RecId;
                    }

                    planActivity = planActivityRelationship.dependentActivity();
                    if (   planActivity
                        && planActivity.RecId != previousPlanActivityRecId)
                    {
                        this.calcPlanActivityServiceRequirements(planActivity);
                        previousPlanActivityRecId = planActivity.RecId;
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPlanActivityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current record ID from the <c>PlanActivity</c> table.
    /// </summary>
    /// <returns>
    ///    The current record ID from the <c>PlanActivity</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId currentPlanActivityRecId()
    {
        return currentPlanActivityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRequiredInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current requirement quantity in inventory units.
    /// </summary>
    /// <returns>
    /// The current requirement quantity in inventory units.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty currentRequiredInventQty()
    {
        return currentRequiredInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRequiredItemIdInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current item and inventory dimension.
    /// </summary>
    /// <returns>
    /// The current requirement item and inventory dimension.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container currentRequiredItemIdInventDimId()
    {
        return currentRequiredItemIdInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enumerator to the start of the result map.
    /// </summary>
    /// <param name="_forceRecalc">
    /// A Boolean value that indicates whether a recalculation must be forced.
    /// </param>
    /// <returns>
    /// true if an element exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean first(boolean _forceRecalc = false)
    {
        if (   !cachedServiceRequirement
            || _forceRecalc)
        {
            this.calcServiceRequirements(_forceRecalc);
        }

        boolean result = mapActivityRequirement.elements();

        if (result)
        {
            meActivityRequirement = mapActivityRequirement.getEnumerator();
            result                = meActivityRequirement.moveNext();
            if (result)
            {
                mapServiceRequirement = meActivityRequirement.currentValue();
                meServiceRequirement  = mapServiceRequirement.getEnumerator();
                result                = meServiceRequirement.moveNext();
            }
        }

        this.initCurrent(!result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foundRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of service requirements that are found.
    /// </summary>
    /// <returns>
    /// The number of service requirements that are found.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int foundRequirements()
    {
        return foundRequirements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class instance variables.
    /// </summary>
    private void init()
    {
        // planActivity -> map([itemId,inventDimId] -> quantity)
        mapActivityRequirement = new Map(typeName2Type(extendedTypeStr(recId)),Types::Class);

        foundRequirements      = 0;
        kanbanFlow             = kanbanRule.kanbanFlow();
        inventTable            = InventTable::find(itemId);
        inventUnitOfMeasure    = UnitOfMeasure::findBySymbol(inventTable.inventUnitId());

        // consider only product dimensions
        inventDim   = InventDim::find(inventDimId);
        inventDim.clearNotProductDim(InventDimGroupSetup::newInventTable(inventTable));
        inventDim   = InventDim::findOrCreate(inventDim);
        inventDimId = inventDim.InventDimId;

        // kanban quantity ratio
        this.initKanbanQtyRatio();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current element of the result map.
    /// </summary>
    /// <param name="_reset">
    ///    A Boolean value that indicates whether the current results must be reset.
    /// </param>
    private void initCurrent(boolean _reset)
    {
        if (!_reset)
        {
            if (   meActivityRequirement
                && meServiceRequirement)
            {
                currentRequiredItemIdInventDimId = meServiceRequirement.currentKey();
                currentRequiredInventQty         = meServiceRequirement.currentValue();
                currentPlanActivityRecId         = meActivityRequirement.currentKey();
            }
        }
        else
        {
            currentRequiredItemIdInventDimId = conNull();
            currentRequiredInventQty         = 0;
            currentPlanActivityRecId         = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initKanbanQtyRatio</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the kanban quantity ratio.
    /// </summary>
    private void initKanbanQtyRatio()
    {
        kanbanQtyRatio = 1.0;

        if (inventQty)
        {
            if (kanbanRule.Quantity)
            {
                kanbanQtyRatio = inventQty / kanbanRule.Quantity;
            }
            else
            {
                if (kanbanRule.ReplenishmentStrategy != LeanReplenishmentStrategy::Fixed)
                {
                    KanbanRuleVariable kanbanRuleVariable = KanbanRuleVariable::findParentRecId(kanbanRule.RecId);
                    if (   kanbanRuleVariable
                        && kanbanRuleVariable.MaximumProductQuantity)
                    {
                        kanbanQtyRatio = inventQty / kanbanRuleVariable.MaximumProductQuantity;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the enumerator to the next element of the result map.
    /// </summary>
    /// <returns>
    ///    true if the next element exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean next()
    {
        boolean result = meServiceRequirement ? meServiceRequirement.moveNext() : false;

        if (!result)
        {
            result = meActivityRequirement ? meActivityRequirement.moveNext() : false;
            if (result)
            {
                mapServiceRequirement = meActivityRequirement.currentValue();
                meServiceRequirement  = mapServiceRequirement.getEnumerator();
                result                = meServiceRequirement.moveNext();
            }
        }

        this.initCurrent(!result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty parmInventQty(InventQty _inventQty = inventQty)
    {
        inventQty = _inventQty;
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanFlow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanFlow parmKanbanFlow(KanbanFlow _kanbanFlow = kanbanFlow)
    {
        kanbanFlow = _kanbanFlow;
        return kanbanFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;
        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanFlowServiceRequirements construct()
    {
        return new KanbanFlowServiceRequirements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYS339033";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanFlowServiceRequirements</c> class.
    /// </summary>
    /// <param name="_kanbanRule">
    /// A <c>KanbanRule</c> buffer.
    /// </param>
    /// <param name="_itemId">
    /// An <c>itemId</c> value.
    /// </param>
    /// <param name="_inventDimId">
    /// An <c>InventDimId</c> value that specifies the product dimensions of the item.
    /// </param>
    /// <param name="_inventQty">
    /// A quantity value.
    /// </param>
    /// <returns>
    /// A <c>KanbanFlowServiceRequirements</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanFlowServiceRequirements newStandard(
        KanbanRule  _kanbanRule,
        ItemId      _itemId,
        InventDimId _inventDimId,
        InventQty   _inventQty)
    {
        KanbanFlowServiceRequirements  kanbanFlowServiceRequirements = KanbanFlowServiceRequirements::construct();

        kanbanFlowServiceRequirements.parmKanbanRule(_kanbanRule);
        kanbanFlowServiceRequirements.parmItemId(_itemId);
        kanbanFlowServiceRequirements.parmInventDimId(_inventDimId);
        kanbanFlowServiceRequirements.parmInventQty(_inventQty);

        return kanbanFlowServiceRequirements;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>