<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalTransferValidateTransferIsValid</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadataAttribute(classStr(SubledgerJournalTransferToGeneralLedgerValidationProvider), classStr(SubledgerJournalTransferValidateTransferIsValid))]
[ExportAttribute('Microsoft.Dynamics.AX.Application.SubledgerJournalTransferToGeneralLedgerValidationProvider')]
internal final class SubledgerJournalTransferValidateTransferIsValid implements SubledgerJournalTransferToGeneralLedgerValidationProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validate(SubledgerJournalTransferId _transferId)
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
            SourceDocumentInstrumentationConstants::InstrumentationNamespaceForBatchTransfer,
            classStr(SubledgerJournalTransferValidateTransferIsValid),
            SourceDocumentInstrumentationConstants::SubledgerToGeneralLedgerTransferValidationProcess))
        {
            SubledgerJournalEntry subledgerJournalEntry;
            SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
            AccountingEvent accountingEvent;

            // Use a not exists join to SubledgerVoucherGeneralJournalEntry because if any of those records did not get created,
            //something unexpected happened while executing transfer
            select count(RecId) from subledgerJournalEntry
                group by subledgerJournalEntry.TransferId
                where subledgerJournalEntry.TransferId == _transferId
            notexists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId &&
                    subledgerVoucherGeneralJournalEntry.TransferId == subledgerJournalEntry.TransferId;

            if (subledgerJournalEntry)
            {
                activityContext.addCustomProperty(
                    SourceDocumentInstrumentationConstants::TransferId,
                    any2Str(_transferId));

                activityContext.addCustomProperty(
                    classStr(SubledgerJournalTransferValidateTransferIsValid),
                    any2Str('Failed'));

                throw error("@SourceDocumentAccountingFramework:SubledgerJournalTransferToGeneralLedgerProcessError");
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>