<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxInputOutputVATReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxInputOutputVATReportController_TH</c> is controller class for <c>TaxInputOutputVATReport_TH</c> report.
/// </summary>
public class TaxInputOutputVATReportController extends SrsReportRunController implements BatchRetryable
{
    private const str FeatureReference = 'TH-00002';

    TaxDirection    taxDirection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the values of parameters and passes them to the report.
    /// </summary>
    public void getParameterValues()
    {
        if (args.parmEnumType() == enumNum(TaxDirection))
        {
            switch (args.parmEnum())
            {
                // Set the TaxDirection value to IncomingTax or OutgoingTax
                // based on parmEnum value from menu item.
                case TaxDirection::OutgoingTax :
                    taxDirection = TaxDirection::IncomingTax;
                    break;

                case TaxDirection::IncomingTax :
                    taxDirection = TaxDirection::OutgoingTax;
                    break;

                default :
                    throw error("@SYS22828");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default values for the report parameters.
    /// </summary>
    public void prePromptModifyContract()
    {
        TaxInputOutputVATReportContract     taxInputOutputVATReportContract = this.parmReportContract().parmRdpContract() as TaxInputOutputVATReportContract;
        Caption                             caption;

        super();

        this.getParameterValues();

        switch (args.menuItemName())
        {
            case menuitemOutputStr(TaxReportUnrealized_Input):
                taxInputOutputVATReportContract.parmDetailSummary(DetailSummary::Summary);
                // Purchase VAT report
                caption = "@TaxLocalization:TaxInputOutputVATReport_PurchaseVATReport";
                break;

            case menuitemOutputStr(TaxReportUnrealized_Output):
                taxInputOutputVATReportContract.parmDetailSummary(DetailSummary::Summary);
                // Sales VAT report
                caption = "@TaxLocalization:TaxInputOutputVATReport_SalesVATReport";
                break;

            case menuitemOutputStr(TaxReportUnrealized_InputDetail):
                taxInputOutputVATReportContract.parmDetailSummary(DetailSummary::Detail);
                // Purchase VAT report (for internal use)
                caption = "@TaxLocalization:TaxInputOutputVATReport_PurchaseVATReportInternal";
                break;

            case menuitemOutputStr(TaxReportUnrealized_OutputDetail):
                taxInputOutputVATReportContract.parmDetailSummary(DetailSummary::Detail);
                // Sales VAT report (for internal use)
                caption = "@TaxLocalization:TaxInputOutputVATReport_SalesVATReportInternal";
                break;
        }

        this.parmDialogCaption(caption);
        taxInputOutputVATReportContract.parmCaption(caption);
        taxInputOutputVATReportContract.parmTaxDirection(taxDirection);

        if (taxInputOutputVATReportContract.parmDetailSummary() == DetailSummary::Summary
            && taxInputOutputVATReportContract.parmStartDate()  == dateNull())
        {
            // Set the default date
            taxInputOutputVATReportContract.parmStartDate(dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        // set EndDate to Today() by default
        taxInputOutputVATReportContract.parmEndDate(DateTimeUtil::date(DateTimeUtil::getSystemDateTime()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        TaxInputOutputVATReportContract  taxInputOutputVATReportContract = this.parmReportContract().parmRdpContract();
        TaxBranchCode                    taxBranchCode;

        taxBranchCode = taxInputOutputVATReportContract.parmTaxBranchCode();
        taxInputOutputVATReportContract.parmTaxID(CompanyInfo::find().CoRegNum);
        taxInputOutputVATReportContract.parmCompanyAddress(CompanyInfo::find().postalAddress().Address);
        taxInputOutputVATReportContract.parmTaxBranchName(TaxBranch::getReportTaxBranchStr(taxBranchCode));
        taxInputOutputVATReportContract.parmIsHeadOffice(taxBranchCode && TaxBranch::findByCode(taxBranchCode).HeadOffice);

        if (taxInputOutputVATReportContract.parmDetailSummary() == DetailSummary::Summary)
        {
            taxInputOutputVATReportContract.parmStartDate(dateStartMth(taxInputOutputVATReportContract.parmStartDate()));
            taxInputOutputVATReportContract.parmEndDate(dateEndMth(taxInputOutputVATReportContract.parmStartDate()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxInputOutputVATReportController controller = new TaxInputOutputVATReportController();

        controller.parmReportName(ssrsReportStr(TaxInputOutputVAT, Design));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret;

        ret = super();

        if (!TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            // Please mark Manage realized and unrealized VAT to print the report.
            throw error("@AccountsPayable:TaxUnrealizedVATErrorForPrintReport");
        }

        return ret;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>