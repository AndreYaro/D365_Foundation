<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUpdateSourceInventoryTransactionsForRMPickBasedOnWarehouseTransactions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSUpdateSourceInventoryTransactionsForRMPickBasedOnWarehouseTransactions</c> class performs an update of the production order picking
/// transactions based on the executed warehouse production picking work.
/// The class assumes that the warehouse production picking work is executed using the warehouse-specific inventory transactions.
/// </summary>
internal final class WHSUpdateSourceInventoryTransactionsForRMPickBasedOnWarehouseTransactions extends WHSUpdateSourceInventoryTransactionsForRawMaterialPicking
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateSourceInventoryTransactionsForRawMaterialPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the production raw material picking inventory transactions based on raw material policy.
    /// </summary>
    protected void updateSourceInventoryTransactionsForRawMaterialPick()
    {
        ItemId              prevItemId;
        InventDimParm       inventDimParmAboveLocation;

        ttsbegin;

        WHSRawMaterialPolicy warehouseRawMaterialPolicy = InventLocation::find(workTable.InventLocationId).WHSRawMaterialPolicy;

        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionQuery::newFromWorkId(workTable.WorkId).registeredReceiptByWorkLine(
            putWorkLine.LineNum,
            WHSWorkInventoryTransactionQueryParameters::construct());

        WHSWorkInventoryTransactionDescriptorEnumerator enumerator = inventoryTransactionDescriptor.getEnumerator();

        while (enumerator.moveNext())
        {
            WHSWorkInventoryTransactionDescriptorElement inventoryTransactionDescriptorElement = enumerator.current();

            WHSRawMaterialPolicy rawMaterialPolicyPerItem = this.determineRawMaterialPolicyForItem(
                inventoryTransactionDescriptorElement.parmItemId(),
                warehouseRawMaterialPolicy);

            switch (rawMaterialPolicyPerItem)
            {
                case WHSRawMaterialPolicy::Reserve:
                    this.reserveProdInventoryOnLocationForSingleInventoryDescriptor(inventoryTransactionDescriptorElement);
                    break;

                case WHSRawMaterialPolicy::Pick:
                    if (prevItemId != inventoryTransactionDescriptorElement.parmItemId())
                    {
                        inventDimParmAboveLocation = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(
                            InventTable::find(inventoryTransactionDescriptorElement.parmItemId()));
                    }

                    WHSWorkPutLineSourceInventoryPickingParameters pickingParameters = WHSWorkPutLineSourceInventoryPickingParameters::constructFromInventoryTransactionDescriptor(
                        inventoryTransactionDescriptorElement,
                        inventDimParmAboveLocation);
                    
                    using (WHSDeprTransactionsForRMPickBasedOnInventTransContext context = WHSDeprTransactionsForRMPickBasedOnInventTransContext::construct())
                    {
                        context.parmSelectMarkedTransFirst(true);
                        WHSWorkPutLineSourceInventoryPickingFactory::newPickingFromPutWorkLine(putWorkLine)
                        .pickInventoryQuantities(pickingParameters);
                    }
                    
                    break;
            }

            prevItemId = inventoryTransactionDescriptorElement.parmItemId();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveProdInventoryOnLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserves inventory at production input location.
    /// </summary>
    /// <param name="_workLineNum">
    /// The work line number.
    /// </param>    
    protected void reserveProdInventoryOnLocation(LineNum _workLineNum)
    {
        ttsbegin;

        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionQuery::newFromWorkId(workTable.WorkId).registeredReceiptByWorkLine(
            _workLineNum,
            WHSWorkInventoryTransactionQueryParameters::construct());

        WHSWorkInventoryTransactionDescriptorEnumerator enumerator = inventoryTransactionDescriptor.getEnumerator();

        while (enumerator.moveNext())
        {
            this.reserveProdInventoryOnLocationForSingleInventoryDescriptor(enumerator.current());
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveProdInventoryOnLocationForSingleInventoryDescriptor</Name>
				<Source><![CDATA[
    private void reserveProdInventoryOnLocationForSingleInventoryDescriptor(WHSWorkInventoryTransactionDescriptorElement _inventoryTransactionDescriptorElement)
    {
        var reserveProdInventoryParameters = WHSWorkPutLineSourceInventoryRawMaterialPickingParameters::constructFromInventoryTransactionDescriptor(_inventoryTransactionDescriptorElement);

        if (reserveProdInventoryParameters.reservedInventTransOrigin.RecId)
        {
            this.reserveAtProductionInputLocation(reserveProdInventoryParameters);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>