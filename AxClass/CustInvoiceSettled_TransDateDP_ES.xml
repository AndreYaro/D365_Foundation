<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceSettled_TransDateDP_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CustInvoiceSettled_TransDateDP_ES</c> class is the Report Data Provider class for the
///     <c>CustInvoiceSettled_TransDate_ES</c> Overview Report.
/// </summary>
/// <remarks>
///     This is the RDP class for the Invent <c>CustInvoiceSettled_TransDate_ES</c> SRS Report.
/// </remarks>
[
    SRSReportQuery(querystr(CustInvoiceSettled_TransDate_ES)),
    SRSReportParameterAttribute(classstr(CustInvoiceSettled_TransDateCtrct_ES))
]
class CustInvoiceSettled_TransDateDP_ES extends SRSReportDataProviderBase
{
    private const str FeatureReference = 'ES-00020';

    CustReport_InvoiceSettledTransDate_ES   custReport_InvoiceSettledTransDate_ES;
    CustInvoiceSettled_TransDateTmp_ES      custInvoiceSettled_TransDateTmp_ES;
    CustTrans                               custTrans;
    str                                     invoices;
    int                                     delayDays;
    real                                    totalAmount;
    CustAccount                             fromAccountNum;
    CustAccount                             toAccountNum;
    TransDate                               fromTransDate;
    TransDate                               toTransDate;
    TransDate                               fromDueDate;
    TransDate                               toDueDate;
    AmountMST                               fromAmount;
    AmountMST                               toAmount;
    PaymMode                                paymMode;
    CustBillOfExchangeStatus                status1;
    CustBillOfExchangeStatus                status2;
    CustBillOfExchangeStatus                status3;
    CustBillOfExchangeID                    billOfExchangeId;
    CustInvoiceId                           invoiceId;
    NoYes                                   enableStatus1;
    NoYes                                   enableStatus2;
    NoYes                                   enableStatus3;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceSettled_TransDateTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches the data from the <c>CustInvoiceSettled_TransDate_ESTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///     Data from the <c>CustInvoiceSettled_TransDate_ESTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustInvoiceSettled_TransDateTmp_ES))
    ]
    public CustInvoiceSettled_TransDateTmp_ES getCustInvoiceSettled_TransDateTmp_ES()
    {
        select custInvoiceSettled_TransDateTmp_ES;
        return custInvoiceSettled_TransDateTmp_ES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds ranges to the query depending on the UI parameter selection.
    /// </summary>
    /// <param name="_newQuery">
    ///     The main data source of the report.
    /// </param>
    /// <returns>
    ///     A query with the ranges.
    /// </returns>
    public Query initQuery(Query   _newQuery)
    {
        // Filters only payment transactions.

        _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans, Invoice)).value(SysQuery::valueEmptyString());
        _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans, Closed)).value(sysquery::valueNot(dateNull()));

        if (fromAccountNum || toAccountNum)
        {
            _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans, AccountNum)).value(queryRange(fromAccountNum, toAccountNum));
        }

        if (fromTransDate || toTransDate)
        {
            _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans, TransDate)).value(queryRange(fromTransDate, toTransDate));
        }

        if (fromDueDate || toDueDate)
        {
            _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans, DueDate)).value(queryRange(fromDueDate, toDueDate));
        }

        if (fromAmount || toAmount)
        {
            _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans, AmountMST)).value(queryRange(fromAmount, toAmount));
        }

        if (paymMode)
        {
            _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans, PaymMode)).value(paymMode);
        }

        if (enableStatus1 == NoYes::Yes)
        {
            _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans, BillOfExchangeStatus)).value(enum2str(status1));
        }

        if (enableStatus2 == NoYes::Yes)
        {
            _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans, BillOfExchangeStatus)).value(enum2str(status2));
        }

        if (enableStatus3 == NoYes::Yes)
        {
            _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans, BillOfExchangeStatus)).value(enum2str(status3));
        }

        if (billOfExchangeId)
        {
            _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans, BillOfExchangeID)).value(billOfExchangeId);
        }

        return _newQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustInvoiceSettled_TransDateTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method inserts data into the temporary table.
    /// </summary>
    public void insertCustInvoiceSettled_TransDateTmp_ES()
    {
        custInvoiceSettled_TransDateTmp_ES.AccountNum         = custTrans.AccountNum;
        custInvoiceSettled_TransDateTmp_ES.Voucher            = custTrans.Voucher;
        custInvoiceSettled_TransDateTmp_ES.Txt                = custTrans.Txt;
        custInvoiceSettled_TransDateTmp_ES.TransDate          = custTrans.TransDate;
        custInvoiceSettled_TransDateTmp_ES.DueDate            = custTrans.DueDate;
        custInvoiceSettled_TransDateTmp_ES.AmountMST          = -(custTrans.AmountMST);
        custInvoiceSettled_TransDateTmp_ES.PaymMode           = custTrans.PaymMode;
        custInvoiceSettled_TransDateTmp_ES.BillOfExchangeID   = custTrans.BillOfExchangeID;
        custInvoiceSettled_TransDateTmp_ES.PostingProfile     = custTrans.PostingProfile;
        custInvoiceSettled_TransDateTmp_ES.DelayDays          = delaydays;
        custInvoiceSettled_TransDateTmp_ES.Invoices           = invoices;
        custInvoiceSettled_TransDateTmp_ES.TotalAmount        = totalAmount;
        custInvoiceSettled_TransDateTmp_ES.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///     Provides the ability to write the report business logic. This method will be called by SSRS at runtime.
    ///     The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        CustTrans               CustTransVoucher;
        int                     difYear;
        boolean                 invoiceRange;
        custInvoiceSettled_TransDateCtrct_ES contract = this.parmDataContract();

        custReport_InvoiceSettledTransDate_ES = new CustReport_InvoiceSettledTransDate_ES();

        fromAccountNum      = contract.parmFromCustomer();
        toAccountNum        = contract.parmToCustomer();
        fromTransDate       = contract.parmFromTransdate();
        toTransDate         = contract.parmToTransdate();
        fromDueDate         = contract.parmFromDuedate();
        toDueDate           = contract.parmToDuedate();
        fromAmount          = contract.parmFromAmount();
        toAmount            = contract.parmToAmount();
        paymMode            = contract.parmPaymMode();
        enableStatus1       = contract.parmEnableStatus1();
        enableStatus2       = contract.parmEnableStatus2();
        enableStatus3       = contract.parmEnableStatus3();
        billOfExchangeId    = contract.parmBillOfExchangeId();
        invoiceId           = contract.parmInvoice();
        status1             = contract.parmStatus1();
        status2             = contract.parmStatus2();
        status3             = contract.parmStatus3();

        Query query = new Query(this.parmQuery());
        query =  this.initQuery(query);
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            invoiceRange    = false;
            custTrans       = queryRun.get(tablenum(CustTrans));
            invoices        = '';

            CustTransVoucher = custReport_InvoiceSettledTransDate_ES.findCustTransVoucher(custTrans);
            if (CustTransVoucher.Invoice)
            {
                invoices = custReport_InvoiceSettledTransDate_ES.invoicesTxt(custTrans);

                if (invoiceId)
                {
                    if (strscan(invoices, invoiceId, 1, strLen(invoiceId)))
                    {
                        invoiceRange = true;
                    }
                }
                else
                {
                    invoiceRange = true;
                }

                if (invoiceRange)
                {
                    if (custTrans.DueDate)
                    {
                        difYear     = year(custTrans.DueDate) - year(custTrans.TransDate);
                        delaydays   = dayofyr(custTrans.DueDate) + (365 * difYear) - dayofyr(custTrans.TransDate);
                    }
                    totalAmount = totalAmount + custTrans.AmountMST;
                    this.insertCustInvoiceSettled_TransDateTmp_ES();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>