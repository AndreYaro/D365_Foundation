<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiRelease</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdMultiRelease</c> class shows the user dialog box to release the production order.
/// </summary>
/// <remarks>
///    Several production orders can be selected in the user dialog box. Each production order will be
///    released using the <see cref="T:ProdUpdRelease" />.
/// </remarks>
class ProdMultiRelease extends ProdMulti implements BatchRetryable
{
    ProdParmRelease         standardParmRelease;

    #DEFINE.CurrentVersion(6)
    #LOCALMACRO.CurrentList
        standardParmRelease
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list in the <c>BatchJournalType</c> table.
    /// </summary>
    /// <returns>
    ///    true if the class is set to be shown in the list in the <c>BatchJournalType</c> table; otherwise,
    ///    false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class for which the same parameters can repeatedly
    ///    be used. Of course, the dialog box can be shown and the parameters can be changed, but parameters
    ///    of some classes might build on data that is only valid for a short time. Running a class two times
    ///    with the same parameters is not always possible. If the <see cref="M:RunBaseBatch.canGoBatch" /> is
    ///    false, this method will have no effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    public boolean checkBuffer(Common _prodTable)
    {
        ProdTable prodTable = _prodTable as ProdTable;
        Common anyBuffer;

        return (! ProdParmRelease::exist(parmId, prodTable.ProdId)) && prodTable.status().runRelease(anyBuffer,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables you to perform any clean up that is required after a dialog box has been canceled.
    /// </summary>
    /// <remarks>
    ///    Override this method if any clean up is necessary after a dialog box has been canceled.
    /// </remarks>
    void cleanupDialog()
    {
        super();

        ProdParmRelease::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        ProdParmRelease  prodParmRelease;

        return prodParmRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    formName formName()
    {
        return formstr(ProdParmRelease);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer _prodParmRelease)
    {
        ProdParmRelease prodParmRelease = _prodParmRelease;
        ProdParmRelease saveProdParmRelease;
        saveProdParmRelease.data(prodParmRelease);
        prodParmRelease.data(standardParmRelease);

        prodParmRelease.ParmId           = saveProdParmRelease.ParmId;
        prodParmRelease.RecId            = saveProdParmRelease.RecId;
        prodParmRelease.LineNum          = saveProdParmRelease.LineNum;
        prodParmRelease.ProdId           = saveProdParmRelease.ProdId;
        prodParmRelease.JobStatus        = saveProdParmRelease.JobStatus;
        prodParmRelease.ExecutedDateTime = saveProdParmRelease.ExecutedDateTime;

        prodParmRelease.AutoUpdate       = autoUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(
        Common               _prodTable,
        ParmBuffer         _prodParmRelease
        )
    {
        ProdTable prodTable = _prodTable as ProdTable;
        ProdParmRelease prodParmRelease = _prodParmRelease;

        super(prodTable,prodParmRelease);

        this.prodParamReleaseInitialized(prodTable, prodParmRelease);

        prodParmRelease.ProdId   = prodTable.ProdId;
        prodParmRelease.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodParamReleaseInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate raised when the parameters are initialized.
    /// </summary>
    /// <param name = "_prodTable">
    /// The product record buffer.
    /// </param>
    /// <param name = "_prodParmRelease">
    /// The product release parameters.
    /// </param>
    delegate void prodParamReleaseInitialized(
        ProdTable       _prodTable,
        ProdParmRelease _prodParmRelease)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return ProdParmRelease::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>ProdMultiRelease</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>ProdMultiRelease</c> class.
    /// </returns>
    /// <remarks>
    ///    All variables that are required to re-initialize the class after construction must be packed.
    ///    Typically, a macro in the class declaration is used to list the variables to pack. Another macro
    ///    holds a version number, which refers to the version of the variable list. When a new variable is
    ///    introduced, follow these steps:
    ///    <list type="number">
    ///       <item>
    ///          <description>Increment the version number in the version macro.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Copy the current list to the <c>unpack</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the new variable to the bottom of the list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Recompile the class.</description>
    ///       </item>
    ///    </list>
    ///     When the
    ///    <c>
    ///       isSwappingPrompt
    ///    </c>
    ///     method returns a value of true, you may have to pack some prompt-related variables.
    /// </remarks>
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer _standard = standardParmRelease)
    {
        standardParmRelease = _standard;

        return standardParmRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        return new QueryRun(querystr(ProdMultiSelectRelease)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::MultiRelease))
        {
            #OCCRetryCount

            super();

            ProdMultiPurchLateSubmissionToWorkflow subcontractingHelper = ProdMultiPurchLateSubmissionToWorkflow::construct();
            subcontractingHelper.setLateSubmissionOfPurchaseOrdersToWorkflow(this.setProduction());
                       
            ProdPurch prodPurch = ProdPurch::newProd();
            ProdParmRelease prodParmRelease = this.setProduction();

            while (prodParmRelease)
            {
                try
                {
                    this.releaseProductionOrder(prodParmRelease, prodPurch);
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    exceptionTextFallThrough();
                }
                next prodParmRelease;
            }
            
            subcontractingHelper.performLateSubmissionOfPurchaseOrdersToWorkflow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseProductionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases a single production order.
    /// </summary>
    /// <param name = "_prodParmRelease">Release production order parameters.</param>
    /// <param name = "_prodPurch">A linked purchase order creation helper.</param>
    [Replaceable]
    protected void releaseProductionOrder(ProdParmRelease _prodParmRelease, ProdPurch _prodPurch)
    {
        // Only run when the Prod Order is not Stopped.
        if (WHSProdTable::find(_prodParmRelease.ProdId).Stopped)
        {
            error(strFmt("@WAX1701", _prodParmRelease.ProdId));
        }
        else
        {
            this.initProdTable(_prodParmRelease.ProdId).status().runRelease(_prodParmRelease, false, _prodPurch, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter value to an instance of the
    ///    <c>ProdMultiRelease</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, you may have to unpack some
    ///    prompt-related variables.
    /// </remarks>
    boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conpeek(_packedClass,1);
        container   base;
        boolean     dummy;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                ret = super(base);
                break;
            case 5:
                [version,
                 parmId,
                 dummy,
                 standardParmRelease.PrintRouteCard,
                 standardParmRelease.PrintRouteJob,
                 standardParmRelease.PrintJob,
                 standardParmRelease.References,
                 standardParmRelease.SetupPrintJob,
                 standardParmRelease.SetupPrintRouteCard,
                 standardParmRelease.SetupPrintRouteJob
                ] = _packedClass;
                ret = true;
                break;
            default:
                this.initParmDefault();
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdMultiRelease construct(Args _args = null)
    {
        ProdMultiRelease prodMultiRelease = new ProdMultiRelease();

        return prodMultiRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@SYS12161";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.parmEnum() == RunChoose::Run)
        {
            ProdMultiRelease prodMultiRelease = ProdMultiRelease::construct(_args);
            RunBaseMultiParm::initFromForm(prodMultiRelease,_args);

            if (! prodMultiRelease.prompt())
            {
                return;
            }

            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(prodMultiRelease.formName(), _args.menuItemName()))
            {
                prodMultiRelease.runOnServer();
            }
            prodMultiRelease.refreshCaller(_args);
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>