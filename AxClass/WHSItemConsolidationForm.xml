<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSItemConsolidationForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class WHSItemConsolidationForm
{
    private InventLocationId    inventLocationId;

    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buttonConsolidate_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method that creates work when the consolidation button is clicked.
    /// </summary>
    /// <param name="_whsItemConsolidationViewDS">
    /// The form datasource used to create consolidation work.
    /// </param>
    public void buttonConsolidate_clicked(FormDataSource _whsItemConsolidationViewDS)
    {
        // Prompt for to location and movement code.
        Dialog  dialog  = new Dialog("@WAX:ButtomItemConsolidateWorkCreate");
        DialogField dialogFieldLocation  = dialog.addField(extendedTypeStr(WMSLocationId));
        DialogField dialogFieldMovementType = dialog.addField(extendedTypeStr(WHSMovementTypeCode));

        dialog.windowType(FormWindowType::PopUp);
        dialogFieldLocation.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(whsItemConsolidationForm, lookupConsolidateLocation), this);

        dialog.run();

        if (dialog.closedOk())
        {
            // Create movement work
            WMSLocationId       toLocationId        = dialogFieldLocation.value();
            WHSMovementTypeCode movementTypeCode    = dialogFieldMovementType.value();

            // Validate to location and movement type are specified.
            if (toLocationId && movementTypeCode)
            {
                this.consolidateSelectedLocations(_whsItemConsolidationViewDS, toLocationId, movementTypeCode);
            }
            else
            {
                warning("@WAX:ItemConsolidationDialogFieldValidation");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupConsolidateLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the lookup drop down for the location to consolidate inventory.
    /// </summary>
    /// <param name="_locationIdLookup">
    /// The form control the lookup will be used for.
    /// </param>
    public void lookupConsolidateLocation(FormStringControl _locationIdLookup)
    {
        SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(WMSLocation), _locationIdLookup);
        Query                   query                   = new Query();
        QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(WMSLocation));

        sysTableLookup.addLookupfield(fieldNum(WMSLocation, WMSLocationId));
        sysTableLookup.addLookupfield(fieldNum(WMSLocation, InventLocationId));

        queryBuildDataSource.addRange(fieldNum(WMSLocation, InventLocationId)).value(SysQuery::value(inventLocationId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateSelectedLocations</Name>
				<Source><![CDATA[
    private void consolidateSelectedLocations(
        FormDataSource      _itemConsolidationViewDS,
        WMSLocationId       _toLocationId,
        WHSMovementTypeCode _movementTypeCode)
    {
        using (var activityContext = this.instrumentationLogger().itemConsolidationActivities().consolidateSelectedLocations())
        {
            this.instrumentationLogger().logRecordInformation(WMSLocation::find(_toLocationId, this.parmInventLocationId()));
            this.instrumentationLogger().logRecordInformation(WHSMovementType::find(_movementTypeCode));

            int selectedLocations;
            int consolidatedLocations;

            MultiSelectionHelper multiSelectionHelper = MultiSelectionHelper::construct();
            multiSelectionHelper.parmDatasource(_itemConsolidationViewDS);

            whsItemConsolidationView itemConsolidationView = multiSelectionHelper.getfirst() as whsItemConsolidationView;

            while (itemConsolidationView.RecId != 0)
            {
                if (itemConsolidationView.WMSLocationId != _toLocationId)
                {
                    this.createConsolidationWork(itemConsolidationView.wMSLocationId, _toLocationId, _movementTypeCode);
                    consolidatedLocations++;
                }

                selectedLocations++;

                itemConsolidationView = multiSelectionHelper.getNext() as whsItemConsolidationView;
            }

            this.instrumentationLogger().itemConsolidationActivities().consolidatedSelectedLocations(activityContext, selectedLocations, consolidatedLocations);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConsolidationWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates movement work to consolidate inventory.
    /// </summary>
    private void createConsolidationWork(
        WMSLocationId       _fromLocationId,
        WMSLocationId       _toLocationId,
        WHSMovementTypeCode _movementTypeCode)
    {
        using (var activityContext = this.instrumentationLogger().itemConsolidationActivities().createConsolidationWork())
        {
            WMSLocation fromLocation = WMSLocation::find(_fromLocationId, this.parmInventLocationId());

            this.instrumentationLogger().logRecordInformation(fromLocation);

            ttsbegin;

            // Generate movement creation temp table.
            WHSMovementCreate movementCreate;
            
            movementCreate.buildFromWMSLocation(fromLocation);
        
			// Movement records could have been created with no invent quantity
			// due to work existing for it.
            this.checkMovementRecords(movementCreate);

            // Update to location, movement type code, and quantity to move.
            update_recordset movementCreate
                setting ToLoc               = _toLocationId,
                        MovementTypeCode    = _movementTypeCode,
                        QtyToMove           = movementCreate.InventQty;

            // Create movement work.
            movementCreate.createMovementWork(fromLocation);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMovementRecords</Name>
				<Source><![CDATA[
	private void checkMovementRecords(WHSMovementCreate _movementCreate)
    {
        select firstOnly RecId from _movementCreate
            where _movementCreate.InventQty == 0;

        if (_movementCreate.RecId != 0)
        {
            throw error("@WAX:ItemConsolidationNoQuantityError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>