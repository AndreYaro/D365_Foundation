<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineSalesLineImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>SalesLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(SalesLine))]
public class TaxModelDocLineSalesLineImpl extends TaxModelDocLineBaseImpl
{
    SalesTable salesTable;
    SalesLine  salesLine;

    SalesCalcTax  salesCalcTax;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        return salesTable.custTable_CustAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales order line shipping date.
    /// </summary>
    /// <returns>
    /// The sales order line shipping date.
    /// </returns>
    public Date getDeliveryDate()
    {
        return salesLine.deliveryDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount.
    /// </summary>
    /// <returns>The total discount amount.
    /// </returns>
    public Amount getDiscAmount()
    {
        Amount totalDisc;

        PriceUnit priceUnit = salesLine.PriceUnit == 0? 1 : salesLine.PriceUnit;

        Amount netAmount = (salesLine.SalesQty * ((salesLine.SalesPrice - salesLine.discAmount()) / priceUnit)) * (100 - salesLine.discPercent()) / 100;

        totalDisc = netAmount * salesTable.DiscPercent / 100 + (salesLine.SalesQty * salesLine.SalesPrice / priceUnit) - netAmount;

        return totalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        Qty ret;

        if (salesCalcTax)
        {
            ret = salesCalcTax.transQty();
        }
        else
        {
            if (salesLine.RemainSalesFinancial * salesLine.RemainSalesPhysical < 0)
            {
                ret = salesLine.RemainSalesFinancial;
            }
            else
            {
                ret = salesLine.RemainSalesPhysical + salesLine.RemainSalesFinancial;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return salesTable.createDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        salesLine = _documentLineMap;
        salesTable = salesLine.salesTable();

        super(_documentLineMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBaseModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the base Model.
    /// </summary>
    /// <param name="_baseModel">
    /// The base model.
    /// </param>
    public void setBaseModel(Object _baseModel)
    {
        if (_baseModel is SalesCalcTax)
        {
            salesCalcTax = _baseModel as SalesCalcTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        TaxableDocumentDescriptorFactory	taxableDocumentDescriptorFactory = new TaxableDocumentDescriptorFactory();
        TaxableDocumentDescriptor	taxableDocumentDescriptor = TaxableDocumentDescriptor::construct(
            taxableDocumentDescriptorFactory.determineTaxableDocumentDescriptor(salesTable), salesTable);

        if (salesTable.ProjId
            && !taxableDocumentDescriptor.skipTaxDocument())
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type.
    /// </summary>
    /// <returns>
    /// The transaction tax module type with sales invoice.
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        TaxableDocumentDescriptorFactory    taxableDocumentDescriptorFactory    = new TaxableDocumentDescriptorFactory();
        TaxableDocumentDescriptor           taxableDocumentDescriptor           = TaxableDocumentDescriptor::construct(taxableDocumentDescriptorFactory.determineTaxableDocumentDescriptor(salesTable), salesTable);

        if (salesTable.ProjId
            && !taxableDocumentDescriptor.skipTaxDocument())
        {
            if (salesTable.ProjId)
            {
                return TaxModuleType::Project;
            }
            else
            {
                return TaxModuleType::SalesInvoice;
            }
        }
        else
        {
            return TaxModuleType::SalesInvoice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return salesLine.SalesStatus != SalesStatus::Invoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTaxPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsPostalAddress getTransTaxPostalAddress()
    {
        return LogisticsPostalAddress::findRecId(this.getTaxLocationRefRecid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <param name = "_type">The transaction tax information type.</param>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    /// This method is used to init TransTaxInformation.CompanyLocation, which should be defaulted from company address.
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        if (this.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getReferenceTaxModelDocLine().getTaxLogisticsPostalAddress(_type);
        }
        else
        {
            InventDim inventDim = salesline.inventDim();
            return LogisticsPostalAddress::findByLocation(
                TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(inventDim.InventLocationId, inventDim.InventSiteId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return salesLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount.
    /// </summary>
    /// <returns>The line amount.
    /// </returns>
    public Amount getLineAmount()
    {
        return salesLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return salesTable.createDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return salesTable.createDate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>