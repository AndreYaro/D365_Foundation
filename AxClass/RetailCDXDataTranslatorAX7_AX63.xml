<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDataTranslatorAX7_AX63</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RetailCDXDataTranslatorAX7_AX63 extends RetailCDXDataTranslator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preChangeTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manipulates data before change tracking executes.
    /// </summary>
    /// <param name = "leContainer">Container of legal entities involved in this data synchronization session.</param>
    public void preChangeTracking(container leContainer)
    {
        RetailConnJobId jobId = ctContext.paramJobID();

        switch (jobId)
        {
            case '1090_AX63':
            case '1060_AX63':
                // Populate legacy till layout tables.
                using (var lock = ReqReaderWriterLock::construct())
                {
                    if (lock.tryEnterWriterLock('RetailTillLayoutLegacy'))
                    {
                        RetailTillLayoutLegacy::duplicateDowngradeData();
                        RetailTillLayoutStaffLegacy::duplicateDowngradeData();
                        RetailTillLayoutStoreLegacy::duplicateDowngradeData();
                        RetailTillLayoutZoneReferenceLegacy::duplicateDowngradeData();
                    }
                    else
                    {
                        // Allow up to 10 mins for the other downgrade job to finish.
                        for (int tryCount = 0; tryCount < 120; tryCount++)
                        {
                            sleep(5000); // 5 sec
                            if (lock.tryEnterWriterLock('RetailTillLayoutLegacy'))
                            {
                                // After another batch released the lock, data already poplated in tables, no need to run downgrade job again.
                                break;
                            }
                        }
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preDataOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manipulates data before data is written to package.
    /// </summary>
    /// <param name = "leContainer">Container of legal entities involved in this data synchronization session.</param>
    public void preDataOutput(container leContainer)
    {
        RetailCDXDownloadSubjobSourceContext subJobContext = this.paramSubJobSourceContext();

        switch (subJobContext.paramAXSourceTableName())
        {
            case tableStr(RetailInventDimLegacy):
                container legalEntityContainer = subJobContext.paramDataSyncContext().paramLEContainer();
                for (int i = 1; i <= conLen(legalEntityContainer); ++i)
                {
                    DataAreaId legalEntity = conPeek(legalEntityContainer, i);

                    changeCompany(legalEntity)
                    {
                        this.transformInventDim();
                    }
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transforms the inventory dimension data to AX2012 format.
    /// </summary>
    private void transformInventDim()
    {
        this.insertRecords(tableNum(InventDim));
        this.insertRecords(tableNum(RetailInventDimSHA1HashTableLegacy));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecords</Name>
				<Source><![CDATA[
    private void insertRecords(RefTableId tableId)
    {
        Query query = new Query();
        QueryBuildDataSource inventDimDS = query.addDataSource(tableNum(InventDim));
        QueryBuildDataSource hashTableLegacyDS = inventDimDS.addDataSource(tableNum(RetailInventDimSHA1HashTableLegacy));
        hashTableLegacyDS.joinMode(JoinMode::OuterJoin);
        hashTableLegacyDS.relations(false);
        hashTableLegacyDS.addLink(fieldNum(InventDim, inventDimId), fieldNum(RetailInventDimSHA1HashTableLegacy, InventDimId));

        RetailCDXDataDistributionTableFilterType tableFilterType = RetailCDXDataDistributionTable::find(ctContext.getChannelSchema(), tableId).Type;

        QueryBuildDataSource baseTableDS;
        int baseTableRecIdFieldNum;

        if (tableId == tableNum(InventDim))
        {
            baseTableDS = inventDimDS;
            baseTableRecIdFieldNum = fieldNum(InventDim, RecId);
        }
        else if (tableId == tableNum(RetailInventDimSHA1HashTableLegacy))
        {
            baseTableDS = hashTableLegacyDS;
            baseTableRecIdFieldNum = fieldNum(RetailInventDimSHA1HashTableLegacy, RecId);
        }

        QueryBuildDataSource filteredRecordsTempTableDS;
        QueryBuildDataSource legacyFilteredRecordsTempTableDS;

        // if useFilteredRecordsTempTable returns true then join FilteredRecordsTempTable, otherwise use the InventDim table directly
        if (this.paramSubJobSourceContext().shouldUseFilteredRecordsTempTables(tableFilterType))
        {
            // if cache based query is enable and is full sync, then use new FilteredRecordsTempTable, otherwise use legacyFilteredRecordsTempTable
            if (ctContext.paramIsCacheBasedQueryEnabled() && ctContext.paramIsInitSync())
            {
                filteredRecordsTempTableDS = baseTableDS.addDataSource(tableNum(RetailTmpCDXDataDistributionFilteredRecords));
                filteredRecordsTempTableDS.joinMode(JoinMode::ExistsJoin);
                filteredRecordsTempTableDS.relationS(false);
                filteredRecordsTempTableDS.addLink(baseTableRecIdFieldNum, fieldNum(RetailTmpCDXDataDistributionFilteredRecords, RefRecId));
            }
            else
            {
                legacyFilteredRecordsTempTableDS = baseTableDS.addDataSource(tableNum(RetailCDXChangeRefTable2));
                legacyFilteredRecordsTempTableDS.joinMode(JoinMode::ExistsJoin);
                legacyFilteredRecordsTempTableDS.relationS(false);
                legacyFilteredRecordsTempTableDS.addRange(fieldNum(RetailCDXChangeRefTable2, RefTableID)).value(int2Str(tableId));
                legacyFilteredRecordsTempTableDS.addLink(baseTableRecIdFieldNum, fieldNum(RetailCDXChangeRefTable2, RefRecId));
            }
        }
        else
        {
            // InventDim table might be added to the data distribution xml file and has RangeBasedFilter type, so needs to get range value if exists
            RetailCDXDataDistributionQuery dataDistributionQuery;

            select firstonly IsGlobal, PackedQuery, QueryID
            from dataDistributionQuery
                where dataDistributionQuery.RetailConnChannelSchema == ctContext.getChannelSchema()
                    && dataDistributionQuery.RefTableID == tableId
                    && dataDistributionQuery.IsCacheBasedQuery == NoYes::No;

            if (dataDistributionQuery)
            {
                Query dataSelectorQuery = new Query(dataDistributionQuery.packedQuery);
                QueryBuildDataSource baseTableDataSource = dataSelectorQuery.dataSourceNo(1);

                // range value in the packed query has datasource name (i.e t1.Product = 0), so we need to set the name here. And since there is only one table in the query it's always t1
                baseTableDS.name('t1');

                for(int i = 1; i <= baseTableDataSource.rangeCount(); i++)
                {
                    QueryBuildRange range = baseTableDataSource.range(i);
                    baseTableDS.addRange(range.field()).value(range.value());
                }
            }
        }

        query.clearAllFields();
        this.addFields(query);
        QueryRun queryRun = new QueryRun(query);

        if (filteredRecordsTempTableDS)
        {
            queryRun.setRecord(ctContext.getFullSyncFilteredRecordsTempTableInstance(tableId));
        }

        if (legacyFilteredRecordsTempTableDS)
        {
            queryRun.setRecord(ctContext.openChangeRefTable2());
        }

        Map fm = this.buildFieldMap(query);
        RetailInventDimLegacy inventDimLegacyTemp = ctContext.openTempDBTable(tableStr(RetailInventDimLegacy));
        Query::insert_recordset(inventDimLegacyTemp, fm, queryRun.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFields</Name>
				<Source><![CDATA[
    private void addFields(Query query)
    {
        QueryBuildDataSource inventDimDS = query.dataSourceTable(tableNum(InventDim));
        QueryBuildDataSource hashTableLegacyDS = query.dataSourceTable(tableNum(RetailInventDimSHA1HashTableLegacy));

        this.addInventDimFields(inventDimDS);
        this.addHashTableLegacyFields(hashTableLegacyDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventDimFields</Name>
				<Source><![CDATA[
    private void addInventDimFields(QueryBuildDataSource inventDimDS)
    {
        QueryBuildFieldList inventDimFieldList = inventDimDS.fields();
        inventDimFieldList.addField(fieldNum(InventDim, configId));
        inventDimFieldList.addField(fieldNum(InventDim, inventBatchId));
        inventDimFieldList.addField(fieldNum(InventDim, InventColorId));
        inventDimFieldList.addField(fieldNum(InventDim, inventDimId));
        inventDimFieldList.addField(fieldNum(InventDim, InventGtdId_RU));
        inventDimFieldList.addField(fieldNum(InventDim, InventLocationId));
        inventDimFieldList.addField(fieldNum(InventDim, InventOwnerId_RU));
        inventDimFieldList.addField(fieldNum(InventDim, InventProfileId_RU));
        inventDimFieldList.addField(fieldNum(InventDim, inventSerialId));
        inventDimFieldList.addField(fieldNum(InventDim, InventSiteId));
        inventDimFieldList.addField(fieldNum(InventDim, InventSizeId));
        inventDimFieldList.addField(fieldNum(InventDim, InventStatusId));
        inventDimFieldList.addField(fieldNum(InventDim, InventStyleId));
        inventDimFieldList.addField(fieldNum(InventDim, LicensePlateId));
        inventDimFieldList.addField(fieldNum(InventDim, wMSLocationId));
        inventDimFieldList.addField(fieldNum(InventDim, wMSPalletId));
        inventDimFieldList.addField(fieldNum(InventDim, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHashTableLegacyFields</Name>
				<Source><![CDATA[
    private void addHashTableLegacyFields(QueryBuildDataSource hashTableLegacyDS)
    {
        QueryBuildFieldList inventDimSHA1HashTableFieldList = hashTableLegacyDS.fields();
        inventDimSHA1HashTableFieldList.addField(fieldNum(RetailInventDimSHA1HashTableLegacy, LegacySHA1Hash));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldMap</Name>
				<Source><![CDATA[
    private Map buildFieldMap(Query query)
    {
        QueryBuildDataSource inventDimDS = query.dataSourceTable(tableNum(InventDim));
        QueryBuildDataSource inventDimSHA1HashTableDS = query.dataSourceTable(tableNum(RetailInventDimSHA1HashTableLegacy));

        Map fm;

        fm = new Map(Types::String, Types::Container);
        fm.insert(fieldStr(RetailInventDimLegacy, configId), [inventDimDS.uniqueId(), 'configId']);
        fm.insert(fieldStr(RetailInventDimLegacy, inventBatchId), [inventDimDS.uniqueId(), 'inventBatchId']);
        fm.insert(fieldStr(RetailInventDimLegacy, InventColorId), [inventDimDS.uniqueId(), 'InventColorId']);
        fm.insert(fieldStr(RetailInventDimLegacy, inventDimId), [inventDimDS.uniqueId(), 'inventDimId']);
        fm.insert(fieldStr(RetailInventDimLegacy, InventGtdId_RU), [inventDimDS.uniqueId(), 'InventGtdId_RU']);
        fm.insert(fieldStr(RetailInventDimLegacy, InventLocationId), [inventDimDS.uniqueId(), 'InventLocationId']);
        fm.insert(fieldStr(RetailInventDimLegacy, InventOwnerId_RU), [inventDimDS.uniqueId(), 'InventOwnerId_RU']);
        fm.insert(fieldStr(RetailInventDimLegacy, InventProfileId_RU), [inventDimDS.uniqueId(), 'InventProfileId_RU']);
        fm.insert(fieldStr(RetailInventDimLegacy, inventSerialId), [inventDimDS.uniqueId(), 'inventSerialId']);
        fm.insert(fieldStr(RetailInventDimLegacy, InventSiteId), [inventDimDS.uniqueId(), 'InventSiteId']);
        fm.insert(fieldStr(RetailInventDimLegacy, InventSizeId), [inventDimDS.uniqueId(), 'InventSizeId']);
        fm.insert(fieldStr(RetailInventDimLegacy, InventStatusId), [inventDimDS.uniqueId(), 'InventStatusId']);
        fm.insert(fieldStr(RetailInventDimLegacy, InventStyleId), [inventDimDS.uniqueId(), 'InventStyleId']);
        fm.insert(fieldStr(RetailInventDimLegacy, LicensePlateId), [inventDimDS.uniqueId(), 'LicensePlateId']);
        fm.insert(fieldStr(RetailInventDimLegacy, wMSLocationId), [inventDimDS.uniqueId(), 'wMSLocationId']);
        fm.insert(fieldStr(RetailInventDimLegacy, wMSPalletId), [inventDimDS.uniqueId(), 'wMSPalletId']);
        fm.insert(fieldStr(RetailInventDimLegacy, OriginalRecId), [inventDimDS.uniqueId(), 'RecId']);
        fm.insert(fieldStr(RetailInventDimLegacy, LegacySHA1Hash), [inventDimSHA1HashTableDS.uniqueId(), 'LegacySHA1Hash']);

        return fm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>