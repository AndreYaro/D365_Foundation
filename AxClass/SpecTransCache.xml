<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Provides caching of <c>SpecTrans</c> records.
/// </summary>
/// <remarks>
///    This class contains records that share common <c>SpecCompany</c>, <c>SpecTableId</c>, and
///    <c>SpecRecId</c> fields.
///    Used by the <c>SpecTransManager</c> class.
/// </remarks>
class SpecTransCache implements SysPackable
{
    // Spec reference information
    CompanyId specCompany;
    tableId specTableId;
    RefRecId specRecId;

    // Outer Map used for cache
    // Key: CompanyId
    // Value: Inner Map used for cache
    //   Key: RefRecId
    //   Value: SpecTrans record
    Map existingSpecTransCollection;
    int specTransCount;

    // Map used for tracking references without a SpecTrans (no exists)
    // Key: CompanyId
    // Value: Set of RefRecIds
    Map missingSpecTransCollection;

    // Map used for tracking if a SpecTrans is marked by another
    // Key: CompanyId
    // Value: Map - used for cache
    //   Key: RefRecId
    //   Value: NoYes value
    Map markedByOtherSpecTransCollection;

    // Tracking for SpecTrans record marked for full Settlement
    CompanyId fullSettlementCompany;
    tableId fullSettlementTableId;
    RefRecId fullSettlementRefRecId;

    // Tracking for SpecTrans record marked as primary payment
    CompanyId markedPaymentCompany;
    tableId markedPaymentTableId;
    RefRecId markedPaymentRefRecId;

    #LOCALMACRO.CurrentList
        specCompany,
        specTableId,
        specRecId,
        specTransCount,
        fullSettlementCompany,
        fullSettlementTableId,
        fullSettlementRefRecId,
        markedPaymentCompany,
        markedPaymentTableId,
        markedPaymentRefRecId
    ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>SpecTrans</c> record to the cache.
    /// </summary>
    /// <param name="_specTrans">
    /// The <c>SpecTrans</c> record to be cached.
    /// </param>
    public void add(SpecTrans _specTrans)
    {
        Map innerMap;
        // Remove from the missing cache
        this.removeAsMissing(_specTrans.RefCompany, _specTrans.RefTableId, _specTrans.RefRecId);

        // Add to the exists cache
        if (existingSpecTransCollection.exists(_specTrans.RefCompany))
        {
            // Company map exists, get inner SpecTrans map
            innerMap = existingSpecTransCollection.lookup(_specTrans.RefCompany);

            // Insert record into inner SpecTrans map
            innerMap.insert(_specTrans.RefRecId, _specTrans);

            // Update outer Company map with updated inner SpecTrans map
            existingSpecTransCollection.insert(_specTrans.RefCompany, innerMap);
        }
        else
        {
            // Initialize inner map
            innerMap = new Map(Types::Int64, Types::Record);

            // Insert record into inner SpecTrans map
            innerMap.insert(_specTrans.RefRecId, _specTrans);

            // Insert inner SpecTrans map into outer Company map
            existingSpecTransCollection.insert(_specTrans.RefCompany, innerMap);
        }

        // Track if FullSettlement or Payment fields are set on the added record
        if (_specTrans.FullSettlement == NoYes::Yes)
        {
            fullSettlementCompany = _specTrans.RefCompany;
            fullSettlementTableId = _specTrans.RefTableId;
            fullSettlementRefRecId = _specTrans.RefRecId;
        }

        if (_specTrans.Payment == NoYes::Yes)
        {
            markedPaymentCompany = _specTrans.RefCompany;
            markedPaymentTableId = _specTrans.RefTableId;
            markedPaymentRefRecId = _specTrans.RefRecId;
        }

        // Increment SpecTrans count
        specTransCount++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAsMissing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the reference to the cache for tracking missing records.
    /// </summary>
    /// <param name="_refCompany">
    ///    The reference company of the cached transaction.
    /// </param>
    /// <param name="_refTableId">
    ///    The reference <c>TableId</c> value of the cached transaction.
    /// </param>
    /// <param name="_refRecId">
    ///    The <c>RecId</c> value reference of the cached transaction.
    /// </param>
    public void addAsMissing(CompanyId _refCompany, tableId _refTableId, RefRecId _refRecId)
    {
        Set missingSet;
        // Add reference to the no-exists set
        if (missingSpecTransCollection.exists(_refCompany))
        {
            // Company map exists, get reference set
            missingSet = missingSpecTransCollection.lookup(_refCompany);

            // Add reference to no-exists set
            missingSet.add(_refRecId);

            // Update Company map with updated set
            missingSpecTransCollection.insert(_refCompany, missingSet);
        }
        else
        {
            // Initialize no-exists set
            missingSet = new Set(Types::Int64);

            // Add reference to no-exists set
            missingSet.add(_refRecId);

            // Add no-exists set to Company map
            missingSpecTransCollection.insert(_refCompany, missingSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMarkedByOtherSpecInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds information to the cache about whether a <c>SpecTrans</c> record has been marked by another
    ///    <c>SpecTrans</c> record.
    /// </summary>
    /// <param name="_refCompany">
    ///    The reference company of the cached transaction.
    /// </param>
    /// <param name="_refRecId">
    ///    The reference record ID of the cached transaction.
    /// </param>
    /// <param name="_marked">
    ///    A Boolean value that specifies whether the <c>specTrans</c> is already marked by another
    ///    <c>SpecTrans</c> record.
    /// </param>
    public void addMarkedByOtherSpecInfo(CompanyId _refCompany, RefRecId _refRecId, boolean _marked)
    {
        Map markedByOtherInnerMap;
        // Check if the company exists in the cache
        if (markedByOtherSpecTransCollection.exists(_refCompany))
        {
            // Company map exists, get inner map
            markedByOtherInnerMap = markedByOtherSpecTransCollection.lookup(_refCompany);
        }
        else
        {
            // Initialize a new inner map for the company
            markedByOtherInnerMap = new Map(Types::Int64, Types::Enum);
            // Add the inner map to the outer company map
            markedByOtherSpecTransCollection.insert(_refCompany, markedByOtherInnerMap);
        }

        if (!markedByOtherInnerMap.exists(_refRecId))
        {
            // Insert value into inner map
            markedByOtherInnerMap.insert(_refRecId, (_marked ? NoYes::Yes : NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFullSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears variables that are used for tracking the <c>SpecTrans</c> record in the cache marked for
    ///    full settlement.
    /// </summary>
    private void clearFullSettlement()
    {
        fullSettlementCompany = '';
        fullSettlementTableId = 0;
        fullSettlementRefRecId = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMarkedPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears variables that are used for tracking the <c>SpecTrans</c> record in the cache marked as
    ///    primary payment.
    /// </summary>
    private void clearMarkedPayment()
    {
        markedPaymentCompany = '';
        markedPaymentTableId = 0;
        markedPaymentRefRecId = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SpecTrans</c> record from the cache.
    /// </summary>
    /// <param name="_refCompany">
    /// The reference company of the cached transaction.
    /// </param>
    /// <param name="_refTableId">
    /// The reference table ID of the cached transaction.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record ID of the cached transaction.
    /// </param>
    /// <returns>
    /// The <c>SpecTrans</c> record from the cache.
    /// </returns>
    public SpecTrans get(CompanyId _refCompany, tableId _refTableId, RefRecId _refRecId)
    {
        SpecTrans cachedSpecTrans;
        Map innerMap;
        // Get referenced SpecTrans record from cache
        if (existingSpecTransCollection.exists(_refCompany))
        {
            innerMap = existingSpecTransCollection.lookup(_refCompany);

            if (innerMap.exists(_refRecId))
            {
                cachedSpecTrans = innerMap.lookup(_refRecId);
            }
        }

        return cachedSpecTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllSpecTransMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a Map that contains all the <c>SpecTrans</c> records in the cache.
    /// </summary>
    /// <returns>
    ///    The Map that contains the <c>SpecTrans</c> records.
    /// </returns>
    /// <remarks>
    ///    The key of the map contains the <c>RecId</c> and the value contains the <c>SpecTrans</c> record.
    /// </remarks>
    public Map getAllSpecTransMap()
    {
        Map allSpecTrans;
        MapEnumerator outerMap;
        MapEnumerator innerMap;
        SpecTrans specTransFromCache;
        allSpecTrans = new Map(Types::Int64, Types::Record);

        outerMap = new MapEnumerator(existingSpecTransCollection);

        while (outerMap.moveNext())
        {
            innerMap = new MapEnumerator(outerMap.currentValue());

            while (innerMap.moveNext())
            {
                specTransFromCache = innerMap.currentValue();
                allSpecTrans.insert(specTransFromCache.RecId, specTransFromCache);
            }
        }

        return allSpecTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullSettlementSpecTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SpecTrans</c> record in the cache marked for full settlement.
    /// </summary>
    /// <returns>
    /// A <c>SpecTrans</c> record from the cache.
    /// </returns>
    public SpecTrans getFullSettlementSpecTrans()
    {
        SpecTrans foundSpecTrans;
        foundSpecTrans = this.get(fullSettlementCompany, fullSettlementTableId, fullSettlementRefRecId);

        return foundSpecTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedByOtherSpec</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the status of the cache for whether a <c>SpecTrans</c> record is already marked
    ///    by another <c>SpecTrans</c> record.
    /// </summary>
    /// <param name="_refCompany">
    ///    The reference company of the cached transaction.
    /// </param>
    /// <param name="_refRecId">
    ///    The reference record ID of the cached transaction.
    /// </param>
    /// <returns>
    ///    An integer value that is the state of the cache request.
    /// </returns>
    public int getMarkedByOtherSpec(CompanyId _refCompany, RefRecId _refRecId)
    {
        Map innerMap;
        int returnValue;
        #define.NotMarkedByOther(0)
        #define.MarkedByOther(1)
        #define.NotInCache(2)
        // Check if the company exists in the marked by other spec cache
        if (markedByOtherSpecTransCollection.exists(_refCompany))
        {
            // Get the inner map for the company.
            innerMap = markedByOtherSpecTransCollection.lookup(_refCompany);

            // Read the cached value if it is in the cache.
            if (innerMap.exists(_refRecId))
            {
                returnValue = ((innerMap.lookup(_refRecId) == NoYes::Yes)? #MarkedByOther : #NotMarkedByOther);
            }
            else
            {
                returnValue = #NotInCache;
            }
        }
        else
        {
            // Not in cache
            returnValue = #NotInCache;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMarkedByOtherSpec</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the cache for whether a <c>SpecTrans</c> record is already marked by another <c>SpecTrans</c> record.
    /// </summary>
    /// <param name="_refCompany">
    ///    The reference company of the cached transaction.
    /// </param>
    /// <param name="_refRecId">
    ///    The reference record ID of the cached transaction.
    /// </param>
    internal void clearMarkedByOtherSpec(CompanyId _refCompany, RefRecId _refRecId)
    {
        // Check if the company exists in the marked by other spec cache
        if (markedByOtherSpecTransCollection.exists(_refCompany))
        {
            // Get the inner map for the company.
            Map innerMap = markedByOtherSpecTransCollection.lookup(_refCompany);

            // Read the cached value if it is in the cache.
            if (innerMap.exists(_refRecId))
            {
                innerMap.remove(_refRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedPaymentSpecTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>SpecTrans</c> record from the cache marked as primary payment.
    /// </summary>
    /// <returns>
    ///    A <c>SpecTrans</c> record from the cache.
    /// </returns>
    public SpecTrans getMarkedPaymentSpecTrans()
    {
        SpecTrans foundSpecTrans;
        foundSpecTrans = this.get(markedPaymentCompany, markedPaymentTableId, markedPaymentRefRecId);

        return foundSpecTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a count of the <c>SpecTrans</c> records currently tracked in the cache.
    /// </summary>
    /// <returns>
    ///    The count of <c>SpecTrans</c> records.
    /// </returns>
    public int getSpecTransCount()
    {
        return specTransCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the objects used for the cache.
    /// </summary>
    private void initializeCache()
    {
        existingSpecTransCollection = new Map(Types::String, Types::Class);
        missingSpecTransCollection = new Map(Types::String, Types::Class);
        markedByOtherSpecTransCollection = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inMissingCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the given reference is tracked in the cache of transactions without a related
    ///    <c>SpecTrans</c> record.
    /// </summary>
    /// <param name="_refCompany">
    ///    The reference company of the cached transaction.
    /// </param>
    /// <param name="_refTableId">
    ///    The reference <c>TableId</c> value of the cached transaction.
    /// </param>
    /// <param name="_refRecId">
    ///    The <c>RecId</c> value reference of the cached transaction.
    /// </param>
    /// <returns>
    ///    true if the reference is found in the cache; otherwise, false.
    /// </returns>
    public boolean inMissingCache(CompanyId _refCompany, tableId _refTableId, RefRecId _refRecId)
    {
        Set missingSet;
        boolean inMissingSet = false;
        if (missingSpecTransCollection.exists(_refCompany))
        {
            // Company map exists, get reference set
            missingSet = missingSpecTransCollection.lookup(_refCompany);

            inMissingSet = missingSet.in(_refRecId);
        }

        return inMissingSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs initialization for the <c>SpecTransCache</c> class.
    /// </summary>
    /// <param name="_specReference">
    ///    The table buffer that is used for initializing the class.
    /// </param>
    /// <remarks>
    ///    This method sets class variables that define the common <c>SpecCompany</c>, <c>SpecTableId</c>, and
    ///    <c>SpecRecId</c> fields for all records in the cache.
    /// </remarks>
    public void new(Common _specReference = null)
    {
        if (_specReference)
        {
            // Initialize class variables for spec reference
            specCompany = _specReference.company();
            specTableId = _specReference.TableId;
            specRecId = _specReference.RecId;
        }

        // Initialize cache maps
        this.initializeCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        container existingSpecTransCollectionPack = conNull();
        container missingSpecTransCollectionPack = conNull();
        container markedByOtherSpecTransCollectionPack = conNull();

        if (existingSpecTransCollection)
        {
            existingSpecTransCollectionPack = existingSpecTransCollection.pack();
        }

        if (missingSpecTransCollection)
        {
            missingSpecTransCollectionPack = missingSpecTransCollection.pack();
        }

        if (markedByOtherSpecTransCollection)
        {
            markedByOtherSpecTransCollectionPack = markedByOtherSpecTransCollection.pack();
        }

        return [#CurrentList, existingSpecTransCollectionPack, missingSpecTransCollectionPack, markedByOtherSpecTransCollectionPack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the <c>SpecTrans</c> record from the cache.
    /// </summary>
    /// <param name="_removeRefCompany">
    ///    The reference company of the cached transaction.
    /// </param>
    /// <param name="_removeRefTableId">
    ///    The reference <c>TableId</c> of the cached transaction.
    /// </param>
    /// <param name="_removeRefRecId">
    ///    The <c>RecId</c> reference of the cached transaction.
    /// </param>
    public void remove(CompanyId _removeRefCompany, tableId _removeRefTableId, RefRecId _removeRefRecId)
    {
        Map innerMap;
        // Remove from the exists cache
        if (existingSpecTransCollection.exists(_removeRefCompany))
        {
            // Get Company map
            innerMap = existingSpecTransCollection.lookup(_removeRefCompany);

            if (!innerMap.exists(_removeRefRecId))
            {
                throw error(strFmt("@SYS102239", _removeRefRecId));
            }
            else
            {
                // Remove SpecTrans from inner map
                innerMap.remove(_removeRefRecId);

                specTransCount--;

                // Update Company map
                existingSpecTransCollection.insert(_removeRefCompany, innerMap);

                // Add reference to the no-exists set
                this.addAsMissing(_removeRefCompany, _removeRefTableId, _removeRefRecId);
            }
        }

        // Track if FullSettlement or Payment fields were set on removed record
        if (_removeRefRecId == fullSettlementRefRecId)
        {
            this.clearFullSettlement();
        }

        if (_removeRefRecId == markedPaymentRefRecId)
        {
            this.clearMarkedPayment();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all <c>SpecTrans</c> records from the cache.
    /// </summary>
    public void removeAll()
    {
        MapEnumerator specTransToRemove;
        SpecTrans specTransFromCache;
        // Loop over SpecTrans records in cache & remove 1-by-1 so both caches are updated
        specTransToRemove = new MapEnumerator(this.getAllSpecTransMap());

        while (specTransToRemove.moveNext())
        {
            specTransFromCache = specTransToRemove.currentValue();

            this.remove(specTransFromCache.RefCompany, specTransFromCache.RefTableId, specTransFromCache.RefRecId);
        }

        // Reset full settlement, marked payment and count tracking fields.
        this.clearFullSettlement();
        this.clearMarkedPayment();
        specTransCount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAsMissing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the references to the objects from the cache.
    /// </summary>
    /// <param name="_refCompany">
    ///    The reference company of the cached transaction.
    /// </param>
    /// <param name="_refTableId">
    ///    The reference <c>TableId</c> value of the cached transaction.
    /// </param>
    /// <param name="_refRecId">
    ///    The <c>RecId</c> value reference of the cached transaction.
    /// </param>
    public void removeAsMissing(CompanyId _refCompany, tableId _refTableId, RefRecId _refRecId)
    {
        Set missingSet;
        if (missingSpecTransCollection.exists(_refCompany))
        {
            // Get Company map
            missingSet = missingSpecTransCollection.lookup(_refCompany);

            if (missingSet.in(_refRecId))
            {
                // Remove reference from set
                missingSet.remove(_refRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _pack)
    {
        container existingSpecTransCollectionPack;
        container missingSpecTransCollectionPack;
        container markedByOtherSpecTransCollectionPack;

        [#CurrentList, existingSpecTransCollectionPack, missingSpecTransCollectionPack, markedByOtherSpecTransCollectionPack] = _pack;

        if (existingSpecTransCollectionPack != conNull())
        {
            existingSpecTransCollection = Map::create(existingSpecTransCollectionPack);
        }

        if (missingSpecTransCollectionPack != conNull())
        {
            missingSpecTransCollection = Map::create(missingSpecTransCollectionPack);
        }

        if (markedByOtherSpecTransCollectionPack != conNull())
        {
            markedByOtherSpecTransCollection = Map::create(markedByOtherSpecTransCollectionPack);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>SpecTrans</c> record in the cache.
    /// </summary>
    /// <param name="_updateSpecTrans">
    /// The <c>SpecTrans</c> record to be updated in the cache.
    /// </param>
    public void update(SpecTrans _updateSpecTrans)
    {
        Map innerMap;
        // Get Company map
        if (existingSpecTransCollection.exists(_updateSpecTrans.RefCompany))
        {
            innerMap = existingSpecTransCollection.lookup(_updateSpecTrans.RefCompany);

            if (innerMap.exists(_updateSpecTrans.RefRecId))
            {
                // Update SpecTrans in inner map
                innerMap.insert(_updateSpecTrans.RefRecId, _updateSpecTrans);

                // Update Company map
                existingSpecTransCollection.insert(_updateSpecTrans.RefCompany, innerMap);
            }
        }

        // Track if FullSettlement or Payment fields were set or changed on the updated record
        if (_updateSpecTrans.FullSettlement == NoYes::Yes)
        {
            fullSettlementCompany = _updateSpecTrans.RefCompany;
            fullSettlementTableId = _updateSpecTrans.RefTableId;
            fullSettlementRefRecId = _updateSpecTrans.RefRecId;
        }
        else if (fullSettlementRefRecId == _updateSpecTrans.RefRecId)
        {
            this.clearFullSettlement();
        }

        if (_updateSpecTrans.Payment == NoYes::Yes)
        {
            markedPaymentCompany = _updateSpecTrans.RefCompany;
            markedPaymentTableId = _updateSpecTrans.RefTableId;
            markedPaymentRefRecId = _updateSpecTrans.RefRecId;
        }
        else if (markedPaymentRefRecId == _updateSpecTrans.RefRecId)
        {
            this.clearMarkedPayment();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
        public static SpecTransCache create(container _pack)
    {
        SpecTransCache specTransCache = new SpecTransCache();
        specTransCache.unpack(_pack);
        return specTransCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>