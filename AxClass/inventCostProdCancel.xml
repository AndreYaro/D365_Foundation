<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostProdCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>inventCostProdCancel</c> class reverses the adjustments made to a production order.
/// </summary>
/// <remarks>
///    This class follows the principle of creating new records for the new voucher which are indicated
///    with a reversed sign.
/// </remarks>

class InventCostProdCancel
{
    //Global Varianbles (will be initialized in the new method)
    CurrencyCode                currencyCode;

    // Caller parameters
    boolean                     recalc;
    boolean                     updateBreakdown;
    ProdId                      prodId;

    // Variables containing Ledger Information
    Voucher                     newVoucher;
    TransDate                   newTransDate;
    Voucher                     cancelVoucher;
    TransDate                   cancelTransDate;
    LedgerVoucher               ledgerVoucher;
    /// <summary>
    ///    Adds a <c>ProdIndirectTrans</c> record to a ledger voucher.
    /// </summary>
    /// <param name="_prodIndirectTrans">
    ///    The <c>ProdIndirectTrans</c> record that must be posted.
    /// </param>
    /// <remarks>
    ///    This method is only used when a ledger voucher has been passed to this object.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProdIndirectTransToLedgerVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addProdIndirectTransToLedgerVoucher(ProdIndirectTrans _prodIndirectTrans)
    {
        LedgerVoucherObject         ledgerVoucherObject;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        CurrencyExchangeHelper      currencyExchHelper;

        AmountMST                   indirectCostAmount;

        indirectCostAmount = CurrencyExchangeHelper::amount(_prodIndirectTrans.Amount);

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

        if (_prodIndirectTrans.OpenProdOrder == NoYes::Yes)
        {
            // Post the offset transaction into the estimated accounts because
            // this is an open production order adjustment
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        _prodIndirectTrans.PostingEstimatedIndirectAbsorption,
                        _prodIndirectTrans.EstimatedIndirectAbsorpLedgerDimension,
                        currencyCode,
                        -indirectCostAmount,
                        currencyExchHelper);

            ledgerVoucherTransObject.parmSkipDimensionValidation(true);

            ledgerVoucher.addTrans(ledgerVoucherTransObject);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        _prodIndirectTrans.PostingEstimatedIndirectAbsorptionOffset,
                        _prodIndirectTrans.EstimIndirectAbsorpOffsetLedgerDimension,
                        currencyCode,
                        indirectCostAmount,
                        currencyExchHelper);

            ledgerVoucherTransObject.parmSkipDimensionValidation(true);

            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }
        else
        {
            // Post the offset transaction into absorption because this is an
            // ended production order adjustment
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        _prodIndirectTrans.PostingIndirectAbsorption,
                        _prodIndirectTrans.IndirectAbsorptionLedgerDimension,
                        currencyCode,
                        -indirectCostAmount,
                        currencyExchHelper);

            ledgerVoucherTransObject.parmSkipDimensionValidation(true);

            ledgerVoucher.addTrans(ledgerVoucherTransObject);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        _prodIndirectTrans.PostingIndirectAbsorptionOffset,
                        _prodIndirectTrans.IndirectAbsorptionOffsetLedgerDimension,
                        currencyCode,
                        indirectCostAmount,
                        currencyExchHelper);

            ledgerVoucherTransObject.parmSkipDimensionValidation(true);

            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }

        // <GEERU>
        ledgerVoucher.bondLast2_RU();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelProdOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the sequence of the cancellation of the production adjustments.
    /// </summary>
    /// <remarks>
    ///    The following sequence is used:
    ///    <list type="number">
    ///       <item>
    ///          <description>
    ///             Process <c>prodTableJour</c> records
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Process <c>ProdIndirectTrans</c> records
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Process <c>InventCostTransVariance</c> records
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Trigger recalculation</description>
    ///       </item>
    ///    </list>
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void cancelProdOrder()
    {
        ProdTable prodTable = prodTable::find(prodId);

        // Mark the prodTableJour records as canceled
        this.duplicateProdTableJour();
        this.markProdTableJourAsCanceled();

        // Mark both the ProdIndirectTrans records as canceled
        this.duplicateProdIndirectTrans();
        this.markProdIndirectTransAsCanceled();

        // If LedgerVoucher has been set, add the postings to this object
        if (ledgerVoucher)
        {
            this.postToLedger();
        }

        if (!prodTable ||
            (prodTable.ProdStatus == ProdStatus::Completed && !ledgerVoucher))
        {
            // Also cancel the variance records
            // This is currently only supported during
            // canceling from an inventory cancellation.
            // The variance postings will be done afterwards in the inventAdjustPost classes
            InventCostCancel::cancelFromInventCostProdCancel(prodId,
                                                             cancelVoucher,
                                                             cancelTransDate,
                                                             newVoucher,
                                                             newTransDate);
        }

        if (recalc && prodTable)
        {
            // I also need to update the prodCalcTrans records
            InventCostProdRecalc::recalcProductionOrder(prodTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateProdIndirectTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Duplicates <c>prodIndirectTrans</c> records.
    /// </summary>
    /// <remarks>
    ///    All records for ended production orders will be duplicated.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void duplicateProdIndirectTrans()
    {
        ProdIndirectTrans           prodIndirectTrans;
        ProdIndirectTrans           cancelProdIndirectTrans;
        ProdTable                   openProdTable;
        NoYes                       notCanceled  = NoYes::No;
        NoYes                       notPosted    = NoYes::No;

        #LOCALMACRO.ProdIndirectTransFieldsEstimatedChanged
            TransRefId,
            TransRefType,
            Type,
            Code,
            CostGroupId,
            SurchargeSubtype,
            RateSubtype,
            UnitBasedSubtype,
            Amount,
            newVoucher,                             // New Voucher
            newTransDate,                           // New Transdate
            VoucherCalc,
            DateCalc,
            Calculated,
            EstimatedIndirectAbsorpLedgerDimension,
            EstimIndirectAbsorpOffsetLedgerDimension,
            IndirectAbsorptionLedgerDimension,
            IndirectAbsorptionOffsetLedgerDimension,
            PostingEstimatedIndirectAbsorption,
            PostingEstimatedIndirectAbsorptionOffset,
            PostingIndirectAbsorption,
            PostingIndirectAbsorptionOffset,
            DefaultDimension,
            notPosted,                              // Posted = No
            notCanceled,                            // Canceled = No
            OpenProdOrder
        #ENDMACRO

        #LOCALMACRO.ProdIndirectTransFieldsCalcChanged
            TransRefId,
            TransRefType,
            Type,
            Code,
            CostGroupId,
            SurchargeSubtype,
            RateSubtype,
            UnitBasedSubtype,
            Amount,
            VoucherEstimation,
            DateEstimation,
            newVoucher,                             // New Voucher
            newTransDate,                           // New Transdate
            Calculated,
            EstimatedIndirectAbsorpLedgerDimension,
            EstimIndirectAbsorpOffsetLedgerDimension,
            IndirectAbsorptionLedgerDimension,
            IndirectAbsorptionOffsetLedgerDimension,
            PostingEstimatedIndirectAbsorption,
            PostingEstimatedIndirectAbsorptionOffset,
            PostingIndirectAbsorption,
            PostingIndirectAbsorptionOffset,
            DefaultDimension,
            notPosted,                              // Posted = No
            notCanceled,                            // Canceled = No
            OpenProdOrder
        #ENDMACRO

        // Insert the prodIndirectTrans records for open prodOrders
        insert_recordset prodIndirectTrans
        (
            #ProdIndirectTransFields
        )
        select
            #ProdIndirectTransFieldsEstimatedChanged
        from cancelProdIndirectTrans
        where cancelProdIndirectTrans.VoucherEstimation      == cancelVoucher
           && cancelProdIndirectTrans.DateEstimation         == cancelTransDate
           && cancelProdIndirectTrans.TransRefId      == prodId
           && cancelProdIndirectTrans.TransRefType    == ProdTransRefType::Production
           && cancelProdIndirectTrans.Canceled        == NoYes::No
           && cancelProdIndirectTrans.OpenProdOrder   == NoYes::No;

        // Insert the prodIndirectTrans records for ended prodOrders
        insert_recordset prodIndirectTrans
        (
            #ProdIndirectTransFields
        )
        select
            #ProdIndirectTransFieldsCalcChanged
        from cancelProdIndirectTrans
        where cancelProdIndirectTrans.VoucherCalc     == cancelVoucher
           && cancelProdIndirectTrans.DateCalc        == cancelTransDate
           && cancelProdIndirectTrans.TransRefId      == prodId
           && cancelProdIndirectTrans.TransRefType    == ProdTransRefType::Production
           && cancelProdIndirectTrans.Canceled        == NoYes::No
           && cancelProdIndirectTrans.OpenProdOrder   == NoYes::No;

        insert_recordset prodIndirectTrans
        (
            #ProdIndirectTransFields
        )
        select
            #ProdIndirectTransFieldsEstimatedChanged
        from cancelProdIndirectTrans
        where cancelProdIndirectTrans.VoucherEstimation      == cancelVoucher
           && cancelProdIndirectTrans.DateEstimation         == cancelTransDate
           && cancelProdIndirectTrans.TransRefId      == prodId
           && cancelProdIndirectTrans.TransRefType    == ProdTransRefType::Production
           && cancelProdIndirectTrans.Canceled        == NoYes::No
           && cancelProdIndirectTrans.OpenProdOrder   == NoYes::Yes
            exists join openProdTable
            where openProdTable.ProdId          == cancelProdIndirectTrans.TransRefId
               && openProdTable.ProdStatus      != ProdStatus::Completed;

        // Now I can update all the records that I have created and reverse the signs
        // Additionally, cancelled will be set to yes, so that this statement does not touch
        // records that have already been reversed
        update_recordset prodIndirectTrans
            setting Canceled              = NoYes::Yes,
                    Amount                = -1 * prodIndirectTrans.Amount
            where ((prodIndirectTrans.VoucherEstimation == newVoucher && prodIndirectTrans.DateEstimation == newTransDate)
               ||  (prodIndirectTrans.VoucherCalc       == newVoucher && prodIndirectTrans.DateCalc       == newTransDate))
               && prodIndirectTrans.Canceled         == NoYes::No
               && prodIndirectTrans.TransRefId       == prodId
               && prodIndirectTrans.TransRefType     == ProdTransRefType::Production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateProdTableJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Duplicates <c>ProdTableJour</c> records.
    /// </summary>
    /// <remarks>
    ///    All records for ended production orders will be duplicated.For the open production order
    ///    adjustments, only those where the production order is still open will be duplicated.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void duplicateProdTableJour()
    {
        ProdTableJour       prodTableJour;
        ProdTableJour       cancelProdTableJour;
        ProdTable           openProdTable;
        NoYes               notCanceled  = NoYes::No;

        #LOCALMACRO.ProdTableJourFieldsChanged
            ProdId,
            ItemId,
            InventTransId,
            newTransDate,               // New TransDate
            JournalType,
            QtyGood,
            newVoucher,                 // New Voucher
            AmountFinancial,
            Adjustment,
            QtyError,
            AmountPhysical,
            ScrapVoucher,
            notCanceled,                // Canceled = No
            OpenProdOrder
        #ENDMACRO

        
        prodTableJour.skipDataMethods(true);
        prodTableJour.skipEvents(true);
        prodTableJour.skipDatabaseLog(true);
        

        // Insert the prodTableJour records that have been created for already ended prod orders
        insert_recordset prodTableJour
        (
            #ProdTableJourFields
        )
        select
            #ProdTableJourFieldsChanged
        from cancelProdTableJour
            where cancelProdTableJour.Voucher         == cancelVoucher
               && cancelProdTableJour.TransDate       == cancelTransDate
               && cancelProdTableJour.ProdId          == prodId
               && cancelProdTableJour.Canceled        == NoYes::No
               && cancelProdTableJour.OpenProdOrder   == NoYes::No;

        insert_recordset prodTableJour
        (
            #ProdTableJourFields
        )
        select
            #ProdTableJourFieldsChanged
        from cancelProdTableJour
            where cancelProdTableJour.Voucher         == cancelVoucher
               && cancelProdTableJour.TransDate       == cancelTransDate
               && cancelProdTableJour.ProdId          == prodId
               && cancelProdTableJour.Canceled        == NoYes::No
               && cancelProdTableJour.OpenProdOrder   == NoYes::Yes
            exists join openProdTable
            where openProdTable.ProdId          == cancelProdTableJour.ProdId
               && openProdTable.ProdStatus      != ProdStatus::Completed;

        // Now I can update all the records that I have created and reverse the signs
        // Additionally, cancelled will be set to yes, so that this statement does not touch
        // records that have already been reversed
        update_recordset prodTableJour
            setting Canceled              = NoYes::Yes,
                    AmountFinancial       = -1 * prodTableJour.AmountFinancial,
                    AmountPhysical        = -1 * prodTableJour.AmountPhysical,
                    Adjustment            = -1 * prodTableJour.Adjustment
            where prodTableJour.Voucher          == newVoucher
               && prodTableJour.TransDate        == newTransDate
               && prodTableJour.Canceled         == NoYes::No
               && prodTableJour.ProdId           == prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markProdIndirectTransAsCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks <c>ProdIndirectTrans</c> records as canceled.
    /// </summary>
    /// <remarks>
    ///    All records for ended production orders will be canceled.For the open production order adjustments,
    ///    only those where the production order is still open will be canceled.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void markProdIndirectTransAsCanceled()
    {
        ProdIndirectTrans       prodIndirectTrans;
        ProdTable               openProdTable;

        // Mark the prodTableJour records as cancelled that have been created for ended prod orders
        update_recordset prodIndirectTrans
            setting Canceled = NoYes::Yes
            where ((prodIndirectTrans.VoucherEstimation  == cancelVoucher && prodIndirectTrans.DateEstimation == cancelTransDate)
               ||  (prodIndirectTrans.VoucherCalc        == cancelVoucher && prodIndirectTrans.DateCalc       == cancelTransDate))
               && prodIndirectTrans.TransRefId      == prodId
               && prodIndirectTrans.TransRefType    == ProdTransRefType::Production
               && prodIndirectTrans.Canceled        == NoYes::No
               && prodIndirectTrans.OpenProdOrder   == NoYes::No;

        // Mark the prodTableJour records as cancelled that have been created for open prod orders
        // and where the prodOrder is still open
        update_recordset prodIndirectTrans
            setting Canceled = NoYes::Yes
            where prodIndirectTrans.VoucherEstimation      == cancelVoucher
               && prodIndirectTrans.DateEstimation         == cancelTransDate
               && prodIndirectTrans.TransRefId      == prodId
               && prodIndirectTrans.TransRefType    == ProdTransRefType::Production
               && prodIndirectTrans.Canceled        == NoYes::No
               && prodIndirectTrans.OpenProdOrder   == NoYes::Yes
                exists join openProdTable
                where openProdTable.ProdId          == prodIndirectTrans.TransRefId
                   && openProdTable.ProdStatus      != ProdStatus::Completed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markProdTableJourAsCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks <c>ProdTableJour</c> records as canceled.
    /// </summary>
    /// <remarks>
    ///    All records for ended production orders will be canceled.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void markProdTableJourAsCanceled()
    {
        ProdTableJour       prodTableJour;
        ProdTable           openProdTable;

        // Mark the prodTableJour records as cancelled that have been created for ended prod orders
        update_recordset prodTableJour
            setting Canceled = NoYes::Yes
            where prodTableJour.Voucher         == cancelVoucher
               && prodTableJour.TransDate       == cancelTransDate
               && prodTableJour.ProdId          == prodId
               && prodTableJour.Canceled        == NoYes::No
               && prodTableJour.OpenProdOrder   == NoYes::No;

        // Mark the prodTableJour records as cancelled that have been created for open prod orders
        // and where the prodOrder is still open
        update_recordset prodTableJour
            setting Canceled = NoYes::Yes
            where prodTableJour.Voucher         == cancelVoucher
               && prodTableJour.TransDate       == cancelTransDate
               && prodTableJour.ProdId          == prodId
               && prodTableJour.Canceled        == NoYes::No
               && prodTableJour.OpenProdOrder   == NoYes::Yes
            exists join openProdTable
            where openProdTable.ProdId          == prodTableJour.ProdId
               && openProdTable.ProdStatus      != ProdStatus::Completed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
        currencyCode                      = CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmCancelTransDate(TransDate _cancelTransDate = cancelTransDate)
    {
        cancelTransDate = _cancelTransDate;

        return cancelTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Voucher parmCancelVoucher(Voucher _cancelVoucher = cancelVoucher)
    {
        cancelVoucher = _cancelVoucher;

        return cancelVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ledgerVoucher = _ledgerVoucher;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmNewTransDate(TransDate _newTransDate = newTransDate)
    {
        newTransDate = _newTransDate;

        return newTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Voucher parmNewVoucher(Voucher _newVoucher = newVoucher)
    {
        newVoucher = _newVoucher;

        return newVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId = _prodId;

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmRecalc(boolean _recalc = recalc)
    {
        recalc = _recalc;

        return recalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateBreakdown</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmUpdateBreakdown(boolean _updateBreakdown = updateBreakdown)
    {
        updateBreakdown = _updateBreakdown;

        return updateBreakdown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts duplicated <c>ProdIndirectTrans</c> records to the ledger.
    /// </summary>
    /// <remarks>
    ///    The <c>ProdIndirectTrans</c> records will be posted directly only when a ledger voucher is given to
    ///    this class. Otherwise, they must be posted separately.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postToLedger()
    {
        // The production orders already have been adjusted with the indirect costs
        // Only the postings into ledger needs to be done.
        ProdIndirectTrans       prodIndirectTrans;

        while select sum(Amount) from prodIndirectTrans
            group by OpenProdOrder, DefaultDimension,
                     PostingEstimatedIndirectAbsorption, EstimatedIndirectAbsorpLedgerDimension,
                     PostingEstimatedIndirectAbsorptionOffset, EstimIndirectAbsorpOffsetLedgerDimension,
                     PostingIndirectAbsorption, IndirectAbsorptionLedgerDimension,
                     PostingIndirectAbsorptionOffset, IndirectAbsorptionOffsetLedgerDimension
            where prodIndirectTrans.VoucherEstimation      == newVoucher
               && prodIndirectTrans.DateEstimation         == newTransDate
               && prodIndirectTrans.Posted          == NoYes::No
               && prodIndirectTrans.Canceled        == NoYes::Yes
        {
            this.addProdIndirectTransToLedgerVoucher(prodIndirectTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers the cancellation of adjustments to a single production order.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        this.cancelProdOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelFromProdEnding</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels adjustments for a single production order and posts them to the specified ledger voucher.
    /// </summary>
    /// <param name="_prodTable">
    ///    The production table for which the adjustments should be canceled.
    /// </param>
    /// <param name="_endDate">
    ///    The date that should be used to determine which adjustments must be canceled.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher to which the postings should be added.
    /// </param>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void cancelFromProdEnding(ProdTable     _prodTable,
                                            TransDate     _endDate,
                                            LedgerVoucher _ledgerVoucher)
    {
        // This method is used to cancel the postings
        // production orders during the backdating

        inventCostProdCancel    inventCostProdCancel;
        InventCostTrans         inventCostTrans;
        TransDate               prevTransDate;

        // I have to post this using the transDate of the price,
        // not the transDate of the leger Voucher
        prevTransDate = _ledgerVoucher.lastTransDate();

        // Get the revaluation entries
        while select Voucher, TransDate from inventCostTrans
            group by Voucher, TransDate
            where inventCostTrans.CostTransRefType  == InventCostTransRefType::WIPRevaluation
               && inventCostTrans.TransRefId        == _prodTable.ProdId
               && inventCostTrans.TransDate         >  _endDate
        {
            // Get instance
            inventCostProdCancel = inventCostProdCancel::newFromProdIdLedgerVoucher(_prodTable.ProdId,
                                                                              false,    // Do not recalc prod order, this is done by outer process
                                                                              _ledgerVoucher,
                                                                              inventCostTrans.Voucher,
                                                                              inventCostTrans.TransDate);
            // Offset the postings
            inventCostProdCancel.run();
        }

        // After the posting reset the transdate to the original one
        _ledgerVoucher.lastTransDate(prevTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelFromProdIdInventCostClosingCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels adjustments to a single production order out of the inventory closing.
    /// </summary>
    /// <param name="_prodId">
    ///    The production id for which the adjustments should be canceled.
    /// </param>
    /// <param name="_inventClosing">
    ///    The <c>inventoryClosing</c> record that is used to cancel an inventory closing.
    /// </param>
    /// <param name="_cancelClosing">
    ///    The inventory closing that must be canceled.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void cancelFromProdIdInventCostClosingCancel(ProdId        _prodId,
                                                               InventClosing _inventClosing,
                                                               InventClosing _cancelClosing)
    {
        // This method is used to cancel the postings out of an
        // inventory cancelation

        // Get instance
        inventCostProdCancel inventCostProdCancel = inventCostProdCancel::newFromProdIdInventClosing(_prodId,
                                                                                                     _inventClosing,
                                                                                                     _cancelClosing);
        // Offset the postings
        inventCostProdCancel.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static inventCostProdCancel construct()
    {
        return new inventCostProdCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdIdInventClosing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>inventCostProdCancel</c> class.
    /// </summary>
    /// <param name="_prodId">
    ///    The production id for which the adjustments should be canceled.
    /// </param>
    /// <param name="_inventClosing">
    ///    The <c>inventoryClosing</c> record that is used to cancel an inventory closing.
    /// </param>
    /// <param name="_cancelClosing">
    ///    The inventory closing that must be canceled.
    /// </param>
    /// <returns>
    ///    An initialized instance of the <c>inventCostProdCancel</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The inventory closing that must be canceled is passed.
    /// </exception>
    private static inventCostProdCancel newFromProdIdInventClosing(ProdId           _prodId,
                                                                  InventClosing    _inventClosing,
                                                                  InventClosing    _cancelClosing)
    {
        // A ledgerVoucher needs to be passed
        if (! _inventClosing || ! _cancelClosing)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (ProdTable::exist(_prodId))
        {
            ProdTableRecalcQueue::add(_prodId, _inventClosing.RecId);
        }

        // Create instance
        inventCostProdCancel inventCostProdCancel = inventCostProdCancel::newFromProdIdParameter(_prodId,
                                                                                                 false,
                                                                                                 _cancelClosing.Voucher,
                                                                                                 _cancelClosing.TransDate,
                                                                                                 _inventClosing.Voucher,
                                                                                                 _inventClosing.TransDate,
                                                                                                 false);

        return inventCostProdCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdIdLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>inventCostProdCancel</c> class.
    /// </summary>
    /// <param name="_prodId">
    ///    The production id for which the adjustments should be canceled.
    /// </param>
    /// <param name="_recalc">
    ///    A Boolean value that indicates whether the production orders should be recalculated.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher to which the postings should be added.
    /// </param>
    /// <param name="_cancelVoucher">
    ///    The voucher for which the adjustments should be canceled.
    /// </param>
    /// <param name="_cancelTransDate">
    ///    The transaction date for which the adjustments should be canceled.
    /// </param>
    /// <returns>
    ///    An initialized instance of the <c>inventCostProdCancel</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    No ledger voucher is given.
    /// </exception>
    private static inventCostProdCancel newFromProdIdLedgerVoucher(ProdId           _prodId,
                                                                  boolean          _recalc,
                                                                  LedgerVoucher    _ledgerVoucher,
                                                                  Voucher          _cancelVoucher,
                                                                  TransDate        _cancelTransDate)
    {
        // A ledgerVoucher needs to be passed
        if (! _ledgerVoucher)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        // Create instance
        inventCostProdCancel inventCostProdCancel = inventCostProdCancel::newFromProdIdParameter(_prodId,
                                                                                                 _recalc,
                                                                                                 _cancelVoucher,
                                                                                                 _cancelTransDate,
                                                                                                 _ledgerVoucher.lastVoucher(),
                                                                                                 _cancelTransDate); // create postings with original Date

        // Set parameters
        inventCostProdCancel.parmLedgerVoucher(_ledgerVoucher);

        return inventCostProdCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdIdParameter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>inventCostProdCancel</c> class.
    /// </summary>
    /// <param name="_prodId">
    ///    The production id for which the adjustments should be canceled.
    /// </param>
    /// <param name="_recalc">
    ///    A Boolean value that indicates whether the production orders should be recalculated.
    /// </param>
    /// <param name="_cancelVoucher">
    ///    The voucher for which the adjustments should be canceled.
    /// </param>
    /// <param name="_cancelTransDate">
    ///    The transaction date for which the adjustments should be canceled.
    /// </param>
    /// <param name="_newVoucher">
    ///    The voucher that should be used to post the canceled adjustments.
    /// </param>
    /// <param name="_newTransDate">
    ///    The transaction date that should be used to post the canceled adjustments.
    /// </param>
    /// <param name="_updateBreakdown">
    ///    A boolean flag indicating if the cost breakdown must be updated; optional.
    /// </param>
    /// <returns>
    ///    An initialized instance of the <c>inventCostProdCancel</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    No production order, voucher that should be canceled, or voucher that should be used to do the
    ///    postings is given.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static inventCostProdCancel newFromProdIdParameter(ProdId     _prodId,
                                                                 boolean    _recalc,
                                                                 Voucher    _cancelVoucher,
                                                                 TransDate  _cancelTransDate,
                                                                 Voucher    _newVoucher,
                                                                 TransDate  _newTransDate,
                                                                 boolean    _updateBreakdown = true)
    {
        // A ledgerVoucher needs to be passed
        if (! _prodId || ! _cancelVoucher || ! _newVoucher)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        // Create instance
        inventCostProdCancel inventCostProdCancel = inventCostProdCancel::construct();

        // Set parameters
        inventCostProdCancel.parmProdId(_prodId);
        inventCostProdCancel.parmRecalc(_recalc);
        inventCostProdCancel.parmUpdateBreakdown(_updateBreakdown);

        inventCostProdCancel.parmCancelVoucher(_cancelVoucher);
        inventCostProdCancel.parmCancelTransDate(_cancelTransDate);
        inventCostProdCancel.parmNewVoucher(_newVoucher);
        inventCostProdCancel.parmNewTransDate(_newTransDate);

        return inventCostProdCancel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>