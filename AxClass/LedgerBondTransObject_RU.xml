<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBondTransObject_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Substitution for ...bondVRef_RU class
class LedgerBondTransObject_RU
{
    LedgerBondableTrans_RU      refTransObject;
    TransDate                   transDate;
    LedgerBondId_RU             vrefId;
    LedgerBondId_RU             parentVRefId;

    AmountMST                   remainToBondAmountMST;
    AmountMSTSecondary          remainToBondAmountMSTSecond;
    AmountCur                   remainToBondAmountCur;

    boolean                     crediting;
    boolean                     posted;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBondAmounts</Name>
				<Source><![CDATA[
    public void addBondAmounts(boolean                 _crediting,
                               AmountMST               _toBondAmountMST,
                               AmountMSTSecondary      _toBondAmountMSTSecond,
                               AmountCur               _toBondAmountCur)
    {
        int sign = (_crediting != crediting ? 1 : -1);

        remainToBondAmountMST        -= sign * abs(_toBondAmountMST);
        remainToBondAmountMSTSecond  -= sign * abs(_toBondAmountMSTSecond);
        remainToBondAmountCur        -= sign * abs(_toBondAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondedCompletely</Name>
				<Source><![CDATA[
    public boolean bondedCompletely()
    {
        return ! remainToBondAmountMST && ! remainToBondAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondedCompletelyAll</Name>
				<Source><![CDATA[
    public boolean bondedCompletelyAll()
    {
        return ! remainToBondAmountMST && ! remainToBondAmountMSTSecond && ! remainToBondAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equals</Name>
				<Source><![CDATA[
    // According to ledgerTransList index in LedgerVoucher
    public boolean equals(System.Object _bondTransObject)
    {
        LedgerBondTransObject_RU bondTransObject = _bondTransObject;
        LedgerBondableTrans_RU trans = bondTransObject.ledgerTransObject();

        return
            refTransObject.parmLedgerDimensionId() == trans.parmLedgerDimensionId() &&
            refTransObject.parmTransactionCurrencyCode() == trans.parmTransactionCurrencyCode() &&
            refTransObject.parmAllocationLevel() == trans.parmAllocationLevel() &&
            refTransObject.parmIsCorrection() == trans.parmIsCorrection() &&
            refTransObject.parmPostingType() == trans.parmPostingType() &&
            refTransObject.parmPaymentReference() == trans.parmPaymentReference() &&
            refTransObject.parmGroupCommonPropertiesID() == trans.parmGroupCommonPropertiesID();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSameParentWith</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether current bondable transaction has been splitted from the specified one or bothe bondable transaction are splitted from the one bondable transaction.
    /// </summary>
    /// <param name="_other">
    /// The the bondable transaction to compare.
    /// </param>
    /// <returns>
    /// true if the current bondable transction is splitted from specified one or they have the same parent parent bondable transaction; otherwise, false.
    /// </returns>
    public boolean hasSameParentWith(LedgerBondTransObject_RU _other)
    {
        return  this.parmParentVrefId() &&
                (this.parmParentVrefId() == _other.parmParentVrefId() ||
                 this.parmParentVrefId() == _other.vrefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransObject</Name>
				<Source><![CDATA[
    public LedgerBondableTrans_RU ledgerTransObject()
    {
        return refTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeBondTransObject</Name>
				<Source><![CDATA[
    public LedgerBondTransObject_RU mergeBondTransObject(AmountCur                _amountCur,
                                                         AmountMST                _amountMST,
                                                         AmountMSTSecondary       _amountMSTSecond,
                                                         int64                    _additionalPropertiesID,
                                                         LedgerBondAdditionalPropertiesMerger_RU _merger)
    {
        int sign = (refTransObject.parmTransactionCurrencyAmount() +
                    refTransObject.parmAccountingCurrencyAmount()  +
                    refTransObject.parmReportingCurrencyAmount()) > 0 ? 1 : -1;

        refTransObject.parmTransactionCurrencyAmount(refTransObject.parmTransactionCurrencyAmount() + sign * abs(_amountCur));
        refTransObject.parmAccountingCurrencyAmount( refTransObject.parmAccountingCurrencyAmount()  + sign * abs(_amountMST));
        refTransObject.parmReportingCurrencyAmount(  refTransObject.parmReportingCurrencyAmount()   + sign * abs(_amountMSTSecond));
        refTransObject.parmMergeablePropertiesID(_merger.mergeProperties(refTransObject.parmMergeablePropertiesID(), _additionalPropertiesID));

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(LedgerBondId_RU          _vrefId,
                    LedgerBondableTrans_RU   _refTransObject)
    {
        Amount tmpAmount = _refTransObject.parmTransactionCurrencyAmount() ?
                                _refTransObject.parmTransactionCurrencyAmount() :
                                _refTransObject.parmAccountingCurrencyAmount() ?
                                    _refTransObject.parmAccountingCurrencyAmount() :
                                    _refTransObject.parmReportingCurrencyAmount();

        if (! _vrefId || ! _refTransObject)
            throw error(strfmt("@SYS23264", funcname()));

        refTransObject = _refTransObject.clone();

        vrefId      = _vrefId;
        crediting   = (tmpAmount < 0 && ! _refTransObject.parmIsCorrection()) ||
                      (tmpAmount > 0 &&   _refTransObject.parmIsCorrection());
        transDate   = refTransObject.parmAccountingDate();

        remainToBondAmountMST        = abs(_refTransObject.parmAccountingCurrencyAmount());
        remainToBondAmountMSTSecond  = abs(_refTransObject.parmReportingCurrencyAmount());
        remainToBondAmountCur        = abs(_refTransObject.parmTransactionCurrencyAmount());

        posted = false;

        #if.never
            info("Added VRef " + int2str(vRefId) + " - " +
                 _refTransObject.parmLedgerAccount() + " - " +
                 enum2str(_refTransObject.parmLedgerPostingType()) + " - " +
                 (crediting ? "Credit" : "Debit") + " - " +
                 "Correct=" + enum2str(_refTransObject.parmCorrect()) + " - " +
                 "<CUR " + _refTransObject.parmCurrencyCode() + " " + num2str(remainToBondAmountCur, 0, 2, 2, 1) + "> " +
                 "<MST " + num2str(remainToBondAmountMST, 0, 2, 2, 1) + "> " +
                 "<SEC " + num2str(remainToBondAmountMSTSecond, 0, 2, 2, 1) + ">");
        #endif
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentVrefId</Name>
				<Source><![CDATA[
    public LedgerBondId_RU parmParentVrefId(LedgerBondId_RU _parentVrefid = parentVrefid)
    {
        parentVrefid = _parentVrefid;
        return parentVrefid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPosted</Name>
				<Source><![CDATA[
    public boolean parmPosted(boolean _posted = posted)
    {
        ;
        posted = _posted;
        return posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountCur</Name>
				<Source><![CDATA[
    public AmountCur remainAmountCur()
    {
        return abs(remainToBondAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountMST</Name>
				<Source><![CDATA[
    public AmountMST remainAmountMST()
    {
        return abs(remainToBondAmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountMSTSecond</Name>
				<Source><![CDATA[
    public AmountMSTSecondary remainAmountMSTSecond()
    {
        return abs(remainToBondAmountMSTSecond);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainCrediting</Name>
				<Source><![CDATA[
    public boolean remainCrediting()
    {
        return (remainToBondAmountCur ?
                    remainToBondAmountCur :
                    remainToBondAmountMST ?
                        remainToBondAmountMST :
                        remainToBondAmountMSTSecond) >= 0 ?
                            crediting :
                            ! crediting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>split</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits current bondable transaction into two ones.
    /// </summary>
    /// <param name="_newVrefId">
    /// Bond id for new bondable transaction.
    /// </param>
    /// <param name="_crediting">
    /// Sign of bondable transaction;
    /// </param>
    /// <param name="_amountCur">
    /// The transaction amount in the transaction currency.
    /// </param>
    /// <param name="_amountMST">
    /// The transaction amount in the accounting currency.
    /// </param>
    /// <param name="_amountMSTSecond">
    /// The transaction amount in the reporting currency
    /// </param>
    /// <returns>
    /// The new splitted bondable transaction.
    /// </returns>
    /// <remarks>
    /// The amounts of current bondable transaction reduced by amounts of created transaction.
    /// </remarks>
    public LedgerBondTransObject_RU split(LedgerBondId_RU          _newVrefId,
                                          boolean                  _crediting,
                                          AmountCur                _amountCur,
                                          AmountMST                _amountMST,
                                          AmountMSTSecondary       _amountMSTSecond)
    {
        LedgerBondTransObject_RU    newBondTransObject;
        LedgerBondableTrans_RU   newLedgerVoucherTransObject = refTransObject.clone();
        newLedgerVoucherTransObject.parmID(_newVrefId);

        refTransObject.parmTransactionCurrencyAmount(refTransObject.parmTransactionCurrencyAmount() - _amountCur);
        refTransObject.parmAccountingCurrencyAmount( refTransObject.parmAccountingCurrencyAmount()  - _amountMST);
        refTransObject.parmReportingCurrencyAmount(  refTransObject.parmReportingCurrencyAmount()   - _amountMSTSecond);

        newLedgerVoucherTransObject.parmTransactionCurrencyAmount(_amountCur);
        newLedgerVoucherTransObject.parmAccountingCurrencyAmount( _amountMST);
        newLedgerVoucherTransObject.parmReportingCurrencyAmount(  _amountMSTSecond);

        newBondTransObject = new LedgerBondTransObject_RU(_newVrefId, newLedgerVoucherTransObject);
        newBondTransObject.parmParentVrefId(this.vrefId());
        newBondTransObject.addBondAmounts(! _crediting,
                                          _amountMST,
                                          _amountMSTSecond,
                                          _amountCur);

        return newBondTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    ///  for debugging purposes
    /// </summary>
    /// <returns>
    ///   string representation of the object
    /// </returns>
    public str toString()
    {
        return strfmt('%1 %2 %3 - %4',
            this.remainAmountCur(),
            this.remainAmountMST(),
            this.remainAmountMSTSecond(), this.ledgerTransObject().toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vrefId</Name>
				<Source><![CDATA[
    public LedgerBondId_RU vrefId()
    {
        return vrefId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>