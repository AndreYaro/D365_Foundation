<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalAdjustmentEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalAdjustmentEngine</c> class determines the currency adjustment values based on the given <c>BankCurrencyRevalTmp</c> table instance.
/// </summary>
internal final class BankCurrencyRevalAdjustmentEngine
{
    private BankCurrencyRevalTmp bankCurrencyRevalTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankCurrencyRevalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankCurrencyRevalAdjustmentEngine</c> class given a <c>BankCurrencyRevalTmp</c> table instance.
    /// </summary>
    /// <param name = "_bankCurrencyRevalTmp">
    /// A <c>BankCurrencyRevalTmp</c> table instance holding the bank accounts for which currency adjustment values are to be calculated.
    /// </param>
    /// <returns>A new instance of the <c>BankCurrencyRevalAdjustmentEngine</c> class.</returns>
    internal static BankCurrencyRevalAdjustmentEngine newFromBankCurrencyRevalTmp(BankCurrencyRevalTmp _bankCurrencyRevalTmp)
    {
        BankCurrencyRevalAdjustmentEngine adjustmentEngine = new BankCurrencyRevalAdjustmentEngine();
        adjustmentEngine.bankCurrencyRevalTmp = _bankCurrencyRevalTmp;

        return adjustmentEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the adjustment engine to determine the currency adjustment values.
    /// </summary>
    internal void run()
    {
        BankCurrencyRevalTmp bankCurrencyRevalTmpUpdate;

        bankCurrencyRevalTmpUpdate.useExistingTempDBTable(bankCurrencyRevalTmp.getPhysicalTableName());

        while select LegalEntity
            from bankCurrencyRevalTmpUpdate
            group by LegalEntity
        {
            CompanyInfo companyInfo = CompanyInfo::find(false, bankCurrencyRevalTmpUpdate.LegalEntity);
            
            changecompany(companyInfo.DataArea)
            {
                this.calculateAdjustments();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAdjustments</Name>
				<Source><![CDATA[
    private void calculateAdjustments()
    {
        BankCurrencyRevalAdjustmentCalculator bankCurrencyRevalAdjustmentCalculator;

        ttsbegin;

        while select forupdate bankCurrencyRevalTmp
            where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
        {
            if (this.checkTmpRecordForAdjustmentCalculation())
            {
                bankCurrencyRevalAdjustmentCalculator = BankCurrencyRevalAdjustmentCalculator::newFromCompanyExchangeDate(CompanyInfo::current(), bankCurrencyRevalTmp.ExchangeRateDate);

                bankCurrencyRevalTmp.AccountingCurrencyAdjustmentAmount = bankCurrencyRevalAdjustmentCalculator.calculateAccountingCurrencyAdjustmentAmount(bankCurrencyRevalTmp);

                bankCurrencyRevalTmp.ReportingCurrencyAdjustmentAmount = bankCurrencyRevalAdjustmentCalculator.calculateReportingCurrencyAdjustmentAmount(bankCurrencyRevalTmp);

                bankCurrencyRevalTmp.doUpdate();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTmpRecordForAdjustmentCalculation</Name>
				<Source><![CDATA[
    private boolean checkTmpRecordForAdjustmentCalculation()
    {
        return bankCurrencyRevalTmp.ExchangeRateType != 0
            && bankCurrencyRevalTmp.BankCurrencyCode != '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>