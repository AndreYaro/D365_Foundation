<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventNonConformanceMakeRelated</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventNonConformanceMakeRelated</c> class marks a nonconformance as related to another
///    nonconformance.
/// </summary>
class InventNonConformanceMakeRelated extends RunBase
{
    InventNonConformanceID  inventNonConformanceIDMaster;
    InventNonConformanceID  inventNonConformanceIDRelated;

    DialogField             fieldMasterId;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventNonConformanceIDMaster,
        inventNonConformanceIDRelated
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a dialog box with a field for the user to specify the related nonconformance.
    /// </summary>
    /// <param name="_dialog">
    ///    The dialog box as build by the framework.
    /// </param>
    /// <param name="forceOnClient">
    ///    A Boolean value that indicates whether the dialog box is forced on the client or not.
    /// </param>
    /// <returns>
    ///    The modified dialog box class.
    /// </returns>
    public Object dialog(DialogRunbase _dialog = null, boolean forceOnClient = false)
    {
        DialogRunbase dialog = this.dialogInternal(_dialog, forceOnClient);
        dialog.formBuildDesign().dialogSize(0); // DialogSize::Small

        fieldMasterId = dialog.addFieldValue(extendedTypeStr(InventNonConformanceID), inventNonConformanceIDMaster);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the related nonconformance from the dialog box.
    /// </summary>
    /// <returns>
    ///    true if the values from the dialog box could be retrieved; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        inventNonConformanceIDMaster = fieldMasterId.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class based on the object that calls.
    /// </summary>
    /// <param name="_args">
    ///    The standard <c>Args</c> element from the element that calls.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The caller does not provide an <c>InventNonConformanceTable</c> table buffer.
    /// </exception>
    protected void initFromArgs(Args _args)
    {
        if (!_args || !_args.record() || !_args.record().RecId || _args.dataset() != tableNum(InventNonConformanceTable))
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        InventNonConformanceTable inventNonConformanceTable = _args.record();

        this.getLast();
        this.parmInventNonConformanceIdRelated(inventNonConformanceTable.InventNonConformanceID);
        this.parmInventNonConformanceIdMaster('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventNonConformanceIdMaster</Name>
				<Source><![CDATA[
    public InventNonConformanceID parmInventNonConformanceIdMaster(InventNonConformanceID _inventNonConformanceIdMaster = inventNonConformanceIdMaster)
    {
        inventNonConformanceIdMaster = _inventNonConformanceIdMaster;

        return inventNonConformanceIdMaster;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventNonConformanceIdRelated</Name>
				<Source><![CDATA[
    public InventNonConformanceID parmInventNonConformanceIdRelated(InventNonConformanceID _inventNonConformanceIdRelated = inventNonConformanceIdRelated)
    {
        inventNonConformanceIdRelated = _inventNonConformanceIdRelated;

        return inventNonConformanceIdRelated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship.
    /// </summary>
    public void run()
    {
        InventNonConformanceRelation    inventNonConformanceRelation;

        super();
        if (!this.validate(null))
        {
            return;
        }

        ttsbegin;
        inventNonConformanceRelation.InventNonConformanceID     = inventNonConformanceIdRelated;
        inventNonConformanceRelation.InventNonConformanceIDRef  = inventNonConformanceIdMaster;
        inventNonConformanceRelation.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version      = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the parameters provided are valid to create a relationship.
    /// </summary>
    /// <param name="calledFrom">
    ///    This parameter is not used in this class. See the base class, <c>RunBase</c>, for a description.
    /// </param>
    /// <returns>
    ///    true if the validation succeeded; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (!inventNonConformanceIdMaster)
            ret = checkFailed("@SYS114041");

        if (!inventNonConformanceIdRelated)
            ret = checkFailed(strFmt("@SYS53926", classStr(InventNonConformanceMakeRelated)));

        if (inventNonConformanceIdRelated && inventNonConformanceIdMaster == inventNonConformanceIdRelated)
            ret = checkFailed("@SYS114042");

        if (InventNonConformanceRelation::exist(inventNonConformanceIdRelated, inventNonConformanceIdMaster))
            ret = checkFailed("@SYS114101");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventNonConformanceMakeRelated construct()
    {
        return new InventNonConformanceMakeRelated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS114046";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InventNonConformanceMakeRelated inventNonConformanceMakeRelated = InventNonConformanceMakeRelated::construct();

        inventNonConformanceMakeRelated.initFromArgs(args);

        if (!inventNonConformanceMakeRelated.prompt())
        {
            return;
        }

        inventNonConformanceMakeRelated.runOperation();

        if (args && args.record() && args.dataset() == tableNum(InventNonConformanceTable))
        {
            InventNonConformanceMakeRelated::refreshCaller(args.record());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the calling form so updates are shown.
    /// </summary>
    /// <param name="_caller">
    ///    The calling record.
    /// </param>
    protected static void refreshCaller(Common _caller)
    {
        if (FormDataUtil::isFormDataSource(_caller))
        {
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(_caller);
            formDataSource.reread();
            formDataSource.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
