<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class implements the base factory class for instancing TaxModel document line domain objects.
/// </summary>
[TaxModelDocLineFactoryAttribute(TaxModelDocLineType::Normal)]
public class TaxModelDocLineFactory implements TaxModelDocLineFactoryable
{
    #Define.UseExtensionFactory(false)

    private boolean autoCreateTransTaxInformation = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateDocLineInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates document line instance.
    /// </summary>
    /// <param name="_documentLine">
    /// The document line.
    /// </param>
    /// <param name="_taxModelDocumentLineAttribute">
    /// The tax model document line attribute.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxModelTaxable</c> class.
    /// </returns>
    [Replaceable]
    protected TaxModelTaxable generateDocLineInstance(
        SalesPurchJournalLine _documentLine,
        TaxModelDocumentLineAttribute _taxModelDocumentLineAttribute)
    {
        TaxModelTaxable ret;

        switch (_documentLine.SourceTableId)
        {
            case tableNum(PurchLine):
                ret = new TaxModelDocLinePurchLineImpl();
                break;
            case tableNum(PurchParmLine):
                ret = new TaxModelDocLinePurchParmLineImpl();
                break;
            case tableNum(VendInvoiceInfoLine):
                ret = new TaxModelDocLineVendInvoiceImpl();
                break;
            case tableNum(VendInvoiceTrans) :
                ret = new TaxModelDocLineVendInvoiceTransImpl();
                break;
            case tableNum(SalesLine) :
                ret = new TaxModelDocLineSalesLineImpl();
                break;
            case tableNum(SalesParmLine) :
                ret = new TaxModelDocLineSalesParmLineImpl();
                break;
            case tableNum(CustConfirmTrans) :
                ret = new TaxModelDocLineCustConfirmTransLineImpl();
                break;
            case tableNum(CustInvoiceLine):
            case tableNum(CustInvoiceLineTemplate):
                ret = new TaxModelDocLineCustInvoiceImpl();
                break;
            case tableNum(CustInvoiceTrans) :
                ret = new TaxModelDocLineCustInvoiceTransImpl();
                break;
            case tableNum(CustPackingSlipTrans) :
                ret = new TaxModelDocLineCustPackingSlipTransImpl();
                break;
            case tableNum(TaxEngineTaxJournalLine):
                ret = new TaxModelDocLineTaxJournalImpl();
                break;
            case tableNum(LedgerJournalTrans):
                ret = new TaxModelDocLineJournalImpl();
                break;
            case tableNum(PurchReqLine) :
                ret = new TaxModelDocLinePurchReqImpl();
                break;
            case tableNum(PurchRFQLine) :
                ret = new TaxModelDocLinePurchRFQImpl();
                break;
            case tableNum(PurchRFQReplyLine) :
                ret = new TaxModelDocLinePurchRFQReplyImpl();
                break;
            case tableNum(PurchRFQParmLine) :
                ret = new TaxModelDocLinePurchRFQParmImpl();
                break;
            case tableNum(VendRFQTrans) :
                ret = new TaxModelDocLineVendRFQTransImpl();
                break;
            case tableNum(AgreementLine):
                ret = new TaxModelDocLineAgreementImpl();
                break;
            case tableNum(ProjRevenueTransSale) :
            case tableNum(ProjRevenueTrans) :
            case tableNum(ProjProposalRevenue) :
                ret = new TaxModelDocLineProjRevenueTransImpl();
                break;
            case tableNum(ProjOnAccTransSale) :
            case tableNum(ProjOnAccTrans) :
            case tableNum(ProjProposalOnAcc) :
                ret = new TaxModelDocLineProjOnAccTransImpl();
                break;
            case tableNum(ProjCostTransSale) :
            case tableNum(ProjCostTrans) :
            case tableNum(ProjProposalCost) :
                ret = new TaxModelDocLineProjCostTransImpl();
                break;
            case tableNum(ProjEmplTransSale) :
            case tableNum(ProjEmplTrans) :
            case tableNum(ProjProposalEmpl) :
                ret = new TaxModelDocLineProjEmplTransImpl();
                break;
            case tableNum(InventJournalTrans):
                ret = new TaxModelDocLineInventJournalImpl();
                break;
            case tableNum(ProjItemTransSale) :
            case tableNum(ProjItemTrans) :
            case tableNum(ProjProposalItem) :
                ProjProposalItem projProposalItem;
                if (_documentLine.SourceTableId == tableNum(ProjProposalItem))
                {
                    projProposalItem = _documentLine;
                }

                if (projProposalItem.ItemType == ProjItemtype::SalesOrder)
                {
                    ret = new TaxModelDocLineProjSalesLineImpl();
                }
                else
                {
                    ret = new TaxModelDocLineProjItemTransImpl();
                }
                break;
            case tableNum(ProjTable) :
            case tableNum(ProjInvoiceTable) :
            case tableNum(ProjJournalTrans) :
            case tableNum(TmpProjAdjustment) :
            case tableNum(TmpProjAdjustmentCreate) :
                ret = new TaxModelDocLineProjTableImpl();
                break;
            case tableNum(SalesQuotationLine) :
                ret = new TaxModelDocLineSalesQuotationImpl();
                break;
            case tableNum(SalesQuotationParmLine) :
                ret = new TaxModelDocLineSalesQuotationParmImpl();
                break;
            case tableNum(InventTransferLine) :
                ret = new TaxModelDocLineInventTransImpl();
                break;
            case tableNum(InventTransferParmLine) :
                ret = new TaxModelDocLineInventParmImpl();
                break;
            case tableNum(InventTransferJourLine) :
                ret = new TaxModelDocLineInventTransJournalImpl();
                break;
            case tableNum(MarkupTrans) :
                ret = new TaxModelDocLineMarkupTransImpl();
                break;
            case tableNum(ProdJournalBOM) :
                ret = new TaxModelDocLineProdJournalBOMImpl();
                break;
            case tableNum(ProdTable) :
            case tableNum(BOMParmReportFinish) :
                ret = new TaxModelDocLineProdTableImpl();
                break;
            case tableNum(TSTimesheetLine) :
                ret = new TaxModelDocLineTimesheetLineImpl();
                break;
            case tableNum(SMAServiceOrderLine) :
                ret = new TaxModelDocLineServiceOrderImpl();
                break;
            case tableNum(InventQualityOrderTable) :
                ret = new TaxModelDocLineQualityOrderImpl();
                break;
            case tableNum(LedgerJournalTrans_Project) :
                ret = new TaxModelDocLineJournalProjImpl();
                break;
            case tableNum(VendPackingSlipTrans) :
                ret = new TaxModelDocLineVendPackingSlipImpl();
                break;
            case tableNum(PSAContractLineItems) :
                ret = new TaxModelDocLinePSAContractLineItemsImpl();
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of <c>TaxModelTaxable</c>
    /// </summary>
    /// <param name="_documentLine">
    /// The document line
    /// </param>
    /// <returns>
    /// The instance of <c>TaxModelTaxable</c>
    /// </returns>
    public TaxModelTaxable getInstance(SalesPurchJournalLine _documentLine)
    {
        TaxModelTaxable                 ret;
        container                       cacheResult;
        TaxModelDocumentLineAttribute   taxModelDocumentLineAttribute;
        classId                         derivedClassId;
        container                       cacheKey;

        taxModelDocumentLineAttribute = this.getTaxModelDocumentLineAttribute(_documentLine);

        cacheKey    = this.getCacheKey(taxModelDocumentLineAttribute);
        cacheResult = TaxModelCache::getValue(
                        TaxModelCacheScope::TaxableTransactionClassInfo,
                        cacheKey);

        ret = this.getObjectFromCache(cacheResult);

        if (ret == null)
        {
            if (#UseExtensionFactory)
            {
                // Note: The attribute should be country region code specific
                // if we want to use extension factory
                ret = SysExtensionAppClassFactory::getClassFromSysAttribute(
                    this.getTaxModelDocLineBaseClassStr(),
                    taxModelDocumentLineAttribute);
            }
            else
            {
                ret = this.generateDocLineInstance(_documentLine, taxModelDocumentLineAttribute);
            }

            if (ret != null)
            {
                derivedClassId = classIdGet(ret);
                cacheResult = [derivedClassId];
                TaxModelCache::insertValue(
                    TaxModelCacheScope::TaxableTransactionClassInfo,
                    cacheKey,
                    cacheResult);
            }
        }

        if (ret)
        {
            if (ret is TaxModelDocLineBaseImpl)
            {
                TaxModelDocLineBaseImpl taxModelDocLine = ret as TaxModelDocLineBaseImpl;
                taxModelDocLine.parmAutoCreateTransTaxInformation(this.parmAutoCreateTransTaxInformation());
            }

            ret.init(_documentLine);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModelDocLineBaseClassStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get TaxModel document line base class name string
    /// </summary>
    /// <returns>
    /// Class name string
    /// </returns>
    [Replaceable]
    protected str getTaxModelDocLineBaseClassStr()
    {
        return classStr(TaxModelDocLineBaseImpl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get cache key.
    /// </summary>
    /// <param name = "_taxModelDocumentLineAttribute">
    /// TaxMode document line attribute.
    /// </param>
    /// <returns>
    /// Cache key.
    /// </returns>
    protected container getCacheKey(TaxModelDocumentLineAttribute _taxModelDocumentLineAttribute)
    {
        container cacheKey = [classIdGet(_taxModelDocumentLineAttribute), _taxModelDocumentLineAttribute.getKey()];
        
        LogisticsAddressCountryRegionISOCode isoCode = SysCountryRegionCode::countryInfo(curExt());
        container countryRegionCodes = this.getExtendedCountryRegionCodes();
        if (conFind(countryRegionCodes, isoCode))
        {
            cacheKey += [isoCode];
        }

        return cacheKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtendedCountryRegionCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get extended country region codes.
    /// </summary>
    /// <returns>
    /// Container.
    /// </returns>
    protected container getExtendedCountryRegionCodes()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getObjectFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the object from cache.
    /// </summary>
    /// <param name="_cacheResult">
    /// The cache result.
    /// </param>
    /// <returns>
    /// The cache object.
    /// </returns>
    protected Object getObjectFromCache(container _cacheResult)
    {
        classId     derivedClassId;
        DictClass   dictClass;
        Object      ret;

        if (_cacheResult != conNull())
        {
            derivedClassId = conPeek(_cacheResult, 1);
            dictClass = new DictClass(derivedClassId);
            ret = dictClass.makeObject();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModelDocumentLineAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax model document line attribute.
    /// </summary>
    /// <param name="_documentLine">
    /// The document line information.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxModelDocumentLineAttribute</c> class.
    /// </returns>
    protected TaxModelDocumentLineAttribute getTaxModelDocumentLineAttribute(SalesPurchJournalLine _documentLine)
    {
        return new TaxModelDocumentLineAttribute(tableid2name(_documentLine.TableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of <c>TaxModelTaxable</c>
    /// </summary>
    /// <param name="_documentLine">
    /// The document line
    /// </param>
    /// <returns>
    /// The instance of <c>TaxModelTaxable</c>
    /// </returns>
    public static TaxModelTaxable newTaxModelDocLine(SalesPurchJournalLine _documentLine)
    {
        return TaxModelDocLineFactory::getTaxModelDocLineInstance(_documentLine, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModelDocLineInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of <c>TaxModelTaxable</c>
    /// </summary>
    /// <param name="_documentLine">
    /// The document line
    /// </param>
    /// <returns>
    /// The instance of <c>TaxModelTaxable</c>
    /// </returns>
    public static TaxModelTaxable getTaxModelDocLineInstance(SalesPurchJournalLine _documentLine, boolean _autoCreateTransTaxInformation = true)
    {
        TaxModelDocLineFactoryable      factory;
        TaxModelTaxable                 ret;

        Debug::assert(_documentLine.SourceTableId != 0);

        factory = TaxModelDocLineFactoryManager::getFactoryInstance(_documentLine);
        if (factory != null)
        {
            if (factory is TaxModelDocLineFactory)
            {
                TaxModelDocLineFactory factoryIN = factory as TaxModelDocLineFactory;
                factoryIN.parmAutoCreateTransTaxInformation(_autoCreateTransTaxInformation);
            }

            ret = factory.getInstance(_documentLine);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAutoCreateTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets auto create trans tax information.
    /// </summary>
    /// <param name = "_autoCreateTransTaxInformation"></param>
    /// <returns></returns>
    public boolean parmAutoCreateTransTaxInformation(boolean _autoCreateTransTaxInformation = autoCreateTransTaxInformation)
    {
        autoCreateTransTaxInformation = _autoCreateTransTaxInformation;

        return autoCreateTransTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaxModelDocLineScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of scrap <c>TaxModelTaxable</c>
    /// </summary>
    /// <param name="_documentLine">
    /// The document line
    /// </param>
    /// <returns>
    /// The instance of <c>TaxModelTaxable</c>
    /// </returns>
    public static TaxModelTaxable newTaxModelDocLineScrap(SalesPurchJournalLine _documentLine)
    {
        TaxModelDocLineFactoryable   factory;

        Debug::assert(_documentLine.SourceTableId != 0);

        factory = new TaxModelDocLineScrapFactory();

        return factory.getInstance(_documentLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>