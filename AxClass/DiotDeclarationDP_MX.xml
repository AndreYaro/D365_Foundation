<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>diotDeclarationDP_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DiotDeclarationDP_MX</c> class is the Report Data Provider class for the DIOT reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(DiotDeclarationContract_MX))
]
class diotDeclarationDP_MX extends SrsReportDataProviderPreProcessTempDB
{
    DIOTDeclarationConcept_MX           diotDeclarationConcept;
    DIOTDeclarationTaxCode_MX           diotDeclarationTaxCode;
    DIOTDeclarationTmp_MX               diotDeclarationTmp;
    TaxTrans                            taxTrans;
    VendTable                           vendTable;
    TransDate                           fromDate;
    TransDate                           toDate;
    NoYes                               generateFile;
    DIOTReportType_MX                   reportType;
    TaxVatReportOption_MX               show;
    RealBase                            percentageGlobalVendors;
    Amount                              upperlimit;
    str 30                              vendorOperationType;
    boolean                             firstRecord;
    TransDate                           transDate;
    VendorOperationType_MX              operationType;
    Voucher                             purchIdVoucher;
    InvoiceId                           invoice;
    TaxPeriod                           unrealizedTaxPeriod;
    TaxPeriod                           realizedTaxPeriod;
    private Voucher                     curTaxTransVoucher;
    private Set                         promissoryNoteInvoices;

    #define.padZero('0')
    #define.blank('')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findAmountBasedOnColumnType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns amounts based on the column type.
    /// </summary>
    /// <param name="_diotColumnType">
    ///    The <c>DIOTColumntype</c> to use to find the amount.
    /// </param>
    /// <returns>
    ///    Amounts based on the column type. <c>SourceBaseAmountCur</c> of the <c>TaxTrans</c> table when the
    ///    <c>ColumnType</c> is of type <c>NetAmount</c>. <c>SourceTaxAmountCur</c> of the <c>TaxTrans</c>
    ///    table when the <c>ColumnType</c> is of type <c>TaxAmount</c>. 0 when the <c>ColumnType</c> is of
    ///    type <c>None</c>.
    /// </returns>
    public Amount findAmountBasedOnColumnType(DIOTColumnType_MX   _diotColumnType)
    {
        AmountMST  amount;

        switch (_diotColumnType)
        {
            case DIOTColumnType_MX::NetAmount:
                amount = taxTrans.TaxBaseAmount;
                break;

            case DIOTColumnType_MX::TaxAmount:
                amount = taxTrans.TaxAmount;
                break;

            default:
                amount = 0;
                break;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cloneDIOTDeclarationTmpTable</Name>
				<Source><![CDATA[
    private DIOTDeclarationTmp_MX cloneDIOTDeclarationTmpTable(DIOTDeclarationTmp_MX _cursor)
    {
        DIOTDeclarationTmp_MX tmpTable;

        while select _cursor
        {
            tmpTable.data(_cursor);
            tmpTable.insert();
        }

        return tmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDomesticGlobalBasedOnUpperLimit</Name>
				<Source><![CDATA[
    public void findDomesticGlobalBasedOnUpperLimit()
    {
        DIOTDeclarationTmp_MX   diotDeclarationTmpLoc;
        DIOTDeclarationTmp_MX   diotDeclarationTmpTmp;
        Amount                  amountSumofAllTransDomesticGlobal;
        Amount                  amountSumofAllTrans;
        Amount                  percentageOfAllTrans;
        
        select sum(OriginAmount), sum(OriginTaxAmount) from diotDeclarationTmp;
        amountSumofAllTrans = diotDeclarationTmp.OriginAmount;
        
        diotDeclarationTmpLoc = this.cloneDIOTDeclarationTmpTable(diotDeclarationTmp);
        
        // Scenario 1: Check for Transactions which has Vendor Type as 15: Domestic/Global Vendor
        // When Sum of transactions is more than upper limit, change vendor type to Domestic vendor
        while select sum(OriginAmount) from diotDeclarationTmpLoc
        group by RfcOrForeignTaxReg asc, VendorType, VendAccount
            where diotDeclarationTmpLoc.VendorType == VendorType_MX::DomesticGlobal
        {
            if (diotDeclarationTmpLoc.OriginAmount > upperlimit)
            {
                update_recordset diotDeclarationTmp
                setting VendorType = VendorType_MX::DomesticVendor
                    where diotDeclarationTmp.VendAccount == diotDeclarationTmpLoc.VendAccount;
            }
        }

        // Scenario 2: Check for Transactions which has Vendor Type as 15: Domestic/Global Vendor after scenario 1
        // When product of sum of all transactions and Global percentage is more than Sum of transactions of type 15: Domestic/Global Vendor
        // Then change last transaction to Domestic vendor
        
        select sum(OriginAmount), sum(OriginTaxAmount) from diotDeclarationTmp
        where diotDeclarationTmp.VendorType == VendorType_MX::DomesticGlobal;

        amountSumofAllTransDomesticGlobal = diotDeclarationTmp.OriginAmount;

        diotDeclarationTmpLoc = this.cloneDIOTDeclarationTmpTable(diotDeclarationTmp);

        insert_recordset diotDeclarationTmpTmp (OriginAmount,VendAccount)
            select sum(OriginAmount), VendAccount from diotDeclarationTmpLoc
            group by VendAccount
            where diotDeclarationTmpLoc.VendorType == VendorType_MX::DomesticGlobal;

        percentageOfAllTrans = amountSumofAllTrans * (percentageGlobalVendors/100);

        while select * from diotDeclarationTmpTmp
            order by OriginAmount asc
        {
            if (amountSumofAllTransDomesticGlobal > percentageOfAllTrans)
            {
                amountSumofAllTransDomesticGlobal -= diotDeclarationTmpTmp.OriginAmount;
                update_recordset diotDeclarationTmp
                    setting VendorType = VendorType_MX::DomesticVendor
                    where diotDeclarationTmp.VendAccount == diotDeclarationTmpTmp.VendAccount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchPromissoryNoteInvoices</Name>
				<Source><![CDATA[
    private VendPromissoryNoteInvoice searchPromissoryNoteInvoices(str _promissoryNoteId)
    {
        VendPromissoryNoteInvoice promissoryNoteInvoice;
        LedgerJournalTrans        ledgerJournalTrans;
        TaxTrans                  ledgerTaxTrans;
        AmountMST                 taxAmount     = abs(taxTrans.TaxAmount);
        AmountMST                 taxBaseAmount = abs(taxTrans.TaxBaseAmount);
        AmountMST                 taxTransTotal = taxAmount + taxBaseAmount;

        select InvoiceId, InvoiceVoucher from promissoryNoteInvoice
            where promissoryNoteInvoice.PromissoryNoteId == _promissoryNoteId
                && promissoryNoteInvoice.InvoiceId
                && ((promissoryNoteInvoice.InvoiceAmountMST >= 0 && taxTransTotal == promissoryNoteInvoice.InvoiceAmountMST)
                || (promissoryNoteInvoice.InvoiceAmountMST < 0 && taxTransTotal == - promissoryNoteInvoice.InvoiceAmountMST))
            exists join ledgerJournalTrans
                where ledgerJournalTrans.Voucher == promissoryNoteInvoice.InvoiceVoucher
                    && ledgerJournalTrans.Invoice == promissoryNoteInvoice.InvoiceId
                exists join ledgerTaxTrans
                    where ledgerTaxTrans.SourceRecId == ledgerJournalTrans.RecId
                        && ledgerTaxTrans.SourceTableId == ledgerJournalTrans.TableId
                        && ((ledgerTaxTrans.TaxAmount >= 0 && ledgerTaxTrans.TaxAmount == taxAmount)
                            || (ledgerTaxTrans.TaxAmount < 0 && - ledgerTaxTrans.TaxAmount == taxAmount))
                        && ((ledgerTaxTrans.TaxBaseAmount >= 0 && ledgerTaxTrans.TaxBaseAmount == taxBaseAmount)
                            || (ledgerTaxTrans.TaxBaseAmount < 0 && - ledgerTaxTrans.TaxBaseAmount == taxBaseAmount));

        return promissoryNoteInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPromissoryNoteInvoices</Name>
				<Source><![CDATA[
    private Set getPromissoryNoteInvoices()
    {
        if (!promissoryNoteInvoices)
        {
            promissoryNoteInvoices = new Set(Types::String);
        }

        return promissoryNoteInvoices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attemptPromissoryNoteInvoiceMatch</Name>
				<Source><![CDATA[
    private void attemptPromissoryNoteInvoiceMatch(VendTrans _vendTrans)
    {
        VendPromissoryNoteInvoice promissoryNoteInvoice = this.searchPromissoryNoteInvoices(_vendTrans.PromissoryNoteID);
        Set                       invoices              = this.getPromissoryNoteInvoices();

        // iterate through the invoice numbers and if not already seen, assign to the vend trans
        // we should only have one matching invoice, but in the limitations in the remarks above, we may need to iterate through more than one row to assign the
        // first invoice ID we did not already use
        while (promissoryNoteInvoice)
        {
            if (!invoices.in(promissoryNoteInvoice.InvoiceId))
            {
                _vendTrans.Invoice = promissoryNoteInvoice.InvoiceId;
                invoices.add(promissoryNoteInvoice.InvoiceId);
                break;
            }

            next promissoryNoteInvoice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reconcilePromissoryNoteInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method attempts to find the invoice number of the transaction that is the source of a settled promissory note VendTrans if it does not already have an InvoiceId.
    /// Historical records settled before updates to the settling process were made do not have a value for the TaxTrans.PromissoryNoteInvoice field, so in these instances, we
    /// must guess the invoice number based on the process outlined in the remarks.
    /// </summary>
    /// <param name = "_vendTrans">The settled vend trans record</param>
    /// <remarks>
    /// It attempts to find the invoice number in a "best guess" approach, i.e. by performing the following matching process:
    /// 1) Calculates the absolute total of the tax trans amount (i.e TaxAmount + TaxBaseAmount)
    /// 2) Searches the <c>VendPromissoryNoteInvoice</c> table for a record which has:
    ///     a) The same promissory note ID and,
    ///     b) A tax trans entry which has tax amounts matching the current taxTrans amounts. The tax trans entry associated with the invoice row is searched
    ///     by using the invoice voucher to find the ledger journal trans record which created the invoice and then searches for the associated tax trans
    /// 3) If a record is found, the vend trans record is populated with the matched invoice ID
    ///
    /// This approach has limitations however. If a promissory note has 2 invoices settled on it with the same amounts,
    /// we cannot disambiguate the invoice number to use. In this case, we assign the matching invoice numbers to each row (i.e it's a guess, however in the report, it does not affect the report processing/amounts).
    /// To get around this, we need a way to uniquely link tax trans records to each promissory note invoice record at the posting of the "Draw promissory note journal" which does not seem possible/easy
    /// to do
    /// </remarks>
    private void reconcilePromissoryNoteInvoice(VendTrans _vendTrans)
    {
        if (_vendTrans.PromissoryNoteID && _vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Honored && !_vendTrans.Invoice)
        {
            TaxTrans_W taxTrans_W = TaxTrans_W::findByTaxTrans(TaxTrans.RecId);

            if (taxTrans_W.PromissoryNoteInvoice_MX)
            {
                _vendTrans.Invoice = taxTrans_W.PromissoryNoteInvoice_MX;
            }
            else
            {
                // no settlement record, attempt to search for it
                this.attemptPromissoryNoteInvoiceMatch(_vendTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommonRecord</Name>
				<Source><![CDATA[
    private common getCommonRecord(
        DIOTReportType_MX   _reportType,
        TransDate           _fromDate,
        TransDate           _toDate)
    {
        Common                              common;
        DIOTAddlInfoForNoVendorLedger_MX    dIOTAddlInfoForNoVendorLedger;
        LedgerJournalTrans                  ledgerJournalTrans;

        VendTrans vendTrans = this.findVendTrans();

        if (vendTrans)
        {
            this.reconcilePromissoryNoteInvoice(vendTrans);

            purchIdVoucher = VendInvoiceJour::findFromVendTrans(vendTrans.Invoice, vendTrans.TransDate, vendTrans.AccountNum).PurchId;
            common = vendTrans;
        }
        else if (! vendTrans) // no managed vendors
        {
            select TransDate, Voucher, Invoice, OperationType_MX, RecId
            from ledgerJournalTrans
                where ledgerJournalTrans.Voucher      == taxTrans.Voucher
                   && ledgerJournalTrans.TransDate    == taxTrans.TransDate
                   && ledgerJournalTrans.AccountType  != LedgerJournalACType::Vend
            join dIOTAddlInfoForNoVendorLedger
                where dIOTAddlInfoForNoVendorLedger.LedgerJournalTrans == ledgerJournalTrans.RecId;

            if (ledgerJournalTrans)
            {
                common = dIOTAddlInfoForNoVendorLedger;

                operationType = ledgerJournalTrans.OperationType_MX;
                transDate     = ledgerJournalTrans.TransDate;
                if (_reportType == DIOTReportType_MX::Detailed)
                {
                    purchIdVoucher  = ledgerJournalTrans.Voucher;
                    invoice         = ledgerJournalTrans.Invoice;
                }
            }
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the company information buffer.
    /// </summary>
    /// <returns>
    ///    The company information buffer.
    /// </returns>
    public CompanyInfo getCompanyInfo()
    {
        return CompanyInfo::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getdiotDeclarationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the Report Data Provider class for DIOT SSRS reports.
    /// </summary>
    /// <returns>
    ///    The populated temporary table.
    /// </returns>
    [
        #DIOT_MX
    SRSReportDataSetAttribute(#tableName)
    ]
    public DIOTDeclarationTmp_MX getdiotDeclarationTmp()
    {
        select * from diotDeclarationTmp
            order by RfcOrForeignTaxReg;

        return diotDeclarationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationTypeFromInvoice</Name>
				<Source><![CDATA[
    private void getOperationTypeFromInvoice(VendTrans _vendTrans)
    {
        vendInvoiceJour vendInvoiceJour = _vendTrans.vendInvoiceJour();

        if (this.vendInvoiceJourHasLines(vendInvoiceJour))
        {
            InventTransId inventTransId;

            if (taxTrans.TaxOrigin == TaxOrigin::Tax)
            {
                inventTransId = taxTrans.InventTransId;
            }
            else
            {
                //If tax trans from the main while select{} loop is from settlement,
                //vend trans we use for the report may be misaligned with that tax trans.
                //For this case we need to find tax trans linked to the vend trans we use.
                inventTransId = TaxTrans::find(_vendTrans.Voucher, _vendTrans.TransDate).InventTransId;
            }

            VendInvoiceTrans vendInvoiceTrans = VendInvoiceTrans::findVendInvoiceTrans(
                vendInvoiceJour.PurchId,
                vendInvoiceJour.InvoiceId,
                vendInvoiceJour.InvoiceDate,
                vendInvoiceJour.NumberSequenceGroup,
                vendInvoiceJour.InternalInvoiceId,
                inventTransId);

            operationType = vendInvoiceTrans.OperationType_MX;
        }
        else
        {
            operationType  = vendInvoiceJour.OperationType_MX;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the report parameters.
    /// </summary>
    private void getParameters()
    {
        DiotDeclarationContract_MX  diotDeclarationContract_MX = this.parmDataContract() as DiotDeclarationContract_MX;

        show                    = diotDeclarationContract_MX.parmShow();

        unrealizedTaxPeriod     = diotDeclarationContract_MX.parmUnrealizedTaxPeriod();
        realizedTaxPeriod       = diotDeclarationContract_MX.parmRealizedTaxPeriod();

        fromDate                = diotDeclarationContract_MX.parmFromDate();
        toDate                  = diotDeclarationContract_MX.parmToDate();

        reportType              = diotDeclarationContract_MX.parmReportType();
        generateFile            = diotDeclarationContract_MX.parmGenerateFile();
        upperlimit              = diotDeclarationContract_MX.parmUpperlimit();
        percentageGlobalVendors = diotDeclarationContract_MX.parmPercentageGlobalVendors();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAddressCompanyRfc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values into the <c>Address</c> and <c>CompanyRfc</c> fields of the
    ///    <c>DIOTDeclarationTmp_MX</c> table for the first time only.
    /// </summary>
    private void insertAddressCompanyRfc()
    {
        diotDeclarationTmp.Address    = this.getCompanyInfo().postalAddress().Address;
        diotDeclarationTmp.CompanyRfc = this.getCompanyInfo().Rfc_MX;
        firstRecord = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDIOTDeclarationTmp_Consolidated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into a temporary table based on the column type.
    /// </summary>
    /// <param name="_diotDeclarationConcept">
    ///    The <c>DIOTDeclarationConcept</c> value that contains concept IDs.
    /// </param>
    /// <param name="_rfcForeignTaxReg">
    ///    The <c>Rfc_MX</c> or <c>TaxRegistrationNumber_MX</c> value.
    /// </param>
    /// <param name="_vendorOperationType">
    ///    The type of operation value that was passed.
    /// </param>
    /// <param name="_vendorType">
    ///    The type of vendor value.
    /// </param>
    /// <param name="_transDate">
    ///    The date of transaction posted.
    /// </param>
    /// <param name="_vendAccount">
    ///    The vendor account value only for managed vendors.
    /// </param>
    /// <param name="_diotCountryCode">
    ///    The <c>DIOTCountryCode</c> value only for foreign vendors.
    /// </param>
    /// <param name="_vendorNationality">
    ///    The vendor nationality only for foreign vendors.
    /// </param>
    /// <param name="_vendName">
    ///    The vend name for non-managed vendors.
    /// </param>
    /// <param name="_rfc">
    ///    The <c>Rfc</c> value.
    /// </param>
    /// <param name="_foreignTaxRegistration">
    ///    The foreign tax registration.
    /// </param>
    /// <remarks>
    ///    This method inserts records into a temporary table based on the column type.
    /// </remarks>
    private void insertDIOTDeclarationTmp_Consolidated(
    DIOTDeclarationConcept_MX   _diotDeclarationConcept,
    Description                 _rfcForeignTaxReg,
    VendorOperationType_MX      _vendorOperationType,
    VendorType_MX               _vendorType,
    TransDate                   _transDate,
    VendAccount                 _vendAccount,
    DiotCountryCode_MX          _diotCountryCode,
    VendorNationality_MX        _vendorNationality,
    VendName                    _vendName,
    Rfc_MX                      _rfc = #blank,
    ForeignTaxRegistration_MX   _foreignTaxRegistration = #blank)
    {
        AmountMST   amount;
        vendorOperationType = int2str(enum2int(_vendorOperationType));
        if (strlen(vendorOperationType) == 1)
        {
            vendorOperationType = #padZero + vendorOperationType;
        }

        select diotDeclarationTmp
        where diotDeclarationTmp.ConceptId           == _diotDeclarationConcept.ConceptId
           && diotDeclarationTmp.RfcOrForeignTaxReg  == _rfcForeignTaxReg
           && diotDeclarationTmp.VendorOperationType == vendorOperationType
            && (_vendorType == VendorType_MX::DomesticVendor
                || diotDeclarationTmp.VendAccount == _vendAccount);

        amount = this.findAmountBasedOnColumnType(_diotDeclarationConcept.ColumnType);

        if (_diotDeclarationConcept.Nondeductible == NoYes::Yes)
        {
            amount = amount * (_diotDeclarationConcept.Nondeductibleamount/100);
        }

        if (diotDeclarationTmp)
        {
            ttsbegin;

            diotDeclarationTmp.selectForUpdate(true);

            diotDeclarationTmp.Amount += amount;

            diotDeclarationTmp.doUpdate();

            ttscommit;
        }
        else
        {
            if (!firstRecord)
            {
                this.insertAddressCompanyRfc();
            }

            diotDeclarationTmp.ConceptId              = _diotDeclarationConcept.ConceptId;
            diotDeclarationTmp.VendorType             = _vendorType;
            diotDeclarationTmp.RfcOrForeignTaxReg     = _rfcForeignTaxReg;
            diotDeclarationTmp.Rfc                    = _rfc;
            diotDeclarationTmp.ForeignTaxRegistration = _foreignTaxRegistration;
            diotDeclarationTmp.Description            = _diotDeclarationConcept.Description;
            diotDeclarationTmp.VendorOperationType    = vendorOperationType;
            diotDeclarationTmp.VendAccount            = _vendAccount;
            diotDeclarationTmp.VendorName             = _vendName;
            diotDeclarationTmp.Nationality            = _vendorNationality;
            diotDeclarationTmp.CountryCode            = _diotCountryCode;
            diotDeclarationTmp.Amount                 = amount;
            diotDeclarationTmp.OriginAmount           = taxTrans.TaxBaseAmount;
            diotDeclarationTmp.OriginTaxAmount        = taxTrans.TaxAmount;

            diotDeclarationTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDIOTDeclarationTmp_Detailed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Insert records into temporary table based on the column type.
    /// </summary>
    /// <param name="_diotDeclarationConcept">
    ///    A <c>DIOTDeclarationConcept</c> buffer that contains concept IDS.
    /// </param>
    /// <param name="_rfcForeignTaxReg">
    ///    A <c>Rfc_MX</c> or <c>TaxRegistrationNumber_MX</c> value.
    /// </param>
    /// <param name="_vendorType">
    ///    A type of vendor value.
    /// </param>
    /// <param name="_purchIdVoucher">
    ///    A voucher or purchase ID value that is passed from the <c>VendTrans</c> or
    ///    <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <param name="_invoiceId">
    ///    An invoice value that is passed from the <c>VendTrans</c> or <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <param name="_vendorOperationType">
    ///    A type of operation value.
    /// </param>
    /// <param name="_transDate">
    ///    The date that the transaction is posted.
    /// </param>
    /// <param name="_vendAccount">
    ///    A vend account value only for managed vendors.
    /// </param>
    /// <param name="_diotCountryCode">
    ///    The <c>DIOTCountryCode</c> value only for foreign vendors.
    /// </param>
    /// <param name="_vendorNationality">
    ///    The vendor nationality only for foreign vendors.
    /// </param>
    /// <param name="_rfc">
    ///    An Rfc Number.
    /// </param>
    /// <param name="_foreignTaxRegistration">
    ///    A foreign tax registration.
    /// </param>
    /// <remarks>
    ///    Inserts records into temporary table based on the column type.
    /// </remarks>
    private void insertDIOTDeclarationTmp_Detailed(
    DIOTDeclarationConcept_MX   _diotDeclarationConcept,
    Description                 _rfcForeignTaxReg,
    VendorType_MX               _vendorType,
    Voucher                     _purchIdVoucher,
    InvoiceId                   _invoiceId,
    VendorOperationType_MX      _vendorOperationType,
    TransDate                   _transDate,
    VendAccount                 _vendAccount,
    DiotCountryCode_MX          _diotCountryCode,
    VendorNationality_MX        _vendorNationality,
    Rfc_MX                      _rfc = #blank,
    ForeignTaxRegistration_MX   _foreignTaxRegistration = #blank)
    {
        AmountMST   amount;

        if (!firstRecord)
        {
            this.insertAddressCompanyRfc();
        }

        diotDeclarationTmp.ConceptId              = _diotDeclarationConcept.ConceptId;
        diotDeclarationTmp.VendorType             = _vendorType;
        diotDeclarationTmp.RfcOrForeignTaxReg     = _rfcForeignTaxReg;
        diotDeclarationTmp.Rfc                    = _rfc;
        diotDeclarationTmp.ForeignTaxRegistration = _foreignTaxRegistration;
        diotDeclarationTmp.Description            = _diotDeclarationConcept.Description;
        diotDeclarationTmp.CountryCode            = _diotCountryCode;
        diotDeclarationTmp.Nationality            = _vendorNationality;
        vendorOperationType                       = int2str(enum2int(_vendorOperationType));

        if (strlen(vendorOperationType) == 1)
        {
            vendorOperationType = #padZero + vendorOperationType;
        }

        diotDeclarationTmp.VendorOperationType   = vendorOperationType;
        diotDeclarationTmp.VendAccount           = _vendAccount;
        diotDeclarationTmp.TransDate             = _transDate;
        diotDeclarationTmp.PurchaseVoucherNumber = _purchIdVoucher;
        diotDeclarationTmp.Invoice               = _invoiceId;
        diotDeclarationTmp.OriginAmount          = taxTrans.TaxBaseAmount;
        diotDeclarationTmp.OriginTaxAmount       = taxTrans.TaxAmount;
        diotDeclarationTmp.TaxCode               = taxTrans.TaxCode;

        amount = this.findAmountBasedOnColumnType(_diotDeclarationConcept.ColumnType);

        if (_diotDeclarationConcept.Nondeductible == NoYes::Yes)
        {
            amount = amount * (_diotDeclarationConcept.Nondeductibleamount/100);
        }

        diotDeclarationTmp.Amount  = amount;

        diotDeclarationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the file business logic.
    /// </summary>
    /// <returns>
    ///    Returns the <c>DIOTDeclarationTmp_MX</c> table data
    /// </returns>
    /// <remarks>
    ///    This method provides the ability to write the file business logic.
    ///    The method should compute data and populate the data tables that will be returned
    ///    to write DIOT declaration file.
    /// </remarks>
    public DIOTDeclarationTmp_MX processFile()
    {
        this.getParameters();

        this.processRecords(fromDate, toDate, reportType);
        this.findDomesticGlobalBasedOnUpperLimit();

        return diotDeclarationtmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecords</Name>
				<Source><![CDATA[
    public DIOTDeclarationTmp_MX processRecords(
    TransDate           _fromDate,
    TransDate           _toDate,
    DIOTReportType_MX   _reportType = DIOTReportType_MX::Consolidated)
    {
        Common                      common;
        Rfc_MX                      rfcNumber;
        ForeignTaxRegistration_MX   foreignTaxRegistration;
        ForeignTaxRegistration_MX   rfcForeignTaxReg;
        VendorType_MX               vendorType;
        VendAccount                 accountNum;
        DiotCountryCode_MX          diotCountryCode;
        VendorNationality_MX        nationality;
        VendName                    vendName;

        while select diotDeclarationConcept
        order by ConceptId
        join diotDeclarationTaxCode
            where diotDeclarationTaxCode.diotDeclarationConcept == diotDeclarationConcept.RecId
        join taxTrans
            order by Voucher
            where taxTrans.TaxCode      == diotDeclarationTaxCode.TaxCode
               && (taxTrans.TaxDirection == TaxDirection::IncomingTax
               || (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled()
               &&  taxTrans.TaxDirection == TaxDirection::IncomingTax_W))
               && (
                    (show == TaxVatReportOption_MX::Unrealized && taxTrans.TaxPeriod == unrealizedTaxPeriod) ||
                    (show == TaxVatReportOption_MX::Realized && taxTrans.TaxPeriod == realizedTaxPeriod) ||
                    (show == TaxVatReportOption_MX::Both && (taxTrans.TaxPeriod == unrealizedTaxPeriod || taxTrans.TaxPeriod == realizedTaxPeriod))
                  )
                && (taxTrans.TransDate >= _fromDate && taxTrans.TransDate <= _toDate)
        {
            if (!curTaxTransVoucher || taxTrans.Voucher != curTaxTransVoucher)
            {
                promissoryNoteInvoices = new Set(Types::String);
                curTaxTransVoucher = taxTrans.Voucher;
            }

            transDate = dateNull();
            invoice = '';
            purchIdVoucher = '';
            operationType = VendorOperationType_MX::Blank;

            common = this.getCommonRecord(_reportType, _fromDate, _toDate);

            if (common.RecId)
            {
                switch (common.TableId)
                {
                    case tablenum(VendTrans) :
                        VendTrans invoiceVendTrans = common;

                        if (purchIdVoucher  == '')
                        {
                            purchIdVoucher = invoiceVendTrans.Voucher;
                        }
                        
                        this.getOperationTypeFromInvoice(invoiceVendTrans);

                        vendTable               = VendTable::find(invoiceVendTrans.AccountNum);
                        rfcNumber               = vendTable.Rfc_MX;
                        foreignTaxRegistration  = vendTable.ForeignTaxRegistration_MX;
                        rfcForeignTaxReg        = vendTable.ForeignTaxRegistration_MX
                                              ? vendTable.ForeignTaxRegistration_MX
                                              : vendTable.Rfc_MX;
                        vendorType              = vendTable.VendorType_MX;

                        if (!operationType)
                        {
                            operationType   = vendTable.OperationType_MX;
                        }

                        transDate               = invoiceVendTrans.TransDate;
                        accountNum              = invoiceVendTrans.AccountNum;
                        diotCountryCode         = LogisticsAddressCountryRegion::find(VendTable.DiotCountryCode_MX).ISOcode;
                        nationality             = vendTable.Nationality_MX;
                        vendName                = vendTable.VendorType_MX == VendorType_MX::ForeignVendor ? vendTable.name() : #blank;

                        if (_reportType == DIOTReportType_MX::Detailed)
                        {
                            invoice         = invoiceVendTrans.Invoice;
                        }
                        break;

                    case tablenum(DIOTAddlInfoForNoVendorLedger_MX),
                    tablenum(DIOTAddlInfoForNoVendorProj_MX) :
                        DIOTAdditionalInfoForNoVendor_MX diotAdditionalInfo = common as DIOTAdditionalInfoForNoVendor_MX;

                        rfcNumber               = diotAdditionalInfo.Rfc;
                        foreignTaxRegistration  = diotAdditionalInfo.ForeignTaxRegistration;
                        rfcForeignTaxReg        = diotAdditionalInfo.ForeignTaxRegistration
                                              ? diotAdditionalInfo.ForeignTaxRegistration
                                              : diotAdditionalInfo.Rfc;
                        vendorType              = diotAdditionalInfo.VendorType;
                        accountNum              = #blank;
                        diotCountryCode         = LogisticsAddressCountryRegion::find(diotAdditionalInfo.DiotCountryCode).ISOcode;
                        nationality             = diotAdditionalInfo.Nationality;
                        vendName                = diotAdditionalInfo.VendorType == VendorType_MX::ForeignVendor ? diotAdditionalInfo.Name : #blank;

                        break;

                    default:
                        break;
                }

                if (_reportType == DIOTReportType_MX::Consolidated)
                {
                    this.insertDIOTDeclarationTmp_Consolidated(diotDeclarationConcept,
                                                           rfcForeignTaxReg,
                                                           operationType,
                                                           vendorType,
                                                           transDate,
                                                           accountNum,
                                                           diotCountryCode,
                                                           nationality,
                                                           vendName,
                                                           rfcNumber,
                                                           foreignTaxRegistration);
                }
                else
                {
                    this.insertDIOTDeclarationTmp_Detailed(diotDeclarationConcept,
                                                       rfcForeignTaxReg,
                                                       vendorType,
                                                       purchIdVoucher,
                                                       invoice,
                                                       operationType,
                                                       transDate,
                                                       accountNum,
                                                       diotCountryCode,
                                                       nationality,
                                                       rfcNumber,
                                                       foreignTaxRegistration);
                }
            }
        }

        return diotDeclarationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. The method will be called by
    ///    SSRS at runtime. The method should compute data and populate the data tables that will be returned
    ///    to SSRS.
    /// </remarks>
    public void processReport()
    {
        this.getParameters();

        this.processRecords(fromDate, toDate, reportType);

        if (reportType == DIOTReportType_MX::Detailed)
        {
            this.findDomesticGlobalBasedOnUpperLimit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendTrans</Name>
				<Source><![CDATA[
    private VendTrans findVendTrans()
    {
        VendTrans       invoiceVendTrans;
        vendTrans       settlementVendTrans;
        VendSettlement  vendSettlement;

        Voucher     taxTransVoucher;
        TransDate   taxTransDate;

        if (taxTrans.TaxOrigin == TaxOrigin::Tax)
        {
            select invoiceVendTrans
                where invoiceVendTrans.Voucher   == taxTrans.Voucher
                    && invoiceVendTrans.TransDate == taxTrans.TransDate;
        }
        else
        {
            select vendSettlement
                join invoiceVendTrans
                where vendSettlement.OffsetRecid       == invoiceVendTrans.RecId
                && ((invoiceVendTrans.PromissoryNoteID != '' && invoiceVendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Honored)
                   || invoiceVendTrans.Invoice         != '')
                   && vendSettlement.SettlementVoucher == taxTrans.Voucher
                   && vendSettlement.TransDate         == TaxTrans.TransDate;
        }

        return invoiceVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJourHasLines</Name>
				<Source><![CDATA[
    private boolean vendInvoiceJourHasLines(VendInvoiceJour _vendInvoiceJour)
    {
        return (select firstOnly RecId from vendInvoiceTrans
           where vendInvoiceTrans.PurchID                   == _vendInvoiceJour.PurchId &&
                    vendInvoiceTrans.InvoiceId              == _vendInvoiceJour.InvoiceId &&
                    vendInvoiceTrans.InvoiceDate            == _vendInvoiceJour.InvoiceDate &&
                    vendInvoiceTrans.NumberSequenceGroup    == _vendInvoiceJour.numberSequenceGroup &&
                    vendInvoiceTrans.InternalInvoiceId      == _vendInvoiceJour.InternalInvoiceId).RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>