<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportERController_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TaxReportERController_IT extends SysOperationServiceController implements BatchRetryable
{
    private TaxReport_IT taxReport_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxReportERController_IT controller = TaxReportERController_IT::construct();
        controller.initContract(_args);

        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxReportERController_IT construct()
    {
        IdentifierName className = classStr(TaxReportERService_IT);
        IdentifierName methodName = methodStr(TaxReportERService_IT, runReport);
        SysOperationExecutionMode mode = SysOperationExecutionMode::Synchronous;

        TaxReportERController_IT controller = new TaxReportERController_IT(className, methodName, mode);
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SYS336143";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDialogCaption</Name>
				<Source><![CDATA[
    public LabelType parmDialogCaption(LabelType _dialogCaption = dialogCaption)
    {
        return this.caption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initContract</Name>
				<Source><![CDATA[
    private void initContract(Args _args)
    {
        TaxReportERContract_IT contract = this.getDataContractObject() as TaxReportERContract_IT;

        if (_args && _args.dataset() == tableNum(TaxReportVoucher))
        {
            TaxReportVoucher taxReportVoucher = _args.record();

            contract.parmTaxPeriod(taxReportVoucher.TaxPeriod);
            contract.parmIsVariativePeriod(false);
            contract.parmFromDate(taxReportVoucher.FromDate);
            contract.parmToDate(taxReportVoucher.ToDate);
            contract.parmTaxBookTypeJournal(TaxBookTypeJournal::Empty);
            contract.parmFromTaxBookRecId(0);
            contract.parmToTaxBookRecId(0);

            contract.parmPrintVATBooks(true);
            contract.parmPrintVATSummary(true);
            contract.parmPrintVATPayment(true);

            taxReport_IT = new TaxReport_IT();
            taxReport_IT.parmTaxPeriod(taxReportVoucher.TaxPeriod);
            taxReport_IT.parmFromDate(taxReportVoucher.FromDate);
            taxReport_IT.parmToDate(taxReportVoucher.ToDate);
        }
        else if (_args && classIdGet(_args.caller()) == classNum(TaxReport_IT))
        {
            taxReport_IT = _args.caller();
            contract.parmTaxPeriod(taxReport_IT.taxPeriod());

            if (taxReport_IT.update())
            {
                contract.parmIsVariativePeriod(false);
                contract.parmFromDate(taxReport_IT.fromDate());
                contract.parmToDate(taxReport_IT.toDate());
                contract.parmTaxBookTypeJournal(TaxBookTypeJournal::Empty);
                contract.parmFromTaxBookRecId(0);
                contract.parmToTaxBookRecId(0);

                contract.parmPrintVATBooks(true);
                contract.parmPrintVATSummary(true);
                contract.parmPrintVATPayment(true);

                contract.parmUpdateNumberOfPages(true);

                if (this.isInBatch())
                {
                    this.parmShowDialog(false);
                }
            }

            if (!contract.parmIsVariativePeriod())
            {
                contract.parmFromDate(taxReport_IT.fromDate());
                contract.parmToDate(taxReport_IT.toDate());
            }

            contract.parmVATBalancePeriod(taxReport_IT.parmVATBalancePeriod());
            contract.parmPrevVATCredit(taxReport_IT.parmPrevVATCredit());
            contract.parmVATCompensation(taxReport_IT.parmVATCompensation());
            contract.parmPrevVATDebit(taxReport_IT.parmPrevVATDebit());
            contract.parmVATPrePayment(taxReport_IT.parmVATPrePayment());
            contract.parmVATBalance(taxReport_IT.vatBalance());
            contract.parmVATPaymentAmount(taxReport_IT.parmVATPaymentAmount());
            contract.parmPaymentDate(taxReport_IT.parmPaymentDate());
            contract.parmBankAccountId(taxReport_IT.parmBankAccountId());
            contract.parmBankRef1(taxReport_IT.parmBankRef1());
            contract.parmBankRef2(taxReport_IT.parmBankRef2());
        }
        else
        {
            throw error("@ExtendedItallianLocalization:UnsupportedScenario");
        }

        contract.parmTaxReport_IT(SysOperationHelper::base64Encode(taxReport_IT.pack()));
        contract.parmTaxBookIdSkipUpdateNumberOfPages('');
        contract.parmIncludedTaxBookIds(new Set(Types::String));

        if (TaxAuthorityAddress::find(TaxPeriodHead::find(taxReport_IT.parmTaxPeriod()).TaxAuthority).SeparateTaxSummary)
        {
            contract.parmTaxBookIdSummary(TaxReportERHelper_IT::separateTaxSummaryTaxBookId());
        }
        else
        {
            TaxBook taxBook;
            select firstonly TaxBookId from taxBook
                where taxBook.TaxPeriod == taxReport_IT.parmTaxPeriod()
                    && taxBook.PrintEndSections;

            contract.parmTaxBookIdSummary(taxBook.TaxBookId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogClose</Name>
				<Source><![CDATA[
    protected void dialogClose()
    {
        if (dialogCanceled
            && taxReport_IT
            && taxReport_IT.update())
        {
            taxReport_IT.parmUpdateNow(NoYes::No);
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>