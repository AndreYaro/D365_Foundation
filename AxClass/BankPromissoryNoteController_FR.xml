<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPromissoryNoteController_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankPromissoryNoteController_FR</c> class is the controller class for the
///    <c>BankPromissoryNote_FR</c> report.
/// </summary>
class BankPromissoryNoteController_FR extends SrsReportRunController implements BatchRetryable
{
    VendTable                       vendTable;
    BankPromissoryNoteTmp_FR        bankPromissoryNoteTmp_FR;
    TmpBankPromissoryNotePrintout   tmpBankPromissoryNotePrintout;
    BankPromissoryNoteLayout        bankPromissoryNoteLayout;
    VendPromissoryNoteDocument      promissoryNote;
    #define.PrePrinted              ('BankPromissoryNote_FR.PrePrinted')
    #define.BlankPaper              ('BankPromissoryNote_FR.BlankPaper')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressBill</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the address bill information based on the record from the <c>VendTable</c> table.
    /// </summary>
    /// <returns>
    ///    The address bill information.
    /// </returns>
    private Addressing addressBill()
    {
        Addressing  addressing;

        addressing = LogisticsLocationEntity::findPostalAddress(vendTable, LogisticsLocationRoleType::Payment).Address;

        if (!addressing)
        {
            addressing = vendTable.postalAddress().Address;
        }

        return DirPartyTable::findRec(vendTable.Party).Name + '\n' + addressing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyAddr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the company address from the <c>CompanyInfo</c> table.
    /// </summary>
    /// <returns>
    ///    The company address.
    /// </returns>
    private Addressing  companyAddr()
    {
        CompanyInfo                 companyInfo;
        LogisticsAddressing         addressing;
        LogisticsLocationEntity     location;

        companyInfo = CompanyInfo::find();
        location = LogisticsLocationEntity::findLocation(companyInfo, LogisticsLocationRoleType::Payment, DateTimeUtil::getSystemDateTime(), false);

        if (location && location.parmLocationRecId())
        {
            addressing = companyInfo.Name() + '\n' + location.getPostalAddress().Address;
        }
        else
        {
            addressing = companyInfo.Name() + '\n' + companyInfo.postalAddress().Address;
        }
        return addressing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches and inserts the data into a temporary table.
    /// </summary>
    /// <returns>
    ///    The record ID of where the data was stored in the <c>SRSTmpDataStore</c> table.
    /// </returns>
    public RecId fetch()
    {
        RecId                       tmpTableDataRecId;
        SrsReportRunPermission      permission;

        while select tmpBankPromissoryNotePrintout
        {
            vendTable = VendTable::find(tmpBankPromissoryNotePrintout.VendAccount);
            this.insertIntoTempTable();
        }

        //Storing the temp table data using SRSTmpTblMarshaller
        permission = new SrsReportRunPermission();
        permission.assert();
        tmpTableDataRecId = this.storeTmpTable();
        CodeAccessPermission::revertAssert();

        delete_from bankPromissoryNoteTmp_FR;

        return tmpTableDataRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes all the required objects.
    /// </summary>
    /// <param name="_promissoryNote">
    /// An object of the<c>BankPromissoryNoteController_FR</c> class.
    /// </param>
    public void initialize(VendPromissoryNoteDocument _promissoryNote)
    {
        promissoryNote              = _promissoryNote;
        tmpBankPromissoryNotePrintout.setTmpData(promissoryNote.tmpBankPromissoryNotePrintout());
        bankPromissoryNoteLayout    = tmpBankPromissoryNotePrintout.bankPromissoryNoteLayout();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the data into a temporary table.
    /// </summary>
    private void insertIntoTempTable()
    {
        bankPromissoryNoteTmp_FR.AddressBill                    = this.addressBill();
        bankPromissoryNoteTmp_FR.AmountTxt                      = tmpBankPromissoryNotePrintout.AmountTxt;
        bankPromissoryNoteTmp_FR.BankAccountCheckDigit          = substr(tmpBankPromissoryNotePrintout.AccountNum, 12, 2);
        bankPromissoryNoteTmp_FR.BankAccountNumber              = substr(tmpBankPromissoryNotePrintout.AccountNum, 1, 11);
        bankPromissoryNoteTmp_FR.BankAccountRegNumberFirstPart  = substr(tmpBankPromissoryNotePrintout.RegistrationNum, 1, 5);
        bankPromissoryNoteTmp_FR.BankAccountRegNumberSecondPart = substr(tmpBankPromissoryNotePrintout.RegistrationNum, 6, 5);
        bankPromissoryNoteTmp_FR.BankName                       = tmpBankPromissoryNotePrintout.BankName;
        bankPromissoryNoteTmp_FR.City                           = promissoryNote.city();
        bankPromissoryNoteTmp_FR.CompanyAddress                 = this.companyAddr();
        bankPromissoryNoteTmp_FR.DueDate                        = tmpBankPromissoryNotePrintout.DueDate;
        bankPromissoryNoteTmp_FR.Reference                      = tmpBankPromissoryNotePrintout.DocumentNum;
        bankPromissoryNoteTmp_FR.Siret                          = vendTable.CompanyIdSiret;
        bankPromissoryNoteTmp_FR.TransDate                      = tmpBankPromissoryNotePrintout.TransDate;
        bankPromissoryNoteTmp_FR.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this method to change the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        RecId                       recId;
        SRSTmpTblMarshallerContract contract = this.parmReportContract().parmRdpContract();
        this.initialize(this.parmArgs().caller());
        recId = this.fetch();
        contract.parmTmpTableDataRecId(recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores the temporary table by using the <c>SRSTmpTblMarshaller</c> class.
    /// </summary>
    /// <returns>
    ///    The record ID of the data store table where the temporary table is stored.
    /// </returns>
    private RecId storeTmpTable()
    {
        return SRSTmpTblMarshaller::SendTmpTblToDataProvider(bankPromissoryNoteTmp_FR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        BankPromissoryNoteController_FR     controller          =   new BankPromissoryNoteController_FR();
        PrePrintLevel                       prePrintLevelNote;

        prePrintLevelNote   =   BankPromissoryNoteLayout::find(_args.caller().parmBankAccountID()).PrePrintLevelNote;

        if (prePrintLevelNote == PrePrintLevel::BlankPaper)
        {
            controller.parmReportName(#BlankPaper);
        }
        else
        {
            controller.parmReportName(#PrePrinted);
        }
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>