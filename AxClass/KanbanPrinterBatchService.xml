<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanPrinterBatchService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanPrinterBatchService</c> class is the service class for the kanban batch print process.
/// </summary>
public class KanbanPrinterBatchService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>kanbanPrintLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines where a kanban will be printed.
    /// </summary>
    /// <param name="_kanban">
    /// The kanban in which to print.
    /// </param>
    /// <param name="_workCell">
    /// The cell in which to print.
    /// </param>
    /// <returns>
    /// A <c>KanbanPrintLocation</c> enumeration value.
    /// </returns>
    protected KanbanPrintLocation kanbanPrintLocation(
        Kanban       _kanban,
        WrkCtrIdBase _workCell)
    {
        KanbanPrintLocation     kanbanPrintLocation = KanbanPrintLocation::Default;

        if (_workCell)
        {
            KanbanRule kanbanRule = _kanban.kanbanRule();

            switch (kanbanRule.PrintKanbanAutomatically)
            {
                case KanbanAutoPrintType::Creation,
                     KanbanAutoPrintType::Plan:
                    kanbanPrintLocation = KanbanPrintLocation::WorkCell;
                    break;
                default:
                    kanbanPrintLocation = KanbanPrintLocation::Default;
                    break;
            }
        }

        return kanbanPrintLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printKanbanList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints kanbans.
    /// </summary>
    /// <param name="_kanbanList">
    /// The list that contains the <c>KanbanId</c> values of kanban records.
    /// </param>
    /// <param name="_workCell">
    /// The name of the work cell from which the kanbans were selected.
    /// </param>
    /// <param name="_location">
    /// The information about where the data will be printed.
    /// </param>
    protected void printKanbanList(
        List                _kanbanList,
        WrkCtrIdBase        _workCell,
        KanbanPrintLocation _location)
    {
        KanbanPrinter::construct().printKanbans(_kanbanList,_workCell,false,_location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Submits a print job per location.
    /// </summary>
    /// <param name="_contract">
    ///    The data contract that holds the query.
    /// </param>
    public void printKanbans(KanbanPrinterBatchContract _contract)
    {
        Kanban                  kanban;
        WrkCtrIdBase            workCell;
        List                    list;
        List                    listDefaultLocation = new List(typeOf(kanban.KanbanId));
        Map                     mapWorkCellList     = new Map(typeOf(workCell),Types::Class);
        Query                   query               = _contract.getQuery();
        QueryRun                queryRun            = new QueryRun(query);
        CompanyInfo             companyInfo         = CompanyInfo::find();

        while (queryRun.next())
        {
            KanbanCard kanbanCard = queryRun.get(tableNum(KanbanCard));
            kanban     = Kanban::find(kanbanCard.Kanban);
            list = null;

            if (   kanban
                && kanban.LegalEntity == companyInfo.RecId)
            {
                KanbanJob kanbanJob = kanban.firstKanbanJobOfType(LeanKanbanJobType::Process);
                workCell  = kanbanJob.RecId != 0 ? kanbanJob.wrkCtrResourceGroup().WrkCtrId : '';

                // determine if the card should be printed at the work cell printer or the default printer
                KanbanPrintLocation kanbanPrintLocation = this.kanbanPrintLocation(kanban,workCell);

                if (kanbanPrintLocation == KanbanPrintLocation::WorkCell)
                {
                    if (mapWorkCellList.exists(workCell))
                    {
                        list = mapWorkCellList.lookup(workCell);
                    }

                    if (!list)
                    {
                        list = new List(typeOf(kanban.KanbanId));
                    }

                    list.addEnd(kanban.KanbanId);
                    mapWorkCellList.insert(workCell,list);
                }
                else
                {
                    listDefaultLocation.addEnd(kanban.KanbanId);
                }
            }
        }

        // create one print job per work cell
        MapEnumerator me = mapWorkCellList.getEnumerator();
        while (me.moveNext())
        {
            list = me.currentValue();
            if (   list
                && list.elements())
            {
                this.printKanbanList(list,me.currentKey(),KanbanPrintLocation::WorkCell);
            }
        }

        // create one job for the default printer
        if (   listDefaultLocation
            && listDefaultLocation.elements())
        {
            this.printKanbanList(listDefaultLocation,'',KanbanPrintLocation::Default);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
