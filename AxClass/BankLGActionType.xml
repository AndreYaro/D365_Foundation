<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLGActionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLGActionType</c> class is the base class for a set of Letter of Guarantee action classes.
/// </summary>
abstract class BankLGActionType
{
    BankLGActionParms   actionParms;
    BankLGGuarantee     bankLGGuarantee;
    BankLGAction        bankLGAction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the action based on the parameters.
    /// </summary>
    /// <remarks>
    ///    All subclasses must override this method to implement the main logic of action.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void doAction()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BankLGActionType</c> base class by using the specified
    ///    <c>BankLGActionParms</c> object.
    /// </summary>
    /// <param name="_actionParms">
    ///    The instance of the <c>BankLGActionParms</c> class.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(BankLGActionParms _actionParms)
    {
        actionParms = _actionParms;

        if (actionParms.parmBankLGRefRecId())
        {
            bankLGGuarantee = BankLGGuarantee::find(actionParms.parmBankLGRefRecId(), true);

            if (BankLGType::isExecutionAction(actionParms.getActionType()))
            {
                // Allow to raise error when last request action is missing.
                // This can make sure bankLGAction is not null for execution action when no error is raised.
                bankLGAction = bankLGGuarantee.getLastRequestAction(true, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The open API to run the action.
    /// </summary>
    /// <returns>
    ///    true if the action succeeds; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    final protected boolean submit()
    {
        boolean         ret;

        ret = this.validateActionParms();

        if (ret)
        {
            try
            {
                this.doAction();
            }
            catch
            {
                ret = false;
            }
        }

        if (!ret)
        {
            // The parameter is illegal, abort to submit action.
            checkfailed("@SYS317963");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActionParms</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the action parameters.
    /// </summary>
    /// <returns>
    ///    true if all parameters are valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateActionParms()
    {
        boolean         ret = true;
        BankLGType      bankLGType;

        if (actionParms.getActionType() != BankLGAllActionType::Request
            && bankLGGuarantee.RecId    == 0)
        {
            ret = false;
        }

        if (ret)
        {
            bankLGType = new BankLGType();
            bankLGType.parmBankLG(bankLGGuarantee);

            ret = bankLGType.isActionAvailable(actionParms.getActionType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the instance of the corresponding subclass of the <c>BankLGActionType</c> class based on
    ///    the action type.
    /// </summary>
    /// <param name="_actionParms">
    ///    An instance of the <c>BankLGActionParms</c> class.
    /// </param>
    /// <returns>
    ///    The instance of the corresponding subclass of the <c>BankLGActionType</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static BankLGActionType construct(BankLGActionParms _actionParms)
    {
        BankLGActionType bankLGActionType;

        switch (_actionParms.getActionType())
        {
            case BankLGAllActionType::Request:
                bankLGActionType = new BankLGActionTypeRequest(_actionParms);
                break;
            case BankLGAllActionType::RequestGiveToBeneficiary:
                bankLGActionType = new BankLGActionTypeRequestGiveToBeneficiary(_actionParms);
                break;
            case BankLGAllActionType::RequestIncreaseValue:
            case BankLGAllActionType::RequestDecreaseValue:
                bankLGActionType = new BankLGActionTypeRequestValueChange(_actionParms);
                break;
            case BankLGAllActionType::RequestExtend:
                bankLGActionType = new BankLGActionTypeRequestExtend(_actionParms);
                break;
            case BankLGAllActionType::RequestCancel:
                bankLGActionType = new BankLGActionTypeRequestCancel(_actionParms);
                break;
            case BankLGAllActionType::RequestLiquidate:
                bankLGActionType = new BankLGActionTypeRequestLiquidate(_actionParms);
                break;

            case BankLGAllActionType::ExecuteSubmitToBank:
                bankLGActionType = new BankLGActionTypeExeSubmitToBank(_actionParms);
                break;
            case BankLGAllActionType::ExecuteReceiveFromBank:
                bankLGActionType = new BankLGActionTypeExeRecvFromBank(_actionParms);
                break;
            case BankLGAllActionType::ExecuteGiveToBeneficiary:
                bankLGActionType = new BankLGActionTypeExeGiveToBeneficiary(_actionParms);
                break;
            case BankLGAllActionType::ExecuteIncreaseValue:
            case BankLGAllActionType::ExecuteDecreaseValue:
                bankLGActionType = new BankLGActionTypeExeValueChange(_actionParms);
                break;
            case BankLGAllActionType::ExecuteExtend:
                bankLGActionType = new BankLGActionTypeExeExtend(_actionParms);
                break;
            case BankLGAllActionType::ExecuteCancel:
                bankLGActionType = new BankLGActionTypeExeCancel(_actionParms);
                break;
            case BankLGAllActionType::ExecuteLiquidate:
                bankLGActionType = new BankLGActionTypeExeLiquidate(_actionParms);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return bankLGActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the action on the server side by using the specified parameters.
    /// </summary>
    /// <param name="_actionParms">
    ///    Parameters for action.
    /// </param>
    /// <returns>
    ///    true if the action succeeds; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static boolean doRun(BankLGActionParms _actionParms)
    {
        return BankLGActionType::construct(_actionParms).submit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the action on the server-side by using the specified parameters.
    /// </summary>
    /// <param name="_actionParms">
    ///    The parameters for action.
    /// </param>
    /// <returns>
    ///    true if the action succeeds; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean run(BankLGActionParms _actionParms)
    {
        return BankLGActionType::doRun(_actionParms);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>