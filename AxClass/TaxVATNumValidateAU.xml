<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVATNumValidateAU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxVATNumValidateAU</c> class validates a Value Added Tax (VAT) number for Australia.
/// </summary>
[SysTestInactiveTest]
class TaxVATNumValidateAU extends TaxVATNumValidate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateVATNum</Name>
				<Source><![CDATA[
    boolean validateVATNum(VATNum _vatNum, LogisticsAddressCountryRegionId _countryRegionId = '')
    {
        boolean ret;
        int     length;
        int     abn[];
        int     weight;
        int     total;
        Counter i;
        ;

        length = strLen(_vatNum);

        if (length != 11)
            return checkFailed("@SYS63334");

        if (ret || this.isNumeric(_vatNum, 11) == false)
            return false;

        for (i=1;i<=length;i++)
        {
            abn[i] = str2int(subStr(_vatNum,i,1));

            switch (i)
            {
                case 1  :
                    abn[i] = abn[i]-1; /*Subtract 1 from the first (left) digit*/
                    weight = 10;
                    break;

                case 2  :
                    weight = 1;
                    break;

                case 3  :
                    weight = 3;
                    break;

                case 4  :
                    weight = 5;
                    break;

                case 5  :
                    weight = 7;
                    break;

                case 6  :
                    weight = 9;
                    break;

                case 7  :
                    weight = 11;
                    break;

                case 8  :
                    weight = 13;
                    break;

                case 9  :
                    weight = 15;
                    break;

                case 10 :
                    weight = 17;
                    break;

                case 11 :
                    weight = 19;
                    break;
            }

            abn[i] = abn[i] * weight; /* Multiply each of the digits in the number by its weighting */
        }

        i = 1;

    /* Sum the resulting products*/
        while (i<=length)
        {
            total += abn[i];
            i++;
        }

    /* Divide the total by 89, noting the remainder */
        total = total mod 89;

    /* The number is only valid if the remainder is zero*/
        if (total != 0)
        {
            ret = checkFailed(strFmt("@SYS63335",_vatNum));
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>