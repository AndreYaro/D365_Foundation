<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransactionReversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportAttribute(identifierStr(Dynamics.AX.Application.TransactionReversalBase))]
internal final class CustTransactionReversal extends TransactionReversalBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse</Name>
				<Source><![CDATA[
    internal boolean reverse(TransactionReversalExecutionDetail _reversalExecutionDetail, TransactionReversalContract _contract)
    {
        CustTrans custTrans = CustTrans::findVoucherDate(_reversalExecutionDetail.SubledgerVoucher, _reversalExecutionDetail.TransactionDate);

        boolean isReversed = false;

        if (custTrans)
        {
            TransactionReversal_Cust custReversal = TransactionReversal_Cust::construct();
            custReversal.parmReversalDate(_contract.parmReversalDate());
            custReversal.parmContract(_contract);

            isReversed = custReversal.reverseTransaction(custTrans);
        }

        return isReversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidJournalCategory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isValidJournalCategory(TransactionReversalExecutionDetail _detail)
    {
        boolean isValid;

        switch (_detail.JournalCategory)
        {
            case LedgerTransType::GeneralJournal,
                 LedgerTransType::Payment:

                // Bank payments are reversed by bank not AR.
                if (BankAccountTrans::findByVoucher(_detail.SubledgerVoucher, _detail.TransactionDate).RecId == 0)
                {
                    isValid = CustTrans::findVoucherDate(_detail.SubledgerVoucher, _detail.TransactionDate).RecId != 0;
                }
                break;

            case LedgerTransType::FixedAssets:

                // AR transactions can generate FA journals in GL
                // with the same voucher so we need to handle both.

                isValid = CustTrans::findVoucherDate(_detail.SubledgerVoucher, _detail.TransactionDate).RecId != 0;
                break;

            case LedgerTransType::Cust,
                 LedgerTransType::Sales,
                 LedgerTransType::Interest,
                 LedgerTransType::CollectionLetter,
                 LedgerTransType::ExchAdjustment,
                 LedgerTransType::AdvanceAdjustment_RU:

                isValid = true;

                // Do not consider General ledger revaluations (LedgerTransType::ExchAdjustment)
                if (_detail.ReferenceTableId == tableNum(LedgerExchAdjHist))
                {
                    isValid = false;
                }

                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecurableType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected SecurableType getSecurableType()
    {
        return SecurableType::MenuItemAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MenuItemName getMenuItemName()
    {
        return menuItemActionStr(TransactionReversal_Cust);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>