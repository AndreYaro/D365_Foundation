<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AOTResourceTemplateProvider_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides temporary file for given resource that contains report template.
/// </summary>
[SysClassNameAttribute(classStr(Object))]
class AOTResourceTemplateProvider_RU extends TemplateProvider_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>get</Name>
				<Source><![CDATA[
        public FileName get(str _templateName)
    {
        str          resourceName = this.templateName2resourceName(_templateName);
        ResourceNode node = SysResource::getResourceNode(resourceName);
        Filename     ret;

        if (!node)
        {
            throw error(strFmt("@SYS332180", resourceName));
        }

        // refresh resource data
        node.AOTGetData();

        ret = this.getNextFreeFilename(node.filename());

        return SysResource::saveToTempFile(node, true, ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextFreeFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns temporary file name for given resource name.
    /// </summary>
    /// <param name="_resourceFilename">
    /// File name from resource.
    /// </param>
    /// <returns>
    /// Name of first non-existent or non-locked (available for owerwrite) file.
    /// </returns>
    private FileName getNextFreeFilename(FileName _resourceFilename)
    {
        str         tempDir            = SysResource::getTempPathName();
        str         tempFileNamePrefix;
        str         tempFileNameExtension;
        str         tempFileNameSuffix = '';
        FileName    ret = _resourceFilename;
        int         fileNameLen;
        int         fileExtensionPos;
        int         suffixIdx;
        boolean     namePartsInited;

        void initFileNameParts()
        {
            if (namePartsInited)
                return;
            namePartsInited = true;

            fileNameLen      = strLen(_resourceFilename);
            fileExtensionPos = strFind(_resourceFilename, '.', fileNameLen, -fileNameLen);

            tempFileNamePrefix    = substr(_resourceFilename, 1,                fileExtensionPos - 1);
            tempFileNameExtension = substr(_resourceFilename, fileExtensionPos, fileNameLen);
        }

        if (tempdir && strFind(tempdir, '\\', strLen(tempdir), 1) == 0)
            tempdir += '\\';

        while (WinAPI::fileLocked(tempDir + ret))
        {
            initFileNameParts();

            suffixIdx ++;
            tempFileNameSuffix = '_' + int2str(suffixIdx);
            ret = tempFileNamePrefix + tempFileNameSuffix + tempFileNameExtension;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReadOnly</Name>
				<Source><![CDATA[
        public boolean parmReadOnly()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName2resourceName</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Converts template name to resource name.
    /// </summary>
    /// <param name="_templateName">
    ///   A name of template.
    /// </param>
    /// <returns>
    ///   A name of resource
    /// </returns>
    /// <remarks>
    ///   A AOT name can not contain special characters. The function replaces them with underscore.
    /// </remarks>
    public str templateName2resourceName(str _templateName)
    {
        str ret = System.Text.RegularExpressions.Regex::Replace(_templateName, '[^A-Za-z_0-9]', '_');
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static AOTResourceTemplateProvider_RU construct()
    {
        return new AOTResourceTemplateProvider_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>