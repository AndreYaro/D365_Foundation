<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMediaChannelTwitterConnector</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements <c>RetailMediaChannelConnector</c> intefrace to allow setting up
/// a link, post messages and upload supplimentary images to Twitter.
/// </summary>
/// <remarks>
/// This connector class implements 3-leg authentication process.
/// https://dev.twitter.com/docs/auth/implementing-sign-twitter
/// </remarks>
class RetailMediaChannelTwitterConnector implements RetailMediaChannelConnector
{
    #define.RequestMethod('POST')

    private const str TwitterRequestTokenUri = "https://api.twitter.com/oauth/request_token";

    #define.OAuth_AuthenticateUrlFormat('https://api.twitter.com/oauth/authenticate?oauth_token=\%1')
    #define.OAuth_AccessTokenUrl('https://api.twitter.com/oauth/access_token')
    #define.CallbackUrlPath('/sign-in-with-twitter/')
    #define.CallbackUrl('https://localhost'+#CallbackUrlPath)

    #define.OAuth_Token_Name('oauth_token')
    #define.OAuth_TokenSecret_Name('oauth_token_secret')
    #define.OAuth_CallbackConfirmed_Name('oauth_callback_confirmed')
    #define.OAuth_Verifier_Name('oauth_verifier')

    #define.OAuth_UserId_Name('user_id')
    #define.OAuth_ScreenName_Name('screen_name')

    #define.UserTimelinePageName("@RET4160151")
    #define.HomePageLinkFormat('https://twitter.com/#!/\%1')

    #define.ErrorFormat("@RET4160164")
    #define.GenericError("@RET4160165")
    #define.SuccessfullyLinkedMessage("@RET4160166")
    #define.MessageHasBeenPublishedMessage("@RET4160167")
    #define.NoConsumerKeyConfiguredMessage("@RET4160149")
    #define.NoConsumerSecretConfiguredMessage("@RET4160150")

    #define.MimeTypeJSON('application/json')

    private RecId MediaChannelConnectorSettingsRecId;
    private RetailCommonWebAPI webApi;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of <c>RetailMediaChannelTwitterConnection</c> class.
    /// </summary>
    /// <param name="_retailMediaChannelConnectorSettingsRecId">
    /// The <c>RetailMediaChannelConnectorSettings</c> record Id.
    /// </param>
    /// <param name="_webApi">
    /// Instance of <c>RetailCommonWebAPI</c>.
    /// </param>
    public void new(RecId _retailMediaChannelConnectorSettingsRecId, RetailCommonWebAPI _webApi = RetailCommonWebAPI::construct())
    {
        if (!_retailMediaChannelConnectorSettingsRecId)
        {
            throw error(strFmt("@SYS118114",funcName()));
        }

        this.MediaChannelConnectorSettingsRecId = _retailMediaChannelConnectorSettingsRecId;
        this.webApi = _webApi;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLoginURI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the media channel authentication page URI.
    /// </summary>
    /// <returns>
    /// Returns the media channel authentication page URI.
    /// </returns>
    public str GetLoginURI()
    {
        str token = this.RequestTocken();
        str loginUrl = strFmt(#OAuth_AuthenticateUrlFormat, token);

        return loginUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProsessAuthenticationCallBackUri</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prosesses authentication callback URI.
    /// </summary>
    /// <param name="_uri">The callback URI.</param>
    public void ProsessAuthenticationCallBackUri(System.Uri _uri)
    {
        if (_uri == null)
        {
            throw error(strFmt("@SYS118114",funcName()));
        }

        System.Collections.Specialized.NameValueCollection queryParameters = System.Web.HttpUtility::ParseQueryString(_uri.get_Query());

        str tokenParameter = queryParameters.Get(#OAuth_Token_Name);

        if (!#OAuth_Token_Name)
        {
            throw error(RetailMediaChannelTwitterConnector::formatErrorMessage());
        }

        str existingToken = RetailMediaChannelTwitterConnector::getUserAccessToken(this.MediaChannelConnectorSettingsRecId);

        if (tokenParameter != existingToken)
        {
            throw error(RetailMediaChannelTwitterConnector::formatErrorMessage());
        }

        RetailOAuthParameters oauthParams = new RetailOAuthParameters(RetailMediaChannelTwitterConnector::getConsumerKey(), RetailMediaChannelTwitterConnector::getConsumerSecret(), "", existingToken, RetailMediaChannelTwitterConnector::getPageAccessToken(this.MediaChannelConnectorSettingsRecId));
        str verifierParameter = queryParameters.Get(#OAuth_Verifier_Name);
        oauthParams.parmVerifier(verifierParameter);

        this.finishOAuth(oauthParams);

        Box::info(#SuccessfullyLinkedMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishOAuth</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>finishOAuth</c> method is called to finialize the authentication process.
    /// </summary>
    /// <param name="_oauthParams">
    /// OAuth parameter of the authentication session.
    /// </param>
    private void finishOAuth(RetailOAuthParameters _oauthParams)
    {
        #define.MIME_AppUrlEncoded('x-www-form-urlencoded')

        str requestUrl = #OAuth_AccessTokenUrl;
        str authHeader;
        Map bodyParams = new Map(Types::String, Types::String);
        str bodyParamsString;
        RetailWebResponse webResponse;
        str errorMessage;
        Map responseParametersMap;
        boolean isGranted = false;

        bodyParams.insert(#OAuth_Verifier_Name, _oauthParams.parmVerifier());

        _oauthParams.parmSignature('');

        authHeader = strFmt('Authorization: OAuth %1',
            RetailMediaChannelTwitterConnector::getSigningHeader(
                requestUrl,
                _oauthParams,
                new Map(Types::String, Types::String),
                bodyParams));

        bodyParamsString = RetailMediaChannelTwitterConnector::urlEncodeParamsMap(bodyParams, false);
        webResponse = webApi.makePostRequest(requestUrl, bodyParamsString, authHeader, #MIME_AppUrlEncoded);
        if (!webResponse.RequestSucceeded())
        {
            errorMessage = RetailMediaChannelTwitterConnector::formatErrorMessageFromWebResponse(webResponse);
            throw error(errorMessage);
        }

        responseParametersMap = RetailCommonWebAPI::getMapFromQueryString(webResponse.parmData());

        _oauthParams.parmToken(responseParametersMap.lookup(#OAuth_Token_Name));
        _oauthParams.parmTokenSecret(responseParametersMap.lookup(#OAuth_TokenSecret_Name));
        _oauthParams.parmUserId(responseParametersMap.lookup(#OAuth_UserId_Name));
        _oauthParams.parmScreenName(responseParametersMap.lookup(#OAuth_ScreenName_Name));

        RetailMediaChannelTwitterConnector::saveAccountSettings(this.MediaChannelConnectorSettingsRecId, _oauthParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>push</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>push</c> method is called to post a message
    /// to the service
    /// </summary>
    /// <param name="_message">
    /// The <c>RetailMediaChannelMessage</c> object containing the message information
    /// </param>
    /// <returns>
    /// Returns ID of the posted message upon success. If failed, returns empty string.
    /// </returns>
    public str push(RetailMediaChannelMessage _message)
    {
        RetailMediaFileDescription picture;
        if (_message.parmPicture())
        {
            picture = RetailMediaFileDescription::construct(str2recId(_message.parmPicture()));
        }
        return RetailMediaChannelTwitterConnector::doPush(this.MediaChannelConnectorSettingsRecId, webApi, _message.parmMessage(), _message.parmLinkUrl(), picture);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RequestTocken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows a Consumer application to obtain an OAuth Request Token to request user authorization.
    /// </summary>
    /// <returns>
    /// Returns OAuth parameter for the initiated authentication session.
    /// </returns>
    private str RequestTocken()
    {
        str consumerKey = RetailMediaChannelTwitterConnector::getConsumerKey();
        str consumerSercret = RetailMediaChannelTwitterConnector::getConsumerSecret();
        str callBackUri = RetailCommonWebAPI::GetAuthenticationCallBackUri(this.MediaChannelConnectorSettingsRecId);
        RetailOAuthParameters oauthParams = new RetailOAuthParameters(consumerKey, consumerSercret, callBackUri);

        str authHeader = strFmt('Authorization: OAuth %1', RetailMediaChannelTwitterConnector::getSigningHeader(RetailMediaChannelTwitterConnector::TwitterRequestTokenUri, oauthParams));

        RetailWebResponse webResponse = webApi.makePostRequest(RetailMediaChannelTwitterConnector::TwitterRequestTokenUri, '', authHeader);
        if (!webResponse.RequestSucceeded())
        {
            throw error(RetailMediaChannelTwitterConnector::formatErrorMessageFromWebResponse(webResponse));
        }

        System.Collections.Specialized.NameValueCollection parameters = System.Web.HttpUtility::ParseQueryString(webResponse.parmData());
        boolean callBackConfirmed = parameters.Get(#OAuth_CallbackConfirmed_Name) == 'true';
        if (callBackConfirmed)
        {
            oauthParams.parmToken(parameters.Get(#OAuth_Token_Name));
            oauthParams.parmTokenSecret(parameters.Get(#OAuth_TokenSecret_Name));
            oauthParams.parmVerifier('');
            RetailMediaChannelTwitterConnector::saveAccountSettings(this.MediaChannelConnectorSettingsRecId, oauthParams);
        }
        else
        {
            throw error(webResponse.parmData());
        }

        return oauthParams.parmToken();
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadPhoto</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is not supported by Twitter.
    /// This method will return RecId of the
    /// supplied DocuRef record.
    /// </summary>
    /// <param name="_docuRef">
    /// The DocuRef record
    /// </param>
    /// <returns>
    /// Returns RecId of the supplied DocuRef record
    /// </returns>
    public str uploadPhoto(DocuRef _docuRef)
    {
        return int642str(_docuRef.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendMap</Name>
				<Source><![CDATA[
    private static Map appendMap(Map _dest, Map _src)
    {
        MapEnumerator mapE;

        mapE = _src.getEnumerator();
        while (mapE.moveNext())
        {
            _dest.insert(mapE.currentKey(), mapE.currentValue());
        }

        return _dest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildHomePageLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a link to the users's timeline page
    /// given the id of the user
    /// </summary>
    /// <param name="_userId">
    /// The id of the user
    /// </param>
    /// <returns>
    /// Returns the link to the users's timeline page
    /// given the id of the user
    /// </returns>
    public static str buildHomePageLink(str _userId)
    {
        return strFmt(#HomePageLinkFormat, _userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>combineMaps</Name>
				<Source><![CDATA[
    private static Map combineMaps(Map _map1, Map _map2)
    {
        Map resMap = new Map(Types::String, Types::String);

        RetailMediaChannelTwitterConnector::appendMap(resMap, _map1);
        RetailMediaChannelTwitterConnector::appendMap(resMap, _map2);

        return resMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor for <c>RetailMediaChannelTwitterConnector</c> class
    /// </summary>
    /// <param name="_retailMediaChannelConnectorSettings">
    /// Channel settings.
    /// </param>
    /// <param name="_webApi">
    /// Common web API. Optional.
    /// </param>
    /// <returns>
    /// A new instance of <c>RetailMediaChannelTwitterConnector</c> class.
    /// </returns>
    public static RetailMediaChannelTwitterConnector construct(RetailMediaChannelConnectorSettings _retailMediaChannelConnectorSettings, RetailCommonWebAPI _webApi = RetailCommonWebAPI::construct())
    {
        return new RetailMediaChannelTwitterConnector(_retailMediaChannelConnectorSettings.RecId, _webApi);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPush</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a message on Twitter.
    /// The message is built by concatinating the _message parameter,
    /// the _linkUrl, if it is not empty, and by attaching optional image
    /// passed via the _picture parameter
    /// </summary>
    /// <param name="_settingsRecId">
    /// The RecId of the connector settings record
    /// </param>
    /// <param name="_webApi">
    /// The web API
    /// </param>
    /// <param name="_message">
    /// The text of the message
    /// </param>
    /// <param name="_linkUrl">
    /// The optional URL to append to the message text
    /// </param>
    /// <param name="_picture">
    /// The optional image
    /// </param>
    /// <returns>
    /// The ID of the posted message, if successfuly. Empty string, otherwise.
    /// </returns>
    private static str doPush(RecId _settingsRecId, RetailCommonWebAPI _webApi, str _message, str _linkUrl, RetailMediaFileDescription _picture)
    {
        #define.MediaPostRequestUrl('https://api.twitter.com/1.1/statuses/update_with_media.json')
        #define.PostRequestUrl('https://api.twitter.com/1.1/statuses/update.json')

        #define.StatusParamName('status')
        #define.MediaParamName('media[]')
        #define.MessageId('id')

        str requestUrl;
        RetailOAuthParameters oauthParams = new RetailOAuthParameters(
            RetailMediaChannelTwitterConnector::getConsumerKey(),
            RetailMediaChannelTwitterConnector::getConsumerSecret());

        str message;
        Map strFields = new Map(Types::String, Types::String);
        Map docFields = new Map(Types::String, Types::Class);
        str authHeader;
        str postData;

        RetailWebResponse webResponse;
        str response;
        str embeddedLink;
        Map responseMap;
        str messageId;
        str errorMessage;

        oauthParams.parmToken(RetailMediaChannelTwitterConnector::getUserAccessToken(_settingsRecId));
        oauthParams.parmTokenSecret(RetailMediaChannelTwitterConnector::getPageAccessToken(_settingsRecId));

        message = _message;
        embeddedLink = _linkUrl;
        if (strLen(embeddedLink) > 0)
        {
            message = message + ' ' + embeddedLink;
        }

        strFields.insert(#StatusParamName, message);

        if (_picture)
        {
            requestUrl = #MediaPostRequestUrl;

            authHeader = strFmt('Authorization: OAuth %1',
                RetailMediaChannelTwitterConnector::getSigningHeader(
                    requestUrl,
                    oauthParams));

            docFields.insert(#MediaParamName, _picture);
            webResponse = _webApi.makeFormPost(requestUrl, strFields, docFields, authHeader);
        }
        else
        {
            requestUrl = #PostRequestUrl;

            authHeader = strFmt('Authorization: OAuth %1',
                RetailMediaChannelTwitterConnector::getSigningHeader(
                    requestUrl,
                    oauthParams,
                    new Map(Types::String, Types::String),
                    strFields));

            postData = RetailMediaChannelTwitterConnector::urlEncodeParamsMap(strFields, false);
            webResponse = _webApi.makePostRequest(requestUrl, postData, authHeader, 'application/x-www-form-urlencoded');
        }

        response = webResponse.parmData();
        if (!webResponse.RequestSucceeded())
        {
            errorMessage = RetailMediaChannelTwitterConnector::formatErrorMessageFromWebResponse(webResponse);
            error(errorMessage);
        }
        else
        {
            responseMap = RetailCommonWebAPI::getMapFromJsonString(response);
            messageId = responseMap.lookup(#MessageId);
            info(#MessageHasBeenPublishedMessage);
        }

        return messageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractErrorMessageFromWebResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks for and extracts an error message from a web-response
    /// received from a Twitter's API call.
    /// </summary>
    /// <param name="_webResponse">
    /// The <c>RetailWebResponse</c> object to extract the error message from.
    /// </param>
    /// <returns>
    /// The error message.
    /// </returns>
    /// <remarks>
    /// The following cases are implemented.
    /// 1) If the response has HTTP status code 200, it returns an empty string.
    /// 2) If the response's content type is JSON:
    /// 2.1) If the data could be parsed as JSON and there is a key with name 'error', it returns value of that key.
    /// 2.2) Otherwise it returns an empty string.
    /// 3) If the response contains 2 occurances of word 'html' (no matter the case), it returns an empty string.
    /// 4) Otherwise it returns the content data as is.
    /// </remarks>
    public static str extractErrorMessageFromWebResponse(RetailWebResponse _webResponse)
    {
        #define.ErrorMessageKey('error')
        #define.HtmlWord('html')

        str errorMessage;
        Map responseMap;
        str rawResponseData;
        int rawResponseDataLen;
        int htmlWordLen;
        int htmlWordIndex;
        boolean isContentTypeLooksLikeHtml = false;

        if (!_webResponse.RequestSucceeded())
        {
            rawResponseData = _webResponse.parmData();
            if (_webResponse.parmContentType() == #MimeTypeJSON)
            {
                try
                {
                    responseMap = RetailCommonWebAPI::getMapFromJsonString(rawResponseData);
                    errorMessage = responseMap.lookup(#ErrorMessageKey);
                }
                catch
                {
                    errorMessage = '';
                }
            }
            else
            {
                rawResponseDataLen = strLen(rawResponseData);
                htmlWordLen = strLen(#HtmlWord);
                htmlWordIndex = strScan(rawResponseData, #HtmlWord, 1, rawResponseDataLen);
                if (htmlWordIndex > 0)
                {
                    // Moving past the word
                    htmlWordIndex += htmlWordLen;
                    if (htmlWordIndex + htmlWordLen <= rawResponseDataLen + 1)
                    {
                        htmlWordIndex = strScan(rawResponseData, #HtmlWord, htmlWordIndex, rawResponseDataLen - htmlWordIndex + 1);
                        if (htmlWordIndex > 0)
                        {
                            isContentTypeLooksLikeHtml = true;
                        }
                    }
                }
                if (!isContentTypeLooksLikeHtml)
                {
                    errorMessage = rawResponseData;
                }
            }
        }

        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats error message. It will include errorDetail into
    /// the message if the parameter is not empty.
    /// </summary>
    /// <param name="errorDetails">
    /// The error detail that will be included into
    /// the message
    /// </param>
    /// <returns>
    /// Returns the formated error message
    /// </returns>
    private static str formatErrorMessage(str errorDetails = '')
    {
        if (strLen(errorDetails) > 0)
        {
            return strFmt(#ErrorFormat, errorDetails);
        }
        else
        {
            return #GenericError;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatErrorMessageFromWebResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats error message. It will include errorDetail into
    /// the message if the parameter is not empty.
    /// </summary>
    /// <param name="_webResponse">
    /// The <c>RetailWebResponse</c> object to extract the error message from and format.
    /// </param>
    /// <returns>
    /// Returns the formated error message
    /// </returns>
    public static str formatErrorMessageFromWebResponse(RetailWebResponse _webResponse)
    {
        str errorMessage = RetailMediaChannelTwitterConnector::extractErrorMessageFromWebResponse(_webResponse);
        return RetailMediaChannelTwitterConnector::formatErrorMessage(errorMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumerKey</Name>
				<Source><![CDATA[
    private static str getConsumerKey()
    {
        RetailSharedTwitterParameters parameter = RetailSharedTwitterParameters::find();

        if (strLen(strLRTrim(parameter.ConsumerKey)) > 0)
            return parameter.ConsumerKey;

        throw error(#NoConsumerKeyConfiguredMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumerSecret</Name>
				<Source><![CDATA[
    private static str getConsumerSecret()
    {
        RetailSharedTwitterParameters parameter = RetailSharedTwitterParameters::find();

        if (strLen(strLRTrim(parameter.ConsumerSecret)) > 0)
            return parameter.ConsumerSecret;

        throw error(#NoConsumerSecretConfiguredMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPageAccessToken</Name>
				<Source><![CDATA[
    private static str getPageAccessToken(RecId _settingsRecId)
    {
        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId);
        RetailMediaChannelConnectorCredentials retailMediaChannelConnectorCredentials =
            RetailMediaChannelConnectorCredentials::find(
                retailMediaChannelConnectorSettings.RetailMediaChannelConnectorCredentials);
        return retailMediaChannelConnectorCredentials.PageAccessToken;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSigningHeader</Name>
				<Source><![CDATA[
    private static str getSigningHeader(str _baseUrl, RetailOAuthParameters _oauthParams, Map _requestParams = new Map(Types::String, Types::String), Map _bodyParams = new Map(Types::String, Types::String))
    {
        // HTTP Method: #RequestMethod('POST')
        // Base URL: _baseUrl
        // Parameter string: build from _oauthParams, _requestParams and _bodyParams
        // Consumer secret: _oauthParams.parmConsumerSecret()
        // Token secret: _oauthParams.parmTokenSecret()
        // Signing key: [Consumer secret]&[Token secret]

        System.Security.Cryptography.HMACSHA1 hmacHashFunc;
        System.Text.ASCIIEncoding asciiEncoding = new System.Text.ASCIIEncoding();

        str oauthSignature;

        str oauthSigningHeader;

        Map paramsMap = RetailMediaChannelTwitterConnector::combineMaps(_oauthParams.getMap(),
            RetailMediaChannelTwitterConnector::combineMaps(_requestParams, _bodyParams));

        str parameterString = RetailMediaChannelTwitterConnector::urlEncodeParamsMap(paramsMap);

        str signatureBaseString = strFmt('%1&%2&%3',
            #RequestMethod,
            RetailMediaChannelTwitterConnector::urlEncode(_baseUrl),
            RetailMediaChannelTwitterConnector::urlEncode(parameterString));

        System.Byte[] signatureBaseStringBytes;
        System.Byte[] messageHashBytes;

        str consumerSecret = _oauthParams.parmConsumerSecret();

        str tokenSecret = _oauthParams.parmTokenSecret();

        str signingKey = strFmt('%1&', consumerSecret);
        System.Byte[] signingKeyBytes;
        if (strLen(tokenSecret) > 0)
        {
            signingKey += tokenSecret;
        }

        signingKeyBytes = asciiEncoding.GetBytes(signingKey);
        hmacHashFunc = new System.Security.Cryptography.HMACSHA1(signingKeyBytes);
        try
        {
            signatureBaseStringBytes = asciiEncoding.GetBytes(signatureBaseString);
            messageHashBytes = hmacHashFunc.ComputeHash(signatureBaseStringBytes);
            oauthSignature = System.Convert::ToBase64String(messageHashBytes);
            hmacHashFunc.Dispose();
            hmacHashFunc = null;
        }
        catch
        {
            hmacHashFunc.Dispose();
            hmacHashFunc = null;
            error(RetailMediaChannelTwitterConnector::formatErrorMessage());
        }
        _oauthParams.parmSignature(oauthSignature);

        oauthSigningHeader = RetailMediaChannelTwitterConnector::urlEncodeParamsMap(_oauthParams.getMap(), true);

        return oauthSigningHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserAccessToken</Name>
				<Source><![CDATA[
    private static str getUserAccessToken(RecId _settingsRecId)
    {
        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId);
        RetailMediaChannelConnectorCredentials retailMediaChannelConnectorCredentials =
            RetailMediaChannelConnectorCredentials::find(
                retailMediaChannelConnectorSettings.RetailMediaChannelConnectorCredentials);
        return retailMediaChannelConnectorCredentials.UserAccessToken;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAccountSettings</Name>
				<Source><![CDATA[
    private static void saveAccountSettings(RecId _settingsRecId, RetailOAuthParameters _oauthParams)
    {
        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId, true);
        RetailMediaChannelConnectorCredentials retailMediaChannelConnectorCredentials =
            RetailMediaChannelConnectorCredentials::find(
                retailMediaChannelConnectorSettings.RetailMediaChannelConnectorCredentials, true);

        ttsBegin;

        retailMediaChannelConnectorCredentials.UserAccessToken = _oauthParams.parmToken();
        retailMediaChannelConnectorCredentials.PageAccessToken = _oauthParams.parmTokenSecret();
        if (retailMediaChannelConnectorCredentials.RecId)
        {
            retailMediaChannelConnectorCredentials.update();
        }
        else
        {
            retailMediaChannelConnectorCredentials.insert();
        }

        retailMediaChannelConnectorSettings.RetailMediaChannelConnectorCredentials = retailMediaChannelConnectorCredentials.RecId;
        retailMediaChannelConnectorSettings.ExpirationDateTime = _oauthParams.parmVerifier() != '' ? DateTimeUtil::maxValue() : DateTimeUtil::minValue();
        retailMediaChannelConnectorSettings.UserId = _oauthParams.parmUserId();
        retailMediaChannelConnectorSettings.PageName = #UserTimelinePageName;
        retailMediaChannelConnectorSettings.PageUrl = RetailMediaChannelTwitterConnector::buildHomePageLink(_oauthParams.parmScreenName());
        retailMediaChannelConnectorSettings.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>urlEncode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encodes supplied text using Twitter supported URL encoding
    /// </summary>
    /// <param name="_src">
    /// The text to encode
    /// </param>
    /// <returns>
    /// Returns the supplied text encoded
    /// using Twitter supported URL encoding
    /// </returns>
    public static str urlEncode(str _src)
    {
        str dest;
        dest = RetailMediaChannelTwitterConnector::urlEncodeTwitter(_src);
        return dest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>urlEncodeParamsMap</Name>
				<Source><![CDATA[
    private static str urlEncodeParamsMap(Map _paramsMap, boolean _isForHeader = false)
    {
        MapEnumerator mapE = _paramsMap.getEnumerator();
        str separator = !_isForHeader ? '&' : ',';
        str curValue;
        str output;
        while (mapE.moveNext())
        {
            if (strLen(output) > 0)
            {
                output += separator;
            }

            output += RetailMediaChannelTwitterConnector::urlEncode(mapE.currentKey());
            curValue = mapE.currentValue();
            if (strLen(curValue) > 0)
            {
                curValue = RetailMediaChannelTwitterConnector::urlEncode(curValue);
                if (_isForHeader)
                    curValue = strFmt('"%1"', curValue);
                output += strFmt('=%1', curValue);
            }
        }

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>urlEncodeTwitter</Name>
				<Source><![CDATA[
    private static str urlEncodeTwitter(str _src)
    {
        #define.UnreservedChars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~")
        #define.EncodingFormat("\%{0:X2}")

        System.Text.StringBuilder result = new System.Text.StringBuilder();

        int i;
        str symbol;
        int strInt;
        int srcStrLen = strLen(_src);
        for (i = 1; i <= srcStrLen; ++i)
        {
            symbol = subStr(_src, i, 1);

            if (strContains(#UnreservedChars, symbol))
            {
                result.Append(symbol);
            }
            else
            {
                strInt = char2num(symbol, 1);
                result.Append(System.String::Format(#EncodingFormat, strInt));
            }
        }

        return result.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>