<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMediaAssociationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to process media association.
/// </summary>
public class RetailMediaAssociationTask extends RunBaseBatch implements BatchRetryable
{
    container packedRecIdList;
    int mediaEntityType;
    int subMediaEntityType;

    #define.CurrentVersion(4)
    #localmacro.CurrentList
        packedRecIdList,
        mediaEntityType,
        subMediaEntityType
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine initiate the tasks to be executed.
    /// </summary>
    public void run()
    {
        this.executeTasks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine builds the table, based on the Recids send by the job.
    /// </summary>
    /// <param name = "workTable">RetailTmpMediaAssociationWorkTable instance.</param>
    private void buildWorkTable(RetailTmpMediaAssociationWorkTable workTable)
    {
        Array recIdList;
        int i, lastIndex;

        delete_from workTable;
        recIdList = Array::create(this.parmRecIdList());

        lastIndex = recIdList.lastIndex();

        for (i = 1; i <= lastIndex; i++)
        {
            workTable.clear();
            workTable.initValue();
            workTable.MediaEntityRecId = recIdList.value(i);

            workTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine execute the tasks.
    /// </summary>
    private void executeTasks()
    {
        RetailTmpMediaAssociationWorkTable workTable;
        this.buildWorkTable(workTable);
        RetailMediaMasterEntity mediaEntity = mediaEntityType;

        if (mediaEntity == RetailMediaMasterEntity::Catalog)
        {
            this.invokeAssociateCatalogTask(workTable);
        }
        else if (mediaEntity == RetailMediaMasterEntity::Worker)
        {
            this.invokeAssociateWorkerTask(workTable);
        }
        else if (mediaEntity == RetailMediaMasterEntity::Customer)
        {
            this.invokeAssociateCustomerTask(workTable);
        }
        else if (mediaEntity == RetailMediaMasterEntity::Category)
        {
            this.invokeAssociateCategoryTask(workTable);
        }
        else if (mediaEntity == RetailMediaMasterEntity::Product)
        {
            RetailMediaMasterEntity subMediaEntity = subMediaEntityType;
            if (subMediaEntity == RetailMediaMasterEntity::Product)
            {
                this.invokeAssociateProductTask(workTable);
            }
            else if (subMediaEntity == RetailMediaMasterEntity::Catalog)
            {
                this.invokeAssociateCatalogProductTask(workTable);
            }
            else if (subMediaEntity == RetailMediaMasterEntity::Category)
            {
                this.invokeAssociateChannelProductTask(workTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateCatalogTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the catalogs.
    /// </summary>
    /// <param name = "workTable">RetailTmpMediaAssociationWorkTable table, contains all the Media entity RecId as set by the job.</param>
    private void invokeAssociateCatalogTask(RetailTmpMediaAssociationWorkTable workTable)
    {
        RetailTmpCatalogMedia catalogMedia;
        select * from catalogMedia
                join workTable
                where catalogMedia.RecId == workTable.MediaEntityRecId && catalogMedia.AssociationStatus != RetailMediaAssociationStatus::Associated;

        // ----- The below codebase commented as this feature was developed however we will hide it for now and we will uncomment as part of the Deliverable/Task #3687509.
        //RetailMediaAssociationHelper::associateCatalog(catalogMedia);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateWorkerTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the worker.
    /// </summary>
    /// <param name = "workTable">RetailTmpMediaAssociationWorkTable table, contains all the Media entity RecId as set by the job.</param>
    private void invokeAssociateWorkerTask(RetailTmpMediaAssociationWorkTable workTable)
    {
        RetailTmpWorkerMedia workerMedia;
        select * from workerMedia
                join workTable
                where workerMedia.RecId == workTable.MediaEntityRecId && workerMedia.AssociationStatus != RetailMediaAssociationStatus::Associated;

        // The below codebase commented as this feature was developed however we will hide it for now and we will uncomment as part of the Deliverable/Task #3687509.
        //RetailMediaAssociationHelper::associateWorkers(workerMedia);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateCustomerTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the customer.
    /// </summary>
    /// <param name = "workTable">RetailTmpMediaAssociationWorkTable table, contains all the Media entity RecId as set by the job.</param>
    private void invokeAssociateCustomerTask(RetailTmpMediaAssociationWorkTable workTable)
    {
        RetailTmpCustomerMedia customerMedia;
        select * from customerMedia
                join workTable
                where customerMedia.RecId == workTable.MediaEntityRecId && customerMedia.AssociationStatus != RetailMediaAssociationStatus::Associated;

        // The below codebase commented as this feature was developed however we will hide it for now and we will uncomment as part of the Deliverable/Task #3687509.
        //RetailMediaAssociationHelper::associateCustomer(customerMedia);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateCategoryTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the categories.
    /// </summary>
    /// <param name = "workTable">RetailTmpMediaAssociationWorkTable table, contains all the Media entity RecId as set by the job.</param>
    private void invokeAssociateCategoryTask(RetailTmpMediaAssociationWorkTable workTable)
    {
        RetailTmpCategoryMedia categoryMedia;
        select * from categoryMedia
                join workTable
                where categoryMedia.RecId == workTable.MediaEntityRecId && categoryMedia.AssociationStatus != RetailMediaAssociationStatus::Associated;

        //The below codebase commented as this feature was developed however we will hide it for now and we will uncomment as part of the Deliverable/Task #3687509.
        //RetailMediaAssociationHelper::associateCategory(categoryMedia);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateProductTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the products.
    /// </summary>
    /// <param name = "workTable">RetailTmpMediaAssociationWorkTable table, contains all the Media entity RecId as set by the job.</param>
    private void invokeAssociateProductTask(RetailTmpMediaAssociationWorkTable workTable)
    {
        RetailTmpProductMedia productMedia;
        select * from productMedia
                join workTable
                where productMedia.RecId == workTable.MediaEntityRecId && productMedia.AssociationStatus != RetailMediaAssociationStatus::Associated;

        //The below codebase commented as this feature was developed however we will hide it for now and we will uncomment as part of the Deliverable/Task #3687509.
        //RetailMediaAssociationHelper::associateProduct(productMedia);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateCatalogProductTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the catalog's products.
    /// </summary>
    /// <param name = "workTable">RetailTmpMediaAssociationWorkTable table, contains all the Media entity RecId as set by the job.</param>
    private void invokeAssociateCatalogProductTask(RetailTmpMediaAssociationWorkTable workTable)
    {
        RetailTmpCatalogProductMedia catalogProductMedia;
        select * from catalogProductMedia
                join workTable
                where catalogProductMedia.RecId == workTable.MediaEntityRecId && catalogProductMedia.AssociationStatus != RetailMediaAssociationStatus::Associated;

        //The below codebase commented as this feature was developed however we will hide it for now and we will uncomment as part of the Deliverable/Task #3687509.
        //RetailMediaAssociationHelper::associateCatalogProduct(catalogProductMedia);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeAssociateChannelProductTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine associate the media with the channel's products.
    /// </summary>
    /// <param name = "workTable">RetailTmpMediaAssociationWorkTable table, contains all the Media entity RecId as set by the job.</param>
    private void invokeAssociateChannelProductTask(RetailTmpMediaAssociationWorkTable workTable)
    {
        RetailTmpChannelProductMedia channelProductMedia;
        select * from channelProductMedia
                join workTable
                where channelProductMedia.RecId == workTable.MediaEntityRecId && channelProductMedia.AssociationStatus != RetailMediaAssociationStatus::Associated;

        //The below codebase commented as this feature was developed however we will hide it for now and we will uncomment as part of the Deliverable/Task #3687509.
        //RetailMediaAssociationHelper::associateChannelProduct(channelProductMedia);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// overriding the pack routine.
    /// </summary>
    /// <returns>container</returns>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// overriding the unpack routine.
    /// </summary>
    /// <param name = "packedClass">container</param>
    /// <returns>true/false</returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine sets/gets the RecId list.
    /// </summary>
    /// <param name = "_packedRecIdList">Recid list.</param>
    /// <returns>The container.</returns>
    public container parmRecIdList(container _packedRecIdList = packedRecIdList)
    {
        packedRecIdList = _packedRecIdList;
        return packedRecIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMediaEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine sets/gets the media entity type.
    /// </summary>
    /// <param name = "_mediaEntityType">Media entity type</param>
    /// <returns>Media entity enum value in int.</returns>
    public int parmMediaEntityType(int _mediaEntityType = mediaEntityType)
    {
        mediaEntityType = _mediaEntityType;
        return mediaEntityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubMediaEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This routine sets/gets sub media entity tyep, used for catalog products and channel products media.
    /// </summary>
    /// <param name = "_mediaEntityType">Media entity type</param>
    /// <returns>Media entity enum value in int</returns>
    public int parmSubMediaEntityType(int _mediaEntityType = subMediaEntityType)
    {
        subMediaEntityType = _mediaEntityType;
        return subMediaEntityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailMediaAssociationTask</c> class
    /// can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailMediaAssociationTask</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>