<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_PurchReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchCalcTax_PurchReq extends PurchCalcTax
{
    QueryRun           queryTransact;
    PurchReqTable      purchReqTable;
    PurchReqLine       prevPurchReqLine;
    PurchReqLine       purchReqLine;
    CurrencyCode       currencyCode;
    PurchReqTotals     purchReqTotals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets assessable value by including tax into line amount based on the PurchQty, or including Misc Charges based on line amount.
    /// </summary>
    /// <returns>
    /// Returns the amount.
    /// </returns>
    public AmountCur assessableValue_IN()
    {
        return purchReqLine.getMiscChargesAmount_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    [Replaceable]
    TaxAmountCur calcTax(TradeTotalsBase _purchTotals)
    {
        TaxCalculation  taxCalculation;
        AmountCur       amountCur;

        purchReqTotals = _purchTotals as PurchReqTotals;
        boolean doCalculateTax = this.doCalculateTax();
        boolean loadTaxUncommitted  = !doCalculateTax && this.taxUncommittedExists();
        boolean maintainTaxUncommitted = this.maintainTaxUncommitted();

        taxCalculation = TaxCalculation::newForSourceTypeWithTaxUncommitted(TaxSourceType::PurchaseOrder, this, loadTaxUncommitted, false, maintainTaxUncommitted);

        if (doCalculateTax)
        {
            if (this.canRecalculateTax())
            {
                amountCur = taxCalculation.calculateTax();
            }
        }        
        else
        {
            amountCur = taxCalculation.totalTaxAmount();
        }
        this.tax(taxCalculation);

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCalculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if tax should be calculated or recalculated.
    /// </summary>
    /// <returns>true if tax should be calculated or recalculated; otherwise false.</returns>
    protected boolean doCalculateTax()
    {
        return purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::Draft ||
               purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::Rejected ||
               purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::InReview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cfopTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>CFOPTable_BR</c> for the current record.
    /// </summary>
    /// <returns>
    ///     The <c>CFOPTable_BR</c> record.
    /// </returns>
    protected CFOPTable_BR cfopTable_BR()
    {
        return CFOPTable_BR::find(purchReqLine.CFOPTable_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntersection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a Boolean value that indicates whether the tax intersection is verified.
    /// </summary>
    /// <returns>
    /// true if the tax code intersection is verified; otherwise false.
    /// </returns>

    public boolean checkIntersection()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of the record in the <c>Currency</c> table.
    /// </summary>
    /// <returns>
    ///    The currency code of the record in the <c>Currency</c> table.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        if (!currencyCode)
        {
            currencyCode = Ledger::accountingCurrency(CompanyInfo::current());
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public DocumentDate documentDate()
    {
        return purchReqTotals.documentDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscPct endDisc()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    VendExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return ExchangeRateHelper::exchRate(this.currencyCode(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return ExchangeRateHelper::exchRateSecond(this.currencyCode(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate reportingCurrencyExchangeRate(date _date = dateNull())
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void initCursor()
    {
        queryTransact = this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the existing <c>TaxUncommitted</c> records must be updated or if they can be
    /// recreated.
    /// </summary>
    /// <returns>
    /// true if the existing <c>TaxUncommitted</c> records must be updated; otherwise, false.
    /// </returns>
    /// <remarks>The method always returns true for purchase requisitions, because TaxUncommitted are source document lines.</remarks>
    protected boolean maintainTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount markupAmount()
    {
        MarkupAmount    ret;
        AmountCur       value;

        if (purchReqLine)
        {
            value = this.transLineAmount();
        }
        else
        {
            value = purchReqTotals.totalOrderBalance(markupTrans.TransRecId);
        }

        ret = markupTrans.signedValue(Markup::calcTrans(markupTrans, this.transQty(), value, value, this.invoiceDate()));

        return CurrencyExchangeHelper::curAmount2CurAmount(ret, purchReqLine.CurrencyCode, this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        if (purchReqLine)
        {
            return purchReqLine.DefaultDimension;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(PurchReqTable _purchReqTable)
    {
        super(_purchReqTable);

        purchReqTable  = _purchReqTable;
        this.setCurrencyCode(Ledger::accountingCurrency(CompanyInfo::current()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        prevPurchReqLine = purchReqLine.data();
        purchReqLine = null;

        while (queryTransact.next())
        {
            purchReqLine = this.queryGet(queryTransact);

            if (purchReqLine)
            {
                this.initCursorMarkup(purchReqLine.TableId, purchReqLine.RecId);
                break;
            }
        }

        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccountMarkup</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccountMarkup()
    {
        return 0; // LedgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPostingMarkup</Name>
				<Source><![CDATA[
    LedgerPostingType operationPostingMarkup()
    {
        return LedgerPostingType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    QueryRun queryBuild()
    {
        //We cannot use query PurchReqLine since 'allowCrossCompany' is set to yes for this query and
        //this query is being used in other places where allowCrossCompany is required.

        Query                   query       = new Query();
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tableNum(PurchReqLine));

        qbds.addRange(fieldNum(PurchReqLine, PurchReqTable)).value(queryValue(purchReqTable.RecId));

        qbds.addRange(fieldNum(PurchReqLine, BuyingLegalEntity)).value(queryValue(CompanyInfo::current()));

        qbds.addRange(fieldNum(PurchReqLine, RequisitionStatus)).value(SysQuery::valueNot(PurchReqRequisitionStatus::Cancelled));

        queryRun   = new QueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    PurchReqLine queryGet(QueryRun _transact)
    {
        return _transact.get(tableNum(PurchReqLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assigns a specific currency code.
    /// </summary>
    /// <param name="_targetCurrencyCode">
    ///     The currency code of a record in the <c>Currency</c> table.
    /// </param>
    public void setCurrencyCode(CurrencyCode _targetCurrencyCode)
    {
        currencyCode = _targetCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a specific purchase requisition line.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The <c>PurchReqLine</c> record to use.
    /// </param>
    public void setPurchReqLine(PurchReqLine _purchReqLine)
    {
        purchReqLine = _purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchReqLine</Name>
				<Source><![CDATA[
    internal PurchReqLine getPurchReqLine()
    {
        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSpecQty</Name>
				<Source><![CDATA[
    void setSpecQty(PurchUpdate _specQty)
    {
        super(_specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCashDiscPercent</Name>
				<Source><![CDATA[
    DiscPct taxCashDiscPercent()
    {
        return purchReqTotals.taxCashDiscPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxUncommittedExists</Name>
				<Source><![CDATA[
    protected boolean taxUncommittedExists()
    {
        return TaxUncommitted::existByDocumentId(this.headingTableID(), this.headingRecID());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault transDefaultDimension()
    {
        return purchReqLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transItemId</Name>
				<Source><![CDATA[
    public ItemId transItemId()
    {
        return purchReqLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur transLineAmount()
    {
        return CurrencyExchangeHelper::curAmount2CurAmount(purchReqLine.calcLineAmount(this.transQty()), purchReqLine.CurrencyCode, this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur transLineAmountInclTax()
    {
        return CurrencyExchangeHelper::curAmount2CurAmount(purchReqLine.calcLineAmount(this.transQty()), purchReqLine.CurrencyCode, this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    PriceCur transPcsPrice()
    {
        return ExchangeRateHelper::curPrice2CurPrice(purchReqLine.taxPcsPrice(this.invoiceDate()), purchReqLine.CurrencyCode, this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPurchUnit</Name>
				<Source><![CDATA[
    PurchUnit transPurchUnit()
    {
        return UnitOfMeasure::find(purchReqLine.PurchUnitOfMeasure).Symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    PurchQty transQty()
    {
        return purchReqLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRecId</Name>
				<Source><![CDATA[
    recId transRecId()
    {
        return purchReqLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    tableId transTableId()
    {
        return purchReqLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup transTaxGroup()
    {
        return purchReqLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup transTaxItemGroup()
    {
        return purchReqLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    InventTransId transTransId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return Currency::triangulation(this.currencyCode(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchCalcTax_PurchReq construct(PurchReqTable _purchReqTable)
    {
        return new PurchCalcTax_PurchReq(_purchReqTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRecalculateTax</Name>
				<Source><![CDATA[
    public boolean canRecalculateTax()
    {
        boolean ret = true;

        if (purchReqTable.SourceDocumentHeader)
        {
            ret = SourceDocumentAccountingValidator::canCalculateTaxesForDocument(purchReqTable.SourceDocumentHeader);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>