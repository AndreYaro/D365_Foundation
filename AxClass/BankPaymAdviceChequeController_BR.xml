<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdviceChequeController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPaymAdviceChequeController</c> class is the controller class for the
/// <c>BankPaymAdviceCheque_BR</c> report.
/// </summary>
public class BankPaymAdviceChequeController_BR extends SrsReportRunController implements BatchRetryable
{
    private CompanyInfo companyInfo;
    private CompanyImage companyImage;
    private Bitmap emptyBitMap;
    private VendTrans vendTransInvoice;
    private VendTable vendTable;
    private CustTrans custTransInvoice;
    private CustTable custTable;
    private BankChequeTable prvBankChequeTable;
    private BankChequePaymTrans bankChequePaymTrans;
    private TmpBankPaym2Invoice tmpBankPaym2Invoice;
    private Counter invoiceCount;
    private RecId recId[];
    private CompanyId companyId[];
    private VendOutPaym_Cheque vendOutPaymCheque;
    private CustOutPaym_Cheque custOutPaymCheque;
    private BankPaymAdviceChequeTmp_BR bankPaymAdviceChequeTmp;
    private BankChequeTable bankChequeTable;
    private int isInvoiceAndCashDiscVisible;
    private int currentSessionId;
    private str queryKeyStr;
    private Query query;

    private const Timezone GMT = Timezone::GMT_DUBLIN_EDINBURGH_LISBON_LONDON;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankPaymReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the bank payment reference for a customer or vendor.
    /// </summary>
    /// <returns>
    /// The payment reference.
    /// </returns>
    private PaymReference bankPaymReference()
    {
        PaymReference paymReference;

        switch (bankChequeTable.RecipientType)
        {
            case BankChequeRecipientType::Vend:
                paymReference = LedgerJournalTrans::findRecId(this.ledgerJournalTrans(
                    LedgerJournalACType::Vend,
                    bankChequeTable.Voucher,
                    bankChequeTable.TransDate,
                    bankChequeTable.ChequeNum), false).PaymReference;
                break;

            case BankChequeRecipientType::Cust:
                paymReference = LedgerJournalTrans::findRecId(
                    this.ledgerJournalTrans(LedgerJournalACType::Cust,
                    bankChequeTable.Voucher,
                    bankChequeTable.TransDate,
                    bankChequeTable.ChequeNum), false).PaymReference;
                break;
        }

        return paymReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTransInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the invoice information for the <c>CustTrans</c> record.
    /// </summary>
    private void custTransInvoice()
    {
        CustSettlement custSettlement;
        CustTransOpen custTransOpen;
        SpecTrans specTrans;
        CustTrans custTrans;
        boolean bankChequeTableCompanySameAsRecipientCompany;

        bankChequeTableCompanySameAsRecipientCompany = (bankChequeTable.company() == bankChequeTable.RecipientCompany);

        // Get the CustTrans for the check recipient.
        // Use .company() so that it accounts for virtual company scenario.
        custTrans = this.findCustVendTransPayment(
            ModuleCustVend::Cust,
            (bankChequeTableCompanySameAsRecipientCompany ? bankChequeTable.Voucher : bankChequeTable.RecipientTransVoucher),
            (bankChequeTableCompanySameAsRecipientCompany ? bankChequeTable.company() : bankChequeTable.RecipientCompany),
            bankChequeTable.TransDate,
            bankChequeTable.ChequeNum);

        invoiceCount = 0;
        if (!custOutPaymCheque && custTrans)
        {
            // Get the settlement offset information for the check recipient.
            while select crosscompany OffsetRecid, OffsetCompany from custSettlement
                where custSettlement.TransRecId == custTrans.RecId
                    && custSettlement.TransCompany == custTrans.DataAreaId
            {
                invoiceCount++;
                recId[invoiceCount] = custSettlement.OffsetRecid;
                companyId[invoiceCount] = custSettlement.OffsetCompany;
            }
        }
        else
        {
            while select crosscompany RefRecId, DataAreaId from custTransOpen
                exists join specTrans
                    where specTrans.RefCompany == custTransOpen.DataAreaId
                        && specTrans.RefTableId == custTransOpen.TableId
                        && specTrans.RefRecId == custTransOpen.RecId
                        && specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                        && specTrans.SpecRecId == this.ledgerJournalTrans(
                            LedgerJournalACType::Cust,
                            bankChequeTable.Voucher,
                            bankChequeTable.TransDate,
                            bankChequeTable.ChequeNum)
            {
                invoiceCount++;
                recId[invoiceCount] = custTransOpen.RefRecId;
                companyId[invoiceCount] = custTransOpen.company();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendTransPayment</Name>
				<Source><![CDATA[
    private CustVendTrans findCustVendTransPayment(
        ModuleCustVend _module,
        Voucher _paymentVoucher,
        CompanyId _paymentCompany,
        TransDate _transDate,
        PaymReference _paymReference)
    {
        CustVendTrans custVendTrans;

        changecompany(_paymentCompany)
        {
            switch (_module)
            {
                case ModuleCustVend::Cust:
                    CustTrans custTrans;
                    custVendTrans = custTrans;
                    break;

                case ModuleCustVend::Vend:
                    VendTrans vendTrans;
                    custVendTrans = vendTrans;
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            select firstonly custVendTrans
                where custVendTrans.Voucher == _paymentVoucher
                    && custVendTrans.TransDate == _transDate
                    && custVendTrans.PaymReference == _paymReference;
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query that is used for business logic.
    /// </summary>
    /// <param name="paramVendOutPaymCheque">
    /// The <c>vendOutPaymCheque</c> object passed from the AX form.
    /// </param>
    /// <param name="paramCustOutPaymCheque">
    /// The <c>custOutPaymCheque</c> object passed from AX form.
    /// </param>
    /// <returns>
    /// The query that has been built.
    /// </returns>
    public Query initQuery(VendOutPaym_Cheque paramVendOutPaymCheque, CustOutPaym_Cheque paramCustOutPaymCheque)
    {
        Query reportQuery;

        vendOutPaymCheque = paramVendOutPaymCheque;
        custOutPaymCheque = paramCustOutPaymCheque;

        //add the query to get the sysquery dynamic parameters
        reportQuery = new Query(queryStr(BankCheque));

        if (vendOutPaymCheque)
        {
            reportQuery.dataSourceTable(tableNum(BankChequeTable)).rangeField(fieldNum(BankChequeTable, ChequeNum)).value(vendOutPaymCheque.interval());
            reportQuery.dataSourceTable(tableNum(BankChequeTable)).rangeField(fieldNum(BankChequeTable, AccountID)).value(vendOutPaymCheque.parmBankAccountID());
        }
        else if (custOutPaymCheque)
        {
            reportQuery.dataSourceTable(tableNum(BankChequeTable)).rangeField(fieldNum(BankChequeTable, ChequeNum)).value(custOutPaymCheque.interval());
            reportQuery.dataSourceTable(tableNum(BankChequeTable)).rangeField(fieldNum(BankChequeTable, AccountID)).value(custOutPaymCheque.parmBankAccountID());
        }

        return reportQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankPaymAdviceChequeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>bankPaymAdviceChequeTmp</c> table.
    /// </summary>
    /// <param name="isCustAccount">
    /// A Boolean value that indicates whether the record is a customer or vendor account.
    /// </param>
    private void insertBankPaymAdviceChequeTmp(boolean isCustAccount)
    {
        bankPaymAdviceChequeTmp.IsInvoiceAndCashDiscVisible = isInvoiceAndCashDiscVisible;
        bankPaymAdviceChequeTmp.CompanyAddress = companyInfo.postalAddress().Address;
        bankPaymAdviceChequeTmp.CompanyPhone = companyInfo.phone();
        bankPaymAdviceChequeTmp.CompanyTeleFax = companyInfo.teleFax();
        bankPaymAdviceChequeTmp.CompanyGiro = companyInfo.Giro;
        bankPaymAdviceChequeTmp.CompanyCoRegNum = companyInfo.CoRegNum;
        bankPaymAdviceChequeTmp.CompanyName = companyInfo.name();

        if (isCustAccount)
        {
            bankPaymAdviceChequeTmp.CustName = custTable.name();
            bankPaymAdviceChequeTmp.CustAddress = custTable.postalAddress().Address;
            bankPaymAdviceChequeTmp.CustAccount = custTable.AccountNum;
            bankPaymAdviceChequeTmp.CustBankPaymReference = this.bankPaymReference();
            bankPaymAdviceChequeTmp.IsCustVisible = 1;
        }
        else
        {
            bankPaymAdviceChequeTmp.VendName = vendTable.name();
            bankPaymAdviceChequeTmp.VendAddress = bankChequeTable.displayRemittanceAddress();
            bankPaymAdviceChequeTmp.VendAccount = vendTable.AccountNum;
            bankPaymAdviceChequeTmp.VendBankPaymReference = this.bankPaymReference();
            bankPaymAdviceChequeTmp.IsCustVisible = 0;
        }

        bankPaymAdviceChequeTmp.BankAccount = bankChequeTable.AccountID;
        bankPaymAdviceChequeTmp.ChequeNum = bankChequeTable.ChequeNum;
        bankPaymAdviceChequeTmp.ChequeCurrencyCode = bankChequeTable.CurrencyCode;
        bankPaymAdviceChequeTmp.ChequeAmountCur = bankChequeTable.AmountCur;
        bankPaymAdviceChequeTmp.InvoiceId = bankChequePaymTrans.InvoiceId;
        bankPaymAdviceChequeTmp.TransDate = bankChequePaymTrans.TransDate;
        bankPaymAdviceChequeTmp.CurrencyCode = bankChequePaymTrans.CurrencyCode;
        bankPaymAdviceChequeTmp.InvoiceAmountCur = -bankChequePaymTrans.InvoiceAmountCur;
        bankPaymAdviceChequeTmp.CashDiscAmountCur = -bankChequePaymTrans.CashDiscAmountCur;
        bankPaymAdviceChequeTmp.InvoiceDate = bankChequePaymTrans.InvoiceDate;
        bankPaymAdviceChequeTmp.InvoiceAccountNum = bankChequePaymTrans.InvoiceAccountNum;
        bankPaymAdviceChequeTmp.InvoiceCompany = bankChequePaymTrans.InvoiceCompany;
        bankPaymAdviceChequeTmp.PaymentAmountCur = -tmpBankPaym2Invoice.PaymAmountCur;
        bankPaymAdviceChequeTmp.SessionId = currentSessionId;
        bankPaymAdviceChequeTmp.DateOfCreation = DateTimeUtil::getToday(GMT);

        if (companyImage.HasImage)
        {
            bankPaymAdviceChequeTmp.Image = companyImage.Image;
            bankPaymAdviceChequeTmp.PrintImage = NoYes::Yes;
        }
        else
        {
            bankPaymAdviceChequeTmp.Image = emptyBitMap;
            bankPaymAdviceChequeTmp.PrintImage = NoYes::No;
        }

        bankPaymAdviceChequeTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    private RecId ledgerJournalTrans(
        LedgerJournalACType _journalAccountType,
        Voucher _voucher,
        TransDate _transDate,
        BankChequeNum _bankChequeNum)
    {
        LedgerJournalTrans ledgerJournalTrans;

        select firstonly RecId from ledgerJournalTrans
            where ledgerJournalTrans.AccountType == _journalAccountType
               && ledgerJournalTrans.Voucher == _voucher
               && ledgerJournalTrans.TransDate == _transDate
               && ledgerJournalTrans.BankChequeNum == _bankChequeNum;

        return ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromSysLastValue</Name>
				<Source><![CDATA[
    protected void loadFromSysLastValue()
    {
        //Do not load ranges and filters because they are always created from scratch.
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        queryKeyStr = this.getFirstQueryContractKey();

        if (this.parmArgs())
        {
            if (this.parmArgs().caller() is VendOutPaym_Cheque)
            {
                vendOutPaymCheque = this.parmArgs().caller();
            }
            else if (this.parmArgs().caller() is CustOutPaym_Cheque)
            {
                custOutPaymCheque = this.parmArgs().caller();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method to change the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        QueryBuildDataSource qbds;
        Query reportQuery;
        QueryBuildRange bankAccountQueryRange;
        QueryBuildRange chequeNumQueryRange;
        QueryFilter vendAccountQueryFilter;
        QueryFilter invoiceVoucherQueryFilter;

        //Query = BankPaymAdviceCheque_BR
        query = this.parmReportContract().parmQueryContracts().lookup(queryKeyStr);

        //User can pick specific bank account and cheque from dialog to create payment advice.
        qbds = query.dataSourceTable(tableNum(BankPaymAdviceChequeTmp_BR));

        bankAccountQueryRange = qbds.findRange(fieldNum(BankPaymAdviceChequeTmp_BR, BankAccount));
        chequeNumQueryRange = qbds.findRange(fieldNum(BankPaymAdviceChequeTmp_BR, ChequeNum));
        vendAccountQueryFilter = query.findQueryFilter(qbds, fieldStr(BankPaymAdviceChequeTmp_BR, VendAccount));
        invoiceVoucherQueryFilter = query.findQueryFilter(qbds, fieldStr(BankPaymAdviceChequeTmp_BR, InvoiceVoucher));

        //Query = BankCheque
        this.parmReportContract().parmQueryContracts().insert(queryKeyStr, this.initQuery(vendOutPaymCheque, custOutPaymCheque));
        query = this.parmReportContract().parmQueryContracts().lookup(queryKeyStr);

        //Apply user choices from BankPaymAdviceCheque_BR query to BankCheque query
        if (bankAccountQueryRange && bankAccountQueryRange.value())
        {
            SrsReportHelper::addParameterValueRangeToQuery(
                query,
                tableNum(BankChequeTable),
                fieldNum(BankChequeTable, AccountID),
                bankAccountQueryRange.value());
        }

        if (chequeNumQueryRange && chequeNumQueryRange.value())
        {
            SrsReportHelper::addParameterValueRangeToQuery(
                query,
                tableNum(BankChequeTable),
                fieldNum(BankChequeTable, ChequeNum),
                chequeNumQueryRange.value());
        }

        if (vendAccountQueryFilter && vendAccountQueryFilter.value())
        {
            SrsReportHelper::addParameterValueRangeToQuery(
                query,
                tableNum(BankChequeTable),
                fieldNum(BankChequeTable, RecipientAccountNum),
                vendAccountQueryFilter.value());
        }

        if (invoiceVoucherQueryFilter && invoiceVoucherQueryFilter.value())
        {
            SrsReportHelper::addParameterValueRangeToQuery(
                query,
                tableNum(BankChequeTable),
                fieldNum(BankChequeTable, Voucher),
                invoiceVoucherQueryFilter.value());
        }

        this.processReport(query);

        reportQuery = new Query(queryStr(BankPaymAdviceCheque_BR));
        SrsReportHelper::addParameterValueRangeToQuery(
            reportQuery,
            tableNum(BankPaymAdviceChequeTmp_BR),
            fieldNum(BankPaymAdviceChequeTmp_BR, SessionId),
            queryValue(currentSessionId));

        this.parmReportContract().parmQueryContracts().insert(queryKeyStr, reportQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic for the <c>BankPaymAdviceCheque_BR</c> report.
    /// </summary>
    /// <param name="_query">
    /// The query that is used in the business logic.
    /// </param>
    public void processReport(Query _query)
    {
        int x;
        QueryRun qr;
        RecId custVendTransRecId;
        CompanyId custVendCompanyId;
        Set processedRecords = new Set(Types::Int64);

        currentSessionId = new xSession().sessionId();

        delete_from bankPaymAdviceChequeTmp
            where bankPaymAdviceChequeTmp.SessionId == currentSessionId
                || bankPaymAdviceChequeTmp.DateOfCreation < DateTimeUtil::getToday(GMT) - 2;

        qr = new QueryRun(_query);
        companyInfo = CompanyInfo::find();
        companyImage = CompanyImage::findByRecord(companyInfo, false);

        while (qr.next())
        {
            bankChequeTable = qr.get(tableNum(BankChequeTable));

            if (BankChequeLayout::find(bankChequeTable.AccountID).OtherCurrencies)
            {
                isInvoiceAndCashDiscVisible = false;
            }
            else
            {
                isInvoiceAndCashDiscVisible = true;
            }

            switch (bankChequeTable.RecipientType)
            {
                case BankChequeRecipientType::Cust:
                    if (bankChequeTable.RecipientCompany)
                    {
                        custTable = CustTable::findByCompany(bankChequeTable.RecipientCompany, bankChequeTable.RecipientAccountNum);
                    }
                    else
                    {
                        custTable = CustTable::find(bankChequeTable.RecipientAccountNum);
                    }

                    prvBankChequeTable = bankChequeTable.data();

                    delete_from tmpBankPaym2Invoice;

                    this.custTransInvoice();

                    for (x = invoiceCount; x > 0; x--)
                    {
                        custTransInvoice = CustTrans::findByCompany(companyId[x], recId[x]);

                        if (custVendTransRecId != recId[x] || custVendCompanyId != companyId[x])
                        {
                            custVendTransRecId = recId[x];
                            custVendCompanyId = companyId[x];

                            while select bankChequePaymTrans order by InvoiceId
                                where bankChequePaymTrans.InvoiceCompany == companyId[x]
                                    && bankChequePaymTrans.InvoiceAccountNum == custTransInvoice.AccountNum
                                    && bankChequePaymTrans.InvoiceVoucher == custTransInvoice.Voucher
                                    && bankChequePaymTrans.InvoiceDate == (custTransInvoice.DocumentDate ? custTransInvoice.DocumentDate : custTransInvoice.TransDate)
                                    && bankChequePaymTrans.ChequeNum >= bankChequeTable.ChequeNum
                                    && bankChequePaymTrans.AccountId == bankChequeTable.AccountID
                                    && bankChequePaymTrans.Voucher == bankChequeTable.Voucher
                            {
                                if (!processedRecords.in(bankChequePaymTrans.RecId))
                                {
                                    processedRecords.add(bankChequePaymTrans.RecId);

                                    select firstonly tmpBankPaym2Invoice
                                        where tmpBankPaym2Invoice.InvoiceCurrencyCode == bankChequePaymTrans.CurrencyCode;

                                    tmpBankPaym2Invoice.InvoiceCurrencyCode = bankChequePaymTrans.CurrencyCode;
                                    tmpBankPaym2Invoice.InvoiceAmountCur += bankChequePaymTrans.InvoiceAmountCur;
                                    tmpBankPaym2Invoice.InvoiceCashDisc += bankChequePaymTrans.CashDiscAmountCur;
                                    tmpBankPaym2Invoice.PaymAmountCur = bankChequePaymTrans.paymentAmountBankCur();

                                    this.insertBankPaymAdviceChequeTmp(true);

                                    tmpBankPaym2Invoice.write();
                                }
                            }
                        }
                    }
                    break;

                case BankChequeRecipientType::Vend:
                    if (bankChequeTable.RecipientCompany)
                    {
                        vendTable = VendTable::findByCompany(bankChequeTable.RecipientCompany, bankChequeTable.RecipientAccountNum);
                    }
                    else
                    {
                        vendTable = VendTable::find(bankChequeTable.RecipientAccountNum);
                    }

                    prvBankChequeTable = bankChequeTable.data();

                    delete_from tmpBankPaym2Invoice;

                    this.vendTransInvoice();

                    for (x = invoiceCount; x > 0; x--)
                    {
                        vendTransInvoice = VendTrans::findByCompany(companyId[x], recId[x]);

                        while select bankChequePaymTrans order by InvoiceId
                            where bankChequePaymTrans.InvoiceCompany == companyId[x]
                                && bankChequePaymTrans.InvoiceAccountNum == vendTransInvoice.AccountNum
                                && bankChequePaymTrans.InvoiceVoucher == vendTransInvoice.Voucher
                                && bankChequePaymTrans.InvoiceDate == (vendTransInvoice.DocumentDate ? vendTransInvoice.DocumentDate : vendTransInvoice.TransDate)
                                && bankChequePaymTrans.ChequeNum >= bankChequeTable.ChequeNum
                                && bankChequePaymTrans.AccountId == bankChequeTable.AccountID
                                && bankChequePaymTrans.Voucher == bankChequeTable.Voucher
                        {
                            if (!processedRecords.in(bankChequePaymTrans.RecId))
                            {
                                processedRecords.add(bankChequePaymTrans.RecId);

                                select firstonly tmpBankPaym2Invoice
                                    where tmpBankPaym2Invoice.InvoiceCurrencyCode == bankChequePaymTrans.CurrencyCode;

                                tmpBankPaym2Invoice.InvoiceCurrencyCode = bankChequePaymTrans.CurrencyCode;
                                tmpBankPaym2Invoice.InvoiceAmountCur += bankChequePaymTrans.InvoiceAmountCur;
                                tmpBankPaym2Invoice.InvoiceCashDisc += bankChequePaymTrans.CashDiscAmountCur;
                                tmpBankPaym2Invoice.PaymAmountCur = bankChequePaymTrans.paymentAmountBankCur();

                                this.insertBankPaymAdviceChequeTmp(false);

                                tmpBankPaym2Invoice.write();
                            }
                        }
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTransInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the invoice information of the <c>VendTrans</c> record.
    /// </summary>
    private void vendTransInvoice()
    {
        VendSettlement vendSettlement;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;
        VendTrans vendTrans;
        LedgerJournalTrans ledgerJournalTrans;
        boolean bankChequeTableCompanySameAsRecipientCompany;

        invoiceCount = 0;

        bankChequeTableCompanySameAsRecipientCompany = (bankChequeTable.company() == bankChequeTable.RecipientCompany);

        // Get the VendTrans for the check recipient.
        // Use .company() so that it accounts for virtual company scenario.
        vendTrans = this.findCustVendTransPayment(
            ModuleCustVend::Vend,
            (bankChequeTableCompanySameAsRecipientCompany ? bankChequeTable.Voucher : bankChequeTable.RecipientTransVoucher),
            (bankChequeTableCompanySameAsRecipientCompany ? bankChequeTable.company() : bankChequeTable.RecipientCompany),
            bankChequeTable.TransDate,
            bankChequeTable.ChequeNum);

        if (!vendOutPaymCheque && vendTrans)
        {
            // Get the settlement offset information for the check recipient.
            while select crosscompany OffsetRecid, OffsetCompany from vendSettlement
                where vendSettlement.TransRecId == vendTrans.RecId
                    && vendSettlement.TransCompany == vendTrans.DataAreaId
            {
                invoiceCount++;
                recId[invoiceCount] = vendSettlement.OffsetRecid;
                companyId[invoiceCount] = vendSettlement.OffsetCompany;
            }
        }
        else
        {
            if (BrazilParameters::isEnabled())
            {
                while select crosscompany RefRecId, DataAreaId from vendTransOpen
                    exists join specTrans
                        where specTrans.RefCompany == vendTransOpen.DataAreaId
                            && specTrans.RefTableId == vendTransOpen.TableId
                            && specTrans.RefRecId == vendTransOpen.RecId
                            && specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                    exists join ledgerJournalTrans
                        where ledgerJournalTrans.RecId == specTrans.SpecRecId
                            && ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                            && ledgerJournalTrans.Voucher == bankChequeTable.Voucher
                            && ledgerJournalTrans.TransDate == bankChequeTable.TransDate
                            && ledgerJournalTrans.BankChequeNum == bankChequeTable.ChequeNum
                {
                    invoiceCount++;
                    recId[invoiceCount] = vendTransOpen.RefRecId;
                    companyId[invoiceCount] = vendTransOpen.company();
                }
            }
            else
            {
                while select crosscompany RefRecId, DataAreaId from vendTransOpen
                    exists join specTrans
                        where specTrans.RefCompany == vendTransOpen.DataAreaId
                            && specTrans.RefTableId == vendTransOpen.TableId
                            && specTrans.RefRecId == vendTransOpen.RecId
                            && specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                            && specTrans.SpecRecId == this.ledgerJournalTrans(
                                LedgerJournalACType::Vend,
                                bankChequeTable.Voucher,
                                bankChequeTable.TransDate,
                                bankChequeTable.ChequeNum)
                {
                    invoiceCount++;
                    recId[invoiceCount] = vendTransOpen.RefRecId;
                    companyId[invoiceCount] = vendTransOpen.company();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00063, funcName());

        SrsReportRunController controller = new BankPaymAdviceChequeController_BR();
        controller.parmReportName(ssrsReportStr(BankPaymAdviceCheque_BR, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>