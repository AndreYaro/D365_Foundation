<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentEInvoiceTransferXmlBatchJob_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BusinessDocumentEInvoiceTransferXmlBatchJob_IT extends SysBatchTask implements ISysBatchTask
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecurrenceData</Name>
				<Source><![CDATA[
    protected static SysRecurrenceData getRecurrenceData()
    {
        var startTime = DateTimeUtil::utcNow();
        SysRecurrenceData recurrenceData = SysRecurrence::defaultRecurrence();
        recurrenceData = SysRecurrence::setRecurrenceStartDateTime(recurrenceData, startTime);
        recurrenceData = SysRecurrence::setRecurrenceNoEnd(recurrenceData);
        recurrenceData = SysRecurrence::setRecurrenceUnit(recurrenceData, SysRecurrenceUnit::Hour, 3);
        return recurrenceData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleForBatchExecution</Name>
				<Source><![CDATA[
    public void scheduleForBatchExecution(SysRecurrenceData _recurrenceData = BusinessDocumentEInvoiceTransferXmlBatchJob_IT::getRecurrenceData())
    {
        super(_recurrenceData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecurrence</Name>
				<Source><![CDATA[
    public boolean validateRecurrence(RecId batchJobId, SysRecurrenceData recurrence)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@BusinessDocumentSubmissionService:EInvoiceXmlBatchTask";
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDialog</Name>
				<Source><![CDATA[
    public boolean showDialog()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (FeatureStateProvider::IsFeatureEnabled(BusinessDocumentMoveEinvoiceXmlToAttachmentsFeature::instance()))
        {
            BusinessDocumentEInvoiceTransferXmlBatchJob_IT::MoveXmlToBlobStore();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>MoveXmlToBlobStore</Name>
				<Source><![CDATA[
    internal static void MoveXmlToBlobStore()
    {
        EInvoiceXMLMoveToAttachmentInstrumentationLogger logger = EInvoiceXMLMoveToAttachmentInstrumentationLogger::createLogger();
        EInvoiceXMLMoveToAttachmentService_IT eInvoiceXMLMoveToAttachmentService_IT = new EInvoiceXMLMoveToAttachmentService_IT();
        using (var runActivityContext = logger.activityContextWithCustomProperties(EInvoiceXMLMoveToAttachmentInstrumentationConstants::EInvoiceXMLMoveToAttachmentMoveBatch))
        {
            runActivityContext.addCustomProperty(
                            EInvoiceXMLMoveToAttachmentInstrumentationConstants::BatchStarted,
                            datetime2Str(DateTimeUtil::utcNow()));
            eInvoiceXMLMoveToAttachmentService_IT.move();
            runActivityContext.addCustomProperty(
                            EInvoiceXMLMoveToAttachmentInstrumentationConstants::BatchEnded,
                            datetime2Str(DateTimeUtil::utcNow()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>