<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetDeprAccountForJournalCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetDeprAccountForJournalCalc
{
    RAssetInventIssueTrans  assetInventIssueTrans;
    RAssetTable             rassetTableUsed;
    RAssetMainGroupMember   assetMainGroupMember;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initLedgerAccount</Name>
				<Source><![CDATA[
        protected void initLedgerAccount()
    {
        LedgerDimensionDefaultAccount       ledgerDimension;
        LedgerDimensionDefaultAccount       depreciationBonusLedgerDimension;
        RAssetDeprAccountForJournal         assetDeprAccountForJournal;
        RAssetDeprAccount                   assetDepraccount;
        RAssetMainGroupId                   mainGroupId;


        delete_from assetDeprAccountForJournal
            where assetDeprAccountForJournal.RefRecId == assetInventIssueTrans.RecId;

        if (rassetTableUsed.RecId && assetInventIssueTrans.RecId)
        {
            while select assetDepraccount
                where assetDepraccount.AssetId == rassetTableUsed.AccountNum
            {
                assetDeprAccountForJournal.clear();
                assetDeprAccountForJournal.initFromDeprAccount(assetDepraccount);
                assetDeprAccountForJournal.RefRecId = assetInventIssueTrans.RecId;
                assetDeprAccountForJournal.insert();
            }
        }
        else
        {
            mainGroupId = RAssetGroupDefinitionPeriod::findMainGroupId(assetInventIssueTrans.rAssetInventIssueTable().TransDate,
                                                                       assetInventIssueTrans.ItemId,
                                                                       assetInventIssueTrans.UsingPeriod,
                                                                       assetInventIssueTrans.CostPrice);

            while select assetMainGroupMember
                where assetMainGroupMember.AssetMainGroupId == mainGroupId
            {
                ledgerDimension = RAssetLedgerAccountsByLocation::assetLedgerDimensionFromAssetGroup(assetMainGroupMember.AssetGroup,
                                                                                                     assetInventIssueTrans.Location,
                                                                                                     assetMainGroupMember.AssetStandardId);
                if (!ledgerDimension)
                {
                    ledgerDimension = RAssetLedgerAccounts::assetOffsetLedgerDimensionForGroup(assetMainGroupMember.AssetGroup,
                                                                                               RAssetTransType::Depreciation,
                                                                                               assetMainGroupMember.AssetStandardId,
                                                                                               RAssetStandardTable::find(assetMainGroupMember.AssetStandardId).PostingProfile);
                }

                if (! ledgerDimension || ! assetMainGroupMember.AssetStandardId)
                {
                    continue;
                }

                depreciationBonusLedgerDimension = RAssetLedgerAccountsByLocation::ledgerDimensionForBonusFromAssetGroup(assetMainGroupMember.AssetGroup,
                                                                                                                         assetInventIssueTrans.Location,
                                                                                                                         assetMainGroupMember.AssetStandardId);

                assetDeprAccountForJournal.RefRecId                          = assetInventIssueTrans.RecId;
                assetDeprAccountForJournal.AssetStandardId                   = assetMainGroupMember.AssetStandardId;
                assetDeprAccountForJournal.DepreciationBonusLedgerDimension  = depreciationBonusLedgerDimension;
                assetDeprAccountForJournal.AssetLedgerDimension              = ledgerDimension;
                assetDeprAccountForJournal.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue(RAssetInventIssueTrans _assetInventIssueTrans)
    {
        assetInventIssueTrans = _assetInventIssueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostAmount</Name>
				<Source><![CDATA[
        public InventCostAmount inventCostAmount(RAssetInventIssueTrans _assetInventIssueTrans)
    {
        InventSum                           inventSum;
        InventDimParm                       inventDimParm;
        UnitOfMeasureSymbol                 unitIdInvent, unitIdSecondary;
        InventQty                           inventQty;
        InventCostAmount                    costAmount;
        InventDim                           inventDim = InventDim::find(_assetInventIssueTrans.InventDimId);


        inventDimParm.initFromInventDim(inventDim);
        unitIdInvent            = _assetInventIssueTrans.inventTable().inventTableModuleInvent().UnitId;
        unitIdSecondary         = _assetInventIssueTrans.inventTable().inventUnitId();

        inventSum = InventSum::findSum(_assetInventIssueTrans.ItemId, InventDim::find(_assetInventIssueTrans.InventDimId), inventDimParm);
        inventQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
            _assetInventIssueTrans.ItemId,
            _assetInventIssueTrans.InventDimId,
            inventSum.physicalInventCalculated(),
            unitIdInvent,
            unitIdSecondary, 
            NoYes::No);

        if (inventQty)
        {
            costAmount = PriceDisc::amount2Price(inventSum.PostedValue, 0, 0, inventQty, 0, 0, "", 0);
        }

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        RAssetInventIssueQuotas             assetInventIssueQuotas;
        RAssetParameters                    assetParameters = RAssetParameters::find();
        InventTable                         inventTable;

        if (! assetInventIssueTrans)
        {
            return;
        }

        ttsbegin;
        inventTable = InventTable::find(assetInventIssueTrans.ItemId);

        assetInventIssueTrans.selectForUpdate(true);

        rassetTableUsed = assetInventIssueTrans.rAssetTableUsed();
        if (rassetTableUsed.RecId)
        {
            assetInventIssueTrans.Qty         = 1;
            assetInventIssueTrans.UsingPeriod = assetInventIssueTrans.repeatedIssuedLifeTime();
        }

        if (! assetInventIssueTrans.UsingPeriod && ! rassetTableUsed)
        {
            if (inventTable.AssetGroupId_RU)
            {
                assetMainGroupMember = RAssetMainGroupMember::find(inventTable.AssetGroupId_RU, assetParameters.StandardIdDefault);

                if (! assetMainGroupMember.RecId)
                {
                    throw error(strFmt("@FixedAssets:FA_MessageError_BaseBookShouldBeSpecified",
                                       assetInventIssueTrans.assetMainGroupId(),
                                       assetParameters.StandardIdDefault));
                }

                assetInventIssueTrans.UsingPeriod = RAssetGroup::find(assetMainGroupMember.AssetGroup).Lifetime;
            }
            else
            {
                assetInventIssueQuotas  = RAssetInventIssueQuotas::findQuotas(assetInventIssueTrans.EmployeeTable_RU,
                                                                              assetInventIssueTrans.QuotaTypesRecId,
                                                                              InventTable::find(assetInventIssueTrans.ItemId).itemGroupId(),
                                                                              assetInventIssueTrans.ItemId);

                if (! assetInventIssueQuotas)
                {
                    throw error(strFmt("@GLS113982",
                                       assetInventIssueTrans.ItemId,
                                       assetInventIssueTrans.assetMainGroupId()));
                }

                assetInventIssueTrans.UsingPeriod = assetInventIssueQuotas.UsagePeriod;
            }
        }

        assetInventIssueTrans.CostPrice = this.inventCostAmount(assetInventIssueTrans);
        assetInventIssueTrans.update();

        this.initLedgerAccount();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RAssetDeprAccountForJournalCalc construct()
    {
        return new RAssetDeprAccountForJournalCalc();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>