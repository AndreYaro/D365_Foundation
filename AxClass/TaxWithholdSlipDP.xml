<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdSlipDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdSlipDP</c> class is the report data provider class for the
/// <c>TaxWithholdSlip</c> SQL Server Reporting Services Report.
/// </summary>
[   SRSReportQueryAttribute(queryStr(TaxWithholdSlip)),
    SRSReportParameterAttribute(classStr(TaxWithholdContract))]
public class TaxWithholdSlipDP extends SrsReportDataProviderBase
{
    TaxWithholdSlipTmp taxWithholdSlipTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxWithholdSlipTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the temporary <c>TaxWithholdSlipTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data in the <c>TaxWithholdSlipTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxWithholdSlipTmp))]
    public TaxWithholdSlipTmp getTaxWithholdSlipTmp()
    {
        select taxWithholdSlipTmp;

        return taxWithholdSlipTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    //// <summary>
    /// Processes the SQL Server Reporting Services report business logic
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic.This method will be called by
    /// SSRS at runtime.The method should compute data and populate the data tables that will be returned
    /// to SSRS.
    /// </remarks>
    public void processReport()
    {
        TaxWithholdContract taxWithholdContract = this.parmDataContract() as TaxWithholdContract;
        LedgerJournalAC vendAccount = taxWithholdContract.parmVendAccount();
        TransDate fromDate = taxWithholdContract.parmFromDate();
        TransDate toDate = taxWithholdContract.parmToDate();

        QueryRun queryRun = new QueryRun(this.parmQuery());
        if (vendAccount)
        {
            queryRun.query().dataSourceTable(tablenum(TaxWithholdTrans)).addRange(fieldnum(TaxWithholdTrans, VendAccount)).value(queryValue(vendAccount));
        }

        LedgerJournalId ledgerJournalId = taxWithholdContract.parmledgerJournalId();
        if (ledgerJournalId)
        {
            queryRun.query().dataSourceTable(tablenum(TaxWithholdTrans)).addRange(fieldnum(TaxWithholdTrans, JournalNum)).value(queryValue(ledgerJournalId));
        }
        else
        {
            queryRun.query().dataSourceTable(tablenum(TaxWithholdTrans)).addRange(fieldnum(TaxWithholdTrans, TransDate)).value(queryRange(fromDate, toDate));
        }

        container taxWithholdTransTotalAmounts = TaxWithholdSlipDP::getTaxWithholdTransTotalAmounts(queryRun);

        VendTable vendTable = VendTable::find(vendAccount);
        CompanyInfo companyInfo = CompanyInfo::find();

        taxWithholdSlipTmp.CompanyName = companyInfo.Name;
        taxWithholdSlipTmp.CompanyAddress = companyInfo.postalAddress().Address;
        taxWithholdSlipTmp.VendorName = vendTable.name();
        taxWithholdSlipTmp.CISVerficationNum = vendTable.CISVerificationNum;
        taxWithholdSlipTmp.CISUniqueTaxPayerRef  = vendTable.CISUniqueTaxPayerRef;
        taxWithholdSlipTmp.CISStatus = vendTable.CISStatus;

        taxWithholdSlipTmp.GrossAmount = conPeek(taxWithholdTransTotalAmounts, 3);
        taxWithholdSlipTmp.CostOfMaterial = conPeek(taxWithholdTransTotalAmounts, 2);
        taxWithholdSlipTmp.AmountLiableDeduction = taxWithholdSlipTmp.GrossAmount - taxWithholdSlipTmp.CostOfMaterial;
        taxWithholdSlipTmp.AmountDeducted = conPeek(taxWithholdTransTotalAmounts, 1);
        taxWithholdSlipTmp.AmountPayable = taxWithholdSlipTmp.GrossAmount - taxWithholdSlipTmp.AmountDeducted;
        taxWithholdSlipTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdTransTotalAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums up values for <c>AmountDeducted</c>, <c>CostOfMaterial</c> and <c>GrossAmount</c> fields of temporary report table.
    /// </summary>
    /// <param name = "_queryRun">Query that is used to fetch records for calculation.</param>
    /// <returns>
    /// Container with <c>AmountDeducted</c>, <c>CostOfMaterial</c> and <c>GrossAmount</c> values.
    /// </returns>
    public static container getTaxWithholdTransTotalAmounts(QueryRun _queryRun)
    {
        VendTrans vendTrans;
        InvoiceId lastInvoiceId;
        VendInvoiceJour vendinvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;
        VendTransOpen vendTransOpen;
        TaxWithholdTrans taxWithholdTrans;
        TaxWithholdAmountCur taxWithHoldAmountTotal;
        AmountMST invoiceBaseAmountTotal;
        AmountMST costOfMaterial;
        AmountCur retainageAmount;
        int lastSign;

        if (TaxWithholdSlipDPgetTaxWithholdTransTotalAmountsV2Flight::instance().isEnabled())
        {
            return TaxWithholdSlipDP::getTaxWithholdTransTotalAmountsV2(_queryRun);
        }

        while (_queryRun.next())
        {
            taxWithholdTrans = _queryRun.get(tablenum(TaxWithholdTrans));

            int sign = sign(taxWithholdTrans.InvoiceAmount);

            if (taxWithholdTrans.Invoice != lastInvoiceId || lastSign != sign)
            {
                vendTrans = vendTrans::find(taxWithholdTrans.VendTransInvoiceId);
                vendInvoiceJour = VendInvoiceJour::findFromVendTrans(vendTrans.Invoice, vendTrans.TransDate, vendTrans.AccountNum);

                select sum(PossibleCashDisc) from vendTransOpen
                    where vendTransOpen.RefRecId == vendTrans.RecId;

                AmountMST vendInvoiceTransBaseAmountTotal;
                while select vendInvoiceTrans
                    where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId
                        && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                        && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                        && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                        && vendInvoiceTrans.InternalInvoiceId == vendinvoiceJour.InternalInvoiceId
                {
                    if (vendInvoiceTrans.TaxWithholdGroup_TH == ''
                        || vendInvoiceTrans.TaxWithholdItemGroupHeading_TH == 0)
                    {
                        costOfMaterial += sign * vendinvoiceJour.amountMST(vendInvoiceTrans.lineAmountExclTax() - vendInvoiceTrans.PSARetainageAmount);
                    }

                    vendInvoiceTransBaseAmountTotal += vendInvoiceTrans.grossAmountMST();

                    retainageAmount += sign * vendInvoiceTrans.PSARetainageAmount;
                }

                invoiceBaseAmountTotal += sign * abs(vendInvoiceTransBaseAmountTotal);

                invoiceBaseAmountTotal -= sign * vendinvoiceJour.amountMST(retainageAmount);

                invoiceBaseAmountTotal -= sign * vendinvoiceJour.amountMST(vendinvoiceJour.SumLineDisc);

                invoiceBaseAmountTotal -= sign * abs(vendTransOpen.PossibleCashDisc);
            }

            costOfMaterial += taxWithholdTrans.InvoiceBaseAmount - taxWithholdTrans.WithholdBaseAmount;

            lastInvoiceId = taxWithholdTrans.Invoice;

            taxWithHoldAmountTotal += taxWithholdTrans.TaxTaxWithholdAmount;

            retainageAmount = 0;

            lastSign = sign;
        }

        return [taxWithHoldAmountTotal, costOfMaterial, invoiceBaseAmountTotal];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdTransTotalAmountsV2</Name>
				<Source><![CDATA[
    private static container getTaxWithholdTransTotalAmountsV2(QueryRun _queryRun)
    {
        TaxWithholdAmountCur taxWithHoldAmountTotal;
        TaxWithholdBase taxWithholdBaseTotal;
        AmountMST paymentAmountTotal;

        findOrCreateRange_W(
            _queryRun.query().dataSourceTable(tableNum(TaxWithholdTrans)),
            fieldNum(TaxWithholdTrans, Posted),
            queryValue(NoYes::Yes));

        QueryBuildDataSource vendTableQbds = _queryRun.query().dataSourceTable(tableNum(TaxWithholdTrans)).addDataSource(tableNum(VendTable));
        vendTableQbds.addLink(fieldNum(TaxWithholdTrans, VendAccount), fieldNum(VendTable, AccountNum));
        vendTableQbds.joinMode(JoinMode::ExistsJoin);
        vendTableQbds.addRange(fieldNum(VendTable, CISStatus)).value(SysQuery::valueNot(VendCISStatus::None));

        Query vendSettlementQuery = new Query();
        QueryBuildDataSource vendSettlementQbds = vendSettlementQuery.addDataSource(tableNum(VendSettlement));
        QueryBuildRange transDateQbr = _queryRun.query().dataSourceTable(tableNum(TaxWithholdTrans)).findRange(fieldNum(TaxWithholdTrans, TransDate));
        if (transDateQbr)
        {
            vendSettlementQbds.addRange(fieldNum(VendSettlement, TransDate)).value(transDateQbr.value());
        }
        vendSettlementQbds.addSelectionField(fieldNum(VendSettlement, SettleAmountMST), SelectionField::Sum);
        vendSettlementQbds.addSelectionField(fieldNum(VendSettlement, UtilizedCashDisc), SelectionField::Sum);
        QueryRun vendSettlementQueryRun = new QueryRun(vendSettlementQuery);
        QueryBuildRange vendSettlementQbr = vendSettlementQueryRun.query().dataSourceTable(tableNum(VendSettlement))
            .addRange(fieldNum(VendSettlement, TransRecId));

        QueryBuildDataSource taxWithholdTransQbds = _queryRun.query().dataSourceTable(tableNum(TaxWithholdTrans));
        taxWithholdTransQbds.addGroupByField(fieldNum(TaxWithholdTrans, VendTransInvoiceId));
        taxWithholdTransQbds.addSelectionField(fieldNum(TaxWithholdTrans, TaxTaxWithholdAmount), SelectionField::Sum);
        taxWithholdTransQbds.addSelectionField(fieldNum(TaxWithholdTrans, WithholdBaseAmount), SelectionField::Sum);

        while (_queryRun.next())
        {
            TaxWithholdTrans taxWithholdTrans = _queryRun.get(tableNum(TaxWithholdTrans));
            taxWithHoldAmountTotal += taxWithholdTrans.TaxTaxWithholdAmount;
            taxWithholdBaseTotal += taxWithholdTrans.WithholdBaseAmount;

            vendSettlementQbr.value(queryValue(taxWithholdTrans.VendTransInvoiceId));
            vendSettlementQueryRun.reset();

            if (!vendSettlementQueryRun.next())
            {
                continue;
            }

            VendSettlement vendSettlement = vendSettlementQueryRun.get(tableNum(VendSettlement));
            paymentAmountTotal += -vendSettlement.SettleAmountMST + vendSettlement.UtilizedCashDisc;

            VendTrans vendTrans = VendTrans::find(taxWithholdTrans.VendTransInvoiceId);
            Factor ratio = vendTrans.AmountMST ? vendSettlement.SettleAmountMST / vendTrans.AmountMST : 1;

            if (ratio)
            {
                TaxTrans taxTrans;
                select sum(TaxAmount) from taxTrans
                    where taxTrans.TransDate == vendTrans.TransDate
                        && taxTrans.Voucher == vendTrans.Voucher;

                paymentAmountTotal -= CurrencyExchangeHelper::amount(taxTrans.TaxAmount * ratio);
            }
        }

        AmountMST costOfMaterial = paymentAmountTotal - taxWithholdBaseTotal;

        return [taxWithHoldAmountTotal, costOfMaterial, paymentAmountTotal];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>