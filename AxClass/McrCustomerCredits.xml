<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrCustomerCredits</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRCustomerCredits</c> controls all logic
/// to create and post post shipment credits.
/// </summary>
abstract class McrCustomerCredits
{
    MCRCustCreditTable      mcrCustCreditTable;
    LedgerJournalTable      ledgerJournalTable;
    LedgerJournalTrans      ledgerJournalTrans;
    MCRCustPaymTable        mcrCustPaymTable;

    MCRLedgerJournal        mcrLedgerJournal;
    DimensionDefault        callCenterDefaultDimension;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePriceMatchAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the credit amount the price match will give the customer.
    /// </summary>
    /// <param name="_newPrice">
    ///     The new price to be used in calculation of the price match amount.
    /// </param>
    /// <param name="_oldQty">
    ///     The quantity used in the original sales order; optional.
    /// </param>
    /// <param name="_salesLine">
    ///     The sales order line for which this method calculates the price match amount; optional.
    /// </param>
    /// <returns>
    ///     The credit amount that price match will give to the customer.
    /// </returns>
    /// <remarks>
    ///     Equation = (Old price - New price) * (Invoiced qty - Sales qty returned).
    /// </remarks>
    AmountCur calculatePriceMatchAmount(AmountCur _newPrice, real _oldQty = 0, SalesLine _salesLine = null)
    {
        AmountCur           remainingInv;
        AmountCur           priceDiff;
        AmountCur           retAmount = -1;
        AmountCur           oldPrice;
        SalesTable          salesTable;
        SalesLine           salesLine;
        SalesInvoicedQty    invoicedQty;

        if (!_salesLine)
        {
            salesLine = SalesLine::findInventTransId(mcrCustCreditTable.InventTransID, false);
        }
        else
        {
            salesLine = _salesLine;
        }
        salesTable = SalesTable::find(salesLine.SalesId);

        // Calculate the price for one unit, include discount amount.
        oldPrice = (salesLine.LineAmount / salesLine.SalesQty) * ((100 - salesTable.DiscPercent)/100);

        if (oldPrice > _newPrice && _newPrice > 0)
        {
            invoicedQty = this.displayInvoicedQty();
            // Need to convert disc percent to a percent, then take it off the line difference
            priceDiff = (oldPrice - _newPrice);

            // If true means that this credit was created by the user from the form.
            if (invoicedQty == _oldQty)
            {
                //  Determine how many items this price match can apply to
                //  Do not want to include the quantity that has been returned
                remainingInv = invoicedQty - salesLine.mcrGetReturnedQty();
            }
            else
            {
                //  Determine how many items this price match can apply to
                //  Don't care about the returned qty because you can only invoice
                //      what is remaining.  Form level validation does not allow
                //      invoicing returned lines.
                remainingInv = invoicedQty - _oldQty;
            }
            //  Multiply the difference between old and new by the remaining
            //      quantity
            retAmount = priceDiff * remainingInv;
        }
        else
        {
            error("@MCR25898");
        }

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCreditedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the amount that has already been credited
    /// to the related sales line.
    /// </summary>
    /// <returns>
    /// The amount that has been credited to the related sales line.
    /// </returns>
    public  SalesInvoicedQty displayCreditedQty()
    {
        MCRCustCreditTable   custCredit;

        select sum(CreditQty) from custCredit
            where custCredit.InventTransID == mcrCustCreditTable.InventTransID;

        return custCredit.CreditQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoicedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the invoiced quantity for this line.
    /// </summary>
    /// <returns>
    ///     The quantity that has been invoiced for the sales order line.
    /// </returns>
    public  SalesInvoicedQty displayInvoicedQty()
    {
        SalesLine           salesLine;
        SalesInvoicedQty    invoicedQty;

        salesLine = SalesLine::findInventTransId(mcrCustCreditTable.InventTransID);

        invoicedQty = salesLine.invoicedInTotal();

        return invoicedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMultipleCredits</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Credits multiple credits.
    /// </summary>
    abstract void insertMultipleCredits()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>MCRCustomerCredits</c> class.
    /// </summary>
    /// <param name="_mcrCustCreditTable">
    ///     The <c>MCRCustCreditTable</c> record to populate the class variable; optional.
    /// </param>
    /// <remarks>
    ///     Sets the class variable, MCRCustCreditTable,
    ///     which is the customer credit record used.
    ///     to store all the required posting information.
    /// </remarks>
    void new(MCRCustCreditTable _mcrCustCreditTable = null)
    {
        mcrCustCreditTable.data(_mcrCustCreditTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calls the methods that post to the <c>LedgerJouranlTable</c> and trans.
    /// </summary>
    /// <returns>
    ///     The <c>LedgerJournalTrans</c> record for which this method posts.
    /// </returns>
    /// <remarks>
    ///     If the posting is blank, then it fails.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///     Error describing validation failure.
    /// </exception>
    LedgerJournalTrans post()
    {
        ttsbegin;
        if (this.postToLedgerJournalTable())
        {
            this.postToLedgerJournalTrans();
            ledgerJournalTrans.reread();

            // This needs to be done here, because the extended classes
            //  use the MCRCustCreditTable variable
            mcrCustCreditTable.Voucher      = ledgerJournalTrans.Voucher;
            mcrCustCreditTable.JournalNum   = ledgerJournalTrans.JournalNum;
            if (mcrCustCreditTable.validateWrite())
            {
                mcrCustCreditTable.selectForUpdate(true);
                mcrCustCreditTable.update();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        ttscommit;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the credit to the ledger journal table, using the journal
    ///     name from order parameters.
    /// </summary>
    /// <returns>
    ///     true if the journal post was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     This method must be called before postToLedgerJournalTrans.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///     Error describing the nature of the problem.
    /// </exception>
    protected boolean postToLedgerJournalTable()
    {
        JournalNameId       journalName =  MCROrderParameters::find().OrderCreditJournalName;
        DimensionDefault    dfltDim;
        if (journalName)
        {
            mcrLedgerJournal = MCRLedgerJournal::construct(LedgerJournalType::CustPayment, journalName);
            dfltDim = LedgerJournalTable::find(journalName).DefaultDimension;
            
            SalesTable salesTable = SalesTable::find(mcrCustCreditTable.OrigSalesID);
            if (salesTable.RecId && salesTable.RetailChannelTable)
            {
                callCenterDefaultDimension = RetailChannelTable::findByRecId(salesTable.RetailChannelTable).DefaultDimension;
                dfltDim = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(dfltDim, callCenterDefaultDimension);
            }

            mcrLedgerJournal.parmDefaultDimension(dfltDim);
            if (mcrCustCreditTable.OrderCurrency)
            {
                mcrLedgerJournal.parmCurrencyCode(mcrCustCreditTable.OrderCurrency);
                mcrLedgerJournal.parmExchRate(ExchangeRateHelper::exchRate(mcrCustCreditTable.OrderCurrency, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
            }

            ledgerJournalTable = mcrLedgerJournal.createLedgerJournalTable();
        }
        else
        {
            throw error("@MCR30863");
        }

        if (ledgerJournalTable)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the <c>LedgerJouranlTrans</c> records.
    /// </summary>
    protected void postToLedgerJournalTrans()
    {
        if (ledgerJournalTable)
        {
            mcrLedgerJournal.parmAccountNum(mcrCustCreditTable.CustAccount);
            mcrLedgerJournal.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            mcrLedgerJournal.parmTransTxt(strFmt("@MCR:CustomerCredit", mcrCustCreditTable.OrigSalesID));
            mcrLedgerJournal.parmMCRRefPaymID(mcrCustPaymTable.RecId);
            
            if (RetailPaymentsAutoSettleOrderCreditOpenTransactionsFlight::instance().isEnabled())
            {
                mcrLedgerJournal.parmMCRPaymOrderID(mcrCustCreditTable.OrigSalesID);
            }
            else
            {
                mcrLedgerJournal.parmMCRPaymOrderID(mcrCustCreditTable.CreditID);
            }
            
            mcrLedgerJournal.parmLedgerOffsetAccountType(ledgerJournalTable.OffsetAccountType);

            // Create the ledger offset account based on the default value from journal name plus the call center default financial dimension.
            DimensionDynamicAccount ledgerOffsetAccount = MCRAssistantLedgerDimension::mergeAccountAndDimension(
                LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(ledgerJournalTable.OffsetLedgerDimension));
            if (mcrLedgerJournal.parmLedgerOffsetAccountType() == LedgerJournalACType::Ledger)
            {
                ledgerOffsetAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerOffsetAccount, callCenterDefaultDimension);
            }

            mcrLedgerJournal.parmledgerOffsetAccount(ledgerOffsetAccount);
            mcrLedgerJournal.parmPaymentStatus(CustVendPaymStatus::Confirmed);
            ledgerJournalTrans = mcrLedgerJournal.createLedgerJournalTrans(mcrCustCreditTable.TotalCredit, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreditHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether or not a credit can be applied
    ///     to this sales order.  Returns true if atleast one
    ///     of the lines has been invoiced.
    /// </summary>
    /// <param name="_salesTable">
    ///     The sales order record for wich this method checks if credit headers can be created.
    /// </param>
    /// <returns>
    ///     true if the header cread can be created; otherwise, false.
    /// </returns>
    public static boolean canCreditHeader(SalesTable _salesTable)
    {
        SalesLine           salesLine;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        if (!_salesTable.ProjId)
        {
            select firstonly RecId from salesLine
                    where salesLine.SalesId == _salesTable.SalesId
                exists join InventTransId, RecId
                    from  inventTransOrigin
                    where inventTransOrigin.InventTransId  == salesLine.InventTransId
                exists join InventTransOrigin, StatusIssue
                    from  inventTrans
                    where inventTrans.InventTransOrigin    == inventTransOrigin.RecId
                    &&    inventTrans.StatusIssue          == StatusIssue::Sold
                    &&    inventTrans.StatusReceipt        == StatusReceipt::None;

            //  Do not allow customer credit creation (line or header)
            //      if the order is not partially invoiced
            if (salesLine.RecId)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPriceMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether or not the passed sales line
    ///     can be price matched.
    /// </summary>
    /// <param name="_salesLine">
    ///     The sales order line being check for price match options.
    /// </param>
    /// <returns>
    ///     true if the sales order line can be price matched; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Returns true if it has
    ///     been invoiced (or partially).
    /// </remarks>
    public static boolean canPriceMatch(SalesLine _salesLine)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        if (_salesLine && !SalesTable::find(_salesLine.SalesId).ProjId)
        {
            if (!MCRCustCreditTable::findByInventTransID(_salesLine.InventTransId))
            {
                //  If this order has been invoiced (or partially) allow a price match
                select firstonly RecId from inventTrans
                    exists join  RecId, InventTransId
                    from  inventTransOrigin
                        where inventTrans.InventTransOrigin    == inventTransOrigin.RecId
                        &&    inventTransOrigin.InventTransId  == _salesLine.InventTransId
                        &&    inventTrans.StatusIssue          == StatusIssue::Sold
                        &&    inventTrans.StatusReceipt        == StatusReceipt::None;

                if (inventTrans)
                {
                    // If the quantity ordered is equal to the quantity returned do not allow
                    //      price match.
                    // Considered not allowing if the quantity invoiced is equal
                    //      to the quantity returned, but we want to be able to price match for the
                    //      remaining quantity.
                    if (_salesLine.mcrGetReturnedQty() < _salesLine.SalesQty)
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a new class object based on the
    ///     credit type of the passed record.
    /// </summary>
    /// <param name="_mcrCustCreditTable">
    ///     The <c>MCRCustCreditTable</c> record used in instantiation of this class.
    /// </param>
    /// <returns>
    ///     The newly instantiated class.
    /// </returns>
    public static MCRCustomerCredits construct(MCRCustCreditTable _mcrCustCreditTable)
    {
        MCRCustomerCredits mcrCustomerCredits;

        switch (_mcrCustCreditTable.CreditType)
        {
            case MCRCustPaymType::CreditCard:
                mcrCustomerCredits = new MCRCustomerCredits_CreditCard(_mcrCustCreditTable);
                break;
            case MCRCustPaymType::OnAccount:
            case MCRCustPaymType::Cash:
            case MCRCustPaymType::Check:
            case MCRCustPaymType::GiftCard:
                mcrCustomerCredits = new MCRCustomerCredits_OnAccount(_mcrCustCreditTable);
                break;
            default:
                mcrCustomerCredits = new MCRCustomerCredits_OnAccount(_mcrCustCreditTable);
                break;
        }

        return mcrCustomerCredits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInvoicedTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines how much of the sales order was
    ///     paid.
    /// </summary>
    /// <param name="_salesId">
    ///     The sales order ID for which this method determines total amount paid.
    /// </param>
    /// <returns>
    ///     The amount paid on the sales order passed in.
    /// </returns>
    public static AmountCur determineInvoicedTotal(SalesId _salesId)
    {
        CustInvoiceJour custInvoiceJour;

        if (_salesId)
        {
            select sum(InvoiceAmount) from custInvoiceJour
                where custInvoiceJour.SalesId == _salesId;
        }
        return custInvoiceJour.InvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTotalCreditApplied</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the total credit that has been created for the
    ///     passed sales order.
    /// </summary>
    /// <param name="_salesId">
    ///     The sales order ID for which this method determines the total credit applied.
    /// </param>
    /// <returns>
    ///     The amount applied as credits for the passed in sales order.
    /// </returns>
    public static AmountCur determineTotalCreditApplied(SalesId _salesId)
    {
        MCRCustCreditTable mcrCustCreditTable;

        if (_salesId)
        {
            select sum (TotalCredit) from mcrCustCreditTable
                where mcrCustCreditTable.OrigSalesID == _salesId;
        }
        return mcrCustCreditTable.TotalCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTotalCreditAmt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the credit amount is valid.
    /// </summary>
    /// <param name="_mcrCustCreditTable">
    ///     The <c>MCRCustCreditTable</c> record for which credit amound is validated.
    /// </param>
    /// <returns>
    ///     true if the credit amount is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     It is valid if the amount does not exceed
    ///     the parameter and does not exceed
    ///     the total posted amount.
    /// </remarks>
    public static boolean validateTotalCreditAmt(MCRCustCreditTable _mcrCustCreditTable)
    {
        MCROrderParameters  mcrOrderParameters;
        boolean             retVal = true;
        AmountCur           totalPaid;
        AmountCur           creditApplied;
        AmountCur           convertedParam;
        boolean             useParam = false;

        //  Credits resulting in the credit creation process will have
        //  an origSalesID, those created by applying customer transaction credits
        //  do not.  These credits are not subject to the parameter.
        if (_mcrCustCreditTable.OrigSalesID
            && _mcrCustCreditTable.CustAccount)
        {
            mcrOrderParameters = MCROrderParameters::find();

            totalPaid = MCRCustomerCredits::determineInvoicedTotal(_mcrCustCreditTable.OrigSalesID);

            if (mcrOrderParameters.MaxCustCreditAmount > 0)
            {
                convertedParam = CurrencyExchangeHelper::curAmount2CurAmount(mcrOrderParameters.MaxCustCreditAmount, Ledger::accountingCurrency(CompanyInfo::current()), _mcrCustCreditTable.OrderCurrency);

                // Want to display the smallest credit that is allowed.
                if (convertedParam < totalPaid)
                {
                    useParam = true;
                }
            }

            creditApplied = MCRCustomerCredits::determineTotalCreditApplied(_mcrCustCreditTable.OrigSalesID);
            // If the record has already been saved, it is included in creditApplied
            // Need to remove it to check how much credit has been applied to the order.
            if (_mcrCustCreditTable.RecId)
            {
                creditApplied -= _mcrCustCreditTable.TotalCredit;
            }

            if (!useParam
                    && _mcrCustCreditTable.TotalCredit > (totalPaid - creditApplied))
            {
                error(strFmt("@MCR25899", (totalPaid - creditApplied)));
                retVal = false;
            }
            else if (useParam
                        && _mcrCustCreditTable.TotalCredit  > (convertedParam - creditApplied))
            {
                error(strFmt("@MCR25899", convertedParam - creditApplied));
                retVal = false;
            }
        }
        else
        {
            throw error("@MCR40068");
        }
        return retVal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>