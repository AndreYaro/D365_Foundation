<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffAccountJournalProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>SettlementWriteOffAccountJournalProcessor</c> class generates payment journal data based on customer or vendor accounts.
/// Both journal headers and lines are created. The new journal is optionally posted.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.SettlementWriteOffJournalProcessor)),
    ExportMetadata(enumStr(SettlementWriteOffOrigin), enumLiteralStr(SettlementWriteOffOrigin, Account))]
internal final class SettlementWriteOffAccountJournalProcessor extends SettlementWriteOffJournalProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findOrCreateJournalHeader</Name>
				<Source><![CDATA[
    internal protected LedgerJournalId findOrCreateJournalHeader()
    {
        LedgerJournalTable ledgerJournalTable = this.createJournalHeader();

        return ledgerJournalTable.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    private LedgerJournalTable createJournalHeader()
    {
        ttsbegin;

        LedgerJournalTable ledgerJournalTable;
        ledgerJournalTable.initFromLedgerJournalName(defaults.getJournalName());
        ledgerJournalTable.Name = strFmt("@CashManagement:SettlementWriteOffJournalDescription", journalContract.parmOriginCustVendAccount());
        ledgerJournalTable.insert();

        ttscommit;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeJournal</Name>
				<Source><![CDATA[
    internal protected void finalizeJournal(LedgerJournalId _journalNum)
    {
        if (journalContract.shouldTransferTotalAdjustmentBalancetoTransferAccount())
        {
            journalLineProcessor.createTransferLineForAccount(journalContract, _journalNum, settlementWriteOffAdjustment.getTotalAdjustmentAmount(), curExt());
        }

        info(strFmt("@CashManagement:SettlementWriteOffJournalCreated", 
            _journalNum,
            defaults.getModuleLabel(),
            journalContract.parmOriginCustVendAccount()));

        if (journalContract.parmShouldPostCreatedJournal())
        {
            this.postJournal(_journalNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    private void postJournal(LedgerJournalId _journalNum)
    {
        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(_journalNum);

        if (ledgerJournalTable)
        {
            Args args = new Args();
            args.record(ledgerJournalTable);

            defaults.getPostingMenuFunction().run(args);

            info(strFmt("@CashManagement:SettlementWriteOffJournalPosted",
                _journalNum,
                defaults.getModuleLabel(),
                journalContract.parmOriginCustVendAccount()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new ()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>