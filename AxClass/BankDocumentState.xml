<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentState</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankDocumentState</c> is bank document state.
/// </summary>
public abstract class BankDocumentState
{
    BankDocument                    bankDocument;

    BankDocumentStatusChangeType    bankDocumentStatusChangeType;
    BankDocumentStatus              targetBankDocumentStatus;

    boolean                         transitionSucceeded;
    boolean                         isSubscribed;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canTransition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether the transition is valid.
    /// </summary>
    /// <returns>
    ///     True if the transition is valid; otherwise false.
    /// </returns>
    protected abstract boolean canTransition()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStatusError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws error of changing status.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Error of changing bank document status.
    /// </exception>
    protected void changeStatusError()
    {
        throw error("@GLS221622");
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTransition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the transition physically.
    /// </summary>
    /// <returns>
    ///     Ture if the tarnstion succeeds; othersie false.
    /// </returns>
    protected boolean doTransition()
    {
        this.updateBankDocumentStatus();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets bank document status.
    /// </summary>
    /// <returns>
    /// The bank document status.
    /// </returns>
    public abstract BankDocumentStatus getBankDocumentStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetBankDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets target bank document status.
    /// </summary>
    /// <returns>
    /// The target bank document status.
    /// </returns>
    public BankDocumentStatus getTargetBankDocumentStatus()
    {
        return targetBankDocumentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTransition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs initialization of transition.
    /// </summary>
    protected void initializeTransition()
    {
        if (!isSubscribed)
        {
            this.subscribe();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRemovable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the bank document can be removed.
    /// </summary>
    /// <returns>
    /// Whether the bank document can be removed.
    /// </returns>
    public boolean isRemovable()
    {
        boolean result = true;

        if (bankDocument.getIsMatched())
        {
            result = checkFailed("@GLS222009");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankDocument</Name>
				<Source><![CDATA[
        public BankDocument parmBankDocument(BankDocument _bankDocument = bankDocument)
    {
        bankDocument = _bankDocument;
        return bankDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankDocumentStatusChangeType</Name>
				<Source><![CDATA[
        public BankDocumentStatusChangeType parmBankDocumentStatusChangeType(BankDocumentStatusChangeType _bankDocumentStatusChangeType = bankDocumentStatusChangeType)
    {
        if (!prmisDefault(_bankDocumentStatusChangeType))
        {
            bankDocumentStatusChangeType = _bankDocumentStatusChangeType;
            this.setTargetBankDocStatusFromChangeType();
        }

        return bankDocumentStatusChangeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTargetBankDocStatusFromChangeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the target status according to change type.
    /// </summary>
    protected abstract void setTargetBankDocStatusFromChangeType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Subscribes the status change events.
    /// </summary>
    protected void subscribe()
    {
        BankDocumentIStateChangeEventHandler stateChangEventHandler;

        if (bankDocument is BankDocumentIStateChangeEventHandler)
        {
            stateChangEventHandler = bankDocument as BankDocumentIStateChangeEventHandler;
            this.transitionedEventHandler += eventhandler(stateChangEventHandler.bankDocumentStateChanged);
            isSubscribed = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the transition.
    /// </summary>
    /// <returns>
    ///     True if the transiion scucceeds; otherwise false.
    /// </returns>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    ///     Exception of not recovered update conflicts.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    ///     Exception of update conflicts.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     Exception of tarnsition error.
    /// </exception>
    protected boolean transition()
    {
        #OCCRetryCount

        boolean success;

        if (this.validateTransition())
        {
            try
            {
                if (this.transitionRequired())
                {
                    ttsbegin;
                    this.transitioningEventHandler(this);
                    success = this.doTransition();
                    this.transitionedEventHandler(this);
                    ttscommit;
                }
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
        else
        {
            this.changeStatusError();
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitionedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Events of transition completed.
    /// </summary>
    /// <param name="_bankDocumentState">
    ///     The bank document state which performs transition.
    /// </param>
    delegate void transitionedEventHandler(BankDocumentState _bankDocumentState)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitionedState</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the status after transitioned.
    /// </summary>
    /// <returns>
    ///     The status after transitioned.
    /// </returns>
    protected BankDocumentStatus transitionedState()
    {
        return targetBankDocumentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitioningEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Events before transition.
    /// </summary>
    /// <param name="_bankDocumentState">
    ///     The bank document state which performs transition.
    /// </param>
    delegate void transitioningEventHandler(BankDocumentState _bankDocumentState)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitionRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether transition is required.
    /// </summary>
    /// <returns>
    ///     True if transtion is required; otherwise false.
    /// </returns>
    protected boolean transitionRequired()
    {
        boolean isRequired;

        if (targetBankDocumentStatus != this.getBankDocumentStatus())
        {
            isRequired = true;
        }

        return isRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitionTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Invokes the transition.
    /// </summary>
    /// <returns>
    ///     The transitioned status.
    /// </returns>
    public BankDocumentStatus transitionTo()
    {
        this.initializeTransition();

        transitionSucceeded = this.transition();

        return this.transitionedState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the bank document status.
    /// </summary>
    private void updateBankDocumentStatus()
    {
        BankDocumentTable bankDocumentTable;

        bankDocumentTable = bankDocument.getBankDocumentTable();
        bankDocumentTable.selectForUpdate(true);

        bankDocumentTable.setBankDocumentStatus(targetBankDocumentStatus);
        bankDocumentTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the transition.
    /// </summary>
    /// <returns>
    ///     True if the tarnsition is valid; otherwise false.
    /// </returns>
    protected boolean validateTransition()
    {
        boolean isValid;

        isValid = this.canTransition();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates bank document state instance from a bank document.
    /// </summary>
    /// <param name="_bankDocument">
    /// A bank document.
    /// </param>
    /// <returns>
    /// The bank document state instance.
    /// </returns>
    public static BankDocumentState newFromBankDocument(BankDocument _bankDocument)
    {
        BankDocumentState   bankDocumentState;
        BankDocumentTable   bankDocumentTable;

        bankDocumentTable = _bankDocument.getBankDocumentTable();

        bankDocumentState = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(BankDocumentState),
            new BankDocumentStateAttribute(bankDocumentTable.BankDocumentBookType, bankDocumentTable.getBankDocumentStatus()));

        bankDocumentState.parmBankDocument(_bankDocument);

        return bankDocumentState;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>