<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalData_BOMReq_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventJournalData_BOMReq_RU extends InventJournalData_RU
{
    #InventJournalReport_BOMReq_RU
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFromBOMJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates xml document which holds report data
    /// </summary>
    /// <param name="_reportId">
    /// InventJournalReportId to be printed
    /// </param>
    /// <param name="_journalId">
    /// Journal id to be printed
    /// </param>
    /// <param name="_transDate">
    /// Report date
    /// </param>
    /// <param name="_offsessionId">
    /// officials session id
    /// </param>
    /// <param name="_analysisCode">
    /// Dimension Code, which was set in parameters as analysis code
    /// </param>
    /// <returns>
    /// xmlDocument which contains report data
    /// </returns>
    /// <remarks>
    /// Method called when printing inventJournalTable of BOM Type
    /// </remarks>
    private XmlDocument createFromBOMJournal(InventJournalReportId_RU  _reportId,
                                             JournalId                 _journalId,
                                             TransDate                 _transDate,
                                             OffSessionId_RU           _offsessionId,
                                             RefRecId                  _analysisCode)
    {
        InventJournalTrans inventJournalTrans;
        InventLocation     inventLocation;
        Set                locationNameSet  = new Set(Types::String),
                           activityTypeSet  = new Set(Types::String),
                           toMainAccountSet = new Set(Types::String),
                           toDimensionSet   = new Set(Types::String);

        this.initPrologSection(_reportId, _transDate);

        while select inventJournalTrans
            where inventJournalTrans.JournalId   == _journalId              &&
                  inventJournalTrans.TransDate   == _transDate              &&
                  inventJournalTrans.JournalType == InventJournalType::BOM  &&
                  inventJournalTrans.bomLine     == NoYes::Yes
        {
            inventLocation = InventLocation::find(InventDim::find(inventJournalTrans.InventDimId).InventLocationId);
            this.setAddLocation(inventLocation,
                                locationNameSet,
                                activityTypeSet);

            container toMainAccountAndDim = this.getToMainAccountAndDim(inventJournalTrans, _analysisCode);
            this.setAdd(toMainAccountSet, conPeek(toMainAccountAndDim, 1));
            this.setAdd(toDimensionSet,   conPeek(toMainAccountAndDim, 2));

            this.initInventTableSection(inventJournalTrans, _analysisCode);
        }

        select firstonly ItemId, InventDimId from inventJournalTrans
            where inventJournalTrans.JournalId   == _journalId              &&
                  inventJournalTrans.TransDate   == _transDate              &&
                  inventJournalTrans.JournalType == InventJournalType::BOM  &&
                  inventJournalTrans.bomLine     == NoYes::No;

        inventLocation = InventLocation::find(InventDim::find(inventJournalTrans.InventDimId).InventLocationId);

        this.initBOMSection(_transDate,
                            this.setGet(locationNameSet),
                            this.setGet(activityTypeSet),
                            inventLocation.Name,
                            inventLocation.ActivityType_RU,
                            this.setGet(toMainAccountSet),
                            this.setGet(toDimensionSet),
                            InventTableModule::find(inventJournalTrans.ItemId, ModuleInventPurchSales::Invent).UnitId);

        this.initOfficialsSection(_offsessionId);

        return xmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromInventJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates XML Document which holds report data
    /// </summary>
    /// <param name="_reportId">
    /// InventJournalReportId to be printed
    /// </param>
    /// <param name="_journalId">
    /// Journal id to be printed
    /// </param>
    /// <param name="_transDate">
    /// Report date
    /// </param>
    /// <param name="_offsessionId">
    /// officials session id
    /// </param>
    /// <param name="_analysisCode">
    /// Dimension Code, which was set in parameters as analysis code
    /// </param>
    /// <returns>
    /// xmlDocument which contains report data
    /// </returns>
    private XmlDocument createFromInventJournal(InventJournalReportId_RU  _reportId,
                                                JournalId                 _journalId,
                                                TransDate                 _transDate,
                                                OffSessionId_RU           _offsessionId,
                                                RefRecId                  _analysisCode)
    {
        InventJournalTrans inventJournalTrans;
        Set                toLocationNameSet   = new Set(Types::String),
                           toActivityTypeSet   = new Set(Types::String),
                           fromLocationNameSet = new Set(Types::String),
                           fromActivityTypeSet = new Set(Types::String),
                           toMainAccountSet    = new Set(Types::String),
                           toDimensionSet      = new Set(Types::String);

        this.initPrologSection(_reportId, _transDate);

        while select inventJournalTrans
            where inventJournalTrans.JournalId   == _journalId              &&
                  inventJournalTrans.TransDate   == _transDate              &&
                  inventJournalTrans.JournalType != InventJournalType::BOM  &&
                  inventJournalTrans.Qty         <  0
        {
            this.setAddLocation(InventLocation::find(InventDim::find(inventJournalTrans.InventDimId).InventLocationId),
                                fromLocationNameSet,
                                fromActivityTypeSet);

            this.setAddLocation(InventLocation::find(InventDim::find(inventJournalTrans.ToInventDimId).InventLocationId),
                                toLocationNameSet,
                                toActivityTypeSet);

            container toMainAccountAndDim = this.getToMainAccountAndDim(inventJournalTrans, _analysisCode);
            this.setAdd(toMainAccountSet, conPeek(toMainAccountAndDim, 1));
            this.setAdd(toDimensionSet,   conPeek(toMainAccountAndDim, 2));

            this.initInventTableSection(inventJournalTrans, _analysisCode);
        }

        this.initBOMSection(_transDate,
                            this.setGet(fromLocationNameSet),
                            this.setGet(fromActivityTypeSet),
                            this.setGet(toLocationNameSet),
                            this.setGet(toActivityTypeSet),
                            this.setGet(toMainAccountSet),
                            this.setGet(toDimensionSet));

        this.initOfficialsSection(_offsessionId);

        return xmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates XML Document which holds report data
    /// </summary>
    /// <param name="_reportId">
    /// InventJournalReportId to be printed
    /// </param>
    /// <param name="_journalId">
    /// Journal id to be printed
    /// </param>
    /// <param name="_transDate">
    /// Report date
    /// </param>
    /// <param name="_offsessionId">
    /// officials session id
    /// </param>
    /// <param name="_analysisCode">
    /// Dimension Code, which was set in parameters as analysis code
    /// </param>
    /// <returns>
    /// xmlDocument which contains report data
    /// </returns>
    public XmlDocument createXML(InventJournalReportId_RU  _reportId,
                                 JournalId                 _journalId,
                                 TransDate                 _transDate,
                                 OffSessionId_RU           _offsessionId,
                                 RefRecId                  _analysisCode)
    {
        if (InventJournalTable::find(_journalId).JournalType == InventJournalType::BOM)
        {
            return this.createFromBOMJournal(_reportId,
                                             _journalId,
                                             _transDate,
                                             _offsessionId,
                                             _analysisCode);
        }

        return this.createFromInventJournal(_reportId,
                                            _journalId,
                                            _transDate,
                                            _offsessionId,
                                            _analysisCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToMainAccountAndDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines to main account and dimension value.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// <c>InventJournalTrans</c> record.
    /// </param>
    /// <param name="_analysisCode">
    /// Dimension Code, which was set in parameters as analysis code
    /// </param>
    /// <returns>
    /// container with To main account and dimension value.
    /// </returns>
    abstract protected container getToMainAccountAndDim(InventJournalTrans _inventJournalTrans,
                                                        RefRecId           _analysisCode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBOMSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills BOM section of report with data
    /// </summary>
    /// <param name="_transDate">
    /// Date of report
    /// </param>
    /// <param name="_fromInventLocationName">
    /// InventLocation from which items taken
    /// </param>
    /// <param name="_fromActivityType">
    /// Activity type of invent location from which items taken
    /// </param>
    /// <param name="_toInventLocationName">
    /// InventLocation to which items taken
    /// </param>
    /// <param name="_toActivityType">
    /// Activity type of invent location to which items taken
    /// </param>
    /// <param name="_toMainAccount">
    /// Main account to which items written off
    /// </param>
    /// <param name="_toDimension">
    /// Dimension value, which corresponds to dimension attribute specified in parameters as analysis dimension
    /// </param>
    /// <param name="_unitOfMeasureSymbol">
    /// Symbol of unit of measure
    /// </param>
    protected void initBOMSection(TransDate                       _transDate,
                                  InventLocationName              _fromInventLocationName,
                                  InventLocationActivityType_RU   _fromActivityType,
                                  InventLocationName              _toInventLocationName,
                                  InventLocationActivityType_RU   _toActivityType,
                                  MainAccountNum                  _toMainAccount,
                                  DimensionValue                  _toDimension,
                                  UnitOfMeasureSymbol             _unitOfMeasureSymbol = '')
    {
        XmlElement xmlElement = xmlDocument.createElement(#BOMSection);

        xmlElement.setAttribute(#CreationDate,       strFmt("@GLS106745", _transDate));
        xmlElement.setAttribute(#OperationCode,      '');
        xmlElement.setAttribute(#FromInventLocation, _fromInventLocationName);
        xmlElement.setAttribute(#FromActivityType,   _fromActivityType);
        xmlElement.setAttribute(#ToInventLocation,   _toInventLocationName);
        xmlElement.setAttribute(#ToActivityType,     _toActivityType);
        xmlElement.setAttribute(#ToLedgerAccount,    _toMainAccount);
        xmlElement.setAttribute(#ToAnalysisCode,     _toDimension);
        xmlElement.setAttribute(#UnitId,             _unitOfMeasureSymbol);

        xmlRootElement.appendChild(xmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTableSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills lines section of xml document with data
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// InventJournalTrans which will be printed
    /// </param>
    /// <param name="_analysisCode">
    /// Dimension Code, which was set in parameters as analysis code
    /// </param>
    abstract protected void initInventTableSection(InventJournalTrans _inventJournalTrans,
                                                   RefRecId           _analysisCode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficialsSection</Name>
				<Source><![CDATA[
    private void initOfficialsSection(OffSessionId_RU _offsessionId)
    {
        XmlElement          xmlElement = xmlDocument.createElement(#STSection);
        OfficialsTrans_RU   officialsTrans;

        select firstonly Title, Name from officialsTrans
            where officialsTrans.OffSessionId == _offsessionId &&
                  officialsTrans.ReportType   == offReportType &&
                  officialsTrans.Position     == OffPosition_RU::Supplier;

        xmlElement.setAttribute(#SupplierTitle, officialsTrans.Title);
        xmlElement.setAttribute(#SupplierName, officialsTrans.Name);

        select firstonly Title, Name from officialsTrans
            where officialsTrans.OffSessionId == _offsessionId &&
                  officialsTrans.ReportType   == offReportType &&
                  officialsTrans.Position     == OffPosition_RU::Acceptor;

        xmlElement.setAttribute(#TakerTitle, officialsTrans.Title);
        xmlElement.setAttribute(#TakerName, officialsTrans.Name);

        xmlRootElement.appendChild(xmlElement);

        xmlElement = xmlDocument.createElement(#RMSection);

        select firstonly Name from officialsTrans
            where officialsTrans.OffSessionId == _offsessionId &&
                  officialsTrans.ReportType   == offReportType &&
                  officialsTrans.Position     == OffPosition_RU::Requester;

        xmlElement.setAttribute(#RequesterName, officialsTrans.Name);

        select firstonly Name from officialsTrans
            where officialsTrans.OffSessionId == _offsessionId &&
                  officialsTrans.ReportType   == offReportType &&
                  officialsTrans.Position     == OffPosition_RU::Manager;

        xmlElement.setAttribute(#ManagerName, officialsTrans.Name);

        xmlRootElement.appendChild(xmlElement);

        while select Name from officialsTrans
            where officialsTrans.OffSessionId == _offsessionId &&
                  officialsTrans.ReportType   == offReportType &&
                  officialsTrans.Position     == OffPosition_RU::InCharge
        {
            xmlElement = xmlDocument.createElement(#InChargeSection);

            xmlElement.setAttribute(#InChargeName, officialsTrans.Name);

            xmlRootElement.appendChild(xmlElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrologSection</Name>
				<Source><![CDATA[
    private void initPrologSection(InventJournalReportId_RU _reportId, TransDate _transDate)
    {
        CompanyInfo companyInfo = CompanyInfo::find();
        XmlElement  xmlElement  = xmlDocument.createElement(#PrologSection);

        xmlElement.setAttribute(#DocumentNum, _reportId);
        xmlElement.setAttribute(#CompanyName, companyInfo.name());
        xmlElement.setAttribute(#OKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, _transDate));

        xmlRootElement.appendChild(xmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        offReportType  = InventJournalReport_RU::inventJournalReportType2OffReportType(InventJournalReportType_RU::BOMReq);
        xmlDocument    = XmlDocument::newBlank();
        xmlRootElement = xmlDocument.createElement(this.reportName());
        xmlDocument.appendChild(xmlRootElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportName</Name>
				<Source><![CDATA[
    private reportName reportName()
    {
        return classStr(InventJournalReport_BomReq_RU);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
