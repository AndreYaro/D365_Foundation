<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TsWorkflowTimesheet</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TsWorkflowTimesheet extends WorkflowDocument
{
    boolean         isTotalCalculated;
    RecId           prevRecId;
    utcdatetime     cacheStampForPrevRecId;

    ProjQtyEmpl     totalHoursBillable;
    ProjQtyEmpl     totalHoursNonBillable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates summary hours, those being billable, non-billable and total, for the timesheet.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <remarks>
    ///    The timesheet transactions are read and summarized to determine total hours.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be the <c>TSTimesheetTable</c> table.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The record ID cannot be zero.
    /// </exception>
    private void calculateTotals(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        // 5 minutes is the time span that the cached values are considered valid.
        #DEFINE.MaxElapsedSeconds(300)

        TSTimesheetTable    timesheetTable;
        TSTimesheetLine     timesheetLine;
        TSTimesheetTrans    timesheetTrans;
        ProjLineProperty    lineProperty;
        int64               secondsElapsed;

        if (_tableId != tableNum(TSTimesheetTable))
        {
            // Document table id reference: %1 is not valid.
            throw error(strFmt("@SYS112754", _tableId));
        }

        if (_recId == 0)
        {
            // Document record id is zero.
            throw error("@SYS112755");
        }

        if (isTotalCalculated && (_recId == prevRecId))
        {
            secondsElapsed = DateTimeUtil::getDifference(DateTimeUtil::utcNow(), cacheStampForPrevRecId);

            if (secondsElapsed < #MaxElapsedSeconds)
            {
                // Previously calculated values are available and are current.
                return;
            }
        }

        // Set the overall process focus to the id of the passed in timesheets company.
        changecompany(_companyId)
        {
            timesheetTable = TSTimesheetTable::findRecId(_recId);

            totalHoursNonBillable   = 0;
            totalHoursBillable      = 0;

            while select timesheetLine
                where timesheetLine.TimesheetNbr == timesheetTable.TimesheetNbr
            {
                select sum(Hours) from timesheetTrans
                    where timesheetTrans.TimesheetNbr == timesheetLine.TimesheetNbr &&
                        timesheetTrans.LineNum == timesheetLine.LineNum;

                changecompany(timesheetLine.ProjectDataAreaId)
                {
                    select lineProperty
                        where lineProperty.LinePropertyId == timesheetLine.LinePropertyId;

                    if (lineProperty.ToBeInvoiced == NoYes::Yes)
                    {
                        totalHoursBillable += timesheetTrans.Hours;
                    }
                    else
                    {
                        totalHoursNonBillable += timesheetTrans.Hours;
                    }
                }
            }
        }

        isTotalCalculated = true;
        prevRecId = _recId;
        cacheStampForPrevRecId = DateTimeUtil::utcNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the query name for this workflow document.
    /// </summary>
    /// <returns>
    ///    The query name from the AOT.
    /// </returns>
    QueryName getQueryName()
    {
        if (Dynamics.AX.Application.FeatureStateProvider::isFeatureEnabled(ProjEnableTSTimesheetLineForIntercompanyResourceFeature::instance()))
        {
            return queryStr(TSWorkflowTimesheetV2);
        }
        else
        {
            return queryStr(TSWorkflowTimesheet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPercentHours_Billable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the percent billable hours on the timesheet.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total hours on the timesheet.
    /// </returns>
    /// <remarks>
    ///    The hours are summed for the timesheet and the percentage of billable hours is returned.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be a <c>TSTimesheetTable</c> table.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The record ID cannot be zero.
    /// </exception>
    public TSPercentBillable parmPercentHours_Billable(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        real                totalHours;
        TSPercentBillable   pctBillable = 0;

        this.calculateTotals(_companyId, _tableId, _recId);

    //    totalHours = totalHoursNonBillable + totalHoursNonBillable;
        totalHours = totalHoursBillable + totalHoursNonBillable;

        if (totalHours > 0)
        {
            pctBillable = percent(totalHoursBillable, totalHours);
        }

        return pctBillable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalHours</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the total hours on the timesheet.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total hours on the timesheet.
    /// </returns>
    /// <remarks>
    ///    The total hours are summed for the timesheet and the value is returned.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be <c>TSTimesheetTable</c> table.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The record ID cannot be zero.
    /// </exception>
    public TSHoursTotal parmTotalHours(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        this.calculateTotals(_companyId, _tableId, _recId);

        return totalHoursBillable + totalHoursNonBillable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalHours_Billable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the total billable hours on the timesheet.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total billable hours on the timesheet.
    /// </returns>
    /// <remarks>
    ///    The total billable hours are summed for the timesheet and the value is returned.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be <c>TSTimesheetTable</c> table.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The record ID cannot be zero.
    /// </exception>
    public TSHoursTotalBillable parmTotalHours_Billable(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        this.calculateTotals(_companyId, _tableId, _recId);

        return totalHoursBillable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalHours_NonBillable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the total non-billable hours on the timesheet.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that correspond to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID corresponding to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total non-billable hours on the timesheet.
    /// </returns>
    /// <remarks>
    ///    The total non-billable hours are summed for the timesheet and the value is returned.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be <c>TSTimesheetTable</c> table.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The record ID cannot be zero.
    /// </exception>
    public TSHoursTotalNonBillable parmTotalHours_NonBillable(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        this.calculateTotals(_companyId, _tableId, _recId);

        return totalHoursNonBillable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>