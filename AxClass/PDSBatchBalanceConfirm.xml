<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSBatchBalanceConfirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PDSBatchBalanceConfirm</c> class confirms the calcualtion for batch balancing and creates the picking list journal.
/// </summary>
class PDSBatchBalanceConfirm extends RunBase
{
    DialogField             printField;
    DialogField             postField;
    DialogField             releaseToWarehouseField;
    boolean                 printJournal;
    boolean                 postJournal;
    boolean                 hasNonWHSItem;
    PDSTmpBatchSelection    selection;
    Map                     qtyList;
    ProdJournalId           journalNum;
    ProdId                  prodId;
    ProdJournalTableData    prodJournalTableData;
    ProdJournalTransData    prodJournalTransData;
    ProdJournalTable        prodJournalTable;
    ProdJournalBOM          prodJournalBOM;
    FormRun                 caller;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentListSysLastValue
        printJournal,
        postJournal
    #ENDMACRO

    #LocalMacro.CurrentListNewSession
        #CurrentListSysLastValue,
        prodJournalTable,
        prodJournalBOM,
        prodId,
        journalNum,
        packedSelection,
        packedQtyList,
        hasNonWHSItem
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the production picking list journal header.
    /// </summary>
    public void createHeader()
    {
        prodJournalTableData = JournalTableData::newTable(prodJournalTable);
        prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalBOM, prodJournalTableData);
        prodJournalTableData.initBuffer(ProdTable::find(prodId).prodParametersDim().BOMJournalNameId, prodId, ProdJournalType::Picklist);
        prodJournalTableData.initJournalId();
        prodJournalTable.write();

        journalNum = prodJournalTableData.journalTable().JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a production picking list journal line for the specified ingredient.
    /// </summary>
    /// <param name="_prodBOM">
    /// The ingredient record of the <c>ProdBOM</c> table for which to create the picking list line.
    /// </param>
    /// <param name="_dim">
    /// The inventory dimensions to use for the picking list line.
    /// </param>
    /// <param name="_qty">
    /// The quantity to use for the picking list line.
    /// </param>
    private void createLine(
        ProdBOM     _prodBOM,
        InventDim   _dim,
        Qty         _qty)
    {
        ttsbegin;

        prodJournalBOM.clear();
        prodJournalBOM.initValue();
        prodJournalBOM.initFromProdBOM(_prodBOM);
        prodJournalBOM.JournalId        = prodJournalTableData.journalTable().JournalId;
        prodJournalBOM.InventDimId      = InventDim::findOrCreate(_dim).InventDimId;
        prodJournalBOM.bomConsump       = _qty;
        prodJournalBOM.InventConsump    = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodJournalBOM.ItemId,
                                                                                                                prodJournalBOM.InventDimId,
                                                                                                                _qty,
                                                                                                                prodJournalBOM.BOMUnitId,
                                                                                                                prodJournalBOM.inventUnit(),
                                                                                                                NoYes::No);
        prodJournalBOM.TransDate        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        prodJournalBOM.EndConsump       = NoYes::Yes;
        prodJournalBOM.insert();

        // Reserve lot in case the journal is not posted and
        // to assign the batch for non active ingredient that are batch tracked
        InventUpd_Reservation::updateReserveBuffer(prodJournalBOM, -prodJournalBOM.InventConsump);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the dialog for batch balance confirmation.
    /// </summary>
    /// <returns>
    /// The created dialog object.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase ret;

        ret = super();
        
        postField = ret.addField(enumStr(NoYes), "@PSC68", "@FieldDescriptions_WHS:PostPickingListJournalBatchBalanceHelpText");
        postField.value(postJournal);

        printField = ret.addField(enumStr(NoYes), "@PSC69", "@FieldDescriptions_WHS:PrintPickingListJournalBatchBalanceHelpText");
        printField.value(printJournal);

        if (ProdBOM::hasWHSItem(prodId))
        {
            ret.caption("@WAX:ConfirmAndReleaseToWarehouse");

            releaseToWarehouseField = ret.addfield(enumStr(NoYes), "@WAX:WHSMenuReleaseTowarehouseSubmenu", "@FieldDescriptions_WHS:ReleaseToWarehouseBatchBalanceConfirmHelpText");
            releaseToWarehouseField.value(NoYes::Yes);
            releaseToWarehouseField.allowEdit(false);
        }      
        else 
        {
            ret.caption("@PSC65");
        }  

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the values from the dialog fields.
    /// </summary>
    /// <returns>
    /// true if all values were retrieved correctly and the form may close; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        printJournal = printField.value();
        postJournal  = postField.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container ret;

        if (this.inGetSaveLast())
        {
            ret = [#CurrentVersion, #CurrentListSysLastValue];
        }
        else
        {
            container packedSelection = SysTableInMemorySerializer::packTable(selection);
            container packedQtyList = qtyList.pack();
            ret = [#CurrentVersion, #CurrentListNewSession];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    public FormRun parmCaller(FormRun _caller = caller)
    {
        if (!prmisdefault(_caller))
        {
            caller = _caller;
        }

        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintJournal</Name>
				<Source><![CDATA[
    public boolean parmPrintJournal(boolean _printJournal = printJournal)
    {
        printJournal = _printJournal;

        return printJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        if (!prmisdefault(_prodId))
        {
            prodId = _prodId;
        }

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyList</Name>
				<Source><![CDATA[
    public Map parmQtyList(Map _qtyList = qtyList)
    {
        if (!prmisdefault(_qtyList))
        {
            qtyList = _qtyList;
        }

        return qtyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelection</Name>
				<Source><![CDATA[
    public PDSTmpBatchSelection parmSelection(PDSTmpBatchSelection _selection = selection)
    {
        if (!prmisdefault(_selection))
        {
            selection = _selection;
        }

        return selection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>print</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the created production picking list journal.
    /// </summary>
    public void print()
    {
        MenuFunction    menuFunction;
        Args            args = new Args();

        switch (prodJournalTable.JournalType)
        {
            case ProdJournalType::Picklist:
                menuFunction = new MenuFunction(menuitemOutputStr(ProdPickList), MenuItemType::Output);
                break;
            default:
                return;
        }

        args.caller(caller);
        args.record(prodJournalBOM);
        args.menuItemName(menuFunction.name());
        args.menuItemType(menuFunction.type());
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the batch balancing confirm process which will create the production picking list
    /// journal and possibly post and/or print the picking list based on user selection.
    /// </summary>
    public void run()
    {
        ProdBOM                 prodBOM;
        ProdJournalCheckPostBOM journalcheck;
        Qty                     qty;
        InventDim               inventDim;
        WhsInventEnabled        whsInventEnabled;
        int                     numOfLines = 0;

        super();

        ttsBegin;

        if (hasNonWHSItem)
        {
            this.createHeader();

            while select forupdate prodBOM
                where prodBOM.ProdId == prodId
                join inventDim
                    where inventDim.InventDimId == prodBOM.InventDimId
                notExists join whsInventEnabled
                    where whsInventEnabled.ItemId == prodBOM.ItemId
            {
                inventDim = prodBOM.inventDim();

                if (prodBOM.PDSIngredientType == PDSIngredientTypeEnum::Active)
                {
                    while select selection
                        where selection.InventTransId == prodBOM.InventTransId
                    {
                        inventDim = InventDim::find(selection.InventDimId);
                        qty       = selection.Qty;
                        this.createLine(prodBOM, inventDim, qty);
                        ++numOfLines;
                    }
                }
                else
                {
                    if (qtyList
                        && qtyList.exists(prodBOM.InventTransId))
                    {
                        qty = qtyList.lookup(prodBOM.InventTransId);
                        this.createLine(prodBOM, inventDim, qty);
                        ++numOfLines;
                    }
                }
            }

            if (numOfLines > 0)
            {
                prodJournalTable.selectForUpdate(true);
                prodJournalTable.NumOfLines = numOfLines;
                prodJournalTable.doUpdate();
            }

            if (postJournal)
            {
                journalcheck = ProdJournalCheckPostBOM::newPostJournal(journalNum, true);
                journalcheck.runOperation();
            }
        }

        this.releaseBalancedQty(prodId);

        ttsCommit;

        if (hasNonWHSItem)
        {
            info(strfmt("@PSC368",journalNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret = false;

        Integer version = conpeek(_packedClass,1);
        if (version == #CurrentVersion)
        {
            if (this.inGetSaveLast())
            {
                [version, #CurrentListSysLastValue] = _packedClass;
            }
            else
            {
                container packedSelection;
                container packedQtyList;
                [version, #CurrentListNewSession] = _packedClass;

                SysTableInMemorySerializer::unpackTable(packedSelection, selection);
                qtyList = Map::create(packedQtyList);
            }

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that batch balancing has been done for the production order and confirmation is allowed.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object which called this method.
    /// </param>
    /// <returns>
    /// true if the batch balance confirmation can be run; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        ProdJournalTable   journal;

        if (! prodId
            || ! qtyList
            || qtyList.elements() == 0)
        {
            return checkFailed("@PSC83");
        }

        select firstonly journal
            where journal.ProdId        == prodId
                && journal.JournalType  == ProdJournalType::Picklist;

        if (journal)
        {
            return checkFailed("@PSC84");
        }

        if (this.prodBOMHasWHSCatchWeightItem())
        {
            return checkFailed(strFmt("@WAX:Error_BatchBalancingConfirmIsNotSupportedForCW", prodId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PDSBatchBalanceConfirm construct()
    {
        return new PDSBatchBalanceConfirm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the standard description for this runbase class.
    /// </summary>
    /// <returns>
    /// The description for this runbase class.
    /// </returns>
    public static str description()
    {
        return "@PSC746";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        if (!hasNonWHSItem)
        {        
            return "@WAX:WHSMenuReleaseTowarehouseSubmenu";
        }

        return RunBase::getDescription(classIdGet(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FormRun                 formRun;
        PDSBatchBalanceConfirm  confirm;

        if (_args.caller())
        {
            formRun = _args.caller();
        }

        if (!_args.caller() || (formRun.name() != formstr(PDSBalanceProdBom) && formRun.name() != formstr(PDSBalanceProdBomEnhanced)))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        confirm = PDSBatchBalanceConfirm::construct();

        confirm.parmCaller(formRun);
        confirm.parmProdId(_args.parm());
        confirm.parmSelection(_args.record());
        confirm.parmQtyList(_args.parmObject());
        confirm.hasNonWHSItem = ProdBOM::hasNonWHSItem(confirm.parmProdId());

        if (confirm.validate()
            && (!confirm.hasNonWHSItem
            ||  confirm.prompt()))
        {
            confirm.runOperation();
            
            if (confirm.parmPrintJournal())
            {
                confirm.print();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodBOMHasWHSCatchWeightItem</Name>
				<Source><![CDATA[
    private boolean prodBOMHasWHSCatchWeightItem()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return false;
        }
        
        ProdBOM          prodBOM;
        WHSInventEnabled whsInventEnabled;
        PdsCatchWeightItem pdsCatchWeightItem;

        select firstonly RecId from prodBOM
            where prodBOM.ProdId == this.parmProdId()
        exists join whsInventEnabled
            where whsInventEnabled.ItemId == prodBOM.ItemId
        exists join pdsCatchWeightItem
            where pdsCatchWeightItem.ItemId == prodBOM.ItemId;

        return prodBOM.RecId != 0;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseBalancedQty</Name>
				<Source><![CDATA[
    private void releaseBalancedQty(ProdId _prodId)
    {        
        WHSTmpReleaseToWarehouse           tmpReleaseToWarehouse;
        WHSReleaseToWarehouseId            whsReleaseToWarehouseId = WHSTmpReleaseToWarehouse::getNextReleaseToWarehouseId();
        MapEnumerator                      qtyListEnumerator       = qtyList.getEnumerator();
        InventQty                          balancedInventQty;
        BOMQty                             balancedBOMQty;
        
        while (qtyListEnumerator.moveNext())
        {
            ProdBOM          prodBOM;
            WHSInventEnabled whsEnabled;

            select firstonly forupdate prodBOM
                where prodBOM.ProdId        == _prodId
                &&    prodBOM.InventTransId == qtyListEnumerator.currentKey()
                exists join whsEnabled
                    where whsEnabled.ItemId == prodBOM.ItemId;

            if (prodBOM.RecId)
            {
                balancedBOMQty    = qtyListEnumerator.currentValue();
                balancedInventQty = EcoResProductUnitConverter::convertForReleasedProduct(prodBOM.ItemId,
                                                                                        prodBOM.InventDimId,
                                                                                        balancedBOMQty,
                                                                                        UnitOfMeasure::findBySymbol(prodBOM.UnitId).RecId,
                                                                                        UnitOfMeasure::findBySymbol(prodBOM.inventUnit()).RecId,
                                                                                        NoYes::Yes);

                // Correct the prodBOM quantities to the amount that we are producing.
                if (balancedInventQty != prodBOM.QtyInventCalc)
                {
                    prodBOM.RemainInventPhysical = balancedInventQty;
                    prodBOM.RemainBOMPhysical    = balancedBOMQty;
                    prodBOM.BOMQty               = balancedBOMQty;
                    prodBOM.PDSBatchBalanced     = NoYes::Yes;
                    prodBOM.update();
                }

                tmpReleaseToWarehouse                      = this.initFromProdBOM(prodBOM, tmpReleaseToWarehouse);
                tmpReleaseToWarehouse.ReleasedQty          = balancedInventQty;
                tmpReleaseToWarehouse.ReleaseToWarehouseId = whsReleaseToWarehouseId;

                tmpReleaseToWarehouse.insert();

                this.reserveReleasedQty(prodBOM, balancedInventQty);
            }
        }

        WHSWarehouseReleaseProdBOM::releaseToWarehouseProdBOM(tmpReleaseToWarehouse, 
                                                              whsReleaseToWarehouseId, 
                                                              false, 
                                                              false, 
                                                              true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveReleasedQty</Name>
				<Source><![CDATA[
    private void reserveReleasedQty(
        ProdBOM   _prodBOM, 
        InventQty _releasedQty)
    {             
        InventQty   reserveQty = _releasedQty;
        InventDim   inventDimOnHandSelectionCriteria;
        InventUpd_Reservation reservation;

        while select selection
            where selection.InventTransId == _prodBOM.InventTransId
        {
            inventDimOnHandSelectionCriteria = InventDim::find(selection.InventDimId);
            inventDimOnHandSelectionCriteria.clearLocationAndBelowDim(selection.ItemId);
            inventDimOnHandSelectionCriteria = InventDim::findOrCreate(inventDimOnHandSelectionCriteria);

            if (selection.Qty >= reserveQty)
            {
                reservation = InventUpd_Reservation::newReserveBuffer(_prodBOM, -reserveQty);
                reserveQty = 0;
            }
            else
            {
                reservation = InventUpd_Reservation::newReserveBuffer(_prodBOM, -selection.Qty);
                reserveQty -= selection.Qty;
            }

            reservation.parmInventDimOnHandSelectionCriteria(inventDimOnHandSelectionCriteria);
            reservation.updateNow();

            if (!reserveQty)
            {
                break;
            }
        }

        if (reserveQty > 0)
        {
            InventUpd_Reservation::updateReserveBuffer(_prodBOM, -reserveQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdBOM</Name>
				<Source><![CDATA[
    private WHSTmpReleaseToWarehouse initFromProdBOM(
        ProdBOM                  _prodBOM, 
        WHSTmpReleaseToWarehouse _tmpReleaseToWarehouse)
    {
        _tmpReleaseToWarehouse.InventDimId   = _prodBOM.InventDimId;
        _tmpReleaseToWarehouse.InventTransId = _prodBOM.InventTransId;
        _tmpReleaseToWarehouse.Module        = WHSModule::ProdBOM;
        _tmpReleaseToWarehouse.OrderNum      = _prodBOM.ProdId;

        return _tmpReleaseToWarehouse;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>