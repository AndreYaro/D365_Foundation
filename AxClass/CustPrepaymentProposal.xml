<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPrepaymentProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a class that contains the logic to create, update and delete prepayment proposals.
/// </summary>
internal final class CustPrepaymentProposal
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initPrepaymenProposalFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates a prepayment proposal from a sales order.
    /// </summary>
    /// <param name = "_salesTable">
    /// The sales order to create the prepayment proposal from.
    /// </param>
    /// <returns>
    /// The prepayment proposal created.
    /// </returns>
    internal static CustPrepaymentProposalTable initPrepaymenProposalFromSalesTable(SalesTable _salesTable)
    {
        CustPrepaymentInstrumentationLogger prepaymentInvoiceLogger = CustPrepaymentInstrumentationLogger::createLogger(classStr(CustPrepaymentProposal));
        CustPrepaymentProposalTable prepaymentProposalTableLoc;
        CustPrepaymentProposalTrans prepaymentProposalTransLoc;
        CustTable custTable;
        SalesLine salesLineLoc;

        using (var activityContext = prepaymentInvoiceLogger.activityContextWithCustomProperties(CustPrepaymentInstrumentationConstants::CustPrepaymentPrepaymentProposalCreate))
        {
            ttsbegin;

            select firstonly PrepayType, PrepaymentValue from custTable
                index hint AccountIdx
                where custTable.AccountNum == _salesTable.CustAccount;

            prepaymentProposalTableLoc.SourceTableId = _salesTable.TableId;
            prepaymentProposalTableLoc.SourceRecId = _salesTable.RecId;
            prepaymentProposalTableLoc.PrepaymentType = custTable.PrepayType;
            prepaymentProposalTableLoc.CurrencyCode = _salesTable.CurrencyCode;

            if (prepaymentProposalTableLoc.PrepaymentType == SalesPrepayType::Fixed)
            {
                prepaymentProposalTableLoc.PrepaymentAmount = custTable.PrepaymentValue;
            }

            prepaymentProposalTableLoc.PrepaymentValue = custTable.PrepaymentValue;
            prepaymentProposalTableLoc.Compress = NoYes::Yes;
            prepaymentProposalTableLoc.write();

            AmountCur value = custTable.PrepaymentValue;
            RecId parentRecId = prepaymentProposalTableLoc.RecId;
            int tableIdSales = tableNum(SalesLine);

            insert_recordset prepaymentProposalTransLoc
            (SourceTableId, SourceRecId, CustPrepaymentProposalTable, PrepaymentValue)
                select tableIdSales, recid, parentRecId, value from salesLineLoc
                    where salesLineLoc.SalesId == _salesTable.SalesId;

            CustPrepaymentProposal::updateTotals(_salesTable, prepaymentProposalTableLoc);
            ttscommit;

            return prepaymentProposalTableLoc;
        }
}

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the totals of the prepayment proposal.
    /// </summary>
    /// <param name = "_salesTable">salesorder instance from which the proposal was created </param>
    /// <param name = "_custPrepaymentProposalTable"> proposal table instance</param>
    internal static void updateTotals(SalesTable _salesTable, CustPrepaymentProposalTable _custPrepaymentProposalTable)
    {
        SalesTotals salesTotals;
        salesTotals = SalesTotals_Sales::construct(_salesTable,
                                                   SalesUpdate::All,
                                                   AccountOrder::None,
                                                   '',
                                                   _salesTable.SalesId);
        salesTotals.calc();

        _custPrepaymentProposalTable.TotalAmount = salesTotals.totalAmount();
        _custPrepaymentProposalTable.PrepaymentAmount = (salesTotals.totalAmount() * _custPrepaymentProposalTable.PrepaymentValue / 100);
        _custPrepaymentProposalTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProposal</Name>
				<Source><![CDATA[
    internal static void deleteProposal(CustPrepaymentProposalTable _cusPrepaymentProposalTable)
    {
        CustPrepaymentProposalTrans prepaymentProposalTransLoc;
        CustPrepaymentProposalTable prepaymentProposalTableLoc;

        ttsbegin;

        delete_from prepaymentProposalTransLoc
            where prepaymentProposalTransLoc.CustPrepaymentProposalTable == _cusPrepaymentProposalTable.RecId;

        delete_from prepaymentProposalTableLoc
            where prepaymentProposalTableLoc.RecId == _cusPrepaymentProposalTable.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesOrderUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks if the sales order has been updated. And if it has, it returns true.
    /// </summary>
    /// <param name = "_salesTable">
    /// The sales order to check if it has been updated.
    /// </param>
    /// <param name = "_prepaymentProposalTable">
    /// The prepayment proposal to check if it has been updated.
    /// </param>
    /// <returns>true if sales order was updated</returns>
    internal static boolean checkSalesOrderUpdate(SalesTable _salesTable, CustPrepaymentProposalTable _prepaymentProposalTable)
    {
        boolean isDifferent = false;
        SalesTotals salesTotals;
        salesTotals = SalesTotals_Sales::construct(_salesTable, SalesUpdate::All, AccountOrder::None, '', _salesTable.SalesId);
        salesTotals.calc();

        if (_prepaymentProposalTable.TotalAmount != salesTotals.totalAmount())
        {
            isDifferent = true;
        }
        
        return isDifferent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>