<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCreateBarCodes</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailCreateBarCodes</c> class validates the bar code setup and create the ItemBarCode for a particular product.
/// </summary>
/// <remarks>
///  This class also has the logic to create ItemBarCode across multiple LE where particular product and variants are released.
/// </remarks>
class RetailCreateBarCodes
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    InventTable         inventTable;
    BarcodeSetupId      fieldBarcodeSetupId;
    ItemId              fieldItemId;
    InventItemBarcode   inventItemBarcode1;
    ItemName            fieldItemName;
    UnitIDBase          fieldUnitId;
    boolean             createBarCodeInAllLECheckBox;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkGroups</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks the inventory size, color and style group.
    /// </summary>
    /// <param name="_sizeActive">
    ///   A boolean value of dimension size to check whether size is active or not.
    /// </param>
    /// <param name="_colorActive">
    ///  A boolean value of dimension color to check whether color is active or not.
    /// </param>
    /// <param name="_styleActive">
    ///  A boolean value of dimension style to check whether style is active or not.
    /// </param>
    /// <param name="_sizeChar">
    ///  A value of size character which is defind on <c>RetailBarcodeMaskCharacter</c> table for size digit.
    /// </param>
    /// <param name="_colorChar">
    ///  A value of color character which is defind on <c>RetailBarcodeMaskCharacter</c> table for color digit.
    /// </param>
    /// <param name="_styleChar">
    ///  A value of style character which is defind on <c>RetailBarcodeMaskCharacter</c> table for style digit.
    /// </param>
    /// <param name="_combination">
    ///  A buffer of <c>InventDimCombination</c> table.
    /// </param>
    /// <returns>
    ///  A boolean true if group setup is correct otherwise, false.
    /// </returns>
    boolean checkGroups(boolean _sizeActive, boolean _colorActive, boolean _styleActive, str _sizeChar, str _colorChar, str _styleChar, InventDimCombination _combination)
    {
        RetailSizeGroupTrans        sizeGroupTrans;
        RetailColorGroupTrans       colorGroupTrans;
        RetailStyleGroupTrans       styleGroupTrans;
        EcoResProductMaster         ecoResProductMaster;
        boolean                     ret = true;

        ecoResProductMaster = EcoResProductMaster::find(EcoResDistinctProductVariant::find(inventTable.Product).ProductMaster);

        if (_sizeActive && _sizeChar && ecoResProductMaster.RetailSizeGroupId)
        {
            sizeGroupTrans = RetailSizeGroupTrans::find(ecoResProductMaster.RetailSizeGroupId,_combination.inventDim().InventSizeId);
            if (!sizeGroupTrans)
            {
                ret = checkFailed(strfmt("@RET4174",sizeGroupTrans.sizeGroup,sizeGroupTrans.size));
            }
            else if (sizeGroupTrans && sizeGroupTrans.noInBarcode == '')
            {
                ret = checkFailed(strfmt("@RET4175",sizeGroupTrans.size,sizeGroupTrans.sizeGroup));
            }
        }

        if (_colorActive && _colorChar && ecoResProductMaster.RetailColorGroupId)
        {
            colorGroupTrans = RetailColorGroupTrans::find(ecoResProductMaster.RetailColorGroupId,_combination.inventDim().InventColorId);
            if (!colorGroupTrans)
            {
                ret = checkFailed(strfmt("@RET4176",colorGroupTrans.colorGroup,colorGroupTrans.color));
            }
            else if (colorGroupTrans && colorGroupTrans.noInBarcode == '')
            {
                ret = checkFailed(strfmt("@RET4177",colorGroupTrans.color,colorGroupTrans.colorGroup));
            }
        }

        if (_styleActive && _styleChar && ecoResProductMaster.RetailStyleGroupId)
        {
            styleGroupTrans = RetailStyleGroupTrans::find(ecoResProductMaster.RetailStyleGroupId,_combination.inventDim().InventStyleId);
            if (!styleGroupTrans)
                throw error(strfmt("@RET4178",styleGroupTrans.styleGroup,styleGroupTrans.style));
            else if (styleGroupTrans && styleGroupTrans.noInBarcode == '')
                throw error(strfmt("@RET4179",styleGroupTrans.style,styleGroupTrans.styleGroup));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBarcodeSetupId</Name>
				<Source><![CDATA[
        public BarcodeSetupId parmBarcodeSetupId(BarcodeSetupId _barcodeSetupId = fieldBarcodeSetupId)
    {
        fieldBarcodeSetupId = _barcodeSetupId;

        return fieldBarcodeSetupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateBarCodeInAllLECheckBox</Name>
				<Source><![CDATA[
        public boolean parmCreateBarCodeInAllLECheckBox(boolean _createBarCodeInAllLECheckBox = createBarCodeInAllLECheckBox)
    {
        createBarCodeInAllLECheckBox = _createBarCodeInAllLECheckBox;

        return createBarCodeInAllLECheckBox;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldItemId</Name>
				<Source><![CDATA[
        public ItemId parmFieldItemId(ItemId _fieldItemId = fieldItemId)
    {
        fieldItemId = _fieldItemId;

        return fieldItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldItemName</Name>
				<Source><![CDATA[
        public ItemName parmFieldItemName(ItemName _fieldItemName = fieldItemName)
    {
        fieldItemName = _fieldItemName;

        return fieldItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldUnitId</Name>
				<Source><![CDATA[
        public UnitIDBase parmFieldUnitId(UnitIDBase _fieldUnitId = fieldUnitId)
    {
        fieldUnitId = _fieldUnitId;

        return fieldUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventItemBarcode</Name>
				<Source><![CDATA[
        public InventItemBarcode parmInventItemBarcode(InventItemBarcode _inventItemBarcode1 = inventItemBarcode1)
    {
        inventItemBarcode1 = _inventItemBarcode1;

        return inventItemBarcode1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
        public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndCreateProductBarCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used to validate the bar code setup and create InventItemBarCode records.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws error if barcode setup is blank.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws error if product is blank.
    /// </exception>
    /// <param name="_suppressMessageDialog">
    /// Boolean value to skip the user interference while running test class
    /// </param>
    public void validateAndCreateProductBarCode(boolean _suppressMessageDialog = false)
    {
        InventDimCombination    combination;
        RetailBarcodeMask       mask;
        InventItemBarcode       barcodeTable;
        InventDim               inventDimTable;
        int                     NoOfRecordsRead = 0, NoOfRecordsInserted = 0;
        RetailBarcodeManagement    rboBarcodeManagement = new RetailBarcodeManagement();
        ItemBarcode             WrkBarcode;
        str                     StyleChar,sizeChar,ColorChar;
        boolean                 sizeActive;
        boolean                 colorActive;
        boolean                 styleActive;
        BarcodeSetup            barcodeSetup;
        BarcodeSetup            barcodeSetupLocal;
        inventTable             inventTableLocal;
        boolean                 disabledMultiLECheckBox = false;

        if (fieldBarcodeSetupId == '')
            throw error("@RET4170");

        if (fieldItemId == '')
            throw error("@RET4184");

        // Get the barcode mask for the barcode setup
        // Note that the last check digit needs to be removed from the mask here
        barcodeSetup = BarcodeSetup::find(fieldBarcodeSetupId);

        if (!inventTable)
        {
            inventTable = InventTable::find(fieldItemId);
        }

        if (!_suppressMessageDialog)
        {
            if (box::yesNo("@RET4172",DialogButton::Yes,"@RET3776","@RET4173") == DialogButton::No)
            return;

            setPrefix('Heading');
        }

        rboBarcodeManagement.parmBarcodeSetup(barcodeSetup);

        while select crossCompany inventTableLocal
            where inventTableLocal.ItemId == inventTable.ItemId
        {
            NoOfRecordsRead = 0;
            NoOfRecordsInserted = 0;
            // dont execute the logic further if need to create only in specific LE.
            if (disabledMultiLECheckBox == true)
            {
                break;
            }
            // InventTableLocal record set as default if 'checkBox' is not marked.
            if (createBarCodeInAllLECheckBox == false)
            {
                inventTableLocal = inventTable;
                disabledMultiLECheckBox = true;
            }

            changeCompany(inventTableLocal.company())
            {
                setPrefix(strFmt("@SYS340838", inventTableLocal.dataAreaId));

                barCodeSetupLocal = BarcodeSetup::find(barcodeSetup.barcodeSetupId);

                if (!barCodeSetupLocal)
                {
                    error("@RET6146");
                    continue;
                }

                barcodeSetup = barcodeSetupLocal;
                inventTable  = inventTableLocal;

                mask = barcodeSetup.RetailBarcodeMask;

                if (rboBarcodeManagement.hasCheckDigit(barcodeSetup)) // true when check-digit is required for barcode setup.
                {
                    // The last check digit needs to be removed from the mask here
                    mask = substr(mask,1,strlen(mask) - 1);

                    if (strlen(mask) > 13)
                    {
                        error("@RET4171");
                        continue;
                    }
                }
                sizeChar    = RetailBarcodeMaskCharacter::find(RetailBarcodeMaskCharacterTypeBase::SizeDigit).Character;
                styleChar   = RetailBarcodeMaskCharacter::find(RetailBarcodeMaskCharacterTypeBase::StyleDigit).Character;
                colorChar   = RetailBarcodeMaskCharacter::find(RetailBarcodeMaskCharacterTypeBase::ColorDigit).Character;

                sizeActive      = inventTable.sizeActive();
                colorActive     = inventTable.colorActive();

                while select crossCompany combination
                    where combination.ItemId == inventTable.ItemId &&
                        combination.dataAreaId == inventTable.dataAreaId

                {
                    NoOfRecordsRead++;

                    if (!this.checkGroups(sizeActive, colorActive, styleActive, strkeep(mask, sizeChar), strkeep(mask, colorChar), strkeep(mask, styleChar), combination))
                    {
                        break;
                    }

                    using (var context = RetailCreateBarcodesWithPrefixContext::construct())
                    {
                        context.initializeBarcodeMaskPrefixValue(mask, RetailBarcodeMaskTypeBase::Item);
                        WrkBarcode = rboBarcodeManagement.createBarcodeForItemVariant(mask, combination, inventItemBarcode1.UnitID, fieldItemId);
                    }

                    // Validate the barcode just generated
                    if (WrkBarcode == '' || (!barcodeSetup.validateBarcode(WrkBarcode)))
                    {
                        error(strfmt("@RET5019", WrkBarcode));
                        break;
                    }

                    barcodeTable = InventItemBarcode::findRetailBarcode(WrkBarcode);
                    if (barcodeTable)
                    {
                        if ((barcodeTable.itemId != fieldItemId) || (barcodeTable.RetailVariantId != combination.RetailVariantId))
                        {
                            if (barcodeTable.RetailVariantId != '')
                            {
                                error(strfmt("@RET4180",
                                            WrkBarcode,barcodeTable.itemId,fieldItemName,barcodeTable.RetailVariantId,fieldItemId,fieldItemName,combination.RetailVariantId));
                                break;
                            }
                            else
                            {
                                error(strfmt("@RET4181",
                                            WrkBarcode,barcodeTable.itemId,fieldItemName,fieldItemId,fieldItemName,combination.RetailVariantId));
                                break;
                            }
                        }
                    }
                    else
                    {
                        ttsbegin;
                        barcodeTable.clear();

                        barcodeTable.itemBarCode        = WrkBarcode;
                        barcodeTable.itemId             = combination.ItemId;
                        barcodeTable.description        = combination.defaultProductName();
                        barcodeTable.RetailVariantId    = combination.RetailVariantId;
                        barcodeTable.inventDimId        = InventDim::findOrCreate(combination.inventDim()).inventDimId;
                        barcodeTable.UnitID             = fieldUnitId;
                        barcodeTable.barcodeSetupId     = fieldBarcodeSetupId;

                        barcodeTable.insert();
                        ttsCommit;

                        NoOfRecordsInserted++;
                    }
                }

                // The item is not a dimension item so we create one barcode
                if (!NoOfRecordsRead && (!(sizeActive || colorActive)))
                {
                    NoOfRecordsRead++;

                    using (var context = RetailCreateBarcodesWithPrefixContext::construct())
                    {
                        context.initializeBarcodeMaskPrefixValue(mask, RetailBarcodeMaskTypeBase::Item);
                        WrkBarcode = rboBarcodeManagement.createBarcodeNoDim(mask, inventTable.ItemId, InventItemBarcode1.UnitID, fieldItemId);
                    }

                    // Validate the barcode just generated
                    if (WrkBarcode == '' || !(barcodeSetup.validateBarcode(WrkBarcode)))
                    {
                        error(strfmt("@RET5019", WrkBarcode));
                        continue;
                    }

                    if (InventItemBarcode::findRetailBarcode(WrkBarcode).RecId != 0)
                    {
                        if ((barcodeTable.itemId != fieldItemId) || (barcodeTable.RetailVariantId != combination.RetailVariantId))
                        {
                            if (barcodeTable.RetailVariantId != '')
                            {
                                error(strfmt("@RET4180",
                                            WrkBarcode,barcodeTable.itemId,fieldItemName,barcodeTable.RetailVariantId,fieldItemId,fieldItemName,combination.RetailVariantId));
                                continue;
                            }
                            else
                            {
                                error(strfmt("@RET4181",
                                            WrkBarcode,barcodeTable.itemId,fieldItemName,fieldItemId,fieldItemName,combination.RetailVariantId));
                                continue;
                            }
                        }
                    }
                    else
                    {
                        ttsBegin;
                        barcodeTable.clear();
                        barcodeTable.itemBarCode        = WrkBarcode;
                        barcodeTable.itemId             = InventTable.ItemId;
                        barcodeTable.description        = InventTable.defaultProductName();
                        barcodeTable.RetailVariantId    = '';
                        inventDimTable.initFromInventTable(inventTable);
                        barcodeTable.inventDimId        = InventDim::findOrCreate(inventDimTable).inventDimId;
                        barcodeTable.UnitID             = fieldUnitId;
                        barcodeTable.barcodeSetupId     = fieldBarcodeSetupId;
                        barcodeTable.insert();
                        ttsCommit;
                        NoOfRecordsInserted++;
                    }
                }

                eventSource.EventWriteProductsRetailCreateBarCodes(classId2Name(ClassIdGet(this)), funcName(), NoOfRecordsRead, NoOfRecordsInserted);

                if (NoOfRecordsRead > 0)
                {
                    info(strfmt("@RET4182", NoOfRecordsRead, NoOfRecordsInserted));
                }
                else
                {
                    info(strfmt("@RET4183", fieldItemId, fieldItemName));
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>