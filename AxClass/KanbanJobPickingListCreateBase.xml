<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobPickingListCreateBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanJobPickingListCreateBase</c> class performs the task of creating a picking list for a kanban job.
/// </summary>
public abstract class KanbanJobPickingListCreateBase extends RunBase
{
    Kanban                              kanban;
    KanbanJob                           kanbanJob;              // the first process kanban job of a kanban
    KanbanJobPickingList                kanbanJobPickingList;
    KanbanFlow                          kanbanFlow;
    KanbanRule                          kanbanRule;
    InventTable                         parentInventTable;
    InventDim                           parentInventDim;

    boolean                             forceCreatePickingList;

    BOMId                               bomId;
    TransDate                           bomValidDate;
    InventQty                           quantityOrdered;
    Qty                                 serieSize;

    //Value that indicates if the picking list is recalculated.
    boolean                             isRecalculation;

    KanbanRulesConnectedSemiFinished    kanbanRulesConnected;

    #DEFINE.CurrentVersion(3)

    #LOCALMACRO.CurrentList
        kanban,
        kanbanJob,
        kanbanJobPickingList,
        kanbanFlow,
        kanbanRule,
        parentInventTable,
        parentInventDim,
        bomId,
        bomValidDate,
        quantityOrdered,
        serieSize,
        isRecalculation
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the BOM ID that was used to create the picking list.
    /// </summary>
    /// <returns>
    ///    A <c>BOMId</c> value or an empty string.
    /// </returns>
    /// <remarks>
    ///    The value is valid only after the picking list is created, or not created because no applicable BOM was found.
    /// </remarks>
    public BOMId bomId()
    {
        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the final inventory dimensions for a bills of materials line
    ///     ignoring any site specific settings.
    /// </summary>
    /// <param name="_bom">
    ///     The bills of materials line to use when determining the inventory dimensions.
    /// </param>
    /// <returns>
    ///     A record of type inventDim that holds the inventory dimensions the given bills of materials line must have ignoring
    ///     any site specific settings as the work cell
    /// </returns>
    protected InventDimId bomInventDimId(BOM _bom)
    {
        InventTable inventTable = InventTable::find(_bom.ItemId);
        InventDim inventDim     = InventDim::find(_bom.InventDimId).data();

        if (   parentInventDim.InventSiteId
            && inventDim.InventSiteId != parentInventDim.InventSiteId)
        {
            inventDim.InventSiteId     = parentInventDim.InventSiteId;
            inventDim.InventLocationId = '';
        }

        // <GEERU>
        if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(_bom.ItemId, fieldNum(InventDim, InventProfileId_RU)) &&
            !inventDim.InventProfileId_RU)
        {
            inventDim.InventProfileId_RU = BOMParameters::find().InventProfileId_RU;
        }
        // </GEERU>

        inventDim = InventDim::findOrCreate(inventDim);
        return inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBomConsumtionQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the consumption quantity including and excluding scrap.
    /// </summary>
    /// <param name="_bom">
    ///    The <c>BOM</c> record to use in the calculation.
    /// </param>
    /// <param name="_bomCalcData">
    ///    The <c>BOMCalcData</c> object to use in the calculation.
    /// </param>
    /// <param name="_bomInventTable">
    ///    The <c>InventTable</c> record to use in the calculation.
    /// </param>
    /// <returns>
    ///    A container that has the quantity including and excluding scrap.
    /// </returns>
    protected container calculateBomConsumtionQty(
        BOM         _bom,
        BOMCalcData _bomCalcData,
        InventTable _bomInventTable)
    {
        BOMCalcConsumption bomCalcConsumption = BOMCalcConsumption::construct(_bom.Formula,_bomCalcData);

        BOMQty consumptionQty = bomCalcConsumption.calcConsumption(_bom);
        BOMQty consumptionQtyExcludingScrap = bomCalcConsumption.calcConsumption(_bom,1,true,false,false);

        EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_bom.ItemId,
                                                                                                                                  _bom.InventDimId,
                                                                                                                                  _bom.UnitId,
                                                                                                                                  _bomInventTable.inventUnitId(),
                                                                                                                                  NoYes::Yes);
          
        consumptionQty                = ecoResProductUnitConverter.convertValue(consumptionQty);
        consumptionQtyExcludingScrap  = ecoResProductUnitConverter.convertValue(consumptionQtyExcludingScrap);

        return [consumptionQty,consumptionQtyExcludingScrap];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the picking list for the current kanban job by expanding the current valid bill of materials.
    /// </summary>
    protected void createKanbanJobPickingList()
    {
        BOMCalcData             bomCalcData;

        this.initCreateData();

        if (bomId)
        {
            BOMSearchPhantomExpand search = BOMSearchPhantomExpand::newParameters(parentInventTable.ItemId,parentInventDim,serieSize,bomId,bomValidDate);

            while (   search
                   && search.next())
            {
                BOM bom = search.bom();
                setPrefix(#PrefixField(bom,ItemId));

                if (!bomCalcData)
                {
                     bomCalcData = BOMCalcData::newInventTable(serieSize,parentInventTable);
                }

                bom.InventDimId = this.bomInventDimId(bom);
                this.insertKanbanJobPickingList(bomCalcData,bom);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActivityAndInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the picking inventory dimensions and the picking production flow activity
    /// </summary>
    /// <param name="_inventTable">
    ///    A <c>InventTable</c> record that is used in the initialization.
    /// </param>
    /// <returns>
    ///    true if a valid picking activity exists; otherwise, false.
    /// </returns>
    protected boolean initActivityAndInventDim(InventTable _inventTable)
    {
        LeanProdFlowConsumptionActivityCache    leanProdFlowConsumptionActivityCache = LeanProdFlowConsumptionActivityCache::construct();
        ItemId                                  itemId      = kanbanJobPickingList.ItemId;
        InventDimId                             inventDimId = kanbanJobPickingList.InventDimId;
        KanbanJob                               kanbanJobForPlanActivity;
        PlanActivity                            planActivityFound;
        KanbanRule                              kanbanRuleFound;
        PlanActivityRefRecId                    planActivityRefRecIdFound;
        KanbanRuleRefRecId                      kanbanRuleRefRecIdFound;
        boolean                                 forwardFlushed = kanbanJobPickingList.FlushingPrinciple != FlushingPrincipKanban::End;
        InventDimId                             cachedInventDimId;

        container result = leanProdFlowConsumptionActivityCache.getLeanProdFlowConsumptionActivity(itemId,
                                                                                                   inventDimId,
                                                                                                   kanbanFlow.RecId,
                                                                                                   kanbanRule.RecId,
                                                                                                   forwardFlushed
                                                                                                   );

        if (result)
        {
            [kanbanJobPickingList.PickingProductionFlowActivity,
            cachedInventDimId
             ,
             planActivityRefRecIdFound,
             kanbanRuleRefRecIdFound
            ] = result;
            kanbanJobPickingList.setInventDimId(cachedInventDimId);

            planActivityFound        = PlanActivity::find(planActivityRefRecIdFound);
            kanbanRuleFound          = KanbanRule::find(kanbanRuleRefRecIdFound);
            kanbanJobForPlanActivity = kanban.kanbanJobForPlanActivity(planActivityFound);
        }

        if (!kanbanJobForPlanActivity.RecId)
        {
            kanbanJobPickingList.PickingProductionFlowActivity = 0;
            kanbanJobPickingList.InventDimId                   = inventDimId;

            LeanProdFlowFindConsumptionActivity leanProdFlowFindConsumptionActivity =
                                                                                      this.leanProdFlowFindConsumptionActivity()
                                                                                      ;

            kanbanJobPickingList.PickingProductionFlowActivity  = leanProdFlowFindConsumptionActivity.consumingLeanProdFlowActivity().RecId;
            kanbanJobPickingList.setInventDimId(leanProdFlowFindConsumptionActivity.inventDimFinal().InventDimId);
            planActivityFound                                   = leanProdFlowFindConsumptionActivity.aggregatedPlanActivity();
            kanbanRuleFound                                     = leanProdFlowFindConsumptionActivity.kanbanRule();
            kanbanJobForPlanActivity                            = kanban.kanbanJobForPlanActivity(planActivityFound);

            // cache connected rules
            if (!kanbanRulesConnected)
            {
                kanbanRulesConnected = leanProdFlowFindConsumptionActivity.parmKanbanRulesConnected();
            }

            if (kanbanJobPickingList.PickingProductionFlowActivity &&
                kanbanJobPickingList.InventDimId
                && kanbanJobForPlanActivity.RecId
                )
            {
                  leanProdFlowConsumptionActivityCache.insertLeanProdFlowConsumptionActivity(itemId,
                                                                                           inventDimId,
                                                                                           kanbanFlow.RecId,
                                                                                           kanbanRule.RecId,
                                                                                           forwardFlushed,
                                                                                           [kanbanJobPickingList.PickingProductionFlowActivity,
                                                                                            kanbanJobPickingList.InventDimId
                                                                                            ,
                                                                                            planActivityFound.RecId,
                                                                                            kanbanRuleFound.RecId
                                                                                           ]);
            }
        }

        if (   kanbanJobForPlanActivity.RecId
            && kanbanJobForPlanActivity.RecId != kanbanJobPickingList.Job)
        {
            this.initFromKanbanJob(kanbanJobForPlanActivity);
        }

        return this.mustIncludePlanActivity(planActivityFound,kanbanJobForPlanActivity,kanbanRuleFound);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreateData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes class variables.
    /// </summary>
    protected void initCreateData()
    {
        bomValidDate      = kanban.bomValidDate();
        parentInventTable = kanban.inventTable();
        parentInventDim   = kanban.inventDimBOM();
        kanbanFlow        = kanban.kanbanFlow();
        kanbanRule        = kanban.kanbanRule();
        quantityOrdered   = kanbanJob.QuantityOrdered;
        bomId             = kanban.bomId ? kanban.bomId : parentInventTable.bomId(bomValidDate,quantityOrdered,parentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes fields in the current <c>KanbanJobPIckingList</c> record from the <c>KanbanJob</c> record.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The kanban job to initialize from.
    /// </param>
    protected void initFromKanbanJob(
        KanbanJob _kanbanJob = kanbanJob
        )
    {
        kanbanJobPickingList.initFromKanbanJob(
                                               _kanbanJob
                                               );
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a <c>KanbanJobPickingList</c> record.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    ///    The <c>KanbanJobPickingList</c> record to insert.
    /// </param>
    protected abstract void insert(KanbanJobPickingList _kanbanJobPickingList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>KanbanJobPickingList</c> record and inserts it into the database.
    /// </summary>
    /// <param name="_bomCalcData">
    ///    A <c>BOMCalcData</c> object that holds settings for the calculation and the parent item.
    /// </param>
    /// <param name="_bom">
    ///    A <c>BOM</c> table buffer that is used to initialize the record.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The write validation to the <c>KanbanJobPickingList</c> table has failed.
    /// </exception>
    protected void insertKanbanJobPickingList(
        BOMCalcData _bomCalcData,
        BOM         _bom)
    {
        InventQtyConsumption            bomConsumtionQty;
        InventQtyConsumption            bomConsumtionQtyExcludingScrap;

        InventTable bomInventTable = _bom.inventTable();

        if (this.mustIncludeBOM(bomInventTable,_bom))
        {
            [bomConsumtionQty,bomConsumtionQtyExcludingScrap] = this.calculateBomConsumtionQty(_bom,_bomCalcData,bomInventTable);

            if ( this.mustIncludeBOMQuantities(bomConsumtionQty, bomConsumtionQtyExcludingScrap))
            {
                kanbanJobPickingList.clear();
                kanbanJobPickingList.initValue();

                // initialize from first job, may be overruled later
                this.initFromKanbanJob();

                kanbanJobPickingList.initFromInventTable(bomInventTable);
                kanbanJobPickingList.initFromBOM(_bom);

                boolean includeBOMLine =
                    this.initActivityAndInventDim(bomInventTable);

                if (includeBOMLine)
                {
                    kanbanJobPickingList.Quantity               = bomConsumtionQty;
                    kanbanJobPickingList.QuantityExcludingScrap = bomConsumtionQtyExcludingScrap;

                    this.insert(kanbanJobPickingList);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProdFlowFindConsumptionActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>LeanProdFlowFindConsumptionActivity</c> object that can be used to find the pciking activity that the current picking list line should use.
    /// </summary>
    /// <returns>
    ///    A <c>LeanProdFlowFindConsumptionActivity</c> object that can be used to find the pciking activity that the current picking list line should use.
    /// </returns>
    protected LeanProdFlowFindConsumptionActivity leanProdFlowFindConsumptionActivity()
    {
        boolean                                 forwardFlushed = kanbanJobPickingList.FlushingPrinciple != FlushingPrincipKanban::End;

        LeanProdFlowFindConsumptionActivity leanProdFlowFindConsumptionActivity = LeanProdFlowFindConsumptionActivity::newKanbanJobPickingList(
                                                                                                                                            kanbanJobPickingList,
                                                                                                                                            kanban,
                                                                                                                                            kanbanFlow,
                                                                                                                                            forwardFlushed,
                                                                                                                                            false,
                                                                                                                                            kanbanRule,
                                                                                                                                            kanbanRulesConnected);

        return leanProdFlowFindConsumptionActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreatePickingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a picking list must be created for the <c>KanbanJob</c> class variable.
    /// </summary>
    /// <returns>
    /// true if a picking list must be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A picking list must be created for the first process job of a kanban.
    /// </remarks>
    protected boolean mustCreatePickingList()
    {
        // check if kanban can have a BOM
        return kanban.type().canHaveBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to include a <c>BOM</c> record in a picking list.
    /// </summary>
    /// <param name="_inventTable">
    ///    An <c>InventTable</c> table buffer.
    /// </param>
    /// <param name="_bom">
    ///    The <c>BOM</c> table buffer.
    /// </param>
    /// <returns>
    ///    true if the BOM must be included; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A bill of material line must be included, if it is of the item type and the line item is not a
    ///    service item.
    /// </remarks>
    protected boolean mustIncludeBOM(InventTable _inventTable,BOM _bom)
    {
        boolean result = !_inventTable.inventItemType().isServiceItem();

        if (result)
        {
            result = KanbanItemCheckItemId::newStandard(_inventTable.ItemId,false,false,_inventTable).isAllowed();
            if (!result)
            {
                result = checkFailed(strFmt("@SYS325496",_inventTable.ItemId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeBOMQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the BOM line quantities must be included.
    /// </summary>
    /// <param name="_bomConsumptionQty">
    ///    The BOM consumption quantity.
    /// </param>
    /// <param name="_bomConsumptionQtyExcludingScrap">
    ///    The BOM consumption quantity excluding scrap.
    /// </param>
    /// <returns>
    ///    true if the quantities must be included; otherwise false.
    /// </returns>
    protected boolean mustIncludeBOMQuantities(
        InventQtyConsumption _bomConsumptionQty,
        InventQtyConsumption _bomConsumptionQtyExcludingScrap)
    {
        return    _bomConsumptionQty
               || _bomConsumptionQtyExcludingScrap
               || isRecalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludePlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a picking activity and therefore the line it is related to should be included in the picking list.
    /// </summary>
    /// <param name="_planActivity">
    ///    A <c>PlanActivity</c> record.
    /// </param>
    /// <param name="_kanbanJobForPlanActivity">
    ///    A <c>KanbanJob</c> that is based on the plan activity.
    /// </param>
    /// <param name="_kanbanRule">
    ///    A <c>KanbanRule</c> that the plan activity belongs to.
    /// </param>
    /// <returns>
    ///    true if the line should be included; otherwise, false.
    /// </returns>
    protected boolean mustIncludePlanActivity(
        PlanActivity _planActivity,
        KanbanJob    _kanbanJobForPlanActivity,
        KanbanRule   _kanbanRule)
    {
        return    _kanbanJobForPlanActivity.RecId != 0
               && _planActivity.RecId             != 0
               && _kanbanRule.RecId               == kanbanRule.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRecalculation</Name>
				<Source><![CDATA[
    public boolean parmIsRecalculation(boolean _isRecalculation = isRecalculation)
    {
        isRecalculation = _isRecalculation;

        return isRecalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
    public Kanban parmKanban(Kanban _kanban = kanban)
    {
        kanban = _kanban;
        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJob</Name>
				<Source><![CDATA[
    public KanbanJob parmKanbanJob(KanbanJob _kanbanJob = kanbanJob)
    {
        kanbanJob = _kanbanJob;
        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSerieSize</Name>
				<Source><![CDATA[
    public Qty parmSerieSize(Qty _serieSize = serieSize)
    {
        serieSize = _serieSize;

        return serieSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs actions after the <c>run</c> method is finished.
    /// </summary>
    /// <remarks>
    ///    The base class method does nothing. It must be called after or in the <c>run</c> method.
    /// </remarks>
    protected void postRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs actions before the <c>run</c> method is finished.
    /// </summary>
    /// <remarks>
    ///    The base class method does nothing. It must be called before or in the <c>run</c> method.
    /// </remarks>
    protected void preRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the BOM picking list.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        this.init();

        if (this.mustCreatePickingList())
        {
            if (!this.validate())
            {
                throw error("@SYS18447");
            }
            else
            {
                try
                {
                    ttsbegin;
                    this.preRun();
                    this.createKanbanJobPickingList();
                    this.postRun();
                    ttscommit;
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch
                {
                    throw error("@SYS18447");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates input parameters.
    /// </summary>
    /// <param name="calledFrom">
    ///    An <c>Object</c> class that represents the caller; optional.
    /// </param>
    /// <returns>
    ///    true if the validation succeeds; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean result = super(calledFrom);

        result =    result
                 && kanban.checkValid(kanban.RecId)
                 && kanbanJob.checkValid(kanbanJob.RecId);

        if (   result
            && kanbanJob.Kanban != kanban.RecId)
        {
            result = checkFailed(strFmt("@SYS332731", kanban.KanbanId));
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>