<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SimulationJournalUpdate_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This abstract class processes simulation journals.
/// </summary>
public abstract class SimulationJournalUpdate_IT extends RunBaseBatch
{
    public RecordSortedList journalTableList;
    public boolean verbose;
    public boolean reopen;
    public QueryRun queryRun;
    public DialogRunBase dialog;
    public DialogField dialogVerbose;
    public DialogField dialogReopen;

    private const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDialogControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds parameters to dialog.
    /// </summary>
    public void addDialogControls()
    {
        dialogVerbose = dialog.addFieldValue(
            enumStr(NoYes),
            verbose,
            "@ExtendedItallianLocalization:VerboseOutput",
            "@ExtendedItallianLocalization:ShowDetailedOutput");
        dialogVerbose.value(verbose);

        dialogReopen = dialog.addFieldValue(
            enumStr(NoYes),
            reopen,
            "@ExtendedItallianLocalization:Reopen",
            "@ExtendedItallianLocalization:SimulationJournalReopenedHelpText");
        dialogReopen.value(verbose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query.
    /// </summary>
    public void buildQuery()
    {
        Query q = new Query();

        QueryBuildDataSource qbdsJournalName = q.addDataSource(tablenum(LedgerJournalName));
        QueryBuildDataSource qbdsJournalTable = qbdsJournalName.addDataSource(tablenum(LedgerJournalTable));
        qbdsJournalTable.addLink(fieldnum(LedgerJournalName,JournalName), fieldnum(LedgerJournalTable,JournalName));

        QueryBuildDataSource qbdsJournalTrans = qbdsJournalTable.addDataSource(tableNum(LedgerJournalTrans));
        qbdsJournalTrans.relations(true);

        QueryBuildRange qbr = qbdsJournalName.addRange(fieldnum(LedgerJournalName,JournalType));
        qbr.value(queryValue(LedgerJournalType::Daily));
        qbr.status(RangeStatus::Locked);

        qbr = qbdsJournalName.addRange(fieldnum(LedgerJournalName,IsSimulation_IT));
        qbr.value(queryValue(NoYes::Yes));
        qbr.status(RangeStatus::Locked);

        qbr = qbdsJournalTable.addRange(fieldnum(LedgerJournalTable, Posted));
        qbr.value(queryValue(NoYes::No));
        qbr.status(RangeStatus::Locked);

        qbdsJournalName.addRange(fieldnum(LedgerJournalName,JournalName));
        qbdsJournalTable.addRange(fieldnum(ledgerJournalTable,JournalNum));
        qbdsJournalTrans.addRange(fieldnum(ledgerJournalTrans, TransDate));

        queryRun = new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if journal is blocked.
    /// </summary>
    /// <param name = "_journalTable">The ledger journal header record.</param>
    /// <returns>true if journal is blocked; false otherwise.</returns>
    public boolean checkJournalTable(LedgerJournalTable _journalTable)
    {
        if (!_journalTable.checkNotUserBlocked() 
            || !_journalTable.checkNotGroupBlocked()
            || !_journalTable.checkNotSystemBlocked())
        {
            return checkFailed("@ExtendedItallianLocalization:CannotProcessJournal");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        this.addDialogControls();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        this.buildQuery();

        verbose = true;
        reopen = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
         super();

         this.buildQuery();

        journalTableList = new recordSortedList(tablenum(LedgerJournalTable));
        journalTableList.sortOrder(fieldnum(LedgerJournalTable,JournalNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, verbose, reopen, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>performJourAction</Name>
				<Source><![CDATA[
    protected abstract void performJourAction(ledgerJournalTable _journal)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes journal list.
    /// </summary>
    public void processJournalList()
    {
        if (journalTableList.len())
        {
            LedgerJournalTable ledgerJournalTableLocal;
            boolean MoreTrans = journalTableList.first(ledgerJournalTableLocal);

            while (moreTrans)
            {
                try
                {
                    ttsbegin;

                    if (verbose)
                    {
                        setprefix(strfmt("@ExtendedItallianLocalization:SimulationJournal", ledgerJournalTableLocal.JournalNum));
                    }

                    if (this.checkJournalTable(ledgerJournalTableLocal))
                    {
                        this.performJourAction(ledgerJournalTableLocal);
                    }

                    ttscommit;
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch
                {
                    error("@SYS18447");
                }

                moreTrans = journalTableList.next(ledgerJournalTableLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query progress.
    /// </summary>
    /// <param name = "_queryRun">The <c>QueryRun</c> object.</param>
    /// <returns>The query progress.</returns>
    protected int progressTotal(QueryRun _queryRun)
    {
        Query queryProgress = new Query();
        QueryRun queryRunProgress;

        SysQuery::mergeRanges(queryProgress, _queryRun.query(), 1);
        queryRunProgress = new QueryRun(queryProgress);

        return SysQuery::countTotal(queryRunProgress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ledger journals and processes them.
    /// </summary>
    public void run()
    {
        #macrolib.AviFiles
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans;
        Counter progressTotal = this.progressTotal(queryRun);

        this.progressInit("@SYS19775", progressTotal, #AviFindFile);

        queryRun.query().dataSourceTable(tablenum(ledgerJournalTable)).addRange(fieldnum(ledgerJournalTable,Posted)).value(queryValue(NoYes::No));

        setprefix(this.caption());

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(ledgerJournalTable)))
            {
                ledgerJournalTable = queryRun.get(tablenum(LedgerJournalTable));
            }

            if (queryRun.changed(tablenum(LedgerJournalTrans)))
            {
                ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));
                journalTableList.ins(ledgerJournalTrans.ledgerJournalTable(),true);
            }
        }

        this.processJournalList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showClearButton</Name>
				<Source><![CDATA[
    public boolean showClearButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret = true;
        Integer version = conpeek(packedClass,1);
        container packedQuery;

        switch (version)
        {
            case CurrentVersion :
                [version, verbose, reopen, packedQuery] = packedClass;

                if (sysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }

                break;
            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>