<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqIntercompanyConversionUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqIntercompanyConversionUtil</c> class performs data conversions for enabling the
///    intercompany functionality.
/// </summary>
class ReqIntercompanyConversionUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertDeliveryMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts the delivery mode.
    /// </summary>
    /// <param name="_reqPO">
    ///     The planned order.
    /// </param>
    /// <returns>
    ///     The delivery mode.
    /// </returns>
    public DlvModeId convertDeliveryMode(ReqPO _reqPO)
    {
        TradeInterCompanyConv           convertor;
        InterCompanyTradingValueMap     fromValueMap;
        InterCompanyTradingValueMap     toValueMap;
        VendTable                       vendor;
        CustTable                       customer;
        DlvModeId                       result;
        SysInfologLevel                 prevLevel;

        customer = this.findCustomerInVendorCompany(_reqPO);

        changecompany (_reqPO.company())
        {
            vendor = VendTable::find(_reqPO.VendId);

            if (vendor.DlvMode)
            {
                fromValueMap = vendor.interCompanyTradingPartner().interCompanyTradingValueMap();
                toValueMap = customer.interCompanyTradingPartner().interCompanyTradingValueMap();

                convertor = TradeInterCompanyConv::construct();
                convertor.axDlvModeId(fromValueMap, vendor.DlvMode);
            }
        }

        if (convertor)
        {
            try
            {
                prevLevel = infolog.infologLevel();
                infolog.setInfoLogLevel(SysInfologLevel::None);

                result = convertor.axDlvModeId(toValueMap);
                infolog.setInfoLogLevel(prevLevel);
            }
            catch
            {
                infolog.setInfoLogLevel(prevLevel);
                return result;
            }
        }

        if (!result)
        {
            result = customer.DlvMode;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the item ID in the upstream vendor company.
    /// </summary>
    /// <param name="_reqPO">
    ///     The planned order in the downstream customer company.
    /// </param>
    /// <returns>
    ///     The ID of the item.
    /// </returns>
    public ItemId convertItemId(ReqPO _reqPO)
    {
        return this.findItemInVendorCompany(_reqPO.ItemId, _reqPO.DataAreaId).ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts the quantity according to the unit of measure conversion setup between companies.
    /// </summary>
    /// <param name="_reqPO">
    ///     The planned order.
    /// </param>
    /// <returns>
    ///     The converted quantity.
    /// </returns>
    public ReqQty convertQty(ReqPO _reqPO)
    {
        InventTableModule inventTableModule;
        InventTable       itemInVendorCompany;

        itemInVendorCompany = this.findItemInVendorCompany(_reqPO.ItemId, _reqPO.dataAreaId);

        select firstonly crossCompany UnitId from inventTableModule
            where   inventTableModule.ItemId        == _reqPO.ItemId
            &&      inventTableModule.DataAreaId    == _reqPO.DataAreaId
            &&      inventTableModule.ModuleType    == ModuleInventPurchSales::Invent;

        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(itemInVendorCompany.ItemId,
                                                                                     this.productDimension(_reqPO).InventDimId,
                                                                                     _reqPO.Qty,
                                                                                     inventTableModule.UnitId,
                                                                                     InventTableModule::find(itemInVendorCompany.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                     NoYes::Yes,
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertReqDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts the requirement date adjusting it with the lead time in the upstream vendor company.
    /// </summary>
    /// <param name="_reqPO">
    ///     The planned order.
    /// </param>
    /// <returns>
    ///     The converted date.
    /// </returns>
    public ReqDate convertReqDate(ReqPO _reqPO)
    {
        SalesLine salesLineTemp;
        SalesCalcAvailableDlvDates salesCalcAvailableDlvDates;
        InventDim inventDim;

        salesLineTemp.DlvMode = this.convertDeliveryMode(_reqPO);
        if (!salesLineTemp.DlvMode)
        {
            return _reqPO.ReqDate;
        }

        inventDim.InventSiteId = this.convertSiteId(_reqPO);
        inventDim.InventLocationId = this.convertWarehouseId(_reqPO);
        inventDim = InventDim::findOrCreate(inventDim);

        salesLineTemp.InventDimId = inventDim.InventDimId;
        salesLineTemp.ReceiptDateRequested = _reqPO.ReqDateDlv;
        salesLineTemp.DeliveryPostalAddress = this.findDeliveryAddress(_reqPO);
        salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(salesLineTemp);
        salesCalcAvailableDlvDates.createPossibleShippingAndReceiptDates(true);

        return salesCalcAvailableDlvDates.parmSalesAvailableDlvDatesTmp().AvailableShippingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the default site in the upstream vendor company.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order.
    /// </param>
    /// <returns>
    ///    The ID of the site.
    /// </returns>
    public InventSiteId convertSiteId(ReqPO _reqPO)
    {
        InventSiteId siteId;

        siteId = this.findCustomerInVendorCompany(_reqPO).InventSiteId;

        if (!siteId)
        {
            siteId = this.findItemInVendorCompany(_reqPO.ItemId, _reqPO.DataAreaId)
                .inventItemSalesSetup(this.productDimension(_reqPO).inventDimId).inventDimDefault().InventSiteId;
        }

        return siteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an InventDim record with the product dimension values set from a planned order.
    /// </summary>
    /// <param name = "_reqPO">The planned order to use for input.</param>
    /// <returns>An <c>InventDim</c> record with the product dimension values set.</returns>
    private InventDim productDimension(ReqPO _reqPO)
    {
        InventDim inventDim;

        changecompany (_reqPO.company())
        {
            inventDim.initFromInventDim(_reqPO.inventDim(), InventDim::dimProductDimFieldList());
        }

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertWarehouseId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the default warehouse ID in the upstream vendor company.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order.
    /// </param>
    /// <returns>
    ///    The warehouse ID.
    /// </returns>
    public InventLocationId convertWarehouseId(ReqPO _reqPO)
    {
        InventSiteId siteIdInVendorCompany;
        InventTable itemInVendorCompany;
        InventDim   inventDimInVendorCompany;
        InventDim   defaultDimensionsOnSiteSpecificSettings;
        InventLocationId warehouseId;

        warehouseId = this.findCustomerInVendorCompany(_reqPO).InventLocation;

        if (!warehouseId)
        {
            itemInVendorCompany = this.findItemInVendorCompany(_reqPO.ItemId, _reqPO.DataAreaId);
            siteIdInVendorCompany = this.convertSiteId(_reqPO);

            if (siteIdInVendorCompany)
            {
                inventDimInVendorCompany = this.productDimension(_reqPO);
                inventDimInVendorCompany.InventSiteId = siteIdInVendorCompany;
                inventDimInVendorCompany = InventDim::findOrCreate(inventDimInVendorCompany);

                defaultDimensionsOnSiteSpecificSettings = InventDim::find(
                    itemInVendorCompany.inventItemSalesSetup(inventDimInVendorCompany.InventDimId).InventDimIdDefault);

                warehouseId = defaultDimensionsOnSiteSpecificSettings.InventLocationId;
            }
        }

        return warehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustomerInVendorCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the customer record in the upstream vendor company.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order in the downstream customer company.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustTable</c> table.
    /// </returns>
    private CustTable findCustomerInVendorCompany(ReqPO _reqPO)
    {
        VendTable vendorInCustomerCompany;
        ReqIntercompanyQueryFactory queryFactory = ReqIntercompanyQueryFactory::construct();

        vendorInCustomerCompany = VendTable::findByCompany(_reqPO.DataAreaId, _reqPO.VendId);

        return queryFactory.findCustomer(vendorInCustomerCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultCompanyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the default delivery address of the downstream customer company.
    /// </summary>
    /// <returns>
    ///     The default delivery address of the downstream customer company.
    /// </returns>
    public LogisticsPostalAddressRecId findDefaultCompanyAddress()
    {
        PurchTable purchTableTemp;

        purchTableTemp.setDefaultDeliveryAddress();

        return purchTableTemp.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultSiteAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the default delivery address of the site.
    /// </summary>
    /// <param name="_siteId">
    ///     The ID of the site.
    /// </param>
    /// <returns>
    ///     The default delivery address of the site.
    /// </returns>
    public LogisticsPostalAddressRecId findDefaultSiteAddress(InventSiteId _siteId)
    {
        PurchTable purchTableTemp;

        purchTableTemp.setAddressFromInventSiteId(_siteId);

        return purchTableTemp.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultWarehouseAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the default delivery address of the warehouse.
    /// </summary>
    /// <param name="_warehouseId">
    ///     The warehouse ID.
    /// </param>
    /// <returns>
    ///     The default delivery address of the warehouse.
    /// </returns>
    public LogisticsPostalAddressRecId findDefaultWarehouseAddress(InventLocationId _warehouseId)
    {
        PurchTable purchTableTemp;

        purchTableTemp.setAddressFromInventLocationId(_warehouseId);

        return purchTableTemp.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDeliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the delivery address for the planned order.
    /// </summary>
    /// <param name="_reqPO">
    ///     The planned order.
    /// </param>
    /// <returns>
    ///     The delivery address for the planned order.
    /// </returns>
    public LogisticsPostalAddressRecId findDeliveryAddress(ReqPO _reqPO)
    {
        InventDim inventDim;
        LogisticsPostalAddressRecId address;

        changecompany (_reqPO.company())
        {
            inventDim = _reqPO.inventDim();
            if (!inventDim.InventLocationId)
            {
                inventDim.InventLocationId = VendTable::find(_reqPO.VendId).InventLocation;
            }

            if (inventDim.InventLocationId)
            {
                address = this.findDefaultWarehouseAddress(inventDim.InventLocationId);
            }

            if (!address && inventDim.InventSiteId)
            {
                address = this.findDefaultSiteAddress(inventDim.InventSiteId);
            }

            if (!address)
            {
                address = this.findDefaultCompanyAddress();
            }
        }

        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemInVendorCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the item in the upstream vendor company.
    /// </summary>
    /// <param name="_itemIdInCustomerCompany">
    ///    The ID of the item in the downstream customer company.
    /// </param>
    /// <param name="_customerCompanyId">
    ///    The ID of the downstream customer company.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventTable</c> table.
    /// </returns>
    private InventTable findItemInVendorCompany(ItemId _itemIdInCustomerCompany, dataAreaId _customerCompanyId)
    {
        EcoResProductRecId productId;
        InventTable itemInVendorCompany;

        productId = InventTable::findInLegalEntity(_itemIdInCustomerCompany, _customerCompanyId).Product;
        itemInVendorCompany = InventTable::findByProduct(productId);

        return itemInVendorCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProductNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the product number of the product that is associated with the item that is used in the
    ///    planned order.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order in the downstream customer company.
    /// </param>
    /// <returns>
    ///    The product number.
    /// </returns>
    public EcoResProductNumber findProductNumber(ReqPO _reqPO)
    {
        EcoResProductRecId productId;

        productId = InventTable::findInLegalEntity(_reqPO.itemId, _reqPO.dataAreaId).Product;

        return EcoResProductIdentifier::findByProduct(productId).ProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerCWUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the unit of measure symbol that is used in the downstream customer company.
    /// </summary>
    /// <param name="_reqPO">
    ///     The planned order.
    /// </param>
    /// <returns>
    ///     The unit of measure symbol.
    /// </returns>
    public UnitOfMeasureSymbol getCustomerCWUnitOfMeasure(ReqPO _reqPO)
    {
        changecompany(_reqPO.company())
        {
            return PdsCatchWeight::cwUnitId(_reqPO.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerInventUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the unit of measure symbol that is used in the downstream customer company.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order.
    /// </param>
    /// <returns>
    ///    The unit of measure symbol.
    /// </returns>
    public UnitOfMeasureSymbol getCustomerInventUnitOfMeasure(ReqPO _reqPO)
    {
        changecompany(_reqPO.company())
        {
            return InventTable::find(_reqPO.ItemId).inventTableModuleInvent().UnitId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerLegalEntityDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description of the downstream customer company.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order.
    /// </param>
    /// <returns>
    ///    The company description.
    /// </returns>
    public DataAreaName getCustomerLegalEntityDescription(ReqPO _reqPO)
    {
        DataArea dataArea;
        
        select dataArea where dataArea.Id == _reqPO.DataAreaId;

        return dataArea.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerReqPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ID of the master plan in the downstream customer company.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order.
    /// </param>
    /// <returns>
    ///    The master plan ID.
    /// </returns>
    public ReqPlanId getCustomerReqPlanId(ReqPO _reqPO)
    {
        changecompany(_reqPO.company())
        {
            return ReqPlanVersion::find(_reqPO.PlanVersion).ReqPlanId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the site ID in the downstream customer company.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order.
    /// </param>
    /// <returns>
    ///    The site ID.
    /// </returns>
    public InventSiteId getCustomerSiteId(ReqPO _reqPO)
    {
        changecompany(_reqPO.company())
        {
            return _reqPO.inventDim().InventSiteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerWarehouseId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the warehouse ID in the downstream customer company.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order.
    /// </param>
    /// <returns>
    ///    The warehouse ID.
    /// </returns>
    public InventLocationId getCustomerWarehouseId(ReqPO _reqPO)
    {
        changecompany(_reqPO.company())
        {
            return _reqPO.inventDim().InventLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of the product dimension.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order.
    /// </param>
    /// <param name="_dimensionFieldId">
    ///    The ID of the dimension field.
    /// </param>
    /// <returns>
    ///    The value of the product dimension.
    /// </returns>
    public anytype getDimensionValue(ReqPO _reqPO, fieldId _dimensionFieldId)
    {
        changecompany(_reqPO.company())
        {
            return _reqPO.inventDim().(_dimensionFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified product dimension is active.
    /// </summary>
    /// <param name="_reqPO">
    ///     The planned order.
    /// </param>
    /// <param name="_dimensionFieldId">
    ///     The ID of the dimension field.
    /// </param>
    /// <returns>
    ///     true of the product dimension is active; otherwise, false.
    /// </returns>
    public boolean isDimensionActive(ReqPO _reqPO, fieldId _dimensionFieldId)
    {
        InventTable itemInCustomerCompany;
        InventDimGroupFieldSetup dimensionFieldSetup;

        itemInCustomerCompany = InventTable::findInLegalEntity(_reqPO.ItemId, _reqPO.DataAreaId);

        dimensionFieldSetup = InventDimGroupSetup::newInventTable(itemInCustomerCompany).getFieldSetup(_dimensionFieldId);

        return dimensionFieldSetup.isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConvertWarehouseId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the warehouse dimension is coverage planned.
    /// </summary>
    /// <param name="_reqPO">
    ///     The planned order.
    /// </param>
    /// <returns>
    ///     true if the warehouse dimension is coverage planned; otherwise, false.
    /// </returns>
    public boolean mustConvertWarehouseId(ReqPO _reqPO)
    {
        InventTable itemInVendorCompany;
        InventDimGroupFieldSetup warehouseFieldSetup;

        itemInVendorCompany = this.findItemInVendorCompany(_reqPO.ItemId, _reqPO.DataAreaId);

        warehouseFieldSetup = InventDimGroupSetup::newInventTable(itemInVendorCompany).getFieldSetup(fieldnum(InventDim, InventLocationId));

        return warehouseFieldSetup.isCoveragePlanByDimensionEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqIntercompanyConversionUtil construct()
    {
        return new ReqIntercompanyConversionUtil();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>