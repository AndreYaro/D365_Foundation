<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormletterProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesFormletterProvider extends FormletterProvider
{
    SalesTable salesTable;
    SalesLine salesLine;
    SalesTotals salesTotals;

    // <GIN><GEERU>
    #ISOCountryRegionCodes
    // </GEERU></GIN>
    // <GEERU>
    boolean isCountryRegionRU;
    // </GEERU>
    // <GIN>
    boolean isCountryRegionIN;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger dimension default account that is used for posting cash discount.
    /// </summary>
    /// <returns>
    /// The ledger dimension default account that is used for posting cash discount.
    /// </returns>
    public LedgerDimensionDefaultAccount cashDiscountLedgerDimension()
    {
        return CashDisc::find(salesTable.CashDisc).PaidLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBlockedLevel</Name>
				<Source><![CDATA[
    protected boolean  checkBlockedLevel()
    {
        boolean  ok = true;

        if (!CustTable::canCustomerBeUpdated(salesTable.CustAccount, salesTable.InvoiceAccount, this.parmDocumentStatus()))
            ok = checkFailed(strFmt("@SYS7987",salesTable.CustAccount));

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDrawbackFields_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the CustomsTariffCodeTable, EximPorts and EximProductGroupTable fields are not blank.
    /// </summary>
    /// <param name="_salesParmLineRecId">
    ///    RecId of the SalesParmLine table.
    /// </param>
    /// <returns>
    ///   true if CustomsTariffCodeTable, EximPorts and EximProductGroupTable fields are not blank otherwise false.
    /// </returns>
    private boolean checkDrawbackFields_IN(RecId _salesParmLineRecId)
    {
        boolean ret = true;

        EximSalesParmLine_IN eximSalesParmLine = EximSalesParmLine_IN::findBySalesParmLineRecId(_salesParmLineRecId);

        if (eximSalesParmLine && eximSalesParmLine.dbkCenvatStatus != EximDBKCenvatStatus_IN::None)
        {
            if (!eximSalesParmLine.CustomsTariffCodeTable)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(EximSalesParmLine_IN, CustomsTariffCodeTable)));
            }
            else if (!eximSalesParmLine.EximPorts)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(EximSalesParmLine_IN, EximPorts)));
            }
            else if (!eximSalesParmLine.EximProductGroupTable)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(EximSalesParmLine_IN, EximProductGroupTable)));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFormLetterId_IN</Name>
				<Source><![CDATA[
    private boolean  checkFormLetterId_IN()
    {
        boolean ok = true;

        SalesParmTable salesParmTableLoc = this.parmParmTable();
        SalesParmUpdate salesParmUpdateLoc = this.parmParmUpdate();

        if ((salesParmUpdateLoc.CustomsShippingBill_IN == NoYes::Yes && !salesParmUpdateLoc.CustomsShippingBillNumberTable_IN) ||
            (salesParmUpdateLoc.CustomsShippingBill_IN == NoYes::No  && salesParmTableLoc.RecId && !salesParmTableLoc.CustomsShippingBillNumberTable_IN))
        {
            ok = checkFailed(strFmt(this.missingNumber_IN(), salesParmTableLoc.SalesId));
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHeading</Name>
				<Source><![CDATA[
    protected boolean  checkHeading()
    {
        boolean  ok = true;
        SalesParmTable salesParmTable;

        if (! salesTable.RecId)
            ok = checkFailed(strFmt("@SYS15067",salesTable.SalesId));

        if (! salesTable.CustAccount)
            ok = checkFailed(strFmt("@SYS17565",salesTable.SalesId));

        if (! CustTable::exist(salesTable.CustAccount))
            ok = checkFailed(strFmt("@SYS17163",salesTable.CustAccount,salesTable.SalesId));

        if (! salesTable.InvoiceAccount)
            ok = checkFailed(strFmt("@SYS17564",salesTable.SalesId));

        if (! CustTable::exist(salesTable.InvoiceAccount))
            ok = checkFailed(strFmt("@SYS17704",salesTable.InvoiceAccount,salesTable.SalesId));

        if (salesTable.CurrencyCode && ! Currency::exist(salesTable.CurrencyCode))
            ok = checkFailed(strFmt("@SYS20790",salesTable.CurrencyCode,salesTable.SalesId));

        if (! salesTable.checkPaymMode())
        {
            var creditCardCust = CreditCardCust::find(salesTable.CreditCardCustRefId);
            var creditCardProcessors = CreditCardProcessors::find(creditCardCust.CreditCardProcessors);
            ok = checkFailed(strFmt("@SYS327527", creditCardProcessors.Name, salesTable.CurrencyCode));
        }

        if (FeatureStateProvider::isFeatureEnabled(CustSaleOrderNotInvoicedIfNoCCNumFlight::instance())
            && !salesTable.checkCreditCard())
        {
            ok = false;
        }

        if (parmTable.TableId == tableNum(SalesParmTable))
        {
            salesParmTable = parmTable;
            SalesParmUpdate salesParmUpdate = parmUpdate;

            if (salesTable.CustAccount != salesParmTable.CustAccount
                && salesParmUpdate.SumBy != AccountOrder::Auto
                && salesParmUpdate.SumBy != AccountOrder::Account)
            {
                ok = checkFailed(strFmt("@AccountsReceivable:CustomerAccountMismatch",
                    salesTable.CustAccount,
                    salesParmTable.CustAccount));
            }

            if (salesTable.InvoiceAccount != salesParmTable.InvoiceAccount)
            {
                ok = checkFailed(strFmt("@AccountsReceivable:CustomerInvoiceAccountMismatch",
                    salesTable.InvoiceAccount,
                    salesParmTable.InvoiceAccount));
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            SalesParmUpdate salesParmUpdate = parmUpdate;
            boolean addProformaCheck;

            addProformaCheck = salesParmUpdate.proforma;

            // Check for ship complete
            // Do not make a pick list if the order is not complete (if shipcomplete is on)
            // Do not go to check if reservation is checked during the creation of a Picking list
            if (documentStatus != DocumentStatus::Confirmation && !salesParmUpdate.Reserve && !salesTable.mcrCheckShipComplete()
                && !addProformaCheck)
            {
                ok = checkFailed(strFmt("@MCR12672", salesTable.SalesId));
            }
        }

        if (salesTable.Payment && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            PaymTerm paymTerm = PaymTerm::find(salesTable.Payment);
            if (!salesTable.ReceiptDateConfirmed && paymTerm.UseDeliveryDateForDueDate_ES)
            {
                ok = checkFailed(strFmt("@SYS4000478", salesTable.Payment));
            }
            else
                {
                if (parmTable.TableId == tableNum(SalesParmTable))
                {
                    if (salesParmTable.FixedDueDate)
                    {
                        TransDate deliveryDate = paymTerm.UseDeliveryDateForDueDate_ES ? salesTable.ReceiptDateConfirmed : salesParmTable.DocumentDate;
                        if (!deliveryDate)
                        {
                            deliveryDate = salesParmTable.Transdate;
                        }

                        TransDate lastValidDate = PaymDueDateLimit_ES::getDueDateLimitSalesParm(
                            paymTerm.DueDateLimitGroupId_ES,
                            deliveryDate,
                            salesTable.SalesId,
                            salesParmTable.ParmId).getLastValidDate(deliveryDate);

                        if (salesParmTable.FixedDueDate > lastValidDate)
                        {
                            ok = checkFailed("@SYS4001054");
                        }
                    }
                }
            }
        }

        // <GEERU>
        if (isCountryRegionRU)
        {
            if (!salesTable.checkMarkupTrans_RU())
            {
                ok = false;
            }

            ok = this.checkInvoicePostingType_RU() && ok;
        }
        // </GEERU>

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            ok = salesTable.checkIntrastatFulfillDate_HU() && ok;
        }
        // </GEEHU>

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoicePostingType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the <c>InvoicePostingType_RU</c> field for the <c>SalesTable_RU</c> table.
    /// </summary>
    /// <returns>
    ///     true if the field <c>InvoicePostingType_RU</c> is valid; otherwise, false.
    /// </returns>
    protected boolean checkInvoicePostingType_RU()
    {
        boolean     ok = true;
        SalesTable  salesTableLocal;
        MarkupTrans markupTrans;
        MarkupTable markupTable;

        SalesTable_RU salesTableRU = salesTable.salesTable_RU();

        if (salesTableRU.InvoicePostingType_RU == SalesInvoicePostingType_RU::GoodsInRoute)
        {
            if (! TaxParameters::find().TaxSpecifyLine)
            {
                ok = checkFailed(strFmt("@GLS114825", "@SYS21908", "@SYS24097"));
            }

            if (! TaxParameters::find().TaxSpecPosting_RU)
            {
                ok = checkFailed(strFmt("@GLS114825", "@GLS102490", "@SYS24097"));
            }

            if (salesTable.payment().Cash == NoYes::Yes)
            {
                ok = checkFailed("@GLS114805");
            }

            ok = ok && InventProfile_RU::checkGITProfileType(salesTableRU.InventProfileType_RU);

            if (salesTable.ProjId)
            {
                ok = checkFailed("@GLS114826");
            }

            while select InterCompanyOrder, RecId from salesTableLocal
                where salesTableLocal.SalesId == salesTable.SalesId
            {
                if (salesTableLocal.InterCompanyOrder)
                {
                    ok = checkFailed("@GLS114827");
                    break;
                }

                while select RecId from markupTrans
                    where markupTrans.TransTableId  == salesTableLocal.TableId
                       && markupTrans.TransRecId    == salesTableLocal.RecId
                       && (! salesTotals.parmGoodsInRouteId_RU() || markupTrans.GoodsInRouteId_RU == salesTotals.parmGoodsInRouteId_RU())
                join CustType, UseCustPostingTypeTransit_RU from markupTable
                    where markupTable.MarkupCode    == markupTrans.MarkupCode
                {
                    if (markupTable.CustType                        == MarkupType::CustVend &&
                        markupTable.UseCustPostingTypeTransit_RU    == NoYes::No)
                    {
                        ok = checkFailed(strFmt("@GLS114824", "@GLS114783"));
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal is valid.
    /// </summary>
    /// <returns>
    /// true if the journal is valid; otherwise, false.
    /// </returns>
    public boolean checkJournal()
    {
        boolean  ok = true;

        salesTotals = this.parmTotals();

        ttsbegin;   // In transactions in order to get enforce selection of eg. CustTable
        if (! this.checkHeading()      ||
            ! this.checkBlockedLevel() ||
            ! this.checkLines())
        {
            ok = false;
        }

        setPrefix(strFmt("@SYS76767", salesTable.SalesId));

        if (this.creditMaxExceededLimit())
        {
            // <GEERU>
            if (isCountryRegionRU)
            {
                ok = CustParameters::find().CreditLineError != CreditLineErrorType::Error;
            }
            else
            {
                // </GEERU>
                if (ok && CustParameters::find().CreditLineError == CreditLineErrorType::Error)
                {
                    ok = false;
                }
                // <GEERU>
            }
            // </GEERU>
        }

        // <GIN>
        if (!isCountryRegionRU
            && TaxParameters::checkTaxParameters_IN()
            && this.parmDocumentStatus() == DocumentStatus::ShippingBill_IN)
        {
            ok = this.checkFormLetterId_IN();
        }
        // </GIN>

        ttscommit;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMaxExceededLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the credit max exceeded the limit.
    /// </summary>
    /// <returns>true if credit max has exceeded the limit; false, otherwise.</returns>
    protected boolean creditMaxExceededLimit()
    {
        return !this.creditMaxOk(salesTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineInvoicePostingType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the <c>InvoicePostingType_RU</c> field for the <c>SalesParmTable</c> table
    ///     in conjunction with <c>SalesParmLine</c> table and <c>SalesLine</c> table.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     A table buffer that contains the <c>SalesParmLine</c> record.
    /// </param>
    /// <param name="_salesLine">
    ///     A table buffer that contains the <c>SalesLine</c> record; optional.
    /// </param>
    /// <returns>
    ///     true if the field <c>InvoicePostingType_RU</c> is valid; otherwise, false.
    /// </returns>
    protected boolean checkLineInvoicePostingType_RU(SalesParmLine _salesParmLine, SalesLine _salesLine = _salesParmLine.salesLine())
    {
        boolean         ok = true;
        MarkupTrans     markupTrans;
        MarkupTable     markupTable;
        SalesParmTable  salesParmTable = _salesParmLine.salesParmTable();

        if (salesParmTable.InvoicePostingType_RU == SalesInvoicePostingType_RU::GoodsInRoute)
        {
            if (_salesParmLine.DeliverNow < 0 && ! salesParmTable.DocumentStornoId_RU)
            {
                ok = checkFailed("@GLS114822");
            }

            InventTable inventTableLocal = InventTable::find(_salesParmLine.ItemId);
            if (inventTableLocal.ItemType == ItemType::Service || inventTableLocal.AssetGroupId_RU)
            {
                ok = checkFailed(strFmt("@GLS114823", "@SYS25500", "@SYS12578"));
            }

            while select RecId from markupTrans
                where markupTrans.TransTableId  == _salesLine.TableId
                   && markupTrans.TransRecId    == _salesLine.RecId
                   && (! salesParmTable.GoodsInRouteId_RU || markupTrans.GoodsInRouteId_RU == salesParmTable.GoodsInRouteId_RU)
            join CustType, UseCustPostingTypeTransit_RU from markupTable
                where markupTable.MarkupCode    == markupTrans.MarkupCode
            {
                if (markupTable.CustType                        == MarkupType::CustVend &&
                    markupTable.UseCustPostingTypeTransit_RU    == NoYes::No)
                {
                    ok = checkFailed(strFmt("@GLS114824", "@GLS114783"));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLines</Name>
				<Source><![CDATA[
    protected boolean  checkLines()
    {
        SalesParmLine       salesParmLineCheck;
        boolean             ok = true;
        boolean             validatePeggingReceived;
        boolean             isConfigurationkeyLeanEnabled = isConfigurationkeyEnabled(configurationKeyNum(LeanManufacturing));
        // <GEERU>
        #ISOCountryRegionCodes
        RAssetStandards     assetStandards;
        // </GEERU>

        switch (this.parmDocumentStatus())
        {
            case DocumentStatus::None:
            case DocumentStatus::Quotation:
            case DocumentStatus::PurchaseOrder:
            case DocumentStatus::Confirmation:
            case DocumentStatus::PickingList:
                validatePeggingReceived = false;
                break;

            default:
                validatePeggingReceived = true;
        }

        if (salesTable.ProjId)
        {
            ok = this.checkProjectSalesTable();
        }
        else
        {
            RecordSortedList recordListSalesParmLine = salesTotals.recordSortedListLine();

            setPrefix(#PreFixField(Salesline, LineNum));

            if (! SalesLine::exist(salesTable.SalesId))
            {
                ok = checkFailed("@SYS16741");
            }

            salesParmLineCheck.clear();

            recordListSalesParmLine.first(salesParmLineCheck);

            while (salesParmLineCheck)
            {
                if (salesParmLineCheck.ItemId && !InventTable::exist(salesParmLineCheck.ItemId))
                {
                    ok = checkFailed(strFmt("@SYS20812", salesParmLineCheck.ItemId));
                }

                SalesLine salesLineCheck = salesParmLineCheck.salesLine();

                // <GEERU>
                if (isCountryRegionRU &&
                    salesLineCheck.AssetId_RU)
                {
                    while select AssetStandardId from assetStandards
                        where assetStandards.AssetId == salesLineCheck.AssetId_RU
                    {
                        RAssetOperationType rAssetOperationType = RAssetOperationType::construct(
                            RAssetTransType::DisposalSale,
                            salesLineCheck,
                            parmTable.(fieldNum(SalesParmTable, Transdate)),
                            assetStandards.AssetStandardId);

                        if (! rAssetOperationType.check())
                            return false;
                    }
                }

                if (isCountryRegionRU)
                {
                    ok = this.checkLineInvoicePostingType_RU(salesParmLineCheck, salesLineCheck) && ok;
                }
                // </GEERU>

                if (! this.checkSalesLineChanged(salesParmLineCheck, salesLineCheck))
                {
                    ok = false;
                }

                // only verify associated event kanbans in case the current line is not cancelled
                // or returned (posted with negative quantity)
                if (salesLineCheck.isStocked()
                    && isConfigurationkeyLeanEnabled
                    && salesParmLineCheck.InventNow > 0)
                {
                    if (ok && validatePeggingReceived)
                    {
                        ok = LeanRuleEvent::validateSalesParmLinePeggingReceived(salesParmLineCheck);
                    }
                }

                ok = ok && this.checkSalesLine(salesParmLineCheck, salesLineCheck);

                if (! recordListSalesParmLine.next(salesParmLineCheck))
                {
                    break;
                }
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjectSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the project related sales order header and lines are valid.
    /// </summary>
    /// <returns>
    ///   true if the sales order is valid; otherwise, false.
    /// </returns>
    protected boolean checkProjectSalesTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the sales order line is valid.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     A table buffer that contains the <c>SalesParmLine</c> record.
    /// </param>
    /// <param name="_salesLine">
    ///     A table buffer that contains the <c>SalesLine</c> record.
    /// </param>
    /// <returns>
    ///   true if the sales order line is valid; otherwise, false.
    /// </returns>
    protected boolean checkSalesLine(SalesParmLine _salesParmLine, SalesLine _salesLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLineChanged</Name>
				<Source><![CDATA[
    protected boolean  checkSalesLineChanged(SalesParmLine _salesParmLine, SalesLine _salesLine)
    {// <GIN>
        if (isCountryRegionIN
             && this.parmDocumentStatus() == DocumentStatus::ShippingBill_IN)
        {
            return true;
        }
        // </GIN>

        SalesFormletterParmData parmData = this.constructAndInitializeSalesFormletterParmData(_salesLine, _salesParmLine);

        _salesParmLine.revertPreviousVersionChanges(_salesLine);

        SalesQty    remainBefore;
        InventQty   remainBeforeInvent;
        Qty         dummy;

        [dummy, remainBefore      , dummy] = parmData.qtySales (_salesLine, naReal());
        [dummy, remainBeforeInvent, dummy] = parmData.qtyInvent(_salesLine, naReal());

        boolean ok = true;
        if (remainBefore       != _salesParmLine.RemainBefore ||
            remainBeforeInvent != _salesParmLine.RemainBeforeInvent)
        {
            ok = checkFailed(strFmt("@SYS78952", _salesParmLine.OrigSalesId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAndInitializeSalesFormletterParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and initializes a <c>SalesFormletterParmData</c> instance.
    /// </summary>
    /// <returns>A <c>SalesFormletterParmData</c> instance.</returns>
    protected SalesFormletterParmData constructAndInitializeSalesFormletterParmData(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        SalesFormletterParmData parmData = SalesFormletterParmData::newData(this.parmDocumentStatus(), versioningUpdateType);
        parmData.parmParmUpdate(this.parmParmUpdate());
        parmData.init();

        // <GEERU>
        if (isCountryRegionRU)
        {
            parmData.initSalesQuantityInventOwner_RU(_salesLine, _salesParmLine.InventOwnerId_RU);
        }
        // </GEERU>

        return parmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMaxOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicate if the sales total exceeded the credit limit.
    /// </summary>
    /// <param name = "_salesTotals">The sales total.</param>
    /// <returns>Boolean to indicate if the credit limit is exceeded.</returns>
    protected boolean creditMaxOk(SalesTotals  _salesTotals)
    {
        boolean             ret = true;

        if (this.mustCheckCreditLimit())
        {
            CustCreditLimit custCreditLimit = CustCreditLimit::construct(this.parmParmTable(), _salesTotals);

            boolean isEnableOrderCompletion = RetailMCRChannelTable::mcrEnableOrderCompletion(salesTable);
            boolean isCreditLimitErrorToggle = RetailCallCenterOrderCreditLimitErrorToggle::instance().isEnabled();

            // Credit limit error should not display for the below reasons.
            // When the order is call center order with enable order completion set to 'Yes'.
            // When order completion enabled not required to check credit limit functionality hence return true.
            if (documentStatus == DocumentStatus::Confirmation
                && !salesTable.MCROrderStopped
                && salesTable.mcrIsCallCenter()
                && (isEnableOrderCompletion || !isCreditLimitErrorToggle)
                )
            {
                custCreditLimit.mcrDisplayMessage(false);

                if (isCreditLimitErrorToggle)
                {
                    return true;
                }
            }

            ret = custCreditLimit.check();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return salesTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLedgerTransactionText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default ledger transaction text that is used during posting.
    /// </summary>
    /// <returns>
    /// The default ledger transaction text that is used during posting.
    /// </returns>
    public TransTxt defaultLedgerTransactionText()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>detailSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves which posting mode to use in ledger.
    /// </summary>
    /// <returns>
    /// The posting mode to use in ledger.
    /// </returns>
    public DetailSummary detailSummary()
    {
        //If the payment term option to post offsetting a/r entries is selected
        //then make sure this transaction posts in detail so records are present
        //in the general journal even if the offsetting entries cancel out.
        //This is an Italian legal requirement for their fiscal journal (GFR 11110)
        if (PaymTerm::find(salesTable.Payment, false).PostOffsettingAR == NoYes::Yes)
        {
            return DetailSummary::Detail;
        }
        else
        {
            return DetailSummary::Summary;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmLine_OrigOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the field that contains the original order ID in the posting parameter line
    /// table.
    /// </summary>
    /// <returns>
    /// The field ID.
    /// </returns>
    public FieldId fieldIdParmLine_OrigOrderId()
    {
        return fieldNum(SalesParmLine, OrigSalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmTable_OrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the field that contains the order ID in the posting parameter header table.
    /// </summary>
    /// <returns>
    /// The field ID.
    /// </returns>
    public FieldId fieldIdParmTable_OrderId()
    {
        return fieldNum(SalesParmTable, SalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedEuroTriangulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fixed euro triangulation value.
    /// </summary>
    /// <returns>
    /// The fixed euro triangulation value.
    /// </returns>
    public UnknownNoYes  fixedEuroTriangulation()
    {
        return salesTable.fixedEuroTriangulation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fixed exchange rate.
    /// </summary>
    /// <returns>
    /// The fixed exchange rate.
    /// </returns>
    public ExchRate fixedExchRate()
    {
        return salesTable.fixedExchRate(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyFixedExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency fixed exchange rate.
    /// </summary>
    /// <returns>The reporting currency fixed exchange rate.</returns>
    internal CustExchRate reportingCurrencyFixedExchangeRate()
    {
        return salesTable.reportingCurrencyFixedExchangeRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fixed secondary exchange rate.
    /// </summary>
    /// <returns>
    /// The fixed secondary exchange rate.
    /// </returns>
    public ExchrateSecondary fixedExchRateSecondary()
    {
        return salesTable.fixedExchRateSecondary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the sales line is inventoried.
    /// </summary>
    /// <returns>
    /// true if the sales line is inventoried; otherwise, false.
    /// </returns>
    public boolean isStocked()
    {
        return salesLine.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelPostingOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the posting text for an order.
    /// </summary>
    /// <param name="_orderId">
    /// An order ID.
    /// </param>
    /// <returns>
    /// The posting text.
    /// </returns>
    public str labelPostingOrder(Num _orderId)
    {
        return strFmt("@SYS76767", _orderId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LedgerDimensionDefaultAccount</c> value that is used for posting line amount.
    /// </summary>
    /// <returns>
    /// The <c>LedgerDimensionDefaultAccount</c> value that is used for posting line amount.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimensionLineAmount()
    {
        return salesLine.ledgerDimensionSales(salesLine.inventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionLineAmount_IT</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount ledgerDimensionLineAmount_IT(boolean _creditNote = false)
    {
        return salesLine.ledgerDimensionSales_IT(salesLine.inventTable(), _creditNote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransactionTextEndDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger transaction text to use for posting an end discount amount.
    /// </summary>
    /// <returns>
    /// The ledger transaction text to use for posting an end discount amount.
    /// </returns>
    public LedgerTransTxt ledgerTransactionTextEndDisc()
    {
        return LedgerTransTxt::SalesEndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransactionTextRoundOff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger transaction text to use for posting roundings.
    /// </summary>
    /// <returns>
    /// The ledger transaction text to used for posting roundings.
    /// </returns>
    public LedgerTransTxt ledgerTransactionTextRoundOff()
    {
        return LedgerTransTxt::CustRoundOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a ledger transaction type.
    /// </summary>
    /// <returns>
    /// A ledger transaction type.
    /// </returns>
    public LedgerTransType ledgerTransType()
    {
        return LedgerTransType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger account that is used for posting line amount.
    /// </summary>
    /// <returns>
    /// The ledger account that is used for posting line amount.
    /// </returns>
    public LedgerDimensionDefaultAccount lineAmountLedgerDimension()
    {
        return salesLine.accountSalesLedgerDimension(salesLine.inventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LedgerDimensionDefaultAccount</c> value that is used for posting cash discount.
    /// </summary>
    /// <returns>
    /// The <c>LedgerDimensionDefaultAccount</c> value that is used for posting cash discount.
    /// </returns>
    public LedgerDimensionDefaultAccount lineDiscountLedgerDimension()
    {
        return salesLine.accountDiscLedgerDimension(salesLine.inventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrBypassCreditLimit</Name>
				<Source><![CDATA[
    private boolean mcrBypassCreditLimit()
    {
        return McrCustPaymTable::salesTableByPassCreditLimit(salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>missingNumber_IN</Name>
				<Source><![CDATA[
    private str  missingNumber_IN()
    {
        return "@GLS5780";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckCreditLimit</Name>
				<Source><![CDATA[
    protected boolean mustCheckCreditLimit()
    {
        SalesParmUpdate salesParmUpdate = this.parmParmUpdate();

        // Don't do credit limit check when reducing (correcting or cancelling) packing slip quantity.
        // or if the sales order is created from retail cash and carry.
        // or if the scope is a simulate posting.
        // or when posting journals.
        return (this.parmVersioningUpdateType() != VersioningUpdateType::Cancel
                && this.parmVersioningUpdateType() != VersioningUpdateType::Correction
                && this.parmVersioningUpdateType() != VersioningUpdateType::Post
                && CustCreditLimit::mustCheckCreditLimit(salesTable, salesParmUpdate.CheckCreditMax)
                && salesParmUpdate.isCreditCheckEligible()
                && !salesTable.isRetailCashAndCarrySales()
                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        // <GEERU>
        isCountryRegionRU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        // <GIN>
        isCountryRegionIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceLine</Name>
				<Source><![CDATA[
    public Common parmSourceLine(Common _sourceLine = salesLine)
    {
        salesLine = _sourceLine;

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = salesTable)
    {
        salesTable = _sourceTable;

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the posting module.
    /// </summary>
    /// <returns>
    /// The posting module.
    /// </returns>
    public SysModule postingModule()
    {
        return SysModule::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCashDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for cash discount.
    /// </summary>
    /// <returns>
    /// The ledger posting type for cash discount.
    /// </returns>
    public LedgerPostingType postingTypeCashDiscount()
    {
        return LedgerPostingType::CustCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeEndDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for end discount.
    /// </summary>
    /// <returns>
    /// The ledger posting type for end discount.
    /// </returns>
    public LedgerPostingType postingTypeEndDiscount()
    {
        return LedgerPostingType::CustInvoiceDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for line amount.
    /// </summary>
    /// <returns>
    /// The ledger posting type for lineAmount.
    /// </returns>
    public LedgerPostingType postingTypeLineAmount()
    {
        return salesLine.postingSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for line discount.
    /// </summary>
    /// <returns>
    /// The ledger posting type for line discount.
    /// </returns>
    public LedgerPostingType postingTypeLineDiscount()
    {
        return LedgerPostingType::SalesDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeRoundOff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for round off.
    /// </summary>
    /// <returns>
    /// The ledger posting type for round off.
    /// </returns>
    public LedgerPostingType postingTypeRoundOff()
    {
        return LedgerPostingType::SalesRoundOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesFormletterProvider construct()
    {
        return new SalesFormletterProvider();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>