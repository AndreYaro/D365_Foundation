<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMassUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This abstract class <c>RetailMassUpdate</c> used while doing a bulk update
/// from a worksheet to the destination table
/// </summary>
public abstract class RetailMassUpdate extends RunBaseBatch
{
    int64 worksheetId;
    int64 recordsProcessed;
    boolean failed;
    FormDataSource worksheetTable;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        worksheetId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This Method builds the query run object to loop through all the records
    /// in the <c>RetailMassUpdateWorksheetLine</c> table that are concerned with the current worksheet.
    /// </summary>
    /// <returns>
    /// An instance of <c>QueryRun</c> class.
    /// </returns>
    protected QueryRun buildQuery()
    {
        RetailMassUpdateProductProperty property;
        RetailMassUpdateSelectedProperty selected;
        Query q;
        QueryBuildDataSource qbdParent;
        QueryBuildDataSource qbdChild;
        QueryBuildRange qbr;
        str lastDataSourceName;
        str dataSourceName = '';

        q = new Query();
        qbdParent = q.addDataSource(TableNum(RetailMassUpdateWorksheetLine));
        qbdParent.addSelectionField(fieldNum(RetailMassUpdateWorksheetLine, ItemId));
        qbdParent.addSelectionField(fieldNum(RetailMassUpdateWorksheetLine, EcoResProductTranslation));
        qbr = qbdParent.addRange(FieldNum(RetailMassUpdateWorksheetLine, RetailMassUpdateWorksheetTable));
        qbr.value(int642str(worksheetId));

        while select * from property
            join RecId from selected
            order by property.DestinationTableNum, property.ModuleInventPurchSales
            where selected.RetailMassUpdateWorksheetTable == worksheetId &&
                selected.RetailMassUpdateProductProperty == property.RecId
        {
            dataSourceName = property.GetDataSourceName();
            if (dataSourceName != lastDataSourceName)
            {
                qbdChild = qbdParent.addDataSource(int642int(property.DestinationTableNum), dataSourceName);
                qbdChild.update(true);
                qbdChild.relations(true);
                if (property.DestinationTableNum == tableNum(InventTableModule))
                {
                    qbdChild.addLink(fieldNum(RetailMassUpdateWorksheetLine, ItemId), fieldnum(InventTableModule, ItemId));
                    qbdChild.addRange(fieldNum(InventTableModule, ModuleType)).value(enum2str(property.ModuleInventPurchSales));
                }
                lastDataSourceName = dataSourceName;
            }
            qbdParent.addSelectionField(int642int(property.SourceFieldNum));
        }

        return new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is used to pass some info to the user once the job is run.
    /// </summary>
    /// <returns>
    /// Message in string format.
    /// </returns>
    protected abstract str finalMessage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of the  <c>RetailMassUpdate</c>class.
    /// </summary>
    public void new()
    {
        super();
        recordsProcessed = 0;
        failed = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextWorksheetStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the status of a pirticular worksheet.
    /// </summary>
    /// <returns>
    /// An enum value of <c>RetailMassUpdateStatus</c> type.
    /// </returns>
    protected abstract RetailMassUpdateStatus nextWorksheetStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorksheetId</Name>
				<Source><![CDATA[
    public int64 parmWorksheetId(int64 _worksheetId = worksheetId)
    {
        worksheetId = _worksheetId;
        return worksheetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorksheetTable</Name>
				<Source><![CDATA[
    public FormDataSource parmWorksheetTable(FormDataSource _worksheetTable = worksheetTable)
    {
        worksheetTable = _worksheetTable;
        return worksheetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method loops through the query run object and writes the data to corresponding destination tables.
    /// </summary>
    /// <param name="qr">
    /// The <c>QueryRun</c> object which is looped through to do the mass update.
    /// </param>
    protected void processQuery(QueryRun qr)
    {
        Common destinationTable;
        RetailMassUpdateWorksheetLine line;
        RetailMassUpdateProductProperty property;
        RetailMassUpdateSelectedProperty selected;
        str lastDataSourceName;
        str dataSourceName = '';
        int dataSourceNumber = 1;
        int64 iCountRows;

        Select COUNT(RecID) from line where line.RetailMassUpdateWorksheetTable == worksheetId;

        iCountRows = line.RecID;

        this.progressInit('Processing items...', iCountRows, #AviUpdate);

        while (qr.next())
        {
            destinationTable = null;
            lastDataSourceName = '';
            dataSourceNumber = 1;

            line = qr.get(tableNum(RetailMassUpdateWorksheetLine));

            while select * from property
                join RecId from selected
                order by property.DestinationTableNum, property.ModuleInventPurchSales
                where selected.RetailMassUpdateWorksheetTable == worksheetId &&
                selected.RetailMassUpdateProductProperty == property.RecId
            {
                progress.IncCount();

                dataSourceName = property.GetDataSourceName();
                if (dataSourceName != lastDataSourceName)
                {
                    if (property.DestinationTableNum == tableNum(InventTableModule))
                    {
                        destinationTable = qr.get(int642int(property.DestinationTableNum), dataSourceNumber);
                        dataSourceNumber++;
                    }
                    else
                    {
                        destinationTable = qr.get(int642int(property.DestinationTableNum));
                    }
                    lastDataSourceName = dataSourceName;
                }
                destinationTable.(int642int(property.DestinationFieldNum)) = line.(int642int(property.SourceFieldNum));

                this.processTableField(destinationTable, property, line);

                this.processTable(destinationTable, line.ItemId, '', line);
            }

            recordsProcessed++;
        }

        this.updateStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used to make an update on the table that is passed to it.
    /// </summary>
    /// <param name="destinationTable">
    /// The table where the update should take place ,passed as an object of <c>Common</c> type.
    /// </param>
    /// <param name="itemId">
    /// String conatining the Item's id whose inventory might be updated.
    /// </param>
    /// <param name="propertyDescription">
    /// A string which has a product description.
    /// </param>
    /// <param name="_line">
    /// A record for table <c>RetailMassupdateWorkSheetline</c>.
    /// </param>
    protected abstract void processTable(Common destinationTable, str itemId, str propertyDescription, RetailMassupdateWorkSheetline _line = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTableField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates field value assignment to destination table.
    /// </summary>
    /// <param name="_destinationTable">
    /// An record for destination table.
    /// </param>
    /// <param name="_property">
    /// An record for table <c>RetailMassUpdateProductProperty</c>.
    /// </param>
    /// <param name="_line">
    /// An record for table <c>RetailMassUpdateWorksheetLine</c>
    /// </param>
    protected void processTableField(Common _destinationTable, RetailMassUpdateProductProperty _property, RetailMassUpdateWorksheetLine _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWorksheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to process the worksheet.
    /// </summary>
    public void processWorksheet()
    {
        QueryRun qr;

        qr = this.buildQuery();

        this.processQuery(qr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer             version        = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to update the timestamp on the worksheet when ever it is processed.
    /// </summary>
    protected void updateDateTime()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    private void updateStatus()
    {
        RetailMassUpdateWorksheetTable worksheet;

        ttsBegin;
        update_recordset worksheet
        setting Status = this.nextWorksheetStatus()
        where worksheet.RecId == worksheetId;
        ttsCommit;

        this.updateDateTime();

        // refresh the worksheet status on the form if it is still open
        if (worksheetTable)
        {
            worksheetTable.reread();
            worksheetTable.refresh();
            worksheetTable.selectionChanged();
        }

        info(this.finalMessage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the unit of measurement conversion on destination table.
    /// </summary>
    /// <param name="_destinationTable">
    /// The table where the update should take place ,passed as an object of <c>Common</c> type.
    /// </param>
    /// <param name="_property">
    /// An buffer of table <c>RetailMassUpdateProductProperty</c> record.
    /// </param>
    /// <param name="_line">
    /// An buffer of table <c>RetailMassUpdateWorksheetLine</c> record.
    /// </param>
    protected void validateUOM(Common _destinationTable,
                RetailMassUpdateProductProperty _property,
                RetailMassUpdateWorksheetLine _line)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>