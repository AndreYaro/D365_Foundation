<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfCoSumUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Create a summarized planning order from a group of planned orders for the same planning item.
/// </summary>
public class PmfCoSumUp
{
    Map                  mapReqPO;
    PmfCoTmpReqTrans     tmpReqTrans;
    Qty                  qty;
    PdsCWInventQty       cwQty;
    PmfPlanningItemId    planningItemId;
    ReqPO                reqPO;
    ReqPO                tmpReqPO;
    ReqTrans             reqTransPO;
    BOMId                planningBomId;
    container            delReqPOs;
    Map                  mapReqTrans;
    InventSiteId         siteId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcExplodePlanning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convenience method to run planning explosion on the current planned order.
    /// </summary>
    private void calcExplodePlanning()
    {
        PmfReqCalcExplodePlanning::newReqTrans(reqPO.reqTrans()).runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMasterPlannedOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the summarized master planned order.
    /// </summary>
    public void createMasterPlannedOrder()
    {
        ReqPlanData reqPlanData;
        InventDim   inventDim;
        ReqTransPOCreate reqTransPOFactory;

        reqPO.clear();
        reqPO.data(tmpReqPO);
        reqPO.initFromItemId(planningItemId);
        reqPlanData = ReqPlanData::newReqPlanVersion(reqPO.PlanVersion);
        reqPO.setBOMCreated(false);
        reqPO.setRouteCreated(false);
        reqPO.RefId = NumberSeq::newGetNumFromID(reqPlanData.sequencePlannedOrder()).num();

        if (reqPO.ItemBomId != planningBomId)
        {
            reqPO.ItemBomId = planningBomId;
        }

        if (siteId && siteId != reqPO.CovInventDimId)
        {
            inventDim = reqPO.inventDim();
            inventDim.InventSiteId = siteId;
            inventDim = InventDim::findOrCreate(inventDim);
            reqPO.CovInventDimId= inventDim.InventDimId;
        }
        reqPO.Qty    = qty;
        reqPO.PurchQty = qty;
        reqPO.PdsCWReqQty = cwQty;

        reqPO.insert(reqPlanData);
        reqTransPO.ReqDateDlvOrig     = reqPO.ReqDateDlv;
        reqTransPO.Level              = reqPO.reqSetupDim().itemLevel();
        reqTransPO.CovQty = -qty;

        reqTransPOFactory = ReqTransPOCreate::construct();
        reqTransPOFactory.insertFromReqPo(reqTransPO, reqPO, false, reqPlanData);
        reqPO.doUpdate();
        if (!mapReqTrans.exists(reqTransPO.RecId))
        {
            mapReqTrans.insert(reqTransPO.RecId, reqTransPO);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePlannedOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the planned orders that were scheduled earlier for deletion.
    /// </summary>
    /// <remarks>
    /// This deletes all the planned orders that based on the RecIds values in the
    /// delReqPOs container. See method removeOrgPlannedOrders.
    /// </remarks>
    public void deletePlannedOrders()
    {
        int     i;
        int64   recId;
        ReqPO   reqPODynamic;

        for (i=1; i<=conlen(delReqPOs); i++)
        {
            recId = conpeek(delReqPOs,i);

            ttsbegin;

            select forupdate reqPO
                where reqPO.RecId == recId;

            if (reqPO)
            {
                if (ReqParameters::find().autoUpdateDynamicPlan(ReqPlanVersion::find(reqPO.PlanVersion).ReqPlanId))
                {
                    // The planned order from the dynamic plan must also be deleted
                    select forupdate reqPODynamic
                        where reqPODynamic.PlanVersion == ReqPlanVersion::findActiveReqPlanIdDynamic().RecId
                        && reqPODynamic.RefId == reqPO.RefId;

                    reqPODynamic.delete(false);
                }

                reqPO.delete(false); //delete ReqTrans - receipt side
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMapReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the map containing the planned order (ReqPO) to summarize.
    /// </summary>
    /// <param name="_mapReqPO">Map containing the planned orders.</param>
    /// <remarks>
    /// The given map must be defined to
    /// </remarks>
    public void parmMapReqPO(Map _mapReqPO)
    {
        mapReqPO = _mapReqPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the CW quantity for the planning item.
    /// </summary>
    /// <param name="_cwQty">
    /// CW quantity.
    /// </param>
    public void parmPdsCWQty(PdsCWInventQty _cwQty)
    {
        cwQty = _cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanBomId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the formula BOM id for the master planned order.
    /// </summary>
    /// <param name="_bomId">
    /// Formula BOM id.
    /// </param>
    public void parmPlanBomId(BOMId _bomId)
    {
        planningBomId = _bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the planning item id for the master planned order.
    /// </summary>
    /// <param name="_itemId">
    /// Planning item id.
    /// </param>
    public void parmPlanItem(PmfPlanningItemId _itemId)
    {
        planningItemId = _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the quantity for the master planned order.
    /// </summary>
    /// <param name="_qty">
    /// Inventory quantity.
    /// </param>
    public void parmQty(Qty _qty)
    {
        qty = _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the site id for the master planned order.
    /// </summary>
    /// <param name="_siteId">
    /// Inventory site id.
    /// </param>
    public void parmSiteId(InventSiteId _siteId)
    {
        siteId = _siteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckApprovedVendorList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the planning item or the corresponding formula lines has valid approved vendor list entry.
    /// </summary>
    /// <returns>
    /// True if planning item has at least one valid approved vendor list entry; otherwise false.
    /// </returns>
    private boolean pdsCheckApprovedVendorList()
    {
        PdsApprovedVendorListCheck  avlCheck;
        PdsApprovedVendorListCheck  bomCheck;
        InventTable                 inventTable;
        BOM                         bom;
        boolean                     ret = true;

        inventTable = InventTable::find(planningItemId);
        avlCheck    = PdsApprovedVendorListCheck::newFromTable(inventTable);
        ret         = avlCheck.validateCheck();

        if (ret)
        {
            while select bom
                where  bom.bomId    == planningBomId
                    && bom.VendId   != ''
            {
                bomCheck = PdsApprovedVendorListCheck::newFromTable(bom);
                bomCheck.parmActiveDate(tmpReqPO.ReqDateDlv);
                ret     = bomCheck.validateCheck() && ret;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeOrgPlannedOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the current work ReqPO record id to the list of 'original' planned orders to delete.
    /// </summary>
    public void removeOrgPlannedOrders()
    {
        delReqPOs = conins(delReqPOs,conlen(delReqPos)+1,tmpReqPO.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the creation of the master planned order.
    /// </summary>
    /// <remarks>
    /// This creates the master planned order from the given group of planned orders
    /// based on a specific planning item.
    /// </remarks>
    public void run()
    {
        MapIterator         mi;
        ReqTransPoMarkFirm  poFirm;
        boolean             bFirstPO = true;

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        mapReqTrans  =  new Map(Types::Integer,Types::Record);
        try
        {
            ttsbegin;
            if (mapReqPO)
            {
                mi = new MapIterator(mapReqPO);
                mi.begin();
                while (mi.more())
                {
                    tmpReqPO = mapReqPO.lookup(mi.key());
                    if (bFirstPO)
                    {
                        this.createMasterPlannedOrder();
                        this.calcExplodePlanning();
                        this.updateIssueCov();
                        bFirstPO = false;
                    }
                    this.removeOrgPlannedOrders();
                    mi.next();
                }
            }

            this.deletePlannedOrders();

            poFirm = ReqTransPoMarkFirm::newMap(mapReqTrans);
            poFirm.parmPmfCoRecreateDynamic(true);
            poFirm.runOperation();

            ttscommit;
        }
        catch (Exception::Error)
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the temporary PmfCoTmpReqTrans record to be used by this object so that the same reference is shared
    /// between this class and the caller.
    /// </summary>
    /// <param name="_tmpReqTrans">
    /// Record buffer to share.
    /// </param>
    public void tmpReqTrans(PmfCoTmpReqTrans _tmpReqTrans)
    {
        tmpReqTrans = _tmpReqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIssueCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the coverage record references for each transaction line for the current master planned order.
    /// </summary>
    public void updateIssueCov()
    {
        ReqTransCov reqTransCov;
        ReqTrans    reqTransReceiptOriginal;
        ReqTrans    reqTransReceiptNew;

        ttsbegin;

        // Loop through all original issues
        while select tmpReqTrans
            where tmpReqTrans.PlanVersion == reqTransPO.PlanVersion
        {
            // Find the original receipt
            select forupdate firstonly reqTransCov
                where reqTransCov.RecId == tmpReqTrans.ReqTransCovRecId
                join reqTransReceiptOriginal
                    where reqTransReceiptOriginal.RecId == reqTransCov.ReceiptRecId;

            if (reqTransCov)
            {
                // Find the matching output from the planning item order
                select forupdate reqTransReceiptNew
                    where reqTransReceiptNew.PlanVersion    == reqTransReceiptOriginal.PlanVersion
                       && reqTransReceiptNew.ItemId         == reqTransReceiptOriginal.ItemId
                       && reqTransReceiptNew.CovInventDimId == reqTransReceiptOriginal.CovInventDimId
                       && reqTransReceiptNew.Direction      == InventDirection::Receipt
                       && reqTransReceiptNew.RefType        == ReqRefType::PmfCoProduct
                       && reqTransReceiptNew.RefId          == reqTransPO.RefId;

                // Peg the original issue to the new output
                reqTransCov.ReceiptRecId = reqTransReceiptNew.RecId;
                reqTransCov.update();

                if (reqTransReceiptNew)
                {
                    // Update the covered quantity of the output
                    reqTransReceiptNew.CovQty += -reqTransCov.Qty;
                    reqTransReceiptNew.update();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method validates firming of planned item if PDSAVL configuration key is enabled
    /// </summary>
    /// <returns>
    /// true if the validation passed; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean     ret = true;

        if (#PdsApprovedVendorListEnabled)
        {
            ret = this.pdsCheckApprovedVendorList();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfCoSumUp construct()
    {
        return new PmfCoSumUp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>