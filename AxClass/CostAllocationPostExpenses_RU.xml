<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostAllocationPostExpenses_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostAllocationPostExpenses_RU extends CostAllocationPost_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>distributeProportionally</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Distribuites amount proportionally to distribution
    /// </summary>
    /// <param name="_accountingEvent">
    /// The <c>AccountingEvent</c> table record <c>RecId</c> value
    /// </param>
    /// <param name="_sourceDocumentLine">
    /// The <c>SourceDocumentLine</c> table record
    /// </param>
    /// <param name="_amount">
    ///  amount to distribute
    /// </param>
    /// <param name="_costAllocBaseLedgerDimension">
    ///  Ledger dimension account for debit entry.
    /// </param>
    /// <param name="_currencyCode">
    ///  Code of currency to round values and for the general journal entry.
    /// </param>
    /// <param name="_exchangeRateHelper">
    /// The accounting currency amount and reporting currency amount exchange rates.
    /// </param>
    /// <remarks>
    ///   rounding error is added to the last element
    /// </remarks>
    private void distributeProportionally(RefRecId                 _accountingEvent,
                                          sourceDocumentLine       _sourceDocumentLine,
                                          Amount                   _amount,
                                          LedgerDimensionAccount   _costAllocBaseLedgerDimension,
                                          CurrencyCode             _currencyCode,
                                          CurrencyExchangeHelper   _exchangeRateHelper)
    {
        Amount                         restAmount              = _amount;
        container                      distribution            = this.loadDistribution(_accountingEvent, _sourceDocumentLine.RecId);
        SourceDocumentAmountMap        sourceDocumentAmountMap = SourceDocumentLineProvider::getDistributedAmountMap(_sourceDocumentLine);
        int                            i;
        LedgerDimensionAccount         ledgerDimension;
        Amount                         distrAmount;
        MonetaryAmount                 monetaryAmount;

        Amount                         transactionAmount;

        for (i=1; i<=conlen(distribution); i++)
        {
            [ledgerDimension, distrAmount, monetaryAmount] = conpeek(distribution, i);

            if (i == conlen(distribution))
            {
                transactionAmount = restAmount;
            }
            else
            {
                Amount distrAmountTotal = sourceDocumentAmountMap.getSourceDocumentAmount(monetaryAmount).parmAmount();
                transactionAmount = CurrencyExchangeHelper::amount(_amount * distrAmount / distrAmountTotal, _currencyCode);
            }

            ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                                    ledgerVoucherObject,
                                                    LedgerPostingType::LedgerJournal,
                                                    _costAllocBaseLedgerDimension,
                                                    _currencyCode,
                                                    sign * transactionAmount,
                                                    _exchangeRateHelper));

            AccountingDistributionRule accountingDistributionRule = AccountingDistributionRule::newRule(SourceDocumentLineItem::newFromSourceDocumentLine(_sourceDocumentLine),
                                                                                                        monetaryAmount);

            ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                                                    ledgerVoucherObject,
                                                    accountingDistributionRule.parmLedgerPostingType(),
                                                    ledgerDimension,
                                                    _currencyCode,
                                                    - sign * transactionAmount,
                                                    _exchangeRateHelper));

            LedgerBondClient_RU ledgerBondClient = ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();
            if (ledgerBondClient)
            {
                ledgerBondClient.bondVRef2VRef(ledgerBondClient.lastVrefId(), ledgerBondClient.lastVrefId() - 1);
            }

            restAmount -= transactionAmount;
        }

        Debug::assert(restAmount == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPost</Name>
				<Source><![CDATA[
    protected void runPost()
    {
        this.initLedgerVoucher(PurchParameters::numRefPurchInvoiceVoucher(),
                               SysModule::Vend,
                               LedgerTransType::Vend,
                               costAllocationForm.postingDate());

        CurrencyExchangeHelper currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

            while select grCostAllocationResult
            group by grCostAllocationResult.AllocSourceRecId
            where grCostAllocationResult.Mark &&
                  grCostAllocationResult.Amount
        {
            this.generateParmId();

            while select LedgerDimension, DefaultDimension from costAllocationBase
                join AllocSourceRecId, HistoryAllocRecId, Amount from costAllocationResult
                    where costAllocationResult.AllocSourceRecId == grCostAllocationResult.AllocSourceRecId
                       && costAllocationResult.AllocBaseRecId   == costAllocationBase.RecId
                       && costAllocationResult.Mark
                       && costAllocationResult.Amount
            {
                VendInvoiceTrans sourceVendInvoiceTrans = VendInvoiceTrans::findRecId(costAllocationResult.AllocSourceRecId);
                VendInvoiceJour sourceVendInvoiceJour = sourceVendInvoiceTrans.vendInvoiceJour();
                currencyExchHelper.parmExchangeRate1(sourceVendInvoiceJour.ExchRate);

                if (! sourceVendInvoiceJour)
                {
                    continue;
                }

                // check purch book
                if (! this.checkFactureBookProcessingNotExists(sourceVendInvoiceTrans))
                {
                   throw error("@SYS21533");
                }

                if (costAllocationBase.LedgerDimension == sourceVendInvoiceTrans.LedgerDimension)
                {
                    throw error(strfmt("@GLS114532",
                                       sourceVendInvoiceTrans.ItemId,
                                       LedgerDimensionFacade::getDisplayValueForLedgerDimension(costAllocationBase.LedgerDimension),
                                       LedgerDimensionFacade::getDisplayValueForLedgerDimension(sourceVendInvoiceTrans.LedgerDimension)));
                }

                SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(sourceVendInvoiceTrans.SourceDocumentLine);
                AccountingEvent    accountingEvent    = AccountingDistribution::getLastSourceDocumentLineEvent(sourceDocumentLine.RecId);
                boolean            mustBeDistributed  = AccountingDistribution::existEventAndSourceDocumentLine(accountingEvent.RecId, sourceDocumentLine.RecId);

                if (mustBeDistributed)
                {
                    this.distributeProportionally(accountingEvent.RecId,
                                                  sourceDocumentLine,
                                                  costAllocationResult.Amount,
                                                  LedgerDimensionFacade::serviceCreateLedgerDimension(costAllocationBase.LedgerDimension, costAllocationBase.DefaultDimension),
                                                  sourceVendInvoiceTrans.CurrencyCode,
                                                  currencyExchHelper);
                }
                else
                {
                    this.checkSourceVendInvoiceLedgerAccount(sourceVendInvoiceTrans);

                    ledgerVoucher.addTrans(
                        LedgerVoucherTransObject::newTransactionAmountDefault(
                                                    ledgerVoucherObject,
                                                    LedgerPostingType::LedgerJournal,
                                                    LedgerDimensionFacade::serviceCreateLedgerDimension(costAllocationBase.LedgerDimension, costAllocationBase.DefaultDimension),
                                                    sourceVendInvoiceTrans.CurrencyCode,
                                                    sign * costAllocationResult.Amount,
                                                    currencyExchHelper));

                    ledgerVoucher.addTrans(
                        LedgerVoucherTransObject::newTransactionAmountDefault(
                                                    ledgerVoucherObject,
                                                    LedgerPostingType::PurchExpense,
                                                    LedgerDimensionFacade::serviceCreateLedgerDimension(sourceVendInvoiceTrans.LedgerDimension, sourceVendInvoiceTrans.DefaultDimension),
                                                    sourceVendInvoiceTrans.CurrencyCode,
                                                    - sign * costAllocationResult.Amount,
                                                    currencyExchHelper));

                    LedgerBondClient_RU ledgerBondClient = ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();
                    if (ledgerBondClient)
                    {
                        ledgerBondClient.bondVRef2VRef(ledgerBondClient.lastVrefId(), ledgerBondClient.lastVrefId() - 1);
                    }
                }

                // create history
                costAllocationHistory.clear();
                costAllocationHistory.AllocationType                = costAllocationForm.parmAllocationType().selection();
                costAllocationHistory.CostAllocationParmId          = costAllocationParmId;
                costAllocationHistory.CurrencyCode                  = sourceVendInvoiceTrans.CurrencyCode;
                costAllocationHistory.AmountPosted                  = sign * costAllocationResult.Amount;
                costAllocationHistory.AllocatedInvoiceJourRecId     = sourceVendInvoiceJour.RecId;
                costAllocationHistory.AllocatedInvoiceTransRecId    = sourceVendInvoiceTrans.RecId;
                costAllocationHistory.TransDate                     = costAllocationForm.postingDate();
                costAllocationHistory.MarkupCode                    = sourceVendInvoiceTrans.MarkupCode_RU;
                costAllocationHistory.LedgerDimension               = costAllocationBase.LedgerDimension;
                costAllocationHistory.DefaultDimension              = costAllocationBase.DefaultDimension;
                costAllocationHistory.VoucherInvoice                = costAllocationVoucher;
                costAllocationHistory.insert();

                if (costAllocationForm.costAllocationProcessType() == CostAllocationProcessType_RU::Cancel)
                {
                    costAllocationHistory.updateForStornoHistory(costAllocationResult.HistoryAllocRecId);
                    setOrigReverseHistory.add([costAllocationResult.HistoryAllocRecId, costAllocationHistory.RecId]);
                }
            }
        }

        ledgerVoucher.end();

        this.createTransLink();

        this.runEndActions();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00047,funcName());

        info("@GLS114531");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>