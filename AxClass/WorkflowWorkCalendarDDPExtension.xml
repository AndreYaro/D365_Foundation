<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkflowWorkCalendarDDPExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WorkflowWorkCalendarDDPExtension implements WorkflowWorkCalendarDDPExtensible
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerExtension</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowWorkCalendarDDPExHelper), delegatestr(WorkflowWorkCalendarDDPExHelper,registerExtensionDelegate))]
    static void registerExtension(WorkflowWorkCalendarDDPExHelper _helper)
    {
        WorkflowWorkCalendarDDPExtension extension = new WorkflowWorkCalendarDDPExtension();
        _helper.registerExtension(extension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkingDay</Name>
				<Source><![CDATA[
    boolean isWorkingDay(CalendarId _calendarId, WorkflowDateTime _targetDateTime)
    {
        WorkCalendarTable       workCalendar;
        WorkCalendarDate        workCalendarDate;

        // Is today a working day
        select RecId, CalendarId, TransDate, WorkTimeControl from workCalendarDate
                where workCalendarDate.CalendarId == _calendarId   &&
                      workCalendarDate.TransDate  == DateTimeUtil::date(_targetDateTime);

        if (workCalendarDate.RecId)
        {
            switch (workCalendarDate.WorkTimeControl)
            {
                case WorkTimeControl::Closed:
                    return false;
                case WorkTimeControl::Holiday:
                    return false;
                case WorkTimeControl::Open:
                    return true;
                case WorkTimeControl::UseBasic:
                    select RecId, BasicCalendarId, CalendarId from workCalendar where workCalendar.CalendarId == _calendarId;

                    // Use basic calendar and make recursive call to determine working day
                    if (workCalendar.RecId && WorkCalendarTable::exist(workCalendar.BasicCalendarId))
                        return WorkflowWorkCalendarDueDateProvider::isWorkingDay(workCalendar.BasicCalendarId, _targetDateTime);
                    else
                        throw error ("@SYS105447");
            }
        }
        else
            throw error("@SYS105454");

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>