<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementActionAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankStatementActionAdapter</c>class delegates the actions on bank statement form.
/// </summary>
class BankStatementActionAdapter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkParameterFailed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Throws the exception for the failure of the parameter validation.
    /// </summary>
    /// <param name="_functionName">
    ///     The function name of method which performs parameter validation.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     The error of the parameter validation.
    /// </exception>
    private static void checkParameterFailed(MethodName _functionName)
    {
        throw error(Error::wrongUseOfFunction(_functionName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args  args)
    {
        Common record;
        int    paramEnumType;
        int    paramEnum;
        FormDataSource  bankStmtISOAccStmt_ds;
        BankStmtISOAccountStatement markedRecords;

        if (!args)
        {
            BankStatementActionAdapter::checkParameterFailed(funcName());
        }
        record = args.record();
        if (!record || record.RecId == 0)
        {
            BankStatementActionAdapter::checkParameterFailed(funcName());
        }

        paramEnumType   = args.parmEnumType();
        paramEnum       = args.parmEnum();

        if (paramEnumType != enumNum(BankStatementActionType)
            || paramEnum  == 0)
        {
            BankStatementActionAdapter::checkParameterFailed(funcName());
        }
        Map recIdRecordMap = new Map(Types::Int64, Types::Record);
        bankStmtISOAccStmt_ds = FormDataUtil::getFormDataSource(record);
        if (bankStmtISOAccStmt_ds && bankStmtISOAccStmt_ds.anyMarked())
        {
            BankStatementImportSortingHelperTable bankStatementImportSortingHelperTable;
            RecordSortedList sortedMarkedRecordList = new RecordSortedList(tableNum(BankStatementImportSortingHelperTable));
            sortedMarkedRecordList.sortOrderFromContainer([fieldNum(BankStatementImportSortingHelperTable, BankAccountTable), fieldNum(BankStatementImportSortingHelperTable, FromDateTime), fieldNum(BankStatementImportSortingHelperTable, SeqNumIntValue)]);
            markedRecords = bankStmtISOAccStmt_ds.getFirst(1, false);
            while (markedRecords)
            {
                switch (markedRecords.TableId)
                {
                    case tableNum(BankStmtISOAccountStatement):
                        bankStatementImportSortingHelperTable.clear();
                        bankStatementImportSortingHelperTable.BankAccountTable = markedRecords.BankAccountTable;
                        bankStatementImportSortingHelperTable.RefRecId = markedRecords.RecId;
                        bankStatementImportSortingHelperTable.FromDateTime = markedRecords.FromDateTime;
                        bankStatementImportSortingHelperTable.SeqNumIntValue = any2Int64(markedRecords.SequenceNumber);
                        sortedMarkedRecordList.ins(bankStatementImportSortingHelperTable);
                        recIdRecordMap.insert(markedRecords.RecId, markedRecords);
                        break;
                    default:
                        BankStatementActionAdapter::checkParameterFailed(funcName());
                }
                markedRecords = bankStmtISOAccStmt_ds.getNext();
            }

            boolean moreRecs = sortedMarkedRecordList.first(bankStatementImportSortingHelperTable);
            while (moreRecs)
            {
                BankStmtISOAccountStatement curStatement = recIdRecordMap.lookup(bankStatementImportSortingHelperTable.RefRecId);
                if (BankStatementActionAdapter::shouldPerformAction(curStatement, paramEnum))
                {
                    BankStatementActionAdapter::performBankStatementActions(curStatement, paramEnum);
                    if (curStatement.Status != BankStatementStatus::Validated)
                    {
                        break;
                    }
                }
                moreRecs = sortedMarkedRecordList.next(bankStatementImportSortingHelperTable);
            }
        }
        else
        {
            switch (record.TableId)
            {
                case tableNum(BankStmtISOAccountStatement):
                    if (BankStatementActionAdapter::shouldPerformAction(record, paramEnum))
                    {
                        BankStatementActionAdapter::performBankStatementActions(record, paramEnum);
                    }
                    break;

                default :
                    BankStatementActionAdapter::checkParameterFailed(funcName());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBankStatementActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs actions for bank statement.
    /// </summary>
    /// <param name="_statement">
    ///     The given <c>BankStmtISOAccountStatement</c> buffer.
    /// </param>
    /// <param name="_paramEnum">
    ///     The type of action.
    /// </param>
    private static void performBankStatementActions(
        BankStmtISOAccountStatement _statement,
        int                         _paramEnum)
    {
        switch (_paramEnum)
        {
            case BankStatementActionType::Validate:
                _statement.validate();
                break;

            case BankStatementActionType::ValidateOnly:
                _statement.validateOnly();
                break;

            case BankStatementActionType::Reopen:
                _statement.updateStatus(BankStatementStatus::Open, true);
                break;

            default:
                BankStatementActionAdapter::checkParameterFailed(funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPerformAction</Name>
				<Source><![CDATA[
    private static boolean shouldPerformAction(BankStmtISOAccountStatement _statement, int _paramEnum)
    {
        if (!BankStatementActionShouldPerformFlight::instance().isEnabled())
        {
            return true;
        }

        boolean shouldPerform;
        switch (_paramEnum)
        {
            case BankStatementActionType::Validate:
                shouldPerform = _statement.Status == BankStatementStatus::Open;
                break;
            case BankStatementActionType::Reopen:
                shouldPerform = _statement.Status == BankStatementStatus::Validated;
                break;
            default:
                shouldPerform = true;
        }
        return shouldPerform;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>