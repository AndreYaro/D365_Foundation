<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListTransUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Builds and handles the UI dialog for the <c>ProjListBudget</c> reports.
/// </summary>
class ProjListTransUIBuilder extends SrsReportDataContractUIBuilder
{
     DialogField ProjLevel1Field;
     ProjListTransContract projListTransContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
/// <summary>
/// Adds controls to the dialog.
/// </summary>
public void build()
{
    ProjListTransContract contract = this.dataContractObject() as ProjListTransCOntract;
    FormBuildGroupControl grp;
    // Get the form group used in template form and set it to use 3 columns.
    grp = this.dialog().curFormGroup();
    grp.frameType();
    grp.columns(2);
    // now let the framework draw the controls and take care of everything.

    super();

    if (this.checkProjTransLayoutContract(contract))
    {
        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjLevel1)).allowEdit(false);
    }
    else
    {
        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjInternalCost)).visible(false);
        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjInvestment)).visible(false);
        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjFixedPrice)).visible(false);
        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjTime)).visible(false);
        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjTimeAndMaterial)).visible(false);

        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjExpenses)).visible(false);
        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjHour)).visible(false);
        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjItem)).visible(false);
        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjOnAccount)).visible(false);
        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjRevenue)).visible(false);

        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjShowHour)).visible(false);
        this.bindInfo().getDialogField(contract,methodstr(ProjListTransContract,parmProjPLRatio)).visible(false);
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>checkProjTransLayoutContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for any available <c>ProjListTransContract</c>.
    /// </summary>
    /// <param name = "contract">
    ///     An instance of <c>ProjListTransContract</c>.
    /// </param>
    /// <returns>
    ///     true if required <c>ProjTransLayout</c> enum values are found; otherwise, false.
    /// </returns>
    protected boolean checkProjTransLayoutContract(ProjListTransContract _contract)
    {
        return  _contract.parmProjLevel1() == ProjTransLayout::ID ||
                _contract.parmProjLevel1() == ProjTransLayout::ResourceCategory ||
                _contract.parmProjLevel1() == ProjTransLayout::Category ||
                _contract.parmProjLevel1() == ProjTransLayout::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    public void postBuild()
    {
        boolean projMultContractLinesForProjFeatureEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjTimeAndMaterial), !projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjFixedPrice), !projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjInvestment), !projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjInternalCost), !projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjTime), !projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjHour), true);
        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjExpenses), true);
        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjItem), true);
        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjRevenue), true);
        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjOnAccount), true);
        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjTimeAndMaterialBillingMethod), projMultContractLinesForProjFeatureEnabled);
        this.setVisibilityForControls(methodstr(ProjListTransContract, parmProjFixedPriceBillingMethod), projMultContractLinesForProjFeatureEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForControls</Name>
				<Source><![CDATA[
    private void setVisibilityForControls(identifierName methodName, boolean _visible = false)
    {
        DialogField dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodName);

        if (dialogField)
        {
            dialogField.visible(_visible);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>