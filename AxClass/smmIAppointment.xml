<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmIAppointment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents an outlook appointment or meeting.
/// </summary>
interface SmmIAppointment extends smmIItem
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allDayEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the appointment is an all day event.
    /// </summary>
    /// <returns>
    /// True if the appointment is an all day event; otherwise, false.
    /// </returns>
    public boolean allDayEvent()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>billingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the billing information for the appointment.
    /// </summary>
    /// <returns>
    /// A string containing all the billing information associated with the appointment.
    /// </returns>
    public str billingInformation()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>busyStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the busy status of the user for the appointment.
    /// </summary>
    /// <returns>
    /// Returns an #OlBusyStatus constant indicating the busy status of the user for the appointment.
    /// </returns>
    public int busyStatus()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>categories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the categories associated with the appointment.
    /// </summary>
    /// <returns>
    /// A string with all the categories associated to the appointment
    /// </returns>
    public str categories()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the end date time for the appointment.
    /// </summary>
    /// <returns>
    /// The end date time for the appointment.
    /// </returns>
    public utcdatetime end()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>exceptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the occurrence exceptions for the appointment.
    /// The ocurrence exceptions are genereted by editing or deleting an occurrence of a recurrent appointment.
    /// </summary>
    /// <returns>
    /// A list of <c>smmIOcurrence</c> elements that represent all the exceptions for the appointment.
    /// </returns>
    public List exceptions()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>getItemOccurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appointment representing a specific occurrence of this recurring appointment.
    /// </summary>
    /// <param name="_date">
    /// The date when the ocurrence takes place.
    /// </param>
    /// <param name="_time">
    /// The time when the ocurrence takes place.
    /// </param>
    /// <returns>
    /// A <c>smmIAppointment</c> representing the occurrence requested.
    /// </returns>
    public smmIAppointment getItemOccurrence(TransDate _date, TimeOfDay _time)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>getMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the master appointment for this appointment.
    /// </summary>
    /// <returns>
    /// If the appointment is non-recurring or a recurring master, it will return a new identical instance.
    /// If the appointment is an occurrence or an exception in a recurring appointment it will return the master appointment.
    /// </returns>
    public smmIAppointment getMaster()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>getOldItemEntryId</Name>
				<Source><![CDATA[
    str getOldItemEntryId()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>getRecurrencePattern</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence pattern for the appointment.
    /// </summary>
    /// <returns>
    /// The recurrence pattern for the appointment.
    /// </returns>
    public smmIRecurrence getRecurrencePattern()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>importance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the importance level of the appointment.
    /// </summary>
    /// <returns>
    /// An int representing the importance of the appointment.
    /// The value will be one of the following:
    /// #olImportanceLow, #olImportanceNormal, #olImportanceHigh
    /// </returns>
    public int importance()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>isRecurring</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is a recurrent appointment.
    /// </summary>
    /// <returns>
    /// True if it is a recurrent appointment; otherwise, false.
    /// </returns>
    public boolean isRecurring()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>location</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appointment's location.
    /// </summary>
    /// <returns>
    /// A string with all the appointment's location information.
    /// </returns>
    public str location()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>mileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appointment's mileage.
    /// </summary>
    /// <returns>
    /// A string representing the appointment's mileage.
    /// </returns>
    public str mileage()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>parentFolderId</Name>
				<Source><![CDATA[
    str parentFolderId()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>recurrenceState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence state for the appointment.
    /// </summary>
    /// <returns>
    /// A member of the #OlRecurrenceState enumeration representing the recurrence state of the appointment.
    /// </returns>
    public int recurrenceState()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>reminderMinutesBeforeStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of minutes before the start of the appointment when the reminder should be triggered.
    /// </summary>
    /// <returns>
    /// The number of minutes before the start when the reminder should be triggered.
    /// Will return 0 if it is not set.
    /// </returns>
    public int reminderMinutesBeforeStart()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>reminderSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a reminder was set for this task.
    /// </summary>
    /// <returns>
    /// True if the task has a reminder set; otherwise, false.
    /// </returns>
    public boolean reminderSet()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>responseRequested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the response is requested for this appointment.
    /// </summary>
    /// <returns>
    /// True if the response is requested; otherwise, false.
    /// </returns>
    public boolean responseRequested()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>saveItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the appointment.
    /// </summary>
    /// <returns>
    /// Appointment instance after saving the appointment.
    /// </returns>
    public smmIAppointment saveItem()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>saveOldItemEntryId</Name>
				<Source><![CDATA[
    public void saveOldItemEntryId(boolean synchronizeRecurringSeting, str entryId)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>sensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sensitivity for the appointment.
    /// </summary>
    /// <returns>
    /// A constant in the OlSensitivity enumeration indicating the sensitivity for the appointment.
    /// The value may be #olConfidential, #olNormal, #olPersonal or #olPrivate.
    /// </returns>
    public int sensitivity()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setAllDayEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the appointment is an all day event or not.
    /// </summary>
    /// <param name="_allDayEvent">
    /// True if it is an all day event; otherwise, false.
    /// </param>
    public void setAllDayEvent(boolean _allDayEvent)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setBillingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the billing information for the appointment.
    /// </summary>
    /// <param name="_billingInformation">
    /// A string with all the billing information for the appointment.
    /// </param>
    public void setBillingInformation(str _billingInformation)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the html body for the appointment.
    /// </summary>
    /// <param name="_body">
    /// A string with the html body of the appointment.
    /// </param>
    public void setBody(str _body)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setBusyStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the busy status for the appointment.
    /// </summary>
    /// <param name="_busyStatus">
    /// A member of the #OlBusyStatus enumeration representing the busy status for the appointment.
    /// </param>
    public void setBusyStatus(int _busyStatus)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the appointment's categories.
    /// </summary>
    /// <param name="_categories">
    /// A string containing the categories asociated with the appointment.
    /// </param>
    public void setCategories(str _categories)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the end date time for the appointment.
    /// </summary>
    /// <param name="_end">
    /// The end date time.
    /// </param>
    public void setEnd(utcdatetime _end)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setImportance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the importance of this appointment.
    /// </summary>
    /// <param name="_importance">
    /// A member of the #olImportance enumeration that represents the importance of the appointment.
    /// </param>
    public void setImportance(int _importance)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the location for the appointment.
    /// </summary>
    /// <param name="_location">
    /// A string containing all the location information for the appointment.
    /// </param>
    public void setLocation(str _location)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setMileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the mileage for the appointment.
    /// </summary>
    /// <param name="_mileage">
    /// A string containing the mileage for the appointment.
    /// </param>
    public void setMileage(str _mileage)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setReminderMinutesBeforeStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the minutes before the start of the appointment when the reminder should be triggered.
    /// </summary>
    /// <param name="_reminderMinutesBeforeStart">
    /// An int with the minutes before the start of the appointment when the reminder should be triggered.
    /// </param>
    public void setReminderMinutesBeforeStart(int _reminderMinutesBeforeStart)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setReminderSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the reminder is set for the appointment.
    /// </summary>
    /// <param name="_reminderSet">
    /// True if the reminder is set for the appointment; otherwise, false.
    /// </param>
    public void setReminderSet(boolean _reminderSet)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setResponseRequested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the response is requested for the appointment.
    /// </summary>
    /// <param name="_responseRequested">
    /// True if the response is requested; otherwise, false.
    /// </param>
    public void setResponseRequested(boolean _responseRequested)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setSensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sensitivity for the appointment.
    /// </summary>
    /// <param name="_sensitivity">
    /// A member of the #olSensitivity enumeration representing the sensitivity of this appointment.
    /// </param>
    public void setSensitivity(int _sensitivity)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the start date time for the appointment.
    /// </summary>
    /// <param name="_datetime">
    /// The start date time.
    /// </param>
    public void setStart(utcdatetime _datetime)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the appointment's subject.
    /// </summary>
    /// <param name="_subject">
    /// A string containing the appointment's subject.
    /// </param>
    public void setSubject(str _subject)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start date time for the appointment.
    /// </summary>
    /// <returns>
    /// The start date time.
    /// </returns>
    public utcdatetime start()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>subject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the subject for the appointment.
    /// </summary>
    /// <returns>
    /// A string with the subject or empty string if it is not set.
    /// </returns>
    public str subject()
    {
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>