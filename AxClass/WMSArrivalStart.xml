<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsArrivalStart</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSArrivalStart</c> class is used to start arrival based on the <c>WMSArrivalDetailTmp</c>
///    records.
/// </summary>
/// <remarks>
///    <c>WMSArrivalDetailTmp</c> records with direct registration will be registered directly. The other
///    records will be used to generate arrival journals.
/// </remarks>
class WmsArrivalStart
{
    WMSArrivalDetailTmp wmsArrivalDetailTmp;
    WMSJournalNameId    wmsJournalNameId;
    InventLocationId    inventLocationId;
    InventSiteId        inventSiteId;
    WMSLocationId       wmsLocationId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
        public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
        public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsArrivalDetailTmp</Name>
				<Source><![CDATA[
        public WMSArrivalDetailTmp parmWmsArrivalDetailTmp(WMSArrivalDetailTmp _wmsArrivalDetailTmp = wmsArrivalDetailTmp)
    {
        if (!prmisDefault(_wmsArrivalDetailTmp))
        {
            wmsArrivalDetailTmp.setTmpData(_wmsArrivalDetailTmp);
        }
        return wmsArrivalDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsJournalNameId</Name>
				<Source><![CDATA[
        public WMSJournalNameId parmWmsJournalNameId(WMSJournalNameId _wmsJournalNameId = wmsJournalNameId)
    {
        wmsJournalNameId = _wmsJournalNameId;
        return wmsJournalNameId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsLocationId</Name>
				<Source><![CDATA[
        public WMSLocationId parmWmsLocationId(WMSLocationId _wmsLocationId = wmsLocationId)
    {
        wmsLocationId = _wmsLocationId;
        return wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Starts the arrival by registering for direct registrations and creating arrival journals for
    ///    non-direct registrations.
    /// </summary>
    /// <returns>
    ///    A <c>WMSJournalId</c> extended data type if a <c>WMSJournalTable</c> record was created.
    /// </returns>
    protected WMSJournalId run()
    {
        WMSArrivalDetailTmp             wmsArrivalDetailTmpLocal;
        InventPendingQuantity           inventPendingQuantity;
        WMSArrivalCreateJournal         wmsArrivalCreateJournal;
        WMSJournalId                    wmsJournalId;
        InventRegistrationHandler       inventRegistrationHandler;
        InventPendingQuantityRegistrar  inventPendingQuantityRegistrar;
        boolean                         registeredNonStockedLines;

        wmsArrivalCreateJournal = WMSArrivalCreateJournal::newFromParameters(wmsJournalNameId,inventLocationId,inventSiteId,wmsLocationId);

        ttsbegin;
        wmsArrivalDetailTmpLocal.setTmpData(wmsArrivalDetailTmp);

        while select wmsArrivalDetailTmpLocal
            where wmsArrivalDetailTmpLocal.Selected   == NoYes::Yes
            &&    wmsArrivalDetailTmpLocal.InventQty  >  0
        {
            inventPendingQuantity.clear();
            //these will not go through arrival journal but will be registered directly
            if (wmsArrivalDetailTmpLocal.InventPendingQuantity && wmsArrivalDetailTmpLocal.DirectRegistration)
            {
                //it is by intention that this find is not an outer join in the while loop since outer joins between tmp tables and normal tables turn into single selects.
                inventPendingQuantity = InventPendingQuantity::find(wmsArrivalDetailTmpLocal.InventPendingQuantity,true);

                inventRegistrationHandler = InventRegistrationHandlerFactory::newFromPendingQuantity(inventPendingQuantity,wmsArrivalDetailTmpLocal);
                inventPendingQuantityRegistrar = InventPendingQuantityRegistrar::newFromRegistrationHandler(inventRegistrationHandler,inventPendingQuantity,wmsArrivalDetailTmpLocal.InventQty);
                inventPendingQuantityRegistrar.register();
                registeredNonStockedLines = true;
            }
            else
            {
                wmsArrivalCreateJournal.createWMSJournalTrans(wmsArrivalDetailTmpLocal);
            }
        }

        wmsJournalId = wmsArrivalCreateJournal.finish();

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            this.kittingRun_delegate(wmsJournalId);
        }

        if (registeredNonStockedLines)
        {
            //Non-stocked lines have been registered
            info("@SYS315650");
        }

        ttscommit;

        return wmsJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WMSArrivalStart construct()
    {
        return new WMSArrivalStart();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startArrival</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Starts the arrival for the selected records.
    /// </summary>
    /// <param name="_wmsArrivalDetailTmp">
    ///    A buffer that holds the records for which to start the arrival.
    /// </param>
    /// <param name="_wmsJournalNameId">
    ///    A journal name ID to use to create arrival journals.
    /// </param>
    /// <param name="_inventLocationId">
    ///    An <c>InventLocationId</c> data type to use to create arrival journals.
    /// </param>
    /// <param name="_inventSiteId">
    ///    An <c>InventSiteId</c> data type to use to create arrival journals.
    /// </param>
    /// <param name="_wmsLocationId">
    ///    A <c>WMSLocationId</c> data type to use to create arrival journals.
    /// </param>
    /// <returns>
    ///    A <c>WMSJournalId</c> extended data type if an arrival journal was created.
    /// </returns>
    static public WMSJournalId startArrival(
        WMSArrivalDetailTmp _wmsArrivalDetailTmp,
        WMSJournalNameId    _wmsJournalNameId,
        InventLocationId    _inventLocationId,
        InventSiteId        _inventSiteId,
        WMSLocationId       _wmsLocationId)
    {
        WMSArrivalStart wmsArrivalStart = WMSArrivalStart::construct();

        wmsArrivalStart.parmWmsArrivalDetailTmp(_wmsArrivalDetailTmp);
        wmsArrivalStart.parmWmsJournalNameId(_wmsJournalNameId);
        wmsArrivalStart.parmInventSiteId(_inventSiteId);
        wmsArrivalStart.parmInventLocationId(_inventLocationId);
        wmsArrivalStart.parmWmsLocationId(_wmsLocationId);

        return wmsArrivalStart.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingRun_delegate</Name>
				<Source><![CDATA[
    delegate void kittingRun_delegate(WMSJournalId _wmsJournalId)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>