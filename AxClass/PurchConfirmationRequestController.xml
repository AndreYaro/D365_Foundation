<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchConfirmationRequestController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchConfirmationRequestController</c> class starts the purchase order confirmation request report.
/// </summary>
public class PurchConfirmationRequestController extends TradeDocumentReportController implements BatchRetryable
{
    PurchConfirmationRequestJour        purchConfirmationRequestJour;
    PurchConfirmationRequestPrint       purchConfirmationRequestPrint;
    Map                                 psaNotesById;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    protected str documentTitle()
    {
        str                     documentTitle;
        PurchTableAllVersions   purchTableAllVersions;
        boolean                 useUpdateInTitle;
        boolean                 isReturnType;

        select firstonly purchaseType from purchTableAllVersions
            where purchTableAllVersions.PurchTableVersionRecId == purchConfirmationRequestJour.PurchTableVersion;

        isReturnType = (purchTableAllVersions.PurchaseType == PurchaseType::ReturnItem);
        
        if (VendFormletterParameters::find().HighlightUpdatedLinesConfirmationRequest == NoYes::Yes)
        {
            select firstonly purchTableAllVersions
                where   purchTableAllVersions.PurchTableVersionRecId == purchConfirmationRequestJour.PurchTableVersion;
            useUpdateInTitle = !purchTableAllVersions.isFirstVersion();
        }

        //
        // UI option for pro-forma PO inquiry (Confirmation Request) is not allowed.
        // The code supports pro forma posting for compatibility with PO Confirmation
        // But the label on the report is always Purchase order inquiry
        //
        if (purchConfirmationRequestJour.VendVendorCollaborationType == VendVendorCollaborationType::Disabled)
        {
            if (printCopyOriginal ==  PrintCopyOriginal::Copy)
            {
                documentTitle = useUpdateInTitle ? literalStr("@SYS4004812") : literalStr("@SYS4004818");
            }
            else
            {
                documentTitle = useUpdateInTitle ? literalStr("@SYS4004811") : literalStr("@SYS4004797");
            }
        }
        else
        {
            if (printCopyOriginal ==  PrintCopyOriginal::Copy)
            {
                if (isReturnType)
                {
                    documentTitle = literalStr("@SYS4004613");
                }
                else
                {
                    documentTitle = useUpdateInTitle ? literalStr("@GLS180101") : literalStr("@SYS25551");
                }

            }
            else
            {
                if (isReturnType)
                {
                    documentTitle = literalStr("@SYS105841");
                }
                else
                {
                    documentTitle = useUpdateInTitle ? literalStr("@GLS180099") : literalStr("@SYS15812");
                }
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentIdentifier</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected str documentIdentifier()
    {
        return purchConfirmationRequestJour.DocumentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReportExceptions</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean handleReportExceptions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextTableId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected TableId reportExceptionContextTableId()
    {
        return purchConfirmationRequestJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextRecordId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected RecId reportExceptionContextRecordId()
    {
        return purchConfirmationRequestJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPsaVendPWPTxtRecord</Name>
				<Source><![CDATA[
    private PSAVendPWPTxt findPsaVendPWPTxtRecord(PurchId  _purchId, boolean _checkPsaRetainScheduleId)
    {
        PSAVendPWPTxt psaVendPWPTxt;
        PurchLine     purchLine;

        if (psaNotesById.exists(_purchId))
        {
            return psaNotesById.lookup(_purchId);
        }

        select firstonly RecId, psaVendorTxt, psaPwpTxt from psaVendPWPTxt
            exists join purchLine
                where purchLine.VendAccount          == psaVendPWPTxt.AccountNum
                   && purchLine.PurchId              == _purchId
                   && (     (_checkPsaRetainScheduleId  && (purchLine.psaRetainScheduleId != ''))
                            ||  (!_checkPsaRetainScheduleId && (purchLine.IsPwp == true)))
                   && psaVendPWPTxt.AccountCode      == TableGroupAll::Table;
        if (!psaVendPWPTxt)
        {
            select firstonly RecId, psaVendorTxt, psaPwpTxt from psaVendPWPTxt
                exists join purchLine
                    where  purchLine.VendGroup           == psaVendPWPTxt.VendGroup
                        && purchLine.PurchId             == _purchId
                        && (     (_checkPsaRetainScheduleId  && (purchLine.psaRetainScheduleId != ''))
                                 ||  (!_checkPsaRetainScheduleId && (purchLine.IsPwp == true)))
                        && psaVendPWPTxt.AccountCode     == TableGroupAll::GroupId;
            if (!psaVendPWPTxt)
            {
                select firstonly RecId from purchLine
                    where  purchLine.PurchId             == _purchId
                        && (     (_checkPsaRetainScheduleId  && (purchLine.psaRetainScheduleId != ''))
                                 ||  (!_checkPsaRetainScheduleId && (purchLine.IsPwp == true)));
                if (purchLine)
                {
                    select firstonly RecId, psaVendorTxt, psaPwpTxt from psaVendPWPTxt
                        where psaVendPWPTxt.AccountCode == TableGroupAll::All;
                }
            }
        }

        psaNotesById.insert(_purchId, psaVendPWPTxt);
        return psaVendPWPTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstJournal</Name>
				<Source><![CDATA[
    protected boolean getFirstJournal()
    {
        return journalList.first(purchConfirmationRequestJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextJournal</Name>
				<Source><![CDATA[
    protected boolean getNextJournal()
    {
        return journalList.next(purchConfirmationRequestJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayContractLanguageNotes</Name>
				<Source><![CDATA[
    private Notes getPayContractLanguageNotes(PurchId     _purchId)
    {
        PSAVendPWPTxt psaVendPWPTxt;

        psaVendPWPTxt = this.findPsaVendPWPTxtRecord(_purchId,false);

        return psaVendPWPTxt.psaPwpTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the journal record that should be passed to the contract.
    /// </summary>
    /// <returns>
    /// The record ID of the journal record.
    /// </returns>
    protected RecId getRecordId()
    {
        return purchConfirmationRequestJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorContractLanguageNotes</Name>
				<Source><![CDATA[
    private Notes getVendorContractLanguageNotes(PurchId     _purchId)
    {
        PSAVendPWPTxt   psaVendPWPTxt;

        psaVendPWPTxt = this.findPsaVendPWPTxtRecord(_purchId,true);

        return psaVendPWPTxt.psaVendorTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchConfirmationRequestPrint))
        {
            purchConfirmationRequestPrint = this.parmArgs().caller();
        }

        journalList = this.splitToRecordList();

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::PurchaseOrderConfirmationRequest);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (purchConfirmationRequestPrint)
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(purchConfirmationRequestPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(purchConfirmationRequestPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(purchConfirmationRequestPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the contract before the report is run.
    /// </summary>
    protected void modifyContract()
    {
        SRSTmpDataStore             srsTmpDataStore;
        PurchPurchaseOrderContract  purchPurchaseOrderContract = contract as PurchPurchaseOrderContract;
        Notes                       psaVendorTxt               = '';
        Notes                       psaPWPTxt                  = '';
        PurchId                     purchId = purchConfirmationRequestJour.getPurchaseOrderId();

        if (purchConfirmationRequestPrint)
        {
            srsTmpDataStore.Value   = purchConfirmationRequestPrint.pack();
            srsTmpDataStore.insert();
            purchPurchaseOrderContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            psaVendorTxt = this.getVendorContractLanguageNotes(purchConfirmationRequestJour.getPurchaseOrderId());
            psaPWPTxt    = this.getPayContractLanguageNotes(purchConfirmationRequestJour.getPurchaseOrderId());
        }

        purchPurchaseOrderContract.parmPSAVendorTxt(psaVendorTxt);
        purchPurchaseOrderContract.parmPSAPwpTxt(psaPWPTxt);
        purchPurchaseOrderContract.parmIsPurchConfirmationRequestJournal(true);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
        psaNotesById = new Map(extendedTypeId2Type(extendedTypeNum(PurchId)),  Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    protected void output()
    {
        PurchTable purchTable = PurchTable::find(purchConfirmationRequestJour.getPurchaseOrderId());

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().documentReport().output(this.reportExceptionContextTableId(), this.reportExceptionContextRecordId()))
        {
            formLetterReport.loadPrintSettings(purchConfirmationRequestJour, purchTable, purchTable.LanguageId);
            this.parmReportContract().parmRdlContract().parmLanguageId(purchTable.LanguageId);
            this.parmReportContract().parmRdlContract().parmLabelLanguageId(purchTable.LanguageId);

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataContractRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>purchConfirmationRequestJour</c> record.
    /// </summary>
    /// <param name="_common">
    /// The <c>PurchConfirmationRequestJour</c> record.
    /// </param>
    protected void setDataContractRecord(Common _common)
    {
        purchConfirmationRequestJour = args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitToRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyses the <c>args</c> object and converts the content to a <c>RecordSortedList</c> object.
    /// </summary>
    /// <returns>
    /// A <c>RecordSortedList</c> with the relevant records from the <c>args</c> object of the class.
    /// </returns>
    protected RecordSortedList splitToRecordList()
    {
        RecordSortedList            recordList;

        if (this.parmArgs().record())
        {
            recordList             = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            recordList             = this.parmArgs().object();
        }
        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchConfirmationRequestController construct()
    {
        return new PurchConfirmationRequestController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController          formLetterController = PurchConfirmationRequestController::construct();
        PurchConfirmationRequestController    controller;

        controller = formLetterController;
        controller.initArgs(_args, ssrsReportStr(PurchPurchaseOrder, Report));
        formLetterController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves an initialized instance of the data contract associated with the current report.
    /// </summary>
    /// <param name="_args">
    ///     The arguments used to launch the reporting printing process.
    /// </param>
    /// <returns>
    ///     An instance of the <c>SrsReportDataContract</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     An exception is thrown if the record passed in the arguments is not of the <c>PurchConfirmationRequestJour</c> table.
    /// </exception>
    public static SrsReportDataContract newDataContract(Args _args)
    {
        PurchConfirmationRequestController formLetterController = PurchConfirmationRequestController::construct();

        if (_args.dataset() != tableNum(PurchConfirmationRequestJour))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        formLetterController.initDataContract(_args, ssrsReportStr(PurchPurchaseOrder, Report));

        return formLetterController.parmReportContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>