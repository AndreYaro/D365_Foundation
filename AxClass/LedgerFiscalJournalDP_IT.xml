<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFiscalJournalDP_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider class for <c>LedgerFiscalJournal_IT</c> Report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(LedgerFiscalJournalContract_IT))
]
public class LedgerFiscalJournalDP_IT extends SRSReportDataProviderPreProcessTempDb
{
    LedgerReportJournal_IT              ledgerReportJournal_IT;
    LedgerFiscalJournalTmp_IT           ledgerFiscalJournalTmp_IT, ledgerFiscalJournalTmp_IT_1;
    MainAccount                         mainAccount;
    RecordInsertList                    recordInsertList, recordInsertList_1;

    GeneralJournalEntry                 generalJournalEntry;
    GeneralJournalAccountEntry          generalJournalAccountEntry;
    LedgerEntryJournal                  ledgerEntryJournal;
    DimensionAttributeValueCombination  dimensionAttributeValueCombination;
    CompanyInfo                         companyInfo;
    SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
    FiscalCalendarPeriod                fiscalCalendarPeriod;
    VendTrans                           vendTransDocumentDate;
    LedgerJournalTable                  ledgerJournalTableDetailSummaryPosting;

    TransDate                           fromDate;
    TransDate                           toDate;
    TransDate                           transDate;
    date                                maxDates;

    // Italian feature needs these 3 booleans
    boolean                             postingProfileCurrent;
    boolean                             postingProfileOperations;
    boolean                             postingProfileTax;

    NoYes                               allYear;
    NoYes                               changeSequenceNumber;
    NoYes                               changeAmountCurCredit;
    NoYes                               changeAmountCurDebit;
    NoYes                               changePageNumber;

    int                                 lastPage;
    int                                 changelastPage;
    int                                 lastsequenceNumber;
    int                                 changeLastSequenceNumber;
    int                                 pageNum;
    int                                 sequenceNum;

    AmountCurCredit                     changeLastAmountCurCredit;
    AmountCurDebit                      changeLastAmountCurDebit;
    AmountCurCredit                     lastAmountCurCredit;
    AmountCurDebit                      lastAmountCurDebit;

    AmountMST                           sumDebit;
    AmountMST                           sumCredit;
    AmountMST                           sumDebitPage;
    AmountMST                           sumCreditPage;
    AmountCur                           amountCurTotal;
    AmountMST                           amountMSTTotal;

    LedgerTransType                     ledgerTransType;
    Name                                journalName;
    Name                                custVendName;
    CustVendAC                          custVendAccount;

    Voucher                             voucher;
    Voucher                             prevVoucher;

    FiscalPeriodType                    periodType;
    str                                 pageNumberStr;

    // counter of lines qty
    int                                 linesCnt;

    // temporary table which is used to transfer parameters from AX to SSRS
    LedgerFiscalJournalParametersTmp_IT ledgerFiscalJournalParametersTmp_IT;

    private LedgerFiscalJournalTmp_IT ledgerFiscalJournalTmpGrouped;
    private Map custAccountSearchResultsCache;
    private Map vendAccountSearchResultsCache;

    // parameter for correct pagination
    #DEFINE.linesPerPage(25)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addStarsToTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used for filling the empty space on the last page of the report with "*".
    /// </summary>
    protected void addStarsToTmpTable()
    {
        int i, counter;

        counter = #linesPerPage - (linesCnt mod #linesPerPage);

        for (i = 1; i <= counter; i++)
        {
            ledgerFiscalJournalTmp_IT.clear();
            ledgerFiscalJournalTmp_IT.AccountNum            = '*';
            ledgerFiscalJournalTmp_IT.RegistrationNumber    = companyInfo.CoRegNum;
            ledgerFiscalJournalTmp_IT.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the credit amount value.
    /// </summary>
    /// <returns>
    /// The amount value.
    /// </returns>
    private AmountMST amountCredit()
    {
        AmountMST amountMST;

        if (generalJournalAccountEntry.IsCredit)
        {
            amountMST = -generalJournalAccountEntry.AccountingCurrencyAmount;
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the currency credit amount value.
    /// </summary>
    /// <returns>
    /// The amount value.
    /// </returns>
    private AmountCur amountCurCredit()
    {
        AmountCur amountCur;

        if (generalJournalAccountEntry.IsCredit &&
            generalJournalAccountEntry.TransactionCurrencyAmount != generalJournalAccountEntry.AccountingCurrencyAmount)
        {
            amountCur = -generalJournalAccountEntry.TransactionCurrencyAmount;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the currency debit amount value.
    /// </summary>
    /// <returns>
    /// The amount value.
    /// </returns>
    private AmountCur amountCurDebit()
    {
        AmountCur amountCur;

        if (!generalJournalAccountEntry.IsCredit &&
            generalJournalAccountEntry.TransactionCurrencyAmount != generalJournalAccountEntry.AccountingCurrencyAmount)
        {
            amountCur = generalJournalAccountEntry.TransactionCurrencyAmount;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the debit amount value.
    /// </summary>
    /// <returns>
    /// The amount value.
    /// </returns>
    private AmountMST amountDebit()
    {
        AmountMST amountMST;

        if (!generalJournalAccountEntry.IsCredit)
        {
            amountMST = generalJournalAccountEntry.AccountingCurrencyAmount;
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the <c>custVendName</c> value and the account number.
    /// </summary>
    public void findCustVend()
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        CustLedgerAccounts                  custLedgerAccounts;
        VendLedgerAccounts                  vendLedgerAccounts;
        VendTrans                           vendTrans;
        CustTrans                           custTrans;
        boolean                             noNameFound;

        TmpTaxReport_IT tmpTaxReport_IT;

        custVendAccount = "";
        custVendName    = "";
        noNameFound = true;

        MainAccountRecId dimensionMainAccount = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(dimensionAttributeValueCombination.RecId);

        if (!dimensionMainAccount)
            return;

        //Ledger transactions generated in journals and it belong to Cust/Vend Balance
        if (ledgerEntryJournal.JournalNumber
            && (generalJournalAccountEntry.PostingType == LedgerPostingType::CustBalance
            || generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance))
        {
            while select AccountType, PostingProfile, LedgerDimension from ledgerJournalTrans
                order by Voucher,RecId
                where ledgerJournalTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && (ledgerJournalTrans.AmountCurCredit == abs(generalJournalAccountEntry.AccountingCurrencyAmount)
                    || ledgerJournalTrans.AmountCurDebit == abs(generalJournalAccountEntry.AccountingCurrencyAmount))
            {
                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                {
                    select firstonly AccountNum, BillOfExchangeID from custTrans
                        where custTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                            && custTrans.AccountNum == ledgerJournalTrans.parmAccount();

                    if (custTrans
                        && (this.isMainAccountInCustPostingProfile(dimensionMainAccount, ledgerJournalTrans.PostingProfile)
                        || custTrans.BillOfExchangeID))
                    {
                        custVendName = tmpTaxReport_IT.getCustVendName(toDate, CustTable::find(custTrans.AccountNum).Party);
                        custVendAccount = custTrans.AccountNum;
                    }
                }

                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                {
                    select firstonly AccountNum, PromissoryNoteID from vendTrans
                        where vendTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                            && vendTrans.AccountNum == ledgerJournalTrans.parmAccount();

                    if (vendTrans
                            && (this.isMainAccountInVendPostingProfile(dimensionMainAccount, ledgerJournalTrans.PostingProfile)
                            || vendTrans.PromissoryNoteID))
                    {
                        custVendName = tmpTaxReport_IT.getCustVendName(toDate, VendTable::find(vendTrans.AccountNum).Party);
                        custVendAccount = vendTrans.AccountNum;
                    }
                }
                if (custVendAccount)
                {
                    noNameFound = false;
                    break;
                }
            }
        }

        if (noNameFound)
        {
            while select AccountType, OffsetLedgerDimension, PostingProfile from ledgerJournalTrans
                order by Voucher
                where    ledgerJournalTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
            {
                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                {
                    select firstonly AccountNum, BillOfExchangeID from custTrans
                        where custTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && (custTrans.AmountMST == generalJournalAccountEntry.AccountingCurrencyAmount);

                    if (custTrans
                        && (this.isMainAccountInCustPostingProfile(dimensionMainAccount, ledgerJournalTrans.PostingProfile)
                        || custTrans.BillOfExchangeID))
                    {
                        custVendName = tmpTaxReport_IT.getCustVendName(toDate, CustTable::find(custTrans.AccountNum).Party);
                        custVendAccount = custTrans.AccountNum;
                    }
                }

                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                {
                    select firstonly AccountNum, PromissoryNoteID from vendTrans
                        where vendTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && (vendTrans.AmountMST == generalJournalAccountEntry.AccountingCurrencyAmount);

                    if (vendTrans
                        && (this.isMainAccountInVendPostingProfile(dimensionMainAccount, ledgerJournalTrans.PostingProfile)
                        || vendTrans.PromissoryNoteID))
                    {
                        custVendName = tmpTaxReport_IT.getCustVendName(toDate, VendTable::find(vendTrans.AccountNum).Party);
                        custVendAccount = vendTrans.AccountNum;
                    }
                }
                if (custVendAccount)
                {
                    noNameFound = false;
                    break;
                }
            }
        }
        if (noNameFound)
        {
            while select PostingProfile, AccountNum, BillOfExchangeID from custTrans
                order by Voucher
                where    custTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && (custTrans.AmountMST == generalJournalAccountEntry.AccountingCurrencyAmount)
            {
                if (this.isMainAccountInCustPostingProfile(dimensionMainAccount, custTrans.PostingProfile)
                    || custTrans.BillOfExchangeID)
                {
                    custVendName = tmpTaxReport_IT.getCustVendName(toDate, CustTable::find(custTrans.AccountNum).Party);
                    custVendAccount = custTrans.AccountNum;
                }
            }

            while select PostingProfile, AccountNum, PromissoryNoteID from vendTrans
                order by Voucher
                where vendTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
            {
                if (this.isMainAccountInVendPostingProfile(dimensionMainAccount, vendTrans.PostingProfile)
                    || vendTrans.PromissoryNoteID)
                {
                    custVendName = tmpTaxReport_IT.getCustVendName(toDate, VendTable::find(vendTrans.AccountNum).Party);
                    custVendAccount = vendTrans.AccountNum;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAcknowledgementDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the correct Acknowledgement Date which wich should be displayed in the report
    /// </summary>
    /// <param name="_generalJournalEntry">
    ///     The current GeneralJournalEntry record which is being analyzed
    /// </param>
    /// <returns>
    ///    Acknowledgement Date which was found
    /// </returns>
    private AcknowledgementDate getAcknowledgementDate(GeneralJournalEntry _generalJournalEntry)
    {
        AcknowledgementDate    acknowledgementDate;
        ;
        if (_generalJournalEntry.AcknowledgementDate)
        {
            acknowledgementDate = _generalJournalEntry.AcknowledgementDate;
        }
        else if (   _generalJournalEntry.JournalCategory == ledgerTransType::Cust
                 || _generalJournalEntry.JournalCategory == ledgerTransType::Transfer
                 || _generalJournalEntry.JournalCategory == ledgerTransType::Purch)
        {
            acknowledgementDate = _generalJournalEntry.AccountingDate;
        }

        return acknowledgementDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the <c>currency</c> value, depending on the conditions.
    /// </summary>
    /// <returns>
    /// The <c>CurrencyCode</c> value.
    /// </returns>
    private CurrencyCode getCurrency()
    {
        CurrencyCode currencyCode;

        if (generalJournalAccountEntry.TransactionCurrencyCode && !generalJournalAccountEntry.IsCredit &&
            generalJournalAccountEntry.TransactionCurrencyAmount != generalJournalAccountEntry.AccountingCurrencyAmount)
        {
            currencyCode = generalJournalAccountEntry.TransactionCurrencyCode;
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplaySequenceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculated <c>sequenceNumber</c> value.
    /// </summary>
    /// <returns>
    /// The <c>SequenceNumber</c> value.
    /// </returns>
    protected str getDisplaySequenceNumber()
    {
        sequenceNum++;
        return strRFix(strfmt(int2str(sequenceNum)),8,'0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the document date value.
    /// </summary>
    /// <returns>
    /// The date value.
    /// </returns>
    protected DocumentDate getDocumentDate()
    {
        VendTrans       vendTrans;
        DocumentDate    documentDate;

        if (generalJournalEntry.JournalCategory == LedgerTransType::Purch)
        {
            documentDate = generalJournalEntry.DocumentDate;
        }
        else
        {
            select firstonly DocumentDate from vendTrans
                where vendTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher 
                    && vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Invoiced 
                    && vendTrans.DocumentDate;
                
            if (vendTrans.DocumentDate)
            {
                documentDate = vendTrans.DocumentDate;
            }
        }

        if (!documentDate)
        {
            documentDate = generalJournalEntry.AccountingDate;
        }

        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerFiscalJournalTmp_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>LedgerFiscalJournalTmp_IT</c> temporary table.
    /// </summary>
    /// <returns>
    /// Data from the <c>LedgerFiscalJournalTmp_IT</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(LedgerFiscalJournalTmp_IT))]
    public LedgerFiscalJournalTmp_IT getLedgerFiscalJournalTmp_IT()
    {
        select ledgerFiscalJournalTmpGrouped;
        return ledgerFiscalJournalTmpGrouped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParamsTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetching the data from <c>LedgerFiscalJournalParametersTmp_IT</c> Temp Table.
    /// </summary>
    /// <returns>
    /// Data from <c>LedgerFiscalJournalParametersTmp_IT</c>.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerFiscalJournalParametersTmp_IT))]
    public LedgerFiscalJournalParametersTmp_IT getParamsTmpTable()
    {
        select ledgerFiscalJournalParametersTmp_IT;
        return ledgerFiscalJournalParametersTmp_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables with the data from the given contract.
    /// </summary>
    /// <param name = "_contract">A report contract.</param>
    protected void initFromContract(LedgerFiscalJournalContract_IT _contract)
    {
        fromDate                    = _contract.parmFromDate();
        toDate                      = _contract.parmToDate();
        allYear                     = _contract.parmAllYear();
        changePageNumber            = _contract.parmChangePageNumber();
        changeSequenceNumber        = _contract.parmChangeSequenceNumber();
        changeAmountCurDebit        = _contract.parmChangeAmountCurDebit();
        changeAmountCurCredit       = _contract.parmChangeAmountCurCredit();
        postingProfileCurrent       = _contract.parmPostingProfileCurrent();
        postingProfileOperations    = _contract.parmPostingProfileOperations();
        postingProfileTax           = _contract.parmPostingProfileTax();
        lastPage                    = _contract.parmLastPage();
        changelastPage              = _contract.parmChangelastPage();
        changeLastSequenceNumber    = _contract.parmChangeLastSequenceNumber();
        changeLastAmountCurDebit    = _contract.parmChangeLastAmountCurDebit();
        changeLastAmountCurCredit   = _contract.parmChangeLastAmountCurCredit();
        lastsequenceNumber          = _contract.parmLastsequenceNumber();
        lastAmountCurCredit         = _contract.parmLastAmountCurCredit();
        lastAmountCurDebit          = _contract.parmLastAmountCurDebit();
        pageNumberStr               = int2str(year(LedgerFiscalCalendar::findOpeningStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(),fromDate))) + ' / ';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values into the <c>LedgerReportJournal_IT</c> table.
    /// </summary>
    public void initReport()
    {
        date                fromDateMinusOne;
        date                gapdate;
        FiscalCalendarRecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        recordInsertList = new RecordInsertList(ledgerFiscalJournalTmp_IT.TableId, true, true, true, true, true, ledgerFiscalJournalTmp_IT);
        custAccountSearchResultsCache = new Map(Types::Container, Types::Enum);
        vendAccountSearchResultsCache = new Map(Types::Container, Types::Enum);

        ttsbegin;

        fromDateMinusOne = fromDate-1;

        if (changePageNumber)
        {
            lastPage = changeLastPage;
        }

        if (changeSequenceNumber)
        {
            lastSequenceNumber = changeLastSequenceNumber;
        }

        if (changeAmountCurDebit)
        {
            lastAmountCurDebit = changeLastAmountCurDebit;
        }

        if (changeAmountCurCredit)
        {
            lastAmountCurCredit = changeLastAmountCurCredit;
        }

        select maxof(PrintDate) from ledgerReportJournal_IT;
        maxDates = ledgerReportJournal_IT.PrintDate;

        if (fromDateMinusOne <  maxDates)
        {
            delete_from ledgerReportJournal_IT
                where  ledgerReportJournal_IT.PrintDate > fromDateMinusOne;

            if (!allYear)
            {
                delete_from ledgerReportJournal_IT
                where  ledgerReportJournal_IT.PrintDate >= fromDateMinusOne;
                ledgerReportJournal_IT.PrintDate  = fromDateMinusOne;
                ledgerReportJournal_IT.SeqNum     = lastSequenceNumber;
                ledgerReportJournal_IT.Page       = lastPage;
                ledgerReportJournal_IT.SumCredit  = lastAmountCurCredit;
                ledgerReportJournal_IT.SumDebit   = lastAmountCurDebit;
                ledgerReportJournal_IT.insert();
            }
            else
            // a gap may exist that needs to be properly filled.
            // If a record exists for the previous day just use it else create it if
            // the dates are in the same fiscal year.
            {
                select maxof(PrintDate) from ledgerReportJournal_IT;
                gapDate = ledgerReportJournal_IT.PrintDate;
                if ((fromDateMinusOne != gapDate) &&
                    (LedgerFiscalCalendar::findFiscalYearEndDateByDate(calendarRecId, fromDateMinusOne) == LedgerFiscalCalendar::findFiscalYearEndDateByDate(calendarRecId, gapDate)))
                {
                    select SeqNum, Page, SumCredit, SumDebit from ledgerReportJournal_IT
                    where ledgerReportJournal_IT.PrintDate == gapDate;
                    ledgerReportJournal_IT.SeqNum    = ledgerReportJournal_IT.SeqNum;
                    ledgerReportJournal_IT.Page      = ledgerReportJournal_IT.Page;
                    ledgerReportJournal_IT.SumCredit = ledgerReportJournal_IT.SumCredit;
                    ledgerReportJournal_IT.SumDebit  = ledgerReportJournal_IT.SumDebit;
                    ledgerReportJournal_IT.PrintDate = fromDateMinusOne;
                    ledgerReportJournal_IT.insert();
                }
            }
        }
        else if (fromDateMinusOne > maxDates)
        {
            if (allYear)
            {
                delete_from ledgerReportJournal_IT
                    where  ledgerReportJournal_IT.PrintDate == fromDateMinusOne;

                // There is a gap between the last run and this date range and no specific values were entered.
                // If the dates are in the same fiscal year bring the values forward
                // from the last record in the table.

                if (LedgerFiscalCalendar::findFiscalYearEndDateByDate(calendarRecId, fromDateMinusOne) == LedgerFiscalCalendar::findFiscalYearEndDateByDate(calendarRecId,maxDates))
                {
                    select SeqNum, Page, SumCredit, SumDebit from ledgerReportJournal_IT
                    where ledgerReportJournal_IT.PrintDate == maxDates;
                    ledgerReportJournal_IT.SeqNum    = ledgerReportJournal_IT.SeqNum;
                    ledgerReportJournal_IT.Page      = ledgerReportJournal_IT.Page;
                    ledgerReportJournal_IT.SumCredit = ledgerReportJournal_IT.SumCredit;
                    ledgerReportJournal_IT.SumDebit  = ledgerReportJournal_IT.SumDebit;
                }
                else
                {
                    ledgerReportJournal_IT.SeqNum    = 0;
                    ledgerReportJournal_IT.Page      = 0;
                    ledgerReportJournal_IT.SumCredit = 0;
                    ledgerReportJournal_IT.SumDebit  = 0;
                }
                ledgerReportJournal_IT.PrintDate = fromDateMinusOne;
                ledgerReportJournal_IT.insert();
            }
            else
            {
                if (!maxDates)
                {
                    delete_from ledgerReportJournal_IT
                    where  ledgerReportJournal_IT.PrintDate == fromDateMinusOne;
                }
                ledgerReportJournal_IT.PrintDate = fromDateMinusOne;
                ledgerReportJournal_IT.SeqNum    = lastSequenceNumber;
                ledgerReportJournal_IT.Page      = lastPage;
                ledgerReportJournal_IT.SumCredit = lastAmountCurCredit;
                ledgerReportJournal_IT.SumDebit  = lastAmountCurDebit;
                ledgerReportJournal_IT.insert();
            }
        }
        else if (fromDateMinusOne == maxDates)
        {
            ledgerReportJournal_IT = LedgerReportJournal_IT::findByPrintDate(fromDateMinusOne);
            sequenceNum = ledgerReportJournal_IT.SeqNum;
            pageNum     = ledgerReportJournal_IT.Page;
            sumCredit   = ledgerReportJournal_IT.SumCredit;
            sumDebit    = ledgerReportJournal_IT.SumDebit;

            if (!allYear)
            {
                ledgerReportJournal_IT = LedgerReportJournal_IT::findByPrintDate(fromDateMinusOne, true);
                if (ledgerReportJournal_IT.PrintDate)
                {
                    ledgerReportJournal_IT.SeqNum    = lastSequenceNumber;
                    ledgerReportJournal_IT.Page      = lastPage;
                    ledgerReportJournal_IT.SumCredit = lastAmountCurCredit;
                    ledgerReportJournal_IT.SumDebit  = lastAmountCurDebit;
                    ledgerReportJournal_IT.update();
                }
                else
                {
                    delete_from ledgerReportJournal_IT
                        where ledgerReportJournal_IT.PrintDate >= fromDateMinusOne;

                    ledgerReportJournal_IT.PrintDate = fromDateMinusOne;
                    ledgerReportJournal_IT.SeqNum    = lastSequenceNumber;
                    ledgerReportJournal_IT.Page      = lastPage;
                    ledgerReportJournal_IT.SumCredit = lastAmountCurCredit;
                    ledgerReportJournal_IT.SumDebit  = lastAmountCurDebit;
                    ledgerReportJournal_IT.insert();
                }
            }
            else
            {
                ledgerReportJournal_IT = LedgerReportJournal_IT::findByPrintDate(fromDateMinusOne);
                if (!ledgerReportJournal_IT.PrintDate)
                {
                    ledgerReportJournal_IT.PrintDate = fromDateMinusOne;
                    ledgerReportJournal_IT.SeqNum    = 0;
                    ledgerReportJournal_IT.Page      = 0;
                    ledgerReportJournal_IT.SumCredit = 0;
                    ledgerReportJournal_IT.SumDebit  = 0;
                    ledgerReportJournal_IT.insert();
                }
            }
        }

        ttscommit;

        ledgerReportJournal_IT = LedgerReportJournal_IT::findByPrintDate(fromDateMinusOne);

        // if the first day of the fiscal year then restart
        if (fromDate == LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, fromDate))
        {
            pageNum             = 0;
            sequenceNum         = 0;
            sumCredit           = 0;
            sumDebit            = 0;
            lastAmountCurDebit  = 0;
            lastAmountCurCredit = 0;
        }
        else
        {
            pageNum     = ledgerReportJournal_IT.Page;
            sequenceNum = ledgerReportJournal_IT.SeqNum;
            sumCredit   = ledgerReportJournal_IT.SumCredit;
            sumDebit    = ledgerReportJournal_IT.SumDebit;
        }

        delete_from ledgerFiscalJournalParametersTmp_IT;

        ledgerFiscalJournalParametersTmp_IT.clear();
        ledgerFiscalJournalParametersTmp_IT.LastPageNum     = pageNum;
        ledgerFiscalJournalParametersTmp_IT.PageNumberStr   = pageNumberStr;
        ledgerFiscalJournalParametersTmp_IT.LastSequenceNum = sequenceNum;
        ledgerFiscalJournalParametersTmp_IT.AmountCredit    = sumCredit;
        ledgerFiscalJournalParametersTmp_IT.AmountDebit     = sumDebit;
        ledgerFiscalJournalParametersTmp_IT.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerFiscalJournalTmp_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>LedgerFiscalJournalTmp_IT</c> temporary table.
    /// </summary>
    /// <returns>
    /// A Boolean value.
    /// </returns>
    protected boolean insertLedgerFiscalJournalTmp_IT()
    {
        boolean     ret;
        MainAccount localMainAccount;

        if (subledgerVoucherGeneralJournalEntry.Voucher != voucher || fiscalCalendarPeriod.Type != periodType)
        {
            voucher                         = subledgerVoucherGeneralJournalEntry.Voucher;
            periodType                      = fiscalCalendarPeriod.Type;
            transDate                       = generalJournalEntry.AccountingDate;
            ledgerTransType                 = generalJournalEntry.JournalCategory;
            journalName                     = LedgerPostingJournal::find(generalJournalEntry.LedgerPostingJournal).Name;
        }

        prevVoucher = voucher;

        localMainAccount = MainAccount::find(dimensionAttributeValueCombination.MainAccount);

        ledgerFiscalJournalTmp_IT.AccountName           = localMainAccount.localizedName();
        ledgerFiscalJournalTmp_IT.AccountNum            = localMainAccount.MainAccountId;
        ledgerFiscalJournalTmp_IT.AcknowledgementDate   = this.getAcknowledgementDate(generalJournalEntry);
        ledgerFiscalJournalTmp_IT.Currency              = this.getCurrency();
        ledgerFiscalJournalTmp_IT.CustVendAccount       = custVendAccount;
        ledgerFiscalJournalTmp_IT.CustVendName          = custVendName;
        ledgerFiscalJournalTmp_IT.DocumentDate          = this.getDocumentDate();
        ledgerFiscalJournalTmp_IT.LedgerTransTxt        = generalJournalAccountEntry.Text;
        ledgerFiscalJournalTmp_IT.TransDate             = transDate;
        ledgerFiscalJournalTmp_IT.Voucher               = voucher;
        ledgerFiscalJournalTmp_IT.PageNum               = pageNumberStr;
        ledgerFiscalJournalTmp_IT.RegistrationNumber    = companyInfo.CoRegNum;
        ledgerFiscalJournalTmp_IT.AmountCredit          = this.amountCredit();
        ledgerFiscalJournalTmp_IT.AmountDebit           = this.amountDebit();
        ledgerFiscalJournalTmp_IT.AmountCurCredit       = this.amountCurCredit();
        ledgerFiscalJournalTmp_IT.AmountCurDebit        = this.amountCurDebit();
        ledgerFiscalJournalTmp_IT.IsDebit               = !generalJournalAccountEntry.IsCredit;

        recordInsertList.add(ledgerFiscalJournalTmp_IT);

        sumCredit += ledgerFiscalJournalTmp_IT.AmountCredit;
        sumDebit += ledgerFiscalJournalTmp_IT.AmountDebit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMainAccountInCustPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the main account and the posting profile combination exists in the customer posting profile setup.
    /// The search results are cached.
    /// </summary>
    /// <param name = "_mainAccountRecId">The RecID for the main account.</param>
    /// <param name = "_postingProfile">The posting profile string.</param>
    /// <returns>true if the combination of main account and the posting profile exists; otherwise, false.</returns>
    private boolean isMainAccountInCustPostingProfile(MainAccountRecId _mainAccountRecId, PostingProfile _postingProfile)
    {
        NoYes searchResult;

        if (custAccountSearchResultsCache.exists([_mainAccountRecId, _postingProfile]))
        {
            searchResult = custAccountSearchResultsCache.lookup([_mainAccountRecId, _postingProfile]);
        }
        else
        {
            CustLedgerAccounts custLedgerAccounts;
            while select SummaryLedgerDimension from custLedgerAccounts
                where custLedgerAccounts.PostingProfile == _postingProfile
            {
                MainAccountRecId custSummaryMainAccountRecId = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(custLedgerAccounts.SummaryLedgerDimension);

                if (_mainAccountRecId == custSummaryMainAccountRecId)
                {
                    searchResult = NoYes::Yes;
                    custAccountSearchResultsCache.insert([_mainAccountRecId, _postingProfile], searchResult);
                    break;
                }
            }

            if (searchResult == NoYes::No)
            {
                custAccountSearchResultsCache.insert([_mainAccountRecId, _postingProfile], searchResult);
            }
        }

        return searchResult == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMainAccountInVendPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the main account and the posting profile combination exists in the vendor posting profile setup.
    /// The search results are cached.
    /// </summary>
    /// <param name = "_mainAccountRecId">The RecID for the main account.</param>
    /// <param name = "_postingProfile">The posting profile string.</param>
    /// <returns>true if the combination of main account and the posting profile exists; otherwise, false.</returns>
    private boolean isMainAccountInVendPostingProfile(MainAccountRecId _mainAccountRecId, PostingProfile _postingProfile)
    {
        NoYes searchResult;

        if (vendAccountSearchResultsCache.exists([_mainAccountRecId, _postingProfile]))
        {
            searchResult = vendAccountSearchResultsCache.lookup([_mainAccountRecId, _postingProfile]);
        }
        else
        {
            VendLedgerAccounts vendLedgerAccounts;
            while select SummaryLedgerDimension, PurchasingLedgerDimension from vendLedgerAccounts
                where vendLedgerAccounts.PostingProfile == _postingProfile
            {
                MainAccountRecId vendSummaryMainAccount = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(vendLedgerAccounts.SummaryLedgerDimension);
                MainAccountRecId vendPurchLedgerMainAccount = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(vendLedgerAccounts.PurchasingLedgerDimension);

                if (vendSummaryMainAccount == _mainAccountRecId
                    || vendPurchLedgerMainAccount == _mainAccountRecId)
                {
                    searchResult = NoYes::Yes;
                    vendAccountSearchResultsCache.insert([_mainAccountRecId, _postingProfile], searchResult);
                    break;
                }
            }

            if (searchResult == NoYes::No)
            {
                vendAccountSearchResultsCache.insert([_mainAccountRecId, _postingProfile], searchResult);
            }
        }

        return searchResult == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// the  at runtime. The method should compute data and populate the data tables that will be returned
    /// to .
    /// </remarks>
    public void processReport()
    {
        boolean recordExists;
        LedgerRecId ledgerRecId = Ledger::current();
        LedgerSystemAccounts ledgerSystemAccounts = LedgerSystemAccounts::find(LedgerPostingType::YearResult);

        LedgerFiscalJournalContract_IT contract = this.parmDataContract() as LedgerFiscalJournalContract_IT;

        companyInfo = CompanyInfo::find();

        if (LedgerFiscalJournalDPPostProcessTmpTableUsingInsertRecordsetFlight_IT::instance().isEnabled())
        {
            this.setUserConnection(ledgerFiscalJournalTmp_IT);
            this.setUserConnection(ledgerFiscalJournalTmpGrouped);
        }

        this.initFromContract(contract);
        this.initReport();

        QueryRun reportQuery = LedgerFiscalJournalDP_IT::buildQueryContract(contract);
        while (reportQuery.next())
        {
            this.addLine(reportQuery);
            recordExists = true;
        }

        // The query for lines with posting = LedgerPostingType::Closing to be put in the end of the report
        QueryRun reportQueryPostingClosing = LedgerFiscalJournalDP_IT::buildQueryContract(contract);
        findOrCreateRange_W(
            reportQueryPostingClosing.query().dataSourceTable(tableNum(DimensionAttributeValueCombination)),
            fieldNum(dimensionAttributeValueCombination, RecId),
            queryValue(ledgerSystemAccounts.LedgerDimension)
            );
        while (reportQueryPostingClosing.next())
        {
            this.addLine(reportQueryPostingClosing);
            recordExists = true;
        }

        if (recordExists)
        {
            this.findCustVend();
            generalJournalAccountEntry.TransactionCurrencyAmount    += amountCurTotal;
            generalJournalAccountEntry.AccountingCurrencyAmount     += amountMSTTotal;
            this.insertLedgerFiscalJournalTmp_IT();
        }

        recordInsertList.insertDatabase();

        this.postProcessTmpTable();

        ledgerReportJournal_IT.PrintDate    = toDate;
        ledgerReportJournal_IT.SumDebit     = sumDebit;
        ledgerReportJournal_IT.SumCredit    = sumCredit;
        ledgerReportJournal_IT.Page         = 0;
        ledgerReportJournal_IT.SeqNum       = sequenceNum;
        ledgerReportJournal_IT.insert();

        delete_from ledgerReportJournal_IT
            where ledgerReportJournal_IT.PrintDate > toDate;

        if (LedgerFiscalJournalDPPostProcessTmpTableUsingInsertRecordsetFlight_IT::instance().isEnabled())
        {
            ledgerFiscalJournalTmp_IT.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the data exist for the report.
    /// </summary>
    /// <param name="_fromDate">
    ///     Start date of the period of the report
    /// </param>
    /// <param name="_toDate">
    ///     End date of the period of the report
    /// </param>
    /// <param name="_postingProfileCurrent">
    ///     The value of the datacontract parameter PostingProfileCurrent
    /// </param>
    /// <param name="_postingProfileOperations">
    ///     The value of the datacontract parameter PostingProfileOperations
    /// </param>
    /// <param name="_postingProfileTax">
    ///     The value of the datacontract parameter PostingProfileTax
    /// </param>
    /// <returns>
    ///    true if data exist for the report; false otherwise
    /// </returns>
    static boolean dataExist(FromDate   _fromDate,
                             ToDate     _toDate,
                             boolean    _postingProfileCurrent,
                             boolean    _postingProfileOperations,
                             boolean    _postingProfileTax)
    {
        LedgerFiscalJournalContract_IT contract = new LedgerFiscalJournalContract_IT();
        contract.parmFromDate(_fromDate);
        contract.parmToDate(_toDate);
        contract.parmPostingProfileCurrent(_postingProfileCurrent);
        contract.parmPostingProfileOperations(_postingProfileOperations);
        contract.parmPostingProfileTax(_postingProfileTax);

        return LedgerFiscalJournalDP_IT::dataExistContract(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataExistContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the data exist for the report, takes a report contract as a parameter.
    /// </summary>
    /// <param name="_contract">
    ///     A report contract.
    /// </param>
    /// <returns>
    ///    true if data exist for the report; false otherwise
    /// </returns>
    public static boolean dataExistContract(LedgerFiscalJournalContract_IT _contract)
    {
        QueryRun reportQuery = LedgerFiscalJournalDP_IT::buildQueryContract(_contract);

        reportQuery.query().dataSourceTable(tableNum(DimensionAttributeValueCombination))
            .clearRange(fieldNum(dimensionAttributeValueCombination, RecId));
        reportQuery.query().firstOnly1(true);

        return reportQuery.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the query for the report data.
    /// </summary>
    /// <param name="_fromDate">
    ///     Start date of the period of the report
    /// </param>
    /// <param name="_toDate">
    ///     End date of the period of the report
    /// </param>
    /// <param name="_postingProfileCurrent">
    ///     The value of the datacontract parameter PostingProfileCurrent
    /// </param>
    /// <param name="_postingProfileOperations">
    ///     The value of the datacontract parameter PostingProfileOperations
    /// </param>
    /// <param name="_postingProfileTax">
    ///     The value of the datacontract parameter PostingProfileTax
    /// </param>
    /// <returns>
    ///     A <c>QueryRun</c> object for the created report query.
    /// </returns>
    static QueryRun buildQuery(
        FromDate   _fromDate,
        ToDate     _toDate,
        boolean    _postingProfileCurrent,
        boolean    _postingProfileOperations,
        boolean    _postingProfileTax
        )
    {
        LedgerFiscalJournalContract_IT contract = new LedgerFiscalJournalContract_IT();
        contract.parmFromDate(_fromDate);
        contract.parmToDate(_toDate);
        contract.parmPostingProfileCurrent(_postingProfileCurrent);
        contract.parmPostingProfileOperations(_postingProfileOperations);
        contract.parmPostingProfileTax(_postingProfileTax);

        return LedgerFiscalJournalDP_IT::buildQueryContract(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the query for the report data, using the report contract.
    /// </summary>
    /// <param name="_contract">
    ///     A report contract.
    /// </param>
    /// <returns>
    ///     A <c>QueryRun</c> object for the created report query.
    /// </returns>
    public static QueryRun buildQueryContract(LedgerFiscalJournalContract_IT _contract)
    {
        boolean postingProfileCurrent = _contract.parmPostingProfileCurrent();
        boolean postingProfileOperations = _contract.parmPostingProfileOperations();
        boolean postingProfileTax = _contract.parmPostingProfileTax();
        FromDate fromDate = _contract.parmFromDate();
        ToDate toDate = _contract.parmToDate();

        LedgerRecId ledgerRecId = Ledger::current();
        LedgerSystemAccounts ledgerSystemAccounts = LedgerSystemAccounts::find(LedgerPostingType::YearResult);

        Query query = new Query();
        QueryBuildRange qbr;

        if (!postingProfileCurrent && !postingProfileOperations && !postingProfileTax)
            return new QueryRun(query);

        //GeneralJournalAccountEntry
        QueryBuildDataSource genJourAccEntryDS = query.addDataSource(tableNum(GeneralJournalAccountEntry));
        
        str strRange;
        if (!FeatureStateProvider::isFeatureEnabled(PostingZeroInvoicesInGeneralLedgerFeature::instance()))
        {
            strRange = strfmt('((%1 != %2) || (%3 != %4))',
                fieldStr(GeneralJournalAccountEntry, TransactionCurrencyAmount),
                queryValue(0),
                fieldStr(GeneralJournalAccountEntry, AccountingCurrencyAmount),
                queryValue(0)
                );
            findOrCreateRange_W(genJourAccEntryDS, fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount), strRange);
        }

        //DimensionAttributeValueCombination
        QueryBuildDataSource dimAttrValueCombDS = genJourAccEntryDS.addDataSource(tableNum(DimensionAttributeValueCombination));
        dimAttrValueCombDS.relations(false);
        dimAttrValueCombDS.addLink(
            fieldNum(GeneralJournalAccountEntry, LedgerDimension),
            fieldNum(DimensionAttributeValueCombination, RecId),
            genJourAccEntryDS.name());
        dimAttrValueCombDS.joinMode(JoinMode::InnerJoin);
        
        findOrCreateRange_W(
            dimAttrValueCombDS,
            fieldNum(DimensionAttributeValueCombination, RecId),
            SysQuery::valueNot(ledgerSystemAccounts.LedgerDimension)
            );

        dimAttrValueCombDS.fetchMode(QueryFetchMode::One2One);

        //GeneralJournalEntry
        QueryBuildDataSource genJourEntryDS = genJourAccEntryDS.addDataSource(TableNum(GeneralJournalEntry));
        genJourEntryDS.relations(false);
        genJourEntryDS.addLink(
            fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry),
            fieldNum(GeneralJournalEntry, RecId),
            genJourAccEntryDS.name());
        genJourEntryDS.joinMode(JoinMode::InnerJoin);
        genJourEntryDS.fetchMode(QueryFetchMode::One2One);

        strRange = strFmt('((%1 == %5) && (%2 >= %3) && (%2 <= %4) && ((%6 == %7) || (%6 == %8) || (%6 == %9)))',
            fieldStr(GeneralJournalEntry, AcknowledgementDate),
            fieldStr(GeneralJournalEntry, AccountingDate),
            date2StrXpp(fromDate),
            date2StrXpp(toDate),
            date2StrXpp(dateNull()),
            fieldStr(GeneralJournalEntry, JournalCategory),
            any2int(LedgerTransType::Cust),
            any2int(LedgerTransType::Transfer),
            any2int(LedgerTransType::Purch)
            );
        qbr = genJourEntryDS.addRange(fieldNum(GeneralJournalEntry, AcknowledgementDate));
        qbr.value(strRange);
                
        qbr = genJourEntryDS.addRange(fieldNum(GeneralJournalEntry, AcknowledgementDate));
        qbr.value(queryRange(fromDate, toDate));

        if (postingProfileCurrent)
        {
            qbr = genJourEntryDS.addRange(fieldNum(GeneralJournalEntry, PostingLayer));
            qbr.value(queryValue(CurrentOperationsTax::Current));
        }
        if (postingProfileOperations)
        {
            qbr = genJourEntryDS.addRange(fieldNum(GeneralJournalEntry, PostingLayer));
            qbr.value(queryValue(CurrentOperationsTax::Operations));
        }
        if (postingProfileTax)
        {
            qbr = genJourEntryDS.addRange(fieldNum(GeneralJournalEntry, PostingLayer));
            qbr.value(queryValue(CurrentOperationsTax::Tax));
        }
        
        findOrCreateRange_W(genJourEntryDS, fieldNum(GeneralJournalEntry, Ledger), queryValue(ledgerRecId));
    
        //SubledgerVoucherGeneralJournalEntry
        QueryBuildDataSource subLedgVoucherGenJourEntryDS = genJourAccEntryDS.addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));
        subLedgVoucherGenJourEntryDS.relations(false);
        subLedgVoucherGenJourEntryDS.addLink(
            fieldNum(GeneralJournalEntry, RecId),
            fieldNum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry),
            genJourEntryDS.name());
        subLedgVoucherGenJourEntryDS.joinMode(JoinMode::InnerJoin);
        subLedgVoucherGenJourEntryDS.fetchMode(QueryFetchMode::One2One);

        //FiscalCalendarPeriod
        QueryBuildDataSource fiscalCalPeriodDS = genJourAccEntryDS.addDataSource(tableNum(FiscalCalendarPeriod));
        fiscalCalPeriodDS.relations(false);
        fiscalCalPeriodDS.addLink(
            fieldNum(GeneralJournalEntry, FiscalCalendarPeriod),
            fieldNum(FiscalCalendarPeriod, RecId),
            genJourEntryDS.name());
        fiscalCalPeriodDS.joinMode(JoinMode::InnerJoin);
        fiscalCalPeriodDS.fetchMode(QueryFetchMode::One2One);
       
        //LedgerEntryJournal
        QueryBuildDataSource ledgerEntryJourDS = genJourAccEntryDS.addDataSource(tableNum(LedgerEntryJournal));
        ledgerEntryJourDS.relations(false);
        ledgerEntryJourDS.addLink(
            fieldNum(GeneralJournalEntry, LedgerEntryJournal),
            fieldNum(LedgerEntryJournal, RecId),
            genJourEntryDS.name());
        ledgerEntryJourDS.joinMode(JoinMode::OuterJoin);
        ledgerEntryJourDS.fetchMode(QueryFetchMode::One2One);

        //LedgerEntryJournalizing
        QueryBuildDataSource ledgerEntryJournalizingDS = genJourAccEntryDS.addDataSource(tableNum(LedgerEntryJournalizing));
        ledgerEntryJournalizingDS.relations(false);
        ledgerEntryJournalizingDS.addLink(
                fieldNum(GeneralJournalAccountEntry, RecId),
                fieldNum(LedgerEntryJournalizing, GeneralJournalAccountEntry),
                genJourAccEntryDS.name());
        ledgerEntryJournalizingDS.joinMode(JoinMode::OuterJoin);
        ledgerEntryJournalizingDS.fetchMode(QueryFetchMode::One2One);

        ledgerEntryJournalizingDS.addOrderByField(fieldNum(LedgerEntryJournalizing, SequenceNumber));
        
        //MainAccount
        QueryBuildDataSource mainAccountDS = genJourAccEntryDS.addDataSource(tableNum(MainAccount));
        mainAccountDS.relations(false);
        mainAccountDS.addLink(
            fieldNum(DimensionAttributeValueCombination, MainAccount),
            fieldNum(MainAccount, RecId),
            dimAttrValueCombDS.name());
        mainAccountDS.joinMode(JoinMode::ExistsJoin);
        mainAccountDS.fetchMode(QueryFetchMode::One2One);

        // sorting fields
        genJourEntryDS.addOrderByField(fieldNum(GeneralJournalEntry, AcknowledgementDate));
        fiscalCalPeriodDS.addOrderByField(fieldNum(FiscalCalendarPeriod, Type));
        subLedgVoucherGenJourEntryDS.addOrderByField(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
        dimAttrValueCombDS.addOrderByField(fieldNum(DimensionAttributeValueCombination, DisplayValue));
        ledgerEntryJourDS.addOrderByField(fieldNum(LedgerEntryJournal, JournalNumber));
        genJourAccEntryDS.addOrderByField(fieldNum(GeneralJournalAccountEntry, Text));
        genJourAccEntryDS.addOrderByField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        genJourEntryDS.addOrderByField(fieldNum(GeneralJournalEntry, PostingLayer));
        genJourAccEntryDS.addOrderByField(fieldNum(GeneralJournalAccountEntry, IsCredit));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds line into the temporary table based on the current query cursor.
    /// </summary>
    /// <param name = "_currentRecord">
    ///     A <c>QueryRun</c> object which is pointing to the current query record.
    /// </param>
    private void addLine(QueryRun _currentRecord)
    {
        boolean detailData;

        GeneralJournalEntry  generalJournalEntryLocal = _currentRecord.get(tableNum(GeneralJournalEntry));
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntryLocal = _currentRecord.get(tableNum(SubledgerVoucherGeneralJournalEntry));
        GeneralJournalAccountEntry generalJournalAccountEntryLocal = _currentRecord.get(tableNum(GeneralJournalAccountEntry));
        LedgerEntryJournal ledgerEntryJournalLocal = _currentRecord.get(tableNum(LedgerEntryJournal));
        DimensionAttributeValueCombination dimensionAttributeValueCombinationLocal = _currentRecord.get(tableNum(DimensionAttributeValueCombination));
        FiscalCalendarPeriod fiscalCalendarPeriodLocal = _currentRecord.get(tableNum(FiscalCalendarPeriod));

        if (generalJournalEntry && generalJournalAccountEntry && dimensionAttributeValueCombination)
        {
            if (ledgerEntryJournal.JournalNumber
                && ledgerJournalTableDetailSummaryPosting)
            {
                detailData = LedgerJournalTable::find(ledgerEntryJournal.JournalNumber).DetailSummaryPosting == DetailSummary::Detail;
            }
            else
            {
                detailData = false;
            }

            if (generalJournalEntryLocal.AcknowledgementDate                == generalJournalEntry.AcknowledgementDate
                    && subledgerVoucherGeneralJournalEntryLocal.AccountingDate  == subledgerVoucherGeneralJournalEntry.AccountingDate
                    && subledgerVoucherGeneralJournalEntryLocal.Voucher         == subledgerVoucherGeneralJournalEntry.Voucher
                    && subledgerVoucherGeneralJournalEntryLocal.VoucherDataAreaId == subledgerVoucherGeneralJournalEntry.VoucherDataAreaId
                    && generalJournalEntryLocal.PostingLayer                    == generalJournalEntry.PostingLayer
                    && dimensionAttributeValueCombinationLocal.DisplayValue     == dimensionAttributeValueCombination.DisplayValue
                    && generalJournalAccountEntryLocal.TransactionCurrencyCode  == generalJournalAccountEntry.TransactionCurrencyCode
                    && generalJournalAccountEntryLocal.PostingType              == generalJournalAccountEntry.PostingType
                    && generalJournalAccountEntryLocal.IsCredit                 == generalJournalAccountEntry.IsCredit
                    && generalJournalEntryLocal.LedgerPostingJournal            == generalJournalEntry.LedgerPostingJournal
                    && ledgerEntryJournalLocal.JournalNumber                    == ledgerEntryJournal.JournalNumber
                    && generalJournalAccountEntryLocal.Text                     == generalJournalAccountEntry.Text)
            {
                if (detailData)
                {
                    this.findCustVendNameAccount();
                    this.insertLedgerFiscalJournalTmp_IT();
                }
                else
                {
                    amountCurTotal += generalJournalAccountEntry.TransactionCurrencyAmount;
                    amountMSTTotal += generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            }
            else
            {
                this.findCustVendNameAccount();

                generalJournalAccountEntry.TransactionCurrencyAmount    += amountCurTotal;
                generalJournalAccountEntry.AccountingCurrencyAmount     += amountMSTTotal;

                this.insertLedgerFiscalJournalTmp_IT();

                amountCurTotal = 0;
                amountMSTTotal = 0;
                custVendName = '';
                custVendAccount = '';
            }
        }

        generalJournalEntry                 = generalJournalEntryLocal.data();
        subledgerVoucherGeneralJournalEntry = subledgerVoucherGeneralJournalEntryLocal.data();
        dimensionAttributeValueCombination  = dimensionAttributeValueCombinationLocal.data();
        generalJournalAccountEntry          = generalJournalAccountEntryLocal.data();
        ledgerEntryJournal                  = ledgerEntryJournalLocal.data();
        fiscalCalendarPeriod                = fiscalCalendarPeriodLocal.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessTmpTable</Name>
				<Source><![CDATA[
    private void postProcessTmpTable()
    {
        if (LedgerFiscalJournalDPPostProcessTmpTableUsingInsertRecordsetFlight_IT::instance().isEnabled())
        {
            insert_recordset ledgerFiscalJournalTmpGrouped(
                AmountCredit,
                AmountDebit,
                AmountCurCredit,
                AmountCurDebit,
                AccountName,
                AccountNum,
                AcknowledgementDate,
                Currency,
                CustVendAccount,
                CustVendName,
                DocumentDate,
                LedgerTransTxt,
                TransDate,
                Voucher,
                RegistrationNumber)
            select
                sum(AmountCredit),
                sum(AmountDebit),
                sum(AmountCurCredit),
                sum(AmountCurDebit),
                AccountName,
                AccountNum,
                AcknowledgementDate,
                Currency,
                CustVendAccount,
                CustVendName,
                DocumentDate,
                LedgerTransTxt,
                TransDate,
                Voucher,
                maxof(RegistrationNumber)
            from ledgerFiscalJournalTmp_IT
                group by
                    AccountName,
                    AccountNum,
                    AcknowledgementDate,
                    Currency,
                    CustVendAccount,
                    CustVendName,
                    DocumentDate,
                    LedgerTransTxt,
                    TransDate,
                    Voucher,
                    IsDebit;

            select count(RecId) from ledgerFiscalJournalTmpGrouped;
            linesCnt += ledgerFiscalJournalTmpGrouped.RecId;
            sequenceNum += ledgerFiscalJournalTmpGrouped.RecId;

            delete_from ledgerFiscalJournalTmp_IT;
        }
        else
        {
            RecordInsertList recordInsertListGrouped = new RecordInsertList(
                ledgerFiscalJournalTmpGrouped.TableId,
                true,
                true,
                true,
                true,
                true,
                ledgerFiscalJournalTmpGrouped);

            while select
                sum(AmountCredit),
                sum(AmountDebit),
                sum(AmountCurCredit),
                sum(AmountCurDebit)
            from ledgerFiscalJournalTmp_IT
                group by
                    AccountName,
                    AccountNum,
                    AcknowledgementDate,
                    Currency,
                    CustVendAccount,
                    CustVendName,
                    DocumentDate,
                    LedgerTransTxt,
                    TransDate,
                    Voucher,
                    PageNum,
                    RegistrationNumber,
                    IsDebit
            {
                ledgerFiscalJournalTmpGrouped.data(ledgerFiscalJournalTmp_IT);
                recordInsertListGrouped.add(ledgerFiscalJournalTmpGrouped);

                linesCnt++;
                sequenceNum++;
            }

            recordInsertListGrouped.insertDatabase();
            delete_from ledgerFiscalJournalTmp_IT;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendForBalancePosting</Name>
				<Source><![CDATA[
    private void findCustVendForBalancePosting()
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        CustLedgerAccounts                  custLedgerAccounts;
        VendLedgerAccounts                  vendLedgerAccounts;
        VendTrans                           vendTrans;
        CustTrans                           custTrans;
        CustLedgerAccounts                  localCustLedgerAccounts;
        VendLedgerAccounts                  localVendLedgerAccounts;
        DimensionAttributeValueCombination  dimAttrValueCombo;
        boolean                             noNameFound;

        TmpTaxReport_IT tmpTaxReport_IT;

        custVendAccount = '';
        custVendName    = '';

        MainAccountRecId dimensionMainAccount = dimensionAttributeValueCombination.MainAccount;

        if (!dimensionMainAccount)
            return;

        //Ledger transactions generated in journals and it belong to Cust/Vend Balance
        if (ledgerEntryJournal.JournalNumber)
        {
            if (generalJournalAccountEntry.PostingType == LedgerPostingType::CustBalance)
            {
                select firstonly AccountType, PostingProfile, LedgerDimension from ledgerJournalTrans
                    where ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                        && ledgerJournalTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && (ledgerJournalTrans.AmountCurCredit == abs(generalJournalAccountEntry.AccountingCurrencyAmount)
                        || ledgerJournalTrans.AmountCurDebit == abs(generalJournalAccountEntry.AccountingCurrencyAmount))
                join AccountNum, BillOfExchangeID from custTrans
                    where custTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && custTrans.AccountNum == ledgerJournalTrans.parmAccount()
                        && custTrans.TransDate  == ledgerJournalTrans.TransDate
                outer join SummaryLedgerDimension from localCustLedgerAccounts
                    where localCustLedgerAccounts.PostingProfile == ledgerJournalTrans.PostingProfile
                join MainAccount from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == localCustLedgerAccounts.SummaryLedgerDimension
                        && dimAttrValueCombo.MainAccount == dimensionMainAccount;

                if (dimAttrValueCombo.MainAccount || custTrans.BillOfExchangeID)
                {
                    custVendName = tmpTaxReport_IT.getCustVendName(toDate, CustTable::find(custTrans.AccountNum).Party);
                    custVendAccount = custTrans.AccountNum;
                }
            }

            if (generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance)
            {
                select firstonly AccountType, PostingProfile, LedgerDimension from ledgerJournalTrans
                    order by Voucher
                    where ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                        && ledgerJournalTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && (ledgerJournalTrans.AmountCurCredit == abs(generalJournalAccountEntry.AccountingCurrencyAmount)
                        || ledgerJournalTrans.AmountCurDebit == abs(generalJournalAccountEntry.AccountingCurrencyAmount))
                join AccountNum, PromissoryNoteID from vendTrans
                    where vendTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && vendTrans.AccountNum == ledgerJournalTrans.parmAccount()
                        && vendTrans.TransDate  == ledgerJournalTrans.TransDate
                outer join SummaryLedgerDimension from localVendLedgerAccounts
                    where localVendLedgerAccounts.PostingProfile == ledgerJournalTrans.PostingProfile
                join MainAccount from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == localVendLedgerAccounts.SummaryLedgerDimension
                        && dimAttrValueCombo.MainAccount == dimensionMainAccount;

                if (dimAttrValueCombo.MainAccount || vendTrans.PromissoryNoteID)
                {
                    custVendName = tmpTaxReport_IT.getCustVendName(toDate, VendTable::find(vendTrans.AccountNum).Party);
                    custVendAccount = vendTrans.AccountNum;
                }
            }
        }

        if (!custVendAccount)
        {
            if (this.isCustRelatedPosting(generalJournalAccountEntry))
            {
                select firstonly AccountType, OffsetLedgerDimension, PostingProfile from ledgerJournalTrans
                    order by Voucher
                    where ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                        && ledgerJournalTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                join AccountNum, BillOfExchangeID from custTrans
                    where custTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && custTrans.AccountNum == ledgerJournalTrans.parmAccount()
                        && custTrans.TransDate  == ledgerJournalTrans.TransDate
                outer join SummaryLedgerDimension from localCustLedgerAccounts
                    where localCustLedgerAccounts.PostingProfile == ledgerJournalTrans.PostingProfile
                join MainAccount from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == localCustLedgerAccounts.SummaryLedgerDimension
                        && dimAttrValueCombo.MainAccount == dimensionMainAccount;

                if (dimAttrValueCombo.MainAccount || custTrans.BillOfExchangeID)
                {
                    custVendName = tmpTaxReport_IT.getCustVendName(toDate, CustTable::find(custTrans.AccountNum).Party);
                    custVendAccount = custTrans.AccountNum;
                }
            }
            
            if (this.isVendRelatedPosting(generalJournalAccountEntry))
            {
                select firstonly AccountType, OffsetLedgerDimension, PostingProfile from ledgerJournalTrans
                    order by Voucher
                    where ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                        && ledgerJournalTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                join AccountNum, PromissoryNoteID from vendTrans
                    where vendTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && vendTrans.AccountNum == ledgerJournalTrans.parmAccount()
                        && vendTrans.TransDate  == ledgerJournalTrans.TransDate
                outer join SummaryLedgerDimension from localVendLedgerAccounts
                    where localVendLedgerAccounts.PostingProfile == ledgerJournalTrans.PostingProfile
                join MainAccount from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == localVendLedgerAccounts.SummaryLedgerDimension
                        && dimAttrValueCombo.MainAccount == dimensionMainAccount;

                if (dimAttrValueCombo.MainAccount || vendTrans.PromissoryNoteID)
                {
                    custVendName = tmpTaxReport_IT.getCustVendName(toDate, VendTable::find(vendTrans.AccountNum).Party);
                    custVendAccount = vendTrans.AccountNum;
                }
            }
        }

        if (!custVendAccount)
        {
            if (this.isCustRelatedPosting(generalJournalAccountEntry))
            {
                select firstonly PostingProfile, AccountNum, BillOfExchangeID from custTrans
                    order by Voucher
                    where custTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                            && custTrans.AmountMST == generalJournalAccountEntry.AccountingCurrencyAmount
                outer join SummaryLedgerDimension from localCustLedgerAccounts
                    where localCustLedgerAccounts.PostingProfile == custTrans.PostingProfile
                join MainAccount from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == localCustLedgerAccounts.SummaryLedgerDimension
                        && dimAttrValueCombo.MainAccount == dimensionMainAccount;

                if (dimAttrValueCombo.MainAccount || custTrans.BillOfExchangeID)
                {
                    custVendName = tmpTaxReport_IT.getCustVendName(toDate, CustTable::find(custTrans.AccountNum).Party);
                    custVendAccount = custTrans.AccountNum;
                }
            }
            
            if (this.isVendRelatedPosting(generalJournalAccountEntry))
            {
                select firstonly PostingProfile, AccountNum, PromissoryNoteID from vendTrans
                    order by Voucher
                    where vendTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                outer join SummaryLedgerDimension from localVendLedgerAccounts
                    where localVendLedgerAccounts.PostingProfile == vendTrans.PostingProfile
                join MainAccount from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == localVendLedgerAccounts.SummaryLedgerDimension
                        && dimAttrValueCombo.MainAccount == dimensionMainAccount;
                
                if (dimAttrValueCombo.MainAccount || vendTrans.PromissoryNoteID)
                {
                    custVendName = tmpTaxReport_IT.getCustVendName(toDate, VendTable::find(vendTrans.AccountNum).Party);
                    custVendAccount = vendTrans.AccountNum;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendRelatedPosting</Name>
				<Source><![CDATA[
    private boolean isVendRelatedPosting(GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        return _generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::VendCashDisc
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::VendFine_BR
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::VendInterest
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::VendInvoiceDisc
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::VendOffsetAccount
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::VendPayment
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::VendPurchLedger
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::VendSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustRelatedPosting</Name>
				<Source><![CDATA[
    private boolean isCustRelatedPosting(GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        return _generalJournalAccountEntry.PostingType == LedgerPostingType::CustBalance
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::CustCashDisc
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::CustCollectionLetterFee
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::CustFine_BR
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::CustInterest
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::CustInterestFee
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::CustInvoiceDisc
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::CustPayment
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::CustReimbursement
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::CustRevenue
            || _generalJournalAccountEntry.PostingType == LedgerPostingType::CustSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendNameAccount</Name>
				<Source><![CDATA[
    private void findCustVendNameAccount()
    {
        if ((generalJournalAccountEntry.PostingType == LedgerPostingType::CustBalance
           || generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance)
           && !custVendAccount)
        {
            this.findCustVendForBalancePosting();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    private void setUserConnection(Common _common)
    {
        UserConnection con = this.parmUserConnection();

        if (con)
        {
            _common.setConnection(con);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>