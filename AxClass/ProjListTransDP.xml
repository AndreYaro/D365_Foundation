<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListTransDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjListTransDP</c> class is the report data provider class for the <c>ProjListTrans</c>
/// report.
/// </summary>
/// <remarks>
/// The <c>ProjListTransDP</c> class provides methods to fetch the data that is used by the
/// <c>ProjListTrans</c> report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(ProjListTrans)),
    SRSReportParameterAttribute(classStr(ProjListTransContract))
]
public class ProjListTransDP extends SRSReportDataProviderPreProcessTempDB
{
	private const str FalseString = 'false';
	private const str TrueString = 'true';
	private const str EmptyString ='';
	private const int64 Zero = 0;

    // Variables used for holding UI parameter values.
    TransDate projFromDate;
    TransDate projToDate;
    TransDate ledgerFromDate;
    TransDate ledgerToDate;

    boolean timeAndMaterialBillingMethod, fixedPriceBillingMethod, timeAndMaterial, fixedPrice, investment, internalCost, time;
    boolean hour;
    boolean expenses;
    boolean revenue;
    boolean onAccount;
    boolean item;
    boolean skipZero;
    boolean specifyTransactions, specifyLedgerUpdates;
    boolean isProjMultipleContractLinesForProjectFeatureEnabled;

    ProjAmountQty showHour;
    ProjListProfitFactor plFactor;
    ProjStatementType statementType;

    ProjTransLayout paramLevel1, paramLevel2, paramLevel3;
    ProjShowAmount showAmount ;
    ProjCommittedCostStatus showTransactions;

    //  variables used in the logic for visibility of columns on the report.
    boolean qtyVisible;
    boolean wipVisible;
    boolean wipInvVisible;
    boolean wipNetVisible;
    boolean marginVisible;
    boolean ratioVisible;
    boolean costVisible;
    boolean salesVisible;

    //  variables used to hold the label values for columns to be shown on the report.
    str periodLabel;
    str qtyVisibility,  wipNetVisibility , marginVisibility;
    str salesRatioVisibility, costRatioVisibility;
    str costAmountVisibility, salesAmountVisibility  ;
    str wipInvoiceOnAccountVisibility;
    str costAmountLabel, salesAmountLabel, marginLabel, wipNetLabel;
    str printLevel1Label, printLevel2Label, printLevel3Label;

    //  variables used for report logic and control flow.
    Name name1, name2, name3;
    ProjListStateType projListStateType;
    projStatement projStatement;
    ProjCategoryId level1, level2, level3;
    ProjTransIdBase transId;

    boolean checkProjId;
    boolean checkCategoryId;
    boolean checkId;
    boolean checkFundingSource;
    boolean checkResourceCategory;

    TmpProjTransList tmpProjTransList, tmpProjTransListDetail;
    ProjTransPosting projTransPostingQuery;
    ProjListTransTmp projListTransTmp;
    TmpProjTransListLedger tmpProjTransListLedger;
    ProjParameters projParameters;
    DimensionProvider dimProvider;
    ProjFundingSourceRefId projFundingSourceRefId;
    Ledger ledger;
    int amountDecimals;

    AmountMST salary;
    AmountMST costAmount;
    AmountMST salesAmount;
    AmountMST wipInvoicedOnAcc;
    ProjQty qty;

	private int fieldSortCount;
	private FieldId sortField1;
	private FieldId sortField2;
	private FieldId sortField3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resetSortFieldVariables</Name>
				<Source><![CDATA[
	private void resetSortFieldVariables()
    {
		// The sort field values are a postion within the table. Zero is a invalid value in
		// the usage of the variables.
		sortField1 = 0;
		sortField2 = 0;
		sortField3 = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFIeldIdForSortLevelValue</Name>
				<Source><![CDATA[
    protected FieldId getFIeldIdForSortLevelValue(ProjTransLayout _levelValue)
    {
        FieldId returnValue;

        switch (_levelValue)
        {
            case ProjTransLayout::Category:
                returnValue = fieldNum(ProjTransPosting, categoryId);
                break;

            case ProjTransLayout::FundingSource:
				returnValue = fieldNum(ProjTransPosting, ProjFundingSource);
                break;

            case ProjTransLayout::ID:
                returnValue = fieldNum(ProjTransPosting, emplItemId);
                break;

            case ProjTransLayout::Project:
                returnValue = fieldNum(ProjTransPosting, ProjId);
                break;

            case ProjTransLayout::ResourceCategory:
                returnValue = fieldNum(ProjTransPosting, resourceCategory);
                break;			
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCheckVariablesValues</Name>
				<Source><![CDATA[
	private void resetCheckVariablesValues()
    {
		checkCategoryId = false;
        checkFundingSource = false;
		checkId = false;
		checkProjId = false;
		checkResourceCategory = false;
   }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckVariables</Name>
				<Source><![CDATA[
    protected FieldId setCheckVariables(ProjTransLayout _levelValue)
    {
        FieldId returnValue;

        switch (_levelValue)
        {
            case ProjTransLayout::Category:
                checkCategoryId = true;
                break;

            case ProjTransLayout::FundingSource:
                checkFundingSource = true;
                break;

            case ProjTransLayout::ID:
                checkId = true;
                break;

            case ProjTransLayout::Project:
                checkProjId = true;
                break;

            case ProjTransLayout::ResourceCategory:
                checkResourceCategory = true;
                break;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVariablesBasedOnSortingInformation</Name>
				<Source><![CDATA[
	private void setVariablesBasedOnSortingInformation()
    {
		// This method may be entered multiple times
        this.resetCheckVariablesValues();
        this.resetSortFieldVariables();

        fieldSortCount = 1;
		sortField1 = this.getFIeldIdForSortLevelValue(paramLevel1);
        this.setCheckVariables(paramLevel1);

		if (enum2str(paramLevel2) != EmptyString)
        {
            fieldSortCount++;
            sortField2 = this.getFIeldIdForSortLevelValue(paramLevel2);
            this.setCheckVariables(paramLevel2);
        }
        if (enum2str(paramLevel3) != EmptyString)
        {
            fieldSortCount++;
            sortField3 = this.getFIeldIdForSortLevelValue(paramLevel3);
            this.setCheckVariables(paramLevel3);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesForPSAContractLineItems</Name>
				<Source><![CDATA[
    private void addRangesForPSAContractLineItems(Query _query)
    {
        QueryBuildDataSource qbdsProjTable = _query.dataSourceTable(tableNum(ProjTable));
        qbdsProjTable.enabled(true);
        QueryBuildDataSource qbdsPSAContractLineItems = _query.dataSourceTable(tableNum(PSAContractLineItems));
        PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
            qbdsPSAContractLineItems,
            timeAndMaterialBillingMethod,
            fixedPriceBillingMethod);
        PSAContractLineItemRangesHelper::addTransactionTypeRangesToDS(
            qbdsPSAContractLineItems,
            hour,
            expenses,
            revenue,
            item,
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesForProjTransPosting</Name>
				<Source><![CDATA[
    private void addRangesForProjTransPosting(Query _query)
    {
        QueryBuildDatasource qbdsProjTransPosting = _query.dataSourceTable(tableNum(ProjTransPosting));

        if (timeAndMaterial)
        {
            qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjType)).value(queryValue(ProjType::TimeMaterial));
        }

        if (fixedPrice)
        {
            qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjType)).value(queryValue(ProjType::FixedPrice));
        }

        if (time)
        {
            qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjType)).value(queryValue(ProjType::Time));
        }

        if (investment)
        {
            qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjType)).value(queryValue(ProjType::Investment));
        }

        if (internalCost)
        {
            qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjType)).value(queryValue(ProjType::Cost));
            qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjType)).value(queryValue(ProjType::Internal));
        }

        if (hour)
        {
            qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjTransType)).value(queryValue(ProjTransType::Hour));
        }

        if (expenses)
        {
            qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjTransType)).value(queryValue(ProjTransType::Cost));
        }

        if (item)
        {
            qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjTransType)).value(queryValue(ProjTransType::Item));
        }

        if (revenue)
        {
            qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjTransType)).value(queryValue(ProjTransType::Revenue));
        }

        if (onAccount)
        {
            qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjTransType)).value(queryValue(ProjTransType::OnAccount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemoveFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the logic for the visibility of data fields to display on the report.
    /// </summary>
    public void addRemoveFields()
    {
        qtyVisible = true;
        wipVisible = false;
        wipInvVisible = true;
        wipNetVisible = true;
        marginVisible = true;
        ratioVisible = true;
        costVisible = true;
        salesVisible = true;

        if (statementType != ProjStatementType::ProfitLoss)
        {
            ratioVisible = false;
        }

        if (statementType == ProjStatementType::Consumption  ||
            statementType == ProjStatementType::Payroll)
        {
            salesVisible = false;
        }

        if (statementType == ProjStatementType::Invoice)
        {
            costVisible = false;
            qtyVisible = false;
        }

        if (statementType == ProjStatementType::WIP)
        {
            wipVisible = true;
            if (! onAccount)
            {
                wipInvVisible = false;
            }
        }

        if (showHour == ProjAmountQty::Amount || ! hour)
        {
            qtyVisible = false;
        }

        if (wipVisible && wipInvVisible && hour && !(expenses || item || revenue || onAccount))
        {
            if (statementType == ProjStatementType::WIP)
            {
                wipInvVisible = false;
            }
        }

        if (hour && !(expenses || item))
        {
            if (showHour == ProjAmountQty::Qty)
            {
                costVisible = false;

                if (!(revenue || onAccount))
                {
                    wipInvVisible = false;
                    marginVisible = false;
                    salesVisible = false;
                    ratioVisible = false;
                    wipVisible = false;
                }
            }
        }

        if (showHour == ProjAmountQty::Qty && (statementType == ProjStatementType::Payroll))
        {
            costVisible = false;
        }

        if (wipVisible && wipInvVisible && expenses && !(hour || item || revenue || onAccount))
        {
            if (qtyVisible && (statementType != ProjStatementType::Payroll))
            {
                qtyVisible = false;
            }

            if (statementType == ProjStatementType::WIP)
            {
                wipInvVisible = false;
            }
        }

        if (wipVisible && wipInvVisible && item && !(hour || expenses || revenue || onAccount))
        {
            if (qtyVisible && (statementType != ProjStatementType::Payroll))
            {
                qtyVisible = false;
            }

            if (statementType == ProjStatementType::WIP)
            {
                wipInvVisible = false;
            }
        }

        if (wipVisible && wipInvVisible && revenue && !(hour || expenses || item || onAccount))
        {
            if (qtyVisible && (statementType != ProjStatementType::Payroll))
            {
                qtyVisible = false;
            }

            if (statementType == ProjStatementType::ProfitLoss)
            {
                costVisible = false;
                marginVisible = false;
            }

            if (statementType == ProjStatementType::WIP)
            {
                costVisible = false;
                wipInvVisible = false;
                marginVisible = false;
                wipNetVisible = false;
            }
        }

        if (wipVisible && wipInvVisible && onAccount && !(hour || expenses || item || revenue))
        {
            if (qtyVisible && (statementType != ProjStatementType::Payroll))
            {
                qtyVisible = false;
            }

            if (statementType == ProjStatementType::ProfitLoss)
            {
                costVisible = false;
                marginVisible = false;
            }

            if (statementType == ProjStatementType::WIP)
            {
                costVisible = false;
                salesVisible = false;
                wipNetVisible = false;
            }
        }

        if (revenue && onAccount && !(hour || expenses || item))
        {
            if (statementType == ProjStatementType::WIP)
            {
                costVisible = false;
            }
        }

        // "Total cost" and "Gross Margin" should disappear when only transaction "Fee" or "On account" is selected.

        if (statementType == ProjStatementType::ProfitLoss)
        {
            if (!(hour || item || expenses))
            {
                costVisible = false;
				marginVisible = false;
            }
        }

        if (! qtyVisible)
        {
            qtyVisibility = FalseString;
        }

        if (! wipVisible)
        {
            wipInvoiceOnAccountVisibility = FalseString;
            wipNetVisibility = FalseString;
        }

        if (! wipInvVisible)
        {
            wipInvoiceOnAccountVisibility = FalseString;
        }

        if (! wipNetVisible)
        {
            wipNetVisibility = FalseString;
        }

        if (! ratioVisible)
        {
            marginVisibility = FalseString;
			salesRatioVisibility = FalseString;
			costRatioVisibility = FalseString;
        }

        if (! marginVisible)
        {
            marginVisibility = FalseString;
        }

        if (! costVisible)
        {
            costAmountVisibility = FalseString;
        }

        if (! salesVisible)
        {
            salesAmountVisibility = FalseString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the logic for populating the <c>TmpProjTransList</c> table by using the UI parameter
    /// values.
    /// </summary>
    /// <param name="_queryRun">
    /// Gets <c>ProjTransPosting</c> table for data manipulation.
    /// </param>
    public void buildTmp(QueryRun _queryRun)
    {
        projTransPostingQuery = _queryRun.get(tableNum(ProjTransPosting));
        switch (fieldSortCount)
        {
            case 1:
                this.selectProjTransPosting1(sortField1);
                break;
            case 2:
                this.selectProjTransPosting2(sortField1, sortField2);
               break;
            case 3:
                this.selectProjTransPosting3(sortField1, sortField2, sortField3);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amounts based on the UI parameters
    /// </summary>
    public Void calculateAmounts()
    {
        if (specifyTransactions)
        {
            select sum(Qty), sum(Salary), sum(SalesAmount), sum (CostAmount), sum(wipInvoicedOnAcc) from tmpProjTransListDetail
                        where tmpProjTransListDetail.Level1 == level1 &&
                              tmpProjTransListDetail.Level2 == level2 &&
                              tmpProjTransListDetail.Level3 == level3 &&
                              tmpProjTransListDetail.TransId == transId;
        }
        else if (paramLevel3)
        {
            select sum(Qty), sum(Salary), sum(SalesAmount), sum(CostAmount), sum(wipInvoicedOnAcc) from tmpProjTransListDetail
                        where tmpProjTransListDetail.Level1 == level1 &&
                              tmpProjTransListDetail.Level2 == level2 &&
                              tmpProjTransListDetail.Level3 == level3;
        }
        else if (paramLevel2)
        {
            select sum(Qty), sum(Salary), sum(SalesAmount), sum(CostAmount), sum(wipInvoicedOnAcc) from tmpProjTransListDetail
                        where tmpProjTransListDetail.Level1 == level1 &&
                              tmpProjTransListDetail.Level2 == level2;
        }
        else
        {
            select sum(Qty), sum(Salary), sum(SalesAmount), sum(CostAmount), sum(wipInvoicedOnAcc) from tmpProjTransListDetail
                        where tmpProjTransListDetail.Level1 == level1 &&
                              tmpProjTransListDetail.TransType == tmpProjTransList.TransType;
        }
        
        salary = tmpProjTransListDetail.Salary;
        costAmount = tmpProjTransListDetail.CostAmount;
        salesAmount = tmpProjTransListDetail.SalesAmount;
        wipInvoicedOnAcc = tmpProjTransListDetail.WIPInvoicedOnAcc;
        qty = tmpProjTransListDetail.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the CostAmount value based on selected UI parameters.
    /// </summary>
    /// <returns>
    /// The costAmount value of the <c>TmpProjTransListDetail</c> table.
    /// </returns>
    private CostAmount costAmount()
    {
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ProjTrans</c> class object to be used for populating <c>TmpProjTransList</c> table.
    /// </summary>
    /// <param name="_projTransPosting">
    /// Gets the TransType and TransId values used for data manipulation.
    /// </param>
    /// <returns>
    /// An instance of the <c>ProjTrans</c> class.
    /// </returns>
    public ProjTrans findProjTrans(ProjTransPosting _projTransPosting)
    {
        ProjTrans projTransReturn;
        ProjEmplTrans projEmplTrans;
        ProjCostTrans projCostTrans;
        ProjRevenueTrans projRevenueTrans;
        ProjItemTrans projItemTrans;
        ProjOnAccTrans projOnAccTrans;

        switch (_projTransPosting.ProjTransType)
        {
            case ProjTransType::Revenue:
                projRevenueTrans = ProjRevenueTrans::find(_projTransPosting.TransId);
                projTransReturn = ProjTrans::newProjRevenueTrans(projRevenueTrans);
                break;

            case ProjTransType::Hour:
                projEmplTrans = ProjEmplTrans::find(_projTransPosting.TransId);
                projTransReturn = ProjTrans::newProjEmplTrans(projEmplTrans);
                break;

            case ProjTransType::Cost:
                projCostTrans = ProjCostTrans::find(_projTransPosting.TransId);
                projTransReturn = ProjTrans::newProjCostTrans(projCostTrans);
                break;

            case ProjTransType::Item:
                projItemTrans = ProjItemTrans::find(_projTransPosting.TransId);
                projTransReturn = ProjTrans::newProjItemTrans(projItemTrans);
                break;

            case ProjTransType::OnAccount:
                projOnAccTrans = ProjOnAccTrans::find(_projTransPosting.TransId);
                projTransReturn = ProjTrans::newProjOnAccTrans(projOnAccTrans);
                break;
        }

        return projTransReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPeriodLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Period label value based on the selected UI parameters.
    /// </summary>
    /// <returns>
    /// A String value based on the selected UI parameters.
    /// </returns>
    /// <remarks>
    /// Operates on the values for UI parameters like ProjFromDate, ProjToDate, LedgerFromDate and
    /// LedgerToDate for displaying text in page header of the SSRS report.
    /// </remarks>
    public str formatPeriodLabel()
    {
        if (ledgerFromDate || (! projFromDate && ! projToDate && ledgerToDate))
        {
            return strFmt("@SYS91012", date2StrUsr(this.ledgerTransDateFrom(), DateFlags::FormatAll),
                            date2StrUsr(this.ledgerTransDateTo() == dateMax() ? dateNull() : this.ledgerTransDateTo(), DateFlags::FormatAll));
        }
        else
        {
            return strFmt("@SYS91013", date2StrUsr(this.projTransDateFrom(), DateFlags::FormatAll),
                            date2StrUsr(this.projTransDateTo() == dateMax() ? dateNull() : this.projTransDateTo(), DateFlags::FormatAll));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the <c>ProjListTransTmp</c> temporary table and retrieves the data table to the calling
    /// method.
    /// </summary>
    /// <returns>
    /// The required report data from temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(ProjListTransTmp))
    ]
    public ProjListTransTmp getProjListTransTmp()
    {
        select * from projListTransTmp;

        return projListTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>idLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a label for the levels on the report.
    /// </summary>
    /// <param name="_level">
    /// The level value from the UI parameter.
    /// </param>
    /// <returns>
    /// A String label value.
    /// </returns>
    public str idLabel(ProjTransLayout _level)
    {
        str label;

        switch (_level)
        {
            case ProjTransLayout::None:
                label = EmptyString;
                break;

            case ProjTransLayout::Project:
                label = "@SYS4534";
                break;

            case ProjTransLayout::Category:
                label = "@SYS71008";
                break;

            case ProjTransLayout::ID:
                if ((hour || revenue || expenses) && !(item || onAccount))
                {
                    label = "@SYS89158";
                }
                else if ((item || onAccount) && !(expenses || hour || revenue))
                {
                    label = "@SYS14428";
                }
                else
                {
                    label = "@SYS91474";
                }
                break;

            case ProjTransLayout::ResourceCategory:
                label = "@PSA2679";
                break;

            case ProjTransLayout::FundingSource:
                label = "@SYS134468";
                break;
        }

        return label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpProjTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the required data and sets fields in the <c>TmpProjTransList</c> buffer.
    /// </summary>
    /// <param name="_projTransPosting">
    /// Sets values in the <c>TmpProjTransList</c> table.
    /// </param>
    protected void populateTmpProjTransList(ProjTransPosting _projTransPosting)
    {
        ProjTrans projTrans = this.findProjTrans(_projTransPosting);

        tmpProjTransList.clear();

        tmpProjTransList.Level1 = this.printLevel(paramLevel1,projTrans,_projTransPosting);
        tmpProjTransList.Level2 = this.printLevel(paramLevel2,projTrans,_projTransPosting);
        tmpProjTransList.Level3 = this.printLevel(paramLevel3,projTrans,_projTransPosting);
        tmpProjTransList.TransId = projTrans.transId();

        if (specifyTransactions)
        {
            tmpProjTransList.TransDate = projTrans.transDate();
            tmpProjTransList.VoucherJournal = projTrans.voucherOriginal();
            tmpProjTransList.VoucherInvoice = projTrans.voucherInvoice();
            tmpProjTransList.LinePropertyId = projTrans.linePropertyId();

            if (projTrans.transType() == ProjTransType::Cost ||
                projTrans.transType() == ProjTransType::Item)
            {
                tmpProjTransList.Txt = num2str(projTrans.qty(),-1,-1,-1,-1)+' / '+projTrans.txt();
            }
            else
            {
                tmpProjTransList.Txt = projTrans.txt();
            }
        }

        tmpProjTransList.CostPrice = projTrans.costPrice();
        tmpProjTransList.SalesPrice = projTrans.salesPrice();

        tmpProjTransList.TransType = projTrans.transType();

        this.setProjStmtParm(paramLevel1, tmpProjTransList.Level1, projTrans, _projTransPosting);

        this.setProjStmtParm(paramLevel2, tmpProjTransList.Level2, projTrans, _projTransPosting);
        
        this.setProjStmtParm(paramLevel3, tmpProjTransList.Level3, projTrans, _projTransPosting);

        projStatement.parmTransId(tmpProjTransList.TransId);
        this.setStatementTransType(_projTransPosting);

        if (statementType == ProjStatementType::ProfitLoss)
        {
            tmpProjTransList.Salary = projStatement.a310_Cost_Hour(false,ProjListStateType::ProfitLoss);
        }
        else
        {
            tmpProjTransList.Salary = projStatement.a310_Cost_Hour();
        }

        if (statementType == ProjStatementType::WIP)
        {
            tmpProjTransList.CostAmount = projStatement.costAmount();
            tmpProjTransList.SalesAmount = projStatement.salesAmount()+projStatement.b400_wip_Invoiced_OnAccount();
            tmpProjTransList.wipInvoicedOnAcc = projStatement.b400_wip_Invoiced_OnAccount();
        }
        else
        {
            tmpProjTransList.CostAmount = projStatement.costAmount();
            tmpProjTransList.SalesAmount = projStatement.salesAmount();
        }

        if (showAmount == ProjShowAmount::Amount1000)
        {
            tmpProjTransList.CostAmount = tmpProjTransList.CostAmount / 1000;
            tmpProjTransList.SalesAmount = tmpProjTransList.SalesAmount / 1000;
            tmpProjTransList.wipInvoicedOnAcc = tmpProjTransList.wipInvoicedOnAcc / 1000;
            tmpProjTransList.Salary = tmpProjTransList.Salary / 1000;
        }
        else if (showAmount == ProjShowAmount::Amount1000000)
        {
            tmpProjTransList.CostAmount = tmpProjTransList.CostAmount / 1000000;
            tmpProjTransList.SalesAmount = tmpProjTransList.SalesAmount / 1000000;
            tmpProjTransList.wipInvoicedOnAcc = tmpProjTransList.wipInvoicedOnAcc / 1000000;
            tmpProjTransList.Salary = tmpProjTransList.Salary / 1000000;
        }

        if (_projTransPosting.ProjTransType == ProjTransType::Hour)
        {
            tmpProjTransList.Qty = projStatement.transListQty();
        }
        else 
        {
            tmpProjTransList.Qty = projTrans.qty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjStmtParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets parm methods of
    /// </summary>
    /// <param name = "_paramLevel">
    ///     UI enum parameter.
    /// </param>
    /// <param name = "_level">
    ///     Project category ID.
    /// </param>
    /// <param name = "_projTrans">
    ///     An Instance of <c>ProjTrans</c> class.
    /// </param>
    /// <param name = "_projTransPosting">
    ///     Sets values in the <c>TmpProjTransList</c> table.
    /// </param>
    protected void setProjStmtParm(ProjTransLayout _paramLevel, ProjCategoryId _level, ProjTrans _projTrans, ProjTransPosting _projTransPosting)
    {
        switch (_paramLevel)
        {
            case ProjTransLayout::Project:
                projStatement.parmProjId(_level);
                break;

            case ProjTransLayout::Category:
                projStatement.parmCategoryId(_level);
                projStatement.findCategoryComponentTrans(tmpProjTransList.transId);
                break;

            case ProjTransLayout::ID:
				projStatement.parmEmplItemId(EmptyString);
                projStatement.parmSubscriptionId(EmptyString);
                projStatement.parmResource(Zero);
                if (_projTrans.transType() == ProjTransType::Hour ||
                    _projTrans.transType() == ProjTransType::Cost)
                {
                    // Passing <c>ResourceRecId</c> instead of <c>ResourceId</c>, in case of same resource exists in multiple legal entity.
                    projStatement.parmResource(_projTrans.resource());
                }
                else
                if (_projTrans.transType() == ProjTransType::Item)
                {
                    projStatement.parmEmplItemId(_level);
                }
                else
                if (_projTrans.transType() == ProjTransType::Revenue)
                {
                    if(_paramLevel == paramLevel3)
                    {
                        projStatement.parmEmplItemId(EmptyString); //Clear off the EmplItemId
                    }

                    if (_projTrans.isSubscription())
                    {
                        projStatement.parmSubscriptionId(_level);
                        tmpProjTransList.Resource = 0;
                    }
                    else
                    {
                        projStatement.parmResource(ResourceFacade::findByResourceID(_level));
                        tmpProjTransList.Resource = projStatement.parmResource();
                    }
                }
                break;

            case ProjTransLayout::ResourceCategory:
                projStatement.parmResourceCategory(ResourceCategoryFacade::findByResourceCategoryId(_level));
                break;

            case ProjTransLayout::FundingSource:
                projStatement.parmFundingSource(_projTransPosting.ProjFundingSource);
                tmpProjTransList.RefId = int642str(_projTransPosting.ProjFundingSource);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpProjTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the required data and inserts it into the <c>TmpProjTransList</c> table.
    /// </summary>
    /// <param name="_projTransPosting">
    /// Sets values in the <c>TmpProjTransList</c> table.
    /// </param>
    public void insertTmpProjTransList(ProjTransPosting _projTransPosting)
    {
        this.populateTmpProjTransList(_projTransPosting);

        tmpProjTransList.insert();

        if (specifyLedgerUpdates)
        {
            QueryRun queryLedger = new QueryRun(projStatement.queryExecuted());

            while (queryLedger.next())
            {
                ProjTransPosting projTransPostingLedgerUpdate = queryLedger.get(tableNum(ProjTransPosting));

                tmpProjTransListLedger.TransId = projTransPostingLedgerUpdate.TransId;
                tmpProjTransListLedger.LedgerPostingType = projTransPostingLedgerUpdate.PostingType;
                tmpProjTransListLedger.LedgerDimension = projTransPostingLedgerUpdate.LedgerDimension;
                tmpProjTransListLedger.LedgerTransDate = projTransPostingLedgerUpdate.LedgerTransDate;
                tmpProjTransListLedger.Qty = projTransPostingLedgerUpdate.Qty;
                tmpProjTransListLedger.Voucher = projTransPostingLedgerUpdate.Voucher;

                tmpProjTransListLedger.CostAmount = 0;
                tmpProjTransListLedger.SalesAmount = 0;

                if (statementType == ProjStatementType::WIP)
                {
                    if (projTransPostingLedgerUpdate.CostSales == ProjCostSales::Cost)
                    {
                        tmpProjTransListLedger.CostAmount = projTransPostingLedgerUpdate.AmountMst;
                    }
                    else
                    {
                        if (projTransPostingLedgerUpdate.ProjTransType == ProjTransType::OnAccount)
                        {
                            tmpProjTransListLedger.wipInvoicedOnAcc = projTransPostingLedgerUpdate.AmountMst;
                        }
                        else
                        {
                            tmpProjTransListLedger.SalesAmount = projTransPostingLedgerUpdate.AmountMst;
                        }
                    }
                }
                else
                {
                    if (projTransPostingLedgerUpdate.CostSales == ProjCostSales::Cost)
                    {
                        tmpProjTransListLedger.CostAmount = projTransPostingLedgerUpdate.AmountMst;
                    }
                    else
                    {
                        tmpProjTransListLedger.SalesAmount = projTransPostingLedgerUpdate.AmountMst;
                    }
                }

                if (showAmount == ProjShowAmount::Amount1000)
                {
                    tmpProjTransListLedger.CostAmount = tmpProjTransListLedger.CostAmount  / 1000;
                    tmpProjTransListLedger.SalesAmount = tmpProjTransListLedger.SalesAmount / 1000;
                    tmpProjTransListLedger.wipInvoicedOnAcc = tmpProjTransListLedger.wipInvoicedOnAcc / 1000;
                }
                else if (showAmount == ProjShowAmount::Amount1000000)
                {
                    tmpProjTransListLedger.CostAmount = tmpProjTransListLedger.CostAmount  / 1000000;
                    tmpProjTransListLedger.SalesAmount = tmpProjTransListLedger.SalesAmount / 1000000;
                    tmpProjTransListLedger.wipInvoicedOnAcc = tmpProjTransListLedger.wipInvoicedOnAcc / 1000000;
                }

                tmpProjTransListLedger.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjListTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the required data and populates it into <c>ProjListTransTmp</c> table.
    /// </summary>
    /// <param name="_tmpProjTransList">
    /// Provides values to be populated into  <c>ProjListTransTmp</c> table.
    /// </param>
    /// <param name="_tmpProjTransListLedger">
    /// Provides values to be populated into <c> ProjListTransTmp </c>  table.
    /// </param>
    /// <param name="_showLedger">
    /// Indicates whether to populate the values of  <c>TmpProjTransLedger</c> table or dummy values into the
    /// UI temporary table.
    /// </param>
    protected void populateProjListTransTmp(TmpProjTransList _tmpProjTransList,
                                            TmpProjTransListLedger _tmpProjTransListLedger ,
                                            int _showLedger)
    {
        projListTransTmp.Level1 = level1;
        projListTransTmp.Name1 = name1;
        projListTransTmp.Level2 = level2;
        projListTransTmp.Name2 = name2;
        projListTransTmp.Level3 = level3;
        projListTransTmp.Name3 = name3;
        projListTransTmp.TransType = level1 ? _tmpProjTransList.TransType:ProjTransType::None;
        projListTransTmp.TransDate = _tmpProjTransList.TransDate;
        projListTransTmp.Voucher = queryValue(_tmpProjTransList.VoucherJournal);
        projListTransTmp.Invoice = _tmpProjTransList.VoucherInvoice;
        projListTransTmp.TransIdReport = transId;
        projListTransTmp.LinePropertyId = _tmpProjTransList.LinePropertyId;
        projListTransTmp.TransTxt = _tmpProjTransList.Txt;
        projListTransTmp.Qty = this.qty();
        projListTransTmp.CostPrice = _tmpProjTransList.CostPrice;
        projListTransTmp.SalesPrice = _tmpProjTransList.SalesPrice;
        projListTransTmp.CostAmount = this.costAmount();
        projListTransTmp.SalesAmount = this.salesAmount();
        projListTransTmp.wipInvoicedOnAccount = this.wipInvoicedOnAcc();
        projListTransTmp.wiPnet = projListTransTmp.SalesAmount + projListTransTmp.CostAmount -  projListTransTmp.wipInvoicedOnAccount;
        projListTransTmp.Margin = projListTransTmp.SalesAmount - projListTransTmp.CostAmount;
        projListTransTmp.SalesRatio = this.salesRatio();
        projListTransTmp.CostRatio = ProjParameters::grossMarginPct(projListTransTmp.CostAmount,projListTransTmp.SalesAmount,projListTransTmp.Margin);
        projListTransTmp.Amount1000000Decimals = amountDecimals;
        projListTransTmp.Amount1000Decimals = amountDecimals;
        projListTransTmp.HourQtyDecimals = projParameters.HourQtyDecimals;
        projListTransTmp.ValueAddedDecimals = projParameters.ValueAddedDecimals;
        projListTransTmp.GrossMarginDecimals = projParameters.GrossMarginDecimals;
        projListTransTmp.CurrencyCode = ledger.AccountingCurrency;

        if (_showLedger == 1)
        {
            projListTransTmp.DimensionDisplay = dimProvider.getStringValueFromCursor(_tmpProjTransListLedger, fieldStr(TmpProjTransListLedger, LedgerDimension));
            projListTransTmp.LedgerQty = _tmpProjTransListLedger.Qty;
            projListTransTmp.LedgerVoucher = _tmpProjTransListLedger.Voucher;
            projListTransTmp.LedgerCostAmount = _tmpProjTransListLedger.CostAmount;
            projListTransTmp.LedgerSalesAmount = _tmpProjTransListLedger.SalesAmount;
            projListTransTmp.wiPnetLedger = _tmpProjTransListLedger.SalesAmount-_tmpProjTransListLedger.wipInvoicedOnAcc;
            projListTransTmp.LedgerTransDate = _tmpProjTransListLedger.LedgerTransDate;
            projListTransTmp.LedgerPostingType = _tmpProjTransListLedger.LedgerPostingType;
            projListTransTmp.LedgerWIPInvoicedOnAccount = _tmpProjTransListLedger.wipInvoicedOnAcc;
        }

        projListTransTmp.QtyVisibility = qtyVisibility;
        projListTransTmp.WipNetVisibility = wipNetVisibility;
        projListTransTmp.MarginVisibility = marginVisibility;
        projListTransTmp.CostRatioVisibility = costRatioVisibility;
        projListTransTmp.SalesRatioVisibility = salesRatioVisibility;
        projListTransTmp.CostAmountVisibility = costAmountVisibility;
        projListTransTmp.SalesAmountVisibility = salesAmountVisibility;
        projListTransTmp.WipInvoiceOnAccountVisibility = wipInvoiceOnAccountVisibility;

        projListTransTmp.WipNetLabel = wipNetLabel;
        projListTransTmp.MarginLabel = marginLabel;
        projListTransTmp.Level1Label = printLevel1Label;
        projListTransTmp.Level2Label = printLevel2Label;
        projListTransTmp.Level3Label = printLevel3Label;
        projListTransTmp.CostRatioLabel = ProjParameters::find().grossMarginDisplayLabel();
        projListTransTmp.SalesRatioLabel = ProjParameters::find().valueAddedDisplayLabel();
        projListTransTmp.CostAmountLabel = costAmountLabel;
        projListTransTmp.SalesAmountLabel = salesAmountLabel;

        if (!skipZero || ( projListTransTmp.Qty != 0 ||
                            projListTransTmp.CostAmount != 0 ||
                            projListTransTmp.SalesAmount != 0 ||
                            projListTransTmp.wipInvoicedOnAccount != 0 ||
                            projListTransTmp.wiPnet !=0 ) )

        {
            projListTransTmp.DetailVisibility = TrueString;
        }
        else
        {
            projListTransTmp.DetailVisibility = FalseString;
        }

        if (! (enum2str(paramLevel2) != EmptyString || enum2str(paramLevel3) != EmptyString))
        {
            projListTransTmp.GroupVisibility = FalseString;
        }
        else
        {
            projListTransTmp.GroupVisibility = TrueString;
        }

        projListTransTmp.PeriodLabel = int642str(_tmpProjTransList.Resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the required data and inserts it into <c>ProjListTransTmp</c> table.
    /// </summary>
    /// <param name="_tmpProjTransList">
    /// Provides values to be inserted into <c>ProjListTransTmp</c> table.
    /// </param>
    /// <param name="_tmpProjTransListLedger">
    /// Provides values to be inserted into <c>ProjListTransTmp</c>  table.
    /// </param>
    /// <param name="_showLedger">
    /// Indicates whether to insert the values of <c>TmpProjTransLedger</c> table or dummy values into the
    /// UI temporary table.
    /// </param>
    private void insertTmpTable(TmpProjTransList _tmpProjTransList,
                                   TmpProjTransListLedger _tmpProjTransListLedger ,
                                   int _showLedger)
    {
        this.populateProjListTransTmp(_tmpProjTransList, _tmpProjTransListLedger, _showLedger);
        projListTransTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransDateFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks any null date provided for the <c>TransDate</c> UI parameter.
    /// </summary>
    /// <returns>
    /// A null date or a <c>TransDate</c> ledgerFromDate value based on UI parameter.
    /// </returns>
    public TransDate ledgerTransDateFrom()
    {
        if (! ledgerFromDate)
        {
            return dateNull();
        }

        return ledgerFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransDateTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks any null date provided for the <c>TransDate</c> UI parameter.
    /// </summary>
    /// <returns>
    /// A null date or the <c>TransDate</c> ledgerToDate value based on UI parameter.
    /// </returns>
    public TransDate ledgerTransDateTo()
    {
        if (! ledgerToDate)
        {
            return dateMax();
        }

        return ledgerToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leftControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of the columns on the report.
    /// </summary>
    /// <remarks>
    /// Chooses the appropriate field to display as the second column from the right end of the report.
    /// </remarks>
    public void leftControl()
    {
        if (qtyVisibility != FalseString)
        {
            qtyVisibility = TrueString;
            return;
        }

        if (costAmountVisibility != FalseString)
        {
            costAmountVisibility = TrueString;
            return;
        }

        if (salesAmountVisibility != FalseString)
        {
            salesAmountVisibility = TrueString;
            return;
        }

        if (wipInvoiceOnAccountVisibility != FalseString)
        {
            wipInvoiceOnAccountVisibility = TrueString;
            return;
        }

        if (wipNetVisibility != FalseString)
        {
            wipNetVisibility = TrueString;
            return;
        }

        if (marginVisibility != FalseString)
        {
            marginVisibility = TrueString;
            return;
        }

        if (salesRatioVisibility != FalseString)
        {
            salesRatioVisibility = TrueString;
            return;
        }

        costRatioVisibility = TrueString;
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryActual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the Report Query based on the UI parameters.
    /// </summary>
    /// <param name="_query">
    /// Used for manipulating the report query.
    /// </param>
    /// <returns>
    /// A Modified query object that contains hidden range values.
    /// </returns>
    public Query modifyQueryActual(Query _query)
    {
        QueryBuildDataSource qbdsProjTransPosting = _query.dataSourceTable(tableNum(ProjTransPosting));
        qbdsProjTransPosting.orderMode(OrderMode::GroupBy);
        qbdsProjTransPosting.addGroupByField(fieldNum(ProjTransPosting, TransId));

        if (isProjMultipleContractLinesForProjectFeatureEnabled)
        {
            this.addRangesForPSAContractLineItems(_query);
        }
        else
        {
            QueryBuildRange rangeDummy;
            QueryBuildRange rangeHide = qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting,ProjType));
            rangeHide.status(RangeStatus::Hidden);

            this.addRangesForProjTransPosting(_query);

            if (! (timeAndMaterial || fixedPrice || investment || internalCost))
            {
                rangeDummy  = qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting,ProjType));
                rangeDummy.value(queryValue(SysQuery::valueEmptyString()));
            }

            rangeHide   = qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting,ProjTransType));
            rangeHide.status(RangeStatus::Hidden);

            if (! (hour || expenses || item || revenue || onAccount))
            {
                rangeDummy  = qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting,ProjTransType));
                rangeDummy.value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the values for Level columns of <c>TmpProjTransList</c> table.
    /// </summary>
    /// <param name="level">
    /// The level parameter.
    /// </param>
    /// <param name="projTrans">
    /// A <c>ProjTrans</c> object.
    /// </param>
    /// <param name="projTransPosting">
    /// A <c>ProjTransPosting</c> table record.
    /// </param>
    /// <returns>
    /// A Boolean value based on the given conditions in the code.
    /// </returns>
    public ProjCategoryEmpl printLevel(ProjTransLayout level, ProjTrans projTrans,ProjTransPosting projTransPosting)
    {
        ProjFundingSource   projFundingSource;

        switch (level)
        {
            case ProjTransLayout::Project:
                return projTrans.projId();

            case ProjTransLayout::Category:
                return projTrans.categoryId();

            case ProjTransLayout::ID:
                if (projTrans.transType() == ProjTransType::Hour ||
                    projTrans.transType() == ProjTransType::Cost)
                {
                    return ResourceFacade::getID(projTrans.resource());
                }
                else
                if (projTrans.transType() == ProjTransType::Item)
                {
                    return projTrans.itemId();
                }
                else
                if (projTrans.transType() == ProjTransType::Revenue)
                {
                    if (projTrans.isSubscription())
                    {
                        return projTrans.smaSubscriptionId();
                    }
                    else
                    {
                        return ResourceFacade::getID(projTrans.resource());
                    }
                }

            case ProjTransLayout::ResourceCategory:
                return ResourceCategoryFacade::getID(projTrans.resourceCategory());

            case ProjTransLayout::FundingSource:
                projFundingSource = ProjFundingSource::find(projTransPosting.ProjFundingSource);
                if (projFundingSource)
                {
                    return projFundingSource.FundingSourceId;
                }
                else
                {
                    return EmptyString;
                }
        }

        return EmptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to group the data in <c> tmpProjTransListLedger</c> table and insert the data
    /// into a user-defined temporary table.
    /// </summary>
    public void printReport()
    {
        if (specifyTransactions)
        {
            while select tmpProjTransList
                group by Level1, Level2, Level3, TransDate, TransId, LinePropertyId, Txt, TransType, RefId
            {
                this.setLevel();
                this.calculateAmounts();
                this.setName();

                if (specifyLedgerUpdates)
                {
                    while select tmpProjTransListLedger
                        where tmpProjTransListLedger.TransId  == tmpProjTransList.TransId
                    {
                        this.insertTmpTable(tmpProjTransList, tmpProjTransListLedger, 1);
                    }
                }
                else
                {
                    this.insertTmpTable(tmpProjTransList, tmpProjTransListLedger, 0);
                }
            }
        }
        else
        {
            while select tmpProjTransList
                group by Level1, Level2, Level3, TransType
            {
                this.setLevel();
                this.calculateAmounts();
                this.setName();
                this.insertTmpTable(tmpProjTransList, tmpProjTransListLedger, 0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjTransBudgetQuery</Name>
				<Source><![CDATA[
    private void processProjTransBudgetQuery(Query _query)
    {
        QueryRun queryRun = new QueryRun(_query);

        while (queryRun.next())
        {
            ProjTransPosting projTransPosting = queryRun.get(tableNum(ProjTransPosting));
            this.insertTmpProjTransList(projTransPosting);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by Microsoft
    /// SQL Server Reporting Services at runtime. The method should compute data and populate the data
    /// tables that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun;
        Query reportQuery;

        ProjListTransContract contract = this.parmDataContract() as ProjListTransContract;
        dimProvider = new DimensionProvider();

        timeAndMaterialBillingMethod = contract.parmProjTimeAndMaterialBillingMethod();
        fixedPriceBillingMethod = contract.parmProjFixedPriceBillingMethod();
        timeAndMaterial = contract.parmProjTimeAndMaterial();
        fixedPrice = contract.parmProjFixedPrice();
        investment = contract.parmProjInvestment();
        internalCost = contract.parmProjInternalCost();
        time = contract.parmProjTime();
        hour = contract.parmProjHour();
        expenses = contract.parmProjExpenses();
        item = contract.parmProjItem();
        revenue = contract.parmProjRevenue();
        onAccount = contract.parmProjOnAccount();
        projFromDate = contract.parmProjFromDate();
        projToDate = contract.parmProjToDate();
        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();
        statementType = contract.parmStatementType();
        paramLevel1 = contract.parmProjLevel1();
        paramLevel2 = contract.parmProjLevel2();
        paramLevel3 = contract.parmProjLevel3();
        skipZero = contract.parmProjSkipZero();
        showAmount = contract.parmProjShowAmt();
        showHour = contract.parmProjShowHour();
        plFactor = contract.parmProjPLRatio();
        specifyTransactions = contract.parmProjSpecifyTransactions();
        specifyLedgerUpdates = contract.parmProjSpecifyLedgerUpdates();
        isProjMultipleContractLinesForProjectFeatureEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        projListStateType = projStatement::statementType2StateType(statementType);
        projStatement = projStatement::construct(projListStateType);

        this.setProjStatementParm();
        this.setDisplayLabel();
        this.addRemoveFields();
        this.leftControl();
        this.rightControl();

        select RecId,
            HourQtyDecimals,
            ValueAddedDecimals,
            GrossMarginDecimals,
            ValueAddedDisplay,
            Amount1000Decimals,
            Amount1000000Decimals from projParameters;

        this.setNoOfDecimals(showAmount);

        this.setVariablesBasedOnSortingInformation();

        reportQuery = this.modifyQueryActual(this.parmQuery());
        queryRun = new QueryRun(reportQuery);
		while (queryRun.next())
        {
            this.buildTmp(queryRun);
        }

        select firstonly ledger;
        tmpProjTransListDetail.linkPhysicalTableInstance(tmpProjTransList);
        this.printReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransDateFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks any null date that is provided for the <c>TransDate</c> UI parameter.
    /// </summary>
    /// <returns>
    /// A   null date or a fromDate value based on UI parameter.
    /// </returns>
    public TransDate projTransDateFrom()
    {
        if (! projFromDate)
        {
            return dateNull();
        }

        return projFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransDateTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks any null date that is provided for the <c>TransDate</c> UI parameter.
    /// </summary>
    /// <returns>
    /// A   null date or the value of toDate based on UI parameter.
    /// </returns>
    public TransDate projTransDateTo()
    {
        if (! projToDate)
        {
            return dateMax();
        }

        return projToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the Qty value based on the UI parameters.
    /// </summary>
    /// <returns>
    /// The Qty value.
    /// </returns>
    public Qty qty()
    {
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rightControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of the columns on the report.
    /// </summary>
    /// <remarks>
    /// Chooses the appropriate field to display as the first column from the right end of the report.
    /// </remarks>
    public void rightControl()
    {
        if (costRatioVisibility != FalseString)
        {
            costRatioVisibility = TrueString;
            return;
        }

        if (salesRatioVisibility != FalseString)
        {
            salesRatioVisibility = TrueString;
            return;
        }

        if (marginVisibility != FalseString)
        {
            marginVisibility = TrueString;
            return;
        }

        if (wipNetVisibility != FalseString)
        {
            wipNetVisibility = TrueString;
            return;
        }

        if (wipInvoiceOnAccountVisibility != FalseString)
        {
            wipInvoiceOnAccountVisibility = TrueString;
            return;
        }

        if (costAmountVisibility != FalseString)
        {
            costAmountVisibility = TrueString;
            return;
        }

        if (salesAmountVisibility != FalseString)
        {
            salesAmountVisibility = TrueString;
            return;
        }

        qtyVisibility = TrueString;
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the Salary value based on the UI parameters.
    /// </summary>
    /// <returns>
    /// The Salary value.
    /// </returns>
    public AmountMST salary()
    {
        return salary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the SalesAmount value based on the UI parameters.
    /// </summary>
    /// <returns>
    /// The SalesAmount value.
    /// </returns>
    public SalesAmount salesAmount()
    {
        return salesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains logic for the salesRatio to be inserted into <c>ProjListTransTmp</c> table.
    /// </summary>
    /// <returns>
    /// The value for salesRatio.
    /// </returns>
    public ProjFactorValueAdded salesRatio()
    {
        switch (ProjParameters::find().ValueAddedDisplay)
        {
            case ProjValueAddedDisplay::ValueAddedMarkup:
                if (this.salary())
                {
                    return (this.valueAdded() / this.salary());
                }
                break;
            case ProjValueAddedDisplay::ValueAddedRation:
                if (this.salesAmount())
                {
                    return (this.valueAdded() * 100 / this.salesAmount());
                }
                break;
            case ProjValueAddedDisplay::ValueAddedMarupPct:
                if (this.salary())
                {
                    return (this.valueAdded() * 100 / this.salary());
                }
                break;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectProjTransPostingQuery</Name>
				<Source><![CDATA[
    private Query selectProjTransPostingQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsProjTransPosting = query.addDatasource(tableNum(ProjTransPosting));
        qbdsProjTransPosting.addGroupByField(fieldNum(ProjTransPosting, ProjTransType));
        qbdsProjTransPosting.addGroupByField(fieldNum(ProjTransPosting, transId));

        if (isProjMultipleContractLinesForProjectFeatureEnabled)
        {
            QueryBuildDataSource qbdsProjTable = qbdsProjTransPosting.addDataSource(tableNum(ProjTable));
            qbdsProjTable.relations(true);
            qbdsProjTable.joinMode(JoinMode::ExistsJoin);
            QueryBuildDataSource qbdsPSAContractLineItems = qbdsProjTable.addDataSource(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.addLink(fieldNum(ProjTable, ProjInvoiceProjId), fieldNum(PSAContractLineItems, ProjInvoiceProjId));
            qbdsPSAContractLineItems.joinMode(JoinMode::ExistsJoin);
            this.addRangesForPSAContractLineItems(query);
        }
        else
        {
            this.addRangesForProjTransPosting(query);
        }

        qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, TransId)).value(queryValue(projTransPostingQuery.transid));
        qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, LedgerTransDate)).value(queryRange(this.LedgerTransDateFrom(), this.LedgerTransDateTo()));
        qbdsProjTransPosting.addRange(fieldNum(ProjTransPosting, ProjTransDate)).value(queryRange(this.projTransDateFrom(), this.projTransDateTo()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectProjTransPosting1</Name>
				<Source><![CDATA[
    private void selectProjTransPosting1(FieldId _fieldId)
    {
        if (_fieldId == 0)
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        Query query = this.selectProjTransPostingQuery();
        QueryBuildDataSource qbdsProjTransPosting = query.dataSourceTable(tableNum(ProjTransPosting));
        qbdsProjTransPosting.addGroupByField(_fieldId);
        this.processProjTransBudgetQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectProjTransPosting2</Name>
				<Source><![CDATA[
    private void selectProjTransPosting2(FieldId _fieldId1, FieldId _fieldId2)
    {
        if (_fieldId1 == 0 || _fieldId2 == 0)
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        Query query = this.selectProjTransPostingQuery();
        QueryBuildDataSource qbdsProjTransPosting = query.dataSourceTable(tableNum(ProjTransPosting));
        qbdsProjTransPosting.addGroupByField(_fieldId1);
        qbdsProjTransPosting.addGroupByField(_fieldId2);
        this.processProjTransBudgetQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectProjTransPosting3</Name>
				<Source><![CDATA[
    private void selectProjTransPosting3(FieldId _fieldId1, FieldId _fieldId2, FieldId _fieldId3)
    {
        if (_fieldId1 == 0 || _fieldId2 == 0 || _fieldId3 == 0)
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        Query query = this.selectProjTransPostingQuery();
        QueryBuildDataSource qbdsProjTransPosting = query.dataSourceTable(tableNum(ProjTransPosting));
        qbdsProjTransPosting.addGroupByField(_fieldId1);
        qbdsProjTransPosting.addGroupByField(_fieldId2);
        qbdsProjTransPosting.addGroupByField(_fieldId3);
        this.processProjTransBudgetQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the logic for setting the labels for columns to display on the report.
    /// </summary>
    public void setDisplayLabel()
    {
        salesRatioVisibility = TrueString;
        costRatioVisibility = TrueString;
        wipNetLabel = "@SYS78442";

        switch (statementType)
        {
            case ProjStatementType::ProfitLoss:
                if (hour && !(expenses || item))
                {
                    costAmountLabel = "@SYS60097";
                }
                else if (item && !(expenses || hour))
                {
                    costAmountLabel = "@SYS58392";
                }
                else if (expenses && !(item || hour))
                {
                    costAmountLabel = "@SYS78743";
                }
                else
                {
                    costAmountLabel = "@SYS74805";
                }

                salesAmountLabel = "@SYS2835";
                marginLabel = "@SYS78439";

                if (plFactor == ProjListProfitFactor::None ||
                    plFactor == ProjListProfitFactor::GrossMarginFactorPct)
                {
                    salesRatioVisibility = FalseString;
                }

                if (plFactor == ProjListProfitFactor::None ||
                    plFactor == ProjListProfitFactor::ValueAddedFactorPct)
                {
                    costratioVisibility = FalseString;
                }

                break;

            case ProjStatementType::WIP:
                if (hour && !(expenses || item))
                {
                    costAmountLabel = "@SYS78746";
                }
                else if (item && !(expenses || hour))
                {
                    costAmountLabel = "@SYS58393";
                }
                else if (expenses && !(item || hour))
                {
                    costAmountLabel = "@SYS78747";
                }
                else
                {
                    costAmountLabel = "@SYS78440";
                }

                if (hour && !(expenses || item || revenue || onAccount))
                {
                    salesAmountLabel = "@SYS55369";
                }
                else if (item && !(expenses || hour || revenue || onAccount))
                {
                    salesAmountLabel = "@SYS55369";
                }
                else if (expenses && !(item || hour || revenue || onAccount))
                {
                    salesAmountLabel = "@SYS55369";
                }
                else
                {
                    salesAmountLabel = "@SYS78748";
                }

                if (!onAccount)
                {
                    wipNetLabel = "@SYS78441";
                }

                break;

            case ProjStatementType::Payroll:
                costAmountLabel = "@SYS14982";

                break;

            case ProjStatementType::Consumption:
                if (hour && !(expenses || item))
                {
                    costAmountLabel = "@SYS5269";
                }
                else if (item && !(expenses || hour))
                {
                    costAmountLabel = "@SYS14428";
                }
                else if (expenses && !(item || hour))
                {
                    costAmountLabel = "@SYP4882014";
                }
                else
                {
                    costAmountLabel = "@SYS78919";
                }

                break;

            case ProjStatementType::Invoice:
                salesAmountLabel = "@SYS14204";

                break;
        }

        printLevel1label = this.idLabel(paramLevel1);
        printLevel2label = this.idLabel(paramLevel2);
        printLevel3label = this.idLabel(paramLevel3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the level values for data manipulation.
    /// </summary>
    public void setLevel()
    {
        level1 = tmpProjTransList.Level1;
        level2 = tmpProjTransList.Level2;
        level3 = tmpProjTransList.Level3;
        transId = tmpProjTransList.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the Name to display for each level on the report.
    /// </summary>
    public void setName()
    {
        name1 = this.setNameFromProjTransLayout(paramLevel1, tmpProjTransList.Level1);
        name2 = this.setNameFromProjTransLayout(paramLevel2, tmpProjTransList.Level2);
        name3 = this.setNameFromProjTransLayout(paramLevel3, tmpProjTransList.Level3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNameFromProjTransLayout</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the value of the Name to display for each level on the report.
    /// </summary>
    /// <param name = "_paramLevel">
    ///     UI enum parameter.
    /// </param>
    /// <param name = "_level">
    ///     Project category ID.
    /// </param>
    /// <returns>
    ///     Name based on available <c>ProjTransLayout</c> enum values.
    /// </returns>
    protected Name setNameFromProjTransLayout(ProjTransLayout _paramLevel, ProjCategoryId _level)
    {
        Name name;
        ProjFundingSource projFundingSource;
        InventTable inventTable;

        switch (_paramLevel)
        {
            case ProjTransLayout::None:
                name = EmptyString;
                break;

            case ProjTransLayout::Project:
                name = ProjTable::find(_level).Name;
                break;

            case ProjTransLayout::Category:
                name = ProjCategory::find(_level).Name;
                break;

            case ProjTransLayout::ID:
                if (tmpProjTransList.TransType == ProjTransType::Hour ||
                    tmpProjTransList.TransType == ProjTransType::Cost ||
                    tmpProjTransList.TransType == ProjTransType::Revenue)
                {
                    if (tmpProjTransList.TransType == ProjTransType::Revenue && tmpProjTransList.Resource == 0)
                    {
                        name = SMASubscriptionTable::find(_level).Name;
                    }
                    else
                    {
                        name = ResourceFacade::getName(ResourceFacade::findByResourceID(_level));
                    }
                }
                else
                {
                    inventTable = InventTable::find(_level);
                    if (inventTable)
                    {
                        name = inventTable.itemName();
                    }
                }
                break;

            case ProjTransLayout::ResourceCategory:
                name   = ResourceCategoryFacade::getName(ResourceCategoryFacade::findByResourceCategoryId(_level));
                break;

            case ProjTransLayout::FundingSource:
                projFundingSource = ProjFundingSource::find(str2int64(tmpProjTransList.RefId));
                if (projFundingSource)
                {
                    name = projFundingSource.name();
                }
                else
                {
                    name = EmptyString;
                }
                break;
        }
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNoOfDecimals</Name>
				<Source><![CDATA[
    private int setNoOfDecimals(ProjShowAmount _showAmount)
    {
        System.Globalization.NumberFormatInfo fi;

        switch (_showAmount)
        {
            case ProjShowAmount::WithDec:
                fi = new System.Globalization.NumberFormatInfo();
                amountDecimals = fi.get_CurrencyDecimalDigits();
                break;

            case ProjShowAmount::WithoutDec:
                amountDecimals = 0;
                break;

            case ProjShowAmount::Amount1000:
                amountDecimals = projParameters.Amount1000Decimals;
                break;

            case ProjShowAmount::Amount1000000:
                amountDecimals = projParameters.Amount1000000Decimals;
                break;
        }

        return amountDecimals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjStatementParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values for the instance of the <c>ProjStatement</c> class.
    /// </summary>
    public void setProjStatementParm()
    {
        projStatement.parmTimeMaterial(timeAndMaterial);
        projStatement.parmFixedPrice(fixedPrice);
        projStatement.parmInternal(internalCost);
        projStatement.parmCost(internalCost);
        projStatement.parmInvestment(investment);
        projStatement.parmTime(time);

        projStatement.parmLedgerTransDateFrom(this.ledgerTransDateFrom());
        projStatement.parmLedgerTransDateTo(this.ledgerTransDateTo());

        projStatement.parmProjTransDateFrom(this.projTransDateFrom());
        projStatement.parmProjTransDateTo(this.projTransDateTo());

        if (specifyTransactions)
        {
            projStatement.parmListId(ProjListStateId::TransId);
        }

        this.setProjStatementListId();

        projStatement.parmStateProjType(ProjListStateProjType::Type);
        projStatement.parmAmountQty(showHour);
        projStatement.parmActual(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjStatementListId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets project statement list id based on <c>ProjTransLayout</c>.
    /// </summary>
    protected void setProjStatementListId()
    {
        switch (paramLevel1)
        {
            case ProjTransLayout::Project:
                projStatement.parmListId(ProjListStateId::Project);
                break;

            case ProjTransLayout::Category:
                projStatement.parmListId(ProjListStateId::Category);
                break;

            case ProjTransLayout::ID:
                projStatement.parmListId(ProjListStateId::EmplItem);
                break;

            case ProjTransLayout::ResourceCategory:
                projStatement.parmListId(ProjListStateId::ResourceCategory);
                break;

            case ProjTransLayout::FundingSource:
                projStatement.parmListId(ProjListStateId::CustAccount);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatementTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values for the <c> ProjStatement </c> class object.
    /// </summary>
    /// <param name="_projTransPosting">
    /// The <c>ProjTransType</c> value for logic.
    /// </param>
    public void setStatementTransType(ProjTransPosting _projTransPosting)
    {
        projStatement.parmRevenue(false);
        projStatement.parmHour(false);
        projStatement.parmExpenses(false);
        projStatement.parmItem(false);
        projStatement.parmOnAccount(false);

        switch (_projTransPosting.ProjTransType)
        {
            case ProjTransType::Revenue:
                if (revenue)
                {
                    projStatement.parmRevenue(true);
                }
                break;

            case ProjTransType::Hour:
                if (hour)
                {
                    projStatement.parmHour(true);
                }
                break;

            case ProjTransType::Cost:
                if (expenses)
                {
                    projStatement.parmExpenses(true);
                }
                break;

            case ProjTransType::Item:
                if (item)
                {
                    projStatement.parmItem(true);
                }
                break;

            case ProjTransType::OnAccount:
                if (onAccount)
                {
                    projStatement.parmOnAccount(true);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueAdded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the valueAdded amount that is used in SalesRatio calculation.
    /// </summary>
    /// <returns>
    /// The value obtained from manipulating salesAmount, costAmount, and salary.
    /// </returns>
    public ContributionMargin valueAdded()
    {
        return this.salesAmount()-this.costAmount()+ this.salary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipInvoicedOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the wipInvoicedOnAcc based on the UI parameters.
    /// </summary>
    /// <returns>
    /// wipInvoicedOnAcc value.
    /// </returns>
    public AmountMST wipInvoicedOnAcc()
    {
        return wipInvoicedOnAcc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>