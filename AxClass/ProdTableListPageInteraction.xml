<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdTableListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdTableListPageInteraction extends ListPageInteraction
{
    ProdTableForm           prodTableForm;
    InventSiteId            filterSiteId;
    InventDimCtrl_Frm       inventDimFormSetup;

    //client-side map that stores [ProdID, [MapCacheKey, [EnabledStatuses]]]
    Map                     prodTableOrderLineStatusEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatesProdTableButtonEnabledStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the enabled status of the list page buttons based on the specified paramenters.
    /// </summary>
    /// <param name="_prodTable">
    ///     The buffer of the production order selected.
    /// </param>
    /// <param name="_inventDimId">
    ///     The ID of the dimension to use.
    /// </param>
    /// <returns>
    ///     A container with the enabled status of the buttons of the listpage.
    /// </returns>
    [SysObsolete("Use should*BeEnabled for setting the enabled status for each button", false, 31\03\2018)]
    protected container calculatesProdTableButtonEnabledStatus(ProdTable _prodTable, InventDimId _inventDimId)
    {
        ProdStatusType prodStatus = _prodTable.status();
        boolean isStdCost = InventModelGroupItem::isStandardCost(_prodTable.ItemId);

        return [this.shouldCostEstimationButtonBeEnabled(prodStatus),
                this.shouldProdSchedulingOperationBeEnabled(prodStatus),
                this.shouldProdSchedulingJobBeEnabled(prodStatus),
                this.shouldReleaseButtonBeEnabled(prodStatus),
                this.shouldStartUpButtonBeEnabled(prodStatus),
                this.shouldReportFinishedButtonBeEnabled(prodStatus),
                this.shouldEndButtonBeEnabled(prodStatus),
                this.shouldStatusDecreaseButtonBeEnabled(prodStatus),
                this.shouldSplitButtonBeEnabled(prodStatus),
                this.shouldPmfAddToConsOrderBeEnabled(_prodTable),
                this.shouldOpenMSDSDocumentBeEnabled(_prodTable),
                this.shouldPDSBatchBalancingBeEnabled(prodStatus),
                this.shouldStdCostTransactionsBeEnabled(isStdCost),
                this.shouldProdCalcVarianceTransBeEnabled(_prodTable, isStdCost),
                this.shouldCostComparisonButtonBeEnabled(_prodTable)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    public void initialized()
    {
        super();

        // Hide catch weight fields when catch weight is not enabled. Do not show them if they are hidden through personalization.
        if (!(#pmfEnabled && #pdsEnabled))
        {
            this.listPage().listPageFieldVisible(
                formcontrolstr(ProdTableListPage, ProdTable_PdsCWBatchSched),
                false);

            this.listPage().listPageFieldVisible(
                formcontrolstr(ProdTableListPage, ProdTable_PdsCWUnitId),
                false);
        }

        // Hide the product number when it's disabled in parameters. Do not show it when it's hidden through personalization.
        if (!EcoResProductParameters::find().ShowProductNumber)
        {
            this.listPage().listPageFieldVisible(
                formcontrolstr(ProdTableListPage, InventDistinctProductExpanded_DisplayProductNumber),
                false);
        }
     
        this.inventDimSetupObject().formSetControls(true);

        ProdRecBasketFormInteraction::newStandard(FormDataUtil::getFormDataSource(this.listPage().activeRecord(queryDataSourceStr(ProdTableListPage, ProdTable))).formRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        if (this.listPage().listPageArgs() &&
                 this.listPage().listPageArgs().externalRecord() &&
                 this.listPage().listPageArgs().menuItemName() ==  menuitemDisplayStr(ProdTableListPage_Proj) &&
                 this.listPage().listPageArgs().externalRecord().TableId == tableNum(ProjInvoiceTable))
        {
            ProjInvoiceTable projInvoiceTable = this.listPage().listPageArgs().externalRecord();
            QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(ProdTable)).addDataSource(tableNum(ProjTable));
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addRange(fieldNum(ProjTable,ProjInvoiceProjId)).value(queryValue(ProjInvoiceTable.ProjInvoiceProjId));
        }

        super(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializing</Name>
				<Source><![CDATA[
    public void initializing()
    {
        super();

        prodTableOrderLineStatusEnabled = new Map(extendedTypeId2Type(extendedTypeNum(ProdId)), Types::Container);
        prodTableForm                   = ProdTableForm::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets an instance of the <c>InventDimCtrl_Frm</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>InventDimCtrl_Frm</c> class.
    /// </returns>
    /// <remarks>
    /// This method is used by the inventory dimensions set up logic.
    /// </remarks>
    public InventDimCtrl_Frm inventDimSetupObject()
    {
        InventDimParm   inventDimParm;

        if (!inventDimFormSetup)
        {
            inventDimFormSetup  = InventDimCtrl_Frm::construct();
            inventDimFormSetup.parmCallingElement(InventDimListPageInteractionAdapter::newFromListPageInteraction(this));
            inventDimParm.initCovDimAllGrp();
            inventDimFormSetup.parmDimParmVisibleGrid(inventDimParm.data());
            inventDimFormSetup.init();
        }

        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs changes to the form that is based on the selected record.
    /// </summary>
    public void selectionChanged()
    {
        super();

        this.setButtonAccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the enabled state of all controls.
    /// </summary>
    public void setButtonAccess()
    {
        ListPage        listPage  = this.listPage();
        ProdTable       prodTable = listPage.activeRecord(queryDataSourceStr(ProdTableListPage,prodTable)) as ProdTable;
        InventDim       inventDim = listPage.activeRecord(queryDataSourceStr(ProdTableListPage,inventDim)) as InventDim;

        prodTableForm.setDatasources(prodTable, inventDim);

        boolean hasData = prodTableForm.checkHasData();

        //Register button rules checking for data
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,manageGroup), hasData);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,actions), hasData);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,manageInvent), hasData);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,orderDetails), hasData);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,schedule), hasData);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,view), hasData);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,manageQuality), hasData);

        //Register other button rules
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,viewGroup), prodTableForm.checkGanttEnabled());

        listPage.actionPaneControlVisible(formControlStr(ProdTableListPage,manageQuality), prodTableForm.checkQualityManagementEnabled());

        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,costControlCommittedCost), prodTableForm.checkIsProj());

        listPage.actionPaneControlVisible(formControlStr(ProdTableListPage,ChangeGroup), prodTableForm.checkChangeGroupEnabled());

        //Production order actions
        ProdStatusType prodStatus = prodTable.status();
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, CostEstimationButton), this.shouldCostEstimationButtonBeEnabled(prodStatus));
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, ProdSchedulingOperation), this.shouldProdSchedulingOperationBeEnabled(prodStatus));
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, ProdSchedulingJob), this.shouldProdSchedulingJobBeEnabled(prodStatus));
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, ReleaseButton), this.shouldReleaseButtonBeEnabled(prodStatus));
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, StartUpButton), this.shouldStartUpButtonBeEnabled(prodStatus));
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, ReportFinishedButton), this.shouldReportFinishedButtonBeEnabled(prodStatus));
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, EndButton), this.shouldEndButtonBeEnabled(prodStatus));
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, StatusDecreaseButton), this.shouldStatusDecreaseButtonBeEnabled(prodStatus));
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, SplitButton), this.shouldSplitButtonBeEnabled(prodStatus));

        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,ProdBOMMenuItem), hasData && prodTable.ProdType != ProdType::Process);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,PmfFormulaMenuItem), hasData && prodTable.ProdType == ProdType::Process);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,PmfPackOnHand), hasData && prodTable.ProdType == ProdType::Process);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,PmfProdCoByCostAllocation), hasData && prodTable.ProdType == ProdType::Process);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,PmfProdCoByMenuItem), hasData && prodTable.ProdType == ProdType::Process);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,PmfAddToConsOrder), hasData && this.shouldPmfAddToConsOrderBeEnabled(prodTable));
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,PmfConsOrdHelperRemove), hasData && prodTable.ProdType == ProdType::Process && prodTable.PmfConsOrdId);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,OpenMSDSDocument), hasData && this.shouldOpenMSDSDocumentBeEnabled(prodTable));

        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,WHSWorkTable), hasData);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage,WHSLPReverse), hasData);

        boolean isPDSBalanceProdBOMEnhancedFeatureEnabled = PDSBalanceProdBOMEnhancedFeature::instance().isEnabled();
        
        if (isPDSBalanceProdBOMEnhancedFeatureEnabled)
        {
            listPage.actionPaneControlVisible(formControlStr(ProdTableListPage, PDSBatchBalancing), false);
            listPage.actionPaneControlVisible(formControlStr(ProdTableListPage, PDSBalanceProdBOMEnhanced), true);
            listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, PDSBalanceProdBOMEnhanced), hasData && this.shouldPDSBatchBalancingBeEnabled(prodStatus));
        }
        else
        {
            listPage.actionPaneControlVisible(formControlStr(ProdTableListPage, PDSBalanceProdBOMEnhanced), false);
            listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, PDSBatchBalancing), hasData && this.shouldPDSBatchBalancingBeEnabled(prodStatus));
        }
        
        boolean isStdCost = InventModelGroupItem::isStandardCost(prodTable.ItemId);
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, StdCostTransactions), this.shouldStdCostTransactionsBeEnabled(isStdCost));
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, ProdCalcVarianceTrans), this.shouldProdCalcVarianceTransBeEnabled(prodTable, isStdCost));
        listPage.actionPaneControlEnabled(formControlStr(ProdTableListPage, CostComparisonButton), this.shouldCostComparisonButtonBeEnabled(prodTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCostEstimationButtonBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the CostEstimationButton should be enabled.
    /// </summary>
    /// <param name = "_prodStatus">
    /// The <c>ProdStatusType</c> of the production order.
    /// </param>
    /// <returns>
    /// true, if the CostEstimationButton should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldCostEstimationButtonBeEnabled(ProdStatusType _prodStatus)
    {
        return _prodStatus.runCostEstimation(null, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProdSchedulingOperationBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the ProdSchedulingOperation should be enabled.
    /// </summary>
    /// <param name = "_prodStatus">
    /// The <c>ProdStatusType</c> of the production order.
    /// </param>
    /// <returns>
    /// true, if the ProdSchedulingOperation should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldProdSchedulingOperationBeEnabled(ProdStatusType _prodStatus)
    {
        return _prodStatus.runOperationScheduling(null, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProdSchedulingJobBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the ProdSchedulingJob should be enabled.
    /// </summary>
    /// <param name = "_prodStatus">
    /// The <c>ProdStatusType</c> of the production order.
    /// </param>
    /// <returns>
    /// true, if the ProdSchedulingJob should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldProdSchedulingJobBeEnabled(ProdStatusType _prodStatus)
    {
        return _prodStatus.runJobScheduling(null, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReleaseButtonBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the ReleaseButton should be enabled.
    /// </summary>
    /// <param name = "_prodStatus">
    /// The <c>ProdStatusType</c> of the production order.
    /// </param>
    /// <returns>
    /// true, if the ReleaseButton should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldReleaseButtonBeEnabled(ProdStatusType _prodStatus)
    {
        return _prodStatus.runRelease(null, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldStartUpButtonBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the StartUpButton should be enabled.
    /// </summary>
    /// <param name = "_prodStatus">
    /// The <c>ProdStatusType</c> of the production order.
    /// </param>
    /// <returns>
    /// true, if the StartUpButton should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldStartUpButtonBeEnabled(ProdStatusType _prodStatus)
    {
        return _prodStatus.runStartUp(null, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReportFinishedButtonBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the ReportFinishedButton should be enabled.
    /// </summary>
    /// <param name = "_prodStatus">
    /// The <c>ProdStatusType</c> of the production order.
    /// </param>
    /// <returns>
    /// true, if the ReportFinishedButton should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldReportFinishedButtonBeEnabled(ProdStatusType _prodStatus)
    {
        return _prodStatus.runReportFinished(null, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEndButtonBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the EndButton should be enabled.
    /// </summary>
    /// <param name = "_prodStatus">
    /// The <c>ProdStatusType</c> of the production order.
    /// </param>
    /// <returns>
    /// true, if the EndButton should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldEndButtonBeEnabled(ProdStatusType _prodStatus)
    {
        return _prodStatus.runHistoricalCost(null, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldStatusDecreaseButtonBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the StatusDecreaseButton should be enabled.
    /// </summary>
    /// <param name = "_prodStatus">
    /// The <c>ProdStatusType</c> of the production order.
    /// </param>
    /// <returns>
    /// true, if the StatusDecreaseButton should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldStatusDecreaseButtonBeEnabled(ProdStatusType _prodStatus)
    {
        return _prodStatus.runStatusDecrease(null, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSplitButtonBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the SplitButton should be enabled.
    /// </summary>
    /// <param name = "_prodStatus">
    /// The <c>ProdStatusType</c> of the production order.
    /// </param>
    /// <returns>
    /// true, if the SplitButton should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldSplitButtonBeEnabled(ProdStatusType _prodStatus)
    {
        return _prodStatus.runSplit(null, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPmfAddToConsOrderBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the PmfAddToConsOrder should be enabled.
    /// </summary>
    /// <param name = "_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    /// <returns>
    /// true, if the PmfAddToConsOrder should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldPmfAddToConsOrderBeEnabled(ProdTable _prodTable)
    {
        if (#PmfEnabled)
        {
            return _prodTable.ProdType == ProdType::Process && PmfBulkItemConv::isBulkorPack(_prodTable.ItemId);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldOpenMSDSDocumentBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the OpenMSDSDocument should be enabled.
    /// </summary>
    /// <param name = "_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    /// <returns>
    /// true, if the OpenMSDSDocument should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldOpenMSDSDocumentBeEnabled(ProdTable _prodTable)
    {
        if (#PmfEnabled)
        {
            return _prodTable.ProdType == ProdType::Process && PdsMRCRegulatedCountry::isRegulated(_prodTable.ItemId);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPDSBatchBalancingBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the PDSBatchBalancing should be enabled.
    /// </summary>
    /// <param name = "_prodStatus">
    /// The <c>ProdStatusType</c> of the production order.
    /// </param>
    /// <returns>
    /// true, if the PDSBatchBalancing should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldPDSBatchBalancingBeEnabled(ProdStatusType _prodStatus)
    {
        return _prodStatus.pdsCanBeBatchBalanced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldStdCostTransactionsBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the StdCostTransactions should be enabled.
    /// </summary>
    /// <param name = "_isStdCost">
    /// A boolean to determine whether the item is standard cost based.
    /// </param>
    /// <returns>
    /// true, if the StdCostTransactions should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldStdCostTransactionsBeEnabled(boolean _isStdCost)
    {
        return _isStdCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProdCalcVarianceTransBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the ProdCalcVarianceTrans should be enabled.
    /// </summary>
    /// <param name = "_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    /// <param name = "_isStdCost">
    /// A boolean to determine whether the item is standard cost based.
    /// </param>
    /// <returns>
    /// true, if the ProdCalcVarianceTrans should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldProdCalcVarianceTransBeEnabled(ProdTable _prodTable, boolean _isStdCost)
    {
        return _isStdCost && _prodTable.ProdStatus == ProdStatus::Completed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCostComparisonButtonBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the CostComparisonButton should be enabled.
    /// </summary>
    /// <param name = "_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    /// <returns>
    /// true, if the CostComparisonButton should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldCostComparisonButtonBeEnabled(ProdTable _prodTable)
    {
        return _prodTable.ProdStatus == ProdStatus::Completed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>