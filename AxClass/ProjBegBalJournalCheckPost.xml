<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjBegBalJournalCheckPost</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
///    The <c>ProjBegBalJournalCheckPost</c> class is used to initiate the posting process of a beginning
///    balance journal.
/// </summary>
class ProjBegBalJournalCheckPost extends JournalCheckPostLedger implements BatchRetryable
{
    ProjBegBalJournalTrans_CostSales projBegBalJournalTrans_CostSales;
    ProjBegBalJournalTrans_Fee  projBegBalJournalTrans_Fee;
    ProjBegBalJournalTrans_OnAcc    projBegBalJournalTrans_OnAcc;
    Common  buffer;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>checkTrans</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Checks that the mandatory transaction fields contain values.
    /// </summary>
    /// <param name="_journalTransData">
    ///    The <c>JournalTransData</c> object.
    /// </param>
    /// <returns>
    ///    true if the mandatory fields contain values; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method checks the mandatory transaction fields by calling the <c>checkTrans</c> method of the
    ///    <c>ProjPost</c> class.
    /// </remarks>

    public boolean checkTrans(JournalTransData  _journalTransData)
    {
        return ProjPost::newCheckTrans(_journalTransData.journalTrans()).checkTrans();
    }

]]></Source>
      </Method>
      <Method>
        <Name>checkTransBudget</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Indicates whether the budget for all lines of the specified beginning balance journal are valid.
    /// </summary>
    /// <returns>
    ///    true if the budget is valid; otherwise, false.
    /// </returns>

    public boolean checkTransBudget()
    {
        boolean canCostSalesBeposted = true;
        boolean canFeeBeposted = true;

        while select projBegBalJournalTrans_CostSales where projBegBalJournalTrans_CostSales.JournalId == journalId
        {
            if (ProjTable::find(projBegBalJournalTrans_CostSales.ProjId).UseBudgeting)
            {
                canCostSalesBeposted = this.isBudgetValidated(projBegBalJournalTrans_CostSales) && canCostSalesBeposted;
            }
        }

        while select projBegBalJournalTrans_Fee where projBegBalJournalTrans_Fee.JournalId == journalId
        {
            if (ProjTable::find(projBegBalJournalTrans_Fee.ProjId).UseBudgeting)
            {
                canFeeBeposted = this.isBudgetValidated(projBegBalJournalTrans_Fee) && canFeeBeposted;
            }
        }

        return canCostSalesBeposted && canFeeBeposted;
    }

]]></Source>
      </Method>
      <Method>
        <Name>dialog</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A <c>runbaseDialogable</c> object.
    /// </returns>

    Object dialog()
    {
        dialog = super();

        if (journalCheckPostType == JournalCheckPostType::Post)
        {
            dialogTransferErrors.value(false);
            dialog.dialogForm().tab().tabAutoChange(false);
            dialogTransferErrors.allowEdit(false);
        }

        return dialog;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isBudgetValidated</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Validates the budget amounts.
    /// </summary>
    /// <param name="_buffer">
    ///    A buffer on which budget checking is required.
    /// </param>
    /// <returns>
    ///    true if the budget is valid; otherwise, false.
    /// </returns>

    public boolean isBudgetValidated(Common  _buffer)
    {
        ProjBudgetTransaction               projBudgetTransaction;
        ProjBudgetTransactionManager        projBudgetTransactionManager;

        projBudgetTransaction = ProjBudgetTransaction::construct(_buffer);
        projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(projBudgetTransaction);

        return projBudgetTransactionManager.validateBudget();
    }

]]></Source>
      </Method>
      <Method>
        <Name>ledgerSysModule</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Retrieves the project modules.
    /// </summary>
    /// <returns>
    ///    The <c>SysModule::Project</c> base enumeration value.
    /// </returns>
    public SysModule ledgerSysModule()
    {
        return SysModule::Project;
    }

]]></Source>
      </Method>
      <Method>
        <Name>ledgerTransTxtType</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction text for project ledger posting.
    /// </summary>
    /// <returns>
    ///    The <c>LedgerTransTxt::ProjectPostingLedger</c> base enumeration value.
    /// </returns>

    public LedgerTransTxt ledgerTransTxtType()
    {
        return LedgerTransTxt::ProjectPostingLedger;
    }

]]></Source>
      </Method>
      <Method>
        <Name>ledgerTransType</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Retrieves the project transaction type.
    /// </summary>
    /// <returns>
    ///    The <c>LedgerTransType::Project</c> base enumeration value.
    /// </returns>

    public LedgerTransType ledgerTransType()
    {
        return LedgerTransType::Project;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmJournalId</Name>
        <Source><![CDATA[
        JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>postTransLedger</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Posts all the lines of the given beginning balance journal.
    /// </summary>
    /// <param name="_journalTransData">
    ///    The <c>JournalTransData</c> object.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    The <c>LedgerVoucher</c> object that contains all the transactions to be posted.
    /// </param>

    public void postTransLedger(JournalTransData    _journalTransData,
                                LedgerVoucher   _ledgerVoucher)
    {
        ProjJournalTable projJournalTable;
        boolean posted = true;

        select forupdate projJournalTable where projJournalTable.JournalId == journalId;
        journalTableData = new JournalTableData(projJournalTable);

        _ledgerVoucher = LedgerVoucher::newLedgerPost(journalTableData.journalTable().DetailSummary,
                                                                     this.ledgerSysModule(),
                                                                     NumberSequenceTable::find(journalTableData.journalTable().VoucherNumberSeq).NumberSequence,
                                                                     this.transactionLogType(),
                                                                     strFmt("@SYS76498", journalTableData.journalTable().JournalId,
                                                                     journalTableData.journalTable().Description),
                                                                     false,
                                                                     this.postingType());

        if (projJournalTable.NumOfLines)
        {
            posted = this.checkTransBudget();

            while select projBegBalJournalTrans_CostSales where projBegBalJournalTrans_CostSales.JournalId == journalId
            {
                if (projBegBalJournalTrans_CostSales.checkProjId())
                {
                    projBegBalJournalTrans_CostSales.postTrans();
                }
                else
                {
                    posted = false;
                }
            }

            while select projBegBalJournalTrans_Fee where projBegBalJournalTrans_Fee.JournalId == journalId
            {
                if (projBegBalJournalTrans_Fee.checkProjId())
                {
                    projBegBalJournalTrans_Fee.postTrans();
                }
                else
                {
                    posted = false;
                }
            }

            while select projBegBalJournalTrans_OnAcc where projBegBalJournalTrans_OnAcc.JournalId == journalId
            {
                if (projBegBalJournalTrans_OnAcc.validateField(fieldNum(ProjBegBalJournalTrans_OnAcc, ProjId)))
                {
                    projBegBalJournalTrans_OnAcc.postTrans();
                }
                else
                {
                    posted = false;
                }
            }

            if (posted)
            {
                this.updateJournalTablePosted(journalTableData.journalTable());
            }
            else
            {
                throw error(strFmt("@SYS95693", projJournalTable.JournalId));
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        JournalTransData journalTransData;
        LedgerVoucher   ledgerVoucher;

        try
        {
            setPrefix(this.prefix());
            setPrefix(this.prefixJournalTable(journalId));

            ttsbegin;
                this.postTransLedger(journalTransData, ledgerVoucher);
                this.runPostEnd();
                this.runEnd();
            ttscommit;

            this.infoResult();
        }

        catch (Exception::Error)
        {
            if (journalTransDataThrow)
            {
                error("@SYS69433");
                journalTableData.journalErrorTransList().addInfolog(this,journalTransDataThrow);
            }

            throw Exception::Error;
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>transactionLogType</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction log type of the Project Journal.
    /// </summary>
    /// <returns>
    ///    The <c>TransactionLogType::ProjJournal</c> base enumeration value.
    /// </returns>

    TransactionLogType transactionLogType()
    {
        return TransactionLogType::ProjJournal;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isCalledFromProjBegBalJournalTrans</Name>
        <Source><![CDATA[
        static boolean isCalledFromProjBegBalJournalTrans(Args _args)
    {
        boolean ret = false;

        if (_args.caller() && _args.caller().name() == formStr(ProjBegBalJournalTrans))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
        static void main(Args _args)
    {
        ProjBegBalJournalCheckPost  journalCheckPost;
        JournalForm                 journalForm;
        str                         tableId;
        LedgerVoucher               ledgerVoucher;
        boolean                     wasCalledFromProjBegBalJournalTrans;

        journalForm      = JournalForm::fromArgs(_args);

        tableId = int2str(journalForm.journalTableData().journalTable().TableId);

        journalCheckPost = ProjBegBalJournalCheckPost::newFromForm(_args,journalForm);

        wasCalledFromProjBegBalJournalTrans = ProjBegBalJournalCheckPost::isCalledFromProjBegBalJournalTrans(_args);
        if (wasCalledFromProjBegBalJournalTrans && journalForm.journalTableData().blockLevel() == JournalBlockLevel::InUse)
        {
            journalForm.journalTableData().updateBlock(JournalBlockLevel::InUse ,JournalBlockLevel::None);
        }

        journalForm.runbaseMainStart();

        if (!journalCheckPost.prompt())
        {
            if (! journalCheckPost.batchInfo().parmBatchExecute())
            {
                journalForm.runbaseMainCancel(journalCheckPost.parmJournalId());
            }
            if (wasCalledFromProjBegBalJournalTrans)
            {
                journalForm.journalTableData().updateBlock(JournalBlockLevel::None ,JournalBlockLevel::InUse);
            }
            return;
        }

        try
        {
            ttsbegin;
                setPrefix(journalCheckPost.prefix());
                setPrefix(journalCheckPost.prefixJournalTable(journalForm.journalTableData().journalTable().JournalId));
                journalCheckPost.postTransLedger(journalForm.journalTableData().journalTransList().journalTransData(),ledgerVoucher);
            ttscommit;
            journalCheckPost.infoResult();
            journalForm.runbaseMainEnd(journalCheckPost,false);
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(journalCheckPost,true);
        }
        if (wasCalledFromProjBegBalJournalTrans)
        {
            journalForm.journalTableData().updateBlock(JournalBlockLevel::None ,JournalBlockLevel::InUse);
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>newFromForm</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Retrieves a new instance of the <c>ProjBegBalJournalCheckPost</c> class for posting a beginning
    ///    balance journal.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> object.
    /// </param>
    /// <param name="_journalForm">
    ///    The <c>JournalForm</c> object to use as a wrapper for the <c>ProjJournalTable</c> form.
    /// </param>
    /// <returns>
    ///    A new <c>ProjBegBalJournalCheckPost</c> object for posting beginning balance journal entries.
    /// </returns>

    static ProjBegBalJournalCheckPost newFromForm(Args _args,JournalForm _journalForm)
    {
        ProjBegBalJournalCheckPost    journalCheckPost;
        JournalTransData        journalTransData;
        ProjJournalTable        journalTable = _journalForm.journalTableData().journalTable();

        journalCheckPost = ProjBegBalJournalCheckPost::newJournalCheckPost(false,true,_args.parmEnum(),journalTable.TableId,journalTable.JournalId);

        journalTransData = _journalForm.journalTransData();
        if (journalTransData)
        {
            journalCheckPost.parmVoucher(journalTransData.journalTrans().Voucher);
        }

        return journalCheckPost;
    }

]]></Source>
      </Method>
      <Method>
        <Name>newJournalCheckPost</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Constructs the <c>ProjBegBalJournalCheckPost</c> object by setting its initial state.
    /// </summary>
    /// <param name="_parmAutoBlock">
    ///    A Boolean value that sets the <c>autoBlock</c> variable of the <c>JournalCheckPost</c> class.
    /// </param>
    /// <param name="_parmShowInfoResult">
    ///    A Boolean value that sets the <c>showInfoResult</c> variable of <c>JournalCheckPost</c> class.
    /// </param>
    /// <param name="_checkPostType">
    ///    The posting type of the journal.
    /// </param>
    /// <param name="_tableId">
    ///    The journal table ID.
    /// </param>
    /// <param name="_journalId">
    ///    The <c>JournalID</c> of the posting journal.
    /// </param>
    /// <returns>
    ///    A new <c>ProjBegBalJournalCheckPost</c> object for posting beginning balance journal entries.
    /// </returns>

    static ProjBegBalJournalCheckPost newJournalCheckPost(boolean              _parmAutoBlock,
                                                           boolean              _parmShowInfoResult,
                                                           JournalCheckPostType _checkPostType,
                                                           tableId              _tableId,
                                                           JournalId            _journalId)
    {
        ProjBegBalJournalCheckPost        journalCheckPost = new ProjBegBalJournalCheckPost();

        journalCheckPost.getLast();
        journalCheckPost.parmAutoBlock(_parmAutoBlock);
        journalCheckPost.parmShowInfoResult(_parmShowInfoResult);
        journalCheckPost.parmJournalCheckPostType(_checkPostType);
        journalCheckPost.parmJournalTableId(_tableId);
        journalCheckPost.parmJournalId(_journalId);
        journalCheckPost.parmThrowCheckFailed(false);

        return journalCheckPost;
    }

]]></Source>
      </Method>
      <Method>
        <Name>canRunInNewSession</Name>
        <Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>