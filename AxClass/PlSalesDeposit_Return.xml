<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlSalesDeposit_Return</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class PlSalesDeposit_Return extends RunBase
{
    PlInventPackageReturn inventPackageReturn;
    Voucher               voucher;
    PlInventPackageTrans  inventPackageTrans;
    NumberSeq             numberSeq;

    boolean               printReport;
    DialogField           printReportField;

    #define.CurrentVersion(1)
    #localMacro.CurrentList
        printReport
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPackageTrans</Name>
				<Source><![CDATA[
    private AmountMst createPackageTrans(PlInventPackageReturnLine _inventPackageReturnLine)
    {
        inventPackageTrans.clear();

        inventPackageTrans.CustAccount   = inventPackageReturn.CustAccount;
        inventPackageTrans.PackageId     = _inventPackageReturnLine.PackageId;
        inventPackageTrans.Qty           = - _inventPackageReturnLine.ReturnQty;
        inventPackageTrans.InvoiceDate   = inventPackageReturn.TransDate;
        inventPackageTrans.TransDate     = inventPackageTrans.InvoiceDate;

        inventPackageTrans.RefTableId    = inventPackageReturn.TableId;
        inventPackageTrans.RefRecId      = inventPackageReturn.RecId;

        inventPackageTrans.Voucher       = voucher;

        inventPackageTrans.DepositAmount = - inventPackageTrans.returnDepositAmount(inventPackageTrans);

        inventPackageTrans.insert();

        return inventPackageTrans.DepositAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog ret = super();

        printReportField = ret.addFieldValue(enumStr(NoYes), printReport, "@GLS105552", "@GLS222528");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets values from dialog field
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        printReport = printReportField.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVoucher</Name>
				<Source><![CDATA[
    private void newVoucher()
    {
        numberSeq = NumberSeq::newGetVoucher(SalesParameters::numRefSalesPackageVoucher());
        voucher   = numberSeq.voucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion, #CurrentList ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackageReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets a package return record.
    /// </summary>
    /// <param name="_inventPackageReturn">
    ///   A package return record to set.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void parmPackageReturn(PlInventPackageReturn _inventPackageReturn)
    {
        inventPackageReturn.data(_inventPackageReturn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintReport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmPrintReport(boolean _printReport = printReport)
    {
        printReport = _printReport;
        return printReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    private void postTrans(AmountMST    _postAmount)
    {
        LedgerVoucher               ledgerVoucher;
        CustVoucher                 custVoucher;
        CustTrans                   custTrans;
        LedgerVoucherObject         ledgerVoucherObject;
        LedgerVoucherTransObject    ledgerVoucherTransObject;

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                     SysModule::Cust,
                                                     numberSeq.parmVoucherSequenceCode());

        ledgerVoucher.parmCheckBlockedDimensions(false);

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                              inventPackageReturn.TransDate,
                                                              SysModule::Cust,
                                                              LedgerTransType::Cust);

        ledgerVoucher.addVoucher(ledgerVoucherObject);

        custVoucher = CustVendVoucher::construct(SysModule::Cust,
                                                 inventPackageReturn.CustAccount,
                                                 CurrencyExchangeHelper::amount(_postAmount),
                                                 CompanyInfoHelper::standardCurrency(),
                                                 LedgerTransTxt::CustPaymentCust,
                                                 CustTable::find(inventPackageReturn.CustAccount).DefaultDimension,
                                                 "",
                                                 LedgerPostingType::CustBalance);
        custVoucher.parmTransTxt  ("@GLS111511");
        custVoucher.parmTransRefId(int642str(inventPackageReturn.RecId));

        custVoucher.post(ledgerVoucher, custTrans);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(
            ledgerVoucher.findLedgerVoucherObject(),
            LedgerPostingType::CustBalance,
            LedgerDimensionFacade::serviceCreateLedgerDimension(CustLedgerAccounts::depositLedgerDimension(inventPackageReturn.CustAccount), CustTable::find(inventPackageReturn.CustAccount).DefaultDimension),
            CompanyInfoHelper::standardCurrency(),
            -CurrencyExchangeHelper::amount(_postAmount),
            -CurrencyExchangeHelper::amount(_postAmount),
            -CurrencyExchangeHelper::amountCur2MSTSecond_RU(_postAmount, CompanyInfoHelper::standardCurrency(), 0, inventPackageReturn.TransDate));            
        ledgerVoucherTransObject.parmSourceTableId(inventPackageReturn.TableId);
        ledgerVoucherTransObject.parmSourceRecId  (inventPackageReturn.RecId);

        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        ledgerVoucher.bondLast2_RU();

        numberSeq.used();
        ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportRun</Name>
				<Source><![CDATA[
    private void reportRun()
    {
        Args            args = new Args();
        MenuFunction    menuFunction;

        if (printReport && inventPackageTrans.RecId)
        {
            args.record(inventPackageReturn);
            menuFunction = new MenuFunction(menuitemOutputStr(PlInventPackageDepositReturn), MenuItemType::Output);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        PlInventPackageReturnLine inventPackageReturnLine;
        AmountMst                 postAmount;

        select firstonly RecId from inventPackageReturnLine
            where inventPackageReturnLine.ReturnRefRecId == inventPackageReturn.RecId;

        if (! inventPackageReturnLine.RecId || inventPackageReturn.Posted)
            return;

        ttsbegin;

        if (! CustTable::find(inventPackageReturn.CustAccount).PackageDepositExcempt_PL)
        {
            this.newVoucher();
        }

        while select inventPackageReturnLine
            where inventPackageReturnLine.ReturnRefRecId == inventPackageReturn.RecId
        {
            postAmount += this.createPackageTrans(inventPackageReturnLine);
        }

        if (! CustTable::find(inventPackageReturn.CustAccount).PackageDepositExcempt_PL)
        {
            this.postTrans(postAmount);
        }

        inventPackageReturn.selectForUpdate(true);
        inventPackageReturn.Posted = NoYes::Yes;
        inventPackageReturn.doUpdate();

        ttscommit;

        this.reportRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [ version, #CurrentList ] = _packedClass;
                break;

            default              :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlSalesDeposit_Return construct()
    {
        return new PlSalesDeposit_Return();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS110023";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PlSalesDeposit_Return salesDeposit_Return = PlSalesDeposit_Return::construct();

        if (args && args.record().TableId == tableNum(PlInventPackageReturn))
        {
            salesDeposit_Return.parmPackageReturn(args.record());
            if (salesDeposit_Return.prompt())
                salesDeposit_Return.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>