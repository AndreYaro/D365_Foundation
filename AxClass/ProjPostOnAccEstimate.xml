<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostOnAccEstimate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjPostOnAccEstimate extends ProjPost
{
    ProjInvoiceOnAcc        projInvoiceOnAcc;
    ProjInvoiceOnAccDetail  projInvoiceOnAccDetail;
    ProjOnAccTrans          projOnAccTrans;
    ProjOnAccTransSale      projOnAccTransSale;

    ProjControlCalc         projControlCalc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEnterOnAccCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction that is being posted should have a credit amount for the
    /// on-account account.
    /// </summary>
    /// <returns>
    /// true if the transaction should have a credit amount for the account; otherwise, false.
    /// </returns>
    public boolean checkEnterOnAccCredit()
    {
        if (this.parmElimination())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterOnAccDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction that is being posted should have a debit amount for the
    /// on-account account.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean checkEnterOnAccDebit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountOnAccLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountOnAccLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        if (this.parmElimination())
        {
            return projTrans.accruedRevenueOnAccountLedgerDimension(_fundingSourceId);
        }

        return projTrans.wipInvoicedOnAccountLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code for the sales transactions.
    /// </summary>
    /// <returns>
    ///    The currency code for sales transactions.
    /// </returns>
    public CurrencyCode currencyIdSales()
    {
        CurrencyCode currencyCode;

        if (this.parmElimination())
        {
            // Elimination of the estimate should pick the standard currency only
            currencyCode = CompanyInfoHelper::standardCurrency();
        }
        else
        {
            currencyCode = super();
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountOnAccLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension to use for the debit side to post an on-account transaction.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    /// <returns>
    /// The posting dimension to use for debit amounts of on-account transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountOnAccLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        if (this.parmElimination())
        {
            return projTrans.wipInvoicedOnAccountLedgerDimension(_fundingSourceId);
        }

        return projTrans.accruedRevenueOnAccountLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate to use for a sales amount posting.
    /// </summary>
    /// <returns>
    /// The exchange rate to use for a sales amount posting.
    /// </returns>
    /// <remarks>
    /// If the <c>parmReverseAccrued</c> method returns true, the exchange rate that is returned will be
    /// zero. When the value is zero, the routine to compute currency amounts will look up the exchange
    /// rate from the currency exchange table.
    /// </remarks>
    public ExchRate exchRateSales()
    {
        ExchRate exchRate;

        if (this.parmElimination())
        {
            exchRate = 0;
        }
        else
        {
            exchRate = super();
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjControlCalc</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ProjControlCalc getProjControlCalc()
    {
        return projControlCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjControlCalc</Name>
				<Source><![CDATA[
    protected void initProjControlCalc()
    {
        ProjContractBillingMethod billingMethod;
        ProjControlPeriodTable projControlPeriodTable = this.projControlPeriodTable();
        ProjWIPTable wipProject = ProjWIPTable::find(projControlPeriodTable.ProjId);
        if (projOnAccTrans.PSAContractLineNum)
        {
            if(wipProject.IsContractLineUsed && contractLineBasedRevRecFeature)
            {
                billingMethod = ProjContractBillingMethod::FixedPrice;
            }
            else
            {
                billingMethod = projMultipleContractLinesForProjectFeatureHelper::getBillingMethodForProjContractLine(projOnAccTrans.PSAContractLineNum);
            }
        }
        else
        {
            billingMethod = projOnAccTrans.TransactionOrigin == ProjOrigin::Milestone ? ProjContractBillingMethod::FixedPrice : ProjContractBillingMethod::TimeMaterial;
        }        

        if(wipProject.IsContractLineUsed && contractLineBasedRevRecFeature)
        {
            projControlCalc = ProjControlCalc::constructFromWIPProjectOrRevenueProfile(wipProject, projControlPeriodTable.Elimination, billingMethod);
        }
        else
        {
          projControlCalc = ProjControlCalc::constructFromProjGroupOrRevenueProfile(ProjTable::find(projTrans.projId()), projControlPeriodTable.Elimination, billingMethod);
        }
        projControlCalc.parmProjId(projControlPeriodTable.ProjId);
        projControlCalc.parmControlId(projControlPeriodTable.ControlId);
        projControlCalc.parmPeriodFrom(projControlPeriodTable.PeriodFrom);
        projControlCalc.parmControlVersion(projControlPeriodTable.Version);
        projControlCalc.parmEliminate(projControlPeriodTable.Elimination);
        projControlCalc.parmIsContractLineUsed(wipProject.IsContractLineUsed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales account to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to be posted to the general ledger.
    /// </returns>
    /// <remarks>
    /// If this transaction is a reversing entry, the value will be the negative value of the value that is
    /// returned by the <c>salesAmountMST</c> method; otherwise, the value will be the revenue amount of
    /// the transaction.
    /// </remarks>
    public AmountCur ledgerSalesAmount()
    {
        AmountCur ledgerSalesAmount;

        if (this.parmElimination())
        {
            if (this.parmReverseAccrued())
            {
                ledgerSalesAmount = -this.salesAmountMST();
            }
            else
            {
                ledgerSalesAmount = this.salesAmountMST();
            }
        }
        else
        {
            ledgerSalesAmount = super();
        }

        return ledgerSalesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer, Common _bufferDetail)
    {
        switch (_buffer.TableId)
        {
            case tableNum(ProjOnAccTrans)    :
                projOnAccTrans  = _buffer;
                projOnAccTransSale  = _bufferDetail;
                projTrans       = ProjTrans::newProjOnAccTransSale(projOnAccTrans, projOnAccTransSale);
                break;

            case tableNum(ProjInvoiceOnAcc)    :
                projInvoiceOnAcc = _buffer;
                projInvoiceOnAccDetail = _bufferDetail;
                projOnAccTrans   = ProjOnAccTrans::find(projInvoiceOnAcc.TransId,true);
                projOnAccTransSale  = ProjOnAccTransSale::find(projInvoiceOnAccDetail.SaleRefRecId,true);
                projTrans        = new ProjTransOnAccInvoiceEstimate(projInvoiceOnAcc, projInvoiceOnAccDetail);
                break;
        }

        this.parmTransIdCost(projTrans.transId());
        this.parmTransIdSales(projTrans.transId());

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ProjWIPInvoicedOnAccount</c> value of the <c>LedgerPostingType</c> enumeration
    /// type.
    /// </summary>
    /// <returns>
    /// The <c>ProjWIPInvoicedOnAccount</c> enumeration value.
    /// </returns>
    public LedgerPostingType postingTypeOffsetOnAcc()
    {
        if (! projControlCalc)
        {
            this.initProjControlCalc();
        }

        return projControlCalc.postingTypeOffsetOnAcc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ProjAccruedRevenueOnAccount</c> value of the <c>LedgerPostingType</c> enumeration
    /// type.
    /// </summary>
    /// <returns>
    /// The <c>ProjAccruedRevenueOnAccount</c> enumeration value.
    /// </returns>
    public LedgerPostingType postingTypeOnAcc()
    {
        if (! projControlCalc)
        {
            this.initProjControlCalc();
        }

        return projControlCalc.postingTypeOnAcc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projControlPeriodTable</Name>
				<Source><![CDATA[
    public ProjControlPeriodTable projControlPeriodTable()
    {
        ProjControlPeriodTable  projControlPeriodTable;
        ProjRevRecContractLine projRevRecContractLine;
        ProjWIPTable wipProject = projTrans.getWIPProject();

        if(contractLineBasedRevRecFeature && isContractLineUsed)
        {
            if (this.parmElimination())
            {
                select firstonly projControlPeriodTable
                where projControlPeriodTable.ProjId == wipProject.ProjId &&
                      projControlPeriodTable.Elimination  &&
                     !projControlPeriodTable.Reverse;
            }
            else
            {
                select firstonly projControlPeriodTable
                where projControlPeriodTable.ProjId == wipProject.ProjId &&
                     projControlPeriodTable.ControlId  == projTrans.controlId() &&
                      projControlPeriodTable.Version    == projTrans.controlVersion() &&
                      projControlPeriodTable.PeriodTo   == projTrans.controlPeriodTo();
            }
        }
        else
        {
            if (this.parmElimination())
            {
                select projControlPeriodTable
                where projControlPeriodTable.ProjId == ProjTable::find(projTrans.projId()).wipProject &&
                      projControlPeriodTable.Elimination                  &&
                     !projControlPeriodTable.Reverse;
            }
            else
            {
                select projControlPeriodTable
                where projControlPeriodTable.ProjId     == ProjTable::find(projTrans.projId()).wipProject &&
                      projControlPeriodTable.ControlId  == projTrans.controlId() &&
                      projControlPeriodTable.Version    == projTrans.controlVersion() &&
                      projControlPeriodTable.PeriodTo   == projTrans.controlPeriodTo();
            }
        }

        return projControlPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c> when
    /// the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        ProjInvoiceOnAcc        projInvoiceOnAccUpdate;
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetailUpdate;
        ProjTrans               projTransInvoice;
        ProjInvoiceOnAccDetail  locprojInvoiceOnAccDetail;

        if ( !this.parmElimination())
        {
            if (this.parmReverseAccrued())
            {
                select firstonly locprojInvoiceOnAccDetail
                    order by wipPeriod desc
                    where locprojInvoiceOnAccDetail.SaleRefRecId == projOnAccTransSale.RecId
                    && locprojInvoiceOnAccDetail.wipPeriod < this.parmPeriodWIP()
                    && locprojInvoiceOnAccDetail.wipPeriod;
                if (locprojInvoiceOnAccDetail)
                {
                    projOnAccTransSale.wipPeriod         = locprojInvoiceOnAccDetail.wipPeriod;
                    projOnAccTransSale.LedgerSalesAmount = 0;
                    while select projInvoiceOnAccDetailUpdate
                        where projInvoiceOnAccDetailUpdate.SaleRefRecId == projOnAccTransSale.RecId
                        && projInvoiceOnAccDetailUpdate.wipPeriod <= locprojInvoiceOnAccDetail.wipPeriod
                        && projInvoiceOnAccDetailUpdate.wipPeriod
                            join projInvoiceOnAccUpdate
                                where projInvoiceOnAccUpdate.RecId == projInvoiceOnAccDetailUpdate.InvoiceRefRecId
                    {
                        projTransInvoice =  ProjTrans::newProjInvoiceOnAccSale(projInvoiceOnAccUpdate, projInvoiceOnAccDetailUpdate);
                        projOnAccTransSale.LedgerSalesAmount += projTransInvoice.transTurnoverMST();
                    }
                }
                else
                {
                    projOnAccTransSale.wipPeriod            = dateNull();
                    projOnAccTransSale.LedgerSalesAmount    = 0;
                    if (projOnAccTransSale.TransStatus == ProjTransStatus::Estimated)
                    {
                        projOnAccTransSale.TransStatus          = ProjTransStatus::Invoiced;
                    }
                }
            }
            else
            {
                projOnAccTransSale.wipPeriod            = this.parmPeriodWIP();
                projOnAccTransSale.LedgerSalesAmount    = 0;
                while select projInvoiceOnAccDetailUpdate
                    where projInvoiceOnAccDetailUpdate.SaleRefRecId == projOnAccTransSale.RecId
                        && projInvoiceOnAccDetailUpdate.wipPeriod <= this.parmPeriodWIP()
                        && projInvoiceOnAccDetailUpdate.wipPeriod
                            join projInvoiceOnAccUpdate
                                where projInvoiceOnAccUpdate.RecId == projInvoiceOnAccDetailUpdate.InvoiceRefRecId
                {
                    projTransInvoice =  ProjTrans::newProjInvoiceOnAccSale(projInvoiceOnAccUpdate, projInvoiceOnAccDetailUpdate);
                    projOnAccTransSale.LedgerSalesAmount += projTransInvoice.transTurnoverMST();
                }
            }
        }

        projOnAccTransSale.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>