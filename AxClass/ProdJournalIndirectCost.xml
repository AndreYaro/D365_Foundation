<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalIndirectCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdJournalIndirectCost</c> class calculates indirect costs for a production order, writes
///    the result to the <c>ProdIndirectTrans</c> table, and adds entries to the ledger voucher for
///    additional posting.
/// </summary>
class ProdJournalIndirectCost extends InventCostJournalIndirectCost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costPriceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the price type for indirect cost calculation journals.
    /// </summary>
    /// <returns>
    ///    Always returns the <c>CostPriceType::COGM</c> enumeration value.
    /// </returns>
    public CostPriceType costPriceType()
    {
        return CostPriceType::COGM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFinancialAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the financial accounts on the <c>ProdIndirectTrans</c> record based on the calculation
    ///    type.
    /// </summary>
    /// <param name="_calculationNode">
    ///    The indirect cost calculation type.
    /// </param>
    /// <param name="_voucher">
    ///    The ledger voucher record.
    /// </param>
    /// <param name="_transDate">
    ///    The calculation date.
    /// </param>
    /// <param name="_prodIndirectTrans">
    ///    The <c>ProdIndirectTrans</c> record to be initialized.
    /// </param>
    protected void initFinancialAccounts(
        CostSheetNodeCalculation    _calculationNode,
        Voucher                     _voucher,
        TransDate                   _transDate,
        ProdIndirectTrans           _prodIndirectTrans)
    {
        _prodIndirectTrans.VoucherCalc = _voucher;
        _prodIndirectTrans.DateCalc = _transDate;
        _prodIndirectTrans.Calculated = NoYes::Yes;
        _prodIndirectTrans.IndirectAbsorptionLedgerDimension        = LedgerDimensionFacade::serviceCreateLedgerDimension(_calculationNode.getAcctIndirectAbsorption(), _prodIndirectTrans.DefaultDimension);
        _prodIndirectTrans.PostingIndirectAbsorption                = LedgerPostingType::IndirectAbsorption;
        // We take first the account from the costing sheet.
        _prodIndirectTrans.IndirectAbsorptionOffsetLedgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(_calculationNode.getAcctIndirectAbsorptionOffset(), _prodIndirectTrans.DefaultDimension);
        // For indirect cost related to production flow we need to get the account from
        // the production group of the related production flow.
        if (_prodIndirectTrans.TransRefType == ProdTransRefType::ProductionFlow)
        {
            ProdGroup relatedProductionGroup = LeanProductionFlowReference::findPlanReferenceName(_prodIndirectTrans.TransRefId).prodGroup();
            // If the account is not set on the production group it will default to the account from the costing sheet.
            // The defaulting should not happen in case posting type is set to production group.
            if (relatedProductionGroup
                && (relatedProductionGroup.IndirectAbsorptionOffsetLedgerDimension ||
                ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup))
            {
                _prodIndirectTrans.EstimIndirectAbsorpOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(relatedProductionGroup.IndirectAbsorptionOffsetLedgerDimension, _prodIndirectTrans.DefaultDimension);
            }
        }
        _prodIndirectTrans.PostingIndirectAbsorptionOffset          = LedgerPostingType::IndirectAbsorptionOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPhysicalAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the physical accounts on the <c>ProdIndirectTrans</c> record based on the calculation
    ///    type.
    /// </summary>
    /// <param name="_calculationNode">
    ///    The indirect cost calculation type.
    /// </param>
    /// <param name="_voucher">
    ///    The ledger voucher record.
    /// </param>
    /// <param name="_transDate">
    ///    The calculation date.
    /// </param>
    /// <param name="_prodIndirectTrans">
    ///    The <c>ProdIndirectTrans</c> record to be initialized.
    /// </param>
    protected void initPhysicalAccounts(
        CostSheetNodeCalculation    _calculationNode,
        Voucher                     _voucher,
        TransDate                   _transDate,
        ProdIndirectTrans           _prodIndirectTrans)
    {
        _prodIndirectTrans.VoucherEstimation = _voucher;
        _prodIndirectTrans.DateEstimation = _transDate;
        _prodIndirectTrans.Calculated = NoYes::No;
        _prodIndirectTrans.EstimatedIndirectAbsorpLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_calculationNode.getAcctEstimatedIndirectAbsorption(), _prodIndirectTrans.DefaultDimension);
        // We take first the account from the costing sheet.
        _prodIndirectTrans.EstimIndirectAbsorpOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_calculationNode.getAcctEstimatedIndirectAbsorptionOffset(), _prodIndirectTrans.DefaultDimension);

        // For indirect cost related to production flow we need to get the account from
        // the production group of the related production flow.
        if (_prodIndirectTrans.TransRefType == ProdTransRefType::ProductionFlow)
        {
            ProdGroup relatedProductionGroup = LeanProductionFlowReference::findPlanReferenceName(_prodIndirectTrans.TransRefId).prodGroup();
            // If the account is not set on the production group it will default to the account from the costing sheet.
            // The defaulting should not happen in case posting type is set to production group.
            if (relatedProductionGroup
                && (relatedProductionGroup.EstimIndirectAbsorpOffsetLedgerDimension ||
                ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup))
            {
                _prodIndirectTrans.EstimIndirectAbsorpOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(relatedProductionGroup.EstimIndirectAbsorpOffsetLedgerDimension, _prodIndirectTrans.DefaultDimension);
            }
        }

        _prodIndirectTrans.PostingEstimatedIndirectAbsorption = LedgerPostingType::IndirectEstimatedAbsorption;
        _prodIndirectTrans.PostingEstimatedIndirectAbsorptionOffset = LedgerPostingType::IndirectEstimatedAbsorptionOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Flushes the remaining <c>ProdIndirectTrans</c> records to the database.
    /// </summary>
    /// <param name="_createJournal">
    ///    A Boolean variable that defines whether a journal should be created in association with the
    ///    indirect cost posting.
    /// </param>
    public void run(boolean _createJournal = true)
    {
        InventTransId   inventTransId;
        Voucher         voucher;
        TransDate       transDate;
        ProdTableJour   prodTableJour;

        super(_createJournal);

        if (_createJournal)
        {
            MapEnumerator journalEnumerator = inventTransIdVoucherDate2AmountPerCostGroupMap.getEnumerator();
            while (journalEnumerator.moveNext())
            {
                [inventTransId, voucher, transDate] = journalEnumerator.currentKey();
                prodTableJour.clear();
                prodTableJour.initFromInventTrans(InventTrans::findTransId(inventTransId), InventTransOrigin::findByInventTransId(inventTransId));
                prodTableJour.TransDate = transDate;
                prodTableJour.JournalType = ProdJourType::IndirectCost;
                prodTableJour.Voucher = voucher;
                prodTableJour.AmountPhysical = this.getIndirectCostPostedTotal(inventTransId, voucher, transDate);
                prodTableJour.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdJournalIndirectCost construct()
    {
        return new ProdJournalIndirectCost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>