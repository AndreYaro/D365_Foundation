<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanSysOperationServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanSysOperationServiceController</c> class that customizes SysOperationServiceController functionality
/// </summary>
class ReqDemPlanSysOperationServiceController extends SysOperationServiceController
{
    #ReqDemPlan
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>afterOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after a service operation is executed.
    /// </summary>
    /// <param name="_executionMode">
    /// The execution mode of a service operation. In the case of reliable asynchronous mode initiated from
    /// the desktop client this method is called two times. One time with the <c>executionMode</c> value
    /// set to a <c>SysOperationExecutionMode::Synchronous</c> enumeration value as part of the batch
    /// execution and again on the client by setting the <c>executionMode</c> value set to a
    /// <c>SysOperationExecutionMode::ReliableAsynchronous</c> enumeration type. This enables client code
    /// to wait for the batch to be completed.
    /// </param>
    /// <param name="_asyncResult">
    /// Asynchronous result structure.
    /// </param>
    /// <remarks>
    /// Overriden to fix infolog issues of SysOperationServiceController
    /// </remarks>
    protected void afterOperation(SysOperationExecutionMode _executionMode, AifAsyncResult _asyncResult)
    {
        Batch batch;
        BatchHistory batchHistory;
        int numRetries = 10;

        if (_executionMode == SysOperationExecutionMode::ReliableAsynchronous)
        {
            batch = this.operationReturnValue();

            do
            {
                select batchHistory
                    where batchHistory.BatchJobId == batch.BatchJobId;

                //It is possible that batchHistory record is not yet added to the database, so we need to wait for it
                if (batchHistory)
                {
                    infolog.import(BatchHistory::showLog(batchHistory.RecId));
                    return;
                }
                else
                {
                    numRetries--;
                    sleep(#BatchHistoryRetrySleepTime);
                }
            }
            while (numRetries > 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequiredForecastParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates setup of Demand Forecasting parameters,
    ///     that are required to run one of its services.
    /// </summary>
    /// <param name="_forecastVersion">
    ///     The cube type.
    /// </param>
    protected void validateRequiredForecastParameters(ReqDemPlanForecastVersion _forecastVersion)
    {
        void generateWarning(str _label)
        {
            warning(
                strFmt(_label, "@DMP1036"),
                '',
                SysInfoAction_Formrun::newFormnameDesc(formStr(ReqDemPlanForecastParameters), "@DMP1036"));
        }

        if (!ReqDemPlanForecastParameters::find().ForecastingUnitOfMeasure())
        {
            generateWarning("@DMP1023");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>