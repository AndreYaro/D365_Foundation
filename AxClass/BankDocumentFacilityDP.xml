<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentFacilityDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankDocumentFacilityDP</c> class is the report data provider class for the
///    <c>BankDocumentFacility</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(BankDocumentFacility))
]
class BankDocumentFacilityDP extends SRSReportDataProviderBase
{
    BankDocumentFacilityTmp bankDocumentFacilityTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBankLCImportQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query to fetch <c>BankLCImport</c> records related to current <c>BankDocumentFacilityAgreementLine</c>.
    /// </summary>
    /// <returns>
    /// The created query.
    /// </returns>
    private QueryRun createBankLCImportQueryRun()
    {
        Query                   bankLCImportQuery;
        QueryBuildDataSource    bankLCImportDS;

        bankLCImportQuery       = new Query();
        bankLCImportDS          = bankLCImportQuery.addDataSource(tablenum(BankLCImport));
        bankLCImportDS.addRange(fieldnum(BankLCImport, BankDocumentFacilityAgreementLine));

        return new QueryRun(bankLCImportQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankLGQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query to fetch <c>BankLGGuarantee</c> records related to current <c>BankDocumentFacilityAgreementLine</c>.
    /// </summary>
    /// <returns>
    /// The created query.
    /// </returns>
    private QueryRun createBankLGQueryRun()
    {
        Query                   bankLGQuery;
        QueryBuildDataSource    bankLGDS;

        bankLGQuery = new Query();
        bankLGDS    = bankLGQuery.addDataSource(tablenum(BankLGGuarantee));
        bankLGDS.addRange(fieldnum(BankLGGuarantee, FacilityAgreementLine));

        return new QueryRun(bankLGQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentFacilityTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>BankDocumentFacilityTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(BankDocumentFacilityTmp))
    ]
    public BankDocumentFacilityTmp getBankDocumentFacilityTmp()
    {
        select bankDocumentFacilityTmp;
        return bankDocumentFacilityTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBankLCImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits <c>BankDocumentFacilityTmp</c> from <c>BankLCImport</c>.
    /// </summary>
    /// <param name="_bankLCImport">
    /// The <c>bankLCImport</c> use to init <c>BankDocumentFacilityTmp</c>.
    /// </param>
    public void initFromBankLCImport(BankLCImport _bankLCImport)
    {
        bankDocumentFacilityTmp.DocumentNumber         = _bankLCImport.BankLCNumber;
        bankDocumentFacilityTmp.DocumentTotalAmount    = _bankLCImport.getTotalOrderAmount();
        bankDocumentFacilityTmp.DocumentMarginCur      = BankLCImportMargin::getTotalAmount(_bankLCImport.RecId);

        if (_bankLCImport.ImportStatus != BankLCImportStatusType::Confirmed)
        {
            bankDocumentFacilityTmp.DocumentAmountUsedFromFacility = 0;
        }
        else
        {
            bankDocumentFacilityTmp.DocumentAmountUsedFromFacility  = _bankLCImport.getTotalShipmentAmountBalance();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBankLG</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits <c>BankDocumentFacilityTmp</c> from <c>BankLCImport</c>.
    /// </summary>
    /// <param name="_bankLGGuarantee">
    /// The <c>BankLGGuarantee</c> use to init <c>BankDocumentFacilityTmp</c>.
    /// </param>
    public void initFromBankLG(BankLGGuarantee _bankLGGuarantee)
    {
        bankDocumentFacilityTmp.DocumentNumber                 = _bankLGGuarantee.Number;
        bankDocumentFacilityTmp.DocumentTotalAmount            = _bankLGGuarantee.BankAccountCurrencyGuaranteeAmount;
        bankDocumentFacilityTmp.DocumentMarginCur              = _bankLGGuarantee.BankAccountCurrencyMarginAmount;
        bankDocumentFacilityTmp.DocumentAmountUsedFromFacility = _bankLGGuarantee.BankAccountCurrencyGuaranteeAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFacilityAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits <c>BankDocumentFacilityTmp</c> from <c>BankLCImport</c>.
    /// </summary>
    /// <param name="_bankDocumentFacilityAgreementView">
    /// The <c>BankDocumentFacilityAgreementView</c> use to init <c>BankDocumentFacilityTmp</c>.
    /// </param>
    public void initFromFacilityAgreement(BankDocumentFacilityAgreementView _bankDocumentFacilityAgreementView)
    {
        bankDocumentFacilityTmp.BankAccountTable           = _bankDocumentFacilityAgreementView.BankAccountTable;
        bankDocumentFacilityTmp.BankAccountCurrencyCode    = BankAccountTable::find(_bankDocumentFacilityAgreementView.BankAccountTable).CurrencyCode;
        bankDocumentFacilityTmp.FacilityAgreementNumber    = _bankDocumentFacilityAgreementView.AgreementNumber;

        bankDocumentFacilityTmp.FacilityValidFrom          = _bankDocumentFacilityAgreementView.ValidFrom;
        bankDocumentFacilityTmp.FacilityValidTo            = _bankDocumentFacilityAgreementView.ValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFacilityAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits <c>BankDocumentFacilityTmp</c> from <c>BankLCImport</c>.
    /// </summary>
    /// <param name="_bankDocumentFacilityAgreementLine">
    /// The <c>BankDocumentFacilityAgreementLine</c> use to init <c>BankDocumentFacilityTmp</c>.
    /// </param>
    public void initFromFacilityAgreementLine(BankDocumentFacilityAgreementLine _bankDocumentFacilityAgreementLine)
    {
        bankDocumentFacilityTmp.FacilityLineFacilityTypeName    = _bankDocumentFacilityAgreementLine.getBankDocumentFacilityType().FacilityTypeName;
        bankDocumentFacilityTmp.FacilityLineBankDocumentType    = _bankDocumentFacilityAgreementLine.getBankDocumentFacilityType().BankDocumentType;
        bankDocumentFacilityTmp.FacilityLineLimit               = _bankDocumentFacilityAgreementLine.Limit;
        bankDocumentFacilityTmp.FacilityLineBalance             = _bankDocumentFacilityAgreementLine.getBalanceAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankDocumentFacilityTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into temporary table <c>BankDocumentFacilityTmp</c>.
    /// </summary>
    /// <param name="_bankDocumentFacilityAgreementView">
    /// The <c>BankDocumentFacilityAgreementView</c> use to init <c>BankDocumentFacilityTmp</c>.
    /// </param>
    /// <param name="_bankDocumentFacilityAgreementLine">
    /// The <c>BankDocumentFacilityAgreementLine</c> use to init <c>BankDocumentFacilityTmp</c>.
    /// </param>
    /// <param name="_bankDocumentType">
    /// The <c>BankDocumentType</c> use to init <c>BankDocumentFacilityTmp</c>.
    /// </param>
    /// <param name="_bankDocument">
    /// The <c>BankLCImport</c> or <c>BankLGGuarantee</c> use to init <c>BankDocumentFacilityTmp</c>,
    /// the table type is depend on parameter _bankDocumentType.
    /// </param>
    private void insertBankDocumentFacilityTmp(
        BankDocumentFacilityAgreementView   _bankDocumentFacilityAgreementView,
        BankDocumentFacilityAgreementLine   _bankDocumentFacilityAgreementLine  = null,
        BankDocumentType                    _bankDocumentType                   = BankDocumentType::LetterOfCredit,
        Common                              _bankDocument                       = null)
    {
        bankDocumentFacilityTmp.clear();
        this.initFromFacilityAgreement(_bankDocumentFacilityAgreementView);
        if (_bankDocumentFacilityAgreementLine)
        {
            this.initFromFacilityAgreementLine(_bankDocumentFacilityAgreementLine);
            if (_bankDocument
                && (_bankDocumentType       == BankDocumentType::ImportCollection
                    || _bankDocumentType    == BankDocumentType::LetterOfCredit))
            {
                this.initFromBankLCImport(_bankDocument);
            }
            else if (_bankDocumentType == BankDocumentType::LetterOfGuarantee && _bankDocument)
            {
                this.initFromBankLG(_bankDocument);
            }
        }
        bankDocumentFacilityTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method is used to process the report business logic which is used by the <c>BankDocumentFacility</c> report.
    /// </remarks>
    public void processReport()
    {
        QueryRun                            bankLCImportQueryRun;
        QueryRun                            bankLGQueryRun;
        QueryRun                            bankFacilityQueryRun;
        BankDocumentFacilityAgreementView   bankDocumentFacilityAgreementView;
        BankDocumentFacilityAgreementLine   bankDocumentFacilityAgreementLine;
        BankDocumentFacilityType            bankDocumentFacilityType;
        BankLCImport                        bankLCImport;
        BankLGGuarantee                     bankLGGuarantee;

        bankFacilityQueryRun    = new QueryRun(this.parmQuery());
        bankLCImportQueryRun    = this.createBankLCImportQueryRun();
        bankLGQueryRun          = this.createBankLGQueryRun();

        while (bankFacilityQueryRun.next())
        {
            if (bankFacilityQueryRun.changed(tablenum(BankDocumentFacilityAgreementLine)))
            {
                bankDocumentFacilityAgreementView = bankFacilityQueryRun.get(tablenum(BankDocumentFacilityAgreementView));
                bankDocumentFacilityAgreementLine = bankFacilityQueryRun.get(tablenum(BankDocumentFacilityAgreementLine));
                if (bankDocumentFacilityAgreementLine.BankDocumentFacilityAgreement)
                {
                    bankDocumentFacilityType = BankDocumentFacilityType::find(bankDocumentFacilityAgreementLine.BankDocumentFacilityType);
                    if (bankDocumentFacilityType.BankDocumentType == BankDocumentType::ImportCollection
                        || bankDocumentFacilityType.BankDocumentType == BankDocumentType::LetterOfCredit)
                    {
                        bankLCImportQueryRun.reset();
                        bankLCImportQueryRun.query().dataSourceTable(tablenum(BankLCImport)).rangeField(
                            fieldnum(BankLCImport, BankDocumentFacilityAgreementLine)).value(
                                SysQuery::value(bankDocumentFacilityAgreementLine.RecId));
                        if (bankLCImportQueryRun.next())
                        {
                            do
                            {
                                if (bankLCImportQueryRun.changed(tablenum(BankLCImport)))
                                {
                                    bankLCImport = bankLCImportQueryRun.get(tablenum(BankLCImport));
                                    this.insertBankDocumentFacilityTmp(
                                        bankDocumentFacilityAgreementView,
                                        bankDocumentFacilityAgreementLine,
                                        bankDocumentFacilityType.BankDocumentType,
                                        bankLCImport);
                                }
                            } while (bankLCImportQueryRun.next());
                        }
                        else
                        {
                            this.insertBankDocumentFacilityTmp(bankDocumentFacilityAgreementView, bankDocumentFacilityAgreementLine);
                        }
                    }
                    else if (bankDocumentFacilityType.BankDocumentType == BankDocumentType::LetterOfGuarantee)
                    {
                        bankLGQueryRun.reset();
                        bankLGQueryRun.query().dataSourceTable(tablenum(BankLGGuarantee)).rangeField(
                            fieldnum(BankLGGuarantee, FacilityAgreementLine)).value(
                                SysQuery::value(bankDocumentFacilityAgreementLine.RecId));

                        if (bankLGQueryRun.next())
                        {
                            do
                            {
                                if (bankLGQueryRun.changed(tablenum(BankLGGuarantee)))
                                {
                                    bankLGGuarantee = bankLGQueryRun.get(tablenum(BankLGGuarantee));
                                    this.insertBankDocumentFacilityTmp(
                                        bankDocumentFacilityAgreementView,
                                        bankDocumentFacilityAgreementLine,
                                        bankDocumentFacilityType.BankDocumentType,
                                        bankLGGuarantee);
                                }
                            } while (bankLGQueryRun.next());
                        }
                        else
                        {
                            this.insertBankDocumentFacilityTmp(bankDocumentFacilityAgreementView, bankDocumentFacilityAgreementLine);
                        }
                    }
                }
                else
                {
                    this.insertBankDocumentFacilityTmp(bankDocumentFacilityAgreementView);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
