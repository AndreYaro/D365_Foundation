<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepEntityPost_PreTaxDeduction_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset depreciation entity post for pre-tax deduction
/// </summary>
class AssetDepEntityPost_PreTaxDeduction_JP extends AssetDepEntityPost_JP
{
    AssetTableInterval      assetTableInterval;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getValidToDate</Name>
				<Source><![CDATA[
    protected AssetTransDate getValidToDate(AssetDepEntityType_JP _entityType, AssetTransDate _entityDate, AssetAmount _entityBalance = 0)
    {
        AssetTransDate      validToDate;

        if (prmisDefault(_entityBalance))
        {
            validToDate = assetTableInterval.findLastDayOfYear(_entityDate);
        }
        else
        {
            validToDate = AssetAdvRuleExe_PreTaxDedCarryFwd_JP::calcValidToDate(
                AssetDepPreTaxDeductionHelper_JP::depEntityTypeToDepType(_entityType),
                AssetDepPreTaxDeductionHelper_JP::determinOverUnderType(_entityBalance),
                assetTableInterval.findLastDayOfYear(_entityDate));
        }

        return validToDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTableInterval</Name>
				<Source><![CDATA[
    public AssetTableInterval parmAssetTableInterval(AssetTableInterval _assetTableInterval = assetTableInterval)
    {
        assetTableInterval = _assetTableInterval;
        return assetTableInterval;
    }
]]></Source>
			</Method>
			<Method>
				<Name>postBalanceAdjForCarryForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts balance adjustment for carry forward
    /// </summary>
    /// <param name="_entityType">
    /// The entity type
    /// </param>
    /// <param name="_expectedBalance">
    /// The expected balance
    /// </param>
    /// <param name="_lastDayOfYear">
    /// The last day of the year
    /// </param>
    public void postBalanceAdjForCarryForward(
        AssetDepEntityType_JP       _entityType,
        AssetAmount                 _expectedBalance,
        AssetTransDate              _lastDayOfYear)
    {
        AssetAmount                                 curBalance;
        AssetDepEntity_JP                           assetDepEntityLoc;
        AssetAmount                                 curEntityBalance;
        AssetAmount                                 expectedEntityBalance;
        boolean                                     validToDateChangedForCurEntity;
        AssetTransDate                              lastDayOfNextYear    = assetTableInterval.findLastDayOfYear(_lastDayOfYear + 1);
        AssetDepEntityInquiry_PreTaxDeduction_JP    assetDepEntityInquiry;

        // Calc the current balance
        assetDepEntityInquiry = AssetDepEntityInquiry_PreTaxDeduction_JP::construct(
            assetDepEntityGroup.AssetId,
            assetDepEntityGroup.BookId,
            assetTableInterval);
        curBalance = assetDepEntityInquiry.calcOverUnderBalanceCarryForward([_entityType], _lastDayOfYear);

        // Post adjustment if needed
        if (curBalance != _expectedBalance)
        {
            ttsBegin;

            // The entity to post the adjustment must be valid for the next year.
            assetDepEntityLoc = this.findOrCreateEntity(
                _entityType,
                _lastDayOfYear,
                true);

            // As the adjustment will be post to current entity, this may make the balance of current entity changed between over and under.
            // If the balance type changed, the "ValidTo" needs to recalculate.
            curEntityBalance = assetDepEntityInquiry.calcSumForEntity(assetDepEntityLoc.RecId);
            expectedEntityBalance = curEntityBalance + (_expectedBalance - curBalance);
            if (sign(curEntityBalance) != sign(expectedEntityBalance))
            {
                if (this.adjustValidToDateForEntity(assetDepEntityLoc, expectedEntityBalance))
                {
                    validToDateChangedForCurEntity = true;
                }
            }

            if (assetDepEntityLoc.ValidTo < lastDayOfNextYear)
            {
                assetDepEntityLoc.ValidTo = lastDayOfNextYear;
                validToDateChangedForCurEntity = true;
            }

            if (validToDateChangedForCurEntity)
            {
                // Now, we can make sure the current entity is valid in next year.
                assetDepEntityLoc.update();

                // Recalculate the current balance as the entity is changed.
                curBalance = assetDepEntityInquiry.calcOverUnderBalanceCarryForward([_entityType], _lastDayOfYear);
            }

            if (curBalance != _expectedBalance)
            {
                this.postForEntityType(
                    _entityType,
                    _expectedBalance - curBalance,
                    _lastDayOfYear,
                    AssetDepEntityTransType_JP::OverUnderDepCarryForward);
            }

            ttsCommit;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>postInclusionByOverUnderDep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts inclusion by over under depreciation
    /// </summary>
    /// <param name="_entityType">
    /// The entity type
    /// </param>
    /// <param name="_amount">
    /// The amount
    /// </param>
    /// <param name="_transDate">
    /// The trans date
    /// </param>
    /// <returns>
    /// Returns true if posted otherwise false
    /// </returns>
    public boolean postInclusionByOverUnderDep(
        AssetDepEntityType_JP   _entityType,
        AssetAmount             _amount,
        AssetTransDate          _transDate)
    {
        AssetAmount                 amountToPost        = _amount;
        AssetTransDate              firstDayOfCurYear;

        if (amountToPost == 0)
        {
            return true;
        }

        firstDayOfCurYear   = assetTableInterval.findFirstDayOfYear(_transDate);

        // Post for the carry forward part first
        this.postForEntityType(
            _entityType,
            -1 * _amount,
            _transDate,
            AssetDepEntityTransType_JP::InclusionByOverUnderDep,
            dateNull(),
            firstDayOfCurYear - 1,
            firstDayOfCurYear);

        // Post for the current year's part
        this.post(
            _entityType,
            _transDate,
            _amount,
            _transDate,
            AssetDepEntityTransType_JP::InclusionByOverUnderDep);

        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>revertAllTransInCurYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts all transactions in current year
    /// </summary>
    /// <param name="_reverseDate">
    /// The reverse date
    /// </param>
    public void revertAllTransInCurYear(AssetTransDate _reverseDate)
    {
        AssetTransDate      firstDayOfCurYear   = assetTableInterval.findFirstDayOfYear(_reverseDate);
        AssetTransDate      lastDayOfCurYear    = assetTableInterval.findLastDayOfYear(_reverseDate);

        this.postReverse(
            _reverseDate,
            conNull(),
            dateNull(),
            dateMax(),
            dateNull(),
            conNull(),
            firstDayOfCurYear,
            lastDayOfCurYear);
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <C>AssetDepEntityPost_PreTaxDeduction_JP</C>
    /// </summary>
    /// <param name="_assetId">
    /// The asset id
    /// </param>
    /// <param name="_bookId">
    /// The book id
    /// </param>
    /// <param name="_assetTableInterval">
    /// The asset table interval instance
    /// </param>
    /// <param name="_entitySourceImplementation">
    /// The entity source implementation, optional
    /// </param>
    /// <returns>
    /// Returns the instance
    /// </returns>
    public static AssetDepEntityPost_PreTaxDeduction_JP construct(
        AssetId                                 _assetId,
        AssetBookMergeId                        _bookId,
        AssetTableInterval                      _assetTableInterval,
        AssetDepEntitySourceImplementation_JP   _entitySourceImplementation = null)
    {
        AssetDepEntityPost_PreTaxDeduction_JP    ret;

        ret = new AssetDepEntityPost_PreTaxDeduction_JP(
            AssetDepEntityGroup_JP::findOrCreate(
                _assetId,
                _bookId),
            AssetDepEntitySource_JP::findOrCreate(_entitySourceImplementation));

        ret.parmAssetTableInterval(_assetTableInterval);

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>