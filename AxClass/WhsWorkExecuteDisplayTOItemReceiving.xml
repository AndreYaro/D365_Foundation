<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayTOItemReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to manage received transfer order items.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::TransferOrderItemReceiving)]
[WHSWorkExecuteMode(WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate)]
class WhsWorkExecuteDisplayTOItemReceiving extends WhsWorkExecuteDisplayTOReceiving
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        
        switch (true)
        {
            case _control is WhsControlItemId:
                return this.processItemIdForTransferOrderItemReceiving(_control);
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTOReceiving</Name>
				<Source><![CDATA[
    protected container buildTOReceiving(container _con, str _extratext = '')
    {
        container           ret = _con;
        boolean             showExceptionButton;
        InventTable         inventTable;
        InventTransferLine  transferLine;
        InventDim           inventDim;
        WHSInventTable      whsInventTable;
        WHSProdQty          defaultQty;
        LineNum             toLineNum;

        ret += [this.buildControl(#RFLabel, 'TOItemReceiving', pass.exists(#MenuItem) ? WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];

        if (pass.exists(#TONum) && pass.lookup(#TONum) != '')
        {
            ret += [this.buildControl(#RFText, #TONum, "@WAX3858", 1, pass.lookup(#TONum), extendedTypeNum(InventTransferId), '', 0, false)];

            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0)];

            if (pass.exists(#ItemId) && pass.lookup(#ItemId) != '')
            {
                whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

                defaultQty = whsInventTable.ProdQty;

                if (whsInventTable.rfDescription1)
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
                }
                else
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", InventTable::find(whsInventTable.ItemId).productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
                }

                if (whsInventTable.rfDescription2)
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
                }

                if (pass.exists(#TOLineNum) && pass.lookup(#TOLineNum) != '')
                {
                    ret += [this.buildControl(#RFText, #TOLineNum, "@WAX1236", 1, pass.lookup(#TOLineNum), extendedTypeNum(LineNum), '', 0, false)];
                    showExceptionButton = true;
                }
                else
                {
                    toLineNum = this.getTOLineNum(pass.lookup(#TONum), pass.lookup(#ItemId));
                    ret += [this.buildControl(#RFText, #TOLineNum, "@WAX1236", 1, WHSWorkExecuteDisplay::num2StrDisplay(toLineNum), extendedTypeNum(LineNum), '', 0, false)];
                    pass.insert(#TOLineNum, toLineNum);
                    showExceptionButton = true;
                }
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, #TONum, "@WAX3858", 1, '', extendedTypeNum(InventTransferId), '', 0)];
        }

        if (pass.exists(#ItemId))
        {
            inventTable             = InventTable::find(pass.lookup(#ItemId));
            transferLine            = InventTransferLine::find(pass.lookup(#TONum), pass.lookupNum(#TOLineNum));
            inventDim.InventDimId   = transferLine.InventDimId;
            inventDim               = InventDim::find(transferLine.InventDimId);

            ret = this.buildProductDimensionsFromInventDim(ret, inventTable.ItemId, inventDim, false);
        }

        if ((!pass.exists(#Qty) || pass.lookupNum(#Qty) == 0) && defaultQty)
        {
            pass.insert(#Qty, defaultQty);
        }
        if (!pass.exists(#SelectedValueUOM) || pass.lookup(#SelectedValueUOM) == '')
        {
            pass.insert(#SelectedValueUOM, WHSUOMSeqGroupTable::getDefaultPurchUOM(inventTable.ItemId));
        }

        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0)];
        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));

        if (PdsGlobal::pdsIsCWItem(inventTable.ItemId)
            && WHSInventTable::shouldCaptureAggregateWeight(inventTable.ItemId)
            && WHSInventTable::isCatchWeightTagTracked(inventTable.ItemId))
		{
            ret += [this.buildControl(#RFText, 
									  WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, 
								      "@WAX:Weight", 
									  1, 
									  pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight), 
                                      extendedTypeNum(Weight),
									  '', 
									  0)];
        }
		  
        InventHandlingUnitId inventHandlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId);
        
		if (pass.exists(#SelectedValueUOM)
			&& pass.lookup(#SelectedValueUOM) != ''
			&& pass.lookup(#SelectedValueUOM) != inventHandlingUnitId)
        {
            if (!pass.exists(#CurrentUOM) || pass.lookup(#CurrentUOM) != pass.lookup(#SelectedValueUOM))
            {
                pass.insert(#CurrentUOM, pass.lookup(#SelectedValueUOM));
            }
            else if (!pass.exists(#Initiation))
            {
                pass.remove(#CurrentUOM);
            }
            
            ret += [this.buildControl(#RFLabel, 'Invent Conversion', strFmt("1 %1 = %2 %3", 
																			pass.lookup(#SelectedValueUOM),
                                                                            EcoResReleasedProductUnitConverter::construct().convertGivenUnitSymbols(
																				1,
                                                                                pass.lookup(#SelectedValueUOM),
																				inventHandlingUnitId,	
																				NoYes::No,
																				inventTable.ItemId,
                                                                                inventDim.inventDimId,
                                                                                NoYes::Yes),
																			inventHandlingUnitId), 1, '', #WHSRFUndefinedDataType, '', 0)]; 
        }
        else
        {
            if (pass.exists(#CurrentUOM))
            {
                pass.remove(#CurrentUOM);
            }
        }

        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).ShowDisposition)
        {
            ret = this.buildDispositon(ret, pass.lookupStr(#Disposition), true, true);
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        if (showExceptionButton)
        {
            ret = this.addCancelButton(ret, 1, true);
            ret = this.addExceptionButton(ret);
            pass.insert(#NoCancelButton, '1');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTOLineNum</Name>
				<Source><![CDATA[
    private LineNum getTOLineNum(InventTransferId _transferId, ItemId _itemId)
    {
        LineNum localLineNum;

        if (pass.exists(#ItemInventDimId))
        {
            localLineNum = InventTransferLine::getLineNumberByItemOrderedForTORec(_transferId, _itemId, InventDim::find(pass.lookup(#ItemInventDimId)));
        }
        else
        {
            localLineNum = InventTransferLine::getLineNumberByItemOrderedForTORec(_transferId, _itemId);
        }

        return localLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTOReceivingAndPutawayExecuteMode</Name>
				<Source><![CDATA[
    protected WHSWorkExecuteMode getTOReceivingAndPutawayExecuteMode()
    {
        return WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>