<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAPayWhenPaidDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PSAPayWhenPaidDP</c> class provides data for the <c>PSAPayWhenPaid</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(Querystr(PSAPayWhenPaid)),
    SRSReportParameterAttribute(classstr(PSAPayWhenPaidContract))
]
class PSAPayWhenPaidDP extends SRSReportDataProviderBase
{
    PSAPayWhenPaidContract                  contract;

    PSAPayWhenPaidTmp                       payWhenPaidTmp;
    VendInvoiceJour                         vendInvoiceJour;
    VendTrans                               vendTrans;
    VendTable                               vendTable;
    VendInvoiceTrans                        vendInvoiceTrans;
    ProjTable                               projTable;
    ProjInvoiceJour                         projInvoiceJour;
    ProjTransPosting                        projTransPosting;
    ProjItemTrans                           projItemTrans;
    PurchLine                               purchLine;
    PurchTable                              purchTable;
    CustTrans                               custTrans;

    TransDate                               fromDate;
    TransDate                               toDate;
    VendAccount                             vendorId;
    ProjId                                  projectId;
    ProjInvoiceProjId                       contractId;
    PSAPWPAssessment                        assessment;

    AmountMSTDebCred                        amountPaidByCustomer;

    PurchId                                 purchIdOld;
    TransDate                               invoiceDateOld;
    VendInvoiceId                           invoiceNumberOld;
    ProjId                                  projIdOld;
    LineNum                                 lineNum_old;

    Query                                   query;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
        private void buildQuery()
    {
        QueryBuildDatasource qbdsJour,qbdsTrans;
        qbdsJour = query.dataSourceTable(tableNum(VendInvoiceJour));
        qbdsTrans = query.dataSourceTable(tableNum(VendInvoiceTrans));

        if (vendorId)
        {
            SysQuery::findOrCreateRange(qbdsJour,fieldNum(VendInvoiceJour,InvoiceAccount)).value(vendorId);
        }

        if (!fromDate)
        {
            fromDate = dateNull();
        }

        if (!toDate)
        {
            toDate = dateMax();
        }

        SysQuery::findOrCreateRange(qbdsTrans,fieldNum(VendInvoiceTrans,InvoiceDate)).value(SysQuery::range(fromDate, toDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyConversion</Name>
				<Source><![CDATA[
        private Amount currencyConversion(TransDate _invoiceDate, AmountCur _invoiceAmount, CurrencyCode _currencyCode)
    {
        CurrencyExchangeHelper helper;
        Amount amount;

        if (!_currencyCode)
        {
            amount = _invoiceAmount;
        }
        else
        {
            helper = CurrencyExchangeHelper::newExchangeDate(
                                           Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                           _invoiceDate);

            amount = helper.calculateTransactionToAccounting(_currencyCode, _invoiceAmount, true);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAPayWhenPaidTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>PSAPayWhenPaidTmp</c> Table.
    /// </summary>
    /// <returns>
    /// The data from the <c>PSAPayWhenPaidTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(PSAPayWhenPaidTmp))
    ]
    public PSAPayWhenPaidTmp getPSAPayWhenPaidTmp()
    {
        return payWhenPaidTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPSAPayWhenPaidTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the temporary table.
    /// </summary>
    public void insertPSAPayWhenPaidTmp()
    {
        payWhenPaidTmp.clear();

        if (this.validateExtraRecord(vendInvoiceJour.PurchId, vendInvoiceJour.InvoiceDate, vendInvoiceJour.InvoiceId, projTable.ProjId,vendInvoiceTrans.LineNum))
        {
            // write the relevant field data to the temporary data store.
            payWhenPaidTmp.AccountNum           =   vendInvoiceJour.InvoiceAccount;
            payWhenPaidTmp.Invoice              =   vendInvoiceJour.InvoiceId;
            payWhenPaidTmp.TransDate            =   vendInvoiceTrans.InvoiceDate;

            payWhenPaidTmp.VendName             =   vendTable.name();
            payWhenPaidTmp.ProjId               =   projTable.ProjId;

            payWhenPaidTmp.Name                 =   projTable.Name;
            payWhenPaidTmp.ProjInvoiceProjId    =   projTable.ProjInvoiceProjId;
            payWhenPaidTmp.ContractName         =   projTable.contractName();
            payWhenPaidTmp.LineNum              =   vendInvoiceTrans.LineNum;
            payWhenPaidTmp.LineAmount           =   this.currencyConversion(vendInvoiceTrans.InvoiceDate, vendInvoiceTrans.LineAmount, vendInvoiceTrans.CurrencyCode);
            payWhenPaidTmp.InvoiceAmount        =   this.currencyConversion(projInvoiceJour.InvoiceDate, projInvoiceJour.InvoiceAmount, projInvoiceJour.CurrencyId);
            payWhenPaidTmp.AmountMst            =   amountPaidByCustomer;
            payWhenPaidTmp.ReadyForPayment      =   vendInvoiceTrans.ReadyForPayment;
            payWhenPaidTmp.CurrencyId           =   Ledger::accountingCurrency(CompanyInfo::current());

            payWhenPaidTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by SQL
    /// Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    /// tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjInvoiceItem projInvoiceItem;
        QueryRun queryRun;
        contract                            =   this.parmDataContract() as PSAPayWhenPaidContract;

        fromDate                            =   contract.parmFromDate();
        toDate                              =   contract.parmToDate();
        vendorId                            =   contract.parmVendor();
        projectId                           =   contract.parmProject();
        contractId                          =   contract.parmContractId();
        assessment                          =   contract.parmAssessment();

        query                               =   this.parmQuery();
        this.buildQuery();

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            vendInvoiceJour = queryRun.get(tableNum(VendInvoiceJour));
            vendInvoiceTrans = queryRun.get(tableNum(vendInvoiceTrans));
            purchTable = queryRun.get(tableNum(purchTable));
            purchLine = queryRun.get(tableNum(purchLine));
            projTable = ProjTable::find(purchLine.ProjId);

            if (this.validateRecord(projTable.ProjId))
            {
                vendTable = vendTable::find(vendInvoiceJour.InvoiceAccount);
                projItemTrans = ProjItemTrans::findByVendInvoiceTransRecId(vendInvoiceTrans.RecId);
                projInvoiceItem =ProjInvoiceItem::findTransId(projItemTrans.ProjTransId);

                projInvoiceJour = ProjInvoiceJour::find(projInvoiceItem.ProjInvoiceId, projInvoiceItem.InvoiceDate);

                select sum(SettleAmountMST) from custTrans
                    where custTrans.Voucher == projInvoiceJour.LedgerVoucher
                    && custTrans.AccountNum == projInvoiceJour.InvoiceAccount
                    && custTrans.TransDate == projInvoiceJour.InvoiceDate;

                    amountPaidByCustomer = custTrans.SettleAmountMST;

                if (projTable.ProjId == vendInvoiceTrans.getProjId(vendInvoiceTrans))
                {
                    this.insertPSAPayWhenPaidTmp();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExtraRecord</Name>
				<Source><![CDATA[
        private boolean validateExtraRecord(PurchId _purchId, TransDate _invoiceDate, VendInvoiceId _invoiceNumber, ProjId _projId, LineNum _lineNum)
    {
        boolean ret = false;

        if (purchIdOld != _purchId || invoiceDateOld != _invoiceDate || invoiceNumberOld != _invoiceNumber || projIdOld != _projId || lineNum_old != _lineNum)
        {
            ret =  true;
        }

        purchIdOld = _purchId;
        invoiceDateOld = _invoiceDate;
        invoiceNumberOld = _invoiceNumber;
        projIdOld = _projId;
        lineNum_old = _lineNum;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecord</Name>
				<Source><![CDATA[
        private boolean validateRecord(ProjId _projId)
    {
        boolean ret = false;

        if (!_projId)
        {
            return ret;
        }

        if (!projectId && !contractId)
        {
            ret = true;
        }
        else if (projectId && !contractId && projTable.ProjId == projectId)
        {
            ret = true;
        }
        else if (!projectId && contractId && projTable.ProjInvoiceProjId == contractId)
        {
            ret = true;
        }
        else if (projectId && contractId && projTable.ProjId == projectId && projTable.ProjInvoiceProjId == contractId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
