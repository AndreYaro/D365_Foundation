<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcAdaptorVisitorRouteGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCAdaptorVisitorRouteGeneration</c> class generates the routes for a configured product
/// variant.
/// </summary>
class PcAdaptorVisitorRouteGeneration extends PCAdaptorVisitorProductionDocGeneration
{
    PCGenerateComponentInstanceInfo generateRootComponentInstanceInfo;

    PCGenerateRouteTableAndVersion generateRouteTableAndVersion;
    PCGenerateRouteOperation       generateRouteOperation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateRouteForComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the route for a component.
    /// </summary>
    /// <param name="_generateComponentInstanceInfo">
    /// An instance of the <c>PCGenerateComponentInstanceInfo</c> class.
    /// </param>
    /// <remarks>
    /// Return type has changed to void.
    /// </remarks>
    public void generateRouteForComponent(PCGenerateComponentInstanceInfo _generateComponentInstanceInfo)
    {
        InventDim   inventDim   = InventDim::find(_generateComponentInstanceInfo.parmInventDimId());
        RouteTable  routeTable;

        PCContractNotNull::assertObject(_generateComponentInstanceInfo, funcName());

        routeTable = generateRouteTableAndVersion.generate(
                    '',
                    InventDim::find(_generateComponentInstanceInfo.parmInventDimId()),
                    modelName,
                    _generateComponentInstanceInfo.parmComponentName(),
                    _generateComponentInstanceInfo.parmItemId());

        _generateComponentInstanceInfo.parmRouteId(routeTable.RouteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRouteOperationsForComponent</Name>
				<Source><![CDATA[
/// <summary>
    /// Generates route operations for a component.
    /// </summary>
    /// <param name="_adaptorComponent">
    /// A component adapter.
    /// </param>
    /// <param name="_generateComponentInstanceInfo">
    /// An instance of the <c>PCGenerateComponentInstanceInfo</c> class.
    /// </param>
    protected void generateRouteOperationsForComponent(PCAdaptorComponent  _adaptorComponent, PCGenerateComponentInstanceInfo _generateComponentInstanceInfo)
    {
        MapEnumerator           me;
        PCAdaptorRouteOperation adaptorRouteOperation;
        InventDim               inventDim = InventDim::find(_generateComponentInstanceInfo.parmInventDimId());

        PCContractNotNull::assertObject(_adaptorComponent, funcName());
        PCContractNotNull::assertObject(_generateComponentInstanceInfo, funcName());

        //generate the contained route operations
        me = _adaptorComponent.getRouteOperationEnumerator();

        generateRouteOperation.parmAdaptorComponent(_adaptorComponent);

        while ( me.moveNext() )
        {
            adaptorRouteOperation = me.currentValue();

            // if the generation condition is true
            if ( adaptorRouteOperation.parmCondition() )
            {
                // if no route version and table has been created we create it now
                if ( !_generateComponentInstanceInfo.parmRouteId() )
                {
                    this.generateRouteForComponent(_generateComponentInstanceInfo);
                }

                generateRouteOperation.generate(
                                _generateComponentInstanceInfo.parmRouteId(),
                                adaptorRouteOperation,
                                _generateComponentInstanceInfo.parmItemId(),
                                inventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneratedRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a generated route ID.
    /// </summary>
    /// <returns>
    /// The route ID.
    /// </returns>
    public RouteId getGeneratedRouteId()
    {
        return generateRootComponentInstanceInfo.parmRouteId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();

        generateRouteTableAndVersion    = PCGenerateRouteTableAndVersion::construct();
        generateRouteOperation          = PCGenerateRouteOperation::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitRootComponentEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an instance of a root-component adapter.
    /// </summary>
    /// <param name="_rootComponent">
    /// An instance of the <c>PCAdaptorRootComponent</c> class.
    /// </param>
    public void visitRootComponentEnd(PCAdaptorRootComponent _rootComponent)
    {
        generateRouteTableAndVersion.approveGeneratedRoutes(modelApprover);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitRootComponentStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an instance of a root-component adapter.
    /// </summary>
    /// <param name="_rootComponent">
    /// An instance of the <c>PCAdaptorRootComponent</c> class.
    /// </param>
    public void visitRootComponentStart(PCAdaptorRootComponent _rootComponent)
    {
        PCContractNotNull::assertObject(_rootComponent, funcName());

        generateRootComponentInstanceInfo = generateComponentInstanceInfoCollection.getComponentInfo(_rootComponent);

        ttsbegin;

        if (this.shouldGenerateRouteOperations(generateRootComponentInstanceInfo))
        {
            this.generateRouteOperationsForComponent(_rootComponent, generateRootComponentInstanceInfo);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldGenerateRouteOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the route operation should be generated.
    /// </summary>
    /// <param name = "_generateComponentInstanceInfo">The component instance information</param>
    /// <returns>true if the route operation should be generated; otherwise, false.</returns>
    protected boolean shouldGenerateRouteOperations(PCGenerateComponentInstanceInfo _generateComponentInstanceInfo)
    {
        return !_generateComponentInstanceInfo.parmIsReusingConfiguration() 
            && _generateComponentInstanceInfo.parmIsIncludedInGeneration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitSubComponentStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an instance of a sub-component adapter.
    /// </summary>
    /// <param name="_subComponent">
    /// An instance of the <c>PCAdaptorSubComponent</c> class.
    /// </param>
    public void visitSubComponentStart(PCAdaptorSubComponent _subComponent)
    {
        PCAdaptorComponent  adaptorComponent = _subComponent.getComponent();

        PCName              subComponentName = _subComponent.getName();

        PCGenerateComponentInstanceInfo currentGenerateComponentInstanceInfo;

        PCContractNotNull::assertObject(_subComponent, funcName());

        // first check if this note was skipped during BOM generation
        if ( !_subComponent.parmAcceptSubElements())
        {
            return;
        }

        setPrefix(subComponentName);

        currentGenerateComponentInstanceInfo = generateComponentInstanceInfoCollection.getComponentInfo(adaptorComponent);

        if (this.shouldGenerateRouteOperations(currentGenerateComponentInstanceInfo))
        {
            this.generateRouteOperationsForComponent(adaptorComponent, currentGenerateComponentInstanceInfo);
        }
        // if the component has been reused then no route needs to be created since that will be picked up
        // by the configuration ID stamped on the BOM.
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCAdaptorVisitorRouteGeneration construct()
    {
        return new PCAdaptorVisitorRouteGeneration();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>