<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWIPLedgerConflictGeneralLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Executes the data collection that includes both the extraction and the verification, of the general
///    ledger data. It also calculates the balance for the general ledger.
/// </summary>
class ProdWIPLedgerConflictGeneralLedger extends InventLedgerConflictGeneralLedger implements CostIAsyncRunnable
{
    #define.CurrentVersion  (1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs as an asynchronous task.
    /// </summary>
    /// <returns>The created asynchronous task.</returns>
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(ProdWIPLedgerConflictGeneralLedger),
                                                          staticMethodStr(ProdWIPLedgerConflictGeneralLedger, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        ProdWIPLedgerConflictGeneralLedger  dataCollectionTask = new ProdWIPLedgerConflictGeneralLedger();
        container                           packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the posting type and the period code for potential general ledger conflicts.
    /// </summary>
    /// <param name="_postingType">
    ///    The posting type of the ledger posting.
    /// </param>
    /// <param name="_periodType">
    ///    The period type of the ledger posting.
    /// </param>
    /// <returns>
    ///    A list of conflict messages if any conflicts were detected.
    /// </returns>
    protected List checkPostingType(
        LedgerPostingType   _postingType,
        FiscalPeriodType    _periodType
        )
    {
        List    retVal = new List(Types::Class);

        switch (_postingType)
        {
            case LedgerPostingType::TransferOpeningClosing:
                if (_periodType != FiscalPeriodType::Closing)
                {
                    retVal.addEnd(InventLedgerConflictMessage::newFromParm("@GLS3800111", 1));
                }
                break;
            case LedgerPostingType::Closing:
                if (_periodType == FiscalPeriodType::Closing || _periodType == FiscalPeriodType::Operating)
                {
                    retVal.addEnd(InventLedgerConflictMessage::newFromParm("@GLS3800105", 1));
                }
                break;
            case LedgerPostingType::LedgerJournal:
                retVal.addEnd(InventLedgerConflictMessage::newFromParm("@GLS3800110", 1));
                break;
            case LedgerPostingType::IndirectEstimatedAbsorption:
            case LedgerPostingType::IndirectEstimatedAbsorptionOffset:
            case LedgerPostingType::IndirectAbsorption:
            case LedgerPostingType::IndirectAbsorptionOffset:
            case LedgerPostingType::ProdReportFinished:
            case LedgerPostingType::ProdReportFinishedOffsetAccount:
            case LedgerPostingType::ProdIssue:
            case LedgerPostingType::ProdIssueOffsetAccount:
            case LedgerPostingType::ProdReceipt:
            case LedgerPostingType::ProdReceiptOffsetAccount:
            case LedgerPostingType::ProdPicklistOffsetAccount:
            case LedgerPostingType::ProdPicklist:
            case LedgerPostingType::ProdWIPValuation:
            case LedgerPostingType::ProdWIPIssue:
            case LedgerPostingType::ProdWrkCtrIssue:
            case LedgerPostingType::ProdWrkCtrIssueOffsetAccount:
            case LedgerPostingType::ProdLeanWIPServiceReceipt:
            case LedgerPostingType::ProdLeanWIPServiceClearing:
            case LedgerPostingType::None:
                // These are legal posting types
                break;
            default:
                retVal.addEnd(InventLedgerConflictMessage::newFromParm("@GLS3800111", 1));
                break;
        }

        // If a conflict has occured and it has a blank dimension, an extra conflict message must be added.
        if (inventLedgerConflictContract.parmIncludeBlankDimensions() && retVal.elements() > 0)
        {
            retVal.addEnd(InventLedgerConflictMessage::newFromParm("@SYS332489", 1));
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, inventLedgerConflictContract.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedInventLedgerConflictContract;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedInventLedgerConflictContract] = _packedClass;
                if (packedInventLedgerConflictContract)
                {
                    inventLedgerConflictContract = new ProdWIPLedgerConflictContract();
                    return inventLedgerConflictContract.unpack(packedInventLedgerConflictContract);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotallingIntervals</Name>
				<Source><![CDATA[
    protected void addTotallingIntervals(QueryBuildDataSource _mainAccountQueryBuildDataSource)
    {
        reconciliationMethodStrategy = CostReconciliationMethodStrategy::newFromParameters();
        reconciliationMethodStrategy.addWIPMainAccountRanges(_mainAccountQueryBuildDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdWIPLedgerConflictGeneralLedger construct()
    {
        return new ProdWIPLedgerConflictGeneralLedger();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>