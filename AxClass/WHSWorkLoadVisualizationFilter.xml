<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLoadVisualizationFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>WHSWorkLoadVisualizationFilter</c> is the base class which is invoked when user drillsdown 
/// from the outbound workload charts. This class applies the filters on the form data sources when loading 
/// the drilldown forms.
/// </summary>
internal abstract class WHSWorkLoadVisualizationFilter
{
    internal SysChartDrillThruParameters parameters;
    internal FormDataSource formDataSource;
    internal WHSOutboundWorkLoadChartFilter filter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instantiate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and instantiates the <c>WHSWorkLoadVisualizationFilter</c> object.
    /// </summary>
    /// <param name = "_formName">Form name</param>
    /// <param name = "_formDataSource">Form datasource to be apply filter</param>
    /// <param name = "_parameters">Paramter object with drill down datapoints.</param>
    /// <returns>An instance of <c>WHSWorkLoadVisualizationFilter</c> object</returns>
    [Hookable(false)]
    internal static WHSWorkLoadVisualizationFilter instantiate(
        FormName _formName,
        FormDataSource _formDataSource, 
        SysChartDrillThruParameters _parameters)
    {
        WHSOutboundWorkLoadVisualizationFactoryAttribute attr = new WHSOutboundWorkLoadVisualizationFactoryAttribute(_formName);
        WHSWorkLoadVisualizationFilter workLoadfilter = SysExtensionAppClassFactory::getClassFromSysAttribute(
                                                                classStr(WHSWorkLoadVisualizationFilter), attr) as WHSWorkLoadVisualizationFilter;

        if (!workLoadfilter)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        workLoadfilter.initFormDataSource(_formDataSource);
        workLoadfilter.initParameters(_parameters);
        workLoadfilter.initFilter();

        return workLoadfilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormDataSource</Name>
				<Source><![CDATA[
    private void initFormDataSource(FormDataSource _formDataSource)
    {
        formDataSource = _formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFilter</Name>
				<Source><![CDATA[
    private void initFilter()
    {
        filter = WHSOutboundWorkLoadChartFilter::find(parameters.warehouseWorkLoadVisualizationFilterName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters(SysChartDrillThruParameters _parameters)
    {
        parameters = _parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyGroupTableFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply group filter.
    /// </summary>
    [Hookable(false)]
    internal void applyGroupTableFilter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyValueTableFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply value filter.
    /// </summary>
    [Hookable(false)]
    internal void applyValueTableFilter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySiteFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply site filter.
    /// </summary>
    [Hookable(false)]
    internal void applySiteFilter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyLocationFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply the warehouse filter
    /// </summary>
    [Hookable(false)]
    internal void applyLocationFilter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCreatedDateTimeFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply created datetime filter
    /// </summary>
    [Hookable(false)]
    internal void applyCreatedDateTimeFilter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPickLineFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies filtering on work type - Pick
    /// </summary>
    [Hookable(false)]
    internal void applyPickLineFilter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyChartPickingTypeFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies filtering based on the <c>WHSChartPickingType</c> enum
    /// </summary>
    [Hookable(false)]
    internal void applyChartPickingTypeFilter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply filters on the source form datasource.
    /// </summary>
    [Hookable(false)]
    internal void applyFilters()
    {
        this.applyPickLineFilter();

        this.applyChartPickingTypeFilter();

        this.applyGroupTableFilter();

        this.applyValueTableFilter();

        this.applySiteFilter();

        this.applyLocationFilter();

        this.applyCreatedDateTimeFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the range value to the query
    /// </summary>
    /// <param name = "_qbds">Datasouce</param>
    /// <param name = "_tableId">Table reference</param>
    /// <param name = "_fieldId">Field reference</param>
    /// <param name = "_parameterValue">Range value</param>
    [Hookable(false)]
    internal void setRangeValue(QueryBuildDataSource _qbds, TableId _tableId, FieldId _fieldId, str _parameterValue)
    {
        QueryBuildRange range = _qbds.addRange(_fieldId);

        if (WHSOutboundWorkLoadChartHelper::isFieldEnumType(_tableId, _fieldId))
        {
            int enumValue = WHSOutboundWorkLoadChartHelper::getEnumValue(_tableId, _fieldId, _parameterValue);
            range.value(SysQuery::value(enumValue));
        }
        else
        {
            range.value(SysQuery::value(_parameterValue));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>