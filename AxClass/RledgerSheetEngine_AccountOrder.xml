<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rLedgerSheetEngine_AccountOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rLedgerSheetEngine_AccountOrder extends RLedgerSheetEngine_AccountReview implements BatchRetryable
{
    DialogField     dialogDebitTurnover;
    DialogField     dialogCreditTurnover;
    boolean         showDebitTurnover,showCreditTurnover;
    int             currentIdx;
    Amount          currentBalance,currentBalanceReport;
    Map             ledgerTransMap;
    boolean         totalShow;
    DebCredProposal sortDebCredProposal;
    QueryRun        fetchQueryRun;

    protected const int staticColumnNumber = 7;
    protected const int value5 = 5;
    protected const int value6 = 6;
    protected const int value10 = 10;
    protected const int value70 = 70;
    protected const int value80 = 80;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotalRow</Name>
				<Source><![CDATA[
    public void addTotalRow()
    {
        FormListItem formListItem;
        int          idx,i,subItem;
        Amount       amount;

        if (totalShow)
        {
            return;
        }
        subItem = 0;
        formListItem = new FormListItem("@GLS102170",value2);
        formListItem.idx(listControl.getCount() + 1);
        idx = listControl.addItem(formListItem);
        subItem++;
        formListItem = new FormListItem("");
        formListItem.subItem(subItem);
        formListItem.idx(idx);
        listControl.setItem(formListItem);
        subItem++;
        formListItem = new FormListItem("");
        formListItem.subItem(subItem);
        formListItem.idx(idx);
        listControl.setItem(formListItem);
        subItem++;
        formListItem = new FormListItem("");
        formListItem.subItem(subItem);
        formListItem.idx(idx);
        listControl.setItem(formListItem);
        subItem++;
        formListItem = new FormListItem("");
        formListItem.subItem(subItem);
        formListItem.idx(idx);
        listControl.setItem(formListItem);
        subItem++;
        amount = initialBalance > 0 ? initialBalance : 0;
        this.addAmountItemToFormListControl(amount, subItem, idx);

        subItem++;
        amount = initialBalance < 0 ?  - initialBalance : 0;
        this.addAmountItemToFormListControl(amount, subItem, idx);

        if (showDebitTurnover)
        {
            for (i = 1; i <= conLen(visibleRow); i++)
            {
                this.addAmountItemToFormListControl(ledgerTransDebit.lookup(conPeek(visibleRow, i)), subItem, idx);
            }
        }
        subItem++;
        this.addAmountItemToFormListControl(turnoverDebit, subItem, idx);

        if (showCreditTurnover)
        {
            for (i = 1; i <= conLen(visibleCol); i++)
            {
                subItem++;
                this.addAmountItemToFormListControl(ledgerTransCredit.lookup(conPeek(visibleCol, i)), subItem, idx);
            }
        }

        subItem++;
        this.addAmountItemToFormListControl(turnoverCredit, subItem, idx);

        subItem++;
        amount = currentBalance > 0 ? currentBalance : 0;
        this.addAmountItemToFormListControl(amount, subItem, idx);

        subItem++;
        amount = currentBalance < 0 ? - currentBalance : 0;
        this.addAmountItemToFormListControl(amount, subItem, idx);

        totalShow = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExcelReport</Name>
				<Source><![CDATA[
    protected OXMLExcelReport_LedgerSheet_RU createExcelReport()
    {
        OXMLExcelReport_AccountOrder_RU report = OXMLExcelReport_AccountOrder_RU::construct();

        report.setParameters(listControl, this);

        return report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contextMenu</Name>
				<Source><![CDATA[
    public void contextMenu(HWND _hwnd,int _idx,int _col)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>debCredProposal</Name>
				<Source><![CDATA[
    private DebCredProposal debCredProposal(int _col)
    {
        if (_col > staticColumnNumber + conLen(visibleRow) && _col <= conLen(visibleRow) +conLen(visibleCol) + staticColumnNumber)
        {
            return DebCredProposal::Credit;
        }

        if (_col >= staticColumnNumber && _col < conLen(visibleRow) + staticColumnNumber)
        {
            return DebCredProposal::Debit;
        }
        return DebCredProposal::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteColumn</Name>
				<Source><![CDATA[
    public void deleteColumn(int _col)
    {
        listControl.deleteColumn(_col + conLen(visibleRow) + staticColumnNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRow</Name>
				<Source><![CDATA[
    public void deleteRow(int _col)
    {
        listControl.deleteColumn(_col + staticColumnNumber - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTotalRow</Name>
				<Source><![CDATA[
    public boolean deleteTotalRow(int  _column = -1)
    {
        boolean ret = totalShow;
        if (ret)
        {
            listControl.delete(listControl.getCount() -1);
            totalShow = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();
        dialogDebitTurnover  = dialog.addFieldValue(enumStr(NoYes), showDebitTurnover,"@GLS105006","@GLS105007");
        dialogCreditTurnover = dialog.addFieldValue(enumStr(NoYes), showCreditTurnover,"@GLS105008","@GLS105009");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdateDesign</Name>
				<Source><![CDATA[
    protected void dialogUpdateDesign(Dialog _dialog)
    {
        FormDesign            formDesign;

        super(_dialog);

        formDesign = dialogFormRun.design();
        formDesign.controlName(dialogMainAccountsOnlyConst).enabled(false);
        dialogFinancialDimensionSet.allowEdit(false);
        dialogFinancialDimensionSet.visible(false);
        dialogMainAccountsOnly.value(NoYes::Yes);
        dialogMainAccountsOnly.enabled(false);
        dialogMainAccountsOnly.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandColAccount</Name>
				<Source><![CDATA[
    protected void expandColAccount(MainAccount _mainAccount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandRowAccount</Name>
				<Source><![CDATA[
    public void expandRowAccount(MainAccount _mainAccount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRows</Name>
				<Source><![CDATA[
    public void fetchNextRows()
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalAccountEntry_W generalJournalAccountEntryW;
        FormListItem  formListItem;
        int           i,idx,subItem,curNo;
        Amount        amountDebit,amountCredit;

        Amount        amount;
        str           mainAccountNumBond;
        container     mapcon;
        boolean       showTotal;
        const int bufferSize = 26;

        while (fetchQueryRun.next())
        {
            amountDebit  = 0;
            amountCredit = 0;
            subItem      = 0;
            mapCon       = conNull();
            showTotal = true;

            generalJournalAccountEntry = fetchQueryRun.get(tableNum(GeneralJournalAccountEntry));
            generalJournalAccountEntryW = fetchQueryRun.get(tableNum(GeneralJournalAccountEntry_W)) as GeneralJournalAccountEntry_W;

            mainAccountNumBond = generalJournalAccountEntryW.ledgerDimensionMainAccountCorr_RU();

            generalJournalEntry = GeneralJournalEntry::find(generalJournalAccountEntry.GeneralJournalEntry);

            formListItem = new FormListItem(strRFix(strFmt("%1",listControl.getCount() + 1),12));

            formListItem.data(generalJournalAccountEntry.RecId);

            formListItem.idx(listControl.getCount() + 1);
            idx = listControl.addItem(formListItem);
            subItem++;
            formListItem = new FormListItem(date2str(generalJournalEntry.AccountingDate, 321, 2, 2, 2, 2, 4));

            formListItem.subItem(subItem);
            formListItem.idx(idx);
            listControl.setItem(formListItem);
            subItem++;
            formListItem = new FormListItem(generalJournalEntry.DocumentNumber);

            formListItem.subItem(subItem);
            formListItem.idx(idx);
            listControl.setItem(formListItem);
            subItem++;
            formListItem = new FormListItem(date2str(generalJournalEntry.DocumentDate,321, 2, 2, 2, 2, 4));

            formListItem.subItem(subItem);
            formListItem.idx(idx);
            listControl.setItem(formListItem);
            subItem++;
            formListItem = new FormListItem(generalJournalAccountEntry.Text);

            formListItem.subItem(subItem);
            formListItem.idx(idx);
            listControl.setItem(formListItem);
            subItem++;
            amount = currentBalance > 0 ? currentBalance : 0;
            this.addAmountItemToFormListControl(amount, subItem, idx);
            subItem++;
            amount = currentBalance < 0 ? - currentBalance : 0;
            this.addAmountItemToFormListControl(amount, subItem, idx);

            if (!generalJournalAccountEntry.IsCredit)
            {
                amountDebit = this.getTransAmount(generalJournalAccountEntry);
            }

            if (showDebitTurnover)
            {
                for (i = 1; i <= conLen(visibleRow); i++)
                {
                    amount = 0;

                    if (amountDebit)
                    {
                        amount = (conPeek(visibleRow,i) == mainAccountNumBond || conPeek(visibleRow,i) == MainAccount::getTotalAccount_RU(mainAccountNumBond) ? amountDebit : 0);
                    }

                    subItem++;
                    this.addAmountItemToFormListControl(amount, subItem, idx);
                }
            }
            subItem++;
            this.addAmountItemToFormListControl(amountDebit, subItem, idx);

            if (generalJournalAccountEntry.IsCredit)
            {
                 amountCredit = this.getTransAmount(generalJournalAccountEntry);
            }

            if (showCreditTurnover)
            {
                for (i = 1; i <= conLen(visibleCol); i++)
                {
                    amount = 0;
                    if (amountCredit)
                    {
                        amount = (conPeek(visibleCol,i) == mainAccountNumBond || conPeek(visibleCol,i) == MainAccount::getTotalAccount_RU(mainAccountNumBond) ? amountCredit : 0);
                    }

                    subItem++;
                    this.addAmountItemToFormListControl(amount, subItem, idx);
                }
            }

            subItem++;
            this.addAmountItemToFormListControl(amountCredit, subItem, idx);

            mapCon = [[amountDebit ? mainAccountNumBond : "",amountDebit], [amountCredit ? mainAccountNumBond : "",amountCredit]];
            ledgerTransMap.insert(idx,mapCon);
            currentBalance += amountDebit - amountCredit;
            subItem++;
            amount = currentBalance > 0 ? currentBalance : 0;
            this.addAmountItemToFormListControl(amount, subItem, idx);

            subItem++;
            amount = currentBalance < 0 ? - currentBalance : 0;
            this.addAmountItemToFormListControl(amount, subItem, idx);

            curNo ++;
            if (curNo >= bufferSize)
            {
                showTotal = false;
                break;
            }
        }
        if (showTotal)
        {
            this.addTotalRow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchQueryRun</Name>
				<Source><![CDATA[
    public QueryRun fetchQueryRun()
    {
        return fetchQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDesignCaption</Name>
				<Source><![CDATA[
    public str formDesignCaption(int _idx = -1)
    {
        if (fromDate)
        {
            return strFmt("@GLS105045", mainAccountNum, fromDate, toDate);
        }
        else
        {
            return strFmt("@GLS105046", mainAccountNum, toDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHelpText</Name>
				<Source><![CDATA[
    public str getHelpText(int _idx, int _col)
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        showDebitTurnover  = dialogDebitTurnover.value();
        showCreditTurnover = dialogCreditTurnover.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRowMap</Name>
				<Source><![CDATA[
    public Map getRowMap(GeneralJournalAccountEntry _generalJournalAccountEntry, GeneralJournalAccountEntry_W _generalJournalAccountEntryW)
    {
        Map        map = new Map(Types::Integer, Types::String);
        Amount     amountDebit,amountCredit;
        Amount     amount;
        str        mainAccountNumBond;
        int        subItem,i;
        GeneralJournalEntry generalJournalEntry;

        mainAccountNumBond = _generalJournalAccountEntryW.ledgerDimensionMainAccountCorr_RU();
        generalJournalEntry = GeneralJournalEntry::find(_generalJournalAccountEntry.GeneralJournalEntry);

        map.insert(subItem, "");
        subItem++;
        map.insert(subItem, strFmt("@GLS106745", generalJournalEntry.AccountingDate));
        subItem++;
        map.insert(subitem, generalJournalEntry.DocumentNumber);
        subItem++;
        map.insert(subitem, strfmt("@GLS106745", generalJournalEntry.DocumentDate));
        subItem++;
        map.insert(subItem, _generalJournalAccountEntry.Text);
        subItem++;
        amount = currentBalanceReport > 0 ? currentBalanceReport : 0;
        map.insert(subItem, strRFix(strFmt("@GLS106745", amount), amountDictType.displayLength()));
        subItem++;
        amount = currentBalanceReport < 0 ? - currentBalanceReport : 0;
        map.insert(subItem, strRFix(strFmt("@GLS106745", amount), amountDictType.displayLength()));
        if (! _generalJournalAccountEntry.IsCredit)
        {
            amountDebit = this.getTransAmount(_generalJournalAccountEntry);
        }
        if (showDebitTurnover)
        {
            for (i = 1; i <= conLen(visibleRow); i++)
            {
                amount = 0;
                if (amountDebit)
                {
                    amount = (conPeek(visibleRow,i) == mainAccountNumBond || conPeek(visibleRow,i) == MainAccount::getTotalAccount_RU(mainAccountNumBond) ? amountDebit : 0);
                }
                subItem++;
                map.insert(subItem, strRFix(strFmt("@GLS106745", amount), amountDictType.displayLength()));
            }
        }
        subItem++;
        map.insert(subItem, strRFix(strFmt("@GLS106745", amountDebit), amountDictType.displayLength()));

        if (_generalJournalAccountEntry.IsCredit)
        {
            amountCredit = this.getTransAmount(_generalJournalAccountEntry);
        }
        if (showCreditTurnover)
        {
            for (i = 1; i <= conLen(visibleCol); i++)
            {
                amount = 0;
                if (amountCredit)
                {
                    amount = (conPeek(visibleCol,i) == mainAccountNumBond || conPeek(visibleCol,i) == MainAccount::getTotalAccount_RU(mainAccountNumBond) ? amountCredit : 0);
                }
                subItem++;
                map.insert(subItem, strRFix(strFmt("@GLS106745", amount), amountDictType.displayLength()));
            }
        }
        subItem++;
        map.insert(subItem, strRFix(strFmt("@GLS106745", amountCredit), amountDictType.displayLength()));
        currentBalanceReport += amountDebit - amountCredit;
        subItem++;
        amount = currentBalanceReport > 0 ? currentBalanceReport : 0;
        map.insert(subItem, strRFix(strFmt("@GLS106745", amount), amountDictType.displayLength()));
        subItem++;
        amount = currentBalanceReport < 0 ? - currentBalanceReport : 0;
        map.insert(subItem, strRFix(strFmt("@GLS106745", amount), amountDictType.displayLength()));
        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalRowMap</Name>
				<Source><![CDATA[
    public Map getTotalRowMap()
    {
        int    i,subItem;
        Amount amount;
        Map    map = new Map(Types::Integer, Types::String);

        map.insert(subItem,"");
        subItem++;
        map.insert(subItem,"@GLS102170");
        subItem++;
        map.insert(subItem,"");
        subItem++;
        map.insert(subItem,"");
        subItem++;
        map.insert(subItem,"");
        subItem++;
        amount = initialBalance > 0 ? initialBalance : 0;
        map.insert(subItem,strRFix(strFmt("@GLS106745",amount),amountDictType.displayLength()));
        subItem++;
        amount = initialBalance < 0 ?  - initialBalance : 0;
        map.insert(subItem,strRFix(strFmt("@GLS106745",amount),amountDictType.displayLength()));
        if (showDebitTurnover)
        {
            for (i = 1; i <= conLen(visibleRow); i++)
            {
                subItem++;
                map.insert(subItem,strRFix(strFmt("@GLS106745",ledgerTransDebit.lookup(conPeek(visibleRow,i))),amountDictType.displayLength()));
            }
        }
        subItem++;
        map.insert(subItem,strRFix(strFmt("@GLS106745",turnoverDebit),amountDictType.displayLength()));
        if (showCreditTurnover)
        {
            for (i = 1; i <= conLen(visibleCol); i++)
            {
                subItem++;
                map.insert(subItem,strRFix(strFmt("@GLS106745",ledgerTransCredit.lookup(conPeek(visibleCol,i))),amountDictType.displayLength()));
            }
        }
        subItem++;
        map.insert(subItem,strRFix(strFmt("@GLS106745",turnoverCredit),amountDictType.displayLength()));
        subItem++;
        amount = currentBalanceReport > 0 ? currentBalanceReport : 0;
        map.insert(subItem,strRFix(strFmt("@GLS106745",amount),amountDictType.displayLength()));
        subItem++;
        amount = currentBalance < 0 ? - currentBalance : 0;
        map.insert(subItem,strRFix(strFmt("@GLS106745",amount),amountDictType.displayLength()));
        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccounts</Name>
				<Source><![CDATA[
    public void initAccounts()
    {
        super();
        ledgerTransMap = new Map(Types::Integer, Types::Container);
        totalShow = false;
        sortDebCredProposal = DebCredProposal::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListView</Name>
				<Source><![CDATA[
    public void initListView()
    {
        FormListColumn  listColumn;
        SetEnumerator     it;

        visibleRow = conNull();
        visibleCol = conNull();
        listColumn = new FormListColumn("@GLS103859",0,Value70);
        listControl.addColumn(0, listColumn);

        listColumn = new FormListColumn("@GLS100986", 1,Value80);
        listControl.addColumn(1, listColumn);

        listColumn = new FormListColumn("@GLS102817", Value2,100);
        listControl.addColumn(Value2, listColumn);

        listColumn = new FormListColumn("@SYS2587", Value3,Value80);
        listControl.addColumn(Value3, listColumn);

        listColumn = new FormListColumn("@SYS7576", Value4, 150);
        listControl.addColumn(Value4, listColumn);

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS105014");
        listControl.addColumn(Value5, listColumn);

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS105015");
        listControl.addColumn(Value6, listColumn);

        if (showDebitTurnover)
        {
            accountsSet = ledgerTransDebit.keySet();
            it = accountsSet.getEnumerator();
            while (it.moveNext())
            {
                listColumn = new FormListColumn();
                listColumn.format(FormListFormat::Right);
                listColumn.text(it.current());
                visibleRow += it.current();

                if (showSumAccount)
                {
                    listColumn.image(MainAccount::findByMainAccountId(it.current()).Type == DimensionLedgerAccountType::Total);
                }

                listControl.addColumn(listControl.getColumnCount()+1,listColumn);
            }
        }

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS101655");
        listControl.addColumn(listControl.getColumnCount()+1,listColumn);

        if (showCreditTurnover)
        {
            accountsSet = ledgerTransCredit.keySet();
            it = accountsSet.getEnumerator();
            while (it.moveNext())
            {
                listColumn = new FormListColumn();
                listColumn.format(FormListFormat::Right);
                listColumn.text(it.current());
                visibleCol += it.current();

                if (showSumAccount)
                {
                    listColumn.image(MainAccount::findByMainAccountId(it.current()).Type == DimensionLedgerAccountType::Total);
                }
                listControl.addColumn(listControl.getColumnCount()+1,listColumn);
            }
        }
        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS101654");
        listControl.addColumn(listControl.getColumnCount()+1,listColumn);

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS105016");
        listControl.addColumn(listControl.getColumnCount()+1,listColumn);

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS105017");
        listControl.addColumn(listControl.getColumnCount()+1,listColumn);
        currentBalance = initialBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRunQuery</Name>
				<Source><![CDATA[
    public Query initRunQuery()
    {
        Query   query;
        query   fetchQuery;

        query = super();

        queryRun.query().dataSourceTable(tableNum(GeneralJournalAccountEntry), 1).clearRange(fieldNum(GeneralJournalAccountEntry, IsCredit));
        queryRun.query().dataSourceTable(tableNum(GeneralJournalAccountEntry), value2).clearRange(fieldNum(GeneralJournalAccountEntry, IsCredit));
        queryRun.query().dataSourceTable(tableNum(GeneralJournalAccountEntry), 1).sortClear();

        queryRun.query().dataSourceTable(tableNum(GeneralJournalEntry), 1).addSortField(fieldNum(GeneralJournalEntry, AccountingDate));

        fetchQuery = queryRun.query();

        this.setDimensionRange(fetchQuery);

        fetchQueryRun = new QueryRun(fetchQuery);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listControlRefresh</Name>
				<Source><![CDATA[
    public void listControlRefresh()
    {
        int             totalItems,
                        perPageitem,
                        topItem;

        totalItems  = listControl.getCount();
        perPageitem = listControl.getCountPerPage();
        topItem     = listControl.getTopIndex();

        if (totalItems - topItem - 1 < perPageItem)
        {
            this.fetchNextRows();
        }
        /* TODO: (Code Upgrade) Convert setTimeout to a timer control on the form */
        // listControl.formRun().setTimeOut(identifierStr(listControlRefresh),value10,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalDocumentsByRow</Name>
				<Source><![CDATA[
    public void originalDocumentsByRow(int _row)
    {
        Args                args = new Args();
        GeneralJournalAccountEntry generalJournalAccountEntry;
        FormRun             formRun;
        FormDataSource      formDataSource;
        FormComboBoxControl showTransMode;

        if (! listControl.getItem(_row) || _row == listControl.getCount() - 1 )
        {
            return;
        }
        args = new Args();
        args.caller(this);
        select firstonly generalJournalAccountEntry where generalJournalAccountEntry.RecId == listControl.getItem(_row).data();

        MenuFunction mf = new MenuFunction(menuItemDisplayStr(LedgerTransVoucher), MenuItemType::Display);
        formRun = mf.create(args);

        formDataSource = formRun.dataSource(tableId2name(tableNum(GeneralJournalAccountEntry)));
        formDataSource.query().dataSourceTable(tableNum(GeneralJournalAccountEntry)).addRange(fieldNum(GeneralJournalAccountEntry, RecId)).value(queryValue(generalJournalAccountEntry.RecId));

        showTransMode = formRun.design().controlName(controlName);
        showTransMode.selection(LedgerBondShowTransMode_RU::ShowAll);
        showTransMode.enabled(false);
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, showDebitTurnover, showCreditTurnover, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    public void printReport()
    {
        currentBalanceReport = initialBalance;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreSortOrder</Name>
				<Source><![CDATA[
    protected void restoreSortOrder(int _startColumn = 0, int _endColumn = listControl.getColumnCount())
    {
        switch (sortDebCredProposal)
        {
            case DebCredProposal::Debit:
                super (staticColumnNumber,conLen(visibleRow) + staticColumnNumber + 1);
                break;
            case DebCredProposal::Credit:
                super (staticColumnNumber + conLen(visibleRow) + 1 ,conLen(visibleRow) +conLen(visibleCol) + staticColumnNumber + 1);
                break;
            default:
               super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortedColumn</Name>
				<Source><![CDATA[
    public void setSortedColumn(int _sortedColumn)
    {
        super(_sortedColumn);
        sortDebCredProposal = this.debCredProposal(_sortedColumn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer   version = conPeek(packedClass,1);
        container con;

        switch (version)
        {
            case currentVersion:
                [version, showDebitTurnover, showCreditTurnover, con] = packedClass;
                super(con);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static str description()
    {
        return "@GLS105003";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>