<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqTotals_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReqTotals_Trans extends PurchReqTotals
{
    PurchReqTable   purchReqTable;
    PurchReqLine    purchReqLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscCode</Name>
				<Source><![CDATA[
    CashDiscCode cashDiscCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    protected TradeCalcTax constructCalcTax()
    {
        PurchCalcTax_PurchReq   purchCalcTax = PurchCalcTax::construct(purchReqTable);

        purchCalcTax.setCurrencyCode(this.currencyCode());
        purchCalcTax.setSpecQty(specQty);

        return purchCalcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    protected DiscPct discPercent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    protected void initRecordSortedListLine()
    {
        recordSortedListLine = new RecordSortedList(tablenum(PurchReqLine));

        recordSortedListLine.sortOrder(fieldnum(PurchReqLine, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    VendAccount invoiceAccount()
    {
        return purchReqLine.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return purchReqLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected LineAmount lineAmount(PurchQty purchQty, TransDate transDate)
    {
        return CurrencyExchangeHelper::curAmount2CurAmount(purchReqLine.calcLineAmountExclTax(purchQty, transDate), purchReqLine.CurrencyCode, this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    protected DiscAmount lineDiscAmount(UnitQty _unitQty, TransDate _transDate)
    {
        DiscAmount  discAmount = 0;

        if (purchReqLine.PurchPrice)
        {
            discAmount += CurrencyExchangeHelper::curAmount2CurAmount(purchReqLine.calcLineDiscExclTax(_unitQty, _transDate), purchReqLine.CurrencyCode, this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false);
        }

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupCustVend</Name>
				<Source><![CDATA[
    protected MarkupAmount markupCustVend(Markup _markup)
    {
        return CurrencyExchangeHelper::curAmount2CurAmount(-_markup.markupCustVend(), purchReqLine.CurrencyCode, this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupLine</Name>
				<Source><![CDATA[
    protected Common markupLine()
    {
        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _orderTable, PurchUpdate _specQty)
    {
        super(_orderTable, _specQty);

        if (_orderTable.TableId == tablenum(PurchReqTable))
        {
            purchReqTable = _orderTable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    protected Common orderLine_orderTable()
    {
        return purchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    protected UnitQty qtyUnit()
    {
        return purchReqLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected QueryRun queryBuild()
    {
        //We cannot use query PurchReqLine since 'allowCrossCompany' is set to yes for this query and
        //this query is being used in other places where allowCrossCompany is required.

        Query                   query       = new Query();
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tablenum(PurchReqLine));

        qbds.addRange(fieldnum(PurchReqLine, PurchReqTable)).value(queryValue(purchReqTable.RecId));

        qbds.addRange(fieldnum(PurchReqLine, BuyingLegalEntity)).value(queryValue(CompanyInfo::current()));

        qbds.addRange(fieldnum(PurchReqLine, RequisitionStatus)).value(SysQuery::valueNot(PurchReqRequisitionStatus::Cancelled));

        queryRun   = new QueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildOrderTable</Name>
				<Source><![CDATA[
    protected QueryRun queryBuildOrderTable()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tablenum(PurchReqTable));
        qbds.firstFast(true);
        qbds.update(true);
        qbds.addRange(fieldnum(PurchReqTable, PurchReqId)).value(purchReqTable.PurchReqId);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    protected Common queryGet(QueryRun _queryRun)
    {
        if (_queryRun.changed(tablenum(PurchReqLine)))
        {
            purchReqLine = _queryRun.get(tablenum(PurchReqLine));
        }
        else
        {
            purchReqLine = null;
        }

        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetOrderTable</Name>
				<Source><![CDATA[
    protected Common queryGetOrderTable(QueryRun _queryRun)
    {
        PurchReqTable   queryPurchReqTable;

        if (_queryRun.changed(tablenum(PurchReqTable)))
            queryPurchReqTable = _queryRun.get(tablenum(PurchReqTable));
        return queryPurchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqLine</Name>
				<Source><![CDATA[
    void setPurchReqLine(PurchReqLine _purchReqLine = purchReqLine)
    {
        purchReqLine = _purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchReqTotals_Trans construct(PurchReqTable     _purchReqTable,
                                          PurchUpdate   _specQty)
    {
        return new PurchReqTotals_Trans(_purchReqTable, _specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        RecId purchReqSourceDocumentLine;

        if (purchReqLine.ProjId && ProjPurchReqLineResetAccountingStatusFlight::instance().isEnabled())
        {
            purchReqSourceDocumentLine = purchReqLine.SourceDocumentLine;
        }

        super();

        if (purchReqSourceDocumentLine)
        {
            this.validateAccountingDistributionResetRequiredForProj(purchReqSourceDocumentLine);
        }
      
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDistributionResetRequiredForProj</Name>
				<Source><![CDATA[
    public void validateAccountingDistributionResetRequiredForProj(RecId _purchReqSourceDocumentLine)
    {
        
        SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(_purchReqSourceDocumentLine);
        SourceDocumentLine childSourceDocumentLine;

        select firstonly childSourceDocumentLine
            where childSourceDocumentLine.ParentSourceDocumentLine == sourceDocumentLine.RecId
            && (childSourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Draft
            || childSourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed);

        if (childSourceDocumentLine.RecId)
        {
            PurchReqTotals_Trans::resetAccountingDistribution(sourceDocumentLine);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAccountingDistribution</Name>
				<Source><![CDATA[
    public static void resetAccountingDistribution(SourceDocumentLine _sourceDocumentLine)
    {
        if (_sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed)
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(
                  _sourceDocumentLine.getSourceDocumentLineImplementation(),
                  false,
                  SourceDocumentLineAccountingStatus::Draft);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>