<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvGlobalCategoryEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
static class TrvGlobalCategoryEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CheckBox_canBeUsedInExpense_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Toggles enabled status of the expense type control and the visibility of the subcategory tab.
    /// Also sets mandatory status on the ExpenseType field.
    /// </summary>
    /// <param name="sender">The canBeUsedInExpense control.</param>
    /// <param name="e">Th event args.</param>
    [FormControlEventHandler(formControlStr(GlobalCategory, CheckBox_canBeUsedInExpense), FormControlEventType::Modified)]
    public static void CheckBox_canBeUsedInExpense_OnModified(FormControl sender, FormControlEventArgs e)
    {
        SharedCategory sharedCategory = sender.dataSourceObject().cursor();
        TrvGlobalCategoryEventHandler::showTabs(sender.formRun(), sharedCategory);
        boolean canBeUsedInExpense = sharedCategory.canBeUsedInExpense(false, false);

        //
        // After the SharedCategoryRole is created behind the scenes, the datasource needs to be updated
        // and forceWrite set to guarentee the mandatory logic triggers, since the user may not dirty the record
        for (int i = 1; i < sender.formRun().dataSourceCount(); i++)
        {
            FormDataSource ds = sender.formRun().dataSource(i);
            if (ds.table() == tableNum(SharedCategoryRoles))
            {
                ds.research();
                ds.forceWrite(canBeUsedInExpense);
                ds.object(fieldNum(SharedCategoryRoles, ExpenseType)).mandatory(canBeUsedInExpense);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SharedCategory_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Toggles enabled status of the expense type control and the visibility of the subcategory tab.
    /// </summary>
    /// <param name="sender">The SharedCategory form data source.</param>
    /// <param name="e">Th event args.</param>
    [FormDataSourceEventHandler(formDataSourceStr(GlobalCategory, SharedCategory), FormDataSourceEventType::Activated)]
    public static void SharedCategory_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        TrvGlobalCategoryEventHandler::showTabs(sender.formRun(), sender.cursor());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ComboBox_ExpType_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Toggles visibility of the subcategory tab.
    /// </summary>
    /// <param name="sender">The expense type control.</param>
    /// <param name="e">Th event args.</param>
    [FormControlEventHandler(formControlStr(GlobalCategory, ComboBox_ExpType), FormControlEventType::Modified)]
    public static void ComboBox_ExpType_OnModified(FormControl sender, FormControlEventArgs e)
    {
        SharedCategoryRoles sharedCategoryRoles = sender.dataSourceObject().cursor();
        SharedCategory sharedCategory = SharedCategory::findRecId(sharedCategoryRoles.GlobalCategory);
        TrvGlobalCategoryEventHandler::showSubCategory(sender.formRun(), sharedCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvSharedSubCategory_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Toggles the ability to delete and edit system defined subcategories.
    /// </summary>
    /// <param name="sender">The TrvSharedSubCategory form data source.</param>
    /// <param name="e">The event args.</param>
    [FormDataSourceEventHandler(formDataSourceStr(GlobalCategory, TrvSharedSubCategory), FormDataSourceEventType::Activated)]
    public static void TrvSharedSubCategory_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        TrvSharedSubCategory trvSharedSubCategory = sender.cursor();

        sender.allowDelete(!trvSharedSubCategory.SystemCreated);
        sender.formRun().control(sender.formRun().controlId(formControlStr(GlobalCategory, trvGlobalSubCategory_ExcludeFromRecovery))).allowEdit(!trvSharedSubCategory.SystemCreated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SharedCategoryRoles_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range to ensure that the role for expense is loaded.
    /// </summary>
    /// <param name="sender">The SharedCategoryRoles form data source.</param>
    /// <param name="e">The event args.</param>
    [FormDataSourceEventHandler(formDataSourceStr(GlobalCategory, SharedCategoryRoles), FormDataSourceEventType::Initialized)]
    public static void SharedCategoryRoles_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        QueryBuildDataSource ds = sender.queryBuildDataSource().addDataSource(tableNum(SharedCategoryRoleType));
        ds.addLink(fieldNum(SharedCategoryRoles,GlobalCategoryRoleType), fieldNum(SharedCategoryRoleType, RecId));
        ds.addRange(fieldNum(SharedCategoryRoleType, CategoryRoleType)).value(queryValue(CategoryRoleType::Expense));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTabs</Name>
				<Source><![CDATA[
    private static void showTabs(FormRun globalCategoryForm, SharedCategory sharedCategory)
    {
        boolean isExp = sharedCategory.canBeUsedInExpense(false, false) == true;
        boolean allowCreateSubCategory = false;

        if (isExp)
        {
            allowCreateSubCategory = TrvExpenseType::supportsItemization(sharedCategory.expType(false,TrvExpType::Empty));
        }

        globalCategoryForm.control(globalCategoryForm.controlId(formControlStr(GlobalCategory, ComboBox_ExpType))).enabled(isExp);

        globalCategoryForm.control(globalCategoryForm.controlId(formControlStr(GlobalCategory, trvSubCategory))).visible(allowCreateSubCategory);
        FormDataSource trvSharedSubCategory_DS = globalCategoryForm.dataSource(formDataSourceStr(GlobalCategory, TrvSharedSubCategory)) as FormDataSource;
        trvSharedSubCategory_DS.allowCreate(allowCreateSubCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSubCategory</Name>
				<Source><![CDATA[
    private static void showSubCategory(FormRun globalCategoryForm, SharedCategory sharedCategory)
    {
        boolean allowCreateSubCategory = TrvExpenseType::supportsItemization(sharedCategory.expType(false, TrvExpType::Empty));

        globalCategoryForm.control(globalCategoryForm.controlId(formControlStr(GlobalCategory, trvSubCategory))).visible(allowCreateSubCategory);

        FormDataSource trvSharedSubCategory_DS = globalCategoryForm.dataSource(formDataSourceStr(GlobalCategory, TrvSharedSubCategory)) as FormDataSource;
        trvSharedSubCategory_DS.allowCreate(allowCreateSubCategory);

        trvSharedSubCategory_DS.executeQuery();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>