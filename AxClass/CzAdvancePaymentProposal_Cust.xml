<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzAdvancePaymentProposal_Cust</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CzAdvancePaymentProposal_Cust extends CzAdvancePaymentProposal
{
    boolean hidePrepaymentHandlingInfo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountType</Name>
				<Source><![CDATA[
    protected LedgerJournalACType accountType()
    {
        return LedgerJournalACType::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceLine</Name>
				<Source><![CDATA[
    protected void initFromInvoiceLine(CzAdvanceInvoiceTable _invoiceTable, CzAdvanceInvoiceLine _invoiceLine = null)
    {
        CzCustAdvanceInvoiceLine invoiceLine;
        CzCustAdvanceInvoiceTable invoiceTable = _invoiceTable;
        boolean copyTaxGroups = copyVAToptions;

        ledgerJournalTrans.AccountType = LedgerJournalACType::Cust;
        ledgerJournalTrans.AmountCurDebit = 0;
        ledgerJournalTrans.AmountCurCredit = invoiceTable.InvoiceAmount;

        if (copyTaxGroups && ! ledgerJournalEngine.ledgerJournalTable().ledgerJournalTable_W().Prepayment_W)
        {
            if (! hideJournalNotPrepaymentInfo)
            {
                info("@GLS108303");
                hideJournalNotPrepaymentInfo = true;
            }
            copyTaxGroups = false;
        }

        if (copyTaxGroups && ! invoiceTable.PostVAT)
        {
            info(strfmt("@GLS111734",
                        invoiceTable.InvoiceId,
                        invoiceTable.InvoiceDate,
                        fieldpname(CzCustAdvanceInvoiceTable, PostVAT),
                        NoYes::No));
            copyTaxGroups = false;
        }

        if (copyTaxGroups && invoiceTable.PostVATDate && invoiceTable.PostVATDate < ledgerJournalTrans.TransDate)
        {
            info(strfmt("@GLS111734",
                        invoiceTable.InvoiceId,
                        invoiceTable.InvoiceDate,
                        fieldpname(CzCustAdvanceInvoiceTable, PostVATDate),
                        invoiceTable.PostVATDate));
            copyTaxGroups = false;
        }

        if (copyTaxGroups)
        {
            changecompany(invoiceTable.company())
            {
                invoiceLine = null;
                select count(RecId) from invoiceLine
                    where invoiceLine.ParentRecId == invoiceTable.RecId;
            }

            if (invoiceLine.RecId > 1)
            {
                if (! hidePrepaymentHandlingInfo)
                {
                    info(strfmt("@GLS111753", "@GLS111481"));
                    hidePrepaymentHandlingInfo = true;
                }
                warning(strfmt("@GLS111752", invoiceTable.InvoiceId, invoiceTable.InvoiceDate));
                copyTaxGroups = false;
            }
        }

        if (copyTaxGroups)
        {
            changecompany(invoiceTable.company())
            {
                invoiceLine = null;
                select firstonly invoiceLine
                    where invoiceLine.ParentRecId == invoiceTable.RecId;
            }

            ledgerJournalTrans.TaxGroup = invoiceLine.TaxGroup;
            ledgerJournalTrans.TaxItemGroup = invoiceLine.TaxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        QueryBuildDataSource qbds;

        super();

        qbds = query.addDataSource(tablenum(CzCustAdvanceInvoiceTable));

        findOrCreateRange_W(qbds,
                            fieldnum(CzCustAdvanceInvoiceTable, Posted),
                            queryValue(NoYes::Yes)).status(RangeStatus::Locked);

        findOrCreateRange_W(qbds,
                            fieldnum(CzCustAdvanceInvoiceTable, Status),
                            SysQuery::valueNot(CzAdvanceInvoiceStatus::Closed));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkExists</Name>
				<Source><![CDATA[
    protected boolean linkExists(CzAdvanceInvoiceTable _invoiceTable)
    {
        return CzCustAdvanceInvoiceLink::existsAdvance(_invoiceTable.company(), _invoiceTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS111723";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CzAdvancePaymentProposal::createProposal(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>