<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQTableMap2LineParametersForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchRFQTableMap2LineParametersForm</c> class shows the parameters form to update the
///    request for quote lines.
/// </summary>
class PurchRFQTableMap2LineParametersForm extends RunBase
{
    List        purchRFQTableMap2LineParameterFields;
    Map         fieldList;
    container   packedFieldList;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        packedFieldList
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an object that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// An object that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        PurchRFQTableMap2LineField      purchRFQTableMap2LineField;
        ListEnumerator                  purchRFQTableMap2LineParameterFieldsEnumerator;
        DialogGroup                     dialogGroup;
        DialogField                     dialogField;
        DialogRunbase                   dialog = super();

        purchRFQTableMap2LineParameterFieldsEnumerator = purchRFQTableMap2LineParameterFields.getEnumerator();
        fieldList                                      = new Map(Types::Integer, Types::Class);

        dialogGroup = dialog.addGroup('');

        dialogGroup.columns(this.dialogColumns());
        dialogGroup.frameType(FormFrameType::None);

        while (purchRFQTableMap2LineParameterFieldsEnumerator.moveNext())
        {
            purchRFQTableMap2LineField = purchRFQTableMap2LineParameterFieldsEnumerator.current();

            dialog.addGroup(purchRFQTableMap2LineField.fieldGroupLabel(), dialogGroup);
            dialogField = dialog.addField(enumStr(TradeTable2LineUpdate),
                                          purchRFQTableMap2LineField.parameterLabel(),
                                          purchRFQTableMap2LineField.parameterHelp());
            dialogField.value(purchRFQTableMap2LineField.table2LineUpdate());

            fieldList.insert(purchRFQTableMap2LineField.fieldId(), dialogField);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogColumns</Name>
				<Source><![CDATA[
    int dialogColumns()
    {
        return real2int(trunc(power(purchRFQTableMap2LineParameterFields.elements(), 0.5)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ListEnumerator              purchRFQTableMap2LineParameterFieldsEnumerator;
        PurchRFQTableMap2LineField  purchRFQTableMap2LineField;
        DialogField                 dialogField;
        purchRFQTableMap2LineParameterFieldsEnumerator = purchRFQTableMap2LineParameterFields.getEnumerator();

        while (purchRFQTableMap2LineParameterFieldsEnumerator.moveNext())
        {
            purchRFQTableMap2LineField = purchRFQTableMap2LineParameterFieldsEnumerator.current();

            dialogField = fieldList.lookup(purchRFQTableMap2LineField.fieldId());

            purchRFQTableMap2LineField.table2LineUpdate(dialogField.value());
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchRFQTableMap2LineParamFields</Name>
				<Source><![CDATA[
    protected void initPurchRFQTableMap2LineParamFields()
    {
        PurchRFQTableMap2LineField  purchRFQTableMap2LineField;
        container                   header2LineFieldIds;
        fieldId                     fieldId;
        int                         pos = 1;
        purchRFQTableMap2LineParameterFields  = new List(Types::Class);

        header2LineFieldIds = PurchRFQTableMap2LineParameters::header2LineFieldIdList();

        while (pos <= conlen(header2LineFieldIds))
        {
            fieldId = conpeek(header2LineFieldIds, pos);

            if (PurchRFQTableMap2LineParameters::fieldEnabled(fieldId))
            {
                purchRFQTableMap2LineField = PurchRFQTableMap2LineField::construct(fieldId);
                purchRFQTableMap2LineParameterFields.addEnd(purchRFQTableMap2LineField);
            }

            pos++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        packedFieldList = purchRFQTableMap2LineParameterFields.pack();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        ListEnumerator              purchRFQTableMap2LineParameterFieldsEnumerator;
        PurchRFQTableMap2LineField purchRFQTableMap2LineField;
        purchRFQTableMap2LineParameterFieldsEnumerator = purchRFQTableMap2LineParameterFields.getEnumerator();

        ttsbegin;

        while (purchRFQTableMap2LineParameterFieldsEnumerator.moveNext())
        {
            purchRFQTableMap2LineField = purchRFQTableMap2LineParameterFieldsEnumerator.current();
            purchRFQTableMap2LineField.updatePurchRFQTableMap2LineParameters();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Version         version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                purchRFQTableMap2LineParameterFields = List::create(packedFieldList);
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQTableMap2LineParametersForm construct()
    {
        PurchRFQTableMap2LineParametersForm   purchRFQTableMap2LineParametersForm;

        purchRFQTableMap2LineParametersForm = new PurchRFQTableMap2LineParametersForm();
        purchRFQTableMap2LineParametersForm.initPurchRFQTableMap2LineParamFields();

        return purchRFQTableMap2LineParametersForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS103602";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        PurchRFQTableMap2LineParametersForm   purchRFQTableMap2LineParametersForm;
        purchRFQTableMap2LineParametersForm = PurchRFQTableMap2LineParametersForm::construct();

        if (purchRFQTableMap2LineParametersForm.prompt())
            purchRFQTableMap2LineParametersForm.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>