<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsWritingOffFactorController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller <c>RDeferralsWritingOffFactorController</c> class for <c>RDeferralsWritingOffFactor</c> report.
/// </summary>
class rDeferralsWritingOffFactorController  extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report controller query.
    /// </summary>
    /// <returns>
    /// The report controller query.
    /// </returns>
    public Query getQuery()
    {
        return this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides ability to modify the report contract before dialog is shown to the user for the <c>RDeferralsWritingOffFactor</c> report.
    /// </summary>
    public void prePromptModifyContract()
    {
        RDeferralsWritingOffFactor          factor;
        Query                               query;
        QueryBuildDataSource                qbds;
        QueryBuildRange                     qbr;

        query   = this.getQuery();
        qbds    = query.dataSourceTable(tableNum(RDeferralsWritingOffFactor));

        if (args.record() &&
            args.record().TableId == tableNum(RDeferralsWritingOffFactor))
        {
            factor  = args.record();
            qbr     = SysQuery::findOrCreateRange(qbds, fieldNum(RDeferralsWritingOffFactor, RefRecId));
            qbr.value(queryValue(factor.RefRecId));
            qbr.status(RangeStatus::Hidden);
        }
        else
        {
            qbds.clearRange(fieldNum(RDeferralsWritingOffFactor, RefRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an entry point for the <c>RDeferralsWritingOffFactorController</c> class when it is called from a menu item.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>RDeferralsWritingOffFactorController</c> class.
    /// </param>
    public static void main(Args _args)
    {
        RDeferralsWritingOffFactorController    controller;

        controller = new RDeferralsWritingOffFactorController();
        controller.parmReportName(ssrsReportStr(RDeferralsWritingOffFactor, Report));
        controller.parmArgs(_args);
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00094, funcName());
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>