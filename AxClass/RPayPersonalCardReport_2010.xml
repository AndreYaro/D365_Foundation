<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPersonalCardReport_2010</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayPersonalCardReport_2010 extends RunBaseBatch implements BatchRetryable
{
    DialogField             payPeriodField,
                            correctingField;

    ReportPeriod_RU         payPeriod;
    NoYes                   correcting;

    ReportPeriod_RU         reportStartPeriod,
                            reportEndPeriod;

    QueryRun                queryRun;

    RHRMEmplTable           rHRMEmplTable;

    ComExcelDocument_RU     excelDocument;

    CompanyInfo             companyInfo;

    container               disabilityPeriodsCon;
    container               fundPercentsCon;
    container               fundPercentsMthCon;
    Map                     reportPagesMap;         // [номер справки в disabilityPeriodsCon -> номера месяцев в мапе процентов]

    str                     reportMonthColumns[12];

    Set                     selectedMainEmplIdSet;
    Set                     printedMainEmplIdSet;

    RPayCounterUnit         fundIPF,
                            fundSPF,
                            fundVPF,
                            fundFFOMI,
                            fundSIF,
                            basePaymSIF,
                            fundADD1,
                            fundADD2;
    RPayCounterUnit         baseFundPaym_1_2_7_212;
    str                     deductionsNonTaxPaym_7_8_212;
    RPayCounterUnit         baseNonTaxPaym_1_2_9_212;
    str                     deductionsNonTaxPaym_1_2_9_212;
    RPayCounterUnit         baseNonTaxPaym_1_3_9_212;
    RPayCounterUnit         baseNonTaxPaym_2_3_9_212;
    RPayFundDeductionCode   deductionExceedLimit_4_8_212;
    RPayRateCode            disabilityRateCode;

    RpayParameters          payParameters;
    RpayTaxParameters       payTaxParameters;

    FilePath                templateFile;


    #define.CurrentVersion(1)

    #localmacro.CurrentList
        payPeriod,
        correcting
    #endmacro

    #localmacro.CorrectedPeriodValue
        '('    + fieldstr(RPayFundEmplDeduction, CorrectedPeriod) +
        ' >= ' + date2strXpp(reportStartPeriod) + ') && (' + fieldstr(RPayFundEmplDeduction, CorrectedPeriod) +
        ' <= ' + date2strXpp(reportEndPeriod)   + ') && (' + fieldstr(RPayFundEmplDeduction, CorrectedPeriod) +
        ' == \%1)'
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    private void checkAndPrepareParameters()
    {
        void checkParameter(RPayReportParameterCode   _parameterCode,
                            boolean                   _isFund)
        {
            RPayReportTuningTable   reportTuningTable   = RPayReportTuningTable::find(RPayReportName::RPayPersonalCardReport_2010, _parameterCode);
            boolean                 ret                 = true;
            FreeTxt                 messageTxt          = (_isFund ? "@RUP906" : "@RUP3015");

            if (! reportTuningTable.Parameter)
            {
                info(strFmt("@SYS76498", messageTxt, reportTuningTable.parmName()));
            }
        }

        void checkFundPercentRate(RPayCounterUnit _fundCode)
        {
            RPayCounterTable fundLocal;

            if (_fundCode)
            {
                fundLocal = RPayCounterTable::find(_fundCode);

                if (! fundLocal.PayRatePercent)
                {
                    warning(strFmt("@RUP3016",
                                   _fundCode, fieldpname(RPayCounterTable, PayRatePercent)));
                }
            }
        }

        setprefix("@RUP3006");

        payParameters       = RPayParameters::find();
        payTaxParameters    = RPayTaxParameters::find();
        companyInfo         = CompanyInfo::find();

        checkParameter(1, true);
        checkParameter(2, true);
        checkParameter(3, true);
        checkParameter(4, false);
        checkParameter(5, true);
        checkParameter(7, true);
        checkParameter(8, true);

        if (! payTaxParameters.PensionFundinvalidDeduction)
        {
            info(strFmt("@SYS76498", "@RUP854", "@RUP1178"));
        }

        fundIPF                         = payTaxParameters.PensionFundInsurance;
        fundSPF                         = payTaxParameters.PensionFundStorage;
        fundVPF                         = payTaxParameters.PensionFundAdd;
        fundFFOMI                       = RPayReportTuningTable::find(RPayReportName::RPayPersonalCardReport_2010, 1).Parameter;
        fundSIF                         = payTaxParameters.CounterUnit2011;
        basePaymSIF                     = RPayReportTuningTable::find(RPayReportName::RPayPersonalCardReport_2010, 2).Parameter;
        baseFundPaym_1_2_7_212          = RPayReportTuningTable::find(RPayReportName::RPayPersonalCardReport_2010, 3).Parameter;
        deductionsNonTaxPaym_7_8_212    = RPayReportTuningTable::find(RPayReportName::RPayPersonalCardReport_2010, 4).Parameter;
        baseNonTaxPaym_1_2_9_212        = RPayReportTuningTable::find(RPayReportName::RPayPersonalCardReport_2010, 5).Parameter;
        deductionsNonTaxPaym_1_2_9_212  = RPayReportTuningTable::find(RPayReportName::RPayPersonalCardReport_2010, 6).Parameter;
        baseNonTaxPaym_1_3_9_212        = RPayReportTuningTable::find(RPayReportName::RPayPersonalCardReport_2010, 7).Parameter;
        baseNonTaxPaym_2_3_9_212        = RPayReportTuningTable::find(RPayReportName::RPayPersonalCardReport_2010, 8).Parameter;
        deductionExceedLimit_4_8_212    = payTaxParameters.PFDeductionCodePctBase;
        fundADD1                        = payTaxParameters.PensionFundExtra1;
        fundADD2                        = payTaxParameters.PensionFundExtra2;

        if (payTaxParameters.PensionFundinvalidDeduction)
        {
            disabilityRateCode = RPayFundDeductionTable::find(payTaxParameters.PensionFundinvalidDeduction).RPayRateCodeEmpl;
        }

        checkFundPercentRate(fundIPF);
        checkFundPercentRate(fundSPF);
        checkFundPercentRate(fundVPF);
        checkFundPercentRate(fundFFOMI);
        checkFundPercentRate(fundSIF);
        checkFundPercentRate(fundADD1);
        checkFundPercentRate(fundADD2);

        reportMonthColumns[1]   = 'AS';
        reportMonthColumns[2]   = 'BC';
        reportMonthColumns[3]   = 'BM';
        reportMonthColumns[4]   = 'BW';
        reportMonthColumns[5]   = 'CG';
        reportMonthColumns[6]   = 'CQ';
        reportMonthColumns[7]   = 'DA';
        reportMonthColumns[8]   = 'DK';
        reportMonthColumns[9]   = 'DU';
        reportMonthColumns[10]  = 'EE';
        reportMonthColumns[11]  = 'EP';
        reportMonthColumns[12]  = 'FA';

        selectedMainEmplIdSet   = new Set(Types::String);
        printedMainEmplIdSet    = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCalcBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the the calculation base is not zero.
    /// </summary>
    /// <param name="_baseCode">
    /// The counter.
    /// </param>
    /// <returns>
    /// True if payroll lines for the counter contains non-zero sum amount, otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkCalcBase(RPayCounterUnit _baseCode)
    {
        RPayTrans           payTrans;
        RPayFundMember      fundMember;
        RHRMEmplTable       rHRMEmplTableExist;

        select sum(Amount) from payTrans
            where   (correcting                                                 ||
                    (payTrans.PayPeriod                 >= reportStartPeriod    &&
                    payTrans.PayPeriod                  <= reportEndPeriod))    &&
                    (!correcting                                                ||
                    (payTrans.CorrectedPeriod           >= reportStartPeriod    &&
                    payTrans.CorrectedPeriod            <= reportEndPeriod))
        exists join fundMember
            where fundMember.CounterUnit                == _baseCode            &&
                    fundMember.PayCostType              == payTrans.PayCtype
        exists join rHRMEmplTableExist
            where rHRMEmplTableExist.EmployeeId         == payTrans.EmplId      &&
                    rHRMEmplTableExist.PayMainEmplId    == rHRMEmplTable.PayMainEmplId;

        return payTrans.Amount ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFundTransExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkFundTransExist()
    {
        RPayFundEmplSum     fundEmplSumLocal;

        select firstfast RecId from fundEmplSumLocal
            where (fundEmplSumLocal.RPayCounterUnit == fundIPF           ||
                   fundEmplSumLocal.RPayCounterUnit == fundSPF           ||
                   fundEmplSumLocal.RPayCounterUnit == fundVPF           ||
                   fundEmplSumLocal.RPayCounterUnit == fundFFOMI         ||
                   fundEmplSumLocal.RPayCounterUnit == fundSIF           ||
                   fundEmplSumLocal.RPayCounterUnit == fundADD1          ||
                   fundEmplSumLocal.RPayCounterUnit == fundADD2)         &&
                  fundEmplSumLocal.CorrectedPeriod  >= reportStartPeriod &&
                  fundEmplSumLocal.CorrectedPeriod  <= reportEndPeriod   &&
                  (correcting                                            ||
                   (fundEmplSumLocal.PayPeriod      >= reportStartPeriod &&
                    fundEmplSumLocal.PayPeriod      <= reportEndPeriod)) &&
                  fundEmplSumLocal.EmplId           == rHRMEmplTable.PayMainEmplId;

        return fundEmplSumLocal || this.checkCalcBase(basePaymSIF);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();

        payPeriodField  = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), payPeriod);
        payPeriodField.control().mandatory(true);

        correctingField = dialog.addFieldValue(extendedTypeStr(NoYesId), correcting, "@GLS116810");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCalcBase</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillCalcBase(int             _workSheetNum,
                                container       _monthsCon,
                                RPayCounterUnit _baseCode,
                                int             _startRow)
    {
        int             monthIdx;
        RPayAmount      calcBaseAmountTotal;

        void fillMonth(Months _monthNum)
        {
            RPayTrans           payTrans;
            RPayFundMember      fundMember;
            RHRMEmplTable       rHRMEmplTableExist;
            ReportPeriod_RU     curPeriod       = endMth(dateMthFwd(reportStartPeriod, _monthNum - 1));

            select sum(Amount) from payTrans
                where payTrans.CorrectedPeriod        == curPeriod                  &&
                      (correcting                                                   ||
                       (payTrans.PayPeriod            >= reportStartPeriod          &&
                        payTrans.PayPeriod            <= reportEndPeriod))          &&
                      (!correcting                                                  ||
                       (payTrans.CorrectedPeriod      >= reportStartPeriod          &&
                        payTrans.CorrectedPeriod      <= reportEndPeriod))
            exists join fundMember
                where fundMember.CounterUnit          == _baseCode                  &&
                      fundMember.PayCostType          == payTrans.PayCtype
            exists join rHRMEmplTableExist
                where rHRMEmplTableExist.EmployeeId           == payTrans.EmplId            &&
                      rHRMEmplTableExist.PayMainEmplId == rHRMEmplTable.PayMainEmplId;

            calcBaseAmountTotal += payTrans.Amount;

            if (payTrans.Amount)
            {
                excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(ComExcelDocument_RU::colName2Num(reportMonthColumns[_monthNum]), _startRow),
                                          payTrans.Amount, _workSheetNum);
            }

            if (calcBaseAmountTotal)
            {
                excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(ComExcelDocument_RU::colName2Num(reportMonthColumns[_monthNum]), _startRow + 1),
                                          calcBaseAmountTotal, _workSheetNum);
            }
        }
        ;

        for (monthIdx = 1; monthIdx <= conlen(_monthsCon); monthIdx++)
        {
            fillMonth(conpeek(_monthsCon, monthIdx));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCalcBaseFundDeduction</Name>
				<Source><![CDATA[
    private void fillCalcBaseFundDeduction(int                      _workSheetNum,
                                           int                      _disabilityIdx,
                                           int                      _fundPercentIdx,
                                           container                _monthsCon,
                                           RPayCounterUnit          _baseCode,
                                           RPayCounterUnit          _fundCode,
                                           str                      _fundDeductionCodes,
                                           int                      _fundIdx,
                                           int                      _startRow)
    {
        int             monthIdx;
        container       percentCon;
        RPayAmount      fundDeductionAmountTotal;

        void fillMonth(Months _monthNum, Percent _percentValue)
        {
            Query                   query;
            QueryBuildDataSource    qbds;
            QueryRun                queryRunLocal;
            RPayFundEmplDeduction   fundEmplDeduction;
            RPayTrans               payTrans;
            RPayFundMember          fundMember;
            RHRMEmplTable           rHRMemplTableExist;
            ReportPeriod_RU         curPeriod       = endMth(dateMthFwd(reportStartPeriod, _monthNum - 1));
            Range                   range;

            if (_fundDeductionCodes)
            {
                query = new Query();
                qbds = query.addDataSource(tablenum(RPayFundEmplDeduction));

                qbds.addRange(fieldnum(RPayFundEmplDeduction, RpayCounterUnit)).value(queryValue(_fundCode));
                qbds.addRange(fieldnum(RPayFundEmplDeduction, RpayFundDeductionCode)).value(_fundDeductionCodes);

                if (correcting)
                {
                    range = strfmt(#CorrectedPeriodValue, date2strXpp(curPeriod));
                    qbds.addRange(fieldnum(RPayFundEmplDeduction, CorrectedPeriod)).value(range);
                }
                else
                {
                    qbds.addRange(fieldnum(RPayFundEmplDeduction, PayPeriod)).value(SysQuery::range(reportStartPeriod, reportEndPeriod));
                    qbds.addRange(fieldnum(RPayFundEmplDeduction, CorrectedPeriod)).value(queryValue(curPeriod));
                }

                qbds.addSelectionField(fieldnum(RPayFundEmplDeduction, DeductionAmount), SelectionField::Sum);

                qbds = qbds.addDataSource(tablenum(RPayFundEmplSum));
                qbds.joinMode(JoinMode::ExistsJoin);
                qbds.addLink(fieldnum(RPayFundEmplDeduction, CorrectedPeriod), fieldnum(RPayFundEmplSum, CorrectedPeriod));
                qbds.addLink(fieldnum(RPayFundEmplDeduction, RPayCounterUnit), fieldnum(RPayFundEmplSum, RPayCounterUnit));
                qbds.addLink(fieldnum(RPayFundEmplDeduction, EmplId), fieldnum(RPayFundEmplSum, EmplId));
                qbds.addLink(fieldnum(RPayFundEmplDeduction, PayPeriod), fieldnum(RPayFundEmplSum, PayPeriod));
                qbds.addRange(fieldnum(RPayFundEmplSum, PercentValue)).value(queryValue(_percentValue));

                qbds = qbds.addDataSource(tablenum(RHRMEmplTable));
                qbds.joinMode(JoinMode::ExistsJoin);
                qbds.addLink(fieldnum(RPayFundEmplDeduction, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
                qbds.addRange(fieldnum(RHRMEmplTable, PayMainEmplId)).value(queryValue(rHRMEmplTable.PayMainEmplId));

                queryRunLocal = new QueryRun(query);
                queryRunLocal.next();

                fundEmplDeduction = queryRunLocal.get(tablenum(RPayFundEmplDeduction));

                fundDeductionAmountTotal += fundEmplDeduction.DeductionAmount;
            }

            select sum(Amount) from payTrans
                where payTrans.CorrectedPeriod        == curPeriod                  &&
                      (correcting                                                   ||
                       (payTrans.PayPeriod            >= reportStartPeriod          &&
                        payTrans.PayPeriod            <= reportEndPeriod))
            exists join fundMember
                where fundMember.CounterUnit          == _baseCode                  &&
                      fundMember.PayCostType          == payTrans.PayCtype
            exists join rHRMemplTableExist
                where rHRMemplTableExist.EmployeeId    == payTrans.EmplId           &&
                      rHRMemplTableExist.PayMainEmplId == rHRMEmplTable.PayMainEmplId;

            fundDeductionAmountTotal += payTrans.Amount;

            if (fundEmplDeduction.DeductionAmount + payTrans.Amount)
            {
                excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(ComExcelDocument_RU::colName2Num(reportMonthColumns[_monthNum]), _startRow),
                                          fundEmplDeduction.DeductionAmount + payTrans.Amount, _workSheetNum);
            }

            if (fundDeductionAmountTotal)
            {
                excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(ComExcelDocument_RU::colName2Num(reportMonthColumns[_monthNum]), _startRow + 1),
                                          fundDeductionAmountTotal, _workSheetNum);
            }
        }
        ;

        percentCon = conpeek(fundPercentsCon, _fundPercentIdx);

        for (monthIdx = 1; monthIdx <= conlen(_monthsCon); monthIdx++)
        {
            fillMonth(conpeek(_monthsCon, monthIdx), conpeek(percentCon, _fundIdx));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    private void fillDocument()
    {
        SysOperationProgress    op                  = new SysOperationProgress();

        MapEnumerator           reportPagesMapEnumerator;

        int                     disabilityIdx,
                                fundPercentIdx;
        container               monthsCon;
        int                     workSheetNum;

        this.getDisabilityPeriods();
        this.getFundPercents();
        this.getReportPagesMap();

        workSheetNum = 1;
        reportPagesMapEnumerator = reportPagesMap.getEnumerator();
        while (reportPagesMapEnumerator.moveNext())
        {
            if (workSheetNum > 1)
            {
                excelDocument.insertSheet(1, workSheetNum - 1);
            }

            workSheetNum++;
        }

        op.setCaption("@GLS104187");
        op.setAnimation(#AviUpdate);
        op.setTotal(reportPagesMap.elements());
        op.updateInterval(0);

        workSheetNum = 1;
        reportPagesMapEnumerator = reportPagesMap.getEnumerator();
        while (reportPagesMapEnumerator.moveNext())
        {
            op.setText("@GLS112225" + ' ' + int2str(workSheetNum));

            [disabilityIdx, fundPercentIdx] = reportPagesMapEnumerator.currentKey();
            monthsCon                       = reportPagesMapEnumerator.currentValue();

            this.fillHeader(workSheetNum, disabilityIdx, fundPercentIdx);

            this.fillCalcBase(workSheetNum, monthsCon, baseFundPaym_1_2_7_212, 18);
            this.fillFundDeduction(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundIPF, deductionsNonTaxPaym_7_8_212, 1, 20);

            this.fillCalcBaseFundDeduction(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, baseNonTaxPaym_1_2_9_212, fundIPF, deductionsNonTaxPaym_1_2_9_212, 1, 22);

            this.fillCalcBase(workSheetNum, monthsCon, baseNonTaxPaym_1_3_9_212, 24);
            this.fillCalcBase(workSheetNum, monthsCon, baseNonTaxPaym_2_3_9_212, 26);
            this.fillFundDeduction(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundIPF, deductionExceedLimit_4_8_212, 1, 28);

            this.fillFundBase(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundIPF,   1, 30);
            this.fillFundBase(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundFFOMI, 6, 32);
            this.fillFundBase(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundSIF,   7, 34);

            this.fillFundAmount(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundIPF,   1, 36);
            this.fillFundAmount(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundSPF,   2, 38);
            this.fillFundAmount(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundVPF,   3, 40);

            this.fillFundAmount(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundADD1, 4, 42);
            this.fillFundAmount(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundADD2, 5, 44);

            this.fillFundAmount(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundFFOMI, 6, 46);

            this.fillFundAmount(workSheetNum, disabilityIdx, fundPercentIdx, monthsCon, fundSIF,   7, 48);

            this.fillCalcBase(workSheetNum, monthsCon, basePaymSIF, 50);

            workSheetNum++;

            op.incCount();
        }

        printedMainEmplIdSet.add(rHRMEmplTable.PayMainEmplId);

        excelDocument.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFundAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFundAmount(int             _workSheetNum,
                                  int             _disabilityIdx,
                                  int             _fundPercentIdx,
                                  container       _monthsCon,
                                  RPayCounterUnit _fundCode,
                                  int             _fundIdx,
                                  int             _startRow)
    {
        int             monthIdx;
        container       percentCon;
        RPayAmount      fundAmountTotal;

        void fillMonth(Months _monthNum, Percent _percentValue)
        {
            RPayFundEmplSum     fundEmplSum;
            RHRMEmplTable       rHRMemplTableExist;
            ReportPeriod_RU     curPeriod       = endMth(dateMthFwd(reportStartPeriod, _monthNum - 1));
            ;

            select sum(FundAmount) from fundEmplSum
                where fundEmplSum.RpayCounterUnit     == _fundCode                  &&
                      fundEmplSum.CorrectedPeriod     == curPeriod                  &&
                      (correcting                                                   ||
                       (fundEmplSum.PayPeriod         >= reportStartPeriod          &&
                        fundEmplSum.PayPeriod         <= reportEndPeriod))          &&
                      (!correcting                                                  ||
                       (fundEmplSum.CorrectedPeriod   >= reportStartPeriod          &&
                        fundEmplSum.CorrectedPeriod   <= reportEndPeriod))          &&
                      fundEmplSum.PercentValue        == _percentValue
            exists join rHRMemplTableExist
                where rHRMemplTableExist.EmployeeId   == fundEmplSum.EmplId         &&
                      rHRMemplTableExist.PayMainEmplId == rHRMEmplTable.PayMainEmplId;

            fundAmountTotal += fundEmplSum.FundAmount;

            if (fundEmplSum.FundAmount)
            {
                excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(ComExcelDocument_RU::colName2Num(reportMonthColumns[_monthNum]), _startRow),
                                          fundEmplSum.FundAmount, _workSheetNum);
            }

            if (fundAmountTotal)
            {
                excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(ComExcelDocument_RU::colName2Num(reportMonthColumns[_monthNum]), _startRow + 1),
                                          fundAmountTotal, _workSheetNum);
            }
        }
        ;

        percentCon = conpeek(fundPercentsCon, _fundPercentIdx);

        for (monthIdx = 1; monthIdx <= conlen(_monthsCon); monthIdx++)
        {
            fillMonth(conpeek(_monthsCon, monthIdx), conpeek(percentCon, _fundIdx));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFundBase</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFundBase(int             _workSheetNum,
                                int             _disabilityIdx,
                                int             _fundPercentIdx,
                                container       _monthsCon,
                                RPayCounterUnit _fundCode,
                                int             _fundIdx,
                                int             _startRow)
    {
        int             monthIdx;
        container       percentCon;
        RPayAmount      fundBaseAmountTotal;

        void fillMonth(Months _monthNum, Percent _percentValue)
        {
            RPayFundEmplSum     fundEmplSum;
            RHRMEmplTable       rHRMemplTableExist;
            ReportPeriod_RU     curPeriod       = endMth(dateMthFwd(reportStartPeriod, _monthNum - 1));

            select sum(BaseAmount) from fundEmplSum
                where fundEmplSum.RpayCounterUnit     == _fundCode                  &&
                      fundEmplSum.CorrectedPeriod     == curPeriod                  &&
                      (correcting                                                   ||
                       (fundEmplSum.PayPeriod         >= reportStartPeriod          &&
                        fundEmplSum.PayPeriod         <= reportEndPeriod))          &&
                      (!correcting                                                  ||
                       (fundEmplSum.CorrectedPeriod   >= reportStartPeriod          &&
                        fundEmplSum.CorrectedPeriod   <= reportEndPeriod))          &&
                      fundEmplSum.PercentValue        == _percentValue
            exists join rHRMemplTableExist
                where rHRMemplTableExist.EmployeeId   == fundEmplSum.EmplId         &&
                      rHRMemplTableExist.PayMainEmplId == rHRMEmplTable.PayMainEmplId;

            fundBaseAmountTotal += fundEmplSum.BaseAmount;

            if (fundEmplSum.BaseAmount)
            {
                excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(ComExcelDocument_RU::colName2Num(reportMonthColumns[_monthNum]), _startRow),
                                          fundEmplSum.BaseAmount, _workSheetNum);
            }

            if (fundBaseAmountTotal)
            {
                excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(ComExcelDocument_RU::colName2Num(reportMonthColumns[_monthNum]), _startRow + 1),
                                          fundBaseAmountTotal, _workSheetNum);
            }
        }
        ;

        percentCon = conpeek(fundPercentsCon, _fundPercentIdx);

        for (monthIdx = 1; monthIdx <= conlen(_monthsCon); monthIdx++)
        {
            fillMonth(conpeek(_monthsCon, monthIdx), conpeek(percentCon, _fundIdx));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFundDeduction</Name>
				<Source><![CDATA[
    private void fillFundDeduction(int                      _workSheetNum,
                                   int                      _disabilityIdx,
                                   int                      _fundPercentIdx,
                                   container                _monthsCon,
                                   RPayCounterUnit          _fundCode,
                                   str                      _fundDeductionCodes,
                                   int                      _fundIdx,
                                   int                      _startRow)
    {
        int             monthIdx;
        container       percentCon;
        RPayAmount      fundDeductionAmountTotal;

        void fillMonth(Months _monthNum, Percent _percentValue)
        {
            Query                   query;
            QueryBuildDataSource    qbds;
            QueryRun                queryRunLocal;
            RPayFundEmplDeduction   fundEmplDeduction;
            ReportPeriod_RU         curPeriod           = endMth(dateMthFwd(reportStartPeriod, _monthNum - 1));
            Range                   range;

            if (_fundDeductionCodes)
            {
                query = new Query();
                qbds = query.addDataSource(tablenum(RPayFundEmplDeduction));

                qbds.addRange(fieldnum(RPayFundEmplDeduction, EmplId)).value(queryValue(rHRMEmplTable.EmployeeId));
                qbds.addRange(fieldnum(RPayFundEmplDeduction, RpayCounterUnit)).value(queryValue(_fundCode));
                qbds.addRange(fieldnum(RPayFundEmplDeduction, RpayFundDeductionCode)).value(_fundDeductionCodes);

                if (correcting)
                {
                    range = strfmt(#CorrectedPeriodValue, date2strXpp(curPeriod));
                    qbds.addRange(fieldnum(RPayFundEmplDeduction, CorrectedPeriod)).value(range);
                }
                else
                {
                    qbds.addRange(fieldnum(RPayFundEmplDeduction, CorrectedPeriod)).value(queryValue(curPeriod));
                    qbds.addRange(fieldnum(RPayFundEmplDeduction, PayPeriod)).value(SysQuery::range(reportStartPeriod, reportEndPeriod));
                }

                qbds.addSelectionField(fieldnum(RPayFundEmplDeduction, DeductionAmount), SelectionField::Sum);

                qbds = qbds.addDataSource(tablenum(RPayFundEmplSum));
                qbds.joinMode(JoinMode::ExistsJoin);
                qbds.addLink(fieldnum(RPayFundEmplDeduction, CorrectedPeriod), fieldnum(RPayFundEmplSum, CorrectedPeriod));
                qbds.addLink(fieldnum(RPayFundEmplDeduction, RPayCounterUnit), fieldnum(RPayFundEmplSum, RPayCounterUnit));
                qbds.addLink(fieldnum(RPayFundEmplDeduction, EmplId), fieldnum(RPayFundEmplSum, EmplId));
                qbds.addLink(fieldnum(RPayFundEmplDeduction, PayPeriod), fieldnum(RPayFundEmplSum, PayPeriod));
                qbds.addRange(fieldnum(RPayFundEmplSum, PercentValue)).value(queryValue(_percentValue));

                qbds = qbds.addDataSource(tablenum(RHRMEmplTable));
                qbds.joinMode(JoinMode::ExistsJoin);
                qbds.addLink(fieldnum(RPayFundEmplDeduction, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
                qbds.addRange(fieldnum(RHRMEmplTable, PayMainEmplId)).value(queryValue(rHRMEmplTable.PayMainEmplId));

                queryRunLocal = new QueryRun(query);
                queryRunLocal.next();

                fundEmplDeduction = queryRunLocal.get(tablenum(RPayFundEmplDeduction));

                fundDeductionAmountTotal += fundEmplDeduction.DeductionAmount;

                if (fundEmplDeduction.DeductionAmount)
                {
                    excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(ComExcelDocument_RU::colName2Num(reportMonthColumns[_monthNum]), _startRow),
                                              fundEmplDeduction.DeductionAmount, _workSheetNum);
                }
            }

            if (fundDeductionAmountTotal)
            {
                excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(ComExcelDocument_RU::colName2Num(reportMonthColumns[_monthNum]), _startRow + 1),
                                          fundDeductionAmountTotal, _workSheetNum);
            }
        }
        ;

        percentCon = conpeek(fundPercentsCon, _fundPercentIdx);

        for (monthIdx = 1; monthIdx <= conlen(_monthsCon); monthIdx++)
        {
            fillMonth(conpeek(_monthsCon, monthIdx), conpeek(percentCon, _fundIdx));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    private void fillHeader(int     _workSheetNum,
                            int     _disabilityIdx,
                            int     _fundPercentIdx)
    {
        StartDate               disabilityCertStartDate;
        EndDate                 disabilityCertEndDate;
        NoYesId                 disabilityValue;
        DirPersonName           dirPersonName;
        RHRMPersonTable         rHRMPersonTable;

        container               percentsCon;
        rHRMPersonTable = rHRMEmplTable.personTable();
        dirPersonName = rHRMPersonTable.dirPersonName();

        #define.DotSign('.')
        #define.TariffCodeMain(1)
        #define.TariffCodeDisabled(3)

        excelDocument.insertValue('ReportYear',                     year(payPeriod), _workSheetNum);
        excelDocument.insertValue('PageNum',                        rHRMEmplTable.PayMainEmplId + #DotSign + int2str(_workSheetNum), _workSheetNum);
        excelDocument.insertValue('CompanyName',                    companyInfo.Name, _workSheetNum);
        excelDocument.insertValue('CompanyINN',                     CompanyInfoHelper::partyINN_RU(companyInfo), _workSheetNum);
        excelDocument.insertValue('CompanyKPP',                     CompanyInfoHelper::partyKPP_RU(companyInfo), _workSheetNum);
        excelDocument.insertValue('LastName',                       dirPersonName.LastName, _workSheetNum);
        excelDocument.insertValue('FirstName',                      dirPersonName.FirstName, _workSheetNum);
        excelDocument.insertValue('MiddleName',                     dirPersonName.MiddleName, _workSheetNum);
        excelDocument.insertValue('InsuranceNumber',                rHRMEmplTable.payPFRINN(), _workSheetNum);
        excelDocument.insertValue('EmployeeINN',                    rHRMEmplTable.payINN(), _workSheetNum);
        excelDocument.insertValue('CitizenshipCountry',             LogisticsAddressCountryRegionTranslation::find(rHRMPersonTable.personData().LogisticsAddressCountryRegion).LongName, _workSheetNum);
        excelDocument.insertValue('BirthDate',                      rHRMPersonTable.hcmPersonPrivateDetails().BirthDate, _workSheetNum);

        [disabilityCertStartDate, disabilityCertEndDate, disabilityValue] = this.getDisabilityCert(_disabilityIdx);

        if (disabilityValue > 0)
        {
            excelDocument.setUnderline('DisabilityYes',             NoYes::Yes, _workSheetNum);
            excelDocument.setUnderline('DisabilityNo',              NoYes::No, _workSheetNum);

            if (disabilityCertStartDate)
            {
                excelDocument.insertValue('DisabilityCertStartDate',    disabilityCertStartDate, _workSheetNum);
            }
            else
            {
                excelDocument.insertValue('DisabilityCertStartDate',    '', _workSheetNum);
            }

            if (disabilityCertEndDate)
            {
                excelDocument.insertValue('DisabilityCertEndDate',      disabilityCertEndDate, _workSheetNum);
            }
            else
            {
                excelDocument.insertValue('DisabilityCertEndDate',      '', _workSheetNum);
            }
        }
        else
        {
            excelDocument.setUnderline('DisabilityYes',             NoYes::No, _workSheetNum);
            excelDocument.setUnderline('DisabilityNo',              NoYes::Yes, _workSheetNum);
            excelDocument.insertValue('DisabilityCertStartDate',    '', _workSheetNum);
            excelDocument.insertValue('DisabilityCertEndDate',      '', _workSheetNum);
        }

        excelDocument.insertValue('TariffCode',                     (disabilityValue > 0 ? #TariffCodeDisabled : #TariffCodeMain), _workSheetNum);

        percentsCon = conpeek(fundPercentsCon, _fundPercentIdx);
        excelDocument.insertValue('PercentIPF',                     conpeek(percentsCon, 1), _workSheetNum);
        excelDocument.insertValue('PercentSPF',                     conpeek(percentsCon, 2), _workSheetNum);
        excelDocument.insertValue('PercentVPF',                     conpeek(percentsCon, 3), _workSheetNum);
        excelDocument.insertValue('PercentADD1',                    conpeek(percentsCon, 4), _workSheetNum);
        excelDocument.insertValue('PercentADD2',                    conpeek(percentsCon, 5), _workSheetNum);
        excelDocument.insertValue('PercentFFOMI',                   conpeek(percentsCon, 6), _workSheetNum);
        excelDocument.insertValue('PercentSIF',                     conpeek(percentsCon, 7), _workSheetNum);

        excelDocument.insertValue('ChiefAccountant',                OfficialsTable_RU::nameAccountant(), _workSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisabilityCert</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getDisabilityCert(int _disabilityIdx)
    {
        StartDate               disabilityStartDate;
        EndDate                 disabilityEndDate;
        NoYesId                 disabilityValue;

        RPayRateTrans           payRateTrans;
        StartDate               disabilityCertStartDate;
        EndDate                 disabilityCertEndDate;

        [disabilityStartDate, disabilityEndDate, disabilityValue] = conpeek(disabilityPeriodsCon, _disabilityIdx);

        select firstonly payRateTrans
            order by RateDate desc
            where payRateTrans.PayRate      == disabilityRateCode &&
                  payRateTrans.RateTypeAC   == rHRMEmplTable.EmployeeId   &&
                  payRateTrans.RateDate     <= disabilityStartDate;

        if (payRateTrans)
        {
            if (payRateTrans.rateValueReal(false, 0) == disabilityValue)
            {
                disabilityCertStartDate = payRateTrans.RateDate;
            }
            else
            {
                disabilityCertStartDate = disabilityStartDate;
            }
        }
        else
        {
            disabilityCertStartDate = disabilityStartDate;
        }

        select firstonly payRateTrans
            order by RateDate asc
            where payRateTrans.PayRate      == disabilityRateCode &&
                  payRateTrans.RateTypeAC   == rHRMEmplTable.EmployeeId   &&
                  payRateTrans.RateDate     >  disabilityEndDate;

        if (payRateTrans)
        {
            disabilityCertEndDate = payRateTrans.RateDate - 1;
        }
        else
        {
            disabilityCertEndDate = dateNull(); // disabilityEndDate;
        }

        return [disabilityCertStartDate, disabilityCertEndDate, disabilityValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisabilityPeriods</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void getDisabilityPeriods()
    {
        container               rateCon;
        int                     conIdx;
        container               disabilityCon;
        RPayRateCallContext     rPayRateCallContext;

        disabilityPeriodsCon = connull();

        if (disabilityRateCode)
        {
            rPayRateCallContext = RPayRateCallContext::construct(reportEndPeriod, rHRMEmplTable.EmployeeId);
            rateCon = RPayRateObj::getDateAndValue(disabilityRateCode, dateStartMth(reportStartPeriod), reportEndPeriod, rPayRateCallContext);
        }
        else
        {
            rateCon = [[dateStartMth(reportStartPeriod), reportEndPeriod, 0]];
        }

        for (conIdx = conlen(rateCon); conIdx >= 1; conIdx--)
        {
            disabilityCon = conpeek(rateCon, conIdx);

            disabilityPeriodsCon = conpoke(disabilityPeriodsCon, conlen(disabilityPeriodsCon) + 1, disabilityCon);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        payPeriod   = payPeriodField.value() ? endMth(payPeriodField.value()) : dateNull();
        correcting  = correctingField.value();

        reportStartPeriod   = payPeriod ? endMth(dateStartYr(payPeriod))    : dateNull();
        reportEndPeriod     = payPeriod ? endMth(payPeriod)                 : dateNull();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundPercents</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void getFundPercents()
    {
        ReportPeriod_RU     curPeriod;
        int                 fundPercentIdx,
                            fundPercentMthIdx;
        container           percentsMthCon,
                            percentsCon;
        boolean             percentsFound;

        Percent getFundPercent(RPayCounterUnit  _fundCode)
        {
            RPayFundEmplSum     fundEmplSum;
            RHRMEmplTable       rHRMEmplTableExist;
            Percent             percentValue;
            Set                 fundPercents;
            SetEnumerator       se;
            real                fundPercent, fundAmount;

            fundPercents = new Set(Types::Container);

            while select PayPeriod, CorrectedPeriod, FundAmount, PercentValue from fundEmplSum
                order by fundEmplSum.PercentValue
                where fundEmplSum.RPayCounterUnit     == _fundCode                  &&
                      fundEmplSum.CorrectedPeriod     == curPeriod                  &&
                      (correcting                                                   ||
                       (fundEmplSum.PayPeriod         >= reportStartPeriod          &&
                        fundEmplSum.PayPeriod         <= reportEndPeriod))
            exists join rHRMEmplTableExist
                where rHRMEmplTableExist.EmployeeId    == fundEmplSum.EmplId         &&
                      rHRMEmplTableExist.PayMainEmplId == rHRMEmplTable.PayMainEmplId
            {
                if (fundPercents.in([fundEmplSum.PercentValue, -fundEmplSum.FundAmount]))
                {
                    fundPercents.remove([fundEmplSum.PercentValue, -fundEmplSum.FundAmount]);
                }
                else
                {
                    fundPercents.add([fundEmplSum.PercentValue, fundEmplSum.FundAmount]);
                }
            }

            se = fundPercents.getEnumerator();
            while (se.moveNext())
            {
                [fundPercent, fundAmount] = se.current();
            }

            return fundPercent;
        }

        fundPercentsCon     = connull();
        fundPercentsMthCon  = connull();

        fundPercentMthIdx = 1;
        for (curPeriod = reportStartPeriod; curPeriod <= reportEndPeriod; curPeriod = endMth(nextMth(curPeriod)))
        {
            fundPercentsMthCon = conpoke(fundPercentsMthCon,
                                         fundPercentMthIdx,
                                         [getFundPercent(fundIPF),   getFundPercent(fundSPF),   getFundPercent(fundVPF),
                                          getFundPercent(fundADD1),   getFundPercent(fundADD2),
                                          getFundPercent(fundFFOMI), getFundPercent(fundSIF)]);
            fundPercentMthIdx++;
        }

        for (fundPercentMthIdx = 1; fundPercentMthIdx <= conlen(fundPercentsMthCon); fundPercentMthIdx++)
        {
            percentsMthCon = conpeek(fundPercentsMthCon, fundPercentMthIdx);

            if (!conpeek(percentsMthCon, 1)  &&
                !conpeek(percentsMthCon, 2)  &&
                !conpeek(percentsMthCon, 3)  &&
                !conpeek(percentsMthCon, 4)  &&
                !conpeek(percentsMthCon, 5)  &&
                !conpeek(percentsMthCon, 6)  &&
                !conpeek(percentsMthCon, 7)  &&
                !this.checkCalcBase(basePaymSIF))
            {
                continue;
            }

            percentsFound = false;
            for (fundPercentIdx = 1; fundPercentIdx <= conlen(fundPercentsCon); fundPercentIdx++)
            {
                percentsCon = conpeek(fundPercentsCon, fundPercentIdx);

                if (conpeek(percentsCon, 1) == conpeek(percentsMthCon, 1) &&
                    conpeek(percentsCon, 2) == conpeek(percentsMthCon, 2) &&
                    conpeek(percentsCon, 3) == conpeek(percentsMthCon, 3) &&
                    conpeek(percentsCon, 4) == conpeek(percentsMthCon, 4) &&
                    conpeek(percentsCon, 5) == conpeek(percentsMthCon, 5) &&
                    conpeek(percentsCon, 6) == conpeek(percentsMthCon, 6) &&
                    conpeek(percentsCon, 7) == conpeek(percentsMthCon, 7))
                {
                    percentsFound = true;
                    break;
                }
            }

            if (! percentsFound)
            {
                fundPercentsCon = conpoke(fundPercentsCon, conlen(percentsCon) + 1, percentsMthCon);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportPagesMap</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void getReportPagesMap()
    {
        int                     disabilityIdx;
        StartDate               disabilityStartDate;
        EndDate                 disabilityEndDate;
        NoYesId                 disabilityValue;

        int                     fundPercentIdx;
        container               monthNumsCon,
                                percentsMthCon,
                                percentsCon;

        ReportPeriod_RU         curPeriod;

        reportPagesMap = new Map(Types::Container, Types::Container); // [N reference, N percentages] -> [month's numbers]

        for (curPeriod = reportStartPeriod; curPeriod <= reportEndPeriod; curPeriod = endMth(nextMth(curPeriod)))
        {
            // determine in which period of disability falls month
            for (disabilityIdx = 1; disabilityIdx <= conlen(disabilityPeriodsCon); disabilityIdx++)
            {
                [disabilityStartDate, disabilityEndDate, disabilityValue] = conpeek(disabilityPeriodsCon, disabilityIdx);

                if (curPeriod >= disabilityStartDate && curPeriod <= disabilityEndDate)
                    break;
            }

            // determine the number of months in the container percent
            percentsMthCon = conpeek(fundPercentsMthCon, mthOfYr(curPeriod));    // month's percentages

            if (!conpeek(percentsMthCon, 1)  &&
                !conpeek(percentsMthCon, 2)  &&
                !conpeek(percentsMthCon, 3)  &&
                !conpeek(percentsMthCon, 4)  &&
                !conpeek(percentsMthCon, 5)  &&
                !conpeek(percentsMthCon, 6)  &&
                !conpeek(percentsMthCon, 7)  &&
                !this.checkCalcBase(basePaymSIF))
            {
                continue;
            }

            for (fundPercentIdx = 1; fundPercentIdx <= conlen(fundPercentsCon); fundPercentIdx++)
            {
                percentsCon = conpeek(fundPercentsCon, fundPercentIdx);

                if (conpeek(percentsCon, 1) == conpeek(percentsMthCon, 1) &&
                    conpeek(percentsCon, 2) == conpeek(percentsMthCon, 2) &&
                    conpeek(percentsCon, 3) == conpeek(percentsMthCon, 3) &&
                    conpeek(percentsCon, 4) == conpeek(percentsMthCon, 4) &&
                    conpeek(percentsCon, 5) == conpeek(percentsMthCon, 5) &&
                    conpeek(percentsCon, 6) == conpeek(percentsMthCon, 6) &&
                    conpeek(percentsCon, 7) == conpeek(percentsMthCon, 7))
                    break;
            }

            // put this month into map
            if (reportPagesMap.exists([disabilityIdx, fundPercentIdx]))
            {
                monthNumsCon = reportPagesMap.lookup([disabilityIdx, fundPercentIdx]);
            }
            else
            {
                monthNumsCon = connull();
            }

            reportPagesMap.insert([disabilityIdx, fundPercentIdx], monthNumsCon + mthOfYr(curPeriod));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    private void initFromArgs(Args _args)
    {
        if (_args && _args.dataset() == tablenum(RHRMEmplTable))
        {
            rHRMEmplTable = _args.record();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        payPeriod   = RPayParameters::payPeriod();

        this.initQuery();
        this.setQueryEmplRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initQuery()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tablenum(RHRMEmplTable));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    private boolean makeDocument()
    {
        templateFile = SysResource::saveToTempFile(this.templateResourceNode(), false);

        if (! WinAPI::fileExists(templateFile))
            throw error(strFmt("@GLS106466", templateFile));

        excelDocument = new ComExcelDocument_RU();

        if (! excelDocument.newFile(templateFile, false))
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        while (queryRun.next())
        {
            rHRMemplTable = queryRun.get(tablenum(RHRMEmplTable));

            selectedMainEmplIdSet.add(rHRMEmplTable.EmployeeId);

            if (printedMainEmplIdSet.in(rHRMEmplTable.PayMainEmplId))
                continue;

            if (! this.checkFundTransExist())
            {
                warning(strFmt("@RUP3017",
                                rHRMEmplTable.EmployeeId, rHRMEmplTable.name()));
                continue;
            }

            if (this.makeDocument())
            {
                this.fillDocument();
            }
        }

        if (! (selectedMainEmplIdSet.elements() == 0 && printedMainEmplIdSet.elements() == 0) &&
            ! (selectedMainEmplIdSet.elements() == 1 && printedMainEmplIdSet.elements() == 1))
        {
            info(strFmt("@RUP3018", printedMainEmplIdSet.elements(), selectedMainEmplIdSet.elements()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    // can not be run on server because displays Excel report
    public boolean runsImpersonated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryEmplRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setQueryEmplRange()
    {
        Query                   query   = queryRun.query();
        QueryBuildDataSource    qbds    = query.dataSourceTable(tablenum(RHRMEmplTable));
        QueryBuildRange         qbr;

        if (rHRMEmplTable)
        {
            qbr = findOrCreateRange_W(qbds, fieldnum(rHRMEmplTable, EmployeeId), queryValue(rHRMEmplTable.EmployeeId));
            qbr.status(RangeStatus::Locked);
        }
        else
        {
            qbr = findOrCreateRange_W(qbds, fieldnum(rHRMEmplTable, EmployeeId));
            qbr.status(RangeStatus::Open);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateResourceNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the template resouce node.
    /// </summary>
    /// <returns>
    /// The resouce node.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected resourceNode templateResourceNode()
    {
        //let resource name match report class name by default
        resourceNode rn = SysResource::getResourceNode(this.name());
        rn.AOTload(); //properties will not be loaded without this
        return rn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conpeek(_packedClass, 1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }

                this.setQueryEmplRange();

                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (ret)
        {
            if (! payPeriod)
            {
                ret = checkFailed(strFmt("@RUP3019", new DictType(extendedTypeNum(ReportPeriod_RU)).label()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP3006";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayPersonalCardReport_2010 rPayPersonalCardReport = new RPayPersonalCardReport_2010();

        rPayPersonalCardReport.checkAndPrepareParameters();
        rPayPersonalCardReport.initFromArgs(_args);

        if (rPayPersonalCardReport.prompt())
        {
            rPayPersonalCardReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The template name.
    /// </summary>
    /// <returns>
    /// The template filename.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Filename templateName()
    {
        return resourceStr(RPayPersonalCardReport_2010);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>