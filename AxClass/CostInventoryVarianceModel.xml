<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostInventoryVarianceModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostInventoryVarianceModel</c> class models a variance chart for inventory statement.
/// </summary>
public class CostInventoryVarianceModel extends CostVarianceModel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostInventoryVarianceModel construct()
    {
        return new CostInventoryVarianceModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyStatementRelatedRangeFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply ranges to the query for inventory related variance types and the item id and dimensions if the chart was called from inventory statement of a released product.
    /// </summary>
    /// <param name = "_qbds">
    /// An instance of <c>QueryBuildDataSource</c> for a query with <c>CostStatementCache<c> as the datasource.
    /// </param>
    protected void applyStatementRelatedRangeFilters(QueryBuildDataSource _qbdsCostStatementCache)
    {
        var inventoryStatementModel = statementModel as CostInventoryStatementModel;

        var inventDim = inventoryStatementModel.parmInventDim();
        InventDim inventDimBlank;
        if (!InventDim::isInventDimEqual(inventDim, inventDimBlank, InventDim::dimFieldsList()))
        {
            throw error("@SCM:InventDimDoesNotEqualInventDimBlank");
        }

        var itemId = inventoryStatementModel.parmItemId();
        if (itemId)
        {
            throw error(strFmt("@SCM:ItemIdNotEmpty", itemId));
        }

        _qbdsCostStatementCache.addRange(fieldNum(CostStatementCache, StatementType)).value(int2Str(CostStatementType::Variance));
        _qbdsCostStatementCache.addRange(fieldNum(CostStatementCache, StatementLineCategoryLevel2)).value(int2Str(CostStatementLineCategoryLevel2::Procured));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record in the <c>CostVarianceChartTmp</c> table based on the <c>CostStatementCache</c> buffer.
    /// </summary>
    /// <param name = "_varianceData">
    /// The <c>CostVarianceChartTmp</c> table buffer.
    /// </param>
    /// <param name = "_viewRecord">
    /// The <c>CostStatementCache</c> buffer containing the source data.
    /// </param>
    protected void insertRecord(CostVarianceChartTmp _varianceData, CostStatementCache _costStatementCache)
    {
        _varianceData.VarianceTextDataseries = "@SYS14465";
        _varianceData.VarianceTypeString = enum2Str(_costStatementCache.StatementLineCategoryLevel3);
        _varianceData.Amount = _costStatementCache.Amount;

        _varianceData.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>