<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationRecalculationEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationRecalculationEventHandler</c> class monitors changes that impact the tax indirectly.
/// </summary>
final internal class TaxIntegrationRecalculationEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>transportationDocument_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the state of the related purchase orders when the <c>TransportationDocument</c> updated.
    /// </summary>
    /// <param name="_sender">The <c>TransportationDocument</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [Hookable(false), DataEventHandler(tableStr(TransportationDocument), DataEventType::Updated)]
    public static void transportationDocument_onUpdated(Common _sender, DataEventArgs _e)
    {
        TransportationDocument transportationDocument = _sender;
        TransportationDocument transportationDocumentOrig = _sender.orig();

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
        {
            if (transportationDocument
                && transportationDocument.LoadedPostalAddress != transportationDocumentOrig.LoadedPostalAddress)
            {
                PurchTable purchTable;

                // Changing loading address for PO
                ttsbegin;
                while select forupdate purchTable
                    where purchTable.TransportationDocument == transportationDocument.RecId
                {
                    // By calling change() method, the document state of the PO will be reset, then the sales tax will be recalculated.
                    VersioningPurchaseOrder::newPurchaseOrder(purchTable).change(transportationDocument, transportationDocumentOrig);
                }
                ttscommit;

                VendInvoiceInfoTable vendInvoiceInfoTable;

                // Changing loading address for vendor pending invoice
                ttsbegin;
                while select TableId, RecId from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.TransportationDocument == transportationDocument.RecId
                {
                    // Delete the TaxUncommitted in order to recalculate tax after loading address changed.
                    TaxUncommitted::deleteForDocumentHeader(vendInvoiceInfoTable.TableId, vendInvoiceInfoTable.RecId, true, true);
                }
                ttscommit;
            }
        }

        if (transportationDocument
            && transportationDocument.LoadedPostalAddress != transportationDocumentOrig.LoadedPostalAddress)
        {
            CustInvoiceTable custInvoiceTable;

            // Changing loading address for free text invoice
            ttsbegin;
            while select TableId, RecId, ProjIntercompany from custInvoiceTable
                where custInvoiceTable.TransportationDocument == transportationDocument.RecId
            {
                if (custInvoiceTable.isTaxIntegrationEnabled())
                {
                    TaxUncommitted::deleteForDocumentHeader(custInvoiceTable.TableId, custInvoiceTable.RecId, true, true);
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>