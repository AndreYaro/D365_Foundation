<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentDataContract</c> class is the data contract class for the
///    <c>LeanDocumentServiceCreation</c> service.
/// </summary>
[DataContractAttribute]
class LeanDocumentDataContract implements SysPackable
{
    LeanKanbanJobStatus                     minimumJobStatus;
    EffectiveDate                           validFromDate;
    ExpirationDate                          validToDate;
    RefRecId                                purchAgreementHeader;
    VendAccount                             vendAccount;
    KanbanRuleRefRecId                      kanbanRule;
    PlanActivityRefRecId                    planActivity;
    PlanReferenceRefRecId                   planReference;
    LeanDocumentLinesAggregationMode        aggregationMode;
    boolean                                 createPurchaseOrders;
    boolean                                 createReceiptAdvices;
    LegalEntity                             legalEntity;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        minimumJobStatus,
        validFromDate,
        validToDate,
        purchAgreementHeader,
        vendAccount,
        kanbanRule,
        planActivity,
        planReference,
        aggregationMode,
        createPurchaseOrders,
        createReceiptAdvices,
        legalEntity
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the state of the object.
    /// </summary>
    public void clear()
    {
        minimumJobStatus        = LeanKanbanJobStatus::InProgress;
        validFromDate           = dateNull();
        validToDate             = dateNull();
        purchAgreementHeader    = 0;
        vendAccount             = '';
        kanbanRule              = 0;
        planActivity            = 0;
        planReference           = 0;
        aggregationMode         = LeanDocumentLinesAggregationMode::None;
        createPurchaseOrders    = false;
        createReceiptAdvices    = false;
        legalEntity             = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The other object.
    /// </param>
    /// <returns>
    ///    true if the two objects hold the same state; otherwise, false.
    /// </returns>
    public boolean equals(System.Object otherObject)
    {
        LeanDocumentDataContract otherContract = otherObject;

        return otherContract == this
                || ( otherContract != null
                        && minimumJobStatus == otherContract.parmMinimumJobStatus()
                        && validFromDate == otherContract.parmValidFromDate()
                        && validToDate == otherContract.parmValidToDate()
                        && purchAgreementHeader == otherContract.parmPurchAgreementHeader()
                        && vendAccount == otherContract.parmVendAccount()
                        && kanbanRule == otherContract.parmKanbanRule()
                        && planActivity == otherContract.parmPlanActivity()
                        && planReference == otherContract.parmPlanReference()
                        && aggregationMode == otherContract.parmAggregationMode()
                        && createPurchaseOrders == otherContract.parmCreatePurchaseOrders()
                        && createReceiptAdvices == otherContract.parmCreateReceiptAdvices());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides default initialization for contract members.
    /// </summary>
    public void initDefaultValues()
    {
        legalEntity             = CompanyInfo::current();
        aggregationMode         = LeanDocumentLinesAggregationMode::None;
        createPurchaseOrders    = true;
        createReceiptAdvices    = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValuesUI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default values when the contract is used from the service user interface.
    /// </summary>
    public void initValuesUI()
    {
        validFromDate       = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        validToDate         = validFromDate;
        minimumJobStatus    = LeanKanbanJobStatus::Planned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.initDefaultValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion, #currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAggregationMode</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public LeanDocumentLinesAggregationMode parmAggregationMode(LeanDocumentLinesAggregationMode _aggregationMode = aggregationMode)
    {
        aggregationMode = _aggregationMode;

        return aggregationMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreatePurchaseOrders</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmCreatePurchaseOrders(boolean _createPurchaseOrders = createPurchaseOrders)
    {
        createPurchaseOrders = _createPurchaseOrders;

        return createPurchaseOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateReceiptAdvices</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmCreateReceiptAdvices(boolean _createReceiptAdvices = createReceiptAdvices)
    {
        createReceiptAdvices = _createReceiptAdvices;

        return createReceiptAdvices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public KanbanRuleRefRecId parmKanbanRule(KanbanRuleRefRecId _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;

        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    public LegalEntity parmLegalEntity(LegalEntity _legalEntity = legalEntity)
    {
        legalEntity = _legalEntity;

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinimumJobStatus</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public LeanKanbanJobStatus parmMinimumJobStatus(LeanKanbanJobStatus _minimumJobStatus = minimumJobStatus)
    {
        minimumJobStatus = _minimumJobStatus;

        return minimumJobStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanActivity</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public PlanActivityRefRecId parmPlanActivity(PlanActivityRefRecId _planActivity = planActivity)
    {
        planActivity = _planActivity;

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanReference</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public PlanReferenceRefRecId parmPlanReference(PlanReferenceRefRecId _planReference = planReference)
    {
        planReference = _planReference;

        return planReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchAgreementHeader</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public RefRecId parmPurchAgreementHeader(RefRecId _purchAgreementHeader = purchAgreementHeader)
    {
        purchAgreementHeader = _purchAgreementHeader;

        return purchAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidFromDate</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public EffectiveDate parmValidFromDate(EffectiveDate _validFromDate = validFromDate)
    {
        validFromDate = _validFromDate;

        return validFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidToDate</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ExpirationDate parmValidToDate(ExpirationDate _validToDate = validToDate)
    {
        validToDate = _validToDate;

        return validToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public VendAccount parmVendAccount(VendAccount _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;

        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int     version = RunBase::getVersion(_packedClass);
        boolean result  = false;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                result = true;
                break;

            default :
                result = false;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>