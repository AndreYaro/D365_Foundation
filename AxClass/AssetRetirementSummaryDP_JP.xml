<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetRetirementSummaryDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetRetirementSummaryDP_JP</c> class declares the global variables and tables.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetRetirementSummary_JP)),
    SRSReportParameterAttribute(classstr(AssetRetirementSummaryContract_JP))
]
public class AssetRetirementSummaryDP_JP extends SrsReportDataProviderPreProcessTempDB
{
    AssetRetirementSummaryTmp_JP assetRetirementSummaryTmp;
    Map summaryMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetRetirementSummaryTmp_JP</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>AssetRetirementSummaryTmp_JP</c> table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>AssetRetirementSummaryTmp_JP</c> table for the report.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetRetirementSummaryTmp_JP))
    ]
    public AssetRetirementSummaryTmp_JP getAssetRetirementSummaryTmp_JP()
    {
        select assetRetirementSummaryTmp;
        return assetRetirementSummaryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummaryTmpBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the summary buffer.
    /// </summary>
    /// <param name="_documentId">
    /// The document id.
    /// </param>
    /// <returns>
    /// The summary buffer.
    /// </returns>
    private AssetRetirementSummaryTmp_JP getSummaryTmpBuffer(AssetDocumentId_JP _documentId)
    {
        AssetRetirementSummaryTmp_JP summaryLocal;

        if (summaryMap.exists(_documentId))
        {
            summaryLocal = summaryMap.lookup(_documentId);
        }
        summaryLocal.DocumentId = _documentId;

        return summaryLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSummaryTmpBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts summary buffer.
    /// </summary>
    /// <param name="_documentId">
    /// The document id.
    /// </param>
    /// <param name="_summaryTmp">
    /// The summary buffer.
    /// </param>
    private void insertSummaryTmpBuffer(
        AssetDocumentId_JP _documentId,
        AssetRetirementSummaryTmp_JP _summaryTmp)
    {
        summaryMap.insert(_documentId, _summaryTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();
        summaryMap = new Map(Types::String, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates result.
    /// </summary>
    private void populateResult()
    {
        MapEnumerator mapEnum = summaryMap.getEnumerator();
        while (mapEnum.moveNext())
        {
            assetRetirementSummaryTmp.data(mapEnum.currentValue());
            assetRetirementSummaryTmp.Description = AssetDocumentTable_JP::findByDocumentId(AssetDocumentMainType_JP::AssetRetirementObligation, assetRetirementSummaryTmp.DocumentId).Description;
            assetRetirementSummaryTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the required data for the report.
    /// </summary>
    public void processReport()
    {
        Query q = new Query(this.parmQuery());
        AssetRetirementSummaryContract_JP   contract = this.parmDataContract() as AssetRetirementSummaryContract_JP;
        AssetRetirementSumCalculation_JP    sumCalculation = AssetRetirementSumCalculation_JP::construct();
        AssetRetirementSumCalcResultTmp_JP  startingAll;
        AssetRetirementSumCalcResultTmp_JP  startingDisposaled;
        AssetRetirementSumCalcResultTmp_JP  periodAll;
        AssetRetirementSumCalcResultTmp_JP  periodDisposaled;
        AssetRetirementSummaryTmp_JP        summaryTmpLocal;

        sumCalculation.parmAssetBookId(contract.parmAssetBookId());
        sumCalculation.parmSearchQuery(q);
        sumCalculation.parmOnlyIncludeLiability(true);

        //starting
        sumCalculation.parmFromDate(dateNull());
        sumCalculation.parmToDate(contract.parmFromDate() - 1);
        sumCalculation.parmIsSearchRetired(false);
        startingAll = sumCalculation.calculate();

        //starting disposaled
        sumCalculation.parmFromDate(dateNull());
        sumCalculation.parmToDate(contract.parmFromDate() - 1);
        sumCalculation.parmIsSearchRetired(true);
        startingDisposaled = sumCalculation.calculate();

        //period
        sumCalculation.parmFromDate(contract.parmFromDate());
        sumCalculation.parmToDate(contract.parmToDate());
        sumCalculation.parmIsSearchRetired(false);
        periodAll = sumCalculation.calculate();

        //period disposaled
        sumCalculation.parmFromDate(contract.parmFromDate());
        sumCalculation.parmToDate(contract.parmToDate());
        sumCalculation.parmIsSearchRetired(true);
        periodDisposaled = sumCalculation.calculate();

        //starting, ending and settled
        while select sum(Amount) from startingAll
            group by startingAll.DocumentId
        {
            summaryTmpLocal = this.getSummaryTmpBuffer(startingAll.DocumentId);
            summaryTmpLocal.OpenningBlanceAmount = startingAll.Amount;
            summaryTmpLocal.EndingBlanceAmount = summaryTmpLocal.OpenningBlanceAmount;
            this.insertSummaryTmpBuffer(startingAll.DocumentId, summaryTmpLocal);
        }

        while select sum(Amount)from startingDisposaled
            group by startingDisposaled.DocumentId
        {
            summaryTmpLocal = this.getSummaryTmpBuffer(startingDisposaled.DocumentId);
            summaryTmpLocal.OpenningBlanceAmount = summaryTmpLocal.OpenningBlanceAmount - startingDisposaled.Amount;
            summaryTmpLocal.EndingBlanceAmount = summaryTmpLocal.OpenningBlanceAmount;
            this.insertSummaryTmpBuffer(startingDisposaled.DocumentId, summaryTmpLocal);
        }

        while select sum(Amount) from periodDisposaled
            group by periodDisposaled.DocumentId
        {
            summaryTmpLocal = this.getSummaryTmpBuffer(periodDisposaled.DocumentId);
            summaryTmpLocal.RetiredAmount = -periodDisposaled.Amount;
            summaryTmpLocal.EndingBlanceAmount += summaryTmpLocal.RetiredAmount;
            this.insertSummaryTmpBuffer(periodDisposaled.DocumentId, summaryTmpLocal);
        }

        //period
        while select periodAll
        {
            summaryTmpLocal = this.getSummaryTmpBuffer(periodAll.DocumentId);

            switch (periodAll.Type)
            {
                case AssetRetirementObligationResultType_JP::Aquisition:
                    summaryTmpLocal.AquisitionAmount = periodAll.Amount;
                    break;

                case AssetRetirementObligationResultType_JP::Upward:
                    summaryTmpLocal.UpwardAmount = periodAll.Amount;
                    break;

                case AssetRetirementObligationResultType_JP::Downward:
                    summaryTmpLocal.DownwardAmount = periodAll.Amount;
                    break;

                case AssetRetirementObligationResultType_JP::Interest:
                    summaryTmpLocal.InterestAmount = periodAll.Amount;
                    break;
            }
            summaryTmpLocal.EndingBlanceAmount += periodAll.Amount;
            this.insertSummaryTmpBuffer(periodAll.DocumentId, summaryTmpLocal);
        }

        this.populateResult();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>