<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPriceOverviewContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for InventPriceOverview SSRS report
/// </summary>
/// <remarks>
/// This is the Data Contract class for the InventPriceOverview SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(InventPriceOverviewUIBuilder), SysOperationDataContractProcessingMode::CreateSeparateUIBuilderForEachContract)
]
public class InventPriceOverviewContract implements SysOperationValidatable
{
    FromDate                asPerDate;
    InventItemCostingType   inventItemCostingType;
    CostingVersionId        costingVersionId;
    InventSiteId            inventSiteId;
    boolean                 activePrices;
    boolean                 fallback;
    InventDimViewContract   inventDimViewContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmActivePrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ActivePrices.
    /// </summary>
    /// <param name="_activePrices">
    /// The new value of the datacontract parameter ActivePrices; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ActivePrices
    /// </returns>
    [
        DataMemberAttribute('ActivePrices'),
        SysOperationLabelAttribute(literalStr("@SYS24676")),
        SysOperationHelpTextAttribute(literalStr("@SYS109230"))
    ]
    public boolean parmActivePrices(boolean _activePrices = activePrices)
    {
        activePrices = _activePrices;
        return activePrices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAsPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter AsPerDate.
    /// </summary>
    /// <param name="_asPerDate">
    /// The new value of the datacontract parameter AsPerDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter AsPerDate
    /// </returns>
    [
        DataMemberAttribute('AsPerDate'),
        SysOperationLabelAttribute(literalStr("@SYS117038"))
    ]
    public FromDate parmAsPerDate(FromDate _asPerDate = asPerDate)
    {
        asPerDate = _asPerDate;
        return asPerDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostingVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter CostingVersionId.
    /// </summary>
    /// <param name="_costingVersionId">
    /// The new value of the datacontract parameter CostingVersionId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter CostingVersionId
    /// </returns>
    [DataMemberAttribute('CostingVersionId')]
    public CostingVersionId parmCostingVersionId(CostingVersionId _costingVersionId = costingVersionId)
    {
        costingVersionId = _costingVersionId;
        return costingVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFallback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Fallback.
    /// </summary>
    /// <param name="_fallback">
    /// The new value of the datacontract parameter Fallback; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Fallback
    /// </returns>
    [
        DataMemberAttribute('Fallback'),
        SysOperationLabelAttribute(literalStr("@SYS106179")),
        SysOperationHelpTextAttribute(literalStr("@SYS104633"))
    ]
    public boolean parmFallback(boolean _fallback = fallback)
    {
        fallback = _fallback;
        return fallback;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimViewContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter InventDimViewContract.
    /// </summary>
    /// <param name="_inventDimViewContract">
    /// The new value of the datacontract parameter InventDimViewContract; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter InventDimViewContract.
    /// </returns>
    [
        DataMemberAttribute('InventDimViewContract')
    ]
    public InventDimViewContract parmInventDimViewContract(InventDimViewContract _inventDimViewContract = inventDimViewContract)
    {
        inventDimViewContract = _inventDimViewContract;

        return inventDimViewContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventItemCostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter InventItemCostingType.
    /// </summary>
    /// <param name="_inventItemCostingType">
    /// The new value of the datacontract parameter InventItemCostingType; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter InventItemCostingType
    /// </returns>
    [DataMemberAttribute('InventItemCostingType')]
    public InventItemCostingType parmInventItemCostingType(InventItemCostingType _inventItemCostingType = inventItemCostingType)
    {
        inventItemCostingType = _inventItemCostingType;
        return inventItemCostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter InventSiteId.
    /// </summary>
    /// <param name="_inventSiteId">
    /// The new value of the datacontract parameter InventSiteId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter InventSiteId
    /// </returns>
    [DataMemberAttribute('InventSiteId')]
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    ///    true if the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean                 isValid = true;

        // If Version is selected, the Version filter is mandatory
        if (!activePrices)
        {
            if (!costingVersionId)
            {
                isValid = checkFailed("@SYS117034");
            }
            else
            {
                CostingVersion costingVersion = CostingVersion::find(costingVersionId);

                if (!costingVersion)
                {
                    isValid     = checkFailed(strFmt("@SYS117035",costingVersionId));
                }
                else
                {
                    if (fallback && !costingVersion.bomFallBackVersion)
                    {
                        isValid = checkFailed(strFmt("@SYS117036",costingVersionId));
                    }
                }
            }
        }

        // Site should be a valid one, or the field should be left empty
        if (inventSiteId)
        {
            if (!InventSite::exist(inventSiteId))
            {
                 isValid = checkFailed(strFmt("@SYS111931", inventSiteId));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventPriceOverviewContract construct()
    {
        return new InventPriceOverviewContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
