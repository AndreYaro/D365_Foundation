<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectItemJournalExcelTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjectItemJournalExcelTemplate
{
    private const GlobalObjectCacheScope ProjectItemJournalExcelTemplatesCacheScope = 'ProjectItemJournalExcelTemplatesCacheScope';

}

]]></Declaration>
		<Methods>
			<Method>
				<Name>isJournalTypeSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a boolean value indicating whether the journal type has an excel template which supports it.
    /// </summary>
    /// <param name = "_inventJournalType">The <c>InventJournalType</c> value.</param>
    /// <returns>True if an excel template exists for the journal type; otherwise, false.</returns>
    public static boolean isJournalTypeSupported(InventJournalType _inventJournalType)
    {
        Set journalTemplates = ProjectItemJournalExcelTemplate::getProjectItemJournalExcelTemplates();
        SetEnumerator journalTemplateEnumerator = journalTemplates.getEnumerator();
        boolean isSupported = false;

        while (journalTemplateEnumerator.moveNext())
        {
            SysDictClass sysDictClass = new SysDictClass(journalTemplateEnumerator.current());

            if (!sysDictClass.isInterface())
            {
                ProjectIItemJournalExcelTemplate template = sysDictClass.makeObject();

                if (template.isJournalTypeSupported(_inventJournalType))
                {
                    isSupported = true;

                    break;
                }
            }
        }

        return isSupported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectItemJournalExcelTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of class ids which implement the <c>ProjectIItemJournalExcelTemplate</c> interface.
    /// </summary>
    /// <returns>The collection of implemented class ids.</returns>
    public static Set getProjectItemJournalExcelTemplates()
    {
        Set projectItemJournalExcelTemplates;
        const str CacheKey = 'ProjectItemJournalExcelTemplates';

        container cachedValue = ProjectItemJournalExcelTemplate::getCacheValue(ProjectItemJournalExcelTemplatesCacheScope, CacheKey);

        if (cachedValue == conNull())
        {
            projectItemJournalExcelTemplates = SysDictClass::getImplements(classNum(ProjectIItemJournalExcelTemplate));

            ProjectItemJournalExcelTemplate::insertCacheValue(ProjectItemJournalExcelTemplatesCacheScope, CacheKey, projectItemJournalExcelTemplates.pack());
        }
        else
        {
            projectItemJournalExcelTemplates = Set::create(cachedValue);
        }

        return projectItemJournalExcelTemplates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectItemJournalExcelTemplatesForJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of document template names for the <c>InventJournalType</c>.
    /// </summary>
    /// <param name = "_journalType">
    /// The <c>ProjJournalType.</c>
    /// </param>
    /// <returns>The collection of document template ids.</returns>
    public static Set getProjectItemJournalExcelTemplatesForJournalType(InventJournalType _journalType)
    {
        Set projectItemJournalExcelTemplatesForType;
        str cacheKey = strFmt('ProjectItemJournalExcelTemplates_%1', _journalType);

        container cachedValue = ProjectItemJournalExcelTemplate::getCacheValue(ProjectItemJournalExcelTemplatesCacheScope, cacheKey);

        if (cachedValue == conNull())
        {
            Set journalTemplates = ProjectItemJournalExcelTemplate::getProjectItemJournalExcelTemplates();
            SetEnumerator journalTemplateEnumerator = journalTemplates.getEnumerator();
            projectItemJournalExcelTemplatesForType = new Set(Types::String);

            while (journalTemplateEnumerator.moveNext())
            {
                SysDictClass sysDictClass = new SysDictClass(journalTemplateEnumerator.current());

                if (!sysDictClass.isInterface())
                {
                    ProjectIItemJournalExcelTemplate template = sysDictClass.makeObject();

                    if (template.isJournalTypeSupported(_journalType))
                    {
                        projectItemJournalExcelTemplatesForType.add(template.documentTemplateName());
                    }
                }
            }

            ProjectItemJournalExcelTemplate::insertCacheValue(ProjectItemJournalExcelTemplatesCacheScope, cacheKey, ProjectItemJournalExcelTemplatesForType.pack());
        }
        else
        {
            projectItemJournalExcelTemplatesForType = Set::create(cachedValue);
        }

        return projectItemJournalExcelTemplatesForType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForTemplateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of an <c>ProjectIItemJournalExcelTemplate</c> from the template name.
    /// </summary>
    /// <param name = "_documentTemplateName">The document template name.</param>
    /// <returns>The <c>ProjectIItemJournalExcelTemplate</c> instance.</returns>
    public static ProjectIItemJournalExcelTemplate constructForTemplateName(DocuTemplateName _documentTemplateName)
    {
        ProjectIItemJournalExcelTemplate projectIItemJournalExcelTemplate;
        Set journalTemplates = ProjectItemJournalExcelTemplate::getProjectItemJournalExcelTemplates();

        SetEnumerator journalTemplateEnumerator = journalTemplates.getEnumerator();

        while (journalTemplateEnumerator.moveNext())
        {
            SysDictClass sysDictClass = new SysDictClass(journalTemplateEnumerator.current());

            if (!sysDictClass.isInterface())
            {
                projectIItemJournalExcelTemplate = sysDictClass.makeObject();

                if (projectIItemJournalExcelTemplate.documentTemplateName() == _documentTemplateName)
                {
                    break;
                }
            }
        }

        return projectIItemJournalExcelTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterMapForTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a filter collection to apply to the template.
    /// </summary>
    /// <param name = "_excelTemplate">The <c>ProjectIItemJournalExcelTemplate</c>instance.</param>
    /// <param name = "_projJournalTable">The <c>ProjJournalTable</c> record.</param>
    /// <returns>A map with filter instructions for the header and line entity.</returns>
    public static Map getFilterMapForTemplate(
        ProjectIItemJournalExcelTemplate _excelTemplate,
        InventJournalTable _inventJournalTable)
    {
        Map filtersToApply = new Map(Types::String, Types::Class);

        ExportToExcelFilterTreeBuilder headerFilterBuilder = new ExportToExcelFilterTreeBuilder(_excelTemplate.headerEntityName());

        Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode headerFilter = headerFilterBuilder.and(
                headerFilterBuilder.areEqual(_excelTemplate.headerJournalIdFieldName(), _inventJournalTable.JournalId),
                headerFilterBuilder.areEqual(_excelTemplate.headerDataAreaFieldName(), _inventJournalTable.DataAreaId));

        headerFilter = _excelTemplate.appendHeaderEntityFilters(headerFilter, headerFilterBuilder);

        filtersToApply.insert(_excelTemplate.headerEntityName(), headerFilter);

        ExportToExcelFilterTreeBuilder lineFilterBuilder = new ExportToExcelFilterTreeBuilder(_excelTemplate.lineEntityName());

        Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode lineFilter = lineFilterBuilder.and(
                lineFilterBuilder.areEqual(_excelTemplate.lineJournalIdFieldName(), _inventJournalTable.JournalId),
                lineFilterBuilder.areEqual(_excelTemplate.lineDataAreaFieldName(), _inventJournalTable.DataAreaId));

        lineFilter = _excelTemplate.appendLineEntityFilters(lineFilter, lineFilterBuilder);

        filtersToApply.insert(_excelTemplate.lineEntityName(), lineFilter);

        return filtersToApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheValue</Name>
				<Source><![CDATA[
    private static container getCacheValue(GlobalObjectCacheScope _scope, str _key)
    {
        SysGlobalObjectCache c;

        if (classfactory)
        {
            c = classfactory.globalObjectCache();
        }
        else
        {
            c = new SysGlobalObjectCache();
        }

        return c.find(_scope, [_key]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCacheValue</Name>
				<Source><![CDATA[
    private static void insertCacheValue(GlobalObjectCacheScope _scope, str _key, container _value)
    {
        SysGlobalObjectCache c;

        if (classfactory)
        {
            c = classfactory.globalObjectCache();
        }
        else
        {
            c = new SysGlobalObjectCache();
        }

        c.insert(_scope, [_key], _value);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>