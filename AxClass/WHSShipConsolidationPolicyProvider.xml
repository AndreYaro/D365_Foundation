<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationPolicyProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConsolidationPolicyProvider</c> class is responsible for providing shipment consolidation policy requirements.
/// </summary>
[Wrappable(false)]
public static class WHSShipConsolidationPolicyProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCriteriaQueryFromPolicyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds shipment consolidation policy criteria query from work transaction type.
    /// </summary>
    /// <param name="_policyType">
    /// Shipment consolidation policy type that the query will be based on.
    /// </param>
    /// <returns>
    /// The shipment consolidation policy query.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the work type is not supported.
    /// </exception>
    public static Query buildCriteriaQueryFromPolicyType(WHSShipConsolidationPolicyType _policyType)
    {
        WHSShipConsolidationPolicyTypeProvider  policyTypeProvider = WHSShipConsolidationPolicyTypeProvider::singletonFromType(_policyType);
        Query                                   query;

        if (policyTypeProvider)
        {
            QueryName queryName = policyTypeProvider.shipmentConsolidationPolicyCriteriaQueryName();

            if (queryName)
            {
                query = new Query(queryName);
            
                if (query)
                {
                    return query;
                }
            }
        }

        throw error(strFmt("@WAX:ShipmentConsolidationPolicyIsNotSupported", _policyType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProcessQueryFromPolicyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds shipment consolidation policy process query from work transaction type.
    /// </summary>
    /// <param name="_policyType">
    /// Shipment consolidation policy type that the query will be based on.
    /// </param>
    /// <returns>
    /// The shipment consolidation policy query.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the work type is not supported.
    /// </exception>
    public static Query buildProcessQueryFromPolicyType(WHSShipConsolidationPolicyType _policyType)
    {
        WHSShipConsolidationPolicyTypeProvider  policyTypeProvider = WHSShipConsolidationPolicyTypeProvider::singletonFromType(_policyType);
        Query                                   query;

        if (policyTypeProvider)
        {
            QueryName queryName = policyTypeProvider.shipmentConsolidationPolicyProcessQueryName();

            if (queryName)
            {
                query = new Query(queryName);
            
                if (query)
                {
                    findOrCreateRange_W(query.dataSourceTable(tableNum(WHSShipmentTable)), fieldNum(WHSShipmentTable, WorkTransType), SysQuery::value(WHSShipConsolidationPolicyTypeProvider::singletonFromType(_policyType).workTransType()));

                    return query;
                }
            }
        }

        throw error(strFmt("@WAX:ShipmentConsolidationPolicyIsNotSupported", _policyType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultConsolidationPolicyDataToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a default shipment consolidation policy.
    /// </summary>
    /// <param name="_policyType">A shipment consolidation policy type.</param>
    /// <returns>A default shipment consolidation policy.</returns>
    [Hookable(false), Wrappable(False)]
    public static WHSShipConsolidationPolicyData defaultConsolidationPolicyDataToProcess(WHSShipConsolidationPolicyType _policyType)
    {
        return WHSShipConsolidationPolicyData::constructDefaultToProcess(_policyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultConsolidationPolicyDataListToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a default shipment consolidation policy list.
    /// </summary>
    /// <param name="_policyType">A shipment consolidation policy type.</param>
    /// <param name="_shipConsolidationPolicyCreateApproach">
    /// Shipment consolidation creation approach.
    /// </param>
    /// <returns>A default shipment consolidation policy list.</returns>
    [Hookable(false)]
    internal static List<WHSShipConsolidationPolicyData> defaultConsolidationPolicyDataListToProcess(WHSShipConsolidationPolicyType _policyType, WHSShipConsolidationPolicyCreateApproach _shipConsolidationPolicyCreateApproach)
    {
        List shipConsolidationPolies = new List(Types::Class);
        WHSShipConsolidationPolicyCreator shipConsolidationPolicyCreator = WHSShipConsolidationPolicyCreator::newFromPolicyCreateDefaultType(_shipConsolidationPolicyCreateApproach);

        shipConsolidationPolicyCreator.createAndAddPolicyData2List(shipConsolidationPolies, '', _policyType, '', true);
        shipConsolidationPolicyCreator.createAndAddPolicyData2List(shipConsolidationPolies, '', _policyType, '', false);

        return shipConsolidationPolies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentConsolidationPolicyForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the shipment consolidation policy that should be used when evaluating the sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line.
    /// </param>
    /// <returns>
    /// The shipment consolidation policy that should be used when evaluating the sales line.
    /// </returns>
    public static WHSShipConsolidationPolicy getShipmentConsolidationPolicyForSalesLine(SalesLine _salesLine)
    {
        WHSLoadLine                         loadLine;
        WHSShipConsolidationPolicy          shipConsolidationPolicy;
        WHSWarehouseReleaseQueryBuilder     warehouseReleaseQueryBuilder = WHSWarehouseReleaseQueryBuilder::construct();

        loadLine.setTmp();

        loadLine.initValue();
        loadLine.initFromSalesLine(_salesLine);
        loadLine.ReleaseToWarehouseId = '';
        loadLine.doInsert();

        while select shipConsolidationPolicy
            order by ShipConsolidationPolicySeqNum asc
            where shipConsolidationPolicy.ShipConsolidationPolicyType == WHSShipConsolidationPolicyType::Sales
            &&    shipConsolidationPolicy.Valid
        {
            WHSShipConsolidationPolicyData shipConsolidationPolicyData = WHSShipConsolidationPolicyData::construct(shipConsolidationPolicy);
            Query       query = warehouseReleaseQueryBuilder.buildSalesOrderQueryForReleaseToWarehouseIdAndPolicy(shipConsolidationPolicyData, '');
            QueryRun    queryRun = new QueryRun(query);

            queryRun.query().firstOnly1(true);
            queryRun.setCursor(loadLine);
            findOrCreateRange_W(queryRun.query().dataSourceTable(tableNum(SalesLine)), fieldNum(SalesLine, RecId), SysQuery::value(_salesLine.RecId));

            if (queryRun.next())
            {
                return shipConsolidationPolicy;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentConsolidationPolicyForTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the shipment consolidation policy that should be used when evaluating the transfer line.
    /// </summary>
    /// <param name="_transferLine">
    /// The transfer line.
    /// </param>
    /// <returns>
    /// The shipment consolidation policy that should be used when evaluating the transfer line.
    /// </returns>
    public static WHSShipConsolidationPolicy getShipmentConsolidationPolicyForTransferLine(InventTransferLine _transferLine)
    {
        WHSLoadLine                         loadLine;
        WHSShipConsolidationPolicy          shipConsolidationPolicy;
        WHSWarehouseReleaseQueryBuilder     warehouseReleaseQueryBuilder = WHSWarehouseReleaseQueryBuilder::construct();

        loadLine.setTmp();

        loadLine.initValue();
        loadLine.initFromTransferLine(_transferLine);
        loadLine.ReleaseToWarehouseId = '';
        loadLine.doInsert();

        while select shipConsolidationPolicy
            order by ShipConsolidationPolicySeqNum asc
            where shipConsolidationPolicy.ShipConsolidationPolicyType == WHSShipConsolidationPolicyType::TransferIssue
            &&    shipConsolidationPolicy.Valid
        {
            WHSShipConsolidationPolicyData shipConsolidationPolicyData = WHSShipConsolidationPolicyData::construct(shipConsolidationPolicy);
            Query       query = warehouseReleaseQueryBuilder.buildTransferIssueQueryForReleaseToWarehouseIdAndPolicy(shipConsolidationPolicyData, '');
            QueryRun    queryRun = new QueryRun(query);

            queryRun.query().firstOnly1(true);
            queryRun.setCursor(loadLine);
            findOrCreateRange_W(queryRun.query().dataSourceTable(tableNum(InventTransferLine)), fieldNum(InventTransferLine, RecId), SysQuery::value(_transferLine.RecId));

            if (queryRun.next())
            {
                return shipConsolidationPolicy;
            }
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>