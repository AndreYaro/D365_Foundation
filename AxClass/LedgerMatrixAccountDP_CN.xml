<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerMatrixAccountDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MatrixAccountReportDP</c> class is the base Report Data Provider class.
/// </summary>
/// <remarks>
/// This is the RDP class for the General Ledger MatrixAccountingReport SRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(LedgerMatrixAccountContract_CN))
]
class LedgerMatrixAccountDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    LedgerMatrixAccountContract_CN          contract;

    LedgerMatrixReportTmp_CN                ledgerMatrixReportTmp;
    LedgerMatrixReportTmpParameter_CN       ledgerMatrixReportTmpParameter;

    LedgerMatrixId_CN                       matrixId;
    FromDate                                fromDate;
    ToDate                                  toDate;
    CurrentOperationsTax                    postingLayer;
    real                                    openingBalance;
    boolean                                 isChineseVoucher;

    #define.beginRow(-1)
    #define.detailRow(0)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerMatrixReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>LedgerMatrixReportTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>LedgerMatrixReportTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerMatrixReportTmp_CN))
    ]
    public LedgerMatrixReportTmp_CN getLedgerMatrixReportTmp()
    {
        return ledgerMatrixReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerMatrixReportTmpParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>LedgerMatrixReportParameterTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>LedgerMatrixReportParameterTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerMatrixReportTmpParameter_CN))
    ]
    public LedgerMatrixReportTmpParameter_CN getLedgerMatrixReportTmpParameter()
    {
        return ledgerMatrixReportTmpParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes parameters
    /// </summary>
    protected void initParameters()
    {
        //Initializes contract class
        contract = this.parmDataContract();

        matrixId        = contract.parmAccountMatrix();
        fromDate        = contract.parmFromDate();
        toDate          = contract.parmToDate();
        postingLayer    = contract.parmPostingLayer();

        //initializes the isChineseVoucher
        isChineseVoucher = LedgerParameters::isChineseVoucher_CN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMatrixParametersTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the LedgerMatrixReportParameterTmp temporary table.
    /// </summary>
    protected void insertMatrixParametersTmpTable()
    {
        MainAccount     mainAccountLocal = MainAccount::find(LedgerMatrixTable_CN::findByMatrixId(matrixId).MainAccount);

        ledgerMatrixReportTmpParameter.MatrixId             = matrixId;
        ledgerMatrixReportTmpParameter.FromDate             = fromDate;
        ledgerMatrixReportTmpParameter.ToDate               = toDate;
        ledgerMatrixReportTmpParameter.IsChineseVoucher     = isChineseVoucher;
        ledgerMatrixReportTmpParameter.MainAccountId        = mainAccountLocal.MainAccountId;
        ledgerMatrixReportTmpParameter.MainAccountName      = mainAccountLocal.localizedName();
        ledgerMatrixReportTmpParameter.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMatrixReportTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the LedgerMatrixReportTmp temporary table.
    /// </summary>
    protected void insertMatrixReportTmpTable()
    {
        // Get beginning balance data
        this.processingBeginningBalance();
        // Get transactions which in selected period
        this.processingTransactionData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTemporaryTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts all the temporary tables.
    /// </summary>
    protected void insertTemporaryTables()
    {
        this.insertMatrixParametersTmpTable();

        this.insertMatrixReportTmpTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingBeginningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes query and get datas to initializes the LedgerMatrixReportTmp temporary table for beginning row.
    /// </summary>
    protected void processingBeginningBalance()
    {
        Query                                   query;
        QueryRun                                queryRun;

        MainAccount                             mainAccountLocal;
        LedgerMatrixTable_CN                    matrixTableLocal;
        GeneralJournalLedgerVoucherView_CN      generalJournalLedgerVoucherLocal;

        MainAccountNum                          mainAccountId;

        query = new Query(queryStr(LedgerMatrixAccountBalance_CN));

        SysQuery::findOrCreateRange(
            query.dataSourceTable(tableNum(LedgerMatrixTable_CN)),
            fieldNum(LedgerMatrixTable_CN, MatrixId)).value(matrixId);
        SysQuery::findOrCreateRange(
            query.dataSourceTable(tableNum(GeneralJournalLedgerVoucherView_CN)),
            fieldNum(GeneralJournalLedgerVoucherView_CN, AccountingDate)).value(queryRange(dateNull(), fromDate -1));
        SysQuery::findOrCreateRange(
            query.dataSourceTable(tableNum(GeneralJournalLedgerVoucherView_CN)),
            fieldNum(GeneralJournalLedgerVoucherView_CN, PostingLayer)).value(SysQuery::value(postingLayer));
        SysQuery::findOrCreateRange(
            query.dataSourceTable(tableNum(GeneralJournalLedgerVoucherView_CN)),
            fieldNum(GeneralJournalLedgerVoucherView_CN, Ledger)).value(SysQuery::value(Ledger::current()));

        queryRun = new QueryRun(query);
        ttsbegin;
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(LedgerMatrixTable_CN)))
            {
                matrixTableLocal = queryRun.get(tableNum(LedgerMatrixTable_CN));
            }
            if (queryRun.changed(tableNum(MainAccount)))
            {
                mainAccountLocal = queryRun.get(tableNum(MainAccount));
            }
            if (queryRun.changed(tableNum(GeneralJournalLedgerVoucherView_CN)))
            {
                generalJournalLedgerVoucherLocal = queryRun.get(tableNum(GeneralJournalLedgerVoucherView_CN));
            }

            if (mainAccountId != mainAccountLocal.MainAccountId)
            {
                mainAccountId = mainAccountLocal.MainAccountId;

                ledgerMatrixReportTmp.clear();

                ledgerMatrixReportTmp.MainAccountId = mainAccountId;
                ledgerMatrixReportTmp.Name          = mainAccountLocal.localizedName();
                ledgerMatrixReportTmp.SubLevelFor   = matrixTableLocal.SignDisplay;
                ledgerMatrixReportTmp.TransDate     = dateNull();
                ledgerMatrixReportTmp.DataSign      = #beginRow;
                ledgerMatrixReportTmp.insert();
            }
            if (generalJournalLedgerVoucherLocal.AmountMST != 0)
            {
                ledgerMatrixReportTmp.Balance += generalJournalLedgerVoucherLocal.AmountMST;

                if (generalJournalLedgerVoucherLocal.IsCredit   == NoYes::No
                    && matrixTableLocal.SignDisplay == AmountDisplaySign_CN::Debit)
                {
                    ledgerMatrixReportTmp.AmountMST += generalJournalLedgerVoucherLocal.AmountMST;
                }
                else if (generalJournalLedgerVoucherLocal.IsCredit   == NoYes::Yes
                    && matrixTableLocal.SignDisplay == AmountDisplaySign_CN::Credit)
                {
                    ledgerMatrixReportTmp.AmountMST += generalJournalLedgerVoucherLocal.AmountMST * -1;
                }
                //beginning balance
                openingBalance += generalJournalLedgerVoucherLocal.AmountMST;
                ledgerMatrixReportTmp.OpeningBalance = openingBalance;
                ledgerMatrixReportTmp.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingTransactionData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes query and get datas to initializes the LedgerMatrixReportTmp temporary table for transaction row.
    /// </summary>
    protected void processingTransactionData()
    {
        Query                                   query;
        QueryRun                                queryRun;

        LedgerMatrixTable_CN                    matrixTable;
        MainAccount                             mainAccount;
        GeneralJournalLedgerVoucherView_CN      generalJournalLedgerVoucherView;

        TransDate                               accountingDate;
        VoucherJournal                          voucherField;
        VoucherJournal                          voucher;
        Description                             description;

        real                                    balanceByVoucherAndDate = openingBalance;

        query = new Query(queryStr(LedgerMatrixAccountByVoucher_CN));
        query = LedgerMatrixAccountDP_CN::initQueryByMatrixAccount(query, contract);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            ledgerMatrixReportTmp.clear();
            if (queryRun.changed(tableNum(LedgerMatrixTable_CN)))
            {
                matrixTable = queryRun.get(tableNum(LedgerMatrixTable_CN));
            }
            if (queryRun.changed(tableNum(MainAccount)))
            {
                mainAccount = queryRun.get(tableNum(MainAccount));
            }
            if (queryRun.changed(tableNum(GeneralJournalLedgerVoucherView_CN)))
            {
                generalJournalLedgerVoucherView = queryRun.get(tableNum(GeneralJournalLedgerVoucherView_CN));
            }
            if (isChineseVoucher)
            {
                voucherField = generalJournalLedgerVoucherView.Voucher_CN;
            }
            else
            {
                voucherField = generalJournalLedgerVoucherView.Voucher;
            }
            //keep last row balance

            if (accountingDate   != generalJournalLedgerVoucherView.AccountingDate
                || voucher       != voucherField
                || description   != generalJournalLedgerVoucherView.Text)
            {
                accountingDate          = generalJournalLedgerVoucherView.AccountingDate;
                voucher                 = voucherField;
                description             = generalJournalLedgerVoucherView.Text;
                ledgerMatrixReportTmp.Balance = balanceByVoucherAndDate;
            }

            balanceByVoucherAndDate += generalJournalLedgerVoucherView.AmountMST;

            ledgerMatrixReportTmp.MainAccountId   = mainAccount.MainAccountId;
            ledgerMatrixReportTmp.Name            = mainAccount.localizedName();
            ledgerMatrixReportTmp.SubLevelFor     = matrixTable.SignDisplay;
            ledgerMatrixReportTmp.TransDate       = generalJournalLedgerVoucherView.AccountingDate;
            ledgerMatrixReportTmp.Month           = mthOfYr(generalJournalLedgerVoucherView.AccountingDate);
            ledgerMatrixReportTmp.Day             = dayOfMth(generalJournalLedgerVoucherView.AccountingDate);
            ledgerMatrixReportTmp.Voucher         = voucherField;
            ledgerMatrixReportTmp.Description     = description;
            ledgerMatrixReportTmp.OpeningBalance  = openingBalance;
            ledgerMatrixReportTmp.DataSign        = #detailRow;
            //Is debit
            if (generalJournalLedgerVoucherView.IsCredit)
            {
                ledgerMatrixReportTmp.Credit = generalJournalLedgerVoucherView.AmountMST * -1;
                if (matrixTable.SignDisplay == AmountDisplaySign_CN::Credit)
                {
                    ledgerMatrixReportTmp.AmountMST = ledgerMatrixReportTmp.Credit;
                }
            }
            else
            {
                ledgerMatrixReportTmp.Debit = generalJournalLedgerVoucherView.AmountMST;
                if (matrixTable.SignDisplay == AmountDisplaySign_CN::Debit)
                {
                    ledgerMatrixReportTmp.AmountMST = ledgerMatrixReportTmp.Debit;
                }
            }
            ledgerMatrixReportTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        this.initParameters();

        [fromDate, toDate] = LedgerMatrixReportHelper_CN::getFromToDateForYear(contract.parmFromDate(), contract.parmToDate());

        this.insertTemporaryTables();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryByMatrixAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize query by matrix account.
    /// </summary>
    /// <param name="_query">
    /// The query information.
    /// </param>
    /// <param name="_contract">
    /// The contract information.
    /// </param>
    /// <returns>
    /// The instance of the <c>Query</c> class.
    /// </returns>
    public static Query initQueryByMatrixAccount(Query _query, LedgerMatrixAccountContract_CN _contract)
    {
        LedgerMatrixId_CN       matrixId;
        FromDate                fromDate;
        ToDate                  toDate;
        CurrentOperationsTax    postingLayer;

        matrixId        = _contract.parmAccountMatrix();
        fromDate        = _contract.parmFromDate();
        toDate          = _contract.parmToDate();
        postingLayer    = _contract.parmPostingLayer();

        [fromDate, toDate] = LedgerMatrixReportHelper_CN::getFromToDateForYear(fromDate, toDate);
        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(LedgerMatrixTable_CN)),
            fieldNum(LedgerMatrixTable_CN, MatrixId)).value(matrixId);

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(GeneralJournalLedgerVoucherView_CN)),
            fieldNum(GeneralJournalLedgerVoucherView_CN, AccountingDate)).value(queryRange(fromDate, toDate));

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(GeneralJournalLedgerVoucherView_CN)),
            fieldNum(GeneralJournalLedgerVoucherView_CN, PostingLayer)).value(SysQuery::value(postingLayer));

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(GeneralJournalLedgerVoucherView_CN)),
            fieldNum(GeneralJournalLedgerVoucherView_CN, Ledger)).value(SysQuery::value(Ledger::current()));

        _query.dataSourceTable(tableNum(MainAccount)).addOrderByField(fieldNum(MainAccount, MainAccountId));
        _query.dataSourceTable(tableNum(GeneralJournalLedgerVoucherView_CN)).addOrderByField(fieldNum(GeneralJournalLedgerVoucherView_CN, AccountingDate));

        if (LedgerParameters::isChineseVoucher_CN())
        {
            _query.dataSourceTable(tableNum(GeneralJournalLedgerVoucherView_CN)).addOrderByField(fieldNum(GeneralJournalLedgerVoucherView_CN, Voucher_CN));
        }
        else
        {
            _query.dataSourceTable(tableNum(GeneralJournalLedgerVoucherView_CN)).addOrderByField(fieldNum(GeneralJournalLedgerVoucherView_CN, Voucher));
        }
        _query.dataSourceTable(tableNum(GeneralJournalLedgerVoucherView_CN)).addOrderByField(fieldNum(GeneralJournalLedgerVoucherView_CN, Text));
        _query.dataSourceTable(tableNum(LedgerMatrixTable_CN)).addOrderByField(fieldNum(LedgerMatrixTable_CN, SignDisplay));
        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>