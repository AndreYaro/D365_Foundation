<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAgingDataStorageService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustAgingDataStorageService extends SysOperationServiceBase
{
    private CustTmpAccountSum tmpAccountSum;
    private CustVendBalanceList custVendBalanceList;
    private CustAgingReportTmp custAgingReportTmp;
    private CustAgingDataStorageContract contract;
    private boolean isUsingBillingClassification;

    private ColumnTxt headingDate;
    private TransDate heading011;
    private TransDate heading02;
    private TransDate heading021;
    private TransDate heading03;
    private TransDate heading031;
    private TransDate heading04;
    private TransDate heading041;
    private TransDate heading05;
    private TransDate heading051;
    private TransDate heading06;
    private TransDate heading061;
    private TransDate heading07;
    private TransDate heading071;

    private TransTxt heading01;
    private TransTxt heading02Text;
    private TransTxt heading07Text;
    private TransTxt headingAgingBucketDescription02;
    private TransTxt headingAgingBucketDescription03;
    private TransTxt headingAgingBucketDescription04;
    private TransTxt headingAgingBucketDescription05;
    private TransTxt headingAgingBucketDescription06;
    private TransTxt headingAgingBucketDescription07;

    private utcdatetime sysDateTime;
    private str batchRunTime;
    private str batchNameConcatRunTime;

    private const str EmptyString = '';
    private const int BackOffWait = 1000;

    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    internal void process(CustAgingDataStorageContract _contract)
    {
        this.processInitialization(_contract);

        using (SysInstrumentationActivityContext activityContext = this.getActivityContext(batchNameConcatRunTime))
        {   
            activityContext.addCustomProperty('isUsingBillingClassification', any2Str(isUsingBillingClassification));
            RefRecId agingHeaderRecId = this.persistCustAgingDataHeader();
            this.setContractDefaults();

            try
            {
                ttsbegin;

                ForwardBackwardPrinting tmpDirection = contract.parmAgingBuckets()? 
                    StatRepInterval::find(contract.parmAgingBuckets()).PrintDirection: contract.parmDirection();

                this.prepareTmpAccountSum(tmpDirection);
                
                boolean reverseAmountsAndHeadings = CustAgingDataStorageService::getReverseAmountsAndHeadings(contract.parmAgingBuckets(), tmpDirection);
                this.prepareCustAgingDataTmp(reverseAmountsAndHeadings);

                this.persistCustAgingDataFromTmpData(agingHeaderRecId);
                this.persistCustAgingDataHeaderPeriodInfoFromTmpData();

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.updateAgingDataStorageHeaderStatus(CustAgingProcessingStatus::Error);
                    throw;
                }
                else
                {
                    sleep (xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        this.updateAgingDataStorageHeaderStatus(CustAgingProcessingStatus::Error);
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    this.updateAgingDataStorageHeaderStatus(CustAgingProcessingStatus::Error);
                    throw;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    this.updateAgingDataStorageHeaderStatus(CustAgingProcessingStatus::Error);
                    throw;
                }
            }
            catch
            {
                this.updateAgingDataStorageHeaderStatus(CustAgingProcessingStatus::Error);
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContractDefaults</Name>
				<Source><![CDATA[
    private void setContractDefaults()
    {
        if (!contract.parmZeroDate())
        {
            // When the zero date is not given then use the date now in user preferred time zone.
            contract.parmZeroDate(DateTimeUtil::date(sysDateTime));
        }

        if (!contract.parmBalanceAsOfDate())
        {
            // When balance as of date is not given then use the max date to include all transactions.
            contract.parmBalanceAsOfDate(dateMax());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTmpAccountSum</Name>
				<Source><![CDATA[
    private void prepareTmpAccountSum(ForwardBackwardPrinting _tmpDirection)
    {
        QueryRun qr = new QueryRun(new Query(SysOperationHelper::base64Decode(contract.parmQuery())));

        NoYes inclTransWithNoBillingClass = NoYes::No;
        List billingClass = null;
        
        if (isUsingBillingClassification)
        {
            inclTransWithNoBillingClass = contract.parmInclTransWithNoBillingClass();
            billingClass = contract.parmBillingClassification();
        }

        custVendBalanceList = CustVendBalanceList::construct(SysModule::Cust,
                                contract.parmDateTransactionDuedate(),
                                contract.parmInterval(),
                                contract.parmBalanceAsOfDate(),
                                contract.parmZeroDate(),
                                contract.parmPayments(),
                                contract.parmPeriod(),
                                _tmpDirection,
                                contract.parmAgingBuckets(),
                                NoYes::Yes,
                                contract.parmDetailed(),
                                billingClass,
                                inclTransWithNoBillingClass,
                                contract.parmExcludeZeroBalanceCustomer(),
                                !contract.parmPrintZeroOrNegative());

    Query query = CustVendAgingQueryConverter::convertCustomers(qr.query());
        custVendBalanceList.calculateDetailsForMultiple(qr, query, contract.parmIncludeAmountCur());
        tmpAccountSum = custVendBalanceList.initTmpAccountSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReverseAmountsAndHeadings</Name>
				<Source><![CDATA[
    private static boolean getReverseAmountsAndHeadings(CustVendAgingBucketLookUp _agingBucket, ForwardBackwardPrinting _direction)
    {
        boolean reverseAmountsAndHeadings = false;

        if (_agingBucket == EmptyString && _direction == ForwardBackwardPrinting::Forward)
        {
            reverseAmountsAndHeadings = true;
        }

        return reverseAmountsAndHeadings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanTempTableData</Name>
				<Source><![CDATA[
    private void cleanTempTableData()
    {
        if (custAgingReportTmp.RecId)
        {
            custAgingReportTmp.selectForUpdate(true);
            custAgingReportTmp.delete(); 
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareCustAgingDataTmp</Name>
				<Source><![CDATA[
    private void prepareCustAgingDataTmp(boolean _reverseAmountsAndHeadings)
    {
        this.cleanTempTableData(); //ensure temp table is always empty before inserting. Relevant in retry scenario

        this.initHeadingValues();
        const int BalancePercentageAsOfDate = 100;

        CustVendTransAging custVendTransAging = custVendBalanceList.getCustVendTransAging();
        CustAgingReportDPParameters custAgingDataDPParameters = CustAgingReportDPParameters::construct();

        custAgingDataDPParameters.custAgingReportTmp = custAgingReportTmp;
        custAgingDataDPParameters.custTmpAccountSum = tmpAccountSum;
        custAgingDataDPParameters.custVendTransAging = custVendTransAging;
        custAgingDataDPParameters.reverseAmountsAndHeadings = _reverseAmountsAndHeadings;
        custAgingDataDPParameters.ledgerCurrencySelection = contract.parmCurrencySelection();
        custAgingDataDPParameters.balance = BalancePercentageAsOfDate;
        custAgingDataDPParameters.headingDate = headingDate;
        custAgingDataDPParameters.heading01 = heading01;
        custAgingDataDPParameters.heading011 = heading011;
        custAgingDataDPParameters.heading02 = heading02;
        custAgingDataDPParameters.heading02Text = heading02Text;
        custAgingDataDPParameters.heading021 = heading021;
        custAgingDataDPParameters.heading03 = heading03;
        custAgingDataDPParameters.heading031 = heading031;
        custAgingDataDPParameters.heading04 = heading04;
        custAgingDataDPParameters.heading041 = heading041;
        custAgingDataDPParameters.heading05 = heading05;
        custAgingDataDPParameters.heading051 = heading051;
        custAgingDataDPParameters.heading06 = heading06;
        custAgingDataDPParameters.heading061 = heading061;
        custAgingDataDPParameters.heading07 = heading07;
        custAgingDataDPParameters.heading07Text = heading07Text;
        custAgingDataDPParameters.heading071 = heading071;
        custAgingDataDPParameters.headingAgingBucketDescription02 = headingAgingBucketDescription02;
        custAgingDataDPParameters.headingAgingBucketDescription03 = headingAgingBucketDescription03;
        custAgingDataDPParameters.headingAgingBucketDescription04 = headingAgingBucketDescription04;
        custAgingDataDPParameters.headingAgingBucketDescription05 = headingAgingBucketDescription05;
        custAgingDataDPParameters.headingAgingBucketDescription06 = headingAgingBucketDescription06;
        custAgingDataDPParameters.headingAgingBucketDescription07 = headingAgingBucketDescription07;
        custAgingDataDPParameters.headingAccount = "@SYS24500";
        custAgingDataDPParameters.headingName = "@SYS7399";
        custAgingDataDPParameters.asOfDate = strFmt("@SYS84682", date2StrUsr(contract.parmBalanceAsOfDate(), DateFlags::FormatAll), contract.parmDateTransactionDuedate());

        CustAgingReportTmpFromCustTmpAccountSum custAgingDataFromCustTmpAccountSum = CustAgingReportTmpFromCustTmpAccountSum::newFromcustAgingReportDP(custAgingDataDPParameters);
        custAgingDataFromCustTmpAccountSum.execute();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistCustAgingDataHeaderPeriodInfoFromTmpData</Name>
				<Source><![CDATA[
    private void persistCustAgingDataHeaderPeriodInfoFromTmpData()
    {
        CustAgingDataHeaderStorage custAgingDataHeaderStorage;

        select forUpdate custAgingDataHeaderStorage
        where custAgingDataHeaderStorage.BatchName == batchNameConcatRunTime;

        select firstonly HeadingAgingBucketDescription02, HeadingAgingBucketDescription03, HeadingAgingBucketDescription04, HeadingAgingBucketDescription05,
            HeadingAgingBucketDescription06, HeadingAgingBucketDescription07, Heading2DateValue, Heading3, Heading4, Heading5, Heading6, Heading7DateValue,
            Heading8, Heading9, Heading10, Heading11, Heading12, Heading13, Heading14
        from custAgingReportTmp;

        custAgingDataHeaderStorage.BalanceAsOfDate = custAgingReportTmp.Heading8;
        if (contract.parmAgingBuckets())
        {
            custAgingDataHeaderStorage.AgingAsOfDate = contract.parmZeroDate();
        }
        else
        {
            custAgingDataHeaderStorage.AgingAsOfDate = custAgingReportTmp.Heading9;
        }

        custAgingDataHeaderStorage.Period1Description = custAgingReportTmp.HeadingAgingBucketDescription02;
        if (!contract.parmAgingBuckets() && contract.parmDirection() == ForwardBackwardPrinting::Backward)
        {
            custAgingDataHeaderStorage.Period1StartDate = custAgingReportTmp.Heading9;
            custAgingDataHeaderStorage.Period1EndDate = dateMax();
        }        
        else
        {
            custAgingDataHeaderStorage.Period1StartDate = custAgingReportTmp.Heading2DateValue;
            custAgingDataHeaderStorage.Period1EndDate = custAgingReportTmp.Heading9;
        }

        custAgingDataHeaderStorage.Period2Description = custAgingReportTmp.HeadingAgingBucketDescription03;
        custAgingDataHeaderStorage.Period2StartDate = custAgingReportTmp.Heading3;
        custAgingDataHeaderStorage.Period2EndDate = custAgingReportTmp.Heading10;

        custAgingDataHeaderStorage.Period3Description = custAgingReportTmp.HeadingAgingBucketDescription04;
        custAgingDataHeaderStorage.Period3StartDate = custAgingReportTmp.Heading4;
        custAgingDataHeaderStorage.Period3EndDate = custAgingReportTmp.Heading11;

        custAgingDataHeaderStorage.Period4Description = custAgingReportTmp.HeadingAgingBucketDescription05;
        custAgingDataHeaderStorage.Period4StartDate = custAgingReportTmp.Heading5;
        custAgingDataHeaderStorage.Period4EndDate = custAgingReportTmp.Heading12;

        custAgingDataHeaderStorage.Period5Description = custAgingReportTmp.HeadingAgingBucketDescription06;
        custAgingDataHeaderStorage.Period5StartDate = custAgingReportTmp.Heading6;
        custAgingDataHeaderStorage.Period5EndDate = custAgingReportTmp.Heading13;

        custAgingDataHeaderStorage.Period6Description = custAgingReportTmp.HeadingAgingBucketDescription07;
        if (!contract.parmAgingBuckets() && contract.parmDirection() == ForwardBackwardPrinting::Forward)
        {
            custAgingDataHeaderStorage.Period6StartDate = custAgingReportTmp.Heading14;
            custAgingDataHeaderStorage.Period6EndDate = dateMax();
        }
        else
        {
            custAgingDataHeaderStorage.Period6StartDate = custAgingReportTmp.Heading7DateValue;
            custAgingDataHeaderStorage.Period6EndDate = custAgingReportTmp.Heading14;
        }

        custAgingDataHeaderStorage.ProcessingStatus = CustAgingProcessingStatus::Completed;

        custAgingDataHeaderStorage.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAgingDataStorageHeaderStatus</Name>
				<Source><![CDATA[
    private void updateAgingDataStorageHeaderStatus(CustAgingProcessingStatus _status)
    {
        CustAgingDataHeaderStorage custAgingDataHeaderStorage;

        select forUpdate custAgingDataHeaderStorage
            where custAgingDataHeaderStorage.BatchName == batchNameConcatRunTime;
        
        custAgingDataHeaderStorage.ProcessingStatus = _status;

        custAgingDataHeaderStorage.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistCustAgingDataFromTmpData</Name>
				<Source><![CDATA[
    private void persistCustAgingDataFromTmpData(RefRecId _agingHeaderRecId)
    {
        CustAgingDataStorage custAgingDataStorage;

        if (contract.parmDetailed())
        {
            insert_recordset custAgingDataStorage(agingDataHeader,
            custAccount,
            custName,
            custGroup,
            criteriaDate,
            voucher,
            invoiceId,
            transactionCurrency,
            AsOfDateBalance,
            AsOfDateBalanceInTransCurrency,
            Period1Balance,
            Period1BalanceInTransCurrency,
            Period2Balance,
            Period2BalanceInTransCurrency,
            Period3Balance,
            Period3BalanceInTransCurrency,
            Period4Balance,
            Period4BalanceInTransCurrency,
            Period5Balance,
            Period5BalanceInTransCurrency,
            Period6Balance,
            Period6BalanceInTransCurrency,
            BillingClassification)
            select _agingHeaderRecId, custAccount, name, custGroup, transDate, voucher, invoiceId, currency, balance01, balance01Cur,
                   balance02, balance02Cur, balance03, balance03Cur, balance04, balance04Cur, balance05, balance05Cur, balance06, balance06Cur, balance07, balance07Cur, BillingClassification
            from custAgingReportTmp;
        } 
        else
        {
            insert_recordset custAgingDataStorage(agingDataHeader,
            custAccount,
            custName,
            custGroup,
            criteriaDate,
            voucher,
            invoiceId,
            AsOfDateBalance,
            AsOfDateBalanceInTransCurrency,
            Period1Balance,
            Period1BalanceInTransCurrency,
            Period2Balance,
            Period2BalanceInTransCurrency,
            Period3Balance,
            Period3BalanceInTransCurrency,
            Period4Balance,
            Period4BalanceInTransCurrency,
            Period5Balance,
            Period5BalanceInTransCurrency,
            Period6Balance,
            Period6BalanceInTransCurrency,
            BillingClassification)
            select _agingHeaderRecId, custAccount, name, custGroup, transDate, voucher, invoiceId, sum(balance01), sum(balance01Cur),
                   sum(balance02), sum(balance02Cur), sum(balance03), sum(balance03Cur), sum(balance04), sum(balance04Cur), sum(balance05), sum(balance05Cur), sum(balance06), sum(balance06Cur), sum(balance07), sum(balance07Cur), BillingClassification
            from custAgingReportTmp
            group by custAccount, name, custGroup, transDate, voucher, invoiceId, BillingClassification;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistCustAgingDataHeader</Name>
				<Source><![CDATA[
    private RefRecId persistCustAgingDataHeader()
    {
        CustAgingDataHeaderStorage custAgingDataHeaderStorage;

        try
        {
            custAgingDataHeaderStorage.BatchName = batchNameConcatRunTime;
            custAgingDataHeaderStorage.BatchRunTime = batchRunTime;
            custAgingDataHeaderStorage.Filters = SysOperationHelper::base64Decode(contract.parmQuery());
            custAgingDataHeaderStorage.AgingAsOfDate = contract.parmZeroDate();
            custAgingDataHeaderStorage.BalanceAsOfDate = contract.parmBalanceAsOfDate();
            custAgingDataHeaderStorage.CriteriaDateDescription = contract.parmDateTransactionDuedate();
            custAgingDataHeaderStorage.AgingPeriodDefinition = contract.parmAgingBuckets();
            custAgingDataHeaderStorage.IncludeAgingPeriodDescription = contract.parmIncludeAgingPeriodDescription();
            custAgingDataHeaderStorage.CurrencySelection = contract.parmCurrencySelection();
            custAgingDataHeaderStorage.Interval = contract.parmInterval();
            custAgingDataHeaderStorage.DayMonth = contract.parmPeriod();
            custAgingDataHeaderStorage.AgingDirection = contract.parmDirection();
            custAgingDataHeaderStorage.Details = contract.parmDetailed();
            custAgingDataHeaderStorage.IncludeAmountsInTransactionCurrency = contract.parmIncludeAmountCur();
            custAgingDataHeaderStorage.ExcludeZeroBalanceAccounts = contract.parmExcludeZeroBalanceCustomer();
            custAgingDataHeaderStorage.NegativeBalance = contract.parmPrintZeroOrNegative();
            custAgingDataHeaderStorage.PaymentPositioning = contract.parmPayments();
            custAgingDataHeaderStorage.ProcessingStatus = CustAgingProcessingStatus::Started;
            if (isUsingBillingClassification)
            {
                custAgingDataHeaderStorage.BillingClassifications = contract.parmBillingClassification().toString();
                custAgingDataHeaderStorage.InclTransWithNoBillingClassification = contract.parmInclTransWithNoBillingClass();
            }
            else
            {
                custAgingDataHeaderStorage.BillingClassifications = this.createNoValueSelectedList().toString();
                custAgingDataHeaderStorage.InclTransWithNoBillingClassification = NoYes::Yes;
            }

            var batchHeader = BatchHeader::getCurrentBatchHeader();
            if (batchHeader)
            {
                custAgingDataHeaderStorage.BatchJobId = batchHeader.parmBatchHeaderId();
            }

            custAgingDataHeaderStorage.insert();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw;
            }
            else
            {
                sleep (xSession::currentRetryCount() * BackOffWait);
                retry;
            }
        }   
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        return custAgingDataHeaderStorage.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeadingValues</Name>
				<Source><![CDATA[
    private void initHeadingValues()
    {
        headingDate = this.headingDate();
        heading01 = this.heading01();
        heading011 = this.heading011();
        heading02 = this.heading02();
        heading02Text = this.heading02Text();
        heading021 = this.heading021();
        heading03 = this.heading03();
        heading031 = this.heading031();
        heading04 = this.heading04();
        heading041 = this.heading041();
        heading05 = this.heading05();
        heading051 = this.heading051();
        heading06 = this.heading06();
        heading061 = this.heading061();
        heading07 = this.heading07();
        heading07Text = this.heading07Text();
        heading071 = this.heading071();
        headingAgingBucketDescription02 = this.headingAgingBucketDescription02();
        headingAgingBucketDescription03 = this.headingAgingBucketDescription03();
        headingAgingBucketDescription04 = this.headingAgingBucketDescription04();
        headingAgingBucketDescription05 = this.headingAgingBucketDescription05();
        headingAgingBucketDescription06 = this.headingAgingBucketDescription06();
        headingAgingBucketDescription07 = this.headingAgingBucketDescription07();
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading01</Name>
				<Source><![CDATA[
    private TransTxt heading01()
    {
        return "@SYS137399";
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading011</Name>
				<Source><![CDATA[
    private TransDate heading011()
    {
        return contract.parmBalanceAsOfDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading02</Name>
				<Source><![CDATA[
    private TransDate heading02()
    {
        return contract.parmAgingBuckets() ? custVendBalanceList.startdate(2): dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading021</Name>
				<Source><![CDATA[
    private TransDate heading021()
    {
        return contract.parmAgingBuckets() ? custVendBalanceList.enddate(2):  custVendBalanceList.enddate(3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading02Text</Name>
				<Source><![CDATA[
    private TransTxt heading02Text()
    {
        if (contract.parmAgingBuckets())
        {
            return EmptyString;
        }
        else
        {
            return contract.parmDateTransactionDuedate() ? strFmt("@SYS60131", EmptyString) : "@SYS62491";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading031</Name>
				<Source><![CDATA[
    private final TransDate heading031()
    {
        return custVendBalanceList.enddate(3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading04</Name>
				<Source><![CDATA[
    private TransDate heading04()
    {
        return custVendBalanceList.startdate(4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading041</Name>
				<Source><![CDATA[
    private TransDate heading041()
    {
        return custVendBalanceList.enddate(4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading05</Name>
				<Source><![CDATA[
    private TransDate heading05()
    {
        return custVendBalanceList.startdate(5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading051</Name>
				<Source><![CDATA[
    private TransDate heading051()
    {
        return custVendBalanceList.enddate(5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading06</Name>
				<Source><![CDATA[
    private TransDate heading06()
    {
        return custVendBalanceList.startdate(6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading061</Name>
				<Source><![CDATA[
    private TransDate heading061()
    {
        return custVendBalanceList.enddate(6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading07</Name>
				<Source><![CDATA[
    private TransDate heading07()
    {
        return contract.parmAgingBuckets()? custVendBalanceList.startdate(7): dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading071</Name>
				<Source><![CDATA[
    private TransDate heading071()
    {
        return contract.parmAgingBuckets()? custVendBalanceList.enddate(7): custVendBalanceList.startdate(6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading07Text</Name>
				<Source><![CDATA[
    private TransTxt heading07Text()
    {
        if (contract.parmAgingBuckets())
        {
            return EmptyString;
        }
        else
        {
            return contract.parmDateTransactionDuedate() ? "@SYS29113" : "@SYS62492";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription02</Name>
				<Source><![CDATA[
    private TransTxt headingAgingBucketDescription02()
    {
        return contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription()?
            strFmt('%1', custVendBalanceList.getDescription(2)): EmptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription03</Name>
				<Source><![CDATA[
    private TransTxt headingAgingBucketDescription03()
    {
        return contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription()?
            strFmt('%1', custVendBalanceList.getDescription(3)): EmptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription04</Name>
				<Source><![CDATA[
    private TransTxt headingAgingBucketDescription04()
    {
        return contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription() ?
            strFmt('%1', custVendBalanceList.getDescription(4)): EmptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription05</Name>
				<Source><![CDATA[
    private TransTxt headingAgingBucketDescription05()
    {
        return contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription() ?
            strFmt('%1', custVendBalanceList.getDescription(5)) : EmptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription06</Name>
				<Source><![CDATA[
    private TransTxt headingAgingBucketDescription06()
    {
        return contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription() ?
            strFmt('%1', custVendBalanceList.getDescription(6)) : EmptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription07</Name>
				<Source><![CDATA[
    private TransTxt headingAgingBucketDescription07()
    {
        return contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription() ?
            strFmt('%1', custVendBalanceList.getDescription(7)): EmptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingDate</Name>
				<Source><![CDATA[
    private ColumnTxt headingDate()
    {
        switch (contract.parmDateTransactionDuedate())
        {
            case DateTransactionDuedate::DocumentDate : return "@SYS2587";
            case DateTransactionDuedate::TransactionDate : return "@SYS67";
            case DateTransactionDuedate::DueDate : return "@SYS14588";
            default : return "@SYS14588";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading03</Name>
				<Source><![CDATA[
    private TransDate heading03()
    {
        return custVendBalanceList.startdate(3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNoValueSelectedList</Name>
				<Source><![CDATA[
    private List createNoValueSelectedList()
    {
        List list = new List(Types::String);
        list.addEnd(SysLabel::labelId2String(literalStr("@GLS223107")));

        return List;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContext(str _activityName)
    {
        str instrumentationNamespace = classStr(CustAgingDataStorageService);

        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(instrumentationNamespace);
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(_activityName, instrumentationNamespace);

        return logger.activityContextWithCustomProperties(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInitialization</Name>
				<Source><![CDATA[
    private void processInitialization(CustAgingDataStorageContract _contract)
    {
        sysDateTime = DateTimeUtil::getSystemDateTime();
        contract = _contract;
        batchRunTime = DateTimeUtil::toStr(sysDateTime);
        batchNameConcatRunTime = StrFmt('%1-%2', contract.parmBatchName(), batchRunTime);
        isUsingBillingClassification = CustBillingClassificationReportManager::isPublicSectorScenario(contract.parmBillingClassification());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>