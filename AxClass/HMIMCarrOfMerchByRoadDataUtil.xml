<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMCarrOfMerchByRoadDataUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>HMIMCarrOfMerchByRoadDataUtil</c> class to populate data to the Carriage of Merchandise by Road tables  
/// </summary>
final class HMIMCarrOfMerchByRoadDataUtil
{
    HMIMCarrOfMerchByRoad       carrOfMerchByRoad;
    HMIMCarrOfMerchByRoadItem   carrOfMerchByRoadItems;
    WHSShipmentTable            whsShipmentTable;
    WHSLoadTable                loadTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static HMIMCarrOfMerchByRoadDataUtil construct()
    {
        HMIMCarrOfMerchByRoadDataUtil whsCMRDocumentDataUtil = new HMIMCarrOfMerchByRoadDataUtil();
        return whsCMRDocumentDataUtil;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentCriteria</Name>
				<Source><![CDATA[
    public WHSShipmentTable parmShipmentCriteria(WHSShipmentTable _shipmentTable = whsShipmentTable)
    {
        whsShipmentTable = _shipmentTable;
        loadTable = WHSLoadTable::find(whsShipmentTable.LoadId);
        return whsShipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCarrOfMerchByRoadTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>HMIMCarrOfMerchByRoad</c> and <c>HMIMCarrOfMerchByRoadItem</c> tables
    /// </summary>
    public void populateCarrOfMerchByRoadTables()
    {
        this.deleteExistingData();
        this.populateCMRHeader();
        this.populateItemInformation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateItemInformation</Name>
				<Source><![CDATA[
    private void populateItemInformation()
    {
        InventTable                 inventTable;
        WHSLoadLine                 loadLine;
        WHSParameters               whsParameters;
        RecordInsertList            carrOfMerchByRoadItemsList = new RecordInsertList(tableNum(HMIMCarrOfMerchByRoadItem));

        whsParameters = WHSParameters::find();

        LanguageId cmrNatureOfGoodsLanguage = HMIMShippingDocumentsLanguageProvider::determineExportLanguageFromShipment(whsShipmentTable);

        if (whsParameters.HMIMCarrOfMerchByRoadGroupProduct)
        {
            select sum(Qty) from loadLine
                where loadLine.ShipmentId == whsShipmentTable.ShipmentId
            join sum(NetWeight), sum(TaraWeight), sum(UnitVolume) from inventTable
                where inventTable.ItemId == loadLine.ItemId
                    && inventTable.HMIMIndicator == NoYes::Yes;

            carrOfMerchByRoadItems.clear();
            carrOfMerchByRoadItems.NatureOfGoods = whsParameters.HMIMHazardousMaterialGroupDesc;
            carrOfMerchByRoadItems.CMRDocumentId = whsShipmentTable.HMIMCarrOfMerchByRoadId;
            carrOfMerchByRoadItems.GrossWeight   = inventTable.NetWeight + inventTable.TaraWeight;
            carrOfMerchByRoadItems.ItemVolume    = inventTable.UnitVolume;
            carrOfMerchByRoadItems.Qty           = loadLine.Qty;
            carrOfMerchByRoadItems.insert();

            if (whsParameters.NonHMIMMaterialGroupDescription)
            {
                select sum(Qty) from loadLine
                    where loadLine.ShipmentId == whsShipmentTable.ShipmentId
                join sum(NetWeight), sum(TaraWeight), sum(UnitVolume) from inventTable
                    where inventTable.ItemId == loadLine.ItemId
                       && inventTable.HMIMIndicator == NoYes::No;

                carrOfMerchByRoadItems.clear();
                carrOfMerchByRoadItems.NatureOfGoods = whsParameters.NonHMIMMaterialGroupDescription;
                carrOfMerchByRoadItems.CMRDocumentId = whsShipmentTable.HMIMCarrOfMerchByRoadId;
                carrOfMerchByRoadItems.GrossWeight   = inventTable.NetWeight + inventTable.TaraWeight;
                carrOfMerchByRoadItems.ItemVolume    = inventTable.UnitVolume;
                carrOfMerchByRoadItems.Qty           = loadLine.Qty;
                carrOfMerchByRoadItems.insert();
            }
        }
        else
        {
            while select ItemId, Qty, UOM from loadLine
                where loadLine.ShipmentId == whsShipmentTable.ShipmentId
            join NetWeight, TaraWeight, UnitVolume from inventTable
                where inventTable.ItemId == loadLine.ItemId
                    && inventTable.HMIMIndicator == NoYes::Yes
            {
                // Populate and insert the CMR line details.
                carrOfMerchByRoadItems.clear();
                carrOfMerchByRoadItems.ItemId        = loadLine.ItemId;
                carrOfMerchByRoadItems.CMRDocumentId = whsShipmentTable.HMIMCarrOfMerchByRoadId;
                carrOfMerchByRoadItems.GrossWeight   = inventTable.grossWeight();
                carrOfMerchByRoadItems.ItemVolume    = inventTable.UnitVolume;
                carrOfMerchByRoadItems.Qty           = loadLine.Qty;
                carrOfMerchByRoadItems.UOM           = loadLine.UOM;  
                carrOfMerchByRoadItems.NatureOfGoods = HMIMItemMaterial::getItemShipPrintTextByRegCode(loadLine.ItemId, whsShipmentTable.HMIMGetRegCode(), cmrNatureOfGoodsLanguage);

                carrOfMerchByRoadItemsList.add(carrOfMerchByRoadItems);
            }
        
            carrOfMerchByRoadItemsList.insertDatabase();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCMRHeader</Name>
				<Source><![CDATA[
    private void populateCMRHeader()
    {
        TMSCarrier                          carrier = TMSCarrier::find(loadTable.CarrierCode);
        LogisticsEntityPostalAddressView    carrierAddress;

        carrOfMerchByRoad.clear();
        carrOfMerchByRoad.ShipmentId                = whsShipmentTable.ShipmentId;
        carrOfMerchByRoad.CMRDocumentId             = whsShipmentTable.HMIMCarrOfMerchByRoadId;
        carrOfMerchByRoad.ShippingPostalAddress     = loadTable.OriginPostalAddress;
        carrOfMerchByRoad.DeliveryPostalAddress     = whsShipmentTable.DeliveryPostalAddress;
        carrOfMerchByRoad.PickupDate                = whsShipmentTable.displayPickUpDate();
        carrOfMerchByRoad.PickupName                = whsShipmentTable.displayPickUpName();
        carrOfMerchByRoad.PickupLoc                 = whsShipmentTable.displayPickUpLoc();
        carrOfMerchByRoad.DropOffDate               = whsShipmentTable.displayDropOffDate();
        carrOfMerchByRoad.DropOffName               = whsShipmentTable.displayDropOffName();
        carrOfMerchByRoad.DropOffLoc                = whsShipmentTable.displayDropOffLoc();
        carrOfMerchByRoad.CarrierCode               = carrier.CarrierCode;
        carrOfMerchByRoad.CarrierName               = carrier.Name;
        carrOfMerchByRoad.CustAccount               = whsShipmentTable.AccountNum;
        carrOfMerchByRoad.CompanyName               = CompanyInfo::find().name();

        select firstonly carrierAddress
            where carrierAddress.Entity      == carrier.RecId
                && carrierAddress.EntityType == LogisticsLocationEntityType::TMSCarrier
                && carrierAddress.IsPrimary  == NoYes::Yes;

        carrOfMerchByRoad.CarrierAddress = carrierAddress.Address;
        carrOfMerchByRoad.ADRPoints = whsShipmentTable.HMIMADRPointsTotalForShipment();
        carrOfMerchByRoad.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingData</Name>
				<Source><![CDATA[
    private void deleteExistingData()
    {
        ttsbegin;
        // Deleting CMR header will clean up item records automatically.
        carrOfMerchByRoad = HMIMCarrOfMerchByRoad::find(whsShipmentTable.HMIMCarrOfMerchByRoadId, true);
        carrOfMerchByRoad.delete();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>