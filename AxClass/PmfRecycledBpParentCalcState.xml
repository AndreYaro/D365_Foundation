<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfRecycledBpParentCalcState</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PmfRecycledBpParentCalcState
{
    Map allocationMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQtyAllocatedForByproduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets quantity allocated to a specified recycled byproduct that was allocated as part of current item calculation.
    /// </summary>
    /// <param name="_pmfCoBy">
    /// The <c>PmfCoByMap</c> record.
    /// </param>
    /// <returns>
    /// The allocated quantity.
    /// </returns>
    public Qty getQtyAllocatedForByproduct(PmfCoByMap _pmfCoBy)
    {
        Qty qty;

        if (allocationMap.exists(_pmfCoBy.RecId))
        {
            qty = allocationMap.lookup(_pmfCoBy.RecId);
        }

        return qty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initAllocationMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the recycled byproduct allocation map.
    /// </summary>
    /// <remarks>
    /// The map contains recIds of <c>PmfFormulaCoBy</c> records as keys and allocated quantity as values.
    /// The map is used in the recycled byproduct context where it secures that in case of multiple consumption lines
    /// only portion of the recycled byproduct will be settled to lines from this <c>BomCalcItem</c> class
    /// instance (and the rest will be settled against other coproducts).
    /// </remarks>
    public void initAllocationMap()
    {
        allocationMap = new Map(Types::Int64, Types::Real);
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initAllocationMap();
    }
]]></Source>
			</Method>
			<Method>
				<Name>persistAllocatedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the quantity allocated to a specified recycled byproduct.
    /// </summary>
    /// <param name="_pmfCoBy">
    /// The <c>PmfCoByMap</c> record.
    /// </param>
    /// <param name="_allocatedQty">
    /// The allocated quantity.
    /// </param>
    public void persistAllocatedQty(PmfCoByMap _pmfCoBy, Qty _allocatedQty)
    {
        Qty previousQty;

        if (allocationMap.exists(_pmfCoBy.RecId))
        {
            previousQty = allocationMap.lookup(_pmfCoBy.RecId);
        }

        previousQty += _allocatedQty;

        allocationMap.insert(_pmfCoBy.RecId, previousQty);
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfRecycledBpParentCalcState construct()
    {
        return new PmfRecycledBpParentCalcState();
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>