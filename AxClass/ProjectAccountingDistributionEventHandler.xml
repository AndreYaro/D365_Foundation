<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectAccountingDistributionEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes events raised by AccountingDistribution.
/// </summary>
public static class ProjectAccountingDistributionEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>AccountingDistribution_onDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>AccountingDistribution</c> onDeleting event.
    /// </summary>
    /// <param name="sender">The <c>AccountingDistribution</c> that is being deleted.</param>
    /// <param name="e">The event arguments.</param>
    [DataEventHandler(tableStr(AccountingDistribution), DataEventType::Deleting)]
    public static void AccountingDistribution_onDeleting(Common sender, DataEventArgs e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            AccountingDistribution accountingDistribution = sender as accountingDistribution;

            AccountingDistribution          childAccountingDistribution;
            ProjectAccountingDistribution   childrenProjectAccountingDistribution;

            while select childAccountingDistribution
                where childAccountingDistribution.ParentDistribution == accountingDistribution.RecId
            {
                childrenProjectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(childAccountingDistribution.RecId);
                ProjFundingLimitTrackingManager::updateUsingProjAccountingDistribution(childrenProjectAccountingDistribution, childAccountingDistribution, ProjFundingLimitTrackingAction::Release, true, false, true);
            }

            ProjFundingLimitTrackingManager::updateUsingAccDistribution(accountingDistribution, ProjFundingLimitTrackingAction::Release, true, false, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AccountingDistribution_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>AccountingDistribution</c> onDeleted event.
    /// </summary>
    /// <param name="sender">The <c>AccountingDistribution</c> that was deleted.</param>
    /// <param name="e">The event arguments.</param>
    [DataEventHandler(tableStr(AccountingDistribution), DataEventType::Deleted)]
    public static void AccountingDistribution_onDeleted(Common sender, DataEventArgs e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            AccountingDistribution accountingDistribution = sender as accountingDistribution;

            if (accountingDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice)
            {
                AccountingDistribution wipAccountingDistribution = ProjAdvancedJournalSourceDocumentLineItem::getWorkInProcessDistribution(accountingDistribution.RecId, true);

                if (wipAccountingDistribution)
                {
                    ttsbegin;
                    wipAccountingDistribution.delete();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AccountingDistribution_onUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>AccountingDistribution</c> onUpdating event.
    /// </summary>
    /// <param name="sender">The <c>AccountingDistribution</c> that is being deleted.</param>
    /// <param name="e">The event arguments.</param>
    [DataEventHandler(tableStr(AccountingDistribution), DataEventType::Updating)]
    public static void AccountingDistribution_onUpdating(Common sender, DataEventArgs e)
    {
        ProjectAccountingDistribution projectAccountingDistribution;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            AccountingDistribution  accountingDistribution = sender.orig();

            if (accountingDistribution)
            {
                projectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(accountingDistribution.RecId);
                if (projectAccountingDistribution)
                {
                    ProjFundingLimitTrackingManager::updateUsingAccDistribution(accountingDistribution, ProjFundingLimitTrackingAction::Release);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AccountingDistribution_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>AccountingDistribution</c> onUpdated event.
    /// </summary>
    /// <param name="sender">The <c>AccountingDistribution</c> that is being deleted.</param>
    /// <param name="e">The event arguments.</param>
    [DataEventHandler(tableStr(AccountingDistribution), DataEventType::Updated)]
    public static void AccountingDistribution_onUpdated(Common sender, DataEventArgs e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            AccountingDistribution  original = sender.orig();

            if (original)
            {
                ProjFundingLimitTrackingManager::updateUsingAccDistribution(sender, ProjFundingLimitTrackingAction::Allocate);
                ProjectAccountingDistributionEventHandler::updateWorkInProcessDistribution(sender);
            }   
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkInProcessDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates any work in process distribution related to the given distribution.
    /// </summary>
    /// <param name = "_extendedPriceDistribution">Distribution being updated.</param>
    public static void updateWorkInProcessDistribution(AccountingDistribution _extendedPriceDistribution)
    {
        if (_extendedPriceDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice)
        {
            AccountingDistribution wipAccountingDistribution = ProjAdvancedJournalSourceDocumentLineItem::getWorkInProcessDistribution(_extendedPriceDistribution.RecId, true);

            if (wipAccountingDistribution)
            {
                boolean updateProjectDistribution, updateDistribution;

                ProjectAccountingDistribution projAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(_extendedPriceDistribution.RecId);
                ProjectAccountingDistribution wipProjAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(wipAccountingDistribution.RecId, true);

                ttsbegin;

                if (wipProjAccountingDistribution.ProjTable != projAccountingDistribution.ProjTable)
                {
                    wipProjAccountingDistribution.ProjTable = projAccountingDistribution.ProjTable;
                    updateProjectDistribution = true;
                }

                if (wipProjAccountingDistribution.ProjCategory != projAccountingDistribution.ProjCategory)
                {
                    wipProjAccountingDistribution.ProjCategory = projAccountingDistribution.ProjCategory;
                    updateProjectDistribution = true;
                }

                if (wipAccountingDistribution.AllocationFactor != _extendedPriceDistribution.AllocationFactor)
                {
                    wipAccountingDistribution.AllocationFactor = _extendedPriceDistribution.AllocationFactor;

                    ProjectAccountingDistribution::fieldModifiedTransCurrencyPricePost(wipAccountingDistribution, wipProjAccountingDistribution);
                    wipAccountingDistribution.TransactionCurrencyAmount = wipProjAccountingDistribution.TransactionCurrencyAmount;

                    updateProjectDistribution = true;
                    updateDistribution = true;
                }

                if (wipProjAccountingDistribution && updateProjectDistribution)
                {
                    wipProjAccountingDistribution.update();
                }

                if (updateDistribution)
                {
                    wipAccountingDistribution.update();
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>