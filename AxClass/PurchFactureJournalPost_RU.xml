<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFactureJournalPost_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchFactureJournalPost_RU</c> class posts a purchase facture journal.
/// </summary>
class PurchFactureJournalPost_RU extends PurchInvoiceJournalPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInventProfileType</Name>
				<Source><![CDATA[
    private boolean checkInventProfileType()
    {
        if (vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::CommissionPrincipalAgent ||
            vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::Bailee)
        {
            return checkFailed(strFmt("@GLS115665", vendInvoiceJour.InventProfileType_RU));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFacture_RU</Name>
				<Source><![CDATA[
    protected FactureJour_RU createFacture_RU()
    {
        FactureJourCreate_RU            jourCreate;
        FactureEditLinesEngine_RU       editLines;
        VendInvoiceJour                 tmpInvoiceJour = VendInvoiceJour::findRecId(vendInvoiceJour.RecId);
        OffReportType_RU                reportType;
        FactureCalcAmountAdjustments_RU factureCalcAmountAdj;
        VendInvoiceInfoTable_RU         vendInvoiceInfoTable_RU = vendInvoiceInfoTable.vendInvoiceInfoTable_RU();

        if (!this.checkInventProfileType() || (this.isProforma() && !printFacture))
        {
            return null;
        }

        reportType = tmpInvoiceJour.creditNote()             ?
                     OffReportType_RU::VendFactureCreditNote :
                     OffReportType_RU::VendFacture;

        if (OfficialsServ_RU::isFeatureEnabled() && tmpInvoiceJour)
        {
            OfficialsTrans_RU::copySessionId(tmpInvoiceJour.OffsessionId_RU,
                                             tmpInvoiceJour.OffsessionId_RU,
                                             OffPosition_RU::Director,
                                             reportType);
            OfficialsTrans_RU::copySessionId(tmpInvoiceJour.OffsessionId_RU,
                                             tmpInvoiceJour.OffsessionId_RU,
                                             OffPosition_RU::Accountant,
                                             reportType);
            // Responsible is created in editLines form
        }
        jourCreate = FactureJourCreate_RU::construct(FactureModule_RU::Vend);
        editLines  = FactureEditLinesEngine_RU::construct(jourCreate);
        editLines.insertJour(tmpInvoiceJour, this.isProforma());
        jourCreate.initParameters((this.isProforma() || this.isOnHold()) ? NoYes::No : NoYes::Yes,
                                  NoYes::No,
                                  this.isProforma() ? Printout::Current : Printout::After,
                                  NoYes::No,
                                  vendInvoiceInfoTable_RU.FactureExternalId_RU,
                                  tmpInvoiceJour.InvoiceDate,
                                  tmpInvoiceJour.InvoiceAccount,
                                  tmpInvoiceJour.CurrencyCode,
                                  FactureType_RU::Invoice,
                                  tmpInvoiceJour.ConsigneeAccount_RU,
                                  tmpInvoiceJour.ConsignorAccount_RU,
                                  tmpInvoiceJour.OffsessionId_RU,
                                  "",
                                  "",
                                  dateNull(),
                                  tmpInvoiceJour.deliveryPostalAddressRecId_RU(),
                                  tmpInvoiceJour.InvoiceDate,
                                  tmpInvoiceJour.NumberSequenceGroup,
                                  vendInvoiceInfoTable_RU.CorrectedFactureExternalId_RU,
                                  vendInvoiceInfoTable_RU.CorrectedFactureDate_RU,
                                  vendInvoiceInfoTable_RU.CorrectedPeriod_RU,
                                  vendInvoiceInfoTable_RU.correctionType_RU());
        jourCreate.parmVATOnPayment     (tmpInvoiceJour.vatOnPayment_RU);
        jourCreate.parmCorrect          (tmpInvoiceJour.Correct_RU);
        jourCreate.parmInventProfileType(tmpInvoiceJour.InventProfileType_RU);
        jourCreate.parmProcessVAT       (vendInvoiceInfoTable_RU.ProcessVAT);
        jourCreate.parmPurchBookVATProcessParametersRecId(vendInvoiceInfoTable_RU.PurchBookVATProcessParametersRecId);
        jourCreate.runOperation();

        factureCalcAmountAdj = FactureCalcAmountAdjustments_RU::newCustVendTrans(tmpInvoiceJour.vendTrans());
        factureCalcAmountAdj.calc();

        factureJour = jourCreate.getFactureJour();
        FactureJour_RU::handleOperationTypeCodes(factureJour);

        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::Facture_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchFactureJournalPost_RU construct()
    {
        return new PurchFactureJournalPost_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>