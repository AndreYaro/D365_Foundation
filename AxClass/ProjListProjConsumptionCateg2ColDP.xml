<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjConsumptionCateg2ColDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjConsumptionCateg2ColDP</c> class is the report data provider class for the
///    associated <c>ProjListProjConsumptionCategory2Column</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjStatementCategory)),
    SRSReportParameterAttribute(classstr(ProjListProjConsumptionContract))
]

class ProjListProjConsumptionCateg2ColDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    TransDate               projFromDate;
    TransDate               projBreakDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerBreakDate;
    TransDate               ledgerToDate;
    projActualVsBudget      actualVsBudget;
    ForecastModelId         forecastModelId;
    ProjListStateProjType   stateProjType;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;

    projStatement           actualProjStatement;
    projStatement           budgetProjStatement;

    ProjListProjTrans_Consumption   listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjConsumptionTmp      projListProjConsumptionTmp;

    QueryRun                qrun;
    ProjCategoryId          categoryId;
    ProjCategoryName        categoryName;

    AmountMST               actualSalary;
    AmountMST               budgetSalary;
    AmountMST               actualTotalCost;
    AmountMST               budgetTotalCost;
    ProjQty                 actualQtyHour;
    ProjQty                 budgetQtyHour;

    AmountMST               actualExpense;
    AmountMST               budgetExpense;
    AmountMST               actualItem;
    AmountMST               budgetItem;

    int                     reportType;
    int                     hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;
    int                     showEmplCost, showEmplQty, showTotalCost, showItemCost, showCostCost;
    str                     headerLabel, periodLabel, totalCostLabel, devianceLabel;
    str                     hourLabel, hourQtyLabel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the consumption amount for hour, expense, and item.
    /// </summary>
    void calculate()
    {
        actualProjStatement.parmCategoryId(categoryId);
        budgetProjStatement.parmCategoryId(categoryId);

        if (listProjTransLayout.parmAmountQty() == ProjAmountQty::Amount ||
            listProjTransLayout.parmAmountQty() == ProjAmountQty::AmountQty)
        {
            actualSalary      = actualProjStatement.c105_Consumption_Hour();
            budgetSalary      = budgetProjStatement.c105_Consumption_Hour();
        }

        if (listProjTransLayout.parmAmountQty() == ProjAmountQty::Qty ||
            listProjTransLayout.parmAmountQty() == ProjAmountQty::AmountQty)
        {
            actualQtyHour     = actualProjStatement.c105_Consumption_Hour_qty();
            budgetQtyHour     = budgetProjStatement.c105_Consumption_Hour_qty();
        }

        actualExpense += actualProjStatement.c125_Consumption_Cost();
        budgetExpense += budgetProjStatement.c125_Consumption_Cost();

        actualItem += actualProjStatement.c120_Consumption_Item();
        budgetItem += budgetProjStatement.c120_Consumption_Item();

        actualTotalCost   = actualProjStatement.c100_Total_Consumption();
        budgetTotalCost   = budgetProjStatement.c100_Total_Consumption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjConsumptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>ProjListProjConsumptionTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjListProjConsumptionTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjListProjConsumptionTmp')]
    public ProjListProjConsumptionTmp getProjListProjConsumptionTmp()
    {
        select * from projListProjConsumptionTmp;
        return projListProjConsumptionTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>ProjListProjTrans</c> class by using parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans = ProjListProjTrans::construct(ProjListStateType::Consumption, ProjListStateId::Category);
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);
        listProjTrans.parmtime(time);

        listProjTrans.parmHour(hour);
        listProjTrans.parmExpenses(expenses);
        listProjTrans.parmItem(item);

        listProjTrans.parmProjFromDate(projFromDate);
        listProjTrans.parmProjBreakDate(projBreakDate);
        listProjTrans.parmProjToDate(projToDate);
        listProjTrans.parmLedgerFromDate(ledgerFromDate);
        listProjTrans.parmLedgerBreakDate(ledgerBreakDate);
        listProjTrans.parmLedgerToDate(ledgerToDate);

        listProjTrans.parmActualVsBudget(actualVsBudget);
        listProjTrans.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmStateProjType(stateProjType);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
        listProjTrans.parmShowDeviance(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjConsumptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the required data and inserts it into the table.
    /// </summary>
    private void insertProjListProjConsumptionTmp()
    {
        projListProjConsumptionTmp.clear();

        projListProjConsumptionTmp.Id            = categoryId;
        projListProjConsumptionTmp.IdLabel       = "@SYS69410";
        projListProjConsumptionTmp.Name          = categoryName;

        projListProjConsumptionTmp.QtyHour       = actualQtyHour;
        projListProjConsumptionTmp.QtyHour1      = budgetQtyHour;
        projListProjConsumptionTmp.QtyHour2      = ProjListProjHelpClass::calcActualVsBudget(actualQtyHour,
                                                    budgetQtyHour, actualVsBudget, true);

        projListProjConsumptionTmp.EmplCost      = listProjTransLayout.showAmountReport(actualSalary, showAmount);
        projListProjConsumptionTmp.EmplCost1     = listProjTransLayout.showAmountReport(budgetSalary, showAmount);
        projListProjConsumptionTmp.EmplCost2     = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.EmplCost,
                                                    projListProjConsumptionTmp.EmplCost1, actualVsBudget, true);

        projListProjConsumptionTmp.CostCost      = listProjTransLayout.showAmountReport(actualExpense, showAmount);
        projListProjConsumptionTmp.CostCost1     = listProjTransLayout.showAmountReport(budgetExpense, showAmount);
        projListProjConsumptionTmp.CostCost2     = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.CostCost,
                                                    projListProjConsumptionTmp.CostCost1, actualVsBudget, true);

        projListProjConsumptionTmp.ItemCost      = listProjTransLayout.showAmountReport(actualItem, showAmount);
        projListProjConsumptionTmp.ItemCost1     = listProjTransLayout.showAmountReport(budgetItem, showAmount);
        projListProjConsumptionTmp.ItemCost2     = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.ItemCost,
                                                    projListProjConsumptionTmp.ItemCost1, actualVsBudget, true);

        projListProjConsumptionTmp.TotalCost     = listProjTransLayout.showAmountReport(actualTotalCost, showAmount);
        projListProjConsumptionTmp.TotalCost1    = listProjTransLayout.showAmountReport(budgetTotalCost, showAmount);
        projListProjConsumptionTmp.TotalCost2    = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.TotalCost,
                                                    projListProjConsumptionTmp.TotalCost1, actualVsBudget, true);

        // set labels
        projListProjConsumptionTmp.HeaderLabel     = headerLabel;
        projListProjConsumptionTmp.PeriodLabel     = periodLabel;
        projListProjConsumptionTmp.EmplCostLabel   = hourLabel;
        projListProjConsumptionTmp.QtyHourLabel    = hourQtyLabel;
        projListProjConsumptionTmp.TotalCostLabel  = totalCostLabel;
        projListProjConsumptionTmp.DevianceLabel   = devianceLabel;

        // set decimal values
        projListProjConsumptionTmp.DecimalHourQty  = hourQtyDecimals;
        projListProjConsumptionTmp.DecimalAmount   = amountDecimals;

        // set field visibility
        projListProjConsumptionTmp.ShowEmplCost    = showEmplCost;
        projListProjConsumptionTmp.ShowQtyHour     = showEmplQty;
        projListProjConsumptionTmp.ShowItemCost    = showItemCost;
        projListProjConsumptionTmp.ShowCostCost    = showCostCost;
        projListProjConsumptionTmp.ShowTotalCost   = showTotalCost;

        projListProjConsumptionTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the consumption amounts for hour, expense, and item are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if none of the values zero; otherwise, false.
    /// </returns>
    boolean lineValue()
    {
        return ((actualSalary   != 0) ||
                (actualTotalCost!= 0) ||
                (actualQtyHour  != 0) ||
                (budgetSalary   != 0) ||
                (budgetTotalCost!= 0) ||
                (budgetQtyHour  != 0) ||
                (actualExpense  != 0) ||
                (budgetExpense  != 0) ||
                (actualItem     != 0) ||
                (budgetItem     != 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource    queryDataSource;
        QueryBuildRange         rangeHide, rangeEmptyString;

        queryDataSource     = qrun.query().dataSourceTable(tablenum(ProjCategory));

        queryDataSource.addSortField(fieldnum(ProjCategory,CategoryId));
        rangeHide           = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
        rangeHide.status(RangeStatus::Hidden);

        if (hour)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Hour));
        }

        if (expenses)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Cost));
        }

        if (item)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Item));
        }

        if (! (hour || expenses || item))
        {
            rangeEmptyString  = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
            rangeEmptyString.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the category record and calls the calculate method.
    /// </summary>
    void printCategory()
    {
        ProjCategory       projCategoryLocal;

        projCategoryLocal       = qrun.get(tablenum(ProjCategory));

        categoryId              = projCategoryLocal.CategoryId;
        categoryName            = projCategoryLocal.Name;

        this.calculate();

        if (! skipZero  || this.lineValue())
        {
            this.insertProjListProjConsumptionTmp();
            this.setFieldZero();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldZero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields to zero.
    /// </summary>
    private void setFieldZero()
    {
        actualSalary      = 0;
        actualQtyHour     = 0;

        budgetSalary      = 0;
        budgetQtyHour     = 0;

        actualExpense     = 0;
        budgetExpense     = 0;

        actualItem        = 0;
        budgetItem        = 0;

        actualTotalCost   = 0;
        budgetTotalCost   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It method will be called by
    ///    SSRS at runtime. The method should compute data and populate the data tables that will be returned
    ///    to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjConsumptionContract contract = this.parmDataContract() as ProjListProjConsumptionContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();
        time = contract.parmTime();

        hour = contract.parmHour();
        expenses = contract.parmExpenses();
        item = contract.parmItem();

        projFromDate = contract.parmProjFromDate();
        projBreakDate = contract.parmProjBreakDate();
        projToDate = contract.parmProjToDate();
        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerBreakDate = contract.parmLedgerBreakDate();
        ledgerToDate = contract.parmLedgerToDate();

        actualVsBudget = contract.parmActualVsBudget2Col();
        forecastModelId = contract.parmForecastModelIdV2();

        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();

        reportType = contract.parmReportType();

        this.initProjListTrans();

        headerLabel   = listProjTrans.formatSelection(showAmount,false);
        periodLabel   = listProjTrans.formatPeriodLabel('', DateFlags::None);
        [hourLabel, hourQtyLabel, totalCostlabel, devianceLabel] = listProjTrans.setDisplayLabel2Column(hour, expenses, item);

        [showEmplQty, showEmplCost, showCostCost, showItemCost, showTotalCost] = listProjTrans.setDisplayFlags(amountQty, hour, expenses, item);

        [hourQtyDecimals, amountDecimals,
        grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        actualProjStatement = projStatement::newListProjConsumption(listProjTrans,ProjActualBudget::Actual,listProjTransLayout.parmAmountQty());
        budgetProjStatement = projStatement::newListProjConsumption(listProjTrans,ProjActualBudget::Budget,listProjTransLayout.parmAmountQty(),forecastModelId);

        qrun = new QueryRun(this.parmQuery());

        this.modifyQuery();

        while (qrun.next())
        {
            this.printCategory();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>