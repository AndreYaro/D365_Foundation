<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSalesTotals_OnlyLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRSalesTotals_OnlyLine</c> class calculats total amount and tax for a single sales line for continuity.
/// </summary>
class MCRSalesTotals_OnlyLine extends SalesTotals_Trans
{
    SalesLine salesLine_OnlyLine;
    boolean   lineReturned;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>MCRSalesCalcTax_OnlyLine</c> class based on the
    /// current class variables of the <c>MCRSalesTotals_OnlyLine</c>.
    /// </summary>
    /// <returns>
    /// The new class instance of the <c>MCRSalesCalcTax_OnlyLine</c> class.
    /// </returns>
    protected TradeCalcTax constructCalcTax()
    {
        return new MCRSalesCalcTax_OnlyLine(salesLine_OnlyLine, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>MCRSalesTotals_OnlyLine</c> class.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> buffer for which this class is created.
    /// </param>
    public void new(SalesLine   _salesLine)
    {
        salesLine_OnlyLine = _salesLine;

        super(salesLine_OnlyLine.salesTable(), SalesUpdate::All);

        markupTableAmountCalculated = true;
        markupTableAmount           = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the class variable for the <c>MCRSalesTotals_OnlyLine</c> class.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object that is used in
    /// </param>
    /// <returns>
    /// true if the line returned class variable is false; otherwise, false.
    /// </returns>
    protected boolean nextLine(QueryRun _queryRun)
    {
        return !lineReturned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales table record based on the sales line record.
    /// </summary>
    /// <returns>
    /// The sales table record based on the sales line record.
    /// </returns>
    protected Common orderLine_orderTable()
    {
        return salesLine_OnlyLine.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
        protected TradeTotalsIContract  parmContract()
    {
        return SalesTotalsTransContract::newFromSalesTable(salesLine_OnlyLine.salesTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailizes the line returned class variable.
    /// </summary>
    /// <returns>
    /// null.
    /// </returns>
    protected QueryRun  queryBuild()
    {
        lineReturned = false;

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the sales line class variable for the <c>MCRSalesTotals_OnlyLine</c> class.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object used to get or set the class variable.
    /// </param>
    /// <returns>
    /// The sales line record that has been set as the class variable if one has not already been set;
    /// otherwise, null.
    /// </returns>
    protected Common queryGet(QueryRun  _queryRun)
    {
        if (!lineReturned)
        {
            salesLine.data(salesLine_OnlyLine);
            lineReturned = true;
        }
        else
            salesLine = null;

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes the skip line class variable for the <c>MCRSalesTotals_OnlyLine</c> class.
    /// </summary>
    /// <param name="_orderLine">
    /// The order line buffer used to initialize the skip line class variable.
    /// </param>
    /// <returns>
    /// true.
    /// </returns>
    protected boolean skipLine(Common _orderLine)
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>