<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymMoneyTransferSlip_FI</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PaymMoneyTransferSlip_FI extends PaymMoneyTransferSlip
{
    #ISOCountryRegionCodes
    PaymentStub         paymentForm;
    AmountCur           invoiceAmount;

    str                 invoiceAmountWhole;
    str                 invoiceAmountCents;

    str                 ocrLine;
    str                 ocrBankAccountNum;
    ReferenceNumber_FI  ocrReferenceNum;

    container           ocrBankAccounts;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amount2Str</Name>
				<Source><![CDATA[
    private void amount2Str()
    {
        int     decimals;
        int     whole;
        int64   invoiceAmountLoc;

        #define.ZeroChar('0')
        #define.WholeAmountLength(6)
        #define.CentsAmountLength(2)

        // Convert whole portion of invoice amount to string and pad to 6 chars
        invoiceAmountLoc = any2Int64(invoiceAmount);

        whole = any2int(invoiceAmountLoc);
        invoiceAmountWhole = num2str(whole, 1, 0, 0, 0);
        invoiceAmountWhole = strIns(invoiceAmountWhole, strRep(#ZeroChar, #WholeAmountLength - strLen(invoiceAmountWhole)), 1);

        // Get cents portion of invoice amount
        // Used to temporarily store int64 value of invoiceAmountLoc variable in order that it may be implicitly casted to int64
        //  as to avoid warning during the 'div' operator call following
        decimals = any2Int(frac(invoiceAmount) * 100);

        // Convert cents portion of invoice amount to string and pad to 2 chars
        invoiceAmountCents = num2str(decimals, 1, 0, 0, 0);
        invoiceAmountCents = strIns(invoiceAmountCents, strRep(#ZeroChar, #CentsAmountLength - strLen(invoiceAmountCents)), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCheckDigit</Name>
				<Source><![CDATA[
    private str 1 calculateCheckDigit()
    {
        str 1 ret;
        int ocrLinePosition;
        int weightPosition;
        int checkSum;
        int checkSumLength;

        #define.Weight("37137137137137137137137137137137137137137137137137137")
        #define.Ten(10)

        checkSum = 0;
        weightPosition = strLen(#Weight);

        for (ocrLinePosition = strLen(ocrLine); ocrLinePosition >= 1; ocrLinePosition--)
        {
            checkSum += str2int(subStr(ocrLine, ocrLinePosition, 1)) * str2int(subStr(#Weight, weightPosition, 1));
            weightPosition--;
        }

        checkSumLength = strLen(int2str(checkSum));
        ret = int2str((#Ten - str2int(subStr(int2str(checkSum), checkSumLength, 1))) mod #Ten);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOCRLine_FI</Name>
				<Source><![CDATA[
    public void initOCRLine_FI()
    {
        int i;

        #define.MaxBankAccounts(6)

        // Clear bank account container
        ocrBankAccounts = conNull();

        while select bankAccountTable where bankAccountTable.PrintGiro_FI == NoYes::Yes
        {
            if (SysCountryRegionCode::isLocationInCountryRegion(bankAccountTable.Location, [#isoFI]))
            {
                i += 1;
                if (i > #MaxBankAccounts)
                {
                    // First 6 bank accounts found for the giro slip
                    break;
                }
                else
                {
                    // Add bank account to container
                    ocrBankAccounts += bankAccountTable.Name;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_AccountNum</Name>
				<Source><![CDATA[
    private str ocr_AccountNum()
    {
        #define.MaxBankAccountLength(14)
        #define.PadZero('0')
        LogisticsPostalAddress          logisticsPostalAddress;
        LogisticsAddressCountryRegion   logisticsAddressCountryRegion;

        select firstonly AccountNum from bankAccountTable
            where bankAccountTable.IncludeBankBarCode_FI == NoYes::Yes
            exists join logisticsPostalAddress
                where logisticsPostalAddress.Location == bankAccountTable.Location
            exists join logisticsAddressCountryRegion
                where logisticsAddressCountryRegion.CountryRegionId == logisticsPostalAddress.CountryRegionId
                   && logisticsAddressCountryRegion.isOcode == #isoFI;

        unchecked(Uncheck::TableSecurityPermission)
        {
            ocrBankAccountNum = bankAccountTable.AccountNum;
        }

        // Pad zeros on bank account number to max length
        ocrBankAccountNum = strIns(ocrBankAccountNum, strRep(#PadZero, #MaxBankAccountLength - strLen(ocrBankAccountNum)), 1);

        return ocrBankAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_AccountNum1</Name>
				<Source><![CDATA[
    public str ocr_AccountNum1()
    {
        str ret;

        #define.EmptyString('')
        #define.ZeroString('0')

        ret = conPeek(ocrBankAccounts, 1);

        if (ret == #ZeroString)
        {
            return #EmptyString;
        }
        else
        {
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_AccountNum2</Name>
				<Source><![CDATA[
    public str ocr_AccountNum2()
    {
        str ret;

        #define.EmptyString('')
        #define.ZeroString('0')

        ret = conPeek(ocrBankAccounts, 2);

        if (ret == #ZeroString)
        {
            return #EmptyString;
        }
        else
        {
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_AccountNum3</Name>
				<Source><![CDATA[
    public str ocr_AccountNum3()
    {
        str ret;

        #define.EmptyString('')
        #define.ZeroString('0')

        ret = conPeek(ocrBankAccounts, 3);

        if (ret == #ZeroString)
        {
            return #EmptyString;
        }
        else
        {
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_AccountNum4</Name>
				<Source><![CDATA[
    public str ocr_AccountNum4()
    {
        str ret;

        #define.EmptyString('')
        #define.ZeroString('0')

        ret = conPeek(ocrBankAccounts, 4);

        if (ret == #ZeroString)
        {
            return #EmptyString;
        }
        else
        {
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_AccountNum5</Name>
				<Source><![CDATA[
    public str ocr_AccountNum5()
    {
        str ret;

        #define.EmptyString('')
        #define.ZeroString('0')

        ret = conPeek(ocrBankAccounts, 5);

        if (ret == #ZeroString)
        {
            return #EmptyString;
        }
        else
        {
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocr_AccountNum6</Name>
				<Source><![CDATA[
    public str ocr_AccountNum6()
    {
        str ret;

        #define.EmptyString('')
        #define.ZeroString('0')

        ret = conPeek(ocrBankAccounts, 6);

        if (ret == #ZeroString)
        {
            return #EmptyString;
        }
        else
        {
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrLine</Name>
				<Source><![CDATA[
    public str ocrLine(CustInvoiceId _invoiceId, real _invoiceAmount, date _dueDate)
    {
        CustTrans custTrans;
        str bankAccountNum;

        #define.PadZero('0')
        #define.BeginBarcodeTwo('2')
        #define.EndBarCodeZeros('0000')
        #define.EmptyBankAccount('00000000000000')
        #define.YYMMDD(321)
        #define.ShowTwoDigits(2)
        #define.NoSeparator(0)
        #define.EmptyString('')

        ocrLine = #EmptyString;
        invoiceAmount = _invoiceAmount;
        bankAccountNum = this.ocr_AccountNum();

        if (bankAccountNum != #EmptyBankAccount)
        {
            select firstonly PaymReference from custTrans where custTrans.Invoice == _invoiceId;
            ocrReferenceNum = custTrans.PaymReference;

            // Pad zeros on reference number to max length
            ocrReferenceNum = strIns(ocrReferenceNum, strRep(#PadZero, 20 - strLen(ocrReferenceNum)), 1);

            this.amount2Str();

            // Build barcode string
            ocrLine = #BeginBarcodeTwo +
                bankAccountNum +
                invoiceAmountWhole +
                invoiceAmountCents +
                ocrReferenceNum +
                date2str(_dueDate, #YYMMDD, #ShowTwoDigits, #NoSeparator, #ShowTwoDigits, #NoSeparator, #ShowTwoDigits,DateFlags::None) +
                #EndBarCodeZeros;

            ocrLine = ocrLine + this.calculateCheckDigit();

            ocrLine = BarcodeCode128::construct().encodeString(ocrLine);
        }

        return ocrLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>