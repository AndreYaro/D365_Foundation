<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsUpdateSortCodes</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WmsUpdateSortCodes extends RunBaseBatch implements BatchRetryable
{
    QueryRun    queryRun;

    boolean     dummy;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        dummy
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(InventLocationId _inventLocationId = '')
    {
        super();
        this.newQuery(_inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuery</Name>
				<Source><![CDATA[
    private void newQuery(InventLocationId _inventLocationId = '')
    {
        Query   query = new Query(queryStr(WMSAisle));

        query.dataSourceNo(1).update(true);
        if (_inventLocationId)
        {
            query.dataSourceNo(1).addRange(fieldNum(WMSAisle, InventLocationId)).value(queryValue(_inventLocationId));
        }

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        Counter             progressTotal;
        WMSAisle            wmsAisle;

        progressTotal = QueryRun::getQueryRowCount(queryRun.query(), maxInt());
        this.progressInit("@SYS50203", progressTotal, #AviUpdate);
        progress.setCount(0);

        while (queryRun.next())
        {
            wmsAisle = queryRun.getNo(1);
            progress.setText(strFmt("@SYS50813", wmsAisle.AisleId));
            wmsAisle.updateSortCodes();
            progress.incCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task.
    /// </summary>
    /// <returns>
    ///    Always returns true as this class has been validated to be able to use impersonation.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion  :
                [version,#CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSUpdateSortCodes construct()
    {
        return new WMSUpdateSortCodes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInventLocation</Name>
				<Source><![CDATA[
    public static WMSUpdateSortCodes constructInventLocation(InventLocationId _inventLocationId)
    {
        WMSUpdateSortCodes  wmsUpdateSortCodes = WMSUpdateSortCodes::construct();

        wmsUpdateSortCodes.getLast();
        wmsUpdateSortCodes.newQuery(_inventLocationId);

        return wmsUpdateSortCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS50203";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        WMSUpdateSortCodes  wmsUpdateSortCodes;
        InventLocation      inventLocation;

        if (args && args.record() && args.record().TableId == tableNum(InventLocation))
        {
            inventLocation = args.record();
        }

        wmsUpdateSortCodes = WMSUpdateSortCodes::newInventLocation(inventLocation.InventLocationId);

        if (wmsUpdateSortCodes.prompt())
        {
            wmsUpdateSortCodes.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes the new <see cref="T:WMSUpdateSortCodes" />.
    /// </summary>
    /// <param name="_inventLocationId">
    ///    The <c>_inventLocationId</c> used to build a new query using the <c>_inventLocationId</c>.
    /// </param>
    /// <returns>
    ///    Returns the new server bound instance of the <see cref="T:WMSUpdateSortCodes" />.
    /// </returns>
    public static WMSUpdateSortCodes newInventLocation(InventLocationId _inventLocationId)
    {
        WMSUpdateSortCodes  wmsUpdateSortCodes = WMSUpdateSortCodes::construct();

        wmsUpdateSortCodes.getLast();
        wmsUpdateSortCodes.newQuery(_inventLocationId);

        return wmsUpdateSortCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>