<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildSalesQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSLoadBuildSalesQueryBuilder</c> acts as a base class for classes that create load build source line queries.
/// </summary>
class TMSLoadBuildSalesQueryBuilder extends TMSLoadBuildSrcLineQueryBuilder
{
    #TMSLoadBuild
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDateRange</Name>
				<Source><![CDATA[
    private void addDateRange(
        QueryBuildDataSource    _salesLineDS,
        Date                    _dateFrom,
        Date                    _dateTo,
        boolean                 _useShippingDates)
    {
        str             queryRangeValue, queryRangeExpression;
        QueryBuildRange qbr;
        FieldName       fieldNameConfirmed, fieldNameRequested;
        FieldId         fieldId;

        //no range filtering
        if (_dateFrom == dateNull() && _dateTo == dateNull())
        {
            return;
        }

        //we have the to as open
        if (_dateTo == dateNull())
        {
          queryRangeExpression =  '(((((%2 >= %4))) || ((%2 == %6) && ((%3 >= %4)))))';
        }
        else if (_dateFrom == dateNull())//we exclude the ones where confirmed is datenull
        {
            queryRangeExpression = '(((((%2 > %6) && (%2 <= %5))) || ((%2 == %6) && ((%3 <= %5)))))';
        }
        else
        {
            queryRangeExpression = '(((((%2 >= %4) && (%2 <= %5))) || ((%2 == %6) && ((%3 >= %4) && (%3 <= %5)))))';
        }

        if (_useShippingDates)
        {
            fieldNameConfirmed  = fieldStr(SalesLine, ShippingDateConfirmed);
            fieldNameRequested  = fieldStr(SalesLine, ShippingDateRequested);
            fieldId             = fieldNum(SalesLine, ShippingDateRequested);
        }
        else
        {
            fieldNameConfirmed  = fieldStr(SalesLine, ReceiptDateConfirmed);
            fieldNameRequested  = fieldStr(SalesLine, ReceiptDateRequested);
            fieldId             = fieldNum(SalesLine, ReceiptDateRequested);
        }

        //we need to use findOrCreate in the below code since we follow a pattern where we dont override values that the user have specified on the query
        qbr = SysQuery::findOrCreateRange(_salesLineDS, fieldId);

        if (!qbr.value())
        {
            //we select based on confirmed and if confirmed is not filled we add criteria on requested.
            queryRangeValue = strFmt(
                queryRangeExpression,
                tableStr(SalesLine),
                fieldNameConfirmed,
                fieldNameRequested,
                date2StrXpp(_dateFrom),
                date2StrXpp(_dateTo),
                date2StrXpp(dateNull()));

            qbr.value(queryRangeValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    public Query buildQuery(
        TMSLoadBuildQueryCriteria _queryData,
        container                 _deliveryZipCodes = conNull())
    {
        TMSLoadBuildSalesQueryCriteria  salesQueryCriteria ;
        QueryBuildDataSource            salesLineDS;
        QueryBuildDataSource            whsSalesLineDS;

        QueryBuildDataSource            inventDimDS;
        QueryBuildDataSource            inventLocationDS;
        QueryBuildDataSource            whsInventTableDS;
        QueryBuildDataSource            destLogisticsPostalAddressDS;
        Query                           queryBaseQueryCopy;
        QueryBuildRange                 qr;

        if (!(_queryData is TMSLoadBuildSalesQueryCriteria))
        {
            throw error (Error::wrongUseOfFunction(funcName()));
        }

        salesQueryCriteria  = _queryData as TMSLoadBuildSalesQueryCriteria;

        //take a copy of the query since we dont want the changes we apply here to surface back to the query the user can manipulate
        queryBaseQueryCopy  = new Query(salesQueryCriteria.parmBaseQuery().pack());

        salesLineDS         = SysQuery::findOrCreateDataSource(queryBaseQueryCopy, tableNum(SalesLine));

        //only take the open lines into consideration
        qr = SysQuery::findOrCreateRange(salesLineDS, fieldNum(SalesLine, SalesStatus));
        qr.value(queryRangeConcat(queryValue(SalesStatus::None), queryValue(SalesStatus::Backorder)));

        whsSalesLineDS      = SysQuery::findOrCreateDataSource(queryBaseQueryCopy, tableNum(WHSSalesLine), tableNum(SalesLine));
        whsSalesLineDS.joinMode(JoinMode::ExistsJoin);
        whsSalesLineDS.relations(true);
        SysQuery::findOrCreateRange(whsSalesLineDS, fieldNum(WHSSalesLine, QtyLeftToLoad)).value(#MinimumQuantityCheck);

        inventDimDS = SysQuery::findOrCreateDataSource(queryBaseQueryCopy, tableNum(InventDim), tableNum(salesLine));
        inventDimDS.joinMode(JoinMode::ExistsJoin);
        inventDimDS.relations(true);

        inventLocationDS = SysQuery::findOrCreateDataSource(queryBaseQueryCopy, tableNum(InventLocation), tableNum(InventDim));
        inventLocationDS.joinMode(JoinMode::ExistsJoin);
        inventLocationDS.relations(true);
        SysQuery::findOrCreateRange(inventLocationDS, fieldNum(InventLocation, WHSEnabled)).value(queryValue(NoYes::Yes));

        //we need to use findOrCreate in the below code since we follow a pattern where we dont override values that the user have specified on the query
        if (salesQueryCriteria.parmCustomerAccount())
        {
            qr = SysQuery::findOrCreateRange(salesLineDS, fieldNum(SalesLine, CustAccount));

            if (!qr.value())
            {
                qr.value(salesQueryCriteria.parmCustomerAccount());
            }
        }

        if (WHSLoadBuildSrcLineQueryBuilderRefactoringFlight::instance().isEnabled())
        {
            this.addDateQueryRange(
                salesLineDS,
                tableStr(SalesLine),
                fieldStr(SalesLine, ShippingDateConfirmed),
                fieldStr(SalesLine, ShippingDateRequested),
                fieldNum(SalesLine, ShippingDateRequested),
                salesQueryCriteria.parmShippingDateFrom(),
                salesQueryCriteria.parmShippingDateTo());

            this.addDateQueryRange(
                salesLineDS,
                tableStr(SalesLine),
                fieldStr(SalesLine, ReceiptDateConfirmed),
                fieldStr(SalesLine, ReceiptDateRequested),
                fieldNum(SalesLine, ReceiptDateRequested),
                salesQueryCriteria.parmDeliveryDateFrom(),
                salesQueryCriteria.parmDeliveryDateTo());

            this.addRanges(
                salesQueryCriteria,
                salesQueryCriteria.parmOriginSiteId(),
                salesQueryCriteria.parmOriginLocationId(),
                queryBaseQueryCopy,
                inventDimDS,
                inventLocationDS,
                destLogisticsPostalAddressDS,
                whsInventTableDS,
                _deliveryZipCodes,
                tableNum(SalesLine),
                tableNum(SalesLine),
                fieldNum(SalesLine, ItemId));
        }
        else
        {
            this.addDateRange(salesLineDS,salesQueryCriteria.parmShippingDateFrom(),salesQueryCriteria.parmShippingDateTo(), true);
            this.addDateRange(salesLineDS,salesQueryCriteria.parmDeliveryDateFrom(),salesQueryCriteria.parmDeliveryDateTo(), false);

            if (
            salesQueryCriteria.parmOriginLocationId()
            || salesQueryCriteria.parmOriginSiteId()
            || salesQueryCriteria.parmOriginCountry()
            || salesQueryCriteria.parmOriginPostalCodeFrom()
            || salesQueryCriteria.parmOriginPostalCodeTo())
            {
                if (salesQueryCriteria.parmOriginLocationId())
                {
                    qr = SysQuery::findOrCreateRange(inventDimDS, fieldNum(InventDim, InventLocationId));

                    if (!qr.value())
                    {
                        qr.value(salesQueryCriteria.parmOriginLocationId());
                    }
                }

                if (salesQueryCriteria.parmOriginSiteId())
                {
                    qr = SysQuery::findOrCreateRange(inventDimDS, fieldNum(InventDim, InventSiteId));

                    if (!qr.value())
                    {
                        qr.value(salesQueryCriteria.parmOriginSiteId());
                    }
                }

                // Query should not include from warehouse location data if a scheduled route has been selected since this should reflect all scheduled route segments.
                if (
                !salesQueryCriteria.parmOriginLocationId()
                && !salesQueryCriteria.parmScheduledRoute()
                && (salesQueryCriteria.parmOriginCountry()
                || salesQueryCriteria.parmOriginPostalCodeFrom()
                || salesQueryCriteria.parmOriginPostalCodeTo()))
                {
                    this.addLocationDataFromWarehouse(inventLocationDS, salesQueryCriteria.parmOriginCountry(), salesQueryCriteria.parmOriginPostalCodeFrom(), salesQueryCriteria.parmOriginPostalCodeTo());
                }

                // Potential load lines for a scheduledRoute route must have delivery destinations that match the route's segments
                if (salesQueryCriteria.parmScheduledRoute())
                {
                    queryBaseQueryCopy = this.modifyQueryForScheduledRouteDestinations(queryBaseQueryCopy, _deliveryZipCodes);
                }
            }

            if (
            salesQueryCriteria.parmDestinationPostalCodeFrom()
            || salesQueryCriteria.parmDestinationPostalCodeTo()
            || salesQueryCriteria.parmDestinationCountry())
            {
                destLogisticsPostalAddressDS = SysQuery::findOrCreateDataSource(queryBaseQueryCopy, tableNum(LogisticsPostalAddress), tableNum(SalesLine));
                destLogisticsPostalAddressDS.joinMode(JoinMode::ExistsJoin);
                destLogisticsPostalAddressDS.relations(true);

                this.addLocationData(destLogisticsPostalAddressDS, salesQueryCriteria.parmDestinationCountry(), salesQueryCriteria.parmDestinationPostalCodeFrom(), salesQueryCriteria.parmDestinationPostalCodeTo());
            }

            if (
            salesQueryCriteria.parmFilterCode1()
            || salesQueryCriteria.parmFilterCode2()
            || salesQueryCriteria.parmFilterCode3()
            || salesQueryCriteria.parmFilterCode4())
            {
                whsInventTableDS = SysQuery::findOrCreateDataSource(queryBaseQueryCopy, tableNum(WHSInventTable), tableNum(salesLine));

                whsInventTableDS.joinMode(JoinMode::ExistsJoin);
                whsInventTableDS.relations(false);
                whsInventTableDS.addLink(fieldNum(SalesLine, ItemId), fieldNum(WHSInventTable, ItemId));

                this.addFilterCodeRanges(whsInventTableDS, salesQueryCriteria);
            }

        }

        return queryBaseQueryCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryForScheduledRouteDestinations</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Adds a new data source to the potential load lines query to results to the scheduled route's destinations.
    /// </summary>
    /// <param name="_query">
    ///  Query for load lines matching criteria from the load building workbench.
    /// </param>
    /// <param name="_deliveryZipCodes">
    ///  A container with a scheduled route's destination zip codes.
    /// </param>
    /// <returns>
    ///  Returns a query that has been updated to include a data source for destination zip codes.
    /// </returns>
    private Query modifyQueryForScheduledRouteDestinations(
        Query _query,
        container _deliveryZipCodes)
    {
        QueryBuildDataSource            logisticsPostalAddressDS;
        QueryBuildRange                 qr;

        logisticsPostalAddressDS = SysQuery::findOrCreateDataSource(_query, tableNum(LogisticsPostalAddress), tableNum(SalesLine));
        logisticsPostalAddressDS.joinMode(JoinMode::ExistsJoin);
        logisticsPostalAddressDS.relations(true);

        qr = SysQuery::findOrCreateRange(logisticsPostalAddressDS, fieldNum(LogisticsPostalAddress, ZipCode));

        qr.value(con2Str(_deliveryZipCodes));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSLoadBuildSalesQueryBuilder construct()
    {
        return new TMSLoadBuildSalesQueryBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>