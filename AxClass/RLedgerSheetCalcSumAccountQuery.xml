<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerSheetCalcSumAccountQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RLedgerSheetCalcSumAccountQuery</c> class creates queries related to the <c>RLedgerSheetServer_TurnoverBond</c> class.
/// </summary>
public final class RLedgerSheetCalcSumAccountQuery
{
    private MainAccount mainAccount;
    private DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;
    private RecId recId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(
        DimensionAttributeValueTotallingCriteria _dimAttrValueTotCrit,
        RecId _recId,
        MainAccount _mainAccount)
    {
        dimAttrValueTotCrit = _dimAttrValueTotCrit;
        recId = _recId;
        mainAccount = _mainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSearchObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects records from the <c>MainAccount</c> table.
    /// </summary>
    /// <param name = "_dimAttrValueTotCrit">
    /// The <c>DimensionAttributeValueTotallingCriteria</c> buffer.
    /// </param>
    /// <param name = "_recId">
    /// The ledger chart of the accounts Id.
    /// </param>
    /// <param name = "_mainAccount">
    /// The <c>MainAccount</c> buffer.
    /// </param>
    /// <returns>
    /// The selected records.
    /// </returns>
    internal static SysDaSearchObject createSearchObject(
        DimensionAttributeValueTotallingCriteria _dimAttrValueTotCrit,
        RecId _recId,
        MainAccount _mainAccount)
    {
        RLedgerSheetCalcSumAccountQuery rLedgerSheetCalcSumAccountQuery = new RLedgerSheetCalcSumAccountQuery();

        rLedgerSheetCalcSumAccountQuery.initialize(_dimAttrValueTotCrit, _recId, _mainAccount);

        SysDaQueryObject query = rLedgerSheetCalcSumAccountQuery.addFieldsToQueryObjectWhereClause();
        SysDaSearchObject searchObject = new SysDaSearchObject(query);

        return searchObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToQueryObjectWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the where clause expression to a query.
    /// </summary>
    /// <returns>
    /// The query to select records.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaQueryObject addFieldsToQueryObjectWhereClause()
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(mainAccount);
        queryObject.projection().add(fieldStr(MainAccount, MainAccountId));

        queryObject.whereClause(new SysDaAndExpression(
            new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, MainAccountId)),
                new SysDaFieldExpression(dimAttrValueTotCrit, fieldStr(DimensionAttributeValueTotallingCriteria, FromValue))),
            new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, MainAccountId)),
                new SysDaFieldExpression(dimAttrValueTotCrit, fieldStr(DimensionAttributeValueTotallingCriteria, ToValue))))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Equity))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Liability)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Asset)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::BalanceSheet)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Expense)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Revenue)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::ProfitAndLoss))))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(mainAccount, fieldStr(MainAccount, LedgerChartOfAccounts)), new SysDaValueExpression(recId))));

        return queryObject;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>