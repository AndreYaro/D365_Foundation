<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLayoutDescriptionListPanel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides a <c>SysListPanel</c> implementation for budget plan layout field descriptions.
/// </summary>
public class BudgetPlanLayoutDescriptionListPanel extends SysListPanel
{
    AccessRight      accessRight;
    BudgetPlanLayout budgetPlanLayout;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(AccessRight _accessRight)
    {
        super();
        accessRight = _accessRight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    public void build()
    {
        super();

        if (this.accessRight == AccessRight::Delete)
        {
            separatorBuildGroupControl.enabled(true);
        }
        else
        {
            separatorBuildGroupControl.enabled(false);
        }

        groupControlSelected.widthMode(FormWidth::SizeToContent);
        groupControlSelected.heightMode(FormHeight::SizeToContent);
        groupControlAvailable.widthMode(FormWidth::SizeToContent);
        groupControlAvailable.heightMode(FormHeight::SizeToContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanLayoutDescriptionListPanel construct(AccessRight _accessRight = AccessRight::View)
    {
        return new BudgetPlanLayoutDescriptionListPanel(_accessRight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanLayout</Name>
				<Source><![CDATA[
    public BudgetPlanLayout parmBudgetPlanLayout(BudgetPlanLayout _budgetPlanLayout = budgetPlanLayout)
    {
        budgetPlanLayout = _budgetPlanLayout;

        return budgetPlanLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>BudgetPlanLayoutDescriptionListPanel</c> object.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>FormRun</c> object to display the list panel.
    /// </param>
    /// <param name="_parentId">
    /// The ID of the parent control.
    /// </param>
    /// <param name="_accessRight">
    /// The <c>AccessRight</c> object to set permissions for the form.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanLayoutDescriptionListPanel</c> object.
    /// </returns>
    public static BudgetPlanLayoutDescriptionListPanel newForm(FormRun _formRun, int _parentId, AccessRight _accessRight)
    {
        BudgetPlanLayoutDescriptionListPanel newListPanel = BudgetPlanLayoutDescriptionListPanel::construct(_accessRight);
        newListPanel.parmFormRun(_formRun);
        newListPanel.parmParentId(_parentId);
        newListPanel.parmCaptionAvailable("@Budget:BudgetPlanLayoutDescriptionAvailableFields");
        newListPanel.parmCaptionSelected("@Budget:BudgetPlanLayoutDescriptionSelectedFields");
        newListPanel.build();

        return newListPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the data moved from the available list panel.
    /// </summary>
    /// <param name="_data">
    /// The items that were moved.
    /// </param>
    /// <remarks>
    /// Empty implementation needed as it is an abstract method on the base class.
    /// </remarks>
    public void addData(container _data)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the data moved from the selected list panel.
    /// </summary>
    /// <param name="_data">
    /// The items that were moved.
    /// </param>
    /// <remarks>
    /// Empty implementation needed as it is an abstract method on the base class.
    /// </remarks>
    public void removeData(container _data)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BudgetPlanLayoutDescriptionElement</c> table based on the current state of the available and selected <c>FormListControl</c> objects.
    /// </summary>
    /// <remarks>
    /// Only called when the user clicks the Ok button on the form.
    /// </remarks>
    public void updateRecords()
    {
        this.removeAvailableFields();
        this.insertSelectedFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAvailableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all <c>BudgetPlanLayoutDescriptionElement</c> records from the database that are in the <c>FormListControl</c> object.
    /// </summary>
    protected void removeAvailableFields()
    {
        for (Counter fieldCounter = 0; fieldCounter < viewAvailable.getCount(); fieldCounter++)
        {
            FieldName fieldName =  conPeek(viewAvailable.getItem(fieldCounter).data(), 1);

            BudgetPlanLayoutDescriptionElement::deleteFieldByLayoutFieldName(budgetPlanLayout.RecId,  fieldName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSelectedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates all the <c>BudgetPlanLayoutDescriptionElement</c> records that are in the selected <c>FormListControl</c> object.
    /// </summary>
    protected void insertSelectedFields()
    {
        RecordInsertList                 recordInsertList = new RecordInsertList(tableNum(BudgetPlanLayoutDescriptionElement), true, true, true, true, true);
        BudgetPlanLayoutDescriptionElement budgetPlanLayoutDescriptionElement;
        FieldName                        fieldName;
        Set                              fieldSet = this.generateAvailableFieldSet();
        TableId                          budgetPlanLineActiveViewTableId = tableName2Id(tableStr(BudgetPlanLineActiveView));

        for (Counter fieldCounter = 0; fieldCounter < viewSelected.getCount(); fieldCounter++)
        {
            fieldName = conPeek(viewSelected.getItem(fieldCounter).data(), 1);

            if (!BudgetPlanLayoutDescriptionElement::existsByLayoutFieldName(budgetPlanLayout.RecId, fieldName))
            {
                budgetPlanLayoutDescriptionElement.clear();
                budgetPlanLayoutDescriptionElement.FieldName = fieldName;
                budgetPlanLayoutDescriptionElement.Layout    = budgetPlanLayout.RecId;

                if (!fieldName2id(budgetPlanLineActiveViewTableId, fieldName))
                {
                    budgetPlanLayoutDescriptionElement.IsDimensionAttribute = NoYes::Yes;
                }

                recordInsertList.add(budgetPlanLayoutDescriptionElement);
            }
        }

        recordInsertList.insertDatabase();
        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingByLayout,
            budgetPlanLayout.RecId,
            BudgetPlanMappingRefreshType::RefreshByLayout,
            budgetPlanLayout.RecId,
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves items for the left and right lists of the list panel.
    /// </summary>
    /// <returns>
    /// A container that has the items for both the left and right side lists.
    /// </returns>
    public container getData()
    {
        return [this.getAvailableFieldsList(), this.getSelectedFieldsList()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableFieldsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves field list to display in the available fields list panel.
    /// </summary>
    /// <returns>
    /// A container that has the items for the left list panel.
    /// </returns>
    public container getAvailableFieldsList()
    {
        BudgetPlanLayoutDescriptionElement budgetPlanLayoutDescriptionElement;
        container                        availableFields;
        DimensionAttribute               dimensionAttribute;
        DimensionHierarchyLevel          dimensionHierarchyLevel;

        // Retrieves the dimension attributes that are part of the hierarchy of the budget plan layout.
        while select dimensionHierarchyLevel
            join dimensionAttribute
            where dimensionAttribute.RecId == dimensionHierarchyLevel.DimensionAttribute
                && dimensionHierarchyLevel.DimensionHierarchy == budgetPlanLayout.DimensionHierarchy
            notexists join budgetPlanLayoutDescriptionElement
                where budgetPlanLayoutDescriptionElement.FieldName == dimensionAttribute.Name
                    && budgetPlanLayoutDescriptionElement.Layout == budgetPlanLayout.RecId
        {
            availableFields += [[dimensionAttribute.Name, dimensionAttribute.localizedName()]];
        }

        SetEnumerator enumerator = this.generateAvailableFieldSet().getEnumerator();

        // Retrieves fields from the <c>BudgetPlanLineActiveView</c> table.
        while (enumerator.moveNext())
        {
            FieldName  fieldName;
            FieldLabel fieldLabel;
            [fieldName, fieldLabel] = conPeek(enumerator.current(), 1);

            if (BudgetPlanLayoutDescriptionElement::canAddFieldInAvailableFieldList(budgetPlanLayout.RecId, fieldName))
            {
                availableFields += [[fieldName, fieldLabel]];
            }
        }

        return availableFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedFieldsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves fields to display in the selected fields list panel.
    /// </summary>
    /// <returns>
    /// A container that has the items for the right list panel.
    /// </returns>
    public container getSelectedFieldsList()
    {
        BudgetPlanLayoutDescriptionElement budgetPlanLayoutDescriptionElement;
        container                        selectedFields;
        FieldLabel                       fieldLabel;
        TableId                          budgetPlanLineActiveViewTableId = tableName2Id(tableStr(BudgetPlanLineActiveView));

        while select IsDimensionAttribute, FieldName
            from budgetPlanLayoutDescriptionElement
            where budgetPlanLayoutDescriptionElement.Layout == budgetPlanLayout.RecId
        {
            if (!budgetPlanLayoutDescriptionElement.IsDimensionAttribute)
            {
                fieldLabel = fieldId2pname(budgetPlanLineActiveViewTableId, fieldName2id(budgetPlanLineActiveViewTableId, budgetPlanLayoutDescriptionElement.FieldName));
            }
            else
            {
                fieldLabel = DimensionAttribute::findByName(budgetPlanLayoutDescriptionElement.FieldName).localizedName();
            }

            selectedFields += [[budgetPlanLayoutDescriptionElement.FieldName, fieldLabel]];
        }

        return selectedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAvailableFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the set of fields from the <c>BudgetPlanLineActiveView</c> table.
    /// </summary>
    public Set generateAvailableFieldSet()
    {
        Set set = new Set(Types::Container);

        set.add([[fieldStr(BudgetPlanLineActiveView, Position), "@Budget:LineForecastPositionScenario"]]);
        set.add([[fieldStr(BudgetPlanLineActiveView, ProposedAsset), "@Budget:LineProposedAsset"]]);
        set.add([[fieldStr(BudgetPlanLineActiveView, ProposedProject), "@Budget:LineProposedProject"]]);
        set.add([[fieldStr(BudgetPlanLineActiveView, AssetId), "@Budget:LineAssetSource"]]);
        set.add([[fieldStr(BudgetPlanLineActiveView, ProjectId), "@Budget:LineProjectSource"]]);

        return set;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>