<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcJob_Item</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomCalcJob_Item extends BOMCalcJob implements BatchRetryable
{
    Qty             itemQty;
    // CW quantity does not participate in BOM calculation. It is used only as a data provider for BOMCalcDialog form.
    PdsCWInventQty  cwQty;

    #define.CurrentVersion(
        10
        )
    #LOCALMACRO.CurrentList
        itemQty,
        cwQty
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCWQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmCWQty(PdsCWInventQty _cwQty = cwQty)
    {
        if (cwQty != _cwQty && PdsGlobal::pdsIsCWItem(itemId))
        {
            cwQty = _cwQty;

            itemQty = PdsCatchWeight::inventQty(itemId, cwQty);
        }

        return cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemQty</Name>
				<Source><![CDATA[
    public Qty parmItemQty(Qty _itemQty = itemQty)
    {
        itemQty = _itemQty;
        return itemQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (! inventDimId)
            inventDimId = InventDim::inventDimIdBlank();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>seriesSize</Name>
				<Source><![CDATA[
    public Qty seriesSize()
    {
        if (this.showSales())
            return this.parmSalesQty();
        else
            return this.parmItemQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                container       base;
                [version, #CurrentList, base] = packedClass;
                return super(base);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMCalcJob_Item construct()
    {
        return new BOMCalcJob_Item();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS343262";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    public boolean checkCloseDialog(Object calledFrom = null)
    {
        boolean ret = super();

        PmfFormulaCoBy coBy;
        BOMVersion bomVersionItem = this.findBOMVersion();
       
        if (bomVersionItem)
        {
            while select ItemId from coBy
                where coBy.bomVersionRefRecId  == bomVersionItem.RecId
                    && !(coBy.ProductType == PmfProductType::By_Product && coBy.BurdenType  == PmfBurdenType::Recycled)
            {
                var productValidator = EcoResProductValidator::construct(InventTable::find(coBy.ItemId));
                if (!productValidator.isEssentialFieldValuesSet())
                {
                    ret = checkFailed(strFmt("@SYS4000187", productValidator.getErrorFieldList(), coBy.ItemId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>