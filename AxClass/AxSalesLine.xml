<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxSalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AxSalesLine extends AxApplicationBase implements AxInventSiteDimensionable
{
    SalesLine                       salesLine;
    AxInventDim_SalesLine           axInventDim;

    int                             inventTableIdx;
    int                             inventItemBarcodeIdx;
    int                             salesTableIdx;
    int                             projTableIdx;
    int                             returnActionDefaultsIdx;
    int                             salesParametersIdx;
    int                             priceParametersIdx;
    int                             inventModelGroupIdx;
    int                             dlvModeIdx;

    int                             priceDisc_PriceIdx;
    int                             priceDisc_LineDiscIdx;
    int                             custExternalItemDescriptionIdx;
    int                             axSalesTableIdx;
    // <GEERU>
    int                             axSalesTable_RUIdx;
    int                             axSalesTable_IntrastatIdx;
    // </GEERU>
    int                             zipCodeIdx;
    int                             agreementLineIdx;
    int                             agreementLineDefaultIdx;

    str                             item;
    str                             county;
    str                             state;
    LineNum                         lineNum;

    boolean                         forceDeliveryDates;
    boolean                         skipCreditLimitCheck;
    boolean                         mcrCalledFromSalesTable2LineUpdate;
    boolean                         useAlternativeItem;
    boolean                         setLineAmountInUpdateFromInventDim;
    boolean                         isSetPriceDiscPriceFieldsExecuted;
    boolean                         isIsPriceDiscPriceFieldsSetExecuted;
    boolean                         isPriceDiscPriceFieldsSet;

    DeliveryDateUpdateInLines       deliveryDateUpdateInLines;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementLineDefaultRecord</Name>
				<Source><![CDATA[
    public AgreementLineDefault agreementLineDefaultRecord(AgreementLineDefault _agreementLineDefault = null)
    {
        AgreementLineDefault       agreementLineDefault;

        if (!agreementLineDefaultIdx)
        {
            agreementLineDefaultIdx          = this.nextCacheIdx();
        }

        if (!prmisDefault(_agreementLineDefault))
        {
            this.tableCacheInsert(agreementLineDefaultIdx, _agreementLineDefault);
            agreementLineDefault = _agreementLineDefault;
        }
        else
        {
            if (this.tableCacheExist(agreementLineDefaultIdx))
            {
                agreementLineDefault = this.tableCacheLookup(agreementLineDefaultIdx);
            }
            else
            {
                if (salesLine.MatchingAgreementLine)
                {
                    agreementLineDefault = AgreementLine::find(salesLine.MatchingAgreementLine).agreementLineDefault();
                }
                else
                {
                    this.setMatchingAgreementLine();
                    if (!salesLine.RecId && this.axSalesTable().parmMatchingAgreement())
                    {
                        agreementLineDefault = AgreementLine::findLineForAutoMatch(salesLine,this.axSalesTable().parmMatchingAgreement(),true).agreementLineDefault();
                    }
                }
                this.tableCacheInsert(agreementLineDefaultIdx, agreementLineDefault);
            }
        }

        return agreementLineDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementLineRecord</Name>
				<Source><![CDATA[
    public AgreementLine agreementLineRecord(AgreementLine _agreementLine = null)
    {
        AgreementLine       agreementLine;

        if (!agreementLineIdx)
        {
            agreementLineIdx          = this.nextCacheIdx();
        }

        if (!prmisDefault(_agreementLine))
        {
            this.tableCacheInsert(agreementLineIdx, _agreementLine);
            agreementLine = _agreementLine;
        }
        else
        {
            if (this.tableCacheExist(agreementLineIdx))
            {
                agreementLine = this.tableCacheLookup(agreementLineIdx);
            }
            else
            {
                if (salesLine.MatchingAgreementLine)
                {
                    agreementLine = AgreementLine::find(salesLine.MatchingAgreementLine);
                }
                else
                {
                    this.setAgreementLineRecordFields();
                    if (!salesLine.RecId && this.axSalesTable().parmMatchingAgreement())
                    {
                        agreementLine = AgreementLine::findLineForAutoMatch(salesLine,this.axSalesTable().parmMatchingAgreement(),true);
                    }
                }

                this.tableCacheInsert(agreementLineIdx, agreementLine);
            }
        }

        return agreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateWithAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Associates the sales line with the matching agreement line.
    /// </summary>
    protected void associateWithAgreementLine()
    {
        AgreementLine   agreementLine;

        agreementLine = this.agreementLineRecord();

        if (agreementLine.RecId)
        {
            this.parmMatchingAgreementLine(agreementLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>axInventDim</Name>
				<Source><![CDATA[
    public AxInventDim axInventDim(AxInventDim _axInventDim = axInventDim)
    {
        axInventDim = _axInventDim as AxInventDim_SalesLine;

        return axInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axOrig</Name>
				<Source><![CDATA[
    public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>axSalesTable</Name>
				<Source><![CDATA[
    public AxSalesTable axSalesTable(AxSalesTable _axSalesTable = null)
    {
        AxSalesTable axSalesTable;

        if (!axSalesTableIdx)
        {
            axSalesTableIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_axSalesTable))
        {
            this.classCacheInsert(axSalesTableIdx, _axSalesTable);
            axSalesTable = _axSalesTable;
        }
        else
        {
            if (this.classCacheExist(axSalesTableIdx))
            {
                axSalesTable = this.classCacheLookup(axSalesTableIdx);
            }
            else
            {
                axSalesTable = AxSalesTable::newSalesTable(SalesTable::find(this.parmSalesId()));

                this.classCacheInsert(axSalesTableIdx, axSalesTable);
            }
        }

        return axSalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axSalesTable_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets an instance of the <c>AxSalesTable_Intrastat</c> class.
    /// </summary>
    /// <param name="_axSalesTable_Intrastat">
    /// An instance of the <c>AxSalesTable_Intrastat</c> class to set.
    /// </param>
    /// <returns>
    /// An instance of the <c>AxSalesTable_Intrastat</c> class.
    /// </returns>
    public AxSalesTable_Intrastat axSalesTable_Intrastat(AxSalesTable_Intrastat _axSalesTable_Intrastat = null)
    {
        AxSalesTable_Intrastat axSalesTable_Intrastat;

        if (!axSalesTable_IntrastatIdx)
        {
            axSalesTable_IntrastatIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_axSalesTable_Intrastat))
        {
            this.classCacheInsert(axSalesTable_IntrastatIdx, _axSalesTable_Intrastat);
            axSalesTable_Intrastat = _axSalesTable_Intrastat;
        }
        else
        {
            if (this.classCacheExist(axSalesTable_IntrastatIdx))
            {
                axSalesTable_Intrastat = this.classCacheLookup(axSalesTable_IntrastatIdx);
            }
            else
            {
                axSalesTable_Intrastat = AxSalesTable_Intrastat::newSalesTable_Intrastat(SalesTable_Intrastat::findBySalesId(this.parmSalesId()));

                this.classCacheInsert(axSalesTable_IntrastatIdx, axSalesTable_Intrastat);
            }
        }

        return axSalesTable_Intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axSalesTable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets an instance of the <c>AxSalesTable_RU</c> class.
    /// </summary>
    /// <param name="_axSalesTable_RU">
    /// An instance of the <c>AxSalesTable_RU</c> class to set.
    /// </param>
    /// <returns>
    /// An instance of the <c>AxSalesTable_RU</c> class.
    /// </returns>
    public AxSalesTable_RU axSalesTable_RU(AxSalesTable_RU _axSalesTable_RU = null)
    {
        AxSalesTable_RU axSalesTable_RU;

        if (!axSalesTable_RUIdx)
        {
            axSalesTable_RUIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_axSalesTable_RU))
        {
            this.classCacheInsert(axSalesTable_RUIdx, _axSalesTable_RU);
            axSalesTable_RU = _axSalesTable_RU;
        }
        else
        {
            if (this.classCacheExist(axSalesTable_RUIdx))
            {
                axSalesTable_RU = this.classCacheLookup(axSalesTable_RUIdx);
            }
            else
            {
                axSalesTable_RU = AxSalesTable_RU::newSalesTable_RU(SalesTable_RU::findBySalesId(this.parmSalesId()));

                this.classCacheInsert(axSalesTable_RUIdx, axSalesTable_RU);
            }
        }

        return axSalesTable_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateRelatedRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates or creates records that relate to the data in this AxBC class.
    /// </summary>
    protected void createOrUpdateRelatedRecords()
    {
        if (this.isSetMethodsCalledFromSave())
        {
            this.setAxSalesTableFields();
            if (this.axSalesTable().isFieldModified(fieldNum(SalesTable, MarkupGroup)) || this.axSalesTable().isFieldModified(fieldNum(SalesTable, CustAccount)))
            {
                this.salesLine().createMarkupTrans(this.axSalesTable().salesTable()
                                                   ,true
                                                   );
            }

            if (this.axSalesTable().salesTable().mcrSalesTable().ContinuityChild)
            {
                this.salesLine().type().initMcrSalesLine(this.axSalesTable().salesTable());
            }

            if(this.axSalesTable().isFieldModified(fieldNum(SalesTable, InventLocationId))
                || this.axSalesTable().isFieldModified(fieldNum(SalesTable, InventSiteId)))
            {
                InventDim inventDim = InventDim::find(this.parmInventDimId());
                this.salesLine().modifyInventDim(inventDim, fieldNum(InventDim, InventLocationId), this.salesLine().canPriceBeReset());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    public Common currentRecord(Common _salesLine = salesLine)
    {
        if (!prmisDefault(_salesLine))
        {
            super(_salesLine);
            salesLine = _salesLine as SalesLine;
        }
        else
        {
            super();
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custExternalItemDescription</Name>
				<Source><![CDATA[
    public CustExternalItemDescription custExternalItemDescription(CustExternalItemDescription _custExternalItemDescription = null)
    {
        CustExternalItemDescription     custExternalItemDescription;

        if (!custExternalItemDescriptionIdx)
        {
            custExternalItemDescriptionIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_custExternalItemDescription))
        {
            this.classCacheInsert(custExternalItemDescriptionIdx, _custExternalItemDescription);
            custExternalItemDescription = _custExternalItemDescription;
        }
        else
        {
            if (this.classCacheExist(custExternalItemDescriptionIdx))
            {
                custExternalItemDescription = this.classCacheLookup(custExternalItemDescriptionIdx);
            }
            else
            {
                custExternalItemDescription = this.axSalesTable().salesTable().instantiateCustExternalItemDescription(this.parmItemId(), this.axInventDim().inventDim());
                custExternalItemDescription.findExternalDescription();

                this.classCacheInsert(custExternalItemDescriptionIdx, custExternalItemDescription);
            }
        }

        return custExternalItemDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvModeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>DlvMode</c> record buffer using an internal cache.
    /// </summary>
    /// <param name="_dlvMode">
    ///    A <c>DlvMode</c> record buffer to store; optional.
    /// </param>
    /// <returns>
    ///    The <c>DlvMode</c> record buffer.
    /// </returns>
    public DlvMode dlvModeRecord(DlvMode _dlvMode = null)
    {
        DlvMode   dlvMode;

        if (!dlvModeIdx)
        {
            dlvModeIdx          = this.nextCacheIdx();
        }

        if (!prmisDefault(_dlvMode))
        {
            this.tableCacheInsert(dlvModeIdx, _dlvMode);
            dlvMode = _dlvMode;
        }
        else
        {
            if (this.tableCacheExist(dlvModeIdx))
            {
                dlvMode = this.tableCacheLookup(dlvModeIdx);
            }
            else
            {
                this.setDlvMode();
                dlvMode = DlvMode::find(this.parmDlvMode());
                this.tableCacheInsert(dlvModeIdx, dlvMode);
            }
        }

        return dlvMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves or updates a sales order record.
    /// </summary>
    /// <remarks>
    /// The <c>dosave</c> method is overridden to enable credit limit checks to be skipped when it creates
    /// sales order lines.
    /// </remarks>
    public void doSave()
    {
        AxSalesLine localSalesLine;

        if (!this.isFieldSet(fieldNum(SalesLine, SalesPrice)))
        {
            setLineAmountInUpdateFromInventDim = true;
        }

        ttsbegin;

        runState        = AxBCRunState::Save;
        fieldModified   = new Set(Types::Integer);

        this.initRecord();

        this.inputStatus(InternalExternal::Internal);

        if (defaulting)
        {
            this.setTableFields();

            this.setDimensionEntitySpecifiers();
        }

        this.createOrUpdateRelatedRecords();

        this.setAlternativeItem();

        this.validateFields();

        InventMovement::bufferSetRemainQty(this.currentRecord());

        this.validateWrite();

        this.associateWithAgreementLine();

        this.validateAgreementLink();

        localSalesLine = this.axOrig() as AxSalesLine;

        if (this.parmReturnDispositionCodeId()
        &&  !salesLine.InterCompanyInventTransId
        &&  salesLine.ReturnDispositionCodeId != localSalesLine.parmReturnDispositionCodeId()
        &&  salesLine.ReturnStatus            == localSalesLine.parmReturnStatus())
        {
            salesLine.returnUpdateBasedOnDispcode();
        }

        if (this.mustUpdateSalesLine())
        {
            salesLine.update();
        }
        else
        {
            salesLine.insert(false,true,null,this.skipCreditLimitCheck());
        }

        this.resetInternalValues();

        if (SalesLineCTPDeliveryDateControlRecalculateFeature::instance().isEnabled()
            && SalesParameters::find().DeliveryDateCTPRecalculateOnUpdate
            && deliveryDateUpdateInLines)
        {            
            salesLine.recalculateSalesLineCTPDeliveryDate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales line must be updated.
    /// </summary>
    /// <returns>true if the sales line must be updated; otherwise, false.</returns>
    protected boolean mustUpdateSalesLine()
    {
        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an empty <c>SalesLine</c> record.
    /// </summary>
    /// <returns>
    /// An empty <c>SalesLine</c> record.
    /// </returns>
    protected Common emptyRecord()
    {
        SalesLine localSalesLine;
        return localSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an error when an <c>inventDim</c> section is missing in an XML string.
    /// </summary>
    /// <remarks>
    /// The <c>end</c> method is used for processing incoming documents and is run before popping an AxBC
    /// object off the stack. The method is required because AxBC classes have <c>AxInventDim</c> as a
    /// child.This method must throw an error if no inventory dimension section has been encountered in the
    /// XML. This method is intended for internal use only and it should not be called through the
    /// interface.
    /// </remarks>
    public void end()
    {
        super();
        lineNum = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyFields</Name>
				<Source><![CDATA[
    public List getKeyFields()
    {
        List    fieldIdList  = new List(Types::Integer);
        fieldIdList.addEnd(fieldNum(SalesLine,RecId));

        return fieldIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForeignTradeFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialises foreign trade fields from item.
    /// </summary>
    /// <param name = "_itemId">Item number.</param>
    public void initForeignTradeFromInventTable(ItemId _itemId)
    {
        InventTable inventTable = InventTable::find(_itemId);

        salesLine.IntrastatCommodity = inventTable.IntrastatCommodity;
        salesLine.OrigCountryRegionId = inventTable.OrigCountryRegionId;
        salesLine.OrigStateId = inventTable.OrigStateId;

        this.setFieldAsTouched(fieldNum(SalesLine, OrigStateId));
        this.setFieldAsTouched(fieldNum(SalesLine, OrigCountryRegionId));
        this.setFieldAsTouched(fieldNum(SalesLine, IntrastatCommodity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMandatoryFieldsExemptionList</Name>
				<Source><![CDATA[
    protected void initMandatoryFieldsExemptionList()
    {
        super();
        this.setParmMethodAsNotMandatory(methodStr(AxSalesLine,parmCustAccount));
        this.setParmMethodAsNotMandatory(methodStr(AxSalesLine,parmCustGroup));
        this.setParmMethodAsNotMandatory(methodStr(AxSalesLine,parmShippingDateRequested));
        this.setParmMethodAsNotMandatory(methodStr(AxSalesLine,parmCurrencyCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemBarcodeRecord</Name>
				<Source><![CDATA[
    public InventItemBarcode inventItemBarcodeRecord(InventItemBarcode _inventItemBarcode = null)
    {
        InventItemBarcode   inventItemBarcode;

        if (!inventItemBarcodeIdx)
        {
            inventItemBarcodeIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_inventItemBarcode))
        {
            this.tableCacheInsert(inventItemBarcodeIdx, _inventItemBarcode);
            inventItemBarcode = _inventItemBarcode;
        }
        else
        {
            if (this.tableCacheExist(inventItemBarcodeIdx))
            {
                inventItemBarcode = this.tableCacheLookup(inventItemBarcodeIdx);
            }
            else
            {
                this.setInventItemBarcodeRecordFields();
                inventItemBarcode = InventItemBarcode::findSalesBarcodeDimension(this.parmItemId(), InventDim::find(this.parmInventDimId()), '', this.parmSalesUnit());
                this.tableCacheInsert(inventItemBarcodeIdx, inventItemBarcode);
            }
        }

        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteDimensionLink</Name>
				<Source><![CDATA[
    protected InventSiteDimensionLink inventSiteDimensionLink()
    {
        return InventSiteDimensionLink::newDimensionTables(this.salesLine(), this.axInventDim().inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableRecord</Name>
				<Source><![CDATA[
    public InventTable inventTableRecord(InventTable _inventTable = null)
    {
        InventTable   inventTable;

        if (!inventTableIdx)
        {
            inventTableIdx          = this.nextCacheIdx();
        }

        if (!prmisDefault(_inventTable))
        {
            this.tableCacheInsert(inventTableIdx, _inventTable);
            inventTable = _inventTable;
        }
        else
        {
            if (this.tableCacheExist(inventTableIdx))
            {
                inventTable = this.tableCacheLookup(inventTableIdx);
            }
            else
            {
                this.setInventTableRecordFields();
                inventTable = InventTable::find(this.parmItemId());
                this.tableCacheInsert(inventTableIdx, inventTable);
            }
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAxSalesTableFieldsSet</Name>
				<Source><![CDATA[
    public boolean isAxSalesTableFieldsSet()
    {
        return this.isFieldSet(fieldNum(SalesLine, SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustExternalItemDescriptionFieldsSet</Name>
				<Source><![CDATA[
    protected boolean isCustExternalItemDescriptionFieldsSet()
    {
        return this.isFieldSet(fieldNum(SalesLine, ItemId))                             ||
               this.axInventDim().isFieldSet(fieldNum(InventDim, ConfigId))             ||
               this.axSalesTable().isFieldModified(fieldNum(SalesTable, CustAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventItemBarcodeRecordFieldsSet</Name>
				<Source><![CDATA[
    protected boolean isInventItemBarcodeRecordFieldsSet()
    {
        return this.isFieldSet(fieldNum(SalesLine, ItemId))
            || this.isFieldSet(fieldNum(SalesLine, SalesUnit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventTableRecordFieldsSet</Name>
				<Source><![CDATA[
    public boolean isInventTableRecordFieldsSet()
    {
        return this.isFieldSet(fieldNum(SalesLine, ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMCRInventModelGroupRecordFieldsSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determins wheter the <c>ItemId</c> field is set on the sales line.
    /// </summary>
    /// <returns>
    /// true if the field is set; otherwise, false.
    /// </returns>
    public boolean isMCRInventModelGroupRecordFieldsSet()
    {
        return this.isFieldSet(fieldNum(SalesLine, ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDisc_FieldsEmpty</Name>
				<Source><![CDATA[
    public boolean isPriceDisc_FieldsEmpty()
    {
        return salesLine.SalesPrice     == 0
            && salesLine.SalesMarkup    == 0
            && salesLine.LinePercent    == 0
            && salesLine.LineDisc       == 0
            && salesLine.MultiLnPercent == 0
            && salesLine.MultiLnDisc    == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDisc_LineDiscFieldsSet</Name>
				<Source><![CDATA[
    protected boolean isPriceDisc_LineDiscFieldsSet()
    {
        AxSalesLine localSalesLine = this.axOrig() as AxSalesLine;
        return this.isFieldSet(fieldNum(SalesLine, ItemId))                                                     ||
               this.isFieldSet(fieldNum(SalesLine, SalesUnit))                                                  ||
               this.isFieldSet(fieldNum(SalesLine, SalesQty))                                                   ||
               this.axSalesTable().isFieldModified(fieldNum(SalesTable, DeliveryDate))                          ||
               (this.axSalesTable().isFieldModified(fieldNum(SalesTable, CustAccount))  &&
                this.priceParametersRecord().isSalesLineDiscCustAccountActive())                                ||
               (this.axSalesTable().isFieldModified(fieldNum(SalesTable, LineDisc))     &&
                !this.salesLine().isInterCompanyOrderLineInvoiceMatched() &&
                this.priceParametersRecord().isSalesLineDiscGroupActive())                                      ||
               this.isInventTableRecordFieldsSet()                                                              ||
               (this.isInventTableRecordFieldsSet()             &&
                this.inventTableRecord().salesLineDisc() != localSalesLine.inventTableRecord().salesLineDisc())  ||
               (this.axInventDim().isSalesPriceDiscFieldsSet(this.inventTableRecord()) &&
                !this.salesLine().isInterCompanyOrderLineInvoiceMatched() &&
                this.salesLine().LineDeliveryType != LineDeliveryType::DeliveryLine)                             ||
               (SalesParameters::find().PriceDateType == SalesPriceDateType::ShippingDateRequested &&
                this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShippingDateConfirmed))   &&
                !this.salesLine().isDropShipmentPOLineInvoiceMatched()                             &&
                !this.salesLine().isInterCompanyOrderLineInvoiceMatched());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceDisc_LineDiscParamsSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>PriceDisc_LineDisc</c> object and sets parameters.
    /// </summary>
    /// <returns>
    /// The initialized <c>PriceDisc_LineDisc</c> record.
    /// </returns>
    protected PriceDisc_LineDisc initPriceDisc_LineDiscParamsSet()
    {
        PriceDisc_LineDisc priceDisc_LineDisc =  new PriceDisc_LineDisc();

        this.setPriceDisc_LineDiscFields();
        this.setReceiptDateRequested();
        this.setShippingDateRequested();

        this.setPriceDisc_LineDiscParams(priceDisc_LineDisc);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.isFieldSet(fieldNum(SalesLine, PriceAgreementDate_RU)) && this.parmPriceAgreementDate_RU())
            {
                priceDisc_LineDisc.parmDiscDate(this.parmPriceAgreementDate_RU());
            }
            priceDisc_LineDisc.parmAgreementHeaderExt_RU(this.axSalesTable_RU().parmAgreementHeaderExt_RU());
        }
        // </GEERU>

        return priceDisc_LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceDisc_PriceParamsSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>PriceDisc_Price</c> object and sets parameters.
    /// </summary>
    /// <returns>
    /// The initialized <c>PriceDisc_Price</c> record.
    /// </returns>
    protected PriceDisc_Price initPriceDisc_PriceParamsSet()
    {
        PriceDisc_Price priceDisc_Price = new PriceDisc_Price();

        this.setPriceDisc_PriceFields();
        this.setPriceDisc_PriceParams(priceDisc_Price);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.isFieldSet(fieldNum(SalesLine, PriceAgreementDate_RU)) && this.parmPriceAgreementDate_RU())
            {
                priceDisc_Price.parmPriceDate(this.parmPriceAgreementDate_RU());
            }

            priceDisc_Price.parmAgreementHeaderExt_RU(this.axSalesTable_RU().parmAgreementHeaderExt_RU());
            priceDisc_Price.parmAgreementPartnerCode_RU(this.axSalesTable().parmInvoiceAccount());
        }
        // </GEERU>

        return priceDisc_Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDisc_PriceFieldsSet</Name>
				<Source><![CDATA[
    protected boolean isPriceDisc_PriceFieldsSet()
    {
        if (!isIsPriceDiscPriceFieldsSetExecuted)
        {
            isPriceDiscPriceFieldsSet = this.isFieldSet(fieldNum(SalesLine, ItemId))                                             ||
               this.isFieldSet(fieldNum(SalesLine, SalesUnit))                                          ||
               this.isFieldSet(fieldNum(SalesLine, SalesQty))                                           ||
                // <GEERU>
               (   SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                && this.axSalesTable_RU().isFieldModified(fieldNum(SalesTable_RU, PriceAgreementDate_RU)))    ||
               // </GEERU>
               this.isInventTableRecordFieldsSet()                                                      ||
               (this.axSalesTable().isFieldModified(fieldNum(SalesTable, CustAccount))  &&
                this.priceParametersRecord().isSalesPriceCustAccountActive())                           ||
               (this.axSalesTable().isFieldModified(fieldNum(SalesTable, PriceGroupId)) &&
                this.priceParametersRecord().isSalesPriceGroupActive() &&
                !this.salesLine().isInterCompanyOrderLineInvoiceMatched())                              ||
               (this.isProjTableRecordFieldsSet() &&
                (this.projTableRecord().Type == ProjType::TimeMaterial ||
                 (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
                  ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(this.projTableRecord().ProjId,
                                                                                                       this.projTableRecord().ProjInvoiceProjId,
                                                                                                       ProjTransType::Item,
                                                                                                       ProjContractBillingMethod::TimeMaterial)))) ||
               (this.axInventDim().isSalesPriceDiscFieldsSet(this.inventTableRecord()) &&
                !this.salesLine().isInterCompanyOrderLineInvoiceMatched() &&
                this.salesLine().LineDeliveryType != LineDeliveryType::DeliveryLine);

            isIsPriceDiscPriceFieldsSetExecuted = true;
        }
        return isPriceDiscPriceFieldsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjTableRecordFieldsSet</Name>
				<Source><![CDATA[
    protected boolean isProjTableRecordFieldsSet()
    {
        return this.isFieldSet(fieldNum(SalesLine, ProjId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStorageDimFieldSet</Name>
				<Source><![CDATA[
    public boolean isStorageDimFieldSet(FieldId _fieldId)
    {
        return this.axInventDim().isFieldSet(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInventModelGroupRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adding <c>inventModelGroup</c> for reservation flag defaulting.
    /// </summary>
    /// <param name="_inventModelGroup">
    /// The inventory model group ID to be set.
    /// </param>
    /// <returns>
    /// The inventory model group ID.
    /// </returns>
    public InventModelGroup mcrInventModelGroupRecord(InventModelGroup _inventModelGroup = null)
    {
        InventModelGroup   inventModelGroup;

        if (!inventModelGroupIdx)
        {
            inventModelGroupIdx          = this.nextCacheIdx();
        }

        if (!prmisDefault(_inventModelGroup))
        {
            this.tableCacheInsert(inventModelGroupIdx, _inventModelGroup);
            inventModelGroup = _inventModelGroup;
        }
        else
        {
            if (this.tableCacheExist(inventModelGroupIdx))
            {
                inventModelGroup = this.tableCacheLookup(inventModelGroupIdx);
            }
            else
            {
                this.setInventTableRecordFields();
                inventModelGroup = InventModelGroup::find(this.inventTableRecord().modelGroupId());
                this.tableCacheInsert(inventModelGroupIdx, inventModelGroup);
            }
        }

        return inventModelGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetCalledFromSalesTable2LineUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the class variable to the passed boolean parameter.
    /// </summary>
    /// <param name="_mcrCalledFromSalesTable2LineUpdate">
    /// The boolean parameter passed to be set on the class variable.
    /// </param>
    public void mcrSetCalledFromSalesTable2LineUpdate(boolean _mcrCalledFromSalesTable2LineUpdate)
    {
        mcrCalledFromSalesTable2LineUpdate = _mcrCalledFromSalesTable2LineUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetInventModelGroupRecordFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check to see if fields are set that are required for the <c>InventModelGroup</c> table record.
    /// </summary>
    protected void mcrSetInventModelGroupRecordFields()
    {
        this.setItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveAxSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies values to a different <c>AxSalesLine</c> object.
    /// </summary>
    /// <param name="_axSalesLine">
    ///    The <c>AxSalesLine</c> object from which to copy.
    /// </param>
    /// <remarks>
    ///    This method copies values from one <c>AxSalesLine</c> object to another. It is typically used to
    ///    copy values from an <c>AxSalesLine</c> object to an <c>AxSalesLine</c> object derivative.
    /// </remarks>
    public void moveAxSalesLine(AxSalesLine _axSalesLine)
    {
        MapIterator     fieldTouchedIterator;

        fieldTouchedIterator = new MapIterator(fieldTouched);
        fieldTouchedIterator.begin();
        while (fieldTouchedIterator.more())
        {
            _axSalesLine.fieldId(fieldTouchedIterator.domainValue(), this.salesLine().(fieldTouchedIterator.domainValue()));
            fieldTouchedIterator.next();
        }

        if (this.mapPolicy())
        {
            _axSalesLine.mapPolicy(this.mapPolicy());
        }
        _axSalesLine.xmlDocDirection(this.xmlDocDirection());
        if (this.parentAxBC())
        {
            _axSalesLine.parentAxBC(this.parentAxBC());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        axInventDim = AxInventDim_SalesLine::newAxSalesLine(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmActivityNumber(ProjActivityNumber _activityNumber = '')
    {
        if (!prmisDefault(_activityNumber))
        {
            this.setField(fieldNum(SalesLine, ActivityNumber), _activityNumber);
        }

        return salesLine.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressRefRecId</Name>
				<Source><![CDATA[
    public AddressRefRecId parmAddressRefRecId(AddressRefRecId _addressRefRecId = 0)
    {
        if (!prmisDefault(_addressRefRecId))
        {
            this.setField(fieldNum(SalesLine, AddressRefRecId), _addressRefRecId);
        }

        return salesLine.AddressRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressRefTableId</Name>
				<Source><![CDATA[
    public AddressRefTableId parmAddressRefTableId(AddressRefTableId _addressRefTableId = 0)
    {
        if (!prmisDefault(_addressRefTableId))
        {
            this.setField(fieldNum(SalesLine, AddressRefTableId), _addressRefTableId);
        }

        return salesLine.AddressRefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementSkipAutoLink</Name>
				<Source><![CDATA[
    public AgreementSkipAutoLink parmAgreementSkipAutoLink(AgreementSkipAutoLink _agreementSkipAutoLink = NoYes::No)
    {
        if (!prmisDefault(_agreementSkipAutoLink))
        {
            this.setField(fieldNum(SalesLine, AgreementSkipAutoLink), _agreementSkipAutoLink);
        }

        return salesLine.AgreementSkipAutoLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId_RU</Name>
				<Source><![CDATA[
    public AssetIdOpen parmAssetId_RU(AssetIdOpen _assetId_RU = '')
    {
        if (!prmisDefault(_assetId_RU))
        {
            this.setField(fieldNum(SalesLine, AssetId_RU), _assetId_RU);
        }

        return salesLine.AssetId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBarCode</Name>
				<Source><![CDATA[
    public SalesBarCode parmBarCode(SalesBarCode _barCode = '')
    {
        if (!prmisDefault(_barCode))
        {
            this.setField(fieldNum(SalesLine, BarCode), _barCode);
        }

        return salesLine.BarCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBarCodeType</Name>
				<Source><![CDATA[
    public BarcodeSetupId parmBarCodeType(BarcodeSetupId _barCodeType = '')
    {
        if (!prmisDefault(_barCodeType))
        {
            this.setField(fieldNum(SalesLine, BarCodeType), _barCodeType);
        }

        return salesLine.BarCodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBlocked</Name>
				<Source><![CDATA[
    public LineStopped parmBlocked(LineStopped _blocked = NoYes::No)
    {
        if (!prmisDefault(_blocked))
        {
            this.setField(fieldNum(SalesLine, Blocked), _blocked);
        }

        return salesLine.Blocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComplete</Name>
				<Source><![CDATA[
    public LineComplete parmComplete(LineComplete _complete = NoYes::No)
    {
        if (!prmisDefault(_complete))
        {
            this.setField(fieldNum(SalesLine, Complete), _complete);
        }

        return salesLine.Complete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfirmedDlv</Name>
				<Source><![CDATA[
    public SalesShippingDate parmConfirmedDlv(SalesShippingDate _confirmedDlv = dateNull())
    {
        if (!prmisDefault(_confirmedDlv))
        {
            this.setField(fieldNum(SalesLine, ConfirmedDlv), _confirmedDlv);
        }

        return salesLine.ConfirmedDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostPrice</Name>
				<Source><![CDATA[
    public ReturnCostPrice parmCostPrice(ReturnCostPrice _costPrice = 0)
    {
        if (!prmisDefault(_costPrice))
        {
            this.setField(fieldNum(SalesLine, CostPrice), _costPrice);
        }

        return salesLine.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegionName_RU</Name>
				<Source><![CDATA[
    public AddressCountryRegionName parmCountryRegionName_RU(AddressCountryRegionName _value = '')
    {
        if (!prmisDefault(_value))
        {
            this.setField(fieldNum(SalesLine, CountryRegionName_RU), _value);
        }

        return salesLine.CountryRegionName_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountyOrigDest</Name>
				<Source><![CDATA[
    public AddressCountyOrigDest parmCountyOrigDest(AddressCountyOrigDest   _countyOrigDest = '')
    {
        if (!prmisDefault(_countyOrigDest))
        {
            this.setField(fieldNum(SalesLine, CountyOrigDest), _countyOrigDest);
        }

        return salesLine.CountyOrigDest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditNoteInternalRef_PL</Name>
				<Source><![CDATA[
    public CreditNoteInternalRef_W parmCreditNoteInternalRef_PL(CreditNoteInternalRef_W _creditNoteInternalRef_PL = 0)
    {
        if (!prmisDefault(_creditNoteInternalRef_PL))
        {
            this.setField(fieldNum(SalesLine, CreditNoteInternalRef_PL), _creditNoteInternalRef_PL);
        }

        return salesLine.CreditNoteInternalRef_PL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditNoteReasonCode</Name>
				<Source><![CDATA[
    public ReasonTableRefRecId parmCreditNoteReasonCode(ReasonTableRefRecId _creditNoteReasonCode = 0)
    {
        if (!prmisDefault(_creditNoteReasonCode))
        {
            this.setField(fieldNum(SalesLine, CreditNoteReasonCode), _creditNoteReasonCode);
        }

        return salesLine.CreditNoteReasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public str parmCurrencyCode(str _currencyCode = '')
    {
        DictField   dictField;
        if (!prmisDefault(_currencyCode))
        {
            dictField = new DictField(tableNum(SalesLine),fieldNum(SalesLine,CurrencyCode));
            this.validateInboundCurrencyString(_currencyCode,dictField);

            if (this.valueMappingInbound())
            {
                _currencyCode = this.axCurrencyCode(_currencyCode);
            }

            this.setField(fieldNum(SalesLine, CurrencyCode), _currencyCode);
        }

        if (this.valueMappingOutbound())
        {
            return this.axCurrencyCode(salesLine.CurrencyCode);
        }
        return salesLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    public str parmCustAccount(str _custAccount = '')
    {
        DictField   dictField;

        if (!prmisDefault(_custAccount))
        {
            dictField = new DictField(tableNum(SalesLine),fieldNum(SalesLine,CustAccount));

            if (this.valueMappingInbound())
            {
                this.validateInboundString(_custAccount,dictField,this.mapPolicy().xMLMapCustAccount());
                _custAccount = this.axCustAccount(_custAccount);
            }
            else
            {
                this.validateInboundString(_custAccount,dictField);
            }

            this.setField(fieldNum(SalesLine, CustAccount), _custAccount);
        }

        if (this.valueMappingOutbound())
        {
            return this.axCustAccount(salesLine.CustAccount);
        }
        return salesLine.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustGroup</Name>
				<Source><![CDATA[
    public CustGroupId parmCustGroup(CustGroupId _custGroup = '')
    {
        if (!prmisDefault(_custGroup))
        {
            this.setField(fieldNum(SalesLine, CustGroup), _custGroup);
        }

        return salesLine.CustGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerLineNum</Name>
				<Source><![CDATA[
    public CustLineNum parmCustomerLineNum(CustLineNum _customerLineNum = 0)
    {
        if (!prmisDefault(_customerLineNum))
        {
            this.setField(fieldNum(SalesLine, CustomerLineNum), _customerLineNum);
        }

        return salesLine.CustomerLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerRef</Name>
				<Source><![CDATA[
    public CustRefLine parmCustomerRef(CustRefLine _customerRef = '')
    {
        if (!prmisDefault(_customerRef))
        {
            this.setField(fieldNum(SalesLine, CustomerRef), _customerRef);
        }

        return salesLine.CustomerRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsDocDate_MX</Name>
				<Source><![CDATA[
    public CustomsDocDate_MX parmCustomsDocDate_MX(CustomsDocDate_MX _customsDocDate = dateNull())
    {
        if (!prmisDefault(_customsDocDate))
        {
            this.setField(fieldNum(SalesLine, CustomsDocDate_MX), _customsDocDate);
        }

        return salesLine.CustomsDocDate_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsDocNumber_MX</Name>
				<Source><![CDATA[
    public CustomsDocNumber_MX parmCustomsDocNumber_MX(CustomsDocNumber_MX _customsDocNumber = '')
    {
        if (!prmisDefault(_customsDocNumber))
        {
            this.setField(fieldNum(SalesLine, CustomsDocNumber_MX), _customsDocNumber);
        }

        return salesLine.CustomsDocNumber_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsName_MX</Name>
				<Source><![CDATA[
    public CustomsName_MX parmCustomsName_MX(CustomsName_MX _customsName = '')
    {
        if (!prmisDefault(_customsName))
        {
            this.setField(fieldNum(SalesLine, CustomsName_MX), _customsName);
        }

        return salesLine.CustomsName_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension(DimensionDefault _defaultDimension = 0)
    {
        if (!prmisDefault(_defaultDimension))
        {
            this.setField(fieldNum(SalesLine, DefaultDimension), _defaultDimension);
        }

        return salesLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveredIntotal</Name>
				<Source><![CDATA[
    public SalesQty parmDeliveredIntotal(SalesQty _salesQty = 0)
    {
        return salesLine.deliveredInTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryDateControlType</Name>
				<Source><![CDATA[
    public SalesDeliveryDateControlType parmDeliveryDateControlType(SalesDeliveryDateControlType _deliveryDateControlType = SalesDeliveryDateControlType::None)
    {
        if (!prmisDefault(_deliveryDateControlType))
        {
            this.setField(fieldNum(SalesLine, DeliveryDateControlType), _deliveryDateControlType);
        }

        return salesLine.DeliveryDateControlType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryName</Name>
				<Source><![CDATA[
    public CustName parmDeliveryName(CustName _deliveryName = '')
    {
        if (!prmisDefault(_deliveryName))
        {
            this.setField(fieldNum(SalesLine, DeliveryName), _deliveryName);
        }

        return salesLine.DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddressRecId parmDeliveryPostalAddress(LogisticsPostalAddressRecId _deliveryPostalAddress = 0)
    {
        if (!prmisDefault(_deliveryPostalAddress))
        {
            this.setField(fieldNum(SalesLine, DeliveryPostalAddress), _deliveryPostalAddress);
        }

        return salesLine.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryTaxGroup_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>DeliveryTaxGroup_BR</c> parameter.
    /// </summary>
    /// <param name="_deliverytaxGroup_BR">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    The value of the <c>DeliveryTaxGroup_BR</c> parameter.
    /// </returns>
    public TaxGroup parmDeliveryTaxGroup_BR(TaxGroup _deliverytaxGroup_BR = '')
    {
        if (!prmisDefault(_deliverytaxGroup_BR))
        {
            this.setField(fieldNum(SalesLine, DeliveryTaxGroup_BR), _deliverytaxGroup_BR);
        }

        return salesLine.DeliveryTaxGroup_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryTaxItemGroup_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>DeliveryTaxItemGroup_BR</c> parameter.
    /// </summary>
    /// <param name="_deliverytaxitemGroup_BR">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    The value of the <c>DeliveryTaxItemGroup_BR</c> parameter.
    /// </returns>
    public TaxItemGroup parmDeliveryTaxItemGroup_BR(TaxGroup _deliverytaxitemGroup_BR = '')
    {
        if (!prmisDefault(_deliverytaxitemGroup_BR))
        {
            this.setField(fieldNum(SalesLine, DeliveryTaxItemGroup_BR), _deliverytaxitemGroup_BR);
        }

        return salesLine.DeliveryTaxItemGroup_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryType</Name>
				<Source><![CDATA[
    public TradeLineDlvTypeId parmDeliveryType(TradeLineDlvTypeId _deliveryType = TradeLineDlvType::None)
    {
        if (!prmisDefault(_deliveryType))
        {
            this.setField(fieldNum(SalesLine, DeliveryType), _deliveryType);
        }

        return salesLine.DeliveryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipReceiptDateRequestedFieldsModified</Name>
				<Source><![CDATA[
    protected boolean isShipReceiptDateRequestedFieldsModified()
    {
        return (this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShippingDateRequested))
                || this.axSalesTable().isFieldModified(fieldNum(SalesTable, ReceiptDateRequested)))
                && !this.salesLine().isDropShipmentPOLineInvoiceMatched()
                && !this.salesLine().isInterCompanyOrderLineInvoiceMatched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDlvMode</Name>
				<Source><![CDATA[
    public str parmDlvMode(str _dlvMode = '')
    {
        DictField   dictField;

        if (!prmisDefault(_dlvMode))
        {
            dictField = new DictField(tableNum(SalesLine),fieldNum(SalesLine,DlvMode));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_dlvMode,dictField,this.mapPolicy().xMLMapDlvMode());
                _dlvMode = this.axDlvModeId(_dlvMode);
            }
            else
            {
                this.validateInboundString(_dlvMode,dictField);
            }

            this.setField(fieldNum(SalesLine, DlvMode), _dlvMode);
        }

        if (this.valueMappingOutbound())
        {
            return this.axDlvModeId(salesLine.DlvMode);
        }
        return salesLine.DlvMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDlvTerm</Name>
				<Source><![CDATA[
    public str parmDlvTerm(str _dlvTerm = '')
    {
        DictField   dictField;

        if (!prmisDefault(_dlvTerm))
        {
            dictField = new DictField(tableNum(SalesLine), fieldNum(SalesLine, DlvTerm));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_dlvTerm, dictField, this.mapPolicy().xMLMapDlvTerm());
                _dlvTerm = this.axDlvTermId(_dlvTerm);
            }
            else
            {
                this.validateInboundString(_dlvTerm, dictField);
            }

            this.setField(fieldNum(SalesLine, DlvTerm), _dlvTerm);
        }

        if (this.valueMappingOutbound())
        {
            return this.axDlvTermId(salesLine.DlvTerm);
        }
        return salesLine.DlvTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEInvoiceAccountCode</Name>
				<Source><![CDATA[
    public EInvoiceAccountCode parmEInvoiceAccountCode(EInvoiceAccountCode _eInvoiceAccountCode = '')
    {
        if (!prmisDefault(_eInvoiceAccountCode))
        {
            this.setField(fieldNum(SalesLine, eInvoiceAccountCode), _eInvoiceAccountCode);
        }

        return salesLine.eInvoiceAccountCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpectedRetQty</Name>
				<Source><![CDATA[
    public ReturnExpectedRetQty parmExpectedRetQty(ReturnExpectedRetQty _expectedRetQty = 0)
    {
        if (!prmisDefault(_expectedRetQty))
        {
            this.setField(fieldNum(SalesLine, ExpectedRetQty), _expectedRetQty);
        }

        return salesLine.ExpectedRetQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExternalItemId</Name>
				<Source><![CDATA[
    public SalesExternalItemId parmExternalItemId(SalesExternalItemId _externalItemId = '')
    {
        if (!prmisDefault(_externalItemId))
        {
            this.setField(fieldNum(SalesLine, ExternalItemId), _externalItemId);
        }

        return salesLine.ExternalItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyInventTransId</Name>
				<Source><![CDATA[
    public TradeInventTransId parmInterCompanyInventTransId(TradeInventTransId _interCompanyInventTransId = '')
    {
        if (!prmisDefault(_interCompanyInventTransId))
        {
            this.setField(fieldNum(SalesLine, InterCompanyInventTransId), _interCompanyInventTransId);
        }

        return salesLine.InterCompanyInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyOrigin</Name>
				<Source><![CDATA[
    public InterCompanyOrigin parmInterCompanyOrigin(InterCompanyOrigin _interCompanyOrigin = InterCompanyOrigin::Source)
    {
        if (!prmisDefault(_interCompanyOrigin))
        {
            this.setField(fieldNum(SalesLine, InterCompanyOrigin), _interCompanyOrigin);
        }

        return salesLine.InterCompanyOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntrastatFulfillmentDate_HU</Name>
				<Source><![CDATA[
    public IntrastatFulfillmentDate_HU parmIntrastatFulfillmentDate_HU(IntrastatFulfillmentDate_HU _intrastatFulfillmentDate_HU = dateNull())
    {
        if (!prmisDefault(_intrastatFulfillmentDate_HU))
        {
            this.setField(fieldNum(SalesLine, IntrastatFulfillmentDate_HU), _intrastatFulfillmentDate_HU);
        }

        return salesLine.IntrastatFulfillmentDate_HU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDeliverNow</Name>
				<Source><![CDATA[
    public InventQty parmInventDeliverNow(InventQty _inventDeliverNow = 0)
    {
        if (!prmisDefault(_inventDeliverNow))
        {
            this.setField(fieldNum(SalesLine, InventDeliverNow), _inventDeliverNow);
        }

        return salesLine.InventDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = '')
    {
        if (!prmisDefault(_inventDimId))
        {
            this.setField(fieldNum(SalesLine, InventDimId), _inventDimId);
        }

        return salesLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventRefId</Name>
				<Source><![CDATA[
    public InventRefId parmInventRefId(InventRefId _inventRefId = '')
    {
        if (!prmisDefault(_inventRefId))
        {
            this.setField(fieldNum(SalesLine, InventRefId), _inventRefId);
        }

        return salesLine.InventRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventRefTransId</Name>
				<Source><![CDATA[
    public InventRefTransId parmInventRefTransId(InventRefTransId _inventRefTransId = '')
    {
        if (!prmisDefault(_inventRefTransId))
        {
            this.setField(fieldNum(SalesLine, InventRefTransId), _inventRefTransId);
        }

        return salesLine.InventRefTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventRefType</Name>
				<Source><![CDATA[
    public InventRefType parmInventRefType(InventRefType _inventRefType = InventRefType::None)
    {
        if (!prmisDefault(_inventRefType))
        {
            this.setField(fieldNum(SalesLine, InventRefType), _inventRefType);
        }

        return salesLine.InventRefType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public TradeInventTransId parmInventTransId(TradeInventTransId _inventTransId = salesLine.InventTransId)
    {
        if (!prmisDefault(_inventTransId))
        {
            this.setField(fieldNum(SalesLine, InventTransId), _inventTransId);
        }
        return salesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransIdReturn</Name>
				<Source><![CDATA[
    public TradeInventTransIdReturn parmInventTransIdReturn(TradeInventTransIdReturn _inventTransIdReturn = '')
    {
        if (!prmisDefault(_inventTransIdReturn))
        {
            this.setField(fieldNum(SalesLine, InventTransIdReturn), _inventTransIdReturn);
        }

        return salesLine.InventTransIdReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceGTDId_RU</Name>
				<Source><![CDATA[
    public CustFreeInvoiceGTDId_RU parmInvoiceGTDId_RU(CustFreeInvoiceGTDId_RU _value = '')
    {
        if (!prmisDefault(_value))
        {
            this.setField(fieldNum(SalesLine, InvoiceGTDId_RU), _value);
        }

        return salesLine.InvoiceGTDId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemBOMId</Name>
				<Source><![CDATA[
    public ItemBOMId parmItemBOMId(ItemBOMId _itemBOMId = '')
    {
        if (!prmisDefault(_itemBOMId))
        {
            this.setField(fieldNum(SalesLine, ItemBOMId), _itemBOMId);
        }

        return salesLine.ItemBOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public str parmItemId(str _itemId = '')
    {
        DictField   dictField;
        if (!prmisDefault(_itemId))
        {
            dictField = new DictField(tableNum(SalesLine),fieldNum(SalesLine,ItemId));
            this.validateInboundItemIdString(_itemId,dictField);
            if (this.valueMappingInbound())
            {
                item = _itemId;
            }

            this.setField(fieldNum(SalesLine, ItemId), _itemId);
        }

        if (this.valueMappingOutbound())
        {
            return conPeek(this.axSalesItemId(salesLine.CustAccount,salesLine.ItemId,salesLine.inventDim()),1);
        }
        else
        {
            return salesLine.ItemId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmitemReplaced</Name>
				<Source><![CDATA[
    public ReturnItemReplaced parmitemReplaced(ReturnItemReplaced _itemReplaced = 0)
    {
        if (!prmisDefault(_itemReplaced))
        {
            this.setField(fieldNum(SalesLine, ItemReplaced), _itemReplaced);
        }

        return salesLine.ItemReplaced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemRouteId</Name>
				<Source><![CDATA[
    public ItemRouteId parmItemRouteId(ItemRouteId _itemRouteId = '')
    {
        if (!prmisDefault(_itemRouteId))
        {
            this.setField(fieldNum(SalesLine, ItemRouteId), _itemRouteId);
        }

        return salesLine.ItemRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount parmLedgerDimension(LedgerDimensionAccount _ledgerDimension = 0)
    {
        if (!prmisDefault(_ledgerDimension))
        {
            this.setField(fieldNum(SalesLine, LedgerDimension), _ledgerDimension);
        }

        return salesLine.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAmount</Name>
				<Source><![CDATA[
    public SalesLineAmount parmLineAmount(SalesLineAmount _lineAmount = 0)
    {
        if (!prmisDefault(_lineAmount))
        {
            this.setField(fieldNum(SalesLine, LineAmount), _lineAmount);
        }

        return salesLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDeliveryType</Name>
				<Source><![CDATA[
    public LineDeliveryType parmLineDeliveryType(LineDeliveryType _lineDeliveryType = LineDeliveryType::OrderLine)
    {
        if (!prmisDefault(_lineDeliveryType))
        {
            this.setField(fieldNum(SalesLine, LineDeliveryType), _lineDeliveryType);
        }

        return salesLine.LineDeliveryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDisc</Name>
				<Source><![CDATA[
    public SalesLineDisc parmLineDisc(SalesLineDisc _lineDisc = 0)
    {
        if (!prmisDefault(_lineDisc))
        {
            this.setField(fieldNum(SalesLine, LineDisc), _lineDisc);
        }

        return salesLine.LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineHeader</Name>
				<Source><![CDATA[
    public LineHeader parmLineHeader(LineHeader _lineHeader = '')
    {
        if (!prmisDefault(_lineHeader))
        {
            this.setField(fieldNum(SalesLine, LineHeader), _lineHeader);
        }

        return salesLine.LineHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLineNum(LineNum _lineNum = 0)
    {
        if (!prmisDefault(_lineNum))
        {
            this.setField(fieldNum(SalesLine, LineNum), _lineNum);
        }

        return salesLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinePercent</Name>
				<Source><![CDATA[
    public SalesLinePercent parmLinePercent(SalesLinePercent _linePercent = 0)
    {
        if (!prmisDefault(_linePercent))
        {
            this.setField(fieldNum(SalesLine, LinePercent), _linePercent);
        }

        return salesLine.LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmManualEntryChangepolicy</Name>
				<Source><![CDATA[
    public PriceDiscPolicyManual parmManualEntryChangepolicy(PriceDiscPolicyManual _manualEntryChangepolicy = 0)
    {
        if (!prmisDefault(_manualEntryChangepolicy))
        {
            this.setField(fieldNum(SalesLine, ManualEntryChangepolicy), _manualEntryChangepolicy);
        }

        return salesLine.ManualEntryChangepolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchingAgreementLine</Name>
				<Source><![CDATA[
    public RefRecId parmMatchingAgreementLine(AgreementLineRecId _agreementLineRecId = 0)
    {
        if (!prmisDefault(_agreementLineRecId))
        {
            this.setField(fieldNum(SalesLine, MatchingAgreementLine), _agreementLineRecId);
        }

        return salesLine.MatchingAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    public MCROrderLinePriceHistoryReference parmMCROrderLine2PriceHistoryRef(MCROrderLinePriceHistoryReference _mcrOrderLine2PriceHistoryRef = 0)
    {
        if (!prmisDefault(_mcrOrderLine2PriceHistoryRef))
        {
            this.setField(fieldNum(SalesLine, mcrOrderLine2PriceHistoryRef), _mcrOrderLine2PriceHistoryRef);
        }

        return salesLine.mcrOrderLine2PriceHistoryRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnDisc</Name>
				<Source><![CDATA[
    public SalesMultiLnDisc parmMultiLnDisc(SalesMultiLnDisc _multiLnDisc = 0)
    {
        if (!prmisDefault(_multiLnDisc))
        {
            this.setField(fieldNum(SalesLine, MultiLnDisc), _multiLnDisc);
        }

        return salesLine.MultiLnDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnPercent</Name>
				<Source><![CDATA[
    public SalesMultiLnPercent parmMultiLnPercent(SalesMultiLnPercent _multiLnPercent = 0)
    {
        if (!prmisDefault(_multiLnPercent))
        {
            this.setField(fieldNum(SalesLine, MultiLnPercent), _multiLnPercent);
        }

        return salesLine.MultiLnPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public ItemFreeTxt parmName(ItemFreeTxt _name = '')
    {
        if (!prmisDefault(_name))
        {
            this.setField(fieldNum(SalesLine, Name), _name);
        }

        return salesLine.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverDeliveryPct</Name>
				<Source><![CDATA[
    public SalesOverDeliveryPct parmOverDeliveryPct(SalesOverDeliveryPct _overDeliveryPct = 0)
    {
        if (!prmisDefault(_overDeliveryPct))
        {
            this.setField(fieldNum(SalesLine, OverDeliveryPct), _overDeliveryPct);
        }

        return salesLine.OverDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanningPriority</Name>
				<Source><![CDATA[
    public ReqPlanningPriority parmPlanningPriority(ReqPlanningPriority _planningPriority = 0)
    {
        if (!prmisDefault(_planningPriority))
        {
            this.setField(fieldNum(SalesLine, PlanningPriority), _planningPriority);
        }

        return salesLine.PlanningPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingUnit</Name>
				<Source><![CDATA[
    public str parmPackingUnit(str _packingUnit = '')
    {
        DictField   dictField;

        if (!prmisDefault(_packingUnit))
        {
            dictField = this.sysDictFieldFind(fieldNum(SalesLine,PackingUnit));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_packingUnit,dictField,this.mapPolicy().xmlMapUnitOfMeasureSymbol());
                _packingUnit = this.axUnitOfMeasureSymbol(_packingUnit);
            }
            else
            {
                this.validateInboundString(_packingUnit,dictField);
            }

            this.setField(fieldNum(SalesLine, PackingUnit), _packingUnit);
        }

        if (this.valueMappingOutbound())
        {
            return this.axUnitOfMeasureSymbol(salesLine.PackingUnit);
        }
        return salesLine.PackingUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingUnitQty</Name>
				<Source><![CDATA[
    public InventPackingUnitQty parmPackingUnitQty(InventPackingUnitQty _packingUnitQty = 0)
    {
        if (!prmisDefault(_packingUnitQty))
        {
            this.setField(fieldNum(SalesLine, PackingUnitQty), _packingUnitQty);
        }

        return salesLine.PackingUnitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsBatchAttribAutoRes</Name>
				<Source><![CDATA[
    public PdsBatchAttribAutoRes parmPdsBatchAttribAutoRes(PdsBatchAttribAutoRes _attribRes = NoYes::No)
    {
        if (!prmisDefault(_attribRes))
        {
            this.setField(fieldNum(SalesLine, PdsBatchAttribAutoRes), _attribRes);
        }

        return salesLine.PdsBatchAttribAutoRes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWExpectedRetQty</Name>
				<Source><![CDATA[
    public PdsCWExpectedRetQty parmPdsCWExpectedRetQty(PdsCWInventQty _pdsCWExpectedRetQty = 0)
    {
        if (!prmisDefault(_pdsCWExpectedRetQty))
        {
            this.setField(fieldNum(SalesLine, PdsCWExpectedRetQty),_pdsCWExpectedRetQty);
        }
        return salesLine.PdsCWExpectedRetQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWInventDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be call from the AIF framework to get the SalesLine
    /// PdsCWInventDeliverNow field value.
    /// </summary>
    /// <param name="_qty">CW inventory deliver now</param>
    /// <returns>CW invent deliver now</returns>
    public PdsCWInventQty parmPdsCWInventDeliverNow(PdsCWInventQty _qty = 0)
    {
        if (!prmisDefault(_qty))
        {
            this.setField(fieldNum(SalesLine, PdsCWInventDeliverNow), _qty);
        }

        return salesLine.PdsCWInventDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be call from the AIF framework to get the SalesLine
    /// PdsCWQty field value.
    /// </summary>
    /// <param name="_qty">CW quantity</param>
    /// <returns>CW quantitiy</returns>
    public PdsCWInventQty parmPdsCWQty(PdsCWInventQty _qty = 0)
    {
        SalesQty salesQty;

        if (!prmisDefault(_qty))
        {
            this.setField(fieldNum(SalesLine, PdsCWQty), _qty);

            if (PdsGlobal::pdsIsCWItem(this.parmItemId()))
            {
                salesQty = PdsCatchWeight::inventQty(
                       salesLine.ItemId,
                       salesLine.PdsCWQty,
                       salesLine.SalesUnit);

                this.parmSalesQty(salesQty);
            }
        }

        return salesLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWRemainInventFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be call from the AIF framework to get the SalesLine
    /// PdsCWRemainInventFinancial field value.
    /// </summary>
    /// <param name="_qty">CW remain inventory financial</param>
    /// <returns>CW remain inventory financial</returns>
    public PdsCWInventQty parmPdsCWRemainInventFinancial(PdsCWInventQty _qty = 0)
    {
        if (!prmisDefault(_qty))
        {
            this.setField(fieldNum(SalesLine, PdsCWRemainInventFinancial), _qty);
        }

        return salesLine.PdsCWRemainInventFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWRemainInventPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be call from the AIF framework to get the SalesLine
    /// PdsCWRemainInventPhysical field value.
    /// </summary>
    /// <param name="_qty">CW remain inventory physical</param>
    /// <returns>CW remain inventory physical</returns>
    public PdsCWInventQty parmPdsCWRemainInventPhysical(PdsCWInventQty _qty = 0)
    {
        if (!prmisDefault(_qty))
        {
            this.setField(fieldNum(SalesLine, PdsCWRemainInventPhysical), _qty);
        }

        return salesLine.PdsCWRemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsExcludeFromRebate</Name>
				<Source><![CDATA[
    public PdsExcludeFromRebate parmPdsExcludeFromRebate(PdsExcludeFromRebate _pdsExcludeFromRebate = NoYes::No)
    {
        if (!prmisDefault(_pdsExcludeFromRebate))
        {
            this.setField(fieldNum(SalesLine, PdsExcludeFromRebate), _pdsExcludeFromRebate);
        }

        return salesLine.PdsExcludeFromRebate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsItemRebateGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be call from the AIF framework to get the SalesLine
    /// PdsItemRebateGroupId field value.
    /// </summary>
    /// <param name="_groupId">Item rebate group</param>
    /// <returns>Item rebate group</returns>
    public PdsItemRebateGroupId parmPdsItemRebateGroupId(
        PdsItemRebateGroupId _groupId = '')
    {
        if (!prmisDefault(_groupId))
        {
            this.setField(fieldNum(SalesLine, PdsItemRebateGroupId), _groupId);
        }

        return salesLine.PdsItemRebateGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsSameLot</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be call from the AIF framework to get the salesline
    /// pdsSameLot field value.
    /// </summary>
    /// <param name="_pdsSameLot">Same lot reservation value.
    /// </param>
    /// <returns>
    /// The value of the 'PdsSameLot' field
    /// </returns>
    /// <remarks>
    /// Process 2.0 Same Batch Lot Reservation
    /// <syntax>
    /// public PdsSameLot parmPdsSameLot(PdsSameLot _pdsSameLot = NoYes::No)
    /// </syntax>
    /// </remarks>
    public PdsSameLot parmPdsSameLot(PdsSameLot _pdsSameLot = NoYes::No)
    {
        if (!prmisDefault(_pdsSameLot))
        {
            this.setField(fieldNum(SalesLine, PdsSameLot), _pdsSameLot);
        }

        return salesLine.PdsSameLot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsSameLotOverride</Name>
				<Source><![CDATA[
    public PdsSameLotOverride parmPdsSameLotOverride(PdsSameLotOverride _pdsSameLotOverride = NoYes::No)
    {
        if (!prmisDefault(_pdsSameLotOverride))
        {
            this.setField(fieldNum(SalesLine, PdsSameLotOverride), _pdsSameLotOverride);
        }

        return salesLine.PdsSameLotOverride;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPort</Name>
				<Source><![CDATA[
    public IntrastatPortId parmPort(IntrastatPortId _port = '')
    {
        if (!prmisDefault(_port))
        {
            this.setField(fieldNum(SalesLine, Port), _port);
        }

        return salesLine.Port;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile_RU</Name>
				<Source><![CDATA[
    public CustPostingProfile parmPostingProfile_RU(CustPostingProfile _postingProfile_RU = '')
    {
        if (!prmisDefault(_postingProfile_RU))
        {
            this.setField(fieldNum(SalesLine, PostingProfile_RU), _postingProfile_RU);
        }

        return salesLine.PostingProfile_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceAgreementDate_RU</Name>
				<Source><![CDATA[
    public PriceAgreementDate_RU parmPriceAgreementDate_RU(PriceAgreementDate_RU _priceAgreementDate = dateNull())
    {
        if (!prmisDefault(_priceAgreementDate))
        {
            this.setField(fieldNum(SalesLine, PriceAgreementDate_RU), _priceAgreementDate);
        }

        return salesLine.PriceAgreementDate_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceUnit</Name>
				<Source><![CDATA[
    public PriceUnit parmPriceUnit(PriceUnit _priceUnit = 1)
    {
        if (!prmisDefault(_priceUnit))
        {
            this.setField(fieldNum(SalesLine, PriceUnit), _priceUnit);
        }

        return salesLine.PriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjCategoryId(ProjCategoryId _projCategoryId = '')
    {
        if (!prmisDefault(_projCategoryId))
        {
            this.setField(fieldNum(SalesLine, ProjCategoryId), _projCategoryId);
        }

        return salesLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = '')
    {
        if (!prmisDefault(_projId))
        {
            this.setField(fieldNum(SalesLine, ProjId), _projId);
        }

        return salesLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjLinePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmProjLinePropertyId(ProjLinePropertyId _projLinePropertyId = '')
    {
        if (!prmisDefault(_projLinePropertyId))
        {
            this.setField(fieldNum(SalesLine, ProjLinePropertyId), _projLinePropertyId);
        }

        return salesLine.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransId</Name>
				<Source><![CDATA[
    public ProjItemTransId parmProjTransId(ProjItemTransId _projTransId = '')
    {
        if (!prmisDefault(_projTransId))
        {
            this.setField(fieldNum(SalesLine, ProjTransId), _projTransId);
        }

        return salesLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjFundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmProjFundingSource(ProjFundingSourceRefId _projFundingSourceRefId = 0)
    {
        if (!prmisDefault(_projFundingSourceRefId))
        {
            this.setField(fieldNum(SalesLine, ProjFundingSource), _projFundingSourceRefId);
        }

        return salesLine.ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPropertyNumber_MX</Name>
				<Source><![CDATA[
    public PropertyNumber_MX parmPropertyNumber_MX(PropertyNumber_MX _propertyNumber = '')
    {
        if (!prmisDefault(_propertyNumber))
        {
            this.setField(fieldNum(SalesLine, PropertyNumber_MX), _propertyNumber);
        }

        return salesLine.PropertyNumber_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSAContractLineNum</Name>
				<Source><![CDATA[
    public PSAContractLineNum parmPSAContractLineNum(PSAContractLineNum _psaContractLineNum = '')
    {
        if (!prmisDefault(_psaContractLineNum))
        {
            this.setField(fieldNum(SalesLine, psaContractLineNum), _psaContractLineNum);
        }

        return salesLine.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSAProjProposalInventQty</Name>
				<Source><![CDATA[
    public Qty parmPSAProjProposalInventQty(Qty _psaProjProposalInventQty = 0)
    {
        if (!prmisDefault(_psaProjProposalInventQty))
        {
            this.setField(fieldNum(SalesLine, psaProjProposalInventQty), _psaProjProposalInventQty);
        }

        return salesLine.psaProjProposalInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSAProjProposalQty</Name>
				<Source><![CDATA[
    public Qty parmPSAProjProposalQty(Qty _psaProjProposalQty = 0)
    {
        if (!prmisDefault(_psaProjProposalQty))
        {
            this.setField(fieldNum(SalesLine, psaProjProposalQty), _psaProjProposalQty);
        }

        return salesLine.psaProjProposalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchorderFormNum</Name>
				<Source><![CDATA[
    public CustPurchaseOrder parmPurchorderFormNum(CustPurchaseOrder _purchorderFormNum = '')
    {
        if (!prmisDefault(_purchorderFormNum))
        {
            this.setField(fieldNum(SalesLine, PurchorderFormNum), _purchorderFormNum);
        }

        return salesLine.PurchorderFormNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyOrdered</Name>
				<Source><![CDATA[
    public InventQty parmQtyOrdered(InventQty _qtyOrdered = 0)
    {
        if (!prmisDefault(_qtyOrdered))
        {
            this.setField(fieldNum(SalesLine, QtyOrdered), _qtyOrdered);
        }

        return salesLine.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptDateConfirmed</Name>
				<Source><![CDATA[
    public SalesReceiptDateConfirmed parmReceiptDateConfirmed(SalesReceiptDateConfirmed _receiptDateConfirmed = dateNull())
    {
        if (!prmisDefault(_receiptDateConfirmed))
        {
            this.setField(fieldNum(SalesLine, ReceiptDateConfirmed), _receiptDateConfirmed);
        }

        return salesLine.ReceiptDateConfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptDateRequested</Name>
				<Source><![CDATA[
    public SalesReceiptDateRequested parmReceiptDateRequested(SalesReceiptDateRequested _receiptDateRequested = dateNull())
    {
        if (!prmisDefault(_receiptDateRequested))
        {
            this.setField(fieldNum(SalesLine, ReceiptDateRequested), _receiptDateRequested);
        }

        return salesLine.ReceiptDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefReturnInvoiceTrans_W</Name>
				<Source><![CDATA[
    public RefReturnInvoiceTrans_W parmRefReturnInvoiceTrans_W(RefReturnInvoiceTrans_W _refReturnInvoiceTrans_W = 0)
    {
        if (!prmisDefault(_refReturnInvoiceTrans_W))
        {
            this.setField(fieldNum(SalesLine, RefReturnInvoiceTrans_W), _refReturnInvoiceTrans_W);
        }

        return salesLine.RefReturnInvoiceTrans_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainInventFinancial</Name>
				<Source><![CDATA[
    public InventQty parmRemainInventFinancial(InventQty _remainInventFinancial = salesLine.RemainInventFinancial)
    {
        return salesLine.RemainInventFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainInventPhysical</Name>
				<Source><![CDATA[
    public InventQty parmRemainInventPhysical(InventQty _remainInventPhysical = salesLine.RemainInventPhysical)
    {
        if (!prmisDefault(_remainInventPhysical))
        {
            this.setField(fieldNum(SalesLine, RemainInventPhysical), _remainInventPhysical);
        }

        return salesLine.RemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainSalesFinancial</Name>
				<Source><![CDATA[
    public SalesQty parmRemainSalesFinancial(SalesQty _remainSalesFinancial = salesLine.RemainSalesFinancial)
    {
        return salesLine.RemainSalesFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainSalesPhysical</Name>
				<Source><![CDATA[
    public SalesQty parmRemainSalesPhysical(SalesQty _remainSalesPhysical = salesLine.RemainSalesPhysical)
    {
        if (!prmisDefault(_remainSalesPhysical))
        {
            this.setField(fieldNum(SalesLine, RemainSalesPhysical), _remainSalesPhysical);
        }
        return salesLine.RemainSalesPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservation</Name>
				<Source><![CDATA[
    public ItemReservation parmReservation(ItemReservation _reservation = ItemReservation::None)
    {
        if (!prmisDefault(_reservation))
        {
            this.setField(fieldNum(SalesLine, Reservation), _reservation);
        }

        return salesLine.Reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailBlockQty</Name>
				<Source><![CDATA[
    public RetailBlockQty parmRetailBlockQty(RetailBlockQty _retailBlockQty = 0)
    {
        if (!prmisDefault(_retailBlockQty))
        {
            this.setField(fieldNum(SalesLine, RetailBlockQty), _retailBlockQty);
        }

        return salesLine.RetailBlockQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailVariantId</Name>
				<Source><![CDATA[
    public RetailVariantId parmRetailVariantId(RetailVariantId _variantId = '')
    {
        if (!prmisDefault(_variantId))
        {
            this.setField(fieldNum(SalesLine, RetailVariantId), _variantId);
        }

        return salesLine.RetailVariantId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnAllowReservation</Name>
				<Source><![CDATA[
    public ReturnAllowReservation parmReturnAllowReservation(ReturnAllowReservation _returnAllowReservation = NoYes::No)
    {
        if (!prmisDefault(_returnAllowReservation))
        {
            this.setField(fieldNum(SalesLine, ReturnAllowReservation), _returnAllowReservation);
        }

        return salesLine.ReturnAllowReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnArrivalDate</Name>
				<Source><![CDATA[
    public ReturnArrivalDate parmReturnArrivalDate(ReturnArrivalDate _returnArrivalDate = dateNull())
    {
        if (!prmisDefault(_returnArrivalDate))
        {
            this.setField(fieldNum(SalesLine, ReturnArrivalDate), _returnArrivalDate);
        }

        return salesLine.ReturnArrivalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnClosedDate</Name>
				<Source><![CDATA[
    public ReturnClosedDate parmReturnClosedDate(ReturnClosedDate _returnClosedDate = dateNull())
    {
        if (!prmisDefault(_returnClosedDate))
        {
            this.setField(fieldNum(SalesLine, ReturnClosedDate), _returnClosedDate);
        }

        return salesLine.ReturnClosedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnDeadLine</Name>
				<Source><![CDATA[
    public ReturnDeadline parmReturnDeadLine(ReturnDeadline _returnDeadline = dateNull())
    {
        if (!prmisDefault(_returnDeadline))
        {
            this.setField(fieldNum(SalesLine, ReturnDeadline), _returnDeadline);
        }

        return salesLine.ReturnDeadline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnDispositionCodeId</Name>
				<Source><![CDATA[
    public ReturnDispositionCodeId parmReturnDispositionCodeId(ReturnDispositionCodeId _returnDispositionCodeId = '')
    {
        if (!prmisDefault(_returnDispositionCodeId))
        {
            this.setField(fieldNum(SalesLine, ReturnDispositionCodeId), _returnDispositionCodeId);
        }

        return salesLine.ReturnDispositionCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnStatus</Name>
				<Source><![CDATA[
    public ReturnStatusLine parmReturnStatus(ReturnStatusLine _returnStatus = ReturnStatusLine::None)
    {
        if (!prmisDefault(_returnStatus))
        {
            this.setField(fieldNum(SalesLine, ReturnStatus), _returnStatus);
        }

        return salesLine.ReturnStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesCategory</Name>
				<Source><![CDATA[
    public SalesCategory parmSalesCategory(SalesCategory _salesCategory = 0)
    {
        if (!prmisDefault(_salesCategory))
        {
            this.setField(fieldNum(SalesLine, SalesCategory), _salesCategory);
        }

        return salesLine.SalesCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesDeliverNow</Name>
				<Source><![CDATA[
    public SalesQty parmSalesDeliverNow(SalesQty _salesDeliverNow = 0)
    {
        if (!prmisDefault(_salesDeliverNow))
        {
            this.setField(fieldNum(SalesLine, SalesDeliverNow), _salesDeliverNow);
        }

        return salesLine.SalesDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesGroup</Name>
				<Source><![CDATA[
    public CommissSalesGroup parmSalesGroup(CommissSalesGroup _salesGroup = '')
    {
        if (!prmisDefault(_salesGroup))
        {
            this.setField(fieldNum(SalesLine, SalesGroup), _salesGroup);
        }

        return salesLine.SalesGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    public SalesIdBase parmSalesId(SalesIdBase _salesId = '')
    {
        if (!prmisDefault(_salesId))
        {
            this.setField(fieldNum(SalesLine, SalesId), _salesId);
        }

        return salesLine.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesMarkup</Name>
				<Source><![CDATA[
    public SalesMarkup parmSalesMarkup(SalesMarkup _salesMarkup = 0)
    {
        if (!prmisDefault(_salesMarkup))
        {
            this.setField(fieldNum(SalesLine, SalesMarkup), _salesMarkup);
        }

        return salesLine.SalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPrice</Name>
				<Source><![CDATA[
    public SalesPrice parmSalesPrice(SalesPrice _salesPrice = 0)
    {
        if (!prmisDefault(_salesPrice))
        {
            this.setField(fieldNum(SalesLine, SalesPrice), _salesPrice);
        }

        return salesLine.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQty</Name>
				<Source><![CDATA[
    public SalesOrderedQty parmSalesQty(SalesOrderedQty _salesQty = 0)
    {
        if (!prmisDefault(_salesQty))
        {
            this.setField(fieldNum(SalesLine, SalesQty), _salesQty);
        }

        return salesLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesStatus</Name>
				<Source><![CDATA[
    public SalesStatus parmSalesStatus(SalesStatus _salesStatus = SalesStatus::None)
    {
        if (!prmisDefault(_salesStatus))
        {
            this.setField(fieldNum(SalesLine, SalesStatus), _salesStatus);
        }

        return salesLine.SalesStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesType</Name>
				<Source><![CDATA[
    public SalesType parmSalesType(SalesType _salesType = SalesType::Journal)
    {
        if (!prmisDefault(_salesType))
        {
            this.setField(fieldNum(SalesLine, SalesType), _salesType);
        }

        return salesLine.SalesType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUnit</Name>
				<Source><![CDATA[
    public str parmSalesUnit(str _salesUnit = '')
    {
        DictField   dictField;

        if (!prmisDefault(_salesUnit))
        {
            dictField = new DictField(tableNum(SalesLine),fieldNum(SalesLine,SalesUnit));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_salesUnit,dictField,this.mapPolicy().xmlMapUnitOfMeasureSymbol());
                _salesUnit = this.axUnitOfMeasureSymbol(_salesUnit);
            }
            else
            {
                this.validateInboundString(_salesUnit,dictField);
            }

            this.setField(fieldNum(SalesLine, SalesUnit), _salesUnit);
        }

        if (this.valueMappingOutbound())
        {
            return this.axUnitOfMeasureSymbol(salesLine.SalesUnit);
        }
        return salesLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScrap</Name>
				<Source><![CDATA[
    public NoYes parmScrap(NoYes _scrap = NoYes::No)
    {
        if (!prmisDefault(_scrap))
        {
            this.setField(fieldNum(SalesLine, Scrap), _scrap);
        }

        return salesLine.Scrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceOrderId</Name>
				<Source><![CDATA[
    public SMAServiceOrderId parmServiceOrderId(SMAServiceOrderId _serviceOrderId = '')
    {
        if (!prmisDefault(_serviceOrderId))
        {
            this.setField(fieldNum(SalesLine, ServiceOrderId), _serviceOrderId);
        }

        return salesLine.ServiceOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipCarrierAccount</Name>
				<Source><![CDATA[
    public ShipCarrierAccount parmShipCarrierAccount(ShipCarrierAccount _shipCarrierAccount = '')
    {
        if (!prmisDefault(_shipCarrierAccount))
        {
            this.setField(fieldNum(SalesLine, ShipCarrierAccount), _shipCarrierAccount);
        }

        return salesLine.ShipCarrierAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipCarrierAccountCode</Name>
				<Source><![CDATA[
    public ShipCarrierAccountCode parmShipCarrierAccountCode(ShipCarrierAccountCode _shipCarrierAccountCode = '')
    {
        if (!prmisDefault(_shipCarrierAccountCode))
        {
            this.setField(fieldNum(SalesLine, ShipCarrierAccountCode), _shipCarrierAccountCode);
        }

        return salesLine.ShipCarrierAccountCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipCarrierDlvType</Name>
				<Source><![CDATA[
    public ShipCarrierDlvType parmShipCarrierDlvType(ShipCarrierDlvType _shipCarrierDlvType = ShipCarrierDlvType::Air)
    {
        if (!prmisDefault(_shipCarrierDlvType))
        {
            this.setField(fieldNum(SalesLine, ShipCarrierDlvType), _shipCarrierDlvType);
        }

        return salesLine.ShipCarrierDlvType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipCarrierId</Name>
				<Source><![CDATA[
    public ShipCarrierId parmShipCarrierId(ShipCarrierId _shipCarrierId = '')
    {
        if (!prmisDefault(_shipCarrierId))
        {
            this.setField(fieldNum(SalesLine, ShipCarrierId), _shipCarrierId);
        }

        return salesLine.ShipCarrierId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipCarrierName</Name>
				<Source><![CDATA[
    public CustName parmShipCarrierName(CustName _shipCarrierName = '')
    {
        if (!prmisDefault(_shipCarrierName))
        {
            this.setField(fieldNum(SalesLine, ShipCarrierName), _shipCarrierName);
        }

        return salesLine.ShipCarrierName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipCarrierPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddressRecId parmShipCarrierPostalAddress(LogisticsPostalAddressRecId _shipCarrierPostalAddress = 0)
    {
        if (!prmisDefault(_shipCarrierPostalAddress))
        {
            this.setField(fieldNum(SalesLine, ShipCarrierPostalAddress), _shipCarrierPostalAddress);
        }

        return salesLine.ShipCarrierPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShippingDateConfirmed</Name>
				<Source><![CDATA[
    public SalesShippingDateConfirmed parmShippingDateConfirmed(SalesShippingDateConfirmed _shippingDateConfirmed = dateNull())
    {
        if (!prmisDefault(_shippingDateConfirmed))
        {
            this.setField(fieldNum(SalesLine, ShippingDateConfirmed), _shippingDateConfirmed);
        }

        return salesLine.ShippingDateConfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShippingDateRequested</Name>
				<Source><![CDATA[
    public SalesShippingDateRequested parmShippingDateRequested(SalesShippingDateRequested _shippingDateRequested = dateNull())
    {
        if (!prmisDefault(_shippingDateRequested))
        {
            this.setField(fieldNum(SalesLine, ShippingDateRequested), _shippingDateRequested);
        }

        return salesLine.ShippingDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipUpdate</Name>
				<Source><![CDATA[
    public InterCompanySkipUpdate parmSkipUpdate(InterCompanySkipUpdate _skipUpdate = InterCompanySkipUpdate::No)
    {
        if (!prmisDefault(_skipUpdate))
        {
            this.setField(fieldNum(SalesLine, SkipUpdate), _skipUpdate);
        }

        return salesLine.SkipUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLineRecId parmSourceDocumentLine(SourceDocumentLineRecId _sourceDocumentLine = 0)
    {
        if (!prmisDefault(_sourceDocumentLine))
        {
            this.setField(fieldNum(SalesLine, SourceDocumentLine), _sourceDocumentLine);
        }

        return salesLine.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourcingVendAccount</Name>
				<Source><![CDATA[
    public VendAccount parmSourcingVendAccount(VendAccount _sourcingVendAccount = '')
    {
        if (!prmisDefault(_sourcingVendAccount))
        {
            this.setField(fieldNum(SalesLine, SourcingVendAccount), _sourcingVendAccount);
        }

        return salesLine.SourcingVendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourcingInventSiteId</Name>
				<Source><![CDATA[
    public SalesSourcingInventSiteId parmSourcingInventSiteId(SalesSourcingInventSiteId _sourcingInventSiteId = '')
    {
        if (!prmisDefault(_sourcingInventSiteId))
        {
            this.setField(fieldNum(SalesLine, SourcingInventSiteId), _sourcingInventSiteId);
        }

        return salesLine.SourcingInventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourcingInventLocationId</Name>
				<Source><![CDATA[
    public SalesSourcingInventLocationId parmSourcingInventLocationId(SalesSourcingInventLocationId _sourcingInventLocationId = '')
    {
        if (!prmisDefault(_sourcingInventLocationId))
        {
            this.setField(fieldNum(SalesLine, SourcingInventLocationId), _sourcingInventLocationId);
        }

        return salesLine.SourcingInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatisticValue_LT</Name>
				<Source><![CDATA[
    public LtIntrastatStatisticValue parmStatisticValue_LT(LtIntrastatStatisticValue _statisticValue_LT = 0)
    {
        if (!prmisDefault(_statisticValue_LT))
        {
            this.setField(fieldNum(SalesLine, StatisticValue_LT), _statisticValue_LT);
        }

        return salesLine.StatisticValue_LT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatProcId</Name>
				<Source><![CDATA[
    public IntrastatProcId parmStatProcId(IntrastatProcId _statProcId = '')
    {
        if (!prmisDefault(_statProcId))
        {
            this.setField(fieldNum(SalesLine, StatProcId), _statProcId);
        }

        return salesLine.StatProcId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatTriangularDeal</Name>
				<Source><![CDATA[
    public IntrastatTriangularDeal parmStatTriangularDeal(IntrastatTriangularDeal _statTriangularDeal = NoYes::No)
    {
        if (!prmisDefault(_statTriangularDeal))
        {
            this.setField(fieldNum(SalesLine, StatTriangularDeal), _statTriangularDeal);
        }

        return salesLine.StatTriangularDeal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStockedProduct</Name>
				<Source><![CDATA[
    public TradeStockedProduct parmStockedProduct(TradeStockedProduct _stockedProduct = NoYes::Yes)
    {
        return salesLine.StockedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSystemEntryChangePolicy</Name>
				<Source><![CDATA[
    public PriceDiscPolicySystem parmSystemEntryChangePolicy(PriceDiscPolicySystem _systemEntryChangePolicy = 0)
    {
        if (!prmisDefault(_systemEntryChangePolicy))
        {
            this.setField(fieldNum(SalesLine, SystemEntryChangePolicy), _systemEntryChangePolicy);
        }

        return salesLine.SystemEntryChangePolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSystemEntrySource</Name>
				<Source><![CDATA[
    public PriceDiscSystemSource parmSystemEntrySource(PriceDiscSystemSource _systemEntrySource = PriceDiscSystemSource::None)
    {
        if (!prmisDefault(_systemEntrySource))
        {
            this.setField(fieldNum(SalesLine, SystemEntrySource), _systemEntrySource);
        }

        return salesLine.SystemEntrySource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAutogenerated</Name>
				<Source><![CDATA[
    public TaxAutoGenerated parmTaxAutogenerated(TaxAutoGenerated _taxAutoGenerated = NoYes::Yes)
    {
        if (!prmisDefault(_taxAutoGenerated))
        {
            this.setField(fieldNum(SalesLine, TaxAutogenerated), _taxAutoGenerated);
        }

        return salesLine.TaxAutogenerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup parmTaxGroup(TaxGroup _taxGroup = '')
    {
        if (!prmisDefault(_taxGroup))
        {
            this.setField(fieldNum(SalesLine, TaxGroup), _taxGroup);
        }

        return salesLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverrideSalesTax</Name>
				<Source><![CDATA[
    public NoYes parmOverrideSalesTax(NoYes _overrideSalesTax = NoYes::No)
    {
        if (!prmisDefault(_overrideSalesTax))
        {
            this.setField(fieldNum(SalesLine, OverrideSalesTax), _overrideSalesTax);
        }

        return salesLine.OverrideSalesTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxItemGroup</Name>
				<Source><![CDATA[
    public TaxItemGroup parmTaxItemGroup(TaxItemGroup _taxItemGroup = '')
    {
        if (!prmisDefault(_taxItemGroup))
        {
            this.setField(fieldNum(SalesLine, TaxItemGroup), _taxItemGroup);
        }

        return salesLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdGroup</Name>
				<Source><![CDATA[
    public TaxWithholdGroup parmTaxWithholdGroup(TaxWithholdGroup _taxWithholdGroup = '')
    {
        if (_taxWithholdGroup)
        {
            this.setField(fieldNum(SalesLine, TaxWithholdGroup), _taxWithholdGroup);
        }

        return salesLine.TaxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdItemGroupHeading_TH</Name>
				<Source><![CDATA[
    public TaxWithholdItemGroupId_TH parmTaxWithholdItemGroupHeading_TH(TaxWithholdItemGroupId_TH _taxWithholdItemGroupHeading_TH = 0)
    {
        if (!prmisDefault(_taxWithholdItemGroupHeading_TH))
        {
            this.setField(fieldNum(SalesLine, TaxWithholdItemGroupHeading_TH), _taxWithholdItemGroupHeading_TH);
        }

        return salesLine.TaxWithholdItemGroupHeading_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCode</Name>
				<Source><![CDATA[
    public IntrastatTransactionCodeId parmTransactionCode(IntrastatTransactionCodeId _transactionCode = '')
    {
        if (!prmisDefault(_transactionCode))
        {
            this.setField(fieldNum(SalesLine, TransactionCode), _transactionCode);
        }

        return salesLine.TransactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransport</Name>
				<Source><![CDATA[
    public IntrastatTransport parmTransport(IntrastatTransport _transport = '')
    {
        if (!prmisDefault(_transport))
        {
            this.setField(fieldNum(SalesLine, Transport), _transport);
        }

        return salesLine.Transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnderDeliveryPct</Name>
				<Source><![CDATA[
    public SalesUnderDeliveryPct parmUnderDeliveryPct(SalesUnderDeliveryPct _underDeliveryPct = 0)
    {
        if (!prmisDefault(_underDeliveryPct))
        {
            this.setField(fieldNum(SalesLine, UnderDeliveryPct), _underDeliveryPct);
        }

        return salesLine.UnderDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMpsExcludeSalesLine</Name>
				<Source><![CDATA[
    public MpsExcludeSalesLine parmMpsExcludeSalesLine(MpsExcludeSalesLine _mpsExcludeSalesLine = NoYes::No)
    {
        if (!prmisDefault(_mpsExcludeSalesLine))
        {
            this.setField(fieldNum(SalesLine, MpsExcludeSalesLine), _mpsExcludeSalesLine);
        }

        return salesLine.MpsExcludeSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcMoveDocRefs</Name>
				<Source><![CDATA[
    void pcMoveDocRefs(SalesBasketLine pcSalesBasketLine)
    {
        //This method updates the references in the DocuRef
        //associated with a SalesBasketLine to the current SalesLine
        DocuRef     docuRef;

        select forupdate docuRef where
        docuRef.RefTableId == tableNum(SalesBasketLine) &&
        docuRef.RefRecId   == pcSalesBasketLine.RecId;

        if (docuRef)
        {
            docuRef.RefTableId = tableNum(SalesLine);
            docuRef.RefRecId = this.salesLine().RecId;
            docuRef.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDisc_LineDisc</Name>
				<Source><![CDATA[
    public PriceDisc_LineDisc priceDisc_LineDisc(PriceDisc_LineDisc _priceDisc_LineDisc = null)
    {
        PriceDisc_LineDisc  priceDisc_LineDisc;

        if (!priceDisc_LineDiscIdx)
        {
            priceDisc_LineDiscIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_priceDisc_LineDisc))
        {
            this.classCacheInsert(priceDisc_LineDiscIdx, _priceDisc_LineDisc);
            priceDisc_LineDisc = _priceDisc_LineDisc;
        }
        else
        {
            if (this.classCacheExist(priceDisc_LineDiscIdx))
            {
                priceDisc_LineDisc = this.classCacheLookup(priceDisc_LineDiscIdx);
            }
            else
            {
                priceDisc_LineDisc = this.initPriceDisc_LineDiscParamsSet();

                this.classCacheInsert(priceDisc_LineDiscIdx, priceDisc_LineDisc);
            }
        }

        return priceDisc_LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDisc_Price</Name>
				<Source><![CDATA[
    public PriceDisc_Price priceDisc_Price(PriceDisc_Price _priceDisc_Price = null)
    {
        PriceDisc_Price  priceDisc_Price;

        if (!priceDisc_PriceIdx)
        {
            priceDisc_PriceIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_priceDisc_Price))
        {
            this.classCacheInsert(priceDisc_PriceIdx, _priceDisc_Price);
            priceDisc_Price = _priceDisc_Price;
        }
        else
        {
            if (this.classCacheExist(priceDisc_PriceIdx))
            {
                priceDisc_Price = this.classCacheLookup(priceDisc_PriceIdx);
            }
            else
            {
                priceDisc_Price = this.initPriceDisc_PriceParamsSet();
                this.classCacheInsert(priceDisc_PriceIdx, priceDisc_Price);
            }
        }

        return priceDisc_Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceParametersRecord</Name>
				<Source><![CDATA[
    public PriceParameters priceParametersRecord(PriceParameters _priceParameters = null)
    {
        PriceParameters  priceParameters;

        if (!priceParametersIdx)
        {
            priceParametersIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_priceParameters))
        {
            this.tableCacheInsert(priceParametersIdx, _priceParameters);
            priceParameters = _priceParameters;
        }
        else
        {
            if (this.tableCacheExist(priceParametersIdx))
            {
                priceParameters = this.tableCacheLookup(priceParametersIdx);
            }
            else
            {
                priceParameters = PriceParameters::find();
                this.tableCacheInsert(priceParametersIdx, priceParameters);
            }
        }

        return priceParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTableRecord</Name>
				<Source><![CDATA[
    public ProjTable projTableRecord(ProjTable _projTable = null)
    {
        ProjTable   projTable;

        if (!projTableIdx)
        {
            projTableIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_projTable))
        {
            this.tableCacheInsert(projTableIdx, _projTable);
            projTable = _projTable;
        }
        else
        {
            if (this.tableCacheExist(projTableIdx))
            {
                projTable = this.tableCacheLookup(projTableIdx);
            }
            else
            {
                this.setProjTableRecordFields();
                projTable = ProjTable::find(this.parmProjId());
                this.tableCacheInsert(projTableIdx, projTable);
            }
        }

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInternalValues</Name>
				<Source><![CDATA[
    public void resetInternalValues()
    {
        super();

        axInventDim.inventDim(this.salesLine().inventDim());
        item = '';
        isSetPriceDiscPriceFieldsExecuted   = false;
        isIsPriceDiscPriceFieldsSetExecuted = false;
        isPriceDiscPriceFieldsSet           = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine</Name>
				<Source><![CDATA[
    public SalesLine salesLine(SalesLine _salesLine = salesLine)
    {
        if (!prmisDefault(_salesLine))
        {
            this.setCurrentRecordFromExternal(_salesLine);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivityNumber</Name>
				<Source><![CDATA[
    protected void setActivityNumber()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ActivityNumber)))
        {
            return;
        }

        this.setMatchingAgreementLine();
        if (this.agreementLineDefaultRecord())
        {
            this.parmActivityNumber(this.agreementLineDefaultRecord().ProjectActivityNumber);
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressRefRecId</Name>
				<Source><![CDATA[
    protected void setAddressRefRecId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, AddressRefRecId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressRefTableId</Name>
				<Source><![CDATA[
    protected void setAddressRefTableId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, AddressRefTableId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementLineRecordFields</Name>
				<Source><![CDATA[
    void setAgreementLineRecordFields()
    {
        this.setSalesId();
        this.setCurrencyCode();
        this.setInventTableRecordFields();
        this.setSalesQty();
        this.setSalesUnit();
        this.setInventDimId();
        this.setSalesCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementSkipAutoLink</Name>
				<Source><![CDATA[
    protected void setAgreementSkipAutoLink()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, AgreementSkipAutoLink)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAlternativeItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Replaces the item number with an alternative item number.
    /// </summary>
    /// <remarks>
    ///    Item numbers on return order lines are not replaced.
    /// </remarks>
    private void setAlternativeItem()
    {
        SalesAlternativeItem    salesAlternativeItem;
        SalesQty                salesQty;
        ReturnExpectedRetQty    returnExpectedRetQty;

        if (!salesLine.RecId && useAlternativeItem && !salesLine.returnItem())
        {
            salesAlternativeItem = SalesAlternativeItem::newAlternativeItem(salesLine);
            if (salesAlternativeItem.existAlternativeItem())
            {
                salesQty                 = salesLine.SalesQty;
                returnExpectedRetQty     = salesLine.ExpectedRetQty;

                salesLine.setAlternativeItem(salesAlternativeItem);

                salesLine.SalesQty       = salesQty;
                salesLine.ExpectedRetQty = returnExpectedRetQty;

                SalesLine::modifySalesQty(salesLine, salesLine.inventDim());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAxSalesTableFields</Name>
				<Source><![CDATA[
    public void setAxSalesTableFields()
    {
        this.setSalesId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBarCode</Name>
				<Source><![CDATA[
    protected void setBarCode()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, BarCode)))
        {
            return;
        }

        this.setInventItemBarcodeRecordFields();

        if (this.isInventItemBarcodeRecordFieldsSet())
        {
            this.parmBarCode(this.inventItemBarcodeRecord().ItemBarCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBarCodeType</Name>
				<Source><![CDATA[
    protected void setBarCodeType()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, BarCodeType)))
        {
            return;
        }

        this.setInventItemBarcodeRecordFields();

        if (this.isInventItemBarcodeRecordFieldsSet())
        {
            this.parmBarCodeType(this.inventItemBarcodeRecord().BarcodeSetupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBlocked</Name>
				<Source><![CDATA[
    protected void setBlocked()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, Blocked)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComplete</Name>
				<Source><![CDATA[
    protected void setComplete()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, Complete)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedDatesAsTouched</Name>
				<Source><![CDATA[
    void setConfirmedDatesAsTouched()
    {
        this.setFieldAsTouched(fieldNum(SalesLine, ShippingDateConfirmed));
        this.setFieldAsTouched(fieldNum(SalesLine, ReceiptDateConfirmed));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedDlv</Name>
				<Source><![CDATA[
    protected void setConfirmedDlv()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ConfirmedDlv)))
        {
            return;
        }

        this.setShippingDateConfirmed();
        this.setShippingDateRequested();

        if (this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShippingDateRequested)) || this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShippingDateConfirmed)))
        {
            this.parmConfirmedDlv(this.parmShippingDateConfirmed() ? this.parmShippingDateConfirmed() : this.parmShippingDateRequested());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostPrice</Name>
				<Source><![CDATA[
    protected void setCostPrice()
    {
        InventQty   inventQty;
        CostAmount  costAmount;
        AxSalesLine localSalesLine;

        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, CostPrice)))
        {
            return;
        }
        this.setSalesQty();
        this.setSalesType();
        this.setInventTransIdReturn();

        localSalesLine = this.axOrig() as AxSalesLine;
        if (this.parmInventTransIdReturn())
        {
            if (this.isFieldSet(fieldNum(SalesLine, InventTransIdReturn)) ||
                (this.isFieldSet(fieldNum(SalesLine, SalesQty)) &&
                 (this.parmSalesType() != SalesType::ReturnItem)    &&
                 (this.parmSalesQty() <=0)                          &&
                 (localSalesLine.parmSalesQty() > 0)))
            {
                [inventQty, costAmount] = InventTrans::calcCostValue(InventTransOrigin::findByInventTransId(this.parmInventTransIdReturn()).RecId);

                if (costAmount)
                {
                    this.parmCostPrice(inventQty / costAmount);
                    return;
                }
            }
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet() ||
            (this.isFieldSet(fieldNum(SalesLine, SalesQty)) &&
            (this.parmSalesType() != SalesType::ReturnItem)     &&
            (this.parmSalesQty() <=0)                           && (localSalesLine.parmSalesQty() > 0)))
        {
            this.setInventDimId();
            this.parmCostPrice(this.inventTableRecord().costPcsPrice(this.parmInventDimId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode</Name>
				<Source><![CDATA[
    protected void setCurrencyCode()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, CurrencyCode)))
        {
            return;
        }

        if (this.parmSalesType() == SalesType::ItemReq)
        {
            this.setProjTableRecordFields();

            if (this.isProjTableRecordFieldsSet())
            {
                this.parmCurrencyCode(this.projTableRecord().currencyId());
            }
            return;
        }

        this.setAxSalesTableFields();

        if (this.parmSalesId() && this.parmCurrencyCode() != this.axSalesTable().parmCurrencyCode())
        {
            this.parmCurrencyCode(this.axSalesTable().parmCurrencyCode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustAccount</Name>
				<Source><![CDATA[
    protected void setCustAccount()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, CustAccount)))
        {
            return;
        }

        if (this.parmSalesType() == SalesType::ItemReq)
        {
            this.setProjTableRecordFields();

            if (this.isProjTableRecordFieldsSet())
            {
                this.parmCustAccount(this.projTableRecord().CustAccount);
            }
            return;
        }

        this.setAxSalesTableFields();

        if (this.parmSalesId() && this.parmCustAccount() != this.axSalesTable().parmCustAccount())
        {
            this.parmCustAccount(this.axSalesTable().parmCustAccount());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustExternalItemDescriptionFields</Name>
				<Source><![CDATA[
    protected void setCustExternalItemDescriptionFields()
    {
        this.setItemId();
        this.axInventDim().setConfigId();
        this.setAxSalesTableFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustGroup</Name>
				<Source><![CDATA[
    protected void setCustGroup()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, CustGroup)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.parmSalesId() && this.parmCustGroup() != this.axSalesTable().parmCustGroup())
        {
            this.parmCustGroup(this.axSalesTable().parmCustGroup());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomerLineNum</Name>
				<Source><![CDATA[
    protected void setCustomerLineNum()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, CustomerLineNum)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomerRef</Name>
				<Source><![CDATA[
    protected void setCustomerRef()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, CustomerRef)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomsDocDate_MX</Name>
				<Source><![CDATA[
    protected void setCustomsDocDate_MX()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, CustomsDocDate_MX)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomsDocNumber_MX</Name>
				<Source><![CDATA[
    protected void setCustomsDocNumber_MX()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, CustomsDocNumber_MX)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomsName_MX</Name>
				<Source><![CDATA[
    protected void setCustomsName_MX()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, CustomsName_MX)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimension</Name>
				<Source><![CDATA[
    protected void setDefaultDimension()
    {
        SalesTable localSalesTable  = this.axSalesTable().salesTable();

        if (this.isMethodExecuted(funcName()))
        {
            return;
        }

        if (this.isSetMethodsCalledFromSave())
        {
            if (!this.isFieldSetExternally(fieldNum(SalesLine, DefaultDimension)))
            {
                if (this.isFieldSet(fieldNum(SalesLine, DefaultDimension)))
                {
                    return;
                }
            }

            this.setInventDimId();

            boolean headerDefaultDimensionChanged = this.axSalesTable().isFieldModified(fieldNum(SalesTable, DefaultDimension));
            this.inventSiteDimensionLink().axSetDefaultDimension(this, headerDefaultDimensionChanged);

            this.setAxSalesTableFields();

            if (this.isAxSalesTableFieldsSet()
             || headerDefaultDimensionChanged
             || this.isInventTableRecordFieldsSet())
            {
                this.updateDefaultDimensionForSalesLine(localSalesTable);
            }

            this.setProjTableRecordFields();
            this.setInventTableRecordFields();
            this.setSalesType();

            if (this.parmSalesType() == SalesType::ItemReq && this.projTableRecord())
            {
                if (this.isFieldSet(fieldNum(SalesLine, SalesType)) ||
                    this.isProjTableRecordFieldsSet()               ||
                    this.isInventTableRecordFieldsSet())
                {
                    this.parmDefaultDimension(this.currentRecord().mergeDimension(this.projTableRecord().DefaultDimension, this.inventTableRecord().DefaultDimension));
                }
                return;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultDimensionForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates default dimension for sales line.
    /// </summary>
    /// <param name = "_salesTable">Sales order.</param>
    protected void updateDefaultDimensionForSalesLine(SalesTable _salesTable)
    {
        // Copy dimension from purchTable (the copy does not overwrite the dimension linked to the site)
        this.parmDefaultDimension(this.salesLine().copyDimension(_salesTable.DefaultDimension));
        // Merge current dimension with inventTable
        this.parmDefaultDimension(this.salesLine().mergeDimension(this.inventTableRecord().DefaultDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>DefaultDimension</c> field on a buffer.
    /// </summary>
    /// <param name="_dimension">
    ///    The new dimension value.
    /// </param>
    /// <remarks>
    ///    This method is part of the <c>AxInventSiteDimensionable</c> interface and is called from the
    ///    <c>InventSiteDimensionLink</c> class
    /// </remarks>
    public void setDefaultDimensionValue(DimensionDefault _dimension)
    {
        salesLine.DefaultDimension = _dimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryDateControl</Name>
				<Source><![CDATA[
    protected void setDeliveryDateControl()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, DeliveryDateControlType)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (forceDeliveryDates                                                          &&
            ((this.isFieldModified(fieldNum(SalesLine, ReceiptDateConfirmed))           ||
            this.isFieldModified(fieldNum(SalesLine, ReceiptDateRequested))             ||
            this.isFieldModified(fieldNum(SalesLine, ShippingDateConfirmed))            ||
            this.isFieldModified(fieldNum(SalesLine, ShippingDateRequested))            &&
            !this.axSalesTable().isFieldModified(fieldNum(SalesTable, PriceGroupId)))   ||
            this.axSalesTable().isFieldModified(fieldNum(SalesTable, DlvMode))))

        {
            if (salesLine.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                SalesLineDeliveryDateControlRecalculate::applyDeliveryDateControl(salesLine, deliveryDateUpdateInLines);
            }
            return;
        }

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, DeliveryDateControlType)))
        {
            salesLine.setDeliveryDateControlType();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryDateUpdateInLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the delivery date update to either propagate changes on the selected delivery date control type from
    /// the order header to order lines and recalculate delivery dates, or to set the delivery dates control type
    /// to <c>SalesDeliveryDateControlType::None</c> and copy the delivery dates from the header to the lines
    /// directly.
    /// </summary>
    /// <param name="_deliveryDateUpdateInLines">
    /// The delivery date update paradigm to use.
    /// </param>
    public void setDeliveryDateUpdateInLines(DeliveryDateUpdateInLines _deliveryDateUpdateInLines)
    {
        deliveryDateUpdateInLines = _deliveryDateUpdateInLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    protected void setDeliveryName()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, DeliveryName)))
        {
            return;
        }

        this.setSalesId();

        if (this.isFieldSet(fieldNum(SalesLine, SalesId)))
        {
            this.parmDeliveryName(this.axSalesTable().parmDeliveryName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryPostalAddress</Name>
				<Source><![CDATA[
    protected void setDeliveryPostalAddress()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, DeliveryPostalAddress)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet())
        {
            this.parmDeliveryPostalAddress(this.axSalesTable().parmDeliveryPostalAddress());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryTaxGroup_BR</Name>
				<Source><![CDATA[
    protected void setDeliveryTaxGroup_BR()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, DeliveryTaxGroup_BR)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryTaxItemGroup_BR</Name>
				<Source><![CDATA[
    protected void setDeliveryTaxItemGroup_BR()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, DeliveryTaxItemGroup_BR)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryType</Name>
				<Source><![CDATA[
    protected void setDeliveryType()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, DeliveryType)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimension</Name>
				<Source><![CDATA[
    protected void setDimension()
    {
        SysDictField    sysDictField;
        int             array;
        int             arraySize;
        boolean         allDimensionsAreSet = true;
        MCRDefaultDimensions  oDefaultDimensions;

        if (this.isMethodExecuted(funcName()))
        {
            return;
        }

        sysDictField = this.sysDictFieldFind(fieldNum(SalesLine, DefaultDimension));
        arraySize = sysDictField.arraySize() ;
        for (array = 1; array <= arraySize && allDimensionsAreSet ; array++)
        {
            if (!this.isFieldSet(new SysDictField(sysDictField.tableid(), sysDictField.id(), array).id()))
            {
                allDimensionsAreSet = false;
            }
        }

        if (allDimensionsAreSet)
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet()                                          ||
            this.axSalesTable().isFieldModified(fieldNum(SalesTable, DefaultDimension))    ||
            this.isInventTableRecordFieldsSet())
        {
            //Commented out old dimension logic and now calling the class to do the new
            //dimension defaulting
            oDefaultDimensions = MCRDefaultDimensions::construct(salesLine);
            oDefaultDimensions.setDefaultDimensions();
        }

        this.setInventDimId();
        this.inventSiteDimensionLink().axSetDefaultDimension(this);

        this.setProjTableRecordFields();
        this.setInventTableRecordFields();
        this.setSalesType();

        if (this.parmSalesType() == SalesType::ItemReq && this.projTableRecord())
        {
            if (this.isFieldSet(fieldNum(SalesLine, SalesType)) ||
                this.isProjTableRecordFieldsSet()               ||
                this.isInventTableRecordFieldsSet())
            {
                //Commented out old dimension logic and now calling the class to do the new
                //dimension defaulting
                oDefaultDimensions = MCRDefaultDimensions::construct(salesLine);
                oDefaultDimensions.setDefaultDimensions();
            }
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionEntitySpecifiers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the financial dimension entity specifiers for the record.
    /// </summary>
    /// <remarks>
    ///    This method is called after the <c>setTableFields</c> method so that all of the fields that are
    ///    entity specifiers are set.
    /// </remarks>
    protected void setDimensionEntitySpecifiers()
    {
        this.setField(fieldNum(SalesLine, DefaultDimension), this.currentRecord().mergeDimension(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDlvMode</Name>
				<Source><![CDATA[
    protected void setDlvMode()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, DlvMode)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, DlvMode)))
        {
            this.parmDlvMode(this.axSalesTable().parmDlvMode());
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                salesLine.mcrDlvModeModified();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDlvTerm</Name>
				<Source><![CDATA[
    protected void setDlvTerm()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, DlvTerm)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, DlvTerm)))
        {
            this.parmDlvterm(this.axSalesTable().parmDlvTerm());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEInvoiceAccountCode</Name>
				<Source><![CDATA[
    protected void setEInvoiceAccountCode()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, eInvoiceAccountCode)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpectedRetQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>ExpectedRetQty</c> field.
    /// </summary>
    protected void setExpectedRetQty()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ExpectedRetQty)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExternalItemId</Name>
				<Source><![CDATA[
    protected void setExternalItemId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ExternalItemId)))
        {
            return;
        }

        this.setCustExternalItemDescriptionFields();

        if (this.isCustExternalItemDescriptionFieldsSet())
        {
            this.parmExternalItemId(this.custExternalItemDescription().externalItemId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setForceDeliveryDates</Name>
				<Source><![CDATA[
    void setForceDeliveryDates(boolean _forceDeliveryDates)
    {
        forceDeliveryDates = _forceDeliveryDates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterCompanyInventTransId</Name>
				<Source><![CDATA[
    protected void setInterCompanyInventTransId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, InterCompanyInventTransId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterCompanyOrigin</Name>
				<Source><![CDATA[
    protected void setInterCompanyOrigin()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, InterCompanyOrigin)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIntrastatFulfillmentDate_HU</Name>
				<Source><![CDATA[
    protected void setIntrastatFulfillmentDate_HU()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, IntrastatFulfillmentDate_HU)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, IntrastatFulfillmentDate_HU)))
        {
            this.parmIntrastatFulfillmentDate_HU(this.axSalesTable().parmIntrastatFulfillmentDate_HU());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDeliverNow</Name>
				<Source><![CDATA[
    protected void setInventDeliverNow()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, InventDeliverNow)))
        {
            return;
        }

        this.setItemId();
        this.setInventDimId();
        this.setSalesUnit();
        this.setSalesDeliverNow();
        this.setInventTableRecordFields();

        if (this.isFieldSet(fieldNum(SalesLine, ItemId))            ||
            this.isFieldSet(fieldNum(SalesLine, InventDimId))       ||
            this.isFieldSet(fieldNum(SalesLine, SalesUnit))         ||
            this.isFieldSet(fieldNum(SalesLine, SalesDeliverNow))   ||
            this.isInventTableRecordFieldsSet())
        {
            this.parmInventDeliverNow(EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.parmItemId(),
                                                                                                            this.parmInventDimId(),
                                                                                                            this.parmSalesDeliverNow(),
                                                                                                            this.parmSalesUnit(),
                                                                                                            this.inventTableRecord().inventUnitId(),
                                                                                                            NoYes::Yes));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    protected void setInventDimId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, InventDimId)))
        {
            return;
        }

        this.axInventDim().setInventDimId();

        if (this.axInventDim().isFieldSet(fieldNum(InventDim, InventDimId)))
        {
            this.parmInventDimId(this.axInventDim().parmInventDimId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventItemBarcodeRecordFields</Name>
				<Source><![CDATA[
    protected void setInventItemBarcodeRecordFields()
    {
        this.setItemId();
        this.setSalesUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefId</Name>
				<Source><![CDATA[
    protected void setInventRefId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, InventRefId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefTransId</Name>
				<Source><![CDATA[
    protected void setInventRefTransId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, InventRefTransId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefType</Name>
				<Source><![CDATA[
    protected void setInventRefType()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, InventRefType)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTableRecordFields</Name>
				<Source><![CDATA[
    public void setInventTableRecordFields()
    {
        this.setItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransId</Name>
				<Source><![CDATA[
    protected void setInventTransId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, InventTransId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransIdReturn</Name>
				<Source><![CDATA[
    protected void setInventTransIdReturn()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, InventTransIdReturn)))
        {
            return;
        }

        this.setSalesType();

        if (this.parmSalesType() != SalesType::ReturnItem)
        {
            this.setSalesQty();

            if (this.isFieldSet(fieldNum(SalesLine, SalesQty)))
            {
                if (this.parmSalesQty() > 0)
                {
                    this.parmInventTransIdReturn('');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemBOMId</Name>
				<Source><![CDATA[
    protected void setItemBOMId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ItemBOMId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemId</Name>
				<Source><![CDATA[
    protected void setItemId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ItemId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemRouteId</Name>
				<Source><![CDATA[
    protected void setItemRouteId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ItemRouteId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimension</Name>
				<Source><![CDATA[
    protected void setLedgerDimension()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, LedgerDimension)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmount</Name>
				<Source><![CDATA[
    protected void setLineAmount()
    {
        SalesLine localSalesLine;
        AxSalesLine localSalesLine2;

        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, LineAmount)))
        {
            return;
        }

        this.setLineAmountFields();

        if (this.isLineAmountFieldsSet())
        {
            localSalesLine = this.currentRecord();
            if (localSalesLine.returnItem())
            {
                this.parmLineAmount(localSalesLine.calcLineAmountForced(localSalesLine.ExpectedRetQty));
            }
            else
            {
                this.parmLineAmount(localSalesLine.calcLineAmountForced());
            }
            salesLine.updateAndPackAccessableValue_IN();
            return;
        }

        this.setCurrencyCode();

        localSalesLine2 = this.axOrig() as AxSalesLine;
        if (this.isFieldSet(fieldNum(SalesLine, CurrencyCode)))
        {
            if (localSalesLine2.parmCurrencyCode())
            {
                this.parmLineAmount(CurrencyExchangeHelper::curAmount2CurAmount(this.parmLineAmount(), localSalesLine2.parmCurrencyCode(), this.parmCurrencyCode()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmountFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields related to line amount.
    /// </summary>
    protected void setLineAmountFields()
    {
        this.setSalesPrice();
        this.setPriceUnit();
        this.setLineDisc();
        this.setLinePercent();
        this.setSalesQty();
        this.setSalesMarkup();
        this.setMultiLnDisc();
        this.setMultiLnPercent();
        this.setSalesQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineAmountFieldsSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the fields related to line amounts are set.
    /// </summary>
    /// <returns>true if the fields related to line amounts are set; otherwise, false.</returns>
    protected boolean isLineAmountFieldsSet()
    {
        return this.isFieldSet(fieldNum(SalesLine, SalesPrice))    ||
               this.isFieldSet(fieldNum(SalesLine, PriceUnit))     ||
               this.isFieldSet(fieldNum(SalesLine, LineDisc))      ||
               this.isFieldSet(fieldNum(SalesLine, LinePercent))   ||
               this.isFieldSet(fieldNum(SalesLine, SalesQty))      ||
               this.isFieldSet(fieldNum(SalesLine, SalesMarkup))   ||
               this.isFieldSet(fieldNum(SalesLine, MultiLnDisc))   ||
               this.isFieldSet(fieldNum(SalesLine, MultiLnPercent))||
               this.isFieldSet(fieldNum(SalesLine, SalesQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineDisc</Name>
				<Source><![CDATA[
    protected void setLineDisc()
    {
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        AgreementLine                   agreementLine;
        AxSalesLine                     localSalesLine;

        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, LineDisc)))
        {
            return;
        }

        this.setSalesType();

        if (this.isFieldSet(fieldNum(SalesLine, SalesType)))
        {
            if (this.parmSalesType() == SalesType::ItemReq)
            {
                this.parmLineDisc(0);
                return;
            }
        }

        if (this.isFieldSetExternally(fieldNum(SalesLine, LineAmount)))
        {
            this.parmLineDisc(0);
            return;
        }

        agreementLine = this.agreementLineRecord();
        if (agreementLine.RecId && agreementLine is AgreementLineQuantityCommitment)
        {
            agreementLineQuantityCommitment = agreementLine;
            this.parmLineDisc(agreementLineQuantityCommitment.LineDiscountAmount);
        }
        else
        {
            this.setPriceDisc_LineDiscFields();

            if ( this.isPriceDisc_LineDiscFieldsSet()
                || this.isShipReceiptDateRequestedFieldsModified())
            {
                boolean useRetailPricing = RetailParameters::isRetailEnabledAndInUse() && RetailPricingEngine::useRetailPricing(salesLine);
                if (useRetailPricing)
                {
                    RetailOrderCalculator retailCalculator = RetailOrderCalculator::construct(salesLine.TableId, salesLine.SalesId, salesLine);
                    this.parmLineDisc(0);

                    retailCalculator.setDiscountOnCurrentLine();
                }
                else
                {
                this.parmLineDisc(this.priceDisc_LineDisc().discAmount());
                }
            }
        }

        this.setCurrencyCode();

        localSalesLine = this.axOrig() as AxSalesLine;
        if (this.isFieldSet(fieldNum(SalesLine, CurrencyCode)))
        {
            if (localSalesLine.parmCurrencyCode())
            {
                this.parmLineDisc(ExchangeRateHelper::curPrice2CurPrice(this.parmLineDisc(), localSalesLine.parmCurrencyCode(), this.parmCurrencyCode()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineHeader</Name>
				<Source><![CDATA[
    protected void setLineHeader()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, LineHeader)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNum</Name>
				<Source><![CDATA[
    protected void setLineNum()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, LineNum)))
        {
            return;
        }

        this.setSalesId();

        if (this.isFieldSet(fieldNum(SalesLine, SalesId)))
        {
            if (!lineNum)
            {
                lineNum = SalesLine::lastLineNum(this.parmSalesId());
            }
            lineNum += 1;

            this.parmLineNum(lineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinePercent</Name>
				<Source><![CDATA[
    protected void setLinePercent()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, LinePercent)))
        {
            return;
        }

        this.setSalesType();

        if (this.isFieldSet(fieldNum(SalesLine, SalesType)))
        {
            if (this.parmSalesType() == SalesType::ItemReq)
            {
                this.parmLinePercent(0);
                return;
            }
        }

        if (this.isFieldSetExternally(fieldNum(SalesLine, LineAmount)))
        {
            this.parmLinePercent(0);
            return;
        }

        if (this.agreementLineRecord())
        {
            this.parmLinePercent(this.agreementLineRecord().LineDiscountPercent);
            return;
        }

        this.setPriceDisc_LineDiscFields();

        if (this.isPriceDisc_LineDiscFieldsSet())
        {
            boolean useRetailPricing = RetailParameters::isRetailEnabledAndInUse() && RetailPricingEngine::useRetailPricing(salesLine);
            if (useRetailPricing)
            {
                this.parmLinePercent(0);
            }
            else
            {
                this.parmLinePercent(this.priceDisc_LineDisc().discPct());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchingAgreementLine</Name>
				<Source><![CDATA[
    protected void setMatchingAgreementLine()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, MatchingAgreementLine)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMultiLnDisc</Name>
				<Source><![CDATA[
    protected void setMultiLnDisc()
    {
        AxSalesLine localSalesLine;
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, MultiLnDisc)))
        {
            return;
        }

        if (this.isFieldSetExternally(fieldNum(SalesLine, LineAmount)))
        {
            this.parmMultiLnDisc(0);
            return;
        }

        this.setCurrencyCode();

        localSalesLine = this.axOrig() as AxSalesLine;
        if (this.isFieldSet(fieldNum(SalesLine, CurrencyCode)))
        {
            if (localSalesLine.parmCurrencyCode())
            {
                this.parmMultiLnDisc(ExchangeRateHelper::curPrice2CurPrice(this.parmMultiLnDisc(), localSalesLine.parmCurrencyCode(), this.parmCurrencyCode()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMultiLnPercent</Name>
				<Source><![CDATA[
    protected void setMultiLnPercent()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, MultiLnPercent)))
        {
            return;
        }

        if (this.isFieldSetExternally(fieldNum(SalesLine, LineAmount)))
        {
            this.parmMultiLnPercent(0);
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setName</Name>
				<Source><![CDATA[
    protected void setName()
    {
        ItemFreeTxt itemName;

        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, Name)))
        {
            return;
        }

        this.setCustExternalItemDescriptionFields();

        if (this.isCustExternalItemDescriptionFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, LanguageId)))
        {
            if (this.custExternalItemDescription().externalItemFreeTxt())
            {
                if (CustFormletterParameters::find().ExternalItemOverwriteAppend == OverwriteAppend::Overwrite)
                {
                    this.parmName(this.custExternalItemDescription().externalItemFreeTxt());
                }
                else
                {
                    itemName = SalesParameters::nameAndOrDescription(this.inventTableRecord(), this.axSalesTable().parmLanguageId(), this.parmInventDimId());
                    if (itemName)
                    {
                        itemName += '\n';
                    }
                    itemName += this.custExternalItemDescription().externalItemFreeTxt();
                    this.parmName(itemName);
                }
            }
            else
            {
                this.parmName(SalesParameters::nameAndOrDescription(this.inventTableRecord(), this.axSalesTable().parmLanguageId(), this.parmInventDimId()));
            }
            return;
        }

        this.setInventTableRecordFields();
        this.setAxSalesTableFields();

        if (this.isInventTableRecordFieldsSet() ||
            this.isAxSalesTableFieldsSet()      ||
            this.axSalesTable().isFieldSet(fieldNum(SalesTable, LanguageId)))
        {
            this.parmName(SalesParameters::nameAndOrDescription(this.inventTableRecord(), this.axSalesTable().parmLanguageId(), this.parmInventDimId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOverDeliveryPct</Name>
				<Source><![CDATA[
    protected void setOverDeliveryPct()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, OverDeliveryPct)))
        {
            return;
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            this.parmOverDeliveryPct(this.inventTableRecord().salesOverDeliveryPct());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPackingUnit</Name>
				<Source><![CDATA[
    protected void setPackingUnit()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PackingUnit)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPackingUnitQty</Name>
				<Source><![CDATA[
    protected void setPackingUnitQty()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PackingUnitQty)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsBatchAttribAutoRes</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be call from the AIF framework to set the salesline
    /// PdsBatchAttribAutoRes field value.
    /// </summary>
    /// <remarks>
    /// Process 3.1 Batch Attrib Enhancement
    /// <syntax>
    /// protected void setPdsBatchAttribAutoRes()
    /// </syntax>
    /// </remarks>
    protected void setPdsBatchAttribAutoRes()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PdsBatchAttribAutoRes)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWExpectedRetQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>PdsCWExpectedRetQty</c> field.
    /// </summary>
    protected void setPdsCWExpectedRetQty()
    {
        PurchQty    qty;

        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine,
                PdsCWExpectedRetQty)))
        {
            return;
        }

        if (this.isFieldSet(fieldNum(SalesLine, ItemId))
                && PdsGlobal::pdsIsCWItem(this.parmItemId()))
        {
            qty = PdsCatchWeight::inventQty(this.parmItemId(),
                this.parmPdsCWExpectedRetQty(), this.parmSalesUnit());
            this.parmExpectedRetQty(qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWInventDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>PdsCWInventDeliverNow</c> field.
    /// </summary>
    protected void setPdsCWInventDeliverNow()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PdsCWInventDeliverNow)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>PdsCWQty</c> field.
    /// </summary>
    protected void setPdsCWQty()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PdsCWQty)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWRemainInventFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>PdsCWRemainInventFinancial</c> field.
    /// </summary>
    protected void setPdsCWRemainInventFinancial()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PdsCWRemainInventFinancial)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWRemainInventPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>PdsCWRemainInventPhysical</c> field.
    /// </summary>
    protected void setPdsCWRemainInventPhysical()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PdsCWRemainInventPhysical)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsExcludeFromRebate</Name>
				<Source><![CDATA[
    protected void setPdsExcludeFromRebate()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PdsExcludeFromRebate)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsItemRebateGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>PdsItemRebateGroupId</c> field.
    /// </summary>
    protected void setPdsItemRebateGroupId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PdsItemRebateGroupId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsSameLot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>PdsSameLot</c> field on the <c>SalesLine</c> table buffer.
    /// </summary>
    protected void setPdsSameLot()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PdsSameLot)))
        {
            return;
        }

        this.setInventTableRecordFields();
        this.setSalesQty();
        this.setStockedProduct();
        salesLine.setPdsSameLot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPort</Name>
				<Source><![CDATA[
    protected void setPort()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, Port)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, Port)))
        {
            this.parmPort(this.axSalesTable().parmPort());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreementDate_RU</Name>
				<Source><![CDATA[
    protected void setPriceAgreementDate_RU()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PriceAgreementDate_RU)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.axSalesTable_RU().isFieldModified(fieldNum(SalesTable_RU, PriceAgreementDate_RU)))
        {
            this.parmPriceAgreementDate_RU(this.axSalesTable_RU().parmPriceAgreementDate_RU());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc_LineDiscFields</Name>
				<Source><![CDATA[
    protected void setPriceDisc_LineDiscFields()
    {
        this.setItemId();
        this.setSalesQty();
        this.setSalesUnit();
        this.setInventTableRecordFields();
        this.setAxSalesTableFields();
        this.axInventDim().setSalesPriceDiscFields(this.inventTableRecord());
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.setPriceAgreementDate_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc_LineDiscParams</Name>
				<Source><![CDATA[
    private void setPriceDisc_LineDiscParams(PriceDisc_LineDisc _priceDisc_LineDisc)
    {
        _priceDisc_LineDisc.parmModuleType(ModuleInventPurchSales::Sales);
        _priceDisc_LineDisc.parmItemId(this.parmItemId());
        _priceDisc_LineDisc.parmInventDim(this.axInventDim().inventDim());
        _priceDisc_LineDisc.parmUnitID(this.parmSalesUnit());

        // When <c>AxSalesLine</c> is from a retail sales order and the retail parameter 
        // UseSessionDateForCalculatingPricesAndDiscounts is active, set price discount to user preferred time zone
        // disregarding PriceDateType parameter.
        if (this.axSalesTable().salesTable().retailSalesUseSessionDate())
        {
            _priceDisc_LineDisc.parmDiscDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
        else
        {
            switch (this.axSalesTable().salesParametersRecord().PriceDateType)
            {
                case SalesPriceDateType::ShippingDateRequested:
                    _priceDisc_LineDisc.parmDiscDate(this.parmShippingDateRequested());
                    break;
                case SalesPriceDateType::ReceiptDateRequested:
                    _priceDisc_LineDisc.parmDiscDate(this.parmReceiptDateRequested());
                    break;
                default:
                    _priceDisc_LineDisc.parmDiscDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }
        }

        _priceDisc_LineDisc.parmQty(this.parmSalesQty());
        _priceDisc_LineDisc.parmAccountNum(this.axSalesTable().parmCustAccount());
        _priceDisc_LineDisc.parmCurrencyCode(this.axSalesTable().parmCurrencyCode());
        _priceDisc_LineDisc.parmAccountLineDiscCode(this.axSalesTable().parmLineDisc());
        _priceDisc_LineDisc.parmItemLineDiscCode(this.inventTableRecord().salesLineDisc());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc_PriceFields</Name>
				<Source><![CDATA[
    protected void setPriceDisc_PriceFields()
    {
        if (!isSetPriceDiscPriceFieldsExecuted)
        {
            this.setItemId();
            this.setSalesQty();
            this.setSalesUnit();
            this.setInventTableRecordFields();
            this.setAxSalesTableFields();
            this.axInventDim().setSalesPriceDiscFields(this.inventTableRecord());
            this.setProjTableRecordFields();
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.setPriceAgreementDate_RU();
            }
            // </GEERU>
            isSetPriceDiscPriceFieldsExecuted = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc_PriceParams</Name>
				<Source><![CDATA[
    private void setPriceDisc_PriceParams(PriceDisc_Price _priceDisc_Price)
    {
        _priceDisc_Price.parmModuleType(ModuleInventPurchSales::Sales);
        _priceDisc_Price.parmItemId(this.parmItemId());
        _priceDisc_Price.parmInventDim(this.axInventDim().inventDim());
        _priceDisc_Price.parmUnitID(this.parmSalesUnit());

        // When <c>AxSalesLine</c> is from a retail sales order and the retail parameter
        // UseSessionDateForCalculatingPricesAndDiscounts is active, set price discount to user preferred time zone
        // disregarding PriceDateType parameter.
        if (this.axSalesTable().salesTable().retailSalesUseSessionDate())
        {
            _priceDisc_Price.parmPriceDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
        else
        {
            switch (this.axSalesTable().salesParametersRecord().PriceDateType)
            {
                case SalesPriceDateType::ShippingDateRequested:
                    _priceDisc_Price.parmPriceDate(this.axSalesTable().salesTable().ShippingDateRequested);
                    break;
                case SalesPriceDateType::ReceiptDateRequested:
                    _priceDisc_Price.parmPriceDate(this.axSalesTable().salesTable().ReceiptDateRequested);
                    break;
                default:
                    _priceDisc_Price.parmPriceDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                    break;
            }
        }

        _priceDisc_Price.parmQty(this.parmSalesQty());
        _priceDisc_Price.parmAccountNum(this.axSalesTable().parmCustAccount());
        _priceDisc_Price.parmCurrencyCode(this.axSalesTable().parmCurrencyCode());
        _priceDisc_Price.parmPriceGroupId(this.axSalesTable().parmPriceGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceUnit</Name>
				<Source><![CDATA[
    protected void setPriceUnit()
    {
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        AgreementLine                   agreementLine;

        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PriceUnit)))
        {
            return;
        }

        agreementLine = this.agreementLineRecord();
        if (agreementLine && agreementLine is AgreementLineQuantityCommitment)
        {
            agreementLineQuantityCommitment = agreementLine;
            this.parmPriceUnit(agreementLineQuantityCommitment.PriceUnit);
            return;
        }

        this.setPriceDisc_PriceFields();

        boolean useRetailPricing = RetailParameters::isRetailEnabledAndInUse() && RetailPricingEngine::useRetailPricing(salesLine);
        
        if (!useRetailPricing)
        {
            if (this.isPriceDisc_PriceFieldsSet()
                    || (this.axSalesTable().isFieldModified(fieldNum(SalesTable, ReceiptDateRequested))
                        && !this.salesLine().isDropShipmentPOLineInvoiceMatched() && !this.salesLine().isInterCompanyOrderLineInvoiceMatched()))
            {
                PriceUnit priceUnit = this.priceDisc_Price().priceUnit();
                if (SalesLineRecalculateDeliveryNotChangePriceUnitFlight::instance().isEnabled())
                {
                    if (!this.salesLine().isInterCompanyOrder())
                    {
                        this.parmPriceUnit(priceUnit);
                    }
                }
                else
                {
                    this.parmPriceUnit(priceUnit);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceUnitAsTouched</Name>
				<Source><![CDATA[
    public void setPriceUnitAsTouched()
    {
        this.setFieldAsTouched(fieldNum(SalesLine, PriceUnit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCategoryId</Name>
				<Source><![CDATA[
    protected void setProjCategoryId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ProjCategoryId)))
        {
            return;
        }

        this.setMatchingAgreementLine();
        if (this.agreementLineDefaultRecord())
        {
            this.parmProjCategoryId(this.agreementLineDefaultRecord().ProjectCategory);
            return;
        }

        this.setProjId();
        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet() || this.isFieldSet(fieldNum(SalesLine, ProjId)))
        {
            if (this.isInventTableRecordFieldsSet() || !ProjValProjCategorySetUp::checkProjCategory(this.parmProjId(),this.parmProjCategoryId()))
            {
                if (!ProjValProjCategorySetUp::checkProjCategory(this.parmProjId(),this.inventTableRecord().ProjCategoryId))
                {
                    this.parmProjCategoryId('');
                }
                else
                {
                    this.parmProjCategoryId(this.inventTableRecord().ProjCategoryId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjId</Name>
				<Source><![CDATA[
    protected void setProjId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ProjId)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.parmSalesId() && this.parmProjId() != this.axSalesTable().parmProjId())
        {
            this.parmProjId(this.axSalesTable().parmProjId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjLinePropertyId</Name>
				<Source><![CDATA[
    protected void setProjLinePropertyId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ProjLinePropertyId)))
        {
            return;
        }

        this.setProjId();
        this.setProjCategoryId();
        this.setSalesType();

        if (this.isFieldSet(fieldNum(SalesLine, SalesType)) ||
            this.isFieldSet(fieldNum(SalesLine, ProjId))    ||
            this.isFieldSet(fieldNum(SalesLine, ProjCategoryId)))
        {            
            if ((this.parmSalesType() == SalesType::ItemReq || this.parmSalesType() == SalesType::Sales) && this.parmProjId())
            {
                this.parmProjLinePropertyId(ProjLinePropertySetup::findLinePropertyId(this.parmProjId(),this.parmProjCategoryId()));
            }
            else
            {
                this.parmProjLinePropertyId('');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjTableRecordFields</Name>
				<Source><![CDATA[
    protected void setProjTableRecordFields()
    {
        this.setProjId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPropertyNumber_MX</Name>
				<Source><![CDATA[
    protected void setPropertyNumber_MX()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PropertyNumber_MX)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchorderFormNum</Name>
				<Source><![CDATA[
    protected void setPurchorderFormNum()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, PurchorderFormNum)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyOrdered</Name>
				<Source><![CDATA[
    protected void setQtyOrdered()
    {
        InventQty   inventQty;

        if (this.isMethodExecuted(funcName()))
        {
            return;
        }

        this.setInventTableRecordFields();
        this.setItemId();
        this.setInventDimId();
        this.setSalesQty();
        this.setSalesUnit();
        this.setStockedProduct();

        if (salesLine.isStocked() &&
            (this.isInventTableRecordFieldsSet()                ||
             this.isFieldSet(fieldNum(SalesLine, ItemId))       ||
             this.isFieldSet(fieldNum(SalesLine, InventDImId))  ||
             this.isFieldSet(fieldNum(SalesLine, SalesQty))     ||
             this.isFieldSet(fieldNum(SalesLine, SalesUnit))))
        {
            inventQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.parmItemId(),
                                                                                              this.parmInventDimId(),
                                                                                              this.parmSalesQty(),
                                                                                              this.parmSalesUnit(),
                                                                                              this.inventTableRecord().inventUnitId(),
                                                                                              NoYes::Yes);

            salesLine.QtyOrdered = decRound(inventQty,InventTable::inventDecimals(this.parmItemId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReceiptDateConfirmed</Name>
				<Source><![CDATA[
    protected void setReceiptDateConfirmed()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ReceiptDateConfirmed)))
        {
            return;
        }

        this.setSalesType();
        this.setSalesId();

        if (this.parmSalesType() == SalesType::ItemReq)
        {
            if ((this.isFieldSet(fieldNum(SalesLine, SalesType)) ||
                this.axSalesTable().isFieldModified(fieldNum(SalesTable, ReceiptDateConfirmed))) &&
                this.parmSalesId())
            {
                this.parmReceiptDateConfirmed(this.axSalesTable().parmReceiptDateConfirmed());
            }
            return;
        }

        this.setPriceDisc_PriceFields();
        this.setAxSalesTableFields();

        InterCompanyOrderSyncContext context = InterCompanyOrderSyncContext::instance();
        if (   context
            && salesLine.RecId
            && context.parmInterCompanyOrderSyncParameter()
            && context.parmInterCompanyOrderSyncParameter().keepOrigShipAndReceiptDate)
        {
            return;
        }

        if (this.isPriceDisc_PriceFieldsSet()
            || (this.axSalesTable().isFieldModified(fieldNum(SalesTable, ReceiptDateConfirmed))
                && !this.salesLine().isDropShipmentPOLineInvoiceMatched() && !this.salesLine().isInterCompanyOrderLineInvoiceMatched()))
        {
            if (!forceDeliveryDates && this.priceDisc_Price().deliveryDays() && this.axSalesTable().parmReceiptDateConfirmed())
            {
                this.parmReceiptDateConfirmed(max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + this.priceDisc_Price().deliveryDays(), this.axSalesTable().parmReceiptDateConfirmed()));
            }
            else
            {   
                if (this.shouldUpdateSalesLineDlvDateFromHeader(this.parmReceiptDateConfirmed()))
                {
                    this.parmReceiptDateConfirmed(this.axSalesTable().parmReceiptDateConfirmed());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateSalesLineDlvDateFromHeader</Name>
				<Source><![CDATA[
    private boolean shouldUpdateSalesLineDlvDateFromHeader(TransDate _dlvDate)
    {
        return !(_dlvDate
            && this.axSalesTable().isFieldModified(fieldNum(SalesTable, PriceGroupId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReceiptDateRequested</Name>
				<Source><![CDATA[
    protected void setReceiptDateRequested()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ReceiptDateRequested)))
        {
            return;
        }

        this.setSalesType();
        this.setSalesId();

        if ((this.parmSalesType() == SalesType::ItemReq ||
            this.axSalesTable().isFieldModified(fieldNum(SalesTable, ReceiptDateRequested))) &&
            this.isFieldSet(fieldNum(SalesLine, SalesType)) && this.parmSalesId())
        {
            this.parmReceiptDateRequested(this.axSalesTable().parmReceiptDateRequested());
            return;
        }

        this.setPriceDisc_PriceFields();
        this.setAxSalesTableFields();

        InterCompanyOrderSyncContext context = InterCompanyOrderSyncContext::instance();
        if (   context
            && salesLine.RecId
            && context.parmInterCompanyOrderSyncParameter()
            && context.parmInterCompanyOrderSyncParameter().keepOrigShipAndReceiptDate)
        {
            return;
        }

        if (this.isPriceDisc_PriceFieldsSet()
            || (this.axSalesTable().isFieldModified(fieldNum(SalesTable, ReceiptDateRequested))
                && !this.salesLine().isDropShipmentPOLineInvoiceMatched() && !this.salesLine().isInterCompanyOrderLineInvoiceMatched()))
        {
            if (!forceDeliveryDates && this.priceDisc_Price().deliveryDays())
            {
                this.parmReceiptDateRequested(max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + this.priceDisc_Price().deliveryDays(), this.axSalesTable().parmReceiptDateRequested()));
            }
            else
            {
                if (this.shouldUpdateSalesLineDlvDateFromHeader(this.parmReceiptDateRequested()) && this.shouldUpdateRequestedDate())
                {
                    this.parmReceiptDateRequested(this.axSalesTable().parmReceiptDateRequested());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainInventPhysical</Name>
				<Source><![CDATA[
    protected void setRemainInventPhysical()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, RemainInventPhysical)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainSalesFinancial</Name>
				<Source><![CDATA[
    protected void setRemainSalesFinancial()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, RemainSalesFinancial)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainSalesPhysical</Name>
				<Source><![CDATA[
    protected void setRemainSalesPhysical()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, RemainSalesPhysical)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequestedDatesAsTouched</Name>
				<Source><![CDATA[
    void setRequestedDatesAsTouched()
    {
        this.setFieldAsTouched(fieldNum(SalesLine, ReceiptDateRequested));
        this.setFieldAsTouched(fieldNum(SalesLine, ShippingDateRequested));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReservation</Name>
				<Source><![CDATA[
    protected void setReservation()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, Reservation)))
        {
            return;
        }
        // Default the reservation flag from the InventModelGroup.
        this.mcrSetInventModelGroupRecordFields();
        this.setAxSalesTableFields();

        if (this.isMCRInventModelGroupRecordFieldsSet())
        {
            this.parmReservation(InventModelGroup::MCRDefaultReservation(
                    this.mcrInventModelGroupRecord().mcrReservation, this.axSalesTable().parmReservation()));
        }
        else
        {
            this.setAxSalesTableFields();

            if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, Reservation)))
            {
                this.parmReservation(this.axSalesTable().parmReservation());
            }
        }

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, Reservation)))
        {
            this.parmReservation(this.axSalesTable().parmReservation());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetailVariantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the dimension with the retail variant.
    /// </summary>
    /// <remarks>
    /// If the RetailVariantId is not empty, the method will query the dimension with this RetailVariant
    /// and set the dimension value to the dimension field. If the RetailVariantId is empty, the method
    /// does not assign any value to dimension field.
    /// </remarks>
    protected void setRetailVariantId()
    {
        InventDimCombination comb = InventDimCombination::findVariantId(salesLine.RetailVariantId);

        if (comb)
        {
            InventDim inventDim = axInventDim.inventDim();
            InventDim combInventDim = comb.inventDim();

            InventDimensionEnumerator productDims = InventProductDimension::getEnumeratorForEnabledDimensions();
            while (productDims.moveNext())
            {
                FieldId productDimFieldId = productDims.currentInventDimFieldId();
                if (inventDim.(productDimFieldId) != combInventDim.(productDimFieldId))
                {
                    axInventDim.parmInventDimension(productDimFieldId, combInventDim.(productDimFieldId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnDeadLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>ReturnDeadLine</c> field.
    /// </summary>
    protected void setReturnDeadLine()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ReturnDeadline)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, ReturnDeadline)))
        {
            if (this.axSalesTable().parmReturnStatus() != ReturnStatusHeader::None)
            {
                this.parmReturnDeadLine(this.axSalesTable().parmReturnDeadline());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnDispositionCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the <c>ReturnDispositionCodeId</c> field.
    /// </summary>
    protected void setReturnDispositionCodeId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ReturnDispositionCodeId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>ReturnStatus</c> field.
    /// </summary>
    protected void setReturnStatus()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ReturnStatus)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesCategory</Name>
				<Source><![CDATA[
    protected void setSalesCategory()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, SalesCategory)))
        {
            return;
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            // Get category from itemid
            this.parmSalesCategory(
                EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                    this.parmItemId(),
                    EcoResCategoryNamedHierarchyRole::Sales).Category);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesDeliverNow</Name>
				<Source><![CDATA[
    protected void setSalesDeliverNow()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, SalesDeliverNow)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesGroup</Name>
				<Source><![CDATA[
    protected void setSalesGroup()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, SalesGroup)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, SalesGroup)))
        {
            this.parmSalesGroup(this.axSalesTable().parmSalesGroup());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesId</Name>
				<Source><![CDATA[
    protected void setSalesId()
    {
        SalesTable  salesTable;

        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, SalesId)))
        {
            return;
        }

        this.setSalesType();

        if (this.parmSalesType() == SalesType::ItemReq)
        {
            this.setCurrencyCode();
            this.setProjId();
            this.setProjTableRecordFields();
            this.setCustAccount();

            if (this.isFieldSet(fieldNum(SalesLine, CurrencyCode))  ||
                this.isFieldSet(fieldNum(SalesLine, ProjId))        ||
                this.isFieldSet(fieldNum(SalesLine, CustAccount))   ||
                this.isProjTableRecordFieldsSet())
            {
                if (this.parmCustAccount() && this.parmCurrencyCode())
                {
                    salesTable = SalesTable::findOrCreateSalesTable_ItemReq(this.parmCustAccount(), this.parmCurrencyCode(), this.parmProjId());
                    this.axSalesTable(AxSalesTable::newSalesTable(salesTable));
                    this.parmSalesId(this.axSalesTable().parmSalesId());
                    return;
                }
            }
        }

        if (!this.parmSalesId())
        {
            this.parmSalesId(this.axSalesTable().parmSalesId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesMarkup</Name>
				<Source><![CDATA[
    protected void setSalesMarkup()
    {
        AxSalesLine localSalesLine;
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, SalesMarkup)))
        {
            return;
        }

        this.setSalesType();

        if (this.parmSalesType() == SalesType::ItemReq)
        {
            if (this.isFieldSet(fieldNum(SalesLine, SalesType)))
            {
                this.parmSalesMarkup(0);
            }
            return;
        }

        if (this.isFieldSetExternally(fieldNum(SalesLine, LineAmount)))
        {
            this.parmSalesMarkup(0);
            return;
        }

        this.setPriceDisc_PriceFields();

        if (this.isPriceDisc_PriceFieldsSet())
        {
            this.parmSalesMarkup(this.priceDisc_Price().priceMarkup());
        }

        this.setCurrencyCode();

        localSalesLine = this.axOrig() as AxSalesLine;
        if (this.isFieldSet(fieldNum(SalesLine, CurrencyCode)))
        {
            if (localSalesLine.parmCurrencyCode())
            {
                this.parmSalesMarkup(ExchangeRateHelper::curPrice2CurPrice(this.parmSalesMarkup(), localSalesLine.parmCurrencyCode(), this.parmCurrencyCode()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPrice</Name>
				<Source><![CDATA[
    protected void setSalesPrice()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, SalesPrice)))
        {
            return;
        }

        this.setSalesType();

        if (this.parmSalesType() == SalesType::ItemReq)
        {
            this.setProjTableRecordFields();

            ProjTable projTableLocal = this.projTableRecord();

            if (projTableLocal.Type == ProjType::FixedPrice ||
                projTableLocal.Type == ProjType::Internal ||
                // When <c>ProjEnableMultipleContractLinesForProjectFeature</c> is turned on, internal projects will be any project that does not have a contract
                (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
                 (!projTableLocal.ProjInvoiceProjId || ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Item, ProjContractBillingMethod::FixedPrice))))
            {
                if (this.isFieldSet(fieldNum(SalesLine, SalesType)) || this.isProjTableRecordFieldsSet())
                {
                    this.parmSalesPrice(0);
                }
                return;
            }
        }

        if (this.isFieldSetExternally(fieldNum(SalesLine, LineAmount)))
        {
            this.parmSalesPrice(0);
            return;
        }

        this.setSalesPriceBasedOnAgreementLine();
        this.setCurrencyCode();

        AxSalesLine localSalesLine = this.axOrig() as AxSalesLine;
        if (this.isFieldSet(fieldNum(SalesLine, CurrencyCode)))
        {
            if (localSalesLine.parmCurrencyCode())
            {
                this.parmSalesPrice(ExchangeRateHelper::curPrice2CurPrice(this.parmSalesPrice(), localSalesLine.parmCurrencyCode(), this.parmCurrencyCode()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPriceBasedOnAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SalesPrice</c> based upon the related <c>AgreementLine</c>.
    /// </summary>
    protected void setSalesPriceBasedOnAgreementLine()
    {
        AgreementLine agreementLine = this.agreementLineRecord();
        if (agreementLine.RecId && agreementLine is AgreementLineQuantityCommitment)
        {
            this.setSalesPriceForQuantityCommitment(agreementLine);
        }
        else
        {
            this.setSalesPriceForNonQuantityCommitment();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPriceForNonQuantityCommitment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SalesPrice</c> for a record not associated with a <c>AgreementLineQuantityCommitment</c> record.
    /// </summary>
    protected void setSalesPriceForNonQuantityCommitment()
    {
        this.setPriceDisc_PriceFields();
        
        PriceCur priceDiscCur = this.priceDisc_Price().price();
        if (this.isPriceDisc_PriceFieldsSet()
            || (this.isShipReceiptDateRequestedFieldsModified()
                &&  (!this.salesLine().salesTable().isInterCompanyOrder()
                    || (this.salesLine().salesTable().interCompanyEndpointActionPolicy().PriceDiscountSearch
                        && priceDiscCur))))
        {
            boolean useRetailPricing = RetailParameters::isRetailEnabledAndInUse() && RetailPricingEngine::useRetailPricing(salesLine);
            if (!useRetailPricing)
            {
                this.parmSalesPrice(priceDiscCur);
            }
            else if (RetailPricingSetPriceWhenAxSalesLineSetSalesPriceFlight::instance().isEnabled())
            {
                RetailOrderCalculator retailCalculator = RetailOrderCalculator::construct(salesLine.TableId, salesLine.SalesId, salesLine);
                this.parmLineDisc(0);

                retailCalculator.setPriceOnCurrentLine();
                retailCalculator.setDiscountOnCurrentLine(); // AxSalesLine::setLineDisc() method may skip discount calculation in some cases, so we calculate discount along with price.
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPriceForQuantityCommitment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SalesPrice</c> for a record associated with a <c>AgreementLineQuantityCommitment</c> record.
    /// </summary>
    /// <param name = "_agreementLineQuantityCommitment">The associated <c>AgreementLineQuantityCommitment</c> record.</param>
    protected void setSalesPriceForQuantityCommitment(AgreementLineQuantityCommitment _agreementLineQuantityCommitment)
    {
        if (_agreementLineQuantityCommitment)
        {
            this.parmSalesPrice(_agreementLineQuantityCommitment.PricePerUnit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesQty</Name>
				<Source><![CDATA[
    protected void setSalesQty()
    {
        SalesQty    salesQty;

        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, SalesQty)))
        {
            return;
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            this.setSalesType();

            if (this.parmSalesType() != SalesType::ReturnItem)
            {
                this.setInventDimId();
                salesQty = this.inventTableRecord().salesStandardQty(this.parmInventDimId());

                this.setSalesUnit();

                UnitOfMeasureSymbol salesUnitId = this.inventTableRecord().salesUnitId();
                UnitOfMeasureSymbol inventUnitId = this.inventTableRecord().inventUnitId();

                if (this.isFieldSet(fieldNum(SalesLine, SalesUnit)) &&
                    this.parmSalesUnit() != salesUnitId)
                {
                    this.setItemId();

                    EcoResProductUnitConverter productUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                            this.parmItemId(),
                                                                            this.parmInventDimId(),
                                                                            salesUnitId,
                                                                            inventUnitId,
                                                                            NoYes::Yes);

                    salesQty = productUnitConverter.convertValue(salesQty);

                    productUnitConverter.parmFromUnitOfMeasureSymbol(inventUnitId);
                    productUnitConverter.parmToUnitOfMeasureSymbol(this.parmSalesUnit());

                    salesQty = productUnitConverter.convertValue(salesQty);
                }

                this.parmSalesQty(salesQty);
            }
            return;
        }

        this.setSalesUnit();

        if (this.isFieldSet(fieldNum(SalesLine, SalesUnit)))
        {
            this.parmSalesQty(decRound(this.parmSalesQty(), UnitOfMeasure::unitOfMeasureDecimalPrecision(
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.parmSalesUnit()))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatus</Name>
				<Source><![CDATA[
    protected void setSalesStatus()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, SalesStatus)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesType</Name>
				<Source><![CDATA[
    protected void setSalesType()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, SalesType)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.parmSalesId() && this.parmSalesType() != this.axSalesTable().parmSalesType())
        {
            this.parmSalesType(this.axSalesTable().parmSalesType());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesUnit</Name>
				<Source><![CDATA[
    protected void setSalesUnit()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, SalesUnit)))
        {
            return;
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            this.parmSalesUnit(this.inventTableRecord().salesUnitId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScrap</Name>
				<Source><![CDATA[
    protected void setScrap()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, Scrap)))
        {
            return;
        }

        this.setSalesType();

        if (this.parmSalesType() != SalesType::ReturnItem)
        {
            this.setSalesQty();

            if (this.isFieldSet(fieldNum(SalesLine, SalesQty)))
            {
                if (this.parmSalesQty() > 0)
                {
                    this.parmScrap(NoYes::No);
                    return;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setServiceOrderId</Name>
				<Source><![CDATA[
    protected void setServiceOrderId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ServiceOrderId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipCarrierAccount</Name>
				<Source><![CDATA[
    protected void setShipCarrierAccount()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ShipCarrierAccount)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShipCarrierAccount)))
        {
            this.parmShipCarrierAccount(this.axSalesTable().parmShipCarrierAccount());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipCarrierAccountCode</Name>
				<Source><![CDATA[
    protected void setShipCarrierAccountCode()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ShipCarrierAccountCode)))
        {
            return;
        }

        this.setDlvMode();
        if (this.isFieldSet(fieldNum(SalesLine, DlvMode)))
        {
            this.parmShipCarrierAccountCode(this.dlvModeRecord().ShipCarrierAccountCode);
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShipCarrierAccountCode)))
        {
            this.parmShipCarrierAccountCode(this.axSalesTable().parmShipCarrierAccountCode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipCarrierDlvType</Name>
				<Source><![CDATA[
    protected void setShipCarrierDlvType()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ShipCarrierDlvType)))
        {
            return;
        }

        this.setDlvMode();
        if (this.isFieldSet(fieldNum(SalesLine, DlvMode)))
        {
            this.parmShipCarrierDlvType(this.dlvModeRecord().ShipCarrierDlvType);
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShipCarrierDlvType)))
        {
            this.parmShipCarrierDlvType(this.axSalesTable().parmShipCarrierDlvType());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipCarrierId</Name>
				<Source><![CDATA[
    protected void setShipCarrierId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ShipCarrierId)))
        {
            return;
        }

        this.setDlvMode();
        if (this.isFieldSet(fieldNum(SalesLine, DlvMode)))
        {
            this.parmShipCarrierId(this.dlvModeRecord().ShipCarrierId);
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShipCarrierId)))
        {
            this.parmShipCarrierId(this.axSalesTable().parmShipCarrierId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipCarrierPostalAddress</Name>
				<Source><![CDATA[
    protected void setShipCarrierPostalAddress()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ShipCarrierPostalAddress)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet())
        {
            this.parmShipCarrierPostalAddress(this.axSalesTable().parmShipCarrierPostalAddress());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShippingDateConfirmed</Name>
				<Source><![CDATA[
    protected void setShippingDateConfirmed()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ShippingDateConfirmed)))
        {
            return;
        }

        this.setSalesType();

        if (!forceDeliveryDates && salesLine.type().mustConfirmDates(SalesConfirmDatesAsyncStrategy::construct()))
        {
            // if the confirmed dates are set in an asynchronous call we should not set them now
            return;
        }

        if ((this.parmSalesType() == SalesType::ItemReq ||
            this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShippingDateConfirmed))) &&
            this.isFieldSet(fieldNum(SalesLine, SalesType)) && this.parmSalesId())
        {
            this.parmShippingDateConfirmed(this.axSalesTable().parmShippingDateConfirmed());
            return;
        }

        this.setPriceDisc_PriceFields();
        this.setAxSalesTableFields();

        InterCompanyOrderSyncContext context = InterCompanyOrderSyncContext::instance();
        if (   context
            && salesLine.RecId
            && context.parmInterCompanyOrderSyncParameter()
            && context.parmInterCompanyOrderSyncParameter().keepOrigShipAndReceiptDate)
        {
            return;
        }

        if (this.isPriceDisc_PriceFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShippingDateConfirmed)))
        {
            if (!forceDeliveryDates && this.priceDisc_Price().deliveryDays() && this.axSalesTable().parmShippingDateConfirmed())
            {
                this.parmShippingDateConfirmed(max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + this.priceDisc_Price().deliveryDays(), this.axSalesTable().parmShippingDateConfirmed()));
            }
            else
            {
                if (this.shouldUpdateSalesLineDlvDateFromHeader(this.parmShippingDateConfirmed()))
                {
                    this.parmShippingDateConfirmed(this.axSalesTable().parmShippingDateConfirmed());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShippingDateRequested</Name>
				<Source><![CDATA[
    protected void setShippingDateRequested()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, ShippingDateRequested)))
        {
            return;
        }

        this.setSalesType();

        if ((this.parmSalesType() == SalesType::ItemReq ||
            this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShippingDateRequested))) &&
            this.isFieldSet(fieldNum(SalesLine, SalesType)) && this.parmSalesId())
        {
            this.parmShippingDateRequested(this.axSalesTable().parmShippingDateRequested());
            return;
        }

        this.setPriceDisc_PriceFields();
        this.setAxSalesTableFields();

        InterCompanyOrderSyncContext context = InterCompanyOrderSyncContext::instance();
        if (   context
            && salesLine.RecId
            && context.parmInterCompanyOrderSyncParameter()
            && context.parmInterCompanyOrderSyncParameter().keepOrigShipAndReceiptDate)
        {
            return;
        }

        if (this.isPriceDisc_PriceFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, ShippingDateRequested)))
        {
            if (!forceDeliveryDates && this.priceDisc_Price().deliveryDays())
            {
                this.parmShippingDateRequested(max(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + this.priceDisc_Price().deliveryDays(), this.axSalesTable().parmShippingDateRequested()));
            }
            else
            {
                if (this.shouldUpdateSalesLineDlvDateFromHeader(this.parmShippingDateRequested()) && this.shouldUpdateRequestedDate())
                {
                    this.parmShippingDateRequested(this.axSalesTable().parmShippingDateRequested());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSkipUpdate</Name>
				<Source><![CDATA[
    protected void setSkipUpdate()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, SkipUpdate)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatisticValue_LT</Name>
				<Source><![CDATA[
    protected void setStatisticValue_LT()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, StatisticValue_LT)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatProcId</Name>
				<Source><![CDATA[
    protected void setStatProcId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, StatProcId)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, StatProcId)))
        {
            this.parmStatProcId(this.axSalesTable().parmStatProcId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatTriangularDeal</Name>
				<Source><![CDATA[
    protected void setStatTriangularDeal()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, StatTriangularDeal)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStockedProduct</Name>
				<Source><![CDATA[
    protected void setStockedProduct()
    {
        if (this.isMethodExecuted(funcName()))
        {
            return;
        }

        this.setInventTableRecordFields();
        this.setSalesCategory();
        this.salesLine().setStockedProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStorageDimField</Name>
				<Source><![CDATA[
    public void setStorageDimField(FieldId _fieldId)
    {
        this.axInventDim().setDimFieldId(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
    protected void setTableFields()
    {
        //<GMX>
        #ISOCountryRegionCodes
        //</GMX>
        super();

        useMapPolicy = false;

        this.setAddressRefTableId();
        this.setAddressRefRecId();
        this.setBarCode();
        this.setBarCodeType();
        this.setBlocked();
        this.setComplete();
        this.setConfirmedDlv();
        this.setRetailVariantId();
        this.setCostPrice();
        this.setCurrencyCode();
        this.setCustomerRef();
        this.setCustAccount();
        this.setCustGroup();
        this.setCustomerLineNum();
        this.setDeliveryPostalAddress();
        this.setDeliveryName();
        this.setDeliveryType();
        this.setDefaultDimension();
        this.setDlvMode();
        this.setDlvTerm();
        this.setAgreementSkipAutoLink();
        this.setExternalItemId();
        this.setInterCompanyInventTransId();
        this.setInventDeliverNow();
        this.setInventDimId();
        this.setInventRefId();
        this.setInventRefTransId();
        this.setInventRefType();
        this.setInventTransId();
        this.setInventTransIdReturn();
        this.setItemBOMId();
        this.setItemId();
        this.setItemRouteId();
        this.setLedgerDimension();
        this.setLineAmount();
        this.setLineDisc();
        this.setLineHeader();
        this.setLineNum();
        this.setLinePercent();
        this.setMultiLnDisc();
        this.setMultiLnPercent();
        this.setName();
        this.setOverDeliveryPct();
        this.setPackingUnitQty();
        this.setPackingUnit();
        this.setPort();
        this.setPriceUnit();
        this.setProjId();
        if(this.parmProjId())
        {
            // These fields should not be set if there is no project id
            this.setProjCategoryId();
            this.setProjLinePropertyId();
        }
        this.setPurchorderFormNum();
        this.setQtyOrdered();
        this.setReceiptDateConfirmed();
        this.setReceiptDateRequested();
        this.setRemainInventPhysical();
        this.setRemainSalesPhysical();
        this.setRemainSalesFinancial();
        this.setReservation();
        this.setSalesDeliverNow();
        this.setSalesGroup();
        this.setSalesId();
        this.setSalesMarkup();
        this.setSalesPrice();
        this.setSalesQty();
        this.setSalesStatus();
        this.setSalesType();
        this.setSalesUnit();
        this.setScrap();
        this.setServiceOrderId();
        this.setShippingDateConfirmed();
        this.setShippingDateRequested();
        this.setShipCarrierPostalAddress();
        this.setSkipUpdate();
        this.setStatProcId();
        this.setStatTriangularDeal();
        this.setTaxAutogenerated();
        this.setTaxGroup();
        this.setTaxItemGroup();
        this.setTransactionCode();
        this.setTransport();
        this.setUnderDeliveryPct(); 
        this.setInterCompanyOrigin();
        this.setEInvoiceAccountCode();
        this.setShipCarrierId();
        this.setShipCarrierAccount();
        this.setShipCarrierAccountCode();
        this.setShipCarrierDlvType();
        this.setExpectedRetQty();
        this.setReturnDeadLine();
        this.setReturnDispositionCodeId();
        this.setReturnStatus();

        this.setPdsBatchAttribAutoRes();
        this.setPdsCWExpectedRetQty();
        this.setPdsCWQty();
        this.setPdsCWInventDeliverNow();
        this.setPdsCWRemainInventFinancial();
        this.setPdsCWRemainInventPhysical();
        this.setPdsExcludeFromRebate();
        this.setPdsItemRebateGroupId();
        this.setPdsSameLot();

        this.setSalesCategory();
        this.setStockedProduct();
        this.setMatchingAgreementLine();  
        this.setMpsExcludeSalesLine();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.setPriceAgreementDate_RU();
        }
        // </GEERU>

        //<GMX>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.setCustomsDocDate_MX();
            this.setCustomsDocNumber_MX();
            this.setCustomsName_MX();
            this.setPropertyNumber_MX();
        }
        //</GMX>

        this.setDeliveryDateControl();

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.setIntrastatFulfillmentDate_HU();
        }
        // </GEEHU>

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            this.setOverrideSalesTax();
        }

        useMapPolicy = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxAutogenerated</Name>
				<Source><![CDATA[
    protected void setTaxAutogenerated()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, TaxAutogenerated)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    protected void setTaxGroup()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, TaxGroup)))
        {
            return;
        }

        this.setProjTableRecordFields();
        this.setSalesType();

        if (this.parmSalesType() == SalesType::ItemReq && this.projTableRecord())
        {
            if (this.isFieldSet(fieldNum(SalesLine, SalesType)) ||
                this.isProjTableRecordFieldsSet())
            {
                this.parmTaxGroup(ProjParameters::taxGroupInvoice(this.parmProjId()));
                return;
            }               
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet()
            || (this.axSalesTable().isFieldModified(fieldNum(SalesTable, TaxGroup)) && !this.salesLine().isInterCompanyOrderLineInvoiceMatched()))
        {
            this.parmTaxGroup(this.axSalesTable().parmTaxGroup());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOverrideSalesTax</Name>
				<Source><![CDATA[
    protected void setOverrideSalesTax()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, OverrideSalesTax)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet()
            || (this.axSalesTable().isFieldModified(fieldNum(SalesTable, OverrideSalesTax)) && !this.salesLine().isInterCompanyOrderLineInvoiceMatched()))
        {
            this.parmOverrideSalesTax(this.axSalesTable().parmOverrideSalesTax());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxItemGroup</Name>
				<Source><![CDATA[
    protected void setTaxItemGroup()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, TaxItemGroup)))
        {
            return;
        }

        this.setProjId();

        if (this.parmProjId())
        {
            if (ProjParameters::find().TaxItemGroupMethod   == ProjTaxItemGroupMethod::Category)
            {
                this.setProjCategoryId();

                if (this.isFieldSet(fieldNum(SalesLine, ProjCategoryId)))
                {
                    this.parmTaxItemGroup(ProjCategory::find(this.parmProjCategoryId()).TaxItemGroupId);
                    return;
                }
            }
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            this.parmTaxItemGroup(this.inventTableRecord().salesTaxItemGroupId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionCode</Name>
				<Source><![CDATA[
    protected void setTransactionCode()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, TransactionCode)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, TransactionCode)))
        {
            this.parmTransactionCode(this.axSalesTable().parmTransactionCode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransport</Name>
				<Source><![CDATA[
    protected void setTransport()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, Transport)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, Transport)))
        {
            this.parmTransport(this.axSalesTable().parmTransport());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnderDeliveryPct</Name>
				<Source><![CDATA[
    protected void setUnderDeliveryPct()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, UnderDeliveryPct)))
        {
            return;
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            this.parmUnderDeliveryPct(this.inventTableRecord().salesUnderDeliveryPct());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMpsExcludeSalesLine</Name>
				<Source><![CDATA[
    protected void setMpsExcludeSalesLine()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(SalesLine, MpsExcludeSalesLine)))
        {
            return;
        }

        this.setAxSalesTableFields();

        if (this.isAxSalesTableFieldsSet() || this.axSalesTable().isFieldModified(fieldNum(SalesTable, MpsExcludeSalesOrder)))
        {
            this.parmMpsExcludeSalesLine(this.axSalesTable().parmMpsExcludeSalesOrder());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCreditLimitCheck</Name>
				<Source><![CDATA[
    public boolean skipCreditLimitCheck(boolean _skipCreditLimitCheck = skipCreditLimitCheck)
    {
        skipCreditLimitCheck = _skipCreditLimitCheck;

        return skipCreditLimitCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromInventDim</Name>
				<Source><![CDATA[
    public void updateFromInventDim()
    {
        //When updating axSalesLine through an instance of axInventDim_SalesLine only
        //this.setInventDimId() is allowed to be called, not the entire setTableFields()
        //as is done through the save-method.

        ttsbegin;

        runState        = AxBCRunState::Save;
        fieldModified   = new Set(Types::Integer);

        this.initRecord();

        this.inputStatus(InternalExternal::Internal);

        this.setInventDimId();
        inventDimIdDirtySaved = false;

        this.setAlternativeItem();

        //Call setLineAmount in order to recalculate the salesPrice if Trade-Agreement is setup.
        if (setLineAmountInUpdateFromInventDim)
        {
            this.setLineAmount();
            setLineAmountInUpdateFromInventDim = false;
        }

        this.validateWrite();

        this.validateAgreementLink();

        this.write();

        salesLine.InventDimId = InventDim::inventDimIdBlank();

        this.resetInternalValues();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAlternativeItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the use of alternative item replacement.
    /// </summary>
    /// <param name="_useAlternativeItem">
    ///    A Boolean value that indicates whether to use the alternative item replacement.
    /// </param>
    /// <returns>
    ///    true if the alternative item replacement is used; otherwise, false.
    /// </returns>
    public boolean useAlternativeItem(boolean  _useAlternativeItem = useAlternativeItem)
    {
        useAlternativeItem = _useAlternativeItem;

        return useAlternativeItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAgreementLink</Name>
				<Source><![CDATA[
    protected void validateAgreementLink()
    {
        AgreementLine               agreementLine;
        AgreementLine               emptyAgreementLine;

        agreementLine = this.agreementLineRecord();

        if (agreementLine.RecId)
        {
            // As Record type does not fully support ST/st buffers yet, restored from a Map agreementLine is not fully valid ST/st buffer,
            // so we need re-read it to get valid type structure initialized.
            agreementLine = AgreementLine::find(agreementLine.RecId);

            if (!agreementLine.isLinkValid(salesLine,false))
            {
                salesLine.unLinkAgreementLine();
                this.parmMatchingAgreementLine(0);
                this.agreementLineRecord(emptyAgreementLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    protected void validateWrite()
    {
        if (this.validateInput())
        {
            if (!salesLine.validateWrite(true))
            {
                if (continueOnError)
                {
                    error("@SYS98197");
                }
                else
                {
                    throw error("@SYS23020");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueMapDependingFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the incoming value mapping of fields that depend on another field, such as the item,
    ///    state, and county fields.
    /// </summary>
    /// <remarks>
    ///    This method is used in the save method. Therefore the incoming value mapping is performed before
    ///    the fields are defaulted.
    /// </remarks>
    protected void valueMapDependingFields()
    {
        ItemId      valueMapedItemId;
        InventDim   valueMapedInventDim;

        if (this.valueMappingInbound())
        {
            if (salesLine.CustAccount && item)
            {
                [valueMapedItemId,valueMapedInventDim] = this.axSalesItemId(salesLine.CustAccount,item);
                this.parmItemId(valueMapedItemId);
                if (!InventDim::isInventDimEqualProductDim(EcoResProductDimGroupSetup::newItemId(salesLine.ItemId), valueMapedInventDim, InventDim::find(InventDim::inventDimIdBlank())))
                {
                    axInventDim.productDimensions(valueMapedInventDim);
                    this.parmInventDimId(InventDim::findOrCreate(axInventDim.inventDim()).InventDimId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static AxSalesLine construct()
    {
        return new AxSalesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesLine</Name>
				<Source><![CDATA[
    public static AxSalesLine newSalesLine(SalesLine _salesLine)
    {
        AxSalesLine axSalesLine = AxSalesLine::construct();
        axSalesLine.salesLine(_salesLine);

        return axSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newValidateInput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>AxSalesLine</c> class.
    /// Initialized instance will validate input before saving the record.
    /// </summary>
    /// <returns>
    /// A <c>AxSalesLine</c> object initialized
    /// </returns>
    public static AxSalesLine newValidateInput()
    {
        AxSalesLine axSalesLine = new AxSalesLine();
        axSalesLine.validateInput(true);
        return axSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateRequestedDate</Name>
				<Source><![CDATA[
    private boolean shouldUpdateRequestedDate()
    {
        if (this.salesLine().isDerivedIntercompanyLine())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>