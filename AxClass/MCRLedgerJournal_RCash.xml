<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRLedgerJournal_RCash</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRLedgerJournal_RCash</c> creates
/// cash and bank management slip journals.
/// </summary>
class MCRLedgerJournal_RCash extends MCRLedgerJournal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name="_amtCurCredit">
    /// The credit amount on the <c>LedgerJournalTrans</c>.
    /// </param>
    /// <param name="_amtCurDebit">
    /// The debit amount on the <c>LedgerJournalTrans</c>.
    /// </param>
    /// <param name="_ledgerJournalACType">
    /// The <c>LedgerJournalACType</c> on the <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The created <c>LedgerJournalTrans</c> record.
    /// </returns>
    public LedgerJournalTrans createLedgerJournalTrans(AmountCurCredit      _amtCurCredit,
                                                       AmountCurDebit       _amtCurDebit,
                                                       LedgerJournalACType  _ledgerJournalACType = LedgerJournalACType::Ledger)
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        OfficialsServ_RU                    officialServ;
        LedgerJournalAC                     offsetAccountNum;
        CustTable                           custTable;

        // Validate the input to the ledger journal trans and ensure that a ledgerjournaltable
        // exists before creating the ledger journalTrans.

        if (this.validateInputLedgerJourTrans(_amtCurCredit, _amtCurDebit)
            && ledgerJournalTable.RecId != 0)
        {
            this.initLedgerJournalTrans(ledgerJournalTrans);

            ledgerJournalTrans.JournalNum = ledgerJournalTable.JournalNum;
            ledgerJournalTrans.AccountType = LedgerAccountType;

            // If the ledger account has not been set by the parm method then set it here.
            if (!ledgerAccount)
            {
                ledgerAccount = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(accountNum, LedgerJournalACType::RCash);
            }

            ledgerJournalTrans.LedgerDimension = ledgerAccount;
            ledgerJournalTrans.DefaultDimension = this.parmDefaultDimension();
            ledgerJournalTrans.OffsetAccountType = ledgerOffsetAccountType;
            ledgerJournalTrans.OffsetLedgerDimension = ledgerOffsetAccount;
            ledgerJournalTrans.OffsetDefaultDimension = this.parmDefaultDimension();
            ledgerJournalTrans.TransactionType = LedgerTransType::Payment;
            ledgerJournalTrans.BankTransType = bankTransType;
            ledgerJournalTrans.PaymReference = paymReference;
            ledgerJournalTrans.MCRPaymOrderId = mcrPaymOrderID;
            ledgerJournalTrans.MCRRefPaymID = mcrRefPaymID;
            ledgerJournalTrans.Txt = transTxt;
            ledgerJournalTrans.PaymMode = paymentMode;
            ledgerJournalTrans.CurrencyCode = curCode;
            ledgerJournalTrans.ExchRate = exchRate;
            ledgerJournalTrans.Prepayment = prePay;
            ledgerJournalTrans.PostingProfile = postingProfile;
            ledgerJournalTrans.OffsetPostingProfile_RU = offsetPostingProfile_RU;
            ledgerJournalTrans.Approver = approver;
            ledgerJournalTrans.Approved = approved;

            if (!accountNum)
            {
                accountNum = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerAccount);
            }

            officialServ = new OfficialsServ_RU();
            officialServ.initTableRCash(accountNum);
            ledgerJournalTrans.OffSessionId_RU = officialServ.newId();

            offsetAccountNum = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerOffsetAccount);
            custTable = CustTable::find(offsetAccountNum);
            ledgerJournalTrans.RCashDocRepresType = RCashDocRepresType::Person;
            ledgerJournalTrans.RepresPersonName_W = custTable.name();

            // If the correct payment status is not being passed in  chances are that this is being created
            // by posting logic which would expect the payment status to be approved.
            if (paymentStatus == CustVendPaymStatus::None)
            {
                paymentStatus = CustVendPaymStatus::Confirmed;
            }

            ledgerJournalTrans.PaymentStatus = paymentStatus;

            if (_amtCurCredit != 0)
            {
                ledgerJournalTrans.AmountCurCredit = _amtCurCredit;
            }

            if (_amtCurDebit != 0)
            {
                ledgerJournalTrans.AmountCurDebit = _amtCurDebit;
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                this.initVatRegData_PL(ledgerJournalTrans, custTable);
            }

            if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
            {
                ledgerJournalTrans.modifyVatDueDate_W();
            }

            ledgerJournalTrans.initValue();
            ledgerJournalTrans.defaultRow();

            try
            {
                ledgerJournalTrans.insert();
            }
            catch
            {
                throw error("@MCR39759");
            }

            this.createLedgerJournalTransRCash(ledgerJournalTrans);
        }
        else
        {
            throw error("@MCR39760");
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTransRCash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method creates <c>ledgerJournalTrans_RCash</c> record and initializes RCash voucher.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record.
    /// </param>
    private void createLedgerJournalTransRCash(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans_RCash ledgerJournalTrans_RCash;
        RCashTrans               rCashTrans;
        RCashVoucher             rCashVoucher;

        ledgerJournalTrans_RCash.RefRecId    = _ledgerJournalTrans.RecId;
        ledgerJournalTrans_RCash.TransStatus = RCashTransStatus::Approved;

        if (_ledgerJournalTrans.AmountCurDebit > 0)
        {
            ledgerJournalTrans_RCash.DocType = RCashDocType::ReimbursementSlip;
        }
        else
        {
            ledgerJournalTrans_RCash.DocType = RCashDocType::DisbursementSlip;
        }

        ledgerJournalTrans_RCash.insert();

        rCashVoucher = new RCashVoucher(_ledgerJournalTrans, ledgerJournalTrans_RCash);
        rCashTrans   = rCashVoucher.createOrUpdateTrans(RCashTransStatus::Approved);

        ledgerJournalTrans_RCash.selectForUpdate(true);
        ledgerJournalTrans_RCash.CashDocId = rCashTrans.DocId;
        ledgerJournalTrans_RCash.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>MCRLedgerJournal_RCash</c> class.
    /// </summary>
    /// <param name="_ledgerJournalType">
    /// The type of journal to be used in the instantiation of this class.
    /// </param>
    /// <param name="_journalName">
    /// The name of the journal to be used in the instantiation of this
    /// class; optional.
    /// </param>
    /// <param name="_detailSummaryPosting">
    /// An enumeration denoting what level of detail to include in the
    /// ledger journal; optional.
    /// </param>
    public void new(LedgerJournalType _ledgerJournalType,
                    LedgerJournalId _journalName = "",
                    DetailSummary _detailSummaryPosting = DetailSummary::Detail)
    {
        if (_ledgerJournalType != LedgerJournalType::RCash)
        {
            throw error (strFmt("@MCR35774", funcName(),
                enum2str(LedgerJournalType::RCash)));
        }
        super(_ledgerJournalType, _journalName, _detailSummaryPosting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInputLedgerJourTrans</Name>
				<Source><![CDATA[
    protected boolean validateInputLedgerJourTrans(AmountCur _amtCurCredit,
                                                   AmountCur _amtCurDebit)
    {
        boolean ret;

        ret = super(_amtCurCredit, _amtCurDebit);

        if (ret)
        {
            if (accountNum == ""
                && ledgerOffsetAccount == 0)
            {
                throw error(strFmt("@MCR36388", LedgerJournalType::RCash));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVatRegData_PL</Name>
				<Source><![CDATA[
    private void initVatRegData_PL(LedgerJournalTrans _ledgerJournalTrans, CustTable _custTable)
    {
        _ledgerJournalTrans.TaxPeriodPaymentCode_PL = _custTable.TaxPeriodPaymentCode_PL;

        if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(_ledgerJournalTrans.ledgerJournalTable().JournalType))
        {
            _custTable.copyPrimaryRegistrationNumberToVATMap(_ledgerJournalTrans, _ledgerJournalTrans.TransDate);
        }
        else
        {
            _ledgerJournalTrans.VatNumJournal = _custTable.CustVendTable::getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _ledgerJournalTrans.TransDate);
        }

        _ledgerJournalTrans.Addressing_PL = DirParty::getAddress(_custTable.Party);
        _ledgerJournalTrans.CustVendName_PL = _custTable.name();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>