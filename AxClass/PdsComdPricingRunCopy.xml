<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsComdPricingRunCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles the copying of a PdsPricingMarginrecord.
/// </summary>
class PdsComdPricingRunCopy extends RunBase
{
    PdsComdPricingRunId     copyFromRunId;

    PdsComdPricingRun       pdsComdPricingRun;

    #define.CurrentVersion(1)
    #LocalMacro.CurrentList
        copyFromRunId
    #EndMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard RunBaseBatch method to get the dialog box.
    /// </summary>
    /// <returns>
    /// Dialog to interact with the user.
    /// </returns>
    /// <remarks>
    /// This creates a dialog from the PdsPricingRunCopy form.
    /// <syntax>
    /// public Object dialog()
    /// </syntax>
    /// </remarks>
    public Object dialog()
    {
        return this.dialogInternal(Dialog::newFormnameRunbase(formstr(PdsComdPricingRunCopy),this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the standard new method to protect it.
    /// </summary>
    /// <remarks>
    /// Best practice requirement.
    /// <syntax>
    /// protected void new()
    /// </syntax>
    /// </remarks>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard pack method to save the important properties of this class.
    /// </summary>
    /// <returns>
    /// container holding the packed properties
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public Container pack()
    /// </syntax>
    /// </remarks>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyFromRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the copyFromRunId  parameter.
    /// </summary>
    /// <param name="_copyFromRunId">Value to be set.</param>
    /// <returns>CompyFromRunId parameter.</returns>
    /// <remarks>
    /// <syntax>
    /// public PdsComdPricingRunId parmCopyFromRunId(PdsComdPricingRunId _copyFromRunId)
    /// </syntax>
    /// </remarks>
    public PdsComdPricingRunId parmCopyFromRunId(
        PdsComdPricingRunId _copyFromRunId = copyFromRunId)
    {
        copyFromRunId = _copyFromRunId;
        return copyFromRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsComdPricingRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the pdsComdPricingRun parameter.
    /// </summary>
    /// <param name="_run">Value to be set.</param>
    /// <returns>
    /// The pdsComdPricingRun parameter.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public Record parmPdsComdPricingRun(Record _run)
    /// </syntax>
    /// </remarks>
    public PdsComdPricingRun parmPdsComdPricingRun(
        PdsComdPricingRun _run = pdsComdPricingRun)
    {
        pdsComdPricingRun = _run;
        return pdsComdPricingRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard RunBaseBatch method to execute the job.
    /// </summary>
    /// <remarks>
    /// This will initialize the progress indicator and internal object variables
    /// needed by the other operational methods of the class. Locates a previous
    /// PdsMarginTable record if there is a previous run on the given pricing run
    /// record. Then a new PdsPricingMargin record is created or existing one
    /// retrieve. Finally the main loop retrieves the items selected by the user
    /// (the query is modified to ensure only valid items are returned) and 'exlodes'
    /// all the template lines to generate the new pricing margin.
    /// <syntax>
    /// public void run()
    /// </syntax>
    /// </remarks>
    public void run()
    {
        #AviFiles
        SysOperationProgress        prog;

        if (pdsComdPricingRun.RecId && copyFromRunId)
        {
            prog = SysOperationProgress::newGeneral(#AviFileCopy,
                strfmt("@PDS394", copyFromRunId), 0);

            PdsComdPricingRunLine::copyRun(pdsComdPricingRun.PricingRunId,
                copyFromRunId, prog);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard unpack method to restore the important properties of this class.
    /// </summary>
    /// <param name="_packedClass">
    /// container holding the packed properties
    /// </param>
    /// <returns>
    /// true if the properties could be restored successfully; false otherwise.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public Enum unpack(Container _packedClass)
    /// </syntax>
    /// </remarks>
    public boolean unpack(container _packedClass)
    {
        Integer         version = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard constructor pattern to create a new instance of PdsPricingMarginUpdate.
    /// </summary>
    /// <returns>
    /// New instance of PdsPricingMarginUpdate
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public static PdsPricingMarginUpdate construct()
    /// </syntax>
    /// </remarks>
    public static PdsComdPricingRunCopy construct()
    {
        return new PdsComdPricingRunCopy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provide the description for this job class.
    /// </summary>
    /// <returns>
    /// Description for this job class.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public static ClassDescription description()
    /// </syntax>
    /// </remarks>
    public static ClassDescription description()
    {
        return "@PDS480";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard entry point method for any RunBase class.
    /// </summary>
    /// <param name="_args">
    /// Run time arguments.
    /// </param>
    /// <exception cref="Exception::Error" label="@PDS531">PMF configuration key is disabled.</exception>
    /// <remarks>
    /// As this class only works with formula items and PMF module must be available to
    /// do the pricing calculation, this method will fail if PMF configuration is
    /// disabled.
    /// <syntax>
    /// public static void main(Args _args)
    /// </syntax>
    /// </remarks>
    public static void main(Args _args)
    {
        PdsComdPricingRunCopy      copyRun;
        PdsComdPricingRun          copyOfPricingRun;

        if (!_args || _args.dataset() != tablenum(PdsComdPricingRun))
        {
            throw error(strfmt("@PDS421", classstr(PdsComdPricingRunCopy),
                tablestr(PdsComdPricingTemplate)));
        }

        copyRun = PdsComdPricingRunCopy::construct();

        // Use a copy so the user cannot accidentally change this (non-modal dialog)
        copyOfPricingRun.data(_args.record());
        copyRun.parmPdsComdPricingRun(copyOfPricingRun);

        if (copyRun.prompt())
        {
            copyRun.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>