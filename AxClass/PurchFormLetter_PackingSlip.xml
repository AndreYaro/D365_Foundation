<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormLetter_PackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysOperationJournaledParametersAttribute(true)]
class       PurchFormLetter_PackingSlip
extends     PurchFormLetter implements BatchRetryable
{
    VendPackingSlipJour vendPackingSlipJour;
    private PurchInstrumentationLogger  instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>afterOperationBody</Name>
				<Source><![CDATA[
    protected void afterOperationBody()
    {
        super();

        if (!this.purchParmUpdate().Proforma  && !this.isInBatch())
        {
            this.runShipCarrier();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeOperation</Name>
				<Source><![CDATA[
    protected void beforeOperation(SysOperationExecutionMode _executionMode)
    {
        InventQualityManagementCreateHandler::createPurchaseProductReceiptBeforeParms(this.parmId(), this.documentStatus());

        super(_executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return PurchFormLetter_PackingSlip::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFormLetterId</Name>
				<Source><![CDATA[
    boolean  checkFormLetterId()
    {
        boolean         ok = true;
        PurchParmUpdate purchParmUpdate = this.purchParmUpdate();

        if (! this.isPurchaseOrderUpdateProforma())
        {
            ok = PurchSummary::checkFormletterIdServer(purchParmUpdate.SumBy,
                                                       purchParmUpdate.ParmId,
                                                       purchParmUpdate.SumPurchId,
                                                       this.documentStatus(),
                                                       this.parmNumber(),
                                                       this.missingNumber());
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchaseOrderUpdateProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether purchase order posting is proforma.
    /// </summary>
    /// <returns>true if purchase order posting is Pro forma; otherwise, false.</returns>
    protected boolean isPurchaseOrderUpdateProforma()
    {
        return this.purchParmUpdate().Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchLineChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified <c>VendDocumentLineMap</c> record.
    /// </summary>
    /// <param name="_parmLine">
    /// The <c>VendDocumentLineMap</c> record to verify.
    /// </param>
    /// <param name="_purchLine">
    /// The source <c>PurchLine</c> table for the <c>VendDocumentLineMap</c> record.
    /// </param>
    /// <param name="_checkQtys">
    /// Determines if the remaining quantities should be validated; optional.
    /// </param>
    /// <returns>
    /// true if the <c>VendDocumentLineMap</c> record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// An Infolog message can be shown if a correction is being made for a line with active tracking
    /// dimensions, but no specific dimension is specified.
    /// </remarks>
    protected boolean checkPurchLineChanged(VendDocumentLineMap _parmLine, PurchLine _purchLine, boolean _checkQtys = true)
    {
        boolean ret;
        InventDimGroupSetup inventDimGroupSetup;
        ListEnumerator le;
        boolean isCorrection = this.isVersioningCorrectionOrCancel();

        ret = super(_parmLine, _purchLine, _checkQtys);

        // If tracking dimensions are used but not specified then issue infolog
        if (ret
            && isCorrection
            && _purchLine.isStocked()
            && _parmLine.InventDimId == _purchLine.InventDimId)
        {
            inventDimGroupSetup = InventDimGroupSetup::newItemId(_parmLine.ItemId);
            le = InventDim::dimTrackingDimFieldList().getEnumerator();
            while (le.moveNext())
            {
                if (inventDimGroupSetup.isDimensionActive(le.current()))
                {
                    // Only show info, do not fail.
                    info("@SYS324400");
                    break;
                }
            }
        }

        // Validate the length of purchase order line names are valid.
        if (ret
            && this.needValidateLineName_PL())
        {
            ret = this.validateLineName_PL(_parmLine);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchLineReject</Name>
				<Source><![CDATA[
    protected boolean checkPurchLineReject()
    {
        PurchParmLine           purchParmLineLocal;
        PurchCORRejectsTable    purchCORRejectsTableLocal;

        boolean         ok = true;

        while select ParmId, InventTransId, ItemId from purchParmLineLocal
            where purchParmLineLocal.ParmId == this.purchParmUpdate().ParmId
            join InventTransId, RejectStatus, PurchId from purchCORRejectsTableLocal
                where purchParmLineLocal.InventTransId == purchCORRejectsTableLocal.InventTransId &&
                      purchCORRejectsTableLocal.RejectStatus == PurchCORRejectStatus::Rejected
        {
            error(strFmt("@SYS303267", purchParmLineLocal.ItemId, purchCORRejectsTableLocal.PurchId));
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRefreshCallerDataSource</Name>
				<Source><![CDATA[
    public boolean doRefreshCallerDataSource()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && this.parmVersioningUpdateType() != VersioningUpdateType::Initial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProjectPostings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes postings for project related item requirements based on project item auto-consumption setup parameters
    /// </summary>
    protected void runProjectPostings()
    {
        SalesFormLetter         salesFormLetter;
        VendPackingSlipVersion  localVendPackingSlipVersion;
        VendPackingSlipJour     localVendPackingSlipJour;
        VendPackingSlipTrans    localVendPackingSlipTrans;
        PurchLine               localPurchLine;
        SalesLine               localSalesLine;

        if (this.mustRunProjectPostings())
        {
            boolean projCancelItemReqPackingSlipFeatureEnabled = FeatureStateProvider::isFeatureEnabled(ProjCancelItemReqPackingSlipFeature::instance());

            if (projCancelItemReqPackingSlipFeatureEnabled)
            {
                boolean projCancelPOReceiptWithItemRequirementFeatureEnabled = FeatureStateProvider::isFeatureEnabled(ProjCancelPOReceiptWithItemRequirementFeature::instance());
                
                // With PO Prod receipt cancellation feature on check for additional condition on qty to avoid item req consumption
                // Qty = 0 on the journal when product receipt is being cancelled

                select firstonly RecId, AccountingDate from localVendPackingSlipVersion
                where localVendPackingSlipVersion.ParmId == this.parmId()
                exists join localVendPackingSlipJour
                    where localVendPackingSlipVersion.VendPackingSlipJour == localVendPackingSlipJour.RecId
                    exists join localVendPackingSlipTrans
                        where localVendPackingSlipTrans.VendPackingSlipJour == localVendPackingSlipJour.RecId
                              && (!projCancelPOReceiptWithItemRequirementFeatureEnabled || localVendPackingSlipTrans.Qty != 0)
                        exists join localPurchLine
                            where localPurchLine.InventTransId == localVendPackingSlipTrans.InventTransId &&
                                 !localPurchLine.IsDeleted &&
                                  localPurchLine.ItemRefType == InventRefType::Sales &&
                                  localPurchLine.InventRefId &&
                                  localPurchLine.InventRefTransId
                            exists join localSalesLine
                                where localSalesLine.InventTransId == localPurchLine.InventRefTransId &&
                                  localSalesLine.ProjId &&
                                  localSalesLine.SalesType == SalesType::ItemReq &&
                                  (localSalesLine.SalesStatus == SalesStatus::None
                                    || localSalesLine.SalesStatus == SalesStatus::Backorder);
            }
            else
            {
                select firstonly RecId, AccountingDate from localVendPackingSlipVersion
                where localVendPackingSlipVersion.ParmId == this.parmId()
                exists join localVendPackingSlipJour
                    where localVendPackingSlipVersion.VendPackingSlipJour == localVendPackingSlipJour.RecId
                    exists join localVendPackingSlipTrans
                        where localVendPackingSlipTrans.VendPackingSlipJour == localVendPackingSlipJour.RecId
                        exists join localPurchLine
                            where localPurchLine.InventTransId == localVendPackingSlipTrans.InventTransId &&
                                 !localPurchLine.IsDeleted &&
                                  localPurchLine.ItemRefType == InventRefType::Sales &&
                                  localPurchLine.InventRefId &&
                                  localPurchLine.InventRefTransId
                            exists join localSalesLine
                                where localSalesLine.InventTransId == localPurchLine.InventRefTransId &&
                                  localSalesLine.ProjId &&
                                  localSalesLine.SalesType == SalesType::ItemReq &&
                                  (localSalesLine.SalesStatus == SalesStatus::None
                                    || localSalesLine.SalesStatus == SalesStatus::Backorder
                                    || (localSalesLine.SalesStatus == SalesStatus::Delivered
                                            && localSalesLine.RemainInventPhysical != 0));
            }

            if (localVendPackingSlipVersion.RecId)
            {
                boolean callCenterDropShipment = isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)) &&
                                                        this.purchTable().MCRDropShipment;
                if (ProjParameters::find().AutomaticItemConsumption == NoYes::Yes)
                {
                    salesFormLetter = SalesFormLetter::newFromPurchFormLetter_PackingSlip(SysOperationHelper::base64Encode(formletterOutputContract.parmJournalLinesPacked()),
                        DocumentStatus::ProjectPackingSlip);
                    if (localVendPackingSlipVersion.AccountingDate)
                    {
                        salesFormLetter.transDate(localVendPackingSlipVersion.AccountingDate);
                    }

                    salesFormLetter.prePromptInit();
                    salesFormLetter.runOperation();
                }
                else if (!callCenterDropShipment)
                {
                    if (this.mustConsumeItemsImmediately())
                    {
                        salesFormLetter = SalesFormLetter::newFromPurchFormLetter_PackingSlip(SysOperationHelper::base64Encode(formletterOutputContract.parmJournalLinesPacked()),
                            DocumentStatus::ProjectPackingSlip);
                        if (localVendPackingSlipVersion.AccountingDate)
                        {
                            salesFormLetter.transDate(localVendPackingSlipVersion.AccountingDate);
                        }

                        salesFormLetter.prePromptInit();
                        salesFormLetter.startOperation();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConsumeItemsImmediately</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if items must be consumed immediately.
    /// </summary>
    /// <returns>true if items must be consumed immediately; otherwise, false.</returns>
    [Replaceable]
    protected boolean mustConsumeItemsImmediately()
    {
        return Box::yesNo("@SYS70024", DialogButton::Yes) == DialogButton::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRunProjectPostings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the postings for project related item requirements must be executed.
    /// </summary>
    /// <returns>
    /// true if the postings for project related item requirements must be executed; otherwise, false.
    /// </returns>
    protected boolean mustRunProjectPostings()
    {
        return !this.purchParmUpdate().Proforma && !this.interCompanyNoSalesFormletterUpdate() && !this.isInBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceptListDeviationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the deviation type for a receipt list.
    /// </summary>
    /// <returns>
    /// A <c>ReceiptListDeviationType_RU</c> enumeration value.
    /// </returns>
    public ReceiptListDeviationType_RU getReceptListDeviationType()
    {
        VendPackingSlipJour vendPackingSlipJourLocal;

        if (this.parmVersioningUpdateType() == VersioningUpdateType::Correction &&
            this.parmCallerTable() is VendPackingSlipJour)
        {
            vendPackingSlipJourLocal = this.parmCallerTable();
            return vendPackingSlipJourLocal.ReceiptListDeviationType_RU;
        }

        return ReceiptListDeviationType_RU::ReceiptListForMaterialsM7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>missingNumber</Name>
				<Source><![CDATA[
    str  missingNumber()
    {
        return "@SYS23050";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckIntrastat</Name>
				<Source><![CDATA[
    protected boolean mustCheckIntrastat()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(
        IdentifierName _className = classStr(FormletterService),
        IdentifierName _methodName= methodStr(FormletterService, postPurchaseOrderPackingSlip),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
        instrumentationLogger = PurchInstrumentationLogger::createLogger(classStr(PurchFormLetter_PackingSlip));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a record sorted list.
    /// </summary>
    /// <returns>
    /// A record sorted list.
    /// </returns>
    public RecordSortedList newJournalTransList()
    {
        RecordSortedList journalTransList;

        journalTransList = new RecordSortedList(tableNum(VendPackingSlipTrans));
        journalTransList.sortOrder(fieldNum(VendPackingSlipTrans, RecId));
        return journalTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    public boolean parmShowDialog(boolean _showDialog = showDialog)
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && prmisDefault(_showDialog))
        {
            return super(_showDialog);
        }
        // </GEERU>
        if (prmisDefault(_showDialog) && this.parmVersioningUpdateType() == VersioningUpdateType::Cancel)
        {
            return false;
        }

        return super(_showDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the print management document type.
    /// </summary>
    /// <returns>
    ///    The print management document type for a purchase packing slip.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::PurchaseOrderPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runShipCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes sales ShipCarrier functionality that will require user interaction.
    /// </summary>
    public void runShipCarrier()
    {
        vendPackingSlipJour         vendPackingSlipJourLocal;
        CustPackingSlipJour         custPackingSlipJour;
        TradePackingSlipJourChain   tradePackingSlipJourChain;

        super();

        if (Global::isConfigurationkeyEnabled(configurationKeyNum(ShipCarrier)))
        {
            List journalsList = List::create(formletterOutputContract.parmAllJournalsPacked());
            ListEnumerator journalsListEnumerator = journalsList.getEnumerator();

            while (journalsListEnumerator.moveNext())
            {
                vendPackingSlipJourLocal = journalsListEnumerator.current();

                if (vendPackingSlipJourLocal && vendPackingSlipJourLocal.purchTable().isDropShipment())
                {
                    select firstonly custPackingSlipJour
                        exists join RecId from tradePackingSlipJourChain
                            where tradePackingSlipJourChain.CustPackingSlipJour == custPackingSlipJour.RecId
                                && tradePackingSlipJourChain.VendPackingSlipJour == vendPackingSlipJourLocal.RecId;

                    if (custPackingSlipJour && ShipCarrierTable::isCarrierInterfaceInTestMode(custPackingSlipJour.ShipCarrierId))
                    {
                        // This method contains a dialog.
                        ShipCarrierPackage::testMode(custPackingSlipJour);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean  unpack(container  _packedClass)
    {
        Integer     version = conPeek(_packedClass,1);

        NoYes       remain;

        ParmId          parmId;
        PurchParmUpdate purchParmUpdate;
        NoYes           queryCriteria;
        NoYes           editing;
        Printout        printout;
        NoYes           printFormletter;
        container       printersettingsFormletter;
        container       printersettingsFormletterCopy;
        boolean         usePrintManagement;
        boolean         printSalesFormletter;

        #LOCALMACRO.ParmList_v25sp2
            ParmId,
            purchParmUpdate.SpecQty,
            Remain,
            purchParmUpdate.CreditRemaining,
            QueryCriteria,
            Editing,
            Printout,
            printFormletter,
            printersettingsFormletter
        #ENDMACRO

        #LOCALMACRO.ParmList_v30
            parmId,
            purchParmUpdate,
            queryCriteria,
            editing,
            printout,
            printFormletter,
            printersettingsFormletter
        #ENDMACRO

        #LOCALMACRO.ParmList_v401
            parmId,
            purchParmUpdate,
            queryCriteria,
            editing,
            printout,
            printFormletter,
            printersettingsFormletter,
            printSalesFormletter,
            printersettingsFormletterCopy
        #ENDMACRO

        #localMacro.parmList_v5
            parmId,
            purchParmUpdate,
            queryCriteria,
            editing,
            printout,
            printFormletter,
            printersettingsFormletter,
            printSalesFormletter,
            printersettingsFormletterCopy,
            usePrintManagement
        #endMacro

        // <GIN>

        #LOCALMACRO.ParmList_v7
            parmId,
            purchParmUpdate,
            queryCriteria,
            editing,
            printout,
            printFormletter,
            printersettingsFormletter,
            printSalesFormletter,
            printersettingsFormletterCopy,
            usePrintManagement
        #ENDMACRO

        #LOCALMACRO.ParmList_v8
            parmId,
            purchParmUpdate,
            queryCriteria,
            editing,
            printout,
            printFormletter,
            printersettingsFormletter,
            printSalesFormletter,
            printersettingsFormletterCopy,
            usePrintManagement,
            printGoodsReceiptNote
        #ENDMACRO
        // </GIN>
        // <GEERU>
        #LOCALMACRO.ParmList_v9
            parmId,
            purchParmUpdate,
            queryCriteria,
            editing,
            printout,
            printFormletter,
            printersettingsFormletter,
            printSalesFormletter,
            printersettingsFormletterCopy,
            usePrintManagement
        #ENDMACRO
        // </GEERU>

        switch (version)
        {
            case 7+1 /*case is old current version + old parent version*/ :
                [version, #parmList_v5] = _packedClass;
                this.setNewContract(PurchFormLetterPurchOrderContract::construct());

                contractIsFromPreviousVersion = true;
                this.parmId(parmId);
                this.purchParmUpdate(purchParmUpdate);
                this.printout(printout);
                this.printFormLetter(printFormletter);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletter, PrintSetupOriginalCopy::Original);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletterCopy, PrintSetupOriginalCopy::Copy);
                this.usePrintManagement(usePrintManagement);
                this.printSalesFormLetter(printSalesFormletter);
                break;
            // <GEERU>
            case 9 + #ParentVersion                 :   [version, #ParmList_v9, #ParmListCommonCS] = _packedClass;
                                                        break;
            // </GEERU>
            // <GIN>
            case 8 + #ParentVersion                 :   [version, #ParmList_v8, #ParmListCommonCS] = _packedClass;
                                                        break;
            // </GIN>
            // <GEERU><GIN>
            case 7 + #ParentVersion                 :   [version, #ParmList_v7, #ParmListCommonCS] = _packedClass;
                                                        break;
             // </GIN></GEERU>

            case 6                  :   [version, #ParmList_v401]               = _packedClass;
                                        break;

            case 5                  :   [version, #ParmList_v30]                = _packedClass;
                                        printersettingsFormletterCopy           = printersettingsFormletter;
                                        break;

            case 4                  :   [version, #ParmList_v25sp2]             = _packedClass;
                                        break;

            default : return super(_packedClass);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if whether it can continue.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called. The default value is null.
    /// </param>
    /// <returns>
    /// true if the ok to continue; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The validate method is used for validating if it can close the purchase posting form when you post
    /// purchase orders.
    /// </remarks>
    boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (ret)
        {
            ret = this.checkPurchLineReject();
        }

        if (ret)
        {
            ret = this.validateBankLC();
        }

        if (ret)
        {
            ret = this.checkInventQtyCorrection();
        }

        if (ret && BrazilParameters::isEnabled())
        {
            ret = this.validate_BR();
        }

        if (ret &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            ret = this.validateFiscalCalendar();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_BR</Name>
				<Source><![CDATA[
    private boolean validate_BR()
    {
        boolean                 ret = true;
        PurchParmTable          purchParmTable;

        while select purchParmTable
              where purchParmTable.ParmId == this.parmId()
        {
            setPrefix(strFmt("@SYS27357", purchParmTable.PurchId));

            if (conLen(purchParmTable.getFiscalEstablishment_BR()) > 1)
            {
                ret = checkFailed("@SYS4000651");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankLC</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the letter of credit required information is attached with the packing slip.
    /// </summary>
    /// <returns>
    ///    true if the validation was successful; otherwise, false.
    /// </returns>
    private boolean validateBankLC()
    {
        boolean ret = true;

        if (BankLCImportFeatureChecker::checkBankLCImportEnabled()
            && !this.proforma()
            && !this.isVersioningCorrectionOrCancel())
        {
            ret = BankLCImportType::validatePackingslips(this.purchParmUpdate().ParmId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalCalendar</Name>
				<Source><![CDATA[
    private boolean validateFiscalCalendar()
    {
        PurchParmTable      purchParmTableLocal = PurchParmTable::findPurchId(this.purchTable().PurchId, this.purchParmUpdate().ParmId);

        return LedgerFiscalCalendar::checkDateIsValid(Ledger::fiscalCalendar(CompanyInfo::current()), purchParmTableLocal.TransDate ? purchParmTableLocal.TransDate : this.transDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNum</Name>
				<Source><![CDATA[
    boolean validateNum(VendDocumentTableMap _purchParmTable = null)
    {
        boolean ret;

        ret = super(_purchParmTable);

        if (_purchParmTable.Num)
        {
            if (PurchParameters::find().CheckPackingSlip != ReuseVoucher::AcceptDuplicate)
            {
                _purchParmTable.vendTable_OrderAccount().checkPackingSlip(_purchParmTable.Num, _purchParmTable.documentDate());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription  description()
    {
        return "@SYS338940";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPackingSlip</Name>
				<Source><![CDATA[
    static public PurchFormLetter_PackingSlip newPackingSlip(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postPurchaseOrderPackingSlip),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        PurchFormLetter_PackingSlip formletter = new PurchFormLetter_PackingSlip(_className, _methodName, _executionMode);
        formletter.init();
        return formletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPackingSlipFromChooseLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initialize a <c>PurchFormLetter</c> instance.
    /// </summary>
    /// <param name="_chooseLinesQuery">
    /// A query for choosing line records.
    /// </param>
    /// <param name="_purchTable">
    /// A <c>PurchTable</c> record.
    /// </param>
    /// <param name="_transDate">
    /// The date used for transaction posting. Defaults to the date of the system.
    /// </param>
    /// <returns>
    /// An instance of <c>PurchFormLetter</c> class.
    /// </returns>
    public static PurchFormLetter newPackingSlipFromChooseLineQuery(
        SysQueryRun _chooseLinesQuery,
        PurchTable _purchTable,
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PurchFormLetter         purchFormLetter;

        purchFormLetter = PurchFormLetter::construct(DocumentStatus::PackingSlip);

        purchFormLetter.chooseLinesQuery        (_chooseLinesQuery);
        purchFormLetter.purchTable              (_purchTable);
        purchFormLetter.transDate               (_transDate);
        purchFormLetter.specQty                 (PurchUpdate::ReceiveNow);
        purchFormLetter.printFormLetter         (NoYes::No);

        purchFormLetter.chooseLines();
        purchFormLetter.setForUpdatePurchParmTable();

        return purchFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventQtyCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if PurchQty is not changed, but InventQty is changed.
    /// </summary>
    /// <returns>
    ///     true if PurchQty is not changed, but InventQty is changed; otherwise, false.
    /// </returns>
    protected boolean checkInventQtyCorrection()
    {
        PurchParmLine   purchParmLineLocal;
        PurchLine       purchLineLocal;
        PurchParmUpdate purchParmUpdate = this.purchParmUpdate();
        boolean         ok = true;

        if (this.parmVersioningUpdateType() == VersioningUpdateType::Correction)
        {
            while select LineNum, PreviousReceiveNow, ReceiveNow, PreviousInventNow, InventNow
                from purchParmLineLocal
                where purchParmLineLocal.ParmId == purchParmUpdate.ParmId
                outer join PurchId from purchLineLocal
                where purchLineLocal.InventTransId == purchParmLineLocal.InventTransId
                      && !purchLineLocal.IsDeleted
            {
                if (purchParmLineLocal.purchQtyCorrection() == 0 && purchParmLineLocal.inventQtyCorrection() != 0)
                {
                    setPrefix(strFmt("%1: %2","@SYS25545", purchLineLocal.PurchId));
                    ok = checkFailed(strFmt("@SYP4881856", purchParmLineLocal.LineNum));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return this.checkRunInNewSession() && !this.purchTable().InterCompanyOriginalSalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRemainUpdates</Name>
				<Source><![CDATA[
    protected void runRemainUpdates()
    {
        super();

        this.runProjectPostings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
         super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean errorMessageHelpScopeShowLink()
    {
        if (PurchFormLetterErrorMessageHelpScopePackingSlipFlight::instance().isEnabled())
        {
            return super();
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>