<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalSave</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalSave</c> class creates a new copy of a journal.
/// </summary>
public class LedgerJournalSave extends RunBase
{
    // The following fields can be directly  persisted to a container as they are primitive data types.
    LedgerJournalNameId         ledgerJournalName;
    LedgerJournalId             ledgerJournalId;
    LedgerJournalNameId         toLedgerJournalName;
    LedgerJournalId             toLedgerJournalId;
    Name                        toName;

    // The following fields cannot be directly persisted to a container as they are object type.
    LedgerJournalPeriodicCopy   journalSave;

    DialogField                 dialogToJournalNum;
    DialogField                 dialogToJournalName;
    DialogField                 dialogToName;

    // <GEEU>
    NoYes               splitTrans;
    TransDate           dateFrom;
    PeriodUnit          periodIntervalUnit;
    Periods             periodQty,
                        periodIntervalQty;

    DialogField         dialogSplitTrans;
    DialogField         dialogPeriodQty;
    DialogField         dialogPeriodIntervalQty;
    DialogField         dialogPeriodIntervalUnit;
    DialogField         dialogDateFrom;

    boolean             isPeriodic;
    LedgerJournalTrans  ledgerJournalTrans;
    List markedTransactionsRecIdList = new List(Types::Int64);

    #EECountryRegionCodes
    // </GEEU>

    // This list defines which fields will be persisted and restored via the system's
    // SysLastValue functionality.
    const int SysLastValuesCurrentVersion = 100;
    #LOCALMACRO.SysLastValuesList
        LedgerJournalName,
        LedgerJournalId
    #ENDMACRO

    // This list defines how the object is serialized and unserialized as it is sent across the wire. This
    // list should contain all non-object types defined on this class declaration.
    // <GEEU>
    const int CurrentVersion = 3;
    // </GEEU>
    #LOCALMACRO.CurrentList
        ledgerJournalName,
        ledgerJournalId,
        toLedgerJournalName,
        toLedgerJournalId,
        // <GEEU>
        toName,
        isPeriodic,
        splitTrans,
        dateFrom,
        periodIntervalUnit,
        periodQty,
        periodIntervalQty
        // </GEEU>
    #ENDMACRO

    const int Version1 = 1;
    #LOCALMACRO.CurrentListV1
        LedgerJournalName,
        LedgerJournalId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMenuItem</Name>
				<Source><![CDATA[
    void addMenuItem(DialogRunbase dialog)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description from the current class by calling the static description method on the
    /// class if there is one.
    /// </summary>
    /// <returns>
    /// The description from the current class.
    /// </returns>
    /// <remarks>
    /// This method can be overridden to give a more precise description, for example, when you need some
    /// internal variables to build the description text.
    /// </remarks>
    public ClassDescription caption()
    {
        return isPeriodic ? "@GLS109645" : "@SYS28517";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        DialogGroup     existingJournal;
        DialogGroup     newJournal;

        // <GEEU>
        DialogGroup     dialogGroup;
        boolean         countryRegion_EU = SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU);

        #ISOCountryRegionCodes
        // </GEEU>

        // <GEEU>
        isPeriodic = LedgerJournalName::find(ledgerJournalName).JournalType == LedgerJournalType::Periodic;
        // </GEEU>

        // <GEEU>
        if (!countryRegion_EU || !isPeriodic)
        {
        // </GEEU>
            existingJournal = dialog.addGroup('');
            existingJournal.columns(1);
            existingJournal.frameType(1);
            dialog.addGroup("@SYS28527", existingJournal);

            dialogToJournalNum = dialog.addField(this.dialogToJournalNumType());

            newJournal = dialog.addGroup('');
            newJournal.columns(1);
            newJournal.frameType(1);

            dialog.addGroup("@SYS18287", newJournal);

            dialogToJournalName = dialog.addField(this.dialogToJournalNameType());
            dialogToName        = dialog.addFieldValue(extendedTypeStr(Name), toName);
            dialogToName.helpText("@SYS28524");

            this.addMenuItem(dialog);
        // <GEEU>
        }

        if (countryRegion_EU)
        {
            dialogGroup = dialog.addGroup("@GLS109645");
            dialogGroup.frameOptionButton(isPeriodic ? FormFrameOptionButton::None : FormFrameOptionButton::Hide);
            dialogGroup.optionValue(isPeriodic ? 1 : 0);
            dialogGroup.visible(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL]));

            if (!isPeriodic)
            {
                dialogSplitTrans = dialog.addField(extendedTypeStr(NoYesId), "@GLS110033", "@GLS110034");
            }

            dialogDateFrom   = dialog.addField(extendedTypeStr(TransDate), "@GLS109648", "@GLS221569");
            dialogPeriodQty  = dialog.addField(extendedTypeStr(PeriodsPositive_W), "@GLS109646", "@GLS111569");

            dialog.addGroup("@SYS23339", dialogGroup);

            dialogPeriodIntervalUnit = dialog.addField(enumStr(PeriodUnit), "@SYS11959", "@GLS221570");
            dialogPeriodIntervalQty  = dialog.addField(extendedTypeStr(PeriodsPositive_W), "@SYS23339", "@GLS111570");
        }
        // </GEEU>

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogToJournalNameType</Name>
				<Source><![CDATA[
    protected ExtendedDataTypeName dialogToJournalNameType()
    {
        return extendedTypeStr(LedgerJournalNameIdPeriodic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogToJournalNumType</Name>
				<Source><![CDATA[
    protected ExtendedDataTypeName dialogToJournalNumType()
    {
        return extendedTypeStr(LedgerJournalIdPeriodic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        // <GEEU>
        boolean ret = super();
        anytype anyTrue = true;
        boolean countryRegion_EU = SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU);
        // </GEEU>

        // <GEEU>
        if (!countryRegion_EU || !isPeriodic)
        {
        // </GEEU>
            toLedgerJournalId =  dialogToJournalNum.value();
            if (toLedgerJournalId)
            {
                if (LedgerJournalType::Periodic  != (LedgerJournalTable::find(toLedgerJournalId).JournalType))
                {
                    return checkFailed(strFmt("@SYS82331",toLedgerJournalId));
                }
                toLedgerJournalName = LedgerJournalTable::find(toLedgerJournalId).JournalName;
                if (! toLedgerJournalName)
                {
                    return checkFailed(strFmt("@SYS17145",toLedgerJournalId));
                }
            }
            else
            {
                toLedgerJournalName =  dialogToJournalName.value();
                if (!LedgerJournalName::exist(toLedgerJournalName))
                {
                    return checkFailed(strFmt("@SYS22462",toLedgerJournalName));
                }
            }
            toName = dialogToName.value();
        // <GEEU>
        }

        if (countryRegion_EU)
        {
            splitTrans = dialogSplitTrans ? dialogSplitTrans.value() : anyTrue;

            if (splitTrans)
            {
                periodQty          = dialogPeriodQty.value();
                periodIntervalQty  = dialogPeriodIntervalQty.value();
                dateFrom           = dialogDateFrom.value();
                periodIntervalUnit = dialogPeriodIntervalUnit.value();

                if (! dateFrom)
                {
                    ret = checkFailed("@GLS106323");
                }
                if (! periodQty)
                {
                    ret = checkFailed("@GLS110035");
                }
                if (! periodIntervalQty)
                {
                    ret = checkFailed("@GLS110036");
                }
            }

            return ret;
        }
        else
        {
        // </GEEU>
            return super();
        // <GEEU>
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>SysLastValue</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///    This is a customization of the standard <c>SysLastValues</c> functionality and is required to
    ///    support the split implementation of serializing (by using <c>pack</c> and <c>unpack</c>) and
    ///    persisting user input (<c>SysLastValue</c>).
    /// </remarks>
    public void getLast()
    {
        container packedValues;

        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        // super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        getLastCalled   = true;
        inGetSaveLast   = true;

        // Restore the pertinent values from the SysLastValue table.
        packedValues = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                               this.lastValueUserId(),
                                               this.lastValueType(),
                                               this.lastValueElementName(),
                                               this.lastValueDesignName());

        this.unpackSysLastValues(packedValues);

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList, markedTransactionsRecIdList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the object for the <c>SysLastValue</c> framework to support persisting user input.
    /// </summary>
    /// <returns>
    ///    A container storing the list of values specified by the <c>SysLastValuesList</c> macro.
    /// </returns>
    /// <remarks>
    ///    This methods brings support for inheritance to the <c>SysLastValue</c> implementation on this
    ///    class. Derivative classes should override this method and provide their own implementation with a
    ///    pack list.
    /// </remarks>
    public container packSysLastValues()
    {
        return [SysLastValuesCurrentVersion, #SysLastValuesList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalName</Name>
				<Source><![CDATA[
    LedgerJournalNameId parmJournalName(LedgerJournalNameId _ledgerJournalName = ledgerJournalName)
    {
        ledgerJournalName = _ledgerJournalName;

        return ledgerJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
    LedgerJournalId parmJournalNum(LedgerJournalId _ledgerJournalId = ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;

        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans_W</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans_W(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    Name parmName(Name _name = toName)
    {
        toName = _name;

        return toName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkedTransactionsRecIdList</Name>
				<Source><![CDATA[
    private List parmMarkedTransactionsRecIdList(List _markedTransactionsRecIdList)
    {
        markedTransactionsRecIdList = _markedTransactionsRecIdList;
        return markedTransactionsRecIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        // <GEEU>
        FormDataSource     ledgerJournalTransDs;
        LedgerJournalTrans ledgerJournalTransLocal;
        // </GEEU>

        if (!this.validate())
        {
            throw Exception::Error;
        }

        try
        {
            ttsbegin;

            journalSave = LedgerJournalPeriodicCopy::construct(toLedgerJournalName,
                                                        toLedgerJournalId,
                                                        CopyMove::Copy,
                                                        ledgerJournalName,
                                                        ledgerJournalId,
                                                        dateNull(),
                                                        dateNull(),
                                                        toName);

            // <GEEU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
            {
                journalSave.parmSplitInfo_W(splitTrans,
                                            periodQty,
                                            periodIntervalQty,
                                            dateFrom,
                                            periodIntervalUnit);

                if (isPeriodic) // for periodic journals - only splitting, no copying
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00012, funcName());
                    if (markedTransactionsRecIdList.elements() != 0)
                    {
                        ListEnumerator recIdEnumerator = markedTransactionsRecIdList.getEnumerator();
                        while (recIdEnumerator.moveNext())
                        {
                            var currentRecId = recIdEnumerator.current();
                            ledgerJournalTransLocal = LedgerJournalTrans::findRecId(currentRecId, true);
                            journalSave.splitLedgerJournaTrans_W(ledgerJournalTransLocal);
                        }
                    }
                    else if (ledgerJournalTrans)
                    {
                        ledgerJournalTransLocal = ledgerJournalTrans;
                        journalSave.splitLedgerJournaTrans_W(ledgerJournalTransLocal);
                    }
                }
                else
                {
                    journalSave.journalSave();
                }
            }
            else
            {
            // </GEEU>
                journalSave.journalSave();
            // <GEEU>
            }
            // </GEEU>

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the <c>SysLastValue</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///    This is a customization of the standard <c>SysLastValues</c> functionality and is required to
    ///    support the split implementation of serializing (via <c>pack</c> and <c>unpack</c>) and persisting
    ///    user input (<c>SysLastValue</c>).
    /// </remarks>
    public void saveLast()
    {
        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        //super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast   = true;

        // Persist the pertinent values to the SysLastValue table.
        xSysLastValue::putValue(this.packSysLastValues(),
                                this.lastValueDataAreaId(),
                                this.lastValueUserId(),
                                this.lastValueType(),
                                this.lastValueElementName(),
                                this.lastValueDesignName());

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current journal name.
    /// </summary>
    /// <returns>
    /// The journal name.
    /// </returns>
    LedgerJournalNameId toJournalName()
    {
        return toLedgerJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current journal batch number.
    /// </summary>
    /// <returns>
    /// The journal batch number.
    /// </returns>
    LedgerJournalId toJournalNum()
    {
        return toLedgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case CurrentVersion:
                container tempRecIds;
                [version, #CurrentList, tempRecIds] = packedClass;
                markedTransactionsRecIdList = List::create(tempRecIds);
                break;
            case Version1:
                [version, #CurrentListV1] = packedClass;

                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the object for <c>SysLastValue</c> framework to support persisting user input.
    /// </summary>
    /// <param name="_packedValues">
    ///    A packed instance of the <c>LedgerJournalSave</c> class.
    /// </param>
    /// <remarks>
    ///    This method brings support for inheritance to the <c>SysLastValue</c> implementation on this class.
    ///    Derivative classes should override this method and provide their own implementation with an unpack
    ///    list.
    /// </remarks>
    public void unpackSysLastValues(container _packedValues)
    {
        const int SysLastValuesForkedFromVersion = 1; // Defines what version of CurrentList that SysLastValuesList forked from.

        Version version = RunBase::getVersion(_packedValues);

        switch (version)
        {
            case SysLastValuesCurrentVersion:
                [version, #SysLastValuesList] = _packedValues;

                break;
            case SysLastValuesForkedFromVersion:
                // This pack list
                [version, #CurrentListV1] = _packedValues;

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS28517";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args  args)
    {
        LedgerJournalSave     ledgerJournalSave;

        switch (args.dataset())
        {
            case tableNum(LedgerJournalTable):
                ledgerJournalSave   = LedgerJournalSave::newLedgerJournalTable(args.record());
                break;

            case tableNum(LedgerJournalTrans):

                ledgerJournalSave   = LedgerJournalSave::newLedgerJournalTrans(args.record());
                if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
                {
                    MultiSelectionHelper helper = MultiSelectionHelper::createFromCaller(args.caller());
                    LedgerJournalTrans localLedgerJournalTrans = helper.getFirst();
                    if (localLedgerJournalTrans)
                    {
                        List localRecIds = new List(Types::Int64);
                        while (localLedgerJournalTrans)
                        {
                            localRecIds.addEnd(localLedgerJournalTrans.RecId);
                            localLedgerJournalTrans = helper.getNext();
                        }
                        ledgerJournalSave.parmMarkedTransactionsRecIdList(localRecIds);
                    }
                }

                break;

            default:
                throw error("@SYS18626");
        }

        if (ledgerJournalSave.prompt())
        {
            ledgerJournalSave.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTable</Name>
				<Source><![CDATA[
    static LedgerJournalSave newLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalSave ledgerJournalSave;

        ledgerJournalSave = new LedgerJournalSave();
        ledgerJournalSave.getLast();
        ledgerJournalSave.parmJournalName(_ledgerJournalTable.JournalName);
        ledgerJournalSave.parmJournalNum(_ledgerJournalTable.JournalNum);
        ledgerJournalSave.parmName(_ledgerJournalTable.Name);

        return ledgerJournalSave;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTrans</Name>
				<Source><![CDATA[
    static LedgerJournalSave newLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalSave ledgerJournalSave;

        ledgerJournalSave = new LedgerJournalSave();
        ledgerJournalSave.getLast();
        ledgerJournalSave.parmJournalName(_ledgerJournalTrans.ledgerJournalTable().JournalName);
        ledgerJournalSave.parmName(_ledgerJournalTrans.ledgerJournalTable().Name);
        ledgerJournalSave.parmJournalNum(_ledgerJournalTrans.JournalNum);

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
        {
            ledgerJournalSave.parmLedgerJournalTrans_W(_ledgerJournalTrans);
        }
        // </GEEU>

        return ledgerJournalSave;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>