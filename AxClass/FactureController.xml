<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FactureController</c> class is the helper class for the associated SRS Report.
/// </summary>
class FactureController extends SrsPrintMgmtController implements BatchRetryable
{
    PrintCopyOriginal       printCopyOriginal;
    FormLetterJournalPrint  factureJournalPrint;
    RecordSortedList        journalList;
    FactureJour_RU          factureJour;

    SalesFormLetter_FreeText    salesFormLetter;

    Common                  transTable;
    PrintMgmtNodeType       printMgmtNodeType;
    PrintMgmtDocumentType   printMgmtDocumentType;
    PrintMgmtHierarchyType  printMgmtHierarchyType;

    FactureContract         factureContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initPrintMgmtReportRun</Name>
				<Source><![CDATA[
        protected void initPrintMgmtReportRun()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(
            printMgmtHierarchyType,
            printMgmtNodeType,
            printMgmtDocumentType);

        printMgmtReportRun.parmReportRunController(this);

        if (factureJournalPrint)
        {
            printMgmtReportRun.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(factureJournalPrint.parmPrinterSettingsFormLetterCopy()));
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(factureJournalPrint.parmPrinterSettingsFormLetter()));
            printMgmtReportRun.parmForcePrintJobSettings(!factureJournalPrint.parmUsePrintManagement());
        }
        else if (salesFormLetter)
        {
            printMgmtReportRun.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Copy)));
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Original)));
            printMgmtReportRun.parmForcePrintJobSettings(!salesFormLetter.usePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            //forcePrintJobSettings is reversal to usePrintManagement
            printMgmtReportRun.parmForcePrintJobSettings(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads instances of the <c>PrintMgmtPrintSettingDetail</c> class that are used for printing the
    ///    report.
    /// </summary>
    /// <param name="_jourTable">
    ///    The journal table that is currently being printed.
    /// </param>
    /// <param name="_transTable">
    ///    The table to which print management information has been related.
    /// </param>
    /// <param name="_languageId">
    ///    The language ID that should be used to retrieve footer text.
    /// </param>
    /// <param name="_documentKeyValue">
    ///    A human readable value that uniquely identifies the document to be printed.
    /// </param>
    /// <remarks>
    ///    Start by calling the <c>loadPrintSettings</c> method to load print settings for the current
    ///    instance of the <c>FormLetterReport</c> class. Next, call the <c>moveNextPrintSetting</c> method to
    ///    iterate over the print settings that have been found. The <c>getCurrentPrintSetting</c> method will
    ///    then return the current instance of the <c>PrintMgmtPrintSettingDetail</c> class which can be used
    ///    to retrieve printer settings for the current copy of the report.
    /// </remarks>
    public void loadPrintSettings(Common _jourTable, Common _transTable, str _languageId, str _documentKeyValue = '')
    {
        boolean isValidReference(Common _referencedTableBuffer)
        {
            PrintMgmtNodeInstance nodeInstance = new PrintMgmtNodeInstance();

            nodeInstance.parmNodeDefinition(PrintMgmtNode::construct(printMgmtNodeType));
            nodeInstance.parmReferencedTableBuffer(_referencedTableBuffer);

            return nodeInstance.isValidReference();
        }

        void setSettingDetail(PrintMgmtDocInstanceType _type, SRSPrintDestinationSettings _defaultSettings)
        {
            PrintMgmtPrintSettingDetail printSettingDetail = new PrintMgmtPrintSettingDetail();

            PrintMgmtReportFormat       printMgmtReportFormat;

            printMgmtReportFormat = PrintMgmtReportFormat::findSystem(printMgmtDocumentType);

            printSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
            printSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);

            printSettingDetail.parmType(_type);

            printSettingDetail.parmInstanceName(enum2str(_type));

            // Since this will be reported to the screen, one copy is the only thing that makes sense
            printSettingDetail.parmNumberOfCopies(1);

            printSettingDetail.parmPrintJobSettings(_defaultSettings);

            printMgmtReportRun.loadSettingDetail(printSettingDetail, _documentKeyValue);
        }

        if (printCopyOriginal == PrintCopyOriginal::OriginalPrint && isValidReference(_transTable))
        {
            // Print an original
            printMgmtReportRun.load(_jourTable, _transTable, _languageId, _documentKeyValue);
        }
        else if (printCopyOriginal == PrintCopyOriginal::Copy)
        {
            // Print a copy
            setSettingDetail(PrintMgmtDocInstanceType::Copy, printMgmtReportRun.parmDefaultCopyPrintJobSettings());
        }
        else
        {
            // Print an original.  We also default to print one original when we are trying to
            // print using Print Mgmt information, but don't have a valid table reference.
            // This covers the reprint case where the original transaction record may not be present.
            setSettingDetail(PrintMgmtDocInstanceType::Original, printMgmtReportRun.parmDefaultOriginalPrintJobSettings());
        }

        if (!printMgmtReportRun.more())
        {
            checkFailed("@SYS78951");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements print management functionality.
    /// </summary>
    /// <remarks>
    /// Override this method to provide print management-related logic.This method loads the print settings
    /// for the business object.It then invokes any necessary business logic and then calls the
    /// <c>outputReports</c> method.
    /// </remarks>
    protected void runPrintMgmt()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (this.parmArgs().record())
        {
            // Get journal list from the selected record/s
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }

        if (!journalList)
        {
            throw error("@SYS26348");
        }
        if (SysDictClass::isEqualOrSuperclass(classIdGet(args.caller()), classNum(FormletterJournalPrint)))
        {
            factureJournalPrint = args.caller();
        }
        else if (classIdGet(args.caller()) == classNum(SalesFormLetter_FreeText))
        {
            salesFormLetter = args.caller();
        }

        while (journalList.next(factureJour) && !this.parmCancelRun())
        {
            if (!factureJour)
            {
                throw error("@SYS26348");
            }

            this.setFactureJour(factureJour);
            this.initPrintMgmtReportRun();

            this.loadPrintSettings(factureJour, transTable, factureJour.LanguageId);
            this.outputReports();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFactureJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes internal variables with values from facture journal.
    /// </summary>
    /// <param name="_factureJour">
    /// The <c>FactureJour_RU</c> record which is the source of data.
    /// </param>
    private void setFactureJour(FactureJour_RU _factureJour)
    {
        FactureTrans_RU factureTrans;
        Counter         counter;

        switch (_factureJour.Module)
        {
            case FactureModule_RU::Cust:
                while select SalesPurchId from factureTrans
                    group by SalesPurchId
                    where factureTrans.FactureId == _factureJour.FactureId &&
                          factureTrans.Module    == _factureJour.Module
                {
                    counter++;
                }
                if (counter == 1)
                {
                    select firstOnly factureTrans
                        where factureTrans.FactureId == _factureJour.FactureId &&
                              factureTrans.Module    == _factureJour.Module;

                    transTable = SalesTable::find(factureTrans.SalesPurchId);
                    printMgmtNodeType = PrintMgmtNodeType::SalesTable;
                }
                else
                {
                    transTable = CustTable::find(_factureJour.CustVendInvoiceAccount);
                    printMgmtNodeType = PrintMgmtNodeType::CustTable;
                }
                printMgmtDocumentType  = PrintMgmtDocumentType::SalesOrderFacture;
                printMgmtHierarchyType = PrintMgmtHierarchyType::Sales;
                break;
            case FactureModule_RU::Vend:
                while select SalesPurchId from factureTrans
                    group by SalesPurchId
                    where factureTrans.FactureId == _factureJour.FactureId &&
                          factureTrans.Module    == _factureJour.Module
                {
                    counter++;
                }
                if (counter == 1)
                {
                    select firstOnly SalesPurchId from factureTrans
                        where factureTrans.FactureId == _factureJour.FactureId &&
                              factureTrans.Module    == _factureJour.Module;

                    transTable = PurchTable::find(factureTrans.SalesPurchId);
                    printMgmtNodeType = PrintMgmtNodeType::PurchTable;
                }
                else
                {
                    transTable = VendTable::find(_factureJour.CustVendInvoiceAccount);
                    printMgmtNodeType = PrintMgmtNodeType::VendTable;
                }
                printMgmtDocumentType  = PrintMgmtDocumentType::PurchaseOrderFacture;
                printMgmtHierarchyType = PrintMgmtHierarchyType::Purch;
                break;
            case FactureModule_RU::Empl:
                transTable = null;
                printMgmtNodeType      = PrintMgmtNodeType::Purch;
                PrintMgmtDocumentType  = PrintMgmtDocumentType::PurchaseOrderFacture;
                printMgmtHierarchyType = PrintMgmtHierarchyType::Purch;
                break;
            case FactureModule_RU::TaxCorrectionPurch_Cust:
            case FactureModule_RU::TaxCorrectionSales:
                transTable = CustTable::find(_factureJour.CustVendInvoiceAccount);

                printMgmtNodeType      = PrintMgmtNodeType::CustTable;
                PrintMgmtDocumentType  = PrintMgmtDocumentType::SalesOrderFacture;
                printMgmtHierarchyType = PrintMgmtHierarchyType::Sales;
                break;
            case FactureModule_RU::TaxCorrectionPurch:
            case FactureModule_RU::TaxCorrectionSales_Vend:
                transTable = VendTable::find(_factureJour.CustVendInvoiceAccount);

                printMgmtNodeType      = PrintMgmtNodeType::VendTable;
                PrintMgmtDocumentType  = PrintMgmtDocumentType::PurchaseOrderFacture;
                printMgmtHierarchyType = PrintMgmtHierarchyType::Purch;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        FactureController   reportController = new FactureController();

        if (!NonSSRSPrintMgmtAdapter::runPrintMgmtNonSSRS(PrintMgmtDocumentType::SalesOrderFacture, _args))
        {
            return;
        }

        reportController.parmArgs(_args);
        reportController.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesOrderFacture).getDefaultReportFormat());
        reportController.parmShowDialog(false);
        reportController.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>