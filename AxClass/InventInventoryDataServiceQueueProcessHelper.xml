<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceQueueProcessHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceQueueProcessHelper
{
    const str StatusNewPara = 'StatusNewPara';
    const str StatusReadyPara = 'StatusReadyPara';
    private static InventInstrumentationLogger logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceQueueProcessHelper));
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateStatusToReady</Name>
				<Source><![CDATA[
    public static void updateStatusToReady(str _tableName)
    {
        str sqlStatementText = strFmt(@"update %1 WITH (READPAST) set processstatus = @%2 where processstatus = @%3", _tableName, StatusReadyPara, StatusNewPara);

        Map sqlParams = SqlParams::create();
        sqlParams.add(StatusReadyPara, 1);
        sqlParams.add(StatusNewPara, 0);

        Connection connection = new Connection();
        Statement statement = connection.createStatement();

        try
        {
            new SqlStatementExecutePermission(sqlStatementText).assert();

            statement.executeUpdateWithParameters(sqlStatementText, sqlParams);
            CodeAccessPermission::revertAssert();
        }
        catch
        {
            var errorMsg = strFmt("[IV] Received an error when updateStatusToReady for %1", _tableName);
            logger.logError(errorMsg);
        }
        finally
        {
            if (statement)
            {
                statement.close();
            }

            if (connection)
            {
                connection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteStatusReady</Name>
				<Source><![CDATA[
    public static void deleteStatusReady(str _tableName)
    {
        str sqlStatementText = strFmt(@"delete from %1 WITH (READPAST) where processstatus = @%2", _tableName, StatusReadyPara);

        Map sqlParams = SqlParams::create();
        sqlParams.add(StatusReadyPara, 1);

        Connection connection = new Connection();
        Statement statement = connection.createStatement();

        try
        {
            new SqlStatementExecutePermission(sqlStatementText).assert();

            statement.executeUpdateWithParameters(sqlStatementText, sqlParams);
            CodeAccessPermission::revertAssert();
        }
        catch
        {
            var errorMsg = strFmt("[IV] Received an error when deleteStatusReady for %1", _tableName);
            logger.logError(errorMsg);
        }
        finally
        {
            if (statement)
            {
                statement.close();
            }

            if (connection)
            {
                connection.finalize();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>