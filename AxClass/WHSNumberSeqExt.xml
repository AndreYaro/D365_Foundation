<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSNumberSeqExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the class that provides number sequence extensions.
/// </summary>
/// <remarks>
/// Provides the base behavior of number sequence extensions.
/// </remarks>
public class WHSNumberSeqExt
{
    protected NumberSeq             numberSeq;
    protected WHSNumberSequenceExt  numberSequenceExt;

    protected const str FormattingSymbols = '#';
    protected const str ForbiddenSymbols = '\n\t';
    protected const str AnnotatedFormatDelimiter = '\t';
    protected const str AnnotatedFormatSegmentDelimiter = '\n';
    protected const str FormatDelimiter = '\t';
    protected const str FormatSegmentDelimiter = '\n';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSNumberSeqExt</c> class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSNumberSeqExt</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>WHSNumberSeqExt</c> class.
    /// </returns>
    private static client WHSNumberSeqExt construct()
    {
        return new WHSNumberSeqExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGetNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSNumberSeqExt</c> class.
    /// </summary>
    /// <param name="_numberSequenceReference">A record of the <c>NumberSequenceReference</c> table.</param>
    /// <param name="_makeDecisionLater">Determines whether a number should be marked as used.</param>
    /// <param name="_dontThrowOnMissingRefSetUp">Determines whether exceptions shouldn't be thrown.</param>
    /// <param name="_allowManual">Determines whether manual sequence number is allowed.</param>
    /// <returns>
    /// A new instance of the <c>WHSNumberSeqExt</c> class.
    /// </returns>
    [Hookable(false)]
    public static server WHSNumberSeqExt newGetNum(
        NumberSequenceReference _numberSequenceReference,
        boolean                 _makeDecisionLater          = false,
        boolean                 _dontThrowOnMissingRefSetUp = false,
        UnknownNoYes            _allowManual                = UnknownNoYes::Unknown)
    {
        WHSNumberSeqExt                numberSeqExt               = WHSNumberSeqExt::construct();
        WHSNumberSequenceExtReference  numberSequenceExtReference = WHSNumberSequenceExtReference::findReference(_numberSequenceReference.RecId);

        numberSeqExt.numberSequenceExt = WHSNumberSequenceExt::find(numberSequenceExtReference.NumberSequenceExtId);
        numberSeqExt.numberSeq         = NumberSeq::newGetNum(_numberSequenceReference, _makeDecisionLater, _dontThrowOnMissingRefSetUp, _allowManual);

        return numberSeqExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formattingChars</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a string that contains each valid formatting character.
    /// </summary>
    /// <returns>
    ///    A string that contains each valid formatting character.
    /// </returns>
    [Hookable(false)]
    internal static str formattingChars()
    {
        return FormattingSymbols;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forbiddenChars</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a string that contains each invalid character.
    /// </summary>
    /// <returns>
    ///    A string that contains each invalid character.
    /// </returns>
    [Hookable(false)]
    internal static str forbiddenChars()
    {
        return ForbiddenSymbols;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAnnotatedFormatFromSegments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an annotated format string from the specified segment information.
    /// </summary>
    /// <param name="_segments">
    ///    A container that has segment information, which consists of two elements. The first element is a
    ///    <c>WHSNumberSequenceExtSegmentType</c> enumeration value that describes the parameter type.
    ///    The second element is the value of the segment. The type of the value is specific to the parameter
    ///    type.
    /// </param>
    /// <param name="_includeAnnotationMarkers">
    ///    A Boolean value that indicates whether the format string should contain the annotation markup. If
    ///    false, only the values of the segment will be included.
    /// </param>
    /// <returns>
    ///    An annotated format string from the specified segment information.
    /// </returns>
    [Hookable(false)]
    internal static WHSNumberSequenceExtAnnotatedFormat createAnnotatedFormatFromSegments(container _segments, boolean _includeAnnotationMarkers = true)
    {
        WHSNumberSequenceExtAnnotatedFormat format;
        container                           segment;
        int                                 segmentType;
        str                                 segmentValue;
        int                                 i;

        for (i = 1; i <= conLen(_segments); i++)
        {
            segment = conPeek(_segments, i);
            [segmentType, segmentValue] = segment;

            if (_includeAnnotationMarkers)
            {
                if (i != 1)
                {
                    format += AnnotatedFormatSegmentDelimiter;
                }

                format += int2str(segmentType) + AnnotatedFormatDelimiter;
            }

            format += segmentValue;
        }

        return format;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormatFromSegments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a format string from the specified segment information.
    /// </summary>
    /// <param name="_segments">
    ///    A container that has segment information, which consists of two elements. The first element is a
    ///    <c>WHSNumberSequenceExtSegmentType</c> enumeration value that describes the parameter type.
    ///    The second element is the value of the segment. The type of the value is specific to the parameter
    ///    type.
    /// </param>
    /// <returns>
    ///    A format string from the specified segment information.
    /// </returns>
    [Hookable(false)]
    internal static WHSNumberSequenceExtFormat createFormatFromSegments(container _segments)
    {
        WHSNumberSequenceExtFormat          format;
        container                           segment;
        int                                 segmentType;
        str                                 segmentValue;
        int                                 i;
        WHSNumberSeqExtSegmentTypeHandler   segmentTypeHandler;

        for (i = 1; i <= conLen(_segments); i++)
        {
            segment = conPeek(_segments, i);
            [segmentType, segmentValue] = segment;

            if (i != 1)
            {
                format += FormatSegmentDelimiter;
            }

            segmentTypeHandler = WHSNumberSeqExtSegmentTypeHandler::singletonFromType(segmentType);
            segmentValue = segmentTypeHandler.getSegmentData(segmentValue);

            format += int2str(segmentType);
            
            if (segmentValue)
            {
                format += FormatDelimiter + segmentValue;
            }
        }

        return format;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseAnnotatedFormat</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Parses the specified annotated format string into a container of segment information.
    /// </summary>
    /// <param name="_annotatedFormat">
    ///    The annotated format string to parse.
    /// </param>
    /// <returns>
    ///    A container that holds the segment information for the specified annotated format string.
    /// </returns>
    [Hookable(false)]
    internal static container parseAnnotatedFormat(str _annotatedFormat)
    {
        str                             segment;
        int                             length;
        int                             type;
        str                             typeStr;
        str                             value;
        int                             idx;
        int                             i = 0;

        container segments;

        do
        {
            segment = strLine(_annotatedFormat, i);

            if (segment)
            {
                length = strLen(segment);
                idx = strFind(segment, AnnotatedFormatDelimiter, 1, length);
                typeStr = subStr(segment, 1, idx - 1);
                type = str2int(typeStr);
                value = subStr(segment, idx + 1, length - idx);

                WHSNumberSeqExtSegmentTypeHandler segmentTypeHandler = WHSNumberSeqExtSegmentTypeHandler::singletonFromType(type);

                if (segmentTypeHandler.isDisplayValueReadOnly())
                {
                    segments += [[type, segmentTypeHandler.getDefaultDisplayValue()]];
                }
                else
                {
                    segments += [[type, value]];
                }
            }
            i++;
        }
        while (segment);

        return segments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a List of <c>WHSNumberSequenceExtSegmentType</c> enumeration values.
    /// </summary>
    /// <returns>
    ///    A list of <c>WHSNumberSequenceExtSegmentType</c> enumeration values .
    /// </returns>
    [Hookable(false)]
    internal static List getParameterTypes()
    {
        List                            list = new List(Types::Enum);
        DictEnum                        nsParameterTypeEnum;
        int                             nsParameterTypeEnumNumVals;
        int                             parameterType;
        int                             i;

        nsParameterTypeEnum = new DictEnum(enumNum(WHSNumberSequenceExtSegmentType));
        nsParameterTypeEnumNumVals = nsParameterTypeEnum.values();

        for (i = 0; i < nsParameterTypeEnumNumVals; i++)
        {
            parameterType = nsParameterTypeEnum.index2Value(i);

            list.addEnd(parameterType);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>num</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates and retrieves the next number with extended format in a single call.
    /// </summary>
    /// <param name="_numberSeqExtParameters">
    /// The number sequence extension parameters.
    /// </param>
    /// <returns>
    /// The formatted value of the last number generated for non voucher numbers.
    /// </returns>
    [Hookable(false)]
    public WHSNumExt num(WHSNumberSeqExtParameters _numberSeqExtParameters)
    {
        Num numGenerated = numberSeq.num();

        if (numberSequenceExt.RecId)
        {
            return this.formatNumber(_numberSeqExtParameters, numGenerated);
        }

        return numGenerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the number with extended format.
    /// </summary>
    /// <param name="_numberSeqExtParameters">
    /// The number sequence extension parameters.
    /// </param>
    /// <param name="_numGenerated">
    /// The number to format.
    /// </param>
    /// <returns>
    /// The formatted value of the number.
    /// </returns>
    [Hookable(false)]
    internal WHSNumExt formatNumber(WHSNumberSeqExtParameters _numberSeqExtParameters, Num _numGenerated)
    {
        WHSNumExt                       numFormatted;
        Integer                         posSegmentStart;
        Integer                         posSegmentDelimeter;
        Integer                         posDelimeter;
        int                             type;
        str                             typeStr;
        Integer                         formatLength = strLen(numberSequenceExt.Format);
        Array                           postCalculatedSegments;

        WHSNumberSeqExtSegmentTypeHandlerParameters segmentTypeHandlerParameters = WHSNumberSeqExtSegmentTypeHandlerParameters::construct();

        segmentTypeHandlerParameters.NumberSeqExtParameters = _numberSeqExtParameters;
        segmentTypeHandlerParameters.NumGenerated           = _numGenerated;

        do
        {
            posSegmentStart     = posSegmentDelimeter + 1;

            if (posSegmentStart <= formatLength)
            {
                posSegmentDelimeter = strFind(numberSequenceExt.Format, FormatSegmentDelimiter, posSegmentStart, formatLength - posSegmentStart + 1);

                if (!posSegmentDelimeter)
                {
                    posSegmentDelimeter = formatLength + 1;
                }

                posDelimeter = strFind(numberSequenceExt.Format, FormatDelimiter, posSegmentStart, posSegmentDelimeter - posSegmentStart);
                typeStr      = subStr(numberSequenceExt.Format, posSegmentStart, posDelimeter ? posDelimeter - posSegmentStart : posSegmentDelimeter - posSegmentStart);
                type         = str2int(typeStr);

                segmentTypeHandlerParameters.segmentData = posDelimeter ? subStr(numberSequenceExt.Format, posDelimeter + 1, posSegmentDelimeter - posDelimeter - 1) : '';

                WHSNumberSeqExtSegmentTypeHandler segmentTypeHandler = WHSNumberSeqExtSegmentTypeHandler::singletonFromType(type);

                if (segmentTypeHandler.usePostFormatting(segmentTypeHandlerParameters))
                {
                    if (!postCalculatedSegments)
                    {
                        postCalculatedSegments = new Array(Types::Container);
                    }

                    postCalculatedSegments.value(postCalculatedSegments.lastIndex() + 1, [type, strLen(numFormatted) + 1, segmentTypeHandlerParameters.segmentData]);
                }
                else
                {
                    numFormatted += segmentTypeHandler.formatSegment(segmentTypeHandlerParameters);
                }
            }
        }
        while (posSegmentStart <= formatLength);

        if (postCalculatedSegments)
        {
            segmentTypeHandlerParameters.numFormatted = numFormatted;

            for (Integer i=postCalculatedSegments.lastIndex(); i>0; i--)
            {
                [type, posSegmentStart, segmentTypeHandlerParameters.segmentData] = postCalculatedSegments.value(i);

                WHSNumberSeqExtSegmentTypeHandler segmentTypeHandler = WHSNumberSeqExtSegmentTypeHandler::singletonFromType(type);

                numFormatted = strIns(numFormatted, segmentTypeHandler.formatSegment(segmentTypeHandlerParameters), posSegmentStart);
            }
        }

        return numFormatted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataTypeSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks where the type can be extended
    /// </summary>
    /// <param name = "_typeId">The type id</param>
    /// <returns>True if the type can be extended; false, otherwise</returns>
    [Replaceable(true)]
    public static boolean isDataTypeSupported(ExtendedTypeId _typeId)
    {
        switch(_typeId)
        {
            case extendedTypeNum(WHSLicensePlateId):
            case extendedTypeNum(WHSBillOfLadingId):
            case extendedTypeNum(WHSContainerId):
            case extendedTypeNum(WHSWaveLabelId):
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDefaultExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates default extension.
    /// </summary>
    /// <param name = "_sequenceExtId">Extension Id</param>
    /// <param name = "_description">Description</param>
    /// <param name = "_segments">Extension segments</param>
    [Hookable(false)]
    internal static void generateDefaultExtension(WHSNumberSequenceExtId _sequenceExtId, Description _description, container _segments)
    {
        WHSNumberSequenceExt    numberSequenceExt;

        select firstonly numberSequenceExt
            where numberSequenceExt.NumberSequenceExtId == _sequenceExtId;

        if (!numberSequenceExt)
        {
            numberSequenceExt.initValue();
            numberSequenceExt.NumberSequenceExtId = _sequenceExtId;
            numberSequenceExt.Description = _description;
            numberSequenceExt.AnnotatedFormat = WHSNumberSeqExt::createAnnotatedFormatFromSegments(_segments);
            numberSequenceExt.Format = WHSNumberSeqExt::createFormatFromSegments(_segments);

            if (!numberSequenceExt.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSNumberSequenceExt)));
            }

            numberSequenceExt.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDefaultExtensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates default extensions.
    /// </summary>
    [Hookable(false)]
    internal static void generateDefaultExtensions()
    {
        WHSNumberSeqExt::generateDefaultExtension(
            '@WAX:DefaultNumberSequenceExtensionSSCCAI',
            '@WAX:DefaultNumberSequenceExtensionDescriptionSSCCAI',
           [[WHSNumberSequenceExtSegmentType::ApplicationIdentifier, '00'],
            [WHSNumberSequenceExtSegmentType::PackingType, ''],
            [WHSNumberSequenceExtSegmentType::GS1Prefix, ''],
            [WHSNumberSequenceExtSegmentType::NumberSequenceFixed, strRep('#', 20 - strLen(WHSParameters::find().UCCCompanyPrefix) - 4)],
            [WHSNumberSequenceExtSegmentType::CheckDigit, '']]);

        WHSNumberSeqExt::generateDefaultExtension(
            '@WAX:DefaultNumberSequenceExtensionSSCC18',
            '@WAX:DefaultNumberSequenceExtensionDescriptionSSCC18',
           [[WHSNumberSequenceExtSegmentType::PackingType, ''],
            [WHSNumberSequenceExtSegmentType::GS1Prefix, ''],
            [WHSNumberSequenceExtSegmentType::NumberSequenceFixed, strRep('#', 18 - strLen(WHSParameters::find().UCCCompanyPrefix) - 2)],
            [WHSNumberSequenceExtSegmentType::CheckDigit, '']]);

        WHSNumberSeqExt::generateDefaultExtension(
            '@WAX:DefaultNumberSequenceExtensionSSCC188',
            '@WAX:DefaultNumberSequenceExtensionDescriptionSSCC188',
           [[WHSNumberSequenceExtSegmentType::Constant, '8'],
            [WHSNumberSequenceExtSegmentType::GS1Prefix, ''],
            [WHSNumberSequenceExtSegmentType::NumberSequenceFixed, strRep('#', 18 - strLen(WHSParameters::find().UCCCompanyPrefix) - 2)],
            [WHSNumberSequenceExtSegmentType::CheckDigit, '']]);

        WHSNumberSeqExt::generateDefaultExtension(
            '@WAX:DefaultNumberSequenceExtensionBOL',
            '@WAX:DefaultNumberSequenceExtensionDescriptionBOL',
           [[WHSNumberSequenceExtSegmentType::GS1Prefix, ''],
            [WHSNumberSequenceExtSegmentType::NumberSequenceFixed, strRep('#', 17 - strLen(WHSParameters::find().UCCCompanyPrefix) - 1)],
            [WHSNumberSequenceExtSegmentType::CheckDigit, '']]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>