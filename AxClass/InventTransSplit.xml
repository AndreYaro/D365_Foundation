<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventTransSplit   extends RunBase
{
    InventTrans     inventTrans;
    InventQty       splitQty;

    PdsCWInventQty  cwSplitQty;

    DialogField     dialogSplitQty;

    DialogField     cwDialogSplitQty;

    recId           updRecId;

    #DEFINE.PreviousVersion(1)
    #DEFINE.CurrentVersion(3)

    #LOCALMACRO.PreviousList
        InventTrans
    #ENDMACRO

    #LOCALMACRO.CurrentList
        InventTrans,
        SplitQty,
        cwSplitQty,
        updRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be built by using the <c>Dialog</c> class or by using a class that is created in
    /// the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        boolean         isCWItem = PdsGlobal::pdsIsCWItem(inventTrans.ItemId);

        DialogRunbase   dialog = super();

        if (isCWItem)
        {
            DialogField cwQtyField = dialog.addField(extendedtypestr(PdsCWInventQty));
            cwQtyField.value(inventTrans.PdsCWQty);
            cwQtyField.active(false);
        }
        else
        {
            this.cwSplitQty = 0;
        }

        DialogField qty = dialog.addFieldValue(extendedtypestr(InventQty), this.getInventQtyUnit(), "@SYS14578", "@SYS14578");
        qty.active(false);

        if (isCWItem)
        {
            cwDialogSplitQty = dialog.addField(extendedtypestr(PdsCWInventQty), "@PDS561", "@PDS561");
            cwDialogSplitQty.value(cwSplitQty);
            cwDialogSplitQty.registerOverrideMethod(
                methodStr(FormRealControl, modified),
                methodStr(InventTransSplit, pdsCWQtyModified),
                this);
        }

        dialogSplitQty  = dialog.addFieldValue(extendedtypestr(InventQty), this.getSplitQtyUnit(), "@SYS19602", "@SYS19602");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets inventory quantity.
    /// </summary>
    /// <returns>
    /// Inventory quantity.
    /// </returns>
    protected InventQty getInventQtyUnit()
    {
        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets split quantity.
    /// </summary>
    /// <returns>
    /// Split inventory quantity.
    /// </returns>
    protected InventQty getSplitQtyUnit()
    {
        return splitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        splitQty   = dialogSplitQty.value();

        if (cwDialogSplitQty)
        {
            cwSplitQty = cwDialogSplitQty.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrans</Name>
				<Source><![CDATA[
    public InventTrans parmInventTrans(InventTrans _inventTrans = inventTrans)
    {
        inventTrans = _inventTrans;
        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitQty</Name>
				<Source><![CDATA[
    public InventQty parmSplitQty(InventQty _splitQty = splitQty)
    {
        splitQty = _splitQty;
        return splitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWParmSplitQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the <c>PdsCWInventQty</c> parameter.
    /// </summary>
    /// <param name="_cwSplitQty">
    /// The value to set; optional.
    /// </param>
    /// <returns>
    /// The value of the <c>PdsCWInventQty</c> parameter
    /// </returns>
    public PdsCWInventQty pdsCWParmSplitQty(
        PdsCWInventQty _cwSplitQty = cwSplitQty)
    {
        cwSplitQty = _cwSplitQty;
        return cwSplitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyModified</Name>
				<Source><![CDATA[
    public boolean pdsCWQtyModified(Object _callerControl)
    {
        dialogSplitQty.value(PdsCatchWeight::inventQty(inventTrans.ItemId, cwDialogSplitQty.value()));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that performs the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        setprefix(InventTransSplit::description());
        updRecId = 0;

        try
        {
            ttsbegin;

            if (!this.validate())
            {
                throw error("@SYS18447");
            }

            InventTrans inventTransCopy = InventTrans::findRecId(inventTrans.RecId, true);

            if (!inventTransCopy.checkIsChanged(inventTrans))
            {
                throw error("@SYS18447");
            }

            inventTransCopy.updateSplit(splitQty
                                        , cwSplitQty
                                        // <GEERU>
                                        , true
                                        // </GEERU>
                                        );

            updRecId = inventTransCopy.RecId;

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version      = conpeek(packedClass,1);

        switch (version)
        {
            case #PreviousVersion :
                [version,#PreviousList] = packedClass;
                break;

            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updRecId</Name>
				<Source><![CDATA[
    public recId updRecId()
    {
        return updRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (!inventTrans)
        {
            return false;
        }

        if (! inventTrans.checkUpdateSplit(splitQty
                                            , cwSplitQty
                                            ))
        {
            return false;
        }

        if (!PdsCatchWeight::validateInventQty(inventTrans.ItemId,
                splitQty, cwSplitQty))
        {
            return false;
        }

        if (!PdsCatchWeight::validateInventQty(inventTrans.ItemId,
                inventTrans.Qty - splitQty,
                inventTrans.PdsCWQty - cwSplitQty))
        {
            return false;
        }

        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            !EGAISHelper_RU::canInventTransBeSplit(inventTrans))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTransSplit construct()
    {
        return new InventTransSplit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS15396";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args args)
    {
        if (! args.caller() || ! args.dataset())
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        switch (args.record().TableId)
        {
            case (tableNum(InventTrans)) :
                InventTrans inventTrans = args.record();
                InventTransSplit inventTransSplit = InventTransSplit::newInventTransSplit(inventTrans.RecId);

                if (!inventTransSplit.prompt())
                {
                    return;
                }

                inventTransSplit.runOperation();

                Object callerForm = args.caller();
                callerForm.doResearch();

                break;

            default:
                throw error(strFmt("@SYS19306",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTransSplit</Name>
				<Source><![CDATA[
    static public InventTransSplit newInventTransSplit(recId inventTransRecid)
    {
        InventTrans inventTrans = InventTrans::findRecId(inventTransRecid);
        InventTransSplit inventTransSplit = InventTransSplit::construct();
        inventTransSplit.getLast();
        inventTransSplit.parmInventTrans(inventTrans);

        if (PdsGlobal::pdsIsCWItem(inventTrans.ItemId))
        {
            PdsCWInventQty setCWQty = (inventTrans.PdsCWQty >= 0 ? 1 : -1);
            inventTransSplit.pdsCWParmSplitQty(setCWQty);
            inventTransSplit.parmSplitQty(
                    PdsCatchWeight::inventQty(inventTrans.ItemId,setCWQty));
        }
        else
        {
            inventTransSplit.parmSplitQty(1 * (inventTrans.Qty >= 0 ? 1 : -1));
        }

        return inventTransSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>