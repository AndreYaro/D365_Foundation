<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalGTDPostExport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalGTDPostExport_RU extends CustomJournalPost_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ledgerPostingTypeCharge</Name>
				<Source><![CDATA[
    LedgerPostingType ledgerPostingTypeCharge()
    {
        return LedgerPostingType::SalesFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypeDuty</Name>
				<Source><![CDATA[
    LedgerPostingType ledgerPostingTypeDuty()
    {
        return LedgerPostingType::SalesFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDutyCharge</Name>
				<Source><![CDATA[
    protected void postDutyCharge()
    {
        CustomJournalTrans_RU           customJournalTrans;
        CustomJournalTotalAmounts_RU    customJournalTotalAmounts;
        CustomAmount_RU                 dutyAmountTotal;
        CustomAmount_RU                 dutyAmount;

        LedgerVoucherTransObject        ledgerVoucherTransObject;
        LedgerDimensionDefaultAccount   ledgerDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;
        CurrencyExchangeHelper          exchangeRateHelper;

        customJournalTotalAmounts = CustomJournalTotalAmounts_RU::createFromJournal(customJournalTable);
        dutyAmountTotal           = customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Duty);

        if (dutyAmountTotal)
        {
            while select * from customJournalTrans
                where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
            {
                dutyAmount = 0;

                switch (customJournalTrans.CalculationMethod)
                {
                    case CustomCalculationMethod_RU::Invoice:
                        dutyAmount = customJournalTrans.InvoiceDuty;
                        break;

                    case CustomCalculationMethod_RU::Indicative:
                        dutyAmount = customJournalTrans.IndicativeDuty;
                        break;
                }

                if (dutyAmount)
                {
                    ledgerDefaultAccount = TaxLedgerAccountGroup::accountLedgerDimension(FEACCCustomRateTable_RU::findOnDate(customJournalTrans.feaccId,
                                                                                                                             TaxType_W::CustomDuty_RU,
                                                                                                                             CustomJournalCalc_RU::customAllImportExport(customJournalTable.CustomJournalType),
                                                                                                                             customJournalTrans.CountryRegionId,
                                                                                                                             this.transDate()),
                                                                                         this.taxDirection());

                    ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDefaultAccount, customJournalTrans.DefaultDimension);

                    exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                 ledgerVoucherObject.parmAccountingDate());

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucherObject,
                                                                                                     this.ledgerPostingTypeDuty(),
                                                                                                     ledgerDimension,
                                                                                                     customCurrencyCode,
                                                                                                     dutyAmount,
                                                                                                     exchangeRateHelper);
                    ledgerVoucherTransObject.parmTaxParentReferenceTableId(customJournalTable.TableId);
                    ledgerVoucherTransObject.parmTaxParentReferenceRecId(customJournalTable.RecId);
                    ledgerVoucherTransObject.parmTransTxt();
                    ledgerVoucher.addTrans(ledgerVoucherTransObject);

                    postedAmount += CurrencyExchangeHelper::mstAmount(dutyAmount, customCurrencyCode, this.transDate());
                }
            }
        }

        //this.createChargeLedgerTrans(CustomChargeType_RU::Administration, customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeAdmin));
        this.createChargeLedgerTrans(CustomChargeType_RU::AdministrationExport, customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeAdmin));
        this.createChargeLedgerTrans(CustomChargeType_RU::Escort,         customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeEscort));
        this.createChargeLedgerTrans(CustomChargeType_RU::Storage,        customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeStorage));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceSalesPurchLine</Name>
				<Source><![CDATA[
    SalesPurchLine sourceSalesPurchLine(CustomJournalTrans_RU _customJournalTrans)
    {
        return SalesLine::findInventTransId(_customJournalTrans.SalesPurchInventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    TableId sourceTableId()
    {
        return tablenum(SalesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>