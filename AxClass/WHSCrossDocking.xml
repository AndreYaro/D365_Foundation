<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCrossDocking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Logic for handling advanced cross docking.
/// </summary>
public abstract class WHSCrossDocking
{
    ItemId                          itemId;
    InventDim                       inventDim;
    boolean                         crossDockPlanned;
    List                            errors;

    private WHSReservationHierarchyRecId    whsReservationHierarchyRecId;
    private WHSInstrumentationLogger        instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTemplateFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the item passes filter criteria.
    /// </summary>
    /// <param name="_query">
    /// The query used to check the filter.
    /// </param>
    /// <returns>
    /// Returns true if the filter criteria passes, otherwise; false.
    /// </returns>
    protected final boolean checkTemplateFilter(WHSQuery  _query)
    {
        using (var activityContext = this.instrumentationLogger().plannedCrossDocking().checkTemplateFilter())
        {
            boolean matchingFilter;
    
            QueryRun queryRun = new QueryRun(_query);
    
            queryRun.query().dataSourceTable(tableNum(WHSInventTable)).addRange(fieldNum(WHSInventTable, ItemId)).value(itemId);
    
            // Check if item passes filter criteria
            if (queryRun.next())
            {
                matchingFilter = true;
            }
         
            this.instrumentationLogger().plannedCrossDocking().checkedTemplateFilter(activityContext, matchingFilter);

            return matchingFilter;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossDockingWasPlanned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if cross docking is planned or not.
    /// </summary>
    /// <returns>
    /// true if some cross docking has been planned successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The value is set during the execute method of <c>WHSCrossDockPlanned</c> class.
    /// </remarks>
    [Hookable(false)]
    internal final boolean crossDockingWasPlanned()
    {
        return crossDockPlanned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays errors that have been generated.
    /// </summary>
    protected final void displayErrors()
    {
        ListEnumerator listEnum = errors.getEnumerator();
    
        while (listEnum.moveNext())
        {
            error(listEnum.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attempts to find cross docking supply for the demand and creates cross docking records.
    /// </summary>
    /// <returns>true if everything executed; false otherwise.</returns>
    abstract internal boolean execute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the inventory dimensions from a record.
    /// </summary>
    /// <param name="_common">
    /// The record used to find the inventory dimensions.
    /// </param>
    /// <returns>
    /// The inventory dimensions based on the passed in common.
    /// </returns>
    protected final InventDim resolveInventDim(Common _common)
    {
        InventDim   tmpInventDim;
    
        switch (_common.TableId)
        {
            case tableNum(WHSLoadLine):
                var loadLine    = _common as WHSLoadLine;
                tmpInventDim    = loadLine.inventDim();
                break;
    
            case tableNum(InventTrans):
                var inventTrans = _common as InventTrans;
                tmpInventDim    = inventTrans.inventDim();
                break;
    
            case tableNum(ProdTable):
                var prodTable   = _common as ProdTable;
                tmpInventDim    = prodTable.inventDim();
                break;

            case tableNum(PurchLine):
                var purchLine   = _common as PurchLine;
                tmpInventDim    = purchLine.inventDim();
                break;

            case tableNum(InventTransferLine):
                var inventTransferLine  = _common as InventTransferLine;
                tmpInventDim            = inventTransferLine.inventDim();
                break;

            case tableNum(SalesLine):
                var salesLine   = _common as SalesLine;
                tmpInventDim    = salesLine.inventDim();
                break;
        }
    
        return tmpInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the item id from a record.
    /// </summary>
    /// <param name="_common">
    /// The record used to find the item id.
    /// </param>
    /// <returns>
    /// The item id from the record.
    /// </returns>
    protected final ItemId resolveItemId(Common _common)
    {
        ItemId  tmpItemId;
    
        switch (_common.TableId)
        {
            case tableNum(WHSLoadLine):
                tmpItemId = _common.(fieldNum(WHSLoadLine, ItemId));
                break;
    
            case tableNum(InventTrans):
                tmpItemId = _common.(fieldNum(InventTrans, ItemId));
                break;
    
            case tableNum(ProdTable):
                tmpItemId = _common.(fieldNum(ProdTable, ItemId));
                break;
        }
    
        return tmpItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationHierarchyRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reservation hierarchy rec id.
    /// </summary>
    /// <returns>
    /// The reservation hierarchy rec id.
    /// </returns>
    protected final WHSReservationHierarchyRecId getReservationHierarchyRecId()
    {
        if (!whsReservationHierarchyRecId)
        {
            whsReservationHierarchyRecId = InventTable::find(itemId).whsReservationHierarchy();
        }
    
        return whsReservationHierarchyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new <c>AWHCrossDock</c> class.
    /// </summary>
    /// <param name = "_common">The <c>Common</c> to use.</param>
    protected void new(Common _common)
    {
        if (!_common.TableId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        errors = new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWindow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the supply falls within the allowed time window.
    /// </summary>
    /// <param name="_crossDockTemplate">
    /// The template used to validate.
    /// </param>
    /// <param name="_shipDateTime">
    /// The date time for the demand.
    /// </param>
    /// <param name="_supplyDateTime">
    /// The date time for the supply.
    /// </param>
    /// <returns>
    /// True if the supply has a date time within the allowed window, otherwise; false.
    /// </returns>
    protected final boolean validateWindow(
        WHSCrossDockTemplate    _crossDockTemplate,
        TransDateTime           _shipDateTime,
        TransDateTime           _supplyDateTime)
    {
        #TimeConstants
        boolean         ret = true;
    
        if (WhsCrossDockingOnlyValidateDateTimesIfWindowSpecifiedFlight::instance().isEnabled() || (_supplyDateTime != utcDateTimeNull() && _shipDateTime != utcDateTimeNull()))
        {
            ret = _crossDockTemplate.validateMinMaxTimeWindow(_shipDateTime, _shipDateTime, _supplyDateTime);
        }
        else
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the inventTransId from a record.
    /// </summary>
    /// <param name="_common">
    /// The record used to get the inventTransId.
    /// </param>
    /// <param name="_supply">
    /// Used to determine which inventTransId is needed from inventTransferLine.
    /// </param>
    /// <returns>
    /// The inventTransId found.
    /// </returns>
    protected final InventTransId resolveInventTransId(Common _common, boolean _supply = false)
    {
        InventTransId   inventTransId;
    
        switch (_common.TableId)
        {
            case tableNum(WHSLoadLine):
                inventTransId = _common.(fieldNum(WHSLoadLine, inventTransId));
                break;
    
            case tableNum(InventTrans):
                inventTransId = InventTransOrigin::find(_common.(fieldNum(InventTrans, InventTransOrigin))).InventTransId;
                break;
    
            case tableNum(PurchLine):
                inventTransId = _common.(fieldNum(PurchLine, InventTransId));
                break;
    
            case tableNum(ProdTable):
                inventTransId = _common.(fieldNum(ProdTable, InventTransId));
                break;
    
            case tableNum(InventTransferLine):
                if (_supply)
                {
                    inventTransId = _common.(fieldNum(InventTransferLine, InventTransIdReceive));
                }
                else
                {
                    inventTransId = _common.(fieldNum(InventTransferLine, InventTransId));
                }
                break;
    
            case tableNum(SalesLine):
                inventTransId = _common.(fieldNum(SalesLine, InventTransId));
                break;
        }
    
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCrossDockLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates cross dock load line records for cross docking.
    /// </summary>
    /// <param name="_inventTransSupply">
    /// The inventTrans record for the supply.
    /// </param>
    /// <param name="_commonDemand">
    /// The demand record.
    /// </param>
    /// <param name="_qty">
    /// The quantity needed to be cross docked.
    /// </param>
    /// <param name="_crossDockTemplateId">
    /// The cross dock template ID used to validate the supply.
    /// </param>
    /// <returns>
    /// The amount of planned cross dock load lines.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error has occured while trying to create cross dock records for demand source transactions.
    /// </exception>
    protected final Counter createCrossDockLoadLines(
        InventTrans             _inventTransSupply,
        Common                  _commonDemand,
        InventHandlingQty       _qty,
        WHSCrossDockTemplateId  _crossDockTemplateId)
    {
        int createdLines; 

        ttsbegin;
    
        InventTransId       demandInventTransId     = this.resolveInventTransId(_commonDemand);
        InventDim           demandInventDim         = this.resolveInventDim(_commonDemand);
        InventTransOrigin   supplyInventTransOrigin = _inventTransSupply.inventTransOrigin();

        InventHandlingQty   runningQty = _qty;

        InventDimParm   supplyInventDimParm;
        InventDim       supplyInventDim;
        InventDim       aboveLocationSupplyInventDim;

        if (_commonDemand.TableId == tableNum(WHSLoadLine))
        {
            supplyInventDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(_inventTransSupply.inventTable());
            supplyInventDim     = _inventTransSupply.inventDim();
        }
		
        Map mapMovement = new Map(Types::String, Types::Class);

        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        // Loop over demand source inventTrans records and create cross dock load lines.
        while select forUpdate inventTrans
            order by inventTrans.StatusIssue
            where inventTrans.StatusIssue                   >= StatusIssue::ReservOrdered
            &&    inventTrans.MarkingRefInventTransOrigin   == 0
            &&    inventTrans.inventDimId                   == demandInventDim.inventDimId
                join InventTransId from inventTransOrigin
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                    &&    inventTransOrigin.InventTransId   == demandInventTransId
        {
            InventQty positiveInventTransQty = -inventTrans.Qty;

            if (runningQty < positiveInventTransQty)
            {
                inventTrans.updateSplit(-runningQty);
                positiveInventTransQty = -inventTrans.Qty;
            }

            runningQty -= positiveInventTransQty;
    
            mapMovement.insert(inventTransOrigin.InventTransId, inventTrans.inventMovement(true));
    
            // We want to limit the records we look up during updateReserveRefTransId() so we set the status to On Order.
            // The inventTrans should get set to reserved ordered during updateReserveRefTransId.
            inventTrans.setMarking(supplyInventTransOrigin.RecId);
            inventTrans.StatusIssue = StatusIssue::OnOrder;
            inventTrans.update();

            if (_commonDemand.TableId == tableNum(WHSLoadLine))
            {
                WHSLoadLine splitLoadLine;
    
                // If above location dimensions are not equal between the loadLine and the supply source then we need to update the loadLine.
                if (!InventDim::isInventDimParmEqual(supplyInventDim, demandInventDim, supplyInventDimParm, false))
                {
                    if (!aboveLocationSupplyInventDim.inventDimId)
                    {
                        aboveLocationSupplyInventDim = supplyInventDim.data();
                        aboveLocationSupplyInventDim.clearNotSelectedDim(supplyInventDimParm);
                        aboveLocationSupplyInventDim = inventDim::findOrCreate(aboveLocationSupplyInventDim);
                    }
		
                    WHSLoadLine loadLine = _commonDemand as WHSLoadLine;

                    WHSLoadLineUpdater loadLineUpdater = WHSLoadLineUpdater::newFromTransId(loadLine.InventTransId);
                    splitLoadLine = loadLineUpdater.splitLoadLineByDimension(loadLine.RecId, aboveLocationSupplyInventDim.inventDimId, positiveInventTransQty);
                }
    
                // Create the crossDockLoadLine records that tracks planned cross docking.
                WHSCrossDockLoadLine crossDockLoadLine;

                crossDockLoadLine.LoadLineRecId                 = splitLoadLine.RecId ? splitLoadLine.RecId : _commonDemand.RecId;
                crossDockLoadLine.InventTransIdDemand           = inventTransOrigin.InventTransId;
                crossDockLoadLine.InventTransOriginIdSupply     = _inventTransSupply.InventTransOrigin;
                crossDockLoadLine.InventHandlingQty             = positiveInventTransQty;
                crossDockLoadLine.InventHandlingQtyRemain       = crossDockLoadLine.InventHandlingQty;
                crossDockLoadLine.CrossDockTemplateId           = _crossDockTemplateId;
                crossDockLoadLine.InventQtyMarked               = crossDockLoadLine.InventHandlingQty;
    
                WHSCrossDockLoadLine::updateOrCreate(crossDockLoadLine);
                
                createdLines++;
            }

            inventTrans.updateSumUp();

            if (runningQty <= 0)
            {
                break;
            }
        }
    
        if (runningQty > 0)
        {            
            this.instrumentationLogger().logError(
                strFmt('createCrossDockLoadLines runningQty > 0; _commonDemand table/recid: %1/%2, inventTransOrigin/inventDim: %3/%4, supply inventTransOrigin/inventDim: %5/%6, runningQty: %7', 
                    _commonDemand.TableId,
                    _commonDemand.RecId,
                    inventTransOrigin::findByInventTransId(demandInventTransId).RecId, 
                    demandInventDim.RecId, 
                    supplyInventTransOrigin.RecId,
                    supplyInventDim.RecId,
                    runningQty));

            throw error("@WAX:CrossDockErrorWithRemainingQuantity");
        }
    
        // Update marking of the supply inventTrans
        InventTrans supplyInventTrans = inventTrans::findRecId(_inventTransSupply.RecId, true);
    
        if (_qty < supplyInventTrans.Qty)
        {
            supplyInventTrans.updateSplit(_qty);
        }
    
        mapMovement.insert(supplyInventTransOrigin.InventTransId, supplyInventTrans.inventMovement(true));
    
        supplyInventTrans.setMarking(InventTrans::findTransId(demandInventTransId).InventTransOrigin);
        supplyInventTrans.update();
        supplyInventTrans.updateSumUp();
    
        InventTrans::updateInventRefFields(mapMovement);
    
        InventUpd_Reservation::updateReserveRefTransIdOnOrder(InventTrans::findTransId(demandInventTransId, true).inventMovement(true));
    
        ttscommit;

        return createdLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateShipDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the ship date/time from a record.
    /// </summary>
    /// <param name="_demandCommon">
    /// The record used to get the shipDateTime.
    /// </param>
    /// <returns>
    /// A UTCDateTime of the shipDateTime.
    /// </returns>
    [Hookable(false)]
    internal final static TransDateTime calculateShipDateTime(Common _demandCommon)
    {
        TransDate       transDate;
        TimeOfDay       timeOfDay;
    
        switch (_demandCommon.TableId)
        {
            case tableNum(WHSLoadLine):
                WHSLoadLine loadLine = _demandCommon as WHSLoadLine;
                transDate = loadLine.displayPickUpDate();
                break;
    
            case tableNum(SalesLine):
                transDate = _demandCommon.(fieldNum(SalesLine, ShippingDateConfirmed));
                if (!transDate)
                {
                    transDate = _demandCommon.(fieldNum(SalesLine, ShippingDateRequested));
                }
                break;
    
            case tableNum(InventTransferLine):
                transDate = _demandCommon.(fieldNum(InventTransferLine, ShipDate));
                break;
        }
    
        return DateTimeUtil::newDateTime(transDate, timeOfDay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSupplyDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the supply date/time from a supply origin.
    /// </summary>
    /// <param name="_supplyInventTransOrigin">
    /// A supply <c>InventTransOrigin</c> record.
    /// </param>
    /// <returns>
    /// The supply date time.
    /// </returns>
    [Hookable(false)]
    internal final static TransDateTime calculateSupplyDateTime(InventTransOrigin _supplyInventTransOrigin)
    {
        if (!_supplyInventTransOrigin)
        {
            return utcDateTimeNull();
        }

        TransDateTime supplyDateTime = WHSCrossDocking::calculateSupplyDateTimeByInventTransOrigin(_supplyInventTransOrigin);

        if (!WhsCrossDockingOnlyValidateDateTimesIfWindowSpecifiedFlight::instance().isEnabled() && supplyDateTime == utcDateTimeNull())
        {
            WHSInstrumentationLogger privateInstrumentationLogger = WHSInstrumentationLogger::createLogger(classStr(WHSCrossDocking));
            privateInstrumentationLogger.logError(
                strFmt('InventTransOrigin.RecId : %1, InventTransOrigin.ReferenceCategory : %2',_supplyInventTransOrigin.RecId,_supplyInventTransOrigin.ReferenceCategory));

            throw error("@WAX:IncorrectReferenceTypeForCrossDock");
        }

        return supplyDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSupplyDateTimeByInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the supply date/time from a supply inventory transaction originator.
    /// </summary>
    /// <param name = "_supplyInventTransOrigin">The supply inventory transaction originator record.</param>
    /// <returns>The supply date time.</returns>
    protected static TransDateTime calculateSupplyDateTimeByInventTransOrigin(InventTransOrigin _supplyInventTransOrigin)
    {
        TransDateTime supplyDateTime = utcDateTimeNull();

        switch (_supplyInventTransOrigin.ReferenceCategory)
        {
            case InventTransType::Purch:
                supplyDateTime = PurchLine::findInventTransId(_supplyInventTransOrigin.InventTransId).deliveryTransDateTime();
                break;
    
            case InventTransType::Production:
                ProdTable prodTable;
                supplyDateTime = prodTable.DeliveryDateTime(ProdTable::findTransId(_supplyInventTransOrigin.InventTransId));
                break;
    
            case InventTransType::TransferOrderReceive:
                supplyDateTime = InventTransferLine::findTransIdReceive(_supplyInventTransOrigin.InventTransId).receiveTransDateTime();
                break;

            case InventTransType::PmfProdCoBy:
                ProdTable prodTableLoc;
                supplyDateTime = prodTableLoc.DeliveryDateTime(PmfProdCoBy::findTransId(_supplyInventTransOrigin.InventTransId).prodTable());

                if (supplyDateTime == utcDateTimeNull())
                {
                    supplyDateTime = DateTimeUtil::getSystemDateTime();
                }
                break;
        }

        return supplyDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>