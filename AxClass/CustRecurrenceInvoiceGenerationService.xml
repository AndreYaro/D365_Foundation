<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustRecurrenceInvoiceGenerationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to generate recurring free text invoices based on free text invoice template, billing codes and recurrence invoice date.
/// </summary>
class CustRecurrenceInvoiceGenerationService
{
    CustTable custTable;
    CustInvoiceTemplate custInvoiceTemplate;
    CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroup;
    NumberSeq numberSeq;
    Counter recurrenceInvoiceCounter;
    boolean isRecurrenceGroupCreated;
    boolean customersSelected;
    boolean stopProcess;
    boolean invoiceGenerated;
    boolean customerProcessed;
    boolean isRecurrenceInvoiceCreated;
    TransDate invoiceGenerationDate;

    boolean isFinTagConfigurationSetForCurrent = FinTagConfiguration::isFinTagConfigurationSet(curExt());

    #Characters

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCustRecurrenceInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a recurrence invoice based on a free text invoice template and a
    ///    <c>CustRecurrenceInvoice</c> record.
    /// </summary>
    /// <param name="_recurrenceInvoiceDate">
    ///    The recurrence invoice date.
    /// </param>
    /// <param name="_recurrenceGenerationDate">
    ///    The recurrence invoice generation date.
    /// </param>
    /// <param name="_custRecurrenceInvoice">
    ///    The buffer of <c>CustRecurrenceInvoice</c> table.
    /// </param>
    private void createCustRecurrenceInvoice(TransDate _recurrenceInvoiceDate,
                                            TransDate _recurrenceGenerationDate,
                                            CustRecurrenceInvoice _custRecurrenceInvoice)
    {
        RecurrenceInvoice recurrenceInvoiceLine;
        CustInvoiceTable custInvoiceTable;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        AmountCur totalRecurrenceInvoiceAmount;
        boolean isRecurrenceStopped = false;

        // Determines the total invoice amount generated in a single recurrence invoice setup.
        totalRecurrenceInvoiceAmount = CustRecurrenceInvoice::sumRecurrenceInvoiceAmount(_custRecurrenceInvoice, _custRecurrenceInvoice.CurrencyCode);

        _custRecurrenceInvoice.selectForUpdate(true);

        if (CustParameters::isBillingClassificationEnabled() == false)
        {
            invoiceGenerationDate = CustRecurrenceInvoice::recurrenceInvoiceNextGenerationDate(_custRecurrenceInvoice);
        }

        if (CustParameters::isBillingClassificationEnabled() == false &&
            !isRecurrenceGroupCreated &&
            _custRecurrenceInvoice.RecId != 0 &&
            custRecurrenceInvoiceGroup.RecId == 0 && 
            invoiceGenerationDate <= _recurrenceGenerationDate && 
            _custRecurrenceInvoice.LastRecurrenceGenerationDate != _recurrenceGenerationDate &&
            (_custRecurrenceInvoice.EndDate == dateNull()
                || (_custRecurrenceInvoice.EndDate != dateNull() && 
                    _custRecurrenceInvoice.EndDate >= invoiceGenerationDate)))
        {
            isRecurrenceGroupCreated = true;
            this.createCustRecurrenceInvoiceGroup(_recurrenceInvoiceDate, _recurrenceGenerationDate);
        }

        invoiceGenerated = false;

        // Creates free text invoices until recurrence invoice CustRecurrenceInvoice.NextGenerationDate is less than equal to process generation date or recurrence invoice EndDate
        // or recurrence invoice setup is not stopped and ceiling amount is less than equal to total invoice amount of all already generated invoices.
        while ((CustParameters::isBillingClassificationEnabled() == false
                && (_custRecurrenceInvoice.IsStopped == NoYesCombo::No && (_custRecurrenceInvoice.EndDate != dateNull() && _custRecurrenceInvoice.EndDate <= _recurrenceGenerationDate))
                || (_custRecurrenceInvoice.IsStopped == NoYesCombo::No && invoiceGenerationDate <= _recurrenceGenerationDate))
                || this.isBillingClassProcessCriteriaValid(_custRecurrenceInvoice, _recurrenceGenerationDate) && isRecurrenceGroupCreated)
        {
            customersSelected = true;

            if ((_custRecurrenceInvoice.CeilingAmount == 0.0)
                || (totalRecurrenceInvoiceAmount <= _custRecurrenceInvoice.CeilingAmount))
            {
                recurrenceInvoiceCounter += 1;
                customerProcessed = true;

                custInvoiceTable = this.createFromCustInvoiceTemplate(custInvoiceTemplate, custTable, _custRecurrenceInvoice.UseDefaultFromCustomer, _custRecurrenceInvoice, _recurrenceInvoiceDate);

                //Create source document distributions as soon as the source document is created.
                //This is needed as there is no way to say if the dimensions were updated on the Free text invoice after the free text invoice(FTI) has been created
                //from a template. This causes ambiguity whether to default distributions from the template or create distributions using FTI dimensions. Creating the
                //distributions right after the source document is created defaults the distributions from the template. Then, if the dimensions are updated on the
                //FTI, the new distributions are created using the FTI dimensions.
                SourceDocumentProcessor::submitSourceDocumentLinesForHeader(custInvoiceTable.SourceDocumentHeader);

                custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
                custFreeInvoiceCalcTotals.calc();
                totalRecurrenceInvoiceAmount += CurrencyExchangeHelper::curAmount2CurAmount(custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount(), custInvoiceTable.CurrencyCode, _custRecurrenceInvoice.CurrencyCode);

                // Checks total invoice amount generated in recurrence invoice generation process and compare it with ceiling amount.
                if ((_custRecurrenceInvoice.CeilingAmount != 0.0 && totalRecurrenceInvoiceAmount > _custRecurrenceInvoice.CeilingAmount)
                    || (_custRecurrenceInvoice.EndDate != dateNull() && _custRecurrenceInvoice.EndDate < invoiceGenerationDate))
                {
                    invoiceGenerated = false;
                    // Deletes the current CustInvoiceTable record if the total recurrence invoice amount exceed the ceiling amount
                    // and mark the current recurrence invoice setup to stopped.
                    if (CustParameters::isBillingClassificationEnabled() == false)
                    {
                        custInvoiceTable.delete();
                    }

                    _custRecurrenceInvoice.IsStopped = NoYesCombo::Yes;
                    isRecurrenceStopped = true;
                }

                if (!isRecurrenceStopped)
                {
                    _custRecurrenceInvoice.LastRecurrenceGenerationDate = _recurrenceGenerationDate;

                    if (custInvoiceTable.RecId)
                    {
                        // Creates a recurrence invoice reference for free text invoice.
                        recurrenceInvoiceLine.CustRecurrenceInvoiceGroup = custRecurrenceInvoiceGroup.RecId;
                        recurrenceInvoiceLine.CustRecurrenceInvoice = _custRecurrenceInvoice.RecId;
                        recurrenceInvoiceLine.CustInvoiceTable = custInvoiceTable.RecId;
                        recurrenceInvoiceLine.RecurrenceInvoiceDate = invoiceGenerationDate;
                        recurrenceInvoiceLine.insert();

                        invoiceGenerationDate = CustRecurrenceInvoice::recurrenceInvoiceNextGenerationDate(_custRecurrenceInvoice);
                    }

                    if (!isRecurrenceInvoiceCreated)
                    {
                        isRecurrenceInvoiceCreated = true;
                    }

                    recurrenceInvoiceLine.selectForUpdate(true);
                    recurrenceInvoiceLine.RecurrenceInvoicePeriodEndDate = invoiceGenerationDate - 1;
                    recurrenceInvoiceLine.update();

                    _custRecurrenceInvoice.update();

                    invoiceGenerated = true;
                }
                else
                {
                    _custRecurrenceInvoice.LastRecurrenceGenerationDate = _recurrenceGenerationDate;
                    _custRecurrenceInvoice.update();
                }
            }
            else
            {
                _custRecurrenceInvoice.IsStopped = NoYesCombo::Yes;
                _custRecurrenceInvoice.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromCustInvoiceTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a free text invoice (header and lines) based on the provided template and customer.
    /// field.
    /// </summary>
    /// <param name="_custInvoiceTemplate">
    /// An instance of a <c>CustInvoiceTemplate</c> table buffer.
    /// </param>
    /// <param name="_custTable">
    /// An instance of a <c>CustTable</c> table buffer.
    /// </param>
    /// <param name="_useDefaultFromCustomer">
    /// Determines whether certain fields default from the template or the customer.
    /// </param>
    /// <param name="_custRecurrenceInvoice">
    /// An insteance of a <c>CustRecurrenceInvoice</c> table buffer; optional.
    /// </param>
    /// <param name="_generationDate">
    /// The generation date of recurrence invoice; optional.
    /// </param>
    public CustInvoiceTable createFromCustInvoiceTemplate(
        CustInvoiceTemplate _custInvoiceTemplate,
        CustTable _custTable,
        CustRecurrenceInvoiceDefaultType _useDefaultFromCustomer,
        CustRecurrenceInvoice _custRecurrenceInvoice = null,
        TransDate _recurrenceInvoiceDate = invoiceGenerationDate)
    {
        CustInvoiceTable custInvoiceTable;
        // <GEERU>
        #ISOCountryRegionCodes
        #EECountryRegionCodes
        // </GEERU>

        custInvoiceTable.OrderAccount = _custTable.AccountNum;

        custInvoiceTable.initFromCustInvoiceTemplate(
                                                    _custInvoiceTemplate,
                                                    _custTable,
                                                    _useDefaultFromCustomer,
                                                    CustParameters::isBillingClassificationEnabled() ? invoiceGenerationDate : _recurrenceInvoiceDate);

        // <GEERU>
        if (_custRecurrenceInvoice.AgreementHeaderExt_RU && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            custInvoiceTable.AgreementHeaderExt_RU = _custRecurrenceInvoice.AgreementHeaderExt_RU;

            if (_useDefaultFromCustomer == CustRecurrenceInvoiceDefaultType::Customer)
            {
                custInvoiceTable.setAgreement_RU();
            }

            custInvoiceTable.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(_custRecurrenceInvoice.AgreementHeaderExt_RU,
                                                                                                custInvoiceTable.DefaultDimension);
        }

        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
            {
                custInvoiceTable.DocumentDate = custInvoiceTable.InvoiceDate;
            }

            CustInvoiceTableEventHandlerEEFeatures custInvoiceTableEventHandler = new CustInvoiceTableEventHandlerEEFeatures(custInvoiceTable);
            custInvoiceTableEventHandler.initFromCustTable(_custTable);
        }

        if (custInvoiceTable.isWorkflowEnabledForFreeTextInvoice())
        {
            custInvoiceTable.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Draft;
        }

        // </GEERU>
        custInvoiceTable.insert();

        CustInvoiceLine custInvoiceLine;
        CustInvoiceLineTemplate custInvoiceLineTemplate;
        CustInvoiceStandardLineTemplate custInvoiceStandardLineTemplate;
        
        // Creates a free text invoice lines by using customer free text invoice line template.
        while select custInvoiceLineTemplate
            where custInvoiceLineTemplate.CustInvoiceTemplate == _custInvoiceTemplate.RecId
        {
            custInvoiceLine.clear();

            if (isFinTagConfigurationSetForCurrent
                && AccountsReceivableFinTagFlight::instance().isEnabled())
            {
                custInvoiceLine.FinTag = _custInvoiceTemplate.FinTag;
            }

            if (CustParameters::isBillingClassificationEnabled()
                && (custInvoiceLineTemplate.getInstanceRelationType() == tableStr(CustInvoiceStandardLineTemplate)))
            {
                custInvoiceStandardLineTemplate = custInvoiceLineTemplate;

                if (custInvoiceStandardLineTemplate.BillingCode)
                {
                    if (!CustBillingCodeVersion::existByDate(custInvoiceStandardLineTemplate.BillingCode, custInvoiceTable.InvoiceDate))
                    {
                        warning("@SPS858");
                        return custInvoiceTable;
                    }
                }
            }

            if (CustParameters::isBillingClassificationEnabled())
            {
                if (!custInvoiceLine.insertFromCustInvoiceLineTemplate_PSN(custInvoiceLineTemplate,
                                                                            custInvoiceTable,
                                                                            _custTable,
                                                                            _useDefaultFromCustomer))
                {
                    // no use continuing
                    invoiceGenerated = false;
                    return custInvoiceTable;
                }
            }
            else
            {
                custInvoiceLine.insertFromCustInvoiceLineTemplate(custInvoiceLineTemplate,
                                                                    custInvoiceTable,
                                                                    _custTable,
                                                                    _useDefaultFromCustomer);
            }

            if (_custRecurrenceInvoice
                && CustParameters::isBillingClassificationEnabled()
                && custInvoiceLine.RecId != 0
                && custInvoiceLine.CustBillingCode != 0
                && custInvoiceLineTemplate.getInstanceRelationType() == tableStr(CustInvoiceStandardLineTemplate)
                && (_custRecurrenceInvoice.EndDate == dateNull() || _custRecurrenceInvoice.EndDate >= invoiceGenerationDate))
            {
                this.setCustomFieldWithRateScript(custInvoiceTable, custInvoiceLine, _custRecurrenceInvoice, custInvoiceLineTemplate);
            }
        }

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustRecurrenceInvoiceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a recurrence invoice group based on the invoice date and the recurrence invoice generation date.
    /// </summary>
    /// <param name="_recurrenceInvoiceDate">
    ///    The recurrence invoice date.
    /// </param>
    /// <param name="_recurrenceGenerationDate">
    ///    The recurrence invoice generation date.
    /// </param>
    private void createCustRecurrenceInvoiceGroup(TransDate _recurrenceInvoiceDate,
                                                  TransDate _recurrenceGenerationDate)
    {
        numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustRecurringInvoice());
        custRecurrenceInvoiceGroup.RecurrenceInvoiceId = numberSeq.num();
        custRecurrenceInvoiceGroup.GenerationDate = _recurrenceGenerationDate;
        custRecurrenceInvoiceGroup.InvoiceDate = _recurrenceInvoiceDate;
        custRecurrenceInvoiceGroup.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the recurrence invoices based on the <c>CustRecurrenceInvoiceDataContract</c> class.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceDataContract">
    ///    An instance of <c>CustRecurrenceInvoiceDataContract</c> class.
    /// </param>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An unrecoverable update conflict occurred.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void generateInvoices(CustRecurrenceInvoiceDataContract _custRecurrenceInvoiceDataContract)
    {
        container packedQuery = SysOperationHelper::base64Decode(_custRecurrenceInvoiceDataContract.parmQueryCustRecurrenceInvoice());
        Query query = new Query(packedQuery);
        QueryRun queryRun;
        CustRecurrenceInvoice custRecurrenceInvoice;

        boolean processHasSuccessfulInvoice = false;
        boolean hasBillingCodeError = false;
        int infoLogLine;
        boolean processHasInvoiceError = false;
        boolean isBillingClassificationEnabled = CustParameters::isBillingClassificationEnabled();

        #OCCRetryCount

        try
        {
            isRecurrenceGroupCreated = false;
            stopProcess = false;
            if (isBillingClassificationEnabled)
            {
                ttsBegin;
                this.createCustRecurrenceInvoiceGroup(_custRecurrenceInvoiceDataContract.parmRecurrenceInvoiceDate(),
                                                      _custRecurrenceInvoiceDataContract.parmRecurrenceGenerationDate());
                isRecurrenceGroupCreated = true;
                ttsCommit;

                this.queryBuildUpdate(query, _custRecurrenceInvoiceDataContract.parmCustInvoiceTemplateName());

                setPrefix("@SYS315620");

                if (!this.validateTemplateBillingCodeVersions(_custRecurrenceInvoiceDataContract.parmCustInvoiceTemplateName(), _custRecurrenceInvoiceDataContract.parmRecurrenceGenerationDate()))
                {
                    stopProcess = true;
                    hasBillingCodeError = true;
                }
                else
                {
                    customersSelected = false;
                    invoiceGenerated = false;
                }
            }
            else
            {
                this.queryBuildUpdate(query, _custRecurrenceInvoiceDataContract.parmCustInvoiceTemplateName());
                ttsbegin;
            }

            queryRun = new QueryRun(query);

            while (queryRun.next() && !stopProcess)
            {
                if (isBillingClassificationEnabled)
                {
                    ttsbegin;
                    customerProcessed = false;
                    invoiceGenerated = false;
                }

                if (queryRun.changed(tableNum(CustTable)))
                {
                    custTable = queryRun.get(tableNum(CustTable));

                    if (isBillingClassificationEnabled)
                    {
                        setPrefix(#PreFixField(custTable, AccountNum, custTable.AccountNum));
                    }
                }

                if (!custTable.Blocked)
                {
                    if (queryRun.changed(tableNum(CustInvoiceTemplate)))
                    {
                        custInvoiceTemplate = queryRun.get(tableNum(CustInvoiceTemplate));
                    }

                    if (queryRun.changed(tableNum(CustRecurrenceInvoice)))
                    {
                        custRecurrenceInvoice = queryRun.get(tableNum(CustRecurrenceInvoice));
                        invoiceGenerationDate = CustRecurrenceInvoice::recurrenceInvoiceNextGenerationDate(custRecurrenceInvoice);
                        this.createCustRecurrenceInvoice(_custRecurrenceInvoiceDataContract.parmRecurrenceInvoiceDate(),
                                                        _custRecurrenceInvoiceDataContract.parmRecurrenceGenerationDate(),
                                                        custRecurrenceInvoice);
                    }
                }
                else if (isBillingClassificationEnabled)
                {
                    customersSelected = true;
                    warning(strFmt("@SYS328239", custTable.AccountNum));
                }

                if (isBillingClassificationEnabled)
                {
                    if (invoiceGenerated)
                    {
                        // remove the customer ID prefix that had earlier been written to the InfoLog
                        infoLogLine = infologLine();
                        infolog.clear(infologLine());
                        processHasSuccessfulInvoice = true;
                        ttsCommit;
                    }
                    else
                    {
                        if (customerProcessed)
                        {
                            processHasInvoiceError = true;
                        }
                        ttsAbort;
                    }
                }
            }

            if (isBillingClassificationEnabled)
            {
                if (hasBillingCodeError)
                {
                    error("@SYP4881770");
                }
                else
                {
                    if (!customersSelected)
                    {
                        info("@SYS318903");
                    }
                    else if (processHasInvoiceError)
                    {
                        warning("@SYP4881771");
                    }

                    if (processHasSuccessfulInvoice)
                    {
                        info(strFmt("@SYS318914", custRecurrenceInvoiceGroup.RecurrenceInvoiceId));
                    }
                    else if (custRecurrenceInvoiceGroup.RecId != 0)
                    {
                        ttsBegin;
                        numberSeq.abort();
                        custRecurrenceInvoiceGroup.delete();
                        ttsCommit;
                    }
                }
            }
            else
            {
                if (isRecurrenceInvoiceCreated)
                {
                    info(strFmt("@SYS318914", custRecurrenceInvoiceGroup.RecurrenceInvoiceId));
                }
                else
                {
                    if (numberSeq)
                    {
                        numberSeq.abort();
                    }

                    if (custRecurrenceInvoiceGroup)
                    {
                        custRecurrenceInvoiceGroup.delete();
                    }

                    info("@SYS318903");
                }
                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceGenerationDate</Name>
				<Source><![CDATA[
    public TransDate parmInvoiceGenerationDate(TransDate _invoiceGenerationDate = invoiceGenerationDate)
    {
        invoiceGenerationDate = _invoiceGenerationDate;
        return invoiceGenerationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the query build range for the <c>CustRecurrenceInvoice</c> query object.
    /// </summary>
    /// <param name="_query">
    ///    An instance of the <c>CustRecurrenceInvoice</c> query object.
    /// </param>
    /// <param name="_custInvoiceTemplateName">
    ///    The name of a customer recurrence invoice template.
    /// </param>
    /// <returns>
    ///    The updated <c>CustRecurrenceInvoice</c> query object.
    /// </returns>
    protected QueryBuildRange queryBuildUpdate(Query _query, str _custInvoiceTemplateName)
    {
        _query.dataSourceTable(tableNum(CustInvoiceTemplate)).enabled(true);
        _query.dataSourceTable(tableNum(CustRecurrenceInvoice)).enabled(true);

        if (_custInvoiceTemplateName)
        {
            str selectedCustInvoiceTemplateNames = strReplace(_custInvoiceTemplateName, #SEMICOLON, #COMMA);
            SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(CustInvoiceTemplate)), fieldNum(CustInvoiceTemplate,TemplateName)).value(selectedCustInvoiceTemplateNames);
        }

        QueryBuildRange rangeIsStopped;
        rangeIsStopped = _query.dataSourceTable(tableNum(CustRecurrenceInvoice)).addRange(fieldNum(CustRecurrenceInvoice, IsStopped));
        rangeIsStopped.value(SysQuery::value(NoYesCombo::No));
        rangeIsStopped.status(RangeStatus::Hidden);

        return rangeIsStopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomFieldWithRateScript</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the billing code custom field values and executes rate script.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The buffer of <c>CustInvoiceTable</c> table.
    /// </param>
    /// <param name="_custInvoiceLine">
    /// The buffer of <c>CustInvoiceLine</c> table.
    /// </param>
    /// <param name="_custRecurrenceInvoice">
    /// The buffer of <c>CustRecurrenceInvoice</c> table.
    /// </param>
    /// <param name="_custInvoiceStandardLineTemplate">
    /// The buffer of <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    private void setCustomFieldWithRateScript(CustInvoiceTable _custInvoiceTable,
                                                    CustInvoiceLine _custInvoiceLine,
                                                    CustRecurrenceInvoice _custRecurrenceInvoice,
                                                    CustInvoiceStandardLineTemplate _custInvoiceStandardLineTemplate)
    {
        Map mapCustCustomFieldElement;
        MapIterator mapIterator;
        CustCustomFieldElement custCustomFieldElement;

        mapCustCustomFieldElement = CustCustomFieldElement::getCustomFieldValues(CustCustomFieldSourceType::CustRecurrenceInvoice,
                                                                                    _custRecurrenceInvoice,
                                                                                    _custInvoiceStandardLineTemplate.RecId,
                                                                                    _custInvoiceTable.InvoiceDate);

        if (mapCustCustomFieldElement && mapCustCustomFieldElement.elements() != 0)
        {
            mapIterator = new MapIterator(mapCustCustomFieldElement);

            while (mapIterator.more())
            {
                custCustomFieldElement = mapIterator.value();
                custCustomFieldElement.parmCustInvBillCodeCusotmFieldBaseId(0);
                mapIterator.next();
            }
        }

        CustInvLineBillCodeCustomFieldBase::writeCustCustomFields(mapCustCustomFieldElement, CustCustomFieldSourceType::CustInvoiceLine, _custInvoiceLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBillingClassProcessCriteriaValid</Name>
				<Source><![CDATA[
    protected boolean isBillingClassProcessCriteriaValid(CustRecurrenceInvoice _custRecurrenceInvoice,
                                                        TransDate _recurrenceGenerationDate)
    {
        boolean validCriteria;

        validCriteria = CustParameters::isBillingClassificationEnabled()
                        && _custRecurrenceInvoice.IsStopped == NoYesCombo::No
                        && invoiceGenerationDate <= _recurrenceGenerationDate
                        && (_custRecurrenceInvoice.EndDate == dateNull()
                        || _custRecurrenceInvoice.EndDate >= invoiceGenerationDate);

        return validCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTemplateBillingCodeVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether any related <c>CustInvoiceStandardLineTemplate</c> record with expired billing code exists.
    /// </summary>
    /// <param name="_templates">
    /// String of template names of separated by semicolon.
    /// </param>
    /// <param name="_validationDate">
    /// The date used to validated the <c>CustBillingCodeVersion</c> table records.
    /// </param>
    /// <returns>
    /// True if no <c>CustInvoiceStandardLineTemplate</c> record with expired billing code exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// loops through invoice templates, and call CustInvoiceTemplate::validateBillingCodeVersions() method to the actual work.
    /// </remarks>
    protected boolean validateTemplateBillingCodeVersions(str _templateNames, TransDate _validationDate)
    {
        CustInvoiceTemplate invoiceTemplate;

        List templateNames = strSplit(_templateNames, #SEMICOLON);
        ListEnumerator templateNameList = templateNames.getEnumerator();

        while (templateNameList.moveNext())
        {
            select firstonly RecId from invoiceTemplate
                where invoiceTemplate.TemplateName == templateNameList.current();

            if (!CustInvoiceTemplate::validateBillingCodeVersions(invoiceTemplate.RecId, _validationDate, true, null))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>