<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustInvoiceUIBuilder</c> class is responsible for building an input dialog for the
///    <c>CustInvoice</c> report.
/// </summary>
/// <remarks>
///    It adds custom lookups for dimension focus field.
/// </remarks>
public class CustInvoiceUIBuilder extends SrsReportDataContractUIBuilder
{
    CustInvoiceContract custInvoiceContract;
    DialogField billingClassificationField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>billingClassificationLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a multi-select billing classification lookup dialog box field.
    /// </summary>
    public void billingClassificationLookup()
    {
        TableId multiSelectTableNum = tableNum(CustBillingClassification);
        Query query = new Query(queryStr(CustBillingClassificationLookup));
        container selectedFields = [multiSelectTableNum, fieldName2id(multiSelectTableNum, fieldStr(CustBillingClassification, BillingClassification))];

        SysLookupMultiSelectCtrl::constructWithQuery(this.dialog().dialogForm().formRun(), billingClassificationField.control(), query, false, selectedFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimensionFocus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a dimension set lookup.
    /// </summary>
    /// <param name="_control">
    /// The dimension set control.
    /// </param>
    /// <remarks>
    /// This method uses the <c>DimensionAttribute</c> table for lookup.
    /// </remarks>
    public void lookupDimensionFocus(FormStringControl _control)
    {
        DimensionHierarchyHelper::lookupDimensionSet(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyCollectionDialogField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the dialog field for a collection to use the multi-select control.
    /// </summary>
    /// <remarks>
    /// Called during post run to change the dialog field for collection type to use multi-select control.
    /// </remarks>
    protected void modifyCollectionDialogField()
    {
        SysLookupMultiSelectCtrl multiSelectControl;

        MapEnumerator mapEnum;
        DialogField dialogField;
        FormStringControl strControl;
        QueryRun multiSelectQueryRun;
        int multiSelectTableNum = tableNum(SysOperationMultiSelectTmp);

        container selectedFields = [multiSelectTableNum, fieldName2id(multiSelectTableNum, fieldStr(SysOperationMultiSelectTmp, Values))];

        // if there are any collection types, then we should show the multi-value control if possible.
        if (multiSelectQueryMap)
        {
            if (!multiSelectControlMap)
            {
                // The multi-select controls are created only once. Valid values are updated via QueryRun updates
                multiSelectControlMap = new Map(Types::Class, Types::Class);
            }

            mapEnum = multiSelectQueryMap.getEnumerator();
            while (mapEnum.moveNext())
            {
                dialogField = mapEnum.currentKey();
                multiSelectQueryRun = mapEnum.currentValue();

                if (dialogField.name() == billingClassificationField.name())
                {
                    continue;
                }

                // get the underlying control from formRun.
                if (multiSelectQueryRun)
                {
                    strControl = dialogField.control();

                    if (!multiSelectControlMap.exists(dialogField))
                    {
                        // initialization: create the controls
                        multiSelectControl = SysLookupMultiSelectCtrl::constructWithQueryRun(this.dialog().dialogForm().formRun(), strControl, multiSelectQueryRun, false, selectedFields);
                        multiSelectControlMap.insert(dialogField, multiSelectControl);
                    }
                    else
                    {
                        // parameter refresh: update the QueryRun
                        multiSelectControl = multiSelectControlMap.lookup(dialogField);
                        multiSelectControl.refreshQueryRun(multiSelectQueryRun);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the input dialog caption and changes the dimension focus dialog field to appear as lookup.
    /// </summary>
    public void postBuild()
    {
        DialogField dimensionFocus;

        boolean isBillingClassEnabled;
        DialogField inclTransWithNoBillingClassField;

        super();

        // From binding info, get the dialog field for dimension attribute and add button
        dimensionFocus = this.bindInfo().getDialogField(
            this.dataContractObject(),
            methodStr(CustInvoiceContract, parmDimensionFocus));

        if (dimensionFocus)
        {
            dimensionFocus.lookupButton(2);
        }

        // initializing data contract object
        custInvoiceContract = this.dataContractObject();

        // Get the parameter controls from dialog
        billingClassificationField = this.bindInfo().getDialogField(custInvoiceContract, methodStr(CustInvoiceContract, parmBillingClassification));
        inclTransWithNoBillingClassField = this.bindInfo().getDialogField(custInvoiceContract, methodStr(CustInvoiceContract, parmInclTransWithNoBillingClass));

        // controlling visibility
        if (billingClassificationField && inclTransWithNoBillingClassField)
        {
            isBillingClassEnabled = CustParameters::isBillingClassificationEnabled();
            billingClassificationField.visible(isBillingClassEnabled);
            inclTransWithNoBillingClassField.visible(isBillingClassEnabled);
            billingClassificationField.lookupButton(FormLookupButton::Always);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the defaults in order to handle events on dialog boxes.
    /// </summary>
    public void postRun()
    {
        Dialog dialogLocal = this.dialog();
        DialogField dialogField;

        if (CustParameters::isBillingClassificationEnabled())
        {
            this.billingClassificationLookup();
        }

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        // Override the lookup for parmDimensionFocus contract parameter with lookupDimensionFocus of this class.
        dialogField = this.bindInfo().getDialogField(
            this.dataContractObject(),
            methodstr(CustInvoiceContract, parmDimensionFocus));

        dialogField.registerOverrideMethod(
            methodstr(FormStringControl, lookup),
            methodstr(CustInvoiceUIBuilder, lookupDimensionFocus),
            this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>