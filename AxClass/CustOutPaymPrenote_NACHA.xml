<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutPaymPrenote_NACHA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustOutPaymPrenote_NACHA</c> class generates customer prenotes in NACHA format.
/// </summary>
class CustOutPaymPrenote_NACHA extends CustOutPaym_NACHA
{
    List                    journalList;
    NACHAFormats            fileNACHAFormat;
    CompanyBankAccountId    companyBankAccountId;

    #define.strPrenote("Prenote")
    #define.bankTransType("07")

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the batch control and Automated Clearing House (ACH) control records for prenotes.
    /// </summary>
    /// <remarks>
    ///    This method is called at the end of the Prenote output file creation to write the batch control and
    ///    ACH control records.
    /// </remarks>
    public void close()
    {
        file.writeExp(this.createBatchControlRecord());

        if (#DebugNACHA)
        {
            this.addBatchControlFieldPositions();
        }

        file.writeExp(this.createACH_ControlRecord());

        if (#DebugNACHA)
        {
            this.addACHControlFieldPositions();
        }

        this.createFillerRecordsToBlockTheFile();

        if (printControlReport)
        {
            this.printControlReport();
        }

        if (printPaymAdvice)
        {
            this.printPaymAdvice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPaym</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the <c>CustPaym</c> object for prenote generation.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> buffer used to set a <c>CustPaym</c> object.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CustPaym</c> class.
    /// </returns>
    public CustPaym custPaym(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustPaym                custPaym;
        LedgerJournalTrans      ledgerJournalTrans;
        BankAccountTable        bankAcctTable;
        CustTable               custTable;
        CustBankAccount         custBankAccount;
        LogisticsPostalAddress  postalAddress;

        ledgerJournalTrans = _ledgerJournalTrans;

        bankAcctTable = BankAccountTable::findByLedgerDimension(ledgerJournalTrans.parmOffsetLedgerDimension());

        if (!bankAcctTable
            && ledgerJournalTrans.BankAccountId)
        {
            bankAcctTable = BankAccountTable::find(ledgerJournalTrans.BankAccountId);
        }

        custTable       = CustTable::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount());
        custBankAccount = CustBankAccount::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount(), ledgerJournalTrans.CustVendBankAccountId);

        custPaym = new CustPaym();
        custPaym.ledgerJournalTrans                     (ledgerJournalTrans);
        custPaym.bankAccountTable                       (bankAcctTable);
        custPaym.custVendTable                          (custTable);
        custPaym.bankAccountMap                         (custBankAccount);
        custPaym.messageToSendersBank                   (custBankAccount.MsgToBank);
        custPaym.paymAmountInForeignCurrency            (ledgerJournalTrans.amount());
        custPaym.paymAmountInSendersCurrency            (CurrencyExchangeHelper::mstAmount(ledgerJournalTrans.amount(), ledgerJournalTrans.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown, ledgerJournalTrans.ExchRate));
        custPaym.paymCurrencyCode                       (Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode));
        custPaym.paymDate                               (ledgerJournalTrans.TransDate);
        custPaym.paymExchangeRate                       (custBankAccount.ExchRate);
        custPaym.paymExchangeRateReference              (custBankAccount.ExchRateRef);
        custPaym.paymId                                 (ledgerJournalTrans.PaymId);
        custPaym.paymNote                               (ledgerJournalTrans.PaymentNotes);
        custPaym.paymPurposeCode                        (ledgerJournalTrans.BankCentralBankPurposeCode ?
                                                         ledgerJournalTrans.BankCentralBankPurposeCode :
                                                         custTable.BankCentralBankPurposeCode);
        custPaym.paymPurposeText                        (ledgerJournalTrans.BankCentralBankPurposeText ?
                                                         ledgerJournalTrans.BankCentralBankPurposeText :
                                                         custTable.BankCentralBankPurposeText);
        custPaym.paymReference                          (ledgerJournalTrans.PaymReference);
        custPaym.recieversBankTextCode                  (custBankAccount.CustPaymentTextCode);
        custPaym.recieversBankAccountId                 (custBankAccount.AccountID);
        custPaym.recieversBankName                      (custBankAccount.Name);
        custPaym.recieversBankRegistrationNumber        (custBankAccount.RegistrationNum);

        unchecked (Uncheck::TableSecurityPermission)
        {
            custPaym.recieversBankAccount                   (custBankAccount.AccountNum);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            custPaym.recieversBankCodeType                  (custBankAccount.BankCodeType);
        }

        postalAddress = custTable.postalAddress();
        custPaym.recieversCompanyAddress                (postalAddress.Address);
        custPaym.recieversCompanyAddress1               (custPaym.textLine(postalAddress.Address,1));
        custPaym.recieversCompanyAddress2               (custPaym.textLine(postalAddress.Address,2));
        custPaym.recieversCompanyAddress3               (custPaym.textLine(postalAddress.Address,3));
        custPaym.recieversCountryRegionId               (postalAddress.CountryRegionId);
        custPaym.recieversZipCode                       (postalAddress.ZipCode);
        custPaym.recieversCountryRegionISOCode          (LogisticsAddressCountryRegion::find(postalAddress.CountryRegionId).isOcode);

        postalAddress = LogisticsLocationEntity::location2PostalAddress(custBankAccount.Location);
        custPaym.recieversBankAddress                   (postalAddress.Address);
        custPaym.recieversBankAddress1                  (custPaym.textLine(postalAddress.Address,1));
        custPaym.recieversBankAddress2                  (custPaym.textLine(postalAddress.Address,2));
        custPaym.recieversBankAddress3                  (custPaym.textLine(postalAddress.Address,3));
        custPaym.recieversCompanyName                   (custTable.name());
        custPaym.recieversIdentificationOfSender        (custTable.OurAccountNum);
        custPaym.recieversSwiftAddress                  (custBankAccount.swiftNo);
        custPaym.sendersBankAccount                     (bankAcctTable.AccountNum);
        custPaym.sendersBankRegistrationNumber          (bankAcctTable.RegistrationNum);
        custPaym.sendersBankName                        (bankAcctTable.Name);
        postalAddress = CompanyInfo::find().postalAddress();
        custPaym.sendersCompanyAddress                  (postalAddress.Address);
        custPaym.sendersCompanyAddress1                 (custPaym.textLine(postalAddress.Address,1));
        custPaym.sendersCompanyAddress2                 (custPaym.textLine(postalAddress.Address,2));
        custPaym.sendersCompanyAddress3                 (custPaym.textLine(postalAddress.Address,3));
        custPaym.sendersCompanyName                     (CompanyInfo::find().name());
        custPaym.sendersInvoiceNumber                   ();
        custPaym.sendersIdentificationOfReciever        (custTable.AccountNum);
        custPaym.sendersBanksIdentificationOfSender     (bankAcctTable.CompanyPaymId);
        custPaym.feeContractAccount                     (bankAcctTable.FeeContractAccount);
        custPaym.sendersBankIban                        (bankAcctTable.iban);

        unchecked (Uncheck::TableSecurityPermission)
        {
            custPaym.recieversBankIban                  (custBankAccount.BankIBAN);
        }

        return custPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymModeSpec</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>CustPaymModeSpec</c> class with payment specifications of the
    ///    <c>CCD</c>, <c>CTX</c>, or <c>PPD</c> enumeration values.
    /// </summary>
    /// <param name="_paymMode">
    ///    The payment method.
    /// </param>
    /// <param name="_paymSpec">
    ///    The payment specification.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CustVendPaymModeSpec</c> class.
    /// </returns>
    public CustVendPaymModeSpec findPaymModeSpec(PaymMode _paymMode, PaymSpec _paymSpec)
    {
        CustPaymModeSpec    custPaymModeSpec;

        custPaymModeSpec.PaymMode       =   #strPrenote;
        custPaymModeSpec.Specification  =   "@SYS128485";
        custPaymModeSpec.Name           =   "@SYS128485";

        switch (this.parmFileNACHAFormat())
        {
            case NACHAFormats::CCD:
                custPaymModeSpec.ClassId    =  classnum(CustOutPaymRecord_NACHA_CCD);
                custPaymModeSpec.Specification  =  enum2str(NACHAFormats::CCD);
                custPaymModeSpec.Name           =  enum2str(NACHAFormats::CCD);
                break;
            case NACHAFormats::CTX:
                custPaymModeSpec.ClassId    =  classnum(CustOutPaymRecord_NACHA_CTX);
                custPaymModeSpec.Specification  =  enum2str(NACHAFormats::CTX);
                custPaymModeSpec.Name           =  enum2str(NACHAFormats::CTX);
                break;
            case NACHAFormats::PPD:
                custPaymModeSpec.ClassId    =  classnum(CustOutPaymRecord_NACHA_PPD);
                custPaymModeSpec.Specification  =  enum2str(NACHAFormats::PPD);
                custPaymModeSpec.Name           =  enum2str(NACHAFormats::PPD);
                break;
        }

        return custPaymModeSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymModeTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>CustPaymModeTable</c> table. NACHA is a possible value of the export
    ///    format field.
    /// </summary>
    /// <param name="_paymMode">
    ///    The payment method.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for updating.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CustVendPaymModeSpec</c> table.
    /// </returns>
    public CustVendPaymModeTable findPaymModeTable(PaymMode _paymMode, boolean _forupdate = false)
    {
        CustPaymModeTable custPaymModeTable;

        custPaymModeTable.Name            =   #strPrenote;
        custPaymModeTable.PaymMode        =   #strPrenote;
        custPaymModeTable.parmPaymAccount(this.parmCompanyBankAccountId(), LedgerJournalACType::Bank);
        custPaymModeTable.ClassId         =   classnum(CustOutPaymPrenote_NACHA);
        custPaymModeTable.BankTransType   =   #bankTransType;
        custPaymModeTable.TypeOfDraft     =   TypeOfDraft::NoDraft;

        return custPaymModeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates payment lines for prenote generation using an instance of the
    ///    <c>BankPrenoteJournalList</c> object.
    /// </summary>
    public void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans  ledgerJournalTrans;
        CustOutPaymRecord   custOutPaymRecord;
        boolean             ok = true;

        List                valueList   =   this.parmJournalList();
        ListEnumerator      valueListEnumerator;
        BankPrenoteJournalList  prenoteJournalList;

        setprefix("@SYS128497");
        valueListEnumerator = valueList.getEnumerator();

        while (valueListEnumerator.moveNext())
        {
            prenoteJournalList = valueListEnumerator.current();
            ledgerJournalTrans = this.setLedgerJournalTrans(prenoteJournalList);

            custOutPaymRecord = CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                 ledgerJournalTrans.PaymSpec,
                                                                 this,
                                                                 this.custPaym(ledgerJournalTrans));
            custOutPaymRecord.parmFile(file);
            custOutPaymRecord.parmIsPrenote(true);

            setprefix(strfmt("@SYS128878",
                             ledgerJournalTrans.TransDate,
                             ledgerJournalTrans.parmAccount()));

            if (custOutPaymRecord.checkValues(ledgerJournalTrans, this.parmProgress()))
            {
                custOutPaymRecord.output();
                outPaymRecordList.addEnd(custOutPaymRecord);
            }
            else
            {
                ok = false;
            }

            if (!ok)
            {
                throw error("@SYS18447");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves accounts receivable prenote specific transaction code.
    /// </summary>
    /// <param name="_custBankAccount">
    ///    A customer bank account ID.
    /// </param>
    /// <returns>
    ///    An accounts receivable prenote specific transaction code.
    /// </returns>
    public int getTransactionCode(CustBankAccount _custBankAccount)
    {
        #define.ARPrenote(28)

        return #ARPrenote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public PaymInterfaceName interfaceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the specified file for prenotes.
    /// </summary>
    /// <remarks>
    ///    This method opens an existing file in append mode, or creates a new file.
    /// </remarks>
    public void open()
    {
        sequenceNumber = 0;

        // Open file for text-output
        if (file != null && file.getStream().Length > 0)
        {
            file = this.openExistingFile(file.getStream(), this.codepage());
        }
        else
        {
            file = this.openFile(this.codepage());
        }

        if (!file || file.status() != IO_Status::Ok)
        {
            // Error opening the file
            throw error(strfmt("@SYS73665", filename));
        }

        file.writeExp(this.createACH_HeaderRecord());

        if (#DebugNACHA)
        {
            this.addACHHeaderFieldPositions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyBankAccountId</Name>
				<Source><![CDATA[
    public CompanyBankAccountId parmCompanyBankAccountId(CompanyBankAccountId _companyBankAccountId = companyBankAccountId)
    {
        companyBankAccountId = _companyBankAccountId;

        return companyBankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileNACHAFormat</Name>
				<Source><![CDATA[
    public NACHAFormats parmFileNACHAFormat(NACHAFormats _fileNACHAFormat = fileNACHAFormat)
    {
        fileNACHAFormat = _fileNACHAFormat;

        return fileNACHAFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalList</Name>
				<Source><![CDATA[
    public List parmJournalList(List _journalList = journalList)
    {
        journalList = _journalList;

        return journalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the file name.
    /// </summary>
    /// <param name="_filename">
    ///    The name of the file.
    /// </param>
    public void setFileName(Filename _filename)
    {
        filename = _filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFile</Name>
				<Source><![CDATA[
    private void setFile(StreamIo _file)
    {
        file = _file;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets values in the <c>LedgerJournalTrans</c> object that will be used for prenote generation.
    /// </summary>
    /// <param name="_prenoteJournalList">
    ///    An instance of the <c>BankPrenoteJournalList</c> class that is used to set values in the
    ///    <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    ///    A <c>LedgerJournalTrans</c> record.
    /// </returns>
    public LedgerJournalTrans setLedgerJournalTrans(BankPrenoteJournalList _prenoteJournalList)
    {
        LedgerJournalTrans ledgerJournalTrans;

        ledgerJournalTrans.JournalNum           =   ledgerJournalId;
        ledgerJournalTrans.parmAccount(_prenoteJournalList.parmAccountNum(), LedgerJournalACType::Cust, CompanyInfo::find().company());
        ledgerJournalTrans.LineNum              =   _prenoteJournalList.parmLineNum();
        ledgerJournalTrans.Txt                  =   #strPrenote;
        ledgerJournalTrans.AmountCurCredit      =   0;
        ledgerJournalTrans.CurrencyCode         =   Ledger::accountingCurrency();
        ledgerJournalTrans.PaymMode             =   #strPrenote;
        ledgerJournalTrans.PaymSpec             =   enum2str(this.parmFileNACHAFormat());
        ledgerJournalTrans.parmOffsetAccount(this.parmCompanyBankAccountId(), LedgerJournalACType::Bank);
        ledgerJournalTrans.BankAccountId        =   this.parmCompanyBankAccountId();
        ledgerJournalTrans.CustVendBankAccountId=   _prenoteJournalList.parmBankAccountId();
        ledgerJournalTrans.ExchRate             =   0;
        ledgerJournalTrans.TransDate            =   DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the state of the internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called; optional
    /// </param>
    /// <returns>
    /// true if the internal variables are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method must validate the state of the internal variables. This method is called before closing
    /// the dialog, and should be called in the <c>run</c> method. It must only contain code that adds
    /// warnings to the Infolog. The throw command is not allowed in this method. The method should
    /// generally return errors using the <c>Global::CheckFailed</c> method. Export formats that are
    /// designed to handle only one method of payment per payment media must call the
    /// <c>checkUniquePaymMode</c> method.
    /// </remarks>
    public boolean validate(Object _calledFrom = null)
    {
        boolean                 ret;
        DimensionAttributeValue dimensionAttributeValue;

        ret = super();

        select forupdate IsSuspended from dimensionAttributeValue
            where dimensionAttributeValue.EntityInstance == LedgerDimensionFacade::getMainAccountFromLedgerDimension(bankAccountTable.LedgerDimension).RecId
               && dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        if (bankAccountTable.AccountID)
        {
            ret = BankAccountTable::checkIsActive(bankAccountTable.AccountID);
        }

        if (ret && dimensionAttributeValue.IsSuspended == NoYes::Yes)
        {
            info(strfmt("@SYS128880", bankAccountTable.AccountID));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrenote</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Bypasses existing file validation.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean validatePrenote()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVendSumForPaym</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>CustOutPaymPrenote_NACHA</c> class based on the method of payment
    ///    specified.
    /// </summary>
    /// <param name="_sumForPaym">
    ///    An instance of the <c>CustVendSumForPaym</c> class.
    /// </param>
    /// <param name = "_file">
    ///    A <c>StreamIo</c> to be used to append to a file; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CustOutPaymPrenote_NACHA</c> class.
    /// </returns>
    public static CustOutPaymPrenote_NACHA newCustVendSumForPaym(CustVendSumForPaym _sumForPaym, StreamIo _file = null)
    {
        CustVendPaymModeClassId classId;
        CustOutPaymPrenote_NACHA custOutPaymPrenote_NACHA;
        CustVendPaymModeTable custVendPaymModeTable;

        custVendPaymModeTable = _sumForPaym.paymModeTable();
        classId = custVendPaymModeTable.ClassId;

        if (!classId)
        {
            throw error("@SYS82371");
        }

        custOutPaymPrenote_NACHA = CustVendOutPaym::construct(classId);

        custOutPaymPrenote_NACHA.parmBankAccountID(_sumForPaym.parmBankAccountID());

        if (_file != null)
        {
            custOutPaymPrenote_NACHA.setFile(_file);
        }

        return custOutPaymPrenote_NACHA;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>