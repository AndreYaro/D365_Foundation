<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransferOrderCreationLineOnhandElement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSTransferOrderCreationLineOnhandElement</c> class contains information about the physical onhand by dimensions.
/// </summary>
internal class WHSTransferOrderCreationLineOnhandElement
{
    public InventQtyPhysicalOnhand PhysicalOnhand;
    public PdsCWPhysicalInvent CatchWeightPhysicalOnhand;

    public WHSInventStatusId InventStatusId;
    private InventDim productAndAboveLocTrackingDimensions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the physical onhand.
    /// </summary>
    /// <param name = "_onhandElement">The onhand information that should be added.</param>
    public void addOnhand(WHSTransferOrderCreationLineOnhandElement _onhandElement)
    {
        PhysicalOnhand += _onhandElement.PhysicalOnhand;
        CatchWeightPhysicalOnhand += _onhandElement.CatchWeightPhysicalOnhand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsFromElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimensions for the onhand information.
    /// </summary>
    /// <param name = "_onhandElement">The onhand information that should be used when initializing the dimensions.</param>
    public void initDimensionsFromElement(WHSTransferOrderCreationLineOnhandElement _onhandElement)
    {
        InventStatusId = _onhandElement.InventStatusId;
        productAndAboveLocTrackingDimensions = _onhandElement.productAndAboveLocTrackingDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimensions on a inventory dimension record.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension record that should be initialized.</param>
    public void initInventDim(InventDim _inventDim)
    {
        _inventDim.InventStatusId = InventStatusId;
        _inventDim.initFromInventDim(productAndAboveLocTrackingDimensions, this.dimEnabledFiledList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsFromInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimensions on a inventory onhand record.
    /// </summary>
    /// <param name = "_inventSum">The inventory onhand record that should be initialized.</param>
    public void initDimensionsFromInventSum(InventSum _inventSum)
    {
        InventStatusId = _inventSum.InventStatusId;
        productAndAboveLocTrackingDimensions.initFromInventSum(_inventSum, this.dimEnabledFiledList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimensions on a inventory dimension record.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension record that should be initialized.</param>
    public void initDimensionsFromInventDim(InventDim _inventDim)
    {
        InventStatusId = _inventDim.InventStatusId;
        productAndAboveLocTrackingDimensions.initFromInventDim(_inventDim, this.dimEnabledFiledList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the dimensions should be used for the onhand information.
    /// </summary>
    /// <returns>true if the dimensions should be used; otherwise false</returns>
    public boolean useDimensions()
    {
        return 
            InventStatusId ||
            productAndAboveLocTrackingDimensions.anyProductDimensionSpecified() ||
            productAndAboveLocTrackingDimensions.anyTrackingDimensionSpecified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a key representing an unique onhand object.
    /// </summary>
    /// <returns>The key representing an unique onhand object.</returns>
    public str key()
    {
        if (WHSTransferOrderCreationLineOnhandHashDimInsteadOfStringValueFlight::instance().isEnabled())
        {
            InventDim inventDimForKeyValue;
            inventDimForKeyValue = this.initInventDimFromDimEnum(inventDimForKeyValue, InventProductDimension::getEnumeratorForEnabledDimensions());
            inventDimForKeyValue = this.initInventDimFromDimEnum(inventDimForKeyValue, InventTrackingDimension::getEnumeratorForEnabledDimensions());
            inventDimForKeyValue.InventStatusId = InventStatusId;

            return inventDimForKeyValue.hashKey();
        }
        else
        {
            str key = strRTrim(InventStatusId) + '~';

            InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
            key = this.addKeyFromEnumerator(key, enum);

            enum = InventTrackingDimension::getEnumeratorForEnabledDimensions();
            key = this.addKeyFromEnumerator(key, enum);

            return key;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSTransferOrderCreationLineOnhandElement construct()
    {
        return new WHSTransferOrderCreationLineOnhandElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBelowLocationDimensions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void clearBelowLocationDimensions(ItemId _itemId) 
    {
        productAndAboveLocTrackingDimensions.clearBelowLocationDim(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimEnabledFiledList</Name>
				<Source><![CDATA[
    private List dimEnabledFiledList()
    {
        List dimensionEnabledFieldList = InventDim::dimProductDimensionEnabledFieldList();

        dimensionEnabledFieldList = List::merge(dimensionEnabledFieldList, InventDim::dimTrackingDimEnabledFieldList());

        return dimensionEnabledFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addKeyFromEnumerator</Name>
				<Source><![CDATA[
    private str addKeyFromEnumerator(str _key, InventDimensionEnumerator enum)
    {
        while (enum.moveNext())
        {
            FieldId dimensionFieldId = enum.currentInventDimFieldId();
                        
            _key = _key + productAndAboveLocTrackingDimensions.(dimensionFieldId) + '~';           
        }

        return _key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimFromDimEnum</Name>
				<Source><![CDATA[
    private InventDim initInventDimFromDimEnum(InventDim _inventDim, InventDimensionEnumerator enum)
    {
        while (enum.moveNext())
        {
            FieldId dimensionFieldId = enum.currentInventDimFieldId();
                        
            _inventDim.(dimensionFieldId) = productAndAboveLocTrackingDimensions.(dimensionFieldId);
        }

        return _inventDim;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>