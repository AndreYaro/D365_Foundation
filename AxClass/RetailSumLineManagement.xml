<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSumLineManagement</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailSumLineManagement</c> class gets the item variant information
/// and inserts a purchase order line.
/// </summary>
class RetailSumLineManagement
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDetailsFromVariants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the details from the item variants and creates purchase order lines.
    /// </summary>
    /// <param name="_tFSHSumLines">
    /// An instance of <c>RetailSumLines</c> table.
    /// </param>
    void createDetailsFromVariants(RetailSumLines _tFSHSumLines)
    {
        InventDimCombination        tInventDimComb;
        EcoResDistinctProductVariant ecoResDistinctProductVariant;
        RetailTMPInventDimCombination  tTMPInventDimComb;

        RetailWeight               iTotalWeight;
        int                     iNumberOfVariants;
        Qty                     iTotalVirtualQty;

        using(var telemetry = RetailInstrumentationSegment::construct(classId2Name(ClassIdGet(this)), funcName()))
        {
            eventSource.EventWriteMerchandRetailSumLineManagementCreateDetails(classId2Name(ClassIdGet(this)), funcName(), _tFSHSumLines.RecId);

            ttsbegin;

            if ( _tFSHSumLines.detailsExist() )
            _tFSHSumLines.deleteDetails();

            // Get total number and weight of item variants
            [iNumberOfVariants, iTotalWeight] = this.totalOfVariants(_tFSHSumLines.ItemId);

            if (iNumberOfVariants == 0)
            {
                this.insertPurchLine(_tFSHSumLines.PurchId,
                                 _tFSHSumLines.ItemId,
                                 _tFSHSumLines.PurchQty,
                                 _tFSHSumLines.PurchUnit,
                                 _tFSHSumLines.InventLocationId,
                                 _tFSHSumLines.LineNum,
                                 _tFSHSumLines.LinePercent,
                                 _tFSHSumLines.PurchPrice,
                                 null);
                ttscommit;

                eventSource.EventWriteMerchandisingGenericMessage(classId2Name(ClassIdGet(this)), funcName(), 'Item has no variants. One purchase order line has been created.');
                return;
            }
            else
            {
                eventSource.EventWriteMerchandisingGenericMessageCount(classId2Name(ClassIdGet(this)), funcName(), 'Item has variants', iNumberOfVariants);
            }

            // Calc qty for each variant
            while select * from tInventDimComb
            index ItemIdx
            where tInventDimComb.ItemId == _tFSHSumLines.ItemId
            join RetaiTotalWeight from ecoResDistinctProductVariant
                where ecoResDistinctProductVariant.RecId == tInventDimComb.DistinctProductVariant
            {
                tTMPInventDimComb.VariantId     = tInventDimComb.RetailVariantId;

                // Distribution by weight
                if ( iTotalWeight )
                {
                    tTMPInventDimComb.VirtualQty     = _tFSHSumLines.PurchQty * ecoResDistinctProductVariant.RetaiTotalWeight / iTotalWeight;
                    tTMPInventDimComb.VirtualQtyDiff = decround(tTMPInventDimComb.VirtualQty,0) -  tTMPInventDimComb.VirtualQty;
                    tTMPInventDimComb.VirtualQty     = decround(tTMPInventDimComb.VirtualQty,0);
                }
                // No weight - even distribution
                else
                {
                    tTMPInventDimComb.VirtualQty     = _tFSHSumLines.PurchQty / iNumberOfVariants;
                    tTMPInventDimComb.VirtualQtyDiff = decround(tTMPInventDimComb.VirtualQty,0) -  tTMPInventDimComb.VirtualQty;
                    tTMPInventDimComb.VirtualQty     = decround(tTMPInventDimComb.VirtualQty,0);
                }

                iTotalVirtualQty                    += tTMPInventDimComb.VirtualQty;

                tTMPInventDimComb.doinsert();
            }

            // Create purchlines and increase/decrease qty based on purchaseqyt vs. total calculated qty
            if (abs(iTotalVirtualQty) < abs(_tFSHSumLines.PurchQty))
            {
                while select * from tTMPInventDimComb
                order by VirtualQtyDiff asc,  VirtualQty asc
                where ( tTMPInventDimComb.VirtualQty != 0.0 || tTMPInventDimComb.VirtualQtyDiff != 0)
                join tInventDimComb
                index hint VariantIdx
                where tInventDimComb.RetailVariantId == tTMPInventDimComb.VariantId
                {
                    if (abs(iTotalVirtualQty) < abs(_tFSHSumLines.PurchQty))
                    {
                        iTotalVirtualQty    += 1;
                        tTMPInventDimComb.VirtualQty += 1;
                    }

                    if ( abs(tTMPInventDimComb.VirtualQty) <= 0 )
                    continue;

                    this.insertPurchLine(_tFSHSumLines.PurchId,
                                    _tFSHSumLines.ItemId,
                                    tTMPInventDimComb.VirtualQty,
                                    _tFSHSumLines.PurchUnit,
                                    _tFSHSumLines.InventLocationId,
                                    _tFSHSumLines.LineNum,
                                    _tFSHSumLines.LinePercent,
                                    _tFSHSumLines.PurchPrice,
                                    tInventDimComb);
                }
            }
            else
            {
                while select * from tTMPInventDimComb
                order by VirtualQtyDiff desc,  VirtualQty asc
                where tTMPInventDimComb.VirtualQty != 0.0
                join tInventDimComb
                where tInventDimComb.RetailVariantId == tTMPInventDimComb.VariantId
                {
                    if (abs(iTotalVirtualQty) > abs(_tFSHSumLines.PurchQty))
                    {
                        iTotalVirtualQty    -= 1;
                        tTMPInventDimComb.VirtualQty -= 1;
                    }

                    if ( abs(tTMPInventDimComb.VirtualQty )<= 0 )
                    continue;

                    this.insertPurchLine(_tFSHSumLines.PurchId,
                                    _tFSHSumLines.ItemId,
                                    tTMPInventDimComb.VirtualQty,
                                    _tFSHSumLines.PurchUnit,
                                    _tFSHSumLines.InventLocationId,
                                    _tFSHSumLines.LineNum,
                                    _tFSHSumLines.LinePercent,
                                    _tFSHSumLines.PurchPrice,
                                    tInventDimComb);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a purchase order line.
    /// </summary>
    /// <param name="_sPurchId">
    /// Reference number for the Purchase order.
    /// </param>
    /// <param name="_sItemId">
    /// Reference number for the Item.
    /// </param>
    /// <param name="_rQty">
    /// Value for the Quantity.
    /// </param>
    /// <param name="_sPurchUnit">
    /// Value for the unit of item.
    /// </param>
    /// <param name="_sInventLocationId">
    /// Value for the Inventory location.
    /// </param>
    /// <param name="_rLineNum">
    /// Value for the Purchase Line Identification number.
    /// </param>
    /// <param name="_rLinePercent">
    /// Value for the Purchase line discount.
    /// </param>
    /// <param name="_rPurchPrice">
    /// value for the Purchase price.
    /// </param>
    /// <param name="_tInventDimComb">
    /// An instance of <c>InventDimCombination</c> table.
    /// </param>
    void insertPurchLine(   PurchId         _sPurchId,
                            ItemId          _sItemId,
                            Qty             _rQty,
                            PurchUnit       _sPurchUnit,
                            InventLocationId _sInventLocationId,
                            LineNum         _rLineNum,
                            PurchLinePercent _rLinePercent,
                            PurchPrice      _rPurchPrice,
                            InventDimCombination _tInventDimComb)
    {
        PurchLine               tPurchLine, purchLine;
        InventDim               tInventDim;

        tPurchLine.ItemId       = _sItemId;
        tPurchLine.PurchId      = _sPurchId;

        if (!tPurchLine.LineNumber)
        {
                select maxof(LineNumber) from purchLine
                    index hint PurchLineIdx
                    where purchLine.PurchId == _sPurchId;

            tPurchLine.LineNumber = purchLine.LineNumber + 1;
        }
        tPurchLine.initFromPurchTable(tPurchLine.purchTable());
        tPurchLine.initFromVendTable(tPurchLine.vendTable_OrderAccount());

        tPurchLine.initFromInventTable(tPurchLine.inventTable());

        tPurchLine.PurchQty     = _rQty;

        tPurchLine.PurchUnit    = _sPurchUnit;

        tPurchLine.qtyOrdered = tPurchLine.calcQtyOrdered();

        tPurchLine.remainPurchPhysical  = tPurchLine.purchQty;
        tPurchLine.remainPurchFinancial = 0;
        tPurchLine.remainInventPhysical = tPurchLine.qtyOrdered;

        EcoResProductDimGroupSetup::copyProductDimensionsForItem(_tInventDimComb.ItemId, _tInventDimComb.inventDim(), tInventDim);
        if (_sInventLocationId)
        {
            tInventDim.InventLocationId = _sInventLocationId;
            tInventDim.InventSiteId     = InventLocation::find(_sInventLocationId).InventSiteId;
        }

        tInventDim = InventDim::findOrCreate(tInventDim);

        tPurchLine.InventDimId  =   tInventDim.inventDimId;

        tPurchLine.RetailLineNumEx1   =   _rLineNum;

        tPurchLine.VariantId    =   _tInventDimComb.RetailVariantId;

        if (_rLinePercent || _rPurchPrice)
        {
            tPurchLine.LinePercent  = _rLinePercent;
            tPurchLine.PurchPrice   = _rPurchPrice;
            tPurchLine.LineAmount   = tPurchLine.calcLineAmountForced();
        }
        else
        {
            tPurchLine.setPriceDisc(tPurchLine.inventDim());
        }

        if (tPurchLine.validateWrite())
            tPurchLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOfVariants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total weight for all the variants of a item.
    /// </summary>
    /// <param name="_sItemId">
    /// Reference number for the Item.
    /// </param>
    /// <returns>
    /// A container holding the Item variant information.
    /// </returns>
    container totalOfVariants(ItemId   _sItemId)
    {
        EcoResDistinctProductVariant ecoResDistinctProductVariant;
        InventDimCombination        tInventDimComb;

        select ItemId from tInventDimComb
            group by ItemId
            where tInventDimComb.ItemId == _sItemId
            join sum(RetaiTotalWeight), count(recid) from ecoResDistinctProductVariant
            where ecoResDistinctProductVariant.RecId == tInventDimComb.DistinctProductVariant;

        if ( !ecoResDistinctProductVariant.RecId )
            return [0,0];
        else
            return [ecoResDistinctProductVariant.RecId, ecoResDistinctProductVariant.RetaiTotalWeight];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>