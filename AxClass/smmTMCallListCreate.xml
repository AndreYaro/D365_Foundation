<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmTMCallListCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmmTMCallListCreate extends RunBaseBatch implements BatchRetryable
{
    smmTMCallListID     callListId;
    QueryRun            qRun;

    #define.CurrentVersion(5)
    #localmacro.CurrentList
        callListId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description from the current class by calling the static description method of the
    /// class if there is one.
    /// </summary>
    /// <returns>
    /// The description of the current class.
    /// </returns>
    /// <remarks>
    /// The static <c>RunBase::description</c> method is typically used to obtain the description of a
    /// class because a class does not have to be initialized to call it.
    /// </remarks>
    public ClassDescription caption()
    {
        return smmTMCallListCreate::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        // Create call list
        DialogRunbase dialog  = new DialogRunbase("@SYS80659", this);

        dialog.addMenuItemButton(MenuItemType::Display, menuitemdisplaystr(RunBaseQueryDialog), DialogMenuItemGroup::BottomGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        qRun = new QueryRun(querystr(SmmTMCallListQuery));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, (qRun ? qRun.pack() : connull())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a dialog
    /// box. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it in
    /// the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return qRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        smmTMCallListCreate::processOnServer(qRun.pack(),callListId,this.isInBatch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job is run by using the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallListId</Name>
				<Source><![CDATA[
    void setCallListId(smmTMCallListID _callListId)
    {
        callListId = _callListId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version     = RunBase::getVersion(packedClass);
        container       packedQuery;
        boolean         ret;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    qRun = new QueryRun(packedQuery);
                }

                ret = true;
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // Call list file
        return "@SYS80679";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        smmTMCallListGroup  smmTMCallListGroup;
        smmTMCallListCreate callListCreate = new smmTMCallListCreate();

        if (args && args.dataset() == tablenum(smmTMCallListGroup))
        {
            smmTMCallListGroup = args.record();

            callListCreate.getLast();
            callListCreate.setCallListId(smmTMCallListGroup.CallListID);

            if (callListCreate.prompt())
            {
                callListCreate.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOnServer</Name>
				<Source><![CDATA[
    private static void processOnServer(container _qRunPacked, smmTMCallListID _callListId, boolean _inBatch)
    {
        ContactPerson               contactPerson;
        DirPartyTable               dirPartyTable;
        smmTMCallListTable          smmTMCallListTable;
        smmTMCallListGroup          smmTMCallListGroup;
        QueryRun                    callListQR;

        smmTMCallListGroup = smmTMCallListGroup::find(_callListId);

        callListQR = new QueryRun(_qRunPacked);
        while (callListQR.next())
        {
            // Get data from query
            dirPartyTable       = callListQR.get(tablenum(DirPartyTable));
            contactPerson = callListQR.get(tablenum(ContactPerson));

            if (dirPartyTable && DirPartyTableHelper::isCustomerOrRelationOrVendor(dirPartyTable.RecId) && contactPerson && !smmTMCallListTable::find(smmTMCallListGroup.CallListID,dirPartyTable.RecId,contactPerson.ContactPersonId))
            {
                // Add contact to the call list
                smmTMCallListTable.CallListId           = smmTMCallListGroup.CallListID;
                smmTMCallListTable.ContactPersonId      = contactPerson.ContactPersonId;
                smmTMCallListTable.Party              = dirPartyTable.RecId;
                smmTMCallListTable.CallStatus           = smmTMCallStatus::Open;
                smmTMCallListTable.CallPlannedDateTime  = smmTMCallListGroup.FromDateTime;
                smmTMCallListTable.insert(_inBatch);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>