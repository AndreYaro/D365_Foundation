<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlCleanUpDraftProc</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetControlCleanUpDraftProc</c> is a budget control stored procedure.
/// </summary>
[ExportMetadata(enumStr(BudgetControlSQLObjectType), BudgetControlSQLObjectType::StoredProcedure),
 ExportAttribute(identifierstr(Dynamics.AX.Application.BudgetControlISQLObject))]
internal final class BudgetControlCleanUpDraftProc implements BudgetControlISQLObject
{
    private const str procName = 'BudgetControlCleanUpDraftProc';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    public str getName()
    {
        return procName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefinition</Name>
				<Source><![CDATA[
    public str getDefinition()
    {
        str sqlStatementText;

        sqlStatementText = @"
    CREATE PROCEDURE [BudgetControlCleanUpDraftProc]
    (
         @PartitionId                   BIGINT
        ,@BudgetCheckGroup              BIGINT
        ,@ApplockTimeoutMs              INT
        ,@IsSerialize                   INT
        ,@logErrorFl                    CHAR(1)
        ,@ReturnCode                    INT OUTPUT
        ,@ReturnMsg                     VARCHAR(128) OUTPUT
    )

    AS

    SET NOCOUNT ON;

    -- declarations

    DECLARE  @SPName                    VARCHAR(126) = OBJECT_NAME(@@PROCID) -- the name of the stored proc
            ,@RetCode                   INT = 0
            ,@ResultCode_Succesful      INT = 0
            ,@ResultCode_Error          INT = -1
            ,@ErrorTrying               VARCHAR(128) -- string describing command that failed
            ,@Rowcount                  INT -- local variable for @@ROWCOUNT
            ,@Error_Number              INT -- from ERROR_NUMBER()
            ,@Error_Line                INT -- from ERROR_LINE()
            ,@Error_State               INT = 1 -- from ERROR_STATE()
            ,@Error_Severity            INT = 16 -- from ERROR_SEVERITY()
            ,@Error_Procedure           NVARCHAR(126) = OBJECT_NAME(@@PROCID) -- from ERROR_PROCEDURE()
            ,@ErrorMessage              NVARCHAR(4000) = N'' -- from ERROR_MESSAGE()
            ,@isIncludeErrorLineNum     CHAR(1) = 'Y'
            ,@BudgetCleanUpDraftBuildErrorMsg  NVARCHAR(4000)

            ,@IsAnyDeleted                                          BIT         = 0

            ,@IsApplockHeld_Main                                    BIT         = 0
            ,@applock_LockMode                                      NVARCHAR(32)

            ,@ModifiedDateTime                                      DATETIME

            ,@rowcount_BudgetSource                                 INT         = 0
            ,@rowcount_BudgetSourceTracking                         INT         = 0
            ,@rowcount_BudgetSourceTrackingDetail                   INT         = 0
            ,@rowcount_BudgetSourceTrackingRelievingDetail          INT         = 0
            ,@rowcount_Detail                                       INT         = 0
    ;

    DECLARE  @_CATEGORY_Orig                                        INT     = 1
            ,@_CATEGORY_Amend                                       INT     = 2
            ,@_CATEGORY_XferIn                                      INT     = 3
            ,@_CATEGORY_XferOut                                     INT     = 4
            ,@_CATEGORY_CFwd                                        INT     = 5
            ,@_CATEGORY_PreEnc                                      INT     = 6
            ,@_CATEGORY_Enc                                         INT     = 7
            ,@_CATEGORY_Act                                         INT     = 8
            ,@_CATEGORY_EncReduction                                INT     = 11

            -- <PubSect>
            ,@_CATEGORY_Apportionment                               INT     = 12
            ,@_CATEGORY_PreliminaryBudget                           INT     = 13
            -- </PubSect>

            ,@_STATUS_Draft                                         INT     = 1
            ,@_STATUS_Confirmed                                     INT     = 3

            ,@_APPLOCKRESOURCE_Main                                 NVARCHAR(255)   = N'BudgetCheck_Main'

            ,@_TABLE_BudgetSource                                   SMALLINT    = 1
            ,@_TABLE_BudgetSourceTracking                           SMALLINT    = 2
            ,@_TABLE_BudgetSourceTrackingDetail                     SMALLINT    = 3
            ,@_TABLE_BudgetSourceTrackingRelievingDetail            SMALLINT    = 4

            ,@_RETCODE_IsFailure        INT = -1
            ,@_RETCODE_IsSuccess        INT = 0
    ;

    DECLARE @Keys    TABLE
        ([Table]                SMALLINT NOT NULL
        ,[RecId]                BIGINT NOT NULL
        ,PRIMARY KEY ([Table],[RecId])
        )
    ;

    CREATE TABLE #BSTDStage
        ([ID]                                           INT IDENTITY (1,1) PRIMARY KEY CLUSTERED
        ,[IsRelieved]                                   BIT
        ,[BudgetSourceTrackingDetail]                   BIGINT
        ,[BudgetSourceTrackingRelievingDetail]          BIGINT
        ,[BudgetSourceTracking]                         BIGINT
        ,[BudgetSource]                                 BIGINT
        ,[IsSummarized]                                 BIT NOT NULL
        ,[IntegratorType]                               INT
        ,[Status]                                       INT
        ,[IsDraft]  AS
            (CASE WHEN [Status] = 1 THEN 1 ELSE 0 END) PERSISTED
        ,[Category]                                     INT
        ,[TrackingDate]                                 DATETIME
        ,[BudgetModelType]                              INT
        ,[BudgetModelID]                                NVARCHAR(10) COLLATE database_default
        ,[IsDefaultBudgetModel]                         INT
        ,[TrackingUser]                                 NVARCHAR(20) COLLATE database_default
        ,[BudgetModelSubModelID]                        NVARCHAR(10) COLLATE database_default
        ,[BudgetModelDataareaId]                        NCHAR(4) COLLATE database_default   -- special capitalization to prevent issues due to collation
        ,[TrackingNumber]                               NVARCHAR(255) COLLATE database_default
        ,[IsSimulation]                                 INT
        ,[PrimaryLedger]                                BIGINT
        ,[BudgetSourceLedgerDimension]                  BIGINT
        ,[BudgetControlLedgerDimension]                 BIGINT
        ,[AccountingCurrencyAmountOrig]                 NUMERIC(32,16)
        ,[AmountSign]                                   SMALLINT
        ,[IsReturnOfBudgetFunds]                        INT
        ,[IsCarryForward]                               INT
        ,[IsDeletePending]                              INT
        ,[MaxCarryForward]                              INT
        ,[IsProcessed]                                  BIT
        ,[BudgetControlRule]                            BIGINT
        ,[BudgetGroupMember]                            BIGINT
        ,[BudgetGroup]                                  BIGINT
        ,[IsOverrunApproved]                            INT
        ,[WarnOnOverBudgetThreshold]                    INT
        ,[AccountingCurrencyAmount] AS
            [AccountingCurrencyAmountOrig] * [AmountSign] PERSISTED
        ,[BudgetCheckGroupSequence]                     INT
        )
    ;

    -- make a best effort to release applocks

    IF @IsSerialize = 1
      BEGIN
        SELECT @applock_LockMode = N'Exclusive'
      END;
    ELSE
      BEGIN
        SELECT @applock_LockMode = N'Shared'
      END;

    BEGIN TRY -- make a best effort to release the applocks
        SELECT @RetCode = 0;
        WHILE @RetCode = 0
          BEGIN
            EXEC @RetCode = sp_releaseapplock
                @DBPrincipal = N'public'
                ,@Resource = @_APPLOCKRESOURCE_Main
                ,@LockOwner = N'Transaction'
            ;
          END;
    END TRY
    BEGIN CATCH
    END CATCH;

    BEGIN TRY

        SELECT @ErrorTrying = N'Insert @Keys - BudgetSource';
        INSERT INTO @Keys
            ([Table]
            ,[RecId]
            )
        SELECT  @_TABLE_BudgetSource
                ,bs.[RECID]
        FROM    [BUDGETSOURCE] bs
        WHERE   bs.[BUDGETCHECKGROUP] = @BudgetCheckGroup
                AND bs.[PARTITION] = @PartitionId
        ;

        SELECT @rowcount_BudgetSource = @@ROWCOUNT;
        IF @rowcount_BudgetSource = 0
            BEGIN
                SELECT @ErrorTrying = N'No BudgetSource rows for BudgetCheckGroup = '
                                + CAST(@BudgetCheckGroup AS NVARCHAR);
                GOTO lblErrorTrap;
            END;

        SELECT @ErrorTrying = N'Insert @Keys - BudgetSourceTracking';
        INSERT INTO @Keys
            ([Table]
            ,[RecId]
            )
        SELECT  @_TABLE_BudgetSourceTracking
                ,bst.[RECID]
        FROM    [BUDGETSOURCETRACKING] bst
        WHERE bst.[RECID] IN
            (   SELECT MAX(bst1.[RECID])
                FROM [BUDGETSOURCETRACKING] bst1
                JOIN @Keys t
                    ON bst1.[BUDGETSOURCE] = t.[RecId]
                WHERE t.[Table] = @_TABLE_BudgetSource
                    AND bst1.[PARTITION] = @PartitionId
                GROUP BY t.[RecId]
            )
            AND bst.[PARTITION] = @PartitionId
        ;

        SELECT @rowcount_BudgetSourceTracking = @@ROWCOUNT;
        IF @rowcount_BudgetSourceTracking > 0
          BEGIN

            SELECT @ErrorTrying = N'Insert @Keys - BudgetSourceTrackingDetail/DraftCleanup run';
            INSERT INTO @Keys
                ([Table]
                ,[RecId]
                )
            SELECT  @_TABLE_BudgetSourceTrackingDetail
                    ,bstd.[RECID]
            FROM    [BUDGETSOURCETRACKINGDETAIL] bstd
            JOIN    @Keys t
                ON      t.[RecId] = bstd.[BUDGETSOURCETRACKING]
            WHERE   t.[Table] = @_TABLE_BudgetSourceTracking
            AND     bstd.[PARTITION] = @PartitionId
            AND     bstd.[ISDELETEPENDING]  = 1
            ;

            SELECT @rowcount_BudgetSourceTrackingDetail = @@ROWCOUNT;

            SELECT @ErrorTrying = N'Insert @Keys - BudgetSourceTrackingRelievingDetail/DraftCleanup run';
            INSERT INTO @Keys
                ([Table]
                ,[RecId]
                )
            SELECT  @_TABLE_BudgetSourceTrackingRelievingDetail
                    ,bstrd.[RECID]
            FROM    [BUDGETSOURCETRACKINGRELIEVINGDETAIL] bstrd
            JOIN    @Keys t
                ON      t.[RecId] = bstrd.[RELIEVINGBUDGETSOURCETRACKING] --0925 to relieving from relieved
            WHERE   t.[Table] = @_TABLE_BudgetSourceTracking
            AND     bstrd.[PARTITION] = @PartitionId
            AND     bstrd.[ISDELETEPENDING] = 1
            ;

            SELECT  @rowcount_BudgetSourceTrackingRelievingDetail = @@ROWCOUNT;
            SELECT  @rowcount_detail = @rowcount_BudgetSourceTrackingDetail
                      + @rowcount_BudgetSourceTrackingRelievingDetail
            ;

            IF @rowcount_Detail = 0
              BEGIN
                SELECT @ErrorTrying = N'No Detail rows for BudgetCheckGroup = '
                                    + CAST(@BudgetCheckGroup AS NVARCHAR);
                GOTO lblErrorTrap;
              END;
          END;

    END TRY
    BEGIN CATCH
        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH;

    BEGIN TRY -- serialize budget check main
        SELECT   @ErrorTrying = N'catch: get applock ' + @_APPLOCKRESOURCE_Main;
        EXEC @RetCode = sp_getapplock
            @DBPrincipal = N'public'
            ,@Resource = @_APPLOCKRESOURCE_Main
            ,@LockMode = @applock_LockMode
            ,@LockOwner = N'Transaction'
            ,@LockTimeout = @ApplockTimeoutMs
        ;
        IF @RetCode < 0
          BEGIN
            SELECT @ErrorTrying = N'get applock' + @_APPLOCKRESOURCE_Main + N' returned ' + CAST(@RetCode AS NVARCHAR);
            GOTO lblErrorTrap;
          END;

        SELECT @IsApplockHeld_Main = 1;

    END TRY
    BEGIN CATCH
        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH; -- serialize budget check main

    BEGIN TRY

    --======
    -- BG L02.01:Populate work table
    --======
        SELECT   @ErrorTrying = N'Initial insert #BSTDStage - BudgetSourceTrackingDetail';
        INSERT INTO #BSTDStage
            (    [IsRelieved]
                ,[BudgetSourceTrackingDetail]
                ,[BudgetSourceTracking]
                ,[BudgetSource]
                ,[IsSummarized]
                ,[IntegratorType]
                ,[Status]
                ,[Category]
                ,[TrackingDate]
                ,[BudgetModelType]
                ,[BudgetModelID]
                ,[IsDefaultBudgetModel]
                ,[TrackingUser]
                ,[BudgetModelSubModelID]
                ,[BudgetModelDataareaId]
                ,[TrackingNumber]
                ,[IsSimulation]
                ,[PrimaryLedger]
                ,[BudgetSourceLedgerDimension]
                ,[BudgetControlLedgerDimension]
                ,[AccountingCurrencyAmountOrig]
                ,[AmountSign]
                ,[IsReturnOfBudgetFunds]
                ,[IsCarryforward]
                ,[IsDeletePending]
                ,[MaxCarryForward]
            )
        SELECT   0
                ,bstd.[RECID]
                ,bst.[RECID]
                ,bs.[RECID]
                ,bstd.[ISSUMMARIZED]
                ,bs.[BUDGETCONTROLSOURCEINTEGRATOR]
                ,bst.[STATUS]
                ,bst.[CATEGORY]
                ,bst.[TRACKINGDATE]
                ,bst.[BUDGETMODELTYPE]
                ,bst.[BUDGETMODELID]
                ,bst.[ISDEFAULTBUDGETMODEL]
                ,bst.[TRACKINGUSER]
                ,bst.[BUDGETMODELSUBMODELID]
                ,bst.[BUDGETMODELDATAAREAID]
                ,bst.[TRACKINGNUMBER]
                ,bst.[ISSIMULATION]
                ,bstd.[PRIMARYLEDGER]
                ,bstd.[BUDGETSOURCELEDGERDIMENSION]
                ,bstd.[BUDGETCONTROLLEDGERDIMENSION]
                ,bstd.[ACCOUNTINGCURRENCYAMOUNT]
                ,dbo.[BudgetControlAdjustAmountSignFunction](bst.[CATEGORY],bstd.[ISDELETEPENDING])
                ,bstd.[ISRETURNOFBUDGETFUNDS]
                ,bstd.[ISCARRYFORWARD]
                ,bstd.[ISDELETEPENDING]
                ,0
        FROM    [BUDGETSOURCETRACKINGDETAIL] bstd
        JOIN    [BUDGETSOURCETRACKING] bst
            ON      bstd.[BUDGETSOURCETRACKING] = bst.[RECID]
            AND     bst.[PARTITION] = @PartitionId
        JOIN    [BUDGETSOURCE] bs
            ON      bst.[BUDGETSOURCE] = bs.[RECID]
            AND     bs.[PARTITION] = @PartitionId
        WHERE   bstd.[RECID] IN
                    (   SELECT  t.[RecId]
                        FROM    @Keys t
                        WHERE   t.[Table] = @_TABLE_BudgetSourceTrackingDetail
                    )
            AND     bstd.[PARTITION] = @PartitionId
        ;

        SELECT   @ErrorTrying = N'Initial insert #BSTDStage - BudgetSourceTrackingRelievingDetail';
        INSERT INTO #BSTDStage
            (    [IsRelieved]
                ,[BudgetSourceTrackingRelievingDetail]
                ,[BudgetSourceTracking]
                ,[BudgetSource]
                ,[IsSummarized]
                ,[IntegratorType]
                ,[Status]
                ,[Category]
                ,[TrackingDate]
                ,[BudgetModelType]
                ,[BudgetModelID]
                ,[IsDefaultBudgetModel]
                ,[TrackingUser]
                ,[BudgetModelSubModelID]
                ,[BudgetModelDataareaId]
                ,[TrackingNumber]
                ,[IsSimulation]
                ,[PrimaryLedger]
                ,[BudgetSourceLedgerDimension]
                ,[BudgetControlLedgerDimension]
                ,[AccountingCurrencyAmountOrig]
                ,[AmountSign]
                ,[IsReturnOfBudgetFunds]
                ,[IsCarryforward]
                ,[IsDeletePending]
                ,[MaxCarryForward]
            )
        SELECT   1
                ,bstrd.[RECID]
                ,bst.[RECID]
                ,bs.[RECID]
                ,bstrd.[ISSUMMARIZED]
                ,bs.[BUDGETCONTROLSOURCEINTEGRATOR]
                ,relieved_bst.[STATUS]
                ,relieved_bst.[CATEGORY]
                ,bst.[TRACKINGDATE]
                ,bst.[BUDGETMODELTYPE]
                ,bst.[BUDGETMODELID]
                ,bst.[ISDEFAULTBUDGETMODEL]
                ,bst.[TRACKINGUSER]
                ,bst.[BUDGETMODELSUBMODELID]
                ,bst.[BUDGETMODELDATAAREAID]
                ,bst.[TRACKINGNUMBER]
                ,bst.[ISSIMULATION]
                ,relieved_bstd.[PRIMARYLEDGER]
                ,relieved_bstd.[BUDGETSOURCELEDGERDIMENSION]
                ,relieved_bstd.[BUDGETCONTROLLEDGERDIMENSION]
                ,bstrd.[ACCOUNTINGCURRENCYAMOUNT]
                ,dbo.[BudgetControlAdjustAmountSignFunction](bst.[CATEGORY],bstrd.[ISDELETEPENDING])
                ,bstrd.[ISRETURNOFBUDGETFUNDS]
                ,relieved_bstd.[ISCARRYFORWARD]
                ,bstrd.[ISDELETEPENDING]
                ,0
        FROM    [BUDGETSOURCETRACKINGRELIEVINGDETAIL] bstrd
        JOIN    [BUDGETSOURCETRACKINGDETAIL] relieved_bstd
            ON      bstrd.[RELIEVEDBUDGETSOURCETRACKINGDETAIL] = relieved_bstd.[RECID]
            AND     relieved_bstd.[PARTITION] = @PartitionId
        JOIN    [BUDGETSOURCETRACKING] relieved_bst
            ON      relieved_bstd.[BUDGETSOURCETRACKING] = relieved_bst.[RECID]
            AND     relieved_bst.[PARTITION] = @PartitionId
        JOIN    [BUDGETSOURCETRACKING] bst
            ON      bstrd.[RELIEVINGBUDGETSOURCETRACKING] = bst.[RECID]
            AND     bst.[PARTITION] = @PartitionId
        JOIN    [BUDGETSOURCE] bs
            ON      bst.[BUDGETSOURCE] = bs.[RECID]
            AND     bs.[PARTITION] = @PartitionId
        WHERE   bstrd.[RECID] IN
                    (   SELECT  t.[RecId]
                        FROM    @Keys t
                        WHERE   t.[Table] = @_TABLE_BudgetSourceTrackingRelievingDetail
                    )
            AND     bstrd.[PARTITION] = @PartitionId
        ;

        IF @IsAnyDeleted = 0
          BEGIN
            IF EXISTS
                (   SELECT TOP 1 1
                    FROM    #BSTDStage
                    WHERE   [IsDeletePending] = 1
                )
              BEGIN
                SET @IsAnyDeleted = 1
              END
          END;

        SELECT @ModifiedDateTime = GETUTCDATE();

        SELECT @ErrorTrying = N'UPDATE BudgetSourceTrackingSummary/DraftCleanup run';

        MERGE INTO [BUDGETSOURCETRACKINGSUMMARY] AS [target]
        USING
            (SELECT  t.[TrackingDate]
                    ,t.[Category]
                    ,t.[PrimaryLedger]
                    ,t.[BudgetControlLedgerDimension]
                    ,SUM(t.[AccountingCurrencyAmount])
                    ,t.[IsDraft]
                    ,t.[IsSimulation]
                    ,t.[IsCarryForward]
                    ,t.[IntegratorType]
                    ,t.[BudgetModelID]
                    ,t.[BudgetModelSubModelID]
                    ,t.[BudgetModelType]
                    ,t.[BudgetModelDataareaId]
             FROM   #BSTDStage t
             WHERE  t.[IsSummarized] = 1
             GROUP BY
                     t.[TrackingDate]
                    ,t.[Category]
                    ,t.[PrimaryLedger]
                    ,t.[BudgetControlLedgerDimension]
                    ,t.[IsDraft]
                    ,t.[IsSimulation]
                    ,t.[IsCarryForward]
                    ,t.[IntegratorType]
                    ,t.[BudgetModelID]
                    ,t.[BudgetModelSubModelID]
                    ,t.[BudgetModelType]
                    ,t.[BudgetModelDataareaId]
            ) AS [source]
                (    [TrackingDate]
                    ,[Category]
                    ,[PrimaryLedger]
                    ,[BudgetControlLedgerDimension]
                    ,[SourceAccountingCurrencyAmount]
                    ,[IsDraft]
                    ,[IsSimulation]
                    ,[IsCarryForward]
                    ,[IntegratorType]
                    ,[BudgetModelID]
                    ,[BudgetModelSubModelID]
                    ,[BudgetModelType]
                    ,[BudgetModelDataareaId]
                )
        ON (        [source].[TrackingDate]                 = [target].[TRACKINGDATE]
                AND [target].[CATEGORY]                     = [source].[Category]
                AND [target].[PRIMARYLEDGER]                = [source].[PrimaryLedger]
                AND [target].[BUDGETCONTROLLEDGERDIMENSION] = [source].[BudgetControlLedgerDimension]
                AND [target].[ISDRAFT]                      = [source].[IsDraft]
                AND [target].[ISSIMULATION]                 = [source].[IsSimulation]
                AND [target].[ISCARRYFORWARD]               = [source].[IsCarryForward]
                AND [target].[INTEGRATORTYPE]               = [source].[IntegratorType]
                AND [target].[BUDGETMODELID]                = [source].[BudgetModelID]
                AND [target].[BUDGETMODELSUBMODELID]        = [source].[BudgetModelSubModelID]
                AND [target].[BUDGETMODELTYPE]              = [source].[BudgetModelType]
                AND [target].[BUDGETMODELDATAAREAID]        = [source].[BudgetModelDataareaID]
                AND [target].[PARTITION]                    = @PartitionId
            )
        WHEN MATCHED THEN
            UPDATE SET [ACCOUNTINGCURRENCYAMOUNT] = [ACCOUNTINGCURRENCYAMOUNT] + [source].[SourceAccountingCurrencyAmount]
        WHEN NOT MATCHED BY TARGET THEN
            INSERT
                ( [TRACKINGDATE]
                 ,[CATEGORY]
                 ,[PRIMARYLEDGER]
                 ,[BUDGETCONTROLLEDGERDIMENSION]
                 ,[ISSIMULATION]
                 ,[ISDRAFT]
                 ,[ISCARRYFORWARD]
                 ,[INTEGRATORTYPE]
                 ,[BUDGETMODELID]
                 ,[BUDGETMODELSUBMODELID]
                 ,[BUDGETMODELTYPE]
                 ,[BUDGETMODELDATAAREAID]
                 ,[ACCOUNTINGCURRENCYAMOUNT]
                 ,[RECVERSION]
                 ,[PARTITION]
                )
            VALUES
                ( [source].[TrackingDate]
                 ,[source].[Category]
                 ,[source].[PrimaryLedger]
                 ,[source].[BudgetControlLedgerDimension]
                 ,[source].[IsSimulation]
                 ,[source].[IsDraft]
                 ,[source].[IsCarryForward]
                 ,[source].[IntegratorType]
                 ,[source].[BudgetModelID]
                 ,[source].[BudgetModelSubModelID]
                 ,[source].[BudgetModelType]
                 ,[source].[BudgetModelDataareaId]
                 ,[source].[SourceAccountingCurrencyAmount]
                 ,0
                 ,@PartitionId
                )
        ;

        IF @IsAnyDeleted = 1
          BEGIN --delete

            SELECT   @ErrorTrying = 'DELETE BudgetSourceTrackingDetail';

            DELETE  [BUDGETSOURCETRACKINGDETAIL] WITH (ROWLOCK)
            FROM    [BUDGETSOURCETRACKINGDETAIL] b
            JOIN    #BSTDStage t
                ON      b.[RECID] = t.[BudgetSourceTrackingDetail]
            WHERE   t.[IsDeletePending] = 1
            AND     t.[IsRelieved] = 0
            AND     b.[PARTITION] = @PartitionId
            ;

            IF @rowcount_BudgetSourceTrackingRelievingDetail > 0
              BEGIN

                SELECT   @ErrorTrying = 'DELETE BudgetSourceTrackingRelievingDetail';

                DELETE  [BUDGETSOURCETRACKINGRELIEVINGDETAIL] WITH (ROWLOCK)
                FROM    [BUDGETSOURCETRACKINGRELIEVINGDETAIL] b
                JOIN    #BSTDStage t
                    ON      b.[RECID] = t.[BudgetSourceTrackingRelievingDetail]
                WHERE   t.[IsDeletePending] = 1
                AND     t.[IsRelieved] = 1
                AND     b.[PARTITION] = @PartitionId
                ;

              END;

            SELECT   @ErrorTrying = 'DELETE BudgetSourceTracking - delete pending';

            DELETE  [BUDGETSOURCETRACKING] WITH (ROWLOCK)
            FROM    [BUDGETSOURCETRACKING] bst
            WHERE   bst.[RECID] IN
                        (   SELECT  r.[RecId]
                            FROM    @Keys r
                            WHERE   [Table] = @_TABLE_BudgetSourceTracking
                        )
            AND     bst.[ISDELETEPENDING] = 1
            AND     bst.[PARTITION] = @PartitionId
            ;

            SELECT   @ErrorTrying = 'DELETE BudgetSource';

            DELETE  [BUDGETSOURCE] WITH (ROWLOCK)
            FROM    [BUDGETSOURCE] bs
            WHERE   bs.[RECID] IN
                        (   SELECT  r.[RecId]
                            FROM    @Keys r
                            WHERE   [Table] = @_TABLE_BudgetSource
                        )
            AND     bs.[ISDELETEPENDING] = 1
            AND     bs.[PARTITION] = @PartitionId
            ;
          END; --delete

    END TRY
    BEGIN CATCH
        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH;

    BEGIN TRY -- release applock main
    SELECT   @ErrorTrying = N'catch: release applock ' + @_APPLOCKRESOURCE_Main;
    EXEC @RetCode = sp_releaseapplock
        @DBPrincipal = N'public'
        ,@Resource = @_APPLOCKRESOURCE_Main
        ,@LockOwner = N'Transaction'
    ;

    IF @RetCode < 0
        BEGIN
            SELECT @ErrorTrying = 'release applock ' + @_APPLOCKRESOURCE_Main + ' returned ' + CAST(@RetCode AS NVARCHAR);
            GOTO lblErrorTrap;
        END;

    SELECT @IsApplockHeld_Main = 0;

    END TRY
    BEGIN CATCH
        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH;  -- release applock main

    --normal termination

    --lblNormalTerm:

    SET @ErrorTrying = N'BudgetControlCleanUpDraftProc completed without error.';

    SELECT @ReturnCode = @ResultCode_Succesful, @ReturnMsg = @ErrorTrying;

    RETURN (@ResultCode_Succesful)

    -- error termination

    lblErrorTrap:

    BEGIN TRY -- make a best effort to release the applocks

        EXEC @RetCode = sp_releaseapplock
            @DBPrincipal = N'public'
            ,@Resource = @_APPLOCKRESOURCE_Main
            ,@LockOwner = N'Transaction'
        ;
    END TRY
    BEGIN CATCH
    END CATCH;

    EXEC [BudgetControlBuildErrorMessageProc]
         @callerProcedure       = @SPName
        ,@Error_Number          = @Error_Number
        ,@Error_Line            = @Error_Line
        ,@Error_State           = @Error_State
        ,@Error_Severity        = @Error_Severity
        ,@Error_Message         = @ErrorMessage
        ,@Error_Procedure       = @Error_Procedure
        ,@ErrorTrying           = @ErrorTrying
        ,@isIncludeErrorLineNum = @isIncludeErrorLineNum
        ,@ReturnErrorMsg = @BudgetCleanUpDraftBuildErrorMsg OUTPUT
    ;

    SELECT @ReturnCode = @ResultCode_Error, @ReturnMsg = @BudgetCleanUpDraftBuildErrorMsg;

    RETURN (@ResultCode_Error)
    ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>