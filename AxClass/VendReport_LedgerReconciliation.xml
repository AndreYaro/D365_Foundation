<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendReport_LedgerReconciliation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendReport_LedgerReconciliation extends LedgerReconciliation
{
    VendLedgerReconciliationTmp vendLedgerReconciliationTmp;
    VendLedgerReconciliationCurrencyTmp vendLedgerReconciliationCurrencyTmp;
    LedgerReconciliationLedgerCurrencyTmp ledgerReconciliationLedgerCurrencyTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerReconcileAccountsTmp</Name>
				<Source><![CDATA[
    protected void createLedgerReconcileAccountsTmp()
    {
        VendLedgerAccounts vendLedgerAccounts;
        DimensionAttributeValueCombination davc;
        MainAccount mainAccount;

        insert_recordset ledgerReconcileAccountsTmp
        (
            MainAccount
        )
        select vendLedgerAccounts
            where vendLedgerAccounts.PostingProfile >= fromPostingProfile
                && vendLedgerAccounts.PostingProfile <= toPostingProfile
        join davc
            where davc.RecId == vendLedgerAccounts.SummaryLedgerDimension
                  || davc.RecId == vendLedgerAccounts.PurchasingLedgerDimension
        join RecId from mainAccount
            group by RecId
            where mainAccount.RecId == davc.MainAccount
                && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupVendorTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Group the staging <c>VendLedgerReconciliationTmp</c> records based on specified parameters.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    private void groupVendorTransactions(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        VendLedgerReconciliationTmp vendLedgerReconciliationStagingTmpCopy;
        NoYes summarized = NoYes::Yes;

        // Create a copy of the staging temp table.
        if (_vendLedgerReconciliationStagingTmp.isTempDb())
        {
            vendLedgerReconciliationStagingTmpCopy.linkPhysicalTableInstance(_vendLedgerReconciliationStagingTmp);
        }

        // Group the staging temp table records and insert them as summarized.
        if (this.parmIncludeDetails())
        {
            insert_recordset _vendLedgerReconciliationStagingTmp
            (
                AccountingDate,
                Voucher,
                VendAmountMST,
                VendAmountReportingCurrency,
                VendorAccountId,
                VendorName,
                mainAccount,
                MainAccountId,
                MainAccountName,
                isSummarized
            )
            select AccountingDate, Voucher, sum(VendAmountMST), sum(VendAmountReportingCurrency), VendorAccountId, minOf(VendorName), mainAccount, MainAccountId, minOf(MainAccountName), summarized from vendLedgerReconciliationStagingTmpCopy
                group by AccountingDate, Voucher, VendorAccountId, MainAccount, MainAccountId
                where vendLedgerReconciliationStagingTmpCopy.isSummarized == NoYes::No;
        }
        else
        {
            insert_recordset _vendLedgerReconciliationStagingTmp
            (
                VendAmountMST,
                VendAmountReportingCurrency,
                mainAccount,
                MainAccountId,
                MainAccountName,
                isSummarized
            )
            select sum(VendAmountMST), sum(VendAmountReportingCurrency), MainAccount, MainAccountId, minOf(MainAccountName), summarized from vendLedgerReconciliationStagingTmpCopy
                group by mainAccount, MainAccountId
                where vendLedgerReconciliationStagingTmpCopy.isSummarized == NoYes::No;
        }

        // Delete the non summarized records from the staging temp table buffer.
        delete_from _vendLedgerReconciliationStagingTmp where
            _vendLedgerReconciliationStagingTmp.isSummarized == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDestinationFieldToFieldMappingLedgerRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field mapping to do a set-based insert for <c>LedgerReconciliationLedgerCurrencyTmp</c> buffer.
    /// </summary>
    /// <param name = "_query">Query used to get fieldList.</param>
    /// <param name = "_dataSource">Query datasource used to get fieldList </param>
    /// <returns> Returns map with fields.</returns>
    private Map addDestinationFieldToFieldMappingLedgerRecords(Query _query, QueryBuildDataSource _dataSource)
    {
        Map targetToSourceMap = new Map(Types::String, Types::Container);
        int dataSourceId = _dataSource.uniqueId();

        this.addDestinationFieldToFieldMapping(targetToSourceMap, dataSourceId, 'SUM(' + fieldStr(LedgerReconciliationLedgerCurrencyTmp, CurrencyAmount)+ ')', fieldStr(LedgerReconciliationLedgerCurrencyTmp, CurrencyAmount));
        this.addDestinationFieldToFieldMapping(targetToSourceMap, dataSourceId, fieldStr(LedgerReconciliationLedgerCurrencyTmp, AccountingDate), fieldStr(LedgerReconciliationLedgerCurrencyTmp, AccountingDate));
        this.addDestinationFieldToFieldMapping(targetToSourceMap, dataSourceId, fieldStr(LedgerReconciliationLedgerCurrencyTmp, MainAccount), fieldStr(LedgerReconciliationLedgerCurrencyTmp, MainAccount));
        this.addDestinationFieldToFieldMapping(targetToSourceMap, dataSourceId, fieldStr(LedgerReconciliationLedgerCurrencyTmp, MainAccountId), fieldStr(LedgerReconciliationLedgerCurrencyTmp, MainAccountId));
        this.addDestinationFieldToFieldMapping(targetToSourceMap, dataSourceId, fieldStr(LedgerReconciliationLedgerCurrencyTmp, MainAccountName), fieldStr(LedgerReconciliationLedgerCurrencyTmp, MainAccountName));
        this.addDestinationFieldToFieldMapping(targetToSourceMap, dataSourceId, fieldStr(LedgerReconciliationLedgerCurrencyTmp, Voucher), fieldStr(LedgerReconciliationLedgerCurrencyTmp, Voucher));
        
        return targetToSourceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDestinationFieldToFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add Destination field to Field Mapping.
    /// </summary>
    /// <param name = "_fieldMapping">The field Mapping where the field will be added.</param>
    /// <param name = "_dataSourceUniqueId">The unique Id for the data source.</param>
    /// <param name = "_sourceFieldName">The data source field name being added.</param>
    /// <param name = "_destinationFieldName">The Target field name where the field will be added.</param>
    private void addDestinationFieldToFieldMapping(
        Map _fieldMapping,
        int _dataSourceUniqueId,
        FieldName _sourceFieldName,
        FieldName _destinationFieldName)
    {
        _fieldMapping.insert(_destinationFieldName, [_dataSourceUniqueId, _sourceFieldName]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Query setup for <c>LedgerReconciliationLedgerCurrencyTmp</c> buffer.
    /// </summary>
    /// <param name = "_dataSource">Query datasource.</param>
    private void querySetup(QueryBuildDataSource _dataSource)
    {
        _dataSource.addGroupByField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, MainAccountId));
        _dataSource.addGroupByField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, Voucher));
        _dataSource.addGroupByField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, AccountingDate));
        _dataSource.addGroupByField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, MainAccount));
        _dataSource.addGroupByField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, MainAccountName));
            
        _dataSource.addSelectionField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, CurrencyAmount), SelectionField::Sum);
        _dataSource.addSelectionField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, AccountingDate));
        _dataSource.addSelectionField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, MainAccount));
        _dataSource.addSelectionField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, MainAccountId));
        _dataSource.addSelectionField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, MainAccountName));
        _dataSource.addSelectionField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, Voucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the query for <c>LedgerReconciliationLedgerCurrencyTmp</c> buffer.
    /// </summary>
    /// <param name = "_query">Query used to get fieldList.</param>
    /// <param name = "_dataSource">Query datasource.</param>
    /// <param name = "_resultMap"> Destination fields Map.</param>
    /// <param name = "_ledgerReconciliationLedgerCurrencyTmpIntermediate"><c>LedgerReconciliationLedgerCurrencyTmp</c> buffer.</param>
    private void runQuery(Query _query, QueryBuildDataSource _dataSource, Map _resultMap, LedgerReconciliationLedgerCurrencyTmp _ledgerReconciliationLedgerCurrencyTmpIntermediate)
    {
        QueryRun queryRun = new QueryRun(_query);
        _dataSource.cursor(ledgerReconciliationLedgerCurrencyTmp);
        Query::insert_recordset(_ledgerReconciliationLedgerCurrencyTmpIntermediate, _resultMap, _query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeLedgerTransactionsForOneJourNumPerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarize ledger transactions for one journal number per one voucher for <c>LedgerReconciliationLedgerCurrencyTmp</c> buffer.
    /// </summary>
    /// <param name = "_ledgerReconciliationLedgerCurrencyTmpIntermediate"><c>LedgerReconciliationLedgerCurrencyTmp</c> buffer.</param>
    private void summarizeLedgerTransactionsForOneJourNumPerVoucher(LedgerReconciliationLedgerCurrencyTmp _ledgerReconciliationLedgerCurrencyTmpIntermediate)
    {
        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(LedgerReconciliationLedgerCurrencyTmp));
        
        this.querySetup(primaryDataSource);

        primaryDataSource.addSelectionField(fieldNum(LedgerReconciliationLedgerCurrencyTmp, JournalNumber), SelectionField::Min);
        query.addHavingFilter(primaryDataSource, fieldStr(LedgerReconciliationLedgerCurrencyTmp, Recid), AggregateFunction::Count).value(SysQuery::value(1));
        
        Map resultMap = this.addDestinationFieldToFieldMappingLedgerRecords(query, primaryDataSource);
        this.addDestinationFieldToFieldMapping(resultMap, primaryDataSource.uniqueId(), 'MIN(' + fieldStr(LedgerReconciliationLedgerCurrencyTmp, JournalNumber) + ')',fieldStr(LedgerReconciliationLedgerCurrencyTmp, JournalNumber));
        
        this.runQuery(query, primaryDataSource, resultMap, _ledgerReconciliationLedgerCurrencyTmpIntermediate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeLedgerTransactionsForMultiJourNumPerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarize ledger transactions for multiple journal number per one voucher for <c>LedgerReconciliationLedgerCurrencyTmp</c> buffer.
    /// </summary>
    /// <param name = "_ledgerReconciliationLedgerCurrencyTmpIntermediate"><c>LedgerReconciliationLedgerCurrencyTmp</c> buffer.</param>
    private void summarizeLedgerTransactionsForMultiJourNumPerVoucher(LedgerReconciliationLedgerCurrencyTmp _ledgerReconciliationLedgerCurrencyTmpIntermediate)
    {
        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(LedgerReconciliationLedgerCurrencyTmp));
        this.querySetup(primaryDataSource);
            
        query.addHavingFilter(primaryDataSource, fieldStr(LedgerReconciliationLedgerCurrencyTmp, Recid), AggregateFunction::Count).value(SysQuery::value('>1'));
        Map resultMap = this.addDestinationFieldToFieldMappingLedgerRecords(query, primaryDataSource);

        this.runQuery(query, primaryDataSource, resultMap, _ledgerReconciliationLedgerCurrencyTmpIntermediate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the ledger transactions into output table.
    /// </summary>
    /// <param name="_userConnection">The user connection instance.</param>
    private void insertLedgerTransactions(UserConnection _userConnection)
    {
        LedgerReconciliationLedgerCurrencyTmp ledgerReconciliationLedgerCurrencyTmpIntermediate;
        LedgerReconciliationLedgerCurrencyTmp ledgerReconciliationLedgerCurrencyTmpSelfReference;

        if (_userConnection)
        {
            ledgerReconciliationLedgerCurrencyTmpSelfReference.setConnection(_userConnection);
            ledgerReconciliationLedgerCurrencyTmpIntermediate.setConnection(_userConnection);
        }

        ledgerReconciliationLedgerCurrencyTmpSelfReference.linkPhysicalTableInstance(ledgerReconciliationLedgerCurrencyTmp);

        if (this.parmIncludeDetails())
        {
            this.summarizeLedgerTransactionsForOneJourNumPerVoucher(ledgerReconciliationLedgerCurrencyTmpIntermediate);
            this.summarizeLedgerTransactionsForMultiJourNumPerVoucher(ledgerReconciliationLedgerCurrencyTmpIntermediate);
        }
        else
        {
            insert_recordset ledgerReconciliationLedgerCurrencyTmpIntermediate (
               CurrencyAmount,
               MainAccount,
               MainAccountId,
               MainAccountName
           )
           select sum(CurrencyAmount),
               MainAccount,
               MainAccountId,
               MainAccountName
               from ledgerReconciliationLedgerCurrencyTmp
               group by MainAccount, MainAccountId, MainAccountName
           notExists join ledgerReconciliationLedgerCurrencyTmpSelfReference
               where ledgerReconciliationLedgerCurrencyTmpSelfReference.MainAccountId == ledgerReconciliationLedgerCurrencyTmp.MainAccountId
               && ledgerReconciliationLedgerCurrencyTmpSelfReference.Voucher == ledgerReconciliationLedgerCurrencyTmp.Voucher
               && ledgerReconciliationLedgerCurrencyTmpSelfReference.AccountingDate == ledgerReconciliationLedgerCurrencyTmp.AccountingDate
               && ledgerReconciliationLedgerCurrencyTmpSelfReference.CurrencyAmount == -(ledgerReconciliationLedgerCurrencyTmp.CurrencyAmount)
               && ledgerReconciliationLedgerCurrencyTmpSelfReference.RecId != ledgerReconciliationLedgerCurrencyTmp.RecId
               && ledgerReconciliationLedgerCurrencyTmpSelfReference.JournalNumber != ledgerReconciliationLedgerCurrencyTmp.JournalNumber;
        }

        // Update the output table records with appropriate ledger transactions
        update_recordSet vendLedgerReconciliationCurrencyTmp
        setting
            LedgerAmountCurrency = ledgerReconciliationLedgerCurrencyTmpIntermediate.CurrencyAmount,
            LedgerJournalId = ledgerReconciliationLedgerCurrencyTmpIntermediate.JournalNumber
        join ledgerReconciliationLedgerCurrencyTmpIntermediate
            where vendLedgerReconciliationCurrencyTmp.MainAccountId == ledgerReconciliationLedgerCurrencyTmpIntermediate.MainAccountId
               && vendLedgerReconciliationCurrencyTmp.Voucher == ledgerReconciliationLedgerCurrencyTmpIntermediate.Voucher
               && vendLedgerReconciliationCurrencyTmp.AccountingDate == ledgerReconciliationLedgerCurrencyTmpIntermediate.AccountingDate;

        // insert remaining ledger records
        insert_recordset vendLedgerReconciliationCurrencyTmp
        (
            AccountingDate,
            LedgerAmountCurrency,
            LedgerJournalId,
            MainAccountId,
            MainAccountName,
            Voucher,
            CurrencyBalanceDifference
        )
        select AccountingDate,
            CurrencyAmount,
            JournalNumber,
            MainAccountId,
            MainAccountName,
            Voucher,
            CurrencyAmount
            from ledgerReconciliationLedgerCurrencyTmpIntermediate
            order by MainAccountId, AccountingDate, Voucher
        notexists join vendLedgerReconciliationCurrencyTmp
            where vendLedgerReconciliationCurrencyTmp.MainAccountId == ledgerReconciliationLedgerCurrencyTmpIntermediate.MainAccountId
            && vendLedgerReconciliationCurrencyTmp.Voucher == ledgerReconciliationLedgerCurrencyTmpIntermediate.Voucher
            && vendLedgerReconciliationCurrencyTmp.AccountingDate == ledgerReconciliationLedgerCurrencyTmpIntermediate.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLinkedVendorLedgerRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert records into temp tables that are linked to the original data based on the ledgerJournalVoucherChanged table
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The temp table the vendor records are contained in</param>
    /// <param name="_userConnection">The user connection to use</param>
    private void insertLinkedVendorLedgerRecords(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp, UserConnection _userConnection)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        DimensionAttributeValueCombination davc;
        MainAccount mainAccount;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

        VendLedgerReconciliationTmp voucherHolder;
        VendLedgerReconciliationTmp voucherHolder_Ref;
        LedgerReconciliationLedgerTmp ledgerReconciliationLedgerTmp_Ref;
        MainAccountNum sqlMainAccountId = '0';

        // Set up user connections and link self-reference tables
        if (_userConnection)
        {
            ledgerReconciliationLedgerTmp_Ref.setConnection(_userConnection);
            voucherHolder.setConnection(_userConnection);
            voucherHolder_Ref.setConnection(_userConnection);
        }

        ledgerReconciliationLedgerTmp_Ref.linkPhysicalTableInstance(ledgerReconciliationLedgerTmp);
        voucherHolder_Ref.linkPhysicalTableInstance(voucherHolder);

        // Insert voucher numbers into our temporary voucher table that are unique and that link to a ledgerJournalVoucherChanged
        // record where the ledgerJournalVoucherChanged record reflects a change in date or voucher number
        // Save both the from and to voucher for both our vend and ledger staging temp tables
        insert_recordset voucherHolder
        (
            MainAccountId,
            Voucher
        )
        select sqlMainAccountId, FromVoucher from ledgerJournalVoucherChanged
            where (ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher
                || ledgerJournalVoucherChanged.FromDate != ledgerJournalVoucherChanged.ToDate)
                && ledgerJournalVoucherChanged.JournalNum != ''
                && ledgerJournalVoucherChanged.ToVoucher != ''
                && ledgerJournalVoucherChanged.FromVoucher != ''
                && ledgerJournalVoucherChanged.ToDate >= fromDate
                && ledgerJournalVoucherChanged.ToDate <= toDate
        exists join _vendLedgerReconciliationStagingTmp
            where _vendLedgerReconciliationStagingTmp.Voucher == ledgerJournalVoucherChanged.FromVoucher
        notexists join voucherHolder_Ref
            where voucherHolder_Ref.Voucher == ledgerJournalVoucherChanged.FromVoucher;

        insert_recordset voucherHolder
        (
            MainAccountId,
            Voucher
        )
        select sqlMainAccountId, FromVoucher from ledgerJournalVoucherChanged
            where (ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher
                || ledgerJournalVoucherChanged.FromDate != ledgerJournalVoucherChanged.ToDate)
                && ledgerJournalVoucherChanged.JournalNum != ''
                && ledgerJournalVoucherChanged.ToVoucher != ''
                && ledgerJournalVoucherChanged.FromVoucher != ''
                && ledgerJournalVoucherChanged.ToDate >= fromDate
                && ledgerJournalVoucherChanged.ToDate <= toDate
        exists join _vendLedgerReconciliationStagingTmp
            where _vendLedgerReconciliationStagingTmp.Voucher == ledgerJournalVoucherChanged.ToVoucher
        notexists join voucherHolder_Ref
            where voucherHolder_Ref.Voucher == ledgerJournalVoucherChanged.FromVoucher;

        insert_recordset voucherHolder
        (
            MainAccountId,
            Voucher
        )
        select sqlMainAccountId, ToVoucher from ledgerJournalVoucherChanged
            where (ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher
                || ledgerJournalVoucherChanged.FromDate != ledgerJournalVoucherChanged.ToDate)
                && ledgerJournalVoucherChanged.JournalNum != ''
                && ledgerJournalVoucherChanged.ToVoucher != ''
                && ledgerJournalVoucherChanged.FromVoucher != ''
                && ledgerJournalVoucherChanged.ToDate >= fromDate
                && ledgerJournalVoucherChanged.ToDate <= toDate
        exists join _vendLedgerReconciliationStagingTmp
            where _vendLedgerReconciliationStagingTmp.Voucher == ledgerJournalVoucherChanged.FromVoucher
        notexists join voucherHolder_Ref
            where voucherHolder_Ref.Voucher == ledgerJournalVoucherChanged.ToVoucher;

        insert_recordset voucherHolder
        (
            MainAccountId,
            Voucher
        )
        select sqlMainAccountId, ToVoucher from ledgerJournalVoucherChanged
            where (ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher
                || ledgerJournalVoucherChanged.FromDate != ledgerJournalVoucherChanged.ToDate)
                && ledgerJournalVoucherChanged.JournalNum != ''
                && ledgerJournalVoucherChanged.ToVoucher != ''
                && ledgerJournalVoucherChanged.FromVoucher != ''
                && ledgerJournalVoucherChanged.ToDate >= fromDate
                && ledgerJournalVoucherChanged.ToDate <= toDate
        exists join _vendLedgerReconciliationStagingTmp
            where _vendLedgerReconciliationStagingTmp.Voucher == ledgerJournalVoucherChanged.ToVoucher
        notexists join voucherHolder_Ref
            where voucherHolder_Ref.Voucher == ledgerJournalVoucherChanged.ToVoucher;

        insert_recordset voucherHolder
        (
            MainAccountId,
            Voucher
        )
        select sqlMainAccountId, FromVoucher from ledgerJournalVoucherChanged
            where (ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher
                || ledgerJournalVoucherChanged.FromDate != ledgerJournalVoucherChanged.ToDate)
                && ledgerJournalVoucherChanged.JournalNum != ''
                && ledgerJournalVoucherChanged.ToVoucher != ''
                && ledgerJournalVoucherChanged.FromVoucher != ''
                && ledgerJournalVoucherChanged.ToDate >= fromDate
                && ledgerJournalVoucherChanged.ToDate <= toDate
        exists join ledgerReconciliationLedgerTmp
            where ledgerReconciliationLedgerTmp.Voucher == ledgerJournalVoucherChanged.FromVoucher
        notexists join voucherHolder_Ref
            where voucherHolder_Ref.Voucher == ledgerJournalVoucherChanged.FromVoucher;

        insert_recordset voucherHolder
        (
            MainAccountId,
            Voucher
        )
        select sqlMainAccountId, FromVoucher from ledgerJournalVoucherChanged
            where (ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher
                || ledgerJournalVoucherChanged.FromDate != ledgerJournalVoucherChanged.ToDate)
                && ledgerJournalVoucherChanged.JournalNum != ''
                && ledgerJournalVoucherChanged.ToVoucher != ''
                && ledgerJournalVoucherChanged.FromVoucher != ''
                && ledgerJournalVoucherChanged.ToDate >= fromDate
                && ledgerJournalVoucherChanged.ToDate <= toDate
        exists join ledgerReconciliationLedgerTmp
            where ledgerReconciliationLedgerTmp.Voucher == ledgerJournalVoucherChanged.ToVoucher
        notexists join voucherHolder_Ref
            where voucherHolder_Ref.Voucher == ledgerJournalVoucherChanged.FromVoucher;

        insert_recordset voucherHolder
        (
            MainAccountId,
            Voucher
        )
        select sqlMainAccountId, ToVoucher from ledgerJournalVoucherChanged
            where (ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher
                || ledgerJournalVoucherChanged.FromDate != ledgerJournalVoucherChanged.ToDate)
                && ledgerJournalVoucherChanged.JournalNum != ''
                && ledgerJournalVoucherChanged.ToVoucher != ''
                && ledgerJournalVoucherChanged.FromVoucher != ''
                && ledgerJournalVoucherChanged.ToDate >= fromDate
                && ledgerJournalVoucherChanged.ToDate <= toDate
        exists join ledgerReconciliationLedgerTmp
            where ledgerReconciliationLedgerTmp.Voucher == ledgerJournalVoucherChanged.FromVoucher
        notexists join voucherHolder_Ref
            where voucherHolder_Ref.Voucher == ledgerJournalVoucherChanged.ToVoucher;

        insert_recordset voucherHolder
        (
            MainAccountId,
            Voucher
        )
        select sqlMainAccountId, ToVoucher from ledgerJournalVoucherChanged
            where (ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher
                || ledgerJournalVoucherChanged.FromDate != ledgerJournalVoucherChanged.ToDate)
                && ledgerJournalVoucherChanged.JournalNum != ''
                && ledgerJournalVoucherChanged.ToVoucher != ''
                && ledgerJournalVoucherChanged.FromVoucher != ''
                && ledgerJournalVoucherChanged.ToDate >= fromDate
                && ledgerJournalVoucherChanged.ToDate <= toDate
        exists join ledgerReconciliationLedgerTmp
            where ledgerReconciliationLedgerTmp.Voucher == ledgerJournalVoucherChanged.ToVoucher
        notexists join voucherHolder_Ref
            where voucherHolder_Ref.Voucher == ledgerJournalVoucherChanged.ToVoucher;

       
        // Run the non-source document query because changed date or voucher number scenarios can only happen on journals
        // and remove notexists join to subledgerJournalAccountEntry
        insert_recordset ledgerReconciliationLedgerTmp
            (
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                JournalNumber,
                AccountingDate,
                Voucher,
                MainAccount,
                MainAccountId,
                MainAccountName
            )
            select sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from generalJournalAccountEntry
                group by davc.MainAccount,
                    mainAccount.MainAccountId,
                    mainAccount.Name,
                    generalJournalEntry.JournalNumber,
                    generalJournalEntry.AccountingDate,
                    generalJournalEntry.SubledgerVoucher
            join JournalNumber, AccountingDate, SubledgerVoucher from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.SubledgerVoucherDataAreaId == curext()
                    && generalJournalEntry.AccountingDate >= fromDate
                    && generalJournalEntry.AccountingDate <= toDate
                    && generalJournalEntry.SubledgerVoucher >= fromVoucher
                    && generalJournalEntry.SubledgerVoucher <= toVoucher
            join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            join MainAccount from davc
                where davc.RecId == generalJournalAccountEntry.LedgerDimension
            join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
            exists join voucherHolder
                where voucherHolder.Voucher == generalJournalEntry.SubledgerVoucher
            exists join LedgerReconcileAccountsTmp
                where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount
            notExists join ledgerReconciliationLedgerTmp_Ref
                where ledgerReconciliationLedgerTmp_Ref.MainAccount == davc.MainAccount
                    && ledgerReconciliationLedgerTmp_Ref.Voucher == generalJournalEntry.SubledgerVoucher
                    && ledgerReconciliationLedgerTmp_Ref.AccountingDate == generalJournalEntry.AccountingDate;

        if (VendReport_LedgerReconciliationVoucherChangedFlight::instance().isEnabled())
        {
            LedgerJournalVoucherChanged ledgerJournalVoucherChanged2;
            VendTrans vendTrans, vendTrans2;

            update_recordSet _vendLedgerReconciliationStagingTmp
            setting Voucher = ledgerJournalVoucherChanged.ToVoucher
            join ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.FromVoucher == _vendLedgerReconciliationStagingTmp.Voucher
                    && ledgerJournalVoucherChanged.ToDate == _vendLedgerReconciliationStagingTmp.AccountingDate
                    && ledgerJournalVoucherChanged.JournalNum != ''
                    && ledgerJournalVoucherChanged.ToVoucher != ''
                    && ledgerJournalVoucherChanged.FromVoucher != ''
                    && ledgerJournalVoucherChanged.ToDate >= fromDate
                    && ledgerJournalVoucherChanged.ToDate <= toDate
            notexists join ledgerJournalVoucherChanged2
                where ledgerJournalVoucherChanged2.FromVoucher == _vendLedgerReconciliationStagingTmp.Voucher
                    && ledgerJournalVoucherChanged2.ToDate == _vendLedgerReconciliationStagingTmp.AccountingDate
                    && ledgerJournalVoucherChanged2.JournalNum != ''
                    && ledgerJournalVoucherChanged2.ToVoucher != ''
                    && ledgerJournalVoucherChanged2.FromVoucher != ''
                    && ledgerJournalVoucherChanged2.ToDate >= fromDate
                    && ledgerJournalVoucherChanged2.ToDate <= toDate
                    && ledgerJournalVoucherChanged2.RecId != ledgerJournalVoucherChanged.RecId
            exists join vendTrans2
                where vendTrans2.Voucher == ledgerJournalVoucherChanged2.ToVoucher
                    && vendTrans2.Approved == NoYes::Yes
                    && (VendPostingFormDisableCancelToggleFlight::instance().isEnabled() || vendTrans2.Cancel == NoYes::Yes)
                    && vendTrans2.TransType == LedgerTransType::Vend
            notexists join vendTrans
                where vendTrans.Voucher == ledgerJournalVoucherChanged.ToVoucher
                    && vendTrans.Approved == NoYes::Yes
                    && (VendPostingFormDisableCancelToggleFlight::instance().isEnabled() || vendTrans.Cancel == NoYes::Yes)
                    && vendTrans.TransType == LedgerTransType::Vend;
        }
        else
        {
            update_recordSet _vendLedgerReconciliationStagingTmp
            setting Voucher = ledgerJournalVoucherChanged.ToVoucher
            join ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.FromVoucher == _vendLedgerReconciliationStagingTmp.Voucher
                    && ledgerJournalVoucherChanged.ToDate ==_vendLedgerReconciliationStagingTmp.AccountingDate
                    && ledgerJournalVoucherChanged.JournalNum != ''
                    && ledgerJournalVoucherChanged.ToVoucher != ''
                    && ledgerJournalVoucherChanged.FromVoucher != ''
                    && ledgerJournalVoucherChanged.ToDate >= fromDate
                    && ledgerJournalVoucherChanged.ToDate <= toDate;
        }

        update_recordSet _vendLedgerReconciliationStagingTmp
        setting AccountingDate = ledgerJournalVoucherChanged.ToDate
        join ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.FromDate == _vendLedgerReconciliationStagingTmp.AccountingDate
                && ledgerJournalVoucherChanged.ToVoucher == _vendLedgerReconciliationStagingTmp.Voucher
                && ledgerJournalVoucherChanged.JournalNum != ''
                && ledgerJournalVoucherChanged.ToVoucher != ''
                && ledgerJournalVoucherChanged.FromVoucher != ''
                && ledgerJournalVoucherChanged.ToDate >= fromDate
                && ledgerJournalVoucherChanged.ToDate <= toDate;

        if (VendReport_LedgerReconciliationVoucherChangedFlight::instance().isEnabled())
        {
            LedgerJournalVoucherChanged ledgerJournalVoucherChanged2;
            VendTrans vendTrans, vendTrans2;

            update_recordSet ledgerReconciliationLedgerTmp
            setting Voucher = ledgerJournalVoucherChanged.ToVoucher
            join ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.FromVoucher == ledgerReconciliationLedgerTmp.Voucher
                    && ledgerJournalVoucherChanged.ToDate == ledgerReconciliationLedgerTmp.AccountingDate
                    && ledgerJournalVoucherChanged.JournalNum != ''
                    && ledgerJournalVoucherChanged.ToVoucher != ''
                    && ledgerJournalVoucherChanged.FromVoucher != ''
                    && ledgerJournalVoucherChanged.ToDate >= fromDate
                    && ledgerJournalVoucherChanged.ToDate <= toDate
            notexists join ledgerJournalVoucherChanged2
                where ledgerJournalVoucherChanged2.FromVoucher == ledgerReconciliationLedgerTmp.Voucher
                    && ledgerJournalVoucherChanged2.ToDate == ledgerReconciliationLedgerTmp.AccountingDate
                    && ledgerJournalVoucherChanged2.JournalNum != ''
                    && ledgerJournalVoucherChanged2.ToVoucher != ''
                    && ledgerJournalVoucherChanged2.FromVoucher != ''
                    && ledgerJournalVoucherChanged2.ToDate >= fromDate
                    && ledgerJournalVoucherChanged2.ToDate <= toDate
                    && ledgerJournalVoucherChanged2.RecId != ledgerJournalVoucherChanged.RecId
            exists join vendTrans2
                where vendTrans2.Voucher == ledgerJournalVoucherChanged2.ToVoucher
                    && vendTrans2.Approved == NoYes::Yes
                    && (VendPostingFormDisableCancelToggleFlight::instance().isEnabled() || vendTrans2.Cancel == NoYes::Yes)
                    && vendTrans2.TransType == LedgerTransType::Vend
            notexists join vendTrans
                where vendTrans.Voucher == ledgerJournalVoucherChanged.ToVoucher
                    && vendTrans.Approved == NoYes::Yes
                    && (VendPostingFormDisableCancelToggleFlight::instance().isEnabled() || vendTrans.Cancel == NoYes::Yes)
                    && vendTrans.TransType == LedgerTransType::Vend;
        }
        else
        {
            update_recordSet ledgerReconciliationLedgerTmp
            setting Voucher = ledgerJournalVoucherChanged.ToVoucher
            join ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.FromVoucher == ledgerReconciliationLedgerTmp.Voucher
                    && ledgerJournalVoucherChanged.ToDate == ledgerReconciliationLedgerTmp.AccountingDate
                    && ledgerJournalVoucherChanged.JournalNum != ''
                    && ledgerJournalVoucherChanged.ToVoucher != ''
                    && ledgerJournalVoucherChanged.FromVoucher != ''
                    && ledgerJournalVoucherChanged.ToDate >= fromDate
                    && ledgerJournalVoucherChanged.ToDate <= toDate;
        }

        update_recordSet ledgerReconciliationLedgerTmp
        setting AccountingDate = ledgerJournalVoucherChanged.ToDate
        join ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.FromDate == ledgerReconciliationLedgerTmp.AccountingDate
                && ledgerJournalVoucherChanged.ToVoucher == ledgerReconciliationLedgerTmp.Voucher
                && ledgerJournalVoucherChanged.JournalNum != ''
                && ledgerJournalVoucherChanged.ToVoucher != ''
                && ledgerJournalVoucherChanged.FromVoucher != ''
                && ledgerJournalVoucherChanged.ToDate >= fromDate
                && ledgerJournalVoucherChanged.ToDate <= toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReverseAmountInArrivalAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update reverse amounts for arrival reversal in vendor transactions.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    private void updateReverseAmountInArrivalAccount(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        // Reverse the amount for arrival reversal.
        update_recordset _vendLedgerReconciliationStagingTmp
            setting
                VendAmountMST = _vendLedgerReconciliationStagingTmp.VendAmountMST * -1,
                VendAmountReportingCurrency = _vendLedgerReconciliationStagingTmp.VendAmountReportingCurrency * -1
            where _vendLedgerReconciliationStagingTmp.IsSummaryAccount == NoYes::No
                && _vendLedgerReconciliationStagingTmp.IsReversalTransaction == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendorTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the vendor transactions.
    /// </summary>
    /// <param name="_vendLedgerReconciliationCurrencyStagingTmp">The Vendor to ledger reconciliation currency record which holds the vendor transaction currency information.</param>
    /// <param name="_userConnection">The user connection instance.</param>
    private void insertVendorTransactions(vendLedgerReconciliationCurrencyTmp _vendLedgerReconciliationCurrencyStagingTmp, UserConnection _userConnection)
    {
        vendLedgerReconciliationCurrencyTmp vendLedgerReconciliationCurrencyTmpSelfReference;

        if (_userConnection)
        {
            vendLedgerReconciliationCurrencyTmpSelfReference.setConnection(_userConnection);
        }

        vendLedgerReconciliationCurrencyTmpSelfReference.linkPhysicalTableInstance(_vendLedgerReconciliationCurrencyStagingTmp);

        // Reconcile vendor records that will cancel out
        insert_recordset vendLedgerReconciliationCurrencyTmp
        (
            AccountingDate,
            VendAmountCurrency,
            VendorAccountId,
            VendorCurrencyBalance,
            VendLedgerAccount,
            VendorName,
            LedgerAccount,
            LedgerCurrencyBalance,
            LedgerAccountName,
            MainAccountId,
            MainAccountName,
            Voucher
        )
        select AccountingDate, VendAmountCurrency, VendorAccountId, VendorCurrencyBalance, VendLedgerAccount, VendorName, LedgerAccount,
            LedgerCurrencyBalance, LedgerAccountName, MainAccountId, MainAccountName, Voucher from _vendLedgerReconciliationCurrencyStagingTmp
        order by MainAccountId, AccountingDate, Voucher, VendorAccountId
        notExists join vendLedgerReconciliationCurrencyTmpSelfReference
            where vendLedgerReconciliationCurrencyTmpSelfReference.MainAccountId == _vendLedgerReconciliationCurrencyStagingTmp.MainAccountId
                && vendLedgerReconciliationCurrencyTmpSelfReference.Voucher == _vendLedgerReconciliationCurrencyStagingTmp.Voucher
                && vendLedgerReconciliationCurrencyTmpSelfReference.AccountingDate == _vendLedgerReconciliationCurrencyStagingTmp.AccountingDate
                && vendLedgerReconciliationCurrencyTmpSelfReference.VendAmountCurrency == -(_vendLedgerReconciliationCurrencyStagingTmp.VendAmountCurrency)
                && vendLedgerReconciliationCurrencyTmpSelfReference.RecId != _vendLedgerReconciliationCurrencyStagingTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(VendLedgerReconciliationTmp _vendLedgerReconciliationTmp = null)
    {
        vendLedgerReconciliationTmp = _vendLedgerReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateArrivalMainAccountForAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the staging <c>VendLedgerReconciliationTmp</c> record with the arrival
    /// main account information of posting profile for <c>TableGroupAll::All</c> type.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    private void populateArrivalMainAccountForAll(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        MainAccount mainAccount;
        VendLedgerAccounts vendLedgerAccounts;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        update_recordset _vendLedgerReconciliationStagingTmp setting
            MainAccount = mainAccount.RecId,
            MainAccountId = mainAccount.MainAccountId,
            MainAccountName = mainAccount.Name
            where _vendLedgerReconciliationStagingTmp.MainAccountId == ''
                && _vendLedgerReconciliationStagingTmp.isSummaryAccount == NoYes::No
        join PostingProfile from vendLedgerAccounts where
            vendLedgerAccounts.PostingProfile == _vendLedgerReconciliationStagingTmp.PostingProfile
            && vendLedgerAccounts.AccountCode == TableGroupAll::All
            && vendLedgerAccounts.PurchasingLedgerDimension != 0
        join RecId from dimensionAttributeValueCombination where
            dimensionAttributeValueCombination.RecId == vendLedgerAccounts.PurchasingLedgerDimension
        join RecId, MainAccountId, Name from mainAccount where
            mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
            && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateArrivalMainAccountForGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the staging <c>VendLedgerReconciliationTmp</c> record with the arrival
    /// main account information of posting profile for <c>TableGroupAll::GroupId</c> type.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    private void populateArrivalMainAccountForGroupId(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        MainAccount mainAccount;
        VendLedgerAccounts vendLedgerAccounts;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        update_recordset _vendLedgerReconciliationStagingTmp setting
            MainAccount = mainAccount.RecId,
            MainAccountId = mainAccount.MainAccountId,
            MainAccountName = mainAccount.Name
            where _vendLedgerReconciliationStagingTmp.MainAccountId == ''
                && _vendLedgerReconciliationStagingTmp.isSummaryAccount == NoYes::No
        join PostingProfile from vendLedgerAccounts where
            vendLedgerAccounts.Num == _vendLedgerReconciliationStagingTmp.VendGroup
            && vendLedgerAccounts.PostingProfile == _vendLedgerReconciliationStagingTmp.PostingProfile
            && vendLedgerAccounts.AccountCode == TableGroupAll::GroupId
            && vendLedgerAccounts.PurchasingLedgerDimension != 0
        join RecId from dimensionAttributeValueCombination where
            dimensionAttributeValueCombination.RecId == vendLedgerAccounts.PurchasingLedgerDimension
        join RecId, MainAccountId, Name from mainAccount where
            mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
            && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateArrivalMainAccountForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the staging <c>VendLedgerReconciliationTmp</c> record with the arrival
    /// main account information of posting profile for <c>TableGroupAll::Table</c> type.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    private void populateArrivalMainAccountForTable(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        MainAccount mainAccount;
        VendLedgerAccounts vendLedgerAccounts;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        update_recordset _vendLedgerReconciliationStagingTmp setting
            MainAccount = mainAccount.RecId,
            MainAccountId = mainAccount.MainAccountId,
            MainAccountName = mainAccount.Name
            where _vendLedgerReconciliationStagingTmp.MainAccountId == ''
                && _vendLedgerReconciliationStagingTmp.isSummaryAccount == NoYes::No
        join PostingProfile from vendLedgerAccounts where
            vendLedgerAccounts.Num == _vendLedgerReconciliationStagingTmp.VendorAccountId
            && vendLedgerAccounts.PostingProfile == _vendLedgerReconciliationStagingTmp.PostingProfile
            && vendLedgerAccounts.AccountCode == TableGroupAll::Table
            && vendLedgerAccounts.PurchasingLedgerDimension != 0
        join RecId from dimensionAttributeValueCombination where
            dimensionAttributeValueCombination.RecId == vendLedgerAccounts.PurchasingLedgerDimension
        join RecId, MainAccountId, Name from mainAccount where
            mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
            && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSummarizedMainAccountForAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the staging <c>VendLedgerReconciliationTmp</c> record with the summarized
    /// main account information of posting profile for <c>TableGroupAll::All</c> type.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    private void populateSummarizedMainAccountForAll(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        MainAccount mainAccount;
        VendLedgerAccounts vendLedgerAccounts;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        update_recordset _vendLedgerReconciliationStagingTmp setting
            MainAccount = mainAccount.RecId,
            MainAccountId = mainAccount.MainAccountId,
            MainAccountName = mainAccount.Name
            where _vendLedgerReconciliationStagingTmp.MainAccountId == ''
                && _vendLedgerReconciliationStagingTmp.isSummaryAccount == NoYes::Yes
        join PostingProfile from vendLedgerAccounts where
            vendLedgerAccounts.PostingProfile == _vendLedgerReconciliationStagingTmp.PostingProfile
            && vendLedgerAccounts.AccountCode == TableGroupAll::All
            && vendLedgerAccounts.SummaryLedgerDimension != 0
        join RecId from dimensionAttributeValueCombination where
            dimensionAttributeValueCombination.RecId == vendLedgerAccounts.SummaryLedgerDimension
        join RecId, MainAccountId, Name from mainAccount where
            mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
            && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSummarizedMainAccountForGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the staging <c>VendLedgerReconciliationTmp</c> record with the summarized
    /// main account information of posting profile for <c>TableGroupAll::GroupId</c> type.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    private void populateSummarizedMainAccountForGroupId(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        MainAccount mainAccount;
        VendLedgerAccounts vendLedgerAccounts;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        update_recordset _vendLedgerReconciliationStagingTmp setting
            MainAccount = mainAccount.RecId,
            MainAccountId = mainAccount.MainAccountId,
            MainAccountName = mainAccount.Name
            where _vendLedgerReconciliationStagingTmp.MainAccountId == ''
                && _vendLedgerReconciliationStagingTmp.isSummaryAccount == NoYes::Yes
        join PostingProfile from vendLedgerAccounts where
            vendLedgerAccounts.Num == _vendLedgerReconciliationStagingTmp.VendGroup
            && vendLedgerAccounts.PostingProfile == _vendLedgerReconciliationStagingTmp.PostingProfile
            && vendLedgerAccounts.AccountCode == TableGroupAll::GroupId
            && vendLedgerAccounts.SummaryLedgerDimension != 0
        join RecId from dimensionAttributeValueCombination where
            dimensionAttributeValueCombination.RecId == vendLedgerAccounts.SummaryLedgerDimension
        join RecId, MainAccountId, Name from mainAccount where
            mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
            && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSummarizedMainAccountForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the staging <c>VendLedgerReconciliationTmp</c> record with the summarized
    /// main account information of posting profile for <c>TableGroupAll::Table</c> type.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    private void populateSummarizedMainAccountForTable(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        MainAccount mainAccount;
        VendLedgerAccounts vendLedgerAccounts;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        update_recordset _vendLedgerReconciliationStagingTmp setting
            MainAccount = mainAccount.RecId,
            MainAccountId = mainAccount.MainAccountId,
            MainAccountName = mainAccount.Name
            where _vendLedgerReconciliationStagingTmp.MainAccountId == ''
                && _vendLedgerReconciliationStagingTmp.isSummaryAccount == NoYes::Yes
        join PostingProfile from vendLedgerAccounts where
            vendLedgerAccounts.Num == _vendLedgerReconciliationStagingTmp.VendorAccountId
            && vendLedgerAccounts.PostingProfile == _vendLedgerReconciliationStagingTmp.PostingProfile
            && vendLedgerAccounts.AccountCode == TableGroupAll::Table
            && vendLedgerAccounts.SummaryLedgerDimension != 0
        join RecId from dimensionAttributeValueCombination where
            dimensionAttributeValueCombination.RecId == vendLedgerAccounts.SummaryLedgerDimension
        join RecId, MainAccountId, Name from mainAccount where
            mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
            && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the staging <c>VendLedgerReconciliationTmp</c> record with vendor transaction information.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    private void populateVendTrans(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        this.populateVendTransForArrivalAccount(_vendLedgerReconciliationStagingTmp);
        this.populateVendTransForSummaryAccount(_vendLedgerReconciliationStagingTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendTransForSummaryAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the staging <c>VendLedgerReconciliationTmp</c> record with vendor transaction information for summary account.
    /// </summary>
    private void populateVendTransForSummaryAccount(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        VendTrans vendTrans;
        VendTable vendTable;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        boolean boolTrue = NoYes::Yes;

        //summary account, not register-approval
        insert_recordset _vendLedgerReconciliationStagingTmp
        (
            VendTransId,
            AccountingDate,
            Voucher,
            VendAmountMST,
            VendAmountReportingCurrency,
            PostingProfile,
            isSummaryAccount,
            VendJournalNum,
            VendorAccountId
        )
        select RecId, TransDate, Voucher, AmountMST, ReportingCurrencyAmount, PostingProfile, boolTrue, JournalNum from vendTrans
            where vendTrans.TransDate >= fromDate
                && vendTrans.TransDate <= toDate
                && vendTrans.Voucher >= fromVoucher
                && vendTrans.Voucher <= toVoucher
                && vendTrans.PostingProfile >= fromPostingProfile
                && vendTrans.PostingProfile <= toPostingProfile
                && vendTrans.Arrival == NoYes::No
        join AccountNum from vendTable
            where vendTable.AccountNum == vendTrans.AccountNum;

        //summary account for an approved register
        insert_recordset _vendLedgerReconciliationStagingTmp
        (
            VendTransId,
            AccountingDate,
            Voucher,
            VendAmountMST,
            VendAmountReportingCurrency,
            PostingProfile,
            isSummaryAccount,
            VendJournalNum,
            VendorAccountId
        )
        select RecId, ApprovedDate, Voucher, AmountMST, ReportingCurrencyAmount, PostingProfile, boolTrue, JournalNum from vendTrans
            where vendTrans.ApprovedDate >= fromDate
                && vendTrans.ApprovedDate <= toDate
                && vendTrans.Voucher >= fromVoucher
                && vendTrans.Voucher <= toVoucher
                && vendTrans.PostingProfile >= fromPostingProfile
                && vendTrans.PostingProfile <= toPostingProfile
                && vendTrans.TransType != LedgerTransType::ExchAdjustment
                && vendTrans.Arrival == NoYes::Yes
                && vendTrans.Approved == NoYes::Yes
        join AccountNum from vendTable
            where vendTable.AccountNum == vendTrans.AccountNum;

        //approved flag set to 'NO' - summary account for an approved register
        insert_recordset _vendLedgerReconciliationStagingTmp
        (
            VendTransId,
            Voucher,
            VendAmountMST,
            VendAmountReportingCurrency,
            PostingProfile,
            isSummaryAccount,
            VendJournalNum,
            AccountingDate,
            VendorAccountId
        )
        select RecId, Voucher, AmountMST, ReportingCurrencyAmount, PostingProfile, boolTrue, JournalNum from vendTrans
            where vendTrans.Voucher >= fromVoucher
                && vendTrans.Voucher <= toVoucher
                && vendTrans.PostingProfile >= fromPostingProfile
                && vendTrans.PostingProfile <= toPostingProfile
                && vendTrans.TransType != LedgerTransType::ExchAdjustment
                && vendTrans.Arrival == NoYes::Yes
                && vendTrans.Approved == NoYes::No
        join ledgerJournalTable
            where vendTrans.journalNum == ledgerJournalTable.JournalNum
                && ledgerJournalTable.JournalType == LedgerJournalType::Approval
                && ledgerJournalTable.Posted == NoYes::Yes
        join ToDate from ledgerjournalvoucherchanged
            where ledgerjournalvoucherchanged.JournalNum == ledgerJournalTable.JournalNum
                && ledgerjournalvoucherchanged.ToDate >= fromDate
                && ledgerjournalvoucherchanged.ToDate <= toDate
        join AccountNum from vendTable
            where vendTable.AccountNum == vendTrans.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendTransForArrivalAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the staging <c>VendLedgerReconciliationTmp</c> record with vendor transaction information for arrival account.
    /// </summary>
    private void populateVendTransForArrivalAccount(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        VendTrans vendTrans;
        VendTable vendTable;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        boolean boolTrue = NoYes::Yes;
        boolean boolFalse = NoYes::No;

        //arrival account for register (approved or not approved)
        insert_recordset _vendLedgerReconciliationStagingTmp
        (
            VendTransId,
            AccountingDate,
            Voucher,
            VendAmountMST,
            VendAmountReportingCurrency,
            PostingProfile,
            isSummaryAccount,
            VendJournalNum,
            VendorAccountId
        )
        select RecId, TransDate, Voucher, AmountMST, ReportingCurrencyAmount, PostingProfile, boolFalse, JournalNum from vendTrans
            where vendTrans.TransDate >= fromDate
                && vendTrans.TransDate <= toDate
                && vendTrans.Voucher >= fromVoucher
                && vendTrans.Voucher <= toVoucher
                && vendTrans.PostingProfile >= fromPostingProfile
                && vendTrans.PostingProfile <= toPostingProfile
                && vendTrans.TransType != LedgerTransType::ExchAdjustment
                && vendTrans.Arrival == NoYes::Yes
        join AccountNum from vendTable
            where vendTable.AccountNum == vendTrans.AccountNum;

        //arrival account for exchange adjustment
        insert_recordset _vendLedgerReconciliationStagingTmp
        (
            VendTransId,
            AccountingDate,
            Voucher,
            VendAmountMST,
            VendAmountReportingCurrency,
            PostingProfile,
            isSummaryAccount,
            VendJournalNum,
            VendorAccountId
        )
        select RecId, TransDate, Voucher, AmountMST, ReportingCurrencyAmount, PostingProfile, boolFalse, JournalNum from vendTrans
            where vendTrans.TransDate >= fromDate
                && vendTrans.TransDate <= toDate
                && vendTrans.Voucher >= fromVoucher
                && vendTrans.Voucher <= toVoucher
                && vendTrans.PostingProfile >= fromPostingProfile
                && vendTrans.PostingProfile <= toPostingProfile
                && vendTrans.TransType == LedgerTransType::ExchAdjustment
                && vendTrans.Arrival == NoYes::Yes
                && vendTrans.Approved == NoYes::Yes
        join AccountNum from vendTable
            where vendTable.AccountNum == vendTrans.AccountNum;

        //arrival reversal account for an approved register
        insert_recordset _vendLedgerReconciliationStagingTmp
        (
            VendTransId,
            AccountingDate,
            Voucher,
            VendAmountMST,
            VendAmountReportingCurrency,
            PostingProfile,
            isSummaryAccount,
            IsReversalTransaction,
            VendJournalNum,
            VendorAccountId
        )
        select RecId, ApprovedDate, Voucher, AmountMST, ReportingCurrencyAmount, PostingProfile, boolFalse, boolTrue, JournalNum from vendTrans
            where vendTrans.ApprovedDate >= fromDate
                && vendTrans.ApprovedDate <= toDate
                && vendTrans.Voucher >= fromVoucher
                && vendTrans.Voucher <= toVoucher
                && vendTrans.PostingProfile >= fromPostingProfile
                && vendTrans.PostingProfile <= toPostingProfile
                && vendTrans.TransType != LedgerTransType::ExchAdjustment
                && vendTrans.Arrival == NoYes::Yes
                && vendTrans.Approved == NoYes::Yes
        join AccountNum from vendTable
            where vendTable.AccountNum == vendTrans.AccountNum;

        //approved flag set to 'NO' - arrival reversal account for an approved register
        insert_recordset _vendLedgerReconciliationStagingTmp
        (
            VendTransId,
            Voucher,
            VendAmountMST,
            VendAmountReportingCurrency,
            PostingProfile,
            isSummaryAccount,
            IsReversalTransaction,
            VendJournalNum,
            AccountingDate,
            VendorAccountId
        )
        select RecId, Voucher, AmountMST, ReportingCurrencyAmount, PostingProfile, boolFalse, boolTrue, JournalNum from vendTrans
            where vendTrans.Voucher >= fromVoucher
                && vendTrans.Voucher <= toVoucher
                && vendTrans.PostingProfile >= fromPostingProfile
                && vendTrans.PostingProfile <= toPostingProfile
                && vendTrans.TransType != LedgerTransType::ExchAdjustment
                && vendTrans.Arrival == NoYes::Yes
                && vendTrans.Approved == NoYes::No
        join ledgerJournalTable
            where vendTrans.journalNum == ledgerJournalTable.JournalNum
                && ledgerJournalTable.JournalType == LedgerJournalType::Approval
                && ledgerJournalTable.Posted == NoYes::Yes
        join ToDate from ledgerjournalvoucherchanged
            where ledgerjournalvoucherchanged.JournalNum == ledgerJournalTable.JournalNum
                && ledgerjournalvoucherchanged.ToDate >= fromDate
                && ledgerjournalvoucherchanged.ToDate <= toDate
        join AccountNum from vendTable
            where vendTable.AccountNum == vendTrans.AccountNum;

        this.updateReverseAmountInArrivalAccount(_vendLedgerReconciliationStagingTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendLedgerReconciliationAccountingCurrencyTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the staging <c>VendLedgerReconciliationCurrencyTmp</c> record with staging <c>VendLedgerReconciliationTmp</c>.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    /// <param name="_vendLedgerReconciliationCurrencyStagingTmp">The Vendor to ledger reconciliation currency record which holds the vendor transaction information for accounting currency.</param>
    private void populateVendLedgerReconciliationAccountingCurrencyTmp(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp, VendLedgerReconciliationCurrencyTmp _vendLedgerReconciliationCurrencyStagingTmp)
    {
        insert_recordset _vendLedgerReconciliationCurrencyStagingTmp
        (
            LedgerAmountCurrency,
            VendAmountCurrency,
            CurrencyBalanceDifference,
            LedgerCurrencyBalance,
            VendorCurrencyBalance,
            AccountingDate,
            IsSummarized,
            LedgerAccount,
            LedgerAccountName,
            LedgerJournalId,
            MainAccount,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            VendGroup,
            VendLedgerAccount,
            VendorAccountId,
            VendorName,
            Voucher,
            VendTransId,
            VendJournalNum,
            IsSummaryAccount
        )
        select LedgerAmountMST,
            VendAmountMST,
            AccountingCurrencyBalanceDifference,
            LedgerAccountingCurrencyBalance,
            VendorAccountingCurrencyBalance,
            AccountingDate,
            IsSummarized,
            LedgerAccount,
            LedgerAccountName,
            LedgerJournalId,
            MainAccount,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            VendGroup,
            VendLedgerAccount,
            VendorAccountId,
            VendorName,
            Voucher,
            VendTransId,
            VendJournalNum,
            IsSummaryAccount
        from _vendLedgerReconciliationStagingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendLedgerReconciliationReportingCurrencyTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the staging <c>VendLedgerReconciliationCurrencyTmp</c> record with staging <c>VendLedgerReconciliationTmp</c>.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    /// <param name="_vendLedgerReconciliationCurrencyStagingTmp">The Vendor to ledger reconciliation currency record which holds the vendor transaction information for reporting currency.</param>
    private void populateVendLedgerReconciliationReportingCurrencyTmp(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp, VendLedgerReconciliationCurrencyTmp _vendLedgerReconciliationCurrencyStagingTmp)
    {
        insert_recordset _vendLedgerReconciliationCurrencyStagingTmp
        (
            LedgerAmountCurrency,
            VendAmountCurrency,
            CurrencyBalanceDifference,
            AccountingDate,
            IsSummarized,
            LedgerAccount,
            LedgerAccountName,
            LedgerJournalId,
            MainAccount,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            VendGroup,
            VendLedgerAccount,
            VendorAccountId,
            VendorName,
            Voucher,
            VendTransId,
            VendJournalNum,
            IsSummaryAccount
        )
        select LedgerAmountReportingCurrency,
            VendAmountReportingCurrency,
            ReportingCurrencyBalanceDifference,
            AccountingDate,
            IsSummarized,
            LedgerAccount,
            LedgerAccountName,
            LedgerJournalId,
            MainAccount,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            VendGroup,
            VendLedgerAccount,
            VendorAccountId,
            VendorName,
            Voucher,
            VendTransId,
            VendJournalNum,
            IsSummaryAccount
        from _vendLedgerReconciliationStagingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendLedgerReconciliationAccountingCurrencyResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the result <c>VendLedgerReconciliationTmp</c> record with staging <c>VendLedgerReconciliationCurrencyTmp</c>.
    /// </summary>
    /// <param name="_vendLedgerReconciliationResultTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    /// <param name="_vendLedgerReconciliationCurrencyStagingTmp">The Vendor to ledger reconciliation currency record which holds the vendor transaction information for accounting currency.</param>
    private void populateVendLedgerReconciliationAccountingCurrencyResult(VendLedgerReconciliationTmp _vendLedgerReconciliationResultTmp, VendLedgerReconciliationCurrencyTmp _vendLedgerReconciliationCurrencyStagingTmp)
    {
        insert_recordset _vendLedgerReconciliationResultTmp
        (
            LedgerAmountMST,
            VendAmountMST,
            AccountingCurrencyBalanceDifference,
            LedgerAccountingCurrencyBalance,
            VendorAccountingCurrencyBalance,
            AccountingDate,
            IsSummarized,
            LedgerAccount,
            LedgerAccountName,
            LedgerJournalId,
            MainAccount,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            VendGroup,
            VendLedgerAccount,
            VendorAccountId,
            VendorName,
            Voucher,
            VendTransId,
            VendJournalNum,
            IsSummaryAccount
        )
        select LedgerAmountCurrency,
            VendAmountCurrency,
            CurrencyBalanceDifference,
            LedgerCurrencyBalance,
            VendorCurrencyBalance,
            AccountingDate,
            IsSummarized,
            LedgerAccount,
            LedgerAccountName,
            LedgerJournalId,
            MainAccount,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            VendGroup,
            VendLedgerAccount,
            VendorAccountId,
            VendorName,
            Voucher,
            VendTransId,
            VendJournalNum,
            IsSummaryAccount
        from _vendLedgerReconciliationCurrencyStagingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendLedgerReconciliationReportingCurrencyResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the result <c>VendLedgerReconciliationTmp</c> record with staging <c>VendLedgerReconciliationCurrencyTmp</c>.
    /// </summary>
    /// <param name="_vendLedgerReconciliationResultTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    /// <param name="_vendLedgerReconciliationCurrencyStagingTmp">The Vendor to ledger reconciliation currency record which holds the vendor transaction information for reporting currency.</param>
    private void populateVendLedgerReconciliationReportingCurrencyResult(VendLedgerReconciliationTmp _vendLedgerReconciliationResultTmp, VendLedgerReconciliationCurrencyTmp _vendLedgerReconciliationCurrencyStagingTmp)
    {
        insert_recordset _vendLedgerReconciliationResultTmp
        (
            LedgerAmountReportingCurrency,
            VendAmountReportingCurrency,
            ReportingCurrencyBalanceDifference,
            AccountingDate,
            IsSummarized,
            LedgerAccount,
            LedgerAccountName,
            LedgerJournalId,
            MainAccount,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            VendGroup,
            VendLedgerAccount,
            VendorAccountId,
            VendorName,
            Voucher,
            VendTransId,
            VendJournalNum,
            IsSummaryAccount
        )
        select LedgerAmountCurrency,
            VendAmountCurrency,
            CurrencyBalanceDifference,
            AccountingDate,
            IsSummarized,
            LedgerAccount,
            LedgerAccountName,
            LedgerJournalId,
            MainAccount,
            MainAccountId,
            MainAccountName,
            PostingProfile,
            VendGroup,
            VendLedgerAccount,
            VendorAccountId,
            VendorName,
            Voucher,
            VendTransId,
            VendJournalNum,
            IsSummaryAccount
        from _vendLedgerReconciliationCurrencyStagingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processVendLedgerReconciliation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs reconciliation between the ledger entries and vendor transactions.
    /// </summary>
    /// <param name="_userConnection">The user connection instance; optional.</param>
    /// <returns>
    /// The <c>VendLedgerReconciliationTmp</c> record with reconciled records.
    /// </returns>
    public VendLedgerReconciliationTmp processVendLedgerReconciliation(UserConnection _userConnection = null)
    {
        VendLedgerReconciliationTmp vendLedgerReconciliationStagingTmp;
        VendLedgerReconciliationCurrencyTmp vendLedgerReconciliationCurrencyStagingTmp;
        NoYes tmpNoYes;

        if (_userConnection)
        {
            vendLedgerReconciliationStagingTmp.setConnection(_userConnection);
            vendLedgerReconciliationCurrencyStagingTmp.setConnection(_userConnection);
            ledgerReconciliationLedgerTmp.setConnection(_userConnection);
            ledgerReconciliationLedgerCurrencyTmp.setConnection(_userConnection);
            vendLedgerReconciliationTmp.setConnection(_userConnection);
            vendLedgerReconciliationCurrencyTmp.setConnection(_userConnection);
            ledgerReconcileAccountsTmp.setConnection(_userConnection);
            ledgerReconciliationLedgerTmpSummary.setConnection(_userConnection);
        }

        this.setRanges();

        // Get vendor transaction and general journal entries.
        this.populateVendTrans(vendLedgerReconciliationStagingTmp);

        tmpNoYes = includeDetails;
        includeDetails = true;
        this.createLedgerReconciliationLedgerTmp();
        includeDetails = tmpNoYes;

        // Update vendor details for vendLedgerReconciliationTmp before reconciliation
        this.updateVendorDetailsBeforeReconciliation(vendLedgerReconciliationStagingTmp);

        // Find ledger and vendor records linked via LedgerJournalVoucherChanged table
        this.insertLinkedVendorLedgerRecords(vendLedgerReconciliationStagingTmp, _userConnection);

        this.processVendTransactions(vendLedgerReconciliationStagingTmp);

        // Populate vendLedgerReconciliationCurrencyStagingTmp and ledgerReconciliationLedgerCurrencyTmp based on ledger currency selection.
        if (this.ledgerCurrencySelection == LedgerCurrencySelection::Accounting)
        {
            this.populateLedgerReconciliationAccountingCurrencyTmp(ledgerReconciliationLedgerTmp, ledgerReconciliationLedgerCurrencyTmp);
            this.populateVendLedgerReconciliationAccountingCurrencyTmp(vendLedgerReconciliationStagingTmp, vendLedgerReconciliationCurrencyStagingTmp);
        }
        else if (this.ledgerCurrencySelection == LedgerCurrencySelection::Reporting)
        {
            this.populateLedgerReconciliationReportingCurrencyTmp(ledgerReconciliationLedgerTmp, ledgerReconciliationLedgerCurrencyTmp);
            this.populateVendLedgerReconciliationReportingCurrencyTmp(vendLedgerReconciliationStagingTmp, vendLedgerReconciliationCurrencyStagingTmp);
        }
        
        this.insertVendorTransactions(vendLedgerReconciliationCurrencyStagingTmp, _userConnection);
        this.insertLedgerTransactions(_userConnection);
        
        if (this.parmIncludeDetails())
        {
            this.reconcileMultiTransOneVoucher(_userConnection);
        }
        
        if (this.parmShowDifferencesOnly())
        {
            this.removeReconciledTransactions();
        }

        this.updateBalanceDifferenceAmount();

        this.updateVendorDetails(_userConnection);
        this.updateMainAccountNameWithTranslation();

        this.removeZeroAmtTransactions();
       
        //Inserting data back into vendLedgerReconciliationTmp to avoid modifying report design.
        vendLedgerReconciliationTmp.doClear();
       
        // Populate vendLedgerReconciliationTmp based on ledger currency selection.
        if (this.ledgerCurrencySelection == LedgerCurrencySelection::Accounting)
        {
            this.populateVendLedgerReconciliationAccountingCurrencyResult(vendLedgerReconciliationTmp, vendLedgerReconciliationCurrencyTmp);
        }
        else if (this.ledgerCurrencySelection == LedgerCurrencySelection::Reporting)
        {
            this.populateVendLedgerReconciliationReportingCurrencyResult(vendLedgerReconciliationTmp, vendLedgerReconciliationCurrencyTmp);
        }

        if (SsrsPreProcessReportSkipDefaultDatabaseTrxScope::instance().isEnabled())
        {
            vendLedgerReconciliationStagingTmp.dispose();
            vendLedgerReconciliationCurrencyStagingTmp.dispose();
            ledgerReconciliationLedgerTmp.dispose();
            ledgerReconciliationLedgerCurrencyTmp.dispose();
            vendLedgerReconciliationCurrencyTmp.dispose();
            ledgerReconcileAccountsTmp.dispose();
            ledgerReconciliationLedgerTmpSummary.dispose();
        }

        return vendLedgerReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processVendTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the vendor transaction records and insert them in to the staging temp table.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">The Vendor to ledger reconciliation record which holds the vendor transaction information.</param>
    public final void processVendTransactions(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        // Update vendor transaction information on the staging table buffer with Summary/Arrival account flag.
        this.updateCancelledArrivalTransactions(_vendLedgerReconciliationStagingTmp);

        // Populate staging table buffer with summarized main account of Posting profile for TableGroupAll::Table.
        this.populateSummarizedMainAccountForTable(_vendLedgerReconciliationStagingTmp);

        // Populate staging table buffer with Arrival main account of Posting profile for TableGroupAll::Table.
        this.populateArrivalMainAccountForTable(_vendLedgerReconciliationStagingTmp);

        // Populate staging table buffer with summarized main account of Posting profile for TableGroupAll::GroupId.
        this.populateSummarizedMainAccountForGroupId(_vendLedgerReconciliationStagingTmp);

        // Populate staging table buffer with Arrival main account of Posting profile for TableGroupAll::GroupId.
        this.populateArrivalMainAccountForGroupId(_vendLedgerReconciliationStagingTmp);

        // Populate staging table buffer with summarized main account of Posting profile for TableGroupAll::All.
        this.populateSummarizedMainAccountForAll(_vendLedgerReconciliationStagingTmp);

        // Populate staging table buffer with Arrival main account of Posting profile for TableGroupAll::All.
        this.populateArrivalMainAccountForAll(_vendLedgerReconciliationStagingTmp);

        // Group the staging temp table records.
        this.groupVendorTransactions(_vendLedgerReconciliationStagingTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeZeroAmtTransactions</Name>
				<Source><![CDATA[
    private void removeZeroAmtTransactions()
    {
        delete_from vendLedgerReconciliationCurrencyTmp
                where vendLedgerReconciliationCurrencyTmp.LedgerAmountCurrency == 0
                && vendLedgerReconciliationCurrencyTmp.VendAmountCurrency == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reconcileMultiTransOneVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fix reconciliation on records where multiple transactions are recorded on one voucher.
    /// </summary>
    /// <param name="_userConnection">
    /// The user connection used with vendLedgerReconciliationTmp
    /// </param>
    /// <remarks>
    /// Incorrect transactions have the ledger record applied to multiple vendor records.
    /// </remarks>
    private void reconcileMultiTransOneVoucher(UserConnection _userConnection)
    {
        VendLedgerReconciliationCurrencyTmp vendLedgerReconciliationCurrencyTmpReconcile;
        VendLedgerReconciliationCurrencyTmp vendLedgerReconciliationCurrencyTmpSelfReference;

        if (VendLedgerReconciliationReportRemoveTempTableOwnershipFlight::instance().isEnabled())
        {
            if (_userConnection)
            {
                vendLedgerReconciliationCurrencyTmpSelfReference.setConnection(_userConnection);
                vendLedgerReconciliationCurrencyTmpReconcile.setConnection(_userConnection);
            }
        }
        else
        {
            VendReport_LedgerReconciliation::takeOwnershipOfTempTable(vendLedgerReconciliationCurrencyTmpSelfReference, _userConnection);
            VendReport_LedgerReconciliation::takeOwnershipOfTempTable(vendLedgerReconciliationCurrencyTmp, _userConnection);
            VendReport_LedgerReconciliation::takeOwnershipOfTempTable(vendLedgerReconciliationCurrencyTmpReconcile, _userConnection);
        }

        vendLedgerReconciliationCurrencyTmpSelfReference.linkPhysicalTableInstance(vendLedgerReconciliationCurrencyTmp);

        insert_recordSet vendLedgerReconciliationCurrencyTmpReconcile
        (
            AccountingDate,
            LedgerAmountCurrency,
            MainAccountId,
            MainAccountName,
            LedgerJournalId,
            Voucher,
            VendAmountCurrency
        )
        select AccountingDate,
            LedgerAmountCurrency,
            MainAccountId,
            MainAccountName,
            LedgerJournalId,
            Voucher,
            sum(VendAmountCurrency)
        from vendLedgerReconciliationCurrencyTmp
        group by AccountingDate,
            LedgerAmountCurrency,
            MainAccountId,
            MainAccountName,
            LedgerJournalId,
            Voucher
        where vendLedgerReconciliationCurrencyTmp.VendAmountCurrency != 0
        exists join vendLedgerReconciliationCurrencyTmpSelfReference
            where vendLedgerReconciliationCurrencyTmpSelfReference.MainAccountId == vendLedgerReconciliationCurrencyTmp.MainAccountId
                && vendLedgerReconciliationCurrencyTmpSelfReference.LedgerJournalId == vendLedgerReconciliationCurrencyTmp.LedgerJournalId
                && vendLedgerReconciliationCurrencyTmpSelfReference.Voucher == vendLedgerReconciliationCurrencyTmp.Voucher
                && vendLedgerReconciliationCurrencyTmpSelfReference.AccountingDate == vendLedgerReconciliationCurrencyTmp.AccountingDate
                && vendLedgerReconciliationCurrencyTmpSelfReference.RecId != vendLedgerReconciliationCurrencyTmp.RecId;

        // We want to leave transaction sets as-is where there is a discrepancy between the ledger and summed vendor amounts for accounting and reporting currency.
        delete_from vendLedgerReconciliationCurrencyTmpReconcile
            where vendLedgerReconciliationCurrencyTmpReconcile.VendAmountCurrency != vendLedgerReconciliationCurrencyTmpReconcile.LedgerAmountCurrency;

        update_recordSet vendLedgerReconciliationCurrencyTmp
            setting LedgerAmountCurrency = vendLedgerReconciliationCurrencyTmp.VendAmountCurrency
        exists join vendLedgerReconciliationCurrencyTmpReconcile
            where vendLedgerReconciliationCurrencyTmp.MainAccountId == vendLedgerReconciliationCurrencyTmpReconcile.MainAccountId
                && vendLedgerReconciliationCurrencyTmp.LedgerJournalId == vendLedgerReconciliationCurrencyTmpReconcile.LedgerJournalId
                && vendLedgerReconciliationCurrencyTmp.Voucher == vendLedgerReconciliationCurrencyTmpReconcile.Voucher
                && vendLedgerReconciliationCurrencyTmp.AccountingDate == vendLedgerReconciliationCurrencyTmpReconcile.AccountingDate;

        if (SsrsPreProcessReportSkipDefaultDatabaseTrxScope::instance().isEnabled() &&
            VendLedgerReconciliationReportRemoveTempTableOwnershipFlight::instance().isEnabled())
        {
            vendLedgerReconciliationCurrencyTmpSelfReference.dispose();
            vendLedgerReconciliationCurrencyTmpReconcile.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReconciledTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove transactions that have been reconciled completely - no differences
    /// </summary>
    private void removeReconciledTransactions()
    {
        delete_from vendLedgerReconciliationCurrencyTmp
            where vendLedgerReconciliationCurrencyTmp.LedgerAmountCurrency == vendLedgerReconciliationCurrencyTmp.VendAmountCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the bounds of the ranges used for querying data.
    /// </summary>
    public void setRanges()
    {
        if (!toDate)
        {
            toDate = maxDate();
        }

        if (!toVoucher)
        {
            toVoucher = strMax(extendedtypestr(Voucher));
        }

        if (!toPostingProfile)
        {
            toPostingProfile = strMax(extendedtypestr(VendPostingProfile));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCancelledArrivalTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the vendLedgerReconciliationTmp staging table to pull arrival account when appropriate
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">
    /// The VendLedgerReconcilaitionTmp table to insert records into
    /// </param>
    private void updateCancelledArrivalTransactions(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans;

        // Figure registered transactions
        update_recordset _vendLedgerReconciliationStagingTmp
            setting IsSummaryAccount = false
            exists join ledgerJournalTrans
                where ledgerJournalTrans.Voucher == _vendLedgerReconciliationStagingTmp.Voucher
                && ledgerJournalTrans.Cancel == true
                && ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBalanceDifferenceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the difference in balance <c>AmountMST</c> value.
    /// </summary>
    private void updateBalanceDifferenceAmount()
    {
        update_recordSet vendLedgerReconciliationCurrencyTmp setting
            CurrencyBalanceDifference = (vendLedgerReconciliationCurrencyTmp.VendAmountCurrency - vendLedgerReconciliationCurrencyTmp.LedgerAmountCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMainAccountNameWithTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the main account name with the translated name if there is any.
    /// </summary>
    private void updateMainAccountNameWithTranslation()
    {
        LanguageId languageId = DimensionCache::currentDimensionValueLanguageId();
        MainAccountTranslation mainAccountTranslation;
        MainAccount mainAccount;

        if (languageId)
        {
            update_recordset vendLedgerReconciliationCurrencyTmp setting
                MainAccountName = mainAccountTranslation.Name
            join MainAccountId from mainAccount where
                 mainAccount.MainAccountId == vendLedgerReconciliationCurrencyTmp.MainAccountId
            join Name from mainAccountTranslation
                    where mainAccountTranslation.MainAccount == mainAccount.RecId &&
                        mainAccountTranslation.LanguageId == languageId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorDetailsBeforeReconciliation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update unreconciled transactions with vendor details.
    /// </summary>
    /// <param name="_vendLedgerReconciliationStagingTmp">
    /// The VendLedgerReconcilaitionTmp table to update records into
    /// </param>
    private void updateVendorDetailsBeforeReconciliation(VendLedgerReconciliationTmp _vendLedgerReconciliationStagingTmp)
    {
        VendTable VendTable;
        DirPartyTable dirPartyTable;
        
        update_recordSet _vendLedgerReconciliationStagingTmp
            setting VendGroup = vendTable.VendGroup,
                VendorName= dirPartyTable.Name
            join vendTable
                where vendTable.AccountNum == _vendLedgerReconciliationStagingTmp.VendorAccountId
            join dirPartyTable
                where dirPartyTable.RecId == vendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update reconciled transactions with vendor details when empty.
    /// </summary>
    /// <param name="_userConnection">
    /// The user connection instance; optional.
    /// </param>
    private void updateVendorDetails(UserConnection _userConnection)
    {
        VendLedgerReconciliationCurrencyTmp vendLedgerReconciliationCurrencyTmpCopy;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

        if (VendLedgerReconciliationReportRemoveTempTableOwnershipFlight::instance().isEnabled())
        {
            if (_userConnection)
            {
                vendLedgerReconciliationCurrencyTmpCopy.setConnection(_userConnection);
            }
        }
        else
        {
            // Create a copy of the temp table.
            VendReport_LedgerReconciliation::takeOwnershipOfTempTable(vendLedgerReconciliationCurrencyTmpCopy, _userConnection);
            VendReport_LedgerReconciliation::takeOwnershipOfTempTable(vendLedgerReconciliationCurrencyTmp, _userConnection);
        }

        if (vendLedgerReconciliationCurrencyTmp.isTempDb())
        {
            vendLedgerReconciliationCurrencyTmpCopy.linkPhysicalTableInstance(vendLedgerReconciliationCurrencyTmp);
        }

        update_recordset vendLedgerReconciliationCurrencyTmp setting
            VendorAccountId = vendLedgerReconciliationCurrencyTmpCopy.VendorAccountId,
            VendorName = vendLedgerReconciliationCurrencyTmpCopy.VendorName
        join vendLedgerReconciliationCurrencyTmpCopy where
            vendLedgerReconciliationCurrencyTmp.Voucher == vendLedgerReconciliationCurrencyTmpCopy.Voucher
            && vendLedgerReconciliationCurrencyTmp.AccountingDate == vendLedgerReconciliationCurrencyTmpCopy.AccountingDate
            && vendLedgerReconciliationCurrencyTmpCopy.VendorAccountId != ''
            && vendLedgerReconciliationCurrencyTmpCopy.VendorName != ''
            && (vendLedgerReconciliationCurrencyTmp.VendorAccountId == '' || vendLedgerReconciliationCurrencyTmp.VendorName == '');

        // Update vendor details for vouchers which has been changed to a different one.
        update_recordset vendLedgerReconciliationCurrencyTmp setting
            VendorAccountId = vendLedgerReconciliationCurrencyTmpCopy.VendorAccountId,
            VendorName = vendLedgerReconciliationCurrencyTmpCopy.VendorName
        join ledgerJournalVoucherChanged where
            ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher
            && ledgerJournalVoucherChanged.ToVoucher == vendLedgerReconciliationTmp.Voucher
        join vendLedgerReconciliationCurrencyTmpCopy where
             vendLedgerReconciliationCurrencyTmpCopy.Voucher == ledgerJournalVoucherChanged.FromVoucher
             && vendLedgerReconciliationCurrencyTmpCopy.AccountingDate == vendLedgerReconciliationTmp.AccountingDate;

        if (SsrsPreProcessReportSkipDefaultDatabaseTrxScope::instance().isEnabled() &&
            VendLedgerReconciliationReportRemoveTempTableOwnershipFlight::instance().isEnabled())
        {
            vendLedgerReconciliationCurrencyTmpCopy.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeOwnershipOfTempTable</Name>
				<Source><![CDATA[
    private static void takeOwnershipOfTempTable(Common _tempDbTable, UserConnection _userConnection)
    {
        DictTable dictTable;
        TableId tableId;
        #SRSFramework

        if (_userConnection)
        {
            _tempDbTable.setConnection(_userConnection);

            tableId = _tempDbTable.TableId;
            dictTable = new DictTable(tableId);

            if (!dictTable)
            {
                throw error(strFmt("@SYS4007193", tableId2name(tableId)));
            }

            new ExecutePermission().assert();
            dictTable.callObject(#TempDBMethodName_TakeOwnership, _tempDbTable, true);
            CodeAccessPermission::revertAssert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>