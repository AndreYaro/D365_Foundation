<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSIEExportParametersHelper_SE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>LedgerSIEExportParametersHelper_SE</c> provides values for parameters in SIE GER export.
/// </summary>
class LedgerSIEExportParametersHelper_SE implements SysPackable
{
    date reportingDate;
    BudgetModelId budgetModelId;
    private List postingLayer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get current fiscal year.
    /// </summary>
    /// <returns>Current fiscal year</returns>
    public FiscalCalendarYear getCurrentFiscalYear()
    {
        FiscalCalendar fiscalCalendar =
            FiscalCalendar::find(Ledger::fiscalCalendar(CompanyInfo::current()));

        FiscalCalendarYear fiscalCalendarYear =
                FiscalCalendarYear::findYearByCalendarDate(
                fiscalCalendar.RecId, reportingDate);

        return fiscalCalendarYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get previous fiscal year.
    /// </summary>
    /// <returns>Previous fiscal year.</returns>
    public FiscalCalendarYear getPreviousFiscalYear()
    {
        FiscalCalendar fiscalCalendar =
            FiscalCalendar::find(Ledger::fiscalCalendar(CompanyInfo::current()));

        FiscalCalendarYear fiscalCalendarYear =
                FiscalCalendarYear::findYearByCalendarDate(
                fiscalCalendar.RecId,
                prevyr(reportingDate));

        return fiscalCalendarYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentOperatingFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get current session date's operating fiscal calendar period.
    /// </summary>
    /// <returns>current session date's operating fiscal calendar period</returns>
    public FiscalCalendarPeriod getCurrentOperatingFiscalCalendarPeriod()
    {
        FiscalCalendarPeriod fiscalCalendarPeriod;

        fiscalCalendarPeriod =
            FiscalCalendarPeriod::findPeriodByCalendarDate(
            this.getCurrentFiscalYear().RecId,
            reportingDate,
            FiscalPeriodType::Operating);

        return fiscalCalendarPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingDate</Name>
				<Source><![CDATA[
    public date parmReportingDate(date _reportingDate = reportingDate)
    {
        reportingDate = _reportingDate;
        return reportingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetModelId</Name>
				<Source><![CDATA[
    public BudgetModelId parmBudgetModelId(
        BudgetModelId _budgetModelId = budgetModelId)
    {
        budgetModelId = _budgetModelId;
        return budgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayer</Name>
				<Source><![CDATA[
    public List parmPostingLayer(List _postingLayer = postingLayer)
    {
        postingLayer = _postingLayer;
        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingLayerList</Name>
				<Source><![CDATA[
    [SysClassNameAttribute(classStr(LedgerSIEERExportData_SE))]
    public List getPostingLayerList()
    {
        List listData = new List(Types::Class);

        if(postingLayer != null)
        {
            ListEnumerator postingListEnumerator = postingLayer.getEnumerator();

            while (postingListEnumerator.moveNext())
            {
                LedgerSIEERExportData_SE ledgerSIEERExportData_SE = LedgerSIEERExportData_SE::newData(postingListEnumerator.current());
                        
                listData.addEnd(ledgerSIEERExportData_SE);
            }
        }

        return listData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>LedgerSIEExportParametersHelper_SE</c>.
    /// </summary>
    /// <param name = "_reportingDate">reporting date</param>
    /// <param name = "_budgetModelId">budget model ID</param>
    /// <returns>A new instance of <c>LedgerSIEExportParametersHelper_SE</c></returns>
    public static LedgerSIEExportParametersHelper_SE construct(
        date _reportingDate,
        BudgetModelId _budgetModelId)
    {
        LedgerSIEExportParametersHelper_SE instance = new LedgerSIEExportParametersHelper_SE();
        instance.parmReportingDate(_reportingDate);
        instance.parmBudgetModelId(_budgetModelId);
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>constructWithPostingLayer</c>.
    /// </summary>
    /// <param name = "_reportingDate">reporting date</param>
    /// <param name = "_budgetModelId">budget model ID</param>
    /// <param name = "_postingLayer">Posting layers</param>
    /// <returns>A new instance of <c>LedgerSIEExportParametersHelper_SE</c></returns>
    public static LedgerSIEExportParametersHelper_SE constructWithPostingLayer(
        date _reportingDate,
        BudgetModelId _budgetModelId,
        List _postingLayer = null)
    {
        LedgerSIEExportParametersHelper_SE instance = LedgerSIEExportParametersHelper_SE::construct(_reportingDate, _budgetModelId);
        instance.parmPostingLayer(_postingLayer);
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [reportingDate, budgetModelId, postingLayer ? postingLayer.pack() : conNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        date            reportingDateValue;
        BudgetModelId   budgetModelIdValue;
        container       packedPostingLayer;

        if (_packedClass)
        {
            [reportingDateValue, budgetModelIdValue, packedPostingLayer] = _packedClass;

            if (packedPostingLayer != conNull())
            {
                this.parmPostingLayer(List::create(packedPostingLayer));
            }

            this.parmReportingDate(reportingDateValue);
            this.parmBudgetModelId(budgetModelIdValue);           

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>