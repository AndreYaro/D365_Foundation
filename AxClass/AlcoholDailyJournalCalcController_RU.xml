<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholDailyJournalCalcController_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>AlcoholDailyJournalCalcController_RU</c> class is the controller class which is used to
///   control the alcohol daily journal form, perform some checks and call the calculation functionality.
/// </summary>
class AlcoholDailyJournalCalcController_RU extends RunBaseBatch implements BatchRetryable
{
    protected const int CurrentVersion = 1;
    container packedRecIdSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDailyJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the data for one record in <c>AlcoholDailyJournalTable_RU</c> table.
    /// </summary>
    /// <param name="_dailyJournalTable">
    ///    <c>AlcoholDailyJournalTable_RU</c> record for which the data should be calculated.
    /// </param>
    protected void calcDailyJournal(AlcoholDailyJournalTable_RU _dailyJournalTable)
    {
        if (_dailyJournalTable.Status == AlcoholDeclarationStatus_RU::NotCalculated)
        {
            if (this.canDailyJournalBeCalced(_dailyJournalTable))
            {
                ttsbegin;

                AlcoholDeclarationCalc_RU alcoholDeclarationCalc = AlcoholDeclarationCalc_RU::construct(AlcoholDailyJournalTable_RU::findRecId(_dailyJournalTable.RecId, true));
                alcoholDeclarationCalc.parmRecalcReceiptIssue(false);
                alcoholDeclarationCalc.calc();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDailyJournalBeCalced</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the data for the <c>AlcoholDailyJournalTable_RU</c> record can be calculated.
    /// </summary>
    /// <param name="_dailyJournalTable">
    ///    <c>AlcoholDailyJournalTable_RU</c> record to check.
    /// </param>
    /// <returns>
    ///    True if the data can be calculated; false otherwise.
    /// </returns>
    public boolean canDailyJournalBeCalced(AlcoholDailyJournalTable_RU  _dailyJournalTable)
    {
        boolean     ret = true;

        if (AlcoholDailyJournalTable_RU::nextJournalExists(_dailyJournalTable))
        {
            ret = checkFailed(strFmt("@SYS4003392", _dailyJournalTable.BranchId, _dailyJournalTable.AlcoholDeclarationType));
        }

        if (ret)
        {
            if (AlcoholDailyJournalTable_RU::previousNotCalculatedJournalExists(_dailyJournalTable))
            {
                ret = checkFailed(strFmt("@SYS4003393", _dailyJournalTable.BranchId, _dailyJournalTable.AlcoholDeclarationType));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the last value from SysLastValue. Overriden so that no record is retrieved.
    /// </summary>
    public void getLast()
    {
        // We do not want to call super here as we do not want to get the record from SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>, which is defined in the <c>ClassDeclaration</c> method.
    /// </summary>
    /// <returns>
    ///    A container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>.
    /// </returns>
    public container pack()
    {
        return [CurrentVersion, packedRecIdSet];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedRecIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Passes the packed set of RecIds of the records which have to be calculated.
    /// </summary>
    /// <param name="_packedRecIdSet">
    ///    Packed set of RecIds of the records which have to be calculated.
    /// </param>
    /// <returns>
    ///    Packed set of RecIds of the records which have to be calculated.
    /// </returns>
    public container parmPackedRecIdSet(container _packedRecIdSet = packedRecIdSet)
    {
        packedRecIdSet = _packedRecIdSet;
        return packedRecIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the main logic of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        Set                             set;
        SetEnumerator                   se;
        int                             i;
        AlcoholDailyJournalTable_RU     dailyJournalTable;

        set = Set::create(packedRecIdSet);
        se = set.getEnumerator();

        this.progressInit("@SYS31242", set.elements(),  #AviFormLetter);
        progress.setText("@SYS8577");

        try
        {
            ttsBegin;
            while (se.moveNext())
            {
                i++;
                progress.setCount(i);

                dailyJournalTable = AlcoholDailyJournalTable_RU::findRecId(se.current(), true);
                progress.setText(strfmt("@ApplicationSuite_Localization:AlcoholProcessingCalculation", dailyJournalTable.BranchId));
                this.calcDailyJournal(dailyJournalTable);
            }
            ttsCommit;

            info("@SYS9265");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the last value to SysLastValue. Overriden so that no record is saved.
    /// </summary>
    public void saveLast()
    {
        // We do not want to call super here as we do not want to save the record to SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks what the <c>pack</c> method has packed.
    /// </summary>
    /// <param name="packedClass">
    ///    The packed class in a container.
    /// </param>
    /// <returns>
    ///    true if the container has been unpacked successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, it may be necessary to unpack some prompt-related variables as well.
    /// </remarks>
    public boolean unpack(container packedClass)
    {
        Integer     version = conpeek(packedClass,1);

        switch (version)
        {
            case CurrentVersion:
                [version, packedRecIdSet] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Text description of the class which is shown in the dialog.
    /// </summary>
    /// <returns>
    ///   Text description of the class.
    /// </returns>
    public static Name description()
    {
        return "@SYS4003380";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs initialization from <c>Args</c> variable.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> object to initialize from.
    /// </param>
    public void initFromArgs(Args _args)
    {
        AlcoholDailyJournalTable_RU     dailyJournalTableCaller;
        Set                             set = new Set(Types::Int64);

        if (   ! _args
            || !_args.record()
            ||  _args.dataset() != tablenum(AlcoholDailyJournalTable_RU))
        {
            throw error("@GLS104275");
        }

        dailyJournalTableCaller = _args.record();
        set.add(dailyJournalTableCaller.RecId);
        packedRecIdSet = set.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AlcoholDailyJournalCalcController_RU construct()
    {
        return new AlcoholDailyJournalCalcController_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args   _args)
    {
        FormDataSource                          formDataSource;
        AlcoholDailyJournalCalcController_RU    runClass = AlcoholDailyJournalCalcController_RU::construct();

        runClass.getLast();
        runClass.initFromArgs(_args);
        runClass.saveLast();

        if (runClass.prompt())
        {
            runClass.runOperation();

            formDataSource =_args.record().dataSource();

            if (formDataSource)
            {
                formDataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>