<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanySyncPurchTableType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Synchronization engine at order header level for intercompany trade.
/// </summary>
public class InterCompanySyncPurchTableType
{
    InterCompanyTradingValueMap                 fromInterCompanyTradingValueMap;
    InterCompanyTradingValueMap                 toInterCompanyTradingValueMap;
    InterCompanyEndpointActionPolicy            toEndpointActionPolicy;
    SalesTable                                  salesTableOriginal;

    PurchTableType                              purchTableType;
    PurchTable                                  purchTable;
    VendTable                                   vendTable;

    boolean                                     create;
    
    PurchTable_RU                               purchTable_RU;
    PurchTable_W                                purchTable_W;
    
    AxSalesTable                                axSalesTable;
    CustTable                                   custTable;
    AxSalesTable_RU                             axSalesTableRU;

    private TradeInterCompanyConv               convDlvTerm;
    private TradeInterCompanyConv               convDlvTermSyncBack;
    private TradeInterCompanyConv               convDlvMode;
    private TradeInterCompanyConv               convDlvModeSyncBack;
    private TradeInterCompanyConv               convInventProfile;
    private TradeInterCompanyConv               convReturnReasonCode;
    
    private boolean                             showSyncCompletedMessage = true;

    
    //  Whenever a Intercompany sales order is created, create one payment record
    SalesId                                     interCompanyOrigSalesId;  // IC order the IC return should go against
    private AxMCRReturnSalesTable               axMCRReturnSalesTable;

    private PurchAgreementHeaderExt_RU purchAgreementHeaderExt_RU;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearInterCompanyRef</Name>
				<Source><![CDATA[
    private void clearInterCompanyRef()
    {
        purchTable.InterCompanyOrder        = false;
        purchTable.InterCompanyCompanyId    = '';
        purchTable.InterCompanySalesId      = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InterCompanySyncPurchTableType construct()
    {
        return new InterCompanySyncPurchTableType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAxSalesTableFromPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AxSalesTable</c> instance from the <c>PurchTable</c> instance.
    /// </summary>
    protected void initAxSalesTableFromPurchTable()
    {
        axSalesTable.parmInterCompanyCompanyId               (purchTable.DataAreaId);
        axSalesTable.parmInterCompanyOrder                   (purchTable.InterCompanyOrder);
        axSalesTable.parmInterCompanyPurchId                 (purchTable.PurchId);
        axSalesTable.parmInterCompanyOriginalSalesId         (purchTable.InterCompanyOriginalSalesId);
        axSalesTable.parmInterCompanyOriginalCustAccount     (purchTable.InterCompanyOriginalCustAccount);
        axSalesTable.parmInterCompanyDirectDeliveryOrig      (purchTable.InterCompanyDirectDelivery);
        axSalesTable.parmInterCompanyAllowIndirectCreationOri(purchTable.InterCompanyAllowIndirectCreation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTableType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal state of the synchronization engine from the <c>PurchTableType</c> instance.
    /// </summary>
    /// <param name = "_purchTableType">An instance of <c>PurchTableType</c> class.</param>
    protected void initFromPurchTableType(PurchTableType _purchTableType)
    {
        purchTableType = _purchTableType;
        purchTable = purchTableType.parmPurchTable();
        vendTable = purchTable.vendTable_OrderAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchTableType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate a new intercompany synchronization engine for the provided <c>PurchTableType</c> instance.
    /// </summary>
    /// <param name = "_purchTableType">An instance of <c>PurchTableType</c> class representing the purchase order line.</param>
    /// <returns>The instantiated instance.</returns>
    public static InterCompanySyncPurchTableType newFromPurchTableType(PurchTableType _purchTableType)
    {
        InterCompanySyncPurchTableType syncEngine = InterCompanySyncPurchTableType::construct();
        syncEngine.initFromPurchTableType(_purchTableType);

        return syncEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowSyncCompletedMessage</Name>
				<Source><![CDATA[
    public boolean parmShowSyncCompletedMessage(boolean _showSyncCompletedMessage = showSyncCompletedMessage)
    {
        showSyncCompletedMessage = _showSyncCompletedMessage;
        return showSyncCompletedMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipSynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if intercompany synchronization should be skipped
    /// </summary>
    /// <returns>true, if synchronization should be skipped; otherwise, false.</returns>
    protected boolean skipSynchronization()
    {
        if (purchTable.SkipUpdate == InterCompanySkipUpdate::InterCompany
            || purchTable.SkipUpdate == InterCompanySkipUpdate::Both
            || !purchTable.isInterCompanyOrder()
            || !purchTableType.interCompanyCreateAllowed()
            || !purchTable.interCompanyUpdateNow())
        {
            return true;
        }

        if (! TradeInterCompany::checkDataAreaAccess(purchTable.InterCompanyCompanyId))
        {
            this.clearInterCompanyRef();
            return true;
        }

        if (purchTable.ChangeRequestRequired)
        {
            // The intercompany sales order cannot be created in company %company ID of the other company%, because change management is enabled and required for vendor %ID of the IC vendor in current company%, %vendor name%, in company %ID of current company%
            warning(strFmt("@SYS344033", purchTable.InterCompanyCompanyId, vendTable.AccountNum, vendTable.name(), curext()));

            this.clearInterCompanyRef();
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes any additional internal state necessary for synchronization
    /// </summary>
    protected void prepareSynchronization()
    {
        purchTable.ChangeRequestRequired = NoYes::No;

        fromInterCompanyTradingValueMap = vendTable.interCompanyTradingPartner().interCompanyTradingValueMap();

        if (purchTable.DlvTerm)
        {
            convDlvTerm = TradeInterCompanyConv::construct();
            convDlvTerm.axDlvTermId(fromInterCompanyTradingValueMap, purchTable.DlvTerm);
        }
        if (purchTable.DlvMode)
        {
            convDlvMode = TradeInterCompanyConv::construct();
            convDlvMode.axDlvModeId(fromInterCompanyTradingValueMap, purchTable.DlvMode);
        }
        if (purchTable.ReturnReasonCodeId)
        {
            convReturnReasonCode = TradeInterCompanyConv::construct();
            convReturnReasonCode.axReturnReasonCodeId(fromInterCompanyTradingValueMap, purchTable.ReturnReasonCodeId);
        }
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchTable_RU = purchTable.purchTable_RU();
            if (purchTable_RU.InventProfileId_RU)
            {
                convInventProfile = TradeInterCompanyConv::construct();
                convInventProfile.axInventProfileId(fromInterCompanyTradingValueMap, purchTable_RU.InventProfileId_RU);
            }

            if (purchTable_RU.AgreementHeaderExt_RU)
            {
                purchAgreementHeaderExt_RU = PurchAgreementHeaderExt_RU::find(purchTable_RU.AgreementHeaderExt_RU);
            }
        }

        salesTableOriginal = purchTable.interCompanySalesTableOriginal();

        // retrieve the sales order id the derived RMA should go against
        if (SalesTableOriginal.SalesType == SalesType::ReturnItem)
        {
            interCompanyOrigSalesId = SalesTableOriginal.mcrInterCompanyOrigSalesId();
        }

        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            purchTable_W = purchTable.purchTable_W();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the actions necessary to synchronize the purchase order with the intercompany sales order.
    /// </summary>
    public void synchronize()
    {
        if (this.skipSynchronization())
        {
            return;
        }

        this.prepareSynchronization();

        changecompany (purchTable.InterCompanyCompanyId)
        {
            this.synchronizeInTradeCompany();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnStatusCreated</Name>
				<Source><![CDATA[
    protected ReturnStatusHeader getReturnStatusCreated()
    {
        return ReturnStatusHeader::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeInTradeCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the synchronization of the order header in the trade company.
    /// </summary>
    protected void synchronizeInTradeCompany()
    {
        setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

        custTable                       = CustTable::find(vendTable.interCompanyTradingPartnerAccount());
        toInterCompanyTradingValueMap   = custTable.interCompanyTradingPartner().interCompanyTradingValueMap();
        toEndpointActionPolicy          = custTable.interCompanyTradingPartner().interCompanyEndpointActionPolicy();

        this.createOrUpdateSalesTable();

        if (create && showSyncCompletedMessage)
        {
            info(strfmt("@SYS94303", axSalesTable.salesTable().SalesId), '', SysInfoAction_TableField::newBuffer(axSalesTable.salesTable()));
        }

        purchTable.InterCompanySalesId  = axSalesTable.parmSalesId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the intercompany order header in the trade company.
    /// </summary>
    protected void createOrUpdateSalesTable()
    {
        SalesTable intercompanySalesTable = SalesTable::find(purchTable.InterCompanySalesId, true);

        if (!intercompanySalesTable.RecId)
        {
            create = true;
            axSalesTable = AxSalesTable::construct();
                
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                axSalesTableRU = AxSalesTable_RU::construct();
            }
                
            axMCRReturnSalesTable = AxMCRReturnSalesTable::construct();
        }
        else
        {
            axSalesTable = AxSalesTable::newSalesTable(intercompanySalesTable);
                
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                axSalesTableRU = AxSalesTable_RU::newSalesTable_RU(SalesTable_RU::findBySalesTable(intercompanySalesTable.RecId, true));
            }
        }

        axSalesTable.parmSkipUpdate(InterCompanySkipUpdate::InterCompany);

        this.setSalesTableData();

        axSalesTable.save();

    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnReplacementId</Name>
				<Source><![CDATA[
    private void setReturnReplacementId()
    {
        if (salesTableOriginal.ReturnReplacementId)
        {
            PurchTable referencePurchTableToOrigReplacementOrder;
            changecompany (salesTableOriginal.company())
            {
                referencePurchTableToOrigReplacementOrder = SalesTable::find(salesTableOriginal.ReturnReplacementId).referencePurchTable();
            }
            if (referencePurchTableToOrigReplacementOrder
                && referencePurchTableToOrigReplacementOrder.InterCompanySalesId)
            {
                axSalesTable.parmReturnReplacementId(referencePurchTableToOrigReplacementOrder.InterCompanySalesId);
            }
        }
        else
        {
            axSalesTable.parmReturnReplacementId('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTableData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the intercompany sales order fields based on the purchase order.
    /// </summary>
    protected void setSalesTableData()
    {
        if (create)
        {
            // Don't validate intercompany SO.  The AX class will
            // try and validate against incorrect number sequence and it
            // shouldn't need to be done.
            axSalesTable.mcrSkipSalesIdValidation(true);

            this.setSalesId();
        }

        if (create)
        {
            axSalesTable.parmReturnStatus(this.getReturnStatusCreated());
            axSalesTable.parmSalesStatus(SalesStatus::Backorder);
        }

        if (create || purchTable.fieldChanged(fieldnum(PurchTable, OrderAccount)))
        {
            axSalesTable.parmCustAccount(custTable.AccountNum);
            axSalesTable.salesTable().initFromCustTable();

            if (CustConsInvoiceType_JP::isCustConsInvoiceEnabled())
            {
                axSalesTable.parmConsTarget_JP(axSalesTable.salesTable().ConsTarget_JP);
            }

            // <GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                TaxInformationCustTable_IN taxInformationCustTableLoc = custTable.getTaxInformationCustTable_IN();
                if (purchTable_W.TDSGroup_IN)
                {
                    axSalesTable.parmTDSGroup_IN(taxInformationCustTableLoc.TDSGroup);
                }
                else if (purchTable_W.TCSGroup_IN)
                {
                    axSalesTable.parmTCSGroup_IN(taxInformationCustTableLoc.TCSGroup);
                }
            }

            if (TaxParameters::isCustomsEnable_IN())
            {
                axSalesTable.parmCustomsExportOrder_IN(custTable.isForeign());
            }
            // </GIN>
        }

        
        this.initAxSalesTableFromPurchTable();

        axSalesTable.parmInterCompanyAutoCreateOrders        (axSalesTable.salesTable().InterCompanyAutoCreateOrders);
        axSalesTable.parmInterCompanyDirectDelivery          (axSalesTable.salesTable().InterCompanyDirectDelivery);

        if (create || purchTable.fieldChanged(fieldnum(PurchTable, PurchaseType)))
        {
            this.setSalesTableSalesType();
        }

        if (create || purchTable.fieldChanged(fieldnum(PurchTable, CurrencyCode)))
        {
            axSalesTable.parmCurrencyCode(purchTable.CurrencyCode);
        }

        if (create || purchTable.fieldChanged(fieldNum(PurchTable, MatchingAgreement)))
        {
            axSalesTable.parmMatchingAgreement(PurchAgreementHeader::find(purchTable.MatchingAgreement).salesAgreementHeader().RecId);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchTable_RU = purchTable.purchTable_RU();
            if ((create || purchTable_RU.fieldChanged(fieldNum(PurchTable_RU, AgreementHeaderExt_RU))) && purchAgreementHeaderExt_RU)
            {
                SalesAgreementHeaderExt_RU salesAgreementHeaderExt = purchAgreementHeaderExt_RU.salesAgreementHeaderIntercompany();
                AgreementHeader agreementHeader = AgreementHeader::find(salesAgreementHeaderExt.AgreementHeader);

                if (agreementHeader)
                {
                    axSalesTable.parmDefaultDimension(agreementHeader.DefaultDimension);
                }

                axSalesTableRU.parmAgreementHeaderExt_RU(salesAgreementHeaderExt.RecId);
            }
        }

        if (create)
        {
            if (purchTable.DlvTerm)
            {
                axSalesTable.parmDlvTerm(convDlvTerm.axDlvTermId(toInterCompanyTradingValueMap));
            }
            else if (axSalesTable.parmDlvTerm())
            {
                convDlvTermSyncBack = TradeInterCompanyConv::construct();
                convDlvTermSyncBack.axDlvTermId(toInterCompanyTradingValueMap, axSalesTable.parmDlvTerm());

                changecompany(purchTable.company())
                {
                    setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                    purchTable.DlvTerm = convDlvTermSyncBack.axDlvTermId(fromInterCompanyTradingValueMap);
                }
            }
        }
        else if (purchTable.fieldChanged(fieldnum(PurchTable, DlvTerm)))
        {
            axSalesTable.parmDlvTerm(purchTable.DlvTerm ? convDlvTerm.axDlvTermId(toInterCompanyTradingValueMap) : '');
        }

        if (create)
        {
            if (purchTable.DlvMode)
            {
                axSalesTable.parmDlvMode(convDlvMode.axDlvModeId(toInterCompanyTradingValueMap));
            }
            else if (axSalesTable.parmDlvMode())
            {
                convDlvModeSyncBack = TradeInterCompanyConv::construct();
                convDlvModeSyncBack.axDlvModeId(toInterCompanyTradingValueMap, axSalesTable.parmDlvMode());

                changecompany(purchTable.company())
                {
                    setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                    purchTable.DlvMode = convDlvModeSyncBack.axDlvModeId(fromInterCompanyTradingValueMap);
                }
            }
        }
        else if (purchTable.fieldChanged(fieldnum(PurchTable, DlvMode)))
        {
            axSalesTable.parmDlvMode(purchTable.DlvMode ? convDlvMode.axDlvModeId(toInterCompanyTradingValueMap) : '');
        }

        if (axSalesTableRU)
        {
            purchTable_RU = purchTable.purchTable_RU();
            if (create || purchTable_RU.fieldChanged(fieldNum(PurchTable_RU, InventProfileId_RU)))
            {
                axSalesTableRU.parmInventProfileId_RU(purchTable_RU.InventProfileId_RU ? convInventProfile.axInventProfileId(toInterCompanyTradingValueMap) : '');
                if (axSalesTableRU.parmInventProfileId_RU())
                {
                    axSalesTableRU.parmInventProfileType_RU(InventProfile_RU::find(axSalesTableRU.parmInventProfileId_RU()).InventProfileType);
                }
                else
                {
                    axSalesTableRU.parmInventProfileType_RU(InventProfileType_RU::NotSpecified);
                }
            }
        }

        if (create || purchTable.fieldChanged(fieldnum(PurchTable, DeliveryDate)))
        {
            axSalesTable.parmDeliveryDate(purchTable.DeliveryDate);
        }

        if (create || purchTable.fieldChanged(fieldNum(PurchTable, DeliveryPostalAddress)))
        {
            if (purchTable.PurchaseType != PurchaseType::ReturnItem)
            {
                axSalesTable.parmDeliveryPostalAddress(purchTable.DeliveryPostalAddress);
            }
            else
            {
                axSalesTable.salesTable().setReturnAddressFromInventLocationId(axSalesTable.salesTable().InventLocationId);
            }
        }

        if (create || purchTable.fieldChanged(fieldnum(PurchTable, DeliveryName)))
        {
            axSalesTable.parmDeliveryName(purchTable.DeliveryName);
        }

        if (create || purchTable.fieldChanged(fieldnum(PurchTable, DiscPercent)))
        {
            axSalesTable.parmDiscPercent(purchTable.DiscPercent);
        }

        if (purchTable.interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External).CustomerInfo)
        {
            if (create || purchTable.fieldChanged(fieldnum(PurchTable, InterCompanyCustPurchOrderFormNum)))
                axSalesTable.parmPurchOrderFormNum(purchTable.InterCompanyCustPurchOrderFormNum);
            if (create || purchTable.fieldChanged(fieldnum(PurchTable, VendorRef)))
                axSalesTable.parmCustomerRef(purchTable.VendorRef);
        }
        else
        {
            axSalesTable.parmPurchOrderFormNum(purchTable.PurchId);
        }

        if (axSalesTable.salesTable().SalesType == SalesType::ReturnItem)
        {
            if (purchTable.interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External).ReturnItemNum)
            {
                if (create || purchTable.fieldChanged(fieldnum(PurchTable, ReturnItemNum)))
                    axSalesTable.parmReturnItemNum(purchTable.ReturnItemNum);
            }
            if (!axSalesTable.salesTable().ReturnItemNum)
            {
                axSalesTable.parmReturnItemNum(NumberSeq::newGetNum(SalesParameters::numRefReturnItemNum()).num());
            }
        }

        if (create || purchTable.fieldChanged(fieldnum(PurchTable, ReturnReasonCodeId)))
            axSalesTable.parmReturnReasonCodeId(purchTable.ReturnReasonCodeId ? convReturnReasonCode.axReturnReasonCodeId(toInterCompanyTradingValueMap) : '');

        if (create || purchTable.fieldChanged(fieldnum(PurchTable, ReturnReplacementCreated)))
        {
            axSalesTable.parmReturnReplacementCreated(purchTable.ReturnReplacementCreated);
            if (IntercompanySyncPurchTableSetReturnReplacementIdFlight::instance().isEnabled())
            {
                this.setReturnReplacementId();
            }
        }

        if (create)
        {
            axSalesTable.parmReceiptDateConfirmed(dateNull());
            axSalesTable.parmShippingDateConfirmed(dateNull());

            if (salesTableOriginal.SalesType == SalesType::ReturnItem)
            {
                axMCRReturnSalesTable.parmOriginalSalesId(interCompanyOrigSalesId);
            }
        }

        if (purchTable.InterCompanyDirectDelivery)
        {
            if (new DictConfigurationKey(configurationkeynum(SalesDeliveryDateControl)).enabled())
            {
                axSalesTable.parmReceiptDateRequested (purchTable.DeliveryDate);
                if (purchTable.InterCompanyOriginalSalesId)
                {
                    axSalesTable.setShippingDateRequestedFromPurchTable(purchTable);
                }
                else
                    axSalesTable.parmShippingDateRequested(purchTable.DeliveryDate);
            }
            else
                axSalesTable.parmShippingDateRequested(purchTable.DeliveryDate);
        }
        else
        {
            if (new DictConfigurationKey(configurationkeynum(SalesDeliveryDateControl)).enabled())
            {
                axSalesTable.parmReceiptDateRequested(purchTable.DeliveryDate);

                if (create
                    ||  purchTable.fieldChanged(fieldnum(PurchTable, DeliveryDate))
                    ||  purchTable.fieldChanged(fieldnum(PurchTable, DlvMode)))
                {
                    if (SalesParameters::find().DeliveryDateControlType != SalesDeliveryDateControlType::None)
                    {
                        SalesTable salesTableLocal;
                        buf2Buf(axSalesTable.salesTable(), salesTableLocal);
                        salesTableLocal.DeliveryDateControlType  = SalesParameters::find().DeliveryDateControlType;
                        SalesCalcAvailableDlvDates salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(salesTableLocal);
                        salesCalcAvailableDlvDates.validateWritePrompt(salesTableLocal, false, true, true, false);
                        if (salesTableLocal.ShippingDateRequested)
                        {
                            if (salesTableLocal.ShippingDateRequested < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                            {
                                if (purchTable.DeliveryDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                                {
                                    salesTableLocal.ShippingDateRequested = dateNull();
                                }
                                else
                                {
                                    salesTableLocal.ShippingDateRequested = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                                }
                            }
                        }
                        axSalesTable.parmShippingDateRequested(salesTableLocal.ShippingDateRequested ? salesTableLocal.ShippingDateRequested : purchTable.DeliveryDate);
                    }
                    else
                    {
                        axSalesTable.parmShippingDateRequested(purchTable.DeliveryDate);
                    }
                }
                else
                {
                    if (InterCompanySyncSetCustRefShipDateNotChangedFlight::instance().isEnabled())
                    {
                        axSalesTable.setFieldAsTouched(fieldNum(SalesTable, ShippingDateRequested));
                    }
                    else
                    {
                        axSalesTable.parmShippingDateRequested(purchTable.DeliveryDate);
                    }
                }
            }
            else
            {
                axSalesTable.parmShippingDateRequested(purchTable.DeliveryDate);
            }
        }

        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            if (purchTable.RequestedShipDate && purchTable.RequestedShipDate != axSalesTable.parmShippingDateRequested())
            {
                info(strFmt("@SCM:VendorDispatchDateSalesOrderHeaderRequestDateUpdateInfoMessage", axSalesTable.parmSalesId()));
                axSalesTable.parmShippingDateRequested(purchTable.RequestedShipDate);
            }

            if (purchTable.ConfirmedShipDate && purchTable.ConfirmedShipDate != axSalesTable.parmShippingDateConfirmed())
            {
                info(strFmt("@SCM:VendorDispatchDateSalesOrderHeaderConfirmDateUpdateInfoMessage", axSalesTable.parmSalesId()));
                axSalesTable.parmShippingDateConfirmed(purchTable.ConfirmedShipDate);
            }
        }

        if (create)
        {
            axSalesTable.parmInterCompanyOrigin(InterCompanyOrigin::Derived);
        }

        if (axSalesTableRU)
        {
            SysExtensionSerializerExtensionMap sysExtensionSerializerExtensionMap = axSalesTableRU.currentRecord();
            axSalesTable.currentRecord().SysExtensionSerializerMap::packExtensionTable(sysExtensionSerializerExtensionMap);

            axSalesTable.axSalesTable_RU(axSalesTableRU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTableSalesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the intercompany sales order type based on the purchase order.
    /// </summary>
    protected void setSalesTableSalesType()
    {
        switch (purchTable.PurchaseType)
        {
            case PurchaseType::Purch:
                axSalesTable.parmSalesType(SalesType::Sales);
                break;

            case PurchaseType::ReturnItem:
                axSalesTable.parmSalesType(SalesType::ReturnItem);
                break;

            default:
                axSalesTable.parmSalesType(SalesType::Journal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesId</Name>
				<Source><![CDATA[
    protected void setSalesId()
    {
        switch (toEndpointActionPolicy.SalesIdNumbering)
        {
            case InterCompanySalesIdNumbering::NumberSequence:
                if (toEndpointActionPolicy.SalesIdNumberSequence)
                {
                    axSalesTable.parmSalesId(NumberSeq::newGetNumFromId(toEndpointActionPolicy.SalesIdNumberSequence).num());
                }
                break;

            case InterCompanySalesIdNumbering::Original:
                if (purchTable.InterCompanyOriginalSalesId)
                {
                    if (SalesTable::exist(purchTable.InterCompanyOriginalSalesId)
                            || SalesTableDelete::exist(purchTable.InterCompanyOriginalSalesId))
                    {
                        warning(strfmt("@SYS94302", purchTable.InterCompanyOriginalSalesId));
                    }
                    else
                    {
                        axSalesTable.parmSalesId(purchTable.InterCompanyOriginalSalesId);
                    }
                }
                else
                {
                    if (SalesTable::exist(purchTable.PurchId)
                            || SalesTableDelete::exist(purchTable.PurchId))
                    {
                        warning(strfmt("@SYS94302", purchTable.PurchId));
                    }
                    else
                    {
                        axSalesTable.parmSalesId(purchTable.PurchId);
                    }
                }
                break;

            case InterCompanySalesIdNumbering::CompanyOriginal:
                if (purchTable.InterCompanyOriginalSalesId)
                {
                    if (SalesTable::exist(purchTable.DataAreaId+purchTable.InterCompanyOriginalSalesId)
                        ||  SalesTableDelete::exist(purchTable.DataAreaId+purchTable.InterCompanyOriginalSalesId))
                    {
                        warning(strfmt("@SYS94302",purchTable.DataAreaId+purchTable.InterCompanyOriginalSalesId));
                    }
                    else
                    {
                        axSalesTable.parmSalesId(purchTable.DataAreaId+purchTable.InterCompanyOriginalSalesId);
                    }
                }
                else
                {
                    if (SalesTable::exist(purchTable.DataAreaId+purchTable.PurchId)
                        ||  SalesTableDelete::exist(purchTable.DataAreaId+purchTable.PurchId))
                    {
                        warning(strfmt("@SYS94302",purchTable.DataAreaId+purchTable.PurchId));
                    }
                    else
                    {
                        axSalesTable.parmSalesId(purchTable.DataAreaId+purchTable.PurchId);
                    }
                }
                break;
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>