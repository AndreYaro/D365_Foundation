<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfRecycledBpConsumptionCalc_Bom</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>PmfRecycledBpConsumptionCalc_Bom</c> is responsible for calculation of the recycled byporoduct consumption on parent BOM.
/// </summary>
class PmfRecycledBpConsumptionCalc_Bom implements IPmfRecycledBpConsumptionCalc
{
    PmfRecycledBpBomCalcCreator             bomCalcCreator;
    BOMCalcItemLine                         bomCalcItemLine;
    Qty                                     bomLineQty,
                                            reducedQty;
    PmfRecycledBpParentCalcState            parentState;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        PmfFormulaCoBy                          pmfFormulaCoBy;
        Qty                                     allocatedQty;
        BomCalcItem_RecycledByProduct           recycledCalc;
        InventDim                               inventDim;
        InventDimParm                           inventDimParm;
        inventDimParm.setAllProductDimensions();

        while select pmfFormulaCoBy
        where pmfFormulaCoBy.BurdenType    == PmfBurdenType::Recycled
           && pmfFormulaCoBy.ProductType   == PmfProductType::By_Product
           && pmfFormulaCoBy.bomId         == bomCalcItemLine.parmBOM().bomId
           && pmfFormulaCoBy.ItemId        == bomCalcItemLine.parmItemId()
        #inventDimExistsJoin(pmfFormulaCoBy.inventDimId, inventDim, InventDim::find(bomCalcItemLine.parmInventDimId()), inventDimParm)
        {
            this.parmBomCalcCreator().parmPmfFormulaCoBy(pmfFormulaCoBy);
            recycledCalc = this.parmBomCalcCreator().getResult();

            recycledCalc.parmBomCalcItemLine(bomCalcItemLine);

            recycledCalc.parmPmfRecycledBpConsumptionCalcParam().parmQtyAlreadyAllocatedByParent(this.parmParentState().getQtyAllocatedForByproduct(pmfFormulaCoBy));
            recycledCalc.parmPmfRecycledBpConsumptionCalcParam().parmQtyToAllocateFromBomLine(this.parmBomLineQty() - allocatedQty);
            recycledCalc.calc();

            allocatedQty += recycledCalc.parmAllocatedQty();
            this.parmParentState().persistAllocatedQty(pmfFormulaCoBy, recycledCalc.parmAllocatedQty());

            if (allocatedQty >= bomCalcItemLine.parmCalcConsumptionInventQty())
            {
                break;
            }
        }

        reducedQty = this.parmBomLineQty() - allocatedQty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAllocatedQty</Name>
				<Source><![CDATA[
    public Qty parmAllocatedQty()
    {
        return this.parmBomLineQty() - this.parmReducedQty();
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmBomCalcCreator</Name>
				<Source><![CDATA[
    public PmfRecycledBpBomCalcCreator parmBomCalcCreator(PmfRecycledBpBomCalcCreator _bomCalcCreator = bomCalcCreator)
    {
        bomCalcCreator = _bomCalcCreator;

        return bomCalcCreator;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmBomCalcItemLine</Name>
				<Source><![CDATA[
    public BOMCalcItemLine parmBomCalcItemLine(BOMCalcItemLine _bomCalcItemLine = bomCalcItemLine)
    {
        bomCalcItemLine = _bomCalcItemLine;

        return bomCalcItemLine;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmBomLineQty</Name>
				<Source><![CDATA[
    public Qty parmBomLineQty(Qty _bomLineQty = bomLineQty)
    {
        bomLineQty = _bomLineQty;

        return bomLineQty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmParentState</Name>
				<Source><![CDATA[
    public PmfRecycledBpParentCalcState parmParentState(PmfRecycledBpParentCalcState _parentState = parentState)
    {
        parentState = _parentState;

        return parentState;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmReducedQty</Name>
				<Source><![CDATA[
    public Qty parmReducedQty(Qty _reducedQty = reducedQty)
    {
        reducedQty = _reducedQty;

        return reducedQty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateCalcTransForCostSheetCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates provided <c>BomCalcTrans</c> record before sending it to the costing sheet engine.
    /// </summary>
    /// <param name="_bomCalcTransMap">
    /// The <c>BOMCalcTransMap</c> record.
    /// </param>
    /// <param name="_seriesSize">
    /// The series size.
    /// </param>
    /// <remarks>
    /// This method brings the <c>BomCalcTrans</c> record back to it's original consumption and cost.
    /// It ensures that the indirect costs are calculated on top of full input quantity, and not only on unrecycled quantity.
    /// </remarks>
    public void updateCalcTransForCostSheetCalc(BOMCalcTransMap _bomCalcTransMap, Qty _seriesSize)
    {
        Qty seriesSize    = _seriesSize ? _seriesSize : 1;
        Qty costPriceUnit;
        BOMCalcTrans      bomCalcTrans;

        if (_bomCalcTransMap.TableId == tableNum(BOMCalcTrans))
        {
            bomCalcTrans = _bomCalcTransMap;
            costPriceUnit = bomCalcTrans.CostPriceUnit ? bomCalcTrans.CostPriceUnit : 1;
            if (this.parmAllocatedQty())
            {
                bomCalcTrans.ConsumptionVariable += this.parmAllocatedQty();
                bomCalcTrans.CostPriceQty        = bomCalcTrans.ConsumptionVariable * bomCalcTrans.CostPrice  / seriesSize / costPriceUnit;
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfRecycledBpConsumptionCalc_Bom construct()
    {
        return new PmfRecycledBpConsumptionCalc_Bom();
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>