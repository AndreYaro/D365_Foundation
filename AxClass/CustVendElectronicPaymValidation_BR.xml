<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendElectronicPaymValidation_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Validates electronic payment lines
/// </summary>
class CustVendElectronicPaymValidation_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkVendorPaymentFilledCorrectly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if vendor electronic payment lines are filled correctly
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Journal Line to be validated
    /// </param>
    /// <returns>
    /// False if no payment specification check fails or validaton control for method of payment fails, otherwise true
    /// </returns>
    public static boolean checkVendorPaymentFilledCorrectly(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTable _ledgerJournalTable = null)
    {
        LedgerJournalTable ledgerJournalTable =
            _ledgerJournalTable == null ? _ledgerJournalTrans.ledgerJournalTable() : _ledgerJournalTable;

        VendPaymModeTable   vendPaymModeTable;
        VendPaymModeSpec    vendPaymModeSpec;

        boolean ok = true;

        vendPaymModeTable = VendPaymModeTable::find(_ledgerJournalTrans.PaymMode);
        vendPaymModeSpec  = VendPaymModeSpec::findSpec(_ledgerJournalTrans.PaymMode, _ledgerJournalTrans.PaymSpec);

        ok = _ledgerJournalTrans.checkPaymentFilledOk(ledgerJournalTable);

        if (vendPaymModeTable.UseGERConfiguration)
        {
            if (!vendPaymModeSpec.checkEPParameters_BR())
            {
                ok = checkFailed(strfmt("@Brazil:PaymentSpecificationValidation", "@GLS1281", "@GLS1280", "@SYS21683"));
            }
        }

        switch (vendPaymModeSpec.ValidationControl_BR)
        {
            case ValidationControl_BR::VendorBankAccount :
                VendBankAccount bankAccount = _ledgerJournalTrans.vendBankAccountInTransactionCompany();

                if (bankAccount == null)
                {
                    ok = checkFailed(strfmt("@GLS673", _ledgerJournalTrans.parmAccount()));
                }
                else if (bankAccount.AccountNum == '')
                {
                    ok = checkFailed(strfmt("@GLS674", _ledgerJournalTrans.parmAccount()));
                }
                break;

            case ValidationControl_BR::BarCode :
                VendEPRemitInfo_BR vendEPRemitInfoLoc;

                select BarCodeInfo from vendEPRemitInfoLoc
                    where vendEPRemitInfoLoc.LedgerJournalTrans == _ledgerJournalTrans.RecId;

                if ( vendEPRemitInfoLoc && ! vendEPRemitInfoLoc.BarCodeInfo )
                {
                    ok = checkFailed(strfmt(
                        "@SYS313186",
                        fieldpname(VendEPRemitInfo_BR,BarCodeInfo),
                        _ledgerJournalTrans.Voucher));
                }
        }

        ok = CustVendElectronicPaymValidation_BR::checkBridgePosting(_ledgerJournalTrans, vendPaymModeTable) && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomerPaymentFilledCorrectly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if customer electronic payment lines are filled correctly
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Journal Line to be validated
    /// </param>
    /// <returns>
    /// False if no payment specification check fails or bridge posting for method of payment fails, otherwise true
    /// </returns>
    public static boolean checkCustomerPaymentFilledCorrectly(LedgerJournalTrans _ledgerJournalTrans)
    {
        var ok = true;

        var custPaymModeTable = CustPaymModeTable::find(_ledgerJournalTrans.PaymMode);
        var custPaymModeSpec  = CustPaymModeSpec::findSpec(_ledgerJournalTrans.PaymMode, _ledgerJournalTrans.PaymSpec);
        var confLayoutGroups  = ConfLayoutGroups_BR::find(custPaymModeTable.ExportLayoutGroupId_BR);

        if (confLayoutGroups.ConfLayoutExport
            && confLayoutGroups.FileStructure == ConfFileStructure_BR::Complex)
        {
            if (!custPaymModeSpec)
            {
                ok = checkFailed(strfmt("@GLS1287","@SYS21683"));
            }
        }

        ok = CustVendElectronicPaymValidation_BR::checkBridgePosting(_ledgerJournalTrans, custPaymModeTable) && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBridgePosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Bridge Account validation for payment line
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Journal Line to be validated
    /// </param>
    /// <param name="_custVendPaymMode">
    /// Payment mode to be validated
    /// </param>
    /// <returns>
    /// false if validation fails; otherwise, true
    /// </returns>
    public static boolean checkBridgePosting(LedgerJournalTrans _ledgerJournalTrans, CustVendPaymModeTable _custVendPaymMode)
    {
        boolean ok = true;

        if (_custVendPaymMode.FurtherPosting == NoYes::No)
        {
            // Offset account must be Bank, but only if
            // bridging posting is not being used.
            if (_ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Bank)
            {
                ok = checkFailed("@GLS665");
            }

            // If bridging posting, then the bank account is determined
            // by the payment account specified on the payment method.
            // Otherwise, use the account specified on the ledgerJournalTrans
            // record.
            if (_ledgerJournalTrans.parmOffsetAccount()
                && _ledgerJournalTrans.CurrencyCode != BankAccountTable::find(_ledgerJournalTrans.parmOffsetAccount()).CurrencyCode)
            {
                ok = checkFailed("@GLS1184");
            }
        }
        else
        {
            if (_ledgerJournalTrans.parmOffsetAccount()
                && _ledgerJournalTrans.CurrencyCode != BankAccountTable::find(_custVendPaymMode.parmPaymAccount()).CurrencyCode)
            {
                ok = checkFailed("@GLS1184");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>