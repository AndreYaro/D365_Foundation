<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanBoardPeggingJobList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanBoardPeggingJobList</c> class is the helper class that manages the kanban pegged jobs
///    list in kanban board forms.
/// </summary>
public class KanbanBoardPeggingJobList
{
    FormRun     formRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPeggingTreeSupplyAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the availability of pegged kanbans and sets the overdue icon, if the pegged kanban is not available.
    /// </summary>
    public void checkPeggingTreeSupplyAvailable()
    {
        KanbanJobTmpPegging     updateKanbanJobTmpPegging;

        FormDataSource kanbanJobTmpPegging_ds = formRun.dataSource(tableStr(KanbanJobTmpPegging));

        updateKanbanJobTmpPegging.setTmpData(kanbanJobTmpPegging_ds.cursor());

        KanbanJobTmpPegging kanbanJobTmpPegging = kanbanJobTmpPegging_ds.getFirst(true)
                                                        ? kanbanJobTmpPegging_ds.getFirst(true)
                                                        : kanbanJobTmpPegging_ds.cursor();

        while (kanbanJobTmpPegging)
        {
            KanbanJob kanbanJob = KanbanJob::find(kanbanJobTmpPegging.Job);
            boolean available = KanbanJobPeggingTreeSupplyAvailable::newKanbanJob(kanbanJob).run();

            // set overdue icon
            select forupdate updateKanbanJobTmpPegging
                where updateKanbanJobTmpPegging.RecId == kanbanJobTmpPegging.RecId;

            updateKanbanJobTmpPegging.initKanbanJobOverdueStatus(kanbanJob.kanban(), kanbanJob, !available);
            updateKanbanJobTmpPegging.update();

            kanbanJobTmpPegging = kanbanJobTmpPegging_ds.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    private FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanBoardPeggingJobList construct()
    {
        return new KanbanBoardPeggingJobList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a helper class for the Kanban Board form that manages the kanban pegging jobs list.
    /// </summary>
    /// <param name="_formRun">
    ///    A <c>FormRun</c> object that represents the Kanban Board form.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>KanbanBoardPeggingJobList</c> class.
    /// </returns>
    public static KanbanBoardPeggingJobList newForm(FormRun _formRun)
    {
        if (!_formRun)
        {
            return null;
        }

        KanbanBoardPeggingJobList kanbanBoardPeggingJobList = new KanbanBoardPeggingJobList();
        kanbanBoardPeggingJobList.parmFormRun(_formRun);

        return kanbanBoardPeggingJobList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
