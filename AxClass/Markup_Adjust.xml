<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Markup_Adjust</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       Markup_Adjust
extends     Markup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    protected boolean checkDiscardLine(MarkupTrans      _markupTrans,
                                       DocumentStatus   _documentStatus = DocumentStatus::None,
                                       boolean          _searchInvoice  = false,
                                       InvoiceId        _invoiceId      = '')
    {
        boolean discard/* = super(markupTrans)*/;
        if (_markupTrans.Voucher)
            discard = true;

        if (!_markupTrans.markupTable().isMarkupOfTypeItemLedger())
            discard = true;

        // <GEERU>
        else
        {
            if (this.costAdjustmentLocked_RU())
            {
                throw error("@GLS115689");
            }
        }

        if (_markupTrans.markupTable().isMarkupOfTypeCustVend()
         && this.markupCustVendLocked_RU())
        {
            throw error("@GLS115690");
        }
        // </GEERU>

        return discard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIDByMarkupTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ID of the item in the <c>MarkupTrans</c> record.
    /// </summary>
    /// <param name = "_markupTrans">
    /// The <c>MarkupTrans</c> record.
    /// </param>
    /// <returns>
    /// The ID of an item.
    /// </returns>
    ItemId itemIDByMarkupTrans_RU(MarkupTrans _markupTrans)
    {
        ItemId ret;
        switch (_markupTrans.TransTableId)
        {
            case tableNum (CustInvoiceTrans)    :
                ret = (select firstonly ItemId from custInvoiceTrans
                              where custInvoiceTrans.RecId      == _markupTrans.TransRecId).ItemId;
                break;

            case tableNum (VendInvoiceTrans)    :
                ret = (select firstonly ItemId from vendInvoiceTrans
                              where vendInvoiceTrans.RecId      == _markupTrans.TransRecId).ItemId;
                break;

            case tableNum (PurchLine)           :
                ret = (select firstonly ItemId from purchLine
                              where purchLine.RecId             == _markupTrans.TransRecId).ItemId;
                break;

            case tableNum (PurchParmLine)       :
                ret = (select firstonly ItemId from purchParmLine
                              where purchParmLine.RecId         == _markupTrans.TransRecId).ItemId;
                break;

            case tableNum (VendInvoiceInfoLine) :
                ret = (select firstonly ItemId from vendInvoiceInfoLine
                              where vendInvoiceInfoLine.RecId   == _markupTrans.TransRecId).ItemId;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInvoiceAmount</Name>
				<Source><![CDATA[
    protected void postInvoiceAmount(MarkupTrans    _markupTrans,
                                    AmountCur      _postAmount,
                                    MarkupTrans    _newMarkupTrans)
    {
        MarkupTable         markupTable = _markupTrans.markupTable();
        InventModelGroup    inventModelGroup;
        ItemId              itemId;

        super(_markupTrans, _postAmount, _newMarkupTrans);

        if (countryRegion_RU && ! markupTable.isMarkupOfTypeItemLedger())
        {
            return;
        }

        itemId = this.itemIDByMarkupTrans_RU(_markupTrans);

        inventModelGroup = InventModelGroup::find(InventTable::find(itemId).modelGroupId());

        if (inventModelGroup.PostOnhandFinancial  &&
            inventModelGroup.PostOnhandFinancialSecCur_RU)
        {
            if (markupTable.VendType == MarkupType::LedgerAccount)
            {
                ledgerVoucher.addTrans(
                    LedgerVoucherTransObject::newBasicSecondary_RU(
                        ledgerVoucher.findOrCreateReferenceSecCur_RU(),
                        markupTable.VendPosting,
                        LedgerDimensionFacade::serviceCreateLedgerDimension(markupTable.VendorLedgerDimension, dimensionDefault),
                        _markupTrans.CurrencyCode,
                        -CurrencyExchangeHelper::curAmount2CurAmount(_postAmount, _markupTrans.CurrencyCode, Ledger::reportingCurrency(), ledgerVoucher.lastTransDate()),
                        NoYes::No));

                ledgerVoucher.restoreReferenceSecCur_RU();
            }
            else
            {
                throw error(strFmt("@SYS51070", enum2str(markupTable.VendType)));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
