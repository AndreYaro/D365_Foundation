<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPurchEmpty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Empty tax purch used for core tax purch when GTE is enabled
/// </summary>
class TaxPurchEmpty extends TaxPurch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxAdjustmentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a collection of tax adjustment types that can be used to make tax adjustments.
    /// </summary>
    /// <remarks>
    /// By default, all the transactions that use tax adjustment functions support summary tax adjustment
    /// type.
    /// </remarks>
    protected void addTaxAdjustmentTypes()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowAdjustBaseAmountForTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transaction supports adjusting the calculated base amount when tax is
    ///    included in item price and the user adjusts the tax amount.
    /// </summary>
    /// <returns>
    ///    true if adjusting the calculated base amount is supported; otherwise, false.
    /// </returns>
    public boolean allowAdjustBaseAmountForTaxAdjustment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a transaction supports a single line adjustment.
    /// </summary>
    /// <returns>
    /// true if a single line adjustment is supported; otherwise, false.
    /// </returns>
    public boolean allowSingleLineAdjustment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates line specific tax codes for the miscellaneous charges associated with the transaction
    ///    header and transaction lines.
    /// </summary>
    protected void calcMarkup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Walks through purchase order lines and markup lines for a purchase order to calculate taxes.
    /// </summary>
    /// <returns>
    ///    The tax amount excluding the use tax.
    /// </returns>
    TaxAmount calculateTax()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalcEximTax_IN</Name>
				<Source><![CDATA[
    protected boolean canCalcEximTax_IN()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntersection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allows transactions to customize error conditions which occur when the tax groups are intersected.
    ///    This method is an override of a base class method.
    /// </summary>
    /// <param name="_found">
    ///    A Boolean value that specifies whether tax codes that match were found in both the tax group and
    ///    the item tax group.
    /// </param>
    /// <param name="_taxGroup">
    ///    The tax group from the transaction line.
    /// </param>
    /// <param name="_taxItemGroup">
    ///    The item tax group from the transaction line.
    /// </param>
    /// <returns>
    ///    true if this is a supported tax scenario; otherwise, false.
    /// </returns>
    protected boolean checkIntersection(boolean _found, TaxGroup _taxGroup, TaxItemGroup _taxItemGroup)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForMarkupLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures a <c>Tax</c> object to calculate a miscellaneous charge line.
    /// </summary>
    /// <param name="_markupTrans">
    ///    The miscellaneous charge line to calculate.
    /// </param>
    /// <param name="_inventTransId">
    ///    The inventory ID related to this miscellaneous charge line.
    /// </param>
    protected void configureTaxForMarkupLine(MarkupTrans _markupTrans, InventTransId _inventTransId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDirectImportBase_BR</Name>
				<Source><![CDATA[
    protected TaxBase determineDirectImportBase_BR(TaxBase _baseAmount)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIntersection_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine intersection of tax combination.
    /// </summary>
    /// <param name="_taxGroup">
    /// The tax group a tax code belongs to.
    /// </param>
    /// <param name="_taxItemGroup">
    /// The tax item group a tax code belongs to.
    /// </param>
    /// <param name="_inventTransId">
    /// The Invent trans id.
    /// </param>
    /// <param name="_txt">
    /// Transaction text.
    /// </param>
    /// <param name="_taxCalculationDate">
    /// The tax calculation date.
    /// </param>
    /// <param name="_taxGroupData">
    /// A <c>TaxGroupData</c> buffer.
    /// </param>
    /// <param name="_taxOnItem">
    /// A <c>TaxOnItem</c> buffer.
    /// </param>
    /// <param name="_taxType">
    /// The type of tax.
    /// </param>
    void determineIntersection_IN(TaxGroup           _taxGroup,
                                TaxItemGroup       _taxItemGroup,
                                InventTransId      _inventTransId,
                                Name               _txt,
                                TransDate          _taxCalculationDate,
                                TaxGroupData       _taxGroupData,
                                TaxOnItem          _taxOnItem,
                                TaxType_IN         _taxType)
    {
        if (_taxType != TaxType_IN::None)
        {
            this.insertIntersection_IN(_taxGroup, _taxItemGroup, _inventTransId, _txt, _taxCalculationDate);
        }
        else
        {
            taxWorkTrans.HeadingTableId        = headingTableId;
            taxWorkTrans.HeadingRecId          = headingRecId;
            taxWorkTrans.SourceTableId         = this.sourceTableId();
            taxWorkTrans.SourceRecId           = this.sourceRecId();
            taxWorkTrans.Txt                   = _txt;
            taxWorkTrans.Voucher               = voucher;
            taxWorkTrans.TransDate             = taxDate;
            taxWorkTrans.TaxCode               = _taxGroupData.TaxCode;
            taxWorkTrans.TaxGroup              = _taxGroup;
            taxWorkTrans.TaxItemGroup          = _taxItemGroup;
            taxWorkTrans.Source                = taxModuleType;
            taxWorkTrans.InventTransId         = _inventTransId;
            taxWorkTrans.SourceCurrencyCode    = sourceCurrencyCode;
            taxWorkTrans.TaxDirection          = this.determineDirection(_taxGroupData);
            taxWorkTrans.TaxAutogenerated      = NoYes::Yes;
            taxWorkTrans.TaxReports            = NoYes::Yes;
            taxWorkTrans.ExemptTax             = taxWorkTrans.TaxDirection != TaxDirection::UseTax ? _taxGroupData.ExemptTax : NoYes::No;
            taxWorkTrans.CalculationDate       = _taxCalculationDate;

            if (VendParameters::find().IntracomVAT)
            {
                taxWorkTrans.IntracomVAT        = _taxGroupData.IntracomVAT;
            }

            taxWorkTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyBaseForOutgoingTax_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the given tax group determine its reverse charge rule and if that rule has an empty base for outgoing tax.
    /// </summary>
    /// <param name = "_taxGroupData">The tax group to find the reverse charge rule for.</param>
    /// <returns>Whether the reverse charge rule for the tax group has an empty base for outgoing tax.</returns>
    protected NoYes emptyBaseForOutgoingTax_W(TaxGroupData _taxGroupData)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreCalculatedSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether only use tax amounts from tax adjustments should be used.
    /// </summary>
    /// <returns>
    ///    true if the calculated sales tax should be ignored and only tax amounts from tax adjustments should
    ///    be used; otherwise, false.
    /// </returns>
    public boolean ignoreCalculatedSalesTax()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransactionExchangeRate</Name>
				<Source><![CDATA[
    protected void initTaxTransactionExchangeRate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileTaxTrans_RU</Name>
				<Source><![CDATA[
    protected boolean inventProfileTaxTrans_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keepSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the sales tax adjustments should be deleted when the sales tax groups are
    ///    changed on the transaction.
    /// </summary>
    /// <returns>
    ///    true if sales tax adjustments should not be deleted when sales tax groups are changed on the
    ///    transaction; otherwise, false.
    /// </returns>
    public boolean keepSalesTaxAdjustments()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads tax records from the <c>TaxTrans</c> table into the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    /// <param name="_sourceDocumentHeaderRecId">
    ///    The record ID of the <c>SourceDocumentHeader</c> table.
    /// </param>
    protected void loadFromTaxTrans(RecId _sourceDocumentHeaderRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseChargeAmount_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the reverse charge feature is enabled find the tax transactions of type Reverse Charge Yes and Tax Direction Incoming Tax.
    /// </summary>
    /// <returns>The sum of the corrected amount in currency for all found tax records.</returns>
    public AmountCur reverseChargeAmount_W()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLinesHaveTaxGroups</Name>
				<Source><![CDATA[
    protected boolean sourceLinesHaveTaxGroups()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCombinationAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether allow tax combination.
    /// </summary>
    /// <returns>true if the validation is corrcect; otherwise false.</returns>
    protected boolean taxCombinationAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxInCostPrice</Name>
				<Source><![CDATA[
    public TaxAmount taxInCostPrice(TableId     _tableId,
                            RecId       _recId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total tax amount.
    /// </summary>
    /// <param name="_includeUseTax">
    /// A Boolean value that indicates whether use tax should be included in the tax total.
    /// </param>
    /// <returns>
    /// The total tax amount in transactional currency.
    /// </returns>
    /// <remarks>
    /// For direct import, the total tax amount is the sum of all taxes because there is no tax included in
    /// the price.
    /// </remarks>

    TaxAmountCur totalTaxAmount(boolean _includeUseTax = false)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxWorkTrans_RU</Name>
				<Source><![CDATA[
    protected void updateTaxWorkTrans_RU(TmpTaxWorkTrans _taxWorkTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a transaction that is being calculated supports sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if the transaction supports sales tax adjustment; otherwise, false.
    /// </returns>
    /// <remarks>
    /// By default, the transaction does not support sales tax adjustments.
    /// </remarks>
    public boolean useSalesTaxAdjustments()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current transaction to post supports the <c>SubLedgerDistributions</c> or
    ///    <c>SubLedgerJournalLines</c> records. By default, this base implementation is that they do not
    ///    support them. As the individual transaction support the sub-ledger, they must override this method
    ///    and return true.
    /// </summary>
    /// <returns>
    ///    true if the current transaction to post supports the <c>SubLedgerDistributions</c> or
    ///    <c>SubLedgerJournalLines</c> records; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processExemptTax_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows whether to perform the calculation of the exempt tax codes.
    /// </summary>
    /// <returns>
    ///    true if the calculation of the exempt tax codes should be performed; otherwise, false.
    /// </returns>
    protected boolean processExemptTax_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineSpecificTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the taxes for an individual line. This function does not calculate codes that are
    /// considered based on invoice total, tax on tax, and others It calculates only tax codes that are
    /// line specific.
    /// </summary>
    /// <returns>
    /// The tax amount calculated for this line for all codes which are not based on invoice total.
    /// </returns>
    protected TaxAmount calculateLineSpecificTaxCodes()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates taxes for a transaction line.
    /// </summary>
    /// <returns>
    /// The tax amount excluding use tax for the transaction line.
    /// </returns>
    [HookableAttribute(true)]
    protected TaxAmount calculateTaxForLine()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the taxes that are based on the invoice total.
    /// </summary>
    /// <returns>
    /// The total tax amount calculated to this point.
    /// </returns>
    /// <remarks>
    /// This method does not calculate codes that are considered line-specific.
    /// </remarks>
    protected TaxAmountCur calculateTotalTaxCodes()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the tax engine for a transaction line.
    /// </summary>
    /// <param name="_taxableLine">
    /// An instance of the <c>TaxableLine</c> interface that represents a transaction line.
    /// </param>
    protected void configureTaxForLine(TaxableLine _taxableLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finalizes tax calculations by processing tax adjustments and optionally inserting records into the
    ///    <c>TaxUncommitted</c> and <c>SourceDoucmentLine</c> tables.
    /// </summary>
    /// <param name="_calculateTaxDifferenceAmount">
    ///    true if tax difference amount need to be calculated; optional.
    /// </param>
    /// <param name="_doIsolateTransactionScope">
    /// true if <c>TaxUncommitted</c> should be maintained in a independent transaction scope; otherwise false.
    /// </param>
    /// <returns>
    ///    The final tax total amount.
    /// </returns>
    protected TaxAmountCur finalizeCalculation(
        boolean _calculateTaxDifferenceAmount = false,
        boolean _doIsolateTransactionScope = false
    )
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaintainExistingTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>maintainExistingTaxUncommitted</c> value that indicates whether new records will
    ///    be added to the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if newly calculated tax lines will be added to the <c>TaxUncommitted</c> table; otherwise,
    ///    false.
    /// </returns>
    public boolean getMaintainExistingTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the instatce of the <c>TaxCalculationEmpty</c> object.
    /// </summary>
    /// <param name="_initializationClass">
    ///    The initialization class for the given transaction.
    /// </param>
    /// <returns>
    ///    The TaxCalculationEmpty.
    /// </returns>
    public static TaxCalculationEmpty getInstance(Object _initializationClass)
    {
        return new TaxCalculationEmpty(_initializationClass, false, false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads transaction line information into the <c>Tax</c> table.
    /// </summary>
    /// <param name="_amountInclTax">
    ///    A Boolean value that specifies whether the line amount includes tax.
    /// </param>
    /// <param name="_baseAmount">
    ///    The line amount excluding tax.
    /// </param>
    /// <param name="_baseAmountIncludingTax">
    ///    The line amount.
    /// </param>
    /// <param name="_dimensionDefault">
    ///    The default dimensions.
    /// </param>
    /// <param name="_operationLedgerDimension">
    ///    The operation account.
    /// </param>
    /// <param name="ledgerPostingType">
    ///    The ledger posting type for the transaction line.
    /// </param>
    /// <param name="_unitAmount">
    ///    The unit amount for the line.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID if inventory is supported.
    /// </param>
    /// <param name="_quantity">
    ///    The quantity from the transaction line.
    /// </param>
    /// <param name="_baseUnit">
    ///    The unit on the transaction line.
    /// </param>
    /// <param name="_exchRate_W">
    ///    The exchange rate
    /// </param>
    /// <param name="_vatDueDate_W">
    ///    The VAT register date.
    /// </param>
    /// <returns>
    ///    The base amount, excluding taxes and cash discounts.
    /// </returns>
    protected TaxAmountCur initializeTaxForLine(boolean _amountInclTax,
                                                TaxBase _baseAmount,
                                                TaxBase _baseAmountIncludingTax,
                                                DimensionDefault _dimensionDefault,
                                                LedgerDimensionAccount _operationLedgerDimension,
                                                LedgerPostingType ledgerPostingType,
                                                TaxBase _unitAmount = 0,
                                                ItemId _itemId = '',
                                                Qty _quantity = 0,
                                                UnitOfMeasureSymbol _baseUnit = '',
                                                ExchRate            _exchRate_W = 0,
                                                VatDueDate_W        _vatDueDate_W = dateNull()
                                                )
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads tax records from the <c>TaxUncommitted</c> table into the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    protected void loadFromTaxUncommitted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPerLineTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads tax adjustments that are adjusting taxes for a specific line.
    /// </summary>
    /// <param name="_companyId">
    ///    A value that specifies whether a tax adjustment can be located in another company. If they can, the
    ///    current company and passed in company will be checked for adjustments.
    /// </param>
    /// <param name="_sourceTableId">
    ///    The table ID of the transaction line.
    /// </param>
    /// <param name="_sourceRecId">
    ///    The record ID of the transaction line.
    /// </param>
    /// <param name="_headingSourceTableId">
    ///    The table ID of the heading transaction line.
    /// </param>
    /// <param name="_headingSourceRecId">
    ///    The record ID of the heading transaction line.
    /// </param>
    protected void loadPerLineTaxAdjustments(
        SelectableDataArea  _companyId,
        RefTableId          _sourceTableId,
        RefRecId            _sourceRecId
        ,RefTableId         _headingSourceTableId = 0
        ,RefRecId           _headingSourceRecId = 0
        )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax adjustments that are adjusting the taxes for a transaction.
    /// </summary>
    protected void loadTaxAdjustments()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total of use taxes for the current instance of the Tax class.
    /// </summary>
    /// <returns>
    /// The sum of use taxes.
    /// </returns>
    /// <remarks>
    /// The <c>SourceRegulateAmountCur</c> field in the <c>TmpTaxWorkTrans</c> table contains either the
    /// calculated amount or the adjusted amount.
    /// </remarks>
    public AmountCur useTaxTotal()
    {
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>