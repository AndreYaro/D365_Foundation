<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_Supply</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventDimCtrl_Frm_Supply</c> class controls the dimension display and creates the temporary
///    data needed on the <c>Onhand</c> and <c>Orders</c> tabs of the <c>InventSupply</c> form.
/// </summary>
public class InventDimCtrl_Frm_Supply extends InventDimCtrl_Frm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formSetControlsRightClick</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>rightClickModifyQuery</c> method on the <c>InventSupply</c> form.
    /// </summary>
    /// <param name="_lockForm">
    ///    A Boolean value that indicates whether the form should be locked.
    /// </param>
    /// <param name="_resizeGrid">
    ///    A Boolean value that indicates whether the grid on the form should be resized; optional.
    /// </param>
    /// <param name="_args">
    ///    This parameter is not used in this override; optional.
    /// </param>
    /// <remarks>
    ///    This method is called from the <c>InventDimParmFixed</c> form when the user clicks OK.
    /// </remarks>
    public void formSetControlsRightClick(
        boolean     _lockForm,
        boolean     _resizeGrid = false,
        Args        _args = null)
    {
        super(_lockForm, _resizeGrid, _args);
        callingElement.formObject().rightClickModifyQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryPdsCWAdjOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the <c>FormDataSource</c> objects that are used to display information about items related
    /// to catch weight.
    /// </summary>
    /// <param name="_inventSum_DS">
    /// A <c>FormDataSource</c> object that refers to the <c>InventSum</c> table.
    /// </param>
    /// <param name="_inventDim_DS">
    /// A <c>FormDataSource</c> object that refers to the <c>InventDim</c> table.
    /// </param>
    /// <param name="_itemId">
    /// A <c>ItemId</c> value of the item for which to show catch weight information.
    /// </param>
    /// <param name="_inventDimReq">
    /// An <c>InventDim</c> record that contains the requirements for item dimensions that will be used for
    /// filtering in addition to the warehouse.
    /// </param>
    public void modifyQueryPdsCWAdjOnHand(
        FormDataSource  _inventSum_DS,
        FormDataSource  _inventDim_DS,
        ItemId          _itemId,
        InventDim       _inventDimReq)
    {
        QueryBuildDataSource dsInventSum = _inventSum_DS.query().dataSourceName(_inventSum_DS.name());

        dsInventSum.clearDynalinks();
        dsInventSum.clearRanges();
        dsInventSum.addRange(fieldnum(InventSum,ItemId)).value(_itemId);

        //Add all fields as sum fields
        dsInventSum.sortClear();
        InventSum::queryAddSumFields(dsInventSum);

        dsInventSum.orderMode(OrderMode::GroupBy);
        dsInventSum.addSortField(fieldnum(InventSum,ItemId));

        QueryBuildRange criteriaClosed = SysQuery::findOrCreateRange(dsInventSum, fieldnum(InventSum,Closed));
        if (dimParmVisibleGrid.ClosedFlag)
        {
            criteriaClosed.value('');
        }
        else
        {
            criteriaClosed.value(queryValue(NoYes::No));
        }

        QueryBuildRange criteriaClosedQty = SysQuery::findOrCreateRange(dsInventSum, fieldnum(InventSum,ClosedQty));
        if (dimParmVisibleGrid.ClosedQtyFlag)
        {
            criteriaClosedQty.value(queryValue(NoYes::No));
        }
        else
        {
            criteriaClosedQty.value('');
        }

        //Get inventDim data source and do the grouping
        QueryBuildDataSource dsInventDim = _inventDim_DS.query().dataSourceName(_inventDim_DS.name());
        dsInventDim.sortClear();

        InventDim::queryAddRangeAndValueProductDim(dsInventDim, _inventDimReq, this.inventDimGroupSetup().ecoResProductDimGroupSetup(), false);

        dimParmLockedRightClick.queryAddSortField(dsInventDim);
        if (!dimParmVisibleGrid.queryAddSortField(dsInventDim))
        {
            dsInventDim.addSortField(fieldnum(InventDim, TableId));
            dsInventDim.orderMode(OrderMode::GroupBy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryQuarantineTransport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the <c>FormDataSource</c> objects that are used to display information about items that
    ///    are currently in quarantine or transport warehouses.
    /// </summary>
    /// <param name="_inventSum_DS">
    ///    The <c>FormDataSource</c> object that refers to the <c>InventSum</c> table.
    /// </param>
    /// <param name="_inventDim_DS">
    ///    The <c>FormDataSource</c> object that refers to the <c>InventDim</c> table.
    /// </param>
    /// <param name="_inventLocation_DS">
    ///    The <c>FormDataSource</c> object that refers to the <c>InventLocation</c> table.
    /// </param>
    /// <param name="_itemId">
    ///    The id of the item to show quarantine information for.
    /// </param>
    /// <param name="_inventDimReq">
    ///    The requirements for item dimensions to be used for filtering, and the warehouse.
    /// </param>
    public void modifyQueryQuarantineTransport(
        FormDataSource  _inventSum_DS,
        FormDataSource  _inventDim_DS,
        FormDataSource  _inventLocation_DS,
        ItemId          _itemId,
        InventDim       _inventDimReq)
    {
        QueryBuildDataSource dsInventSum = _inventSum_DS.query().dataSourceName(_inventSum_DS.name());

        //Make sure that the inventSum is connected to the correct item
        dsInventSum.clearDynalinks();
        dsInventSum.clearRanges();
        dsInventSum.addRange(fieldNum(InventSum,ItemId)).value(_itemId);

        //Add all fields as sum fields
        dsInventSum.sortClear();
        InventSum::queryAddSumFields(dsInventSum);

        dsInventSum.orderMode(OrderMode::GroupBy);
        dsInventSum.addSortField(fieldNum(InventSum,ItemId));

        QueryBuildRange criteriaClosed = SysQuery::findOrCreateRange(dsInventSum, fieldNum(InventSum,Closed));
        if (dimParmVisibleGrid.ClosedFlag)
        {
            criteriaClosed.value('');
        }
        else
        {
            criteriaClosed.value(queryValue(NoYes::No));
        }

        QueryBuildRange criteriaClosedQty = SysQuery::findOrCreateRange(dsInventSum, fieldNum(InventSum,ClosedQty));
        if (dimParmVisibleGrid.ClosedQtyFlag)
        {
            criteriaClosedQty.value(queryValue(NoYes::No));
        }
        else
        {
            criteriaClosedQty.value('');
        }

        //Get inventDim data source and do the grouping
        QueryBuildDataSource dsInventDim = _inventDim_DS.query().dataSourceName(_inventDim_DS.name());
        dsInventDim.sortClear();

        InventDim::queryAddRangeAndValueProductDim(dsInventDim, _inventDimReq, this.inventDimGroupSetup().ecoResProductDimGroupSetup(), false);

        dimParmLockedRightClick.queryAddSortField(dsInventDim);
        if (!dimParmVisibleGrid.queryAddSortField(dsInventDim))
        {
            dsInventDim.addSortField(fieldNum(InventDim, TableId));
            dsInventDim.orderMode(OrderMode::GroupBy);
        }

        //Limit to only quarantine/transport warehouses and group by type
        QueryBuildDataSource dsInventLocation = _inventDim_DS.query().dataSourceName(_inventLocation_DS.name());
        QueryBuildRange creteriaLocationType = SysQuery::findOrCreateRange(dsInventLocation,fieldNum(InventLocation,InventLocationType));

        creteriaLocationType.value(strFmt('( ( %1 == %2 ) || ( %1 == %3 ) ) ',
                                            fieldStr(InventLocation,InventLocationType),
                                            any2int(InventLocationType::Quarantine),
                                            any2int(InventLocationType::Transit)));
        creteriaLocationType.status(RangeStatus::Locked);

        dsInventLocation.addSortField(fieldNum(InventLocation, InventLocationType));
        dsInventLocation.orderMode(OrderMode::GroupBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
        largeRightClickForm = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupShowClosedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the sum without values should be shown.
    /// </summary>
    /// <returns>
    ///    true always.
    /// </returns>
    public boolean setupShowClosedQty()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupShowItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the item number should be visible in the dimension setup form.
    /// </summary>
    /// <returns>
    ///    false always.
    /// </returns>
    public boolean setupShowItemId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventDimCtrl_Frm_Supply construct()
    {
        return new InventDimCtrl_Frm_Supply();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormValidDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class to be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <param name="_validDataSources">
    ///    A set of names (strings) for the data sources in the form to be controlled by this class.
    /// </param>
    /// <returns>
    ///    An instance of this class to be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_Supply newFromFormValidDataSources(
        FormRun     _formRun,
        Set         _validDataSources)
    {
        InventDimCtrl_Frm_Supply    inventDimCtrl = InventDimCtrl_Frm_Supply::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmValidDataSources(_validDataSources);
        inventDimCtrl.init();
        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
