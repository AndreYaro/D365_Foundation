<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscAdmCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PriceDiscAdmCopy extends RunBase
{
    // <GEERU>
    #ISOCountryRegionCodes
    #DEFINE.CurrentVersion(3)
    // </GEERU>

    #LOCALMACRO.CurrentList
        chgType,
        chgFrom,
        chgTo,
        chgItemCode,
        chgItemRelation,
        chgACCode,
        chgACRelation,
        chgCur,
        newType,
        newFrom,
        newTo,
        newItemCode,
        newItemRelation,
        newACCode,
        newACRelation,
        newCur
        // <GEERU>
        ,newAgreementId
        ,chgAgreementId
        ,newAgreementExtRecId
        // </GEERU>
    #ENDMACRO

    // <GEERU>
    DialogRunbase       dialog;
    // </GEERU>

    QueryRun            queryRun;
    Counter             progressCounter;
    Counter             progressTotal;

    DialogField         fieldChgType;
    DialogField         fieldChgFrom;
    DialogField         fieldChgTo;
    DialogField         fieldChgItemCode;
    DialogField         fieldChgItemRelation;
    DialogField         fieldChgACCode;
    DialogField         fieldChgACRelation;
    DialogField         fieldChgCur;
    // <GEERU>
    DialogField         fieldChgAgreementId;
    // </GEERU>

    DialogField         fieldNewType;
    DialogField         fieldNewFrom;
    DialogField         fieldNewTo;
    DialogField         fieldNewItemCode;
    DialogField         fieldNewItemRelation;
    DialogField         fieldNewACCode;
    DialogField         fieldNewACRelation;
    DialogField         fieldNewCur;
    // <GEERU>
    DialogField         fieldNewACRelationVend;
    DialogField         fieldNewACRelationCust;
    #define.fieldNewAgreementId('fieldNewAgreementId')
    DialogField         fieldNewAgreementId;
    // </GEERU>

    NoYes               chgType;
    NoYes               chgFrom;
    NoYes               chgTo;
    NoYes               chgItemCode;
    NoYes               chgItemRelation;
    NoYes               chgACCode;
    NoYes               chgACRelation;
    NoYes               chgCur;
    // <GEERU>
    NoYes               chgAgreementId;
    // </GEERU>

    PriceType           newType;
    TransDate           newFrom;
    TransDate           newTo;
    PriceDiscProductCodeType newItemCode;
    ItemRelation        newItemRelation;
    PriceDiscPartyCodeType newACCode;
    CustVendRel         newACRelation;
    CurrencyCode        newCur;
    AgreementId_RU       newAgreementId;
    AgreementHeaderExtRecId_RU newAgreementExtRecId;
    CustVendRel         prevACRel;
    PriceType           prevType;
    boolean             countryRegion_RU;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToggleField</Name>
				<Source><![CDATA[
    private DialogField addToggleField(FieldLabel _label, FieldHelp _help)
    {
        DialogField result = dialog.addField(enumStr(NoYes), _label, _help);
        result.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), methodStr(PriceDiscAdmCopy, enableControls), this);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogGroup             dialogGroup;
        DialogGroup             chgGroup;
        DialogGroup             newGroup;
        FormBuildStringControl  newControl;

        // <GEERU>
        dialog = super();
        // </GEERU>

        dialogGroup = dialog.addGroup();
        chgGroup    = dialog.addGroup("@SYS138761", dialogGroup);

        fieldChgType            = this.addToggleField("@SYS9114" , "@SYS138763");
        fieldChgFrom            = this.addToggleField("@SYS5209" , "@SYS138764");
        fieldChgTo              = this.addToggleField("@SYS14656", "@SYS138765");
        fieldChgItemCode        = this.addToggleField("@SYS58740", "@SYS138766");
        fieldChgItemRelation    = this.addToggleField("@SYS8631" , "@SYS138767");
        fieldChgACCode          = this.addToggleField("@SYS12243", "@SYS138768");
        fieldChgACRelation      = this.addToggleField("@SYS265"  , "@SYS138769");
        fieldChgCur             = this.addToggleField("@SYS7572" , "@SYS138770");

        // <GEERU>
        if (countryRegion_RU)
        {
            fieldChgAgreementId = this.addToggleField("@SYS15240", "@GLS104637");
        }
        // </GEERU>

        newGroup = dialog.addGroup("@SYS81533", dialogGroup);

        fieldNewType            = dialog.addField(enumStr(PriceType),               ' ',          "@SYS138763");
        fieldNewFrom            = dialog.addField(extendedTypeStr(TransDate),       "@SYS24050",  "@SYS138764");
        fieldNewTo              = dialog.addField(extendedTypeStr(TransDate),       "@SYS14656",  "@SYS138765");
        fieldNewItemCode        = dialog.addField(enumStr(TableGroupAll),           ' ',          "@SYS138766");
        fieldNewItemRelation    = dialog.addField(extendedTypeStr(ItemRelation),    ' ',          "@SYS138767");
        fieldNewACCode          = dialog.addField(enumStr(TableGroupAll),           ' ',          "@SYS138768");
        fieldNewACRelation      = dialog.addField(extendedTypeStr(CustVendRel),     "@SYS138762", "@SYS138769");

        newControl = fieldNewItemRelation.control();
        newControl.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(PriceDiscAdmCopy, fieldNewItemRelation_lookup), this);
        newControl = fieldNewACRelation.control();
        newControl.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(PriceDiscAdmCopy, fieldNewACRelation_lookup), this);
        newControl.registerOverrideMethod(methodStr(FormStringControl, resolveAmbiguousReference), methodStr(PriceDiscAdmCopy, fieldNewACRelation_resolveAmbiguousReference), this);

        // <GEERU>
        if (countryRegion_RU)
        {
            fieldNewACRelationVend = dialog.addField(extendedTypeStr(VendAccount),"@SYS138762", "@SYS138769");
            fieldNewACRelationCust = dialog.addField(extendedTypeStr(CustAccount),"@SYS138762", "@SYS138769");
        }
        // </GEERU>
        fieldNewCur             = dialog.addField(extendedTypeStr(CurrencyCode),    ' ',          "@SYS138770");

        // <GEERU>
        if (countryRegion_RU)
        {
            dialog.customFieldName_RU(#fieldNewAgreementId);
            fieldNewAgreementId = dialog.addField(extendedTypeStr(AgreementId_RU), '' , "@GLS104637");
            fieldNewAgreementId.lookupButton(FormLookupButton::Always);
            dialog.allowControlMethodOverload_RU(true);
        }
        // </GEERU>

        dialogGroup.columns(2);
        dialogGroup.frameType(1);

        dialog.addMenuItemButton(MenuItemType::Display,menuitemDisplayStr(RunBaseQueryDialog),DialogMenuItemGroup::BottomGrp);

        dialog.allowUpdateOnSelectCtrl(true);
        this.enableControls(null);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableControls</Name>
				<Source><![CDATA[
    private boolean enableControls(FormCheckBoxControl _checkBoxControl)
    {
        fieldNewType.enabled(        fieldChgType.value());
        fieldNewFrom.enabled(        fieldChgFrom.value());
        fieldNewTo.enabled(          fieldChgTo.value());
        fieldNewItemCode.enabled(    fieldChgItemCode.value());
        fieldNewItemRelation.enabled(fieldChgItemRelation.value());
        fieldNewACCode.enabled(      fieldChgACCode.value());
        fieldNewACRelation.enabled(  fieldChgACRelation.value());
        fieldNewCur.enabled(         fieldChgCur.value());

        // <GEERU>
        if (countryRegion_RU)
        {
            if (fieldNewAgreementId.dialog().formRun())
            {
                fieldNewAgreementId.dialog().formRun().lockWindowUpdate(true);
            }

            fieldNewAgreementId.enabled(fieldChgAgreementId.value());
            fieldNewACRelationVend.enabled(fieldChgACRelation.value());
            fieldNewACRelationCust.enabled(fieldChgACRelation.value());

            fieldNewACRelation.visible(false);

            if (PriceDiscTable::resolveModuleFromPriceType(fieldNewType.value())
             != PriceDiscTable::resolveModuleFromPriceType(prevType))
            {
                fieldNewAgreementId.value('');
            }
            prevType = fieldNewType.value();

            if (PriceDiscTable::resolveModuleFromPriceType(fieldNewType.value()) == ModuleInventCustVend::Cust)
            {
                fieldNewACRelationVend.visible(false);
                fieldNewACRelationCust.visible(true);
                if (fieldNewACRelationCust.value() != prevACRel)
                {
                    fieldNewAgreementId.value('');
                    prevACRel = fieldNewACRelationCust.value();
                }
            }
            else
            {
                fieldNewACRelationVend.visible(true);
                fieldNewACRelationCust.visible(false);
                if (fieldNewACRelationVend.value() != prevACRel)
                {
                    fieldNewAgreementId.value('');
                    prevACRel = fieldNewACRelationVend.value();
                }
            }

            if (fieldNewACCode.value() != TableGroupAll::Table)
            {
                fieldNewACRelationVend.enabled(false);
                fieldNewACRelationVend.value('');
                fieldNewACRelationCust.enabled(false);
                fieldNewACRelationCust.value('');
                fieldNewAgreementId.enabled(false);
                fieldNewAgreementId.value('');
            }

            if (fieldNewAgreementId.dialog().formRun())
            {
                fieldNewAgreementId.dialog().formRun().lockWindowUpdate(false);
            }
        }
        // </GEERU>

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    protected void displayProgress()
    {
        this.progressUpdate(strFmt("@SYS60086", tableId2pname(tableNum(PriceDiscAdmTrans))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNewACRelation_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for the account relation that is based on the account code.
    /// </summary>
    /// <param name="_callingControl">
    /// The form string control object to use to perform the lookup.
    /// </param>
    protected void fieldNewACRelation_lookup(FormStringControl _callingControl)
    {
        PriceDiscGroup    priceDiscGroup;
        PriceDiscAdmTrans localPriceDiscAdmTrans;

        localPriceDiscAdmTrans.relation = fieldNewType.value();
        switch (fieldNewACCode.value())
        {
            case TableGroupAll::Table:
                if (localPriceDiscAdmTrans.module() == ModuleInventCustVend::Cust)
                {
                    CustTable::lookupCustomer(_callingControl);
                }
                else if (localPriceDiscAdmTrans.module() == ModuleInventCustVend::Vend)
                {
                    VendTable::lookupVendor(_callingControl);
                }
                break;

            case TableGroupAll::GroupId:
                priceDiscGroup.Module           = localPriceDiscAdmTrans.module();
                priceDiscGroup.Type             = localPriceDiscAdmTrans.priceGroupType();
                PriceDiscGroup::priceGroupIdLookup(_callingControl, priceDiscGroup);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNewACRelation_resolveAmbiguousReference</Name>
				<Source><![CDATA[
    protected str fieldNewACRelation_resolveAmbiguousReference(FormStringControl _callingControl)
    {
        PriceDiscAdmTrans localPriceDiscAdmTrans;
        localPriceDiscAdmTrans.relation = fieldNewType.value();

        if (fieldNewACCode.value() == TableGroupAll::Table)
        {
            if (localPriceDiscAdmTrans.module() == ModuleInventCustVend::Cust)
            {
                return CustTable::resolveAmbiguousReferenceCustomer(_callingControl);
            }
            else if (localPriceDiscAdmTrans.module() == ModuleInventCustVend::Vend)
            {
                return VendTable::resolveAmbiguousReferenceVendor(_callingControl);
            }
        }

        return _callingControl.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNewAgreementId_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for a sales or purchase agreement that is based on a price type.
    /// </summary>
    protected void fieldNewAgreementId_lookup()
    {
        SalesTable salesTable;
        PurchTable purchTable;

        dialog.dialogOnClient_RU().updateServer();

        switch (PriceDiscTable::resolveModuleFromPriceType(fieldNewType.value()))
        {
            case ModuleInventCustVend::Cust:
                salesTable.CustAccount = fieldNewACRelationCust.value();
                SalesAgreementHeader::salesAgreementLookup(dialog.curFormControl_RU(), salesTable);
                break;

            case ModuleInventCustVend::Vend:
                purchTable.OrderAccount = fieldNewACRelationVend.value();
                PurchAgreementHeader::purchAgreementLookup(dialog.curFormControl_RU(), purchTable);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNewItemRelation_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for the item relation that is based on the item code.
    /// </summary>
    /// <param name="_callingControl">
    /// The form string control object to use to perform the lookup.
    /// </param>
    protected void fieldNewItemRelation_lookup(FormStringControl _callingControl)
    {
        PriceDiscGroup    priceDiscGroup;
        PriceDiscAdmTrans localPriceDiscAdmTrans;

        switch (fieldNewItemCode.value())
        {
            case TableGroupAll::Table:
                InventTable::lookupItem(_callingControl);
                break;

            case TableGroupAll::GroupId:
                localPriceDiscAdmTrans.relation = fieldNewType.value();
                priceDiscGroup.Module           = ModuleInventCustVend::Invent;
                priceDiscGroup.Type             = localPriceDiscAdmTrans.priceGroupType();
                PriceDiscGroup::priceGroupIdLookup(_callingControl, priceDiscGroup);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        // <GEERU>
        SalesAgreementHeader salesAgreementHeader;
        PurchAgreementHeader purchAgreementHeader;
        AgreementState       agreementState;
        CustVendAC           custVendAC;
        // </GEERU>
        chgType             = fieldChgType.value();
        chgFrom             = fieldChgFrom.value();
        chgTo               = fieldChgTo.value();
        chgItemCode         = fieldChgItemCode.value();
        chgItemRelation     = fieldChgItemRelation.value();
        chgACCode           = fieldChgACCode.value();
        chgACRelation       = fieldChgACRelation.value();
        chgCur              = fieldChgCur.value();

        // <GEERU>
        if (countryRegion_RU)
        {
            chgAgreementId = fieldChgAgreementId.value();
        }
        // </GEERU>

        newType             = fieldNewType.value();
        newFrom             = fieldNewFrom.value();
        newTo               = fieldNewTo.value();
        newItemCode         = fieldNewItemCode.value();
        newItemRelation     = fieldNewItemRelation.value();
        newACCode           = fieldNewACCode.value();
        newACRelation       = fieldNewACRelation.value();
        newCur              = fieldNewCur.value();

        // <GEERU>
        if (countryRegion_RU)
        {
            newAgreementId = fieldNewAgreementId.value();
            if (newAgreementId)
            {
                if (PriceDiscTable::resolveModuleFromPriceType(newType) == ModuleInventCustVend::Cust)
                {
                    newACRelation        = fieldNewACRelationCust.value();
                    salesAgreementHeader = SalesAgreementHeader::findAgreementId(newAgreementId);
                    agreementState       = salesAgreementHeader.AgreementState;
                    custVendAC           = salesAgreementHeader.CustAccount;
                    newAgreementExtRecId = SalesAgreementHeaderExt_RU::findBySalesAgreementHeader(salesAgreementHeader.RecId).RecId;
                }
                else
                {
                    newACRelation        = fieldNewACRelationVend.value();
                    purchAgreementHeader = PurchAgreementHeader::findAgreementId(newAgreementId);
                    agreementState       = purchAgreementHeader.AgreementState;
                    custVendAC           = purchAgreementHeader.VendAccount;
                    newAgreementExtRecId = PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(purchAgreementHeader.RecId).RecId;
                }

                if (agreementState != AgreementState::Effective)
                {
                    return checkFailed(strFmt("@SYS119897", newAgreementId, "@GLS220539"));
                }
                if (newACRelation && newACRelation != custVendAC)
                {
                    return checkFailed("@SYS17074");
                }
            }
        }
        // </GEERU>

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        queryRun = new QueryRun(queryStr(PriceDiscAdmTrans));
        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    protected void progressUpdate(str _text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(_text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select command is added to a dialog
    /// box. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it in
    /// the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        PriceDiscAdmTrans   priceDiscAdmTrans;
        RecordSortedList    priceDiscAdmTransList = new RecordSortedList(tableNum(PriceDiscAdmTrans));

        #macrolib.AviFiles

        priceDiscAdmTransList.sortOrder(fieldNum(PriceDiscAdmTrans,RecId));

        progressTotal = QueryRun::getQueryRowCount(queryRun.query(), intMax()) * 2;
        this.progressInit("@SYS59049", progressTotal, #AviFileCopy);
        progress = this.parmProgress();

        ttsbegin;

        while (queryRun.next())
        {
            this.displayProgress();
            priceDiscAdmTrans = queryRun.get(priceDiscAdmTrans.TableId);

            if (this.validateRecord(priceDiscAdmTrans))
            {
                priceDiscAdmTransList.ins(priceDiscAdmTrans);
            }
            else
            {
                throw error("@SYS25904");
            }
        }

        if (priceDiscAdmTransList.first(priceDiscAdmTrans))
        {
            do
            {
                this.displayProgress();
                this.updateNow(priceDiscAdmTrans);
            } while (priceDiscAdmTransList.next(priceDiscAdmTrans));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);
        container   packedQueryRun;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQueryRun] = _packedClass;

                if (SysQuery::isPackedOk(packedQueryRun))
                {
                    queryRun   = new QueryRun(packedQueryRun);
                }
                else
                {
                    return false;
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    protected void updateNow(PriceDiscAdmTrans _priceDiscAdmTrans)
    {
        PriceDiscAdmTrans newPriceDiscAdmTrans = this.initializePriceDiscAdmTransCopy(_priceDiscAdmTrans);

        if (!newPriceDiscAdmTrans.validateWrite())
        {
            throw error(strfmt("@SYS4007721", tablePname(PriceDiscAdmTrans)));
        }
        
        newPriceDiscAdmTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePriceDiscAdmTransCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a modified copy of the specified <c>PriceDiscAdmTrans</c> record.
    /// </summary>
    /// <param name = "_priceDiscAdmTrans">The original <c>PriceDiscAdmTrans</c> record.</param>
    /// <returns>A copy of the specified <c>PriceDiscAdmTrans</c> record.</returns>
    protected PriceDiscAdmTrans initializePriceDiscAdmTransCopy(PriceDiscAdmTrans _priceDiscAdmTrans)
    {
        PriceDiscAdmTrans newPriceDiscAdmTrans = _priceDiscAdmTrans.data();

        newPriceDiscAdmTrans.LineNum = PriceDiscAdmTrans::lastLineNum(_priceDiscAdmTrans.JournalNum) + 1;

        if (chgType)
        {
            newPriceDiscAdmTrans.Relation         = newType;
        }
        if (chgFrom)
        {
            newPriceDiscAdmTrans.FromDate         = newFrom;
        }
        if (chgTo)
        {
            newPriceDiscAdmTrans.ToDate           = newTo;
        }
        if (chgItemCode)
        {
            newPriceDiscAdmTrans.ItemCode         = newItemCode;
        }
        if (chgItemRelation)
        {
            if (PriceDiscAdmCopyProdDimsClearIfGroupDiffersFlight::instance().isEnabled())
            {
                InventDim newItemInventoryProductDimensions = newPriceDiscAdmTrans.inventDim();
                newItemInventoryProductDimensions.clearNotProductDim(InventDimGroupSetup::newItemId(newItemRelation));
                newItemInventoryProductDimensions = InventDim::findOrCreate(newItemInventoryProductDimensions);

                ItemRelation prevItemRelation = newPriceDiscAdmTrans.ItemRelation;
                
                if (InventTable::itemProductDimensionGroup(prevItemRelation) != InventTable::itemProductDimensionGroup(newItemRelation)
                    || !InventDimCombination::findByInventDim(newItemRelation, newItemInventoryProductDimensions))
                {
                    this.clearProductDimensions(newPriceDiscAdmTrans);
                }
            }
            else
            {
                this.clearProductDimensions(newPriceDiscAdmTrans);
            }

            newPriceDiscAdmTrans.ItemRelation     = newItemRelation;
        }
        if (chgACCode)
        {
            newPriceDiscAdmTrans.AccountCode      = newACCode;
        }
        if (chgACRelation)
        {
            newPriceDiscAdmTrans.AccountRelation  = newACRelation;
        }
        if (chgCur)
        {
            if (newPriceDiscAdmTrans.Currency != newCur)
            {
                if (PriceDisc::isPriceTypeHandlingUnitAmount(newPriceDiscAdmTrans.relation))
                {
                    newPriceDiscAdmTrans.Amount = ExchangeRateHelper::curPrice2CurPrice(newPriceDiscAdmTrans.Amount, newPriceDiscAdmTrans.Currency, newCur);
                }
                else
                {
                    newPriceDiscAdmTrans.Amount = CurrencyExchangeHelper::curAmount2CurAmount(newPriceDiscAdmTrans.Amount, newPriceDiscAdmTrans.Currency, newCur);
                }

                newPriceDiscAdmTrans.Markup = ExchangeRateHelper::curPrice2CurPrice(newPriceDiscAdmTrans.Markup, newPriceDiscAdmTrans.Currency, newCur);
            }
            newPriceDiscAdmTrans.Currency         = newCur;
        }

        // <GEERU>
        if (chgAgreementId)
        {
            newPriceDiscAdmTrans.AgreementHeaderExt_RU = newAgreementExtRecId;
        }
        // </GEERU>

        newPriceDiscAdmTrans.PriceDiscTableRef  = 0;

        return newPriceDiscAdmTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearProductDimensions</Name>
				<Source><![CDATA[
    private void clearProductDimensions(PriceDiscAdmTrans _priceDiscAdmTrans)
    {
        InventDim inventDim = _priceDiscAdmTrans.inventDim();
        if (this.shouldClearProductDimensions(inventDim))
        {
            inventDim.clearProductDimensions();
            _priceDiscAdmTrans.InventDimId = inventDim::findOrCreate(inventDim).inventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldClearProductDimensions</Name>
				<Source><![CDATA[
    private boolean shouldClearProductDimensions(InventDim _inventDim)
    {
        return _inventDim.anyProductDimensionSpecified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void  updateQueryBuild(PriceDiscAdmTrans _priceDiscAdmTrans)
    {
        QueryBuildRange queryBuildRange;

        queryBuildRange = queryRun.query().dataSourceTable(tableNum(PriceDiscAdmTrans)).findRange(fieldNum(PriceDiscAdmTrans,JournalNum));
        queryBuildRange.value(queryValue(_priceDiscAdmTrans.JournalNum));
        queryBuildRange.status(RangeStatus::Hidden);
        queryRun.title(PriceDiscAdmCopy::description());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates new values for the <c>ItemRelation</c> and <c>AccountRelation</c> fields in the
    ///    <c>PriceDiscAdmTrans</c> table.
    /// </summary>
    /// <param name="_priceDiscAdmTrans">
    /// The record to validate.
    /// </param>
    /// <returns>
    /// True if the trade agreement is valid; otherwise, false.
    /// </returns>
    private boolean validateRecord(PriceDiscAdmTrans _priceDiscAdmTrans)
    {
        PriceType priceType = (chgType ? newType : _priceDiscAdmTrans.Relation);
        
        PriceTypeTradeAgreementMapping priceTypeTradeAgreementMapping = PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(priceType);
        ModuleInventCustVend module = priceTypeTradeAgreementMapping.partyRoleModule();
        PriceGroupType groupType = priceTypeTradeAgreementMapping.priceGroupType();

        return this.validateAccountRelation(_priceDiscAdmTrans, groupType, module)
            && this.validateItemRelation(_priceDiscAdmTrans, groupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates new values for the <c>ItemRelation</c> field in the <c>PriceDiscAdmTrans</c> table.
    /// </summary>
    /// <param name = "_priceDiscAdmTrans">The record to validate.</param>
    /// <param name = "_groupType">The price group type.</param>
    /// <returns>True if the value is valid; otherwise, false.</returns>
    protected boolean validateItemRelation(PriceDiscAdmTrans _priceDiscAdmTrans, PriceGroupType _groupType)
    {
        PriceDiscProductCode    itemCode        = (chgItemCode      ? newItemCode       : _priceDiscAdmTrans.ItemCode);
        PriceDiscItemRelation   itemRelation    = (chgItemRelation  ? newItemRelation   : _priceDiscAdmTrans.ItemRelation);
        boolean ret = true;

        switch (itemCode)
        {
            case PriceDiscProductCodeType::All:
                if (itemRelation)
                {
                    ret = checkFailed("@SYS138659");
                }
                break;

            case PriceDiscProductCodeType::GroupId:
                ret = PriceDiscGroup::checkExist(ModuleInventCustVend::Invent, _groupType, itemRelation);
                break;

            case PriceDiscProductCodeType::Table:
                ret = InventTable::checkExist(itemRelation);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates new values for the <c>AccountRelation</c> field in the <c>PriceDiscAdmTrans</c> table.
    /// </summary>
    /// <param name = "_priceDiscAdmTrans">The record to validate.</param>
    /// <param name = "_groupType">The price group type.</param>
    /// <param name = "_module">The party role module for the price type.</param>
    /// <returns>True if the account relation is valid on the trade agreement; otherwise, false.</returns>
    protected boolean validateAccountRelation(PriceDiscAdmTrans _priceDiscAdmTrans, PriceGroupType _groupType, ModuleInventCustVend _module)
    {
        PriceDiscPartyCode          accountCode     = (chgACCode        ? newACCode         : _priceDiscAdmTrans.AccountCode);
        PriceDiscAccountRelation    accountRelation = (chgACRelation    ? newACRelation     : _priceDiscAdmTrans.AccountRelation);

        // <GEERU>
        AgreementHeaderExtRecId_RU  agreementExtRecId;

        if (countryRegion_RU)
        {
            agreementExtRecId = (chgAgreementId ? newAgreementExtRecId : _priceDiscAdmTrans.AgreementHeaderExt_RU);
        }
        // </GEERU>

        boolean ret = true;

        switch (accountCode)
        {
            case PriceDiscPartyCodeType::All:
                if (accountRelation != '')
                {
                    ret = checkFailed("@SYS138658");
                }

                // <GEERU>
                if (countryRegion_RU && agreementExtRecId)
                {
                    ret = checkFailed("@GLS116062");
                }
                // </GEERU>
                break;

            case PriceDiscPartyCodeType::GroupId:
                ret = PriceDiscGroup::checkExist(_module, _groupType, accountRelation) && ret;

                // <GEERU>
                if (countryRegion_RU && agreementExtRecId)
                {
                    ret = checkFailed("@GLS116062");
                }
                // </GEERU>
                break;

            case PriceDiscPartyCodeType::Table:
                ret = this.validateRecordForPartyModuleType(_module, accountRelation, agreementExtRecId);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecordForPartyModuleType</Name>
				<Source><![CDATA[
    [Hookable]
    private boolean validateRecordForPartyModuleType(ModuleInventCustVend _partyModuleType,
        PriceDiscAccountRelation    _accountRelation,
        AgreementHeaderExtRecId_RU  _agreementExtRecId)
    {
        boolean ret = true;

        switch (_partyModuleType)
        {
            case ModuleInventCustVend::Cust:
                ret = CustTable::checkExist(_accountRelation) && ret;
                // <GEERU>
                if (ret && countryRegion_RU && _agreementExtRecId)
                {
                    if (SalesAgreementHeaderExt_RU::salesAgreementHeader(_agreementExtRecId).CustAccount != _accountRelation)
                    {
                        ret = checkFailed("@SYS17074");
                    }
                }
                // </GEERU>
                break;

            case ModuleInventCustVend::Vend:
                ret = VendTable::checkExist(_accountRelation) && ret;
                // <GEERU>
                if (ret && countryRegion_RU && _agreementExtRecId)
                {
                    if (PurchAgreementHeaderExt_RU::purchAgreementHeader(_agreementExtRecId).VendAccount != _accountRelation)
                    {
                        ret = checkFailed("@SYS17074");
                    }
                }
                // </GEERU>
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PriceDiscAdmCopy construct()
    {
        return new PriceDiscAdmCopy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS138772";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PriceDiscAdmTrans     priceDiscAdmTrans;
        PriceDiscAdmCopy      priceDiscAdmCopy = PriceDiscAdmCopy::construct();

        if (!(args.dataset() == tableNum(PriceDiscAdmTrans)))
        {
            throw error("@SYS18626");
        }

        priceDiscAdmTrans = args.record();
        if (!priceDiscAdmTrans.JournalNum)
        {
            throw error("@SYS59048");
        }

        priceDiscAdmCopy.getLast();
        priceDiscAdmCopy.updateQueryBuild(priceDiscAdmTrans);
        if (priceDiscAdmCopy.prompt())
        {
            priceDiscAdmCopy.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>