<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CashReportController</c> class is the controller class for the <c>CashReport_PL</c> SSRS
/// report.
/// </summary>
class CashReportController extends SrsReportRunController implements BatchRetryable
{
    private const str LocalizationFeatureReferencePL = 'PL-00021';
    private const str LocalizationFeatureReferenceHU = 'HU-00016';

    #ISOCountryRegionCodes
    RCashReportJour_PL cashReportJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the cash report name.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    protected SRSCatalogItemName getReportName()
    {
        SRSCatalogItemName cashReportName = this.getReportNameByContext();
        if (cashReportName == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        return cashReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportNameByContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the cash report name based on the country or region context. Used from getReportName()
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    protected SRSCatalogItemName getReportNameByContext()
    {
        SRSCatalogItemName                   cashReportName = '';
        LogisticsAddressCountryRegionISOCode isoCode = SysCountryRegionCode::countryInfo();

        switch (isoCode)
        {
            case #isoPL:
                GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReferencePL, funcName());
                cashReportName = ssrsReportStr(CashReport_PL, Report);
                break;
            case #isoHU:
                GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReferenceHU, funcName());
                cashReportName = ssrsReportStr(CashReport_HU, Report);
                break;
        }
        return cashReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the ranges on the query before it is used for the report.
    /// </summary>
    protected void initQueryRanges()
    {
        Query query = this.getFirstQuery();
        int currentOrderField = 1;

        QueryBuildDataSource queryDataSource = query.dataSourceTable(tablenum(RCashReportJour_PL));

        findOrCreateRange_W(queryDataSource, fieldNum(RCashReportJour_PL, AccountNum), cashReportJour.AccountNum);
        findOrCreateRange_W(queryDataSource, fieldNum(RCashReportJour_PL, ReportNum), cashReportJour.ReportNum);
        findOrCreateRange_W(queryDataSource, fieldNum(RCashReportJour_PL, CurrencyCode), cashReportJour.CurrencyCode);
        findOrCreateRange_W(queryDataSource, fieldNum(RCashReportJour_PL, TransDate), queryValue(cashReportJour.TransDate));

        switch (SysCountryRegionCode::countryInfo())
        {
            case #isoHU:
                if (RCashTable::find(cashReportJour.AccountNum).Denomination_HU)
                {
                    queryDataSource = query.dataSourceTable(tablenum(HuDenominationSummary));
                    queryDataSource.enabled(true);
                    findOrCreateRange_W(queryDataSource, fieldnum(HuDenominationSummary, ReportNum), queryValue(cashReportJour.ReportNum));
                }
                break;

            case #isoPL:
                queryDataSource = query.dataSourceTable(tablenum(RCashTrans));
                Map queryOrderByFields = new Map(Types::Int64, Types::void);

                while (currentOrderField <= query.orderByFieldCount())
                {
                    QueryOrderByField orderByField = query.orderByField(currentOrderField);

                    if (orderByField.dataSource().table() == tablenum(RCashTrans))
                    {
                        queryOrderByFields.insert(orderByField.fieldID(), null);
                    }

                    currentOrderField++;
                }

                if (!queryOrderByFields.exists(fieldnum(RCashTrans, TransDate)))
                {
                    queryDataSource.addOrderByField(fieldnum(RCashTrans, TransDate));
                }

                if (!queryOrderByFields.exists(fieldnum(RCashTrans, TransRegDate_PL)))
                {
                    queryDataSource.addOrderByField(fieldnum(RCashTrans, TransRegDate_PL));
                }

                if (!queryOrderByFields.exists(fieldnum(RCashTrans, Voucher)))
                {
                    queryDataSource.addOrderByField(fieldnum(RCashTrans, Voucher));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        if (!args ||
            !args.record() ||
            args.dataset() != tablenum(RCashReportJour_PL))
        {
            throw error(strfmt("@GLS110030",tablestr(RCashReportJour_PL)));
        }

        cashReportJour = args.record();

        if (!cashReportJour.Approved &&
            (Box::yesNo("@GLS110173", DialogButton::No, "@GLS109663") != DialogButton::Yes))
        {
            throw error("@SYS30578");
        }

        this.initQueryRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CashReportController controller = new CashReportController();
        controller.parmReportName(controller.getReportName());
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>