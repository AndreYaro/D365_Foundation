<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExciseSalesInvoiceDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ExciseSalesInvoiceDP_IN</c> class provides implementation of a data provider class for
///  excise invoice reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(ExciseSalesInvoiceContract_IN))
]
public class ExciseSalesInvoiceDP_IN extends SrsReportDataProviderPreProcessTempDB
{
    ExciseInvoiceSalesHeaderFooterTmp_IN    headerFooterTmp;
    ExciseSalesInvoiceTmp_IN                exciseSalesInvoiceTmp;
    TaxInvoiceTransporterDetailsTmp_IN      taxInvoiceTransporterDetailsTmp;
    ExciseTaxAggregrateTmp_IN               exciseTaxAggregrateTmp;
    CustInvoiceJour                         custInvoiceJour;
    AmountCur                               totalTaxAmountCur;
    ExciseSalesInvoiceContract_IN           exciseSalesInvoiceContract;
    ExciseInvoiceTaxTransTmp_IN             exciseInvoiceTaxTransTmp;
    ExciseInvoiceChargesTmp_IN              exciseInvoiceChargesTmp;
    AmountCur                               totalLineAmountCur;
    AmountCur                               totalChargesAmtCur;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    public void createData()
    {
        this.getDataFromContract();
        this.insertTaxDetails();
        this.insertChargesInformation();
        this.insertInvoiceDetails();
        this.insertIntoSalesInvoiceHeaderFooterTmp();
        this.insertTaxAggregrateInformation();
        this.insertTransporterDetails();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        exciseSalesInvoiceContract = this.parmDataContract() as ExciseSalesInvoiceContract_IN;
        custInvoiceJour = CustInvoiceJour::findRecId(exciseSalesInvoiceContract.parmCustInvoiceJourRecdId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseInvoiceChargesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseInvoiceChargesTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseInvoiceChargesTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseInvoiceChargesTmp_IN))]
    public ExciseInvoiceChargesTmp_IN getExciseInvoiceChargesTmp()
    {
        select exciseInvoiceChargesTmp;
        return exciseInvoiceChargesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseInvoiceTmpTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseInvoiceTmpTaxTrans_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseInvoiceTmpTaxTrans_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseInvoiceTaxTransTmp_IN))]
    public ExciseInvoiceTaxTransTmp_IN getExciseInvoiceTmpTaxTrans()
    {
        select exciseInvoiceTaxTransTmp;
        return exciseInvoiceTaxTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxAggregrateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseTaxAggregrateTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseTaxAggregrateTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseTaxAggregrateTmp_IN))]
    public ExciseTaxAggregrateTmp_IN getExciseTaxAggregrateTmp()
    {
        select exciseTaxAggregrateTmp;
        return exciseTaxAggregrateTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseInvoiceSalesHeaderFooter_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseInvoiceSalesHeaderFooter_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseInvoiceSalesHeaderFooterTmp_IN))]
    public ExciseInvoiceSalesHeaderFooterTmp_IN getSalesInvoiceHeaderFooterTmp()
    {
        select headerFooterTmp;
        return headerFooterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseSalesInvoiceTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseSalesInvoiceTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ExciseSalesInvoiceTmp_IN))]
    public ExciseSalesInvoiceTmp_IN getSalesInvoiceTmp()
    {
        select exciseSalesInvoiceTmp;
        return exciseSalesInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInvoiceTransporterDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>ExciseInvoiceTransporterDetailsTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ExciseInvoiceTransporterDetailsTmp_IN</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxInvoiceTransporterDetailsTmp_IN))]
    public TaxInvoiceTransporterDetailsTmp_IN getTaxInvoiceTransporterDetailsTmp()
    {
        select taxInvoiceTransporterDetailsTmp;
        return taxInvoiceTransporterDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChargesInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the charges information.
    /// </summary>
    private void insertChargesInformation()
    {
        MarkupTrans markupTrans;

        insert_recordset exciseInvoiceChargesTmp(Charges, ChargesAmountCur)
        select Txt, sum(Posted) from markupTrans
        group by markupTrans.Txt
            where markupTrans.Voucher == custInvoiceJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoSalesInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice header information.
    /// </summary>
    /// <remarks>
    /// This method will insert the invoice header information into the <c>ExciseInvoiceSalesheaderFooterTmp</c>
    /// table which is only used for ExciseInvoice report.
    /// </remarks>
    private void insertIntoSalesInvoiceHeaderFooterTmp()
    {
        CustInvoiceTrans                custInvoiceTrans;
        TaxInformation_IN               exciseInvoicetaxInformation, custTaxInformation;
        CompanyInfo                     companyInfo;
        CustTable                       custTable;
        CustInvoiceTrans_IN             custInvoiceTransLoc;
        LogisticsLocation               logisticsLocation;
        CustInvoiceJour_IN              custInvoiceJourLoc;
        TimeExpected                    createdTime;

        companyInfo = CompanyInfo::find();
        custTable = CustTable::find(custInvoiceJour.InvoiceAccount);
        custInvoiceJourLoc = custInvoiceJour.custInvoiceJour_IN();
        custTaxInformation = TaxInformation_IN::findDefaultbyLocation(LogisticsLocation::find(DirPartyTable::findRec(custTable.Party).PrimaryAddressLocation).RecId);

        headerFooterTmp.ConsigneeName = custInvoiceJour.InvoicingName;
        headerFooterTmp.ConsigneeAddress = custInvoiceJour.invoicingAddress();
        headerFooterTmp.OrderAccount = custInvoiceJour.OrderAccount;
        headerFooterTmp.CustomerName = custTable.name();
        headerFooterTmp.CustomerAddress = custTable.address();
        headerFooterTmp.CustomerEmail = custTable.email();
        headerFooterTmp.CustomerPhone = custTable.phone();
        headerFooterTmp.CustomerFax = custTable.telefax();

        headerFooterTmp.CustomerRef = custInvoiceJour.CustomerRef;
        headerFooterTmp.ModeOfPaym = PaymTerm::find(custInvoiceJour.Payment).Description;
        headerFooterTmp.PaymTermId = custInvoiceJour.PaymId;
        headerFooterTmp.CustomerTINNumber = TaxRegistrationNumbers_IN::find(custTaxInformation.TIN).RegistrationNumber;
        headerFooterTmp.CustomerCSTNumber = TaxRegistrationNumbers_IN::find(custTaxInformation.SalesTaxRegistrationNumber).RegistrationNumber;
        createdTime = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(custInvoiceJour.createdDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        headerFooterTmp.DateTimeOfInvoice = DateTimeUtil::newDateTime(custInvoiceJour.InvoiceDate, createdTime);
        headerFooterTmp.Currency = Ledger::accountingCurrency(CompanyInfo::current());
        headerFooterTmp.InvoiceDiscAmtCur = custInvoiceJour.EndDisc;
        if (custInvoiceJourLoc.ExciseInvoiceId)
        {
            headerFooterTmp.InvoiceId = custInvoiceJourLoc.ExciseInvoiceId;
        }
        else
        {
            headerFooterTmp.InvoiceId = custInvoiceJour.InvoiceId;
        }

        if (custInvoiceJourLoc.ExciseInvoiceAddress == ExciseInvoiceAddressType_IN::CompanyAddress)
        {
            exciseInvoicetaxInformation = TaxInformation_IN::findDefaultbyLocation(DirParty::primaryPostalAddressLocationRecId(CompanyInfo::current()));

            this.updateTaxInformationDetails(exciseInvoicetaxInformation, headerFooterTmp);
            headerFooterTmp.LocationName = companyInfo.Name();
            headerFooterTmp.LocationAddress = companyInfo.postalAddress().Address;
            headerFooterTmp.LocationFax = companyInfo.teleFax();
            headerFooterTmp.LocationPhone = companyInfo.phone();
        }

        else
        {
            select firstOnly RecId from custInvoiceTrans order by LineNum asc
            where custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId;

            custInvoiceTransLoc = custInvoiceTrans.custInvoiceTrans_IN();
            exciseInvoicetaxInformation = TaxInformation_IN::find(custInvoiceTransLoc.TaxInformation_IN);
            logisticsLocation = LogisticsLocation::find(custInvoiceTransLoc.CompanyLocation_IN);
            headerFooterTmp.LocationName = logisticsLocation.Description;
            headerFooterTmp.LocationAddress = logisticsLocation.postalAddress();
            headerFooterTmp.LocationPhone = LogisticsElectronicAddress::findByLocationAndType(logisticsLocation.RecId, LogisticsElectronicAddressMethodType::Phone).Locator;
            headerFooterTmp.LocationFax = LogisticsElectronicAddress::findByLocationAndType(logisticsLocation.RecId, LogisticsElectronicAddressMethodType::Fax).Locator;
            this.updateTaxInformationDetails(exciseInvoicetaxInformation, headerFooterTmp);
        }

        headerFooterTmp.insert();
        this.updateInvoiceAmountCurInWords(headerFooterTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoiceDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice detail information.
    /// </summary>
    private void insertInvoiceDetails()
    {
        CustInvoiceTrans        custInvoiceTrans;
        CustInvoiceTrans_IN     custInvoiceTransLoc;
        ExciseTariffCodes_IN    exciseTariffCode;

        insert_recordset exciseSalesInvoiceTmp(LineNum, SalesUnitPriceAmtCur, SalesLineDiscAmtCur, SalesLineAmtCur, ItemId, CustinvoicetransRecid,
                                               Description, InvoiceQty, UnitOfMeasure, AssessableValueCur, ExciseTariffCode)
        select LineNum, SalesPrice, SumLineDisc, LineAmount, ItemId, RecId,
               Name, Qty, SalesUnit
        from custInvoiceTrans
            where custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId
        join AssessableValue_IN from custInvoiceTransLoc
            where custInvoiceTransLoc.CustInvoiceTrans == custInvoiceTrans. RecId
        join TariffCode from exciseTariffCode
            where exciseTariffCode.RecId == custInvoiceTransLoc.ExciseTariffCodes_IN;

        this.updateInvoiceTaxDetails(exciseSalesInvoiceTmp);

        update_recordSet exciseSalesInvoiceTmp
        setting ExciseDutyRate = (exciseSalesInvoiceTmp.CentralExciseDutyAmtCur/exciseSalesInvoiceTmp.SourceExciseBaseAmountCur) * 100
            where exciseSalesInvoiceTmp.CentralExciseDutyAmtCur != 0  && exciseSalesInvoiceTmp.SourceExciseBaseAmountCur != 0;

        update_recordSet exciseSalesInvoiceTmp
        setting CSTVATpercent = (exciseSalesInvoiceTmp.VATAmountCur/exciseSalesInvoiceTmp.SourceVATBaseAmountCur) * 100
            where exciseSalesInvoiceTmp.VATAmountCur != 0  && exciseSalesInvoiceTmp.SourceVATBaseAmountCur != 0;

        update_recordSet exciseSalesInvoiceTmp
        setting TCSpercent = (exciseSalesInvoiceTmp.TaxWithholdAmountCur/exciseSalesInvoiceTmp.TaxWithholdBaseAmountCur) * 100
            where exciseSalesInvoiceTmp.TaxWithholdAmountCur != 0  && exciseSalesInvoiceTmp.TaxWithholdBaseAmountCur != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxAggregrateInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the tax aggregrate information.
    /// </summary>
    private void insertTaxAggregrateInformation()
    {
        TaxTrans_IN                       taxtrans;
        TaxReportingCode_IN               taxReportingCode;
        TaxReportingAggregrateCategory_IN taxReportingAggregrateCategory;
        TaxReportingTaxComponent_IN       taxReportingTaxComponent;
        TaxComponentTable_IN              taxComponentTable;

        taxReportingCode = TaxReportingCode_IN::findByReportingCode(TaxReporting_IN::ExciseInvoice);

        while select TaxAggregrateReportingCategory from taxReportingAggregrateCategory
            group by TaxAggregrateReportingCategory
            where taxReportingAggregrateCategory.TaxReportingCode == taxReportingCode.RecId
        join TaxReportingAggregrateCategory_IN, TaxComponentTable_IN from taxReportingTaxComponent
            where taxReportingTaxComponent.TaxReportingAggregrateCategory_IN == taxReportingAggregrateCategory.RecId
        join RecId from taxComponentTable
            where taxComponentTable.RecId == taxReportingTaxComponent.TaxComponentTable_IN
        join sum(SourceTaxAmountCur) from taxtrans
            where taxtrans.TaxComponentTable == taxComponentTable.RecId &&
                taxtrans.Voucher == custInvoiceJour.LedgerVoucher &&
                    taxtrans.TransDate == custInvoiceJour.InvoiceDate && taxtrans.SourceTableId == tableNum(SalesLine)
        {
            exciseTaxAggregrateTmp.AmountCurInWords = Global::numeralsToTxt(abs(taxtrans.SourceTaxAmountCur));
            exciseTaxAggregrateTmp.TaxAggregrateReportingCategory = taxReportingAggregrateCategory.TaxAggregrateReportingCategory;
            exciseTaxAggregrateTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice taxes information.
    /// </summary>
    private void insertTaxDetails()
    {
        TaxTrans_IN         taxTrans;
        TaxWithholdTrans_IN taxWithholdTrans;
        FormulaDesigner_IN  formulaDesigner;

        insert_recordset exciseInvoiceTaxTransTmp (SalesTaxCode, SalesTaxAmtCur)
        select TaxCode from formulaDesigner
            order by formulaDesigner.ID
            group by formulaDesigner.TaxCode, formulaDesigner.ID
            join sum(SourceTaxAmountCur) from taxtrans
                where taxtrans.Voucher == custInvoiceJour.LedgerVoucher &&
                    taxtrans.TransDate == custInvoiceJour.InvoiceDate &&
                        taxtrans.SourceTableId == tableNum(SalesLine) &&
                            taxtrans.TaxCode == formulaDesigner.TaxCode &&
                                taxtrans.TaxItemGroup == formulaDesigner.TaxItemGroup;

        insert_recordset exciseInvoiceTaxTransTmp (SalesTaxAmtCur, SalesTaxCode)
        select sum(TaxWithholdAmountCur), TaxWithholdCode from taxWithholdTrans
            group by TaxWithholdCode
            where taxWithholdTrans.Voucher == custInvoiceJour.LedgerVoucher &&
                taxWithholdTrans.TransDate == custInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTransporterDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the transporter detail information.
    /// </summary>
    private void insertTransporterDetails()
    {
        InventSiteGateEntry_IN      inventSiteGateEntry;
        InventSiteGateEntryLine_IN  inventSiteGateEntryLine;
        CustPackingSlipTrans        custPackingSlipTrans;
        CustPackingSlipTrans_IN     custPackingSlipTransLoc;
        DlvMode                     dlvMode;
        InventTrans                 inventTrans;
        InventTransOrigin           inventTransOrigin;

        insert_recordset taxInvoiceTransporterDetailsTmp (PackingSlipId, InventSiteGateEntry, DateTimeOfRemoval,
                                                             TransportationReceiptDate, TransportationReceiptNumber,
                                                              VehicleNumber, TransporterName)
        select PackingSlipId from inventTrans
            where inventTrans.Voucher == custInvoiceJour.LedgerVoucher
        join inventTransOrigin
         where inventTransOrigin.RecId == inventTrans.InventTransOrigin
        join custPackingSlipTrans
            where custPackingSlipTrans.InventTransId == inventTransOrigin.InventTransId &&
                custPackingSlipTrans.PackingSlipId == inventTrans.PackingSlipId
        join custPackingSlipTransLoc
            where custPackingSlipTransLoc.CustPackingSlipTrans == custPackingSlipTrans.RecId
        join InventSiteGateEntry from inventSiteGateEntryLine
            where inventSiteGateEntryLine.RecId == custPackingSlipTransLoc.InventSiteGateEntryLine
        join ExitDateAndTime, TransportationReceiptDate, TransportationReceiptNumber, VehicleNumber, TransportationDriverName from inventSiteGateEntry
            group by inventSiteGateEntryLine.InventSiteGateEntry, inventTrans.PackingSlipId, inventSiteGateEntry.ExitDateAndTime,
                inventSiteGateEntry.TransportationReceiptDate,inventSiteGateEntry.TransportationReceiptNumber,
                inventSiteGateEntry.VehicleNumber, inventSiteGateEntry.TransportationDriverName
            where inventSiteGateEntry.RecId == inventSiteGateEntryLine.InventSiteGateEntry;

        update_recordSet taxInvoiceTransporterDetailsTmp
        setting ModeOfTransport = dlvMode.Txt
        join Txt from dlvMode
            where dlvMode.Code == custInvoiceJour.DlvMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        this.createData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceAmountCurInWords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the header invoice amount value.
    /// </summary>
    /// <param name="_headerFooterTmp">
    /// A <c>ExciseInvoiceSalesHeaderFooterTmp_IN</c> record that contains header data.
    /// </param>
    private void updateInvoiceAmountCurInWords(ExciseInvoiceSalesHeaderFooterTmp_IN _headerFooterTmp)
    {
        select sum(SalesLineAmtCur) from exciseSalesInvoiceTmp;
        totalLineAmountCur = exciseSalesInvoiceTmp.SalesLineAmtCur;

        select sum(SalesTaxAmtCur) from exciseInvoiceTaxTransTmp;
        totalTaxAmountCur = abs(exciseInvoiceTaxTransTmp.SalesTaxAmtCur);

        select sum(ChargesAmountCur) from exciseInvoiceChargesTmp;
        totalChargesAmtCur = abs(exciseInvoiceChargesTmp.ChargesAmountCur);

        ttsBegin;

        select forUpdate InvoiceAmtCurInWords from _headerFooterTmp;
        _headerFooterTmp.InvoiceAmtCurInWords = Global::numeralsToTxt(totalLineAmountCur + totalTaxAmountCur + totalChargesAmtCur - custInvoiceJour.EndDisc);
        _headerFooterTmp.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceTaxDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the invoice taxes information.
    /// </summary>
    /// <param name="_exciseSalesInvoiceTmp">
    /// A <c>ExciseSalesInvoiceTmp_IN</c> record that contains invoice data.
    /// </param>
    private void updateInvoiceTaxDetails(ExciseSalesInvoiceTmp_IN _exciseSalesInvoiceTmp)
    {
        TaxAmountCurView_IN taxAmountCurView;
        WithholdTaxAmountCurView_IN withholdTaxAmountCurView;
        ttsBegin;

        while select forupdate _exciseSalesInvoiceTmp
        join SourceTaxAmountCur from taxAmountCurView
            where taxAmountCurView.TransRecId == _exciseSalesInvoiceTmp.CustinvoicetransRecid &&
                taxAmountCurView.TaxType == TaxType_IN::Excise
        {
            _exciseSalesInvoiceTmp.CentralExciseDutyAmtCur = abs(taxAmountCurView.SourceTaxAmountCur);
            _exciseSalesInvoiceTmp.SourceExciseBaseAmountCur = abs(taxAmountCurView.getExciseSourceBaseAmountCur(_exciseSalesInvoiceTmp.CustInvoiceTransRecId, tableNum(CustInvoiceTrans)));
            _exciseSalesInvoiceTmp.update();
        }

        while select forupdate _exciseSalesInvoiceTmp
        join SourceTaxAmountCur from taxAmountCurView
            where taxAmountCurView.TransRecId == _exciseSalesInvoiceTmp.CustinvoicetransRecid &&
                taxAmountCurView.TaxType == TaxType_IN::VAT
        {
            _exciseSalesInvoiceTmp.VATAmountCur = abs(taxAmountCurView.SourceTaxAmountCur);
            _exciseSalesInvoiceTmp.SourceVATBaseAmountCur = abs(taxAmountCurView.getVATSourceBaseAmountCur(_exciseSalesInvoiceTmp.CustInvoiceTransRecId, tableNum(CustInvoiceTrans)));
            _exciseSalesInvoiceTmp.update();
        }

        while select forupdate _exciseSalesInvoiceTmp
        join TaxWithholdAmountCur from withholdTaxAmountCurView
            where withholdTaxAmountCurView.CustInvoiceTrans == _exciseSalesInvoiceTmp.CustinvoicetransRecid &&
                withholdTaxAmountCurView.TaxType == TaxWithholdCodeType_IN::TCS
        {
            _exciseSalesInvoiceTmp.TaxWithholdAmountCur = abs(withholdTaxAmountCurView.TaxWithholdAmountCur);
            _exciseSalesInvoiceTmp.TaxWithholdBaseAmountCur = abs(withholdTaxAmountCurView.getSourceBaseAmountCur(_exciseSalesInvoiceTmp.CustInvoiceTransRecId));
            _exciseSalesInvoiceTmp.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxInformationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the header taxes information.
    /// </summary>
    /// <param name="_taxInformation">
    /// A <c>TaxInformation_IN</c> record that contains tax information data.
    /// </param>
    /// <param name="_exciseInvoiceSalesHeaderFooterTmp">
    /// A <c>ExciseInvoiceSalesHeaderFooterTmp_IN</c> record that contains header data.
    /// </param>
    private void updateTaxInformationDetails(TaxInformation_IN _taxInformation, ExciseInvoiceSalesHeaderFooterTmp_IN _exciseInvoiceSalesHeaderFooterTmp)
    {
        _exciseInvoiceSalesHeaderFooterTmp.ECCNumber = TaxRegistrationNumbers_IN::find(_taxInformation.ManECCRegistrationNumberTable).RegistrationNumber;
        _exciseInvoiceSalesHeaderFooterTmp.Division = _taxInformation.Division;
        _exciseInvoiceSalesHeaderFooterTmp.Range = _taxInformation.Range;
        _exciseInvoiceSalesHeaderFooterTmp.Commissionarate = _taxInformation.Commissionarate;
        _exciseInvoiceSalesHeaderFooterTmp.TINNumber = TaxRegistrationNumbers_IN::find(_taxInformation.TIN).RegistrationNumber;
        _exciseInvoiceSalesHeaderFooterTmp.CSTNumber = TaxRegistrationNumbers_IN::find(_taxInformation.SalesTaxRegistrationNumber).RegistrationNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>