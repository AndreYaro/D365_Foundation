<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxValidateForTaxIntegration_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxValidateForTaxIntegration_CN</c> class is used to validate tax for tax integration.
/// </summary>
abstract class TaxValidateForTaxIntegration_CN
{
    Common                      common;
    TaxProfileTable_CN          taxProfileTable;
    TaxProfileId_CN             taxProfileId;

    TaxCode                     taxCode;
    Counter                     numOfLines;
    Integer                     numOfTaxCode;
    boolean                     sameTaxCode;
    boolean                     moreProfile;
    boolean                     priceIsIncludeTax;

    AmountCur                   invoiceAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existCustBankAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the cust bank account name exit.
    /// </summary>
    /// <returns>
    /// Returns true if the cust bank account name exist.
    /// </returns>
    protected boolean existCustBankAccountName()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustBankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the cust bank account number exist.
    /// </summary>
    /// <returns>
    /// Returns true if the cust bank account number exist.
    /// </returns>
    protected boolean existCustBankAccountNum()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTaxRegistrationNumberFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tax registration number from cust exist.
    /// </summary>
    /// <param name="_companyInfoExtension">
    /// The company info extension.
    /// </param>
    /// <returns>
    /// Returns true if the tax registration number from cust exist.
    /// </returns>
    protected boolean existTaxRegistrationNumberFromCust(CompanyInfoExtension_CN  _companyInfoExtension)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVATInvoiceDescTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the VAT invoice desc table exist.
    /// </summary>
    /// <returns>
    /// Returns true if the VAT invoice desc table exist.
    /// </returns>
    protected boolean existVATInvoiceDescTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmountAndNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice amount and number of lines.
    /// </summary>
    Protected void getInvoiceAmountAndNumOfLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets init value for this class.
    /// </summary>
    /// <remarks>
    /// This is for China CGTS functionality.
    /// This method must be called when an instance is created.
    /// </remarks>
    protected void initValueDefault()
    {
        numOfLines    = 0;
        sameTaxCode   = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logMessageForMoreProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs message for more profile.
    /// </summary>
    protected void logMessageForMoreProfile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>TaxValidateForIntegration_CN</c> class.
    /// </summary>
    /// <param name="_common">
    /// The instance of the <c>Common</c> class.
    /// </param>
    /// <param name="_taxProfileTable">
    /// The instance of the <c>TaxProfileTable_CN</c> class.
    /// </param>
    protected void new(Common  _common, TaxProfileTable_CN _taxProfileTable)
    {
        common = _common;
        taxProfileTable = _taxProfileTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    abstract protected CurrencyCode parmCurrencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustBankAccountId</Name>
				<Source><![CDATA[
    abstract protected CustBankAccountId parmCustBankAccountId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
    abstract protected CustInvoiceAccount parmInvoiceAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    abstract protected InvoiceId parmInvoiceId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    abstract protected SalesId parmSalesId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxprofileTable</Name>
				<Source><![CDATA[
    public TaxProfileTable_CN parmTaxprofileTable(TaxProfileTable_CN _taxprofileTable = taxProfileTable)
    {
        taxProfileTable = _taxprofileTable;
        return taxProfileTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the sales invoice has sales tax code that linked with tax integration profile. if there is then will proceed to validation.
    /// </summary>
    /// <param name="_batchTaxProfileExisted">
    /// If need to check TaxProfileTable exists or not from batch.
    /// </param>
    /// <returns>
    /// Returns false if there is an error on the validation.
    /// </returns>
    /// <remarks>
    /// This is for China CGTS functionality.
    /// </remarks>
    public boolean validate(boolean _batchTaxProfileExisted = false)
    {
        boolean             ret = true;
        boolean             isTaxProfileExisted = false;

        ret = this.validateTaxCode();

        taxProfileTable = TaxProfileTable_CN::findByProfileId(taxProfileId);

        if (sameTaxCode && taxProfileTable)
        {
            isTaxProfileExisted = true;

            // the currency code must be same with company currency. when export invoice to file.
            ret = ret && this.ValidateCurrencyCode();

            this.getInvoiceAmountAndNumOfLines();

            ret = ret
                && this.validateTaxProfile();
        }

        // Batch should check the taxProfile Existed or not
        if (_batchTaxProfileExisted
            && !isTaxProfileExisted)
        {
            // Export is canceled due to the tax profile cannot be found for the tax code 1%
            ret = checkFailed(strfmt("@GLS221098" ,taxCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the bank account information.
    /// </summary>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    protected boolean validateBankAccount()
    {
        boolean ret = true;

        if (!common)
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// The currency code must be same with company currency. when export invoice to file.
    /// </summary>
    /// <returns>
    /// Returns false if there is an error on the validation.
    /// </returns>
    protected boolean validateCurrencyCode()
    {
        CurrencyCode        currencyCodeCompany;
        CurrencyCode        currencyCodeLocalTrans;
        boolean             ret = true;

        currencyCodeCompany = Ledger::accountingCurrency();
        currencyCodeLocalTrans = this.parmCurrencyCode();

        if (currencyCodeLocalTrans != currencyCodeCompany)
        {
            ret = checkFailed(strFmt("@GLS223911", currencyCodeLocalTrans, currencyCodeCompany));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMaxInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the variable netAmount value against the value set on tax integration profile.
    /// </summary>
    /// <returns>
    /// Returns false if fulfill the IF statement.
    /// </returns>
    /// <remarks>
    /// This is for China CGTS functionality.
    /// </remarks>
    protected boolean validateMaxInvoiceAmount()
    {
        return (taxProfileTable.MaxInvoiceAmount >= invoiceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMaxInvoiceLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the variable numOfLines value against the value set on tax integration profile.
    /// </summary>
    /// <returns>
    /// Returns false if fulfill the IF statement.
    /// </returns>
    /// <remarks>
    /// This is for China CGTS functionality.
    /// </remarks>
    protected boolean validateMaxInvoiceLines()
    {
        return (taxProfileTable.MaxInvoiceLines >= numOfLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates tax code set according to parameters.
    /// </summary>
    /// <param name="_taxGroup">
    /// tax group
    /// </param>
    /// <param name="_taxItemGroup">
    /// tax item group
    /// </param>
    protected void validatePostTaxCode(
        TaxGroup                    _taxGroup,
        TaxItemGroup                _taxItemGroup)
    {
        TaxGroupData        localTaxGroupData;
        TaxOnItem           localTaxOnItem;
        TaxProfileTable_CN  localtaxProfileTable;
        Integer             num = 0;
        boolean             isEmptyProfile = false;

        if (sameTaxCode)
        {
            while select TaxCode
                from localTaxGroupData
                where localTaxGroupData.TaxGroup      ==  _taxGroup
                    join TaxItemGroup, TaxCode from localTaxOnItem
                    where localTaxOnItem.TaxItemGroup == _taxItemGroup
                        && localTaxOnItem.TaxCode    == localTaxGroupData.TaxCode
                        join ProfileId , TaxCode from localtaxProfileTable
                        where localtaxProfileTable.TaxCode == localTaxOnItem.TaxCode
            {
                if (numOfTaxCode == 1
                    && !taxProfileId)
                {
                    taxProfileId = localtaxProfileTable.ProfileId;
                    taxCode = localtaxProfileTable.TaxCode;
                }
                else if (taxProfileId != localtaxProfileTable.ProfileId)
                {
                    if (num > 0)
                    {
                        moreProfile =  true;
                    }
                    sameTaxCode = false;
                }
                num++;
            }

            if (num == 0)
            {
                isEmptyProfile = true;
            }

            if (isEmptyProfile
                && taxProfileId)
            {
                sameTaxCode = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validation the tax code for all invoice lines
    /// </summary>
    /// <returns>
    /// Returns false if there is an error on the validation.
    /// </returns>
    protected boolean validateTaxCode()
    {
        boolean             ret = true;

        if (!sameTaxCode)
        {
            if (moreProfile)
            {
                ret = false;
                this.logMessageForMoreProfile();
            }

            if (numOfTaxCode > 1)
            {
                // The tax rate must be the same for all invoice lines.
                ret = checkFailed("@GLS60741");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validation based on tax integration profile setup.
    /// </summary>
    /// <returns>
    /// Returns false if there is an error on the validation.
    /// </returns>
    /// <remarks>
    /// This is for China CGTS functionality.
    /// </remarks>
    protected boolean validateTaxProfile()
    {
        boolean                     ret = true;
        CompanyInfoExtension_CN     companyInfoExtension;
        SalesId                     salesId = this.parmSalesId();
        InvoiceId                   invoiceId = this.parmInvoiceId();
        CustInvoiceAccount          invoiceAccount = this.parmInvoiceAccount();
        CustBankAccountId           custBankAccountId = this.parmCustBankAccountId();

        if (!this.validateMaxInvoiceAmount())
        {
            // The net amount of invoice %1 is greater than the maximum amount %2 set in Tax Integration Profile %3, please correct it before posting.
            ret = checkFailed(strfmt("@GLS60742", salesId ? salesId : invoiceId, taxProfileTable.MaxInvoiceAmount, taxProfileTable.ProfileId));
        }

        if (!this.validateMaxInvoiceLines()
            && common
            && !this.existVATInvoiceDescTable())
        {
            // The total lines of invoice %1 is greater than the maximum lines %2 set in Tax Integration Profile %3, please correct it before posting.
            ret = checkFailed(strfmt("@GLS60743", salesId ? salesId : invoiceId, taxProfileTable.MaxInvoiceLines, taxProfileTable.ProfileId));
        }

        if (this.validateMaxInvoiceLines()
            && common
            && this.existVATInvoiceDescTable())
        {
            // The total lines of invoice %1 is less than the maximum lines %2 set in Tax Integration Profile %3, need not set the VATInvoiceDesc.
            ret = checkFailed(strfmt("@GLS221150", salesId ? salesId : invoiceId, taxProfileTable.MaxInvoiceLines, taxProfileTable.ProfileId));
        }

        // Validate registration type
        companyInfoExtension = CompanyInfoExtension_CN::findByCompany(CompanyInfo::current());
        if (!companyInfoExtension.RecId || !companyInfoExtension.TaxRegistrationType)
        {
            // Please specify a Tax registration type for VAT in the legal entity form.
            ret = checkFailed(strfmt("@GLS221803"));
        }
        else
        {
            // Validate VATRegistrationNum
            if (!this.existTaxRegistrationNumberFromCust(companyInfoExtension))
            {
                // Please specify the tax registration number for the type %1 for customer %2.
                ret = checkFailed(strfmt("@GLS221804", TaxRegistrationType::find(companyInfoExtension.TaxRegistrationType).TaxRegstrationType, InvoiceAccount));
            }
        }
        // Validate Bank Information
        if (!this.validateBankAccount())
        {
            // Bank account must be entered in invoice %1
            ret = checkFailed(strfmt("@GLS60745", salesId));
        }
        else
        {
            if (!this.existCustBankAccountName())
            {
                // Bank account name must be filled in customer %1 bank accounts %2 table.
                ret = checkFailed(strfmt("@GLS60747", invoiceAccount, custBankAccountId));
            }
            if (!this.existCustBankAccountNum())
            {
                // Bank account number must be filled in customer %1 bank accounts %2 table.
                ret = checkFailed(strfmt("@GLS60746", invoiceAccount, custBankAccountId));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of TaxExportServiceTaxIntegration or child class.
    /// </summary>
    /// <param name="_common">
    /// Table CustInvoiceJour, CustInvoiceTable, SalesParmTable.
    /// </param>
    /// <param name="_taxProfileTable">
    /// Table TaxProfileTable_CN.
    /// </param>
    /// <returns>
    /// A instance of TaxExportServiceTaxIntegration.
    /// </returns>
    public static TaxValidateForTaxIntegration_CN construct(
        Common  _common,
        TaxProfileTable_CN _taxProfileTable = Null)
    {
        TaxValidateForTaxIntegration_CN    taxValidateForTaxIntegration;
        switch (_common.TableId)
        {
            case tablenum(SalesParmTable):
                taxValidateForTaxIntegration = TaxValidateForSalesOrder_CN::newSalesParmTable(_common, _taxProfileTable);
                break;
            case tableNum(CustInvoiceTable):
                taxValidateForTaxIntegration = TaxValidateForFreeTextInvoices_CN::newCustInvoiceTable(_common, _taxProfileTable);
                break;
            case tableNum(CustInvoiceJour):
                taxValidateForTaxIntegration = TaxValidateForExportJournal_CN::newCustInvoiceJour(_common, _taxProfileTable);
                break;
            case tableNum(ProjInvoiceJour):
                taxValidateForTaxIntegration = TaxValidateForProjectInvoice_CN::newProjectInvoice(_common, _taxProfileTable);
                break;
            case tableNum(ProjProposalJour):
                taxValidateForTaxIntegration = TaxValidateForProjectProposal_CN::newProjectProposal(_common, _taxProfileTable);
                break;
            default :
                throw error(strfmt("@SYS19306",funcname()));
        }

        return taxValidateForTaxIntegration;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>