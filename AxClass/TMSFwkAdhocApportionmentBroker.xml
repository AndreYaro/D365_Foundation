<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkAdhocApportionmentBroker</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Utility;

/// <summary>
/// The <c>TMSFwkAdhocApportionmentBroker</c> class apportions ad-hoc charges.
/// </summary>
public class TMSFwkAdhocApportionmentBroker implements TMSFwkIBroker
{
    private TMSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apportions ad-hoc charges for a transaction.
    /// </summary>
    /// <param name = "_transactionFacade">Payload for the transaction.</param>
    public void execute(TmsTransactionFacade _transactionFacade)
    {
        System.Exception ex;

        try
        {
            using (var activityContext = this.instrumentationLogger().brokerActivities().calculateAdhocApportionment(TMSCommunicationType::AdhocApportionment))
            {
                TMSFwkAdhocApportionmentEngine::process(_transactionFacade);
            }
        }
        catch (ex)
        {
            _transactionFacade.parmRequest().AddError(
                StringHelpers::FormatError(TMSFwkErrorDtoBuilderGeneral::buildTechnicalError(), ex.ToString()));
            TMSException::ThrowException("@TRX2578", ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private TMSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = TMSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>