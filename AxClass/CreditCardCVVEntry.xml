<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardCVVEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CreditCardCVVEntry extends RunBase
{
    DialogRunbase dialog;
    DialogField dialogCVV;

    CreditCardCVV cvv;
    SalesTable salesTable;
    CreditCardAccountSetup creditCardAccountSetup;
    CreditCardNumber creditCardNumber;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        cvv,
        salesTable,
        creditCardAccountSetup,
        creditCardNumber
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }
]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
/// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialog.caption("@SYS327068");
        dialog.addGroup(strFmt("@SYP4861413", this.parmCreditCardNumber(creditCardNumber)));
        dialogCVV = dialog.addField(extendedTypeStr(CreditCardCVV));

        return dialog;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getCVV</Name>
				<Source><![CDATA[
    public CreditCardCVV getCVV()
    {
        return cvv;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ok = super();

        cvv = dialogCVV.value();

        return ok;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <see cref="M:RunBase.unpack" /> method returns false, the <see
    ///    cref="M:RunBase.initParmDefault" /> method will be called. Normally, this method should not be
    ///    overridden.
    /// </remarks>
    public void getLast()
    {
        return;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CreditCardAccountSetup _creditCardAccountSetup)
    {
        super();

        creditCardAccountSetup = _creditCardAccountSetup;
    }
]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmCreditCardNumber</Name>
				<Source><![CDATA[
    public CreditCardNumber parmCreditCardNumber(CreditCardNumber _creditCardNumber = creditCardNumber)
    {
        creditCardNumber = _creditCardNumber;
        return creditCardNumber;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public void parmSalesTable(SalesTable _salesTable)
    {
        salesTable = _salesTable;
    }
]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <c>RunBase.pack</c> method.
    /// </summary>
    /// <remarks>
    ///    This method should not be overridden.
    /// </remarks>
    public void saveLast()
    {
        return;
    }
]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
public boolean unpack(container _packedClass)
    {
        #define.Mask("xxxx")

        #localmacro.Version1List
            cvv,
            salesTable,
            creditCardAccountSetup
        #endmacro

        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            case 1:
                // Version 1 does not have the creditCardNumber field. Use the 'xxxx' mask.
                [version, #Version1List] = _packedClass;
                creditCardNumber = #Mask;
                break;

            default:
                return false;
        }

        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (!super(_calledFrom))
        {
            return false;
        }

        cvv = strLTrim(strRTrim(cvv));

        // CVV is blank and blank is not allowed
        if (cvv == "" && creditCardAccountSetup.CardVerificationCheckAllowBlank == NoYes::No)
        {
            checkFailed("@SYS327110");
            return false;
        }

        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>