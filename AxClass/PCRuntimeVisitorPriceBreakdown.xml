<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeVisitorPriceBreakdown</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System;
using System.IO;
using Microsoft.Dynamics.AX.Framework.Services.Platform.FileManagement;

/// <summary>
/// Visitor class responsible for creating excel price breakdown.
/// </summary>
class PCRuntimeVisitorPriceBreakdown extends PCRuntimeVisitor
{
    private static readonly int decimalPrecision = new SysDictType(extendedTypeNum(Price)).effectivePrecision();

    PCRuntimePriceModel runtimePriceModel;
    PCRuntimeComponent  currentRuntimeComponent;
    PCDocumentHandlingExcel documentHandlingExcel;
    PCExcel             pcExcel;

    int level;
    CurrencyCode code;

    int                 cellSum;
    str                 componentLineStyle;
    int                 componentLineStyleIndex;
    boolean             mustUseLineColorStyle;

    ItemId                      itemID;
    EcoResProductName           productName;

    Common                      sourceDocumentLine;

    str                         orderReference;
    DirPartyName                partyReference;
    str                         partyName;

    int                         cellSumCount;
    int                         cellAttributeCount;
    int                         cellPricePercentageCount;
    int                         cellAttributePercentageCount;
    real                        priceTotal;

    #define.ConfigurationReference(6)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the header of the price break down.
    /// </summary>
    protected void buildHeader()
    {
        cellSumCount                    = runtimePriceModel.parmMaxLevel() + 5;
        cellAttributeCount              = runtimePriceModel.parmMaxLevel() + 7;
        cellPricePercentageCount        = runtimePriceModel.parmMaxLevel() + 9;
        cellAttributePercentageCount    = runtimePriceModel.parmMaxLevel() + 11;

        pcExcel.addCellValue(1, 1, "@SYS4001904");

        pcExcel.addBoldCellValue(3, 5, strFmt("%1 %2", itemID, productName));

        if (orderReference)
        {
            pcExcel.addCellValue(5, 1, strFmt("@SYS4001905", orderReference, partyReference, partyName));
        }

        // The 6th row is reserved for the Configuration value, which is updated as a part of the order line runtime configuration. See <c>PCRuntimePriceBreakdownUpdater</c> class.
        pcExcel.addCellValue(7, 1, strFmt("@SYS4001906", DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone())));
        pcExcel.addCellValue(7, 10, "@SYS4001907");
        
        str totalPriceStr = PCExcel::strFmtFixedDecimals(priceTotal, decimalPrecision);
        pcExcel.addCellValue(7, 12, totalPriceStr);
        pcExcel.addCellValue(7, 13, this.parmCode());

        pcExcel.addBoldCellValue(9, cellSumCount, "@SYS4001898");
        pcExcel.addBoldCellValue(9, cellAttributeCount, "@SYS4001899");
        pcExcel.addBoldCellValue(9, cellPricePercentageCount, "@SYS4001900");
        pcExcel.addBoldCellValue(9, cellAttributePercentageCount, "@SYS4001900");

        // Add first line with product name, total price & percentage 100.00
        pcExcel.addBoldCellValue(10, 1, productName);

        pcExcel.addCellValue(10, cellSumCount, totalPriceStr);
        pcExcel.addCellValue(10, cellPricePercentageCount, strFmt("%1", 100));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOrderAndPartyReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates an order and the party references base on the source document line.
    /// </summary>
    protected void calcOrderAndPartyReferences()
    {
        SalesLine                   salesLine;
        SalesQuotationLine          salesQuotationLine;
        DirPartyTable               partyTable;
        CustTable                   custTable;

        switch (sourceDocumentLine.TableId)
        {
            case tableNum(SalesLine)                :
                salesLine = SalesLine::findRecId(sourceDocumentLine.RecId, true);
                orderReference  = salesLine.SalesId;
                partyReference = salesLine.CustAccount;
                break;
            case tableNum(SalesQuotationLine)       :
                salesQuotationLine = SalesQuotationLine::findRecId(sourceDocumentLine.RecId, true);
                orderReference  = salesQuotationLine.QuotationId;
                partyReference = salesQuotationLine.CustAccount;

                if (!partyReference)
                {
                    partyReference  = salesQuotationLine.salesQuotationTable().BusRelAccount;
                    partyName       = smmBusRelTable::find(partyReference).name();
                }

                break;
        }

        if (partyReference && !partyName)
        {
            select firstonly Name from partyTable
                exists join custTable
                    where custTable.Party == partyTable.RecId
                    && custTable.AccountNum == partyReference;

            partyName = partyTable.Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize visitor.
    /// </summary>
    public void init()
    {
        changeCompany (sourceDocumentLine.dataAreaId)
        {
            this.calcOrderAndPartyReferences();
        }

        priceTotal = runtimePriceModel.getTotal(this.parmCode());

        pcExcel.init();

        this.buildHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        pcExcel = pcExcel::construct();
        documentHandlingExcel = PCDocumentHandlingExcel::createForPriceBreakdown();
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the sales price breakdown report in Excel
    /// and brings Excel to the foreground.
    /// </summary>
    public void open()
    {
        using(MemoryStream stream = pcExcel.getMemoryStream())
        {
            Dynamics.AX.Application.File::SendFileToUser(stream, "@SYS4001897" + '.xlsx');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCode(CurrencyCode _code = code)
    {
        code = _code;

        return code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPCExcel</Name>
				<Source><![CDATA[
    public PCExcel parmPCExcel(PCExcel _pcExell = pcExcel)
    {
        pcExcel = _pcExell;

        return pcExcel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductName</Name>
				<Source><![CDATA[
    public EcoResProductName parmProductName(EcoResProductName _productName = productName)
    {
        productName = _productName;

        return productName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntimePriceModel</Name>
				<Source><![CDATA[
    public PCRuntimePriceModel parmRuntimePriceModel(PCRuntimePriceModel _runtimePriceModel = runtimePriceModel)
    {
        runtimePriceModel = _runtimePriceModel;

        return runtimePriceModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLine</Name>
				<Source><![CDATA[
    public Common parmSourceDocumentLine(Common _sourceDocumentLine = sourceDocumentLine)
    {
        sourceDocumentLine = _sourceDocumentLine;

        return sourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePercentageCell</Name>
				<Source><![CDATA[
    /// <summary>
    /// Places in a cell the fraction in % that a price is of the total
    /// </summary>
    /// <param name="_nodePrice">
    /// The price
    /// </param>
    /// <param name="_cellPricePercentageCount">
    /// The column of the cell
    /// </param>
    protected void populatePercentageCell(real _nodePrice, int _cellPricePercentageCount)
    {
        real pricePct;

        if (priceTotal && _nodePrice)
        {
            pricePct = roundUpDec((_nodePrice/priceTotal) * 100, 2);
            pcExcel.populateCellValueReal(pricePct, _cellPricePercentageCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateValueAndPercentageCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Places in a row in two cells respectively the price and the % it is of the total
    /// </summary>
    /// <param name="_nodePrice">
    /// The price to place
    /// </param>
    /// <param name="_cellValueCount">
    /// The column number of the cell in which to place the price
    /// </param>
    /// <param name="_cellPercentageCount">
    /// The column number of the cell in which to place the fraction in %
    /// </param>
    protected void populateValueAndPercentageCells(real _nodePrice, int _cellValueCount, int _cellPercentageCount)
    {
        pcExcel.populateCellValueRealWithFixedDecimals(_nodePrice, _cellValueCount, decimalPrecision);
        this.populatePercentageCell(_nodePrice, _cellPercentageCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the sales price breakdown.
    /// </summary>
    public void save()
    {
        str fileName = PCExcel::getTempFilePath(orderReference);
        using(MemoryStream stream = pcExcel.getMemoryStream())
        {
            ttsbegin;
            documentHandlingExcel.createOrUpdateDocument(sourceDocumentLine, fileName, stream);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends visiting a runtime element.
    /// </summary>
    /// <param name="_runtimeElement">
    /// A runtime element.
    /// </param>
    public void visitEnd(PCRuntimeInterface _runtimeElement)
    {
        if (_runtimeElement is PCRuntimeComponent)
        {
            this.visitEndComponent(_runtimeElement as PCRuntimeComponent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitEndComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends visiting a runtime component.
    /// </summary>
    /// <param name="_runtimeComponent">
    /// A runtime component.
    /// </param>
    protected void visitEndComponent(PCRuntimeComponent _runtimeComponent)
    {
        level--;
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts visiting a runtime element.
    /// </summary>
    /// <param name="_runtimeElement">
    /// A runtime element.
    /// </param>
    public void visitStart(PCRuntimeInterface _runtimeElement)
    {
        if (_runtimeElement is PCRuntimeModel)
        {
            this.visitStartModel(_runtimeElement as PCRuntimeModel);
        }
        else if (_runtimeElement is PCRuntimeComponent)
        {
            this.visitStartComponent(_runtimeElement as PCRuntimeComponent);
        }
        else if (_runtimeElement is PCRuntimePriceElement)
        {
            this.visitStartPriceElement(_runtimeElement as PCRuntimePriceElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStartComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts visiting a runtime component.
    /// </summary>
    /// <param name="_runtimeComponent">
    /// A runtime component.
    /// </param>
    protected void visitStartComponent(PCRuntimeComponent _runtimeComponent)
    {
        PCRuntimePriceModelNode runtimePriceModelNode = runtimePriceModel.getPriceModelNodeFromRuntime(_runtimeComponent);

        if (level)
        {
            pcExcel.newRow();
        }

        level++;

        pcExcel.addComponent(level, _runtimeComponent.parmDisplayName());

        if (level == 1)
        {
            // Root component value is shown without contributions from subcomponents
            this.populateValueAndPercentageCells(runtimePriceModelNode.parmValueWithoutSubcomponents(), cellSumCount, cellPricePercentageCount);
        }
        else
        {
            this.populateValueAndPercentageCells(runtimePriceModelNode.parmValue(), cellSumCount, cellPricePercentageCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStartModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts visiting a runtime model.
    /// </summary>
    /// <param name="_runtimeModel">
    /// A runtime model.
    /// </param>
    protected void visitStartModel(PCRuntimeModel _runtimeModel)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStartPriceElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits a runtime price element.
    /// </summary>
    /// <param name="_runtimePriceElement">
    /// A runtime price element.
    /// </param>
    protected void visitStartPriceElement(PCRuntimePriceElement _runtimePriceElement)
    {
        PCRuntimePriceModelNode runtimePriceModelNode = runtimePriceModel.getPriceModelNodeFromRuntime(_runtimePriceElement);

        if (runtimePriceModelNode.parmIsCalculated() == NoYes::No)
        {
            return;
        }

        // Only show element if there is a contribution
        if (runtimePriceModelNode.parmValue())
        {
            pcExcel.newRow();

            if (mustUseLineColorStyle)
            {
                pcExcel.useColorStyle();
            }

            pcExcel.addLeafNode(level + 1, _runtimePriceElement.parmName());

            this.populateValueAndPercentageCells(runtimePriceModelNode.parmValue(), cellAttributeCount, cellAttributePercentageCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCRuntimeVisitorPriceBreakdown construct()
    {
        return new PCRuntimeVisitorPriceBreakdown();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigurationReferenceRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a row number with the Configuration Reference data in the price breakdown report.
    /// </summary>
    /// <returns>
    /// A row number with the Configuration Reference
    /// </returns>
    public static int getConfigurationReferenceRow()
    {
        return #ConfigurationReference;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>