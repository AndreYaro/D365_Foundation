<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastAssignCost_LivePos</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmPositionForecastAssignCost_LivePos</c> class is used to create and apply budget cost elements to multiple
/// forecast positions from selected live positions.
/// </summary>
public class HcmPositionForecastAssignCost_LivePos extends HcmPositionForecastAssignCostElement
{
    HcmWorker                             hcmWorker;
    HcmBudgetPurposeTypeRecId             earningCostElementId;
    boolean                               createBudgetAccountLineFromEarning;
    boolean                               canAssignWorkerCompFromLivePosition;
    HRCCompRefPointId                     stepFromWorker;
    HcmCompensationLevelRecId             compensationLevelFromJob;
    HRMCompAnnualEquivalent               workerAnnualSalary;
    HcmPositionForecastCompensationGroup  compensationGroup;
    HRMCompPayFrequency                   workerPayFrequency;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignCompensationToPosForecastScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns compensation group and grid information to a position forecast scenario record.
    /// </summary>
    /// <remarks>
    /// Also applies related budget cost elements to the position forecast scenario taking into account level and step information.
    /// </remarks>
    protected void assignCompensationToPosForecastScenario()
    {
        HcmPositionForecastScenario positionForecastScenario;
        HcmPositionAssignCostElement_CompGrid hcmPositionForecastAssignCostElement;

        if (this.parmCompensationGroup().RecId != 0)
        {
            positionForecastScenario = HcmPositionForecastScenario::find(this.parmNewPositionForecastScenarioId(), true);

            if (positionForecastScenario.RecId != 0)
            {
                ttsbegin;
                positionForecastScenario.CompensationGroupId = this.parmCompensationGroup().CompensationGroupId;
                positionForecastScenario.CompensationGroupDataAreaId = this.parmCompensationGroup().DataAreaId;

                if (this.parmPositionForecastCompGrid() != 0)
                {
                    positionForecastScenario.PositionForecastCompensationGrid = this.parmPositionForecastCompGrid();
                }

                // Update the next increase date
                positionForecastScenario.setNextIncreaseDate();

                positionForecastScenario.write();
                ttscommit;
            }

            HcmPositionForecastFormUtility::assignDefaultCostElements(this.parmNewPositionForecastScenarioId(),
                                                                      this.parmCompensationGroup().RecId);

            if (this.parmPositionForecastCompGrid() != 0)
            {
                hcmPositionForecastAssignCostElement = HcmPositionForecastAssignCostElement::newAssignEarningCostFromCompGroup(this.parmNewPositionForecastScenarioId(),
                                                    this.parmCompensationGroup().RecId);

                hcmPositionForecastAssignCostElement.parmIsLevelStepExisted(true);
                hcmPositionForecastAssignCostElement.runForecastPositionCostAssignments();

                // Flag is to indicate: do not create line from worker salary.
                createBudgetAccountLineFromEarning = !hcmPositionForecastAssignCostElement.parmEarningCostAssigned();

                if (hcmPositionForecastAssignCostElement.parmEarningCostAssigned() == false)
                {
                    //
                    // The above flag indicates that during the process of assigning
                    // cost elements, validations were not completed successfully.
                    // Therefore level and step values cannot be assigned to the forecast position.
                    //
                    positionForecastScenario.PositionForecastCompensationGrid = 0;
                    positionForecastScenario.write();
                }
            }
            else
            {
                createBudgetAccountLineFromEarning = true;
            }
        }
        else
        {
            createBudgetAccountLineFromEarning = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForBudgetCostElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the table <c>HcmPositionForecastBudgetAccountLine</c> records to be added
    /// based on cost lines on the live position.
    /// </summary>
    /// <returns>
    /// The query for <c>HcmPositionForecastBudgetAcctLine</c> table to be added to forecast position.
    /// </returns>
    protected Query getQueryForBudgetCostElement()
    {
        Query budgetCostElementQuery;

        // if the flag is true, return query for earning otherwise return query to add from live.
        if (createBudgetAccountLineFromEarning)
        {
            budgetCostElementQuery = this.getQueryForEarningBudgetCostElement();
        }
        else
        {
            budgetCostElementQuery = this.getQueryForLivePositionBudgetCostElement();
        }

        return budgetCostElementQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForEarningBudgetCostElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the table <c>HcmPositionForecastBudgetAccountLine</c> records of earning type to add.
    /// </summary>
    /// <returns>
    /// Returns query for budget cost element from the live position.
    /// </returns>
    private Query getQueryForEarningBudgetCostElement()
    {
        Query query;
        QueryBuildDataSource qbdsBudgetPurposeTypeDetail;
        QueryBuildDataSource qbdspositionForecastBudgetAcctLine;

        query = new Query();
        qbdsBudgetPurposeTypeDetail = query.addDataSource(tableNum(HcmBudgetPurposeTypeDetail));

        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, BudgetPurposeType)).value(queryValue(this.parmEarningCostElementId()));

        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LegalEntity)).value(queryValue(this.parmCompanyId()));
        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, EffectiveDate)).value(this.formatValidDateRangeByScenario(fieldStr(HcmBudgetPurposeTypeDetail,  EffectiveDate),
                                                                                                                             fieldStr(HcmBudgetPurposeTypeDetail,  ExpirationDate)));
        qbdspositionForecastBudgetAcctLine = qbdsBudgetPurposeTypeDetail.addDataSource(tableNum(HcmPositionForecastBudgetAcctLine));

        qbdspositionForecastBudgetAcctLine.joinMode(JoinMode::NoExistsJoin);

        qbdspositionForecastBudgetAcctLine.relations(true);

        qbdspositionForecastBudgetAcctLine.addRange(fieldNum(HcmPositionForecastBudgetAcctLine, PositionForecastScenario)).value(queryValue(this.parmNewPositionForecastScenarioId()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForLivePositionBudgetCostElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the table <c>HcmPositionForecastBudgetAccountLine</c> records from live position to add.
    /// </summary>
    /// <returns>
    /// Returns query for budget cost element from the live position.
    /// </returns>
    private Query getQueryForLivePositionBudgetCostElement()
    {
        Query query;
        QueryBuildDataSource qbdsBudgetPurposeTypeDetail;
        QueryBuildDataSource qbdsLivePositionBudgetCost;
        QueryBuildDataSource qbdsPositionForecastBudgetAcctLine;

        query = new Query();

        query.validTimeStateAsOfDateTime(this.parmPositionAsOfDate());

        qbdsLivePositionBudgetCost = query.addDataSource(tableNum(HcmPositionBudgetAccountLine));
        qbdsLivePositionBudgetCost.addRange(fieldNum(HcmPositionBudgetAccountLine, Position)).value(queryValue(this.parmLivePositionId()));
        qbdsLivePositionBudgetCost.addRange(fieldNum(HcmPositionBudgetAccountLine, LegalEntity)).value(queryValue(this.parmCompanyId()));

        qbdsBudgetPurposeTypeDetail = qbdsLivePositionBudgetCost.addDataSource(tableNum(HcmBudgetPurposeTypeDetail));
        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LegalEntity)).value(queryValue(this.parmCompanyId()));
        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LedgerDimension)).value(SysQuery::valueNot(0));
        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, BudgetPurposeType)).value(SysQuery::valueNot(this.parmEarningCostElementId()));

        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, EffectiveDate)).value(this.formatValidDateRangeByScenario(fieldStr(HcmBudgetPurposeTypeDetail,  EffectiveDate),
                                                                                                                                    fieldStr(HcmBudgetPurposeTypeDetail,  ExpirationDate)));
        qbdsBudgetPurposeTypeDetail.addLink(fieldNum(HcmPositionBudgetAccountLine, BudgetPurposeType), fieldNum(HcmBudgetPurposeTypeDetail, BudgetPurposeType) );
        qbdsBudgetPurposeTypeDetail.joinMode(JoinMode::InnerJoin);

        qbdsPositionForecastBudgetAcctLine = qbdsBudgetPurposeTypeDetail.addDataSource(tableNum(HcmPositionForecastBudgetAcctLine));
        qbdsPositionForecastBudgetAcctLine.joinMode(JoinMode::NoExistsJoin);
        qbdsPositionForecastBudgetAcctLine.relations(true);
        qbdsPositionForecastBudgetAcctLine.addRange(fieldNum(HcmPositionForecastBudgetAcctLine, PositionForecastScenario)).value(queryValue(this.parmNewPositionForecastScenarioId()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerFixedCompensation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a record of the <c>HrmCompFixedEmpl</c> table which holds details of a worker's fixed compensation.
    /// </summary>
    /// <returns>
    /// A record of the <c>HrmCompFixedEmpl</c> table.
    /// </returns>
    public HRMCompFixedEmpl getWorkerFixedCompensation()
    {
        HRMCompFixedEmpl    hrmCompFixedEmpl;
        HRMCompPayFrequency hrmCompPayFrequency;

        select * from hrmCompFixedEmpl
            join AnnualConversionFactor from hrmCompPayFrequency
                where hrmCompFixedEmpl.PayFrequencyId == hrmCompPayFrequency.PayFrequencyId
                    && hrmCompFixedEmpl.Worker         == this.parmHcmWorker().RecId
                    && hrmCompFixedEmpl.Position       == this.parmLivePositionId()
                    && hrmCompFixedEmpl.ValidFrom      <= DateTimeUtil::date(this.parmPositionAsOfDate())
                    && hrmCompFixedEmpl.ValidTo        >= DateTimeUtil::date(this.parmPositionAsOfDate());

        // Calculate the worker's annual salary value.
        this.parmWorkerAnnualSalary(hrmCompFixedEmpl.PayRate * hrmCompPayFrequency.AnnualConversionFactor);

        return hrmCompFixedEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompensationFromLivePosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the step and worker salary from worker associated with a given live position.
    /// </summary>
    protected void initCompensationFromLivePosition()
    {
        HRMCompFixedEmpl    hrmCompFixedEmpl;

        // Retrieve the worker's fixed compensation details.
        hrmCompFixedEmpl = this.getWorkerFixedCompensation();

        if (this.parmCanAssignWorkerCompFromLivePosition() && hrmCompFixedEmpl.RecId != 0)
        {
            this.parmStepFromWorker(hrmCompFixedEmpl.RefPointId);
            this.parmCompensationGroup(HcmPositionForecastCompensationGroup::getCompGroupFromFixedCompensationPlan(hrmCompFixedEmpl.PlanId));

            if (this.parmCompensationGroup().RecId != 0)
            {
                this.parmCompensationLevelFromJob(hrmCompFixedEmpl.CompensationLevel);

                if (this.parmCompensationLevelFromJob() !=  0)
                {
                    this.parmPositionForecastCompGrid(HcmPositionForecastCompensationGrid::getPosForecastCompGridByPosFctScenario(this.parmCompensationGroup().RecId,
                                                        this.parmNewPositionForecastScenarioId(),
                                                        this.parmCompensationLevelFromJob(),
                                                        this.parmStepFromWorker()).RecId);

                    if (this.parmPositionForecastCompGrid() == 0)
                    {
                        warning("@Budget:PositionForecastCouldNotFindCompGrid");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanAssignWorkerCompFromLivePosition</Name>
				<Source><![CDATA[
    public boolean parmCanAssignWorkerCompFromLivePosition(boolean _canAssignWorkerCompFromLivePosition = canAssignWorkerCompFromLivePosition)
    {
        canAssignWorkerCompFromLivePosition = _canAssignWorkerCompFromLivePosition;

        return canAssignWorkerCompFromLivePosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompensationGroup</Name>
				<Source><![CDATA[
    public HcmPositionForecastCompensationGroup parmCompensationGroup(HcmPositionForecastCompensationGroup _compensationGroup = compensationGroup)
    {
        compensationGroup = _compensationGroup;

        return compensationGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompensationLevelFromJob</Name>
				<Source><![CDATA[
    public HcmCompensationLevelRecId parmCompensationLevelFromJob(HcmCompensationLevelRecId _compensationLevelFromJob = compensationLevelFromJob)
    {
        compensationLevelFromJob = _compensationLevelFromJob;

        return compensationLevelFromJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEarningCostElementId</Name>
				<Source><![CDATA[
    public HcmBudgetPurposeTypeRecId parmEarningCostElementId(HcmBudgetPurposeTypeRecId _earningCostElementId = earningCostElementId)
    {
        earningCostElementId = _earningCostElementId;
        return earningCostElementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHcmWorker</Name>
				<Source><![CDATA[
    public HcmWorker parmHcmWorker(HcmWorker _hcmWorker = hcmWorker)
    {
        hcmWorker = _hcmWorker;
        return hcmWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLivePositionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the record ID of the live position in the <c>HcmPosition</c> table.
    /// </summary>
    /// <param name="_livePositionId">
    /// The record ID of the position in the <c>HcmPosition</c> table.
    /// </param>
    /// <returns>
    /// The record ID of the position in the <c>HcmPosition</c> table.
    /// </returns>
    public HcmPositionRecId parmLivePositionId(HcmPositionRecId _livePositionId = livePositionId)
    {
        livePositionId = _livePositionId;
        return livePositionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStepFromWorker</Name>
				<Source><![CDATA[
    public HRCCompRefPointId parmStepFromWorker(HRCCompRefPointId _stepFromFixedComp = stepFromWorker)
    {
        stepFromWorker = _stepFromFixedComp;

        return stepFromWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkerAnnualSalary</Name>
				<Source><![CDATA[
    public HRMCompAnnualEquivalent parmWorkerAnnualSalary(HRMCompAnnualEquivalent _workerAnnualSalary = workerAnnualSalary)
    {
        workerAnnualSalary = _workerAnnualSalary;

        return workerAnnualSalary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBudgetAccountLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes records of the <c>HcmPositionForecastBudgetAcctLine</c> table for worker salary.
    /// </summary>
    /// <param name="_positionForecastBudgetAcctLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </param>
    protected void processBudgetAccountLine(HcmPositionForecastBudgetAcctLine _positionForecastBudgetAcctLine)
    {
        if (createBudgetAccountLineFromEarning)
        {
            if (this.parmWorkerAnnualSalary() > 0)
            {
                _positionForecastBudgetAcctLine.AmountCur = this.parmWorkerAnnualSalary();

                // If there is a worker salary, lock the line from editing from processes.
                _positionForecastBudgetAcctLine.IsLineLockedForRecalculation = NoYes::Yes;
            }
        }

        ttsbegin;

        _positionForecastBudgetAcctLine.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPositionForecastCost</Name>
				<Source><![CDATA[
    public void processPositionForecastCost()
    {
        DataAreaId positionForecastLE = CompanyInfo::getDataArea(this.parmCompanyId());

        this.parmCanRunRecalcProcess(false);

        changecompany(positionForecastLE)
        {
            this.processCostElementQuery();

            this.parmCanRunRecalcProcess(true);

            this.initCompensationFromLivePosition();

            if (this.parmCanAssignWorkerCompFromLivePosition())
            {
                this.assignCompensationToPosForecastScenario();
            }
            else
            {
                createBudgetAccountLineFromEarning = true;
            }

            if (createBudgetAccountLineFromEarning)
            {
                this.processCostElementQuery();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>