<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimSHA3HashHexGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Remove SHA3 hash from InventDim as it is obsolete', false, 13\05\2024)]
internal final class InventDimSHA3HashHexGenerator
{
    #InventDimDevelop
    public str ConfigId;
    public str InventBatchId;
    public str InventColorId;
    public str InventGtdId_RU;
    public str InventLocationId;
    public str InventOwnerId_RU;
    public str InventProfileId_RU;
    public str InventSerialId;
    public str InventSiteId;
    public str InventSizeId;
    public str InventStatusId;
    public str InventStyleId;
    public str LicensePlateId;
    public str WMSlocationId;
    public str wMSPalletId;
    public str InventVersionId;
    public str InventDimension1;
    public str InventDimension2;
    public str InventDimension3;
    public str InventDimension4;
    public str InventDimension5;
    public str InventDimension6;
    public str InventDimension7;
    public str InventDimension8;
    public utcdatetime InventDimension9;
    public real InventDimension10;
    public str InventDimension11;
    public str InventDimension12;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    private str hashKey()
    {
        #InventDimDevelop
        str hashKey;

        void appendStr(str _value, str _key)
        {
            str trimmedValue = strRTrim(_value);
            if (trimmedValue)
            {
                hashKey += _key + ':' + trimmedValue + '~';
            }
        }

        /*
        Create a string that is unique for every combination of the dimensions.
        The field values must be trimmed for trailing spaces, as this method is invoked before insert() - where such trimming also occurs.
        */

        hashKey = strRTrim(this.ConfigId) + '~'
              + strRTrim(this.InventBatchId) + '~'
              + strRTrim(this.InventColorId) + '~'
              + strRTrim(this.InventGtdId_RU) + '~'
              + strRTrim(this.InventLocationId) + '~'
              + strRTrim(this.InventOwnerId_RU) + '~'
              + strRTrim(this.InventProfileId_RU) + '~'
              + strRTrim(this.InventSerialId) + '~'
              + strRTrim(this.InventSiteId) + '~'
              + strRTrim(this.InventSizeId) + '~'
              + strRTrim(this.InventStatusId) + '~'
              + strRTrim(this.InventStyleId) + '~'
              + strRTrim(this.LicensePlateId) + '~'
              + strRTrim(this.WMSlocationId) + '~';

        appendStr(this.wMSPalletId, 'WMSPalletId');
        appendStr(this.InventDimension1, 'InventDimension1');
        appendStr(this.InventDimension2, 'InventDimension2');
        appendStr(this.InventDimension3, 'InventDimension3');
        appendStr(this.InventDimension4, 'InventDimension4');
        appendStr(this.InventDimension5, 'InventDimension5');
        appendStr(this.InventDimension6, 'InventDimension6');
        appendStr(this.InventDimension7, 'InventDimension7');
        appendStr(this.InventDimension8, 'InventDimension8');
        
        if (this.InventDimension9)
        {
            str valueDimension9 = strLRTrim(DateTimeUtil::toFormattedStr(this.InventDimension9, 1, 2, 2, 2, 2, 4, 1, 1)); // E.g. "07.31.2017 19:36:35"
            if (valueDimension9)
            {
                hashKey += 'InventDimension9:' + valueDimension9 + '~';
            }
        }
        
        if (this.InventDimension10)
        {
            str valueDimension10 = strLRTrim(num2str(this.InventDimension10, 1, numOfDec(this.InventDimension10), 1, 2));  // E.g. "1,234.56"
            if (valueDimension10)
            {
                hashKey += 'InventDimension10:' + valueDimension10 + '~';
            }
        }
        
        /*
        Append to this string using this code pattern. This will ensure that existing InventDim records do not have to be rehashed.
        The class InventDimUniquenessEnabling can be used to rehash InventDim records.
        str value<FieldName> = strRTrim(this.<FieldName>);
        if (value<FieldName>)
        {
            hashKey += '<FieldName>:' + value<FieldName> + '~';
        }
        */

        appendStr(this.InventVersionId, 'InventVersionId');
        appendStr(this.InventDimension11, 'InventDimension11');
        appendStr(this.InventDimension12, 'InventDimension12');

        return strLwr(hashKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hash3Value</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimSHA3HashHex hash3Value()
    {
        str hashKey = this.hashKey();
        return InventDim::computeSHA3Hash(hashKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetFieldValue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void resetFieldValue()
    {
        #InventDimDevelop
        this.ConfigId           = '';
        this.InventBatchId      = '';
        this.InventColorId      = '';
        this.InventGtdId_RU     = '';
        this.InventLocationId   = '';
        this.InventOwnerId_RU   = '';
        this.InventProfileId_RU = '';
        this.InventSerialId     = '';
        this.InventSiteId       = '';
        this.InventSizeId       = '';
        this.InventStatusId     = '';
        this.InventStyleId      = '';
        this.LicensePlateId     = '';
        this.WMSlocationId      = '';
        this.wMSPalletId        = '';
        this.InventVersionId    = '';
        this.InventDimension1   = '';
        this.InventDimension2   = '';
        this.InventDimension3   = '';
        this.InventDimension4   = '';
        this.InventDimension5   = '';
        this.InventDimension6   = '';
        this.InventDimension7   = '';
        this.InventDimension8   = '';
        this.InventDimension9   = utcDateTimeNull();
        this.InventDimension10  = 0;
        this.InventDimension11  = '';
        this.InventDimension12  = '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>