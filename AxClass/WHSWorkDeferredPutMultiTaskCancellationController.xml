<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkDeferredPutMultiTaskCancellationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class acts as controller for the cancellation of deferred put processing tasks.
/// </summary>
internal class WHSWorkDeferredPutMultiTaskCancellationController extends SysOperationServiceController implements BatchRetryable
{
    private List workDeferredPutProcessingTaskList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWorkDeferredPutProcessingTaskList</Name>
				<Source><![CDATA[
    private List parmWorkDeferredPutProcessingTaskList(List _workDeferredPutProcessingTaskList = workDeferredPutProcessingTaskList)
    {
        workDeferredPutProcessingTaskList = _workDeferredPutProcessingTaskList;
        return workDeferredPutProcessingTaskList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        //the cancellation is not a long running process and we don't want to increase complexity by supporting batch
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTaskRecIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the class.
    /// </summary>
    /// <param name = "_listOfTasksRecIdsToCancel">A list containing the RecId's of the tasks that should be cancelled.</param>
    /// <returns>A new instance of the class.</returns>
    [Hookable(false)]
    internal static WHSWorkDeferredPutMultiTaskCancellationController newFromTaskRecIdList(List _listOfTasksRecIdsToCancel)
    {
        WHSWorkDeferredPutMultiTaskCancellationController controller = new WHSWorkDeferredPutMultiTaskCancellationController(classStr(WHSWorkDeferredPutMultiTaskCancellationController),
                                                                                                            methodStr(WHSWorkDeferredPutMultiTaskCancellationController, cancelTasks),
                                                                                                            SysOperationExecutionMode::Synchronous);
        controller.getDataContractObject().parmWorkDeferredPutProcessingTaskList(_listOfTasksRecIdsToCancel);
        controller.parmShowDialog(true);
        controller.parmDialogCaption("@WAX:WHSWorkDeferredPutProcessingTaskCancel");

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels tasks based on the contract.
    /// </summary>
    /// <param name = "_contract">The contract used for the cancellation.</param>
    [Hookable(false)]
    internal void cancelTasks(WHSWorkDeferredPutMultiTaskCancellationContract _contract)
    {
        if (_contract.parmWorkDeferredPutProcessingTaskList())
        {
            ListEnumerator ls = _contract.parmWorkDeferredPutProcessingTaskList().getEnumerator();
        
            while (ls.moveNext())
            {
                this.cancelTask(_contract, ls.current());
            }
        }
        else
        {
            info("@WAX:WHSWorkDeferredPutCancellationNoRecordsSelected");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelTask</Name>
				<Source><![CDATA[
    private void cancelTask(WHSWorkDeferredPutMultiTaskCancellationContract _contract, RecId _taskRecId)
    {
        WHSWorkDeferredPutProcessingTaskCancellationService::construct().cancelTask(WHSWorkDeferredPutProcessingTaskCancellationContract::newFromParameters(_contract, _taskRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the tasks provided in the list.
    /// </summary>
    /// <param name = "_listOfTasksRecIdsToCancel">A list containing the RecId's of the tasks that should be cancelled.</param>
    [Hookable(false)]
    internal static void cancel(List _listOfTasksRecIdsToCancel)
    {
        var controller = WHSWorkDeferredPutMultiTaskCancellationController::newFromTaskRecIdList(_listOfTasksRecIdsToCancel);

        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>