<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjInvoiceProposalTaskEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PSAProjInvoiceProposalTaskEventHandler implements WorkflowElementStartedEventHandler,
                                                        WorkflowElementCanceledEventHandler,
                                                        WorkflowElementReturnedEventHandler,
                                                        WorkflowElementCompletedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        WorkflowContext     workflowContext;
        projProposalJour    projProposalJour;
        projFormLetter      projFormLetter;

        // Get the workflow context from _workflowEventArgs
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        projProposalJour = projProposalJour::findRecId(workflowContext.parmRecId());
        if (projProposalJour.LineProperty != ProjLinePropertyCode::Invoiced && !projProposalJour.LedgerVoucher)
        {
            ttsbegin;
            projFormLetter = ProjFormLetter::construct(DocumentStatus::ProjectInvoice);
            projFormLetter.createParmLine(projProposalJour);
            projFormLetter.runOperation();
            PSAProjInvoiceProposalStateChangeManager::updateProjInvoiceProposalStatus(workflowContext.parmRecId(), ProjLinePropertyCode::Invoiced);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        WorkflowContext workflowContext;

        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        PSAProjInvoiceProposalStateChangeManager::updateProjInvoiceProposalStatus(workflowContext.parmRecId(), ProjLinePropertyCode::PSARejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        WorkflowContext workflowContext;
        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        ProjProposalJour projProposalJour = projProposalJour::findRecId(workflowContext.parmRecId());

        if (projProposalJour)
        {
            // Validates and disallow workflow approval when project is in closed stage for invoice proposal.
            this.disallowApprovalIfProjStageIsClosed(projProposalJour.ProposalId);
        }

        PSAProjInvoiceProposalStateChangeManager::updateProjInvoiceProposalStatus(workflowContext.parmRecId(), ProjLinePropertyCode::Approved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disallowApprovalIfProjStageIsClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates project stage to allow posting of invoice proposal before approve to workflow. An error will be thrown if project stage is not allowed for invoice proposal posting.
    /// </summary>
    /// <param name="_proposalId">
    ///  Reference to invoice proposal ID.
    /// </param>
    protected void disallowApprovalIfProjStageIsClosed(ProjProposalId _proposalId)
    {
        ProjProposalTransUnion projProposalTransUnion;
        ProjTable projTable;

        while select ProjId, Status, Type, ProjInvoiceProjId
              from projTable
                 exists join projProposalTransUnion
                     where projProposalTransUnion.ProjId == projTable.ProjId
                         && projProposalTransUnion.ProposalId == _proposalId
        {
            if (projTable && !ProjStatusTypeRule::exist(projTable.Status, projTable.Type, ProjStatusRule::CreateInvoiceProposal))
            {
                throw error(strFmt("@Proj:ProjClosedStageApproveToWorkflowError", projTable.ProjId, projTable.Stage()));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>