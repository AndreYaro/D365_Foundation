<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchSummary</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesPurchSummary
{
    SalesPurchSummaryModel  orderSummaryModel;
    SalesPurchSummaryFields orderSummaryFields;
    ParmId                  parmId;
    Num                     sumOrderId;
    Num                     summaryOrderId;
    TradeLineRefId          summaryTableRef;
    DocumentStatus          documentStatus;
    // <GEERU>
    container               sortingParmTabeleFieldIdList;

    private boolean isPackingSlipCancel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRangesQuery</Name>
				<Source><![CDATA[
    QueryRun addRangesQuery(QueryRun _queryRun, Common _orderTable)
    {
        return orderSummaryModel.addRangesQuery(_queryRun, _orderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>areFieldsEqual</Name>
				<Source><![CDATA[
    public boolean areFieldsEqual(
        Common  _orderTable,
        Common  _summaryOrderTable,
        fieldId _fieldId)
    {
        return (_orderTable.(_fieldId) == _summaryOrderTable.(_fieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateAllowed</Name>
				<Source><![CDATA[
    public boolean checkUpdateAllowed()
    {
        return orderSummaryModel.checkUpdateAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructSummaryFields</Name>
				<Source><![CDATA[
    protected void constructSummaryFields(DocumentStatus _documentStatus)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewJournal</Name>
				<Source><![CDATA[
    public boolean createNewJournal(Common _orderTable)
    {
        return orderSummaryModel.createNewJournal(_orderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumJourAutoSummary_AutoSummary</Name>
				<Source><![CDATA[
    public fieldId fieldNumJourAutoSummary_AutoSummary()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumJourAutoSummary_CustVendAccount</Name>
				<Source><![CDATA[
    public fieldId fieldNumJourAutoSummary_CustVendAccount()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumJourAutoSummary_DocumentStatus</Name>
				<Source><![CDATA[
    public fieldId fieldNumJourAutoSummary_DocumentStatus()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumJourAutoSummary_ModuleType</Name>
				<Source><![CDATA[
    public fieldId fieldNumJourAutoSummary_ModuleType()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumJourAutoSummary_OrderId</Name>
				<Source><![CDATA[
    public fieldId fieldNumJourAutoSummary_OrderId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumOrderTable_AutoSummaryModuleType</Name>
				<Source><![CDATA[
    public fieldId fieldNumOrderTable_AutoSummaryModuleType()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumOrderTable_OrderId</Name>
				<Source><![CDATA[
    public fieldId fieldNumOrderTable_OrderId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumParmSubLine_SubId</Name>
				<Source><![CDATA[
    public fieldId fieldNumParmSubLine_SubId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumParmTable_JournalRefRecId</Name>
				<Source><![CDATA[
    public fieldId fieldNumParmTable_JournalRefRecId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumParmTable_OrderId</Name>
				<Source><![CDATA[
    public fieldId fieldNumParmTable_OrderId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumParmTable_ParmId</Name>
				<Source><![CDATA[
    public fieldId fieldNumParmTable_ParmId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumParmTable_SubId</Name>
				<Source><![CDATA[
    public fieldId fieldNumParmTable_SubId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumParmTable_TableRefId</Name>
				<Source><![CDATA[
    public fieldId fieldNumParmTable_TableRefId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumSalesPurchParmTable_InvProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the RU country specific field Inventory profile for sorting.
    /// </summary>
    /// <returns>
    /// The ID of the RU country specific field Inventory profile for sorting.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method was not overridden.
    /// </exception>
    public fieldId fieldNumSalesPurchParmTable_InvProfileId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumSalesPurchParmTable_InvProfiType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the RU country specific field Kind of activity for sorting.
    /// </summary>
    /// <returns>
    /// The ID of the RU country specific field Kind of activity for sorting.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method was not overridden.
    /// </exception>
    public fieldId fieldNumSalesPurchParmTable_InvProfiType()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNumSalesPurchParmTable_JobStatus</Name>
				<Source><![CDATA[
    public fieldId fieldNumSalesPurchParmTable_JobStatus()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSummaryFieldMandatory</Name>
				<Source><![CDATA[
    public boolean isSummaryFieldMandatory(fieldId _fieldId)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSummaryTableInQuery</Name>
				<Source><![CDATA[
    public boolean isSummaryTableInQuery(
        Common _orderTable,
        Common _summaryOrderTable)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThisSumTable</Name>
				<Source><![CDATA[
    public boolean isThisSumTable(Common _orderTable)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalRefRecId</Name>
				<Source><![CDATA[
    public RefRecId journalRefRecId(Common _orderTable)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleAccount</Name>
				<Source><![CDATA[
    public int moduleAccount()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleOrder</Name>
				<Source><![CDATA[
    public int moduleOrder()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        ParmId          _parmId,
        Num             _sumOrderId,
        DocumentStatus  _documentStatus)
    {
        parmId              = _parmId;
        sumOrderId          = _sumOrderId;
        documentStatus      = _documentStatus;

        // <GEERU>
        sortingParmTabeleFieldIdList = conNull();
        // </GEERU>

        this.constructSummaryFields(_documentStatus);
        orderSummaryModel   = SalesPurchSummaryModel::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderId</Name>
				<Source><![CDATA[
    public Num orderId(Common _orderTable)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderSummaryFields</Name>
				<Source><![CDATA[
    public SalesPurchSummaryFields orderSummaryFields()
    {
        return orderSummaryFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderTable</Name>
				<Source><![CDATA[
    public Common orderTable(Common _orderTable)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    public ParmId  parmId()
    {
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJobStatus</Name>
				<Source><![CDATA[
    public ParmJobStatus parmJobStatus()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun queryBuild(boolean _isInBatch = false)
    {
        return orderSummaryModel.queryBuild(_isInBatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryValue</Name>
				<Source><![CDATA[
    public str queryValue(Common _orderTable, fieldId _fieldId)
    {
        return queryValue(_orderTable.(_fieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortingParmTabeleFieldIdList_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID's of the RU country specific fields for sorting.
    /// </summary>
    /// <returns>
    /// The ID's of the RU country specific fields for sorting.
    /// </returns>
    public container sortingParmTabeleFieldIdList_RU()
    {
        return sortingParmTabeleFieldIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBy</Name>
				<Source><![CDATA[
    public AccountOrder sumBy()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryErrorTolerance</Name>
				<Source><![CDATA[
    public ErrorTolerance summaryErrorTolerance()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryOrderTable</Name>
				<Source><![CDATA[
    public Common summaryOrderTable()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryTableRef</Name>
				<Source><![CDATA[
    public TradeLineRefId  summaryTableRef(TradeLineRefId  _summaryTableRef = summaryTableRef)
    {
        summaryTableRef = _summaryTableRef;
        return summaryTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumOrderId</Name>
				<Source><![CDATA[
    public Num sumOrderId()
    {
        return sumOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumJourAutoSummary</Name>
				<Source><![CDATA[
    public tableId tableNumJourAutoSummary()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumOrderTable</Name>
				<Source><![CDATA[
    public tableId tableNumOrderTable()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumParentForSalesPurchParmTable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the parent table to that the RU country specific table should be linked.
    /// </summary>
    /// <returns>
    /// The ID of the parent table to that the RU country specific table should be linked.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method was not overridden.
    /// </exception>
    public tableId tableNumParentForSalesPurchParmTable_RU()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the table that stores the order lines to be posted.
    /// </summary>
    /// <returns>
    /// The ID of the table storing the order lines to be posted.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method must be overridden.
    /// </exception>
    public tableId tableNumParmLine()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumParmSubLine</Name>
				<Source><![CDATA[
    public tableId tableNumParmSubLine()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumParmTable</Name>
				<Source><![CDATA[
    public tableId tableNumParmTable()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumSalesPurchParmTable</Name>
				<Source><![CDATA[
    public tableId tableNumSalesPurchParmTable()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNumSalesPurchParmTable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the table that stores the RU country specific field.
    /// </summary>
    /// <returns>
    /// The ID of the table that stores the RU country specific field.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method was not overridden.
    /// </exception>
    public tableId tableNumSalesPurchParmTable_RU()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPackingSlipCancel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmIsPackingSlipCancel(boolean _isPackingSlipCancel = isPackingSlipCancel)
    {
        isPackingSlipCancel = _isPackingSlipCancel;
        return isPackingSlipCancel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>