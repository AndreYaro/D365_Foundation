<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostCalculationCompareChartModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostCalculationCompareChartModel</c> class is responsible for providing data
/// in a format consumable by a cost calculation comparison chart control.
/// </summary>
public static class CostCalculationCompareChartModel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prepareChartData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the cost calculation comparison data in a format consumable by a chart control.
    /// </summary>
    /// <param name = "_comparisonData">Cost calculation comparison data.</param>
    /// <returns>An instance of <c>CostCompareChartTmp</c> table with data ready to be used by a chart control.</returns>
    public static CostCompareChartTmp prepareChartData(CostCalculationCompareTmp _comparisonData)
    {
        CostCompareChartTmp  chartData;

        while select _comparisonData
        {
            CostCalculationCompareChartModel::insertRecord(chartData, _comparisonData, _comparisonData.CostActiveValue, _comparisonData.CostActiveUnitValue, 1, "@SCM:CostPlannedViewActiveRole");
            CostCalculationCompareChartModel::insertRecord(chartData, _comparisonData, _comparisonData.CostEstimatedValue, _comparisonData.CostEstimatedUnitValue, 2, "@CostManagement:CostManagement_Enum_CostCalculationState_Estimated");
            CostCalculationCompareChartModel::insertRecord(chartData, _comparisonData, _comparisonData.CostRealizedValue, _comparisonData.CostRealizedUnitValue, 3, "@CostManagement:CostManagement_Enum_CostCalculationState_Realized");
            CostCalculationCompareChartModel::insertRecord(chartData, _comparisonData, _comparisonData.CostDifferenceActiveEstimated, _comparisonData.CostDifferenceActiveEstimatedUnit,    4, "@CostManagement:ActiveVsEstimatedStateComparison");
            CostCalculationCompareChartModel::insertRecord(chartData, _comparisonData, _comparisonData.CostDifferenceEstimatedRealized, _comparisonData.CostDifferenceEstimatedRealizedUnit,    5, "@CostManagement:EstimatedVsRealizedStateComparison");
            CostCalculationCompareChartModel::insertRecord(chartData, _comparisonData, _comparisonData.CostDifferenceActiveRealized, _comparisonData.CostDifferenceActiveRealizedUnit,    6, "@CostManagement:ActiveVsRealizedStateComparison");
        }

        return chartData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDrilldownQueryName</Name>
				<Source><![CDATA[
    private static str getDrilldownQueryName(boolean _isUnitCostQuery)
    {
        str queryName;

        if (_isUnitCostQuery)
        {
            queryName = queryStr(CostCompareUnitCostChartQuery);
        }
        else
        {
            queryName = queryStr(CostCompareTotalCostChartQuery);
        }

        return queryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForDrilldown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query for the chart data source to display data corresponding to the current drill level and data point selection.
    /// </summary>
    /// <param name = "_drillLevel">Drill level.</param>
    /// <param name = "_rangeValue">Range value corresponding to the chart data point that was selected.</param>
    /// <param name = "_isUnitCostQuery">True if the base drilldown query is based on unit cost; otherwise, false.</param>
    /// <returns>A <c>Query</c> object that can be used by a chart control.</returns>
    public static Query buildQueryForDrilldown(
            CostPriceCompareChartDrillLevel _drillLevel,
            str                             _rangeValue,
            boolean                         _isUnitCostQuery)
    {
        Query                   query              = new Query(CostCalculationCompareChartModel::getDrilldownQueryName(_isUnitCostQuery));
        QueryBuildDataSource    dataSourceBuilder  = query.dataSourceTable(tablenum(CostCompareChartTmp));

        // Add group by criteria
        dataSourceBuilder.orderMode(OrderMode::GroupBy);
        switch (_drillLevel)
        {
            case CostPriceCompareChartDrillLevel::Start:
                dataSourceBuilder.addSortField(fieldNum(CostCompareChartTmp, CostGroupType));
                break;
            case CostPriceCompareChartDrillLevel::CostGroupType:
                dataSourceBuilder.addSortField(fieldNum(CostCompareChartTmp, CostGroupId));
                dataSourceBuilder.addRange(fieldnum(CostCompareChartTmp, CostGroupType)).value(queryValue(_rangeValue));
                break;
            case CostPriceCompareChartDrillLevel::CostGroup:
                dataSourceBuilder.addSortField(fieldNum(CostCompareChartTmp, Resource));
                dataSourceBuilder.addRange(fieldnum(CostCompareChartTmp, CostGroupId)).value(queryValue(_rangeValue));
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    private static void insertRecord(
        CostCompareChartTmp         _chartData,
        CostCalculationCompareTmp   _comparisonData,
        CostAmount                  _costAmount,
        CostPrice                   _costUnitAmount,
        TmpLineNum                  _dataSeriesSort,
        str                         _dataSeries)
    {
        _chartData.initFromCostCalculationCompareTmp(_comparisonData);
        _chartData.Cost             = CurrencyExchangeHelper::amount(_costAmount);
        _chartData.CostUnit         = CurrencyExchangeHelper::price(_costUnitAmount);
        _chartData.DataSeriesSort   = _dataSeriesSort;
        _chartData.DataSeries       = _dataSeries;
        _chartData.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>