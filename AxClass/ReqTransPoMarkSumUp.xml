<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPoMarkSumUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqTransPoMarkSumUp extends ReqTransPoMark implements BatchRetryable
{
    ReqPlanId               reqPlanId;
    RefRecId                reqPlanVersionRefRecId;
    ReqRefType              refType;
    InventTransRefId        refId;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        reqPlanId,
        refType,
        refId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();
        this.dialogAddDefaultFields(dialog,true,false);
        this.dialogAddInfo(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddInfo</Name>
				<Source><![CDATA[
    protected void dialogAddInfo(Dialog _dialog)
    {
        MapEnumerator                   me;
        ReqTrans                        reqTransSumUp;
        ReqPO                           reqPoSumUp;
        ReqTrans                        reqTransMark;
        ReqTrans                        reqTransDelete;
        ReqPO                           reqPoDelete;
        InventDim                       inventDimSumUp;
        InventDim                       inventDimDelete;
        InventDimGroupSetup             inventDimGroupSetup;
        InventLocationIdReqMain         fromWarehouseSumUp;

        this.mapReqTransMark();

        reqPoSumUp = ReqPO::find(this.reqPlanVersionRefRecId(),refId);

        select firstonly RecId from reqTransSumUp
            where reqTransSumUp.PlanVersion             == this.reqPlanVersionRefRecId()
               && reqTransSumUp.RefType                 == refType
               && reqTransSumUp.RefId                   == refId;

        if (!reqPoSumUp.RecId || !reqTransSumUp.RecId)
        {
            return;
        }

        setPrefix(#prefixField(reqPoSumUp,refId));

        inventDimGroupSetup = InventDimGroupSetup::newItemId(reqPoSumUp.ItemId);
        inventDimSumUp      = reqPoSumUp.inventDim();
        inventDimSumUp.clearNotCovPrDim(inventDimGroupSetup);

        if (reqPoSumUp.RefType == ReqRefType::TransferPlannedOrder)
        {
            fromWarehouseSumUp = reqPoSumUp.fromInventLocationId();
        }

        me = mapReqTransMark.getEnumerator();
        while (me.moveNext())
        {
            reqTransMark = me.currentValue();
            reqPoDelete  = reqTransMark.reqPo();

            select firstonly forupdate reqTransDelete
                where reqTransDelete.PlanVersion            == reqTransMark.PlanVersion
                   && reqTransDelete.RefType                == reqTransMark.RefType
                   && reqTransDelete.RefId                  == reqTransMark.RefId;

            setPrefix(#prefixField(reqPoDelete,refId));

            if (reqTransDelete.RecId && reqPoDelete.RecId && reqPoDelete.RecId != reqPoSumUp.RecId)
            {
                if (reqPoDelete.ItemId != reqPoSumUp.ItemId)
                {
                    throw error("@SYS69937");
                }

                if (reqPoDelete.RefType != reqPoSumUp.RefType)
                {
                    throw error("@SYS72290");
                }

                if (reqPoDelete.PurchUnit != reqPoSumUp.PurchUnit)
                {
                    throw error("@SYS72289");
                }

                if (reqPoDelete.CovInventDimId != reqPoSumUp.CovInventDimId)
                {
                    inventDimDelete = reqPoDelete.inventDim();
                    inventDimDelete.clearNotCovPrDim(inventDimGroupSetup);
                    if (!InventDim::isInventDimEqualCovDim(inventDimGroupSetup, inventDimDelete, inventDimSumUp))
                    {
                        throw error("@SCMPlanning:ReqPOGroupDifferentDimensionsError");
                    }
                }

                if (reqPoDelete.RefType == ReqRefType::TransferPlannedOrder)
                {
                    var fromWarehouseDelete = reqPoDelete.fromInventLocationId();
                    
                    if (fromWarehouseDelete != fromWarehouseSumUp)
                    { 
                        throw error("@SCMPlanning:ReqPOGroupDifferentDimensionsError");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReread</Name>
				<Source><![CDATA[
    void doReread(ReqTransFormPO _reqTransForm)
    {
        ReqTrans    reqTransSumUp;

        select firstonly forupdate reqTransSumUp
            where reqTransSumUp.PlanVersion            == this.reqPlanVersionRefRecId()
               && reqTransSumUp.RefType                == refType
               && reqTransSumUp.RefId                  == refId;

        if (reqTransSumUp.RecId)
        {
            if (reqTransSumUp.RecId != _reqTransForm.reqTrans_DS().cursor().RecId)
            {
                _reqTransForm.doResearch();
                _reqTransForm.reqTrans_DS().findRecord(reqTransSumUp);
            }
            else
            {
                _reqTransForm.doReread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelDialogMarkedElements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a label to be used in the dialog for showing how many marked records were marked.
    /// </summary>
    /// <param name="_countMarkedElements">
    ///    The number of marked records.
    /// </param>
    /// <returns>
    ///    A label.
    /// </returns>
    protected str labelDialogMarkedElements(int _countMarkedElements)
    {
        str text;

        switch (_countMarkedElements)
        {
            case 0:
                text = "@SYS345110";
                break;
            case 1:
                text = "@SYS345111";
                break;
            default:
                text = strFmt("@SYS69964",_countMarkedElements);
                break;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,super(),#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanId</Name>
				<Source><![CDATA[
    public ReqPlanId parmReqPlanId(ReqPlanId _reqPlanId = reqPlanId)
    {
        reqPlanId = _reqPlanId;
        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqRefId</Name>
				<Source><![CDATA[
    public InventTransRefId parmReqRefId(InventTransRefId _refId = refId)
    {
        refId = _refId;
        return refId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqRefType</Name>
				<Source><![CDATA[
    public ReqRefType parmReqRefType(ReqRefType _refType = refType)
    {
        refType = _refType;
        return refType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfBatchOrderSumUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums the coverage quantity for the coproducts on a batch order.
    /// </summary>
    /// <param name="_reqPOSumUp">
    /// The <c>ReqPO</c> to which the quantity will be added.
    /// </param>
    /// <param name="_reqPODel">
    /// The <c>ReqPO</c> which will be deleted.
    /// </param>
    [SuppressBpWarning('BPErrorMethodDeleteFromNotUsed', 'The business logic pertaining to the deletion of ReqTransDelete records cannot be summarized to a delete_from statement.')]
    protected void pmfBatchOrderSumUp(ReqPO _reqPOSumUp, ReqPO _reqPODel)
    {
        ReqTrans    reqTransCo, reqTransDelete;
        ReqTransCov reqTransCov;

        while select forUpdate reqTransCo
            where reqTransCo.PlanVersion    == _reqPOSumUp.PlanVersion
                && reqTransCo.RefType       == ReqRefType::PmfCoProduct
                && reqTransCo.RefId         == _reqPOSumUp.RefId
        {
            while select reqTransDelete
                where reqTransDelete.PlanVersion        ==  _reqPODel.PlanVersion
                    && reqTransDelete.RefType           ==  ReqRefType::PmfCoProduct
                    && reqTransDelete.RefId             == _reqPODel.RefId
                    && reqTransDelete.PmfCoByRefRecId   == reqTransCo.PmfCoByRefRecId
            {
                reqTransDelete.selectForUpdate(true);
                reqTransCov = reqTransDelete.selectCov(true);

                while (reqTransCov.RecId)
                {
                    if (reqTransDelete.Qty > 0 && reqTransCov.Qty)
                    {
                        reqTransCov.ReceiptRecId = reqTransCo.RecId;
                        reqTransCov.ActionQtyAdd = 0;
                        reqTransCov.update();

                        reqTransCo.addCov(reqTransCov);
                    }

                    next reqTransCov;
                }
                mapReqTransDeleted.insert(reqTransDelete.RecId,reqTransDelete);
                reqTransDelete.delete();
            }
            if (reqTransCo.orig().CovQty != reqTransCo.CovQty)
            {
                reqTransCo.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCompareWithSimulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the actual planned production/batch order with a simulated
    /// planned production/batch order with the same characteristics as the actual.
    /// If the quantity, formula version, or route version from the simulation is
    /// different than the actual's quantity, formula version, or route version,
    /// then a warning is displayed provided the production parameter "Alert user
    /// on non-standard version usage" is set; otherwise, no warning is given.
    /// </summary>
    /// <param name="_actualReqPO">
    /// The actual planned production/batch order to simulate.
    /// </param>
    protected void pmfCompareWithSimulation(ReqPO _actualReqPO)
    {
        if (refType == ReqRefType::PmfPlannedProdBatch
            && ProdParameters::find().PmfAlertNonStdVersionUsage
            && !PmfReqPOSimulator::isEqual(_actualReqPO, ReqPOType::Production))
        {
            warning(strfmt("@PRO2836", _actualReqPO.RefId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPlanVersionRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the master plan version ID.
    /// </summary>
    /// <returns>
    ///     The ID of the active master plan version.
    /// </returns>
    public RefRecId reqPlanVersionRefRecId()
    {
        if (!reqPlanVersionRefRecId)
        {
            reqPlanVersionRefRecId =
                                     ReqPlan::findReqPlanId(reqPlanId).findActiveVersion().RecId;
        }
        return reqPlanVersionRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        if (this.countMarkedElements() > 1)
        {
            setprefix(ReqTransPoMarkSumUp::description());

            super();

            try
            {
                if (! this.validate())
                {
                    throw error("@SYS18447");
                }
                this.updateSumUp();

                this.postProcess();
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version = conPeek(_packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,base,#CurrentList] = _packedClass;
                super(base);
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Merges the selected <c>ReqPO</c> records.
    /// </summary>
    protected void updateSumUp()
    {
        MapEnumerator           me;
        ReqTrans                reqTransSumUp;
        ReqPO                   reqPoSumUp;
        ReqTrans                reqTransMark;
        ReqTrans                reqTransDelete;
        ReqPO                   reqPoDelete;
        InventLocationIdReqMain fromWarehouseSumUp;

        ttsBegin;

        reqPoSumUp = ReqPO::find(this.reqPlanVersionRefRecId(),refId,true);

        select firstonly forupdate reqTransSumUp
            where reqTransSumUp.PlanVersion             == this.reqPlanVersionRefRecId()
               && reqTransSumUp.RefType                 == refType
               && reqTransSumUp.RefId                   == refId;

        if (! reqPoSumUp.RecId || ! reqTransSumUp.RecId)
        {
            throw error(strfmt("@SYS24774",refId));
        }

        setprefix(#prefixField(reqPoSumUp,refId));

        this.mapReqTransMark();

        if (reqPoSumUp.RefType == ReqRefType::TransferPlannedOrder)
        {
            fromWarehouseSumUp = reqPoSumUp.fromInventLocationId();
        }

        me = mapReqTransMark.getEnumerator();
        while (me.moveNext())
        {
            reqTransMark = me.currentValue();
            reqPoDelete = reqTransMark.reqPo(true);

            select firstonly forupdate reqTransDelete
                where reqTransDelete.PlanVersion            == reqTransMark.PlanVersion
                   && reqTransDelete.RefType                == reqTransMark.RefType
                   && reqTransDelete.RefId                  == reqTransMark.RefId;

            if (! reqTransDelete.RecId)
            {
                throw error(strfmt("@SYS24774",reqTransMark.RefId));
            }

            setprefix(#prefixField(reqPoDelete,refId));

            if (reqPoDelete.RecId != reqPoSumUp.RecId)
            {
                if (! reqPoDelete.RecId)
                {
                    throw error(strfmt("@SYS24774",reqTransMark.RefId));
                }

                if (reqPoDelete.ItemId != reqPoSumUp.ItemId)
                {
                    throw error("@SYS69937");
                }

                if (reqPoDelete.CovInventDimId != reqPoSumUp.CovInventDimId)
                {
                   throw error("@SCMPlanning:ReqPOGroupDifferentDimensionsError");
                }

                if (reqPoDelete.RefType != reqPoSumUp.RefType)
                {
                    throw error("@SYS72290");
                }

                if (reqPoDelete.PurchUnit != reqPoSumUp.PurchUnit)
                {
                    throw error("@SYS72289");
                }

                if (reqPoDelete.ItemBomId != reqPoSumUp.ItemBomId && reqPoDelete.reqSetupDim().bomVersionReq())
                {
                    throw error("@SYS112931");
                }

                if (reqPoDelete.ItemRouteId != reqPoSumUp.ItemRouteId && reqPoDelete.reqSetupDim().routeVersionReq())
                {
                    throw error("@SYS112932");
                }

                if (reqPoDelete.RefType == ReqRefType::TransferPlannedOrder)
                {
                    var fromWarehouseDelete = reqPoDelete.fromInventLocationId();
                    
                    if (fromWarehouseDelete != fromWarehouseSumUp)
                    {
                        throw error("@SCMPlanning:ReqPOGroupDifferentDimensionsError");
                    }
                }

                reqPoSumUp.Qty      += reqPoDelete.Qty;
                reqPoSumUp.PurchQty += reqPoDelete.PurchQty;
                reqPoSumUp.ReqDateDlv = min(reqPoSumUp.ReqDateDlv, reqPoDelete.ReqDateDlv);

                this.updateRequirementCoverage(reqTransDelete, reqTransSumUp);

                mapReqTransDeleted.insert(reqTransDelete.RecId,reqTransDelete);
                mapReqPoDeleted.insert(reqPoDelete.RecId,reqPoDelete);

                if (reqPoSumUp.RefType == ReqRefType::PmfPlannedProdBatch)
                {
                    this.pmfBatchOrderSumUp(reqPoSumUp,reqPoDelete);
                }

                reqPoDelete.delete(true);
                reqTransDelete.delete();
            }
        }

        boolean mustShowQtyDialog = true;

		if (reqPoSumUp.Qty != reqPoSumUp.orig().Qty)
		{
            reqPoSumUp = this.initializePlannedOrderSumUp(reqPoSumUp);
            mustShowQtyDialog = false;

			reqPoSumUp.update(null,reqTransSumUp);
		}

		reqTransSumUp.OriginalQuantity = reqTransSumUp.Qty;
		reqTransSumUp.doUpdate();

		ttsCommit;

        using(var context = ReqPORetrieveMinMaxQtyContext::newStandard(mustShowQtyDialog))
        {
			this.pmfCompareWithSimulation(reqPoSumUp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequirementCoverage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates requirement coverage records.
    /// </summary>
    /// <param name = "_reqTransDelete">The source requirement transaction to merge planned order.</param>
    /// <param name = "_reqTransSumUp">The destination requirement transaction to merge planned order.</param>
    protected void updateRequirementCoverage(ReqTrans _reqTransDelete, ReqTrans _reqTransSumUp)
    {
        if(_reqTransDelete.Qty <= 0)
        {
            return;
        }

        ReqTransCov reqTransCov = _reqTransDelete.selectCov(true);

        while (reqTransCov.RecId)
        {
            if (reqTransCov.Qty)
            {
                reqTransCov.ReceiptRecId = _reqTransSumUp.RecId;
                reqTransCov.ActionQtyAdd = 0;
                reqTransCov.update();
                _reqTransSumUp.addCov(reqTransCov);
            }

            next reqTransCov;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (!ReqTrans::refTypeIsPlannedOrder(refType))
        {
            return checkFailed("@SYS69936");
        }

        return super(calledFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ReqTransPoMarkSumUp construct()
    {
        return new ReqTransPoMarkSumUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS69939";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqTransPoMarkSumUp     reqTransPoMarkSumUp;

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            reqTransPoMarkSumUp = ReqTransPoMarkSumUp::newForm(_args);
            reqTransPoMarkSumUp.executeAction();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static ReqTransPoMarkSumUp newForm(Args _args)
    {
        ReqTransPoMarkSumUp reqTransPoMarkSumUp = ReqTransPoMarkSumUp::construct();
        ReqTrans            reqTrans            = ReqTransPoMark::getReqTransFromArgs(_args);
        ReqPlanId           reqPlanId;

        reqPlanId = ReqPlanVersion::find(reqTrans.PlanVersion).ReqPlanId;

        reqTransPoMarkSumUp.getLast();
        reqTransPoMarkSumUp.initFromArgs(_args);

        reqTransPoMarkSumUp.parmReqPlanId(reqPlanId);
        reqTransPoMarkSumUp.parmReqRefType(reqTrans.RefType);
        reqTransPoMarkSumUp.parmReqRefId(reqTrans.RefId);

        return reqTransPoMarkSumUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePlannedOrderSumUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the provided planned order record.
    /// </summary>
    /// <param name = "_reqPoSumUp">The current instance of the planned order record.</param>
    /// <returns>
    /// A <c>ReqPO</c> table buffer.
    /// </returns>
    protected ReqPO initializePlannedOrderSumUp(ReqPO _reqPoSumUp)
    {
        _reqPoSumUp.ItemRouteId = RouteVersion::findActive(_reqPoSumUp.ItemId,_reqPoSumUp.ReqDate,_reqPoSumUp.Qty,_reqPoSumUp.inventDim()).RouteId;
        _reqPoSumUp.ItemBomId   = BOMVersion::findActive(_reqPoSumUp.ItemId,_reqPoSumUp.ReqDate,_reqPoSumUp.Qty,_reqPoSumUp.inventDim()).BOMId;

        _reqPoSumUp.setMinMaxQty(_reqPoSumUp.inventDim().inventDimId);

        if (ReqTransPoMarkSumUpDefaultMaxQuantityFlight::instance().isEnabled())
        {
            _reqPoSumUp.initPurchQty();
        }

        return _reqPoSumUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>