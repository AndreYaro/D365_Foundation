<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorRequestCategoryWorkflowRecallManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendVendorRequestCategoryWorkflowRecallManager extends WorkflowCancelManager
{
    private List workFlowWorkItemsList;
    private List listWorkItemSelected = new List(Types::Int64);


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendVendorRequestCategoryWorkflowRecallManager construct()
    {
        return new VendVendorRequestCategoryWorkflowRecallManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendVendorRequestNewCategory vendRequest = _args.record() as VendVendorRequestNewCategory;

        if (vendRequest)
        {
            VendVendorRequestCategoryWorkflowRecallManager workflowCancelManager = VendVendorRequestCategoryWorkflowRecallManager::construct();

            workflowCancelManager.run(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(Args _args)
    {
        List workflowsToCancel = new List(Types::Guid);
        LabelString cancelCaption;
        LabelString cancelActionText;
        LabelString cancelActionHelpText;
        LabelString cancelPrompt;

        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        workflowsToCancel = WorkflowCancelManager::getWorkflowsToCancel(_args.caller());

        if (workflowsToCancel.elements() == 0)
        {
            return;
        }

        [cancelCaption, cancelActionText, cancelActionHelpText, cancelPrompt] = WorkflowCancelManager::getDialogContent(_args);
            
        WorkflowCancelDialog workflowCancelDialog = WorkflowCancelDialog::construct(cancelCaption, cancelActionText, cancelActionHelpText, cancelPrompt);
        workflowCancelDialog.run();

        if (workflowCancelDialog.parmIsClosedOK())
        {
            WorkflowCancelManager::cancelWorkflows(workflowsToCancel, workflowCancelDialog.parmWorkflowComment());

            this.updateDocument(_args);

            _args.caller().updateWorkflowControls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    public void updateDocument(Args _args)
    {
        VendVendorRequestNewCategory vendRequest = _args.record() as VendVendorRequestNewCategory;

        if (FormDataUtil::getFormDataSource(vendRequest))
        {
            ttsbegin;
            vendRequest.RequestStatus = VendVendorRequestStatus::WorkflowCanceled;
            vendRequest.update();
            ttscommit;

            FormDataSource vendRequest_ds = FormDataUtil::getFormDataSource(vendRequest);
            vendRequest_ds.research(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>