<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTReportService_Base_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The base service class for the services that run the Standard Audit File reports.
/// </summary>
public abstract class SAFTReportService_Base_W extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getERFormatMappingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the identifier of the format mapping to be run.
    /// </summary>
    /// <returns>The identifier of the format mapping to be run.</returns>
    protected abstract ERFormatMappingId getERFormatMappingRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERModelName</Name>
				<Source><![CDATA[
    protected str getERModelName()
    {
        return SAFTConstants_W::ERModelName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERReportContractDatasourceName</Name>
				<Source><![CDATA[
    private str getERReportContractDatasourceName()
    {
        return SAFTConstants_W::ERReportContractDatasourceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates user parmeters setup
    /// </summary>
    /// <returns>true if parameters are set up correctly, otherwise false</returns>
    protected boolean validateParameters()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the SAF-T report.
    /// </summary>
    /// <param name = "_dataContract">The data contract passed in be a concrete derived service.</param>
    protected void runReport(SAFTReportContract_Base_W _dataContract)
    {
        if (this.validateParameters())
        {
            try
            {
                ERIFormatMappingRun erRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(this.getERFormatMappingRecId());
                erRun.withParameter(this.getERDataBaseContext());
                erRun.withFileDestination(_dataContract.getFileDestination());
                erRun.withCreatingObjectParameter(this.getERModelName(), this.getERReportContractDatasourceName(), _dataContract);
                this.addProcessedObjectParameters(erRun);
                erRun.run();
            }
            catch
            {
                info("@SYS88909");
                if (_dataContract.parmElectronicMessageRecId())
                {
                    throw; // in case of calling from EM, exception should be rethrown for caller
                }
            }
        }
        else
        {
            throw error("@SYS104318");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTmpTablesToContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all temporary tables to be passed in ER format run.
    /// </summary>
    /// <param name = "_databaseContext">The instantiated object of the electronic reporting context to add temporarily tables to.</param>
    protected void addTmpTablesToContext(ERModelDefinitionDatabaseContext _databaseContext)
    {
        LedgerTurnoverAndBalanceTmp ledgerTurnoverAndBalanceTmp;
        _databaseContext.addTemporaryTable(ledgerTurnoverAndBalanceTmp);
        SAFTTaxTransByReportingCode_PL taxTransByReportingCode_PL;
        _databaseContext.addTemporaryTable(taxTransByReportingCode_PL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueriesToContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all queries to be passed in ER format run.
    /// </summary>
    /// <param name = "_databaseContext">The instantiated object of the electronic reporting context to add queries to.</param>
    protected void addQueriesToContext(ERModelDefinitionDatabaseContext _databaseContext)
    {
        Query query = new Query();
        query.addDataSource(tableNum(GeneralJournalEntry));
        _databaseContext.addQuery(tableNum(GeneralJournalEntry), query);

        query = new Query();
        query.addDataSource(tableNum(BankAccountTable));
        _databaseContext.addQuery(tableNum(BankAccountTable), query);

        query = new Query();
        query.addDataSource(tableNum(CustInvoiceJour));
        _databaseContext.addQuery(tableNum(CustInvoiceJour), query);

        query = new Query();
        query.addDataSource(tableNum(ProjInvoiceJour));
        _databaseContext.addQuery(tableNum(ProjInvoiceJour), query);

        query = new Query();
        query.addDataSource(tableNum(CzCustAdvanceInvoiceTable));
        _databaseContext.addQuery(tableNum(CzCustAdvanceInvoiceTable), query);

        query = new Query();
        query.addDataSource(tableNum(InventTrans));
        _databaseContext.addQuery(tableNum(InventTrans), query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERDataBaseContext</Name>
				<Source><![CDATA[
    private ERModelDefinitionDatabaseContext getERDataBaseContext()
    {
        ERModelDefinitionDatabaseContext databaseContext = new ERModelDefinitionDatabaseContext();
        this.addTmpTablesToContext(databaseContext);
        this.addQueriesToContext(databaseContext);
        return databaseContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all non-empty-valued query filters found by data source name matched with target data source name.
    /// </summary>
    /// <param name = "_sourceQuery">The source query.</param>
    /// <param name = "_targetQuery">The target query.</param>
    /// <param name = "_targetDataSource">The <c>QueryBuildDataSource</c> instance related to target query.</param>
    /// <remarks>Expects that filters don't exist on target query. To merge filters, use <c>mergeFilters</c> method on <c>SysQuery</c> class.</remarks>
    protected void copyFilters(Query _sourceQuery, Query _targetQuery, QueryBuildDataSource _targetDataSource)
    {
        for (int i = 1; i <= _sourceQuery.queryFilterCount(); i++)
        {
            QueryFilter sourceQueryFilter = _sourceQuery.queryFilter(i);
            if (sourceQueryFilter.dataSource().table() == _targetDataSource.table() && sourceQueryFilter.value() != '')
            {
                QueryFilter newFilter = _targetQuery.addQueryFilter(_targetDataSource, sourceQueryFilter.field());
                newFilter.value(sourceQueryFilter.value());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProcessedObjectParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all objects that contain caclulated parameters to be passed into GER format run.
    /// </summary>
    /// <param name = "_erRun">Instance of GER format run.</param>
    protected void addProcessedObjectParameters(ERIFormatMappingRun _erRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQueryHasRows</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the query has at least one row from table
    /// </summary>
    /// <param name = "_query">Query for report generating</param>
    /// <param name = "_tableIds">Id of table included in the query</param>
    /// <returns>true, if query has records; otherwise false.</returns>
    public boolean checkQueryHasRows(Query _query, container _tableIds)
    {
        Common record;

        if (_query)
        {
            Query firstRecQuery = new Query(_query);
            for (int i = 1; i <= conLen(_tableIds); i++)
                firstRecQuery.dataSourceTable(conPeek(_tableIds, i)).firstOnly(true);

            QueryRun queryRun = new QueryRun(firstRecQuery);
            if (queryRun.next())
            {
                for (int i = 1; i <= conLen(_tableIds) && record.RecId == 0; i++)
                {
                    record = queryRun.get(conPeek(_tableIds, i));
                }
            }
        }
        return record.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryWithCopiedDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query and copy data source and filters from query that comes as parameter.
    /// </summary>
    /// <param name="_sourceQuery">
    /// The query to be copied.
    /// </param>
    /// <param name="_tableId">
    /// The table assigned to data source for the query.
    /// </param>
    /// <returns>
    /// The query copied from the parameter with the _tableId as data source.
    /// </returns>
    [Hookable(false)]
    protected Query createQueryWithCopiedDataSource(Query _sourceQuery, RefTableId _tableId)
    {
        QueryBuildDataSource qbds = _sourceQuery.dataSourceTable(_tableId);
        Query copiedQuery = new Query();
        QueryBuildDataSource copiedQueryDataSource = copiedQuery.addDataSource(qbds.table());
        SysQuery::copyDataSource(qbds, copiedQueryDataSource, true);
        this.copyFilters(_sourceQuery, copiedQuery, copiedQueryDataSource);
        return copiedQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>