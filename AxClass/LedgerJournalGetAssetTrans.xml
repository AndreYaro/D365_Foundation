<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalGetAssetTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class LedgerJournalGetAssetTrans extends RunBase
{
    NoYes                   reverseSign;
    PeriodUnit              freqCode;
    Freq                    freqValue;
    LedgerGetVoucherMethod  ledgerGetVoucherMethod;
    QueryRun                queryRun;

    // variables that do not need to be packed/unpacked
    LedgerJournalNameId     journalName;
    LedgerJournalId         journalNum;
    LedgerJournalTable      ledgerJournalTable;

    DialogField             dialogReverseSign;
    DialogField             dialogFreqCode;
    DialogField             dialogFreqValue;
    DialogField             dialogGetVoucherMethod;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        reverseSign,
        freqCode,
        freqValue,
        ledgerGetVoucherMethod
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog =  super();

        dialogGetVoucherMethod  = dialog.addField(enumstr(LedgerGetVoucherMethod), "@SYS12336");
        dialogReverseSign       = dialog.addField(enumstr(NoYes), "@SYS9896", "@SYS28613");
        dialogFreqCode          = dialog.addField(enumstr(PeriodUnit));
        dialogFreqValue         = dialog.addField(extendedtypestr(Freq));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ledgerGetVoucherMethod  = dialogGetVoucherMethod.value();
        reverseSign             = dialogReverseSign.value();
        freqCode                = dialogFreqCode.value();
        freqValue               = dialogFreqValue.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Voucher getNewVoucher()
    {
        Voucher voucher;

        voucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        journalNum  = _ledgerJournalTable.JournalNum;
        journalName = _ledgerJournalTable.JournalName;
        ledgerJournalTable = _ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        Query   query = new Query();
        QueryBuildDataSource    qbdsAssetTrans;
        QueryBuildDataSource    qbdsAssetBookTableDerived;

        super();

        query.addDataSource(tablenum(AssetTable));

        query.dataSourceTable(tablenum(AssetTable)).addRange(fieldnum(AssetTable, AssetId));
        query.dataSourceTable(tablenum(AssetTable)).addDataSource(tablenum(AssetBook));
        query.dataSourceTable(tablenum(AssetBook)).addLink(fieldnum(AssetTable, AssetId),fieldnum(AssetBook, AssetId));
        query.dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook, BookId));

        query.dataSourceTable(tablenum(AssetBook)).addDataSource(tablenum(AssetTrans));
        query.dataSourceTable(tablenum(AssetTrans)).addLink(fieldnum(AssetBook, AssetId),fieldnum(AssetTrans, AssetId));
        query.dataSourceTable(tablenum(AssetTrans)).addLink(fieldnum(AssetBook, BookId),fieldnum(AssetTrans, BookId));
        query.dataSourceTable(tablenum(AssetTrans)).addRange(fieldnum(AssetTrans, TransDate));
        query.dataSourceTable(tablenum(AssetTrans)).addRange(fieldnum(AssetTrans, Voucher));

        // exclude any  asset transactions that were generated using a derived book during posting.
        qbdsAssetTrans = query.dataSourceTable(tablenum(AssetTrans));
        qbdsAssetBookTableDerived = qbdsAssetTrans.addDataSource(tablenum(AssetBookTableDerived));
        qbdsAssetBookTableDerived.addLink(fieldnum(AssetBookTableDerived, BookIdDerived), fieldnum(AssetTrans, BookId));
        qbdsAssetBookTableDerived.addLink(fieldnum(AssetBookTableDerived, AssetTransType), fieldnum(AssetTrans, TransType));
        qbdsAssetBookTableDerived.joinMode(JoinMode::NoExistsJoin);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDate newDate(TransDate  _transDate)
    {
        Futures futures;

        futures = Futures::construct(_transDate, freqValue, freqCode);

        return futures.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion ,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerJournalId parmJournalNum(LedgerJournalId _journalNum = journalNum)
    {
        journalNum = _journalNum;

        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>QueryRun</c> object, which is used by the <c>QueryPrompt</c>.
    /// </summary>
    /// <returns>
    ///    The <c>QueryRun</c> object, which is used by the <c>QueryPrompt</c>.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not instantiate the <c>queryRun</c> whenever the method is called. This should be done
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method. Or it should be used in the
    ///    <c>init</c> method, if this is used, or in the method only when it is not instantiated.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        if (! this.validate())
        {
            throw error("");
        }

        try
        {
            this.updateNow();
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version     = RunBase::getVersion(_packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateNow()
    {
        QueryRun queryAssetTrans = queryRun;
        AssetTrans assetTrans;
        AssetTransTypeJournal assetTransTypeJournal;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
        LedgerJournalTrans oldLedgerJournalTrans;
        LedgerJournalTrans_Asset oldLedgerJournalTrans_Asset;
        Voucher voucher;
        Voucher oldVoucher = '';
        boolean firstTime = true;
        TransDate transDate;
        LineNum lineNum = 1;
        LedgerDimensionDefaultAccount defaultAccount;

        // <GJP>
        boolean isPositiveDRCROnlyFailed = false;
        boolean isPositiveDRCREnabled = ledgerJournalTable.isPositiveDRCROnlyEnabled_JP();
        // </GJP>

        ttsbegin;

        while (queryAssetTrans.next())
        {
            assetTrans = queryAssetTrans.get(tablenum(AssetTrans));
            switch (ledgerGetVoucherMethod)
            {
                case LedgerGetVoucherMethod::Original :
                    voucher = assetTrans.Voucher;
                    break;
                case LedgerGetVoucherMethod::Total :
                    if (firstTime)
                    {
                        firstTime = false;
                        voucher = this.getNewVoucher();
                    }
                    break;
                case LedgerGetVoucherMethod::NewPrVoucher :
                    if (assetTrans.Voucher != oldVoucher)
                    {
                        oldVoucher = assetTrans.Voucher;
                        voucher = this.getNewVoucher();
                    }
                    break;
                case LedgerGetVoucherMethod::NewPrTrans :
                    voucher = this.getNewVoucher();
                    break;
                default:
                    break;
            }

            if (freqValue)
            {
                transDate = this.newDate(assetTrans.TransDate);
            }
            else
            {
                transDate = assetTrans.TransDate;
            }

            assetTransTypeJournal = AssetPost::assetTransType2AssetTransTypeJournal(assetTrans.TransType);

            select firstonly OffsetLedgerDimension from oldLedgerJournalTrans
                join oldLedgerJournalTrans_Asset
                    where oldLedgerJournalTrans.RecId == oldLedgerJournalTrans_Asset.RefRecId
                        && oldLedgerJournalTrans_Asset.AssetId == assetTrans.AssetId
                        && oldLedgerJournalTrans_Asset.BookId == assetTrans.BookId
                        && (oldLedgerJournalTrans.AmountCurCredit == -assetTrans.AmountCur
                            || oldLedgerJournalTrans.AmountCurDebit == assetTrans.AmountCur)
                        && oldLedgerJournalTrans.TransDate == assetTrans.TransDate
                        && oldLedgerJournalTrans.Voucher == assetTrans.Voucher
                        && oldLedgerJournalTrans_Asset.TransType == assetTransTypeJournal;

            ledgerJournalTrans.clear();
            ledgerJournalTrans.initValue();

            ledgerJournalTrans.Voucher = voucher;
            if (!ledgerJournalTrans.checkVoucherSeries(ledgerJournalTable))
            {
                throw error("@SYS23020");
            }

            ledgerJournalTrans.LineNum = lineNum;
            lineNum ++;

            ledgerJournalTrans.Company = curext();
            ledgerJournalTrans.OffsetCompany = curext();
            ledgerJournalTrans.TransDate = transDate;
            ledgerJournalTrans.JournalNum = journalNum;
            ledgerJournalTrans.parmAccount(assetTrans.AssetId, LedgerJournalACType::FixedAssets);
            ledgerJournalTrans.TransactionType = LedgerTransType::FixedAssets;

            if (reverseSign == NoYes::Yes &&
                (ledgerGetVoucherMethod == LedgerGetVoucherMethod::NewPrVoucher ||
                 ledgerGetVoucherMethod == LedgerGetVoucherMethod::NewPrTrans))
            {
                ledgerJournalTrans.Txt = strfmt("@SYS77983",assetTrans.Voucher);
            }
            else
            {
                ledgerJournalTrans.Txt = assetTrans.Txt;
            }
            ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
            ledgerJournalTrans.PostingProfile = assetTrans.PostingProfile;
            defaultAccount = AssetTable::find(assetTrans.AssetId).assetOffsetLedgerDimension(ledgerJournalTrans.PostingProfile, assetTrans.TransType, assetTrans.BookId);

            if (oldLedgerJournalTrans)
            {
                ledgerJournalTrans.OffsetLedgerDimension = oldLedgerJournalTrans.OffsetLedgerDimension;
            }
            else
            {
                ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, AssetTrans.DefaultDimension);
            }

            ledgerJournalTrans.CurrencyCode = assetTrans.CurrencyCode;
            ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
            ledgerJournalTrans.DefaultDimension = assetTrans.DefaultDimension;
            ledgerJournalTrans.CustTransId = assetTrans.RevaluedTransID;
            ledgerJournalTrans.AmountCurCredit = this.getAmountCurCredit(assetTrans);
            ledgerJournalTrans.AmountCurDebit = this.getAmountCurDebit(assetTrans);

            // <GJP>
            isPositiveDRCROnlyFailed = !isPositiveDRCROnlyFailed
                && isPositiveDRCREnabled
                && (ledgerJournalTrans.AmountCurCredit < 0
                || ledgerJournalTrans.AmountCurDebit < 0);
            // </GJP>

            ledgerJournalTrans.insert();

            ledgerJournalTrans_Asset.RefRecId = ledgerJournalTrans.RecId;
            ledgerJournalTrans_Asset.AssetId = ledgerJournalTrans.parmAccount();
            ledgerJournalTrans_Asset.Company = ledgerJournalTrans.Company;
            ledgerJournalTrans_Asset.BookId = assetTrans.BookId;
            ledgerJournalTrans_Asset.TransType = assetTransTypeJournal;
            ledgerJournalTrans_Asset.ConsumptionQuantity = assetTrans.ConsumptionQty;
            ledgerJournalTrans_Asset.RevaluationTrans = assetTrans.RevaluationTrans;
            ledgerJournalTrans_Asset.RevaluationAmount = reverseSign ? -assetTrans.RevaluationAmount : assetTrans.RevaluationAmount;
            ledgerJournalTrans_Asset.ConsumptionQuantity = reverseSign ? -assetTrans.ConsumptionQty : assetTrans.ConsumptionQty;
            ledgerJournalTrans_Asset.AmountCreditReportingCurrency = this.getAmountCreditReportingCurrency(assetTrans);
            ledgerJournalTrans_Asset.AmountDebitReportingCurrency = this.getAmountDebitReportingCurrency(assetTrans);

            ledgerJournalTrans_Asset.insert();
        }

        // <GJP>
        if (isPositiveDRCREnabled
            && isPositiveDRCROnlyFailed)
        {
            warning("@GLS60021");
        }
        // </GJP>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurCredit</Name>
				<Source><![CDATA[
    private Amount getAmountCurCredit(AssetTrans _assetTrans)
    {
        Amount amountCurCredit = 0;

        if (_assetTrans.AmountMST < 0)
        {
            amountCurCredit = reverseSign ? _assetTrans.AmountCur : _assetTrans.AmountCur * -1;
        }

        return amountCurCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurDebit</Name>
				<Source><![CDATA[
    private Amount getAmountCurDebit(AssetTrans _assetTrans)
    {
        Amount amountCurDebit = 0;

        if (_assetTrans.AmountMST > 0)
        {
            amountCurDebit = reverseSign ? _assetTrans.AmountCur * -1 : _assetTrans.AmountCur;
        }

        return amountCurDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCreditReportingCurrency</Name>
				<Source><![CDATA[
    private Amount getAmountCreditReportingCurrency(AssetTrans _assetTrans)
    {
        Amount amountCreditReportingCurrency = 0;

        if (_assetTrans.ReportingCurrencyAmount < 0)
        {
            amountCreditReportingCurrency = reverseSign ? _assetTrans.ReportingCurrencyAmount : _assetTrans.ReportingCurrencyAmount * -1;
        }

        return amountCreditReportingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountDebitReportingCurrency</Name>
				<Source><![CDATA[
    private Amount getAmountDebitReportingCurrency(AssetTrans _assetTrans)
    {
        Amount amountDebitReportingCurecy = 0;

        if (_assetTrans.ReportingCurrencyAmount > 0)
        {
            amountDebitReportingCurecy = reverseSign ? _assetTrans.ReportingCurrencyAmount * -1 : _assetTrans.ReportingCurrencyAmount;
        }

        return amountDebitReportingCurecy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super();

        if (LedgerParameters::find().CheckVoucher == ReuseVoucher::NoDuplicate &&
            ledgerGetVoucherMethod == LedgerGetVoucherMethod::Original)
        {
            ret = checkFailed("@SYS67049");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@SYS71342";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LedgerJournalGetAssetTrans ledgerJournalGetAssetTrans;

        switch (args.dataset())
        {
            case tablenum(LedgerJournalTable):
                ledgerJournalGetAssetTrans   = LedgerJournalGetAssetTrans::newLedgerJournalTable(args.record());
                break;

            case tablenum(LedgerJournalTrans):
                ledgerJournalGetAssetTrans   = LedgerJournalGetAssetTrans::newLedgerJournalTrans(args.record());
                break;

            default:
                throw error("@SYS18626");
        }

        if (ledgerJournalGetAssetTrans.prompt())
        {
            ledgerJournalGetAssetTrans.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerJournalGetAssetTrans newLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalGetAssetTrans ledgerJournalGetAssetTrans;

        ledgerJournalGetAssetTrans = new LedgerJournalGetAssetTrans();
        ledgerJournalGetAssetTrans.getLast();
        ledgerJournalGetAssetTrans.initFromLedgerJournalTable(_ledgerJournalTable);

        return ledgerJournalGetAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerJournalGetAssetTrans newLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalGetAssetTrans ledgerJournalGetAssetTrans;

        ledgerJournalGetAssetTrans = new LedgerJournalGetAssetTrans();
        ledgerJournalGetAssetTrans.getLast();
        ledgerJournalGetAssetTrans.initFromLedgerJournalTable(_ledgerJournalTrans.ledgerJournalTable());

        return ledgerJournalGetAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>