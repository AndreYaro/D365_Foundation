<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOrderCommittedReservationBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>WHSOrderCommittedReservationBalance</c> is an accummulator (balance) of reservation
/// quantities to be applied on order-committed level.
/// </summary>
internal final class WHSOrderCommittedReservationBalance
{
    private Map inventTransMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a quantity in a balance to the order-committed reservation by given inventory dimensions.
    /// This method does not result in creation or modification of inventory transactions - it only records
    /// desired change in the in-memory balance.
    /// </summary>
    /// <param name = "_committingOriginInventTransId">Order-committed inventory transaction identifier to add inventory reservation to.</param>
    /// <param name = "_inventDimId">Inventory dimension identifier to add reservation on.</param>
    /// <param name = "_qtyToAdd">A quantity to change reservation by.</param>
    /// <param name = "_allowReserveReduction">Determines if requested quantity must be reserved or it is possible to reserve less in case of not enough on-hand.</param>
    /// <param name = "_updateTransferReservation">Determines if requested quantity must be added to/removed from transfer reservation.</param>
    /// <remarks>Method assumes that inventory dimensions contain only mandatory dimensions.</remarks>
    [Hookable(false)]
    internal void addToBalance(
        InventTransId   _committingOriginInventTransId,
        InventDimId     _inventDimId,
        InventQty       _qtyToAdd,
        boolean         _allowReserveReduction,
        boolean         _updateTransferReservation)
    {
        if (!inventTransMap)
        {
            inventTransMap = new Map(Types::String, Types::Class);
        }

        Map inventDimMap;
        WHSOrderCommittedReservationBalanceEntry balanceEntry;

        if (inventTransMap.exists(_committingOriginInventTransId))
        {
            inventDimMap = inventTransMap.lookup(_committingOriginInventTransId);

            if (inventDimMap.exists(_inventDimId))
            {
                balanceEntry = inventDimMap.lookup(_inventDimId);
            }
        }
        else
        {
            inventDimMap = new Map(Types::String, Types::Class);
            inventTransMap.insert(_committingOriginInventTransId, inventDimMap);
        }

        if (!balanceEntry)
        {
            balanceEntry = new WHSOrderCommittedReservationBalanceEntry();
        }

        balanceEntry.addReservationQty(_qtyToAdd, _allowReserveReduction, _updateTransferReservation);

        inventDimMap.insert(_inventDimId, balanceEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts resulting balance into actual inventory transactions of physical reserved status.
    /// </summary>
    /// <remarks>
    /// Balance is reset to clean state as a result of execution.
    /// </remarks>
    [Hookable(false)]
    internal void commitBalance()
    {
        if (   !inventTransMap
            || inventTransMap.empty())
        {
            return;
        }

        using (WHSOrderCommittedReservationBalancePerformanceTask perfTask = WHSOrderCommittedReservationBalancePerformanceTask::newFromAction('commitBalance'))
        {
            int reservationAdjustmentsCount = 0;

            // first try to satisfy reservation requests which must happen. Then those which allow not full quantity being reserved.
            reservationAdjustmentsCount += this.commitBalanceMap(inventTransMap);

            perfTask.setReservationAdjustmentsCount(reservationAdjustmentsCount);
        }

        this.resetBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetBalance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void resetBalance()
    {
        inventTransMap = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOrderCommittedReservationsInBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there are any balance changes related to the provided order-committed reservation on given dimensions.
    /// </summary>
    /// <param name = "_committingOriginInventTransId">Order-committed transaction identifier.</param>
    /// <param name = "_mandatoryInventDimId">Inventory dimensions to check.</param>
    /// <returns>true if there is anything related in balance; false, otherwise.</returns>
    [Hookable(false)]
    internal boolean hasOrderCommittedReservationsInBalance(InventTransId _committingOriginInventTransId, InventDimId _mandatoryInventDimId)
    {
        return inventTransMap && this.mapHasOrderCommittedReservationsInBalance(inventTransMap, _committingOriginInventTransId, _mandatoryInventDimId);
	}

]]></Source>
			</Method>
			<Method>
				<Name>mapHasOrderCommittedReservationsInBalance</Name>
				<Source><![CDATA[
    private boolean mapHasOrderCommittedReservationsInBalance(Map _inventTransMap, InventTransId _committingOriginInventTransId, InventDimId _mandatoryInventDimId)
    {
        if (_inventTransMap.exists(_committingOriginInventTransId))
        {
            Map inventDimMap = _inventTransMap.lookup(_committingOriginInventTransId);
            return inventDimMap.exists(_mandatoryInventDimId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitBalanceMap</Name>
				<Source><![CDATA[
    private int commitBalanceMap(Map _inventTransMap)
    {
        int reservationAdjustmentsCount = 0;

        MapEnumerator inventTransMapEnumerator = _inventTransMap.getEnumerator();
        while (inventTransMapEnumerator.moveNext())
        {
            InventTransId committingOriginInventTransId = inventTransMapEnumerator.currentKey();
            Map inventDimMap = inventTransMapEnumerator.currentValue();

            MapEnumerator inventDimMapEnumerator = inventDimMap.getEnumerator();
            while (inventDimMapEnumerator.moveNext())
            {
                InventDimId inventDimId = inventDimMapEnumerator.currentKey();
                WHSOrderCommittedReservationBalanceEntry balanceEntry = inventDimMapEnumerator.currentValue();

                if (balanceEntry.getDoNotAllowReservationReductionQty())
                {
                    WHSOrderCommittedReservationFacade::updateOrderCommittedReservation(
                        committingOriginInventTransId,
                        inventDimId,
                        balanceEntry.getDoNotAllowReservationReductionQty(),
                        WHSOrderCommittedReservationFacade::ExecuteNow,
                        WHSOrderCommittedReservationFacade::DoNotAllowReserveReduction,
                        WHSOrderCommittedReservationFacade::UpdateTransferReservation);

                    reservationAdjustmentsCount++;
                }

                if (balanceEntry.getDoNotAllowReservationReductionWithoutTransferReservationQty())
                {
                    WHSOrderCommittedReservationFacade::updateOrderCommittedReservation(
                        committingOriginInventTransId,
                        inventDimId,
                        balanceEntry.getDoNotAllowReservationReductionWithoutTransferReservationQty(),
                        WHSOrderCommittedReservationFacade::ExecuteNow,
                        WHSOrderCommittedReservationFacade::DoNotAllowReserveReduction,
                        WHSOrderCommittedReservationFacade::DoNotUpdateTransferReservation);

                    reservationAdjustmentsCount++;
                }

                if (balanceEntry.getAllowReservationReductionQty())
                {
                    WHSOrderCommittedReservationFacade::updateOrderCommittedReservation(
                        committingOriginInventTransId,
                        inventDimId,
                        balanceEntry.getAllowReservationReductionQty(),
                        WHSOrderCommittedReservationFacade::ExecuteNow,
                        WHSOrderCommittedReservationFacade::AllowReserveReduction,
                        WHSOrderCommittedReservationFacade::UpdateTransferReservation);

                    reservationAdjustmentsCount++;
                }

                if (balanceEntry.getAllowReservationReductionWithoutTransferReservationQty())
                {
                    WHSOrderCommittedReservationFacade::updateOrderCommittedReservation(
                        committingOriginInventTransId,
                        inventDimId,
                        balanceEntry.getAllowReservationReductionWithoutTransferReservationQty(),
                        WHSOrderCommittedReservationFacade::ExecuteNow,
                        WHSOrderCommittedReservationFacade::AllowReserveReduction,
                        WHSOrderCommittedReservationFacade::DoNotUpdateTransferReservation);

                    reservationAdjustmentsCount++;
                }
            }
        }

        return reservationAdjustmentsCount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>