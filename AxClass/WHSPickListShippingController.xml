<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPickListShippingController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSPickListShippingController</c> class is used to run print management of the <c>WHSPickListShipping</c> report.
/// </summary>
class WHSPickListShippingController extends SrsPrintMgmtController implements BatchRetryable
{
    str     range;
    boolean shipmentRange;
    private static const str CurUserIdParameterName = 'CurrentUserId';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds range for the report.
    /// </summary>
    void buildRange()
    {
        WHSWaveLine         waveLine;
        WHSProdWaveLine     prodWaveLine;

        switch (this.parmArgs().dataset())
        {
            case tableNum(WHSWaveTable):
                WHSWaveTable waveTable = this.parmArgs().record();
                while select ShipmentId from waveLine
                    where waveLine.WaveId        == waveTable.WaveId &&
                          waveLine.ShipmentId    != ''
                {
                    shipmentRange = true;
                    if (!range)
                    {
                        range = waveLine.ShipmentId;
                    }
                    else
                    {
                        range += ',' + waveLine.ShipmentId;
                    }
                }

                while select ProdId from prodWaveLine
                    where prodWaveLine.WaveId    == waveTable.WaveId &&
                          prodWaveLine.ProdId       != ''
                {
                    if (!range)
                    {
                        range = prodWaveLine.ProdId;
                    }
                    else
                    {
                        range += ',' + prodWaveLine.ProdId;
                    }
                }
                break;

            case tableNum(WHSShipmentTable):
                WHSShipmentTable shipmentTable = this.parmArgs().record();
                range = shipmentTable.ShipmentId;
                shipmentRange = true;
                break;

            case tableNum(WHSLoadTable):
                WHSLoadTable loadTable = this.parmArgs().record();
                range = loadTable.LoadId;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        this.setRanges();

        SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();
        if (rdlContract.parameterExists(WHSPickListShippingController::CurUserIdParameterName))
        {
            rdlContract.getParameter(WHSPickListShippingController::CurUserIdParameterName).setValueTyped(curUserId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    protected void runPrintMgmt()
    {
        this.initializePrintManagementReportRun();

        this.outputReports();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePrintManagementReportRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PrintMgmtReportRun</c> object.
    /// </summary>
    protected void initializePrintManagementReportRun()
    {
        switch (this.parmArgs().dataset())
        {
            case tableNum(WHSWaveTable):
                if (WHSWaveTable::getWorkTransType(this.parmArgs().record().(fieldNum(WHSWaveTable, WaveId))) == WHSWorkTransType::ProdPick)
                {
                    printMgmtReportRun = PrintMgmtReportRun::construct(PrintMgmtHierarchyType::WHS, PrintMgmtNodeType::WHS, PrintMgmtDocumentType::WHSPickListProd);
                }
                else
                {
                    printMgmtReportRun = PrintMgmtReportRun::construct(PrintMgmtHierarchyType::WHS, PrintMgmtNodeType::WHS, PrintMgmtDocumentType::WHSPickListShippingWave);
                }
                break;

            case tableNum(WHSLoadTable):
                printMgmtReportRun = PrintMgmtReportRun::construct(PrintMgmtHierarchyType::WHS, PrintMgmtNodeType::WHS, PrintMgmtDocumentType::WHSPickListShippingLoad);
                break;

            case tableNum(WHSShipmentTable):
                printMgmtReportRun = PrintMgmtReportRun::construct(PrintMgmtHierarchyType::WHS, PrintMgmtNodeType::WHS, PrintMgmtDocumentType::WHSPickListShippingShipment);
                break;
        }

        printMgmtReportRun.parmReportRunController(this);

        printMgmtReportRun.load(this.parmArgs().record(), this.parmArgs().record(), Global::currentUserLanguage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    private void setRanges()
    {
        QueryBuildRange         queryBuildRange;

        Query q = this.getFirstQuery();
        QueryBuildDataSource queryBuildDataSource = SysQuery::findOrCreateDataSource(q, tableNum(WHSWorkLine));

        this.buildRange();

        if (this.parmArgs().dataset() == tableNum(WHSLoadTable))
        {
            queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WHSWorkLine, LoadId));
            queryBuildRange.value(range);
        }
        else if (shipmentRange)
        {
            queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WHSWorkLine, ShipmentId));
            queryBuildRange.value(range);
        }
        else if (range) // If not a load or shipment range then must be a producation order range
        {
            queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WHSWorkLine, OrderNum));
            queryBuildRange.value(range);

            QueryBuildDataSource whsWorkTable = SysQuery::findOrCreateDataSource(q, tableNum(WHSWorkTable));
            QueryBuildRange workTableRange = SysQuery::findOrCreateRange(whsWorkTable, fieldNum(WHSWorkTable, WorkTransType));
            workTableRange.value(queryValue(WHSWorkTransType::ProdPick));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>