<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_DebtDebitReservationDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RTax25RegCalc_DebtDebitReservationDetail extends RTax25RegCalc implements BatchRetryable
{
    container           debtAmounts;
    AmountMST           regBadDebtAmount,      // Total bad debt amount

                        regPctReceipt,         // Percent from receipt

                        regReserve,            // Bad debt reserve for a current period
                        regUnusedReserve,      // Reserve remain from last period

                        regExpence,
                        regRevenue;

    RefTableId          refTableId;
    RefRecId            refRecId;

    RefRecId            profitTableRecId;
    RTax25DebtModel     rTax25DebtModel;
    TransDate           modelStartDate;
    TransDate           modelEndDate;
    container           totals;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        try
        {
            ttsbegin;

            super();

            if (modelEndDate == dateTo)
            {
                this.calcRegistry();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates reserve limit.
    /// </summary>
    /// <returns>
    /// The reserve limit.
    /// </returns>

    protected AmountMST calcReceipt()
    {
        RTax25StdExpressionTable                    expressionTable;
        RTax25StdExpression                         expression;
        RTax25StdChannel_ARRegister                 channel;
        RTax25RegType_DebtDebitReservationDetail    regTypeReserve;
        AmountMST                                   receiptLimit;

        if (! rTax25DebtModel.RevenueSeqNum)
        {
            return 0;
        }

        channel = RTax25StdChannel_ARRegister::construct();
        channel.open();

        while select expressionTable
        where expressionTable.SeqNum == rTax25DebtModel.RevenueSeqNum
        {
            expression = RTax25StdExpression::newParameters(expressionTable,
                                                        channel,
                                                        dateFrom,
                                                        dateTo,
                                                        rTax25PeriodIterator);
            expression.calc();
        }

        channel.close();

        if (regType is RTax25RegType_DebtDebitReservationDetail)
        {
            regTypeReserve = regType as RTax25RegType_DebtDebitReservationDetail;

            if (channel.transMap().exists(regTypeReserve.revLimitFieldId()))
            {
                receiptLimit = channel.transMap().lookup(regTypeReserve.revLimitFieldId()).decimal();
            }
        }

        if (receiptLimit < 0)
        {
            warning("@RTax25BadDebtReserve:ReserveLimitNegative");
            receiptLimit = 0;
        }

        return receiptLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRegistry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains main logic of the register calculation.
    /// </summary>

    protected void calcRegistry()
    {
        RTax25DebtModelPeriod       debtPeriod;
        RTax25Query                 inventoryQuery, reservMovement;
        container                   childRegistryId;
        RTax25RegisterJournalTrans  childJournal;
        RTax25DebtLedgerAccounts    debtLedgerAccounts;
        AmountMST                   debtAmount;
        AmountMST                   badDebtAmountTotal;
        int                         i;
        int                         percentCount;
        real                        factor;
        Percent                     percent[];
        MapEnumerator               mapEnumerator;
        CustVendTrans               custVendTrans;
        DimensionDefault            expenseDefaultDimension,
                                    revenueDefaultDimension;
        Map                         mapRegLines = new Map(Types::Container, Types::Container);

        const int DebtPosStart = 5;
        const int ExclFromReserve = 4;
        const int ReserveRemainder = 8;
        const int AccObject = 1;
        const int PostingDate = 2;
        const int DueDate = 3;


        while select Percent from debtPeriod
        order by DaysFrom
        where debtPeriod.DebtModel == rTax25DebtModel.RecId
        {
            percentCount++;
            percent[percentCount] = debtPeriod.Percent;
        }

        childRegistryId  = regType.childRegisters();
        childJournal = RTax25RegCalcController::findChildJournalTrans(conpeek(regType.childRegisters(), 1), registerJournalTrans);

        inventoryQuery   = RTax25Query::newParameters(conpeek(childRegistryId, 1), childJournal, true);

        if (inventoryQuery.first())
        {
            do
            {
                refTableId  = inventoryQuery.getRecord().RefTableId;
                refRecId    = inventoryQuery.getRecord().RefRecId;

                regBadDebtAmount = 0;
                debtAmounts = [inventoryQuery.getField(AccObject),
                           inventoryQuery.getField(PostingDate),
                           inventoryQuery.getField(DueDate)];

                for (i = 1; i <= percentCount; i++)
                {
                    debtAmount = inventoryQuery.getField(DebtPosStart + (i - 1));
                    if (percent[i])
                    {
                        debtAmounts += debtAmount;
                        if (! inventoryQuery.getField(ExclFromReserve))
                        {
                            regBadDebtAmount += debtAmount * percent[i] / 100;
                        }
                    }
                }

                debtAmounts += regBadDebtAmount;
                badDebtAmountTotal += regBadDebtAmount;

                mapRegLines.insert([refTableId, refRecId], debtAmounts);
            }
            while (inventoryQuery.next());
        }

        regPctReceipt = this.calcReceipt();

        factor = badDebtAmountTotal ? regPctReceipt / badDebtAmountTotal : 0;

        regQuery.addHeaderRecord();

        mapEnumerator = mapRegLines.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            [refTableId, refRecId] = mapEnumerator.currentKey();
            debtAmounts = mapEnumerator.currentValue();

            regBadDebtAmount = conPeek(debtAmounts, conLen(debtAmounts));
            regPctReceipt = CurrencyExchangeHelper::amount(factor * regBadDebtAmount);

            if (rTax25DebtModel.RevenueSeqNum && ! rTax25DebtModel.ReserveLimitOnDelta)
            {
                regReserve = min(regPctReceipt, regBadDebtAmount);
            }
            else
            {
                regReserve = regBadDebtAmount;
            }

            regUnusedReserve  = 0;

            reservMovement   = RTax25Query::newParameters(this.reserveMovRegType(),
                                                      RTax25RegCalcController::findChildJournalTrans(this.reserveMovRegType(),
                                                                                                     registerJournalTrans), true);

            reservMovement.createRegQuery();
            reservMovement.addRangeValue(fieldName2Id(reservMovement.getRecord().TableId, 'RefTableId'), queryValue(refTableId));
            reservMovement.addRangeValue(fieldName2Id(reservMovement.getRecord().TableId, 'RefRecId'), queryValue(refRecId));

            if (reservMovement.first())
            {
                regUnusedReserve = reservMovement.getField(ReserveRemainder);
            }

            regExpence  = regReserve - regUnusedReserve;

            if (regExpence > 0)
            {
                regRevenue = 0;
            }
            else
            {
                regRevenue = -regExpence;
                regExpence = 0;
            }

            if (rTax25DebtModel.RevenueSeqNum && rTax25DebtModel.ReserveLimitOnDelta)
            {
                regExpence = min(regPctReceipt, regExpence); //only expense is limited
                if (! regRevenue)
                {
                    regReserve = regUnusedReserve + regExpence;
                }
            }

            custVendTrans = RTax25DebtAmounts::getSourceDocTrans(refTableId, refRecId);

            debtLedgerAccounts = RTax25DebtLedgerAccounts::getAccounts(
            rTax25DebtModel.RecId,
            custVendTrans.TableId == tableNum(CustTrans) ?
            ModuleCustVend::Cust                         :
            ModuleCustVend::Vend,
            custVendTrans.AccountNum);

            revenueDefaultDimension = RTax25ProfitTable::profitRecId2DefaultDimension(debtLedgerAccounts.RTax25ProfitTableProfit);
            expenseDefaultDimension = RTax25ProfitTable::profitRecId2DefaultDimension(debtLedgerAccounts.rTax25ProfitTableLoss);

            if (!revenueDefaultDimension || !expenseDefaultDimension)
            {
                throw error(strFmt("@RTax25BadDebtReserve:ExpenseCodeNotSet", rTax25DebtModel.ModelId, custVendTrans.AccountNum));
            }

            profitTableRecId = RTax25ProfitTable::findDefaultDimension(regRevenue ? revenueDefaultDimension : expenseDefaultDimension).RecId;

            this.saveRegistry();
        }

        regQuery.addFooterRecord(0, totals, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean ret;
        RTax25DebtModelPeriod debtPeriod;

        ret = super();

        if (CustParameters::taxation_RU(registerJournalTrans.toDate()) != CustTaxation_RU::OnDelivery)
        {
            ret = checkFailed("@GLS104248");
        }

        select count(RecId) from debtPeriod
        where debtPeriod.DebtModel == regType.badDebtModel() &&
              debtPeriod.Percent  != 0;

        if (debtPeriod.RecId < 1)
        {
            ret = checkFailed("@GLS104246");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean             ret = super(_registerJournalTrans, _batch);

        debtAmounts         = conNull();
        regBadDebtAmount    = 0;

        rTax25DebtModel = RTax25DebtModel::findRecId(regType.badDebtModel());

        [modelStartDate, modelEndDate] = RTax25DebtModel::periodDates(rTax25DebtModel.PeriodType, dateTo);

        if (modelEndDate == dateTo)
        {
            dateFrom = modelStartDate;
        }

        totals = ['', dateNull(), dateNull()];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveMovRegType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a relevant reserve movement register type.
    /// </summary>
    /// <returns>
    /// A relevant reserve movement register type.
    /// </returns>

    protected RTax25RegisterType reserveMovRegType()
    {
        return RTax25RegisterType::DebtDebitReservMovementDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRegistry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a line in the tax register.
    /// </summary>

    protected void saveRegistry()
    {
        container newLine = debtAmounts +
        [regPctReceipt,
        CurrencyExchangeHelper::amount(regReserve),
        regUnusedReserve,
        CurrencyExchangeHelper::amount(regExpence),
        CurrencyExchangeHelper::amount(regRevenue)];

        if (regPctReceipt || regReserve || regUnusedReserve || regExpence || regRevenue)
        {
            regQuery.addBodyRecord(profitTableRecId,
                               newLine,
                               refTableId,
                               refRecId,
                               "",
                               0,
                               CurrencyExchangeHelper::amount(regExpence ? regExpence : regRevenue));

            this.updateTotals(newLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    private void updateTotals(container _regLine)
    {
        int i;
        const int TotalStartPos = 4;
        boolean firstLine = conLen(totals) < TotalStartPos;

        for (i = TotalStartPos; i <= conLen(_regLine); i++)
        {
            if (firstLine)
            {
                totals += conPeek(_regLine, i);
            }
            else
            {
                totals = conPoke(totals, i, conPeek(totals, i) + conPeek(_regLine, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>