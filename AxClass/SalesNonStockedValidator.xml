<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesNonStockedValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesNonStockedValidator</c> class is the validation class for the non-stocked sales order
/// lines.
/// </summary>
class SalesNonStockedValidator extends TradeNonStockedValidator
{
    SalesLine       salesLine;

    UnitQty         registered;
    UnitQty         delivered;
    UnitQty         invoiced;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantities and sets the <c>totalsHasBeenCalculated</c> value to true.
    /// </summary>
    protected void calcSum()
    {
        if (!totalsHasBeenCalculated)
        {
            registered  = this.registered();
            delivered   = this.delivered();
            invoiced    = this.invoiced();
            totalsHasBeenCalculated = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delivered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivered quantity for the line.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    protected UnitQty delivered()
    {
        SalesQty   qtySales;

        qtySales  += (select sum(Qty) from custPackingSlipTrans
                        where custPackingSlipTrans.InventTransId == salesLine.InventTransId).Qty;

        return qtySales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoiced quantity for the line.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    protected UnitQty invoiced()
    {
        return salesLine.invoicedInTotalServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the allowed over delivery percent for the sales line.
    /// </summary>
    /// <returns>
    /// A <c>Percent</c> value.
    /// </returns>
    public Percent overDeliveryPct()
    {
        return salesLine.overDeliveryPct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    public SalesLine parmSalesLine(SalesLine _salesLine = salesLine)
    {
        salesLine = _salesLine;
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchLine</Name>
				<Source><![CDATA[
    public SalesPurchLine parmSalesPurchLine(SalesPurchLine _salesPurchLine = salesPurchLine)
    {
        salesPurchLine  = _salesPurchLine;
        salesLine       = _salesPurchLine;

        return salesPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyFinancialUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the quantity which has been financially updated.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    public UnitQty qtyFinancialUpdated()
    {
        this.calcSum();

        return invoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyphysicalUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and retrieves the quantity that has been packing slip updated, but not yet financially
    /// updated.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    public UnitQty qtyphysicalUpdated()
    {
        this.calcSum();

        return delivered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyphysicalUpdatedAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and retrieves the quantity that has been physically updated by either registering or
    /// receiving.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    public UnitQty qtyphysicalUpdatedAll()
    {
        this.calcSum();

        return  registered + delivered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the registered quantity for the line.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    protected UnitQty registered()
    {
        return salesLine.registeredInSalesUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>underDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the allowed under delivery percent for the line.
    /// </summary>
    /// <returns>
    /// A <c>Percent</c> value.
    /// </returns>
    public Percent underDeliveryPct()
    {
        return salesLine.underDeliveryPct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static SalesNonStockedValidator construct()
    {
        return new SalesNonStockedValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SalesNonStockedValidator</c> class by using the specified
    /// <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> record in which to create the <c>SalesNonStockedValidator</c> object.
    /// </param>
    /// <returns>
    /// A new instance of the <c>SalesNonStockedValidator</c> class.
    /// </returns>
    public static SalesNonStockedValidator newFromSalesLine(SalesLine _salesLine)
    {
        SalesNonStockedValidator salesNonStockedValidator;

        switch (_salesLine.SalesType)
        {
            case SalesType::Sales:
                salesNonStockedValidator = SalesNonStockedValidator::construct();
                break;
            case SalesType::ReturnItem:
                salesNonStockedValidator = SalesReturnNonStockedValidator::construct();
                break;
        }
        salesNonStockedValidator.parmSalesLine(_salesLine);
        salesNonStockedValidator.parmSalesPurchLine(_salesLine);

        return salesNonStockedValidator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>