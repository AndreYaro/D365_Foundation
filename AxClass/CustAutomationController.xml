<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAutomationController</c> class will generate customer automation batch jobs.
/// </summary>
internal final class CustAutomationController extends SysOperationServiceController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args args)
    {
        IdentifierName className;
        IdentifierName methodName;
        SysOperationExecutionMode executionMode;

        try
        {
            [className, methodName, executionMode] = SysOperationServiceController::parseServiceInfo(args);
            CustAutomationController controller = new CustAutomationController(className, methodName, executionMode);

            CustAutomationContract contract = controller.getContract();

            contract.parmCustAutomationStrategy(args.record());

            controller.runOperation();
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@CustAutomation:Automation";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Batch doBatch()
    {
        CustAutomationContract contract = this.getContract();
        contract.parmNeedsToBeSplitIntoTasks(true);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    internal CustAutomationContract getContract()
    {
        return this.getDataContractInfoObject().dataContractObject() as CustAutomationContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {   
        if (this.getContract().parmNeedsToBeSplitIntoTasks())
        {
            this.preProcessWork(this.getContract());
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCustAutomation</Name>
				<Source><![CDATA[
    internal void runCustAutomation(CustAutomationContract _contract)
    {
        if (_contract.parmNeedsToBeSplitIntoTasks())
        {
            this.preProcessWork(_contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessWork</Name>
				<Source><![CDATA[
    private void preProcessWork(CustAutomationContract _contract)
    {
        this.cleanUpInvoiceAutomationHistory();
        this.setCustAutomationStrategyFromScheduleOccurrence();
        CustAutomationAssignmentTmp custAssignment = this.buildCustAutomationProcessAssignment();
        this.buildContract(_contract, custAssignment);
        this.spawnAutomationTasks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpInvoiceAutomationHistory</Name>
				<Source><![CDATA[
    private void cleanUpInvoiceAutomationHistory()
    {
        CustAutomationInvoice::removeRecordsByExecutionDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCustAutomationProcessAssignment</Name>
				<Source><![CDATA[
    private CustAutomationAssignmentTmp buildCustAutomationProcessAssignment()
    {
        return CustAutomationProcessAssignment::newForStrategy(this.getContract().parmCustAutomationStrategy().StrategyName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildContract</Name>
				<Source><![CDATA[
    private void buildContract(CustAutomationContract _contract, CustAutomationAssignmentTmp _custAssignment)
    {
        this.populateCustAutomationInvoice(_custAssignment);
        this.setActivityCreation(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivityCreation</Name>
				<Source><![CDATA[
    private void setActivityCreation(CustAutomationContract _contract)
    {
        _contract.parmCreateActivitiesForAutomations(CustAutomationParameters::find().CreateActivitiesForAutomations);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustAutomationStrategyFromScheduleOccurrence</Name>
				<Source><![CDATA[
    private void setCustAutomationStrategyFromScheduleOccurrence()
    {
        CustAutomationContract contract = this.getContract();
        CustAutomationCriteria criteria = CustAutomationCriteria::findByOccurrence(contract.parmProcessScheduleOccurrenceRecId());
        CustAutomationStrategy strategy = CustAutomationStrategy::findByName(criteria.StrategyName);
        contract.parmCustAutomationStrategy(strategy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustAutomationInvoice</Name>
				<Source><![CDATA[
    private void populateCustAutomationInvoice(CustAutomationAssignmentTmp _custAssignment)
    {
        CustAutomationInvoiceBuilder::populateCustAutomationInvoice(this.getContract(), _custAssignment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>spawnAutomationTasks</Name>
				<Source><![CDATA[
    private void spawnAutomationTasks()
    {
        BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();

        if (batchHeader == null)
        {
            batchHeader = BatchHeader::construct();
        }

        CustAutomationController finalTasks = this.cloneForSubProcess(this.getContract(), classStr(CustAutomationFinalTasks), methodStr(CustAutomationFinalTasks, completeFinalTasks));
        batchHeader.addTask(finalTasks);

        int numberOfBatchTasks = this.calculateNumberOfBatchTasks();

        for (int i = 1; i <= numberOfBatchTasks; i++)
        {
            this.addTask(this.getContract(), batchHeader, finalTasks);
        }

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTask</Name>
				<Source><![CDATA[
    private void addTask(
        CustAutomationContract _contract,
        BatchHeader _batchHeader,
        CustAutomationController _finalTask)
    {
        CustAutomationController controller;

        controller = this.cloneForSubProcess(_contract, classStr(CustAutomationActionDriver), methodStr(CustAutomationActionDriver, run));
        _batchHeader.addTask(controller);
        _batchHeader.addDependency(_finalTask, controller, BatchDependencyStatus::FinishedOrError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNumberOfBatchTasks</Name>
				<Source><![CDATA[
    private int calculateNumberOfBatchTasks()
    {
        CustAutomationParameters parameters = CustAutomationParameters::find();
        parameters.PercentCustomersPerBatchTask = parameters.PercentCustomersPerBatchTask > 100 ? 100 : parameters.PercentCustomersPerBatchTask;

        return any2int(100 / parameters.PercentCustomersPerBatchTask);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cloneForSubProcess</Name>
				<Source><![CDATA[
    private CustAutomationController cloneForSubProcess(
        CustAutomationContract _contract,
        IdentifierName _className,
        IdentifierName _classMethodName)
    {
        CustAutomationController controller = new CustAutomationController(
            _className,
            _classMethodName,
            SysOperationExecutionMode::Synchronous);

        CustAutomationContract newContract = controller.getDataContractInfoObject().dataContractObject() as CustAutomationContract;
        
        newContract.parmNeedsToBeSplitIntoTasks(NoYes::No);
        newContract.parmCustAutomationStrategy(_contract.parmCustAutomationStrategy());
        newContract.parmCreateActivitiesForAutomations(_contract.parmCreateActivitiesForAutomations());
        newContract.initializeFromScheduleWorkItem(_contract);

        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>