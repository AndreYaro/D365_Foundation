<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransferToJournalPurchase</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerTransferToJournalPurchase extends LedgerTransferToJournal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount getLedgerDimension(LedgerDimensionDefaultAccount _defaultAccount, DimensionDefault _defaultDimension)
    {
        MainAccountLegalEntity          mainAccountLegalEntity;
        recId                           mainAccountId;

        mainAccountId = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_defaultAccount);
        mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccountId, CompanyInfo::current());

        return LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultAccount, _defaultDimension, mainAccountLegalEntity.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerJournalTrans</Name>
				<Source><![CDATA[
    public void insertLedgerJournalTrans(
        LedgerJournalTable _ledgerJournalTable,
        LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans              ledgerJournalOldTrans   = _ledgerJournalTrans;
        LedgerJournalTrans              ledgerJournalNewTrans;
        LedgerDimensionDefaultAccount   defaultAccount;
        AmountCur                       amountCur;
        // <GIN>
        LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtensionIN;
        amountCur                       withholdTaxAmount;
        #ISOCountryRegionCodes
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt;
        // </GIN>

        super(_ledgerJournalTable, _ledgerJournalTrans);

        ledgerJournalNewTrans                       = ledgerJournalOldTrans.data(); // set off non approved vendors
        // <GTH>
        ledgerJournalNewTrans.SysExtensionSerializerMap::copyExtensionTableData(ledgerJournalOldTrans);
        // </GTH>

        if (ledgerJournalNewTrans.AccountType != LedgerJournalACType::Vend)
        {
            return;
        }
        ledgerJournalNewTrans.JournalNum            = toLedgerJournalId;

        ledgerJournalNewTrans.AccountType = LedgerJournalACType::Ledger;
        defaultAccount = (VendTable::findByLedgerDimension(ledgerJournalOldTrans.parmLedgerDimension()).summaryLedgerDimension(ledgerJournalOldTrans.PostingProfile));

        ledgerJournalNewTrans.LedgerDimension = this.getLedgerDimension(defaultAccount, _ledgerJournalTrans.DefaultDimension);
        ledgerJournalNewTrans.DefaultDimension = 0;

        ledgerJournalNewTrans.AmountCurCredit       = ledgerJournalOldTrans.AmountCurDebit;
        ledgerJournalNewTrans.AmountCurDebit        = ledgerJournalOldTrans.AmountCurCredit;

        if (!ledgerJournalOldTrans.ledgerJournalTable().LedgerJournalInclTax
            // <GIN>
            && !formulaWithPriceInclTax
            // </GIN>
            )
        {
            if (ledgerJournalNewTrans.AmountCurCredit)
            {
                ledgerJournalNewTrans.AmountCurCredit  -= taxAmountCur;
            }
            else
            {
                ledgerJournalNewTrans.AmountCurDebit   += taxAmountCur;
            }
        }

        //<GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            ledgerJournalTransTaxExt = ledgerJournalOldTrans.ledgerJournalTransTaxExtensionIN();
            withholdTaxAmount = ledgerJournalEngine_Server::getWithholdTaxAmount_IN(ledgerJournalOldTrans.VendTransId, ledgerJournalTransTaxExt.tdsGroup, ledgerJournalTransTaxExt.tcsGroup);
            if (ledgerJournalNewTrans.AmountCurCredit)
            {
                ledgerJournalNewTrans.AmountCurCredit  += withholdTaxAmount;
            }
            else
            {
                ledgerJournalNewTrans.AmountCurDebit   -= withholdTaxAmount;
            }
        }
        //</GIN>

        ledgerJournalNewTrans.OffsetCompany         = ledgerJournalOldTrans.Company;
        ledgerJournalNewTrans.OffsetTxt             = ledgerJournalOldTrans.Txt;
        ledgerJournalNewTrans.VendTransId           = ledgerJournalOldTrans.VendTransId;

        ledgerJournalNewTrans.OffsetAccountType = LedgerJournalACType::Ledger;
        ledgerJournalNewTrans.parmOffsetLedgerDimension(0);
        ledgerJournalNewTrans.OffsetDefaultDimension = 0;

        ledgerJournalNewTrans.TaxGroup              = '';
        ledgerJournalNewTrans.TaxItemGroup          = '';
        ledgerJournalNewTrans.TaxCode               = '';

        ledgerJournalNewTrans.Transferred           = NoYes::Yes;
        ledgerJournalNewTrans.NoEdit                = NoYes::Yes;
        ledgerJournalNewTrans.PurchLedgerPosting    = ArrivalPostingType::Vendor;

        amountCur                                   = ledgerJournalNewTrans.AmountCurDebit;
        ledgerJournalNewTrans.AmountCurDebit        = ledgerJournalNewTrans.AmountCurCredit;
        ledgerJournalNewTrans.AmountCurCredit       = amountCur;

        ledgerJournalNewTrans.LineNum = LedgerJournalTrans::lastLineNum(ledgerJournalNewTrans.JournalNum) + 1;

        ledgerJournalNewTrans.insert();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalNewTrans);
            ledgerJournalTransTaxExtensionIN.LedgerJournalTrans = ledgerJournalNewTrans.RecId;
            ledgerJournalTransTaxExtensionIN.insert();
        }
        // </GIN>

        if (newLedgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool
            && TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(LedgerJournalType::VendInvoicePool))
        {
            LedgerJournalTransTaxExtension::copyLedgerJournalTransTaxExtension(ledgerJournalOldTrans, ledgerJournalNewTrans, true);
        }

        defaultAccount = (VendTable::findByLedgerDimension(ledgerJournalOldTrans.parmLedgerDimension()).purchLedgerDimension(ledgerJournalOldTrans.PostingProfile));

        ledgerJournalNewTrans.LedgerDimension = this.getLedgerDimension(defaultAccount, _ledgerJournalTrans.DefaultDimension);
        ledgerJournalNewTrans.PurchLedgerPosting    = ArrivalPostingType::Arrival;

        ledgerJournalNewTrans.createTransferTrans(ledgerJournalNewTrans,toLedgerJournalId);

        info(strFmt("@SYS27369",ledgerJournalOldTrans.Voucher));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>