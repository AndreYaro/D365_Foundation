<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetNode</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetNode</c> class represents a costing sheet node.
/// </summary>
abstract class CostSheetNode implements SysPackable
{
    #resAppl

    CostSheetId                 sheetId;
    CostSheetNodeId             nodeId;
    CostSheetNodeCode           code;
    CostSheetNodeDescription    description;
    CostSheetNodeId             parentNodeId;
    CostCalcTransData           costCalcTransData;
    boolean                     calculated;
    CostPriceType               costType;
    Set                         costGroupImpactSet; // The cost group IDs that impact the node

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        sheetId,
        nodeId,
        code,
        description,
        parentNodeId,
        costType
    #endmacro

    #localmacro.PackedListV2
        sheetId,
        nodeId,
        code,
        description,
        parentNodeId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCostGroupImpactSet</Name>
				<Source><![CDATA[
    public Set parmCostGroupImpactSet()
    {
        return costGroupImpactSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCalculatedCostsFromLowerLevels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets calculated earlier indirect costs from lower levels for indirect cost group nodes.
    /// </summary>
    /// <param name="_costCalcTransData">
    ///    A <c>CostCalcTransData</c> object that contains direct costs from all levels and indirect costs
    ///    from lower levels.
    /// </param>
    /// <remarks>
    ///    Only the <c>CostSheetNodeGroup</c> class should have this method overridden.
    /// </remarks>
    protected void addCalculatedCostsFromLowerLevels(CostCalcTransData _costCalcTransData)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
/// <summary>
    ///    Calculates the amounts based on input data and costing sheet structure.
    /// </summary>
    /// <param name="_costSheet">
    ///    The costing sheet object.
    /// </param>
    /// <param name="_costCalcTransData">
    ///    The <c>CostCalcTransData</c> object that has input data.
    /// </param>
    /// <returns>
    ///    A <c>CostCalcTransData</c> object.
    /// </returns>
    /// <remarks>
    ///    Every node may be in either "calculated" or "not calculated‚Äù state. The costing sheet is calculated
    ///    in one or more passes until all nodes have "calculated" status. If the node is a "leaf", that is,
    ///    has no subnodes, the <c>calcLowestLevel</c> method is called that processes the input data and
    ///    marks the node as "calculated". If the node is a composite, that is, has subnodes, it is marked as
    ///    "calculated" after all its subnodes are "calculated".
    /// </remarks>
    public CostCalcTransData calc(
        CostSheet           _costSheet,
        CostCalcTransData   _costCalcTransData)
    {
        if (!calculated)
        {
            costCalcTransData.initCostCalcTransData(_costCalcTransData);
        }

        return costCalcTransData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLowestLevel</Name>
				<Source><![CDATA[
public void calcLowestLevel(
        CostSheet           _costSheet,
        CostCalcTransData   _costCalcTransData)
    {
        calculated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveSubnode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a proposed node may be added as a subnode.
    /// </summary>
    /// <param name="_node">
    ///    The potential subnode.
    /// </param>
    /// <returns>
    ///    true if the potential subnode is valid; otherwise, false.
    /// </returns>
    abstract public boolean canHaveSubnode(CostSheetNode _node)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveSubnodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the instance of the costing sheet node can have subnodes.
    /// </summary>
    /// <returns>
    ///    true if the object can have subnodes; otherwise, false.
    /// </returns>
    abstract public boolean canHaveSubnodes()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFailed</Name>
				<Source><![CDATA[
    protected boolean checkFailed(SysInfoLogStr _txt)
    {
        return checkFailed(_txt, '', SysInfoAction_CostSheetValidate::newNodeId(nodeId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCalcTransData</Name>
				<Source><![CDATA[
public void clearCalcTransData()
    {
        calculated          = false;
        costCalcTransData   = CostCalcTransData::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCommon</Name>
				<Source><![CDATA[
public Common editCommon(
        TableId _tableId,
        boolean _set = false,
        Common  _common = null
        )
    {
        Common  common;

        switch (_tableId)
        {
            case tableNum(CostSheetNodeTable) :
                common = this.editCostSheetNodeTable(_set, _common);
                break;
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCostSheetNodeTable</Name>
				<Source><![CDATA[
protected CostSheetNodeTable editCostSheetNodeTable(
        boolean             _set = false,
        CostSheetNodeTable _costSheetNodeTable = null
        )
    {
        CostSheetNodeTable costSheetNodeTable;

        if (_set)
        {
            code = _costSheetNodeTable.Code;
            description = _costSheetNodeTable.Description;
            costType = _costSheetNodeTable.PriceType;
        }

        costSheetNodeTable.setTmp();
        costSheetNodeTable.clear();
        costSheetNodeTable.SheetId = sheetId;
        costSheetNodeTable.NodeId = nodeId;
        costSheetNodeTable.Code = code;
        costSheetNodeTable.Description = description;
        costSheetNodeTable.Type = this.getType();
        costSheetNodeTable.ParentNodeId = parentNodeId;
        costSheetNodeTable.PriceType = costType;

        return costSheetNodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
public boolean equal(Object _costSheetNode)
    {
        CostSheetNode costSheetNode = _costSheetNode as CostSheetNode;

        if (costSheetNode == null ||
            code != costSheetNode.getCode() ||
            description != costSheetNode.getDescription() ||
            this.getType() != costSheetNode.getType() ||
            this.getCostType() != costSheetNode.getCostType())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchCostGroupIdsForImpactUpdate</Name>
				<Source><![CDATA[
/// <summary>
    ///    Retrieves a set of cost group IDs that should be added to the impact map.
    /// </summary>
    /// <param name="_costSheet">
    ///    The costing sheet identifier.
    /// </param>
    /// <returns>
    ///    A set of cost group IDs.
    /// </returns>
    /// <remarks>
    ///    This class may be overridden for some node types.
    /// </remarks>
    public Set fetchCostGroupIdsForImpactUpdate(CostSheet _costSheet)
    {
        Set                 costGroupIdSet = new Set(Types::String);
        CostTmpCalcTrans    costTmpCalcTrans;

        costTmpCalcTrans.setTmpData(costCalcTransData.getCostTmpCalcTrans());
        while select CostGroupId from costTmpCalcTrans
        {
            costGroupIdSet.add(costTmpCalcTrans.CostGroupId);
        }
        // Inherit the existed impact set.
        if (costGroupImpactSet)
        {
            costGroupIdSet = Set::union(costGroupIdSet, costGroupImpactSet);
        }

        return costGroupIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCostGroupImpactMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the node to the impact map.
    /// </summary>
    /// <param name="_costGroupImpactMap">
    ///    The impact map that stores relations between the cost groups and the costing sheet nodes.
    /// </param>
    public void fillCostGroupImpactMap(CostSheetCostGroupImpactMap _costGroupImpactMap /*in-out*/)
    {
        SetEnumerator costGroupIdEnumerator = costGroupImpactSet.getEnumerator();
        while (costGroupIdEnumerator.moveNext())

        {
            _costGroupImpactMap.registerImpact(nodeId, costGroupIdEnumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillNodeIndexMap</Name>
				<Source><![CDATA[
public void fillNodeIndexMap(CostSheet _costSheet)
    {
        _costSheet.addToNodeIndexMap(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillNodeList</Name>
				<Source><![CDATA[
public void fillNodeList(List _nodeList, CostSheetNodeListType _nodeListType)
    {
        switch (_nodeListType)
        {
            case CostSheetNodeListType::All,
                 CostSheetNodeListType::AllExceptCalculation :
                _nodeList.addEnd(this);
                break;

            case CostSheetNodeListType::Undefined :
                throw error(Error::wrongUseOfFunction(funcName()));

            default :
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillResultLineList</Name>
				<Source><![CDATA[
    public void fillResultLineList(
        CostSheet  _costSheet,
        List       _resultLineList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBranchNodeIds</Name>
				<Source><![CDATA[
public Set getBranchNodeIds()
    {
        Set     allSubnodesNodeIdSet = new Set(Types::Integer);

        allSubnodesNodeIdSet.add(nodeId);

        return allSubnodesNodeIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCode</Name>
				<Source><![CDATA[
public CostSheetNodeCode getCode()
    {
        return code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostCalcTransData</Name>
				<Source><![CDATA[
    public CostCalcTransData getCostCalcTransData()
    {
        return costCalcTransData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>CostPriceType</c> enumeration value that represents the branch of the costing sheet for
    ///    this node.
    /// </summary>
    /// <returns>
    ///    A value in the <c>CostPriceType</c> enumeration.
    /// </returns>
    public CostPriceType getCostType()
    {
        return costType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    public CostSheetNodeDescription getDescription()
    {
        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullPath</Name>
				<Source><![CDATA[
public str getFullPath(CostSheet _costSheet)
    {
        if (parentNodeId == 0)
            return '\\' + code;

        return this.getParentNode(_costSheet).getFullPath(_costSheet) + '\\' + code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the resource index of the image that will represent this node in the editor.
    /// </summary>
    /// <returns>
    ///    The resource ID.
    /// </returns>
    abstract public int getImage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevel</Name>
				<Source><![CDATA[
public Level getLevel(CostSheet _costSheet)
    {
        if (parentNodeId == 0)
            return 0;

        return this.getParentNode(_costSheet).getLevel(_costSheet) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeId</Name>
				<Source><![CDATA[
public CostSheetNodeId getNodeId()
    {
        return nodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentNode</Name>
				<Source><![CDATA[
public CostSheetNode getParentNode(CostSheet _costSheet)
    {
        if (parentNodeId == 0)
            return null;

        return _costSheet.findNode(parentNodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getType</Name>
				<Source><![CDATA[
    abstract CostSheetNodeType getType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSubnodes</Name>
				<Source><![CDATA[
    abstract public boolean hasSubnodes()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalculated</Name>
				<Source><![CDATA[
    public boolean isCalculated()
    {
        return calculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostGroupWithSubnodes</Name>
				<Source><![CDATA[
    protected boolean isCostGroupWithSubnodes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDescendantOf</Name>
				<Source><![CDATA[
public boolean isDescendantOf(
        CostSheet       _costSheet,
        CostSheetNodeId _nodeId)
    {
        if (parentNodeId == 0)
        {
            return false;
        }

        CostSheetNode parentNode = this.getParentNode(_costSheet);

        return parentNode.getNodeId() == _nodeId || parentNode.isDescendantOf(_costSheet, _nodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
/// <summary>
    ///     Initializes a new instance of the <c>CostSheetNode</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    protected void new(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy)
    {
        sheetId             = _costSheetNodeTable.SheetId;
        nodeId              = _costSheetNodeTable.NodeId;
        code                = _costSheetNodeTable.Code;
        description         = _costSheetNodeTable.Description;
        parentNodeId        = _parentNodeId;
        costType            = _costSheetNodeTable.PriceType;
        costCalcTransData   = CostCalcTransData::construct();
        costGroupImpactSet  = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack(boolean _areSurchargesPackedByParentContext = false)
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCostGroupImpact</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a cost group ID that impacts the costing sheet node to the set.
    /// </summary>
    /// <param name="_costSheet">
    ///    The costing sheet identifier.
    /// </param>
    /// <param name="_costGroupId">
    ///    The cost group identifier.
    /// </param>
    /// <remarks>
    ///    This method recursively updates the parent nodes.
    /// </remarks>
    protected void registerCostGroupImpact(
        CostSheet   _costSheet,
        CostGroupId _costGroupId)
    {
        if (!costGroupImpactSet.in(_costGroupId))
        {
            costGroupImpactSet.add(_costGroupId);
            if (parentNodeId != 0)
            {
                this.getParentNode(_costSheet).registerCostGroupImpact(_costSheet, _costGroupId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetNodeId</Name>
				<Source><![CDATA[
public CostSheetNodeId resetNodeId(CostSheetNodeId _newNodeId)
    {
        nodeId = _newNodeId;

        return nodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
public Integer save(
        CostSheet   _costSheet,
        Integer     _lineNum)
    {
        CostSheetNodeTable  costSheetNodeTable;

        costSheetNodeTable.clear();
        costSheetNodeTable.data(this.editCostSheetNodeTable(false, null));
        costSheetNodeTable.LineNum = _lineNum;
        costSheetNodeTable.Level = this.getLevel(_costSheet);
        costSheetNodeTable.insert();

        Integer lineNum = _lineNum + 1;

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParentNodeId</Name>
				<Source><![CDATA[
public void setParentNodeId(CostSheetNodeId _parentNodeId)
    {
        parentNodeId = _parentNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    public str toString()
    {
        return description == '' ? code :
                                   strFmt("%1 - %2",
                                          code,
                                          description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
public boolean unpack(container _packedClass)
    {
        Version             version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            case 2:
                [version, #PackedListV2] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(CostSheetNode _parentNode)
    {
        if (this.getType() != CostSheetNodeType::Price)
        {
            if (_parentNode != null)
            {
                costType = _parentNode.getCostType();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostGroupImpactSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the set of cost group IDs that impact the costing sheet node during calculation.
    /// </summary>
    /// <param name="_costSheet">
    ///    The costing sheet identifier.
    /// </param>
    protected void updateCostGroupImpactSet(CostSheet _costSheet)
    {
        if (calculated && _costSheet.mustUpdateCostGroupImpact())
        {
            SetEnumerator costGroupIdEnumerator = this.fetchCostGroupIdsForImpactUpdate(_costSheet).getEnumerator();
            while (costGroupIdEnumerator.moveNext())
            {
                this.registerCostGroupImpact(_costSheet, costGroupIdEnumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParentNode</Name>
				<Source><![CDATA[
    private boolean checkParentNode(CostSheet _costSheet)
    {
        boolean ret = true;
        boolean parentNodeOK = parentNodeId == 0 ? this.getType() == CostSheetNodeType::Root :
                                                   this.getType() != CostSheetNodeType::Root;

        ret = (parentNodeOK ? true : this.checkFailed("@SYS104703")) && ret;

        if (parentNodeId > 0)
        {
            var validTypes = this.getParentNode(_costSheet).validSubnodeTypeSet();
            var parentSubnodeTypeOK = validTypes.in(this.getType()) ? true : this.checkFailed("@SCM:CostSheetCacheSubnodeTypeNotAllowed");
            ret = parentSubnodeTypeOK && ret;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(CostSheet _costSheet)
    {
        boolean ret = true;
        ret         = (sheetId == '' ? this.checkFailed("@SYS105205") : true) && ret;
        ret         = (nodeId == 0 ? this.checkFailed("@SYS104697") : true) && ret;
        ret         = (code == '' ? this.checkFailed("@SYS104702") : true) && ret;

        ret = this.checkParentNode(_costSheet) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validSubnodeTypeSet</Name>
				<Source><![CDATA[
    abstract public Set validSubnodeTypeSet()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNode</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNode</c> class.
    /// </returns>
    public static CostSheetNode construct(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy)
    {
        CostSheetNode  costSheetNode;

        switch (_costSheetNodeTable.Type)
        {
            case CostSheetNodeType::Root :
                costSheetNode = CostSheetNodeRoot::construct(_costSheetNodeTable, _parentNodeId, _modeStrategy);
                break;

            case CostSheetNodeType::Price :
                costSheetNode = CostSheetNodePrice::construct(_costSheetNodeTable, _parentNodeId, _modeStrategy);
                break;

            case CostSheetNodeType::Total :
                costSheetNode = CostSheetNodeTotal::construct(_costSheetNodeTable, _parentNodeId, _modeStrategy);
                break;

            case CostSheetNodeType::CostGroup :
                costSheetNode = CostSheetNodeGroup::construct(_costSheetNodeTable, _parentNodeId, _modeStrategy);
                break;

            case CostSheetNodeType::CalculationSurcharge,
                 CostSheetNodeType::CalculationRate,
                 CostSheetNodeType::CalculationOutUnitBased,
                 CostSheetNodeType::CalculationInUnitBased,
                 CostSheetNodeType::CalculationPurchUnitBased :

                // When in Calculation mode, the calculation nodes are constructed by other nodes explicitly
                // and are provided the correct parent Cost Group Ids
                costSheetNode = CostSheetNodeCalculation::construct(_costSheetNodeTable, _parentNodeId, _modeStrategy, '');
                break;
        }

        return costSheetNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNode</c> class.
    /// </summary>
    /// <param name="_packedNode">
    ///     A container that holds a serialized <c>CostSheetNode</c> object.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNode</c> class.
    /// </returns>
    public static CostSheetNode create(container _packedNode)
    {
        CostSheetNode      costSheetNode;

        CostSheetNodeType nodeType = conPeek(_packedNode, 2); // [version, nodeType, packedNode]

        switch (nodeType)
        {
            case CostSheetNodeType::Root :
                costSheetNode = CostSheetNodeRoot::create(_packedNode);
                break;

            case CostSheetNodeType::Price :
                costSheetNode = CostSheetNodePrice::create(_packedNode);
                break;

            case CostSheetNodeType::Total :
                costSheetNode = CostSheetNodeTotal::create(_packedNode);
                break;

            case CostSheetNodeType::CostGroup :
                costSheetNode = CostSheetNodeGroup::create(_packedNode);
                break;

            case CostSheetNodeType::CalculationSurcharge :
                costSheetNode = CostSheetNodeCalculationSurcharge::create(_packedNode);
                break;

            case CostSheetNodeType::CalculationRate :
                costSheetNode = CostSheetNodeCalculationRate::create(_packedNode);
                break;

            case CostSheetNodeType::CalculationOutUnitBased :
                costSheetNode = CostSheetNodeCalculationOutUnitBased::create(_packedNode);
                break;

            case CostSheetNodeType::CalculationInUnitBased :
                costSheetNode = CostSheetNodeCalculationInUnitBased::create(_packedNode);
                break;

            case CostSheetNodeType::CalculationPurchUnitBased :
                costSheetNode = CostSheetNodeCalcPurchUnitBased::create(_packedNode);
                break;
        }

        return costSheetNode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>