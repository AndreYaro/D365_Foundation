<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProcurementWorkflowReset</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class ProcurementWorkflowReset
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(args _args)
    {
        Common callerRecord = _args.record();

        if (!callerRecord || callerRecord.TableId != tableNum(WorkflowTrackingStatusTable))
        {
            return;
        }

        WorkflowTrackingStatusTable workflowTrackingStatusTable = WorkflowTrackingStatusTable::findRecId(callerRecord.RecId, true);
        WorkflowContextTableId tableId = workflowTrackingStatusTable.ContextTableId;
        
        if (workflowTrackingStatusTable.TrackingStatus == WorkflowTrackingStatus::Unrecoverable)
        {
            switch(tableId)
            {
                case (tableName2id('PurchReqTable')):
                    ProcurementWorkflowReset::resetPurchReqWorkflow(workflowTrackingStatusTable);
                    break;

                case (tableName2id('PurchTable')):
                    ProcurementWorkflowReset::resetPurchOrderWorkflow(workflowTrackingStatusTable);
                    break;
                
                case (tableName2id('VendTable')):
                    ProcurementWorkflowReset::resetVendorChangeWorkflow(workflowTrackingStatusTable);
                    break;
            }
            info("@SCM:ProcurementWorkflowResetSuccessful");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPurchReqWorkflow</Name>
				<Source><![CDATA[
    private static void resetPurchReqWorkflow(WorkflowTrackingStatusTable _workflowTrackingStatusTable)
    {
        ttsbegin;

        PurchReqTable   purchReqTable;
        PurchReqLine    purchReqLine;

        select firstonly RequisitionStatus from purchReqTable
            where purchReqTable.RecId == _workflowTrackingStatusTable.ContextRecId
               && purchReqTable.TableId == _workflowTrackingStatusTable.ContextTableId;

        if (!purchReqTable)
        {
            return;
        }

        purchReqTable.selectForUpdate(true);
        purchReqTable.RequisitionStatus = PurchReqRequisitionStatus::Draft;
        purchReqTable.doUpdate();

        while select forupdate RequisitionStatus from purchReqLine
            where purchReqLine.PurchReqTable == purchReqTable.RecId
        {
            purchReqLine.RequisitionStatus = PurchReqRequisitionStatus::Draft;
            purchReqLine.doUpdate();
        }

        ProcurementWorkflowReset::resetWorkflowTrackingStatusTable(_workflowTrackingStatusTable);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPurchOrderWorkflow</Name>
				<Source><![CDATA[
    private static void resetPurchOrderWorkflow(WorkflowTrackingStatusTable _workflowTrackingStatusTable)
    {
        ttsbegin;

        PurchTable      purchTable;

        select firstonly DocumentState from purchTable
            where purchTable.RecId == _workflowTrackingStatusTable.ContextRecId
               && purchTable.TableId == _workflowTrackingStatusTable.ContextTableId;

        if (!purchTable)
        {
            return;
        }

        purchTable.selectForUpdate(true);
        purchTable.DocumentState = VersioningDocumentState::Draft;
        purchTable.doUpdate();

        ProcurementWorkflowReset::resetWorkflowTrackingStatusTable(_workflowTrackingStatusTable);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetVendorChangeWorkflow</Name>
				<Source><![CDATA[
    private static void resetVendorChangeWorkflow(WorkflowTrackingStatusTable _workflowTrackingStatusTable)
    {
        ttsbegin;

        VendTable       vendTable;
        select firstonly WorkflowState from vendTable
            where vendTable.RecId == _workflowTrackingStatusTable.ContextRecId
               && vendTable.TableId == _workflowTrackingStatusTable.ContextTableId;

        if (!vendTable)
        {
            return;
        }

        vendTable.selectForUpdate(true);
        vendTable.WorkflowState = VendTableChangeProposalWorkflowState::NotSubmitted;
        vendTable.doUpdate();

        ProcurementWorkflowReset::resetWorkflowTrackingStatusTable(_workflowTrackingStatusTable);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWorkflowTrackingStatusTable</Name>
				<Source><![CDATA[
    private static void resetWorkflowTrackingStatusTable(WorkflowTrackingStatusTable _workflowTrackingStatusTable)
    {
        _workflowTrackingStatusTable.reread();
        _workflowTrackingStatusTable.TrackingStatus = WorkflowTrackingStatus::Cancelled;
        _workflowTrackingStatusTable.doUpdate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>