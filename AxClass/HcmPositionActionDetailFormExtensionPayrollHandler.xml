<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionActionDetailFormExtensionPayrollHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the Payroll form extension events for the <c>HcmPositionActionDetail</c> form.
/// </summary>
class HcmPositionActionDetailFormExtensionPayrollHandler
{
    boolean initialized;
    FormRun element;

    // Extension controls
    FormReferenceGroupControl defaultGLIBenefitControl;
    FormStringControl scheduleControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this form extension event handler class and registers it with the base form.
    /// </summary>
    /// <param name = "_formRunInstance">An instance of the form being extended.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(FormRun _formRunInstance)
    {
        initialized = false;
        element = _formRunInstance;

        // Register this extension with the main form
        element.registerExtensionInstance(classStr(HcmPositionActionDetailFormExtensionPayrollHandler), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form extension handler instance
    /// </summary>
    private void init()
    {
        if (initialized)
        {
            return;
        }

        initialized = true;

        // Cache of the extension controls
        defaultGLIBenefitControl = element.design().controlName(formControlStr(HcmPositionActionDetail, PayrollPositionDetails_DefaultGeneralLiabilityInsuranceBenefit)) as FormReferenceGroupControl;
        scheduleControl = element.design().controlName(formControlStr(HcmPositionActionDetail, Earnings_Schedule)) as FormStringControl;

        // Register overrides
        defaultGLIBenefitControl.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(HcmPositionActionDetailFormExtensionPayrollHandler, onDefaultGLIBenefitLookupReference), this);
        defaultGLIBenefitControl.registerOverrideMethod(methodStr(FormReferenceControl, resolveReference), methodStr(HcmPositionActionDetailFormExtensionPayrollHandler, onDefaultGLIBenefitResolveReference), this);
        scheduleControl.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(HcmPositionActionDetailFormExtensionPayrollHandler, onScheduleLookup), this);
        scheduleControl.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(HcmPositionActionDetailFormExtensionPayrollHandler, onScheduleJumpRef), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionActionDetail_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitializing event handler for the <c>HcmPositionActionDetail.ExtensionPayroll</c> form extension.
    /// </summary>
    /// <param name = "_sender">The <c>HcmPositionActionDetail</c> form being extended.</param>
    /// <param name = "_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmPositionActionDetail), FormEventType::Initializing)]
    public static void HcmPositionActionDetail_OnInitializing(xFormRun _sender, FormEventArgs _e)
    {
        HcmPositionActionDetailFormExtensionPayrollHandler extensionInstance = new HcmPositionActionDetailFormExtensionPayrollHandler(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionActionDetail_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitialized event handler for the <c>HcmPositionActionDetail.Extension</c> form extension.
    /// </summary>
    /// <param name = "_sender">The <c>HcmPositionActionDetail</c> form being extended.</param>
    /// <param name = "_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmPositionActionDetail), FormEventType::Initialized)]
    public static void HcmPositionActionDetail_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        // Initialize the instance of this form extension handler now that the controls exist
        FormRun hcmPositionActionDetailForm = _sender as FormRun;
        HcmPositionActionDetailFormExtensionPayrollHandler extensionInstance = hcmPositionActionDetailForm.getExtensionInstance(classStr(HcmPositionActionDetailFormExtensionPayrollHandler));
        extensionInstance.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDefaultGLIBenefitLookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollWorkerEnrolledBenefitDetail_Position control's lookupReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private Common onDefaultGLIBenefitLookupReference(FormReferenceControl _sender)
    {
        return HcmBenefit::lookupPayrollCategoryBenefits(_sender, PayrollCategory::GeneralLiabilityInsurance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDefaultGLIBenefitResolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollWorkerEnrolledBenefitDetail_Position control's resolveReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private Common onDefaultGLIBenefitResolveReference(FormReferenceGroupControl _sender)
    {
        return HcmBenefit::resolvePayrollCategoryBenefits(_sender, PayrollCategory::GeneralLiabilityInsurance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onScheduleLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the Earnings_Schedule control's lookup.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private void onScheduleLookup(FormStringControl _sender)
    {
        FormDataSource payrollPositionActionDetails_ds = _sender.formRun().dataSource(formDataSourceStr(HcmPositionActionDetail, PayrollPositionActionDetails)) as FormDataSource;
        PayrollPositionActionDetails payrollPositionActionDetails = payrollPositionActionDetails_ds.cursor();

        if (payrollPositionActionDetails.PaidByLegalEntity)
        {
            CompanyInfo companyInfoLocal = CompanyInfo::find(false, payrollPositionActionDetails.PaidByLegalEntity);
            changecompany(companyInfoLocal.DataArea)
            {
                // super()
                _sender.lookup();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onScheduleJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the Earnings_Schedule control's jumpRef.
    /// </summary>
    /// <param name = "_sender">The control initiating the jumpRef.</param>
    private void onScheduleJumpRef(FormStringControl _sender)
    {
        FormDataSource payrollPositionActionDetails_ds = _sender.formRun().dataSource(formDataSourceStr(HcmPositionActionDetail, PayrollPositionActionDetails)) as FormDataSource;
        PayrollPositionActionDetails payrollPositionActionDetails = payrollPositionActionDetails_ds.cursor();

        if (payrollPositionActionDetails.PaidByLegalEntity && payrollPositionActionDetails.ScheduleDataAreaId && payrollPositionActionDetails.Schedule)
        {
            changecompany(payrollPositionActionDetails.ScheduleDataAreaId)
            {
                // super()
                _sender.jumpRef();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Earnings_Schedule_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnValidating event handler for the HcmPositionActionDetail.ExtensionPayroll form extension's Earnings_Schedule control.
    /// </summary>
    /// <param name="_sender">The form control being validated.</param>
    /// <param name="_e">The args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmPositionActionDetail, Earnings_Schedule), FormControlEventType::Validating)]
    public static void Earnings_Schedule_OnValidating(FormControl _sender, FormControlEventArgs _e)
    {
        boolean isValidValue = true;
        FormDataSource payrollPositionActionDetails_ds = _sender.formRun().dataSource(formDataSourceStr(HcmPositionActionDetail, PayrollPositionActionDetails)) as FormDataSource;
        PayrollPositionActionDetails payrollPositionActionDetails = payrollPositionActionDetails_ds.cursor();

        if (payrollPositionActionDetails.PaidByLegalEntity && payrollPositionActionDetails.Schedule)
        {
            // Value set by the lookup
            changecompany(CompanyInfo::getDataArea(payrollPositionActionDetails.PaidByLegalEntity))
            {
                isValidValue = WorkCalendarTable::checkExist(payrollPositionActionDetails.Schedule);
            }
        }

        if (!isValidValue)
        {
            FormControlCancelEventArgs cancelArgs = _e as FormControlCancelEventArgs;
            cancelArgs.cancel(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>