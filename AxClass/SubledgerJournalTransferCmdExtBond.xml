<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalTransferCmdExtBond</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalTransferCmdExtBond</c> class is an extension class for the
/// <c>SubledgerJournalTransferCommand</c> class to transfer correspondence information.
/// </summary>
[SourceDocumentExtensionAttribute()]
class SubledgerJournalTransferCmdExtBond extends SubledgerJournalTransferCommandExtension
{
    #ISOCountryRegionCodes
    SubledgerBondTmp     bond;
    SubledgerBondMapTmp  bondMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether to subscribe the command event.
    /// </summary>
    /// <returns>
    /// True if we can subscribe the command event; otherwise, false.
    /// </returns>
    protected boolean canSubscribe()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>SubledgerBondMapTmp</c> bond map.
    /// </summary>
    /// <param name="_transferID">
    /// Transfer Id for General Journal Account Entry.
    /// </param>
    /// <param name="_transferPolicy">
    /// <c>TransferPolicy</c> value shows should summarized or individual data be transferred.
    /// </param>
    /// <param name="_doSummarization">
    /// true if the method should summarize data for transfer.
    /// </param>
    protected void createMap(RefRecId _transferID, TransferPolicy _transferPolicy, boolean _doSummarization)
    {
        SubledgerJournalAccountEntryBond    subledgerBond;
        SubledgerJournalAccountEntryBond    subledgerBondOffset;
        SubLedgerJournalAccountEntryView    subLedger;
        SubLedgerJournalAccountEntryView    offsetSubLedger;
        GeneralJournalEntry                 generalJournalEntry;
        SubLedgerJournalTransferNumberSeqTmp tmpNumberSeqGen;

        if (_doSummarization)
        {
            insert_recordset bondMap (NewBatchTrans, OriginalBatchTrans, OriginalSubledgerJournalEntry)
            select RecId from bond group by RecId
                join BondBatchTrans from subledgerBond group by BondBatchTrans
                join SubLedgerJournalEntry from subLedger group by SubLedgerJournalEntry
                    where   subLedger.LedgerDimension               == bond.DebitLedgerDimension        &&
                            subLedger.TransactionCurrencyCode       == bond.DebitCurrencyCode           &&
                            subLedger.IsCorrection                  == bond.DebitIsCorrection           &&
                            subLedger.AccountingDate                == bond.DebitAccountingDate         &&
                            subLedger.PostingLayer                  == bond.DebitPostingLayer           &&
                            subLedger.Ledger                        == bond.DebitLedger                 &&
                            subLedger.PostingType                   == bond.DebitPostingType            &&
                            subLedger.SubLedgerJournalAccountEntry  == subledgerBond.SubledgerJournalAccountEntry &&
                            subLedger.SubLedgerJournalEntry         == bond.DebitSubledgerJournalEntry  &&
                            (subLedger.IsTransferredInDetail == TransferPolicy::Summarize ||
                                (   subLedger.IsTransferredInDetail         == TransferPolicy::TransferIndividual &&
                                    subLedger.SubLedgerJournalAccountEntry  == bond.DebitSubledgerJournalAccountEntry
                                )
                            ) &&

                            subLedger.TransferId                    == _transferID

                    join subledgerBondOffset where
                        subledgerBondOffset.BondBatchTrans == subledgerBond.BondBatchTrans
                    join offsetSubLedger
                            where offsetSubLedger.LedgerDimension               == bond.CreditLedgerDimension       &&
                                  offsetSubLedger.TransactionCurrencyCode       == bond.CreditCurrencyCode           &&
                                  offsetSubLedger.IsCorrection                  == bond.CreditIsCorrection          &&
                                  offsetSubLedger.AccountingDate                == bond.CreditAccountingDate        &&
                                  offsetSubLedger.PostingLayer                  == bond.CreditPostingLayer          &&
                                  offsetSubLedger.Ledger                        == bond.CreditLedger                &&
                                  offsetSubLedger.PostingType                   == bond.CreditPostingType           &&
                                  offsetSubLedger.SubLedgerJournalEntry         == subLedger.SubLedgerJournalEntry &&
                                  offsetSubLedger.SubLedgerJournalAccountEntry  == subledgerBondOffset.SubledgerJournalAccountEntry &&
                                  (offsetSubLedger.IsTransferredInDetail        == TransferPolicy::Summarize ||
                                        (   offsetSubLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual &&
                                            offsetSubLedger.SubLedgerJournalAccountEntry == bond.CreditSubledgerJournalAccountEntry
                                        )
                                  ) &&
                                  offsetSubLedger.TransferId                == _transferID &&
                                  subLedger.Side                            != offsetSubLedger.Side &&
                                  (
                                    (_transferPolicy                        == TransferPolicy::Summarize &&
                                     subLedger.IsTransferredInDetail        == _transferPolicy &&
                                     offsetSubLedger.IsTransferredInDetail  == _transferPolicy
                                    )  ||
                                    (_transferPolicy != TransferPolicy::Summarize &&
                                        (subLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual ||
                                         offsetSubLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual
                                        )
                                    )
                                  )
                    join generalJournalEntry
                        where generalJournalEntry.AccountingDate == subLedger.AccountingDate            &&
                              generalJournalEntry.PostingLayer == subLedger.PostingLayer                &&
                              generalJournalEntry.Ledger == subLedger.Ledger                            &&
                              generalJournalEntry.TransferId == _transferID;
        }
        else
        {
            insert_recordset bondMap (NewBatchTrans, OriginalBatchTrans, OriginalSubledgerJournalEntry)
                select RecId from bond group by RecId
                    join BondBatchTrans from subledgerBond group by BondBatchTrans

                    join SubLedgerJournalEntry from subLedger group by SubLedgerJournalEntry
                        where   subLedger.LedgerDimension               == bond.DebitLedgerDimension        &&
                                subLedger.TransactionCurrencyCode       == bond.DebitCurrencyCode           &&
                                subLedger.IsCorrection                  == bond.DebitIsCorrection           &&
                                subLedger.AccountingDate                == bond.DebitAccountingDate         &&
                                subLedger.PostingLayer                  == bond.DebitPostingLayer           &&
                                subLedger.Ledger                        == bond.DebitLedger                 &&
                                subLedger.PostingType                   == bond.DebitPostingType            &&
                                subLedger.SubLedgerJournalAccountEntry  == subledgerBond.SubledgerJournalAccountEntry &&
                                subLedger.SubLedgerJournalEntry         == bond.DebitSubledgerJournalEntry  &&
                                (subLedger.IsTransferredInDetail == TransferPolicy::Summarize ||
                                    (   subLedger.IsTransferredInDetail         == TransferPolicy::TransferIndividual &&
                                        subLedger.SubLedgerJournalAccountEntry  == bond.DebitSubledgerJournalAccountEntry
                                    )
                                ) &&

                                subLedger.TransferId                    == _transferID

                        join subledgerBondOffset where
                            subledgerBondOffset.BondBatchTrans == subledgerBond.BondBatchTrans
                        join offsetSubLedger
                                where offsetSubLedger.LedgerDimension               == bond.CreditLedgerDimension       &&
                                      offsetSubLedger.TransactionCurrencyCode       == bond.CreditCurrencyCode           &&
                                      offsetSubLedger.IsCorrection                  == bond.CreditIsCorrection          &&
                                      offsetSubLedger.AccountingDate                == bond.CreditAccountingDate        &&
                                      offsetSubLedger.PostingLayer                  == bond.CreditPostingLayer          &&
                                      offsetSubLedger.Ledger                        == bond.CreditLedger                &&
                                      offsetSubLedger.PostingType                   == bond.CreditPostingType           &&
                                      offsetSubLedger.SubLedgerJournalEntry         == subLedger.SubLedgerJournalEntry &&
                                      offsetSubLedger.SubLedgerJournalAccountEntry  == subledgerBondOffset.SubledgerJournalAccountEntry &&
                                      (offsetSubLedger.IsTransferredInDetail        == TransferPolicy::Summarize ||
                                            (   offsetSubLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual &&
                                                offsetSubLedger.SubLedgerJournalAccountEntry == bond.CreditSubledgerJournalAccountEntry
                                            )
                                      ) &&
                                      offsetSubLedger.TransferId                == _transferID &&
                                      subLedger.Side                            != offsetSubLedger.Side &&
                                      (
                                        (_transferPolicy                        == TransferPolicy::Summarize &&
                                         subLedger.IsTransferredInDetail        == _transferPolicy &&
                                         offsetSubLedger.IsTransferredInDetail  == _transferPolicy
                                        )  ||
                                        (_transferPolicy != TransferPolicy::Summarize &&
                                            (subLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual ||
                                             offsetSubLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual
                                            )
                                        )
                                      )
                        join tmpNumberSeqGen
                                where tmpNumberSeqGen.SubledgerJournalEntry == subLedger.SubLedgerJournalEntry
                        join generalJournalEntry
                                where generalJournalEntry.JournalNumber == tmpNumberSeqGen.JournalNumber        &&
                                      generalJournalEntry.PostingLayer == subLedger.PostingLayer                &&
                                      generalJournalEntry.Ledger == subLedger.Ledger                            &&
                                      generalJournalEntry.TransferId == _transferID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBondTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>SubledgerBondTmp</c> table.
    /// </summary>
    /// <param name="_transferID">
    /// Journal Account Entry transferId.
    /// </param>
    /// <param name="_doSummarization">
    /// true if th emethod should insert summarized values into <c>SubledgerBondTmp</c>.
    /// </param>
    protected void fillBondTable(RefRecId _transferID, boolean _doSummarization)
    {
        SubLedgerJournalAccountEntryView    subLedger;
        SubLedgerJournalAccountEntryView    offsetSubLedger;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalEntry                 offsetGeneralJournalEntry;
        SubledgerJournalAccountEntryBond    subledgerBond_RU;
        SubledgerJournalAccountEntryBond    offsetSubledgerBond_RU;
        SubLedgerJournalTransferNumberSeqTmp offsetTmpNumberSeqGen;
        SubLedgerJournalTransferNumberSeqTmp tmpNumberSeqGen;

        bond.skipDatabaseLog(true);
        bond.skipDataMethods(true);
        bond.skipEvents(true);

        bondMap.skipDatabaseLog(true);
        bondMap.skipDataMethods(true);
        bondMap.skipEvents(true);

        // 1. Summarize <-> Summarize

        if (_doSummarization)
        {
            insert_recordset bond(
                DebitLedgerDimension,
                DebitCurrencyCode,
                DebitIsCorrection,
                DebitAccountingDate,
                DebitPostingLayer,
                DebitLedger,
                DebitPostingType,
                DebitSubledgerJournalEntry,
                AccountingCurrencyAmount,
                TransactionCurrencyAmount,
                ReportingCurrencyAmount,

                debitGeneralJournalEntry,

                CreditLedgerDimension,
                CreditCurrencyCode,
                CreditIsCorrection,
                CreditAccountingDate,
                CreditPostingLayer,
                CreditLedger,
                CreditPostingType,
                CreditSubledgerJournalEntry,

                CreditAccountingCurrencyAmount,
                CreditTransactionCurrencyAmount,
                CreditReportingCurrencyAmount,

                CreditGeneralJournalEntry

            )
                select LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry,
                       sum(AccountingCurrencyAmount), sum(TransactionCurrencyAmount), sum(SecondaryCurrencyAmount)
                    from subLedger group by LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry
                        where subLedger.IsTransferredInDetail == TransferPolicy::Summarize                  &&
                              subLedger.TransferId == _transferID

                    join maxof(RecId) from generalJournalEntry
                            where generalJournalEntry.AccountingDate == subLedger.AccountingDate            &&
                                  generalJournalEntry.PostingLayer == subLedger.PostingLayer                &&
                                  generalJournalEntry.Ledger == subLedger.Ledger                            &&
                                  generalJournalEntry.TransferId == _transferID
                    join subledgerBond_RU
                        where subledgerBond_RU.SubledgerJournalAccountEntry == subLedger.SubLedgerJournalAccountEntry

                    join LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry,
                         sum(AccountingCurrencyAmount), sum(TransactionCurrencyAmount), sum(SecondaryCurrencyAmount)
                        from offsetSubLedger group by LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry
                            where offsetSubLedger.IsTransferredInDetail == TransferPolicy::Summarize        &&
                                  offsetSubLedger.TransferId            == _transferID                      &&
                                  offsetSubLedger.SubLedgerJournalEntry == subLedger.SubLedgerJournalEntry  &&
                                  subLedger.Side                        != offsetSubLedger.Side
                    join maxof(RecId) from offsetGeneralJournalEntry
                            where
                                offsetGeneralJournalEntry.AccountingDate == offsetSubLedger.AccountingDate &&
                                offsetGeneralJournalEntry.PostingLayer == offsetSubLedger.PostingLayer              &&
                                offsetGeneralJournalEntry.Ledger == offsetSubLedger.Ledger                          &&
                                offsetGeneralJournalEntry.TransferId == _transferID                                 &&
                                offsetGeneralJournalEntry.RecId         == generalJournalEntry.RecId
                    join offsetSubledgerBond_RU
                        where offsetSubledgerBond_RU.SubledgerJournalAccountEntry   == offsetSubLedger.SubLedgerJournalAccountEntry                  &&
                              offsetSubledgerBond_RU.BondBatchTrans                 == subledgerBond_RU.BondBatchTrans      &&
                              offsetSubledgerBond_RU.BondBatchTrans;
        }
        else
        {
            insert_recordset bond(
                DebitLedgerDimension,
                DebitCurrencyCode,
                DebitIsCorrection,
                DebitAccountingDate,
                DebitPostingLayer,
                DebitLedger,
                DebitPostingType,
                DebitSubledgerJournalEntry,
                AccountingCurrencyAmount,
                TransactionCurrencyAmount,
                ReportingCurrencyAmount,

                debitGeneralJournalEntry,

                CreditLedgerDimension,
                CreditCurrencyCode,
                CreditIsCorrection,
                CreditAccountingDate,
                CreditPostingLayer,
                CreditLedger,
                CreditPostingType,
                CreditSubledgerJournalEntry,

                CreditAccountingCurrencyAmount,
                CreditTransactionCurrencyAmount,
                CreditReportingCurrencyAmount,

                CreditGeneralJournalEntry

            )
                select LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry,
                        sum(AccountingCurrencyAmount), sum(TransactionCurrencyAmount), sum(SecondaryCurrencyAmount)
                    from subLedger group by LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry
                        where subLedger.IsTransferredInDetail == TransferPolicy::Summarize                  &&
                                subLedger.TransferId == _transferID
                        join tmpNumberSeqGen
                                where tmpNumberSeqGen.SubledgerJournalEntry == subLedger.SubLedgerJournalEntry
                    join maxof(RecId) from generalJournalEntry
                            where generalJournalEntry.JournalNumber == tmpNumberSeqGen.JournalNumber        &&
                                    generalJournalEntry.PostingLayer == subLedger.PostingLayer                &&
                                    generalJournalEntry.Ledger == subLedger.Ledger                            &&
                                    generalJournalEntry.TransferId == _transferID
                    join subledgerBond_RU
                        where subledgerBond_RU.SubledgerJournalAccountEntry == subLedger.SubLedgerJournalAccountEntry

                    join LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry,
                            sum(AccountingCurrencyAmount), sum(TransactionCurrencyAmount), sum(SecondaryCurrencyAmount)
                        from offsetSubLedger group by LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry
                            where offsetSubLedger.IsTransferredInDetail == TransferPolicy::Summarize        &&
                                    offsetSubLedger.TransferId            == _transferID                      &&
                                    offsetSubLedger.SubLedgerJournalEntry == subLedger.SubLedgerJournalEntry  &&
                                    subLedger.Side                        != offsetSubLedger.Side
                    join offsetTmpNumberSeqGen
                            where offsetTmpNumberSeqGen.SubledgerJournalEntry == offsetSubLedger.SubLedgerJournalEntry
                    join maxof(RecId) from offsetGeneralJournalEntry
                            where offsetGeneralJournalEntry.JournalNumber == offsetTmpNumberSeqGen.JournalNumber    &&
                                    offsetGeneralJournalEntry.PostingLayer == offsetSubLedger.PostingLayer              &&
                                    offsetGeneralJournalEntry.Ledger == offsetSubLedger.Ledger                          &&
                                    offsetGeneralJournalEntry.TransferId == _transferID                                 &&
                                    offsetGeneralJournalEntry.RecId         == generalJournalEntry.RecId
                    join offsetSubledgerBond_RU
                        where offsetSubledgerBond_RU.SubledgerJournalAccountEntry   == offsetSubLedger.SubLedgerJournalAccountEntry                  &&
                                offsetSubledgerBond_RU.BondBatchTrans                 == subledgerBond_RU.BondBatchTrans      &&
                                offsetSubledgerBond_RU.BondBatchTrans;
        }

        // Remove duplicates
        delete_from bond where
            (
                (bond.AccountingCurrencyAmount > 0 ||
                    (!bond.AccountingCurrencyAmount && bond.ReportingCurrencyAmount > 0 ) ||
                    (!bond.AccountingCurrencyAmount && !bond.ReportingCurrencyAmount && bond.TransactionCurrencyAmount > 0 )
                )
                && bond.DebitIsCorrection) ||
            (
                (bond.AccountingCurrencyAmount < 0 ||
                    (!bond.AccountingCurrencyAmount && bond.ReportingCurrencyAmount < 0) ||
                    (!bond.AccountingCurrencyAmount && !bond.ReportingCurrencyAmount && bond.TransactionCurrencyAmount < 0 )
                )
                && ! bond.DebitIsCorrection
        );
        this.createMap(_transferID, TransferPolicy::Summarize, _doSummarization);

        if (_doSummarization)
        {
            this.resummarize();
        }
        // 2. Detail

        if (_doSummarization)
        {
            insert_recordset bond(
                DebitSubledgerJournalAccountEntry, // changed
                DebitLedgerDimension,
                DebitCurrencyCode,
                DebitIsCorrection,
                DebitAccountingDate,
                DebitPostingLayer,
                DebitLedger,
                DebitPostingType,
                DebitSubledgerJournalEntry,

                AccountingCurrencyAmount,
                TransactionCurrencyAmount,
                ReportingCurrencyAmount,

                debitGeneralJournalEntry,

                CreditLedgerDimension,
                CreditCurrencyCode,
                CreditIsCorrection,
                CreditAccountingDate,
                CreditPostingLayer,
                CreditLedger,
                CreditPostingType,
                CreditSubledgerJournalEntry,

                CreditAccountingCurrencyAmount,
                CreditTransactionCurrencyAmount,
                CreditReportingCurrencyAmount,

                CreditGeneralJournalEntry
            )
                    select SubLedgerJournalAccountEntry, LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate,
                           PostingLayer, Ledger, PostingType, SubLedgerJournalEntry,
                           sum(AccountingCurrencyAmount), sum(TransactionCurrencyAmount), sum(SecondaryCurrencyAmount)
                        from subLedger
                            group by SubLedgerJournalAccountEntry, LedgerDimension, TransactionCurrencyCode,IsCorrection,AccountingDate,PostingLayer, Ledger, PostingType, SubLedgerJournalEntry
                            where subLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual  && // changed
                                  subLedger.TransferId == _transferID

                    join maxof(RecId) from generalJournalEntry
                            where generalJournalEntry.AccountingDate  == subLedger.AccountingDate         &&
                                  generalJournalEntry.PostingLayer    == subLedger.PostingLayer         &&
                                  generalJournalEntry.Ledger          == subLedger.Ledger               &&
                                  generalJournalEntry.TransferId      == _transferID
                    join subledgerBond_RU
                        where subledgerBond_RU.SubledgerJournalAccountEntry == subLedger.RecId
                    join LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry,
                         sum(AccountingCurrencyAmount), sum(TransactionCurrencyAmount), sum(SecondaryCurrencyAmount)
                    from offsetSubLedger
                        group by LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry
                        where (
                                  offsetSubLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual ||
                                  subLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual
                              ) &&
                              offsetSubLedger.TransferId            == _transferID                  &&
                              subLedger.Side                        == DebitCredit::Debit           && // added
                              offsetSubLedger.SubLedgerJournalEntry == subLedger.SubLedgerJournalEntry  &&
                              subLedger.Side                        != offsetSubLedger.Side
                    join maxof(RecId) from offsetGeneralJournalEntry
                            where offsetGeneralJournalEntry.AccountingDate  == offsetSubLedger.AccountingDate  &&
                                  offsetGeneralJournalEntry.PostingLayer      == offsetSubLedger.PostingLayer     &&
                                  offsetGeneralJournalEntry.Ledger            == offsetSubLedger.Ledger           &&
                                  offsetGeneralJournalEntry.TransferId        == _transferID                      &&
                                  offsetGeneralJournalEntry.RecId             == generalJournalEntry.RecId
                    join offsetSubledgerBond_RU
                        where offsetSubledgerBond_RU.SubledgerJournalAccountEntry   == offsetSubLedger.RecId                    &&
                              offsetSubledgerBond_RU.BondBatchTrans                 == subledgerBond_RU.BondBatchTrans          &&
                              offsetSubledgerBond_RU.BondBatchTrans;
        }
        else
        {
            insert_recordset bond(
                DebitSubledgerJournalAccountEntry, // changed
                DebitLedgerDimension,
                DebitCurrencyCode,
                DebitIsCorrection,
                DebitAccountingDate,
                DebitPostingLayer,
                DebitLedger,
                DebitPostingType,
                DebitSubledgerJournalEntry,

                AccountingCurrencyAmount,
                TransactionCurrencyAmount,
                ReportingCurrencyAmount,

                debitGeneralJournalEntry,

                CreditLedgerDimension,
                CreditCurrencyCode,
                CreditIsCorrection,
                CreditAccountingDate,
                CreditPostingLayer,
                CreditLedger,
                CreditPostingType,
                CreditSubledgerJournalEntry,

                CreditAccountingCurrencyAmount,
                CreditTransactionCurrencyAmount,
                CreditReportingCurrencyAmount,

                CreditGeneralJournalEntry
            )
                select SubLedgerJournalAccountEntry, LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate,
                       PostingLayer, Ledger, PostingType, SubLedgerJournalEntry,
                       sum(AccountingCurrencyAmount), sum(TransactionCurrencyAmount), sum(SecondaryCurrencyAmount)
                    from subLedger
                        group by SubLedgerJournalAccountEntry, LedgerDimension, TransactionCurrencyCode,IsCorrection,AccountingDate,PostingLayer, Ledger, PostingType, SubLedgerJournalEntry
                        where subLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual  && // changed
                              subLedger.TransferId == _transferID
                join tmpNumberSeqGen
                        where tmpNumberSeqGen.SubledgerJournalEntry == subLedger.SubLedgerJournalEntry
                join maxof(RecId) from generalJournalEntry
                        where generalJournalEntry.JournalNumber == tmpNumberSeqGen.JournalNumber    &&
                              generalJournalEntry.PostingLayer    == subLedger.PostingLayer         &&
                              generalJournalEntry.Ledger          == subLedger.Ledger               &&
                              generalJournalEntry.TransferId      == _transferID
                join subledgerBond_RU
                    where subledgerBond_RU.SubledgerJournalAccountEntry == subLedger.RecId
                join LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry,
                     sum(AccountingCurrencyAmount), sum(TransactionCurrencyAmount), sum(SecondaryCurrencyAmount)
                from offsetSubLedger
                    group by LedgerDimension, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry
                    where (
                              offsetSubLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual ||
                              subLedger.IsTransferredInDetail == TransferPolicy::TransferIndividual
                          ) &&
                          offsetSubLedger.TransferId            == _transferID                  &&
                          subLedger.Side                        == DebitCredit::Debit           && // added
                          offsetSubLedger.SubLedgerJournalEntry == subLedger.SubLedgerJournalEntry  &&
                          subLedger.Side                        != offsetSubLedger.Side
                join offsetTmpNumberSeqGen
                    where offsetTmpNumberSeqGen.SubledgerJournalEntry == offsetSubLedger.SubLedgerJournalEntry
                join maxof(RecId) from offsetGeneralJournalEntry
                        where offsetGeneralJournalEntry.JournalNumber   == tmpNumberSeqGen.JournalNumber    &&
                              offsetGeneralJournalEntry.PostingLayer      == offsetSubLedger.PostingLayer     &&
                              offsetGeneralJournalEntry.Ledger            == offsetSubLedger.Ledger           &&
                              offsetGeneralJournalEntry.TransferId        == _transferID                      &&
                              offsetGeneralJournalEntry.RecId             == generalJournalEntry.RecId
                join offsetSubledgerBond_RU
                    where offsetSubledgerBond_RU.SubledgerJournalAccountEntry   == offsetSubLedger.RecId                    &&
                          offsetSubledgerBond_RU.BondBatchTrans                 == subledgerBond_RU.BondBatchTrans          &&
                          offsetSubledgerBond_RU.BondBatchTrans;
        }
        this.createMap(_transferID, TransferPolicy::TransferIndividual, _doSummarization);
        // 0 -> 0 for not bonded transactions
        bondMap.clear();
        bondMap.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBond</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a bond occurs in transfer.
    /// </summary>
    /// <param name="_transferID">
    /// The transfer ID.
    /// </param>
    /// <returns>
    /// true if bond exists; otherwise, false.
    /// </returns>
    public boolean hasBond(RefRecId _transferID)
    {
        SubLedgerJournalAccountEntryView        subledger;
        SubledgerJournalAccountEntryBond        subledgerBond_RU;
        select firstonly BondBatchTrans,SubledgerJournalAccountEntry from subledgerBond_RU where subledgerBond_RU.BondBatchTrans
            exists join subledger
                where subledger.SubLedgerJournalAccountEntry == subledgerBond_RU.SubledgerJournalAccountEntry &&
                      subledger.TransferId                   == _transferID;

        return subledgerBond_RU.BondBatchTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCreditGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the credit side for the bond.
    /// </summary>
    /// <param name="_text">
    ///     The transaction text value.
    /// </param>
    void insertCreditGeneralJournalAccountEntry(TransTxt _text)
    {
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalAccountEntry_W generalJournalAccountEntryW;
        DimensionAttributeValueCombination dimAttrValueCombo;
        /*
        NoYes                       isCredit = NoYes::Yes;
        */

        bond.skipDataMethods(true);
        generalJournalAccountEntry.skipDataMethods(true);
        generalJournalAccountEntryW.skipDataMethods(true);

        while select * from bond
            group by bond.RecId,
                bond.CreditLedgerDimension, dimAttrValueCombo.DisplayValue, dimAttrValueCombo.MainAccount,
                bond.CreditCurrencyCode, bond.CreditIsCorrection, bond.CreditPostingType,
                bond.CreditTransactionCurrencyAmount, bond.CreditAccountingCurrencyAmount,
                bond.CreditReportingCurrencyAmount, bond.CreditGeneralJournalEntry
        join DisplayValue, MainAccount from dimAttrValueCombo
            where dimAttrValueCombo.RecId == bond.CreditLedgerDimension
        {
            generalJournalAccountEntry.Text = _text;
            generalJournalAccountEntry.LedgerDimension = bond.CreditLedgerDimension;
            generalJournalAccountEntry.LedgerAccount = dimAttrValueCombo.DisplayValue;
            generalJournalAccountEntry.MainAccount = dimAttrValueCombo.MainAccount;
            generalJournalAccountEntry.TransactionCurrencyCode = bond.CreditCurrencyCode;
            generalJournalAccountEntry.IsCorrection = bond.CreditIsCorrection;
            generalJournalAccountEntry.IsCredit = true;
            generalJournalAccountEntry.PostingType = bond.CreditPostingType;
            generalJournalAccountEntry.TransactionCurrencyAmount = bond.CreditTransactionCurrencyAmount;
            generalJournalAccountEntry.AccountingCurrencyAmount = bond.CreditAccountingCurrencyAmount;
            generalJournalAccountEntry.ReportingCurrencyAmount = bond.CreditReportingCurrencyAmount;
            generalJournalAccountEntry.GeneralJournalEntry = bond.CreditGeneralJournalEntry;
            generalJournalAccountEntry.calculateInternalValues();
            generalJournalAccountEntry.insert();

            generalJournalAccountEntryW.GeneralJournalAccountEntry = generalJournalAccountEntry.RecId;
            generalJournalAccountEntryW.GeneralJournalEntry = generalJournalAccountEntry.GeneralJournalEntry;
            generalJournalAccountEntryW.BondBatchTrans_RU = bond.RecId;
            generalJournalAccountEntryW.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDebitGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>GeneralJournalAccountEntry</c> debit record.
    /// </summary>
    /// <param name="_text">
    /// Transaction text value.
    /// </param>
    protected void insertDebitGeneralJournalAccountEntry(TransTxt _text)
    {
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalAccountEntry_W generalJournalAccountEntryW;
        DimensionAttributeValueCombination dimAttrValueCombo;

        bond.skipDataMethods(true);
        generalJournalAccountEntry.skipDataMethods(true);
        generalJournalAccountEntryW.skipDataMethods(true);

        while select * from bond
            group by bond.RecId,
                bond.DebitLedgerDimension, dimAttrValueCombo.DisplayValue, dimAttrValueCombo.MainAccount,
                bond.DebitCurrencyCode, bond.DebitIsCorrection, bond.DebitPostingType,
                bond.TransactionCurrencyAmount, bond.AccountingCurrencyAmount,
                bond.ReportingCurrencyAmount, bond.DebitGeneralJournalEntry
        join DisplayValue, MainAccount from dimAttrValueCombo
            where dimAttrValueCombo.RecId == bond.DebitLedgerDimension
        {
            generalJournalAccountEntry.Text = _text;
            generalJournalAccountEntry.LedgerDimension = bond.DebitLedgerDimension;
            generalJournalAccountEntry.LedgerAccount = dimAttrValueCombo.DisplayValue;
            generalJournalAccountEntry.MainAccount = dimAttrValueCombo.MainAccount;
            generalJournalAccountEntry.TransactionCurrencyCode = bond.DebitCurrencyCode;
            generalJournalAccountEntry.IsCorrection = bond.DebitIsCorrection;
            generalJournalAccountEntry.PostingType = bond.DebitPostingType;
            generalJournalAccountEntry.TransactionCurrencyAmount = bond.TransactionCurrencyAmount;
            generalJournalAccountEntry.AccountingCurrencyAmount = bond.AccountingCurrencyAmount;
            generalJournalAccountEntry.ReportingCurrencyAmount = bond.ReportingCurrencyAmount;
            generalJournalAccountEntry.GeneralJournalEntry = bond.DebitGeneralJournalEntry;
            generalJournalAccountEntry.calculateInternalValues();
            generalJournalAccountEntry.insert();

            generalJournalAccountEntryW.GeneralJournalAccountEntry = generalJournalAccountEntry.RecId;
            generalJournalAccountEntryW.GeneralJournalEntry = generalJournalAccountEntry.GeneralJournalEntry;
            generalJournalAccountEntryW.BondBatchTrans_RU = bond.RecId;
            generalJournalAccountEntryW.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertedGenJourlAccEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///   The event handler for the <c>insertedGeneralJournalAccountEntry</c> event.
    /// </summary>
    /// <param name="_transferId">
    ///   The transfer ID.
    /// </param>
    /// <param name="_doc">
    ///   The <c>SourceDocument</c> associated with the subledger journal records being transfered.
    /// </param>
    /// <param name="_doSummarization">
    ///     true if <c>SubledgerJournalAccountEntry</c> records should be summarized on transfer; otherwize, false.
    /// </param>
    public void insertedGenJourlAccEntryEventHandler(SubledgerJournalTransferId _transferId, SourceDocument _doc, boolean _doSummarization)
    {
         this.insertOffsetTaxTransLink(_transferId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExclusiveGJAEEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///   The envent handler for the insert exclusive event for the <c>GeneralJournalAccountEntrty</c> table.
    /// </summary>
    /// <param name="_sysEventOverride">
    ///   Insertion override status.
    /// </param>
    /// <param name="_transferId">
    ///   The transfer ID.
    /// </param>
    /// <param name="_sourceDocument">
    ///   The <c>SourceDocument</c> associated with the subledger journal records being transfered.
    /// </param>
    /// <param name="_doSummarization">
    ///   true if <c>SubledgerJournalAccountEntry</c> records should be summarized on transfer; false if they should not be summarized on transfer.
    /// </param>
    /// <remarks>
    /// The insert exclusive event allows only one subscriber to insert the required <c>GeneralJournalAccountEntrty</c> records.
    /// </remarks>
    public void insertExclusiveGJAEEventHandler(SysEventOverride _sysEventOverride, SubledgerJournalTransferId _transferId, SourceDocument _sourceDocument, boolean _doSummarization)
    {
        if (this.hasBond(_transferId))
        {
            _sysEventOverride.markAsOverridden();
            this.transferUnbonded(_transferId, _sourceDocument, _doSummarization);
            this.fillBondTable(_transferId, _doSummarization);
            this.insertGeneralJournalAccountEntry(_sourceDocument);
            this.setReferencesInSubledger(_transferId, _doSummarization);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>GeneralJournalAccountEntry</c> debit and credit records.
    /// </summary>
    /// <param name="_doc">
    /// Source document object.
    /// </param>
    protected void insertGeneralJournalAccountEntry(SourceDocument _doc)
    {
        TransTxt transactionText = SubledgerJournalTransferCommand::getTransactionText(_doc);

        this.insertDebitGeneralJournalAccountEntry(transactionText);
        this.insertCreditGeneralJournalAccountEntry(transactionText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOffsetTaxTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the tax transaction general journal account entry for Russian fixed offset posting
    /// </summary>
    /// <param name="_transferID">
    /// The transfer ID.
    /// </param>
    protected void insertOffsetTaxTransLink(RecId _transferID)
    {
        TaxTransGeneralJournalAccountEntry          taxTransGeneralJournalAccountEntry;

        AccountingDistribution                      taxAccountingDistribution;
        SubledgerJournalAccountEntryDistribution    taxSubledgerJournalAccEntryDistrib;
        TaxTransRelationshipType                    taxTransRelationshipTypeValue;
        SubLedgerJournalAccountEntryView            subLedgerJournalAccountEntryView;
        SourceDocumentLine                          sourceDocumentLine;
        TaxTrans                                    taxTrans;
        TaxTrans_RU                                 taxTrans_RU;

        taxTransRelationshipTypeValue = TaxTransRelationshipType::Offset_RU;

        insert_recordset taxTransGeneralJournalAccountEntry(GeneralJournalAccountEntry, LedgerDimension, TaxTrans, TaxTransRelationship)
            select GeneralJournalAccountEntry, LedgerDimension from subLedgerJournalAccountEntryView
                group by GeneralJournalAccountEntry, LedgerDimension
                    where subLedgerJournalAccountEntryView.TransferId  == _transferID
                join sourceDocumentLine
                    where sourceDocumentLine.SourceDocumentHeader == subLedgerJournalAccountEntryView.SourceDocumentHeader &&
                          subLedgerJournalAccountEntryView.PostingType == LedgerPostingType::Tax
                join RecId, taxTransRelationshipTypeValue from taxTrans group by RecId
                    where taxTrans.SourceDocumentLine == sourceDocumentLine.RecId &&
                        (
                          (!subLedgerJournalAccountEntryView.IsCorrection &&
                           ((subLedgerJournalAccountEntryView.Side == DebitCredit::Debit && taxTrans.TaxAmount < 0 ) ||
                           (subLedgerJournalAccountEntryView.Side == DebitCredit::Credit && taxTrans.TaxAmount > 0))
                          )
                          ||
                          (subLedgerJournalAccountEntryView.IsCorrection &&
                           ((subLedgerJournalAccountEntryView.Side ==DebitCredit::Debit && taxTrans.TaxAmount > 0 ) ||
                            (subLedgerJournalAccountEntryView.Side ==DebitCredit::Credit && taxTrans.TaxAmount < 0))
                          )
                        )
                // get the distribution associated with the tax amount
                join taxAccountingDistribution
                    where taxAccountingDistribution.SourceDocumentLine == taxTrans.SourceDocumentLine &&
                          taxAccountingDistribution.AccountingEvent    == subLedgerJournalAccountEntryView.AccountingEvent
                join taxSubledgerJournalAccEntryDistrib
                    where taxSubledgerJournalAccEntryDistrib.AccountingDistribution       == taxAccountingDistribution.RecId &&
                          taxSubledgerJournalAccEntryDistrib.SubledgerJournalAccountEntry == subLedgerJournalAccountEntryView.SubLedgerJournalAccountEntry
                exists join taxTrans_RU
                    where taxTrans_RU.TaxTrans == taxTrans.RecId
                     && taxTrans_RU.OffsetLedgerDimension_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resummarize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares summarized data for <c>SubledgerBondTmp</c>.
    /// </summary>
    protected void resummarize()
    {
        SubledgerBondTmp newBond;
        insert_recordset newBond
            (
                CreditAccountingCurrencyAmount,
                AccountingCurrencyAmount,
                CreditReportingCurrencyAmount,
                CreditTransactionCurrencyAmount,
                ReportingCurrencyAmount,
                TransactionCurrencyAmount,
                Quantity,

                CreditSubledgerJournalEntryType1,
                CreditAccountingCurrency,
                CreditAccountingDate,
                CreditAccountingEvent,
                CreditCurrencyCode,
                CreditExchangeRate1,
                CreditExchangeRate2,
                CreditExchangeRateDate,
                CreditFiscalCalendarPeriod,
                CreditGeneralJournalEntry,
                CreditIsCorrection,
                CreditJournalNumber,
                CreditLedger,
                CreditLedgerDimension,
                CreditLedgerName,
                CreditLegalEntity,
                CreditPostingLayer,
                CreditPostingType,
                CreditQuantity,
                CreditReportingCurrency,
                CreditReportingExchangeRate1,
                CreditReportingExchangeRate2,
                CreditSubledgerJournalAccountEntry,
                CreditSubledgerJournalEntryType,
                CreditTransferPolicy,
                DebitAccountingCurrency,
                DebitAccountingDate,
                DebitAccountingEvent,
                DebitCurrencyCode,
                DebitExchangeRate1,
                DebitExchangeRate2,
                DebitExchangeRateDate,
                DebitFiscalCalendarPeriod,
                DebitGeneralJournalEntry,
                DebitIsCorrection,
                DebitJournalNumber,
                DebitLedger,
                DebitLedgerDimension,
                DebitLedgerName,
                DebitLegalEntity,
                DebitPostingLayer,
                DebitPostingType,
                DebitReportingCurrency,
                DebitReportingExchangeRate1,
                DebitReportingExchangeRate2,
                DebitSubledgerJournalAccountEntry,
                DebitSubledgerJournalEntryType,
                DebitTransferPolicy
            )
        select
                sum(CreditAccountingCurrencyAmount),
                sum(AccountingCurrencyAmount),
                sum(CreditReportingCurrencyAmount),
                sum(CreditTransactionCurrencyAmount),
                sum(ReportingCurrencyAmount),
                sum(TransactionCurrencyAmount),
                sum(Quantity),

                CreditSubledgerJournalEntryType1,
                CreditAccountingCurrency,
                CreditAccountingDate,
                CreditAccountingEvent,
                CreditCurrencyCode,
                CreditExchangeRate1,
                CreditExchangeRate2,
                CreditExchangeRateDate,
                CreditFiscalCalendarPeriod,
                CreditGeneralJournalEntry,
                CreditIsCorrection,
                CreditJournalNumber,
                CreditLedger,
                CreditLedgerDimension,
                CreditLedgerName,
                CreditLegalEntity,
                CreditPostingLayer,
                CreditPostingType,
                CreditQuantity,
                CreditReportingCurrency,
                CreditReportingExchangeRate1,
                CreditReportingExchangeRate2,
                CreditSubledgerJournalAccountEntry,
                CreditSubledgerJournalEntryType,
                CreditTransferPolicy,

                DebitAccountingCurrency,
                DebitAccountingDate,
                DebitAccountingEvent,
                DebitCurrencyCode,
                DebitExchangeRate1,
                DebitExchangeRate2,
                DebitExchangeRateDate,
                DebitFiscalCalendarPeriod,
                DebitGeneralJournalEntry,
                DebitIsCorrection,
                DebitJournalNumber,
                DebitLedger,
                DebitLedgerDimension,
                DebitLedgerName,
                DebitLegalEntity,
                DebitPostingLayer,
                DebitPostingType,
                DebitReportingCurrency,
                DebitReportingExchangeRate1,
                DebitReportingExchangeRate2,
                DebitSubledgerJournalAccountEntry,
                DebitSubledgerJournalEntryType,
                DebitTransferPolicy
        from bond
        group by
            CreditSubledgerJournalEntryType1,
            CreditAccountingCurrency,
            CreditAccountingDate,
            CreditAccountingEvent,
            CreditCurrencyCode,
            CreditExchangeRate1,
            CreditExchangeRate2,
            CreditExchangeRateDate,
            CreditFiscalCalendarPeriod,
            CreditGeneralJournalEntry,
            CreditIsCorrection,
            CreditJournalNumber,
            CreditLedger,
            CreditLedgerDimension,
            CreditLedgerName,
            CreditLegalEntity,
            CreditPostingLayer,
            CreditPostingType,
            CreditQuantity,
            CreditReportingCurrency,
            CreditReportingExchangeRate1,
            CreditReportingExchangeRate2,
            CreditSubledgerJournalAccountEntry,
            CreditSubledgerJournalEntryType,
            CreditTransferPolicy,

            DebitAccountingCurrency,
            DebitAccountingDate,
            DebitAccountingEvent,
            DebitCurrencyCode,
            DebitExchangeRate1,
            DebitExchangeRate2,
            DebitExchangeRateDate,
            DebitFiscalCalendarPeriod,
            DebitGeneralJournalEntry,
            DebitIsCorrection,
            DebitJournalNumber,
            DebitLedger,
            DebitLedgerDimension,
            DebitLedgerName,
            DebitLegalEntity,
            DebitPostingLayer,
            DebitPostingType,
            DebitReportingCurrency,
            DebitReportingExchangeRate1,
            DebitReportingExchangeRate2,
            DebitSubledgerJournalAccountEntry,
            DebitSubledgerJournalEntryType,
            DebitTransferPolicy;

        this.resummarizeBondMap(newBond);
        bond = newBond;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resummarizeBondMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recreates <c>SubledgerBondMapTmp</c> map with summarized values.
    /// </summary>
    /// <param name="_newBond">
    /// A <c>SubledgerBondTmp</c> cursor.
    /// </param>
    protected void resummarizeBondMap(SubledgerBondTmp _newBond)
    {
        SubledgerBondMapTmp newBondMap;
        insert_recordset newBondMap(NewBatchTrans, OriginalBatchTrans, OriginalSubledgerJournalEntry)
            select RecId from _newBond group by RecId
            join bond
                where  _newBond.CreditSubledgerJournalEntryType1 == bond.CreditSubledgerJournalEntryType1
                    && _newBond.CreditAccountingCurrency == bond.CreditAccountingCurrency
                    && _newBond.CreditAccountingDate == bond.CreditAccountingDate
                    && _newBond.CreditAccountingEvent == bond.CreditAccountingEvent
                    && _newBond.CreditCurrencyCode == bond.CreditCurrencyCode
                    && _newBond.CreditExchangeRate1 == bond.CreditExchangeRate1
                    && _newBond.CreditExchangeRate2 == bond.CreditExchangeRate2
                    && _newBond.CreditExchangeRateDate == bond.CreditExchangeRateDate
                    && _newBond.CreditFiscalCalendarPeriod == bond.CreditFiscalCalendarPeriod
                    && _newBond.CreditGeneralJournalEntry == bond.CreditGeneralJournalEntry
                    && _newBond.CreditIsCorrection == bond.CreditIsCorrection
                    && _newBond.CreditJournalNumber == bond.CreditJournalNumber
                    && _newBond.CreditLedger == bond.CreditLedger
                    && _newBond.CreditLedgerDimension == bond.CreditLedgerDimension
                    && _newBond.CreditLedgerName == bond.CreditLedgerName
                    && _newBond.CreditLegalEntity == bond.CreditLegalEntity
                    && _newBond.CreditPostingLayer == bond.CreditPostingLayer
                    && _newBond.CreditPostingType == bond.CreditPostingType
                    && _newBond.CreditQuantity == bond.CreditQuantity
                    && _newBond.CreditReportingCurrency == bond.CreditReportingCurrency
                    && _newBond.CreditReportingExchangeRate1 == bond.CreditReportingExchangeRate1
                    && _newBond.CreditReportingExchangeRate2 == bond.CreditReportingExchangeRate2
                    && _newBond.CreditSubledgerJournalAccountEntry == bond.CreditSubledgerJournalAccountEntry
                    && _newBond.CreditSubledgerJournalEntryType == bond.CreditSubledgerJournalEntryType
                    && _newBond.CreditTransferPolicy == bond.CreditTransferPolicy
                    && _newBond.DebitAccountingCurrency == bond.DebitAccountingCurrency
                    && _newBond.DebitAccountingDate == bond.DebitAccountingDate
                    && _newBond.DebitAccountingEvent == bond.DebitAccountingEvent
                    && _newBond.DebitCurrencyCode == bond.DebitCurrencyCode
                    && _newBond.DebitExchangeRate1 == bond.DebitExchangeRate1
                    && _newBond.DebitExchangeRate2 == bond.DebitExchangeRate2
                    && _newBond.DebitExchangeRateDate == bond.DebitExchangeRateDate
                    && _newBond.DebitFiscalCalendarPeriod == bond.DebitFiscalCalendarPeriod
                    && _newBond.DebitGeneralJournalEntry == bond.DebitGeneralJournalEntry
                    && _newBond.DebitIsCorrection == bond.DebitIsCorrection
                    && _newBond.DebitJournalNumber == bond.DebitJournalNumber
                    && _newBond.DebitLedger == bond.DebitLedger
                    && _newBond.DebitLedgerDimension == bond.DebitLedgerDimension
                    && _newBond.DebitLedgerName == bond.DebitLedgerName
                    && _newBond.DebitLegalEntity == bond.DebitLegalEntity
                    && _newBond.DebitPostingLayer == bond.DebitPostingLayer
                    && _newBond.DebitPostingType == bond.DebitPostingType
                    && _newBond.DebitReportingCurrency == bond.DebitReportingCurrency
                    && _newBond.DebitReportingExchangeRate1 == bond.DebitReportingExchangeRate1
                    && _newBond.DebitReportingExchangeRate2 == bond.DebitReportingExchangeRate2
                    && _newBond.DebitSubledgerJournalAccountEntry == bond.DebitSubledgerJournalAccountEntry
                    && _newBond.DebitSubledgerJournalEntryType == bond.DebitSubledgerJournalEntryType
                    && _newBond.DebitTransferPolicy == bond.DebitTransferPolicy
            join OriginalBatchTrans, OriginalSubledgerJournalEntry from bondMap
                group by OriginalBatchTrans, OriginalSubledgerJournalEntry
                where bondMap.NewBatchTrans == bond.RecId;
        bondMap = newBondMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReferencesInSubledger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets relations between General Journal and Subledger Journal records.
    /// </summary>
    /// <param name="_transferID">
    /// General journal entry transfer id.
    /// </param>
    /// <param name="_doSummarize">
    /// true if lines that can be summarized within the scope of a SubledgerJournalEntry should be summarized.
    /// </param>
    protected void setReferencesInSubledger(RefRecId _transferID, boolean _doSummarize)
    {
        SubLedgerJournalTransferNumberSeqTmp    tmpNumberSeqGen;
        GeneralJournalAccountEntrySubledgerJournalAccountEntry generalJournalAccountEntrySubledgerJournalAccountEntry;
        SubledgerJournalAccountEntry            subledgerJournalAccountEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntryLoc;
        GeneralJournalAccountEntry_W            generalJournalAccountEntryLocW;
        SubLedgerJournalAccountEntryView        subLedgerJournalEntryView;
        GeneralJournalEntry                     generalJournalEntry;
        SubledgerJournalAccountEntryBond        subledgerBond_RU;

        if (_doSummarize)
        {
            update_recordset subledgerJournalAccountEntry
                setting GeneralJournalAccountEntry = generalJournalAccountEntryLoc.RecId
                join subLedgerJournalEntryView
                    where subLedgerJournalEntryView.TransferId == _transferID &&
                          subledgerJournalAccountEntry.RecId   == subLedgerJournalEntryView.SubLedgerJournalAccountEntry
                join RecId from generalJournalEntry
                    where generalJournalEntry.PostingLayer  == subLedgerJournalEntryView.PostingLayer &&
                          generalJournalEntry.Ledger        == subLedgerJournalEntryView.Ledger &&
                          generalJournalEntry.TransferId    == _transferID                      &&
                          generalJournalEntry.AccountingDate == subLedgerJournalEntryView.AccountingDate
                join generalJournalAccountEntryLoc
                    where generalJournalAccountEntryLoc.GeneralJournalEntry == generalJournalEntry.RecId &&
                          generalJournalAccountEntryLoc.LedgerDimension == subledgerJournalAccountEntry.LedgerDimension &&
                          generalJournalAccountEntryLoc.TransactionCurrencyCode == subledgerJournalAccountEntry.TransactionCurrency &&
                          generalJournalAccountEntryLoc.IsCorrection == subledgerJournalAccountEntry.IsCorrection &&
                          generalJournalAccountEntryLoc.PostingType == subledgerJournalAccountEntry.PostingType &&
                            (
                                (subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::TransferIndividual &&
                                    generalJournalAccountEntryLoc.TransactionCurrencyAmount == subledgerJournalAccountEntry.TransactionCurrencyAmount &&
                                    generalJournalAccountEntryLoc.AccountingCurrencyAmount == subledgerJournalAccountEntry.AccountingCurrencyAmount &&
                                    generalJournalAccountEntryLoc.ReportingCurrencyAmount == subledgerJournalAccountEntry.ReportingCurrencyAmount
                                ) ||
                                subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::Summarize
                            )
                outer join generalJournalAccountEntryLocW
                    where generalJournalAccountEntryLocW.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId &&
                          generalJournalAccountEntryLocW.GeneralJournalEntry == generalJournalEntry.RecId
                join subledgerBond_RU
                    where subledgerBond_RU.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
                join bondMap
                    where bondMap.OriginalBatchTrans             == subledgerBond_RU.BondBatchTrans                  &&
                          bondMap.OriginalSubledgerJournalEntry  == subLedgerJournalEntryView.SubLedgerJournalEntry  &&
                          bondMap.NewBatchTrans             == generalJournalAccountEntryLocW.BondBatchTrans_RU;

            insert_recordset generalJournalAccountEntrySubledgerJournalAccountEntry(
                    subledgerJournalAccountEntry,
                    generalJournalAccountEntry)
                select RecId from subledgerJournalAccountEntry
                join subLedgerJournalEntryView
                    where subLedgerJournalEntryView.TransferId == _transferID &&
                          subledgerJournalAccountEntry.RecId   == subLedgerJournalEntryView.SubLedgerJournalAccountEntry
                join generalJournalEntry
                    where generalJournalEntry.PostingLayer  == subLedgerJournalEntryView.PostingLayer &&
                          generalJournalEntry.Ledger        == subLedgerJournalEntryView.Ledger &&
                          generalJournalEntry.TransferId    == _transferID                      &&
                          generalJournalEntry.AccountingDate == subLedgerJournalEntryView.AccountingDate
                join RecId from generalJournalAccountEntryLoc
                    where generalJournalAccountEntryLoc.GeneralJournalEntry == generalJournalEntry.RecId &&
                          generalJournalAccountEntryLoc.LedgerDimension == subledgerJournalAccountEntry.LedgerDimension &&
                          generalJournalAccountEntryLoc.TransactionCurrencyCode == subledgerJournalAccountEntry.TransactionCurrency &&
                          generalJournalAccountEntryLoc.IsCorrection == subledgerJournalAccountEntry.IsCorrection &&
                          generalJournalAccountEntryLoc.PostingType == subledgerJournalAccountEntry.PostingType &&
                            (
                                (subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::TransferIndividual &&
                                    generalJournalAccountEntryLoc.TransactionCurrencyAmount == subledgerJournalAccountEntry.TransactionCurrencyAmount &&
                                    generalJournalAccountEntryLoc.AccountingCurrencyAmount == subledgerJournalAccountEntry.AccountingCurrencyAmount &&
                                    generalJournalAccountEntryLoc.ReportingCurrencyAmount == subledgerJournalAccountEntry.ReportingCurrencyAmount
                                ) ||
                                subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::Summarize
                            )
                outer join generalJournalAccountEntryLocW
                    where generalJournalAccountEntryLocW.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId &&
                          generalJournalAccountEntryLocW.GeneralJournalEntry == generalJournalEntry.RecId
                join subledgerBond_RU
                    where subledgerBond_RU.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
                join bondMap
                    where bondMap.OriginalBatchTrans             == subledgerBond_RU.BondBatchTrans                  &&
                          bondMap.OriginalSubledgerJournalEntry  == subLedgerJournalEntryView.SubLedgerJournalEntry  &&
                          bondMap.NewBatchTrans             == generalJournalAccountEntryLocW.BondBatchTrans_RU;
        }
        else
        {
            update_recordset subledgerJournalAccountEntry
                setting GeneralJournalAccountEntry = generalJournalAccountEntryLoc.RecId
                join subLedgerJournalEntryView
                    where subLedgerJournalEntryView.TransferId == _transferID &&
                          subledgerJournalAccountEntry.RecId   == subLedgerJournalEntryView.SubLedgerJournalAccountEntry
                join RecId from tmpNumberSeqGen
                    where tmpNumberSeqGen.SubledgerJournalEntry == subLedgerJournalEntryView.SubLedgerJournalEntry
                join RecId from generalJournalEntry
                    where generalJournalEntry.PostingLayer  == subLedgerJournalEntryView.PostingLayer &&
                          generalJournalEntry.Ledger        == subLedgerJournalEntryView.Ledger &&
                          generalJournalEntry.TransferId    == _transferID                      &&
                          generalJournalEntry.JournalNumber == tmpNumberSeqGen.JournalNumber
                join generalJournalAccountEntryLoc
                    where generalJournalAccountEntryLoc.GeneralJournalEntry == generalJournalEntry.RecId &&
                          generalJournalAccountEntryLoc.LedgerDimension == subledgerJournalAccountEntry.LedgerDimension &&
                          generalJournalAccountEntryLoc.TransactionCurrencyCode == subledgerJournalAccountEntry.TransactionCurrency &&
                          generalJournalAccountEntryLoc.IsCorrection == subledgerJournalAccountEntry.IsCorrection &&
                          generalJournalAccountEntryLoc.PostingType == subledgerJournalAccountEntry.PostingType &&
                            (
                                (subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::TransferIndividual &&
                                    generalJournalAccountEntryLoc.TransactionCurrencyAmount == subledgerJournalAccountEntry.TransactionCurrencyAmount &&
                                    generalJournalAccountEntryLoc.AccountingCurrencyAmount == subledgerJournalAccountEntry.AccountingCurrencyAmount &&
                                    generalJournalAccountEntryLoc.ReportingCurrencyAmount == subledgerJournalAccountEntry.ReportingCurrencyAmount
                                ) ||
                                subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::Summarize
                            )
                outer join generalJournalAccountEntryLocW
                    where generalJournalAccountEntryLocW.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId &&
                          generalJournalAccountEntryLocW.GeneralJournalEntry == generalJournalEntry.RecId
                join subledgerBond_RU
                    where subledgerBond_RU.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
                join bondMap
                    where bondMap.OriginalBatchTrans             == subledgerBond_RU.BondBatchTrans                  &&
                          bondMap.OriginalSubledgerJournalEntry  == subLedgerJournalEntryView.SubLedgerJournalEntry  &&
                          bondMap.NewBatchTrans             == generalJournalAccountEntryLocW.BondBatchTrans_RU;

            insert_recordset generalJournalAccountEntrySubledgerJournalAccountEntry(
                    subledgerJournalAccountEntry,
                    generalJournalAccountEntry)
                select RecId from subledgerJournalAccountEntry
                join subLedgerJournalEntryView
                    where subLedgerJournalEntryView.TransferId == _transferID &&
                          subledgerJournalAccountEntry.RecId   == subLedgerJournalEntryView.SubLedgerJournalAccountEntry
                join tmpNumberSeqGen
                    where tmpNumberSeqGen.SubledgerJournalEntry == subLedgerJournalEntryView.SubLedgerJournalEntry
                join generalJournalEntry
                    where generalJournalEntry.PostingLayer  == subLedgerJournalEntryView.PostingLayer &&
                          generalJournalEntry.Ledger        == subLedgerJournalEntryView.Ledger &&
                          generalJournalEntry.TransferId    == _transferID                      &&
                          generalJournalEntry.JournalNumber == tmpNumberSeqGen.JournalNumber
                join RecId from generalJournalAccountEntryLoc
                    where generalJournalAccountEntryLoc.GeneralJournalEntry == generalJournalEntry.RecId &&
                          generalJournalAccountEntryLoc.LedgerDimension == subledgerJournalAccountEntry.LedgerDimension &&
                          generalJournalAccountEntryLoc.TransactionCurrencyCode == subledgerJournalAccountEntry.TransactionCurrency &&
                          generalJournalAccountEntryLoc.IsCorrection == subledgerJournalAccountEntry.IsCorrection &&
                          generalJournalAccountEntryLoc.PostingType == subledgerJournalAccountEntry.PostingType &&
                            (
                                (subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::TransferIndividual &&
                                    generalJournalAccountEntryLoc.TransactionCurrencyAmount == subledgerJournalAccountEntry.TransactionCurrencyAmount &&
                                    generalJournalAccountEntryLoc.AccountingCurrencyAmount == subledgerJournalAccountEntry.AccountingCurrencyAmount &&
                                    generalJournalAccountEntryLoc.ReportingCurrencyAmount == subledgerJournalAccountEntry.ReportingCurrencyAmount
                                ) ||
                                subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::Summarize
                            )
                outer join generalJournalAccountEntryLocW
                    where generalJournalAccountEntryLocW.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId &&
                          generalJournalAccountEntryLocW.GeneralJournalEntry == generalJournalEntry.RecId
                join subledgerBond_RU
                    where subledgerBond_RU.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
                join bondMap
                    where bondMap.OriginalBatchTrans             == subledgerBond_RU.BondBatchTrans                  &&
                          bondMap.OriginalSubledgerJournalEntry  == subLedgerJournalEntryView.SubLedgerJournalEntry  &&
                          bondMap.NewBatchTrans             == generalJournalAccountEntryLocW.BondBatchTrans_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method should be overriden to subscribe to events
    /// </summary>
    protected void subscribe()
    {
        super();
        if (this.canSubscribe())
        {
            command.insertExclusiveGenJourAcctEntry     += eventhandler(this.insertExclusiveGJAEEventHandler);
            command.insertedGeneralJournalAccountEntry  += eventhandler(this.insertedGenJourlAccEntryEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferUnbonded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts general journal account entry for unbonded condition.
    /// </summary>
    /// <param name="_transferidVal">
    /// General journal entry transfer id.
    /// </param>
    /// <param name="_sourceDocument">
    /// The source document object.
    /// </param>
    /// <param name="_doSummarization">
    /// true if lines that can be summarized within the scope of a SubledgerJournalEntry should be summarized.
    /// </param>
    protected void transferUnbonded(RefRecId  _transferidVal, SourceDocument _sourceDocument, boolean _doSummarization)
    {
        // this is copy of a part insertGeneralJournalAccountEntryRelated  of with addition of unbonded condition
        GeneralJournalAccountEntrySubledgerJournalAccountEntry generalJournalAccountEntrySubledgerJournalAccountEntry;
        SubledgerJournalAccountEntry        subledgerJournalAccountEntry;
        SubledgerJournalAccountEntryBond    subledgerBond_RU;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntryLoc;
        SubLedgerJournalEntryView           subLedgerJournalEntryView;
        SubLedgerJournalAccountEntryView    subLedgerJournalAccountEntryView;
        NoYes                               isCreditValue;
        SubLedgerJournalTransferNumberSeqTmp        tmpNumberSeqGen;
        str 60                                      transactionText;

        if (_doSummarization)
        {
            isCreditValue = false;
            transactionText = SubledgerJournalTransferCommand::getTransactionText(_sourceDocument);

            // Insert summarized lines
            insert_recordset generalJournalAccountEntryLoc(IsCredit, Text, LedgerDimension, LedgerAccount, TransactionCurrencyCode, IsCorrection,
                                                           PostingType, TransactionCurrencyAmount, AccountingCurrencyAmount, ReportingCurrencyAmount,                                                            GeneralJournalEntry)
                select isCreditValue, transactionText, LedgerDimension, LedgerAccount, TransactionCurrencyCode, IsCorrection,
                       PostingType, sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount), sum(SecondaryCurrencyAmount)
                    from subLedgerJournalAccountEntryView
                        group by LedgerDimension, LedgerAccount, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType
                        where subLedgerJournalAccountEntryView.IsTransferredInDetail == TransferPolicy::Summarize &&
                              subLedgerJournalAccountEntryView.TransferId == _transferidVal
                    join maxof(RecId) from generalJournalEntry
                        where generalJournalEntry.PostingLayer == subLedgerJournalAccountEntryView.PostingLayer &&
                              generalJournalEntry.AccountingDate == subLedgerJournalAccountEntryView.AccountingDate &&
                              generalJournalEntry.Ledger == subLedgerJournalAccountEntryView.Ledger &&
                              generalJournalEntry.TransferId == _transferidVal
                   notexists join subledgerBond_RU
                        where subledgerBond_RU.SubledgerJournalAccountEntry == subLedgerJournalAccountEntryView.SubLedgerJournalAccountEntry;

            // Insert non-summarized lines
            insert_recordset generalJournalAccountEntryLoc(IsCredit, Text, LedgerDimension, LedgerAccount, TransactionCurrencyCode, IsCorrection,
                                                           PostingType, TransactionCurrencyAmount, AccountingCurrencyAmount, ReportingCurrencyAmount,
                                                           GeneralJournalEntry)
                select isCreditValue, transactionText, LedgerDimension, LedgerAccount, TransactionCurrencyCode, IsCorrection,
                       PostingType, TransactionCurrencyAmount, AccountingCurrencyAmount, SecondaryCurrencyAmount
                    from subLedgerJournalAccountEntryView
                    where subLedgerJournalAccountEntryView.TransferId == _transferidVal &&
                          subLedgerJournalAccountEntryView.IsTransferredInDetail == TransferPolicy::TransferIndividual
                    join RecId from generalJournalEntry
                        where generalJournalEntry.PostingLayer == subLedgerJournalAccountEntryView.PostingLayer &&
                              generalJournalEntry.AccountingDate == subLedgerJournalAccountEntryView.AccountingDate &&
                              generalJournalEntry.Ledger == subLedgerJournalAccountEntryView.Ledger &&
                              generalJournalEntry.TransferId == _transferidVal
                   notexists join subledgerBond_RU
                        where subledgerBond_RU.SubledgerJournalAccountEntry == subLedgerJournalAccountEntryView.SubLedgerJournalAccountEntry;

            update_recordset subledgerJournalAccountEntry
                setting GeneralJournalAccountEntry = generalJournalAccountEntryLoc.RecId
                join subLedgerJournalAccountEntryView
                    where subLedgerJournalAccountEntryView.SubLedgerJournalAccountEntry == subledgerJournalAccountEntry.RecId &&
                          subLedgerJournalAccountEntryView.TransferId == _transferidVal
                join generalJournalEntry
                    where generalJournalEntry.PostingLayer == subLedgerJournalAccountEntryView.PostingLayer &&
                          generalJournalEntry.AccountingDate == subLedgerJournalAccountEntryView.AccountingDate &&
                          generalJournalEntry.Ledger == subLedgerJournalAccountEntryView.Ledger &&
                          generalJournalEntry.TransferId == _transferidVal
                join generalJournalAccountEntryLoc
                    where generalJournalAccountEntryLoc.GeneralJournalEntry == generalJournalEntry.RecId &&
                          generalJournalAccountEntryLoc.LedgerDimension == subledgerJournalAccountEntry.LedgerDimension &&
                          generalJournalAccountEntryLoc.TransactionCurrencyCode == subledgerJournalAccountEntry.TransactionCurrency &&
                          generalJournalAccountEntryLoc.IsCorrection == subledgerJournalAccountEntry.IsCorrection &&
                          ((subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::TransferIndividual &&
                            generalJournalAccountEntryLoc.TransactionCurrencyAmount == subledgerJournalAccountEntry.TransactionCurrencyAmount &&
                            generalJournalAccountEntryLoc.AccountingCurrencyAmount == subledgerJournalAccountEntry.AccountingCurrencyAmount &&
                            generalJournalAccountEntryLoc.ReportingCurrencyAmount == subledgerJournalAccountEntry.ReportingCurrencyAmount  ||
                           subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::Summarize))
                   notexists join subledgerBond_RU
                        where subledgerBond_RU.SubledgerJournalAccountEntry == subLedgerJournalAccountEntryView.SubLedgerJournalAccountEntry;

            insert_recordset generalJournalAccountEntrySubledgerJournalAccountEntry(
                    subledgerJournalAccountEntry,
                    generalJournalAccountEntry)
                select subledgerJournalAccountEntry from subLedgerJournalAccountEntryView
                    where subLedgerJournalAccountEntryView.SubLedgerJournalAccountEntry == subledgerJournalAccountEntry.RecId &&
                          subLedgerJournalAccountEntryView.TransferId == _transferidVal
                join generalJournalEntry
                    where generalJournalEntry.PostingLayer == subLedgerJournalAccountEntryView.PostingLayer &&
                          generalJournalEntry.AccountingDate == subLedgerJournalAccountEntryView.AccountingDate &&
                          generalJournalEntry.Ledger == subLedgerJournalAccountEntryView.Ledger &&
                          generalJournalEntry.TransferId == _transferidVal
                join RecId from generalJournalAccountEntryLoc
                    where generalJournalAccountEntryLoc.GeneralJournalEntry == generalJournalEntry.RecId &&
                          generalJournalAccountEntryLoc.LedgerDimension == subledgerJournalAccountEntry.LedgerDimension &&
                          generalJournalAccountEntryLoc.TransactionCurrencyCode == subledgerJournalAccountEntry.TransactionCurrency &&
                          generalJournalAccountEntryLoc.IsCorrection == subledgerJournalAccountEntry.IsCorrection &&
                          ((subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::TransferIndividual &&
                            generalJournalAccountEntryLoc.TransactionCurrencyAmount == subledgerJournalAccountEntry.TransactionCurrencyAmount &&
                            generalJournalAccountEntryLoc.AccountingCurrencyAmount == subledgerJournalAccountEntry.AccountingCurrencyAmount &&
                            generalJournalAccountEntryLoc.ReportingCurrencyAmount == subledgerJournalAccountEntry.ReportingCurrencyAmount  ||
                           subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::Summarize))
                   notexists join subledgerBond_RU
                        where subledgerBond_RU.SubledgerJournalAccountEntry == subLedgerJournalAccountEntryView.SubLedgerJournalAccountEntry;

            update_recordset generalJournalAccountEntryLoc
                setting IsCredit = true
                join GeneralJournalAccountEntry,TransactionCurrencyAmount,TransferId from subLedgerJournalAccountEntryView
                    where subLedgerJournalAccountEntryView.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId &&
                          ((subLedgerJournalAccountEntryView.TransactionCurrencyAmount > 0 && subLedgerJournalAccountEntryView.IsCorrection) ||
                           (subLedgerJournalAccountEntryView.TransactionCurrencyAmount < 0 && !subLedgerJournalAccountEntryView.IsCorrection)
                          ) &&
                          subLedgerJournalAccountEntryView.TransferId == _transferidVal;
        }
        else
        {
            // insert lines that can be summarized within the scope of a SubledgerJournalEntry
            insert_recordset generalJournalAccountEntryLoc(IsCredit, LedgerDimension, LedgerAccount, TransactionCurrencyCode, IsCorrection,
                                                            PostingType, TransactionCurrencyAmount, AccountingCurrencyAmount, ReportingCurrencyAmount,
                                                            GeneralJournalEntry)
                select isCreditValue, LedgerDimension, LedgerAccount, TransactionCurrencyCode, IsCorrection,
                        PostingType, sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount), sum(SecondaryCurrencyAmount)
                    from subLedgerJournalAccountEntryView
                        group by LedgerDimension, LedgerAccount, TransactionCurrencyCode, IsCorrection, AccountingDate, PostingLayer, Ledger, PostingType, SubLedgerJournalEntry
                        where subLedgerJournalAccountEntryView.TransferId == _transferidVal &&
                                subLedgerJournalAccountEntryView.IsTransferredInDetail == TransferPolicy::Summarize
                    join tmpNumberSeqGen
                        where tmpNumberSeqGen.SubledgerJournalEntry == subLedgerJournalAccountEntryView.SubLedgerJournalEntry
                    join maxof(RecId) from generalJournalEntry
                        where generalJournalEntry.JournalNumber == tmpNumberSeqGen.JournalNumber &&
                            generalJournalEntry.PostingLayer == subLedgerJournalAccountEntryView.PostingLayer &&
                            generalJournalEntry.Ledger == subLedgerJournalAccountEntryView.Ledger &&
                            generalJournalEntry.TransferId == _transferidVal
                    notexists join subledgerBond_RU
                        where subledgerBond_RU.SubledgerJournalAccountEntry == subLedgerJournalAccountEntryView.SubLedgerJournalAccountEntry;

                // transfer non-summarizable line
            insert_recordset generalJournalAccountEntryLoc(IsCredit, LedgerDimension, LedgerAccount, TransactionCurrencyCode, IsCorrection,
                                                            PostingType, TransactionCurrencyAmount, AccountingCurrencyAmount, ReportingCurrencyAmount,
                                                            GeneralJournalEntry)
                select isCreditValue, LedgerDimension, LedgerAccount, TransactionCurrencyCode, IsCorrection,
                        PostingType, TransactionCurrencyAmount, AccountingCurrencyAmount, SecondaryCurrencyAmount
                    from subLedgerJournalAccountEntryView
                        where subLedgerJournalAccountEntryView.TransferId == _transferidVal &&
                                subLedgerJournalAccountEntryView.IsTransferredInDetail == TransferPolicy::TransferIndividual
                    join tmpNumberSeqGen
                        where tmpNumberSeqGen.SubledgerJournalEntry == subLedgerJournalAccountEntryView.SubLedgerJournalEntry
                        join RecId from generalJournalEntry
                        where generalJournalEntry.JournalNumber == tmpNumberSeqGen.JournalNumber &&
                            generalJournalEntry.PostingLayer == subLedgerJournalAccountEntryView.PostingLayer &&
                            generalJournalEntry.Ledger == subLedgerJournalAccountEntryView.Ledger &&
                            generalJournalEntry.TransferId == _transferidVal
                    notexists join subledgerBond_RU
                        where subledgerBond_RU.SubledgerJournalAccountEntry == subLedgerJournalAccountEntryView.SubLedgerJournalAccountEntry;

            update_recordset subledgerJournalAccountEntry
                setting GeneralJournalAccountEntry = generalJournalAccountEntryLoc.RecId
                join subLedgerJournalEntryView
                    where subLedgerJournalEntryView.SubLedgerJournalEntry == subledgerJournalAccountEntry.SubledgerJournalEntry &&
                            subLedgerJournalEntryView.TransferId == _transferidVal
                join RecId from tmpNumberSeqGen
                    where tmpNumberSeqGen.SubledgerJournalEntry == subLedgerJournalEntryView.SubLedgerJournalEntry
                join RecId from generalJournalEntry
                    where generalJournalEntry.JournalNumber == tmpNumberSeqGen.JournalNumber
                join generalJournalAccountEntryLoc
                    where generalJournalAccountEntryLoc.GeneralJournalEntry == generalJournalEntry.RecId &&
                            generalJournalAccountEntryLoc.LedgerDimension == subledgerJournalAccountEntry.LedgerDimension &&
                            generalJournalAccountEntryLoc.TransactionCurrencyCode == subledgerJournalAccountEntry.TransactionCurrency &&
                            generalJournalAccountEntryLoc.IsCorrection == subledgerJournalAccountEntry.IsCorrection &&
                            generalJournalAccountEntryLoc.PostingType == subledgerJournalAccountEntry.PostingType &&
                            ((subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::TransferIndividual &&
                            generalJournalAccountEntryLoc.TransactionCurrencyAmount == subledgerJournalAccountEntry.TransactionCurrencyAmount &&
                            generalJournalAccountEntryLoc.AccountingCurrencyAmount == subledgerJournalAccountEntry.AccountingCurrencyAmount &&
                            generalJournalAccountEntryLoc.ReportingCurrencyAmount == subledgerJournalAccountEntry.ReportingCurrencyAmount) ||
                            subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::Summarize)
                notexists join subledgerBond_RU
                    where subledgerBond_RU.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId;

            insert_recordset generalJournalAccountEntrySubledgerJournalAccountEntry(
                    subledgerJournalAccountEntry,
                    generalJournalAccountEntry)
            select RecId from subledgerJournalAccountEntry
                join subLedgerJournalEntryView
                    where subLedgerJournalEntryView.SubLedgerJournalEntry == subledgerJournalAccountEntry.SubledgerJournalEntry &&
                            subLedgerJournalEntryView.TransferId == _transferidVal
                join tmpNumberSeqGen
                    where tmpNumberSeqGen.SubledgerJournalEntry == subLedgerJournalEntryView.SubLedgerJournalEntry
                join generalJournalEntry
                    where generalJournalEntry.JournalNumber == tmpNumberSeqGen.JournalNumber
                join RecId from generalJournalAccountEntryLoc
                    where generalJournalAccountEntryLoc.GeneralJournalEntry == generalJournalEntry.RecId &&
                            generalJournalAccountEntryLoc.LedgerDimension == subledgerJournalAccountEntry.LedgerDimension &&
                            generalJournalAccountEntryLoc.TransactionCurrencyCode == subledgerJournalAccountEntry.TransactionCurrency &&
                            generalJournalAccountEntryLoc.IsCorrection == subledgerJournalAccountEntry.IsCorrection &&
                            generalJournalAccountEntryLoc.PostingType == subledgerJournalAccountEntry.PostingType &&
                            ((subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::TransferIndividual &&
                            generalJournalAccountEntryLoc.TransactionCurrencyAmount == subledgerJournalAccountEntry.TransactionCurrencyAmount &&
                            generalJournalAccountEntryLoc.AccountingCurrencyAmount == subledgerJournalAccountEntry.AccountingCurrencyAmount &&
                            generalJournalAccountEntryLoc.ReportingCurrencyAmount == subledgerJournalAccountEntry.ReportingCurrencyAmount) ||
                            subledgerJournalAccountEntry.IsTransferredInDetail == TransferPolicy::Summarize)
                notexists join subledgerBond_RU
                    where subledgerBond_RU.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId;

            update_recordset generalJournalAccountEntryLoc
                setting IsCredit = true
                exists join generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntryLoc.GeneralJournalEntry &&
                        ((generalJournalAccountEntryLoc.AccountingCurrencyAmount > 0 && generalJournalAccountEntryLoc.IsCorrection) ||
                        (generalJournalAccountEntryLoc.AccountingCurrencyAmount < 0 && !generalJournalAccountEntryLoc.IsCorrection)) &&
                        generalJournalEntry.TransferId == _transferidVal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SubledgerJournalTransferCmdExtBond</c> class
    /// </summary>
    /// <returns>
    /// A new instance of the <c>SubledgerJournalTransferCmdExtBond</c> class.
    /// </returns>
    public static SubledgerJournalTransferCmdExtBond construct()
    {
        return new SubledgerJournalTransferCmdExtBond();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>