<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveStrategyMatchPackingQty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveStrategyMatchPackingQty</c> class implements the Match packing quantity strategy.
/// </summary>
[WhsLocationDirectiveStrategyFactory(WhsLocDirStrategy::MatchPackingQty)]
class WhsLocationDirectiveStrategyMatchPackingQty extends WhsLocationDirectiveStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(
        WHSLocDirTable  _locDirTable,
        WHSLocDirLine   _locDirLine,
        WHSLocDirAction _locDirAction)
    {
        boolean ret = true;

        if (!WhsWorkTransactionType::singletonFromTypeOrDefault(_locDirTable.WorkTransType).isForOutboundShipment())
        {
            ret = checkFailed(strFmt("@WAX5583", _locDirAction.LocDirStrategy, _locDirTable.WorkTransType));
        }

        if (_locDirTable.WorkType != WHSWorkType::Pick)
        {
            ret = checkFailed(strFmt("@WAX4602", _locDirAction.LocDirStrategy, _locDirTable.WorkType));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performStrategy</Name>
				<Source><![CDATA[
    public boolean performStrategy(
        WhsLocationDirective _locationDirective, 
        WhsLocationDirectiveStrategyParameters _parameters)
    {
        boolean strategyResult;

        if (_parameters.WorkType == WHSWorkType::Pick)
        {
            strategyResult = this.matchPackingQty(
                _parameters.Location.wmsLocationId,
                _parameters.Location.inventSiteId(),
                _parameters.Location.InventLocationId,
                _parameters.ItemId,
                _parameters.InventFindQty,
                _parameters.InventUOM);
        }

        return strategyResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemCWEnabled</Name>
				<Source><![CDATA[
	/// <summary>
    /// Determines whether or not the item is catch weight.
    /// </summary>
    /// <param name = "_itemId"> The item. </param>
    /// <returns> Yes/No </returns>
	private boolean isItemCWEnabled(ItemId _itemId)
    {
        return PdsGlobal::pdsIsCWItem(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchPackingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the on-hand physical available quantity matches with the packing quantity.
    /// </summary>
    /// <param name="_locationId">
    /// Id of the location.
    /// </param>
    /// <param name="_inventSiteId">
    /// Site id of the location.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id of the location.
    /// </param>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    /// <param name="_inventPackingQty">
    /// Packing quantity to be matched.
    /// </param>
    /// <param name="_unitId">
    /// UOM of the item.
    /// </param>
    /// <returns>
    /// true if the on-hand physical available quantity matches with the packing quantity; otherwise, false.
    /// </returns>
    private boolean matchPackingQty(WMSLocationId       _locationId,
                            InventSiteId        _inventSiteId,
                            InventLocationId    _inventLocationId,
                            ItemId              _itemId,
                            WHSPackingQty       _inventPackingQty,
                            UnitOfMeasureSymbol _unitId)
    {
        WHSInventReserve    inventReserve;
        InventDim           inventDim;
        boolean				isItemCWEnabled = this.isItemCWEnabled(_itemId);

        if (InventUseDimOfWHSInventReserveToggle::instance().isEnabled())
        {
            select firstonly RecId from inventReserve
                where inventReserve.ItemId				== _itemId                  &&
                      inventReserve.InventSiteId	    == _inventSiteId            &&
                      inventReserve.InventLocationId	== _inventLocationId        &&
                      inventReserve.wmsLocationId		== _locationId              &&
                      ((isItemCWEnabled												&&
                      inventReserve.CWAvailPhysical		== _inventPackingQty)		||
                      (!isItemCWEnabled												&&
                      inventReserve.AvailPhysical		== _inventPackingQty))		&&
                      inventReserve.LicensePlateId      != '';
        }
        else
        {
            select firstonly RecId from inventReserve
                join InventSiteId, InventDimId, InventLocationId, wmsLocationId, LicensePlateId from inventDim
                where inventReserve.InventDimId			== inventDim.InventDimId    &&
                      inventReserve.ItemId				== _itemId                  &&
                      inventDim.InventSiteId			== _inventSiteId            &&
                      inventDim.InventLocationId		== _inventLocationId        &&
                      inventDim.wmsLocationId			== _locationId              &&
                      ((isItemCWEnabled												&&
                      inventReserve.CWAvailPhysical		== _inventPackingQty)		||
                      (!isItemCWEnabled												&&
                      inventReserve.AvailPhysical		== _inventPackingQty))		&&
                      inventDim.LicensePlateId   != '';
        }

        return inventReserve.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>