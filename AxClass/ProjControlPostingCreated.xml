<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjControlPostingCreated</Name>
  <SourceCode>
    <Declaration><![CDATA[
class ProjControlPostingCreated extends ProjControlPosting implements BatchRetryable
{
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>dialog</Name>
        <Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog;

        this.parmTransDate(this.parmTransDate() ? this.parmTransDate() : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        dialog = super();

        dialog.caption("@SYS6098");

        dialog.addGroup("@SYS14475");
        fieldTransDate = dialog.addFieldValue(extendedTypeStr(TransDate), this.parmTransDate(), "@SYS14475", "@SYS53214");

        return dialog;
    }

]]></Source>
      </Method>
      <Method>
        <Name>queryNext</Name>
        <Source><![CDATA[
    protected void queryNext(LedgerVoucher _ledgerVoucher) //LedgerVoucherTrans   ledgerVoucherTrans)
    {
        ProjControlPeriodTrans  projControlPeriodTrans;
        ProjPost                projPost;

        if (queryRun.changed(tableNum(ProjControlPeriodTrans)))
        {
            projControlPeriodTrans   = queryRun.get(tableNum(ProjControlPeriodTrans));
            this.parmProjId(projControlPeriodTrans.ProjId);
            controlId                = projControlPeriodTrans.ControlId;
            periodFrom               = projControlPeriodTrans.PeriodFrom;
            projControlVersion       = projControlPeriodTrans.Version;

            projPost = ProjPost::newEnterRevenueEstimate(projControlPeriodTrans,null,_ledgerVoucher, this.isReversal());
            if (this.parmBeginningBalance())
            {
                projPost.parmPostToGeneralLedger(false);
            }
            projPost.postTrans();
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>transactionLogTxt</Name>
        <Source><![CDATA[
    public TransTxt transactionLogTxt()
    {
        return "@SYS92314";
    }

]]></Source>
      </Method>
      <Method>
        <Name>transactionLogType</Name>
        <Source><![CDATA[
    public TransactionLogType transactionLogType()
    {
        return TransactionLogType::ProjEstimate;
    }

]]></Source>
      </Method>
      <Method>
        <Name>description</Name>
        <Source><![CDATA[
    protected static ClassDescription description()
    {
        return "@SYS55483";
    }

]]></Source>
      </Method>
      <Method>
        <Name>canRunInNewSession</Name>
        <Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>