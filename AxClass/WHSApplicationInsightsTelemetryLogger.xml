<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSApplicationInsightsTelemetryLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using TelemetryClient = Microsoft.ApplicationInsights.TelemetryClient;

internal final class WHSApplicationInsightsTelemetryLogger
{
    private static WHSApplicationInsightsTelemetryLogger instance;
    private TelemetryClient telemetryClient;
    internal static readonly boolean mustUseGlobalTelemetry = SysIntParameters::find().CaptureWarehouseEvents;
    internal static readonly boolean mustUseSysApplicationInsightsTelemetry = mustUseGlobalTelemetry && WHSApplicationInsightsUseSysApplicationInsightsFlight::instance().isEnabled();
    private readonly boolean captureWarehouseEvents = SysIntParameters::find().CaptureWarehouseEvents;
    private WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classStr(WHSApplicationInsightsTelemetryLogger));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (!mustUseGlobalTelemetry)
        {
            telemetryClient = new TelemetryClient();
            telemetryClient.InstrumentationKey = WHSOperationInsightsKeyProvider::instrumentationKey();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>typenew</Name>
				<Source><![CDATA[
    private static void typenew()
    {
        instance = new WHSApplicationInsightsTelemetryLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    internal static final WHSApplicationInsightsTelemetryLogger instance()
    {
        return WHSApplicationInsightsTelemetryLogger::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackEvent</Name>
				<Source><![CDATA[
    internal final void trackEvent(WHSApplicationInsightsEventTelemetry _eventTelemetry)
    {      
        if (mustUseGlobalTelemetry)
        {
            if (captureWarehouseEvents)
            {
                using (var activityContext = instrumentationLogger.applicationInsightsTelemetryActivities().trackEvent(_eventTelemetry.name()))
                {
                    if (mustUseSysApplicationInsightsTelemetry)
                    {
                        SysApplicationInsightsTelemetryLogger::instance().trackEvent(WHSApplicationInsightsEventTelemetryConverter::convertWHSEventTelemetryContractToSysEventTelemetryContract(_eventTelemetry.parmSysApplicationInsightsEventTelemetry()));
                    }
                    else
                    {
                        SysGlobalTelemetry::logEventWithCustomProperties(_eventTelemetry.name(), _eventTelemetry.properties());
                    }
                }
            }
        }
        else
        {
            using (var activityContext = instrumentationLogger.applicationInsightsTelemetryActivities().trackEventOperationalInsights(_eventTelemetry.name()))
            {
                telemetryClient.TrackEvent(_eventTelemetry.eventTelemetry());
            }
        }
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>