<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentService</c> class implements a service method for processing of subcontracting
///    documents.
/// </summary>
public class LeanDocumentService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAggregatorsFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an event handler object.
    /// </summary>
    /// <param name="_contract">
    ///    The data contract object that is used as input for the filtering done by the provider.
    /// </param>
    /// <returns>
    ///    A map that contains instances of the <c>LeanDocumentAggregator</c> class.
    /// </returns>
    protected Map createAggregatorsFromContract(LeanDocumentDataContract _contract)
    {
        Map result = new Map(Types::Enum, Types::Class);

        if (_contract.parmCreatePurchaseOrders())
        {
            result.insert(LeanDocumentCreationType::PurchaseOrders,
                            LeanDocumentPurchaseOrderAggregator::newStandard(_contract.parmAggregationMode()));
        }

        if (_contract.parmCreateReceiptAdvices())
        {
            result.insert(LeanDocumentCreationType::ReceiptAdvices,
                            LeanDocumentReceiptAdviceAggregator::newStandard(_contract.parmAggregationMode()));
        }

        if (result.elements() < 1)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocumentTasksFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates document tasks objects.
    /// </summary>
    /// <param name="_contract">
    ///    The data contract object that is used as input for the filtering done by the provider.
    /// </param>
    /// <returns>
    ///    A map that contains instances of the <c>LeanDocumentDataProvider</c> class.
    /// </returns>
    protected Map createDocumentTasksFromContract(LeanDocumentDataContract _contract)
    {
        Map result = new Map(Types::Enum, Types::Class);

        if (_contract.parmCreatePurchaseOrders())
        {
            result.insert(LeanDocumentCreationType::PurchaseOrders,
                            LeanDocumentPurchaseOrderGenerationTsk::newStandard());
        }

        if (_contract.parmCreateReceiptAdvices())
        {
            result.insert(LeanDocumentCreationType::ReceiptAdvices,
                            LeanDocumentReceiptAdviceGenerationTsk::newStandard());
        }

        if (result.elements() < 1)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createObserversFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates observer objects.
    /// </summary>
    /// <param name="_contract">
    ///    The data contract object that is used as input for the filtering done by the provider.
    /// </param>
    /// <returns>
    ///    A map that contains instances of the <c>LeanDocumentObserver</c> class.
    /// </returns>
    protected Map createObserversFromContract(LeanDocumentDataContract _contract)
    {
        Map result = new Map(Types::Enum, Types::Class);

        if (_contract.parmCreatePurchaseOrders())
        {
            result.insert(LeanDocumentCreationType::PurchaseOrders,
                            LeanDocumentPurchaseOrderObserver::newStandard());
        }

        if (_contract.parmCreateReceiptAdvices())
        {
            result.insert(LeanDocumentCreationType::ReceiptAdvices,
                            LeanDocumentReceiptAdviceObserver::newStandard());
        }

        if (result.elements() < 1)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LeanDocumentProcessor</c> class.
    /// </summary>
    /// <param name="_type">
    ///    The type of processor that is required.
    /// </param>
    /// <param name="_providers">
    ///    A map of providers.
    /// </param>
    /// <param name="_aggregators">
    ///    A map of aggregators.
    /// </param>
    /// <param name="_tasks">
    ///    A map of document task objects.
    /// </param>
    /// <param name="_observers">
    ///    A map of event handlers.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanDocumentProcessor</c> class.
    /// </returns>
    protected LeanDocumentProcessor createProcessor(
                                        LeanDocumentCreationType _type,
                                        Map _providers,
                                        Map _aggregators,
                                        Map _tasks,
                                        Map _observers)
    {
        LeanDocumentProcessor   processor = null;

        processor = LeanDocumentProcessor::newStandard(_providers.lookup(_type),
                                                        _aggregators.lookup(_type),
                                                        _tasks.lookup(_type),
                                                        _type);

        if (_observers)
        {
            LeanDocumentObserver observer = _observers.lookup(_type);

            processor.LeanDocumentPreProcess  += eventhandler(observer.onSubcontractingDocumentPreProcess);
            processor.LeanDocumentPostProcess += eventhandler(observer.onSubcontractingDocumentPostProcess);
        }

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessorsFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a list of processors by using the number of providers, aggregators, and event handlers.
    /// </summary>
    /// <param name="_contract">
    ///    The data contract object.
    /// </param>
    /// <param name="_providers">
    ///    A map of providers.
    /// </param>
    /// <param name="_aggregators">
    ///    A map of aggregators.
    /// </param>
    /// <param name="_tasks">
    ///    A map of document task objects.
    /// </param>
    /// <param name="_observers">
    ///    A map of event handlers, optional.
    /// </param>
    /// <returns>
    ///    A list of <c>LeanDocumentProcessor</c> objects.
    /// </returns>
    /// <remarks>
    ///    All the lists except the event handlers should have the same dimensionality.
    /// </remarks>
    protected List createProcessorsFromContract(
                        LeanDocumentDataContract _contract,
                        Map _providers,
                        Map _aggregators,
                        Map _tasks,
                        Map _observers = null)
    {
        List result = new List(Types::Class);

        if (!_contract
            || !_providers
            || !_aggregators
            || !_tasks
            || _providers.elements() == 0
            || _aggregators.elements() == 0
            || _tasks.elements() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_contract.parmCreatePurchaseOrders())
        {
            result.addEnd(this.createProcessor(LeanDocumentCreationType::PurchaseOrders,
                                                _providers,
                                                _aggregators,
                                                _tasks,
                                                _observers));
        }

        if (_contract.parmCreateReceiptAdvices())
        {
            result.addEnd(this.createProcessor(LeanDocumentCreationType::ReceiptAdvices,
                                                _providers,
                                                _aggregators,
                                                _tasks,
                                                _observers));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProvidersFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a provider object.
    /// </summary>
    /// <param name="_contract">
    ///    The data contract object that is used as input for the filtering done by the provider.
    /// </param>
    /// <returns>
    ///    A map that contains instances of the <c>LeanDocumentDataProvider</c> class.
    /// </returns>
    protected Map createProvidersFromContract(LeanDocumentDataContract _contract)
    {
        Map result = new Map(Types::Enum, Types::Class);

        if (_contract.parmCreatePurchaseOrders())
        {
            result.insert(LeanDocumentCreationType::PurchaseOrders,
                            LeanDocumentPurchaseOrderDataProvider::newStandard(_contract));
        }

        if (_contract.parmCreateReceiptAdvices())
        {
            result.insert(LeanDocumentCreationType::ReceiptAdvices,
                            LeanDocumentReceiptAdviceDataProvider::newStandard(_contract));
        }

        if (result.elements() < 1)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubcontractingDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates subcontracting documents by using input data from a data contract object.
    /// </summary>
    /// <param name="_contract">
    ///    The data contract object that specifies parameters for the creation of the subcontracting documents.
    /// </param>
    public void createSubcontractingDocuments(LeanDocumentDataContract _contract)
    {
        List processors = this.createProcessorsFromContract(_contract,
                                                             this.createProvidersFromContract(_contract),
                                                             this.createAggregatorsFromContract(_contract),
                                                             this.createDocumentTasksFromContract(_contract),
                                                             this.createObserversFromContract(_contract));

        this.runProcessing(processors);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateQuantityForAssignedJobs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Recalculates the quantity for an existing subcontracting document.
    /// </summary>
    /// <param name="_leanDocument">
    ///    The document for which the quantity needs to be recalculated.
    /// </param>
    /// <returns>
    ///    The new quantity for the document.
    /// </returns>
    public InventQty recalculateQuantityForAssignedJobs(Common _leanDocument)
    {
        InventQty result;

        switch (_leanDocument.TableId)
        {
            case tablenum(PurchLine):
                result = this.recalculateQuantityForAssignedJobsPO(_leanDocument as PurchLine);
                break;
            case tablenum(VendPackingSlipTrans):
                result = this.recalculateQuantityForAssignedJobsRA(_leanDocument as VendPackingSlipTrans);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateQuantityForAssignedJobsPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Recalculates the quantity for an existing purchase order line.
    /// </summary>
    /// <param name="_leanDocument">
    ///    The document for which the quantity needs to be recalculated.
    /// </param>
    /// <returns>
    ///    The new quantity for the document.
    /// </returns>
    protected InventQty recalculateQuantityForAssignedJobsPO(PurchLine _leanDocument)
    {
        List                                    processors  = new List(Types::Class);
        LeanDocumentQuantityRecalculationTask   task;
        KanbanJobPurchaseLine                   kanbanJobPurchaseLine;
        KanbanJob                               filterKanbanJob;

        if (_leanDocument.PlanReference != 0)
        {
            // get the first job that is assigned to that purchase line
            select firstonly filterKanbanJob
                exists join  kanbanJobPurchaseLine
                    where kanbanJobPurchaseLine.KanbanJob == filterKanbanJob.RecId
                        && kanbanJobPurchaseLine.PurchLineInventTransId == _leanDocument.InventTransId;

            LeanDocumentDataProvider provider = LeanDocumentKanbanJobDataProvider::newStandard(filterKanbanJob);
            LeanDocumentAggregator aggregator = LeanDocumentPurchOrderUpdateAggregator::newStandard(
                                                                                          LeanDocumentLinesAggregationMode::All,
                                                                                          filterKanbanJob,
                                                                                          false);
            task = LeanDocumentQuantityRecalculationTask::newStandard(
                                                                                          UnitOfMeasure::findBySymbol(_leanDocument.PurchUnit).RecId,
                                                                                          _leanDocument.ItemId,
                                                                                          _leanDocument.DataAreaId);

            task.parmInventDimId(_leanDocument.InventDimId);

            processors.addEnd(LeanDocumentProcessor::newStandard(provider, aggregator, task, LeanDocumentCreationType::PurchaseOrders));

            this.runProcessing(processors);
        }

        return (task != null) ? task.recalculatedQuantity() : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateQuantityForAssignedJobsRA</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Recalculates the quantity for an existing receipt advice line.
    /// </summary>
    /// <param name="_leanDocument">
    ///    The document for which the quantity needs to be recalculated.
    /// </param>
    /// <returns>
    ///    The new quantity for the document.
    /// </returns>
    protected InventQty recalculateQuantityForAssignedJobsRA(VendPackingSlipTrans _leanDocument)
    {
        List                                    processors  = new List(Types::Class);
        LeanDocumentQuantityRecalculationTask   task;
        KanbanJobReceiptAdviceLine              kanbanJobReceiptAdviceLine;
        KanbanJob                               filterKanbanJob;

        if (KanbanJobReceiptAdviceLine::existReceiptAdviceLine(_leanDocument.RecId))
        {
            // get the first job that is assigned to that packing slip line
            select firstonly filterKanbanJob
                exists join  kanbanJobReceiptAdviceLine
                    where kanbanJobReceiptAdviceLine.KanbanJob == filterKanbanJob.RecId
                        && kanbanJobReceiptAdviceLine.ReceiptAdviceLine == _leanDocument.RecId;

            LeanDocumentDataProvider provider = LeanDocumentKanbanJobDataProviderRA::newStandard(filterKanbanJob);
            LeanDocumentAggregator aggregator = LeanDocumentReceiptAdviceUpdAggregator::newStandard(
                                                                                          LeanDocumentLinesAggregationMode::All,
                                                                                          filterKanbanJob,
                                                                                          false);
            task = LeanDocumentQuantityRecalculationTask::newStandard(
                                                                                          UnitOfMeasure::findBySymbol(_leanDocument.PurchUnit).RecId,
                                                                                          _leanDocument.ItemId,
                                                                                          _leanDocument.DataAreaId);

            task.parmInventDimId(_leanDocument.InventDimId);

			processors.addEnd(LeanDocumentProcessor::newStandard(provider, aggregator, task, LeanDocumentCreationType::ReceiptAdvices));

            this.runProcessing(processors);
        }

        return (task != null) ? task.recalculatedQuantity() : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the actual processing for a number of processors.
    /// </summary>
    /// <param name="_listProcessors">
    ///    A list that contains the subcontracting document processors.
    /// </param>
    protected void runProcessing(List _listProcessors)
    {
        LeanDocumentProcessor   currProcessor;

        if (_listProcessors == null
            || _listProcessors.elements() > 2
            || _listProcessors.elements() < 1)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ListEnumerator enumProcessors = _listProcessors.getEnumerator();

        while (enumProcessors.moveNext())
        {
            try
            {
                currProcessor = enumProcessors.current();
                currProcessor.run();
            }
            catch
            {
                if (currProcessor != null)
                {
                    error(strfmt("@SYS339065", enum2str(currProcessor.parmOperationType())));
                }
                else
                {
                    throw error(error::wrongUseOfFunction(funcName()));
                }
            }
        }

        // clean up the per-user cache
        PlanActivityServiceFindCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubcontractingDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the related subcontracting documents for all jobs that belong to the same group as the
    ///    kanban job passed as a parameter.
    /// </summary>
    /// <param name="_documentType">
    ///    The type of document that needs to be updated.
    /// </param>
    /// <param name="_filterKanbanJob">
    ///    The filtering kanban job.
    /// </param>
    public void updateSubcontractingDocuments(LeanDocumentCreationType _documentType, KanbanJob _filterKanbanJob)
    {
        switch (_documentType)
        {
            case LeanDocumentCreationType::PurchaseOrders:
                this.updateSubcontractingDocumentsPO(_filterKanbanJob);
                break;
            case LeanDocumentCreationType::ReceiptAdvices:
                this.updateSubcontractingDocumentsRA(_filterKanbanJob);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubcontractingDocumentsPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the related subcontracting documents for all jobs that belong to the same group as the
    ///    kanban job passed as a parameter.
    /// </summary>
    /// <param name="_filterKanbanJob">
    ///    The filtering kanban job.
    /// </param>
    /// <remarks>
    ///    The only subcontracting documents that are updated as part of the method are assigned purchase
    ///    order lines.
    /// </remarks>
    protected void updateSubcontractingDocumentsPO(KanbanJob _filterKanbanJob)
    {
        List                        processors  = new List(Types::Class);

        if (KanbanJobPurchaseLine::findKanbanJob(_filterKanbanJob.RecId).RecId != 0)
        {
            LeanDocumentDataProvider provider   = LeanDocumentKanbanJobDataProvider::newStandard(_filterKanbanJob);
            LeanDocumentAggregator   aggregator = LeanDocumentPurchOrderUpdateAggregator::newStandard(LeanDocumentLinesAggregationMode::All, _filterKanbanJob);
            LeanDocumentTask         task       = LeanDocumentServiceUpdaterPO::newStandard();

            processors.addEnd(LeanDocumentProcessor::newStandard(provider, aggregator, task, LeanDocumentCreationType::PurchaseOrders));

            this.runProcessing(processors);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubcontractingDocumentsRA</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the related subcontracting documents for all jobs that belong to the same group as the
    ///    kanban job passed as a parameter.
    /// </summary>
    /// <param name="_filterKanbanJob">
    ///    The filtering kanban job.
    /// </param>
    /// <remarks>
    ///    No subcontracting documents are updated as part of the method call, only the filter job is
    ///    unassigned from the receipt advice line.
    /// </remarks>
    protected void updateSubcontractingDocumentsRA(KanbanJob _filterKanbanJob)
    {
        ttsbegin;
        KanbanJobReceiptAdviceLine kanbanJobReceiptAdviceLine = KanbanJobReceiptAdviceLine::findKanbanJob(_filterKanbanJob.RecId, true);

        if (kanbanJobReceiptAdviceLine.RecId != 0)
        {
            kanbanJobReceiptAdviceLine.delete();
            VendPackingSlipTrans vendPackingSlipTrans = VendPackingSlipTrans::findRecId(kanbanJobReceiptAdviceLine.ReceiptAdviceLine);
            warning(strfmt("@SYS340101",
                            _filterKanbanJob.PlanActivityName,
                            vendPackingSlipTrans.PackingSlipId));
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static LeanDocumentService construct()
    {
        return new LeanDocumentService();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>