<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayReverse</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class rPayReverse extends RunBase
{
    RPayReverseType payReverseType;
    Common          common;
    FormDataSource  formDS;
    FormRun         formRun;
    Object          formCaller;
    RPayReverseMap  rPayReverseMap;
    boolean         checkAmountForReverse;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canReverse</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canReverse()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReversalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void checkReversalTrans(RPayTrans _rPayTrans)
    {
        TransLink_RU    transLink;
        boolean res = true;

        if (payReverseType == RPayReverseType::ReverseCorrect ||
            payReverseType == RPayReverseType::Reverse)
        {
            select transLink
                where transLink.RefTableId == _rPayTrans.TableId &&
                      transLink.RefPri     == _rPayTrans.RecId;

            if (transLink)
                res = checkFailed("@RUP2955");
        }

        res = _rPayTrans.checkDeferrals() && res;

        if (!res)
            throw error("@GLS113154");
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversePayTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createReversePayTrans(RPayTrans _rPayTrans,
                                      Common _sourceTableNew = null,
                                      Amount _amountCorrect  = 0)
    {
        RPayTrans    rPayTransNew;

        void createPayTrans(Amount _amount)
        {
            rPayTransNew.clear();
            rPayTransNew.data(_rPayTrans);
            rPayTransNew.CorrectedPeriod = _rPayTrans.CorrectedPeriod;
            rPayTransNew.PayPeriod       = RPayParameters::payPeriod(rPayTransNew.Emplid);
            rPayTransNew.Amount          = _amount;

            if (abs(_amount) == abs(_rPayTrans.Amount))
            {
                rPayTransNew.QtyDay  = _rPayTrans.QtyDay * (-1);
                rPayTransNew.QtyHour = _rPayTrans.QtyHour * (-1);
            }

            if (_sourceTableNew.TableId && _sourceTableNew.RecId)
            {
                rPayTransNew.SourceRecId   = _sourceTableNew.RecId;
                rPayTransNew.SourceTableId = _sourceTableNew.TableId;
            }
            rPayTransNew.insert();
        }

        void createReverse()
        {
            createPayTrans(_rPayTrans.Amount * (-1));
            TransLink_RU::createReversal(_rPayTrans.TableId,_rPayTrans.RecId,rPayTransNew.RecId);
        }

        void createCorrect()
        {
            createPayTrans(_amountCorrect);
            TransLink_RU::create(_rPayTrans.TableId, _rPayTrans.RecId, rPayTransNew.RecId, TransLinkType_RU::Correction);
        }

        this.checkReversalTrans(_rPayTrans);

        TransLink_RU::create(_rPayTrans.TableId, _rPayTrans.RecId, _rPayTrans.RecId);

        switch (payReverseType)
        {
            case RPayReverseType::Reverse:
                createReverse();
                break;

            case RPayReverseType::ReverseCorrect:
                createReverse();
                createCorrect();
                break;

            case RPayReverseType::Correct:
                createCorrect();
                break;
        }

        RPayTrans::reverseDeferrals(_rPayTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceTransLink</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createSourceTransLink(Common _commonSource,
                                         Common _commonNew)
    {
        TransLink_RU    transLink;
        ;

        select transLink
            where transLink.RefTableId == _commonSource.TableId &&
                  transLink.RefPri     == _commonSource.RecId;

        if (transLink)
            throw error("@RUP2955");

        TransLink_RU::create(_commonSource.TableId, _commonSource.RecId, _commonSource.RecId);
        TransLink_RU::createReversal(_commonSource.TableId, _commonSource.RecId, _commonNew.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        ;
        dialog.caption("@RUP2956");

        if (this.showDialogText())
        {
            dialog.addText(this.dialogBoxText());
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBoxText</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract str dialogBoxText()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromArgs(Args _args)
    {
        ;
        if (_args && _args.record() && _args.parmEnumType())
        {
            payReverseType = _args.parmEnum();
            common         = _args.record();
            formDS         = FormDataUtil::getFormDataSource(_args.record());
            rPayReverseMap = common;
        }
        else
        {
            throw error(strFmt("@SYS23264", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckAmountForReverse</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmCheckAmountForReverse(boolean _checkAmountForReverse = checkAmountForReverse)
    {
        checkAmountForReverse = _checkAmountForReverse;

        return checkAmountForReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            if (this.canReverse())
            {
                ttsbegin;

                this.runReverse();

                ttscommit;

                if (formDS)
                {
                    formDS.research();
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReverse</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract void runReverse()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDialogText</Name>
				<Source><![CDATA[
    private boolean showDialogText()
    {
        return payReverseType == RPayReverseType::Reverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayReverse rPayReverse = RPayReverse::newFromTable(_args);
        ;

        if (rPayReverse.prompt())
        {
            rPayReverse.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayReverse newFromTable(Args _args)
    {
        RPayReverse rPayReverse;

        switch (_args.record().TableId)
        {
            case(tableNum(RPayAverageEarnEmplPeriodTable)):
                rPayReverse = RPayReverse_Average::construct(_args);
                break;

            case(tableNum(RPayCivilContractAct)):
                rPayReverse = RPayReverse_CivilContractAct::construct();
                break;

            case(tableNum(RPayJournalTable)):
                rPayReverse = RPayReverse_PayJournalTable::construct();
                break;

            case(tableNum(RPayJournalTrans)):
                rPayReverse = RPayReverse_PayJournalTrans::construct();
                break;

            case(tableNum(RPayEmplStandardDeductionTable)):
                rPayReverse = RPayReverse_StandardDeduction::construct();
                break;

            case(tableNum(RPayTrans)):
                rPayReverse = RPayReverse_PayTrans::construct();
                break;

            default:
                throw error("@RUP2957");
        }

        rPayReverse.initFromArgs(_args);

        return rPayReverse;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>