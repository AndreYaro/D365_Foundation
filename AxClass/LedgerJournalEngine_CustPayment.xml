<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_CustPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEngine_CustPayment</c> class supports customer payment journals.
/// </summary>
/// <remarks>
/// This class extends the <c>LedgerJournalEngine</c> class.
/// </remarks>
public class LedgerJournalEngine_CustPayment extends LedgerJournalEngine_Payment
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountModified</Name>
				<Source><![CDATA[
    public DebCredProposal accountModified(LedgerJournalTrans           _ledgerJournalTrans,
                                           LedgerJournalTrans_Project   _ledgerJournalTrans_Project = null,
                                           LedgerJournalTrans_Asset     _ledgerJournalTrans_Asset = null
                                           , Tax1099BoxDetail           _tax1099Detail = null
                                           , LedgerJournalTrans_RAsset   _ledgerJournalTrans_RAsset = null
                                           , LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null
                                           )

    {
        DebCredProposal debCredProposal = super(_ledgerJournalTrans, _ledgerJournalTrans_Project, _ledgerJournalTrans_Asset
            , _tax1099Detail
            // <GEERU>
            , _ledgerJournalTrans_RAsset
            , _ledgerJournalTrans_RDeferrals
        );
        // </GEERU>

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            debCredProposal = DebCredProposal::Credit;
        }

        return debCredProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCashRegister_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies if cash register terminal need to be updated.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    protected boolean enableCashRegister_W()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the journal line based on <c>CompanyInfo</c> data.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    protected void initFromCompanyInfo(LedgerJournalTrans _ledgerJournalTrans)
    {
        CompanyInfo companyInfo;
        ;

        super(_ledgerJournalTrans);

        if (!_ledgerJournalTrans.BankCentralBankPurposeCode && !_ledgerJournalTrans.BankCentralBankPurposeText)
        {
            companyInfo = CompanyInfo::find();
            _ledgerJournalTrans.BankCentralBankPurposeCode = companyInfo.BankCentralBankPurposeCode;
            _ledgerJournalTrans.BankCentralBankPurposeText = companyInfo.BankCentralBankPurposeText;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    void initFromCustTable(LedgerJournalTrans ledgerJournalTrans)
    {
        // <GIN>
        TaxWithholdParameters_IN taxWithholdParametersLoc;
        TaxInformationCustTable_IN taxInformationCustTableLoc;
        // </GIN>

        #ISOCountryRegionCodes

        ledgerJournalTrans.CurrencyCode = custTable.Currency ? custTable.Currency : ledgerJournalTrans.CurrencyCode;
        ledgerJournalTrans.Due = ledgerJournalTrans.TransDate;

        // <GEEU>
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            ledgerJournalTrans.modifyVatDueDate_W();
        }
        // </GEEU>

        this.initCustPostingProfile(ledgerJournalTrans);

        ledgerJournalTrans.SettleVoucher = CustParameters::find().AutoSettle ?
                                            SettlementType::OpenTransact : SettlementType::None;

        this.copyFromCustTable(ledgerJournalTrans);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            taxWithholdParametersLoc = TaxWithholdParameters_IN::find();
            taxInformationCustTableLoc = custTable.getTaxInformationCustTable_IN();
            LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();
            if (taxWithholdParametersLoc.tdsActivate || taxWithholdParametersLoc.tcsActivate)
            {
                TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalTrans, true);
                if (transTaxInformation)
                {
                    ttsbegin;
                    transTaxInformation.TaxWithholdNatureOfAssessee = taxInformationCustTableLoc.NatureOfAssessee;
                    transTaxInformation.update();
                    ttscommit;
                }
            }
            if (taxWithholdParametersLoc.tdsActivate)
            {
                ledgerJournalTransTaxExt.tdsGroup = taxInformationCustTableLoc.tdsGroup;
                ledgerJournalTrans.packExtensionTable(ledgerJournalTransTaxExt);
            }
            if (taxWithholdParametersLoc.tcsActivate)
            {
                ledgerJournalTransTaxExt.tcsGroup = taxInformationCustTableLoc.tcsGroup;
                ledgerJournalTrans.packExtensionTable(ledgerJournalTransTaxExt);
            }
        }
        // </GIN>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA, #isoGB, #isoIE])
            || BrazilParameters::isEnabled()
            || TaxWithholdingGlobalFeature::isFeatureAndParamEnabled())
        {
            ledgerJournalTrans.TaxWithholdGroup = custTable.TaxWithholdGroup_TH;
            ledgerJournalTrans.TaxWithholdCalculate_TH = custTable.TaxWithholdCalculate_TH;
        }
        // <GTH>
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
        {
            ledgerJournalTrans.TaxWithholdGroup = custTable.getTaxWithholdGroup();
        }
        // </GTH>

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            this.initDefaultDimension(ledgerJournalTrans);
        }

        ledgerJournalTrans.paymModeModified();
        ledgerJournalTrans.paymSpecModified();
        
        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
        {
            this.initOffsetDefaultDimension(ledgerJournalTrans);
        }

        if (ledgerJournalTrans.isTaxIntegrationEnabled()
            && TaxIntegrationUtils::isMultipleTaxIdEnabledForTaxService())
        {
            custTable.copyPrimaryRegistrationNumberToVATMap(ledgerJournalTrans, ledgerJournalTrans.TransDate);
        }

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.initVatRegData_PL(ledgerJournalTrans, custTable);
        }
        // </GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ledgerJournalTrans.UseOriginalDocumentAsFacture_RU = custTable.UseOriginalDocumentAsFacture_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromCustTable</Name>
				<Source><![CDATA[
    protected void copyFromCustTable(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.CustVendBankAccountId = custTable.BankAccount;
        _ledgerJournalTrans.PaymMode = custTable.PaymMode;
        _ledgerJournalTrans.PaymSpec = custTable.PaymSpec;
        _ledgerJournalTrans.BankTransType = CustPaymModeTable::find(custTable.PaymMode).BankTransType;
        _ledgerJournalTrans.Payment = custTable.PaymTermId;
        _ledgerJournalTrans.BankCentralBankPurposeCode = custTable.BankCentralBankPurposeCode;
        _ledgerJournalTrans.BankCentralBankPurposeText = custTable.BankCentralBankPurposeText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        super(_ledgerJournalTrans);

        this.initOffsetFromLedgerJournalTable(_ledgerJournalTrans);

        _ledgerJournalTrans.AccountType       = LedgerJournalACType::Cust;
        _ledgerJournalTrans.SettleVoucher     = CustParameters::find().AutoSettle ?
                                               SettlementType::OpenTransact : SettlementType::None;

        // <GEERU><GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoCZ, #isoHU, #isoPL]))
        {
            _ledgerJournalTrans.Prepayment = _ledgerJournalTrans.ledgerJournalTable().ledgerJournalTable_W().Prepayment_W;
        }
        // </GEEU></GEERU>

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            _ledgerJournalTrans.CustFactureAutoCreate_RU = CustParameters::find().PrepaymentFactureAutoCreate_RU;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashRegisterTerminal_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the cash register terminal.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The buffer of the <c>LedgerJournalTrans</c> table.
    /// </param>
    public void setCashRegisterTerminal_W(LedgerJournalTrans _ledgerJournalTrans)
    {
        super(_ledgerJournalTrans);

        LedgerJournalTrans_W ledgerJournalTrans_W = _ledgerJournalTrans.ledgerJournalTrans_W();
        if (LedgerJournalTrans_W::isLegalEntityInCountryRegion()
            && CashRegisterProcessingBase::isEnabledForCurrentUser()
            && ledgerJournalTrans_W.dataSource())
        {
            ledgerJournalTrans_W.dataSource().write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateModified</Name>
				<Source><![CDATA[
    public void transDateModified(LedgerJournalTrans ledgerJournalTrans)
    {
        LedgerJournalTrans          ledgerJournalTrans_orig;
        BankPaymentOrderJour_RU     bankPaymentOrderJour;
        PaymentOrderBudgetTrans_RU  paymentOrderBudgetTrans;
        boolean                     countryRegion_RU        = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        if (countryRegion_RU)
        {
            if (! ledgerJournalTrans.checkAllowEditPaymentOrder_RU(true))
            {
                return;
            }
            ledgerJournalTrans_orig = ledgerJournalTrans.orig();
            ttsbegin;

            super(ledgerJournalTrans);

            if (ledgerJournalTrans.TransDate != ledgerJournalTrans_orig.TransDate && ledgerJournalTrans.BankChequeNum)
            {
                bankPaymentOrderJour = ledgerJournalTrans_orig.bankPaymentOrderJour_RU(true);

                if (bankPaymentOrderJour)
                {
                    bankPaymentOrderJour.JournalTransDate = ledgerJournalTrans.TransDate;
                    bankPaymentOrderJour.doUpdate();
                }

                paymentOrderBudgetTrans = ledgerJournalTrans_orig.paymentOrderBudgetTrans_RU(true);

                if (paymentOrderBudgetTrans)
                {
                    paymentOrderBudgetTrans.JournalTransDate = ledgerJournalTrans.TransDate;
                    paymentOrderBudgetTrans.doUpdate();
                }
            }
            ttscommit;
        }
        else
        {
            super(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkedInvoiceFromSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the marked invoice of the specified payment.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The payment.
    /// </param>
    /// <remarks>
    ///    The marked invoice is updated during settlement. The marked invoice is updated with one of the
    ///    following.
    ///    The invoice number, a blank, or a special indicator when multiple transactions or a
    ///    non-invoice transaction is marked.
    /// </remarks>
    public void updateMarkedInvoiceFromSettlement(LedgerJournalTrans _ledgerJournalTrans)
    {
        int specCount;
        ;

        // Find count of SpecTrans for this LedgrJournalTrans
        specCount = SpecTrans::getSpecTransCount(
            _ledgerJournalTrans.company(),
            tableNum(LedgerJournalTrans),
            _ledgerJournalTrans.RecId);

        _ledgerJournalTrans.updateMarkedInvoice(specCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAndUpdateFineAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Fine amount
    /// </summary>
    /// <param name="_refCompany">
    /// The company related to the CustOpentransaction that shold be updated
    /// </param>
    /// <param name="_custTransOpen">
    /// The open transaction for which to calculate the fine amount and Fine amount Currency
    /// </param>
    /// <param name="_paymentDate">
    /// The date used to calculate the Interest amount
    /// </param>
    /// <param name="_amountCur">
    /// Amount used to calculate the Interest Amount
    /// </param>
    /// <param name="_currencyCode">
    /// Currency used
    /// </param>
    /// <returns>
    /// Returns the calculated fine amount
    /// </returns>
    private static FineAmount_BR calculateAndUpdateFineAmount_BR(
                                                    CompanyId           _refCompany,
                                                    CustVendTransOpen   _custTransOpen,
                                                    TransDate           _paymentDate,
                                                    AmountCur           _amountCur,
                                                    CurrencyCode        _currencyCode)
    {
        CustVendFine_BR      custVendFine;
        FineCalculator_BR    fineCalculator;

        custVendFine = _custTransOpen.CustVendTransOpen::custVendFine_BR();
        changecompany(_refCompany)
        {
            _custTransOpen.selectForUpdate(true);
            fineCalculator  = new FineCalculator_BR(custVendFine,
                                                    _paymentDate,
                                                    _custTransOpen.DueDate,
                                                    _amountCur,
                                                    _currencyCode,
                                                    _custTransOpen.getCalendarDerivation_BR());

            // Calculating and updating fine amount
            _custTransOpen.FineAmount_BR = fineCalculator.calculate();
            _custTransOpen.update();
        }
        return _custTransOpen.FineAmount_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAndUpdateInterestAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Interest amount
    /// </summary>
    /// <param name="_refCompany">
    /// The company related to the CustOpentransaction that shold be updated
    /// </param>
    /// <param name="_custTransOpen">
    /// The open transaction for which to calculate the fine amount and Fine amount Currency
    /// </param>
    /// <param name="_paymentDate">
    /// The date used to calculate the Interest amount
    /// </param>
    /// <param name="_amountCur">
    /// Amount used to calculate the Interest Amount
    /// </param>
    /// <param name="_currencyCode">
    /// Currency used
    /// </param>
    /// <returns>
    /// Returns the calculated interest amount
    /// </returns>
    private static FineAmount_BR calculateAndUpdateInterestAmount_BR(
                                                    CompanyId           _refCompany,
                                                    CustVendTransOpen   _custTransOpen,
                                                    TransDate           _paymentDate,
                                                    AmountCur           _amountCur,
                                                    CurrencyCode        _currencyCode)
    {
        CustVendInterest_BR      custVendFinInterest;
        InterestCalculator_BR    finInterestCalculator;

        custVendFinInterest = _custTransOpen.CustVendTransOpen::custVendInterest_BR();
        changecompany(_refCompany)
        {
            _custTransOpen.selectForUpdate(true);
            finInterestCalculator  = new InterestCalculator_BR(custVendFinInterest,
                                                               _paymentDate,
                                                               _custTransOpen.DueDate,
                                                               _amountCur,
                                                               _currencyCode,
                                                               _custTransOpen.getCalendarDerivation_BR());

            // Calculating and updating fine amount
            _custTransOpen.InterestAmount_BR = finInterestCalculator.calculate();
            _custTransOpen.update();
        }

        return  _custTransOpen.InterestAmount_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOpenInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the open amount for a <c>CustTransOpen</c> open record.
    /// </summary>
    /// <param name="_openCompanyId">
    ///    The company of the selected invoice.
    /// </param>
    /// <param name="_openRecId">
    ///    The record ID of the selected invoice.
    /// </param>
    /// <param name="_currencyCode">
    ///    The currency the open amount will be returned in.
    /// </param>
    /// <param name="_transCompanyId">
    ///    The company of the <c>LedgerJournalTrans</c> payment record.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date of the <c>LedgerJournalTrans</c> payment record.
    /// </param>
    /// <param name="_transExchRate">
    ///    The exchange rate of the <c>LedgerJournalTrans</c> payment record; optional.
    /// </param>
    /// <param name="_paymMode">
    ///    The method of payment of the <c>LedgerJournalTrans</c> payment record; optional.
    /// </param>
    /// <returns>
    ///    The open amount of the selected invoice.
    /// </returns>
    /// <remarks>
    ///    Calculates the open amount for a <c>CustTransOpen</c> open record adjusted for cash discount and
    ///    currency exchange.
    /// </remarks>
    public static AmountCur calculateOpenInvoiceAmount(
        CompanyId _openCompanyId,
        RecId _openRecId,
        CurrencyCode _currencyCode,
        CompanyId _transCompanyId,
        TransDate _transDate,
        ExchRate _transExchRate = 0,
        PaymMode _paymMode = '')
    {
        AmountCur openAmount;
        AmountCur cashDiscToTake;
        AmountCur amountAlreadyMarked;
        CustTransCashDisc custTransCashDisc;
        CustTransOpen custTransOpen;
        CustTrans custTrans;
        CustVendTransOpenData custVendTransOpenData;
        CurrencyCode openCurrencyCode;
        CurrencyExchangeHelper openExchHelper;
        CurrencyExchangeHelper transExchHelper;
        CurrencyCode openMstCurrencyCode;
        CurrencyCode transMstCurrencyCode;
        AmountMST amountMST;
        DiscGraceDays foundGraceDays = 0;

        AmountCur interestAmountPaymCur;
        AmountCur interestAmountMST;
        AmountCur fineAmountPaymCur;
        AmountCur fineAmountMST;

        changecompany(_openCompanyId)
        {
            // Find open invoice record
            custTransOpen = CustTransOpen::find(_openRecId);
            custVendTransOpenData = CustVendTransOpenData::construct(custTransOpen);

            CustVendCashDiscountHelper cashDiscountHelper = CustVendCashDiscountHelper::construct(custTransOpen);
            cashDiscountHelper.parmDiscountDate(_transDate);
            foundGraceDays = custVendTransOpenData.findPaymModeTable(false).DiscGraceDays;
            cashDiscountHelper.parmGraceDays(foundGraceDays);

            cashDiscountHelper.parmCashDiscountTaken(cashDiscountHelper.parmCashDiscountTaken() + custVendTransOpenData.findCashDiscountMarkedToBeTaken());

            cashDiscToTake = cashDiscountHelper.determineCashDiscForOpenAmount();

            if (BrazilParameters::isEnabled())
            {
                // Calculating the Interest/Fine amounts
                LedgerJournalEngine_CustPayment::calculateAndUpdateInterestAmount_BR(_openCompanyId, custTransOpen, _transDate, custTransOpen.AmountCur, _currencyCode);
                LedgerJournalEngine_CustPayment::calculateAndUpdateFineAmount_BR(_openCompanyId, custTransOpen, _transDate, custTransOpen.AmountCur, _currencyCode);
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00066, funcName());
            }
        }

        openAmount = custVendTransOpenData.remainAmountCashDisc(_transDate, foundGraceDays);

        // Get currency of invoice
        custTrans = custTransOpen.custTrans();
        openCurrencyCode = custTrans.CurrencyCode;

        // Adjust for currency, if necessary
        if (openCurrencyCode != _currencyCode)
        {
            openExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(_openCompanyId).RecId), _transDate);

            amountMST = openExchHelper.calculateTransactionToAccounting(openCurrencyCode, openAmount, false);

            if (BrazilParameters::isEnabled())
            {
                interestAmountMST = openExchHelper.calculateTransactionToAccounting(openCurrencyCode, custTransOpen.InterestAmount_BR, false);
                fineAmountMST = openExchHelper.calculateTransactionToAccounting(openCurrencyCode, custTransOpen.FineAmount_BR, false);
            }

            if (_openCompanyId != _transCompanyId)
            {
                // Retreive MST currency code for both companies
                changecompany(_openCompanyId)
                {
                    openMstCurrencyCode = CompanyInfoHelper::standardCurrency();
                }

                changecompany(_transCompanyId)
                {
                    transMstCurrencyCode = CompanyInfoHelper::standardCurrency();
                }

                if (transMstCurrencyCode != openMstCurrencyCode)
                {
                    // Convert from invoice company MST to payment company MST
                    amountMST = openExchHelper.calculateAccountingToTransaction(transMstCurrencyCode, amountMST, false);

                    if (BrazilParameters::isEnabled())
                    {
                        interestAmountMST = openExchHelper.calculateAccountingToTransaction(transMstCurrencyCode, interestAmountMST, false);
                        fineAmountMST = openExchHelper.calculateAccountingToTransaction(transMstCurrencyCode, fineAmountMST, false);
                    }
                }
            }

            transExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(_transCompanyId).RecId), _transDate);

            if (_transExchRate != 0)
            {
                transExchHelper.parmExchangeRate1(_transExchRate);
            }

            openAmount = transExchHelper.calculateAccountingToTransaction(_currencyCode, amountMST, true);

            if (BrazilParameters::isEnabled())
            {
                interestAmountPaymCur = transExchHelper.calculateAccountingToTransaction(_currencyCode, interestAmountMST, true);
                LedgerJournalEngine_CustPayment::updateInterestAmountPaymCur_BR(_openCompanyId, custTransOpen, interestAmountPaymCur);

                fineAmountPaymCur = transExchHelper.calculateAccountingToTransaction(_currencyCode, fineAmountMST, true);
                LedgerJournalEngine_CustPayment::updateFineAmountPaymCur_BR(_openCompanyId, custTransOpen, fineAmountPaymCur);
            }
        }
        else if (BrazilParameters::isEnabled())
        {
            // updating Interest/Fine Amount in payment Currency
            LedgerJournalEngine_CustPayment::updateInterestAmountPaymCur_BR(_openCompanyId, custTransOpen, custTransOpen.InterestAmount_BR);
            LedgerJournalEngine_CustPayment::updateFineAmountPaymCur_BR(_openCompanyId, custTransOpen, custTransOpen.FineAmount_BR);
        }

        return openAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkedInvoiceSpecTrans</Name>
				<Source><![CDATA[
    //
    // Creates SpecTrans with the MarkedInvoiceRecId as the Ref and the LedgerJournalTrans
    // as the Spec using the instance of the Specification class passed in.
    //
    private static void createMarkedInvoiceSpecTrans(LedgerJournalTrans _ledgerJournalTrans, CustVendOpenTransManager _custVendOpenTransManager)
    {
        CustTransOpen invoiceCustTransOpen;

        changecompany(_ledgerJournalTrans.MarkedInvoiceCompany)
        {
            invoiceCustTransOpen = CustTransOpen::find(_ledgerJournalTrans.MarkedInvoiceRecId);
        }

        _custVendOpenTransManager.updateTransMarked(invoiceCustTransOpen, NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doInvoiceAndOpenRecIdMatchUp</Name>
				<Source><![CDATA[
    //
    // Determines if the passed in CustTrans.Invoice and CustTransOpen.RecId fields match.
    // A match is defined to be a state where either both fields are empty or the CustTransOpen.RecId
    // points to a CustTransOpen record that has a CustTrans parent record with an Invoice that
    // matches CustTrans.Invoice. In simpler terms, they are a related pair.
    //
    public static boolean doInvoiceAndOpenRecIdMatchUp(InvoiceId _custTransInvoice, RecId _custTransOpenRecId)
    {
        CustTransOpen   custTransOpen;
        CustTrans       custTrans;

        if (_custTransInvoice == '' && _custTransOpenRecId == 0)
        {
            //They're both empty, so they match.
            return true;
        }

        //Otherwise, at least one is non-empty so see if they match.
        select firstonly RecId from custTransOpen
            where custTransOpen.RecId == _custTransOpenRecId
            join RecId from custTrans
                where custTrans.RecId     == custTransOpen.RefRecId
                   && custTrans.Invoice   == _custTransInvoice;

        return (custTransOpen.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedInvoiceSettlementIndicator</Name>
				<Source><![CDATA[
    //
    // Returns indicator used for designating a non-invoice or multiple transaction settlement.
    //
    public static InvoiceId getMarkedInvoiceSettlementIndicator()
    {
        ;
        return '*';
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustBankAccountIdFromDebitMandateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the value for field CustVendBankAccountId in table <c>LedgerJournalTrans</c> based on if a <c>CustDirectDebitMandate</c> record is found.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The payment line.</param>
    /// <remarks>
    /// Fills the value for field CustVendBankAccountId from the direct debit mandate.
    /// </remarks>
    public void updateCustBankAccountIdFromDebitMandateId(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (custTable.BankAccount == '')
        {
            if (_ledgerJournalTrans.MarkedInvoice != '' && CustPaymModeTable::find(_ledgerJournalTrans.PaymMode).IsSEPA)
            {
                CustDirectDebitMandate custDirectDebitMandate;
                SpecTransDirectDebitMandate_W specTransDirectDebitMandate;

                select firstonly crosscompany TableId from specTransDirectDebitMandate
                    where specTransDirectDebitMandate.SpecCompany == _ledgerJournalTrans.DataAreaId
                        && specTransDirectDebitMandate.SpecRecId == _ledgerJournalTrans.RecId
                        && specTransDirectDebitMandate.SpecTableId == _ledgerJournalTrans.TableId
                join BankAccount, RecId from custDirectDebitMandate
                    where custDirectDebitMandate.RecId == specTransDirectDebitMandate.DirectDebitMandate;

                if (custDirectDebitMandate.RecId != 0)
                {
                    _ledgerJournalTrans.CustVendBankAccountId = custDirectDebitMandate.BankAccount;
                }
                else
                {
                    _ledgerJournalTrans.CustVendBankAccountId = '';
                }
            }
        }
        else
        {
            _ledgerJournalTrans.CustVendBankAccountId = custTable.BankAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFineAmountPaymCur_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Fine amount Currency
    /// </summary>
    /// <param name="_refCompany">
    /// The company related to the CustOpentransaction that shold be updated
    /// </param>
    /// <param name="_custTransOpen">
    /// The open transaction for which to calculate the fine amount and Fine amount Currency
    /// </param>
    /// <param name="_amountPaymCur">
    /// Amount used to calculate the Interest Amount
    /// </param>
    private static void updateFineAmountPaymCur_BR(
                                            CompanyId           _refCompany,
                                            CustVendTransOpen   _custTransOpen,
                                            AmountCur           _amountPaymCur)
    {
        if (_custTransOpen.RecId)
        {
            changecompany(_refCompany)
            {
                _custTransOpen.selectForUpdate(true);
                _custTransOpen.FineAmountPaymCur_BR = _amountPaymCur;
                _custTransOpen.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInterestAmountPaymCur_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Interest amount Currency
    /// </summary>
    /// <param name="_refCompany">
    /// The company related to the CustOpentransaction that shold be updated
    /// </param>
    /// <param name="_custTransOpen">
    /// The open transaction for which to calculate the fine amount and Fine amount Currency
    /// </param>
    /// <param name="_amountPaymCur">
    /// Amount used to calculate the Interest Amount
    /// </param>
    private static void updateInterestAmountPaymCur_BR(
                                                    CompanyId           _refCompany,
                                                    CustVendTransOpen   _custTransOpen,
                                                    AmountCur           _amountPaymCur)

    {
        if (_custTransOpen.RecId)
        {
            changecompany(_refCompany)
            {
                _custTransOpen.selectForUpdate(true);
                _custTransOpen.InterestAmountPaymCur_BR = _amountPaymCur;
                _custTransOpen.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkedInvoiceSpecTrans</Name>
				<Source><![CDATA[
    //
    // Updates the SpecTrans for the passed in LedgerJournalTrans record. Performs a synchronization of the
    // MarkedInvoice and MarkedInvoiceRecId fields if necessary.
    //
    public static void updateMarkedInvoiceSpecTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustVendOpenTransManager custVendOpenTransManager;
        SpecTrans specTrans;
        boolean isUpdated = false;

        // Changing company to MarkedInvoiceCompany so that the MarkedInvoice and MarkedInvoiceRecId can be located.
        changecompany(_ledgerJournalTrans.MarkedInvoiceCompany)
        {
            if (!LedgerJournalEngine_CustPayment::doInvoiceAndOpenRecIdMatchUp(_ledgerJournalTrans.MarkedInvoice,
                                                                              _ledgerJournalTrans.MarkedInvoiceRecId))
            {
                // The MarkedInvoice and MarkedInvoiceRecId fields have fallen out of synchronization.
                if (_ledgerJournalTrans.MarkedInvoice == '')
                {
                    // No invoice has been specified.
                    _ledgerJournalTrans.MarkedInvoiceRecId      = 0;
                    _ledgerJournalTrans.MarkedInvoiceCompany    = '';
                }
                else
                {
                    // Get earliest due CustTransOpen RecId for this invoice.
                    _ledgerJournalTrans.MarkedInvoiceRecId = CustTransOpen::getFirstDueRecIdByInvoice(_ledgerJournalTrans.MarkedInvoice);

                    if (_ledgerJournalTrans.MarkedInvoiceRecId == 0)
                    {
                        // There are no open transactions for the invoice
                        throw error("@SYS105826");
                    }
                }
                isUpdated = true;
            }
        }

        // Get the SpecTrans record for this CustTransOpen record.
        specTrans = SpecTrans::find(
            _ledgerJournalTrans.company(),
            _ledgerJournalTrans.TableId,
            _ledgerJournalTrans.RecId,
            _ledgerJournalTrans.MarkedInvoiceCompany,
            tableNum(CustTransOpen),
            _ledgerJournalTrans.MarkedInvoiceRecId);

        ttsbegin;

        if (!specTrans)
        {
            // Create the SpecTransManager class object for this LedgerJournalTrans record.
            custVendOpenTransManager = CustVendOpenTransManager::construct(_ledgerJournalTrans);

            // Delete any existing SpecTrans for this LedgerJournalTrans record before a new one is created.
            custVendOpenTransManager.resetMarkedTrans();

            // Choose the correct default settlement type.
            if (CustParameters::find().AutoSettle)
            {
                // Automatically settle open transactions.
                _ledgerJournalTrans.SettleVoucher = SettlementType::OpenTransact;
            }
            else
            {
                // No settlement should be done.
                _ledgerJournalTrans.SettleVoucher = SettlementType::None;
            }

            if (_ledgerJournalTrans.MarkedInvoiceRecId != 0)
            {
                // There is a MarkedInvoice, create the SpecTrans.
                LedgerJournalEngine_CustPayment::createMarkedInvoiceSpecTrans(_ledgerJournalTrans, custVendOpenTransManager);

                // Settle the selected transactions.
                _ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
            }

            isUpdated = true;
        }

        if (isUpdated && _ledgerJournalTrans.RecId != 0)
        {
            // The LedgerJournalTrans record was updated above.
            _ledgerJournalTrans.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write(
        LedgerJournalTrans _ledgerJournalTrans, 
        boolean _updateCashDisc = false, 
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null, 
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null, 
        LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        //This code is an extensibility point.  Do not delete.
        super(_ledgerJournalTrans, _updateCashDisc, _ledgerJournalTrans_Asset, _ledgerJournalTrans_RDeferrals, _ledgerJournalTrans_RCash);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditTrans</Name>
				<Source><![CDATA[
    protected boolean allowEditTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        //This code is an extensibility point.    Do not delete.
        return super(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultDimension</Name>
				<Source><![CDATA[
    public void initDefaultDimension(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null, LedgerJournalTrans_RAsset _ledgerJournalTrans_RAsset = null, LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null)
    {
        //This code is an extensibility point.    Do not delete.
        super(_ledgerJournalTrans, _ledgerJournalTrans_Asset, _ledgerJournalTrans_RAsset, _ledgerJournalTrans_RDeferrals);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>