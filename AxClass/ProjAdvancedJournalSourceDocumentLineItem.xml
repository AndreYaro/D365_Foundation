<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalSourceDocumentLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjAdvancedJournalSourceDocumentLineItem</c> class provides the information to handle the distributions and
///    sub-ledger journal lines of a <c>ProjAdvancedJournalLine</c> table record.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_ProjAdvancedJournal), SourceDocumentLine_ProjAdvancedJournal::ProjAdvancedJournalLine)]
public class ProjAdvancedJournalSourceDocumentLineItem extends SourceDocumentLineItem implements
    SourceDocumentLineItemIProject,
    SourceDocumentLineItemIProjectTransDate,
    SourceDocumentLineItemIAccDateUpdateable,
    SourceDocumentLineItemIProduct,
    SourceDocumentLineItemIInventory
{
    ProjAdvancedJournalLine projAdvancedJournalLine;
    ProjParameters          projParameters;
    private InventTable inventTable;
    private boolean projOpsEnableFixedRateAgreementsNonStockedFeature = FeatureStateProvider::IsFeatureEnabled(ProjOpsFixedRateAgreementsForNonStockedFeature::instance());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the ledgal entity for the line.
    /// </summary>
    /// <returns>
    ///     Returns the legal entity as specified on the current line.
    /// </returns>
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the amount map for the line.
    /// </summary>
    /// <returns>
    ///     A new <c>SourceDocumentAmountMap</c> instance.</returns>
    /// <remarks>
    ///     This map is cached on the <c>SourceDocumentLineItem</c> class in the
    ///     parmSourceDocumentAmountMap method. All consumers should use that method
    ///     to retrieve the map, as it will call this method as necessary.
    /// </remarks>
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        // Create map
        SourceDocumentAmountMap sourceDocumentAmountMap = SourceDocumentAmountMap::construct();
        boolean projOpsEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
        boolean isIntercompany = (projAdvancedJournalLine.DataAreaId != projAdvancedJournalLine.ProjDataAreaId);
        
        if (this.shouldCreateWorkInProcessDist(projOpsEnabled, isIntercompany))
        {
            // Creates Work in process distribution lines
            SourceDocumentAmount sourceDocumentAmountWip = SourceDocumentAmount::newFromLineItem(this, MonetaryAmount::WorkInProcess, projAdvancedJournalLine.ExtendedPrice, projAdvancedJournalLine.PriceCurrency, projAdvancedJournalLine.PriceExchangeRate);
            sourceDocumentAmountMap.insert(sourceDocumentAmountWip);
        }

        // Cost distribution line should not be created for proj ops intercompany scenario when cost amount is 0.
        if (projAdvancedJournalLine.TransType != ProjTransType::Revenue
            && !(projOpsEnabled
            && isIntercompany
            && !projAdvancedJournalLine.ExtendedCost))
        {
            // Creates Extended price distribution lines
            SourceDocumentAmount sourceDocumentAmountPrice = SourceDocumentAmount::newFromLineItem(this, MonetaryAmount::ExtendedPrice, projAdvancedJournalLine.ExtendedCost, projAdvancedJournalLine.CostCurrency, projAdvancedJournalLine.CostExchangeRate);
            sourceDocumentAmountMap.insert(sourceDocumentAmountPrice);
        }

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateWorkInProcessDist</Name>
				<Source><![CDATA[
    private boolean shouldCreateWorkInProcessDist(boolean _projOpsEnabled, boolean _isIntercompany)
    {
        return (this.shouldCreateWIPDistForNonZeroPrice(_projOpsEnabled, _isIntercompany)
            || this.shouldCreateWIPDistForFeeWithZeroPrice(_projOpsEnabled));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateWIPDistForNonZeroPrice</Name>
				<Source><![CDATA[
    private boolean shouldCreateWIPDistForNonZeroPrice(boolean _projOpsEnabled, boolean _isIntercompany)
    {
        boolean ret = projAdvancedJournalLine.ExtendedPrice;

        // Work in Process line should not be created for proj ops intercompany scenario when Accrue Revenue is not checked in Proj Parameters > Intercompany tab.
        if (ret 
            && _projOpsEnabled
            && _isIntercompany)
        {
            ProjIntercompanyParameters projIntercompanyParameters = ProjIntercompanyParameters::findByDataAreaIdAndBorrowingLegalEntity(projAdvancedJournalLine.DataAreaId, projAdvancedJournalLine.ProjDataAreaId, false);
            ret = projIntercompanyParameters.WIPRevenue;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateWIPDistForFeeWithZeroPrice</Name>
				<Source><![CDATA[
    private boolean shouldCreateWIPDistForFeeWithZeroPrice(boolean _projOpsEnabled)
    {
        boolean ret = false;

        // Create work in process distribution line for fee journal with 0 amount.
        if  (_projOpsEnabled 
            && projAdvancedJournalLine.TransType == ProjTransType::Revenue 
            && !projAdvancedJournalLine.ExtendedPrice)
        {
            ProjCDSActualsImport import = ProjCDSActualsImport::findByAdvancedJournalLine(projAdvancedJournalLine.RecId);
            if (import
                && import.TransactionClassification == ProjCDSConstants::TransactionClassification_Fee
                && Import.TransType == ProjCDSTransType::Sales)
            {
                ret = true;
            }
        }
           
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        projAdvancedJournalLine = _sourceDocumentLineImplementation;
        projParameters   = ProjParameters::find();

        if (projAdvancedJournalLine.TransType == ProjTransType::Item)
        {
            inventTable = InventTable::find(projAdvancedJournalLine.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdvancedJournalLine</Name>
				<Source><![CDATA[
    public ProjAdvancedJournalLine parmProjAdvancedJournalLine(ProjAdvancedJournalLine _projAdvancedJournalLine = projAdvancedJournalLine)
    {
        projAdvancedJournalLine = _projAdvancedJournalLine;

        return projAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        AccountingDistribution      accountingDistribution;
        AccountingDate              accountingDate;

        accountingDate = projAdvancedJournalLine.AccountingDate;

        // If allowed to update accounting date, get the updated accounting date
        if (projParameters.IsAccountingDateUpdateAllowed)
        {
            select firstonly AccountingDate from accountingDistribution
                where accountingDistribution.SourceDocumentLine == projAdvancedJournalLine.SourceDocumentLine;

            if (accountingDistribution.AccountingDate)
            {
                accountingDate = accountingDistribution.AccountingDate;
            }
        }

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default currency code.
    /// For project advanced journals, return the currency code of the cost and taxes.
    /// </summary>
    /// <returns>
    /// The currency code for the cost and tax side of the project advanced journal.
    /// </returns>
    /// <remarks>
    /// The currency code is set at the <c>SourceDocumentAmount</c> level.  Work in Process may have a difference currency.
    /// </remarks>
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return this.parmCostCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the cost and taxes.
    /// </summary>
    /// <returns>
    /// The currency code for the cost and taxes.
    /// </returns>
    public CurrencyCode parmCostCurrencyCode()
    {
        return projAdvancedJournalLine.CostCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default exchange rate.
    /// For project advanced journals, return the exchange rate of the cost, sales and taxes.
    /// </summary>
    /// <returns>
    /// Cost and Tax: Returns the exchange rate of the project advanced journal and for sales,
    /// Sales: Returns the fixed exchange rate if the projOpsEnableFixedRateAgreementsNonStockedFeature is enabled.
    /// </returns>
    /// <remarks>
    /// The exchange rate is set at the <c>SourceDocumentAmount</c> level.  Work in Process may have a difference exchange rate.
    /// </remarks>
    public ExchRate parmExchangeRate1()
    {
        ExchRate exchRate;

        if (projOpsEnableFixedRateAgreementsNonStockedFeature && projAdvancedJournalLine.ExtendedPrice)
        {
            ProjTable projTable;

            select firstonly ProjInvoiceProjId from projTable
                where projTable.ProjId == projAdvancedJournalLine.ProjId;

            if (projTable)
            {
                exchRate = ProjInvoiceCurrency::getFixedExchRate(projTable.ProjInvoiceProjId, projAdvancedJournalLine.PriceCurrency);
            }
        }

        if (!exchRate)
        {
            exchRate = this.parmCostExchangeRate();
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the exchange rate of the cost and taxes.
    /// </summary>
    /// <returns>
    /// The exchange rate for the cost and taxes.
    /// </returns>
    public ExchRate parmCostExchangeRate()
    {
        return projAdvancedJournalLine.CostExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLineNum()
    {
        return projAdvancedJournalLine.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentVoucher</Name>
				<Source><![CDATA[
    public Voucher parmCurrentVoucher(DataAreaId _dataAreaId)
    {
        return projAdvancedJournalLine.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionText</Name>
				<Source><![CDATA[
    public str parmTransactionText()
    {
        return projAdvancedJournalLine.Text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    public BusinessEvent documentsBusinessEvent()
    {
        return new BusinessEvent(enumNum(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        return projAdvancedJournalLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectActivityNumber</Name>
				<Source><![CDATA[
    public str parmProjectActivityNumber()
    {
        return projAdvancedJournalLine.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectCategoryId</Name>
				<Source><![CDATA[
    public str parmProjectCategoryId()
    {
        return projAdvancedJournalLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFundingSourceRecId</Name>
				<Source><![CDATA[
    public RefRecId parmProjectFundingSourceRecId()
    {
        // Pulled from allocations via ruleBasedAllocationList() method in AccDistProcessorProjectExtension class
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    public ProjIdBase parmProjectId()
    {
        return projAdvancedJournalLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLegalEntity</Name>
				<Source><![CDATA[
    public LegalEntityRecId parmProjectLegalEntity()
    {
        return CompanyInfo::findDataArea(projAdvancedJournalLine.ProjDataAreaId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmProjectDataAreaId()
    {
        return projAdvancedJournalLine.ProjDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLineProperty</Name>
				<Source><![CDATA[
    public str parmProjectLineProperty()
    {
        return projAdvancedJournalLine.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceCategoryRecId</Name>
				<Source><![CDATA[
    public RefRecId parmProjectResourceCategoryRecId()
    {
        return projAdvancedJournalLine.ResourceCategoryRoleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceRecId</Name>
				<Source><![CDATA[
    public RefRecId parmProjectResourceRecId()
    {
        return projAdvancedJournalLine.ResourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransactionId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjectTransactionId()
    {
        return projAdvancedJournalLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectItemSalesTaxGroup</Name>
				<Source><![CDATA[
    public SysGroup parmProjectItemSalesTaxGroup()
    {
        // return tax item group used for invoicing.
        return projAdvancedJournalLine.ProjectSalesTaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmProjectSalesCurrencyCode()
    {
        return projAdvancedJournalLine.PriceCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesExchangeRate</Name>
				<Source><![CDATA[
    public ExchRate parmProjectSalesExchangeRate()
    {
        return projAdvancedJournalLine.PriceExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesPrice</Name>
				<Source><![CDATA[
    public AmountCur parmProjectSalesPrice()
    {
        return projAdvancedJournalLine.UnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesUnit</Name>
				<Source><![CDATA[
    public SalesUnit parmProjectSalesUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesTaxGroup</Name>
				<Source><![CDATA[
    public SysGroup parmProjectSalesTaxGroup()
    {
        // return tax group used for invoicing.
        return projAdvancedJournalLine.ProjectSalesTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity()
    {
        return projAdvancedJournalLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransDate</Name>
				<Source><![CDATA[
    public ProjTransDate parmProjTransDate()
    {
        return projAdvancedJournalLine.ProjTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransType</Name>
				<Source><![CDATA[
    public ProjTransType parmTransType()
    {
        return projAdvancedJournalLine.TransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the accounting date can be updated when it lies in a closed period.
    /// </summary>
    /// <returns>
    /// true if the accounting date can be updated; otherwise, false.
    /// </returns>
    public boolean canUpdateAccountingDate()
    {
        return projParameters.IsAccountingDateUpdateAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsInterCompanyBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SourceDocumentLineItem</c> documents an intercompany business event.
    /// </summary>
    /// <returns>
    /// true if the <c>SourceDocumentLineItem</c> documents an intercompany business event; otherwise,
    /// false.
    /// </returns>
    public boolean documentsInterCompanyBusinessEvent()
    {
        if (projAdvancedJournalLine.ProjDataAreaId != curext())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        return projAdvancedJournalLine.ProjTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributeAmountsToLegalEntities</Name>
				<Source><![CDATA[
    public boolean parmDistributeAmountsToLegalEntities()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkInProcessDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the work in process accounting distribution for the given extended price accounting distribution.
    /// </summary>
    /// <param name="_accountingDistributionRecId">
    ///     The record id for an extended price accounting distribution.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///     A work in process <c>AccountingDistribution</c> matched with the given extended price accounting distribution.
    /// </returns>
    public static AccountingDistribution getWorkInProcessDistribution(AccountingDistributionRecId _accountingDistributionRecId, boolean _forUpdate = false)
    {
        accountingDistribution accountingDistribution;

        accountingDistribution.selectForUpdate(_forUpdate);
        accountingDistribution.allowIndexHint(true);

        select firstonly * from accountingDistribution
            index hint ReferenceDistributionIdx
            where accountingDistribution.ReferenceDistribution == _accountingDistributionRecId
                && accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::WorkInProcess
                && accountingDistribution.MonetaryAmount == MonetaryAmount::WorkInProcess;

        return accountingDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryDimensionId</Name>
				<Source><![CDATA[
    public Num parmInventoryDimensionId()
    {
        return projAdvancedJournalLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLotId</Name>
				<Source><![CDATA[
    public Num parmLotId()
    {
        return projAdvancedJournalLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategory</Name>
				<Source><![CDATA[
    public Common parmCategory()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryName</Name>
				<Source><![CDATA[
    public str parmCategoryName()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public Common parmInventTable()
    {
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmItemDataAreaId()
    {
        return projAdvancedJournalLine.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemIdBase parmItemId()
    {
        return projAdvancedJournalLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStocked</Name>
				<Source><![CDATA[
    public NoYesId parmStocked()
    {
        return inventTable.isStocked();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>