<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDataMaintenaceCheckResultController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlDataMaintenaceCheckResultController</c> is responsible for managing budget check results 
/// between transaction scopes of a <c>BudgetControlDataMaintenance</c> process.
/// </summary>
internal final class BudgetControlDataMaintenaceCheckResultController
{
    private Map headerCheckResults;
    private BudgetSourceTmp budgetErrorCheckResults;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        headerCheckResults = new Map(Types::Int64, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetControlDataMaintenaceCheckResultController construct()
    {
        return new BudgetControlDataMaintenaceCheckResultController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    internal void initialize(SourceDocumentHeaderTmp _sourceDocumentHeaderTmp)
    {
        BudgetControlMaintenanceProcessor::setBudgetCheckResultsTmp(budgetErrorCheckResults);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderCheckResult</Name>
				<Source><![CDATA[
    internal BudgetCheckResult getHeaderCheckResult(SourceDocumentHeaderRecId _headerRecId)
    {
        BudgetCheckResult checkResult;

        if (headerCheckResults && headerCheckResults.exists(_headerRecId))
        {
            checkResult = headerCheckResults.lookup(_headerRecId);
        }

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetCheckResults</Name>
				<Source><![CDATA[
    internal void saveBudgetCheckResults(SourceDocumentHeaderTmp _sourceDocumentHeaderTmp)
    {
        // For passing budget checks, the check result will be saved to the budget source
        // Store the results in case of a future rollback due to a failed check.
        BudgetSource budgetSource;
        SourceDocumentLine sourceDocumentLine;

        while select maxof(CheckResult) from budgetSource
                where budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
                    // belows are added in order to hit budgetSourceIdx
                    && budgetSource.LedgerEntryGeneralJournalEntry == 0
                    && budgetSource.LedgerEntryJournalNumber == ''
                    && budgetSource.LedgerEntryJournalReferenceNumber == ''
                    && budgetSource.LedgerEntryJournalLegalEntity == 0
                    && budgetSource.BudgetTransactionLine == 0
            join SourceDocumentHeader from sourceDocumentLine
                group by SourceDocumentHeader
                where budgetSource.SourceDocumentLine == sourceDocumentLine.RecId
                    && sourceDocumentLine.ParentSourceDocumentLine == 0
            exists join _sourceDocumentHeaderTmp
                where sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeaderTmp.SourceDocumentHeader
        {
            this.updateHeaderCheckResults(budgetSource.CheckResult, sourceDocumentLine.SourceDocumentHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateErrorCheckResults</Name>
				<Source><![CDATA[
    internal void populateErrorCheckResults()
    {
        // On a failed budget check, the transaction is rolled back so we no longer have access to the completed checks
        // If we check all budget sources, we will get the original check before the processing
        // The only valid checks are those from the latest budget check.
        BudgetSource budgetSource;
        SourceDocumentLine sourceDocumentLine;

        while select maxof(CheckResult) from budgetErrorCheckResults
            join budgetSource
                where budgetErrorCheckResults.BudgetSourceRecId == budgetSource.RecId
            join SourceDocumentHeader from sourceDocumentLine
                group by SourceDocumentHeader
                where budgetSource.SourceDocumentLine == sourceDocumentLine.RecId
                    && sourceDocumentLine.ParentSourceDocumentLine == 0
        {
            this.updateHeaderCheckResults(budgetErrorCheckResults.CheckResult, sourceDocumentLine.SourceDocumentHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHeaderCheckResults</Name>
				<Source><![CDATA[
    private void updateHeaderCheckResults(BudgetCheckResult _budgetCheckResult, SourceDocumentHeaderRecId _headerRecId)
    {
        if (headerCheckResults.exists(_headerRecId))
        {
            // Persist the highest check result for the document.
            // For example, returns of budget funds produce a no check during finalization. This gives the impression that the entire document never got checked.
            _budgetCheckResult = max(_budgetCheckResult, headerCheckResults.lookup(_headerRecId));
        }

        headerCheckResults.insert(_headerRecId, _budgetCheckResult);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>