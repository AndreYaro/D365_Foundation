<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostInventoryCostObjectDerivationRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostInventoryCostObjectDerivationRule</c> class resolves the inventory cost object <c>CostInventoryCostObject</c>
/// for an inventory account <c>CostInventoryAccount</c>
/// </summary>
public class CostInventoryCostObjectDerivationRule extends CostObjectDerivationRule
{
    Map     cache;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        cache = new Map(Types::Class, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    public CostObject resolve(CostAccountBase _account)
    {
        CostInventoryAccount    inventoryAccount = _account;
        InventDimParm           inventDimParm;
        CostInventoryCostObject costObject;

        if (cache.exists(_account))
        {
            costObject = cache.lookup(_account);
        }
        else
        {
            // Using inventDim from inventTrans in case batchNumber or serialNumber is updated automatically due to setup.
            InventDimId inventDimId = InventTrans::findRecId(inventoryAccount.parmInventTransRecId()).inventDimId;
            if (inventDimId != inventoryAccount.parmInventDimId())
            {
                inventoryAccount.parmInventDimId(inventDimId);
            }

            InventDim inventDim = InventDim::find(inventDimId);
            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(inventoryAccount.parmItemId());
            inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParm);
            inventDim.clearNotSelectedDim(inventDimParm);

            costObject = CostInventoryCostObject::newCostObject(inventoryAccount.parmDataAreaId(), inventoryAccount.parmItemId(), InventDim::findOrCreate(inventDim).InventDimId);
            cache.insert(_account, costObject);
        }

        return costObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostInventoryCostObjectDerivationRule construct()
    {
        CostInventoryCostObjectDerivationRule   rule;

        rule = SysTransactionScopeCache::get(classStr(CostInventoryCostObjectDerivationRule), '', rule);

        if (!rule)
        {
            rule = new CostInventoryCostObjectDerivationRule();
            SysTransactionScopeCache::set(classStr(CostInventoryCostObjectDerivationRule), '', rule);
        }

        return rule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>