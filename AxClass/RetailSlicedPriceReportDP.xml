<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSlicedPriceReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailSlicedPriceReportDP</c> class provides data source for sliced price report.
/// </summary>
[
SRSReportParameterAttribute(classStr(RetailSlicedPriceReportRDPContract))
]
internal class RetailSlicedPriceReportDP extends SRSReportDataProviderPreProcessTempDB
{
    TmpRetailPriceListDisplayValues retailPriceList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRetailPriceListTmpTable</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tablestr(TmpRetailPriceListDisplayValues))]
    internal TmpRetailPriceListDisplayValues getRetailPriceListTmpTable()
    {
        return retailPriceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        // This is used for telemetry to tell how many items are involved in price calculation.
        int64 numberOfRecords;

        using(var instrumentation = RetailPricingInstrumentationSegment::construct(
            classStr(RetailSlicedPriceReportDP), methodStr(RetailPriceReportDP, processReport)))
        {
            RetailSlicedPriceReportRDPContract contract =
                this.parmDataContract() as RetailSlicedPriceReportRDPContract;
            RetailChannelTable channel = RetailChannelTable::findByOperatingUnitId(
                contract.parmOMOperatingUnitRecId());
            RefRecId channelRecId = channel.RecId;

            List priceDiscountLines = new List(Types::Class);

            RecordInsertList listOfDisplayDetails = new RecordInsertList(
                tableNum(TmpRetailPriceListDisplayValues),
                true, // skip insert
                true, // skip database log
                true, // skip events
                true, // skip aos validation
                true, // skip RLS validation
                retailPriceList);

            ListEnumerator inventDimIdEnumerator = contract.parmInventDimIdListList().getEnumerator();
            ListEnumerator retailVariantIdEnumerator = contract.parmRetailVariantIdList().getEnumerator();
            ListEnumerator itemIdEnumerator = contract.parmItemIdList().getEnumerator();
            ListEnumerator referenceRecIdEnumerator = contract.parmReferenceRecIdList().getEnumerator();
            ListEnumerator salesUnitEnumerator = contract.parmSalesUnitList().getEnumerator();
            ListEnumerator productNameEnumerator = contract.parmProductNameList().getEnumerator();

            while(referenceRecIdEnumerator.moveNext())
            {
                inventDimIdEnumerator.moveNext();
                retailVariantIdEnumerator.moveNext();
                itemIdEnumerator.moveNext();
                salesUnitEnumerator.moveNext();
                productNameEnumerator.moveNext();

                InventDimId inventDimId = inventDimIdEnumerator.current();
                RetailVariantId retailVariantId = retailVariantIdEnumerator.current();
                ItemId itemId = itemIdEnumerator.current();
                RefRecId referenceRecId = referenceRecIdEnumerator.current();
                SalesUnit salesUnit = salesUnitEnumerator.current();
                EcoResProductName productName = productNameEnumerator.current();

                InventDim localInventDim = InventDim::find(inventDimId);

                RetailPriceDiscountLine priceDiscountLine = new RetailPriceDiscountLine();
                priceDiscountLine.parmChannelRefRecId(channelRecId);
                priceDiscountLine.parmInventDimId(inventDimId);
                priceDiscountLine.parmRetailVariantId(retailVariantId);
                priceDiscountLine.parmItemId(itemId);
                // The price report only calculates price for a single product. Set quantity to 1.
                priceDiscountLine.parmQty(1);
                priceDiscountLine.parmReferenceRecId(referenceRecId);
                priceDiscountLine.parmSalesUnit(salesUnit);
                priceDiscountLines.addEnd(priceDiscountLine);

                retailPriceList.clear();
                retailPriceList.AssortmentRecId = referenceRecId;
                retailPriceList.ChannelRecId = channelRecId;
                retailPriceList.ItemId = itemId;
                retailPriceList.VariantId = retailVariantId;
                retailPriceList.ProductName = productName;
                retailPriceList.Currency = channel.Currency;

                if (localInventDim)
                {
                    retailPriceList.VariantName = localInventDim.preFixValue();
                    retailPriceList.Style = localInventDim.InventStyleId;
                    retailPriceList.Color = localInventDim.InventColorId;
                    retailPriceList.Size = localInventDim.InventSizeId;
                    retailPriceList.Config = localInventDim.configId;
                }

                listOfDisplayDetails.add(retailPriceList);
                ++numberOfRecords;
            }

            listOfDisplayDetails.insertDatabase();

            date tempDate = contract.parmCalculationStartDate();
            int numberOfDays = 1;

            while(tempDate <= contract.parmCalculationEndDate())
            {
                utcdatetime transactionUTCTime = DateTimeUtil::newDateTime(tempDate, 0, DateTimeUtil::getUserPreferredTimeZone());

                // Calculate the price with the right time with the respect of the channel timezone.
                RetailPricingCalculatorCreator::getInstance().createPriceCheck().calculateIndependentPriceDiscountsWithDateTime(
                    channelRecId, priceDiscountLines,
                RetailPricingEngineHelper::getSessionDateTimeInChannelTimeZone(channelRecId, transactionUTCTime));

                this.updatePriceReportRecords(priceDiscountLines, numberOfDays, contract.parmDisplayPriceChangesOnly());

                numberOfDays++;
                tempDate++;
            }

            instrumentation.addExtendedData(varStr(numberOfRecords), int642Str(numberOfRecords));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceReportRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update price for price report db.
    /// </summary>
    /// <param name = "_priceDiscountLines">The price discount lines.</param>
    /// <param name = "_numberOfDays">The day number.</param>
    /// <param name = "_displayPriceChangesOnly">Whether to display only item with price changed..</param>
    private void updatePriceReportRecords(
        List _priceDiscountLines,
        int _numberOfDays,
        boolean _displayPriceChangesOnly)
    {
        RetailPriceDiscountLine priceDiscountLine;

        ListEnumerator priceDiscountLinesEnumerator = _priceDiscountLines.getEnumerator();

        ttsbegin;
        while (priceDiscountLinesEnumerator.moveNext())
        {
            priceDiscountLine = priceDiscountLinesEnumerator.current();
            TmpRetailPriceListDisplayValues priceListLine = this.selectPriceListRecordForUpdate(priceDiscountLine);
            Price activePrice = priceDiscountLine.parmPrice() - priceDiscountLine.parmDiscount();

            boolean dashOutPrice = false;
            if (_numberOfDays > 1)
            {
                dashOutPrice = _displayPriceChangesOnly && activePrice == priceListLine.ActivePrice;
            }
            // Active price of tmp db is not used for price report.
            // Use this to store latest active price.
            priceListLine.ActivePrice = activePrice;
            
            str activePriceString = dashOutPrice ? '-' : strFmt("%1", activePrice);
            
            switch(_numberOfDays)
            {
                case 1:
                    priceListLine.PriceDay1 = activePriceString;
                    break;
                case 2:
                    priceListLine.PriceDay2 = activePriceString;
                    break;
                case 3:
                    priceListLine.PriceDay3 = activePriceString;
                    break;
                case 4:
                    priceListLine.PriceDay4 = activePriceString;
                    break;
                case 5:
                    priceListLine.PriceDay5 = activePriceString;
                    break;
                case 6:
                    priceListLine.PriceDay6 = activePriceString;
                    break;
                case 7:
                    priceListLine.PriceDay7 = activePriceString;
                    break;
            }

            priceListLine.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPriceListRecordForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select price report record  for update by price discount line.
    /// </summary>
    /// <param name = "_line">The price discount line.</param>
    /// <returns>A record.</returns>
    private TmpRetailPriceListDisplayValues selectPriceListRecordForUpdate(RetailPriceDiscountLine _line)
    {
        TmpRetailPriceListDisplayValues tmpRetailPriceListDisplayValuesLocal = retailPriceList;

        select forupdate tmpRetailPriceListDisplayValuesLocal
            where tmpRetailPriceListDisplayValuesLocal.AssortmentRecId == _line.parmReferenceRecId()
            && tmpRetailPriceListDisplayValuesLocal.ChannelRecId == _line.parmChannelRefRecId()
            && tmpRetailPriceListDisplayValuesLocal.ItemId == _line.parmItemId()
            && tmpRetailPriceListDisplayValuesLocal.VariantId == _line.parmRetailVariantId();

        return tmpRetailPriceListDisplayValuesLocal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>