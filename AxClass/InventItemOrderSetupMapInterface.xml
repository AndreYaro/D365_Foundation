<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemOrderSetupMapInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Base class providing an interface to common functionality applicable for tables mapped to the <c>InventItemOrderSetupMap</c> table map.
/// </summary>
public abstract class InventItemOrderSetupMapInterface
{
    private InventItemOrderSetupMap inventItemOrderSetupMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new ()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventItemOrderSetupMap</Name>
				<Source><![CDATA[
    private void initializeInventItemOrderSetupMap(InventItemOrderSetupMap _inventItemOrderSetupMap)
    {
        inventItemOrderSetupMap = _inventItemOrderSetupMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventItemOrderSetupMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final InventItemOrderSetupMap parmInventItemOrderSetupMap()
    {
        return inventItemOrderSetupMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a <c>InventItemOrderSetupMapInterface</c> object based on the provided <c>InventItemOrderSetupMap</c> record.
    /// </summary>
    /// <param name = "_InventItemOrderSetupMap">
    ///     A <c>InventItemOrderSetupMap</c> record to create a <c>InventItemOrderSetupMapInterface</c> object for.
    /// </param>
    /// <returns>
    ///     The instantiated <c>InventItemOrderSetupMapInterface</c> object.
    /// </returns>
    [Hookable(false)]
    public static InventItemOrderSetupMapInterface createInstance(InventItemOrderSetupMap _inventItemOrderSetupMap)
    {
        InventItemOrderSetupMapInterfaceFactoryAttribute attr = new InventItemOrderSetupMapInterfaceFactoryAttribute(tableId2Name(_inventItemOrderSetupMap.tableId));
        
        InventItemOrderSetupMapInterface instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventItemOrderSetupMapInterface), attr) as InventItemOrderSetupMapInterface;

        if (!instance)
        {
            instance = new InventItemOrderSetupMapDefault();
        }

        instance.initializeInventItemOrderSetupMap(_inventItemOrderSetupMap);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the working days.
    /// </summary>
    /// <returns>
    ///     The working days.
    /// </returns>
    [Hookable(false)]
    final public CalendarDays calendarDays()
    {
        if (inventItemOrderSetupMap.Override || inventItemOrderSetupMap.InventDimId == InventDim::inventDimIdBlank() || !inventItemOrderSetupMap.InventDimId)
        {
            return inventItemOrderSetupMap.CalendarDays;
        }

        return inventItemOrderSetupMap.InventItemOrderSetupMap::setupDefaultMap().CalendarDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether warehouse location is valid.
    /// </summary>
    /// <param name = "_inventLocationId">
    ///     Warehouse.
    /// </param>
    /// <param name = "_mandatoryCheck">
    ///     A boolean value which determines whether to check if the item transactions are related to the specified warehouse.
    /// </param>
    /// <param name = "_matchSiteCheck">
    ///     A boolean value which determines whether to check if the item transactions are related to the site.
    /// </param>
    /// <param name = "_inventTable">
    ///     A <c>InventTable</c> record.
    /// </param>
    /// <returns>
    ///     true if warehouse is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean checkInventLocationId(
        InventLocationId    _inventLocationId,
        boolean             _mandatoryCheck     = true,
        boolean             _matchSiteCheck     = true,
        InventTable         _inventTable        = null) // set this parameter for better performance
    {
        boolean ok = true;

        if (_inventLocationId && !InventLocation::exist(_inventLocationId))
        {
            ok = checkFailed(strFmt("@SYS5001", _inventLocationId));
        }

        if (_mandatoryCheck && inventItemOrderSetupMap.MandatoryInventLocation && inventItemOrderSetupMap.inventLocationId(_inventLocationId, _inventTable) != _inventLocationId)
        {
            ok = checkFailed(strFmt("@SYS7484", inventItemOrderSetupMap.inventLocationId(_inventLocationId, _inventTable)));
        }

        if (_matchSiteCheck && _inventLocationId && !inventItemOrderSetupMap.MandatoryInventLocation && inventItemOrderSetupMap.inventLocationId(_inventLocationId, _inventTable) != _inventLocationId)
        {
            ok = checkFailed(strFmt("@SYS104861", _inventLocationId, inventItemOrderSetupMap.inventDim().InventSiteId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether site is valid.
    /// </summary>
    /// <param name = "_inventSiteId">
    ///     Site.
    /// </param>
    /// <param name = "_mandatoryCheck">
    ///    A boolean value which determines whether to check if the item transactions are related to the specified site.
    /// </param>
    /// <param name = "_inventTable">
    ///     A <c>InventTable</c> record.
    /// </param>
    /// <returns>
    ///     true if site is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean checkInventSiteId(
        InventSiteId    _inventSiteId,
        boolean         _mandatoryCheck = true,
        InventTable     _inventTable    = null) // set this parameter for better performance
    {
        boolean ok = true;
        

        if (_inventSiteId && !InventSite::exist(_inventSiteId))
        {
            return checkFailed(strFmt("@SYS111931", _inventSiteId));
        }

        if (_mandatoryCheck)
        {
            InventItemOrderSetupMap inventItemOrderSetupMapLoc;
            InventDim               inventDim = inventItemOrderSetupMap.inventDim();

            if (!inventDim.InventSiteId)
            {
                // if we are already on default settings or variant specific settings without site then reuse the table buffer
                inventItemOrderSetupMapLoc = inventItemOrderSetupMap;
            }
            else
            {
                // need to find the default order settings
                inventItemOrderSetupMapLoc = InventItemOrderSetupMap::findDefault(inventItemOrderSetupMap.ItemId, inventItemOrderSetupMap.setupType());
            }

            if (inventItemOrderSetupMapLoc.MandatoryInventSite)
            {
                if (!_inventTable)
                {
                    _inventTable = inventItemOrderSetupMap.inventTable();
                }

                InventSiteId defaultSiteId = inventItemOrderSetupMapLoc.inventSiteId('', _inventTable);
                if (defaultSiteId != _inventSiteId)
                {
                    ok = ok && checkFailed(strFmt("@SYS111932", defaultSiteId));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotStopped</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the product is stopped.
    /// </summary>
    /// <param name = "_showSetupType">
    ///     A boolean value which indicates the product setup.
    /// </param>
    /// <returns>
    ///     true if product is not stopped; otherwise, warning message.
    /// </returns>
    public boolean checkNotStopped(boolean _showSetupType = true)
    {
        boolean ok = true;

        if (inventItemOrderSetupMap.stopped())
        {
            InventDim           inventDim             = inventItemOrderSetupMap.inventDim();
            boolean             isBlank               = inventDim.InventDimId == InventDim::findOrCreateBlank().inventDimId;
            List                activeDimFieldList    = EcoResProductDimGroupSetup::newItemId(inventItemOrderSetupMap.ItemId).activeDimensionFields();
            EcoResProductNumber productNumber         = EcoResProduct::find(InventTable::find(inventItemOrderSetupMap.ItemId).Product).productNumber();

            activeDimFieldList.addEnd(fieldNum(InventDim, InventSiteId));

            str dimFieldValueString  = inventDim.preFix(activeDimFieldList, ', ', ' ');

            if (_showSetupType)
            {
                if (isBlank)
                {
                    ok = checkFailed(strFmt("@SCM:StoppingProductWithType", productNumber, inventItemOrderSetupMap.setupType()));
                }
                else
                {
                    ok = checkFailed(strFmt("@SCM:StoppingProductWithTypeAndDimensionValues", productNumber, inventItemOrderSetupMap.setupType(), dimFieldValueString));
                }
            }
            else
            {
                if (isBlank)
                {
                    ok = checkFailed(strFmt("@SCM:StoppingProduct", productNumber));
                }
                else
                {
                    ok = checkFailed(strFmt("@SCM:StoppingProductWithDimensionValues", productNumber, dimFieldValueString));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the map item has order settings matching the map setup type.
    /// </summary>
    /// <returns>
    ///     true if table map is valid; otherwise, warning message.
    /// </returns>
    [Hookable(false)]
    final public boolean checkValid()
    {
        if (!inventItemOrderSetupMap.RecId)
        {
            return checkFailed(strFmt("@SYS5700", inventItemOrderSetupMap.ItemId, inventItemOrderSetupMap.setupType()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the highest quantity.
    /// </summary>
    /// <returns>
    ///     Highest product quantity.
    /// </returns>
    [Hookable(false)]
    final public QtyHighest highestQty()
    {
        if (inventItemOrderSetupMap.Override || inventItemOrderSetupMap.InventDimId == InventDim::inventDimIdBlank() || !inventItemOrderSetupMap.InventDimId)
        {
            return inventItemOrderSetupMap.HighestQty;
        }

        return inventItemOrderSetupMap.InventItemOrderSetupMap::setupDefaultMap().HighestQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the inventory dimensions.
    /// </summary>
    /// <returns>
    ///     The inventory dimensions.
    /// </returns>
    [Hookable(false)]
    final public InventDim inventDim()
    {
        return InventDim::find(inventItemOrderSetupMap.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the default inventory dimensions.
    /// </summary>
    /// <returns>
    ///     The default inventory dimensions.
    /// </returns>
    [Hookable(false)]
    final public InventDim inventDimDefault()
    {
        return InventDim::find(inventItemOrderSetupMap.InventDimIdDefault);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the warehouse location.
    /// </summary>
    /// <param name = "_inventLocationId">
    ///     warehouse.
    /// </param>
    /// <param name = "_inventTable">
    ///     A <c>InventTable</c> record.
    /// </param>
    /// <param name = "_inventSiteIdParent">
    ///     Site id.
    /// </param>
    /// <returns>
    ///     warehouse location.
    /// </returns>
    [Hookable(false)]
    final public InventLocationId inventLocationId(
        InventLocationId    _inventLocationId   = '',
        InventTable         _inventTable        = null, // set this parameter for better performance
        InventSiteId        _inventSiteIdParent = '')
    {
        InventDim inventDim = inventItemOrderSetupMap.inventDim();
        InventSiteId siteId = inventDim.InventSiteId;

        if (_inventSiteIdParent                                                          &&
            _inventLocationId                                                            &&
            !siteId                                                                      &&
            _inventSiteIdParent != InventLocation::find(_inventLocationId).InventSiteId  &&
            (!InventItemOrderSetupDoNotBlankWhsIfMandatoryFlight::instance().isEnabled() || !inventItemOrderSetupMap.MandatoryInventLocation))
        {
            return '';
        }

        inventDim inventDimDefault = inventItemOrderSetupMap.inventDimDefault();
        InventSiteId defaultSiteId = inventDimDefault.InventSiteId;

        if ((!siteId && !defaultSiteId) || !inventItemOrderSetupMap.InventDimId || !inventItemOrderSetupMap.recid)
        {
            return _inventLocationId;
        }

        if (inventItemOrderSetupMap.MandatoryInventLocation                                                            ||
            (_inventLocationId && siteId && InventLocation::find(_inventLocationId).InventSiteId != siteId))
        {
            return inventDimDefault.InventLocationId;
        }

        if (!_inventLocationId)
        {
            if (_inventSiteIdParent && _inventSiteIdParent != InventLocation::find(inventDimDefault.InventLocationId).InventSiteId)
            {
                return '';
            }
            else
            {
                return inventDimDefault.InventLocationId;
            }
        }

        return _inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the site id.
    /// </summary>
    /// <param name = "_inventSiteId">
    ///     Site id.
    /// </param>
    /// <param name = "_inventTable">
    ///     A <c>InventTable</c> record.
    /// </param>
    /// <returns>
    ///     Site id.
    /// </returns>
    [Hookable(false)]
    final public InventSiteId inventSiteId(
        InventSiteId    _inventSiteId   = '',
        InventTable     _inventTable    = null) // set this parameter for better performance
    {
        if (!inventItemOrderSetupMap.RecId)
        {
            return _inventSiteId;
        }

        // For site specific order settings just return the suggested site as these records cannot have a default site set
        // unless the site is set as mandatory in the default setup.
        if (inventItemOrderSetupMap.inventDim().InventSiteId)
        {
            // Check if site is mandatory.
            // Since  mandatory site setting is only active on the default setup record, check the default setup.
            InventDim inventDimLocal = inventItemOrderSetupMap.inventDim();
            inventDimLocal.InventSiteId = '';
            InventItemOrderSetupMap defaultSetup = InventItemOrderSetupMap::find(inventItemOrderSetupMap.ItemId, inventItemOrderSetupMap.setupType(), InventDim::findOrCreate(inventDimLocal).inventDimId);
            if (defaultSetup.MandatoryInventSite)
            {
                return inventItemOrderSetupMap.inventDim().InventSiteId;
            }

            return _inventSiteId;
        }

        if (inventItemOrderSetupMap.MandatoryInventSite || !_inventSiteId)
        {
            return inventItemOrderSetupMap.inventDimDefault().InventSiteId;
        }

        return _inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determine the <c>InventTable</c> record.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     A boolean value which determines whether to select the <c>InventTable</c> record for update.
    /// </param>
    /// <returns>
    ///     A <c>InventTable</c> record.
    /// </returns>
    [Hookable(false)]
    final public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(inventItemOrderSetupMap.ItemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the item name.
    /// </summary>
    /// <returns>
    ///     Item name for displaying
    /// </returns>
    [Hookable(false)]
    final public ItemNameDisplay itemName()
    {
        return inventItemOrderSetupMap.inventTable().itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>leadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Detemines the lead time for delivery.
    /// </summary>
    /// <returns>
    ///     Delivery lead time.
    /// </returns>
    [Hookable(false)]
    final public LeadTimeDelivery leadTime()
    {
        if (inventItemOrderSetupMap.Override || inventItemOrderSetupMap.InventDimId == InventDim::inventDimIdBlank() || !inventItemOrderSetupMap.InventDimId)
        {
            return inventItemOrderSetupMap.LeadTime;
        }

        return inventItemOrderSetupMap.InventItemOrderSetupMap::setupDefaultMap().LeadTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the lowest quantity.
    /// </summary>
    /// <returns>
    ///     lowest product quantity.
    /// </returns>
    [Hookable(false)]
    final public QtyLowest lowestQty()
    {
        if (inventItemOrderSetupMap.Override || inventItemOrderSetupMap.InventDimId == InventDim::inventDimIdBlank() || !inventItemOrderSetupMap.InventDimId)
        {
            return inventItemOrderSetupMap.LowestQty;
        }

        return inventItemOrderSetupMap.InventItemOrderSetupMap::setupDefaultMap().LowestQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines multiple quantities.
    /// </summary>
    /// <returns>
    ///     Multiple quantities.
    /// </returns>
    [Hookable(false)]
    final public QtyMultiples multipleQty()
    {
        if (inventItemOrderSetupMap.Override || inventItemOrderSetupMap.InventDimId == InventDim::inventDimIdBlank() || !inventItemOrderSetupMap.InventDimId)
        {
            return inventItemOrderSetupMap.MultipleQty;
        }

        return inventItemOrderSetupMap.InventItemOrderSetupMap::setupDefaultMap().MultipleQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the warehouse location.
    /// </summary>
    /// <param name = "_inventLocationId">
    ///     Default warehouse location.
    /// </param>
    [Hookable(false)]
    final public void setInventLocationId(InventLocationId _inventLocationId)
    {
        InventDim inventDim = inventItemOrderSetupMap.inventDimDefault();

        inventDim.InventLocationId = _inventLocationId;

        inventItemOrderSetupMap.InventDimIdDefault = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the site id.
    /// </summary>
    /// <param name = "_inventSiteId">
    ///     Default site id.
    /// </param>
    [Hookable(false)]
    final public void setInventSiteId(InventSiteId _inventSiteId)
    {
        InventDim inventDim = inventItemOrderSetupMap.inventDimDefault();

        inventDim.InventSiteId = _inventSiteId;

        inventItemOrderSetupMap.InventDimIdDefault = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupDefaultMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the default <c>InventItemOrderSetupMap</c> table map.
    /// </summary>
    /// <returns>
    ///     A default <c>InventItemOrderSetupMap</c> table map.
    /// </returns>
    [Hookable(false)]
    final public InventItemOrderSetupMap setupDefaultMap()
    {
        return inventItemOrderSetupMap.setupDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the item order settings type.
    /// </summary>
    /// <returns>
    ///     The item order setting.
    /// </returns>
    [Hookable(false)]
    final public InventItemOrderSetupType setupType()
    {
        return inventItemOrderSetupMap.setupType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the standard ordered quantity.
    /// </summary>
    /// <returns>
    ///     The standard ordered quantity.
    /// </returns>
    [Hookable(false)]
    final public QtyStandard standardQty()
    {
        if (inventItemOrderSetupMap.Override || inventItemOrderSetupMap.InventDimId == InventDim::inventDimIdBlank() || !inventItemOrderSetupMap.InventDimId)
        {
            InventTable     inventTable = inventItemOrderSetupMap.inventTable();
            boolean         formulaItem = inventTable.isFormulaAllowed();

            QtyStandard standardQty = max(inventItemOrderSetupMap.LowestQty, inventItemOrderSetupMap.StandardQty);

            if (!standardQty && inventItemOrderSetupMap.MultipleQty && !formulaItem)
            {
                standardQty = inventItemOrderSetupMap.MultipleQty;
            }

            if (!standardQty && !PdsGlobal::pdsIsCWItem(inventItemOrderSetupMap.ItemId))
            {
                standardQty = 1;
            }

            if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
            {
                if (PdsGlobal::pdsIsCWItem(inventItemOrderSetupMap.ItemId))
                {
                    //if it's a CW item, the standard qty must be the conversion of the minimum CW value
                    PdsCWInventQty minQtyByCWUnit = PdsCatchWeight::inventQty(inventItemOrderSetupMap.ItemId, 1);
                    if (standardQty < minQtyByCWUnit)
                    {
                        standardQty = minQtyByCWUnit;
                    }
                }
            }

            if (!formulaItem)
            {
                standardQty = roundUp(standardQty, inventItemOrderSetupMap.MultipleQty);
            }

            return standardQty;
        }

        return inventItemOrderSetupMap.InventItemOrderSetupMap::setupDefaultMap().standardQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>explicitStandardQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the standard quantity set on this or the given instance or parent explicitly.
    /// </summary>
    /// <returns>
    ///    A standard inventory order quantity.
    /// </returns>
    [Hookable(false)]
    final public QtyStandard explicitStandardQty()
    {
        if (inventItemOrderSetupMap.Override || inventItemOrderSetupMap.InventDimId == InventDim::inventDimIdBlank() || !inventItemOrderSetupMap.InventDimId)
        {
            return inventItemOrderSetupMap.StandardQty;
        }

        return inventItemOrderSetupMap.InventItemOrderSetupMap::setupDefaultMap().StandardQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopped</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the item is stopped from sales.
    /// </summary>
    /// <returns>
    ///     Stopped if item is stopped from sales.
    /// </returns>
    [Hookable(false)]
    final public ItemStopped stopped()
    {
        if (inventItemOrderSetupMap.Override || inventItemOrderSetupMap.InventDimId == InventDim::inventDimIdBlank() || !inventItemOrderSetupMap.InventDimId)
        {
            return inventItemOrderSetupMap.Stopped;
        }

        return inventItemOrderSetupMap.InventItemOrderSetupMap::setupDefaultMap().Stopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldInventDimIdDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the default dimension number.
    /// </summary>
    /// <returns>
    ///     true if default dimension number is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean validateFieldInventDimIdDefault()
    {
        boolean     ret = true;
        InventDim   inventDimValidated;
        InventDim   inventDimPrimaryKey = inventItemOrderSetupMap.inventDim();
        InventDim   inventDimDefault    = inventItemOrderSetupMap.inventDimDefault();

        // validate location id
        if (inventDimPrimaryKey.InventSiteId && inventDimDefault.InventLocationId && FormDataUtil::isFormDataSource(inventItemOrderSetupMap))
        {
            inventDimValidated.InventSiteId     = inventDimPrimaryKey.InventSiteId;
            inventDimValidated.InventLocationId = inventDimDefault.InventLocationId;

            ret = ret && inventDimValidated.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the specified lead time.
    /// </summary>
    /// <returns>
    ///     true if lead time is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean validateFieldLeadTime()
    {
        if (inventItemOrderSetupMap.LeadTime < 0)
        {
            return checkFailed("@SYS53966");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUniqueness</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the given default order setting record is unique.
    /// </summary>
    /// <returns>
    ///     True if the record is unique, otherwise false.
    /// </returns>
    [Hookable(false)]
    final public boolean validateUniqueness()
    {
        InventItemOrderSetupMap otherRecord = this.getEmptyRecord();

        select firstonly otherRecord
            where otherRecord.ItemId == inventItemOrderSetupMap.ItemId
               && otherRecord.InventDimId == inventItemOrderSetupMap.InventDimId;

        if (otherRecord)
        {
            return checkFailed("@SCM:InventItemOrderSetupNotUnique");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates on deletion.
    /// </summary>
    /// <returns>
    ///     true if deletion is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean validateDelete()
    {
        boolean ret = true;

        if (inventItemOrderSetupMap.InventItemOrderSetupMap::isSettingsDefault())
        {
            ret = checkFailed("@SCM:CannotDeleteDefault");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the mapped tables before update or insert.
    /// </summary>
    /// <param name = "_valid">
    ///     A boolean value that indicates whether the buffer is valid based on the previous validation.
    /// </param>
    /// <returns>
    ///     true if the table is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean validateWrite(boolean _valid)
    {
        InventDim inventDim;

        boolean checkInventDim(InventDim _inventDim)
        {
            if (_inventDim.anyProductDimensionSpecified()
             || _inventDim.InventBatchId
             || _inventDim.wmsLocationId
             || _inventDim.wmsPalletId
               // <GEERU>
            || _inventDim.InventGtdId_RU
             || _inventDim.InventOwnerId_RU
             || _inventDim.InventProfileId_RU
               // </GEERU>
            || _inventDim.InventSerialId)
            {
                return false;
            }

            return true;
        }

        boolean ret = _valid;

        if (ret && !inventItemOrderSetupMap.RecId)
        {
            ret = inventItemOrderSetupMap.InventItemOrderSetupMap::validateUniqueness();
        }

        if (ret && inventItemOrderSetupMap.Sequence == 0 && inventItemOrderSetupMap.InventDimId != InventDim::inventDimIdBlank())
        {
            ret = checkFailed("@SCM:RankZeroIsReserved");
        }

        if (inventItemOrderSetupMap.Sequence < 0)
        {
            ret = checkFailed("@SCM:NegativeRank");
        }

        if (inventItemOrderSetupMap.LowestQty > inventItemOrderSetupMap.HighestQty && inventItemOrderSetupMap.HighestQty)
        {
            ret = checkFailed("@SYS72613");
        }

        if (inventItemOrderSetupMap.LowestQty > inventItemOrderSetupMap.StandardQty && inventItemOrderSetupMap.StandardQty)
        {
            ret = checkFailed("@SYS106240");
        }

        if (inventItemOrderSetupMap.StandardQty > inventItemOrderSetupMap.HighestQty && inventItemOrderSetupMap.HighestQty)
        {
            ret = checkFailed("@SYS106241");
        }

        if (FeatureStateProvider::isFeatureEnabled(Dynamics.AX.Application.RetailDefaultOrderQuantityLimitsFeature::instance()) && inventItemOrderSetupMap.MultipleQty > inventItemOrderSetupMap.HighestQty && inventItemOrderSetupMap.HighestQty)
        {
            ret = checkFailed("@SCM:MultipleQuantityCannotBeGreaterMax");
        }

        ret = ret && this.validateDefaultOrderQuantitiesExtendedRules();

        if (inventItemOrderSetupMap.InventDimIdDefault)
        {
            inventDim = InventDim::find(inventItemOrderSetupMap.InventDimIdDefault);

            if (inventDim)
            {
                if (!checkInventDim(inventDim))
                {
                    ret = checkFailed("@SYS112141");
                }
            }
        }

        // if site is mandatory we check if the SiteId in inventDim is not empty.
        // inventDim contains dimension information for the dimension this.InventDimIdDefault
        if (inventItemOrderSetupMap.MandatoryInventSite && !inventDim.InventSiteId)
        {
            ret = checkFailed("@SYS113234");
        }

        // if warehouse is mandatory we check if the LocationId in inventDim is not empty.
        // inventDim contains dimension information for the dimension this.InventDimIdDefault
        if (inventItemOrderSetupMap.MandatoryInventLocation &&
            !inventDim.InventLocationId)
        {
            ret = checkFailed("@SYS113235");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDefaultOrderQuantitiesExtendedRules</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates the extended default order quantity rules specified in the product parameters.
    /// </summary>
    /// <returns>
    ///   true if the extended rules' validation succeeds; otherwise, false.
    /// </returns>
    protected boolean validateDefaultOrderQuantitiesExtendedRules()
    {
        boolean ret = true;

        if (this.isDefaultOrderQuantitiesStrictValidationEnabled()
            && InventItemOrderSetupMap.MultipleQty
            && frac(InventItemOrderSetupMap.StandardQty / InventItemOrderSetupMap.MultipleQty) != 0)
        {
            ret = checkFailed("@SCM:StandardMultipleQtyRuleWarning");
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultOrderQuantitiesStrictValidationEnabled</Name>
				<Source><![CDATA[
    private boolean isDefaultOrderQuantitiesStrictValidationEnabled()
    {
        return EcoResProductParameters::find().DefaultOrderQuantitiesValidation == EcoResDefaultOrderQuantitiesValidation::Strict;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates or updates the record based on modifications of some field.
    /// </summary>
    /// <param name = "_fieldName">
    ///     The name of the changed field.
    /// </param>
    /// <param name = "_arrayIndex">
    ///     Index count.
    /// </param>
    [Hookable(false)]
    final public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        if (_fieldName == fieldStr(InventItemOrderSetupMap, OverrideDefaultStorageDimensions))
        {
            inventItemOrderSetupMap.InventItemOrderSetupMap::initInventDimDefaultFromDefault(inventItemOrderSetupMap.inventDim());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimDefaultFromDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>InventDimIdDefault</c> field based on the value of the default record.
    /// </summary>
    /// <param name = "_inventDim">
    ///     The <c>InventDim</c> of the current record.
    /// </param>
    [Hookable(false)]
    final public void initInventDimDefaultFromDefault(InventDim _inventDim)
    {
        if (inventItemOrderSetupMap.OverrideDefaultStorageDimensions == false)
        {
            InventItemOrderSetupMap defaultSetting = InventItemOrderSetupMap::findDefault(inventItemOrderSetupMap.ItemId, inventItemOrderSetupMap.setupType());
            InventDim inventDimThis = _inventDim;
            InventDim inventDimDefault = defaultSetting.inventDimDefault();

            if (inventDimThis.InventSiteId == '' || inventDimThis.InventSiteId == inventDimDefault.InventSiteId)
            {
                inventItemOrderSetupMap.InventDimIdDefault = defaultSetting.InventDimIdDefault;
                inventItemOrderSetupMap.MandatoryInventLocation = defaultSetting.MandatoryInventLocation;
                inventItemOrderSetupMap.MandatoryInventSite = defaultSetting.MandatoryInventSite;
            }
            else
            {
                inventItemOrderSetupMap.InventDimIdDefault = InventDim::inventDimIdBlank();
                inventItemOrderSetupMap.MandatoryInventLocation = false;
                inventItemOrderSetupMap.MandatoryInventSite = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Insert into <c>InventItemOrderSetupMap</c> table map.
    /// </summary>
    [Hookable(false)]
    final public void insert()
    {
        InventParameters inventParameters = InventParameters::find();
        if (!inventParameters.ProductVariantSpecificOrderSettings)
        {
            InventDim inventDimPrimKey = inventItemOrderSetupMap.inventDim();
            if (inventDimPrimKey.anyProductDimensionSpecified())
            {
                ttsbegin;

                inventParameters = InventParameters::find(true);
                inventParameters.ProductVariantSpecificOrderSettings = true;
                inventParameters.update();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new record of the same type as base of the current map.
    /// </summary>
    /// <returns>
    ///     A empty record of <c>InventItemOrderSetupMap</c> table map.
    /// </returns>
    private InventItemOrderSetupMap getEmptyRecord()
    {
        Common common;

        common = DictTable::createRecord(tableId2Name(inventItemOrderSetupMap.TableId));

        return common as InventItemOrderSetupMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the <c>InventItemOrderSetupMap</c> table map.
    /// </summary>
    [Hookable(false)]
    final public void delete()
    {
        InventDim inventDimPrimKey = inventItemOrderSetupMap.inventDim();
        if (inventDimPrimKey.anyProductDimensionSpecified())
        {
            if (!InventItemOrderSetupMap::productDimSpecificRecordsExist(inventItemOrderSetupMap, inventItemOrderSetupMap.recId))
            {
                ttsbegin;

                InventParameters inventParameters = InventParameters::find(true);
                inventParameters.ProductVariantSpecificOrderSettings = false;
                inventParameters.update();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditDefaultDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the default site/warehouse can be edited by the user.
    /// </summary>
    /// <returns>
    ///     true if the default site/warehouse is allowed to be edited.
    /// </returns>
    [Hookable(false)]
    final public boolean allowEditDefaultDim()
    {
        return inventItemOrderSetupMap.OverrideDefaultStorageDimensions || inventItemOrderSetupMap.InventItemOrderSetupMap::isSettingsDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettingsDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if this record is the default record.
    /// </summary>
    /// <returns>
    ///     true if this record is the default record.
    /// </returns>
    [Hookable(false)]
    final public boolean isSettingsDefault()
    {
        return inventItemOrderSetupMap.InventDimId == InventDim::inventDimIdBlank();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSequence</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the sequence number of the current record.
    /// </summary>
    /// <param name = "_newSequence">
    ///     The new sequence number.
    /// </param>
    [Hookable(false)]
    final public void updateSequence(InventItemSetupSequence _newSequence)
    {
        if (inventItemOrderSetupMap.recId && inventItemOrderSetupMap.Sequence != _newSequence)
        {
            inventItemOrderSetupMap.Sequence = _newSequence;
            inventItemOrderSetupMap.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>propagateDefaultSiteWarehouseChanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Propagates changes of default site/warehouse from the default record to the dimension specific records.
    /// </summary>
    [Hookable(false)]
    final public void propagateDefaultSiteWarehouseChanges()
    {
        InventItemOrderSetupMap setupMap = this.getEmptyRecord();
        inventDim inventDimDefault = inventItemOrderSetupMap.InventItemOrderSetupMap::inventDimDefault();
        InventDim inventDim;

        while select forupdate setupMap
            join InventDim
                where setupMap.RecId != inventItemOrderSetupMap.RecId
                   && setupMap.ItemId == inventItemOrderSetupMap.ItemId
                   && setupMap.OverrideDefaultStorageDimensions == false
                   && inventDim.inventDimId == setupMap.InventDimId
        {
            if (inventDim.InventSiteId == '' || inventDim.InventSiteId == inventDimDefault.InventSiteId)
            {
                setupMap.InventDimIdDefault = inventItemOrderSetupMap.InventDimIdDefault;
                setupMap.MandatoryInventLocation = inventItemOrderSetupMap.MandatoryInventLocation;
                setupMap.MandatoryInventSite = inventItemOrderSetupMap.MandatoryInventSite;
            }
            else
            {
                setupMap.InventDimIdDefault = InventDim::inventDimIdBlank();
                setupMap.MandatoryInventLocation = false;
                setupMap.MandatoryInventSite = false;
            }

            setupMap.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotUsedPrimKeyInventDimensionsItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears the dimensions so only valid search dimensions for the item are left.
    /// </summary>
    /// <param name = "_itemId">
    ///     The item to clear the dimensions for.
    /// </param>
    /// <param name = "_inventDimId">
    ///     The dimension.
    /// </param>
    /// <returns>
    ///     A cleaned up dimension record.
    /// </returns>
    public static InventDim clearNotUsedPrimKeyInventDimensionsItem(ItemId _itemId, InventDimId _inventDimId)
    {
        if (_inventDimId == InventDim::inventDimIdBlank() || !_inventDimId)
        {
            return InventDim::findOrCreateBlank();
        }

        InventDim inventDimOrig = InventDim::find(_inventDimId);

        if (InventParameters::find().ProductVariantSpecificOrderSettings)
        {
            inventDimOrig.clearNotSiteAndProductDim(InventDimGroupSetup::newItemId(_itemId));
            return InventDim::findOrCreate(inventDimOrig);
        }
        else
        {
            InventDim inventDim;
            inventDim.InventSiteId  = inventDimOrig.InventSiteId;
            return InventDim::findOrCreate(inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finding the appropriate <c>InventItemOrderSetupMap</c> table map.
    /// </summary>
    /// <param name = "_itemId">
    ///     An <c>ItemId</c> value.
    /// </param>
    /// <param name = "_setupType">
    ///     A <c>InventItemOrderSetupType</c> value.
    /// </param>
    /// <param name = "_inventDimId">
    ///     An <c>InventDimId</c> value.
    /// </param>
    /// <param name = "_forUpdate">
    ///     A boolean value.
    /// </param>
    /// <param name = "_inventTable">
    ///     A <c>InventTable</c> record.
    /// </param>
    /// <returns>
    ///     The appropriate <c>InventItemOrderSetupMap</c> table map.
    /// </returns>
    static InventItemOrderSetupMap find(
        ItemId                      _itemId,
        InventItemOrderSetupType    _setupType,
        InventDimId                 _inventDimId,
        boolean                     _forUpdate      = false,
        InventTable                 _inventTable    = null) // set this parameter for better performance
    {
        InventItemOrderSetupMap itemSetupMap;

        switch (_setupType)
        {
            case InventItemOrderSetupType::Purch:
                itemSetupMap = InventItemPurchSetup::find(_itemId, _inventDimId, _forUpdate);
                break;

            case InventItemOrderSetupType::Invent:
                itemSetupMap = InventItemInventSetup::find(_itemId, _inventDimId, _forUpdate);
                break;

            case InventItemOrderSetupType::Sales:
                itemSetupMap = InventItemSalesSetup::find(_itemId, _inventDimId, _forUpdate);
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                InventItemOrderSetupMap::findCustomMap(_itemId, _setupType, _inventDimId, _forUpdate, result);

                if (result.hasResult())
                {
                    itemSetupMap =  result.result();
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
                break;
        }

        return itemSetupMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the order settings for an item matching search criteria.
    /// </summary>
    /// <param name="_record">
    ///    An empty record of the type of settings to find (e.g. InventItemPurchSetup).
    /// </param>
    /// <param name="_itemId">
    ///    The id of the item for which to find the settings.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID for the search criteria.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///    The order settings of an item.
    /// </returns>
    public static InventItemOrderSetupMap findRecord(
        InventItemOrderSetupMap _record,
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        boolean                 _forUpdate = false)
    {
        void findSetupByInventDimId(InventDimId _inventDimIdTmp)
        {
            select firstonly _record
                where   _record.ItemId         == _itemId
                     && _record.InventDimId    == _inventDimIdTmp;
        }

        void findSetupByInventDim(InventDim _inventDimSearch)
        {
            Query query = new Query();
            QueryBuildDataSource mapDataSource = query.addDataSource(_record.TableId);
            mapDataSource.firstOnly(true);
            mapDataSource.update(_forUpdate);
            mapDataSource.addOrderByField(SysDictField::findMappedFieldId(tableNum(InventItemOrderSetupMap), fieldNum(InventItemOrderSetupMap, Sequence), _record.TableId), SortOrder::Descending);
            mapDataSource.addRange(SysDictField::findMappedFieldId(tableNum(InventItemOrderSetupMap), fieldNum(InventItemOrderSetupMap, ItemId), _record.TableId)).value(queryValue(_itemId));

            QueryBuildDataSource inventDimDataSource = mapDataSource.addDataSource(tableNum(InventDim));
            inventDimDataSource.addLink(SysDictField::findMappedFieldId(tableNum(InventItemOrderSetupMap), fieldNum(InventItemOrderSetupMap, InventDimId), _record.TableId), fieldNum(InventDim, InventDimId));
            inventDimDataSource.joinMode(JoinMode::ExistsJoin);
            inventDimDataSource.fetchMode(QueryFetchMode::One2One);
            
            inventDimDataSource.addRange(fieldNum(InventDim, InventSiteId)).value(queryRangeConcat(queryValue(InventDim::emptyDimField(fieldNum(InventDim, InventSiteId))), _inventDimSearch.InventSiteId));

            InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
            while (enum.moveNext())
            {
                FieldId fieldId = enum.currentInventDimFieldId();
                inventDimDataSource.addRange(fieldId).value(queryRangeConcat(queryValue(InventDim::emptyDimField(fieldId)), _inventDimSearch.(fieldId)));
            }

            QueryRun queryRun = new QueryRun(query);
            if (queryRun.next())
            {
                _record = queryRun.get(_record.TableId);
            }
        }

        _record.selectForUpdate(_forUpdate);

        if (!_itemId)
        {
            return _record;
        }

        InventDimId inventDimIdBlank = InventDim::inventDimIdBlank();

        if (!_inventDimId)
        {
            _inventDimId = inventDimIdBlank;
        }

        InventDim cleanedInventDim = InventItemOrderSetupMap::clearNotUsedPrimKeyInventDimensionsItem(_itemId, _inventDimId);

        if (cleanedInventDim.inventDimId == inventDimIdBlank
            || !cleanedInventDim.anyProductDimensionSpecified())
        {
            // Lookup is possible directly on primary key
            findSetupByInventDimId(cleanedInventDim.inventDimId);
        }
        else
        {
            // Need to use a slower query to find the settings
            findSetupByInventDim(cleanedInventDim);
        }

        if (!_record.RecId && cleanedInventDim.inventDimId != inventDimIdBlank)
        {
            findSetupByInventDimId(inventDimIdBlank);
        }

        return _record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the default <c>InventItemOrderSetupMap</c> table map.
    /// </summary>
    /// <param name = "_itemId">
    ///     An <c>ItemId</c> value.
    /// </param>
    /// <param name = "_setupType">
    ///     A <c>InventItemOrderSetupType</c> value.
    /// </param>
    /// <param name = "_forUpdate">
    ///     A Boolean value that indicates whether to select the record for update.
    /// </param>
    /// <returns>
    ///     The appropriate <c>InventItemOrderSetupMap</c> table map.
    /// </returns>
    static InventItemOrderSetupMap findDefault(
        ItemId                      _itemId,
        InventItemOrderSetupType    _setupType,
        boolean                     _forUpdate  = false)
    {
        return InventItemOrderSetupMap::find(_itemId,
                                             _setupType,
                                             InventDim::inventDimIdBlank(),
                                             _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the ID of the default warehouse for the specified item in the specified process.
    /// </summary>
    /// <param name="_itemId">
    ///     The item number.
    /// </param>
    /// <param name="_setupType">
    ///     The process in which the default warehouse is applicable.
    /// </param>
    /// <returns>
    ///     The ID of the default warehouse for the specified item in the specified process.
    /// </returns>
    public static InventLocationId defaultInventLocationId(ItemId _itemId, InventItemOrderSetupType _setupType)
    {
        InventItemOrderSetupMap defaultSetup = InventItemOrderSetupMap::findDefault(_itemId, _setupType);
        InventSiteId defaultSiteId = defaultSetup.InventItemOrderSetupMap::inventDimDefault().InventSiteId;

        if (defaultSiteId)
        {
            InventDim inventDimSite;
            inventDimSite.InventSiteId = defaultSiteId;
            InventItemOrderSetupMap siteSetup = InventItemOrderSetupMap::find(_itemId, _setupType, InventDim::findOrCreate(inventDimSite).inventDimId);
            return siteSetup.InventItemOrderSetupMap::inventDimDefault().InventLocationId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the default warehouse for the specified item in the specified process.
    /// </summary>
    /// <param name="_itemId">
    ///     The item number.
    /// </param>
    /// <param name="_setupType">
    ///     The process in which the default warehouse is applicable.
    /// </param>
    /// <returns>
    ///     The default warehouse for the specified item in the specified process.
    /// </returns>
    public static InventLocation defaultInventLocation(ItemId _itemId, InventItemOrderSetupType _setupType)
    {
        return InventLocation::find(InventItemOrderSetupMap::defaultInventLocationId(_itemId, _setupType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>module2SetupType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the item order setting.
    /// </summary>
    /// <param name = "_moduleType">
    ///     A <c>ModuleInventPurchSales</c> value.
    /// </param>
    /// <returns>
    ///     Item order setting.
    /// </returns>
    public static InventItemOrderSetupType module2SetupType(ModuleInventPurchSales _moduleType)
    {
        switch (_moduleType)
        {
            case ModuleInventPurchSales::Purch:
                return InventItemOrderSetupType::Purch;

            case ModuleInventPurchSales::Invent:
                return InventItemOrderSetupType::Invent;

            case ModuleInventPurchSales::Sales:
                return InventItemOrderSetupType::Sales;
        }

        return InventItemOrderSetupType::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setup2ModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the <c>ModuleInventPurchSales</c> value.
    /// </summary>
    /// <param name = "_setupType">
    ///     A <c>InventItemOrderSetupType</c> value.
    /// </param>
    /// <returns>
    ///     The <c>ModuleInventPurchSales</c> value.
    /// </returns>
    public static ModuleInventPurchSales setup2ModuleType(InventItemOrderSetupType _setupType)
    {
        switch (_setupType)
        {
            case InventItemOrderSetupType::Purch:
                return ModuleInventPurchSales::Purch;

            case InventItemOrderSetupType::Invent:
                return ModuleInventPurchSales::Invent;

            case InventItemOrderSetupType::Sales:
                return ModuleInventPurchSales::Sales;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                InventItemOrderSetupMap::customSetup2ModuleTypeDelegate(_setupType, result);

                if (result.hasResult())
                {
                    return result.result();
                }
                break;
        }

        throw error(strFmt("@SYS26908", _setupType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimSpecificRecordsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if any product dimension specific records exist in the table.
    /// </summary>
    /// <param name = "_recordType">
    ///     An empty record buffer of the table to check.
    /// </param>
    /// <param name = "_excludeRecId">
    ///     A RecId of any record that should be excluded from the result.
    /// </param>
    /// <returns>
    ///     true if any product dimension specific records exist in the table; otherwise, false.
    /// </returns>
    public static boolean productDimSpecificRecordsExist(InventItemOrderSetupMap _recordType, RecId _excludeRecId)
    {
        InventItemOrderSetupMap setupMap = _recordType.InventItemOrderSetupMap::inventItemOrderSetupMapInterface().getEmptyRecord();
        InventDim inventDim;
        InventDimParm productDims = InventDimParm::allProductDim();

        #InventDimDevelop
        select firstonly RecId from setupMap
            exists join inventDim
            where setupMap.RecId != _excludeRecId
                && inventDim.inventDimId == setupMap.InventDimId
                && (inventDim.InventColorId != ''
                    || inventDim.InventSizeId != ''
                    || inventDim.configId != ''
                    || inventDim.InventStyleId != ''
                    || inventDim.InventVersionId != ''
                    || (productDims.InventDimension1Flag && inventDim.InventDimension1 != '')
                    || (productDims.InventDimension2Flag && inventDim.InventDimension2 != '')
                    || (productDims.InventDimension3Flag && inventDim.InventDimension3 != '')
                    || (productDims.InventDimension4Flag && inventDim.InventDimension4 != '')
                    || (productDims.InventDimension5Flag && inventDim.InventDimension5 != '')
                    || (productDims.InventDimension6Flag && inventDim.InventDimension6 != '')
                    || (productDims.InventDimension7Flag && inventDim.InventDimension7 != '')
                    || (productDims.InventDimension8Flag && inventDim.InventDimension8 != '')
                    || (productDims.InventDimension9Flag && inventDim.InventDimension9 != utcDateTimeNull())
                    || (productDims.InventDimension10Flag && inventDim.InventDimension10 != 0.0)
                    || (productDims.InventDimension11Flag && inventDim.InventDimension11 != '')
                    || (productDims.InventDimension12Flag && inventDim.InventDimension12 != '')
            );

        return (setupMap.recId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalendarDays</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public CalendarDays parmCalendarDays()
    {
        return inventItemOrderSetupMap.CalendarDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHighestQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public QtyHighest parmHighestQty()
    {
        return inventItemOrderSetupMap.HighestQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventDimId parmInventDimId()
    {
        return inventItemOrderSetupMap.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimIdDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventDimId parmInventDimIdDefault()
    {
        return inventItemOrderSetupMap.InventDimIdDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public ItemId parmItemId()
    {
        return inventItemOrderSetupMap.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeadTime</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public LeadTimeDelivery parmLeadTime()
    {
        return inventItemOrderSetupMap.LeadTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLowestQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public QtyLowest parmLowestQty()
    {
        return inventItemOrderSetupMap.LowestQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMandatoryInventLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public NoYesId parmMandatoryInventLocation()
    {
        return inventItemOrderSetupMap.MandatoryInventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMandatoryInventSite</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public NoYesId parmMandatoryInventSite()
    {
        return inventItemOrderSetupMap.MandatoryInventSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultipleQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public QtyMultiples parmMultipleQty()
    {
        return inventItemOrderSetupMap.MultipleQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverride</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public Override parmOverride()
    {
        return inventItemOrderSetupMap.Override;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public QtyStandard parmStandardQty()
    {
        return inventItemOrderSetupMap.StandardQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStopped</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public ItemStopped parmStopped()
    {
        return inventItemOrderSetupMap.Stopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSequence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventItemSetupSequence parmSequence()
    {
        return inventItemOrderSetupMap.Sequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverrideDefaultStorageDimensions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventItemOverrideDefaultStorageDimensions parmOverrideDefaultStorageDimensions()
    {
        return inventItemOrderSetupMap.OverrideDefaultStorageDimensions;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>