<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentCGUGroupTest_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>AssetImpairmentCGUGroupTest_JP</c> is the base class for impairment recognition test method.
/// </summary>
public abstract class AssetImpairmentCGUGroupTest_JP
{
    #LOCALMACRO.UpdateTotalVars
        cguSubtotalNbv                   = %1.CGUSubtotalNbv;
        sharedAssetsSubtotalNbv          = %1.SharedAssetsSubtotalNbv;
        grandTotalNbv                    = %1.GrandTotalNbv;
        cguSubtotalUndiscCF              = %1.CGUSubtotalUndisc;
        grandTotalUndiscCF               = %1.GrandTotalUndisc;
        grandTotalTestResult             = %1.GrandTotalTestResult;
        cguSubtotalRecovAmt              = %1.CGUSubtotalRecov;
        sharedAssetsSubtotalRecovAmt     = %1.SharedAssetsSubtotalRecov;
        grandTotalRecovAmt               = %1.GrandTotalRecov;
        cguSubtotalImpairAdj             = %1.CGUSubtotalImpairmentAdj;
        sharedAssetsSubtotalImpairAdj    = %1.SharedAssetsSubtotalImpairmentAdj;
        grandTotalImpairAdj              = %1.GrandTotalImpairmentAdj;
        sharedAssetImpairmentAdjExceeded = %1.SharedAssetImpairmentAdjExceeded;
    #ENDMACRO

    #LOCALMACRO.UpdateTotalBuf
        %1.CGUSubtotalNbv                    = cguSubtotalNbv;
        %1.SharedAssetsSubtotalNbv           = sharedAssetsSubtotalNbv;
        %1.GrandTotalNbv                     = grandTotalNbv;
        %1.CGUSubtotalUndisc                 = cguSubtotalUndiscCF;
        %1.GrandTotalUndisc                  = grandTotalUndiscCF;
        %1.GrandTotalTestResult              = grandTotalTestResult;
        %1.CGUSubtotalRecov                  = cguSubtotalRecovAmt;
        %1.SharedAssetsSubtotalRecov         = sharedAssetsSubtotalRecovAmt;
        %1.GrandTotalRecov                   = grandTotalRecovAmt;
        %1.CGUSubtotalImpairmentAdj          = cguSubtotalImpairAdj;
        %1.SharedAssetsSubtotalImpairmentAdj = sharedAssetsSubtotalImpairAdj;
        %1.GrandTotalImpairmentAdj           = grandTotalImpairAdj;
        %1.SharedAssetImpairmentAdjExceeded  = sharedAssetImpairmentAdjExceeded;
    #ENDMACRO

    AssetImpairmentCGUGroup_JP            cguGroup;
    AssetImpairmentTestResult_JP          testResult;
    AssetImpairmentCGURecognitionTotal_JP total;

    AssetNetBookValue                     cguSubtotalNbv;
    AssetNetBookValue                     sharedAssetsSubtotalNbv;
    AssetNetBookValue                     grandTotalNbv;
    AssetUndiscountedCashFlow_JP          cguSubtotalUndiscCF;
    AssetUndiscountedCashFlow_JP          grandTotalUndiscCF;
    NoYesUnchanged                        grandTotalTestResult;
    AssetRecoverableAmount_JP             cguSubtotalRecovAmt;
    AssetRecoverableAmount_JP             sharedAssetsSubtotalRecovAmt;
    AssetRecoverableAmount_JP             grandTotalRecovAmt;
    AssetImpairmentAdjustment_JP          cguSubtotalImpairAdj;
    AssetImpairmentAdjustment_JP          sharedAssetsSubtotalImpairAdj;
    AssetImpairmentAdjustment_JP          grandTotalImpairAdj;
    boolean                               sharedAssetImpairmentAdjExceeded;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateStep1</Name>
				<Source><![CDATA[
    /// <summary>
    /// The step to allocate the total impairment adjustment amount of shared assets and goodwill assets to single asset books.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// If the entry test result status is not CalcStep2, exception will occur.
    /// </exception>
    final public void allocateStep1()
    {
        testResult = AssetImpairmentTestResult_JP::find(testResult.RecId, true);
        total = AssetImpairmentCGURecognitionTotal_JP::findFromTestResult(testResult, true);

        if (testResult.Status != AssetImpairmentTestResultStatus_JP::CalcStep2)
        {
            throw error(strFmt("@SYP4880530",
                               enum2str(AssetImpairmentTestResultStatus_JP::CalcStep2),
                               enum2str(testResult.Status)));
        }

        ttsBegin;

        this.allocateStep1Internal();

        this.updateTotal();
        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::AllocateStep1);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateStep1Internal</Name>
				<Source><![CDATA[
    /// <summary>
    /// The internal method for shared asset and goodwill asset allocation to be overriden by derived class.
    /// </summary>
    protected abstract void allocateStep1Internal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateStep2</Name>
				<Source><![CDATA[
    /// <summary>
    /// The step to allocate the impairment adjustment amount of each CGU to their single asset books.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// If the entry test result status is not AllocateStep1, exception will occur.
    /// </exception>
    final public void allocateStep2()
    {
        testResult = AssetImpairmentTestResult_JP::find(testResult.RecId, true);
        total = AssetImpairmentCGURecognitionTotal_JP::findFromTestResult(testResult, true);

        if (testResult.Status != AssetImpairmentTestResultStatus_JP::AllocateStep1)
        {
            throw error(strFmt("@SYP4880530",
                               enum2str(AssetImpairmentTestResultStatus_JP::AllocateStep1),
                               enum2str(testResult.Status)));
        }

        ttsBegin;

        this.allocateStep2Internal();

        this.updateTotal();
        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::AllocateStep2);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateStep2Internal</Name>
				<Source><![CDATA[
    /// <summary>
    /// The internal method for CGU asset allocation to be overriden by derived class.
    /// </summary>
    protected abstract void allocateStep2Internal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// The calculation step. This will perform all calculation and allocation steps at once.
    /// </summary>
    final public void calculateAll()
    {
        testResult = AssetImpairmentTestResult_JP::find(testResult.RecId, true);
        total = AssetImpairmentCGURecognitionTotal_JP::findFromTestResult(testResult, true);

        ttsBegin;

        this.resetForCalculate();

        this.calculateStep1Internal();

        this.updateTotal();
        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::CalcStep1);

        this.calculateStep2Internal();

        this.updateTotal();
        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::CalcStep2);

        this.allocateStep1Internal();

        this.updateTotal();
        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::AllocateStep1);

        this.allocateStep2Internal();

        this.updateTotal();
        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::AllocateStep2);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStep1</Name>
				<Source><![CDATA[
    /// <summary>
    /// The step to calculate the impairment adjustment amount of each CGU.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// If the entry test result status is not Tested, exception will occur.
    /// </exception>
    final public void calculateStep1()
    {
        testResult = AssetImpairmentTestResult_JP::find(testResult.RecId, true);
        total = AssetImpairmentCGURecognitionTotal_JP::findFromTestResult(testResult, true);

        if (testResult.Status != AssetImpairmentTestResultStatus_JP::Tested)
        {
            throw error(strFmt("@SYP4880530",
                               enum2str(AssetImpairmentTestResultStatus_JP::Tested),
                               enum2str(testResult.Status)));
        }

        ttsBegin;

        this.calculateStep1Internal();

        this.updateTotal();
        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::CalcStep1);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStep1Internal</Name>
				<Source><![CDATA[
    /// <summary>
    /// The internal method for the calculation of the impairment adjustment amount of each CGU.
    /// </summary>
    protected abstract void calculateStep1Internal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStep2</Name>
				<Source><![CDATA[
    /// <summary>
    /// The step to calculate the impairment adjustment amount of shared assets and goodwill.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// If the entry test result status is not CalcStep1, exception will occur.
    /// </exception>
    final public void calculateStep2()
    {
        testResult = AssetImpairmentTestResult_JP::find(testResult.RecId, true);
        total = AssetImpairmentCGURecognitionTotal_JP::findFromTestResult(testResult, true);

        if (testResult.Status != AssetImpairmentTestResultStatus_JP::CalcStep1)
        {
            throw error(strFmt("@SYP4880530",
                               enum2str(AssetImpairmentTestResultStatus_JP::CalcStep1),
                               enum2str(testResult.Status)));
        }

        ttsBegin;

        this.calculateStep2Internal();

        this.updateTotal();
        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::CalcStep2);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStep2Internal</Name>
				<Source><![CDATA[
    /// <summary>
    /// The internal method for the calculation of the impairment adjustment amount of shared assets and goodwill.
    /// </summary>
    protected abstract void calculateStep2Internal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>firm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Firm method of asset impairment CGU group test.
    /// </summary>
    public void firm()
    {
        AssetImpairmentTestResultDocEntry_JP entry;
        AssetImpairmentTestResultDocument_JP resultDoc;

        ttsBegin;

        testResult = AssetImpairmentTestResult_JP::find(testResult.RecId, true);
        if (testResult.Status != AssetImpairmentTestResultStatus_JP::AllocateStep2)
        {
            throw error(strFmt("@SYP4880530",
                               enum2str(AssetImpairmentTestResultStatus_JP::AllocateStep2),
                               enum2str(testResult.Status)));
        }

        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::ReadyForProposal);

        update_recordSet entry
                setting Status = AssetImpairmentTestResultEntryStatus_JP::Discarded
            where entry.ImpairmentAdjustment == 0
        exists join resultDoc
            where resultDoc.RecId == entry.ResultDocument
                  && resultDoc.AssetImpairmentTestResult_JP == testResult.RecId;

        select firstOnly RecId from entry
            where entry.Status != AssetImpairmentTestResultEntryStatus_JP::Discarded
        exists join resultDoc
            where entry.ResultDocument == resultDoc.RecId
                  && resultDoc.AssetImpairmentTestResult_JP == testResult.RecId;

        if (!entry)
        {
            this.updateTestStatus(AssetImpairmentTestResultStatus_JP::Discarded);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The constructor of class <c>AssetImpairmentCGUGroupTest_JP</c>
    /// </summary>
    /// <param name="_testResult">
    /// The <c>AssetImpairmentTestResult_JP</c> record that this test based on.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throw error when test result does not exist.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throw error when CGU group does not exist.
    /// </exception>

    protected void new(AssetImpairmentTestResult_JP _testResult)
    {
        if (!_testResult)
        {
            throw error("@SYP4880561");
        }

        testResult = _testResult;

        cguGroup = AssetImpairmentCGUGroup_JP::find(_testResult.CGUGroup);

        if (!cguGroup)
        {
            throw error("@SYP4880492");
        }

        total = AssetImpairmentCGURecognitionTotal_JP::findFromTestResult(_testResult, true);

        if (!total)
        {
            total.initValue();
            total.AssetImpairmentTestResult_JP = _testResult.RecId;
            total.insert();
        }

        #UpdateTotalVars(total)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCguSubtotalImpairAdj</Name>
				<Source><![CDATA[
    public AssetImpairmentAdjustment_JP parmCguSubtotalImpairAdj()
    {
        return cguSubtotalImpairAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCguSubtotalNbv</Name>
				<Source><![CDATA[
    public AssetNetBookValue parmCguSubtotalNbv()
    {
        return cguSubtotalNbv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCguSubtotalRecovAmt</Name>
				<Source><![CDATA[
    public AssetRecoverableAmount_JP parmCguSubtotalRecovAmt()
    {
        return cguSubtotalRecovAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCguSubtotalUndiscCF</Name>
				<Source><![CDATA[
    public AssetUndiscountedCashFlow_JP parmCguSubtotalUndiscCF()
    {
        return cguSubtotalUndiscCF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrandTotalImpairAdj</Name>
				<Source><![CDATA[
    public AssetImpairmentAdjustment_JP parmGrandTotalImpairAdj()
    {
        return grandTotalImpairAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrandTotalNbv</Name>
				<Source><![CDATA[
    public AssetNetBookValue parmGrandTotalNbv()
    {
        return grandTotalNbv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrandTotalRecovAmt</Name>
				<Source><![CDATA[
    public AssetRecoverableAmount_JP parmGrandTotalRecovAmt()
    {
        return grandTotalRecovAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrandTotalTestResult</Name>
				<Source><![CDATA[
    public NoYesUnchanged parmGrandTotalTestResult()
    {
        return grandTotalTestResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrandTotalUndiscCF</Name>
				<Source><![CDATA[
    public AssetUndiscountedCashFlow_JP parmGrandTotalUndiscCF()
    {
        return grandTotalUndiscCF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSharedAssetImpairmentAdjExceeded</Name>
				<Source><![CDATA[
    public boolean parmSharedAssetImpairmentAdjExceeded()
    {
        return sharedAssetImpairmentAdjExceeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSharedAssetsSubtotalImpairAdj</Name>
				<Source><![CDATA[
    public AssetImpairmentAdjustment_JP parmSharedAssetsSubtotalImpairAdj()
    {
        return sharedAssetsSubtotalImpairAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSharedAssetsSubtotalNbv</Name>
				<Source><![CDATA[
    public AssetNetBookValue parmSharedAssetsSubtotalNbv()
    {
        return sharedAssetsSubtotalNbv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSharedAssetsSubtotalRecovAmt</Name>
				<Source><![CDATA[
    public AssetRecoverableAmount_JP parmSharedAssetsSubtotalRecovAmt()
    {
        return sharedAssetsSubtotalRecovAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recognitionTest</Name>
				<Source><![CDATA[
    /// <summary>
    /// The recognition test step.
    /// </summary>
    /// <returns>
    /// If impairment happened.
    /// </returns>
    final public boolean recognitionTest()
    {
        boolean ret;

        if (testResult.Status >= AssetImpairmentTestResultStatus_JP::ReadyForProposal)
        {
            ret = checkFailed("@SYP4880452");
            return ret;
        }

        ttsBegin;

        testResult = AssetImpairmentTestResult_JP::find(testResult.RecId, true);
        total = AssetImpairmentCGURecognitionTotal_JP::findFromTestResult(testResult, true);

        this.resetForTest();

        ret = this.testStep1();
        ret = this.testStep2() || ret;

        this.updateTotal();

        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::Tested);

        ttsCommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetForCalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discard the change and reset the result document and result document entries for calculation step.
    /// </summary>
    public void resetForCalculate()
    {
        AssetImpairmentTestResultDocument_JP resultDoc;
        AssetImpairmentTestResultDocEntry_JP resultDocEntry;

        ttsBegin;

        testResult = AssetImpairmentTestResult_JP::find(testResult.RecId);
        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::Tested);

        update_recordSet resultDoc
            setting ImpairmentAdjustment = 0,
                    ImpairmentAdjExceeded   = false
            where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId;

        update_recordSet resultDocEntry
            setting ImpairmentAdjustment = 0,
                    ImpairmentAmtCalculated = 0,
                    ImpairmentAmtFrom = 0,
                    ImpairmentAmtTo = 0
        exists join resultDoc
            where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                  && resultDocEntry.ResultDocument == resultDoc.RecId;

        total = AssetImpairmentCGURecognitionTotal_JP::findFromTestResult(testResult, true);
        total.CGUSubtotalRecov                  = 0;
        total.SharedAssetsSubtotalRecov         = 0;
        total.GrandTotalRecov                   = 0;
        total.CGUSubtotalImpairmentAdj          = 0;
        total.SharedAssetsSubtotalImpairmentAdj = 0;
        total.GrandTotalImpairmentAdj           = 0;
        total.SharedAssetImpairmentAdjExceeded  = false;
        total.update();

        #UpdateTotalVars(total)

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetForTest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discard the change and reset the result document and result document entries for test step.
    /// </summary>
    public void resetForTest()
    {
        AssetImpairmentTestResultDocument_JP resultDoc;
        AssetImpairmentTestResultDocEntry_JP resultDocEntry;

        ttsBegin;

        testResult = AssetImpairmentTestResult_JP::find(testResult.RecId);
        this.updateTestStatus(AssetImpairmentTestResultStatus_JP::BeforeTest);

        update_recordSet resultDoc
            setting DocTestResult           = NoYesUnchanged::Unchanged,
                    ImpairmentAdjustment    = 0,
                    NetBookValue            = 0,
                    ImpairmentAdjExceeded   = false
            where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId;

        update_recordSet resultDocEntry
            setting NetBookValue            = 0,
                    ImpairmentAdjustment    = 0,
                    ImpairmentAmtCalculated = 0,
                    ImpairmentAmtFrom       = 0,
                    ImpairmentAmtTo         = 0,
                    FairValue               = 0,
                    NetSellingPrice         = 0
        exists join resultDoc
            where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                  && resultDocEntry.ResultDocument == resultDoc.RecId;

        total = AssetImpairmentCGURecognitionTotal_JP::findFromTestResult(testResult, true);
        total.reset();
        total.update();

        #UpdateTotalVars(total)

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testStep1</Name>
				<Source><![CDATA[
    /// <summary>
    /// The internal method to test each CGU. This is going to be overriden by derived class.
    /// </summary>
    /// <returns>
    /// If CGU has impairment happened.
    /// </returns>
    abstract protected boolean testStep1()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>testStep2</Name>
				<Source><![CDATA[
    /// <summary>
    /// The internal method to test shared asset and goodwill. This is going to be overriden by derived class.
    /// </summary>
    /// <returns>
    /// If CGU has impairment happened.
    /// </returns>
    abstract protected boolean testStep2()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTestStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the status of test result.
    /// </summary>
    /// <param name="_newStatus">
    /// The new status.
    /// </param>
    public void updateTestStatus(AssetImpairmentTestResultStatus_JP _newStatus)
    {
        ttsBegin;

        testResult = AssetImpairmentTestResult_JP::find(testResult.RecId, true);
        testResult.Status = _newStatus;
        testResult.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persist the total values to database.
    /// </summary>
    private void updateTotal()
    {
        ttsBegin;

        #UpdateTotalBuf(total)

        total.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetImpairmentTestResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create and initialize <c>AssetImpairmentTestResultDocument_JP</c> and
    /// <c>AssetImpairmentTestResultDocEntry_JP</c> records as a completed test result.
    /// </summary>
    /// <param name="_source">
    /// The source <c>AssetImpairmentTestResult_JP</c> record.
    /// </param>
    /// <remarks>
    /// For method 1, an <c>AssetImpairmentTestResultDocument_JP</c> record with non-zero CGU field value
    /// represents a CGU. An <c>AssetImpairmentTestResultDocument_JP</c> record with empty CGU field value
    /// represents the document for shared asset and goodwill. <c>AssetImpairmentTestResultDocEntry_JP</c>
    /// records associated to each <c>AssetImpairmentTestResultDocument_JP</c> record represents individual
    /// ordinary, shared, and goodwill asset book among each document.
    ///
    /// For method 2, there is not <c>AssetImpairmentTestResultDocument_JP</c> record representing the document
    /// for shared asset and goodwill. All <c>AssetImpairmentTestResultDocument_JP</c> records has CGU field value
    /// associated to a CGU. <c>AssetImpairmentTestResultDocEntry_JP</c> records associated to each
    /// <c>AssetImpairmentTestResultDocument_JP</c> record represents individual ordinary asset and the allocated
    /// part of shared and goodwill asset book among each CGU.
    ///
    /// For both method, a <c>AssetImpairmentCGURecognitionTotal_JP</c> record will be inserted to persist the total
    /// amount during the calculation.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Error will throw if the test result already exist.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Error will throw if the test result does not associate to any CGU group.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Error will throw if the number sequence for impairment test has not been set.
    /// </exception>
    public static void insertAssetImpairmentTestResult(AssetImpairmentTestResult_JP _source)
    {
        AssetImpairmentCGUGroup_JP             cguGroup;
        AssetImpairmentCGU_JP                  cgu;
        AssetImpairmentTestResultDocument_JP   resultDocument;
        AssetDocumentTable_JP                  document;
        AssetDocumentTable_JP                  documentTmp;
        AssetDocumentEntry_JP                  documentEntry;
        AssetImpairmentTestResultDocEntry_JP   resultDocEntry;
        AssetImpairmentTestResultDocEntry_JP   holdingEntry;
        AssetDocumentEntry_JP                  holdingDocEntry;
        AssetImpairmentCGUAssets_JP            cguAssets;
        AssetImpairmentCGUSharedAssets_JP      cguSharedAssets;
        AssetImpairmentCGURecognitionTotal_JP  total;
        AssetImpairmentCGUSharedAssetsAlloc_JP sharedAssetAlloc;
        NumberSequenceReference                numberSeqRef;
        RefRecId                               numSeqRefRecId;
        NoYes                                  no = NoYes::No;
        NoYes                                  yes = NoYes::Yes;
        AssetImpairmentProportionPercent_JP    oneHundred = 100;
        boolean                                showWarning = false;
        int                                    warningPeriod = AssetParameters::impairmentWarningPeriod_JP();

        if (_source)
        {
            throw error(strFmt("@SYP4880515", _source.TestNum));
        }

        if (!_source.CGUGroup)
        {
            throw error("@SYP4880451");
        }

        numberSeqRef = NumberSeqReference::findReference(extendedTypeNum(AssetImpairmentTestLineId_JP));

        if (!numberSeqRef.NumberSequenceId)
        {
            throw error("@SYS4005188");
        }
        else
        {
            numSeqRefRecId = numberSeqRef.NumberSequenceId;
        }

        ttsBegin;

        select firstOnly cguGroup where cguGroup.RecId == _source.CGUGroup;

        if (cguGroup)
        {
            _source.SharedAssetAllocBasis = cguGroup.SharedAssetAllocBasis;
            _source.SharedAssetHasHigherPriority = cguGroup.SharedAssetHasHigherPriority == AssetImpairmentSharedAssetPriority_JP::HigherThanOrdinaryAsset ? NoYes::Yes : NoYes::No;
            _source.SharedAssetImpairMethod = cguGroup.SharedAssetImpairMethod;
            _source.doInsert();
        }

        while select CGUGroup,
                     Number,
                     RecId,
                     ImpairmentAllocBasis,
                     UndiscountedCashFlow,
                     UndiscountedCashFlowLastUpdatedDate,
                     RecoverableAmount
            from cgu where cgu.CGUGroup == _source.CGUGroup
        {
            document.clear();
            document.DocumentId = NumberSeq::newGetNumFromId(numSeqRefRecId, true).num();
            document.MainType = AssetDocumentMainType_JP::AssetImpairment;
            document.Type = AssetDocumentType_JP::AssetImpairment;
            document.Description = cgu.Number;
            document.DocumentDate = _source.TestDate;
            document.insert();

            resultDocument.clear();
            resultDocument.AssetDocumentTable_JP = document.RecId;
            resultDocument.AssetImpairmentTestResult_JP = _source.RecId;
            resultDocument.CGU = cgu.RecId;
            resultDocument.ImpairmentAllocBasis = cgu.ImpairmentAllocBasis;
            resultDocument.UndiscountedCashFlow = cgu.UndiscountedCashFlow;
            resultDocument.LastUpdatedDate = cgu.UndiscountedCashFlowLastUpdatedDate;
            resultDocument.DocTestResult = NoYesUnchanged::Unchanged;
            resultDocument.RecoverableAmount = cgu.RecoverableAmount;
            resultDocument.insert();

            if (_source.TestDate >= dateMthFwd(resultDocument.LastUpdatedDate, warningPeriod))
            {
                showWarning = true;
            }
            // insert CGU assets
            insert_recordset documentEntry
                (AssetId, BookId, AssetDocumentTable_JP)
            select AssetId, BookId from cguAssets
                where cguAssets.IsSharedAsset == NoYes::No
            join RecId from documentTmp
                where documentTmp.RecId == document.RecId
            exists join resultDocument
                where cguAssets.AssetImpairmentCGU == cgu.RecId;

            // insert result document entry
            insert_recordset resultDocEntry
                (AssetDocumentEntry_JP,
                    ResultDocument,
                    AllocationPriority,
                    ImpairmentAllocationMethod,
                    Percent)
            select RecId from documentEntry
                where documentEntry.AssetDocumentTable_JP == document.RecId
            join firstOnly RecId from resultDocument
                where resultDocument.AssetDocumentTable_JP == document.RecId
            join firstOnly AllocationPriority,
                            AssetImpairmentAllocationMethod_JP,
                            oneHundred
                from cguAssets
                    where cguAssets.AssetId == documentEntry.AssetId
                            && cguAssets.BookId == documentEntry.BookId
                            && cguAssets.AssetImpairmentCGU == cgu.RecId
                            && cguAssets.IsSharedAsset == NoYes::No;

            update_recordSet resultDocEntry
                    setting HoldingEntry = holdingEntry.RecId
                where resultDocEntry.ImpairmentAllocationMethod == AssetImpairmentAllocationMethod_JP::OtherAsset
            join firstOnly resultDocument
                where resultDocEntry.ResultDocument == resultDocument.RecId
                      && resultDocument.CGU == cgu.RecId
                      && resultDocument.AssetImpairmentTestResult_JP == _source.RecId
            join firstOnly documentEntry
                where documentEntry.RecId == resultDocEntry.AssetDocumentEntry_JP
            join firstOnly cguAssets
                where cguAssets.AssetImpairmentCGU == cgu.RecId
                      && cguAssets.BookId == documentEntry.BookId
                      && cguAssets.AssetId == documentEntry.AssetId
            join firstOnly holdingDocEntry
                where holdingDocEntry.AssetDocumentTable_JP == documentEntry.AssetDocumentTable_JP
                      && holdingDocEntry.AssetId == cguAssets.ImpairmentHoldingAssetId
                      && holdingDocEntry.BookId == cguAssets.ImpairmentHoldingBookId
            join firstOnly RecId from holdingEntry
                where holdingEntry.AssetDocumentEntry_JP == holdingDocEntry.RecId;

            // If Method II, insert shared assets and goodwill assets
            if (cguGroup && cguGroup.SharedAssetImpairMethod == AssetImpairmentSharedAssetsMethod_JP::Method2)
            {
                insert_recordset documentEntry
                    (AssetId, BookId, AssetDocumentTable_JP)
                select AssetId, BookId from cguSharedAssets
                    where cguSharedAssets.CGUGroup == _source.CGUGroup
                join RecId from documentTmp
                    where documentTmp.RecId == document.RecId;

                // insert result document entry
                insert_recordset resultDocEntry
                    (AssetDocumentEntry_JP,
                     ResultDocument,
                     ProrationMethodOverride,
                     SharedAssetType,
                     AllocationPriority,
                     IsSharedAsset,
                     Percent)
                select RecId from documentEntry
                    where documentEntry.AssetDocumentTable_JP == document.RecId
                join firstOnly RecId from resultDocument
                    where resultDocument.AssetDocumentTable_JP == document.RecId
                join firstOnly ProrationMethodOverride, SharedAssetType from cguSharedAssets
                    where cguSharedAssets.CGUGroup == cguGroup.RecId
                          && cguSharedAssets.AssetId == documentEntry.AssetId
                          && cguSharedAssets.BookId == documentEntry.BookId
                join firstOnly AllocationPriority, yes from cguAssets
                    where cguAssets.AssetImpairmentCGU == cgu.RecId
                          && cguAssets.AssetId == documentEntry.AssetId
                          && cguAssets.BookId == documentEntry.BookId
                          && cguAssets.IsSharedAsset == NoYes::Yes
                join firstOnly Percent from sharedAssetAlloc
                    where sharedAssetAlloc.CGU == cgu.RecId
                          && sharedAssetAlloc.SharedAsset == cguSharedAssets.RecId;
            }
        }

        //If Method I, create a result document for the shared assets and good will assets
        if (cguGroup && cguGroup.SharedAssetImpairMethod == AssetImpairmentSharedAssetsMethod_JP::Method1)
        {
            document.clear();
            document.DocumentId = NumberSeq::newGetNumFromId(numSeqRefRecId, true).num();
            document.MainType = AssetDocumentMainType_JP::AssetImpairment;
            document.Type = AssetDocumentType_JP::AssetImpairment;
            document.Description = "@SYP4880415";
            document.DocumentDate = _source.TestDate;
            document.insert();

            resultDocument.clear();
            resultDocument.AssetDocumentTable_JP = document.RecId;
            resultDocument.AssetImpairmentTestResult_JP = _source.RecId;
            resultDocument.DocTestResult = NoYesUnchanged::Unchanged;
            resultDocument.insert();

            // insert document entry shared assets and goodwill assets
            insert_recordset documentEntry
                (AssetId, BookId, AssetDocumentTable_JP)
            select AssetId, BookId from cguSharedAssets
                where cguSharedAssets.CGUGroup == _source.CGUGroup
            join RecId from documentTmp
                where documentTmp.RecId == document.RecId;

            // insert result document entry
            insert_recordset resultDocEntry
                    (AssetDocumentEntry_JP,
                     ResultDocument,
                     ProrationMethodOverride,
                     SharedAssetType,
                     AllocationPriority,
                     IsSharedAsset,
                     Percent)
            select RecId from documentEntry
                where documentEntry.AssetDocumentTable_JP == document.RecId
            join firstOnly RecId from resultDocument
                where resultDocument.AssetDocumentTable_JP == document.RecId
            join firstOnly ProrationMethodOverride, SharedAssetType, AllocationPriority, yes, oneHundred from cguSharedAssets
                    where cguSharedAssets.CGUGroup == cguGroup.RecId
                          && cguSharedAssets.AssetId == documentEntry.AssetId
                          && cguSharedAssets.BookId == documentEntry.BookId;
        }

        // insert data to AssetImpairmentCGURecognitionTotal_JP
        total.initValue();
        total.AssetImpairmentTestResult_JP = _source.RecId;
        total.insert();

        ttsCommit;

        if (showWarning && warningPeriod)
        {
            warning(strFmt("@SYP4880619", warningPeriod));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>