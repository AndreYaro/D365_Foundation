<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceContract</c> class is the data contract class for the <c>CustInvoice</c>Microsoft
/// SQL Server Reporting Services report.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(CustInvoiceUIBuilder)),
    SysOperationGroupAttribute('Criteria', "@SYS13128", "1")
]
public class CustInvoiceContract implements SysOperationInitializable, SysOperationValidatable
{
    Name dimensionFocus;
    FromDate fromDate;
    ToDate toDate;
    OpenPaidBoth invoiceType;

    NoYes inclTransWithNoBillingClass;
    List billingClassification;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes data contract values.
    /// </summary>
    public void initialize()
    {
        invoiceType = OpenPaidBoth::Open;

        billingClassification = new List(Types::String);

        if (!CustParameters::isBillingClassificationEnabled())
        {
            billingClassification.addEnd(SysLabel::labelId2String(literalStr("@GLS223107")));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillingClassification</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('BillingClassification'),
        SysOperationLabelAttribute(literalStr("@SPS371")),
        SysOperationHelpTextAttribute(literalStr("@SPS677")),
        SysOperationDisplayOrderAttribute('0'),
        AifCollectionTypeAttribute('return', Types::String)
    ]
    public List parmBillingClassification(List _billingClassification = billingClassification)
    {
        billingClassification = _billingClassification;
        return billingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionFocus</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('DimensionFocus'),
        SysOperationLabelAttribute(literalstr("@SYS340826")),
        SysOperationHelpTextAttribute(literalstr("@SYS328569")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public Name parmDimensionFocus(Name _dimensionFocus = dimensionFocus)
    {
        dimensionFocus = _dimensionFocus;
        return dimensionFocus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('FromDate'),
        SysOperationLabelAttribute(literalstr("@SYS328562")),
        SysOperationHelpTextAttribute(literalstr("@SYS328563")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInclTransWithNoBillingClass</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('InclTransWithNoBillingClass'),
        SysOperationLabelAttribute(literalStr("@SPS691")),
        SysOperationHelpTextAttribute(literalStr("@SPS1009")),
        SysOperationDisplayOrderAttribute('0')
    ]
    public NoYes parmInclTransWithNoBillingClass(NoYes _inclTransWithNoBillingClass = inclTransWithNoBillingClass)
    {
        inclTransWithNoBillingClass = _inclTransWithNoBillingClass;
        return inclTransWithNoBillingClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceType</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('InvoiceType'),
        SysOperationLabelAttribute(literalstr("@SYS328566")),
        SysOperationHelpTextAttribute(literalstr("@SYS328567")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('4')
    ]
    public OpenPaidBoth parmInvoiceType(OpenPaidBoth _invoiceType = invoiceType)
    {
        invoiceType = _invoiceType;
        return invoiceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('ToDate'),
        SysOperationLabelAttribute(literalstr("@SYS328564")),
        SysOperationHelpTextAttribute(literalstr("@SYS328565")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the data contract values.
    /// </summary>
    /// <returns>
    ///    true if all the contract values are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        // Force date to be included in the restrictions. Without a date
        // range the resulting SQL query will need to do a cartesian product
        // against CustInvoiceJour, CustInvoiceTrans and CustTrans before
        // restricting down. Even with a relatively small database this
        // will result in filling up tempdb and crashing the report as well
        // as degrading all other queries against the SQL server. With date
        // range included, the date indexes on CustInvoiceJour will be used
        // to generate index seeks and allow a reasonable query.
        if (!fromDate)
        {
            isValid = checkFailed("@SYS97591");
        }

        if (!toDate)
        {
            isValid = checkFailed("@SYS97592");
        }

        if (dimensionFocus != "" && !DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, dimensionFocus, false, false))
        {
            isValid = checkFailed("@SYS329337");
        }

        if (fromDate != dateNull() && toDate != dateNull() && fromDate > toDate)
        {
            isValid = checkFailed("@SYS104511");
        }

        if (isValid && (!BrazilParameters::isEnabled()))
        {
            isValid = CustBillingClassificationReportManager::validate(billingClassification, inclTransWithNoBillingClass);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static CustInvoiceContract construct()
    {
        return new CustInvoiceContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>