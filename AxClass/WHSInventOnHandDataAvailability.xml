<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventOnHandDataAvailability</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventOnHandDataAvailability</c> class is an adapter that is responsible
/// for exposing the on hand availability information from <c>WHSInventOnHandData</c>
/// using the unified <c>InventIAvailability</c> interface.
/// </summary>
public class WHSInventOnHandDataAvailability implements InventIAvailability, PdsCWInventIAvailability
{
    WHSInventOnHandData whsInventOnHandData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the quantity available for physical reservation.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyAvailPhysical availPhysical()
    {
        return whsInventOnHandData.parmAvailPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the catch weight quantity available for physical reservation.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    [Hookable(false)]
    public PdsCWAvailPhysical pdsCWAvailPhysical()
    {
        return whsInventOnHandData.parmCWAvailPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>availReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity available for reservation.
    /// </summary>
    /// <param name="_allowReserveOrdered">
    /// A value indicating wither the result should include
    /// the ordered goods that are available for reservation; optional.
    /// </param>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQty availReservation(NoYes _allowReserveOrdered = NoYes::Yes)
    {
        return _allowReserveOrdered ? whsInventOnHandData.parmAvailOrdered() : whsInventOnHandData.parmAvailPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight quantity available for reservation.
    /// </summary>
    /// <param name="_allowReserveOrdered">
    /// A value indicating wither the result should include
    /// the ordered goods that are available for reservation; optional.
    /// </param>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    [Hookable(false)]
    public PdsCWAvailReservation pdsCWAvailReservation(NoYes _allowReserveOrdered = NoYes::Yes)
    {
        return _allowReserveOrdered ? whsInventOnHandData.parmCWAvailOrdered() : whsInventOnHandData.parmCWAvailPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>availTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total available quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    /// <remarks>
    /// The total available quantity is the total quantity available for reservation
    /// minus the quantity that is on order but not reserved.
    /// </remarks>
    public InventQtyAvailOrdered availTotal()
    {
        return whsInventOnHandData.parmAvailOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total available catch weight quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    /// <remarks>
    /// The total available quantity is the total quantity available for reservation
    /// minus the quantity that is on order but not reserved.
    /// </remarks>
    [Hookable(false)]
    public PdsCWAvailOrdered pdsCWAvailTotal()
    {
        return whsInventOnHandData.parmCWAvailOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ordered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ordered quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyOrdered ordered()
    {
        return whsInventOnHandData.parmAvailOrdered() + whsInventOnHandData.parmReservOrdered() - whsInventOnHandData.parmAvailPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ordered catch weight quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    [Hookable(false)]
    public PdsCWOrdered pdsCWOrdered()
    {
        return whsInventOnHandData.parmCWAvailOrdered() + whsInventOnHandData.parmCWReservOrdered() - whsInventOnHandData.parmCWAvailPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity that was ordered
    /// but is not physically available in the warehouse yet.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    /// <remarks>
    /// Goods that are in the Arrived status are not physically available
    /// in the warehouse yet so the result of this method is the Ordered + Arrived quantity.
    /// </remarks>
    public InventQtyOrderedSum orderedSum()
    {
        return this.ordered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOrderedSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight quantity that was ordered
    /// but is not physically available in the warehouse yet.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    /// <remarks>
    /// Goods that are in the Arrived status are not physically available
    /// in the warehouse yet so the result of this method is the Ordered + Arrived quantity.
    /// </remarks>
    [Hookable(false)]
    public PdsCWOrdered pdsCWOrderedSum()
    {
        return this.pdsCWOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSInventOnHandData</Name>
				<Source><![CDATA[
    protected WHSInventOnHandData parmWHSInventOnHandData(WHSInventOnHandData _whsInventOnHandData = whsInventOnHandData)
    {
        whsInventOnHandData = _whsInventOnHandData;

        return whsInventOnHandData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against ordered on hand.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyReservOrdered reservOrdered()
    {
        return whsInventOnHandData.parmReservOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReservOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight quantity reserved against ordered on hand.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    [Hookable(false)]
    public PdsCWReservOrdered pdsCWReservOrdered()
    {
        return whsInventOnHandData.parmCWReservOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against on hand that is physically available.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyReservPhysical reservPhysical()
    {
        return whsInventOnHandData.parmReservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight quantity reserved against on hand that is physically available.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    [Hookable(false)]
    public PdsCWReservPhysical pdsCWReservPhysical()
    {
        return whsInventOnHandData.parmCWReservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSInventOnHandDataAvailability construct()
    {
        return new WHSInventOnHandDataAvailability();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWHSInventOnHandData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSInventOnHandDataAvailability</c> based on the
    /// specified <c>WHSInventOnHandData</c> class.
    /// </summary>
    /// <param name="_whsInventOnHandData">
    /// The <c>WHSInventOnHandData</c> class that contains the on hand information
    /// that needs to be exposed using the unified on hand availability interface.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSInventOnHandDataAvailability</c> class.
    /// </returns>
    public static WHSInventOnHandDataAvailability newFromWHSInventOnHandData(WHSInventOnHandData _whsInventOnHandData)
    {
        WHSInventOnHandDataAvailability availability = WHSInventOnHandDataAvailability::construct();
        availability.parmWHSInventOnHandData(_whsInventOnHandData);
        return availability;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>