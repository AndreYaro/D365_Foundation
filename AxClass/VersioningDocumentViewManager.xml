<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningDocumentViewManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VersioningDocumentViewManager</c> class is responsible for building the user interface for a versioned form;
/// including showing indicators for changed fields and tooltip for showing old values.
/// </summary>
public class VersioningDocumentViewManager
{
    private const str boldStyle = "planning_FieldModified";
    private const str NotInGridMapKey = "NotInGrid";
    private const str InGridMapKey = "InGrid";

    Map     trackedDataSources;
    Map     trackedControls;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>VersioningDocumentViewManager</c> class
    /// </summary>
    /// <param name = "_versionedForm">
    /// The form for which the user interface should be built.
    /// </param>
    /// <returns>
    /// The created <c>VersioningDocumentViewManager</c> instance.
    /// </returns>
    public static VersioningDocumentViewManager construct()
    {
        var versioningMgr = new VersioningDocumentViewManager();

        return versioningMgr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerDataContainerForDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers a datasource for change tracking.
    /// </summary>
    /// <param name = "_formDataSource">
    /// <c>FormDataSource</c> to be registered for change tracking.
    /// </param>
    /// <param name = "_dataContainer">
    /// The <c>VersioningDocumentViewDataContainer</c> responsible for providing old and new values of the record.
    /// </param>
    public void registerDataContainerForDataSource(FormDataSource _formDataSource, VersioningDocumentViewDataContainer _dataContainer)
    {
        if (trackedDataSources == null)
        {
            trackedDataSources = new Map(Types::String, Types::Class);
        }

        trackedDataSources.insert(_formDataSource.name(), _dataContainer);

        _formDataSource.OnActivated += eventhandler(VersioningDocumentViewManager::formDataSourceUpdateRaised);
        _formDataSource.OnWritten   += eventhandler(VersioningDocumentViewManager::formDataSourceUpdateRaised);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerControlForTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers a form control for change tracking.
    /// </summary>
    /// <param name = "_formControl">
    /// <c>FormControl</c> to be registered for change tracking.
    /// </param>
    /// <remarks>
    /// The datasource for the control should be registered prior to calling this method; otherwise an expection is thrown.
    /// </remarks>
    public void registerControlForTracking(FormControl _formControl)
    {
        if (!trackedDataSources.exists(_formControl.dataSourceObject().name()))
        {
            throw error("@SCM:RegisterDataSourceBeforeControl");
        }

        this.addPreviewPartRef(_formControl);
        this.addToTrackedControls(_formControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the old value of a field bound to a form control.
    /// </summary>
    /// <param name = "callerFormControl">
    /// Control for which old value is required.
    /// </param>
    /// <returns>
    /// Old value of the form control.
    /// Null container if the old value is same as current value.
    /// </returns>
    public container getOldValue(FormControl _callerFormControl, Common _record)
    {
        VersioningDocumentViewDataContainer dataContainer = trackedDataSources.lookup(_callerFormControl.dataSourceObject().name()) as VersioningDocumentViewDataContainer;

        if (this.isInGrid(_callerFormControl))
        {
            dataContainer.updateRecords(_record);
        }

        return dataContainer.hasValueChanged(_callerFormControl.fieldBinding().fieldName()) ?
            [dataContainer.getOldValue(_callerFormControl.fieldBinding().fieldName())] :
            conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the displayOption for the passed record.
    /// To be called from displayOption of datasource in the form to set change indicators in controls in a grid.
    /// </summary>
    /// <param name = "_formDataSource">
    /// <c>FormDataSource</c> from which the method is called.
    /// </param>
    /// <param name = "_record">
    /// Record for which displayOption should be calculated.
    /// </param>
    /// <param name = "_options">
    /// <c>FormRowDisplayOption</c> that should be updated based on the calculation.
    /// </param>
    /// <returns>
    /// The updated <c>FormRowDisplayOption</c>.
    /// </returns>
    public FormRowDisplayOption setDisplayOption(FormDataSource _formDataSource, Common _record, FormRowDisplayOption _options)
    {
        FormRowDisplayOption options = _options;
        boolean showDisplayOptions = false;

        // Get each control for the datasource that exists in a grid.
        if (trackedControls.exists(_formDataSource.name()))
        {
            Map trackedControlDSMap = trackedControls.lookup(_formDataSource.name());

            if (trackedControlDSMap.exists(InGridMapKey))
            {
                List inGridControlList = trackedControlDSMap.lookup(InGridMapKey);
                ListEnumerator inGridControlEnumerator = inGridControlList.getEnumerator();

                VersioningDocumentViewDataContainer dataContainer = trackedDataSources.lookup(_formDataSource.name()) as VersioningDocumentViewDataContainer;
                dataContainer.updateRecords(_record);

                while (inGridControlEnumerator.moveNext())
                {
                    FormControl control = inGridControlEnumerator.current() as FormControl;
                    if (dataContainer.hasValueChanged(control.fieldBinding().fieldName()))
                    {
                        options.affectedElementsByControl(control.id());
                        showDisplayOptions = true;
                    }
                }
            }
        }

        if (showDisplayOptions)
        {
            options.fontBold(true);
        }

        return options;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDataSourceUpdateRaised</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event listener to listen to events that should lead the view to be updated.
    /// </summary>
    /// <param name = "sender">
    /// <c>FormDataSource</c> from which the event is raised.
    /// </param>
    /// <param name = "e">
    /// <c>FormDataSourceEventArgs</c> representing additional arguments from the event source.
    /// </param>
    public static void formDataSourceUpdateRaised(FormDataSource sender, FormDataSourceEventArgs e)
    {
        PurchIVersionedDocumentForm docForm = sender.formRun() as PurchIVersionedDocumentForm;

        if (docForm == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        docForm.getViewManager().updateView(sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPreviewPartRef</Name>
				<Source><![CDATA[
    private void addPreviewPartRef(FormControl _formControl)
    {
        switch (true)
        {
            case (_formControl is FormStringControl):
                FormStringControl stringControl = _formControl as FormStringControl;
                stringControl.previewPartRef(menuItemDisplayStr(PurchVendorPortalOldValue));
                break;
            case (_formControl is FormIntControl):
                FormIntControl intControl = _formControl as FormIntControl;
                intControl.previewPartRef(menuItemDisplayStr(PurchVendorPortalOldValue));
                break;
            case (_formControl is FormInt64Control):
                FormInt64Control int64Control = _formControl as FormInt64Control;
                int64Control.previewPartRef(menuItemDisplayStr(PurchVendorPortalOldValue));
                break;
            case (_formControl is FormRealControl):
                FormRealControl realControl = _formControl as FormRealControl;
                realControl.previewPartRef(menuItemDisplayStr(PurchVendorPortalOldValue));
                break;
            case (_formControl is FormDateControl):
                FormDateControl dateControl = _formControl as FormDateControl;
                dateControl.previewPartRef(menuItemDisplayStr(PurchVendorPortalOldValue));
                break;
            case (_formControl is FormDateTimeControl):
                FormDateTimeControl dateTimeControl = _formControl as FormDateTimeControl;
                dateTimeControl.previewPartRef(menuItemDisplayStr(PurchVendorPortalOldValue));
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInGrid</Name>
				<Source><![CDATA[
    private boolean isInGrid(FormControl _formControl)
    {
        FormControl parentControl = _formControl.parentControl();

        if (parentControl == null)
        {
            return false;
        }

        if (parentControl is FormGridControl)
        {
            return true;
        }

        return this.isInGrid(parentControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToTrackedControls</Name>
				<Source><![CDATA[
    private void addToTrackedControls(FormControl _formControl)
    {
        str gridText = this.isInGrid(_formControl) ? InGridMapKey : NotInGridMapKey;

        // Create an map entry for the datasource
        if (trackedControls == null)
        {
            trackedControls = new Map(Types::String, Types::AnyType);
        }

        // Create a map sub-entry for the in-grid and out of grid controls

        if (!trackedControls.exists(_formControl.dataSourceObject().name()))
        {
            trackedControls.insert(_formControl.dataSourceObject().name(), new Map(Types::String, Types::AnyType));
        }

        Map dsControlMap = trackedControls.lookup(_formControl.dataSourceObject().name());

        // Add the control to the correct sub-entry
        if (!dsControlMap.exists(gridText))
        {
            dsControlMap.insert(gridText, new List(Types::AnyType));
        }
        List controlList = dsControlMap.lookup(gridText);

        controlList.addEnd(_formControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateView</Name>
				<Source><![CDATA[
    private void updateView(FormDataSource _dataSource)
    {
        VersioningDocumentViewDataContainer dataContainer = trackedDataSources.lookup(_dataSource.name()) as VersioningDocumentViewDataContainer;

        dataContainer.updateRecords(_dataSource.cursor());

        if (trackedControls.exists(_dataSource.name()))
        {
            Map dsControlMap = trackedControls.lookup(_dataSource.name());

            if (dsControlMap.exists(NotInGridMapKey))
            {
                List controlList = dsControlMap.lookup(NotInGridMapKey);

                ListEnumerator controlEnumerator = controlList.getEnumerator();

                while (controlEnumerator.moveNext())
                {
                    FormControl control = controlEnumerator.current() as FormControl;

                    if (dataContainer.hasValueChanged(control.fieldBinding().fieldName()))
                    {
                        control.extendedStyle(boldStyle);
                    }
                    else
                    {
                        control.extendedStyle("");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChangeIndicator</Name>
				<Source><![CDATA[
    private void setChangeIndicator(anytype _oldValue, anytype _newValue, FormControl _formControl)
    {
        if (_oldValue != _newValue)
        {
            _formControl.extendedStyle(boldStyle);
        }
        else
        {
            _formControl.extendedStyle("");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>