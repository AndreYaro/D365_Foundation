<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackRegTrans_PhysicalIssue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the controller class for the <c>InventTrackingRegisterTrans</c> form.
/// It is used when form is opened to register serial numbers for physical issue.
/// </summary>
class InventTrackRegTrans_PhysicalIssue extends InventTrackingRegisterTransForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInsertSerialId</Name>
				<Source><![CDATA[
    public boolean canInsertSerialId(InventSerialId _inventSerialId)
    {
        InventTrackingRegisterTrans tracking;
        InventDim   inventDim;

        select firstonly RecId from tracking
            where !tracking.PhysicalRefRecId
                && tracking.InventTransOrigin == inventTransOrigin.RecId
        exists join inventDim
            where inventDim.InventDimId == tracking.InventDimId
                && inventDim.InventSerialId == _inventSerialId;

        return tracking.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalLinesCount</Name>
				<Source><![CDATA[
    public InventQty getTotalLinesCount()
    {
        return abs(InventTrackingRegisterTrans::qtyPhysicalIssue(inventTransOrigin.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormDatasource</Name>
				<Source><![CDATA[
    public void initFormDatasource(FormDataSource _formDataSource)
    {
        QueryBuildDataSource    queryBuildDS = _formDataSource.queryBuildDataSource();

        super(_formDataSource);

        if (!isReadOnly)
        {
            QueryBuildRange physicalRefRange = queryBuildDS.addRange(fieldNum(InventTrackingRegisterTrans, PhysicalRefRecId));
            physicalRefRange.status(RangeStatus::Hidden);
            physicalRefRange.value(queryValue(0));

            QueryBuildRange cancelledRange = queryBuildDS.addRange(fieldNum(InventTrackingRegisterTrans, Cancelled));
            cancelledRange.status(RangeStatus::Hidden);
            cancelledRange.value(queryValue(NoYes::No));
        }
        _formDataSource.object(fieldNum(InventTrackingRegisterTrans, ReadyForFinancialUpdate)).visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCountLabel</Name>
				<Source><![CDATA[
    public str lineCountLabel()
    {
        return "@SYS50316";
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAll</Name>
				<Source><![CDATA[
    public void removeAll()
    {
        InventTrackingRegisterTrans tracking;

        delete_from tracking
            where tracking.InventTransOrigin == inventTransOrigin.RecId
                && !tracking.PhysicalRefRecId;

        this.setOkStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterSerialNumber</Name>
				<Source><![CDATA[
    public void unregisterSerialNumber(InventSerialId _inventSerialId)
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;
        InventDim inventTrackingDim;

        delete_from inventTrackingRegisterTrans
        exists join inventTrackingDim
        where inventTrackingDim.InventDimId == inventTrackingRegisterTrans.InventDimId
            && inventTrackingDim.InventSerialId == _inventSerialId
            && inventTrackingRegisterTrans.InventTransOrigin == inventTransOrigin.RecId
            && !inventTrackingRegisterTrans.PhysicalRefRecId;

        if (inventTrackingRegisterTrans.RowCount() == 0)
        {
            this.setUnknownSerialStatus();
        }
        else
        {
            this.setOkStatus();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
