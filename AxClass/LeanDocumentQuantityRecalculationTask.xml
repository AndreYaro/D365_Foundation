<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentQuantityRecalculationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentQuantityRecalculationTask</c> class provides facility for extracting the
///    recalculated quantity for a lean document.
/// </summary>
class LeanDocumentQuantityRecalculationTask extends LeanDocumentTask
{
    InventQty                       recalculatedQuantity;
    UnitOfMeasureRecId              requiredUnitOfMeasure;
    ItemId                          serviceItemId;
    dataAreaId                      serviceItemDataAreaId;
    InventDimId						inventDimId;

    Map                             linesDataMap;
    Map                             lineDataValues;
    LeanDocumentProcessingDataLine  lineData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;

        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
	/// <summary>
    ///    Determines whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The object to compare.
    /// </param>
    /// <returns>
    ///    true if the two objects are equal; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentQuantityRecalculationTask otherTask = otherObject as LeanDocumentQuantityRecalculationTask;

        return  otherObject == this
                || (otherTask != null
                    && this.parmRequiredUnitOfMeasure() == otherTask.parmRequiredUnitOfMeasure()
                    && this.parmServiceItemDataAreaId() == otherTask.parmServiceItemDataAreaId()
                    && this.parmServiceItemId()         == otherTask.parmServiceItemId()
                    && super(otherTask));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance of the <c>LeanDocumentQuantityRecalculationTask</c> class.
    /// </summary>
    protected void init()
    {
        super();

        if (this.canProceedWithTask())
        {
            linesDataMap = processingData.parmDocumentLines();

            // we only expect 1 purchase line as initially the updated job was part of just 1 line,
            // so after the re-aggregation it should still be just 1 line
            Debug::assert(linesDataMap.elements() == 1);

            MapEnumerator mapEnumerator = linesDataMap.getEnumerator();
            mapEnumerator.moveNext();

            lineData        = mapEnumerator.currentValue();
            lineDataValues  = lineData.parmAdditionalValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequiredUnitOfMeasure</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected UnitOfMeasureRecId parmRequiredUnitOfMeasure(UnitOfMeasureRecId _requiredUnitOfMeasure = requiredUnitOfMeasure)
    {
        requiredUnitOfMeasure = _requiredUnitOfMeasure;

        return requiredUnitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceItemDataAreaId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected dataAreaId parmServiceItemDataAreaId(dataAreaId _serviceItemDataAreaId = serviceItemDataAreaId)
    {
        serviceItemDataAreaId = _serviceItemDataAreaId;

        return serviceItemDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceItemId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected ItemId parmServiceItemId(ItemId _serviceItemId = serviceItemId)
    {
        serviceItemId = _serviceItemId;

        return serviceItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculatedQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the newly recalculated quantity.
    /// </summary>
    /// <returns>
    ///    The newly recalculated quantity.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty recalculatedQuantity()
    {
        return recalculatedQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.init();

        if (!this.canProceedWithTask())
        {
            return;
        }

        recalculatedQuantity    =
                EcoResProductUnitConverter::convertForReleasedProduct(serviceItemId,
																	  inventDimId,
																	  lineData.parmLineQuantity(),
																	  lineData.parmLineUnitOfMeasure(),
																	  requiredUnitOfMeasure,
																	  NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanDocumentQuantityRecalculationTask</c> class.
    /// </summary>
    /// <param name="_requiredUnitOfMeasure">
    ///    The unit of measure in which the quantity will be returned.
    /// </param>
    /// <param name="_serviceItemId">
    ///    The item ID for which the conversion occurs; optional.
    /// </param>
    /// <param name="_serviceItemDataAreaId">
    ///    The data area identifier for the item for which the conversion occurs; optional.
    /// </param>
    /// <returns>
    ///    An instance of <c>LeanDocumentQuantityRecalculationTask</c> .
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentQuantityRecalculationTask newStandard(
        UnitOfMeasureRecId  _requiredUnitOfMeasure,
        ItemId              _serviceItemId = '',
        dataAreaId          _serviceItemDataAreaId = '')
    {
        LeanDocumentQuantityRecalculationTask task = new LeanDocumentQuantityRecalculationTask();
        task.parmRequiredUnitOfMeasure(_requiredUnitOfMeasure);
        task.parmServiceItemDataAreaId(_serviceItemDataAreaId);
        task.parmServiceItemId(_serviceItemId);
        return task;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>