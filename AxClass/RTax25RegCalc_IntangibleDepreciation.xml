<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_IntangibleDepreciation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class rTax25RegCalc_IntangibleDepreciation extends RTax25RegCalc_AssetsInfo implements BatchRetryable
{
    protected const int FieldNum3 = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        profitTableRecId = RTax25ProfitTable::findByProfitId(strltrim(strrtrim(
            RTax25RegisterParameters::find(registerId, FieldNum3).Parameter))).RecId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    protected void createFooter()
    {
        regQuery.addFooterRecord(profitTableRecId,
            [dateNull(),
                rAssetTable.AccountNum,
                rAssetTable.Name,
                '',
                0.0,
                0.0,
                0.0,
                '',
                footerAmount],
            0,
            strfmt("@GLS104014", rAssetTable.AccountNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    private void createHeader(RAssetId _accountNum = '')
    {
        regQuery.addHeaderRecord(profitTableRecId,
            conNull(),
            0,
            _accountNum ? strfmt("@GLS104112", _accountNum) : "@SYS28004");
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotal</Name>
				<Source><![CDATA[
    protected void createTotal()
    {
        regQuery.addFooterRecord(0,
            [dateNull(),
                '',
                '',
                '',
                0.0,
                0.0,
                0.0,
                '',
                totalAmount],
            0,
            "@SYS37297");
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableOperation</Name>
				<Source><![CDATA[
    protected AmountMST tableOperation()
    {
        AmountMST mstAmount;
        AmountMST baseAmount = 0;
        TransDate deductionDate;

        deprMethod = this.assetDeprMethod(dateFrom);
    
        //Disposal ->
        rTax25PeriodIterator.first(true);
    
        do
        {
            select firstonly ReportingDate from rAssetTrans
                order by ReportingDate desc
                where rAssetTrans.AccountNum == rAssetTable.AccountNum
                    && (!rTax25PeriodIterator.fromDateAccounting()
                        || rAssetTrans.AccountingDate >= rTax25PeriodIterator.fromDateAccounting())
                    && (!rTax25PeriodIterator.fromDateReporting()
                        || rAssetTrans.ReportingDate >= rTax25PeriodIterator.fromDateReporting())
                    && rAssetTrans.AccountingDate <= rTax25PeriodIterator.toDateAccounting()
                    && rAssetTrans.ReportingDate <= rTax25PeriodIterator.toDateReporting()
                    && rAssetTrans.AssetStandardId == assetStandardId
                    && (rAssetTrans.AssetTransType == RAssetTransType::Disposal
                        || rAssetTrans.AssetTransType == RAssetTransType::DisposalSale
                        || rAssetTrans.AssetTransType == RAssetTransType::DisposalScrap)
                    && !rAssetTrans.StornoRecId;
    
            if (deductionDate < rAssetTrans.ReportingDate)
            {
                deductionDate  = rAssetTrans.ReportingDate;
            }
        }
        while (rTax25PeriodIterator.next());
    
        rTax25PeriodIterator.first();
    
        do
        {
            while select rAssetTrans
                where rAssetTrans.AccountNum == rAssetTable.AccountNum
                    && rAssetTrans.AccountingDate >= rTax25PeriodIterator.fromDateAccounting()
                    && rAssetTrans.AccountingDate <= rTax25PeriodIterator.toDateAccounting()
                    && rAssetTrans.ReportingDate >= rTax25PeriodIterator.fromDateReporting()
                    && rAssetTrans.ReportingDate <= rTax25PeriodIterator.toDateReporting()
                    && rAssetTrans.AssetStandardId == assetStandardId
                    && (rAssetTrans.AssetTransType == RAssetTransType::Depreciation
                        || rAssetTrans.AssetTransType == RAssetTransType::DepreciationAdj)
                    && !rAssetTrans.StornoRecId
            {
                RAssetLifeTime lifeTime = this.lifeTime(rAssetTrans.ReportingDate);
                this.reduceFactor(rAssetTrans.ReportingDate);

                mstAmount += -rAssetTrans.AmountMST;
    
                if (!retHeader)
                {
                    this.createHeader();
                    this.createHeader(rAssetTable.AccountNum);
                    lastAssetId = rAssetTable.AccountNum;
                    retHeader = true;
                }
                else if (lastAssetId != rAssetTable.AccountNum)
                {
                    this.createHeader(rAssetTable.AccountNum);
                    lastAssetId = rAssetTable.AccountNum;
                }
    
                this.baseCostValue(rAssetTrans.ReportingDate, endmth(deductionDate) == endmth(rAssetTrans.ReportingDate) ? false : true);
                RAssetLifeTime monthsLine  = this.deprMonthsCalc(rAssetTrans.ReportingDate);
                
                if (rAssetSumTrans.acquisitionValueMST() + rAssetSumTrans.depreciationTotalMST() == 0)
                {
                    baseCostValue = baseAmount;
                    monthsLine    = lifeTime;
                }

                baseAmount = baseCostValue;
                RAssetDeprProfile deprProfile = rAssetStandards.deprProfile(dateFrom);
    
    
                regQuery.addBodyRecord(profitTableRecId,
                    [rAssetTrans.ReportingDate,
                        strfmt(rAssetTable.AccountNum),
                        rAssetTable.Name,
                        deprProfile.Name ? deprProfile.Name : deprProfile.DeprProfile,
                        reduceFactor,
                        origCostValue,
                        baseCostValue,
                        baseCostValue ? int2str(lifeTime - monthsLine) : int2str(lifeTime),
                        -rAssetTrans.AmountMST],
                    tableNum(RAssetTrans),
                    rAssetTrans.TransRecId,
                    strfmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name));
            }
        }
        while (rTax25PeriodIterator.next());
    
        //Return footerAmount
        return mstAmount;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>