<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfInventProductType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Adds functionality over the PmfProductType field found on InventTable.
/// </summary>
public abstract class PmfInventProductType extends InventType
{
    InventTable inventTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeDefaultOrderTypeKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the item production type is allowed to have the <c>Kanban</c> enumeration value of the <c>ReqPOType</c> enumeration type.
    /// </summary>
    /// <returns>
    /// A Boolean whether the item production type is allowed to have the <c>Kanban</c> enumeration value of the <c>ReqPOType</c> enumeration type.
    /// </returns>
    public boolean canBeDefaultOrderTypeKanban()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDefaultOrderTypePurchase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the item production type is allowed to have the <c>Purch</c> enumeration value of the <c>ReqPOType</c> enumeration type.
    /// </summary>
    /// <returns>
    /// A Boolean whether the item production type is allowed to have the <c>Purch</c> enumeration value of the <c>ReqPOType</c> enumeration type.
    /// </returns>
    public boolean canBeDefaultOrderTypePurchase()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBePlannedOrderTypeKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the item coverage type is allowed to have the <c>Kanban</c> enumeration value of the <c>ReqPOType</c> enumeration type.
    /// </summary>
    /// <returns>
    /// A Boolean whether the item coverage type is allowed to have the <c>Kanban</c> enumeration value of the <c>ReqPOType</c> enumeration type.
    /// </returns>
    public boolean canBePlannedOrderTypeKanban()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBePlannedOrderTypePurchase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the item coverage type is allowed to have the <c>Purch</c> enumeration value of the <c>ReqPOType</c> enumeration type.
    /// </summary>
    /// <returns>
    /// A Boolean whether the item coverage type is allowed to have the <c>Purch</c> enumeration value of the <c>ReqPOType</c> enumeration type.
    /// </returns>
    public boolean canBePlannedOrderTypePurchase()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBePlannedOrderTypeTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the item coverage type is allowed to have the <c>Transfer</c> enumeration value of the <c>ReqPOType</c> enumeration type.
    /// </summary>
    /// <returns>
    /// A Boolean whether the item coverage type is allowed to have the <c>Transfer</c> enumeration value of the <c>ReqPOType</c> enumeration type.
    /// </returns>
    public boolean canBePlannedOrderTypeTransfer()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the product type is allowed to have inventory transactions or not.
    /// </summary>
    /// <returns>
    /// A product type is allowed to have inventory transactions or not.
    /// </returns>
    public boolean canInventUpd()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
        protected InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        if (!prmisdefault(_inventTable))
        {
            inventTable = _inventTable;
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the PmfProductType associated with the current PmfInventProductType instance.
    /// </summary>
    /// <returns>
    /// A PmfProductType associated with the current PmfInventProductType instance.
    /// </returns>
    /// <exception cref="missingOverride" label="funcname()">
    /// Thrown when executed against an invalid PmfInventProductType instance.
    /// </exception>
    public PmfProductType pmfProductType()
    {
        throw error(Error::missingOverride(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventUpd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the product type is allowed to have inventory transactions or not. As well as an infolog if it is not.
    /// </summary>
    /// <returns>
    /// A product type is allowed to have inventory transactions or not.
    /// </returns>
    public boolean validateInventUpd()
    {
        boolean ret = true;

        if (ret && !this.canInventUpd())
        {
            ret = checkFailed(
                strfmt("@PRO2211", enum2str(this.pmfProductType())));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePmfProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the current InventTable record can be set to the current PmfInventProductType's PmfProductType value or not.
    /// </summary>
    /// <returns>
    /// An InventTable record can be set to the current PmfInventProductType's PmfProductType
    /// value or not.
    /// </returns>
    /// <remarks>
    /// Will typically return false if the current PmfProductType is MainItem and if the InventTable record already has inventory
    /// transactions against it.
    /// </remarks>
    public boolean validatePmfProductType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PmfInventProductType construct(PmfProductType _pmfProductType)
    {
        return PmfInventProductType::constructByPmfProductType(_pmfProductType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByPmfProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>PmfInventProductType</c> object depending on PMF product type.
    /// </summary>
    /// <param name = "_pmfProductType"> 
    /// Product type.
    /// </param>
    /// <returns>
    ///  A <c>PmfInventProductType</c> object.
    /// </returns>
    [Replaceable]
    protected static PmfInventProductType constructByPmfProductType(PmfProductType _pmfProductType)
    {
        PmfInventProductType pmfInventProductType;

        switch (_pmfProductType)
        {
            case PmfProductType::MainItem   :
                pmfInventProductType = PmfInventProductType_MainItem::construct();
                break;
            case PmfProductType::By_Product :
                pmfInventProductType = PmfInventProductType_ByProduct::construct();
                break;
            case PmfProductType::Co_Product :
                pmfInventProductType = PmfInventProductType_CoProduct::construct();
                break;
            case PmfProductType::None       :
                pmfInventProductType = PmfInventProductType_None::construct();
                break;
            case PmfProductType::BOM       :
                pmfInventProductType = PmfInventProductType_BOM::construct();
                break;
            case PmfProductType::Formula       :
                pmfInventProductType = PmfInventProductType_Formula::construct();
                break;
            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return pmfInventProductType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of PmfInventProductType corresponding to the passed InventTable record.
    /// </summary>
    /// <param name="_inventTable">
    /// InventTable record to wrap.
    /// </param>
    /// <returns>
    /// A new instance of PmfInventProductType.
    /// </returns>
    public static PmfInventProductType newInventTable(InventTable _inventTable)
    {
        PmfInventProductType pmfInventProductType;

        pmfInventProductType = PmfInventProductType::construct(_inventTable.PmfProductType);
        pmfInventProductType.parmInventTable(_inventTable);

        return pmfInventProductType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueCanInventUpd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string corresponding to all the values of PmfProductType that are allowed inventory transactions.
    /// </summary>
    /// <returns>
    /// A string corresponding to all the values of PmfProductType that are allowed inventory transactions.
    /// </returns>
    public static str valueCanInventUpd()
    {
        DictEnum                dictEnum;
        Counter                 i;
        PmfInventProductType    pmfInventProductType;
        str                     pmfProductTypeTxt;

        dictEnum = new DictEnum(enumnum(PmfProductType));
        for (i = 0; i < dictEnum.values(); i++)
        {
            if (!isConfigurationkeyEnabled(dictEnum.value2ConfigurationKey(i)))
            {
                continue;
            }

            pmfInventProductType = PmfInventProductType::construct(i);

            if (pmfInventProductType.canInventUpd())
            {
                pmfProductTypeTxt += pmfProductTypeTxt ? ',' : '';
                pmfProductTypeTxt += SysQuery::value(dictEnum.value2Name(i));
            }
        }

        return pmfProductTypeTxt
            ? pmfProductTypeTxt : SysQuery::valueEmptyString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>