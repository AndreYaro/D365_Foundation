<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetBalancesCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjBudgetBalancesCalculator
{

    ProjId                      projId;
    ProjBudgetBalanceInterval   projBudgetBalanceInterval;
    ProjBudgetLineType          projBudgetLineType;
    FromDate                    fromDate;
    ToDate                      toDate;
    ProjControlId               projControlId;
    boolean                     includeSubProjects;
    Map                         paramMap;
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjBudgetBalancesCalculator construct(
                    ProjId _projId,
                    boolean _includeSubProjects,
                    ProjBudgetBalanceInterval _ProjBudgetBalanceInterval,
                    ProjBudgetLineType _projBudgetLineType,
                    TransDate _fromDate,
                    TransDate _toDate,
                    ProjControlId _projControlId)
    {
        ProjBudgetBalancesCalculator ProjBudgetBalancesCalculator = new ProjBudgetBalancesCalculator();

        ProjBudgetBalancesCalculator.parmProjId(_projId);
        ProjBudgetBalancesCalculator.parmIncludeSubProjects(_includeSubProjects);
        ProjBudgetBalancesCalculator.parmProjBudgetBalanceInterval(_ProjBudgetBalanceInterval);
        ProjBudgetBalancesCalculator.parmProjBudgetLineType(_projBudgetLineType);
        ProjBudgetBalancesCalculator.parmFromDate(_fromDate);
        ProjBudgetBalancesCalculator.parmToDate(_toDate);
        ProjBudgetBalancesCalculator.parmProjControlId(_projControlId);

        return ProjBudgetBalancesCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjBudgetBalancesDetailed</Name>
				<Source><![CDATA[
    public tmpProjBudgetBalances getProjBudgetBalancesDetailed()
    {
        TmpProjBudgetBalances   tmpProjBudgetBalances;

        str mainSqlStatement = this.getSQLCalculateTotals();
        str budgetLineSqlStatement;

        if (projControlId)
        {
            budgetLineSqlStatement = this.sqlBudgetLineWithCostControl();
        }
        else
        {
            budgetLineSqlStatement = this.sqlBudgetLine();
        }

        str budgetAllocationSqlStatement;
        
        switch (projBudgetBalanceInterval)
        {
            case ProjBudgetBalanceInterval::None:
                budgetAllocationSqlStatement = this.getSQLAllocationBudgetNoFilter();
                break;
            
            case ProjBudgetBalanceInterval::ProjectToDate:
                budgetAllocationSqlStatement = this.sqlAllocationLinesProjectToDate();
                break;
            
            case ProjBudgetBalanceInterval::CurrentYear:
                budgetAllocationSqlStatement = this.sqlAllocationLinesCurrentYear();
                break;

            case ProjBudgetBalanceInterval::CustomRange:
                budgetAllocationSqlStatement = this.sqlAllocationLinesCustomRange();
                break;

            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        mainSqlStatement = strFmt(mainSqlStatement, getCurrentPartitionRecId(), curExt(), budgetLineSqlStatement, budgetAllocationSqlStatement);

        try
        {
            this.runSQLCalculateBudgetTotals(mainSqlStatement, tmpProjBudgetBalances);
        }
        catch
        {
            // SQL specific error be will thrown if there's any
            tmpProjBudgetBalances = null;
        }

        return tmpProjBudgetBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetLineQuery</Name>
				<Source><![CDATA[
    protected Query getBudgetLineQuery()
    {
        Query                   query;
        QueryBuildDataSource    dsProjBudgetLine;
        QueryBuildDataSource    dsProjBudget;
        QueryBuildDataSource    dsProjControlCategory;

        ProjBudgetLine          projBudgetLine;
        ProjBudget              projBudget;

        Query = new Query();

        dsProjBudgetLine = Query.AddDataSource(tablenum(ProjBudgetLine));
        dsProjBudgetLine.addSortField(fieldnum(ProjBudgetLine, CategoryId));
        if (includeSubProjects)
        {
            dsProjBudgetLine.addRange(fieldnum(projBudgetLine, ProjId)).value(SysQuery::valueLikeAfter(projId));
        }
        else
        {
            dsProjBudgetLine.addRange(fieldnum(projBudgetLine, ProjId)).value(SysQuery::value(projId));
        }
        dsProjBudgetLine.addRange(fieldnum(ProjBudgetLine, ProjBudgetLineType)).value(SysQuery::value(projBudgetLineType));

        if (projControlId)
        {
            dsProjControlCategory = dsProjBudgetLine.addDataSource(tablenum(ProjControlCategory));
            dsProjControlCategory.addLink(fieldnum(ProjBudgetLine, CategoryId), fieldnum(ProjControlCategory, CategoryId));
            dsProjControlCategory.joinMode(JoinMode::InnerJoin);
            dsProjControlCategory.fetchMode(QueryFetchMode::One2One);
            dsProjControlCategory.addRange(fieldnum(ProjControlCategory, ControlId)).value(SysQuery::value(projControlId));
        }

        dsProjBudgetLine.fetchMode(QueryFetchMode::One2One);

        dsProjBudget = dsProjBudgetLine.AddDataSource(tablenum(ProjBudget));
        dsProjBudget.relations(true);
        dsProjBudget.joinMode(JoinMode::InnerJoin);
        dsProjBudget.fetchMode(QueryFetchMode::One2One);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAllocationLinesNoFilter</Name>
				<Source><![CDATA[
    protected ProjBudgetAllocationLine selectAllocationLinesNoFilter(ProjBudgetLine _projBudgetLine)
    {
        ProjBudgetAllocationLine projBudgetAllocationLine;

        //Select all allocation lines associated with the current budget line.
        select OriginalAllocationAmount, CommittedRevisions,  UncommittedRevisions, TotalAllocationAmount, CarryForwardAmount, RecId
            from projBudgetAllocationLine
            where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId;

        return projBudgetAllocationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAllocationLinesProjectToDate</Name>
				<Source><![CDATA[
    protected ProjBudgetAllocationLine selectAllocationLinesProjectToDate(ProjBudgetLine _projBudgetLine)
    {
        ProjBudgetAllocationLine projBudgetAllocationLine;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalCalendarYear   fiscalCalendarYear;

        //Select allocation lines with:
        // 1) a fiscal calendar that intersects with _fromDate to _toDate
        // 2) and is associated with the current budget line.
        switch (_projBudgetLine.ProjAllocationMethod)
        {
            case ProjAllocationMethod::Quarter:
                select OriginalAllocationAmount, CommittedRevisions,  UncommittedRevisions, TotalAllocationAmount, CarryForwardAmount, RecId
                    from projBudgetAllocationLine
                        where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId
                    exists join RecId from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.FiscalCalendarYear == projBudgetAllocationLine.FiscalCalendarYear &&
                            fiscalCalendarPeriod.Quarter == projBudgetAllocationLine.Quarter &&
                            fiscalCalendarPeriod.StartDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                break;

            case ProjAllocationMethod::Periods:
                select OriginalAllocationAmount, CommittedRevisions,  UncommittedRevisions, TotalAllocationAmount, CarryForwardAmount, RecId
                    from projBudgetAllocationLine
                        where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId
                    exists join RecId from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.RecId == projBudgetAllocationLine.FiscalCalendarPeriod &&
                            fiscalCalendarPeriod.StartDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                break;
            case ProjAllocationMethod::Yearly:
                select OriginalAllocationAmount, CommittedRevisions,  UncommittedRevisions, TotalAllocationAmount, CarryForwardAmount, RecId
                    from projBudgetAllocationLine
                        where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId
                    exists join RecId from fiscalCalendarYear
                        where fiscalCalendarYear.RecId == projBudgetAllocationLine.FiscalCalendarYear &&
                            fiscalCalendarYear.StartDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                break;
        }

        return projBudgetAllocationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAllocationLinesCurrentYear</Name>
				<Source><![CDATA[
    protected ProjBudgetAllocationLine selectAllocationLinesCurrentYear(ProjBudgetLine _projBudgetLine)
    {
        ProjBudgetAllocationLine projBudgetAllocationLine;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalCalendarYear   fiscalCalendarYear;

        //Select allocation lines with :
        // 1) a fiscal calendar year that includes today
        // 2) and is associated with the current budget line
        switch (_projBudgetLine.ProjAllocationMethod)
        {
            case ProjAllocationMethod::Quarter:
                select OriginalAllocationAmount, CommittedRevisions,  UncommittedRevisions, TotalAllocationAmount, CarryForwardAmount, RecId
                    from projBudgetAllocationLine
                        where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId
                    exists join RecId from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.FiscalCalendarYear == projBudgetAllocationLine.FiscalCalendarYear &&
                            fiscalCalendarPeriod.Quarter == projBudgetAllocationLine.Quarter
                        join RecId from fiscalCalendarYear
                            where fiscalCalendarYear.RecId == fiscalCalendarPeriod.FiscalCalendarYear &&
                                fiscalCalendarYear.StartDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) &&
                                fiscalCalendarYear.EndDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                break;

            case ProjAllocationMethod::Periods:
                select OriginalAllocationAmount, CommittedRevisions,  UncommittedRevisions, TotalAllocationAmount, CarryForwardAmount, RecId
                    from projBudgetAllocationLine
                        where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId
                    exists join RecId from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.RecId == projBudgetAllocationLine.FiscalCalendarPeriod
                        join RecId from fiscalCalendarYear
                            where fiscalCalendarYear.RecId == fiscalCalendarPeriod.FiscalCalendarYear &&
                                fiscalCalendarYear.StartDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) &&
                                fiscalCalendarYear.EndDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                break;

            case ProjAllocationMethod::Yearly:
                select OriginalAllocationAmount, CommittedRevisions,  UncommittedRevisions, TotalAllocationAmount, CarryForwardAmount, RecId
                    from projBudgetAllocationLine
                        where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId
                    join RecId from fiscalCalendarYear
                        where fiscalCalendarYear.RecId == projBudgetAllocationLine.FiscalCalendarYear &&
                            fiscalCalendarYear.StartDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) &&
                            fiscalCalendarYear.EndDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                break;
        }
        return projBudgetAllocationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAllocationLinesCustomRange</Name>
				<Source><![CDATA[
    protected ProjBudgetAllocationLine selectAllocationLinesCustomRange(ProjBudgetLine _projBudgetLine)
    {
        ProjBudgetAllocationLine projBudgetAllocationLine;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalCalendarYear   fiscalCalendarYear;

        //Select allocation lines with :
        // 1) a fiscal calendar that intersects with _fromDate to _toDate
        // 2) and is associated with the current budget line
        switch (_projBudgetLine.ProjAllocationMethod)
        {
            case ProjAllocationMethod::Quarter:
                 select OriginalAllocationAmount, CommittedRevisions,  UncommittedRevisions, TotalAllocationAmount, CarryForwardAmount, RecId
                    from projBudgetAllocationLine
                        where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId
                    exists join RecId from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.FiscalCalendarYear == projBudgetAllocationLine.FiscalCalendarYear &&
                            fiscalCalendarPeriod.Quarter == projBudgetAllocationLine.Quarter &&
                            fiscalCalendarPeriod.StartDate <= toDate &&
                            fiscalCalendarPeriod.EndDate >= fromDate;
                break;

            case ProjAllocationMethod::Periods:
                 select OriginalAllocationAmount, CommittedRevisions,  UncommittedRevisions, TotalAllocationAmount, CarryForwardAmount, RecId
                    from projBudgetAllocationLine
                        where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId
                    exists join RecId from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.RecId == projBudgetAllocationLine.FiscalCalendarPeriod &&
                            fiscalCalendarPeriod.StartDate <= toDate &&
                            fiscalCalendarPeriod.EndDate >= fromDate;
                break;

            case ProjAllocationMethod::Yearly:
                 select OriginalAllocationAmount, CommittedRevisions,  UncommittedRevisions, TotalAllocationAmount, CarryForwardAmount, RecId
                    from projBudgetAllocationLine
                        where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId
                    exists join RecId from fiscalCalendarYear
                        where fiscalCalendarYear.RecId == projBudgetAllocationLine.FiscalCalendarYear &&
                            fiscalCalendarYear.StartDate <= toDate &&
                            fiscalCalendarYear.EndDate >= fromDate;
                break;
        }
        return projBudgetAllocationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjBudgetLine</Name>
				<Source><![CDATA[
    protected void processProjBudgetLine(
        TmpProjBudgetBalances _tmpProjBudgetBalances,
        ProjBudget _projBudget,
        ProjBudgetLine _projBudgetLine)
    {
        ProjBudgetAllocationLine    projBudgetAllocationLine;

        switch (projBudgetBalanceInterval)
        {
            case ProjBudgetBalanceInterval::None:
                projBudgetAllocationLine = this.selectAllocationLinesNoFilter(_projBudgetLine);
                break;

            case ProjBudgetBalanceInterval::ProjectToDate:
                projBudgetAllocationLine = this.selectAllocationLinesProjectToDate(_projBudgetLine);
                break;

            case ProjBudgetBalanceInterval::CurrentYear:
                projBudgetAllocationLine = this.selectAllocationLinesCurrentYear(_projBudgetLine);
                break;

            case ProjBudgetBalanceInterval::CustomRange:
                projBudgetAllocationLine = this.selectAllocationLinesCustomRange(_projBudgetLine);
                break;

            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        while (projBudgetAllocationLine)
        {
            this.processProjBudgetAllocationLine(
                _tmpProjBudgetBalances,
                _projBudget,
                projBudgetAllocationLine);

            next projBudgetAllocationLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjBudgetAllocationLine</Name>
				<Source><![CDATA[
    protected void processProjBudgetAllocationLine(
        TmpProjBudgetBalances _tmpProjBudgetBalances,
        ProjBudget _projBudget,
        ProjBudgetAllocationLine _projBudgetAllocationLine)
    {
        //updates current budget balance line
        ProjBudgetReductionHistory      projBudgetReductionHistory;
        CostControlTransCommittedCost   costControlTransCommittedCost;
        ProjPostTransView               projPostTransView;
        AmountCur                       committedRevisions;

        committedRevisions = (_projBudget.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Approved ? _projBudgetAllocationLine.OriginalAllocationAmount : 0);
        _tmpProjBudgetBalances.OrigBudget += _projBudgetAllocationLine.OriginalAllocationAmount;
        _tmpProjBudgetBalances.AmendBudget += _projBudgetAllocationLine.CommittedRevisions;
        _tmpProjBudgetBalances.UnapprovedRevisions += _projBudgetAllocationLine.UncommittedRevisions;
        _tmpProjBudgetBalances.RevisedBudget += (committedRevisions + _projBudgetAllocationLine.CommittedRevisions);
        _tmpProjBudgetBalances.CarryForwardBudget += (_projBudgetAllocationLine.TotalAllocationAmount - committedRevisions - _projBudgetAllocationLine.CommittedRevisions);
        _tmpProjBudgetBalances.RemainingBudget += _projBudgetAllocationLine.TotalAllocationAmount;

        switch (projBudgetLineType)
        {
            case ProjBudgetLineType::Revenue:
                select sum(SalesAmountReduced) from projBudgetReductionHistory
                    where projBudgetReductionHistory.ProjBudgetAllocationLineIdSales == _projBudgetAllocationLine.RecId
                        exists join costControlTransCommittedCost
                            where costControlTransCommittedCost.ProjTransId == projBudgetReductionHistory.ProjTransId &&
                                costControlTransCommittedCost.Open == NoYes::Yes;
                _tmpProjBudgetBalances.CommittedCosts += projBudgetReductionHistory.SalesAmountReduced;
                _tmpProjBudgetBalances.RemainingBudget -= projBudgetReductionHistory.SalesAmountReduced;

                select sum(SalesAmountReduced) from projBudgetReductionHistory
                    where projBudgetReductionHistory.ProjBudgetAllocationLineIdSales == _projBudgetAllocationLine.RecId
                        exists join projPostTransView
                            where projPostTransView.TransId == projBudgetReductionHistory.ProjTransId;
                _tmpProjBudgetBalances.ActualRevAndCosts += projBudgetReductionHistory.SalesAmountReduced;
                _tmpProjBudgetBalances.RemainingBudget -= projBudgetReductionHistory.SalesAmountReduced;
                break;

            case ProjBudgetLineType::Cost:
                select sum(CostAmountReduced) from projBudgetReductionHistory
                    where projBudgetReductionHistory.ProjBudgetAllocationLineIdCost == _projBudgetAllocationLine.RecId
                        exists join costControlTransCommittedCost
                            where costControlTransCommittedCost.ProjTransId == projBudgetReductionHistory.ProjTransId &&
                                costControlTransCommittedCost.Open == NoYes::Yes;
                _tmpProjBudgetBalances.CommittedCosts += projBudgetReductionHistory.CostAmountReduced;
                _tmpProjBudgetBalances.RemainingBudget -= projBudgetReductionHistory.CostAmountReduced;

                select sum(CostAmountReduced) from projBudgetReductionHistory
                    where projBudgetReductionHistory.ProjBudgetAllocationLineIdCost == _projBudgetAllocationLine.RecId
                        exists join projPostTransView
                            where projPostTransView.TransId == projBudgetReductionHistory.ProjTransId;
                _tmpProjBudgetBalances.ActualRevAndCosts += projBudgetReductionHistory.CostAmountReduced;
                _tmpProjBudgetBalances.RemainingBudget -= projBudgetReductionHistory.CostAmountReduced;
                break;

            default:
                throw error(strFmt("@SYS22828", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    // Parm Methods

    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;
        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeSubProjects</Name>
				<Source><![CDATA[
    public boolean parmIncludeSubProjects(boolean _includeSubProjects = includeSubProjects)
    {
        includeSubProjects = _includeSubProjects;
        return includeSubProjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBudgetBalanceInterval</Name>
				<Source><![CDATA[
    public ProjBudgetBalanceInterval parmProjBudgetBalanceInterval(ProjBudgetBalanceInterval _ProjBudgetBalanceInterval = ProjBudgetBalanceInterval)
    {
        ProjBudgetBalanceInterval = _ProjBudgetBalanceInterval;
        return ProjBudgetBalanceInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBudgetLineType</Name>
				<Source><![CDATA[
    public ProjBudgetLineType parmProjBudgetLineType(ProjBudgetLineType _projBudgetLineType = projBudgetLineType)
    {
        projBudgetLineType = _projBudgetLineType;
        return projBudgetLineType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjControlId</Name>
				<Source><![CDATA[
    public ProjControlId parmProjControlId(ProjControlId _projControlId = projControlId)
    {
        projControlId = _projControlId;
        return projControlId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLCalculateTotals</Name>
				<Source><![CDATA[
    private str getSQLCalculateTotals()
    {
        str sqlStatement;

        sqlStatement = @"
                SET NOCOUNT ON

                DECLARE @WORKFLOWSTATUS int

                DECLARE @ORIGBUDGET numeric(32,6)
                DECLARE @AMENDBUDGET numeric(32,6)
                DECLARE @UNAPPROVEDREVISIONS numeric(32,6)
                DECLARE @REMAININGBUDGET numeric(32,6)
                DECLARE @APPROVEDREVISION numeric(32,6)
                DECLARE @REVISEDBUDGET numeric(32,6)
                DECLARE @CARRYFORWARDBUDGET numeric(32,6)
                DECLARE @COMMITMENTSALESREDUCED numeric(32,6)
                DECLARE @COMMITMENTCOSTREDUCED numeric(32,6)
                DECLARE @ACTUALSALESREDUCED numeric(32,6)
                DECLARE @ACTUALCOSTREDUCED numeric(32,6)

                DECLARE @LINERECID bigint
                DECLARE @CATEGORYID nvarchar(60)
                DECLARE @CATEGORYGROUPID nvarchar(20)
                DECLARE @PROJTRANSTYPE int
                DECLARE @PROJALLOCATIONMETHOD int
                DECLARE @COSTGROUPID nvarchar(20)
                DECLARE @PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT bit = 'true'
                
                IF OBJECT_ID('tempdb..#BUDGETCALCTEMP') IS NOT NULL DROP TABLE #BUDGETCALCTEMP

                CREATE TABLE #BUDGETCALCTEMP (CATEGORYID nvarchar(60),
                                              CATEGORYGROUPID nvarchar(20),
                                              COSTGROUPID  nvarchar(20),
                                              PROJTRANSTYPE int,
                                              ORIGBUDGET numeric(32,6),
                                              AMENDBUDGET numeric(32,6),
                                              UNAPPROVEDREVISIONS numeric(32,6),
                                              REMAININGBUDGET numeric(32,6),
                                              APPROVEDREVISION numeric(32,6),
                                              REVISEDBUDGET numeric(32,6),
                                              CARRYFORWARDBUDGET numeric(32,6),
                                              COMMITMENTSALESREDUCED numeric(32,6),
                                              ACTUALSALESREDUCED numeric(32,6),
                                              COMMITMENTCOSTREDUCED numeric(32,6),
                                              ACTUALCOSTREDUCED numeric(32,6),
                                              BUDGETLINE bigint);

                
                IF OBJECT_ID('tempdb..#BUDGETLINE') IS NOT NULL DROP TABLE #BUDGETLINE

                ;%3

                WHILE (SELECT COUNT(*) FROM #BUDGETLINE) > 0
                BEGIN
                    SELECT TOP 1 @LINERECID = RECID,
                                 @CATEGORYID = CATEGORYID,
                                 @WORKFLOWSTATUS = BUDGETWORKFLOWSTATUS,
                                 @PROJALLOCATIONMETHOD = PROJALLOCATIONMETHOD,
                                 @PROJTRANSTYPE = PROJTRANSTYPE,
                                 @COSTGROUPID = COSTGROUPID
                    FROM #BUDGETLINE

                    SELECT TOP 1 @CATEGORYGROUPID = CATEGORYGROUPID FROM PROJCATEGORY WHERE CATEGORYID = @CATEGORYID AND PARTITION = %1 AND DATAAREAID = '%2'

                    INSERT INTO #BUDGETCALCTEMP (BUDGETLINE, CATEGORYID, CATEGORYGROUPID, PROJTRANSTYPE, COSTGROUPID) VALUES(@LINERECID, @CATEGORYID, @CATEGORYGROUPID, @PROJTRANSTYPE, @COSTGROUPID)

                    %4
                   
                    UPDATE #BUDGETCALCTEMP
                        SET ORIGBUDGET = ISNULL(@ORIGBUDGET, 0),
                            AMENDBUDGET = ISNULL(@AMENDBUDGET, 0),
                            UNAPPROVEDREVISIONS = ISNULL(@UNAPPROVEDREVISIONS, 0),
                            REMAININGBUDGET = ISNULL(@REMAININGBUDGET, 0),
                            APPROVEDREVISION = ISNULL(@APPROVEDREVISION, 0),
                            REVISEDBUDGET = ISNULL(@REVISEDBUDGET, 0),
                            CARRYFORWARDBUDGET = ISNULL(@CARRYFORWARDBUDGET, 0),
                            COMMITMENTSALESREDUCED = ISNULL(@COMMITMENTSALESREDUCED, 0),
                            COMMITMENTCOSTREDUCED = ISNULL(@COMMITMENTCOSTREDUCED, 0),
                            ACTUALSALESREDUCED = ISNULL(@ACTUALSALESREDUCED, 0),
                            ACTUALCOSTREDUCED = ISNULL(@ACTUALCOSTREDUCED, 0)
                        FROM #BUDGETCALCTEMP
                            WHERE BUDGETLINE = @LINERECID

                    DELETE #BUDGETLINE WHERE RECID = @LINERECID
                END

                SELECT * FROM #BUDGETCALCTEMP
        ";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlBudgetLineWithCostControl</Name>
				<Source><![CDATA[
    private str sqlBudgetLineWithCostControl()
    {
        str projIdExpression = this.getProjectList();

        str sqlStatement;

        sqlStatement = @"%3
                SELECT LINE.CATEGORYID,
                       LINE.PROJBUDGET,
                       LINE.PROJBUDGETLINETYPE,
                       LINE.PROJID,
                       LINE.PROJTRANSTYPE,
                       LINE.PROJALLOCATIONMETHOD,
                       LINE.RECID,
                       CONTROL.COSTGROUPID,
                       HEADER.BUDGETWORKFLOWSTATUS
                    INTO #BUDGETLINE
                    FROM PROJBUDGETLINE LINE CROSS
                    JOIN PROJCONTROLCATEGORY CONTROL CROSS
                    JOIN PROJBUDGET HEADER
                    JOIN PROJECTLIST ON PROJECTLIST.PROJID = LINE.PROJID
                WHERE (((LINE.PARTITION=%1)
                    AND (LINE.DATAAREAID='%2'))
                    AND (LINE.PROJBUDGETLINETYPE=%4))
                    AND (((CONTROL.PARTITION=%1)
                    AND (CONTROL.DATAAREAID='%2'))
                    AND ((CONTROL.CONTROLID='%5')
                    AND (LINE.CATEGORYID=CONTROL.CATEGORYID)))
                    AND (((HEADER.PARTITION=%1)
                    AND (HEADER.DATAAREAID='%2'))
                    AND (LINE.PROJBUDGET=HEADER.RECID))
                    ORDER BY LINE.CATEGORYID;
        ";

        // 1 partition 2 dataareaid 3 projid expression 4 budgetlinetype 5 controlid
        sqlStatement = strFmt(sqlStatement, getCurrentPartitionRecId(), curExt(), projIdExpression, enum2int(projBudgetLineType), projControlId);

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlBudgetLine</Name>
				<Source><![CDATA[
    private str sqlBudgetLine()
    {
        str projIdExpression = this.getProjectList();

        str sqlStatement;

        sqlStatement = @"%3
                SELECT LINE.CATEGORYID,
                       LINE.PROJBUDGET,
                       LINE.PROJBUDGETLINETYPE,
                       LINE.PROJID,
                       LINE.PROJTRANSTYPE,
                       LINE.PROJALLOCATIONMETHOD,
                       LINE.RECID,
                       '' AS COSTGROUPID,
                       HEADER.BUDGETWORKFLOWSTATUS
                    INTO #BUDGETLINE
                    FROM PROJBUDGETLINE LINE CROSS
                    JOIN PROJBUDGET HEADER
                    JOIN PROJECTLIST ON PROJECTLIST.PROJID = LINE.PROJID
                    WHERE (((LINE.PARTITION=%1)
                        AND (LINE.DATAAREAID='%2'))
                        AND ((LINE.PROJBUDGETLINETYPE=%4)))
                        AND (((HEADER.PARTITION=%1)
                        AND (HEADER.DATAAREAID='%2'))
                        AND (LINE.PROJBUDGET=HEADER.RECID))
                        ORDER BY LINE.CATEGORYID;
        ";
		 
        // 1 partition 2 dataareaid 3 projid expression 4 budgetlinetype
        sqlStatement = strFmt(sqlStatement, getCurrentPartitionRecId(), curExt(), projIdExpression, enum2int(projBudgetLineType));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLAllocationBudgetNoFilter</Name>
				<Source><![CDATA[
    private str getSQLAllocationBudgetNoFilter()
    {
        str projIdExpression = this.getProjectList();

        str sqlStatement;

        sqlStatement = @"SELECT @ORIGBUDGET = SUM(ORIGINALALLOCATIONAMOUNT),
                                    @AMENDBUDGET = SUM(COMMITTEDREVISIONS),
                                    @UNAPPROVEDREVISIONS = SUM(UNCOMMITTEDREVISIONS),
                                    @REMAININGBUDGET = SUM(TOTALALLOCATIONAMOUNT),
                                    @APPROVEDREVISION = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END),
                                    @REVISEDBUDGET = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) + SUM(COMMITTEDREVISIONS),
                                    @CARRYFORWARDBUDGET = SUM(TOTALALLOCATIONAMOUNT) - SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) - SUM(COMMITTEDREVISIONS)
                          FROM PROJBUDGETALLOCATIONLINE WHERE PROJBUDGETLINE = @LINERECID AND PARTITION = %1 AND DATAAREAID = '%2';

                        %3
                        SELECT @ACTUALSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                        FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                        JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                        WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                              REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                              BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                        EXISTS (SELECT 'x' FROM PROJECTLIST
                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                        EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                    WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                            (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%5' AND
                                            PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                            PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %4)) AND
                                            PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                            PROJPOSTTRANSVIEW.DATAAREAID = '%2');

                        %3
                        SELECT @ACTUALCOSTREDUCED = SUM(COSTAMOUNTREDUCED)
                        FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                        JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                        WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                              REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                              BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                        EXISTS (SELECT 'x' FROM PROJECTLIST 
                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                        EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%5' AND
                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %4)) AND
                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2');

                        %3
                        SELECT @COMMITMENTSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                        FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                        JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                        WHERE BUDGETALLOC.PROJBUDGETLINE = @LINERECID AND
                              REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                              BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                        EXISTS (SELECT 'x' FROM PROJECTLIST
                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                        EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                    WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                          COSTCONTROL.OPEN_ = 1 AND
                                          COSTCONTROL.PARTITION = %1 AND
                                          COSTCONTROL.DATAAREAID = '%2');

                        %3
                        SELECT @COMMITMENTCOSTREDUCED = SUM(COSTAMOUNTREDUCED)
                        FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                        JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                        WHERE BUDGETALLOC.PROJBUDGETLINE = @LINERECID AND
                              REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                              BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                        EXISTS (SELECT 'x' FROM PROJECTLIST
                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                        EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                    WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                          COSTCONTROL.OPEN_ = 1 AND
                                          COSTCONTROL.PARTITION = %1 AND
                                          COSTCONTROL.DATAAREAID = '%2');
                        ";

        sqlStatement = strFmt(sqlStatement,  getCurrentPartitionRecId(), curExt(), projIdExpression, enum2int(ProjOrigin::ProductionFinished), ProjProductionConsumedBudgetCheckFlight::instance().isEnabled());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlAllocationLinesProjectToDate</Name>
				<Source><![CDATA[
    private str sqlAllocationLinesProjectToDate()
    {
        str projIdExpression = this.getProjectList();

        str sqlStatement;

        sqlStatement = @"
                IF (@PROJALLOCATIONMETHOD = 0) -- YEARLY
                        BEGIN
                            SELECT @ORIGBUDGET = SUM(ORIGINALALLOCATIONAMOUNT),
                                        @AMENDBUDGET = SUM(COMMITTEDREVISIONS),
                                        @UNAPPROVEDREVISIONS = SUM(UNCOMMITTEDREVISIONS),
                                        @REMAININGBUDGET = SUM(TOTALALLOCATIONAMOUNT),
                                        @APPROVEDREVISION = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END),
                                        @REVISEDBUDGET = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) + SUM(COMMITTEDREVISIONS),
                                        @CARRYFORWARDBUDGET = SUM(TOTALALLOCATIONAMOUNT) - SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) - SUM(COMMITTEDREVISIONS)
                                FROM PROJBUDGETALLOCATIONLINE WHERE PROJBUDGETLINE = @LINERECID AND PARTITION = %1 AND DATAAREAID = '%2'
                            AND EXISTS (SELECT 'x' from FISCALCALENDARYEAR
                                WHERE FISCALCALENDARYEAR.RECID = PROJBUDGETALLOCATIONLINE.FISCALCALENDARYEAR AND
                                        FISCALCALENDARYEAR.PARTITION = %1 AND
                                        FISCALCALENDARYEAR.STARTDATE <= '%3');

                             %4
                             SELECT @ACTUALSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                    FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                    JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                    CROSS JOIN FISCALCALENDARYEAR
                                    WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                            REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                            BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                            FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                            FISCALCALENDARYEAR.PARTITION = %1 AND
                                            FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                    EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                    EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%6' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %5)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE <= '%3');

                            %4
                            SELECT @ACTUALCOSTREDUCED = SUM(COSTAMOUNTREDUCED)
                                    FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                    JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                    CROSS JOIN FISCALCALENDARYEAR
                                    WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                            REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                            BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                            FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                            FISCALCALENDARYEAR.PARTITION = %1 AND
                                            FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                    EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                    EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%6' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %5)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE <= '%3');

                            %4
                            SELECT  @COMMITMENTSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                    FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                    JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                    CROSS JOIN FISCALCALENDARYEAR
                                    WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                            REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                            BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                            FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                            FISCALCALENDARYEAR.PARTITION = %1 AND
                                            FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                    EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                    EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                            WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                    COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                    COSTCONTROL.DATAAREAID = '%2'AND
                                                    COSTCONTROL.COMMITTEDDATE <= '%3');
                            %4
                            SELECT  @COMMITMENTCOSTREDUCED  = SUM(COSTAMOUNTREDUCED)
                                    FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                    JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                    CROSS JOIN FISCALCALENDARYEAR
                                    WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                            REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                            BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                            FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                            FISCALCALENDARYEAR.PARTITION = %1 AND
                                            FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                     EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                     EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                            WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                    COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                    COSTCONTROL.DATAAREAID = '%2'AND
                                                    COSTCONTROL.COMMITTEDDATE <= '%3');
                        END
                        ELSE
                        BEGIN
                            IF (@PROJALLOCATIONMETHOD = 1) -- QUARTER
                                BEGIN
                                    SELECT @ORIGBUDGET = SUM(ORIGINALALLOCATIONAMOUNT),
                                                @AMENDBUDGET = SUM(COMMITTEDREVISIONS),
                                                @UNAPPROVEDREVISIONS = SUM(UNCOMMITTEDREVISIONS),
                                                @REMAININGBUDGET = SUM(TOTALALLOCATIONAMOUNT),
                                                @APPROVEDREVISION = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END),
                                                @REVISEDBUDGET = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) + SUM(COMMITTEDREVISIONS),
                                                @CARRYFORWARDBUDGET = SUM(TOTALALLOCATIONAMOUNT) - SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) - SUM(COMMITTEDREVISIONS)
                                        FROM PROJBUDGETALLOCATIONLINE WHERE PROJBUDGETLINE = @LINERECID AND PARTITION = %1 AND DATAAREAID = '%2'
                                    AND EXISTS (SELECT 'x' from FISCALCALENDARPERIOD
                                                        WHERE FISCALCALENDARPERIOD.FISCALCALENDARYEAR = PROJBUDGETALLOCATIONLINE.FISCALCALENDARYEAR AND
                                                                FISCALCALENDARPERIOD.QUARTER = PROJBUDGETALLOCATIONLINE.QUARTER AND
                                                                FISCALCALENDARPERIOD.PARTITION = %1 AND
                                                                FISCALCALENDARPERIOD.STARTDATE <= '%3');                                    
                                END
                            ELSE	-- PERIODS
                                BEGIN
                                    SELECT @ORIGBUDGET = SUM(ORIGINALALLOCATIONAMOUNT),
                                                @AMENDBUDGET = SUM(COMMITTEDREVISIONS),
                                                @UNAPPROVEDREVISIONS = SUM(UNCOMMITTEDREVISIONS),
                                                @REMAININGBUDGET = SUM(TOTALALLOCATIONAMOUNT),
                                                @APPROVEDREVISION = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END),
                                                @REVISEDBUDGET = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) + SUM(COMMITTEDREVISIONS),
                                                @CARRYFORWARDBUDGET = SUM(TOTALALLOCATIONAMOUNT) - SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) - SUM(COMMITTEDREVISIONS)
                                        FROM PROJBUDGETALLOCATIONLINE WHERE PROJBUDGETLINE = @LINERECID AND PARTITION = %1 AND DATAAREAID = '%2'
                                    AND EXISTS (SELECT 'x' from FISCALCALENDARPERIOD
                                                                WHERE FISCALCALENDARPERIOD.RECID = PROJBUDGETALLOCATIONLINE.FISCALCALENDARPERIOD AND
                                                                        FISCALCALENDARPERIOD.PARTITION = %1 AND
                                                                        FISCALCALENDARPERIOD.STARTDATE <= '%3');

                                    %4
                                    SELECT @ACTUALSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                    FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                    JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                    CROSS JOIN FISCALCALENDARPERIOD
                                    WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                            REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                            BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                            FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                            FISCALCALENDARPERIOD.PARTITION = %1 AND
                                            FISCALCALENDARPERIOD.STARTDATE <= '%3' AND
                                    EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                    EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%6' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %5)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE <= '%3');

                                    %4
                                    SELECT @ACTUALCOSTREDUCED = SUM(COSTAMOUNTREDUCED)
                                    FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                    JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                    CROSS JOIN FISCALCALENDARPERIOD
                                    WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                            REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                            BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                            FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                            FISCALCALENDARPERIOD.PARTITION = %1 AND
                                            FISCALCALENDARPERIOD.STARTDATE <= '%3' AND
                                    EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                    EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%6' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %5)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE <= '%3');

                                    %4
                                    SELECT  @COMMITMENTSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                    FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                    JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                    CROSS JOIN FISCALCALENDARPERIOD
                                    WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                            REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                            BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                            FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                            FISCALCALENDARPERIOD.PARTITION = %1 AND
                                            FISCALCALENDARPERIOD.STARTDATE <= '%3' AND
                                    EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                    EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                                WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                      COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                      COSTCONTROL.DATAAREAID = '%2' AND 
                                                       COSTCONTROL.COMMITTEDDATE <= '%3');

                                    %4
                                    SELECT @COMMITMENTCOSTREDUCED  = SUM(COSTAMOUNTREDUCED)
                                    FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                    JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                    CROSS JOIN FISCALCALENDARPERIOD
                                    WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                            REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                            BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                            FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                            FISCALCALENDARPERIOD.PARTITION = %1 AND
                                            FISCALCALENDARPERIOD.STARTDATE <= '%3' AND
                                    EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                    EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                                WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                      COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                      COSTCONTROL.DATAAREAID = '%2'AND
                                                      COSTCONTROL.COMMITTEDDATE <= '%3');

                                END
                        END

                        ";

        
        TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        sqlStatement  = strFmt(sqlStatement, getCurrentPartitionRecId(), curExt(), DateTimeUtil::toStr(transDate), projIdExpression, enum2int(ProjOrigin::ProductionFinished), ProjProductionConsumedBudgetCheckFlight::instance().isEnabled());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlAllocationLinesCurrentYear</Name>
				<Source><![CDATA[
    private str sqlAllocationLinesCurrentYear()
    {
        str projIdExpression = this.getProjectList();

        str sqlStatement;

        sqlStatement = @"
                IF (@PROJALLOCATIONMETHOD = 0) -- YEARLY
                        BEGIN
                            SELECT @ORIGBUDGET = SUM(ORIGINALALLOCATIONAMOUNT),
                                        @AMENDBUDGET = SUM(COMMITTEDREVISIONS),
                                        @UNAPPROVEDREVISIONS = SUM(UNCOMMITTEDREVISIONS),
                                        @REMAININGBUDGET = SUM(TOTALALLOCATIONAMOUNT),
                                        @APPROVEDREVISION = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END),
                                        @REVISEDBUDGET = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) + SUM(COMMITTEDREVISIONS),
                                        @CARRYFORWARDBUDGET = SUM(TOTALALLOCATIONAMOUNT) - SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) - SUM(COMMITTEDREVISIONS)
                             FROM PROJBUDGETALLOCATIONLINE CROSS JOIN FISCALCALENDARYEAR
                             WHERE PROJBUDGETALLOCATIONLINE.PROJBUDGETLINE = @LINERECID AND
                                             PROJBUDGETALLOCATIONLINE.PARTITION = %1 AND
                                             PROJBUDGETALLOCATIONLINE.DATAAREAID = '%2' AND
                                             FISCALCALENDARYEAR.RECID = PROJBUDGETALLOCATIONLINE.FISCALCALENDARYEAR AND
                                             FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                             FISCALCALENDARYEAR.ENDDATE >= '%3'  AND
                                             FISCALCALENDARYEAR.PARTITION = %1;

                            %4
                            SELECT @ACTUALSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARYEAR
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                         REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                         BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                         FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                         FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                         FISCALCALENDARYEAR.ENDDATE >= '%3'  AND
                                         FISCALCALENDARYEAR.PARTITION = %1 AND
                                   EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                   EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%6' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %5)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        (PROJPOSTTRANSVIEW.TRANSDATE <= '%3' OR
                                                        PROJPOSTTRANSVIEW.TRANSDATE >= '%3'));

                            %4
                            SELECT @ACTUALCOSTREDUCED = SUM(COSTAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARYEAR
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                         REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                         BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                         FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                         FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                         FISCALCALENDARYEAR.ENDDATE >= '%3'  AND
                                         FISCALCALENDARYEAR.PARTITION = %1 AND
                                   EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                   EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%6' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %5)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        (PROJPOSTTRANSVIEW.TRANSDATE <= '%3' OR
                                                        PROJPOSTTRANSVIEW.TRANSDATE >= '%3'));

                            %4
                            SELECT @COMMITMENTSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARYEAR
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                           REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                           BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                           FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                           FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                           FISCALCALENDARYEAR.ENDDATE >= '%3'  AND
                                           FISCALCALENDARYEAR.PARTITION = %1 AND
                                   EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                   EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                            WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                  COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                  COSTCONTROL.DATAAREAID = '%2'AND
                                                  (COSTCONTROL.COMMITTEDDATE <= '%3' OR
                                                  COSTCONTROL.COMMITTEDDATE >= '%3'));

                            %4
                            SELECT @COMMITMENTCOSTREDUCED  = SUM(COSTAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARYEAR
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                           REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                           BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                           FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                           FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                           FISCALCALENDARYEAR.ENDDATE >= '%3'  AND
                                           FISCALCALENDARYEAR.PARTITION = %1 AND
                                   EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                   EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                            WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                  COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                  COSTCONTROL.DATAAREAID = '%2' AND
                                                  (COSTCONTROL.COMMITTEDDATE <= '%3' OR
                                                  COSTCONTROL.COMMITTEDDATE >= '%3'));


                        END
                        ELSE
                        BEGIN
                            IF (@PROJALLOCATIONMETHOD = 1) -- QUARTER
                                BEGIN
                                    SELECT @ORIGBUDGET = SUM(ORIGINALALLOCATIONAMOUNT),
                                                @AMENDBUDGET = SUM(COMMITTEDREVISIONS),
                                                @UNAPPROVEDREVISIONS = SUM(UNCOMMITTEDREVISIONS),
                                                @REMAININGBUDGET = SUM(TOTALALLOCATIONAMOUNT),
                                                @APPROVEDREVISION = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END),
                                                @REVISEDBUDGET = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) + SUM(COMMITTEDREVISIONS),
                                                @CARRYFORWARDBUDGET = SUM(TOTALALLOCATIONAMOUNT) - SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) - SUM(COMMITTEDREVISIONS)
                                        FROM PROJBUDGETALLOCATIONLINE WHERE PROJBUDGETLINE = @LINERECID AND PARTITION = %1 AND DATAAREAID = '%2'
                                    AND EXISTS (SELECT 'x' from FISCALCALENDARPERIOD CROSS JOIN FISCALCALENDARYEAR
                                                                WHERE FISCALCALENDARPERIOD.FISCALCALENDARYEAR = PROJBUDGETALLOCATIONLINE.FISCALCALENDARYEAR AND
                                                                      FISCALCALENDARPERIOD.QUARTER = PROJBUDGETALLOCATIONLINE.QUARTER AND
                                                                      FISCALCALENDARPERIOD.PARTITION = %1 AND
                                                                      FISCALCALENDARYEAR.RECID = FISCALCALENDARPERIOD.FISCALCALENDARYEAR AND
                                                                      FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                                                      FISCALCALENDARYEAR.ENDDATE >= '%3' AND
                                                                      FISCALCALENDARYEAR.PARTITION = %1);
                                END
                            ELSE	-- PERIODS
                                BEGIN
                                    SELECT @ORIGBUDGET = SUM(ORIGINALALLOCATIONAMOUNT),
                                                @AMENDBUDGET = SUM(COMMITTEDREVISIONS),
                                                @UNAPPROVEDREVISIONS = SUM(UNCOMMITTEDREVISIONS),
                                                @REMAININGBUDGET = SUM(TOTALALLOCATIONAMOUNT),
                                                @APPROVEDREVISION = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END),
                                                @REVISEDBUDGET = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) + SUM(COMMITTEDREVISIONS),
                                                @CARRYFORWARDBUDGET = SUM(TOTALALLOCATIONAMOUNT) - SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) - SUM(COMMITTEDREVISIONS)
                                        FROM PROJBUDGETALLOCATIONLINE WHERE PROJBUDGETLINE = @LINERECID AND PARTITION = %1 AND DATAAREAID = '%2'
                                   AND EXISTS (SELECT 'x' from FISCALCALENDARPERIOD CROSS JOIN FISCALCALENDARYEAR
                                                WHERE FISCALCALENDARPERIOD.RECID = PROJBUDGETALLOCATIONLINE.FISCALCALENDARPERIOD AND
                                                      FISCALCALENDARPERIOD.PARTITION = %1 AND
                                                      FISCALCALENDARYEAR.RECID = FISCALCALENDARPERIOD.FISCALCALENDARYEAR AND
                                                      FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                                      FISCALCALENDARYEAR.ENDDATE >= '%3' AND
                                                      FISCALCALENDARYEAR.PARTITION = %1);

                                    %4
                                    SELECT @ACTUALSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                        FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                        JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                        CROSS JOIN FISCALCALENDARPERIOD
                                        CROSS JOIN FISCALCALENDARYEAR
                                        WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                                REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                                BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                                FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                                FISCALCALENDARPERIOD.PARTITION = %1 AND
                                                FISCALCALENDARYEAR.RECID = FISCALCALENDARPERIOD.FISCALCALENDARYEAR AND
                                                FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                                FISCALCALENDARYEAR.ENDDATE >= '%3' AND
                                                FISCALCALENDARYEAR.PARTITION = %1 AND
                                        EXISTS (SELECT 'x' FROM PROJECTLIST
                                                WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                        EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%6' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %5)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        (PROJPOSTTRANSVIEW.TRANSDATE <= '%3' OR
                                                        PROJPOSTTRANSVIEW.TRANSDATE >= '%3'));

                                    %4
                                    SELECT @ACTUALCOSTREDUCED = SUM(COSTAMOUNTREDUCED)
                                        FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                        JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                        CROSS JOIN FISCALCALENDARPERIOD
                                        CROSS JOIN FISCALCALENDARYEAR
                                        WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                                REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                                BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND                                               
                                                FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                                FISCALCALENDARPERIOD.PARTITION = %1 AND
                                                FISCALCALENDARYEAR.RECID = FISCALCALENDARPERIOD.FISCALCALENDARYEAR AND
                                                FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                                FISCALCALENDARYEAR.ENDDATE >= '%3' AND
                                                FISCALCALENDARYEAR.PARTITION = %1 AND
                                        EXISTS (SELECT 'x' FROM PROJECTLIST
                                                    WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                        EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%6' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %5)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        (PROJPOSTTRANSVIEW.TRANSDATE <= '%3' OR
                                                        PROJPOSTTRANSVIEW.TRANSDATE >= '%3'));

                                    %4
                                    SELECT @COMMITMENTSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                           FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                           JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                           CROSS JOIN FISCALCALENDARPERIOD
                                           CROSS JOIN FISCALCALENDARYEAR
                                           WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                                   REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                                   BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                                   FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                                   FISCALCALENDARPERIOD.PARTITION = %1 AND
                                                   FISCALCALENDARYEAR.RECID = FISCALCALENDARPERIOD.FISCALCALENDARYEAR AND
                                                   FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                                   FISCALCALENDARYEAR.ENDDATE >= '%3' AND
                                                   FISCALCALENDARYEAR.PARTITION = %1 AND
                                           EXISTS (SELECT 'x' FROM PROJECTLIST
                                                     WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                           EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                                     WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                           COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                           COSTCONTROL.DATAAREAID = '%2'AND
                                                           (COSTCONTROL.COMMITTEDDATE <= '%3' OR
                                                           COSTCONTROL.COMMITTEDDATE >= '%3'));

                                    %4
                                    SELECT @COMMITMENTCOSTREDUCED  = SUM(COSTAMOUNTREDUCED)
                                           FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                           JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                           CROSS JOIN FISCALCALENDARPERIOD
                                           CROSS JOIN FISCALCALENDARYEAR
                                           WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                                   REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                                   BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                                   FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                                   FISCALCALENDARPERIOD.PARTITION = %1 AND
                                                   FISCALCALENDARYEAR.RECID = FISCALCALENDARPERIOD.FISCALCALENDARYEAR AND
                                                   FISCALCALENDARYEAR.STARTDATE <= '%3' AND
                                                   FISCALCALENDARYEAR.ENDDATE >= '%3' AND
                                                   FISCALCALENDARYEAR.PARTITION = %1 AND
                                           EXISTS (SELECT 'x' FROM PROJECTLIST
                                                     WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                           EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                                     WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                           COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                           COSTCONTROL.DATAAREAID = '%2'AND
                                                           (COSTCONTROL.COMMITTEDDATE <= '%3' OR
                                                           COSTCONTROL.COMMITTEDDATE >= '%3'));

                                END
                        END

                        ";

        TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        sqlStatement = strFmt(sqlStatement, getCurrentPartitionRecId(), curExt(), DateTimeUtil::toStr(transDate), projIdExpression, enum2int(ProjOrigin::ProductionFinished), ProjProductionConsumedBudgetCheckFlight::instance().isEnabled());
        
        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlAllocationLinesCustomRange</Name>
				<Source><![CDATA[
    private str sqlAllocationLinesCustomRange()
    {
        str projIdExpression = this.getProjectList();

        str sqlStatement;

        sqlStatement = @"
                    IF (@PROJALLOCATIONMETHOD = 0) -- YEARLY
                        BEGIN
                            SELECT @ORIGBUDGET = SUM(ORIGINALALLOCATIONAMOUNT),
                                                @AMENDBUDGET = SUM(COMMITTEDREVISIONS),
                                                @UNAPPROVEDREVISIONS = SUM(UNCOMMITTEDREVISIONS),
                                                @REMAININGBUDGET = SUM(TOTALALLOCATIONAMOUNT),
                                                @APPROVEDREVISION = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END),
                                                @REVISEDBUDGET = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) + SUM(COMMITTEDREVISIONS),
                                                @CARRYFORWARDBUDGET = SUM(TOTALALLOCATIONAMOUNT) - SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) - SUM(COMMITTEDREVISIONS)
                                        FROM PROJBUDGETALLOCATIONLINE WHERE PROJBUDGETLINE = @LINERECID AND PARTITION = %1 AND DATAAREAID = '%2'
                                        AND EXISTS (SELECT 'x' from FISCALCALENDARYEAR
                                            WHERE FISCALCALENDARYEAR.RECID = PROJBUDGETALLOCATIONLINE.FISCALCALENDARYEAR AND
                                                  FISCALCALENDARYEAR.PARTITION = %1 AND
                                                  FISCALCALENDARYEAR.STARTDATE <= '%4' AND
                                                  FISCALCALENDARYEAR.ENDDATE >= '%3');

                                   %5
                                   SELECT @ACTUALSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARYEAR
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                         REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                         BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                         FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                         FISCALCALENDARYEAR.STARTDATE <= '%4' AND
                                         FISCALCALENDARYEAR.ENDDATE >= '%3' AND
                                         FISCALCALENDARYEAR.PARTITION = %1 AND
                                    EXISTS (SELECT 'x' FROM PROJECTLIST
                                              WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                    EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%7' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %6)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE >= '%3' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE <= '%4');

                                   %5
                                   SELECT @ACTUALCOSTREDUCED = SUM(COSTAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARYEAR
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                         REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                         BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                         FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                         FISCALCALENDARYEAR.STARTDATE <= '%4' AND
                                         FISCALCALENDARYEAR.ENDDATE >= '%3' AND
                                         FISCALCALENDARYEAR.PARTITION = %1 AND
                                   EXISTS (SELECT 'x' FROM PROJECTLIST
                                              WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                   EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%7' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %6)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE >= '%3' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE <= '%4');

                                   %5
                                   SELECT  @COMMITMENTSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARYEAR
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                         REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                         BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                         FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                         FISCALCALENDARYEAR.STARTDATE <= '%4' AND
                                         FISCALCALENDARYEAR.ENDDATE >= '%3' AND
                                         FISCALCALENDARYEAR.PARTITION = %1 AND
                                    EXISTS (SELECT 'x' FROM PROJECTLIST
                                            WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                    EXISTS(SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                            WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                  COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                  COSTCONTROL.DATAAREAID = '%2'  AND
                                                  COSTCONTROL.COMMITTEDDATE >= '%3' AND
                                                  COSTCONTROL.COMMITTEDDATE <= '%4');

                                   %5
                                   SELECT  @COMMITMENTCOSTREDUCED  = SUM(COSTAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARYEAR
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                         REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                         BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                         FISCALCALENDARYEAR.RECID = BUDGETALLOC.FISCALCALENDARYEAR AND
                                         FISCALCALENDARYEAR.STARTDATE <= '%4' AND
                                         FISCALCALENDARYEAR.ENDDATE >= '%3' AND
                                         FISCALCALENDARYEAR.PARTITION = %1 AND
                                   EXISTS (SELECT 'x' FROM PROJECTLIST
                                            WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                   EXISTS(SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                            WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                  COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                  COSTCONTROL.DATAAREAID = '%2'  AND
                                                  COSTCONTROL.COMMITTEDDATE >= '%3' AND
                                                  COSTCONTROL.COMMITTEDDATE <= '%4');

                        END
                        ELSE
                        BEGIN
                            IF (@PROJALLOCATIONMETHOD = 1) -- QUARTER
                                BEGIN
                                    SELECT @ORIGBUDGET = SUM(ORIGINALALLOCATIONAMOUNT),
                                                @AMENDBUDGET = SUM(COMMITTEDREVISIONS),
                                                @UNAPPROVEDREVISIONS = SUM(UNCOMMITTEDREVISIONS),
                                                @REMAININGBUDGET = SUM(TOTALALLOCATIONAMOUNT),
                                                @APPROVEDREVISION = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END),
                                                @REVISEDBUDGET = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) + SUM(COMMITTEDREVISIONS),
                                                @CARRYFORWARDBUDGET = SUM(TOTALALLOCATIONAMOUNT) - SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) - SUM(COMMITTEDREVISIONS)
                                        FROM PROJBUDGETALLOCATIONLINE WHERE PROJBUDGETLINE = @LINERECID AND PARTITION = %1 AND DATAAREAID = '%2'
                                        AND EXISTS (SELECT 'x' from FISCALCALENDARPERIOD
                                            WHERE FISCALCALENDARPERIOD.FISCALCALENDARYEAR = PROJBUDGETALLOCATIONLINE.FISCALCALENDARYEAR AND
                                                    FISCALCALENDARPERIOD.QUARTER = PROJBUDGETALLOCATIONLINE.QUARTER AND
                                                    FISCALCALENDARPERIOD.PARTITION = %1 AND
                                                    FISCALCALENDARPERIOD.STARTDATE <= '%4' AND
                                                    FISCALCALENDARPERIOD.ENDDATE >= '%3');        
                                END
                            ELSE	-- PERIODS
                                BEGIN
                                   SELECT @ORIGBUDGET = SUM(ORIGINALALLOCATIONAMOUNT),
                                                @AMENDBUDGET = SUM(COMMITTEDREVISIONS),
                                                @UNAPPROVEDREVISIONS = SUM(UNCOMMITTEDREVISIONS),
                                                @REMAININGBUDGET = SUM(TOTALALLOCATIONAMOUNT),
                                                @APPROVEDREVISION = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END),
                                                @REVISEDBUDGET = SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) + SUM(COMMITTEDREVISIONS),
                                                @CARRYFORWARDBUDGET = SUM(TOTALALLOCATIONAMOUNT) - SUM(CASE WHEN @WORKFLOWSTATUS = 2 THEN ORIGINALALLOCATIONAMOUNT ELSE 0 END) - SUM(COMMITTEDREVISIONS)
                                        FROM PROJBUDGETALLOCATIONLINE WHERE PROJBUDGETLINE = @LINERECID AND PARTITION = %1 AND DATAAREAID = '%2'
                                   AND EXISTS (SELECT 'x' from FISCALCALENDARPERIOD
                                        WHERE FISCALCALENDARPERIOD.RECID = PROJBUDGETALLOCATIONLINE.FISCALCALENDARPERIOD AND
                                              FISCALCALENDARPERIOD.PARTITION = %1 AND
                                              FISCALCALENDARPERIOD.STARTDATE <= '%4' AND
                                              FISCALCALENDARPERIOD.ENDDATE >= '%3');

                                   %5
                                   SELECT @ACTUALSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARPERIOD
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                         REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                         BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                         FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                         FISCALCALENDARPERIOD.STARTDATE <= '%4' AND
                                         FISCALCALENDARPERIOD.ENDDATE >= '%3' AND
                                         FISCALCALENDARPERIOD.PARTITION = %1 AND
                                    EXISTS (SELECT 'x' FROM PROJECTLIST
                                              WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                    EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%7' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %6)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE >= '%3' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE <= '%4');

                                   %5
                                   SELECT @ACTUALCOSTREDUCED = SUM(COSTAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARPERIOD
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                         REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                         BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                         FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                         FISCALCALENDARPERIOD.STARTDATE <= '%4' AND
                                         FISCALCALENDARPERIOD.ENDDATE >= '%3' AND
                                         FISCALCALENDARPERIOD.PARTITION = %1 AND
                                   EXISTS (SELECT 'x' FROM PROJECTLIST
                                              WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                   EXISTS (SELECT 'x' FROM PROJPOSTTRANSVIEW
                                                WHERE (PROJPOSTTRANSVIEW.TRANSID = REDUCTION.PROJTRANSID OR
                                                        (@PROJPRODUCTIONCONSUMEDBUDGETCHECKFLIGHT = '%7' AND
                                                        PROJPOSTTRANSVIEW.TRANSIDREF = REDUCTION.PROJTRANSID AND
                                                        PROJPOSTTRANSVIEW.TRANSACTIONORIGIN = %6)) AND
                                                        PROJPOSTTRANSVIEW.PARTITION = %1 AND
                                                        PROJPOSTTRANSVIEW.DATAAREAID = '%2' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE >= '%3' AND
                                                        PROJPOSTTRANSVIEW.TRANSDATE <= '%4');

                                   %5
                                   SELECT  @COMMITMENTSALESREDUCED = SUM(SALESAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDSALES = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARPERIOD
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                         REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                         BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                         FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                         FISCALCALENDARPERIOD.STARTDATE <= '%4' AND
                                         FISCALCALENDARPERIOD.ENDDATE >= '%3' AND
                                         FISCALCALENDARPERIOD.PARTITION = %1 AND
                                   EXISTS (SELECT 'x' FROM PROJECTLIST
                                            WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                   EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                            WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                  COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                  COSTCONTROL.DATAAREAID = '%2'  AND
                                                  COSTCONTROL.COMMITTEDDATE >= '%3' AND
                                                  COSTCONTROL.COMMITTEDDATE <= '%4');

                                   %5
                                   SELECT  @COMMITMENTCOSTREDUCED  = SUM(COSTAMOUNTREDUCED)
                                   FROM PROJBUDGETREDUCTIONHISTORY REDUCTION
                                   JOIN PROJBUDGETALLOCATIONLINE BUDGETALLOC ON REDUCTION.PROJBUDGETALLOCATIONLINEIDCOST = BUDGETALLOC.RECID
                                   CROSS JOIN FISCALCALENDARPERIOD
                                   WHERE BUDGETALLOC.PROJBUDGETLINE =@LINERECID AND
                                         REDUCTION.PARTITION = %1 AND REDUCTION.DATAAREAID = '%2' AND
                                         BUDGETALLOC.PARTITION = %1 AND BUDGETALLOC.DATAAREAID = '%2' AND
                                         FISCALCALENDARPERIOD.RECID = BUDGETALLOC.FISCALCALENDARPERIOD AND
                                         FISCALCALENDARPERIOD.STARTDATE <= '%4' AND
                                         FISCALCALENDARPERIOD.ENDDATE >= '%3' AND
                                         FISCALCALENDARPERIOD.PARTITION = %1 AND
                                   EXISTS (SELECT 'x' FROM PROJECTLIST
                                            WHERE PROJECTLIST.PROJID = REDUCTION.PROJIDORIG) AND
                                   EXISTS (SELECT 'x' FROM COSTCONTROLTRANSCOMMITTEDCOST COSTCONTROL
                                            WHERE COSTCONTROL.PROJTRANSID = REDUCTION.PROJTRANSID AND
                                                  COSTCONTROL.OPEN_ = 1 AND COSTCONTROL.PARTITION = %1 AND
                                                  COSTCONTROL.DATAAREAID = '%2'  AND
                                                  COSTCONTROL.COMMITTEDDATE >= '%3' AND
                                                  COSTCONTROL.COMMITTEDDATE <= '%4');

                                END
                        END

                        ";

        sqlStatement = strFmt(sqlStatement, getCurrentPartitionRecId(), curExt(), DateTimeUtil::toStr(fromDate), DateTimeUtil::toStr(toDate), projIdExpression, enum2int(ProjOrigin::ProductionFinished), ProjProductionConsumedBudgetCheckFlight::instance().isEnabled());
        
        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSQLCalculateBudgetTotals</Name>
				<Source><![CDATA[
    private void runSQLCalculateBudgetTotals(str _sqlStatement, TmpProjBudgetBalances _tmpProjBudgetBalances)
    {
        UserConnection connection = new UserConnection ();
        Statement statement = connection.createStatement();
        new SqlStatementExecutePermission(_sqlStatement).assert();
        
        paramMap = SqlParams::create();
        ResultSet calcResults = statement.executeQueryWithParameters(_sqlStatement, paramMap);

        ProjCategoryId categoryId;
        Description transName;
        ProjCategoryGroupId categoryGroupId;
        ProjCostGroupId costGroupId;
        ProjTransType transType;
        AmountCur origBudget, amendBudget, unapprovedRevisions, remainingBudget;
        AmountCur revisedBudget, carryForwardBudget, committedCosts, actualRevAndCosts;

        container conValues;
        List list = new List(Types::Container);
        
        while (calcResults.next())
        {
            conValues = conNull();
            
            categoryId = calcResults.getString(1);
            transName = categoryId;
            categoryGroupId = calcResults.getString(2);

            if (projControlId)
            {
                costGroupId = calcResults.getString(3);
            }

            transType = any2Enum(calcResults.getInt(4));

            origBudget =  calcResults.getReal(5);
            amendBudget = calcResults.getReal(6);
            unapprovedRevisions = calcResults.getReal(7);
            remainingBudget = calcResults.getReal(8);
            revisedBudget = calcResults.getReal(10);
            carryForwardBudget = calcResults.getReal(11);

            switch(projBudgetLineType)
            {
                case ProjBudgetLineType::Revenue:
                    Amount comittedRev = calcResults.getReal(12);
                    committedCosts = comittedRev;
                    remainingBudget -= comittedRev;

                    Amount actualRev = calcResults.getReal(13);
                    actualRevAndCosts = actualRev;
                    remainingBudget -= actualRev;
                    break;

                case ProjBudgetLineType::Cost:
                    Amount comittedCost = calcResults.getReal(14);
                    committedCosts = comittedCost;
                    remainingBudget -= comittedCost;

                    Amount actualCost = calcResults.getReal(15);
                    actualRevAndCosts = actualCost;
                    remainingBudget -= actualCost;
                    break;
            }

            conValues = [categoryId,
                         transName,
                         categoryGroupId,
                         costGroupId,
                         transType,
                         origBudget,
                         amendBudget,
                         unapprovedRevisions,
                         remainingBudget,
                         revisedBudget,
                         carryForwardBudget,
                         committedCosts,
                         actualRevAndCosts];

            list = this.addValuesContainerToList(list, conValues, calcResults);
        }

        CodeAccessPermission::revertAssert();

        calcResults.close();
        statement.close();
        connection.finalize();

        ListEnumerator listEnum = List.getEnumerator();

        while(listEnum.moveNext())
        {
            [categoryId,
            transName,
            categoryGroupId,
            costGroupId,
            transType,
            origBudget,
            amendBudget,
            unapprovedRevisions,
            remainingBudget,
            revisedBudget,
            carryForwardBudget,
            committedCosts,
            actualRevAndCosts] = listEnum.current();

            _tmpProjBudgetBalances.clear();
            _tmpProjBudgetBalances.CategoryId = categoryId;
            _tmpProjBudgetBalances.TransName = transName;
            _tmpProjBudgetBalances.CategoryGroupId = categoryGroupId;

            if (projControlId)
            {
                _tmpProjBudgetBalances.CostGroupId = costGroupId;
            }

            _tmpProjBudgetBalances.ProjTranstype = transType;

            _tmpProjBudgetBalances.OrigBudget =  origBudget;
            _tmpProjBudgetBalances.AmendBudget = amendBudget;
            _tmpProjBudgetBalances.UnapprovedRevisions = unapprovedRevisions;
            _tmpProjBudgetBalances.RemainingBudget = remainingBudget;
            _tmpProjBudgetBalances.RevisedBudget = revisedBudget;
            _tmpProjBudgetBalances.CarryForwardBudget = carryForwardBudget;
            _tmpProjBudgetBalances.CommittedCosts = committedCosts;
            _tmpProjBudgetBalances.ActualRevAndCosts = actualRevAndCosts;

            this.insertBudgetBalancesTmp(_tmpProjBudgetBalances);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBudgetBalancesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into the <c>TmpProjBudgetBalances</c> temporary table.  
    /// </summary>
    /// <param name = "_tmpProjBudgetBalances">The <c>TmpProjBudgetBalances</c> record to be inserted.</param>
    protected void insertBudgetBalancesTmp(TmpProjBudgetBalances _tmpProjBudgetBalances)
    {
        _tmpProjBudgetBalances.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValuesContainerToList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the values container to the list.  
    /// </summary>
    /// <param name = "_list">The list of containers of values.</param>
    /// <param name = "_values">A container conainting calculation results to be added to the list.</param>
    /// <param name = "_calculationResults">The calculation results.</param>
    /// <returns>The list with the values container added to the list.</returns>
    protected List addValuesContainerToList(List _list, container _values, ResultSet _calculationResults)
    {
        _list.addEnd(_values);

        return _list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the WITH clause in common table expression which contains the project list including sub-projects. 
    /// </summary>
    /// <returns>The common table expression with project list</returns>
    private str getProjectList()
    {
        str projStatement;

        if (includeSubProjects)
        {
            projStatement = strFmt(@"WITH PROJECTLIST (PROJID) AS
                                    (SELECT ProjId FROM PROJTABLE where ProjId = '%1' AND DATAAREAID = '%2'
                                        UNION
                                            SELECT ProjId FROM PROJTABLE where PARENTID like '%1%' AND DATAAREAID = '%2')", projId, curExt());
        }
        else
        {
            projStatement = strFmt(@"WITH PROJECTLIST (PROJID) AS
                                    (SELECT ProjId FROM PROJTABLE where ProjId = '%1' AND DATAAREAID = '%2')", projId, curExt());
        }
        return projStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>