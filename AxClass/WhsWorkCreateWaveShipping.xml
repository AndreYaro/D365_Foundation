<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateWaveShipping</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkCreateWaveShipping</c> class creates warehouse work for wave shipping.
/// </summary>
[WHSWaveTemplateTypeFactoryAttribute(WHSWaveTemplateType::Shipping)]
class WhsWorkCreateWaveShipping extends WHSWorkCreateWave
{
    private int allocatedLoadLines = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocatedLoadLines</Name>
				<Source><![CDATA[
    internal int allocatedLoadLines()
    {
        return allocatedLoadLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    public void createTempTable()
    {
        if (!waveTable.getWorkBuildId())
        {
            WHSWaveMethodStatusHandler childWaveMethodStatusHandler;

            if (waveMethodStatusHandler && WHSParameters::find().WaveProgressLog)
            {
                int totalLoadLines = waveTable.numberOfLoadLinesToAllocate();
                waveMethodStatusHandler.setTotalSteps(totalLoadLines);
                childWaveMethodStatusHandler = WHSWaveMethodStatusHandler::newWaveMethodStatusHandler(waveTable.WaveId,
                                                                                                  "@WAX:WHSAllocateWaveDefaultBatch",
                                                                                                  totalLoadLines,
                                                                                                  waveMethodStatusHandler.waveMethodStatusRecId());
                childWaveMethodStatusHandler.updateWaveStepProgressToStarted();
            }

            var loadLineAllocationProcessor = WHSLoadLineAllocationProcessor::newFromPostEngineAndWorkCreateId(this.parmPostEngine(), this.parmWorkCreateId());
            loadLineAllocationProcessor.parmWaveMethodStatusHandler(childWaveMethodStatusHandler);
            loadLineAllocationProcessor.allocateLoadLinesByWave(this.parmWaveTable());
            allocatedLoadLines = loadLineAllocationProcessor.allocatedLoadLines();
            
            if (childWaveMethodStatusHandler)
            {
                childWaveMethodStatusHandler.updateWaveStepProgressToCompleted();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        waveTable = _common;

        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();

        super(waveTable, workCreateId);

        waveId = waveTable.WaveId;

        this.loadLineWorkCreatedQuantityTracker = WHSLoadLineWorkCreatedQuantityTracker::construct();
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>