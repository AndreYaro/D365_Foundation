<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayNDFL2ReportTaxTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayNDFL2ReportTaxTable extends RPayNDFL2Report implements BatchRetryable
{
    QueryRun         queryRun;
    RpayTaxListTable rpayTaxListTable;
    RpayTaxListTrans rpayTaxListTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetTransferedTaxAmount</Name>
				<Source><![CDATA[
        protected RPayAmount budgetTransferedTaxAmount()
    {
        return rpayTaxListTrans.BudgetTransferedTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReportData</Name>
				<Source><![CDATA[
        protected void calcReportData()
    {
        super();
        reportValues = conpoke(reportValues, 1, rpayTaxListTrans.IncomeSum);
        reportValues = conpoke(reportValues, 3, rpayTaxListTrans.AddTaxSum);
        reportValues = conpoke(reportValues, 4, rpayTaxListTrans.TaxSum);
        reportValues = conpoke(reportValues, 5, rpayTaxListTrans.BudgetTransferedTaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        Object ret;

        ret = super();

        refNumberField.visible(false);
        refDateField.visible(false);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquireDate</Name>
				<Source><![CDATA[
        public date inquireDate()
    {
        return rpayTaxListTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquireNumber</Name>
				<Source><![CDATA[
        public str  inquireNumber()
    {
        return int2str(rpayTaxListTrans.ReferenceNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();
        queryRun = new QueryRun('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOfficialsName</Name>
				<Source><![CDATA[
        protected Name parmOfficialsName()
    {
        return OfficialsTrans_RU::find(rpayTaxListTable.OffSessionId, OffReportType_RU::RPayTaxList, OffPosition_RU::Responsible).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOfficialsPersonTitle</Name>
				<Source><![CDATA[
        protected TitleId parmOfficialsPersonTitle()
    {
        return OfficialsTrans_RU::find(rPayTaxListTable.OffSessionId, OffReportType_RU::RPayTaxList, OffPosition_RU::Responsible).Title;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
        public boolean prompt()
    {
        boolean              ret = false;
        Query                query;
        QueryBuildDataSource qbdListTable,qbdListTrans ;
        QueryBuildRange      qbr;
        query = new Query(date2str(rpayTaxListTable.PayPeriod,321,2,2,2,2,4, DateFlags::None) + int2str(rpayTaxListTable.ListNumber));
        qbdListTable = query.addDataSource(tablenum(RpayTaxListTable));
        qbr = qbdListTable.addRange(fieldnum(RpayTaxListTable,PayPeriod));
        qbr.value(queryValue(rpayTaxListTable.PayPeriod));
        qbr.status(RangeStatus::Locked);
        qbr = qbdListTable.addRange(fieldnum(RpayTaxListTable,ListNumber));
        qbr.value(queryValue(rpayTaxListTable.ListNumber));
        qbr.status(RangeStatus::Locked);
        qbdListTrans = qbdListTable.addDataSource(tablenum(RpayTaxListTrans));
        qbdListTrans.relations(true);
        qbdListTrans.addSortField(fieldnum(RpayTaxListTrans, ReferenceNumber));
        qbr = qbdListTrans.addRange(fieldnum(RpayTaxListTrans,EmplId));
        queryRun.query(query);

        if (queryRun.prompt())
        {
           ret = true;
        }

        qbdListTrans.addSortField(fieldnum(RpayTaxListTrans, ReferenceNumber));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportType2Value</Name>
				<Source><![CDATA[
        protected int reportType2Value()
    {
        return rpayTaxListTrans.ReportSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpayTaxListTable</Name>
				<Source><![CDATA[
        protected void rpayTaxListTable(RpayTaxListTable _rpayTaxListTable)
    {
        rpayTaxListTable = _rpayTaxListTable;
        payPeriod =  rpayTaxListTable.PayPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        #AviFiles
    public void run()
    {
        RPayTaxIncomeGroupTable incomeGroupTable;
        COM                  document;
        SysOperationProgress operationProgress;
        int                  total, i;
        RPayTaxIncomeGroupTable::checkTaxAuthority();

        taxByBranch = rpayTaxListTable.Presentation != RPayTaxPresentation::ToPrimaryIFNS;

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption("@GLS105961");
        operationProgress.setAnimation(#AviUpdate);
        total = SysQuery::countLoops(queryRun);
        operationProgress.setTotal(total);
        queryRun.reset();
        while (queryRun.next())
        {
            i ++;
            rpayTaxListTrans = queryRun.get(tablenum(RpayTaxListTrans));
            emplTable = RHRMEmplTable::find(rpayTaxListTrans.EmplId);
            emplId = emplTable.EmployeeId;

            operationProgress.setText("@RUP372" + emplTable.EmployeeId);
            operationProgress.incCount();

            if (rpayTaxListTrans.ReportSign == 2 &&
                !rpayTaxListTrans.isNotZeroTrans())
            {
                continue;
            }

            taxRateCode = rpayTaxListTrans.TaxRateCode;
            taxStatus   = rpayTaxListTrans.TaxStatus;
            branchId    = rpayTaxListTrans.BranchId;

            select firstonly TaxCode, StandardDeductions from incomeGroupTable
                where incomeGroupTable.EmplTaxStatus == taxStatus &&
                        (incomeGroupTable.RateCode      == taxRateCode ||
                        incomeGroupTable.RateCodeGroup == taxRateCode);

            taxCode          = incomeGroupTable.TaxCode;

            taxReportData = RPayTaxNDFLReportData::construct(
                emplId,
                payPeriod,
                this.inquireDate(),
                selectEmpl,
                reportType);
            this.calcReportData();

            applyStdDed = (incomeGroupTable.StandardDeductions && reportSign == 2) ||
                            (incomeGroupTable.StandardDeductions && reportSign == 1);

            if (this.isEmptyReport())
            {
                continue;
            }

            this.initTotalAmount(rpayTaxListTrans);

            newDocument = inquireNumber != rpayTaxListTrans.ReferenceNumber;

            if (newDocument)
            {
                if (excelDocument)
                {
                    this.endDocument();
                    if (rpayTaxListTable.Printout)
                    {
                        document = excelDocument.getComDocument();
                        document.printout();
                        document      = null;
                        excelDocument.quitApplication(true);
                        excelDocument = null;
                    }
                    else
                    {
                        excelDocument.visible(true);
                    }

                    excelDocument = NULL;
                }

                if (!this.makeDocument(false))
                {
                    continue;
                }
            }

            inquireNumber = rpayTaxListTrans.ReferenceNumber;
            reportSign    = this.reportType2Value();

            applyStdDed = incomeGroupTable.StandardDeductions;
            this.fillDocument();
        }

        if (excelDocument)
        {
            this.endDocument();
            if (rpayTaxListTable.Printout)
            {
                document = excelDocument.getComDocument();
                document.printout();
                document      = null;
                excelDocument.quitApplication(true);
                excelDocument = null;
            }
            else
            {
                excelDocument.visible(true);
            }
            excelDocument = NULL;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>