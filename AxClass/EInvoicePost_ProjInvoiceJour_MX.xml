<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoicePost_ProjInvoiceJour_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoicePost_ProjInvoiceJour_MX</c> class handles the posting of the EInvoice for CFDI
/// </summary>
public class EInvoicePost_ProjInvoiceJour_MX extends EInvoicePost_MX
{
    ProjInvoiceJour projInvoiceJour;
    ProjProposalJour projProposalJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createElectronicInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the eInvoice lines that are related to the posted document.
    /// </summary>
    /// <remarks>
    /// Depending on the origin of posted document (from the <c>custInvoiceJour</c> table or the
    /// <c>ProjInvoiceJour</c> table), it is necessary to search for lines to get the following
    /// information: customsName, customsDocNumber, customsDocDate, PropertyNumber.
    /// </remarks>
    public void createElectronicInvoiceTrans()
    {
        ProjInvoiceItem     projInvoiceItem;
        ProjInvoiceOnAcc    projInvoiceOnAcc;

        while select projInvoiceItem
            where projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
               && projInvoiceItem.InvoiceDate   == projInvoiceJour.InvoiceDate
               && projInvoiceItem.ItemType      == ProjItemType::SalesOrder
        {
            eInvoiceTrans.clear();
            eInvoiceTrans.initValue();
            eInvoiceTrans.RefTableId            = projInvoiceItem.TableId;
            eInvoiceTrans.RefRecId              = projInvoiceItem.RecId;
            eInvoiceTrans.RefEInvoiceJourRecId  = eInvoiceJour.RecId;
            eInvoiceTrans.CustomsDocDate        = projInvoiceItem.salesLine().CustomsDocDate_MX;
            eInvoiceTrans.CustomsDocNumber      = projInvoiceItem.salesLine().CustomsDocNumber_MX;
            eInvoiceTrans.CustomsName           = projInvoiceItem.salesLine().CustomsName_MX;
            eInvoiceTrans.PropertyNumber        = projInvoiceItem.salesLine().PropertyNumber_MX;
            eInvoiceTrans.ProductCode           = projInvoiceItem.salesLine().SATProductCode_MX;
            eInvoiceTrans.UOMCode               = projInvoiceItem.salesLine().SATUnitCode_MX;
            eInvoiceTrans.CustomUOMCode         = projInvoiceItem.salesLine().SATCustomUnitOfMeasure_MX;
            eInvoiceTrans.TariffFraction        = projInvoiceItem.salesLine().SATTariffFraction_MX;
            eInvoiceTrans.BrandCode             = projInvoiceItem.salesLine().inventTable().BrandCodeId_MX;
            eInvoiceTrans.CustomsQty            = projInvoiceItem.salesLine().SATCustomsQty_MX;
            eInvoiceTrans.insert();
        }

        while select SATProductCode_MX from projInvoiceOnAcc
        where projInvoiceOnAcc.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
           && projInvoiceOnAcc.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            eInvoiceTrans.clear();
            eInvoiceTrans.initValue();
            eInvoiceTrans.RefTableId            = projInvoiceOnAcc.TableId;
            eInvoiceTrans.RefRecId              = projInvoiceOnAcc.RecId;
            eInvoiceTrans.RefEInvoiceJourRecId  = eInvoiceJour.RecId;
            eInvoiceTrans.ProductCode           = projInvoiceOnAcc.SATProductCode_MX;
            eInvoiceTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNumberSeq</Name>
				<Source><![CDATA[
    protected RefRecId getInvoiceNumberSeq()
    {
        return EInvoicePost_ProjInvoiceJour_MX::getInvoiceNumberSequence(projInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicingName</Name>
				<Source><![CDATA[
    protected SATRegistrationName_MX getInvoicingName()
    {
        SATRegistrationName_MX regName = CustTable::find(projInvoiceJour.OrderAccount).SATRegistrationName_MX;
        return regName ? regName : projInvoiceJour.DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides number sequence used for customer invoice that corresponds to electronic invoice being posted.
    /// </summary>
    /// <returns>
    /// Number sequence record.
    /// </returns>
    internal static RefRecId getInvoiceNumberSequence(ProjInvoiceJour _projInvoiceJour)
    {
        RefRecId invoiceNumberSeqId;
        NumberSequenceDatatype numberDatatype;
        NumberSequenceReference numberSequenceReference;
        boolean creditNote = _projInvoiceJour.InvoiceAmount < 0;
        RefRecId scopeId = NumberSeqScopeFactory::createDefaultScope().getId();

        switch (_projInvoiceJour.ProjInvoiceType)
        {
            case ProjInvoiceType::Invoice :
                numberSequenceReference = creditNote ? ProjParameters::numRefProjNormalCreditNoteId() : ProjParameters::numRefProjNormalInvoiceId();
                break;

            case ProjInvoiceType::OnAccount:
                numberSequenceReference = creditNote ? ProjParameters::numRefProjOnAccCreditNoteVoucher() : ProjParameters::numRefProjOnAccInvoiceVoucher();
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        if (_projInvoiceJour.NumberSequenceGroupId)
        {
            numberDatatype = NumberSequenceDatatype::find(numberSequenceReference.NumberSequenceDatatype);

            invoiceNumberSeqId = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, _projInvoiceJour.NumberSequenceGroupId).NumberSequenceId;
        }

        if (!invoiceNumberSeqId)
        {
            invoiceNumberSeqId = numberSequenceReference.NumberSequenceId;
        }

        return invoiceNumberSeqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateNumber</Name>
				<Source><![CDATA[
    protected str getCertificateNumber()
    {
        return projProposalJour.CertificateNumber_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfirmNumber</Name>
				<Source><![CDATA[
    protected EInvoiceCFDIConfirmNumber_MX getConfirmNumber()
    {
        return projProposalJour.eInvoiceCFDIConfirmNumber_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode getCurrencyCode()
    {
        return projInvoiceJour.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRate</Name>
				<Source><![CDATA[
    protected ExchRate getExchRate()
    {
        return projInvoiceJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoicePeriod</Name>
				<Source><![CDATA[
    protected RetailEInvoicePeriod_MX getEInvoicePeriod()
    {
        return projProposalJour.CFDIEInvoicePeriod_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTrade</Name>
				<Source><![CDATA[
    protected ForeignTrade_MX getForeignTrade()
    {
        return projProposalJour.ForeignTrade_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemporaryExport</Name>
				<Source><![CDATA[
    protected CFDITemporaryExport_MX getTemporaryExport()
    {
        return projProposalJour.CFDITemporaryExport_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTaxRegistration</Name>
				<Source><![CDATA[
    protected numRegIdTrib_MX getForeignTaxRegistration()
    {
        return projProposalJour.salesTable().custTable_InvoiceAccount().ForeignTaxRegistration_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncotermCode</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getIncotermCode()
    {
        return projProposalJour.SATIncoterm_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumRegIdTrib</Name>
				<Source><![CDATA[
    protected numRegIdTrib_MX getNumRegIdTrib()
    {
        return projProposalJour.NumRegIdTrib_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMethod</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getPaymMethod()
    {
        return projProposalJour.satPaymMethod_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurpose</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getPurpose()
    {
        return  projProposalJour.satPurpose_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    protected InvoiceAmountMST getTotalAmount()
    {
        return CurrencyExchangeHelper::amountCur2MST(projInvoiceJour.InvoiceAmount,
                                   projInvoiceJour.CurrencyId,
                                   projInvoiceJour.ExchRate,
                                   projInvoiceJour.InvoiceDate,
                                   projInvoiceJour.ExchrateSecondary,
                                   projInvoiceJour.Triangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceCertificate</Name>
				<Source><![CDATA[
    protected SourceCertificate_MX getSourceCertificate()
    {
        return projProposalJour.SourceCertificate_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the original invoice journal.
    /// </summary>
    /// <returns>Returns the original invoice journal.</returns>
    protected Common invoiceJour()
    {
        return projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the invoice date of the <c>ProjInvoiceJour</c> invoice.
    /// </summary>
    /// <returns>The invoice date of the <c>ProjInvoiceJour</c> invoice.</returns>
    public Date getInvoiceDate()
    {
        return projInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice ID of the <c>ProjInvoiceJour</c> invoice.
    /// </summary>
    /// <returns>The invoice ID of the <c>ProjInvoiceJour</c> invoice.</returns>
    public InvoiceId getInvoiceId()
    {
        return projInvoiceJour.ProjInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the <c>ProjInvoiceJour</c> invoice document.
    /// </summary>
    /// <returns>The record ID of the <c>ProjInvoiceJour</c> invoice document.</returns>
    /// <remarks>
    /// An eInvoice <c>EInvoiceJour_MX</c> always originates from another document, such as
    /// <c>CustInvoiceJour</c> sales invoices.In order to keep track of the original document, the table ID
    /// and the record ID of the document are persisted.
    /// </remarks>
    public RefRecId getInvoiceJourRecId()
    {
        return projInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the <c>ProjInvoiceJour</c> table.
    /// </summary>
    /// <returns>The table ID of the <c>ProjInvoiceJour</c> table.</returns>
    /// <remarks>
    /// An eInvoice <c>EInvoiceJour_MX</c> always originates from another document, such as
    /// <c>CustInvoiceJour</c> sales invoices.In order to keep track of the original document, the table ID
    /// and the record ID of the document are persisted.
    /// </remarks>
    public RefTableId getInvoiceJourTableId()
    {
        return projInvoiceJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment mode of the <c>ProjInvoiceJour</c> invoice document.
    /// </summary>
    /// <returns>The payment mode of the <c>ProjInvoiceJour</c> invoice document.</returns>
    public CustPaymMode getPaymMode()
    {
        return projProposalJour.PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>EInvoicePost_ProjInvoiceJour_MX</c> class
    /// </summary>
    /// <param name="_projInvoiceJour">The invoice record.</param>
    public void new(ProjInvoiceJour _projInvoiceJour)
    {
        projInvoiceJour = _projInvoiceJour;

        select firstonly projProposalJour
            where projProposalJour.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                  && projProposalJour.InvoiceDate   == projInvoiceJour.InvoiceDate
                  && projProposalJour.ProposalId    == projInvoiceJour.ProposalId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Voucher getVoucher()
    {
        return projInvoiceJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret;
    
        ret = super();
    
        return this.validateExemptTax() && ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>