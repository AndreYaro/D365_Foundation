<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollRetroactiveEarningGenerationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollRetroactiveEarningGenerationTask</c> class provides functions for creating retroactive earnings including retroactive salary earnings.
/// </summary>
class PayrollRetroactiveEarningGenerationTask extends RunBaseBatch implements BatchRetryable
{
    #PayrollConstants
    container               batchTaskGroupList;
    date                    fromRetroDate;
    date                    toRetroDate;
    date                    accountingDate;
    int                     earningLineCount;
    Set                     workerSet;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        batchTaskGroupList,
        fromRetroDate,
        toRetroDate,
        accountingDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEarningLineCount</Name>
				<Source><![CDATA[
    public int getEarningLineCount()
    {
        return earningLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerCount</Name>
				<Source><![CDATA[
    public int getWorkerCount()
    {
        return workerSet.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public date parmAccountingDate(date _accountingDate = accountingDate)
    {
        accountingDate = _accountingDate;

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchTaskGroupList</Name>
				<Source><![CDATA[
    public container parmBatchTaskGroupList(container _batchTaskGroupList = batchTaskGroupList)
    {
        batchTaskGroupList = _batchTaskGroupList;

        return batchTaskGroupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromRetroDate</Name>
				<Source><![CDATA[
    public date parmFromRetroDate(date _fromRetroDate = fromRetroDate)
    {
        fromRetroDate = _fromRetroDate;

        return fromRetroDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToRetroDate</Name>
				<Source><![CDATA[
    public date parmToRetroDate(date _toRetroDate = toRetroDate)
    {
        toRetroDate = _toRetroDate;

        return toRetroDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSingleRetroEarningLine</Name>
				<Source><![CDATA[
    private PayrollEarningStatementLineRecId processSingleRetroEarningLine(PayrollEarningStatementLineRecId _earningLineRecId)
    {
        PayrollEarningStatementLine   earningStatementLine;
        PayrollEarningStatementLine   retroEarningStatementLineOther, retroEarningStatementLine;
        PayrollEarningCode            earningCode, retroEarningCode;
        AmountCur                     newRate, priorRate, retroRate;

        earningStatementLine = PayrollEarningStatementLine::find(_earningLineRecId);

        if (earningStatementLine.EarningDate < fromRetroDate
            || earningStatementLine.EarningDate > toRetroDate
            || earningStatementLine.GenerationSource == PayrollGenerationSource::Salary)
        {
            return 0;
        }

        earningCode = PayrollEarningCode::find(earningStatementLine.EarningCode);

        if (earningCode.RetroactiveEarningCode == 0)
        {
            return 0;
        }

        retroEarningCode = PayrollEarningCode::find(earningCode.RetroactiveEarningCode);

        if (!retroEarningCode)
        {
            return 0;
        }

        //get the new rate from the fixed compensation changes
        newRate = earningStatementLine.computeRate();

        // get the possible other retro lines for this earning line
        select sum(earningRate) from retroEarningStatementLineOther
            where retroEarningStatementLineOther.GenerationSource == PayrollGenerationSource::Retroactive
                    && retroEarningStatementLineOther.OriginatingEarningStatementLine == _earningLineRecId;

        priorRate = earningStatementLine.EarningRate + retroEarningStatementLineOther.EarningRate;
        retroRate = newRate - priorRate;

        if (retroRate > 0)
        {
            retroEarningStatementLine.clear();
            retroEarningStatementLine.GenerationSource = PayrollGenerationSource::Retroactive;
            retroEarningStatementLine.PaymentStatus = PayrollPaymentProcessingStatus::None;
            retroEarningStatementLine.EarningStatement = earningStatementLine.EarningStatement;
            retroEarningStatementLine.Position = earningStatementLine.Position;
            retroEarningStatementLine.EarningCode = earningCode.RetroactiveEarningCode;
            retroEarningStatementLine.EarningDate = earningStatementLine.EarningDate;
            retroEarningStatementLine.AccountingDate = accountingDate;
            retroEarningStatementLine.OriginatingEarningStatementLine = earningStatementLine.RecId;
            retroEarningStatementLine.RetroactivePriorRate = priorRate;
            retroEarningStatementLine.WorkerTaxRegion = earningStatementLine.WorkerTaxRegion;
            retroEarningStatementLine.WorkerGLIBenefit = earningStatementLine.WorkerGLIBenefit;
            retroEarningStatementLine.WorkerCompensationBenefit = earningStatementLine.WorkerCompensationBenefit;
            retroEarningStatementLine.Quantity = earningStatementLine.Quantity;
            retroEarningStatementLine.EarningRate = retroRate;
            retroEarningStatementLine.AccountingCurrencyAmount = this.calculateAccountingCurrencyAmount(earningStatementLine, retroRate);
            retroEarningStatementLine.ProjId = earningStatementLine.ProjId;
            retroEarningStatementLine.setDefaultDimension();
            retroEarningStatementLine.setAccountingDistributionTemplate();

            if (retroEarningStatementLine.validateWrite())
            {
                retroEarningStatementLine.insert(true);
            }
        }

        return retroEarningStatementLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    private PayrollEarningAccountingCurrencyAmount calculateAccountingCurrencyAmount(
        PayrollEarningStatementLine _earningStatementLine,
        AmountCur _retroRate)
    {
        AmountCur calculatedAmount = _earningStatementLine.Quantity * _retroRate;
        return CurrencyExchange::round(calculatedAmount, Ledger::accountingCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        PayrollEarningStatementRecId                earningRecId;
        PayrollEarningStatementLineRecId            earningLineRecId;
        PayrollEarningStatementLine                 salaryEarningLine;
        HcmWorkerRecId                              workerRecId;
        HcmPositionRecId                            positionRecId;
        PayrollPayPeriodRecId                       payPeriodRecId;
        Container                                   batchTaskItem, salaryAdjustItem;
        Set                                         salaryAdjustSet;
        SetEnumerator                               enumerator;
        int                                         i;

        //
        // The calling process has supplied a container with a list of 1..n [earninglineRecId, workeRecId, positionRecId, payPeriodRecId]
        // The first round is to process the standard retroactive earnings
        // and setup the set of [workeRecId, positionRecId, payPeriodRecId] for the salary adjustments at the second round
        //
        workerSet = new Set(Types::Int64);
        salaryAdjustSet = new Set(Types::Container);
        earningLineCount = 0;

        for (i = 1; i <= conLen(batchTaskGroupList); i++)
        {
            batchTaskItem = conPeek(batchTaskGroupList, i);
            earningLineRecId = conPeek(batchTaskItem, 1);

            workerRecId = conPeek(batchTaskItem, 2);
            positionRecId = conPeek(batchTaskItem, 3);
            payPeriodRecId = conPeek(batchTaskItem, 4);

            if (positionRecId == 0 || workerRecId == 0 || payPeriodRecId == 0 )
            {
                continue;
            }

            try
            {
                if (earningLineRecId != 0 )
                {
                    if (this.processSingleRetroEarningLine(earningLineRecId) != 0)
                    {
                        earningLineCount++;
                        workerSet.add(workerRecId);
                    }
                }

                salaryAdjustItem = conNull();
                salaryAdjustItem += workerRecId;
                salaryAdjustItem += positionRecId;
                salaryAdjustItem += payPeriodRecId;
                salaryAdjustSet.add(salaryAdjustItem);
            }
            catch (Exception::Error)
            {
                // Assumes that any error message was already raised at the point that threw the exception, so continue to the next worker.
                continue;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    error(strFmt("@Payroll:DeadlockCreatingEarningForWorker1", HcmWorker::find(workerRecId).PersonnelNumber));
                    continue;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        error(strFmt("@Payroll:UpdateconfictCreatingEarningForWorker1", HcmWorker::find(workerRecId).PersonnelNumber));
                        continue;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    error(strFmt("@Payroll:UpdateconfictCreatingEarningForWorker1", HcmWorker::find(workerRecId).PersonnelNumber));
                    continue;
                }
            }
        }

        enumerator = salaryAdjustSet.getEnumerator();
        while (enumerator.moveNext())
        {
            try
            {
                salaryAdjustItem = enumerator.current();
                workerRecId = conPeek(salaryAdjustItem, 1);
                PayrollEarningGenerationTask::adjustSalaryEarning(conPeek(salaryAdjustItem, 3), workerRecId, conPeek(salaryAdjustItem, 2));

                // set the accounting date
                earningRecId = PayrollEarningStatement::findByWorkerPayPeriod(workerRecId, conPeek(salaryAdjustItem, 3)).RecId;
                select firstonly forUpdate * from salaryEarningLine
                    where salaryEarningLine.EarningStatement == earningRecId
                    && salaryEarningLine.GenerationSource == PayrollGenerationSource::Salary
                    && (salaryEarningLine.PaymentStatus == PayrollPaymentProcessingStatus::None
                    || salaryEarningLine.PaymentStatus == PayrollPaymentProcessingStatus::OnHold);

                if (salaryEarningLine.RecId != 0)
                {
                    ttsBegin;
                    salaryEarningLine.AccountingDate = accountingDate;
                    salaryEarningLine.update(true);
                    earningLineCount ++;
                    workerSet.add(workerRecId);
                    ttsCommit;
                }
            }
            catch (Exception::Error)
            {
                // Assumes that any error message was already raised at the point that threw the exception, so continue to the next worker.
                continue;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    error(strFmt("@Payroll:DeadlockCreatingEarningForWorker1", HcmWorker::find(workerRecId).PersonnelNumber));
                    continue;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        error(strFmt("@Payroll:UpdateconfictCreatingEarningForWorker1", HcmWorker::find(workerRecId).PersonnelNumber));
                        continue;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    error(strFmt("@Payroll:UpdateconfictCreatingEarningForWorker1", HcmWorker::find(workerRecId).PersonnelNumber));
                    continue;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;

                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PayrollRetroactiveEarningGenerationTask</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>PayrollRetroactiveEarningGenerationTask</c> class.
    /// </returns>
    public static PayrollRetroactiveEarningGenerationTask construct()
    {
        PayrollRetroactiveEarningGenerationTask retroEarningGenerationTask = new PayrollRetroactiveEarningGenerationTask();

        return retroEarningGenerationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>