<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendSettleCalcDiscount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Assists in settling transactions by calculating the discount on transactions.
/// </summary>
/// <remarks>
///    The methods in this class were pulled from the <c>CustVendOpenTransManager</c> class in order to
///    pull out the discount calculation.
/// </remarks>
class CustVendSettleCalcDiscount
{
    // Map used for caching current cash discount amounts
    // Key: CompanyId
    // Value: Inner Map used for cache
    //   Key: RecId
    //   Value: CashDiscAmount
    Map custVendTransOpenCashDiscAmountsCache;

    TransDate discountDate;

    SysModule module;

    DiscGraceDays graceDays;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineCashDiscAmountToTake</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the cash discount amount to take that corresponds to the open transaction in the
    ///    transaction currency.
    /// </summary>
    /// <param name="_custVendTransOpen">
    ///    The open transaction for which to get the cash discount amount.
    /// </param>
    /// <returns>
    ///    The cash discount amount to take for the open transaction.
    /// </returns>
    /// <remarks>
    ///    The cash discount to take is calculated as the discount amount minus the discount taken. The cash
    ///    discount to take will be zero when the use cash discount is never, or the open transaction is a
    ///    credit note and discount is not allowed on credit notes.
    /// </remarks>
    public CashDiscAmount determineCashDiscAmountToTake(CustVendTransOpen _custVendTransOpen)
    {
        CashDiscAmount cashDiscAmountToTake;
        CashDiscAmount fullCashDiscAmount;
        CashDiscAmount cashDiscAmountTaken
        ;

        // Get the full discount amount and discount already taken
        fullCashDiscAmount = this.getCustVendTransOpenCashDiscAmount(_custVendTransOpen);
        cashDiscAmountTaken = this.getCashDiscAmountTaken(_custVendTransOpen);

        cashDiscAmountToTake = fullCashDiscAmount - cashDiscAmountTaken;

        if ((abs(cashDiscAmountTaken) > abs(fullCashDiscAmount))
            || (_custVendTransOpen.UseCashDisc == UseCashDisc::Never))
        {
            cashDiscAmountToTake = 0;
        }

        // Validate discount on credit note if required
        if (_custVendTransOpen.UseCashDisc == UseCashDisc::Normal &&
            this.isCreditNote(_custVendTransOpen) &&
            this.findAllowCashDiscOnCreditNote(_custVendTransOpen.company()) == false)
        {
            cashDiscAmountToTake = 0;
        }

        return cashDiscAmountToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllowCashDiscOnCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds whether to the allow discount on credit note parameter.
    /// </summary>
    /// <param name="_company">
    ///    The company of the parameter.
    /// </param>
    /// <returns>
    ///    true if it allows a discount; otherwise, false.
    /// </returns>
    protected boolean findAllowCashDiscOnCreditNote(CompanyId _company)
    {
        CustParameters custParameters;
        VendParameters vendParameters;
        boolean cashDiscForPartialPaym;
        ;

        changecompany(_company)
        {
            // Get the specific/unspecific setting for the transaction company
            switch (module)
            {
                case SysModule::Cust:
                    custParameters = CustParameters::find();
                    cashDiscForPartialPaym = custParameters.CashDiscForCreditNote;
                    break;

                case SysModule::Vend:
                    vendParameters = VendParameters::find();
                    cashDiscForPartialPaym = vendParameters.CashDiscForCreditNote;
                    break;
            }
        }
        return cashDiscForPartialPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findApplicableCustVendTransCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the applicable cash discount transaction based on the <c>UseCashDisc</c> field of the open
    ///    transaction.
    /// </summary>
    /// <param name="_custVendTransOpen">
    ///    The open transaction for which to find the cash discount transaction.
    /// </param>
    /// <returns>
    ///    The <c>CustVendTransCashDisc</c> record found.
    /// </returns>
    /// <remarks>
    ///    If the <c>UseCashDisc</c> field is set to Never, this method returns the cash discount transaction
    ///    that corresponds to the due date.
    /// </remarks>
    public CustVendTransCashDisc findApplicableCustVendTransCashDisc(CustVendTransOpen _custVendTransOpen)
    {
        CustVendTransCashDisc cashDiscTrans;
        ;

        cashDiscTrans = CustVendSettleCalcDiscount::findApplicableCashDisc_Server(_custVendTransOpen, discountDate, graceDays);

        return cashDiscTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscAmountTaken</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the cash discount amount taken that corresponds to the open transaction in the transaction
    ///    currency.
    /// </summary>
    /// <param name="_custVendTransOpen">
    ///    The open transaction for which to get the cash discount amount.
    /// </param>
    /// <returns>
    ///    The cash discount amount taken in the transaction currency.
    /// </returns>
    public CashDiscAmount getCashDiscAmountTaken(CustVendTransOpen _custVendTransOpen)
    {
        CashDiscAmount cashDiscAmountTaken;
        ;

        changecompany(_custVendTransOpen.company())
        {
            cashDiscAmountTaken = _custVendTransOpen.getCashDiscAlreadyTaken();
        }

        return cashDiscAmountTaken;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenCashDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the cash discount amount for the specified open transaction.
    /// </summary>
    /// <param name="_custVendTransOpen">
    ///    The open transaction used to determine the cash discount amount.
    /// </param>
    /// <returns>
    ///    The cash discount amount for the open transaction.
    /// </returns>
    private CashDiscAmount getCustVendTransOpenCashDiscAmount(CustVendTransOpen _custVendTransOpen)
    {
        Map innerMap;
        CashDiscAmount cashDiscAmount;
        ;

        // Check cache for cash discount
        if (custVendTransOpenCashDiscAmountsCache.exists(_custVendTransOpen.company()))
        {
            // Company map exists, get inner map with cash discounts
            innerMap = custVendTransOpenCashDiscAmountsCache.lookup(_custVendTransOpen.company());

            if (innerMap.exists(_custVendTransOpen.RecId))
            {
                // Currency is tracked for open transaction, get from cache
                cashDiscAmount = innerMap.lookup(_custVendTransOpen.RecId);
            }
            else
            {
                // Currency is not tracked for open transaction, find in database
                cashDiscAmount = this.findApplicableCustVendTransCashDisc(_custVendTransOpen).CashDiscAmount;

                // Add currency to cache
                innerMap.insert(_custVendTransOpen.RecId, cashDiscAmount);
            }
        }
        else
        {
            // Cash discount for open transaction is not in cache - find in database
            cashDiscAmount = this.findApplicableCustVendTransCashDisc(_custVendTransOpen).CashDiscAmount;

            // Company map doesn't exist, initialize inner map
            innerMap = new Map(Types::Int64, Types::Real);

            // Track cash discount for open transaction
            innerMap.insert(_custVendTransOpen.RecId, cashDiscAmount);

            // Add to company map
            custVendTransOpenCashDiscAmountsCache.insert(_custVendTransOpen.company(), innerMap);
        }

        return cashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the open transaction is a credit note.
    /// </summary>
    /// <param name="_custVendTransOpen">
    ///    The open transaction.
    /// </param>
    /// <returns>
    ///    true if the open transaction is a credit note; otherwise, false.
    /// </returns>
    protected boolean isCreditNote(CustVendTransOpen _custVendTransOpen)
    {
        CustTrans custTrans;
        VendTrans vendTrans;
        boolean isCreditNote = false;
        ;

        changecompany(_custVendTransOpen.company())
        {
            if (module == SysModule::Cust)
            {
                custTrans = _custVendTransOpen.custTrans();
                if (custTrans.RecId != 0)
                {
                    isCreditNote = custTrans.isCreditNote();
                }
            }
            else
            {
                vendTrans = _custVendTransOpen.vendTrans();
                if (vendTrans.RecId != 0)
                {
                    isCreditNote = vendTrans.isCreditNote();
                }
            }
        }

        return isCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(SysModule _module)
    {
        custVendTransOpenCashDiscAmountsCache = new Map(Types::String, Types::Class);
        module = _module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendSettleCalcDiscount construct(SysModule _module)
    {
        return new CustVendSettleCalcDiscount(_module);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findApplicableCashDisc_Server</Name>
				<Source><![CDATA[
    private static CustVendTransCashDisc findApplicableCashDisc_Server(
        CustVendTransOpen _custVendTransOpen,
        TransDate _discountDate,
        DiscGraceDays _graceDays)
    {
        CustVendTransCashDisc cashDiscTrans;
        ;

        // Find applicable cash discount trans record - may be cross company
        changecompany(_custVendTransOpen.company())
        {
            switch (_custVendTransOpen.TableId)
            {
                case tablenum(CustTransOpen):
                    if (_custVendTransOpen.UseCashDisc == UseCashDisc::Normal ||
                        _custVendTransOpen.UseCashDisc == UseCashDisc::Always)
                    {
                        cashDiscTrans = CustTransCashDisc::findByUseCashDisc(tablenum(CustTransOpen),
                                            _custVendTransOpen.RecId,
                                            _custVendTransOpen.UseCashDisc,
                                            _discountDate,
                                            _graceDays);
                    }

                    if (_custVendTransOpen.UseCashDisc == UseCashDisc::Never ||cashDiscTrans.RecId == 0)
                    {
                        // Get the Due record if UseCashDisc == Never or no cash discount record was found
                        cashDiscTrans = CustTransCashDisc::findDue(tablenum(CustTransOpen), _custVendTransOpen.RecId, false);
                    }
                    break;

                case tablenum(VendTransOpen):
                    if (_custVendTransOpen.UseCashDisc == UseCashDisc::Normal ||
                        _custVendTransOpen.UseCashDisc == UseCashDisc::Always)
                    {
                        cashDiscTrans = VendTransCashDisc::findByUseCashDisc(tablenum(VendTransOpen),
                                            _custVendTransOpen.RecId,
                                            _custVendTransOpen.UseCashDisc,
                                            _discountDate,
                                            _graceDays);
                    }

                    if (_custVendTransOpen.UseCashDisc == UseCashDisc::Never ||cashDiscTrans.RecId == 0)
                    {
                        // Get the Due record if UseCashDisc == Never or no cash discount record was found
                        cashDiscTrans = VendTransCashDisc::findDue(tablenum(VendTransOpen), _custVendTransOpen.RecId, false);
                    }
                    break;
            }
        }

        return cashDiscTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>