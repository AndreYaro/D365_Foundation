<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransExtensionRGAmountHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransExtensionRGAmountHandler_IN</c> class is the handler of the tax trans extension RG amount.
/// </summary>
class TaxTransExtensionRGAmountHandler_IN extends TaxTransExtensionAmountHandler_IN
{
    TaxExciseAmountRegister_IN register;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>correctQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Corrects quantity of tax transaction.
    /// </summary>
    protected void correctQuantity()
    {
        if (register.IssueQty != 0)
        {
            taxTransExtension.Quantity = - register.IssueQty;
        }
        else if (register.ReceiptQty != 0)
        {
            taxTransExtension.Quantity = register.ReceiptQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataRegister</Name>
				<Source><![CDATA[
/// <summary>
    /// Sets data register information.
    /// </summary>
    protected void setDataRegister()
    {
        TaxModelExciseTaxable_IN             taxModelExciseTaxableLoc;

        taxModelExciseTaxableLoc = taxModelTaxable as TaxModelExciseTaxable_IN;
        taxTransExtension.ExciseRegisterType = NoYes::Yes;

        this.correctQuantity();

        switch (register.TableId)
        {
            case tableNum(ExciseRG23ARegister_IN) :
                taxTransExtension.ExciseRegister            = ExciseRegister_IN::RG23APartII;
                taxTransExtension.rg23aiiIdDate             = register.RGDate;
                taxTransExtension.rg23aiiNumberSequenceCode = register.NumberSequence;
                taxTransExtension.IsScrap                   = taxModelExciseTaxableLoc.isScrap();

                if (taxTransExtension.TaxType == TaxType_IN::Excise && taxTransExtension.TaxAmount == 0)
                   taxTransExtension.IsExciseWithoutDuty = NoYes::Yes;
                break;
            case tableNum(ExciseRG23CRegister_IN) :
                taxTransExtension.ExciseRegister            = ExciseRegister_IN::RG23CPartII;
                taxTransExtension.RG23CIIIdDate             = register.RGDate;
                taxTransExtension.rg23ciiNumberSequenceCode = register.NumberSequence;
                taxTransExtension.IsScrap                   = taxModelExciseTaxableLoc.isScrap();

                if (taxTransExtension.TaxType == TaxType_IN::Excise && taxTransExtension.TaxAmount == 0)
                   taxTransExtension.IsExciseWithoutDuty = NoYes::Yes;
                break;
            case tableNum(ExciseRG23DRegister_IN) :
                taxTransExtension.ExciseRegister            = ExciseRegister_IN::RG23D;
                taxTransExtension.RG23DNumberSequenceCode   = register.NumberSequence;
                break;
            case tableNum(ExcisePLARegister_IN) :
                taxTransExtension.ExciseRegister            = ExciseRegister_IN::PLA;
                taxTransExtension.plaEntryNumber            = register.NumberSequence;
                taxTransExtension.plaId                     = register.NumberSequence;
                taxTransExtension.plaIdDate                 = register.rgDate;
                taxTransExtension.plaAmount                 = taxTransExtension.PostedTaxAmout;
                break;
            case tableNum(ExciseDSARegister_IN) :
                taxTransExtension.ExciseRegister            = ExciseRegister_IN::DSA;
                taxTransExtension.dsaIdDate                 = register.RGDate;
                taxTransExtension.DSAIdNumberSequenceCode   = register.NumberSequence;
                taxTransExtension.DSAQuantity               = register.IssueQty ? register.IssueQty : register.ReceiptQty;
                taxTransExtension.IsScrap                   = taxModelExciseTaxableLoc.isScrap();

                if (taxTransExtension.TaxType == TaxType_IN::Excise && taxTransExtension.TaxAmount == 0)
                   taxTransExtension.IsExciseWithoutDuty = NoYes::Yes;
                break;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>setDataTax</Name>
				<Source><![CDATA[
        protected void setDataTax()
    {
        super();
        this.setDataRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExciseRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Excise Register for Amount
    /// </summary>
    /// <param name="_register">
    /// The given Excise Register
    /// </param>
    public void setExciseRegister(TaxExciseAmountRegister_IN _register)
    {
        register = _register;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>