<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ACOJournalTransData_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ACOJournalTransData_BR extends JournalTransData
{
    ACOJournalTransOverHead_BR    acoJournalTransOverHead;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findVoucher</Name>
				<Source><![CDATA[
    Voucher findVoucher()
    {
        ACOJournalTransOverHead_BR    tmpJournalTrans;
        Integer                       journalVoucherChange = journalTableData.journalTable().VoucherChange;

        switch (journalVoucherChange)
        {
            case TutorialJournalVoucherChange::DateChange         :
            case TutorialJournalVoucherChange::DateBalanceChange  :
                select firstonly Voucher from tmpJournalTrans
                    index hint KeyIdx
                    where tmpJournalTrans.JournalId    == acoJournalTransOverHead.JournalId &&
                          tmpJournalTrans.TransDate    == acoJournalTransOverHead.TransDate &&
                          tmpJournalTrans.Voucher;

                return tmpJournalTrans.Voucher;

            case TutorialJournalVoucherChange::DateItemChange     :
                select firstonly Voucher from tmpJournalTrans
                    index hint KeyIdx
                    where tmpJournalTrans.JournalId                 == acoJournalTransOverHead.JournalId &&
                          tmpJournalTrans.TransDate                 == acoJournalTransOverHead.TransDate &&
                          tmpJournalTrans.DimensionAttributeValue   == acoJournalTransOverHead.DimensionAttributeValue  &&
                          tmpJournalTrans.Voucher;

                return tmpJournalTrans.Voucher;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVoucher</Name>
				<Source><![CDATA[
    void initVoucher(Voucher _voucher_last, boolean _makeDecisionLater, boolean _initVoucherList = true)
    {
        journalVoucherList  voucherList = this.journalTableData().journalVoucherList();
        Integer             voucherChange;

        if (! this.mayChangeInitVoucher())
            return;

        voucherChange = this.journalTableData().journalTable().VoucherChange;

        switch (voucherChange)
        {
            case TutorialJournalVoucherChange::DateItemChange:
            case TutorialJournalVoucherChange::DateChange:
                this.initVoucherDateChange(_makeDecisionLater, _initVoucherList, voucherList);
                break;

            case TutorialJournalVoucherChange::DateBalanceChange:
                this.initVoucherDateBalanceChange(_voucher_last, _makeDecisionLater, voucherList);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVoucherDateBalanceChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new absorption cost journal voucher if the date or balance changes.
    /// </summary>
    /// <param name="_voucherLast">
    /// The last voucher record.
    /// </param>
    /// <param name="_makeDecisionLater">
    /// A boolean to determine the fetched voucher.
    /// </param>
    /// <param name="_voucherList">
    /// The journal voucher list.
    /// </param>
    protected void initVoucherDateBalanceChange(Voucher _voucherLast, boolean _makeDecisionLater, JournalVoucherList _voucherList)
    {
        ACOJournalVoucherObject_BR  voucherObject;

        if (!_voucherLast)
        {
            if (journalTrans.TransDate)
            {
                journalTrans.Voucher = this.journalTableData().journalVoucherNum().getNew(_makeDecisionLater);
                return;
            }
        }
        else if (_voucherList.find(_voucherLast))
        {
            voucherObject = _voucherList.item();

            if (voucherObject.exCostAmount() == 0)
            {
                journalTrans.Voucher = this.journalTableData().journalVoucherNum().getNew(_makeDecisionLater);
                return;
            }
        }

        journalTrans.Voucher = _voucherLast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVoucherDateChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new absorption cost journal voucher if the date changes.
    /// </summary>
    /// <param name="_makeDecisionlater">
    /// A boolean to determine the fetched voucher.
    /// </param>
    /// <param name="_initVoucherList">
    /// A boolean to determine the voucher list initialization.
    /// </param>
    /// <param name="_voucherList">
    /// The journal voucher list.
    /// </param>
    protected void initVoucherDateChange(boolean _makeDecisionlater, boolean _initVoucherList, JournalVoucherList _voucherList)
    {
        if (! this.isVoucherObjectKeyValid())
                    return;

        if (_voucherList.findIdx(this.voucherObjectKey()))
        {
            journalTrans.Voucher = _voucherList.item().voucher();
        }
        else
        {
            if (_initVoucherList)
                journalTrans.Voucher = this.findVoucher();

            if (journalTrans.Voucher)
                _voucherList.addJournalTransData(this,true);
            else
                journalTrans.Voucher = this.journalTableData().journalVoucherNum().getNew(_makeDecisionLater);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVoucherObjectKeyValid</Name>
				<Source><![CDATA[
    boolean isVoucherObjectKeyValid()
    {
        Integer journalVoucherChange = journalTableData.journalTable().VoucherChange;

        switch (journalVoucherChange)
        {
            case TutorialJournalVoucherChange::DateChange         :
            case TutorialJournalVoucherChange::DateBalanceChange  :
                return acoJournalTransOverHead.TransDate ? true : false;

            case TutorialJournalVoucherChange::DateItemChange     :
                return acoJournalTransOverHead.TransDate && acoJournalTransOverHead.DimensionAttributeValue ? true : false;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        JournalTransMap     _journalTrans,
        JournalTableData    _journalTableData)
    {
        ;
        acoJournalTransOverHead = _journalTrans;

        super(_journalTrans,_journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherObjectKey</Name>
				<Source><![CDATA[
    container voucherObjectKey()
    {
        Integer journalVoucherChange = journalTableData.journalTable().VoucherChange;

        switch (journalVoucherChange)
        {
            case TutorialJournalVoucherChange::DateChange         :
            case TutorialJournalVoucherChange::DateBalanceChange  :
                return [acoJournalTransOverHead.TransDate];
            case TutorialJournalVoucherChange::DateItemChange     :
                return [acoJournalTransOverHead.TransDate,acoJournalTransOverHead.DimensionAttributeValue];
        }
        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>