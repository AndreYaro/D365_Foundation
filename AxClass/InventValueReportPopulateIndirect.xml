<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportPopulateIndirect</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventValueReportPopulateIndirect</c> class generates report data for indirect cost
///    resources.
/// </summary>
public class InventValueReportPopulateIndirect extends InventValueReportPopulateResource implements CostIAsyncRunnable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs as an asynchronous task.
    /// </summary>
    /// <returns>The created asynchronous task.</returns>
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventValueReportPopulateIndirect),
                                                          staticMethodStr(InventValueReportPopulateIndirect, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventValueReportPopulateIndirect       dataCollectionTask = new InventValueReportPopulateIndirect();
        container                               packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);
        CostManagementInstrumentationLogger logger = CostManagementInstrumentationLogger::createLogger(classStr(InventValueReportPopulateIndirect));
        using (var activityContext = logger.inventoryValueReportActivity().populateIndirect(dataCollectionTask.parmInventValueReportContract().parmTransactionId()))
        {
            dataCollectionTask.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransactionsWithDynamicQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Collects current balance and transaction data for a particular indirect cost code.
    /// </summary>
    protected void buildTransactionsWithDynamicQuery()
    {
        InventValueReportTmpLine tmpReportLine;
        RecId                    defaultDimensionRecId = -1;
        InventSiteId             inventSiteId;

        Query q = new Query();
        QueryBuildDataSource qbdsIndirectTransView = q.addDataSource(tableNum(InventValueIndirectReportUnionAll));
        qbdsIndirectTransView.addRange(fieldNum(InventValueIndirectReportUnionAll, Code)).value(queryValue(resourceId));
        qbdsIndirectTransView.addRange(fieldNum(InventValueIndirectReportUnionAll, TransDate)).value(SysQuery::range(this.getActualFromDate(), maxDate()));
        qbdsIndirectTransView.orderMode(OrderMode::GroupBy);

        if (this.isDimensionLinkLocked())
        {
            qbdsIndirectTransView.addGroupByField(fieldNum(InventValueIndirectReportUnionAll, DefaultDimension));
        }

        this.copyRangesFromContractQuery(this.mapReportLineToReportView(), qbdsIndirectTransView);
        this.setDimensionRange(fieldNum(InventValueIndirectReportUnionAll, DefaultDimension), qbdsIndirectTransView);

        // select sum(field)
        qbdsIndirectTransView.addSelectionField(fieldNum(InventValueIndirectReportUnionAll, Amount), SelectionField::Sum);

        qbdsIndirectTransView.addGroupByField(fieldNum(InventValueIndirectReportUnionAll, LineType));
        qbdsIndirectTransView.addGroupByField(fieldNum(InventValueIndirectReportUnionAll, Code));
        qbdsIndirectTransView.addGroupByField(fieldNum(InventValueIndirectReportUnionAll, CostGroupId));

        if (inventValueReport.DetailLevel == TotalTrans::Trans)
        {
            qbdsIndirectTransView.addGroupByField(fieldNum(InventValueIndirectReportUnionAll, Voucher));
            qbdsIndirectTransView.addGroupByField(fieldNum(InventValueIndirectReportUnionAll, Reference));
        }

        // Group by dates regardless of DetailLevel value, so that the records with TransDate > ToDate could be deleted later
        qbdsIndirectTransView.addGroupByField(fieldNum(InventValueIndirectReportUnionAll, TransDate));
        qbdsIndirectTransView.addGroupByField(fieldNum(InventValueIndirectReportUnionAll, Posted));

        QueryRun qr = new QueryRun(q);
        while (qr.next())
        {
            InventValueIndirectReportUnionAll indirectTransView = qr.get(tableNum(InventValueIndirectReportUnionAll));

            if (this.isDimensionLinkLocked())
            {
                if (!DimensionDefaultFacade::areEqual(indirectTransView.DefaultDimension, defaultDimensionRecId))
                {
                    inventSiteId = this.getInventSiteId(indirectTransView.DefaultDimension);
                    defaultDimensionRecId = indirectTransView.DefaultDimension;
                }
            }

            // Only include blank site id if no range has been provided
            if (indirectTransView.Amount &&
                (inventSiteId != '' || this.getSiteIdRangeValue() == ''))
            {
                // Update transaction line
                if (inventValueReport.DetailLevel == TotalTrans::Trans)
                {
                    if (indirectTransView.TransDate <= this.getActualToDate()
                    &&  indirectTransView.LineType == InventValueReportLineType::Transaction)
                    {
                        tmpReportLine = this.findReportLine(InventValueReportLineType::Transaction, indirectTransView, inventSiteId);
                        this.updateReportLineBalance(tmpReportLine, 1, indirectTransView);
                        this.updateReportLine(tmpReportLine);
                    }

                    // Update beginning balance
                    if (inventValueReport.IncludeBeginningBalance)
                    {
                        tmpReportLine = this.findReportLine(InventValueReportLineType::BeginningBalance, indirectTransView, inventSiteId);
                        this.updateReportLineBalance(tmpReportLine, -1, indirectTransView);
                        this.updateReportLine(tmpReportLine);
                    }
                }
                else
                {
                    // Update ending balance
                    if (indirectTransView.TransDate > this.getActualToDate()
                     || indirectTransView.LineType == InventValueReportLineType::CurrentBalance)
                    {
                        tmpReportLine = this.findReportLine(InventValueReportLineType::EndingBalance, indirectTransView, inventSiteId);
                        this.updateReportLineBalance(tmpReportLine, -1, indirectTransView);
                        this.updateReportLine(tmpReportLine);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReportLine</Name>
				<Source><![CDATA[
    private InventValueReportTmpLine findReportLine(
        InventValueReportLineType           _lineType,
        InventValueIndirectReportUnionAll   _indirectTransView,
        InventSiteId                        _inventSiteId)
    {
        InventValueReportTmpLine tmpReportLine;

        tmpReportLine.clear();
        tmpReportLine.LineType          = _lineType;
        if (inventValueReport.ViewResourceId || inventValueReport.ViewResourceIdTotal)
        {
            tmpReportLine.ResourceId        = _indirectTransView.Code;
        }
        if (inventValueReport.ViewResourceGroup || inventValueReport.ViewResourceGroupTotal)
        {
            tmpReportLine.ResourceGroupId   = _indirectTransView.CostGroupId;
        }
        tmpReportLine.ResourceType      = this.resourceType();
        switch (_lineType)
        {
            case InventValueReportLineType::Transaction:
                tmpReportLine.Voucher           = _indirectTransView.Voucher;
                tmpReportLine.TransDate         = _indirectTransView.TransDate;
                tmpReportLine.Reference         = _indirectTransView.Reference;
                tmpReportLine.ReferenceCategory = InventTransType::ProdLine;
                break;
            case InventValueReportLineType::BeginningBalance:
                tmpReportLine.ReferenceCategory = InventTransType::SummedUp;
                tmpReportLine.TransDate = this.getActualFromDate();
                break;
            case InventValueReportLineType::EndingBalance:
                tmpReportLine.ReferenceCategory = InventTransType::SummedUp;
                tmpReportLine.TransDate = this.getActualToDate();
                break;
        }

        if (this.isDimensionLinkLocked())
        {
            tmpReportLine.InventSiteId = _inventSiteId;
        }

        reportLines.find(tmpReportLine);

        return tmpReportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapReportLineToReportView</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Map fields from <c>InventValueReportTmpLine</c> to fields in <c>InventValueIndirectReportUnionAll</c>.
    /// </summary>
    /// <returns>
    ///     A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in <c>InventValueIndirectReportUnionAll</c>.
    /// </returns>
    protected Map mapReportLineToReportView()
    {
        Map map = new Map(Types::Integer, Types::Integer);

        map.insert(fieldNum(InventValueReportTmpLine, Reference), fieldNum(InventValueIndirectReportUnionAll, Reference));

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceType</Name>
				<Source><![CDATA[
    protected InventValueReportResourceType resourceType()
    {
        return InventValueReportResourceType::Indirect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportLineBalance</Name>
				<Source><![CDATA[
    private void updateReportLineBalance(
        InventValueReportTmpLine            _tmpReportLine,
        int                                 _sign,
        InventValueIndirectReportUnionAll   _indirectTransView)
    {
        if (_indirectTransView.Posted == NoYes::Yes)
        {
            _tmpReportLine.wipPhysicalPostedAmount += _indirectTransView.Amount * _sign;
        }
        else
        {
            _tmpReportLine.wipPhysicalNonPostedAmount += _indirectTransView.Amount * _sign;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueReportPopulateIndirect construct()
    {
        return new InventValueReportPopulateIndirect();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>