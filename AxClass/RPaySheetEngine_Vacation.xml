<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPaySheetEngine_Vacation</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPaySheetEngine_Vacation extends RPaySheetEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSheetTrans</Name>
				<Source><![CDATA[
        public void createSheetTrans()
    {
        Args                           args = new Args();
        FormRun                        ctrl_formRun;
        FormDataSource                 rPayAverageEarnEmplPeriodTable_Ds;
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        RPaySheetTrans                 paySheetTransLocal;
        RPayAmount                     sumSheet;
        void addRecord()
        {
            RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTableLocal;
            RPayAverageEarnValue           averageEarnValue;
            RPayTrans   payTrans;

            Amount  taxAmount;

            rPayAverageEarnEmplPeriodTableLocal = RPayAverageEarnEmplPeriodTable::findRecId(rPayAverageEarnEmplPeriodTable.RecId, true);

            if (RPayParameters::payPeriod(rPayAverageEarnEmplPeriodTableLocal.EmplId) == endMth(ctrlPayPeriod.dateValue()))
            {
                while select payTrans
                    where payTrans.SourceTableId == rPayAverageEarnEmplPeriodTableLocal.TableId &&
                          payTrans.SourceRecId   == rPayAverageEarnEmplPeriodTableLocal.RecId
                {
                    taxAmount += this.calcTaxAmount(payTrans);
                }

                while select payTrans
                    join RecId from averageEarnValue
                    where payTrans.SourceTableId == averageEarnValue.TableId &&
                          payTrans.SourceRecId   == averageEarnValue.RecId   &&
                          averageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTableLocal.RecId
                {
                    taxAmount += this.calcTaxAmount(payTrans);
                }

                //if tax refunding
                if (taxAmount < 0)
                {
                    taxAmount = 0;
                }

                paySheetTransLocal.SheetTableRecId  = paySheetTable.RecId;
                paySheetTransLocal.Emplid           = rPayAverageEarnEmplPeriodTableLocal.EmplId;
                paySheetTransLocal.TaxAmount        = taxAmount;
                paySheetTransLocal.Amount           = rPayAverageEarnEmplPeriodTableLocal.SumOnHand - taxAmount;
                paySheetTransLocal.BankPayment      = RHRMEmplTable::find(rPayAverageEarnEmplPeriodTableLocal.EmplId).PayBankPayment;
                if (paySheetTransLocal.TaxAmount != 0)
                {
                    paySheetTransLocal.BranchId = RPaySheetEngine::getBranchId(paySheetTransLocal.Emplid, endmth(paySheetTable.PayPeriod));
                }
                if (!paySheetTransLocal.validateWrite())
                    throw Exception::Error;
                paySheetTransLocal.insert();
                rPayAverageEarnEmplPeriodTableLocal.SheetTableRecid = paySheetTable.RecId;
                rPayAverageEarnEmplPeriodTableLocal.update();
                sumSheet += rPayAverageEarnEmplPeriodTableLocal.SumOnHand - taxAmount;
            }
        }
        ;
        args.name(formstr(RPaySheetVacationAdd));
        args.parm(date2StrUsr(endmth(ctrlPayPeriod.dateValue()), DateFlags::None));
        ctrl_formRun = classfactory.formRunClass(args);
        ctrl_formRun.init();
        ctrl_formRun.run();
        ctrl_formRun.wait();
        if (ctrl_formRun.closedOk())
        {
            rPayAverageEarnEmplPeriodTable_Ds = ctrl_formRun.dataSource(tablestr(RPayAverageEarnEmplPeriodTable));

            ttsbegin;

            if (rPayAverageEarnEmplPeriodTable_Ds.anyMarked())
            {
                for (rPayAverageEarnEmplPeriodTable = rPayAverageEarnEmplPeriodTable_Ds.getFirst(true,false);rPayAverageEarnEmplPeriodTable;
                    rPayAverageEarnEmplPeriodTable = rPayAverageEarnEmplPeriodTable_Ds.getNext())
                {
                    addRecord();
                }
            }
            else
            {
                rPayAverageEarnEmplPeriodTable = rPayAverageEarnEmplPeriodTable_Ds.cursor();
                if (rPayAverageEarnEmplPeriodTable.RecId)
                {
                    addRecord();
                }
            }

            ttscommit;

            if (sumSheet > 0)
            {
                paySheetTable.SumSheet += sumSheet;
                sheetTableDs.write();
                sheetTransDs.research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSheet</Name>
				<Source><![CDATA[
        public void deleteSheet()
    {
        RPaySheetTrans                 paySheetTrans;
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;

        ttsbegin;

        super();

        while select SheetTableRecId, Emplid from paySheetTrans
            where paySheetTrans.SheetTableRecId == paySheetTable.RecId
        {
            select firstonly forupdate rPayAverageEarnEmplPeriodTable
                where rPayAverageEarnEmplPeriodTable.SheetTableRecid == paySheetTrans.SheetTableRecId &&
                      rPayAverageEarnEmplPeriodTable.EmplId          == paySheetTrans.Emplid;
            if (rPayAverageEarnEmplPeriodTable.RecId)
            {
                rPayAverageEarnEmplPeriodTable.SheetTableRecid = 0;
                rPayAverageEarnEmplPeriodTable.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTrans</Name>
				<Source><![CDATA[
        public void deleteTrans()
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        RPaySheetTrans                 paySheetTrans;
        super();

        paySheetTrans = sheetTransDs.cursor();

        ttsbegin;

        select firstonly forupdate rPayAverageEarnEmplPeriodTable
             where rPayAverageEarnEmplPeriodTable.SheetTableRecid == paySheetTrans.SheetTableRecId &&
                   rPayAverageEarnEmplPeriodTable.EmplId          == paySheetTrans.Emplid;

        if (rPayAverageEarnEmplPeriodTable.RecId)
        {
            rPayAverageEarnEmplPeriodTable.SheetTableRecid = 0;
            rPayAverageEarnEmplPeriodTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        protected TempStr description()
    {
        return "@RUP545";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaySheetTable</Name>
				<Source><![CDATA[
        public void initPaySheetTable()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(FormRun _formRun)
    {
        super(_formRun);
        ctrlCreate.visible(false);
        ctrlDeleteAll.visible(false);
        ctrlPrint.visible(true);
        ctrlPay.visible(true);
        ctrlSetSumm.visible(false);
        ctrlQuery.visible(true);
        ctrlQuery.text("@SYS53102");
        ctrlPaySheetType.visible(false);
        ctrlTax.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>passToCash</Name>
				<Source><![CDATA[
        #AviFiles
    public boolean passToCash()
    {
        SysOperationProgress operationProgress;
        RPayTrans            payTrans;
        RPaySheetTrans       paySheetTrans;
        if (! super())
        {
            return false;
        }

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption("@RUP542" + paySheetTable.PaySheetNum);
        operationProgress.setAnimation(#AviUpdate);

        select count(RecId) from paySheetTrans
            where paySheetTrans.SheetTableRecId == paySheetTable.RecId;

        operationProgress.setTotal(paySheetTrans.RecId);

        ttsbegin;

        while select Emplid, Amount, TableId, RecId from  paySheetTrans
            where paySheetTrans.SheetTableRecId == paySheetTable.RecId
        {
            operationProgress.setText("@RUP372" + paySheetTrans.Emplid);
            operationProgress.incCount();
            payTrans.Amount = -paySheetTrans.Amount;
            payTrans.TransDate = paySheetTable.TransDate;
            payTrans.PayPeriod = endmth(ctrlPayPeriod.dateValue());
            payTrans.SourceDate = endmth(ctrlPayPeriod.dateValue());
            payTrans.SourceTableId = paySheetTrans.TableId;
            payTrans.SourceRecId = paySheetTrans.RecId;
            payTrans.Emplid = paySheetTrans.Emplid;
            payTrans.HrmOrganisationId = RHRMEmplTable::find(paySheetTrans.Emplid).PayHRMOrganizationId;
            payTrans.PayCtype = RPayParameters::find().PayCostMrv;
            payTrans.updatePosting();
            payTrans.doInsert();
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetType</Name>
				<Source><![CDATA[
        protected RPaySheetType paySheetType()
    {
        return RPaySheetType::Vacation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
        public void updateFormDesign()
    {
        super();
        if (! this.canSheetChange(false))
        {
            sheetTableDs.allowCreate(false);
        }
        sheetTransDs.allowCreate(false);
        sheetTransDs.allowEdit(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>