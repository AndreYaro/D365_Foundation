<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>SmmCampaignTargetSelection</Name>
  <SourceCode>
    <Declaration><![CDATA[
class SmmCampaignTargetSelection
{
    #define.AND("AND ")
    #define.ANDSearch(" AND ")
    #define.OR("OR ")
    #define.ORSearch(" OR ")
    #define.ADD('+')
    #define.SUB('-')
    #define.tmp("TMP")

    smmCampaignId campaignId;

    Map         resMap;

    #define.semicolon(';')

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>checkSyntax</Name>
        <Source><![CDATA[
        public boolean checkSyntax(smmCampaignSelectionExpression _expression)
    {
        // This function is used to locate syntax errors.
        // Errors to be found:
        // 1. Unequal numbers of start- and endparanthesis
        // 2. Missing operator (in this.validateVariables())
        // 3. Unknown variable (in this.validateVariables())
        // Returns true if no errors found, else false

        int         startParPos;
        int         endParPos;
        int         countStartPar;
        int         countEndPar;
        boolean     validate = true;

        infolog.clearBrowser();

        do
        {   // Count the numbers of start- and endparanthesis
            startParPos = strScan(_expression, '(', startParPos + 1, strLen(_expression));
            endParPos   = strScan(_expression, ')', endParPos + 1, strLen(_expression));

            if (startParPos)
            {
                countStartPar++;
            }

            if (endParpos)
            {
                countEndPar++;
            }
        } while (startParPos || endParPos);

        if (countStartPar > countEndPar)
        {
            // More '(' than ')'
            validate = false;
            // Missing parenthesis )
            warning("@SYS80700");
        }
        else
        if (countStartPar < countEndPar)
        {
            // More ')' than '('
            validate = false;
            // Missing parenthesis (
            warning("@SYS80701");
        }

        if (!this.validateVariables(_expression))
        {
            validate = false;
        }

        return validate;
    }
]]></Source>
      </Method>
      <Method>
        <Name>con2resMap</Name>
        <Source><![CDATA[
        void con2resMap(Container _conRes)
    {
        //filling with the values of the container into a map.
        str         tmpValue,tmpContact,tmpBusRel;
        int         i, len, pos;

        resMap = New Map(Types::String, Types::String);

        len = conlen(_conRes);
        for (i=1;i <= len;i++)
        {
            tmpValue    = conPeek(_conRes,i);
            pos         = strscan(tmpValue, #semicolon, 0,strlen(tmpValue));
            tmpContact  = substr(tmpValue, pos + 1, strlen(tmpValue));
            tmpBusRel   = substr(tmpValue, 0, pos - 1);

            resMap.insert(tmpContact, tmpBusRel);
        }
    }
]]></Source>
      </Method>
      <Method>
        <Name>findFirstOperatorPos</Name>
        <Source><![CDATA[
        private int findFirstOperatorPos(smmCampaignSelectionExpression _expression)
    {   // This function finds the first occurence of each of the predefined operators.
        // Then it uses findLeast to find the first occurence of them all, and returns
        // the startposition of the operator. If no operators is found, 0 is returned.

        int opADD;
        int opSUB;
        int opAND;
        int opOR;

        opADD = strFind(_expression, #ADD, 0, strLen(_expression));
        opSUB = strFind(_expression, #SUB, 0, strLen(_expression));
        opAND = strScan(_expression, #ANDSearch, 0, strLen(_expression));
        opOR  = strScan(_expression, #ORSearch , 0, strLen(_expression));

        return this.findLeast(opADD, opSUB, opAND, opOR);
    }
]]></Source>
      </Method>
      <Method>
        <Name>findLeast</Name>
        <Source><![CDATA[
        private int findLeast(int _p1, int _p2, int _p3 = 0, int _p4 = 0, int _exclude = 0)
    {
        // This function returns the integer with the smallest value.
        // Parameters with values = 0 is ignored, unless all given parameters = 0
        // Optionally _exclude can be used to exclude a specific value.
        // If the smallest integer is equal to _exclude, the next smallest value is returned.

        int result;

        result = 2147483647;

        if (_p1 != 0 && _p1 != _exclude && _p1 < result)
        {
            result = _p1;
        }

        if (_p2 != 0 && _p2 != _exclude && _p2 < result)
        {
            result = _p2;
        }

        if (_p3 != 0 && _p3 != _exclude && _p3 < result)
        {
            result = _p3;
        }

        if (_p4 != 0 && _p4 != _exclude && _p4 < result)
        {
            result = _p4;
        }

        if (result < 2147483647)
        {
            return result;
        }

        return 0;
    }
]]></Source>
      </Method>
      <Method>
        <Name>findOperator</Name>
        <Source><![CDATA[
        private str findOperator(smmCampaignSelectionExpression _expression)
    {   // Finds the first operator and returns the type of operator.
        // If an operator found by 'this.findFirstOperatorPos()' is a
        // mismatch then an empty string is returned.

        int operatorPos;

        operatorPos = this.findFirstOperatorPos(_expression);

        if (strFind(_expression, #ADD ,operatorPos, 3))
        {
            return #ADD;
        }

        if (strFind(_expression, #SUB, operatorPos, 3))
        {
            return #SUB;
        }

        if (strScan(_expression, #ANDSearch, operatorPos, 3))
        {
            return #AND;
        }

        if (strScan(_expression, #ORSearch , operatorPos, 3))
        {
            return #OR;
        }

        return '';
    }
]]></Source>
      </Method>
      <Method>
        <Name>insertTmpSelection</Name>
        <Source><![CDATA[
        private void insertTmpSelection(container _set, smmCampaignQueryName _queryName)
    {   // TmpSelections are used to calculate temporary results from subexpressions.
        // This function will insert a set (the temporary result) represented by a container
        // into the temporary table.

        int                      i;
        str                      dirContact;
        smmCampaignTempSelection campaignTmpSel;
        RecordInsertList         recordInsertList = new RecordInsertList(tableNum(smmCampaignTempSelection),true,true,true);

        for (i = 1; i <= conLen(_set); i++)
        {
            dirContact = conPeek(_set, i);
            campaignTmpSel.clear();

            campaignTmpSel.CampaignId      = campaignId;
            campaignTmpSel.ContactPersonId = subStr(dirContact, strScan(dirContact, #semicolon, 0, strLen(dirContact)) + 1, strLen(dirContact));
            campaignTmpSel.Party           = str2int64(subStr(dirContact, 0, strScan(dirContact, #semicolon, 0, strLen(dirContact)) - 1));
            campaignTmpSel.NameId          = _queryName;

            recordInsertList.add(campaignTmpSel);
        }

        recordInsertList.insertDatabase();
    }
]]></Source>
      </Method>
      <Method>
        <Name>joinSets</Name>
        <Source><![CDATA[
        private container joinSets(container _set1, container _set2, str _operator)
    {
        // This function takes two containers where the container items is presented as (dirAccount;contactPersonId)
        // The operator decides how the sets should be joined. The calculated result is returned as a container in the format presented above.

        int         pos;
        str         tmpValue,tmpBusRel, tmpContact;

        int         i;
        container   result;

        // The items in set1 is copied to the result set.
        result = _set1;

        switch (_operator)
        {
            case #ADD   : //All the items in set1 and set2 are returned (No duplicates).
                        this.con2resMap(result);
                        result = connull();

                        for (i =1 ; i <= conlen(_set2); i++)
                        {
                            tmpValue    = conPeek(_set2,i);
                            pos         = strscan(tmpValue, #semicolon, 0,strlen(tmpValue));
                            tmpContact  = substr(tmpValue, pos + 1, strlen(tmpValue));

                            if (!resMap.exists(tmpContact))
                            {
                                tmpBusRel = substr(tmpValue, 0, pos - 1);
                                resMap.insert(tmpContact, tmpBusRel);
                            }
                        }
                        result = this.Map2Result(resMap);
                        break;

            case #SUB   : // All the items in set1 which is not presented in set2 are returned.

                        this.con2resMap(result);
                        result = connull();

                        for (i = 1; i <= conLen(_set2); i++)
                        {
                            tmpValue    = conPeek(_set2,i);
                            pos         = strscan(tmpValue, #semicolon, 0,strlen(tmpValue));
                            tmpContact  = substr(tmpValue, pos + 1, strlen(tmpValue));

                            if (resMap.exists(tmpContact))
                            {
                                resMap.remove(tmpContact);
                            }
                        }
                        result = this.Map2Result(resMap);
                        break;

            case #AND:  // All the items which is presented in both set1 and set2 are returned.
                        this.con2resMap(result);
                        result = connull();

                        for (i = 1; i <= conlen(_set2); i++)
                        {
                            tmpValue    = conPeek(_set2,i);
                            pos         = strscan(tmpValue, #semicolon, 0,strlen(tmpValue));
                            tmpContact  = substr(tmpValue, pos + 1, strlen(tmpValue));

                            if (resMap.exists(tmpContact))
                            {
                                result += tmpValue;
                            }
                        }
                        break;

            case #OR : // All items presented in either set1 or set2 are returned
                       this.con2resMap(result);
                       result = connull();

                        for (i =1 ; i <= conLen(_set2); i++)
                        {
                            tmpValue    = conPeek(_set2,i);
                            pos         = strscan(tmpValue, #semicolon, 0,strlen(tmpValue));
                            tmpContact  = substr(tmpValue, pos + 1, strlen(tmpValue));

                            if (!resMap.exists(tmpContact))
                            {
                                tmpBusRel = substr(tmpValue, 0, pos - 1);
                                resMap.insert(tmpContact, tmpBusRel);
                            }
                        }
                        result = this.Map2Result(resMap);

                        break;
            default :   // Operator mismatch
        }

        return result;
    }
]]></Source>
      </Method>
      <Method>
        <Name>map2Result</Name>
        <Source><![CDATA[
        Container map2Result(Map _map)
    {
        //filling with the values of the map into a container. get the results.
        Container   con;
        MapIterator mi = new MapIterator(_map);
        str         busRelContact;
        while (mi.more())
        {
            busRelContact = mi.value() + #semicolon + mi.key();
            con += busRelContact;
            mi.next();
        }
        return con;
    }
]]></Source>
      </Method>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
        public void new(smmCampaignId _campaignId)
    {
        campaignId = _campaignId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>solveExpression</Name>
        <Source><![CDATA[
    public void solveExpression(smmCampaignSelectionExpression _expression)
    {   // This function splits the expression into subexpressions to remove the paranthesis.
        // If the expression contains no paranthesis, the expression is passed unchanged
        // to solveSimpleExpression.

        #define.semicolon(';')

        int                         i;
        int                         startpos = 1;
        int                         counter;
        str                         tmpName;
        str                         dirContact;
        str                         expression;
        int                         endpos;
        container                   baseSet;
        smmCampaignSelectionResult  campaignSelectionRes;
        RecordInsertList            ril             = new RecordInsertList(tablenum(smmCampaignSelectionResult),true,true,true);
        Set                         setDuplCheck    = new Set(Types::String);

        expression = _expression;

        do
        {   // This loop will continue as long as there is found EndParanthesis
            endpos   = strScan(expression, ')', endpos, strLen(expression));

            if (endpos)
            {
                counter++;
                tmpName = #tmp + int2str(counter);
                startpos = strScan(expression, '(', endpos, -endpos);
                // the inner expression is now represented within startpos+1 and endpos-1.
                // This expression will be solved and its result will be inserted into the temporary result table
                // with tmpName as its identifier.
                baseSet = this.solveSimpleExpression(subStr(expression, startpos + 1, (endpos - 1) - startpos));
                this.insertTmpSelection(baseSet, tmpName);

                // Defining the remainders of the expression as a new expression.
                // The newly solved expression is identifed as the value of tmpName.
                expression = strDel(expression, startpos, (endpos + 1) - startpos);
                expression = strIns(expression, tmpName, startpos);
                endpos++;
            }
        } while (endpos);

        baseSet = this.solveSimpleExpression(expression);
        //The result is now represented by the contents of baseSet

        for (i = counter; i >= 0; i--)
        {   // Cleaning up the temporary results
            smmCampaignTempSelection::deleteRows(campaignId, #tmp + int2str(i));
        }

        // Deleting previous results
        smmCampaignSelectionResult::deleteRows(campaignId);

        for (i = 1; i <= conLen(baseSet); i++)
        {   // Inserting the result into the main table
            dirContact = conPeek(baseSet,i);

            campaignSelectionRes.clear();

            campaignSelectionRes.CampaignId      = campaignId;
            campaignSelectionRes.ContactPersonId = subStr(dirContact, strScan(dirContact, #semicolon, 0, strLen(dirContact)) + 1, strLen(dirContact));
            campaignSelectionRes.Party     = str2int64(subStr(dirContact, 0, strScan(dirContact, #semicolon, 0, strLen(dirContact)) - 1));

            //avoid duplicate contacts (busRelAccount;contactPersonId)
            if (setDuplCheck.add(dirContact)) // this is false if the key already exists
            {
               //insert selection record
               ril.add(campaignSelectionRes);
            }
        }
        ril.insertDatabase();
    }
]]></Source>
      </Method>
      <Method>
        <Name>solveSimpleExpression</Name>
        <Source><![CDATA[
        private container solveSimpleExpression(smmCampaignSelectionExpression _simpleExpression)
    {   // Receives a simpler part of the complex expression. This contains no paranthesis.

        container   baseSet;
        container   subSet;
        str         operator = '';
        str         subExp;
        str         subExpression;
        int         subExpLen;

        subExpression = _simpleExpression;

        while (strLen(subExpression))
        {
            subExpLen = this.findFirstOperatorPos(subExpression);

            if (subExpLen == 0)
            {   // No operator found, _simpleExpression is a variable.
                subExpLen = strLen(_simpleExpression);
            }
            else
            {   // excludes the operator.
                subExpLen = subExpLen -1;
            }

            // Retrives the remainder of the expression.
            subExp = subStr(subExpression, 0, subExpLen);

            if (operator == '')
            {   // First loop, first variable is to be solved, no operator of consideration.
                // baseSet is assigned the set belonging to the query name represented by subExp.
                baseSet = smmCampaignTempSelection::getSelection(campaignId, strAlpha(subExp));
            }
            else
            {   // subSet is assigned the set belonging to the query name represented by subExp.
                // baseSet is assigned the result of calculation of baseSet and subSet.
                subSet = smmCampaignTempSelection::getSelection(campaignId, strAlpha(subExp));
                baseSet = this.joinSets(baseSet, subSet, operator);
            }

            operator = this.findOperator(subStr(subExpression, subExpLen + 1, strLen(subExpression)));
            subExpression = strLTrim(subStr(subExpression, subExpLen + strLen(operator) + 1, strLen(subExpression)));
        }

        return baseSet;
    }
]]></Source>
      </Method>
      <Method>
        <Name>validateVariables</Name>
        <Source><![CDATA[
        private boolean validateVariables(smmCampaignSelectionExpression _expression)
    {
        // This function searches for syntax errors:
        // 1. Missing operators
        // 2. Unknown variables
        // Returns true if no errors found, else false

        #define.blank(' ')

        int                             blankPos;
        str                             variable;
        str                             variableSub;
        str                             operator;
        smmCampaignSelectionExpression  expression;
        boolean                         validate    = true;
        int                             operatorPos = 1;

        // Removes all paranthesis from expression.
        expression = strRem(_expression, '()');

        while (operatorPos)
        {
            // Finds the first occurence of an operator and determines the type
            operatorPos     = this.findFirstOperatorPos(expression);
            operator        = this.findOperator(expression);

            if (operatorPos)
            {   // Retrieves the variable from the expression and removes this and the operator from the expression.
                variable    = strRTrim(strLTrim((subStr(expression, 0, operatorPos - 1))));
                expression = subStr(expression, operatorPos + strLen(operator), strLen(expression) - (operatorPos));
            }
            else
            {   // No operator is found, the entire expression is treated as a variable
                variable = strLTrim(strRTrim(strRTrim(expression)));
            }

            // Searches for spaces
            blankPos = strFind(variable, #blank, 0, strLen(variable));

            if (blankPos)
            {   // Variables consists of one name without spaces.
                // If spaces are found there should have been an operator, and
                // it may consist of more variables.

                validate = false;
                // Missing operator between variables:
                warning("@SYS80698" + #blank + variable);

                while (blankPos)
                {
                    // Retrieves all names from the variable
                    variableSub = strRTrim(strLTrim((subStr(variable, 0, blankPos - 1))));
                    variable    = strLTrim(subStr(variable, blankPos + 1, strLen(variable) - blankPos));

                    // If this name (variableSub) doesn't represent a known queryname, an error messages is added to the InfoLog.
                    if (!smmCampaignQuery::exist(campaignId, variableSub))
                    {
                        // Unknown variable:
                        warning("@SYS80699" + #blank + variableSub);
                    }

                    blankPos = strFind(variable, #blank, 0, strLen(variable));
                }
            }

            if (!smmCampaignQuery::exist(campaignId, variable))
            {
                // If this name (variable) doesn't represent a known queryname,
                // an error messages is added to the InfoLog.
                validate = false;
                // Unknown variable:
                warning("@SYS80699" + variable);
            }
        }

        return validate;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>