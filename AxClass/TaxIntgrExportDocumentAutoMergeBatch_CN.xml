<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentAutoMergeBatch_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntgrExportDocumentAutoMergeBatch_CN</c> class handles the auto merge operation.
/// </summary>
class TaxIntgrExportDocumentAutoMergeBatch_CN extends TaxIntgrExportDocumentAutoSplitBatch_CN implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyMandatoryRange</Name>
				<Source><![CDATA[
    protected void applyMandatoryRange()
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;

        dataSource = queryRun.query().dataSourceTable(tableNum(TaxIntgrExportDocument_CN));
        if (dataSource)
        {
            range = SysQuery::findOrCreateRange(dataSource, fieldNum(TaxIntgrExportDocument_CN, IsExported));
            range.status(RangeStatus::Hidden);
            range.value(SysQuery::value(NoYes::No));

            range = SysQuery::findOrCreateRange(dataSource, fieldNum(TaxIntgrExportDocument_CN, IsOverAmountLimit));
            range.status(RangeStatus::Hidden);
            range.value(SysQuery::value(NoYes::No));
        }
        dataSource = queryRun.query().dataSourceTable(tableNum(TaxIntgrExportDocumentOperation_CN));
        if (dataSource)
        {
            range = SysQuery::findOrCreateRange(dataSource, fieldNum(TaxIntgrExportDocumentOperation_CN, OperationType));
            range.status(RangeStatus::Hidden);
            range.value(SysQuery::value(TaxIntgrExportDocumentOperationType_CN::None));
        }

        dataSource = queryRun.query().dataSourceTable(tableNum(TaxIntgrExportDocumentSource_CN));
        dataSource.addOrderByField(fieldNum(TaxIntgrExportDocumentSource_CN, TransactionCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.applyMandatoryRange();

        TaxIntgrExportDocumentAutoMergeBatch_CN::doAutoMerge(queryRun.query().pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>TaxIntgrExportDocumentAutoSplitBatch_CN</c>
    /// </summary>
    /// <returns>
    /// An instance of <c>TaxIntgrExportDocumentAutoSplitBatch_CN</c>.
    /// </returns>
    public static TaxIntgrExportDocumentAutoMergeBatch_CN construct()
    {
        return new TaxIntgrExportDocumentAutoMergeBatch_CN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAutoMerge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perfroms the actual merge.
    /// </summary>
    /// <param name="_queryPack">
    /// The query pack.
    /// </param>
    private static void doAutoMerge(container _queryPack)
    {
        SysOperationProgress            progressLocal;
        #avifiles
        Query                           querySource;
        Map                             mapOfsource;
        MapEnumerator                   enumerator;
        List                            listOfRecords;
        ListEnumerator                  ListEnumerator;
        Set                             setOfSource;
        Set                             setofDocId;

        AmountCur                       totalAmount;
        int                             invoiceCount;
        TaxIntgrExportDocumentSource_CN curExportDocumentSource;
        TaxIntgrExportDocumentId_CN     curExportDocumentId;

        querySource = new Query(_queryPack);
        mapOfsource = TaxIntgrExportDocumentAutoMergeBatch_CN::getMapOfSources(querySource);

        progressLocal = SysOperationProgress::newGeneral(#AviFormLetter, "@SYS4002226", mapOfsource.elements());
        enumerator = mapOfsource.getEnumerator();
        while (enumerator.moveNext())
        {
            listOfRecords = enumerator.currentValue();
            ListEnumerator = listOfRecords.getEnumerator();

            setOfSource = new Set(Types::Int64);
            setofDocId = new Set(Types::String);
            totalAmount = 0;

            while (ListEnumerator.moveNext())
            {
                [curExportDocumentSource, curExportDocumentId] = ListEnumerator.current();
                progressLocal.setText(curExportDocumentSource.InvoiceId);

                if (TaxIntgrUtility_CN::isOverAmountLimit(
                        curExportDocumentSource.TaxCode,
                        totalAmount + curExportDocumentSource.TransactionCurrencyAmount))
                {
                    if (setOfSource.elements() > 1)
                    {
                        TaxIntgrExportDocumentOperator_CN::operateExportDocument(
                            TaxIntgrExportDocumentOperationType_CN::Merge,
                            setOfSource.pack(),
                            setofDocId.pack());
                        invoiceCount += setOfSource.elements();
                    }
                    setOfSource = new Set(Types::Int64);
                    setofDocId = new Set(Types::String);
                    totalAmount = 0;
                }

                setOfSource.add(curExportDocumentSource.RecId);
                setofDocId.add(curExportDocumentId);
                totalAmount += curExportDocumentSource.TransactionCurrencyAmount;
            }

            if (setOfSource.elements() > 1)
            {
                TaxIntgrExportDocumentOperator_CN::operateExportDocument(
                    TaxIntgrExportDocumentOperationType_CN::Merge,
                    setOfSource.pack(),
                    setofDocId.pack());
                invoiceCount += setofDocId.elements();
            }

            progressLocal.incCount();
        }

        info(strFmt("@SYS4002228", invoiceCount));

        if (progressLocal)
        {
            progressLocal.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapOfSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a map with the source categorized by key.
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    /// <returns>
    /// The map with the source categorized by key.
    /// </returns>
    protected static Map getMapOfSources(Query _query)
    {
        Map                                     mapOfsource;
        QueryRun                                queryRun;
        TaxIntgrExportDocumentSource_CN         curExportDocumentSource;
        TaxIntgrExportDocument_CN               curExportDocument;
        container                               exportDocumentKey;
        List                                    listOfRecords;

        queryRun = new QueryRun(_query);
        mapOfsource = new Map(Types::Container, Types::Class);
        while (queryRun.next())
        {
            curExportDocumentSource = queryRun.get(curExportDocumentSource.TableId);
            curExportDocument = queryRun.get(curExportDocument.TableId);
            exportDocumentKey = curExportDocumentSource.getExportDocumenrSourceKeys();
            if (!mapOfsource.exists(exportDocumentKey))
            {
                listOfRecords = new List(Types::Container);
                mapOfsource.insert(exportDocumentKey, listOfRecords);
            }
            else
            {
                listOfRecords = mapOfsource.lookup(exportDocumentKey);
            }

            listOfRecords.addEnd([curExportDocumentSource, curExportDocument.id]);
        }

        return mapOfsource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        TaxIntgrExportDocumentAutoMergeBatch_CN mergeBatch;

        mergeBatch = TaxIntgrExportDocumentAutoMergeBatch_CN::construct();

        if (mergeBatch.prompt())
        {
            mergeBatch.runOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>