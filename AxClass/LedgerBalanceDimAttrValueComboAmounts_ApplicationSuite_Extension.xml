<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceDimAttrValueComboAmounts_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerBalanceDimAttrValueComboAmounts))]
public final class LedgerBalanceDimAttrValueComboAmounts_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateBalanceSim_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the dimension attribute value combination.
    /// </summary>
    /// <param name="_dimAttrValueCombo">
    /// The dimension attribute value combination.
    /// </param>
    /// <exception>Throws error if DAVC is not properly initialized.</exception>
    public void calculateBalanceSim_IT(DimensionAttributeValueCombination _dimAttrValueCombo)
    {
        if (_dimAttrValueCombo == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (dimAttrValueComboRecId != _dimAttrValueCombo.RecId)
        {
            DimensionHierarchy dimHierarchy = DimensionHierarchy::getFirstDimensionHierarchyFromDimensionCombination(_dimAttrValueCombo.RecId);

            if (dimHierarchy == null)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            dimAttrValueComboRecId = _dimAttrValueCombo.RecId;
            dimAttrValueComboHierarchyType = dimHierarchy.StructureType;
        }

        if (dimAttrValueComboHierarchyType == DimensionHierarchyType::AccountStructure)
        {
            LedgerBalanceQueryGeneralJournalSim_IT generalJournalQuerySim = LedgerBalanceQueryGeneralJournalSim_IT::construct();
            generalJournalQuerySim.setLedgerRecId(ledgerRecId);
            generalJournalQuerySim.setAccountingDateRange(startAccountingDate, endAccountingDate);
            generalJournalQuerySim.setExcludeValues(excludeDebits, excludeCredits, separateDebitsAndCredits);
            generalJournalQuerySim.setIncludeValues(includeRegularPeriod, includeOpeningPeriod, includeClosingPeriod, includeClosingPeriodBySystem);
            generalJournalQuerySim.setPostingLayer(postingLayer);
            generalJournalQuerySim.setSimulationJournalGroupId_IT(simulationJournalGroupId_IT);

            generalJournalQuerySim.calculateForDimAttrValueCombo(_dimAttrValueCombo);

            accountingCurrencyDebitBalance = generalJournalQuerySim.getAccountingCurrencyDebitBalance();
            accountingCurrencyCreditBalance = generalJournalQuerySim.getAccountingCurrencyCreditBalance();
            reportingCurrencyBalance = generalJournalQuerySim.getReportingCurrencyBalance();
            quantityBalance = generalJournalQuerySim.getQuantityBalance();
        }
        else if (dimAttrValueComboHierarchyType == DimensionHierarchyType::Focus)
        {
            LedgerBalanceQueryDimensionFocusSim_IT dimensionFocusQuerySim = LedgerBalanceQueryDimensionFocusSim_IT::construct();
            dimensionFocusQuerySim.setLedgerRecId(ledgerRecId);
            dimensionFocusQuerySim.setAccountingDateRange(startAccountingDate, endAccountingDate);
            dimensionFocusQuerySim.setExcludeValues(excludeDebits, excludeCredits, separateDebitsAndCredits);
            dimensionFocusQuerySim.setIncludeValues(includeRegularPeriod, includeOpeningPeriod, includeClosingPeriod, includeClosingPeriodBySystem);
            dimensionFocusQuerySim.setPostingLayer(postingLayer);
            dimensionFocusQuerySim.setDimHierarchyType(dimAttrValueComboRecId, dimAttrValueComboHierarchyType);
            dimensionFocusQuerySim.setSimulationJournalGroupId_IT(simulationJournalGroupId_IT);

            dimensionFocusQuerySim.calculateForDimAttrValueCombo(_dimAttrValueCombo);

            accountingCurrencyDebitBalance = dimensionFocusQuerySim.getAccountingCurrencyDebitBalance();
            accountingCurrencyCreditBalance = dimensionFocusQuerySim.getAccountingCurrencyCreditBalance();
            reportingCurrencyBalance = dimensionFocusQuerySim.getReportingCurrencyBalance();
            quantityBalance = dimensionFocusQuerySim.getQuantityBalance();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>