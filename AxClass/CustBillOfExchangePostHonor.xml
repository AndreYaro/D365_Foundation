<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangePostHonor</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustBillOfExchangePostHonor extends CustBillOfExchangePost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postNextStep</Name>
				<Source><![CDATA[
        protected void postNextStep(CustVendVoucher custVoucher,
                                CustVendTrans   settlingTrans)
    {
        // There is no next step
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSettlingStep</Name>
				<Source><![CDATA[
        protected void postSettlingStep(CustVendVoucher _custVoucher, CustVendTrans _settlingTrans)
    {
        CustVoucher             custVoucher = _custVoucher;
        CustTrans               settlingTrans = _settlingTrans;
        CustSettlement          custSettlement;
        CustTrans               settledTrans;
        CustTrans               nextStepTrans;
        CustBillOfExchangeJour  custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        Counter                 numOfSettledTrans;

        super(custVoucher, settlingTrans);

        settlingTrans = CustTrans::find(settlingTrans.RecId, true);

        nextStepTrans.data(settlingTrans);

        // Update journal and transaction table
        // This code is run when posting a Bill Of Exchange Settle Journal.
        // In this code the settlingTrans, settledTrans, and custSettlement will always be in the current company so we do not
        // need to do a cross company select statement and do not need to changeCompany after the select statement.
        while select OffsetRecid from custSettlement
            where custSettlement.TransRecId == settlingTrans.RecId
            join BillOfExchangeID, AmountCur, AmountMST from settledTrans
                where settledTrans.RecId == custSettlement.OffsetRecid
        {
            numOfSettledTrans++;
            custBillOfExchangeJour = CustBillOfExchangeJour::find(settledTrans.BillOfExchangeID, true);
            nextStepTrans.AmountCur = -settledTrans.AmountCur;
            nextStepTrans.AmountMST = -settledTrans.AmountMST;
            custBillOfExchangeTrans = this.insertNegInstTrans(custBillOfExchangeJour, nextStepTrans);
        }

        if (numOfSettledTrans == 1)
        {
            this.setNegInstFieldOnTrans(settlingTrans,
                                        custBillOfExchangeTrans.BillOfExchangeId,
                                        custBillOfExchangeTrans.Status,
                                        custBillOfExchangeTrans.SeqNum);

            // <GTH>
            if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
            {
                this.updateTaxInvoiceId(settlingTrans);
            }
            // </GTH>

            settlingTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
        protected CustVendNegInstStatus status()
    {
        return CustVendNegInstStatus::Honored;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method updates tax invoice Id for tax transaction according to specified customer payment transaction.
    /// </summary>
    /// <param name="_custTransPaym">
    ///     The <c>CustTrans</c> record of payment transaction.
    /// </param>
    private void updateTaxInvoiceId(CustTrans _custTransPaym)
    {
        TaxTrans                    taxTrans;
        TaxTransExtensionTH         taxTransExtensionTH;
        CustTrans                   custTransInvoice;
        CustTrans                   custTransDrawBillOfExchange;
        CustTransExtensionTH        custTransExtensionTH;
        CustBillOfExchangeInvoice   custBillOfExchangeInvoice;

        select firstOnly forUpdate taxTransExtensionTH
            exists join taxTrans
                where taxTrans.RecId            == taxTransExtensionTH.TaxTrans
                    && taxTrans.SourceTableId   == tableNum(CustTrans)
                    && taxTrans.SourceRecId     == _custTransPaym.RecId
                    && taxTrans.TaxOrigin       == TaxOrigin::Payment;
        if (taxTransExtensionTH)
        {
            select firstOnly RecId from custBillOfExchangeInvoice
                where custBillOfExchangeInvoice.BillOfExchangeId        == _custTransPaym.BillOfExchangeID
            join RecId from custTransInvoice
                where custTransInvoice.Invoice                          == custBillOfExchangeInvoice.InvoiceId
                    && custTransInvoice.dataAreaId                      == custBillOfExchangeInvoice.InvoiceCompany
            join DocumentNum, TransDate from custTransDrawBillOfExchange
                where custTransDrawBillOfExchange.OffsetRecid           == custTransInvoice.RecId
                    && custTransDrawBillOfExchange.BillOfExchangeStatus == CustVendNegInstStatus::Drawn
            outer join ReceiptId from custTransExtensionTH
                where custTransExtensionTH.CustTrans                    == custTransInvoice.RecId;
            if (custTransDrawBillOfExchange)
            {
                if (custTransExtensionTH.ReceiptId)
                {
                    taxTransExtensionTH.TaxInvoiceId = custTransExtensionTH.ReceiptId;
                }
                else
                {
                    taxTransExtensionTH.TaxInvoiceId = custTransDrawBillOfExchange.DocumentNum;
                }
                taxTransExtensionTH.TaxInvoiceDate = custTransDrawBillOfExchange.TransDate;
                taxTransExtensionTH.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>