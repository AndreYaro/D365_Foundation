<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGOp_Ledger_Trans_Contractor_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGOp_Ledger_Trans_Contractor_RU extends LedgerRRGOp_Ledger_Trans_RU
{
    int                             signInvoice;
    int                             signPayment;
    Map                             documentMap;
    Map                             contractorMap;
    Map                             agreementMap;
    Map                             dimensionMap;
    Map                             ledgerAccountContractorMap;
    Map                             vouchers;
    boolean                         agreementCalc;
    boolean                         documentCalc;
    boolean                         contractorCalc;
    boolean                         dimensionCalc;

    private const str               KeyDelimiter	    = '#';
    private const str               OffsetRange	        = '(\%1.\%2 \%3 \%4.\%5)';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addValue(Map _map, str _key, container _value)
    {
        Amount activeBalance;
        Amount passiveBalance;

        Amount activeBalanceValue;
        Amount passiveBalanceValue;

        [activeBalanceValue, passiveBalanceValue] = _value;
        if (_map.exists(_key))
        {
            [activeBalance, passiveBalance] = _map.lookup(_key);
        }

        activeBalance   += activeBalanceValue;
        passiveBalance  += passiveBalanceValue;

        _map.insert(_key, [activeBalance, passiveBalance]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementKey</Name>
				<Source><![CDATA[
    private str agreementKey(Common _record)
    {
        CustVendTrans        custVendTrans;
        AgreementHeaderExtRecId_RU agreementHeaderExtRecId;

        if (_record.TableId == tableNum(CustTrans) || _record.TableId == tableNum(VendTrans))
        {
            custVendTrans = _record;
            agreementHeaderExtRecId = AgreementHeaderExt_RU::findByDefaultDimension(custVendTrans.DefaultDimension).RecId;
            return int2str(_record.TableId) + KeyDelimiter + int642str(agreementHeaderExtRecId);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AmountMST calc()
    {
        MapEnumerator                  me;
        Amount                        activeBalance;
        Amount                        passiveBalance;
        Map                           calcMap;
        Voucher                       voucher;
        MainAccountNum                mainAccountId;
        int                           contractor;

        super();

        if (parms.operation().DataType == LedgerRRGDataType_RU::Trans)
        {
            calcMap = dimensionMap;
        }
        else
        {
            me = vouchers.getEnumerator();
            while (me.moveNext())
            {
                [voucher, mainAccountId, contractor] = me.currentValue();
                this.calcVoucher(voucher, mainAccountId, contractor);
            }

            switch (parms.operation().BalanceDetail)
            {
                case LedgerRRGBalanceDetail_RU::Agreement:
                    calcMap = agreementMap;
                    break;
                case LedgerRRGBalanceDetail_RU::Contractor:
                    calcMap = contractorMap;
                    break;
                case LedgerRRGBalanceDetail_RU::Document:
                    calcMap = documentMap;
                    break;
            }
        }

        if (calcMap)
        {
            [activeBalance, passiveBalance] = this.calcTotal(calcMap);
        }

        if (parms.operation().LedgerOperation == LedgerRRGOperationType_RU::ActiveBalance)
        {
            return activeBalance;
        }

        if (parms.operation().LedgerOperation == LedgerRRGOperationType_RU::PassiveBalance)
        {
            return passiveBalance;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustVendTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calcCustVendTrans(CustVendTrans _custVendTrans)
    {
        CustVendSettlement  custVendSettlement = this.settlementBuffer(_custVendTrans);
        AmountMST           tmpBalanceMST;
        AmountCur           tmpBalanceCur;
        UnknownNoYes        isActive;
        Amount              activeBalanceMST;
        Amount              passiveBalanceMST;
        Amount              activeBalanceCur;
        Amount              passiveBalanceCur;

        container calcInternal()
        {
            select sum(SettleAmountMST), sum(ExchAdjustment), sum(SettleAmountCur)
                from custVendSettlement
                where (custVendSettlement.TransRecId      == _custVendTrans.RecId)  &&
                      (custVendSettlement.TransDate       <= parms.transDate())     &&
                      (custVendSettlement.SettleAmountMST != 0                      ||
                       custVendSettlement.ExchAdjustment  != 0);

            return [_custVendTrans.AmountMST - custVendSettlement.SettleAmountMST + custVendSettlement.ExchAdjustment,
                    _custVendTrans.AmountCur - custVendSettlement.SettleAmountCur];
        }

        if (_custVendTrans.TransType == LedgerTransType::Settlement)
        {
            return [0, 0];
        }

        isActive = this.isActiveBalance(_custVendTrans);

        switch (isActive)
        {
            case UnknownNoYes::Yes:
                [tmpBalanceMST, tmpBalanceCur] = calcInternal();
                activeBalanceMST  = signInvoice * tmpBalanceMST;
                activeBalanceCur  = signInvoice * tmpBalanceCur;
                break;

            case UnknownNoYes::No:
                [tmpBalanceMST, tmpBalanceCur] = calcInternal();
                passiveBalanceMST = signPayment * tmpBalanceMST;
                passiveBalanceCur = signPayment * tmpBalanceCur;
                break;
        }


        if (parms.currencyForCalc() == LedgerRRGCurrencyForCalc_RU::AmountMST)
        {
            return [activeBalanceMST, passiveBalanceMST];
        }
        else
        {
            return [activeBalanceCur, passiveBalanceCur];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDimension</Name>
				<Source><![CDATA[
    private void calcDimension(GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        Amount amount = _generalJournalAccountEntry.(amountFieldId);
        Amount activeBalance;
        Amount passiveBalance;

        if (amount > 0)
        {
            activeBalance = amount;
        }
        else
        {
            passiveBalance = -amount;
        }

        this.addValue(dimensionMap, this.dimensionKey(_generalJournalAccountEntry), [activeBalance, passiveBalance]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmplTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calcEmplTrans(EmplTrans_RU _emplTrans)
    {
        EmplSettlement_RU   emplSettlement;

        Amount              activeBalanceMST;
        Amount              passiveBalanceMST;
        Amount              activeBalanceCur;
        Amount              passiveBalanceCur;

        if (_emplTrans.TransType == EmplTransSourceType_RU::CrossAccountSettle)
        {
            return [0, 0];
        }

        if (_emplTrans.AmountMST > 0)
        {
            select sum(SettleAmountMST), sum(ExchAdjustment), sum(SettleAmountCurDebit), sum(SettleAmountCurCredit)
                from emplSettlement
                where emplSettlement.DebitRecId      == _emplTrans.RecId   &&
                      emplSettlement.TransDate       <= parms.transDate()    &&
                      emplSettlement.SettleAmountMST != 0;


            activeBalanceMST  = _emplTrans.AmountMST - emplSettlement.SettleAmountMST + emplSettlement.ExchAdjustment;
            activeBalanceCur  = _emplTrans.AmountCur - emplSettlement.SettleAmountCurDebit;
        }
        else
        {
            select sum(SettleAmountMST), sum(ExchAdjustment), sum(SettleAmountCurDebit), sum(SettleAmountCurCredit)
                from emplSettlement
                where emplSettlement.CreditRecId      == _emplTrans.RecId   &&
                      emplSettlement.TransDate       <= parms.transDate()   &&
                      emplSettlement.SettleAmountMST != 0;

            passiveBalanceMST = - _emplTrans.AmountMST - emplSettlement.SettleAmountMST + emplSettlement.ExchAdjustment;
            passiveBalanceCur = - _emplTrans.AmountCur - emplSettlement.SettleAmountCurCredit;
        }

        if (parms.currencyForCalc() == LedgerRRGCurrencyForCalc_RU::AmountMST)
        {
            return [activeBalanceMST, passiveBalanceMST];
        }
        else
        {
            return [activeBalanceCur, passiveBalanceCur];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calcTotal(Map _map)
    {
        MapEnumerator me = _map.getEnumerator();
        Amount        activeBalance;
        Amount        passiveBalance;

        Amount        activeBalanceTotal;
        Amount        passiveBalanceTotal;
        Amount        balance;

        while (me.moveNext())
        {
            [activeBalance, passiveBalance] = me.currentValue();

            balance  = activeBalance - passiveBalance;

            if (balance > 0)
            {
                activeBalanceTotal   += balance;
            }
            else
            {
                passiveBalanceTotal  += -balance;
            }
        }

        return [activeBalanceTotal, passiveBalanceTotal];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVoucher</Name>
				<Source><![CDATA[
    private void calcVoucher(Voucher _voucher, MainAccountNum _mainAccountId, int _contractor)
    {
        CustTrans               custTrans;
        VendTrans               vendTrans;
        EmplTrans_RU            emplTrans;
        CustLedgerAccounts      custLedgerAccounts;
        VendLedgerAccounts      vendLedgerAccounts;
        EmplLedgerAccounts_RU   emplLedgerAccounts;

        container                           value;
        DimensionAttributeLevelValueView    dimValueView;
        RefRecId                            mainAccountAttrId;

        void calcInternal(Common _record)
        {
            if (agreementCalc)
            {
                this.addValue(agreementMap, this.agreementKey(_record), value);
            }

            if (documentCalc)
            {
                this.addValue(documentMap, this.documentKey(_record), value);
            }

            if (contractorCalc)
            {
                this.addValue(contractorMap, this.contractorKey(_record), value);
            }
        }
       
        mainAccountAttrId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        signInvoice = 1;
        signPayment = -1;

        if (_contractor & LedgerRRGContractorType_RU::Customer == LedgerRRGContractorType_RU::Customer)
        {
            while select custTrans
                exists join TableId from custLedgerAccounts
                    where custTrans.Voucher             == _voucher                             &&
                          custTrans.PostingProfile      == custLedgerAccounts.PostingProfile
                    exists join dimValueView
                        where dimValueView.ValueCombinationRecId    == custLedgerAccounts.SummaryLedgerDimension &&
                              dimValueView.DimensionAttribute       == mainAccountAttrId                         &&
                              dimValueView.DisplayValue             == _mainAccountId
            {
                value = this.calcCustVendTrans(custTrans);
                calcInternal(custTrans);
            }
        }

        if (_contractor & LedgerRRGContractorType_RU::Vendor == LedgerRRGContractorType_RU::Vendor)
        {
            while select vendTrans
                exists join TableId from vendLedgerAccounts
                    where vendTrans.Voucher             == _voucher                             &&
                          vendTrans.PostingProfile      == vendLedgerAccounts.PostingProfile
                    exists join dimValueView
                        where dimValueView.ValueCombinationRecId    == vendLedgerAccounts.SummaryLedgerDimension &&
                              dimValueView.DimensionAttribute       == mainAccountAttrId                         &&
                              dimValueView.DisplayValue             == _mainAccountId
            {
                value = this.calcCustVendTrans(vendTrans);
                calcInternal(vendTrans);
            }
        }

        if (_contractor & LedgerRRGContractorType_RU::Employee == LedgerRRGContractorType_RU::Employee)
        {
            while select emplTrans
                exists join TableId from emplLedgerAccounts
                    where emplTrans.Voucher             == _voucher                             &&
                          emplTrans.PostingProfile      == emplLedgerAccounts.PostingProfile
                    exists join dimValueView
                        where dimValueView.ValueCombinationRecId    == emplLedgerAccounts.SummaryLedgerDimension &&
                              dimValueView.DimensionAttribute       == mainAccountAttrId                         &&
                              dimValueView.DisplayValue             == _mainAccountId
            {
                value = this.calcEmplTrans(emplTrans);
                calcInternal(emplTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractorKey</Name>
				<Source><![CDATA[
    private str contractorKey(Common _record)
    {
        EmplTrans_RU    emplTrans;
        CustVendTrans   custVendTrans;

        if (_record.TableId == tableNum(EmplTrans_RU))
        {
            emplTrans = _record;
            return emplTrans.EmplAccount;
        }
        else
        {
            custVendTrans = _record;
            return custVendTrans.AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionKey</Name>
				<Source><![CDATA[
    private str dimensionKey(GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        str key;

        key = int642str(_generalJournalAccountEntry.LedgerDimension);

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentKey</Name>
				<Source><![CDATA[
    private str documentKey(Common _record)
    {
        return int642str(_record.TableId) + KeyDelimiter + int642str(_record.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContractorType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int getContractorType(MainAccountNum _mainAccountId)
    {
        int                                 result;
        CustLedgerAccounts                  custLedgerAccounts;
        VendLedgerAccounts                  vendLedgerAccounts;
        EmplLedgerAccounts_RU               emplLedgerAccounts;
        DimensionAttributeLevelValueView    dimValueView;
        RefRecId                            mainAccountAttrId;
       
        mainAccountAttrId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        if (ledgerAccountContractorMap.exists(_mainAccountId))
        {
            result = ledgerAccountContractorMap.lookup(_mainAccountId);
        }
        else
        {
            select firstonly RecId from custLedgerAccounts
                exists join dimValueView
                    where dimValueView.ValueCombinationRecId    == custLedgerAccounts.SummaryLedgerDimension &&
                          dimValueView.DimensionAttribute       == mainAccountAttrId &&
                          dimValueView.DisplayValue             == _mainAccountId;

            select firstonly RecId from vendLedgerAccounts
                exists join dimValueView
                    where dimValueView.ValueCombinationRecId    == vendLedgerAccounts.SummaryLedgerDimension &&
                          dimValueView.DimensionAttribute       == mainAccountAttrId &&
                          dimValueView.DisplayValue             == _mainAccountId;

            select firstonly RecId from emplLedgerAccounts
                exists join dimValueView
                    where dimValueView.ValueCombinationRecId    == emplLedgerAccounts.SummaryLedgerDimension &&
                          dimValueView.DimensionAttribute       == mainAccountAttrId &&
                          dimValueView.DisplayValue             == _mainAccountId;

            if (custLedgerAccounts)
            {
                result = LedgerRRGContractorType_RU::Customer;
            }

            if (vendLedgerAccounts)
            {
                result = result | LedgerRRGContractorType_RU::Vendor;
            }

            if (emplLedgerAccounts)
            {
                result = result | LedgerRRGContractorType_RU::Employee;
            }

            ledgerAccountContractorMap.insert(_mainAccountId, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
	public void init(LedgerRRGEBufferEval_W _bufferEval)
    {
        super(_bufferEval);
    
        documentMap     = new Map(Types::String, Types::Container);
        contractorMap   = new Map(Types::String, Types::Container);
        agreementMap    = new Map(Types::String, Types::Container);
        dimensionMap    = new Map(Types::String, Types::Container);
    
        ledgerAccountContractorMap = new Map(Types::String, Types::Integer);
    
        vouchers = new Map(Types::Container, Types::Container);
    
        if (parms.operation().DataType == LedgerRRGDataType_RU::Trans)
        {
            dimensionCalc = true;
        }
        else
        {
        switch (parms.operation().BalanceDetail)
        {
            case LedgerRRGBalanceDetail_RU::Agreement:
                agreementCalc = true;
                break;
            case LedgerRRGBalanceDetail_RU::Contractor:
                contractorCalc = true;
                break;
            case LedgerRRGBalanceDetail_RU::Document:
                documentCalc = true;
                break;
        }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected void initQuery()
    {
        QueryBuildDataSource voucherQBDS;
    
        super();
    
        if (agreementCalc || documentCalc || contractorCalc)
        {
            mainAccountRange.dataSource().joinMode(JoinMode::InnerJoin);
            SysQuery::addOrderByDimensionAttribute(query,
                                                   queryBuildDataSource.name(),
                                                   fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                   DimensionComponent::DimensionAttribute,
                                                   SortOrder::Ascending,
                                                   DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name);
    
            mainAccountRange.dataSource().orderMode(OrderMode::GroupBy);
    
            voucherQBDS = query.dataSourceTable(tableNum(GeneralJournalEntry)).addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));
            voucherQBDS.fetchMode(QueryFetchMode::One2One);
            voucherQBDS.addLink(fieldNum(GeneralJournalEntry, RecId), fieldNum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry));
            voucherQBDS.addSortField(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
            voucherQBDS.joinMode(JoinMode::InnerJoin);
            voucherQBDS.orderMode(OrderMode::GroupBy);
        }
    
        if (dimensionCalc)
        {
            queryBuildDataSource.addSortField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveBalance</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected UnknownNoYes isActiveBalance(CustVendTrans _custVendTrans)
    {
        UnknownNoYes result;
        CustTrans    origCustTrans;

        UnknownNoYes isActiveBalanceInternal()
        {
            if(_custVendTrans.Invoice)
            {
                return UnknownNoYes::Yes;
            }
            else
            {
                if(this.takeIntoPayment(_custVendTrans))
                {
                    return UnknownNoYes::No;
                }
            }

            return UnknownNoYes::Unknown;
        }
       

        if (_custVendTrans.TableId == tableNum(CustTrans))
        {
            switch(_custVendTrans.TransType)
            {
                case LedgerTransType::CollectionLetter :
                    result = UnknownNoYes::Yes;
                    break;

                case LedgerTransType::Interest :
                    result = (sign(_custVendTrans.AmountMST) == sign(signInvoice)) ? UnknownNoYes::Yes : UnknownNoYes::No;
                    break;

                default :
                    result = isActiveBalanceInternal();
            }

            if (result == UnknownNoYes::No && sign(_custVendTrans.AmountMST) == sign(signInvoice))
            {
                origCustTrans   = _custVendTrans.originalPaymTrans_RU(false);

                if (origCustTrans.RecId != _custVendTrans.RecId)
                {
                    result = isActiveBalanceInternal();
                }
            }
        }
        else
        {
            result = isActiveBalanceInternal();
        }


        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes a given queryRun class instance.
    /// </summary>
    /// <param name="_queryRun">
    ///   A <c>QueryRun</c> class intance.
    /// </param>
    /// <returns>
    ///   Zero.
    /// </returns>
    public AmountMST processQueryRun(QueryRun _queryRun)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
        DimensionAttributeValueCombination  mainAccountDimAttr;

        if (dimensionCalc)
        {
            generalJournalAccountEntry = _queryRun.get(tableNum(GeneralJournalAccountEntry));
            this.calcDimension(generalJournalAccountEntry);
        }

        if (agreementCalc || documentCalc || contractorCalc)
        {
            subledgerVoucherLink    = _queryRun.get(tableNum(SubledgerVoucherGeneralJournalEntry));
            mainAccountDimAttr      = _queryRun.get(tableNum(DimensionAttributeValueCombination));

            if (!vouchers.exists([subledgerVoucherLink.Voucher, mainAccountDimAttr.MainAccountValue]))
            {
                vouchers.insert([subledgerVoucherLink.Voucher, mainAccountDimAttr.MainAccountValue],
                     [subledgerVoucherLink.Voucher, mainAccountDimAttr.MainAccountValue,
                     this.getContractorType(mainAccountDimAttr.MainAccountValue)]);
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementBuffer</Name>
				<Source><![CDATA[
    private CustVendSettlement settlementBuffer(CustVendTrans _custVendTrans)
    {
        CustSettlement      custSettlement;
        VendSettlement      vendSettlement;

        if (_custVendTrans.TableId == tableNum(CustTrans))
        {
            return custSettlement;
        }
        else
        {
            return vendSettlement;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeIntoPayment</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean takeIntoPayment(CustVendTrans _custVendTrans)
    {
        boolean              result     = false;
        CustVendSettlement   settlement = this.settlementBuffer(_custVendTrans);

        if(_custVendTrans.remainAmountMST() != 0)
        {
            result = true;
        }
        else
        {
            select firstonly settlement
                where   settlement.TransRecId    == _custVendTrans.RecId &&
                        settlement.CanBeReversed == NoYes::Yes;

            if(settlement)
            {
                result = true;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public LedgerRRGOp_Ledger_Trans_Contractor_RU construct()
    {
        return new LedgerRRGOp_Ledger_Trans_Contractor_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>