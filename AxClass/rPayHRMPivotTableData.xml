<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayHRMPivotTableData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayHRMPivotTableData
{
    #define.adUseClient(3)
    #define.adOpenForwardOnly(0)
    #define.adLockBatchOptimistic(4)
    #define.adAffectAll(3)
    #define.adStateOpen(1)

    #define.adDouble(5)
    #define.adBigInt(20)
    #define.adDBDate(133)
    #define.adVarChar(8)
    #define.ADODBRecordset("ADODB.Recordset")

    RPayHRMPivotTableMetaData pivotTableMetadata;
    COM                       comFields;
    COM                       comField;
    COM                       comRS;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendField</Name>
				<Source><![CDATA[
    private void appendField(str _name, Types _baseType, int _len)
    {
        InteropPermission perm;
        int               lines = infologLine();

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            switch (_baseType)
            {
                case Types::Real    :
                    comFields.append(_name, #adDouble);
                    break;
                case Types::Integer :
                    comFields.append(_name, #adBigInt);
                    break;
                case Types::Date    :
                    comFields.append(_name, #adDBDate);
                    break;
                case Types::String  :
                    comFields.append(_name, #adVarChar, _len);
                    break;
                default:
                    throw error("@SYS40221");
            }
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMetadata</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initMetadata(RPayHRMPivotTableMetaData _pivotTableMetaData)
    {
        MapIterator it;
        str         fieldName;
        Types       baseType;
        int         len;

        pivotTableMetaData = _pivotTableMetaData;
        it = new MapIterator(pivotTableMetaData.recordsetFields());

        while (it.more())
        {
            fieldName = it.key();
            [baseType, len] = it.value();

            this.appendField(fieldName, baseType, len);
            it.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertRecord(Map _mapData)
    {
        MapIterator              it = new MapIterator(pivotTableMetaData.recordsetFields());
        FieldName                fieldName;
        Types                    baseType;
        int                      len;

        Map                      mapCodeNameFields = pivotTableMetaData.codeNameFields();
        FieldLabel               fieldLabel;
        RPayHRMPivotShowNameCode showNameCode;
        FieldName                nameField;

        str                      strValue;
        real                     realValue;
        int                      intValue;
        date                     dateValue;
        str                      strCode;
        str                      strName;

        this.rsAddNew();

        while (it.more())
        {
            fieldName = it.key();
            [baseType, len] = it.value();

            if (mapCodeNameFields.exists(fieldName))
            {
                [nameField, fieldLabel, showNameCode] = mapCodeNameFields.lookup(fieldName);

                strCode  =  conPeek(_mapData.lookup(fieldName),1);
                strName  =  conPeek(_mapData.lookup(nameField),1);

                switch (showNameCode)
                {
                    case RPayHRMPivotShowNameCode::Code :
                        strValue = strCode;
                        break;

                    case RPayHRMPivotShowNameCode::CodeName :
                        if (strCode && strName)
                        {
                            strValue = strFmt("@SYS70938", strCode, strName);
                        }
                        else
                        {
                            strValue = strCode;
                        }
                        break;

                    case  RPayHRMPivotShowNameCode::NameCode :
                        if (strCode && strName)
                        {
                            strValue = strFmt("@SYS70938", strName, strCode);
                        }
                        else
                        {
                            strValue = strCode;
                        }
                        break;
                }
                if (strValue)
                {
                    this.setFieldValueStr(fieldName, strValue);
                }
            }
            else
            {
                if (_mapData.exists(fieldName))
                {
                    switch (baseType)
                    {
                        case Types::String:
                            strValue = conPeek(_mapData.lookup(fieldName),1);
                            if (strValue)
                            {
                                this.setFieldValueStr(fieldName, strValue);
                            }
                            break;

                        case Types::Real:
                            realValue = conPeek(_mapData.lookup(fieldName),1);
                            if (realValue)
                            {
                                 this.setFieldValueReal(fieldName, realValue);
                            }
                            break;

                        case Types::Integer:
                            intValue = conPeek(_mapData.lookup(fieldName),1);
                            if (intValue)
                            {
                                 this.setFieldValueInt(fieldName, intValue);
                            }
                            break;

                        case Types::Date:
                            dateValue = conPeek(_mapData.lookup(fieldName),1);
                            this.setFieldValueDate(fieldName, dateValue);
                            break;

                        default:
                            throw error("@SYS40221");
                    }
                }
            }
            it.next();
        }

        this.rsUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void new()
    {
        InteropPermission perm;
        int               lines = infologLine();

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            comRS = new COM(#ADODBRecordset);
            comRS.cursorLocation(#adUseClient);
            comFields = comRS.fields();
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordset</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public COM recordset()
    {
        ;
        return comRS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rsAddNew</Name>
				<Source><![CDATA[
    private void rsAddNew()
    {
        InteropPermission perm;
        int               lines = infologLine();
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            comRS.addNew();
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rsClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the ado recordset.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Error.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void rsClose()
    {
        if (comRS && comRS.state() == #adStateOpen)
        {
            comRS.close();
        }
        else
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rsOpen</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void rsOpen()
    {
        InteropPermission perm;
        int               lines = infologLine();

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            comRS.open(COMVariant::createNoValue(), COMVariant::createNoValue(), #adOpenForwardOnly, #adLockBatchOptimistic);
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rsUpdate</Name>
				<Source><![CDATA[
    private void rsUpdate()
    {
        InteropPermission perm;
        int               lines = infologLine();
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            comRS.update();
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rsUpdateBatch</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void rsUpdateBatch()
    {
        InteropPermission perm;
        int               lines = infologLine();

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            comRS.updateBatch(#adAffectAll);
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValueDate</Name>
				<Source><![CDATA[
    private void setFieldValueDate(str _name, date _value)
    {
        InteropPermission perm;
        int               lines = infologLine();

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            comField = comFields.item(_name);
            comField.value(COMVariant::createFromDate(_value));
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValueInt</Name>
				<Source><![CDATA[
    private void setFieldValueInt(str _name, int _value)
    {
        InteropPermission perm;
        int               lines = infologLine();
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            comField = comFields.item(_name);
            comField.value(COMVariant::createFromInt(_value));
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValueReal</Name>
				<Source><![CDATA[
    private void setFieldValueReal(str _name, real _value)
    {
        InteropPermission perm;
        int               lines = infologLine();
        ;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
            comField = comFields.item(_name);
            comField.value(COMVariant::createFromReal(_value));
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValueStr</Name>
				<Source><![CDATA[
    private void setFieldValueStr(str _name, str _value)
    {
        InteropPermission perm;
        COMVariant        comVariant;
        int               lines = infologLine();
        int t;

        perm = new InteropPermission(InteropKind::ComInterop);
        perm.assert();

        try
        {
           comVariant = COMVariant::createFromStr(_value);
            comField = comFields.item(_name);
            t = comField.type();
            //comField.value(comVariant);
            comField.value(_value);
        }
        catch
        {
            infolog.clear(lines);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>