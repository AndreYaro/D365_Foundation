<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderSourceDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchaseOrderSourceDoc</c> class provides the information to handle the distributions and
/// subledger journal lines of a <c>PurchTable</c> record that is generated from a purchase order.
/// </summary>
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProductOrder), SourceDocument_ProductOrder::PurchaseOrder, tableStr(PurchTable))]
public class PurchaseOrderSourceDocument extends SourceDocument
    implements SourceDocumentIParty,
               SourceDocumentIAccountingRule,
               SourceDocumentIDataProvider,
               SourceDocumentIChargeSource,
               SourceDocumentIFinalize,
               SourceDocumentIYearEnd,
               SourceDocumentIDiscount,
               SourceDocumentIPurchaseOrder,
               SourceDocumentIReportingExchRate
{
    PurchTable      purchTable;
    VendTable       invoiceAccount;
    MarkupTrans     markupTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent       businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_ProductOrder),BusinessEvent_ProductOrder::ObligateBudgetFundsForExpensedProducts);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentImplementation">
    /// A source document implementation table.
    /// </param>
    protected void initializeImplementation(SourceDocumentHeaderImplementation _sourceDocumentImplementation)
    {
        PurchTableAllVersions   purchTableAllVersions;

        if (_sourceDocumentImplementation.TableId == tableNum(PurchTableAllVersions))
        {
            purchTableAllVersions.data(_sourceDocumentImplementation);
            purchTable = PurchTable::find(purchTableAllVersions.PurchId);
        }
        else
        {
            purchTable.data(_sourceDocumentImplementation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceAccount</Name>
				<Source><![CDATA[
    private void initInvoiceAccount()
    {
        invoiceAccount = purchTable.vendTable_InvoiceAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return purchTable.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        DocumentDate documentDate;

        documentDate = super();

        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeInputAmount</Name>
				<Source><![CDATA[
    public Amount parmChargeInputAmount()
    {
        PurchTotals purchTotals;
        Amount      chargeInputAmount;

        purchTotals = PurchTotals::newPurchTable(purchTable);
        purchTotals.calc(true);

        chargeInputAmount = purchTotals.purchBalance();

        return chargeInputAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeQuantity</Name>
				<Source><![CDATA[
    public Qty parmChargeQuantity()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeSource</Name>
				<Source><![CDATA[
    public Common parmChargeSource(Common _markupTrans = markupTrans)
    {
        markupTrans = _markupTrans;
        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentVoucher</Name>
				<Source><![CDATA[
    public Voucher parmCurrentVoucher(DataAreaId _dataAreaId)
    {
        return (select firstonly vendPurchOrderJour
                    order by RecId desc
                    where vendPurchOrderJour.PurchId == purchTable.PurchId).PurchaseOrderVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        return purchTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscCode</Name>
				<Source><![CDATA[
    public DiscCode parmDiscCode()
    {
        return purchTable.CashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmDiscDataAreaId()
    {
        return purchTable.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscDirection</Name>
				<Source><![CDATA[
    public int parmDiscDirection()
    {
        return DiscountDirection::Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        return purchTable.AccountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNumber</Name>
				<Source><![CDATA[
    public DocumentNum parmDocumentNumber()
    {
        return purchTable.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate1</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate1()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate2</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate2()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyExchangeRate1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting currency exchange rate.
    /// </summary>
    /// <returns>The reporting currency exchange rate.</returns>
    public ReportingCurrencyExchRate parmReportingCurrencyExchangeRate1()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinalizedVoucher</Name>
				<Source><![CDATA[
    public Voucher parmFinalizedVoucher(DataAreaId _dataAreaId)
    {
        return this.parmPeriodCloseVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinalizeTransactionText</Name>
				<Source><![CDATA[
    public str parmFinalizeTransactionText()
    {
        return this.retrieveTransactionTxt(LedgerTransTxt::PurchPurchOrderFinalizeLedger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHonorDocumentHeaderEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns whether the <c>PurchaseOrderSourceDocument</c> implementation of <c>SourceDocument</c> is honoring the method parmIsDocumentEditable.
    /// This is used by the <c>AccountingDistributionViewModel</c> when setting the reset button on the <c>AccountingDistribution</c> form.
    /// </summary>
    /// <returns>
    /// True, since the method parmIsDocumentEditable method is honored by this implementation of the <c>SourceDocument</c> class.
    /// </returns>
    public boolean parmHonorDocumentHeaderEditable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentEditable</Name>
				<Source><![CDATA[
    public boolean parmIsDocumentEditable()
    {
        return purchTable.editAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTaxInChargeInputAmountIncluded</Name>
				<Source><![CDATA[
    public boolean parmIsTaxInChargeInputAmountIncluded()
    {
        return purchTable.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPartyAccount</Name>
				<Source><![CDATA[
    public Common parmPartyAccount()
    {
        if (!invoiceAccount)
        {
            this.initInvoiceAccount();
        }

        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodCloseTransactionText</Name>
				<Source><![CDATA[
    public str parmPeriodCloseTransactionText()
    {
        return this.retrieveTransactionTxt(LedgerTransTxt::PurchPurchOrderYearEndClose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodCloseVoucher</Name>
				<Source><![CDATA[
    public Voucher parmPeriodCloseVoucher()
    {
        NumberSequenceReference     voucherSeqRef;
        NumberSeq                   numberSeq;
        LedgerVoucher               ledgerVoucher;

        voucherSeqRef = PurchParameters::numRefPurchaseOrderVoucher();
        numberSeq = NumberSeq::newGetVoucher(voucherSeqRef);
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Ledger, numberSeq.parmVoucherSequenceCode());
        return numberSeq.voucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodOpenTransactionText</Name>
				<Source><![CDATA[
    public str parmPeriodOpenTransactionText()
    {
        return this.retrieveTransactionTxt(LedgerTransTxt::PurchPurchOrderYearEndOpen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodOpenVoucher</Name>
				<Source><![CDATA[
    public Voucher parmPeriodOpenVoucher()
    {
        return this.parmPeriodCloseVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile</Name>
				<Source><![CDATA[
    public PostingProfile parmPostingProfile()
    {
        return purchTable.PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId()
    {
        return purchTable.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseType</Name>
				<Source><![CDATA[
    public PurchaseType parmPurchaseType()
    {
        return purchTable.PurchaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
    public Common parmPurchTable(PurchTable _purchTable = purchTable)
    {
        purchTable = _purchTable;

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentFinalizedDate</Name>
				<Source><![CDATA[
    public AccountingDate parmSourceDocumentFinalizedDate()
    {
        return purchTable.FinalizeClosingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionText</Name>
				<Source><![CDATA[
    public str parmTransactionText()
    {
        VendPurchOrderJour vendPurchOrderJour;
        str ret;

        select firstonly vendPurchOrderJour
                    order by RecId desc
                    where vendPurchOrderJour.PurchId == purchTable.PurchId;

        if (vendPurchOrderJour)
        {
            ret = this.retrieveTransactionTxt(LedgerTransTxt::PurchPurchOrderLedger,
                vendPurchOrderJour.PurchOrderDocNum, vendPurchOrderJour.PurchaseOrderVoucher);
        }

        if (!ret)
        {
            ret = super();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTransactionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text for the purchase order and the specified <c>LedgerTransTxt</c> value.
    /// </summary>
    /// <param name="_ledgerTransTxt">
    /// The <c>LedgerTransTxt</c> value for which to retrieve the transaction text.
    /// </param>
    /// <param name="_documentId">
    /// The document ID.
    /// </param>
    /// <param name="_voucher">
    /// The ledger voucher of the transaction.
    /// </param>
    /// <returns>
    /// The transaction text.
    /// </returns>
    protected str retrieveTransactionTxt(
        LedgerTransTxt _ledgerTransTxt,
        str _documentId = purchTable.PurchId,
        Voucher _voucher = "")
    {
        VendPurchOrderJour          vendPurchOrderJour;
        TransactionTxt transactionTxt = TransactionTxt::construct();

        transactionTxt.setType          (_ledgerTransTxt);
        transactionTxt.setVoucher       (_voucher);
        transactionTxt.setFormLetter    (_documentId);
        transactionTxt.setKey1          (purchTable.PurchId);
        transactionTxt.setKey2          (purchTable.InvoiceAccount);
        transactionTxt.setKey3          (VendTable::groupId(purchTable.InvoiceAccount));

        if (TransactionTextContext::isTypeSupported(_ledgerTransTxt))
        {
            select firstonly vendPurchOrderJour
                order by RecId desc
                where vendPurchOrderJour.PurchId == purchTable.PurchId;

            TransactionTextContext transactionTextContext = TransactionTextContext::newForTransactionType(_ledgerTransTxt);
            transactionTextContext.setTableBuffer(vendPurchOrderJour);
            transactionTextContext.setTableBuffer(vendPurchOrderJour.purchTable());
            transactionTxt.setTransactionTextContext(transactionTextContext);
        }
        return transactionTxt.txt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearEndBusinessEvent</Name>
				<Source><![CDATA[
    public BusinessEvent yearEndBusinessEvent()
    {
        BusinessEvent   businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_ProductOrder),BusinessEvent_ProductOrder::BudgetFundsPeriodEndProcessing);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesCurrentExecutionContextSupportParallelProcessing</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean doesCurrentExecutionContextSupportParallelProcessing()
    {
        boolean isParallelProcessingSupported = !purchTable.isInterCompanyOrder();

        if (isParallelProcessingSupported)
        {
            var purchOrderProcessState = PurchOrderProcessState::instance();
            isParallelProcessingSupported = !(purchOrderProcessState.parmIsHeaderToLinesUpdateInProcess() || purchOrderProcessState.parmIsLineUpdateInProcess());
        }

        return isParallelProcessingSupported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinancialTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides financial tag set up on the purchase order
    /// </summary>
    /// <returns>
    /// FinTagRecId, Financial Tag RecId
    /// </returns>
    public FinTagRecId parmFinancialTag()
    {
        return purchTable.FinTag;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>