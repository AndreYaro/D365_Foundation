<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupAllocation_PurchParmTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MarkupAllocation_PurchParmTable</c> class is used to allocate charge of bill of entry.
/// </summary>
[MarkupAllocationTableNameFactoryAttribute(tableStr(PurchParmTable))]
internal class MarkupAllocation_PurchParmTable extends MarkupAllocation
{
    private PurchParmTable purchParmTable;
    private PurchParmLine purchParmLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAllocate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether allocation is possible for the given record.
    /// </summary>
    /// <returns>
    /// true if allocation is possible; otherwise, false.
    /// </returns>
    public boolean canAllocate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the currency code of current <c>PurchParmLine</c> record.
    /// </summary>
    /// <returns>
    /// The <c>CurrencyCode</c> value.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return purchParmLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkupTransFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>MarkupTrans</c> record from the line to which it is allocated.
    /// </summary>
    protected void initMarkupTransFromLine()
    {
        markupTrans.initFromPurchParmLine(purchParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization.
    /// </summary>
    protected void initValues()
    {
        MarkupTrans markupTransLoc;
        #ISOcountryRegionCodes
        boolean countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);

        switch (source.TableId)
        {
            case(tableNum(MarkupTrans)) :
                if (countryRegion_IN && LedgerParameters::find().Miscellaneouscharges_IN)
                {
                    markupTransLoc = source;
                    purchParmTable = PurchParmTable::findRecId(markupTransLoc.TransRecId);
                    purchId = purchParmTable.PurchId;
                }
                break;
            default :
                purchParmTable = PurchParmTable::findRecId(source.RecId, true);
                purchId = purchParmTable.PurchId;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    protected Qty inventQty()
    {
        Qty ret = this.qty();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the quantity for current <c>PurchParmLine</c> record.
    /// </summary>
    /// <returns>
    /// A quantity value.
    /// </returns>
    public Qty qty()
    {
        return this.purchParmLine.ReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the amount for current <c>PurchParmLine</c> record.
    /// </summary>
    /// <returns>
    /// A amount value.
    /// </returns>
    public AmountCur lineAmount()
    {
        return this.purchParmLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkToIntercompanyInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>MarkupTrans</c> must be linked to intercompany invoices.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    protected boolean linkToIntercompanyInvoice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>QueryRun</c> object to use to determine which posted invoice lines are the target of the allocation.
    /// </summary>
    /// <returns>
    /// A <c>QueryRun</c> object that has the appropriate query ranges applied to it.
    /// </returns>
    public QueryRun queryBuild()
    {
        Query query = new Query();

        QueryBuildDataSource dataSourceParmLine = query.addDataSource(tablenum(PurchParmLine));
        dataSourceParmLine.addRange(fieldnum(PurchParmLine, ParmId)).value(queryValue(purchParmTable.ParmId));
        dataSourceParmLine.addRange(fieldNum(PurchParmLine, TableRefId)).value(queryValue(purchParmTable.TableRefId));

        QueryRun queryRun = new QueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PurchParmLine</c> record for the specified <c>QueryRun</c> object.
    /// </summary>
    /// <param name="_transact">
    /// A <c>QueryRun</c> object.
    /// </param>
    /// <returns>
    /// A <c>PurchParmLine</c> record from the query.
    /// </returns>
    public Common queryGet(QueryRun _transact)
    {
        purchParmLine = _transact.get(tablenum(PurchParmLine));

        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkupTransFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>MarkupTrans</c> fields before creating the record.
    /// </summary>
    protected void setMarkupTransFields()
    {
        super();
        markupTrans.TransDate = postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>MarkupAllocation_PurchParmTable</c>.
    /// </summary>
    /// <returns>
    /// The <c>MarkupAllocation_PurchParmTable</c> object.
    /// </returns>
    public static MarkupAllocation_PurchParmTable construct()
    {
        return new MarkupAllocation_PurchParmTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>