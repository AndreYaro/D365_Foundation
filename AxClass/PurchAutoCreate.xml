<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAutoCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchAutoCreate
{
    //<GIN>
    boolean                         countryRegion_IN;
    //</GIN>

    VendTable                       vendTable;
    PurchTable                      purchTable;
    PurchLine                       purchLine;
    AccountingDate                  accountingDate;

    private PurchInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreatePurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if purchase table can create.
    /// </summary>
    /// <returns>
    /// True if purchase table can create, otherwise false.
    /// </returns>
    protected boolean canCreatePurchTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public void  create()
    {
        #OCCRetryCount

        using (var activityContext = this.instrumentationLogger().purchAutoCreate().createBase())
        {
            try
            {
                setprefix("@SYS28446");

                ttsbegin;

                this.setVend();

                setprefix(#PreFixField(VendTable,AccountNum));

                this.setPurchTable();

                if (this.canCreatePurchTable())
                {
                    this.createPurchTable();
                    this.createLines();
                }

                this.endUpdate();

                ttscommit;

                if (this.showInfo())
                    info(strfmt("@SYS82024", purchTable.PurchId),'', SysInfoAction_TableField::newBuffer(purchTable));
            }

            catch (Exception::Deadlock)
            {
                retry;
            }

            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create lines for the purchase order.
    /// </summary>
    protected void createLines()
    {
        this.setPurchLine();

        if (purchLine.ItemId)
        {
            setprefix(#PreFixField(PurchLine,ItemId));
        }

        this.createPurchLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchLine</Name>
				<Source><![CDATA[
    public void createPurchLine()
    {
        purchLine.createLine(NoYes::No,
                             NoYes::No,
                             NoYes::No,
                             NoYes::No,
                             NoYes::Yes,
                             NoYes::Yes
                            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchTable</Name>
				<Source><![CDATA[
    public void createPurchTable()
    {
        purchTable.insert(false, this.parmAccountingDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    public void endUpdate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    public VendInvoiceAccount invoiceAccount()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemBuyerGroupId</Name>
				<Source><![CDATA[
    public ItemBuyerGroupId itemBuyerGroupId()
    {
        return vendTable.ItemBuyerGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        Common    _initFromBuffer     = null,
        Object    _callBackClass      = null)
    {
        //<GIN>
        #ISOCountryRegionCodes
        //</GIN>

        this.parmAccountingDate(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone())));

        //<GIN>
        countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        //</GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    protected AccountingDate parmAccountingDate(AccountingDate _accountingDate = accountingDate)
    {
        accountingDate = _accountingDate;
        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
    public PurchTable parmPurchTable(PurchTable _purchTable = purchTable)
    {
        purchTable = _purchTable;

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
    public PurchLine parmPurchLine(PurchLine _purchLine = purchLine)
    {
        purchLine = _purchLine;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId()
    {
        return purchTable.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchId</Name>
				<Source><![CDATA[
    public PurchId purchId()
    {
        return purchTable.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchType</Name>
				<Source><![CDATA[
    public PurchaseType purchType()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchLine</Name>
				<Source><![CDATA[
    public void setPurchLine()
    {
        purchLine.initFromPurchTable(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePurchaseOrderNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>NumberSeq</c> for purchase orders.
    /// </summary>
    /// <returns>A <c>NumberSeq</c> instance.</returns>
    protected NumberSeq retrievePurchaseOrderNumberSequence()
    {
        return NumberSeq::newGetNum(this.retrievePurchaseOrderNumberSequenceReference());
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePurchaseOrderNumberSequenceReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>NumberSequenceReference</c> for purchase orders.
    /// </summary>
    /// <returns>A <c>NumberSequenceReference</c> instance.</returns>
    protected NumberSequenceReference retrievePurchaseOrderNumberSequenceReference()
    {
        return PurchParameters::numRefPurchId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>creationFailed</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void creationFailed()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTable</Name>
				<Source><![CDATA[
    public void setPurchTable()
    {
        NumberSeq       num;
        PurchId         tmpPurchId;
        // <GIN>
        PurchTable_W    purchTable_W;
        // </GIN>

        if (!vendTable)
        {
            this.creationFailed();

            throw error("@SYS23020");
        }

        purchTable.clear();
        purchTable.initValue(this.purchType());

        num = this.retrievePurchaseOrderNumberSequence();

        tmpPurchId = num.num();

        if (PurchTable::exist(tmpPurchId))
        {
            num.abort();
            checkFailed("@SYS19304");
            checkFailed(strfmt("@SYS24176", tmpPurchId));

            this.creationFailed();

            throw error("@SYS23020");
        }

        purchTable.PurchId = tmpPurchId;

        num.used();

        purchTable.initFromVendTable(vendTable);

        if (purchTable.InvoiceAccount != this.invoiceAccount())
        {
            purchTable.InvoiceAccount = this.invoiceAccount();
            purchTable.initInvoiceAccount();
        }

        purchTable.ItemBuyerGroupId = this.itemBuyerGroupId();
        purchTable.PurchName        = vendTable.name();
        purchTable.ProjId           = this.projId();

        // <GIN>
        if (TaxParameters::isCustomsEnable_IN()
            && vendTable.IsForeign())
        {
            purchTable_W = purchTable.purchTable_W();
            purchTable_W.CustomsImportOrder_IN = NoYes::Yes;
            purchTable.packPurchTable_W(purchTable_W);
        }
        // </GIN>
        if (!purchTable.checkAccount())
        {
            this.creationFailed();

            throw error("@SYS23020");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVend</Name>
				<Source><![CDATA[
    public void setVend()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfo</Name>
				<Source><![CDATA[
    public boolean showInfo()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates a <c>PurchAutoCreate</c> instance based on the given parameters.
    /// </summary>
    /// <param name = "_buffer">
    /// The first record to initialize from.
    /// </param>
    /// <param name = "_object">
    /// The object to initialize from.
    /// </param>
    /// <param name = "_buffer2">
    /// The second record to initialize from.
    /// </param>
    /// <returns>
    /// A <c>PurchAutoCreate</c> instance
    /// </returns>
    protected static PurchAutoCreate newFromParm(Common _buffer, Object _object, Common _buffer2)
    {
        TmpPurchLine    tmpPurchLine;
        TmpPurchTable   tmpPurchTable;

        switch (_buffer.TableId)
        {
            case tablenum(TmpPurchLine):
                tmpPurchLine = _buffer as TmpPurchLine;
                if (_buffer2.TableId == tablenum(TmpPurchTable))
                {
                    tmpPurchTable = _buffer2 as TmpPurchTable;
                }
                if (tmpPurchLine.AgreementLineQuantityCommitment
                    || tmpPurchTable.PurchAgreementHeader)
                {
                    return PurchAutoCreate_ReleaseFromAgreement::construct(_buffer, _object, _buffer2);
                }
                break;
            case tablenum(TmpPurchLinePrice)    :   return PurchAutoCreate_Sales::construct(_buffer,_object);
            case tablenum(PurchRFQParmTable)    :   return PurchAutoCreate_RFQ::construct(_buffer,_object);
            case tablenum(PurchReqTable)        :   return PurchAutoCreate_PurchReq::construct(_buffer, _object);
            case tablenum(EGAISWaybillJour_RU)  :   return PurchAutoCreate_EGAISWaybill_RU::construct(_buffer, _object);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Constructs a <c>PurchAutoCreate</c> instance based on the given parameters.
    /// </summary>
    /// <param name = "_buffer">
    /// The first record to initialize from.
    /// </param>
    /// <param name = "_object">
    /// The object to initialize from.
    /// </param>
    /// <param name = "_buffer2">
    /// The second record to initialize from.
    /// </param>
    /// <returns>
    /// A <c>PurchAutoCreate</c> instance
    /// </returns>
    public static PurchAutoCreate construct(
        Common       buffer  = null,
        Object       object  = null,
        Common       buffer2 = null)
    {
        PurchAutoCreate purchAutoCreate = PurchAutoCreate::newFromParm(buffer, object, buffer2);

        if (!purchAutoCreate)
        {
            throw error(strfmt("@SYS23419",tableid2name(buffer.TableId)));
        }

        return purchAutoCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal PurchInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>