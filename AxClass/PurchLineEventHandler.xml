<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles events for the <c>PurchLine</c> table.
/// </summary>
class PurchLineEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setPurchCommitmentLine_PSN</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(PurchLine), tableMethodStr(PurchLine, initFromVendInvoiceTrans)),PostHandlerFor(tableStr(PurchLine), tableMethodStr(PurchLine, initFromPurchLine))]
    /// <summary>
    /// Sets the <c>PurchCommitmentLine_PSN</c> field in either the <c>PurchLine</c> table or the <c>VendInvoiceTrans</c> table.
    /// </summary>
    /// <param name="_xppPrePostArgs">
    /// The arguments used to determine which table to update.
    /// </param>
    public static void setPurchCommitmentLine_PSN(XppPrePostArgs  _xppPrePostArgs)
    {
        PurchLine        argsPurchLine;
        VendInvoiceTrans argsVendInvoiceTrans;
        PurchLine        purchLineToChange;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            if (_xppPrePostArgs.existsArg('_purchLine'))
            {
                argsPurchLine = _xppPrePostArgs.getArg('_purchLine');
            }
            if (_xppPrePostArgs.existsArg('_vendInvoiceTrans'))
            {
                argsVendInvoiceTrans = _xppPrePostArgs.getArg('_vendInvoiceTrans');
            }

            purchLineToChange = _xppPrePostArgs.getThis();

            if (argsPurchLine.RecId)
            {
                purchLineToChange.PurchCommitmentLine_PSN = argsPurchLine.PurchCommitmentLine_PSN;
            }
            else if (argsVendInvoiceTrans.RecId)
            {
                purchLineToChange.PurchCommitmentLine_PSN = argsVendInvoiceTrans.PurchCommitmentLine_PSN;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Data event handler for the OnInserted event on the <c>PurchLine</c> table
    /// </summary>
    /// <param name="sender">
    /// Buffer of the table that fires the OnInserted event
    /// </param>
    /// <param name="e">
    /// DataEventArgs argument from the OnInserted event
    /// </param>
    [DataEventHandler(tableStr(PurchLine), DataEventType::Inserted)]
    public static void purchLine_onInserted(Common _sender, DataEventArgs _e)
    {
        PurchLine           purchLine;
        PurchReqLine        purchReqLine;
        CXMLOrderEnable     orderEnable;

        purchLine = _sender;

        if(PurchLine.PurchReqId != '')
        {
            purchReqLine = PurchReqLine::findLineRefId(purchLine.PurchReqLineRefId);
            purchline.PurchSupplierAuxId = purchReqLine.PurchSupplierAuxId;

            //The PunchOutOnly will check if the property is set to true in which case the we need to see if the
            //req line came from a punchout if it did then mark the header.
            //If the property is set to false isn't turned on the try to mark the header because it doesn't matter on the line check
            orderEnable = CatCXMLPurchRequestMaintain::punchOutPOOnly(purchLine.VendAccount,PurchReqLine.LineType);

            if (orderEnable == TRUE)
            {
                CatCXMLPurchRequestMaintain::enablePOSend(purchLine.PurchId);
            }
            else
            {
                CatCXMLPurchRequestMaintain::disablePOSend(purchLine.PurchId);
            }
        }       
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>