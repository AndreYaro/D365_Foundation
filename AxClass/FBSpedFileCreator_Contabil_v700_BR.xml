<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_Contabil_v700_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>FBSpedFileCreator_Contabil_v700_BR</c> class contains the logic to create the sped contabil file.
/// </summary>
public class FBSpedFileCreator_Contabil_v700_BR extends FBSpedFileCreator_Contabil_v600_BR
{
    protected FBSPEDContabilProcessorContract_BR contract;
    protected const str Totals = '05';
    protected Map uniqueVoucherMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRecordI050</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block I050 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block I050 belongs to.
    /// </param>
    protected void createRecordI050(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;
        MainAccount mainAccount;
        DimensionAttributeValue dimensionAttributeValue;
        str accountAnalyticalSynthetic;

        while select mainAccount
            order by mainAccount.MainAccountId
            where mainAccount.LedgerChartOfAccounts == Ledger::chartOfAccounts(CompanyInfo::current())
                && mainAccount.Type != DimensionLedgerAccountType::Reporting
                && mainAccount.Type != DimensionLedgerAccountType::Common_CN
        {
            select firstonly dimensionAttributeValue
                where dimensionAttributeValue.EntityInstance == mainAccount.RecId
                    && dimensionAttributeValue.DimensionAttribute == mainAccountDimAttrRecId;

            accountAnalyticalSynthetic = mainAccount.hasChildAccount() ? 'S': 'A';

            spedRecord = FBSpedRecord_BR::constructEmpty('I050');

            spedRecord.addFieldDate     (dimensionAttributeValue.ActiveFrom ? dimensionAttributeValue.ActiveFrom : fromDate);   // DT_ALT
            spedRecord.addFieldString   (this.getAccountNatureCode(mainAccount.getType()));                                     // COD_NAT
            spedRecord.addFieldString   (accountAnalyticalSynthetic);                                                           // IND_CTA
            spedRecord.addFieldNumeric  (mainAccount.getAccountLevel());                                                        // NIVEL
            spedRecord.addFieldString   (mainAccount.MainAccountId);                                                            // COD_CTA

            if (mainAccount.ParentMainAccount)
            {
                spedRecord.addFieldString   (MainAccount::find(mainAccount.ParentMainAccount).MainAccountId);                // COD_CTA_SUP
            }
            else
            {
                spedRecord.addFieldEmpty    ();                                                                                 // COD_CTA_SUP
            }

            spedRecord.addFieldString       (mainAccount.Name);                                                                 // CTA

            this.addChildRecord(_parentRecord, spedRecord);

            if (accountAnalyticalSynthetic == 'A')
            {
                this.createRecordI051RelatedToLedgerChartOfAccounts(spedRecord, mainAccount);
                this.createRecordI052(spedRecord, mainAccount.MainAccountId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI051</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the I051 blocks for the specified SPED record and main account.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record of the created I051 blocks.
    /// </param>
    /// <param name="_mainAccountNum">
    /// The main account.
    /// </param>
    [SysObsolete('This method is obsolete. Use FBSpedFileCreator_Contabil_v700_BR.createRecordI051RelatedToLedgerChartOfAccounts() instead', true, 19\10\2020)]
    protected void createRecordI051(FBSpedRecord_BR _parentRecord, MainAccountNum _mainAccountNum)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI051RelatedToLedgerChartOfAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the I051 blocks for the specified SPED record and main account.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record of the created I051 blocks.
    /// </param>
    /// <param name="_mainAccount">
    /// The main account.
    /// </param>
    protected void createRecordI051RelatedToLedgerChartOfAccounts(FBSpedRecord_BR _parentRecord, MainAccount _mainAccount)
    {
        MainAccountConsolidateAccount_BR mainAccountConsolidateAccount_BR;
        FBSpedRecord_BR spedRecord;

        while select mainAccountConsolidateAccount_BR
            where mainAccountConsolidateAccount_BR.MainAccount == _mainAccount.RecId
        {
            spedRecord  = FBSpedRecord_BR::constructEmpty('I051');

            spedRecord.addFieldNumeric  (contract.parmInstitutionType());           // COD_AGL
            spedRecord.addFieldString    (mainAccountConsolidateAccount_BR.dimensionAttributeValueValue());
            spedRecord.addFieldString    (mainAccountConsolidateAccount_BR.ConsolidationMainAccount);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI052</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the I052 blocks for the specified SPED record and main account.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record of the created I052 blocks.
    /// </param>
    /// <param name="_mainAccountNum">
    /// The main account.
    /// </param>
    protected void createRecordI052(FBSpedRecord_BR _parentRecord, MainAccountNum _mainAccountNum)
    {
        FBSpedContabilAccountTree_BR spedContabilAccountTree, spedContabilAccountTreeAux;
        FBSpedRecord_BR spedRecord;

        select firstOnly LeftValue, RightValue from spedContabilAccountTree 
            where spedContabilAccountTree.AccountCode == _mainAccountNum;

        if (spedContabilAccountTree)
        {
            while select AccountCode from spedContabilAccountTreeAux
                order by spedContabilAccountTreeAux.AccountLevel
                where spedContabilAccountTreeAux.LeftValue < spedContabilAccountTree.LeftValue
                    && spedContabilAccountTreeAux.RightValue > spedContabilAccountTree.RightValue
                    && spedContabilAccountTreeAux.IsAgglutinationAccount == NoYes::No
            {
                spedRecord  = FBSpedRecord_BR::constructEmpty('I052');

                spedRecord.addFieldEmpty    ();                                                 // COD_CCUS
                spedRecord.addFieldString   (spedContabilAccountTreeAux.AccountCode);           // COD_AGL

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniqueVoucher</Name>
				<Source><![CDATA[
    private str getUniqueVoucher(str _voucher)
    {
        int duplicatedVoucherCount;

        if (uniqueVoucherMap.exists(_voucher))
        {
            duplicatedVoucherCount = uniqueVoucherMap.lookup(_voucher);
            duplicatedVoucherCount++;
            uniqueVoucherMap.insert(_voucher, duplicatedVoucherCount);

            return strFmt('%1_%2', _voucher, duplicatedVoucherCount);
        }
        else
        {
            uniqueVoucherMap.insert(_voucher, 0);
            return _voucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCurrentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes curernt record data into block I200 and its child blocks.
    /// </summary>
    /// <param name="_generalJournalEntryRecId">
    /// GeneralJournalEntry table record identificator.
    /// </param>
    /// <param name="_journalLines">
    /// List with journla lines.
    /// </param>
    /// <param name="_voucher">
    /// Voucher number.
    /// </param>
    /// <param name="_accountingDate">
    /// Date of posting.
    /// </param>
    /// <param name="_amount">
    /// Amount value.
    /// </param>
    /// <param name="_isExtemporaneous">
    /// Identificator of extemporaneous type.
    /// </param>
    /// <param name="_parentRecord">
    /// The parent record that the block I200 belongs to.
    /// </param>
    /// <param name="_fiscalPeriodType">
    /// Type of fiscal period.
    /// </param>
    protected void writeCurrentRecord(RecId _generalJournalEntryRecId,
        List _journalLines,
        str _voucher,
        Date _accountingDate,
        AmountMST _amount,
        NoYes _isExtemporaneous,
        FBSpedRecord_BR _parentRecord,
        FiscalPeriodType _fiscalPeriodType )
    {
        FBSpedRecord_BR spedRecord;

        if (_generalJournalEntryRecId && _journalLines.elements() > 0)
        {
            spedRecord  = FBSpedRecord_BR::constructEmpty('I200');
                
            spedRecord.addFieldString (this.getUniqueVoucher(_voucher));                                                      // NUM_LCTO
            spedRecord.addFieldDate (_accountingDate);                                               // DT_LCTO
            spedRecord.addFieldNumeric (abs(_amount), 2);                                               // VL_LCTO
            spedRecord.addFieldString (_isExtemporaneous ? 'X' : _fiscalPeriodType == FiscalPeriodType::Closing ? ' E' : 'N');   // IND_LCTO
                
            if (_isExtemporaneous && contract.parmFiscalYearClosingDate() != dateNull())
            {
                spedRecord.addFieldDate (dateEndMth(contract.parmFiscalYearClosingDate() - 370));
            }
            else
            {
                spedRecord.addFieldEmpty();
            }

            this.addChildRecord(_parentRecord, spedRecord);
                
            this.createRecordI250(spedRecord, _journalLines);
                
            if (_fiscalPeriodType == fiscalPeriodType::Closing)
            {
                hasClosingTransactions  = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI200</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block I200 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block I200 belongs to.
    /// </param>
    protected void createRecordI200(FBSpedRecord_BR _parentRecord)
    {
        const real SplitProgressBar = 20.00;
        List journalLines;
        FBSpedRecord_BR spedRecord;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalEntry_W generalJournalEntry_W;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        generalJournalAccountEntry_W generalJournalAccountEntryW;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalCalendarYear fiscalCalendarYear;
        GeneralJournalEntryRecId generalJournalEntryRecId;
        Voucher voucher;
        date accountingDate;
        FiscalPeriodType fiscalPeriodType;
        AmountMST amount;
        real progressBarIncrement;
        real gjeCount;
        real nextTargetValue;
        NoYes isExtemporaneous;
        
        fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), toDate);
        
        select count(RecId) from generalJournalEntry
            where generalJournalEntry.Ledger == Ledger::current()
                && generalJournalEntry.AccountingDate >= fromDate
                && generalJournalEntry.AccountingDate <= toDate;
        
        progressBarIncrement = generalJournalEntry.RecId < SplitProgressBar ? 1.00 : (generalJournalEntry.RecId / SplitProgressBar);
        nextTargetValue = progressBarIncrement;
        
        this.getRunBaseProgress().setCount(0);
        this.getRunBaseProgress().setTotal(real2int(SplitProgressBar));
        this.getRunBaseProgress().setCaption("@FBK72");
        this.getRunBaseProgress().update(true);
        
        while select SubledgerVoucher, JournalNumber, AccountingDate, RecId from generalJournalEntry
            order by generalJournalEntry.JournalNumber, generalJournalEntry.FiscalCalendarYear, generalJournalEntry.Ledger, generalJournalAccountEntry.RecId
            where generalJournalEntry.Ledger == Ledger::current()
                && generalJournalEntry.PostingLayer == CurrentOperationsTax::Current
                && generalJournalEntry.AccountingDate >= fromDate
                && generalJournalEntry.AccountingDate <= toDate
                join Type from fiscalCalendarPeriod
                where generalJournalEntry.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                    && (fiscalCalendarPeriod.Type == FiscalPeriodType::Operating ||
                        fiscalCalendarPeriod.Type == FiscalPeriodType::Closing)
                outer join IsExtemporaneousType_BR from generalJournalEntry_W
                    where generalJournalEntry_W.GeneralJournalEntry == generalJournalEntry.RecId
                join LedgerDimension, AccountingCurrencyAmount, Text, IsCredit from generalJournalAccountEntry
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                outer join generalJournalAccountEntryW
                    where generalJournalAccountEntryW.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
        {
            if (generalJournalEntryRecId != generalJournalEntry.RecId)
            {
                this.writeCurrentRecord(generalJournalEntryRecId,
                    journalLines,
                    voucher,
                    accountingDate,
                    amount,
                    isExtemporaneous,
                    _parentRecord,
                    fiscalPeriodType);

                generalJournalEntryRecId = generalJournalEntry.RecId;
                journalLines = new List(Types::Container);
                amount = 0;

                //init journal header

                voucher = generalJournalEntry.SubledgerVoucher == '' ? generalJournalEntry.JournalNumber : generalJournalEntry.SubledgerVoucher;
                accountingDate = generalJournalEntry.AccountingDate;
                isExtemporaneous = generalJournalEntry_W.IsExtemporaneousType_BR;
                fiscalPeriodType = fiscalCalendarPeriod.Type;
            
                gjeCount += 1;
            
                if (gjeCount >= nextTargetValue)
                {
                    this.getRunBaseProgress().incCount(1);
                    this.getRunBaseProgress().setText(strFmt("@FBK71",
                    voucher,
                    accountingDate));

                    this.getRunBaseProgress().update(true);
                
                    nextTargetValue += progressBarIncrement;
                }
            }
            
            if (fiscalCalendarPeriod.Type == FiscalPeriodType::Closing 
                && generalJournalAccountEntryW.IsAccountingClosing_BR == NoYes::No)
            {
                continue;
            }
            
            //add journal line
            container journalLine;
            
            journalLine = [generalJournalAccountEntry.LedgerDimension, generalJournalAccountEntry.AccountingCurrencyAmount, generalJournalAccountEntry.Text];
            
            journalLines.addEnd(journalLine);
            
            amount += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        
        this.writeCurrentRecord(generalJournalEntryRecId,
            journalLines,
            voucher,
            accountingDate,
            amount,
            isExtemporaneous,
            _parentRecord,
            fiscalPeriodType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNatureCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account nature code.
    /// </summary>
    /// <param name="_dimensionLedgerAccountType">
    /// A ledger account type.
    /// </param>
    /// <returns>
    /// The account nature code.
    /// </returns>
    protected str getAccountNatureCode(DimensionLedgerAccountType _dimensionLedgerAccountType)
    {
        switch (_dimensionLedgerAccountType)
        {
            case DimensionLedgerAccountType::Asset:
            case DimensionLedgerAccountType::BalanceSheet:
                return AssetAccounts;

            case DimensionLedgerAccountType::Liability:
                return LiabilityAccounts;

            case DimensionLedgerAccountType::Equity:
                return Equity;

            case DimensionLedgerAccountType::ProfitAndLoss:
            case DimensionLedgerAccountType::Expense:
            case DimensionLedgerAccountType::Revenue:
                return TotalAccounts;

            case DimensionLedgerAccountType::Total:
                return Totals;

            default: return Others;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordJ100</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record J100.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the record J100 belongs to.
    /// </param>
    /// <param name="_level">
    /// The FBSpedContabilAccountTree_BR level.
    /// </param>
    /// <param name="_left">
    /// The left branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    /// <param name="_right">
    /// The right branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    protected void writeRecordJ100(FBSpedRecord_BR _parentRecord, int _level, int _left, int _right)
    {
        const str Asset ='A';
        const str LiabilityEquity = 'P';

        FBSpedContabilAccountTree_BR spedContabilAccountTree, spedContabilAccountTreeAux;
        MainAccount mainAccount, parentMainAccount;
        FBSpedRecord_BR spedRecord;
        str indGrpBal;

        while select spedContabilAccountTree
            where spedContabilAccountTree.LeftValue > _left
                && spedContabilAccountTree.RightValue < _right
                && spedContabilAccountTree.AccountLevel == _level
                && spedContabilAccountTree.IsAgglutinationAccount == NoYes::Yes
            join Type, ParentMainAccount from mainAccount
                where mainAccount.MainAccountId == spedContabilAccountTree.AccountCode
                    && mainAccount.LedgerChartOfAccounts == Ledger::chartOfAccounts()
            outer join MainAccountId from parentMainAccount
                where parentMainAccount.RecId == mainAccount.ParentMainAccount
        {
            if (this.getAccountNatureCode(spedContabilAccountTree.AccountType) != TotalAccounts)
            {
                select sum(OpeningBalance), sum(EndingBalance) from spedContabilAccountTreeAux
                    where spedContabilAccountTreeAux.LeftValue > spedContabilAccountTree.LeftValue
                        && spedContabilAccountTreeAux.RightValue < spedContabilAccountTree.RightValue;

                switch (spedContabilAccountTree.AccountType)
                {
                    case DimensionLedgerAccountType::Asset:
                        indGrpBal = Asset;
                        break;

                    case DimensionLedgerAccountType::BalanceSheet:
                        indGrpBal = (spedContabilAccountTreeAux.EndingBalance > 0) ? LiabilityEquity : Asset;
                        break;
                    default:
                        indGrpBal = LiabilityEquity;
                        break;
                }

                spedRecord  = FBSpedRecord_BR::constructEmpty('J100');

                spedRecord.addFieldString   (spedContabilAccountTree.AccountCode);                          // COD_AGL
                spedRecord.addFieldString    (this.getAccountNatureCode(mainAccount.Type) == '05' ? 'T' : 'D');
                spedRecord.addFieldNumeric  (spedContabilAccountTree.AccountLevel);                         // NIVEL_AGL
                spedRecord.addFieldString    (parentMainAccount.MainAccountId);
                spedRecord.addFieldString   (indGrpBal);                                                    // IND_GRP_BAL
                spedRecord.addFieldString   (spedContabilAccountTree.AccountDescription);                   // DESCR_COD_AGL
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.OpeningBalance), 2);            // VL_CTA_INI
                spedRecord.addFieldString   (spedContabilAccountTreeAux.OpeningBalance > 0 ? 'D' : 'C');    // IND_DC_BAL_INI
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.EndingBalance), 2);             // VL_CTA
                spedRecord.addFieldString   (spedContabilAccountTreeAux.EndingBalance > 0 ? 'D' : 'C');     // IND_DC_BAL
                this.addExplNote(spedRecord);

                this.addChildRecord(_parentRecord, spedRecord);
            }

            this.writeRecordJ100(_parentRecord, _level + 1, spedContabilAccountTree.LeftValue, spedContabilAccountTree.RightValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordJ150</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record J150.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the record J150 belongs to.
    /// </param>
    /// <param name="_level">
    /// The FBSpedContabilAccountTree_BR level.
    /// </param>
    /// <param name="_left">
    /// The left branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    /// <param name="_right">
    /// The right branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    protected void writeRecordJ150(FBSpedRecord_BR _parentRecord, int _level, int _left, int _right)
    {
        FBSpedContabilAccountTree_BR spedContabilAccountTree, spedContabilAccountTreeAux;
        MainAccount mainAccount, parentMainAccount;
        FBSpedRecord_BR spedRecord;

        while select spedContabilAccountTree
            where spedContabilAccountTree.LeftValue > _left
                && spedContabilAccountTree.RightValue < _right
                && spedContabilAccountTree.AccountLevel == _level
                && spedContabilAccountTree.IsAgglutinationAccount == NoYes::Yes
            join Type, ParentMainAccount from mainAccount
                    where mainAccount.MainAccountId == spedContabilAccountTree.AccountCode
                        && mainAccount.LedgerChartOfAccounts == Ledger::chartOfAccounts()
                outer join MainAccountId from parentMainAccount
                    where parentMainAccount.RecId == mainAccount.ParentMainAccount
        {
            if (this.getAccountNatureCode(spedContabilAccountTree.AccountType) == TotalAccounts)
            {
                select sum(OpeningBalance), sum(EndingBalance) from spedContabilAccountTreeAux
                    where spedContabilAccountTreeAux.LeftValue > spedContabilAccountTree.LeftValue
                        && spedContabilAccountTreeAux.RightValue < spedContabilAccountTree.RightValue;

                spedRecord = FBSpedRecord_BR::constructEmpty('J150');

                spedRecord.addFieldString   (spedContabilAccountTree.AccountCode);                                                          // COD_AGL
                spedRecord.addFieldString    (this.getAccountNatureCode(mainAccount.Type) == '05' ? 'T' : 'D');
                spedRecord.addFieldNumeric  (spedContabilAccountTree.AccountLevel);                                                         // NIVEL_AGL
                spedRecord.addFieldString    (parentMainAccount.MainAccountId);
                spedRecord.addFieldString   (spedContabilAccountTree.AccountDescription);                                                   // DESCR_COD_AGL
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.EndingBalance), 2);                                             // VL_CTA
                spedRecord.addFieldString   (spedContabilAccountTreeAux.EndingBalance > 0 ? 'D' : 'C');                                     // IND_DC_BAL
                spedRecord.addFieldString   (spedContabilAccountTreeAux.EndingBalance > 0 ? 'D' : 'R');
                spedRecord.addFieldEmpty    ();

                this.addChildRecord(_parentRecord, spedRecord);
            }

            this.writeRecordJ150(_parentRecord, _level + 1, spedContabilAccountTree.LeftValue, spedContabilAccountTree.RightValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ801</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block J801.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J801 belongs to.
    /// </param>
    protected void createRecordJ801(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;
        FBSpedFieldString_BR spedFieldStr;
        str rtfData;

        if (fileType != FBSPEDFileType_BR::Original)
        {
            rtfData = strReplace(replaceRTFFileContent, '\n', '');
            rtfData = strReplace(rtfData, '\r', '');

            spedFieldStr = new FBSpedFieldString_BR(rtfData, 0, false);

            spedRecord = FBSpedRecord_BR::constructEmpty('J801');

            spedRecord.addFieldString   (this.docTypeStr());        // TIPO_DOC
            spedRecord.addFieldString   (substDescription);         // DESC_RTF
            spedRecord.addFieldString    (strFmt("00%1", contract.parmSubstitutionReasonCode()));
            spedRecord.addFieldEmpty    ();                         // HASH_RTF
            //RTF content should not be distorted by formatting
            spedRecord.addField         (spedFieldStr, true);       // ARQ_RTF
            spedRecord.addFieldString   ('J801FIM');                // IND_FIM_RTF

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ935</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block J935.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block J935 belongs to.
    /// </param>
    protected void createRecordJ935(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;
        FBFiscalAuditor_BR fiscalAuditor;

        while select fiscalAuditor 
            where fiscalAuditor.FiscalOrganization == fiscalOrganization.RecId
        {
            spedRecord = FBSpedRecord_BR::constructEmpty('J935');

            spedRecord.addFieldString(this.keepNumbers(fiscalAuditor.CNPJCPFNum_BR));
            spedRecord.addFieldString(fiscalAuditor.Name);
            spedRecord.addFieldString(fiscalAuditor.CVMNumber);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of contract class
    /// </summary>
    /// <param name = "_contract">FBSPEDContabilProcessorContract_BR instance</param>
    /// <param name = "_fbFile">FBFile_BR instance</param>
    public void new(FBSPEDContabilProcessorContract_BR _contract, FBFile_BR _fbFile)
    {
        contract = _contract;
        uniqueVoucherMap = new Map(Types::String, Types::Integer);
        
        super(_contract, _fbFile);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>