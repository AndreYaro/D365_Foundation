<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableIntervalFactory_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a factory class of AssetTableInterval for a specific value mode/depreciation book
/// considering fiscal canlendar change and depreicaition profile change.
/// </summary>
class AssetTableIntervalFactory_JP
{
    AssetDepBookMap_JP  assetDepBookMap;
    Map                 assetTableIntervals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetTableInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a instance of a sub class of <C>AssetTableInterval</C> based on the specified date.
    /// </summary>
    /// <param name="_date">
    /// The date used to get the asset table interval.
    /// </param>
    /// <returns>
    /// An instance of a sub class of <C>AssetTableInterval</C>.
    /// </returns>
    public AssetTableInterval getAssetTableInterval(AssetTransDate _date)
    {
        AssetTableInterval      ret;
        MapEnumerator           enumerator;

        enumerator = assetTableIntervals.getEnumerator();
        while (enumerator.moveNext())
        {
            if (enumerator.currentKey() <= _date)
            {
                ret = enumerator.currentValue();
            }
            else
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance
    /// </summary>
    /// <param name="_isCacheTable">
    /// If ture, cache fiscal calendar tables to avoid multiple database call; optional.
    /// </param>
    protected void init(boolean _isCacheTable)
    {
        AssetDepProfileChange_JP        assetDepProfileChange;
        AssetTransDate                  fromDate = dateNull();
        AssetTransDate                  toDate = dateMax();

        // Build the default AssetTableInterval
        assetTableIntervals.insert(dateNull(), assetDepBookMap.AssetDepBookMap_JP::assetTableInterval(dateNull(), _isCacheTable));

        // Build all needed AssetTableInterval based on the depreciation profile change
        if (AssetParameters::isManuallyChangeDepProfileEnable_JP())
        {
            while select validTimeState(fromDate, ToDate) ValidFrom from assetDepProfileChange
                order by assetDepProfileChange.ValidFrom
                where assetDepProfileChange.SourceTableId == assetDepBookMap.TableId
                    && assetDepProfileChange.SourceRecId == assetDepBookMap.RecId
            {
                assetTableIntervals.insert(
                    assetDepProfileChange.ValidFrom,
                    assetDepBookMap.AssetDepBookMap_JP::assetTableInterval(assetDepProfileChange.ValidFrom, _isCacheTable));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new AssetTableIntervalFactory_JP instance
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// <c>AssetDepBookMap_JP</c>
    /// </param>
    /// <param name="_isCacheTable">
    /// If ture, cache fiscal calendar tables to avoid multiple database call; optional.
    /// </param>
    /// <remarks>
    /// Performance consideration:
    ///     If no functions in class <c>AssetTableInterval_Fiscal_JP</c> will be called, set param _isCacheTable to false.
    /// </remarks>
    public void new(AssetDepBookMap_JP _assetDepBookMap, boolean _isCacheTable = true)
    {
        assetTableIntervals = new Map(Types::Date, Types::Class);
        assetDepBookMap = _assetDepBookMap;

        this.init(_isCacheTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>