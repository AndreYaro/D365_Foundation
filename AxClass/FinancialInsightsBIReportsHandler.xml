<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FinancialInsightsBIReportsHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles drillthrough events from the Financial insights PowerBI report and launches the accounting source explorer with filtering based on the BI report, page, or visual.
/// </summary>
public class FinancialInsightsBIReportsHandler
{
    const str financialReportVisualName = 'financialReportVisual9770708701924EAC8825EFFAED290B3E';
    const str mainAccountField = 'Main account';
    const str companyDescField = 'Organization';
    const str fiscalCalendarField = 'Fiscal calendar';
    const str yearField = 'Fiscal year';
    const str quarterField = 'Quarter';
    const str monthField = 'Calendar month';
    const str periodField = 'Period';
    const str projIdField = 'PROJID';


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildReportDrillThru</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribe to drillthrough events on specific sections and handle launching filtered forms.
    /// </summary>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    [SubscribesTo(classstr(PowerBIReportControl), delegatestr(PowerBIReportControl, buildReportDrillThru))]
    public static void buildReportDrillThru(PBIReportSelectedData _data)
    {
        if (!_data)
        {
            return;
        }

        switch (_data.visual().type())
        {
            case financialReportVisualName:
                FinancialInsightsBIReportsHandler handler = new FinancialInsightsBIReportsHandler();
                AccountingSourceExplorerBalanceParameters balanceParms = handler.populateAccountingSourceExplorerParameters(_data);
                if(balanceParms)
                {
                    handler.runMenuFunction(menuItemDisplayStr(AccountingSourceExplorer), balanceParms);         
                }
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMenuFunction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the specified menu function with the supplied parameters
    /// </summary>
    /// <param name = "_menuItem">The menu item to run</param>
    /// <param name = "_object">The parameters to supply as arguments to running the function</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void runMenuFunction(str _menuItem, AccountingSourceExplorerBalanceParameters _object)
    {
        Args args = new Args();
        args.parmObject(_object);
        args.menuItemName(_menuItem);
        args.caller(this);

        new MenuFunction(_menuItem, MenuItemType::Display).run(args);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAccountingSourceExplorerParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AccountingSourceExplorerBalanceParameters populateAccountingSourceExplorerParameters(PBIReportSelectedData _data)
    {
        Map data = FinancialInsightsBIReportsHandler::getIdentityMap(_data);

        AccountingSourceExplorerBalanceParameters balanceParms = AccountingSourceExplorerBalanceParameters::construct();
        if(!this.populateRequiredFields(balanceParms, data))
        {
            return null;
        }

        this.populateOptionalFields(balanceParms, data);

        return balanceParms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRequiredFields</Name>
				<Source><![CDATA[
    private boolean populateRequiredFields(AccountingSourceExplorerBalanceParameters balanceParms, Map _data)
    {
        return this.populateBalanceDateParms(balanceParms, _data)
            && this.populateMainAccount(balanceParms, _data)
            && this.populateLedger(balanceParms, _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOptionalFields</Name>
				<Source><![CDATA[
    private void populateOptionalFields(AccountingSourceExplorerBalanceParameters _balanceParms, Map _data)
    {
        if(_data.exists(projIdField))
        {
            _balanceParms.parmProjId(_data.lookup(projIdField));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccount</Name>
				<Source><![CDATA[
    private boolean populateMainAccount(AccountingSourceExplorerBalanceParameters _balanceParms, Map _data)
    {
        if(_data.exists(mainAccountField))
        {
            str mainAccountName = subStr(_data.lookup(mainAccountField), 1, 6);
            MainAccount mainAccount;
            select firstonly MainAccountId from mainAccount
                where mainAccount.MainAccountId == mainAccountName;

            if(mainAccount)
            {
                _balanceParms.parmMainAccountNum(mainAccount.MainAccountId);
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLedger</Name>
				<Source><![CDATA[
    private boolean populateLedger(AccountingSourceExplorerBalanceParameters _balanceParms, Map _data)
    {
        if(_data.exists(companyDescField))
        {
            str companyDesc = _data.lookup(companyDescField);
            CompanyInfo companyInfo;

            select firstonly RecId from companyInfo
                where companyInfo.Name == companyDesc;
    
            if(companyInfo)
            {
                LedgerRecId ledgerRecId = Ledger::primaryLedger(companyInfo.RecId);
                if(ledgerRecId)
                {
                    _balanceParms.parmLedger(ledgerRecId);
                    return true;
                }
            } 
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBalanceDateParms</Name>
				<Source><![CDATA[
    private boolean populateBalanceDateParms(AccountingSourceExplorerBalanceParameters _balanceParms, Map _data)
    {
        if(_data.exists(fiscalCalendarField) && _data.exists(yearField))
        {
            str calendar = _data.lookup(fiscalCalendarField);
            str year = _data.lookup(yearField);

            FiscalCalendar fiscalCalendar;
            FiscalCalendarYear fiscalCalendarYear;
            select firstonly RecId, StartDate, EndDate
                from fiscalCalendarYear join fiscalCalendar
                where fiscalCalendar.CalendarId == calendar
                && fiscalCalendarYear.Name == year
                && fiscalCalendarYear.FiscalCalendar == fiscalCalendar.RecId;

            if(fiscalCalendarYear)
            {
                RecId fiscalYear = fiscalCalendarYear.RecId;
                date startDate = fiscalCalendarYear.StartDate;
                date endDate = fiscalCalendarYear.EndDate;

                container dateRange;
                if(_data.exists(periodField))
                {
                    str periodName = _data.lookup(periodField);
                    dateRange = this.getDateRangeForPeriod(periodName, fiscalYear);
                }
                else if(_data.exists(monthField))
                {
                    str monthName = _data.lookup(monthField);
                    dateRange = this.getDateRangeForMonth(monthName, fiscalYear);
                }
                else if(_data.exists(quarterField))
                {
                    FiscalQuarter fiscalQuarter = this.convertQuarter(_data.lookup(quarterField));
                    dateRange = this.getDateRangeForQuarter(fiscalQuarter, fiscalYear);
                }

                if(dateRange)
                {
                    startDate = conPeek(dateRange, 1);
                    endDate = conPeek(dateRange, 2);
                }
                
                if(startDate && endDate)
                {
                    _balanceParms.parmStartDate(startDate);
                    _balanceParms.parmEndDate(endDate);
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateRangeForQuarter</Name>
				<Source><![CDATA[
    private container getDateRangeForQuarter(FiscalQuarter _fiscalQuarter, RecId _fiscalCalendarYear)
    {
        FiscalCalendarPeriod fiscalPeriod;
        select firstonly StartDate from fiscalPeriod
        order by StartDate asc
        where fiscalPeriod.Quarter == _fiscalQuarter
            && fiscalPeriod.FiscalCalendarYear == _fiscalCalendarYear
            && fiscalPeriod.Type == FiscalPeriodType::Operating;
        date startDate = fiscalPeriod.StartDate;

        select firstonly EndDate from fiscalPeriod
        order by StartDate desc
        where fiscalPeriod.Quarter == _fiscalQuarter
            && fiscalPeriod.FiscalCalendarYear == _fiscalCalendarYear
            && fiscalPeriod.Type == FiscalPeriodType::Operating;
        date endDate = fiscalPeriod.EndDate;

        return [startDate, endDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateRangeForMonth</Name>
				<Source><![CDATA[
    private container getDateRangeForMonth(str _monthName, RecId _fiscalCalendarYear)
    {
        int monthNumber = this.monthNameToNumber(_monthName);

        if(monthNumber > 0)
        {
            FiscalCalendarPeriod fiscalCalendarPeriod;

            while select * from fiscalCalendarPeriod
                where fiscalCalendarPeriod.FiscalCalendarYear == _fiscalCalendarYear
                && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            {
                int periodMonthNumber = DateTimeUtil::month(DateTimeUtil::newDateTime(fiscalCalendarPeriod.StartDate, 0));
                if(periodMonthNumber == monthNumber)
                {
                    return [fiscalCalendarPeriod.StartDate, fiscalCalendarPeriod.EndDate];
                }
            }
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateRangeForPeriod</Name>
				<Source><![CDATA[
    private container getDateRangeForPeriod(str _periodName, RecId _fiscalCalendarYear)
    {
        FiscalCalendarPeriod fiscalPeriod;
        select firstonly StartDate, EndDate from fiscalPeriod
        where fiscalPeriod.FiscalCalendarYear == _fiscalCalendarYear
            && fiscalPeriod.Name == _periodName;

        return [fiscalPeriod.StartDate, fiscalPeriod.EndDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQuarter</Name>
				<Source><![CDATA[
    private FiscalQuarter convertQuarter(str _quarter)
    {
        switch(_quarter)
        {
            case 'Q1':
                return FiscalQuarter::Q1;
            case 'Q2':
                return FiscalQuarter::Q2;
            case 'Q3':
                return FiscalQuarter::Q3;
            case 'Q4':
                return FiscalQuarter::Q4;
            default:
                return FiscalQuarter::Q1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthNameToNumber</Name>
				<Source><![CDATA[
    private int monthNameToNumber(str _monthName)
    {
        switch(_monthName)
        {
            case 'January':
                return 1;
            case 'February':
                return 2;
            case 'March':
                return 3;
            case 'April':
                return 4;
            case 'May':
                return 5;
            case 'June':
                return 6;
            case 'July':
                return 7;
            case 'August':
                return 8;
            case 'September':
                return 9;
            case 'October':
                return 10;
            case 'November':
                return 11;
            case 'December':
                return 12;
            default:
                return -1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIdentityMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Key/Value pairs from a <c>PowerBIReportSelectedData</c> object. The Key is the Column and the Value is the column's value.
    /// </summary>
    /// <param name = "_data">An object representing drillthrough data passed from the report.</param>
    /// <returns>The PowerBi data returned as Key/Value pairs</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Map getIdentityMap(PBIReportSelectedData _data)
    {
        ListEnumerator enum;
        ListIterator iterator = new ListIterator(_data.dataPoints());
        if(iterator.more())
        {
            List identitiesList = iterator.value().identities();
            enum = identitiesList.getEnumerator();
        }
        
        Map data = new Map(Types::String, Types::String);
        while (enum && enum.moveNext())
        {
            str fieldId = enum.current().target().column();
            str value = enum.current().identityEquals();
            data.insert(fieldId, value);
        }

        return data;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>