<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqScheduleParallelFirmingContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class gets the parameters used to define which planned orders get firmed.
/// </summary>
[DataContract]
public class ReqScheduleParallelFirmingContract implements SysOperationInitializable
{
    private ReqProcessNumThreads maxChildThreads;
    private container conReqTransMark;
    private ReqPOCollectPerPlanningPriority collectPerPlanningPriority;
    private ReqPOCollectPerPlanningPriorityTransfer collectPerPlanningPriorityTransfer;
    private ReqPOCollectPerVendor collectPerVendor;
    private ReqPOCollectPerBuyer collectPerBuyer;
    private ReqPOCollectPerPurchAgreement collectPerPurchAgreement;
    private ReqPoCollectPerPeriod collectPerPeriodPurch;
    private ReqPoCollectPerPeriod collectPerPeriodJournal;
    private PurchId callerPurchId;
    private ReqMarkUpdate reqMarkUpdate;
    private ReqPOSearchPurchAgreement searchPurchAgreement;
    private ReqRefType refType;

    private const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the contract.
    /// </summary>
    public void initialize()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxChildThreads</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqProcessNumThreads parmMaxChildThreads(ReqProcessNumThreads _maxChildThreads = maxChildThreads)
    {
        maxChildThreads = _maxChildThreads;
        return maxChildThreads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConReqTransMark</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container parmConReqTransMark(container _conReqTransMark = conReqTransMark)
    {
        conReqTransMark = _conReqTransMark;
        return conReqTransMark;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqRefType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqRefType parmReqRefType(ReqRefType _refType = refType)
    {
        refType = _refType;
        return refType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchPurchAgreement</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqPOSearchPurchAgreement parmSearchPurchAgreement(ReqPOSearchPurchAgreement _searchPurchAgreement = searchPurchAgreement)
    {
        searchPurchAgreement = _searchPurchAgreement;
        return searchPurchAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqMarkUpdate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqMarkUpdate parmReqMarkUpdate(ReqMarkUpdate _reqMarkUpdate = reqMarkUpdate)
    {
        reqMarkUpdate = _reqMarkUpdate;
        return reqMarkUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerPlanningPriority</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqPOCollectPerPlanningPriority parmCollectPerPlanningPriority(ReqPOCollectPerPlanningPriority _collectPerPlanningPriority = collectPerPlanningPriority)
    {
        collectPerPlanningPriority = _collectPerPlanningPriority;
        return collectPerPlanningPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerPlanningPriorityTransfer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqPOCollectPerPlanningPriorityTransfer parmCollectPerPlanningPriorityTransfer(ReqPOCollectPerPlanningPriorityTransfer _collectPerPlanningPriorityTransfer = collectPerPlanningPriorityTransfer)
    {
        collectPerPlanningPriorityTransfer = _collectPerPlanningPriorityTransfer;
        return collectPerPlanningPriorityTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerVendor</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqPOCollectPerVendor parmCollectPerVendor(ReqPOCollectPerVendor _collectPerVendor = collectPerVendor)
    {
        collectPerVendor = _collectPerVendor;
        return collectPerVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerBuyer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqPOCollectPerBuyer parmCollectPerBuyer(ReqPOCollectPerBuyer _collectPerBuyer = collectPerBuyer)
    {
        collectPerBuyer = _collectPerBuyer;
        return collectPerBuyer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerPurchAgreement</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqPOCollectPerPurchAgreement parmCollectPerPurchAgreement(ReqPOCollectPerPurchAgreement _collectPerPurchAgreement = collectPerPurchAgreement)
    {
        collectPerPurchAgreement = _collectPerPurchAgreement;
        return collectPerPurchAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerPeriodPurch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqPoCollectPerPeriod parmCollectPerPeriodPurch(ReqPoCollectPerPeriod _collectPerPeriodPurch = collectPerPeriodPurch)
    {
        collectPerPeriodPurch = _collectPerPeriodPurch;
        return collectPerPeriodPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectPerPeriodJournal</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ReqPoCollectPerPeriod parmCollectPerPeriodJournal(ReqPoCollectPerPeriod _collectPerPeriodJournal = collectPerPeriodJournal)
    {
        collectPerPeriodJournal = _collectPerPeriodJournal;
        return collectPerPeriodJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerPurchId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal PurchId parmCallerPurchId(PurchId _callerPurchId = callerPurchId)
    {
        callerPurchId = _callerPurchId;
        return callerPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packedExtension = 
        [
            CurrentVersion,
            maxChildThreads,
            conReqTransMark,
            collectPerVendor,
            collectPerBuyer,
            collectPerPurchAgreement,
            collectPerPeriodPurch,
            collectPerPeriodJournal,
            callerPurchId,
            reqMarkUpdate,
            searchPurchAgreement,
            refType
        ];

        packedExtension = this.appendVariableToPack(packedExtension, varStr(collectPerPlanningPriority), collectPerPlanningPriority);
        packedExtension = this.appendVariableToPack(packedExtension, varStr(collectPerPlanningPriorityTransfer), collectPerPlanningPriorityTransfer);

        return SysPackExtensions::appendExtension(conNull(), classStr(ReqScheduleParallelFirmingContract), packedExtension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        if (_packed == conNull())
        {
            return false;
        }

        container extensionPacked = SysPackExtensions::findExtension(_packed, classStr(ReqScheduleParallelFirmingContract));

        Integer   version = RunBase::getVersion(extensionPacked);

        switch (version)
        {
            case CurrentVersion:
                [
                    version,
                    maxChildThreads,
                    conReqTransMark,
                    collectPerVendor,
                    collectPerBuyer,
                    collectPerPurchAgreement,
                    collectPerPeriodPurch,
                    collectPerPeriodJournal,
                    callerPurchId,
                    reqMarkUpdate,
                    searchPurchAgreement,
                    refType
                ] = extensionPacked;
                
                collectPerPlanningPriority = this.extractPackedVariable(extensionPacked, varStr(collectPerPlanningPriority));
                collectPerPlanningPriorityTransfer = this.extractPackedVariable(extensionPacked, varStr(collectPerPlanningPriorityTransfer));

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype value;
        [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        // It has to be a XppEventHandlerCalledWhen::Post type, because otherwise the assignment to setReturnValue will do nothing
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        
        // The SysPackExtensions::pack method uses the return value as the source of the container but the unpack uses the args, so need to set both
        prePostArgs.setReturnValue(_pack);

        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(ReqScheduleParallelFirmingContract) + '.' + _variableName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>