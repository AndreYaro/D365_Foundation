<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationTaxFeatureSetupTransformationUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.TaxCalculation.ApiContracts;

/// <summary>
/// The <c>TaxIntegrationTaxFeatureSetupTransformationUtils</c> class provides utility methods for transforming tax feature setup.
/// </summary>
internal final class TaxIntegrationTaxFeatureSetupTransformationUtils
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertLookupMatrixToXppList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an LookupMatrix object to a xpp <c>List</c>.
    /// </summary>
    /// <param name = "_lookupMatrix">An object of LookupMatrix.</param>
    /// <param name = "_includeConditionFields">A boolean that determines if the condition items are included in the result.</param>
    /// <param name = "matrixName">The matrix name, optional.</param>
    /// <returns>A xpp <c>List</c>.</returns>
    internal static List convertLookupMatrixToXppList(LookupMatrix _lookupMatrix, boolean _includeConditionFields = false, str matrixName = '')
    {
        List matrixEntryList = new List(Types::Class);

        LookupSchema lookupSchema = _lookupMatrix.Schema;
        System.Collections.IEnumerable lookupStatementList = _lookupMatrix.Entity.Statements;
        System.Collections.IEnumerator lookupStatementListEnumerator = lookupStatementList.GetEnumerator();
        while (lookupStatementListEnumerator.MoveNext())
        {
            LookupStatement statement = lookupStatementListEnumerator.Current;
            Map fieldsMap = new Map(Types::String, Types::AnyType);

            if (_includeConditionFields)
            {
                System.Collections.IDictionary conditionItems = lookupSchema.ConditionItems;
                System.Collections.IDictionaryEnumerator conditionItemsEnumerator = conditionItems.GetEnumerator();
                while (conditionItemsEnumerator.MoveNext())
                {
                    LookupField lookupField = conditionItemsEnumerator.Value;

                    if (statement.ConditionItems.Contains(conditionItemsEnumerator.Key))
                    {
                        str fieldStrValue = statement.ConditionItems.get_Item(conditionItemsEnumerator.Key);
                        fieldsMap.add(conditionItemsEnumerator.Key, TaxIntegrationTaxFeatureSetupTransformationUtils::normalizeFieldValue(fieldStrValue, lookupField.FieldType));
                    }
                    else
                    {
                        fieldsMap.add(conditionItemsEnumerator.Key, TaxIntegrationTaxFeatureSetupTransformationUtils::defaultValueForLookupFieldType(lookupField.FieldType, true));
                    }
                }
            }

            if (matrixName == TaxIntegrationTaxServiceConstants::TaxGroupMatrixName
                || matrixName == TaxIntegrationTaxServiceConstants::ItemTaxGroupMatrixName)
            {
                // The tax code field is a special field which is not defined in LookupSchema.
                if (statement.ValueItems.Contains(TaxIntegrationTaxServiceConstants::TaxCodeFieldName))
                {
                    fieldsMap.add(TaxIntegrationTaxServiceConstants::TaxCodeFieldName, statement.ValueItems.get_Item(TaxIntegrationTaxServiceConstants::TaxCodeFieldName));
                }
                else
                {
                    fieldsMap.add(TaxIntegrationTaxServiceConstants::TaxCodeFieldName, '');
                }
            }

            System.Collections.IDictionary valueItems = lookupSchema.ValueItems;
            System.Collections.IDictionaryEnumerator valueItemsEnumerator = valueItems.GetEnumerator();
            while (valueItemsEnumerator.MoveNext())
            {
                LookupField lookupField = valueItemsEnumerator.Value;

                if (statement.ValueItems.Contains(valueItemsEnumerator.Key))
                {
                    str fieldStrValue = statement.ValueItems.get_Item(valueItemsEnumerator.Key);
                    fieldsMap.add(valueItemsEnumerator.Key, TaxIntegrationTaxFeatureSetupTransformationUtils::normalizeFieldValue(fieldStrValue, lookupField.FieldType));
                }
            }

            matrixEntryList.addEnd(fieldsMap);
        }

        return matrixEntryList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizeFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Normalizes the field value in tax solution.
    /// </summary>
    /// <param name = "_fieldValue">The field value in string format.</param>
    /// <param name = "_fieldType">The field type.</param>
    /// <returns>The normalized field value.</returns>
    private static anytype normalizeFieldValue(str _fieldValue, LookupFieldType _fieldType)
    {
        if (!_fieldValue)
        {
            return TaxIntegrationTaxFeatureSetupTransformationUtils::defaultValueForLookupFieldType(_fieldType);
        }

        if (strStartsWith(_fieldValue, '[') || strStartsWith(_fieldValue, '('))
        {
            return TaxIntegrationTaxFeatureSetupTransformationUtils::convertRangeConditonToContainer(_fieldValue, _fieldType);
        }

        System.Object clrObject;

        switch (_fieldType)
        {
            case LookupFieldType::Value:
            case LookupFieldType::Percentage:
                clrObject = System.Convert::ToDecimal(_fieldValue);
                break;

            case LookupFieldType::Bool:
                clrObject = System.Convert::ToBoolean(_fieldValue);
                break;

            case LookupFieldType::Date:
                clrObject = System.Convert::ToDateTime(_fieldValue);
                break;

            default:
                clrObject = System.Convert::ToString(_fieldValue);
                break;
        }

        return CLRInterop::getAnyTypeForObject(clrObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertRangeConditonToContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts range in string format to a container.
    /// </summary>
    /// <param name = "_rangeCondition">The range in string format.</param>
    /// <param name = "_fieldType">The field type of the range.</param>
    /// <returns>An container that contains the start value and end value of the range.</returns>
    private static container convertRangeConditonToContainer(System.String _rangeCondition, LookupFieldType _fieldType)
    {
        System.String trimmedRangeCondition = _rangeCondition.Trim('[', '(', ')', ']');

        int indexOfDelimiter = trimmedRangeCondition.IndexOf(',');

        str fromValue = trimmedRangeCondition.Substring(0, indexOfDelimiter).Trim();
        str toValue = trimmedRangeCondition.Substring(indexOfDelimiter + 1).Trim();

        return [TaxIntegrationTaxFeatureSetupTransformationUtils::normalizeFieldValue(fromValue, _fieldType), TaxIntegrationTaxFeatureSetupTransformationUtils::normalizeFieldValue(toValue, _fieldType)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueForLookupFieldType</Name>
				<Source><![CDATA[
    /// <summary>
    /// The default value for the specified LookupFieldType.
    /// </summary>
    /// <param name = "_fieldType">The LookupFieldType.</param>
    /// <param name = "_isConditionItem">An boolean indicates if the defaut value if for a conditon item.</param>
    /// <returns>The default value.</returns>
    private static anytype defaultValueForLookupFieldType(LookupFieldType _fieldType, boolean _isConditionItem = false)
    {
        anytype defaultValue;

        switch (_fieldType)
        {
            case LookupFieldType::Value:
            case LookupFieldType::Percentage:
                if (_isConditionItem)
                {
                    defaultValue = conNull();
                }
                else
                {
                    defaultValue = 0;
                }
                break;

            case LookupFieldType::Bool:
                defaultValue = false;
                break;

            case LookupFieldType::Date:
                if (_isConditionItem)
                {
                    defaultValue = conNull();
                }
                else
                {
                    defaultValue = dateNull();
                }
                break;
            default:
                defaultValue = '';
                break;
        }

        return defaultValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>