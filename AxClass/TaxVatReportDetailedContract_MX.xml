<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVatReportDetailedContract_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for TaxVatReportDetailed_MX SSRS report
/// </summary>
/// <remarks>
/// This is the Data Contract class for the TaxVatReportDetailed_MX SSRS Report.
/// </remarks>
[
    #VATReports_SSRSParameters_MX
    DataContract,
    SysOperationGroup(#DateGroup, "@Mexico:VatReport_DateRange_FieldGroup", '1'),
    SysOperationGroup(#CategoryGroup, "@Mexico:VatReport_Category_FieldGroup", '2'),
    SysOperationGroup(#ReportGroup, "@Mexico:VatReport_Report_FieldGroup", '3')
]
public class TaxVatReportDetailedContract_MX implements SysOperationValidatable
{
    TransDate                       fromDate;
    TransDate                       toDate;
    TaxVatReportCategoryCode_MX     fromCategory;
    TaxVatReportCategoryCode_MX     toCategory;
    TaxVatReportOption_MX           taxVatReportOption;
    SalesPurch                      salesPurch;
    TaxPeriod                       unrealizedTaxPeriod;
    TaxPeriod                       realizedTaxPeriod;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        fromDate,
        toDate,
        fromCategory,
        toCategory,
        taxVatReportOption,
        unrealizedTaxPeriod,
        realizedTaxPeriod,
        salesPurch
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fromCategory.
    /// </summary>
    /// <param name="_fromCategory">
    /// The new value of the datacontract parameter fromCategory; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter fromCategory
    /// </returns>
    [
        DataMember(#FromCategory),
        SysOperationLabel(literalStr("@Mexico:VatReport_From")),
        SysOperationGroupMember(#CategoryGroup),
        SysOperationDisplayOrder('1')
    ]
    public TaxVatReportCategoryCode_MX parmFromCategory(TaxVatReportCategoryCode_MX _fromCategory = fromCategory)
    {
        fromCategory = _fromCategory;
        return fromCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter fromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter fromDate
    /// </returns>
    [
        DataMember(#FromDate),
        SysOperationLabel(literalStr("@Mexico:VatReport_From")),
        SysOperationGroupMember(#DateGroup),
        SysOperationDisplayOrder('1')
    ]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter salesPurch.
    /// </summary>
    /// <param name="_salesPurch">
    /// The new value of the datacontract parameter salesPurch; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter salesPurch
    /// </returns>
    [
        DataMember(#SalesPurch)
    ]
    public SalesPurch parmSalesPurch(SalesPurch _salesPurch = salesPurch)
    {
        salesPurch = _salesPurch;
        return salesPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxVatReportOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter taxVatReportOption.
    /// </summary>
    /// <param name="_taxVatReportOption">
    /// The new value of the datacontract parameter taxVatReportOption; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter taxVatReportOption
    /// </returns>
    ///
    [
        DataMember(#VatReportOption),
        SysOperationGroupMember(#ReportGroup),
        SysOperationLabel(literalstr("@Mexico:VatReport_Type")),
        SysOperationDisplayOrder('1')
    ]
    public TaxVatReportOption_MX parmTaxVatReportOption(TaxVatReportOption_MX _taxVatReportOption = taxVatReportOption)
    {
        taxVatReportOption = _taxVatReportOption;
        return taxVatReportOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter toCategory.
    /// </summary>
    /// <param name="_toCategory">
    /// The new value of the datacontract parameter toCategory; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter toCategory
    /// </returns>
    [
        DataMember(#ToCategory),
        SysOperationLabel(literalStr("@Mexico:VatReport_To")),
        SysOperationGroupMember(#CategoryGroup),
        SysOperationDisplayOrder('2')
    ]
    public TaxVatReportCategoryCode_MX parmToCategory(TaxVatReportCategoryCode_MX _toCategory = toCategory)
    {
        toCategory = _toCategory;
        return toCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter toDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter toDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter toDate
    /// </returns>
    [
        DataMember(#ToDate)
    ]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnrealizedTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Unrealized Tax Period.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The new value of the datacontract parameter Unrealized Tax Period; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Unrealized Tax Period
    /// </returns>
    [
        DataMember(#UnrealizedTaxPeriod),
        SysOperationLabel(literalStr("@Mexico:VatReport_UnrealizedTaxPeriod")),
        SysOperationGroupMember(#ReportGroup),
        SysOperationDisplayOrder('2')
    ]
    public TaxPeriod parmUnrealizedTaxPeriod(TaxPeriod _unrealizedTaxPeriod = unrealizedTaxPeriod)
    {
        unrealizedTaxPeriod = _unrealizedTaxPeriod;
        return unrealizedTaxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRealizedTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Realized Tax Period.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The new value of the datacontract parameter Realized Tax Period; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Realized Tax Period
    /// </returns>
    [
        DataMember(#RealizedTaxPeriod),
        SysOperationLabel(literalStr("@Mexico:VatReport_RealizedTaxPeriod")),
        SysOperationGroupMember(#ReportGroup),
        SysOperationDisplayOrder('3')
    ]
    public TaxPeriod parmRealizedTaxPeriod(TaxPeriod _realizedTaxPeriod = realizedTaxPeriod)
    {
        realizedTaxPeriod = _realizedTaxPeriod;
        return realizedTaxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  packedClass)
    {
        boolean         ret;
        Integer         version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the <c>fromDate</c> values that is entered by the user is correct
    ///    and that the <c>fromCategory</c> and <c>toCategory</c> values that the user selected is correct.
    /// </summary>
    /// <returns>
    ///    true if both conditions are satisfied; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (!fromDate)
        {
            ret = checkFailed("@SYS312566");
        }
        if (ret
            && (fromCategory  == '' && toCategory == ''))
        {
            ret = checkFailed("@SYS312568");
        }
        if (ret
            && (fromCategory && toCategory == ''))
        {
            ret = checkFailed("@SYS312569");
        }
        if (ret
            && (fromCategory == '' && toCategory))
        {
            ret = checkFailed("@SYS312570");
        }

        if (ret && !this.validateCategoryRange())
        {
            ret = checkFailed("@SYS312591");
        }

        ret = ret && this.validateTaxPeriods();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCategoryRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the <c>fromCategory</c> value is larger than the <c>toCategory</c> value when
    ///    running the report.
    /// </summary>
    /// <returns>
    ///    true if the <c>fromCategory</c> value is larger than the <c>toCategory</c> value; otherwise, false.
    /// </returns>
    private boolean validateCategoryRange()
    {
        boolean ok = true;

        if (fromCategory > toCategory)
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxPeriods</Name>
				<Source><![CDATA[
    private boolean validateTaxPeriods()
    {
        boolean ret = true;

        if ((taxVatReportOption == TaxVatReportOption_MX::Unrealized || taxVatReportOption == TaxVatReportOption_MX::Both) && unrealizedTaxPeriod == '')
        {
            ret = checkFailed("@Mexico:VatReport_UnrealizedTaxPeriod_Mandatory");
        }

        if ((taxVatReportOption == TaxVatReportOption_MX::Realized || taxVatReportOption == TaxVatReportOption_MX::Both) && realizedTaxPeriod == '')
        {
            ret = checkFailed("@Mexico:VatReport_RealizedTaxPeriod_Mandatory");
        }

        if (taxVatReportOption == TaxVatReportOption_MX::Both && unrealizedTaxPeriod && realizedTaxPeriod)
        {
            var realizedTaxReportPeriod   = TaxReportPeriod::find(realizedTaxPeriod, fromDate);
            var unrealizedTaxReportPeriod = TaxReportPeriod::find(unrealizedTaxPeriod, fromDate);

            if (realizedTaxReportPeriod.FromDate != unrealizedTaxReportPeriod.FromDate
                    || realizedTaxReportPeriod.ToDate != unrealizedTaxReportPeriod.ToDate)
            {
                ret = checkFailed("@Mexico:VatReport_MustHaveSameDateInterval");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
