<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGELoadTableProperties_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGELoadTableProperties_W
{
    LedgerRRGETableLayouts_W        tableLayout;
    ComExcelDocument_RU             excelDocument;
    str                             worksheet;
    LedgerRRGELoadBase_W            loadBase;
    boolean                         isXML;
    List                            propertyList;
    List                            descriptionColumnsList;
    LedgerRRGEDescriptionLayout_W   descriptionFormat;
    int                             row;
    int                             bottom;
    int                             startRow;
    int                             endRow;
    LedgerRRGEPropertyLayouts_W     propertyLayout;
    LedgerRRGESectionNum_W          sectionNum;
    LedgerRRGELineNum_W             propertyLineNum;
    LineNum                         lineNum;
    List                            valueColumnsList;
    str                             lineColumn;
    boolean                         verticalFieldsForm;
    str                             verticalFieldsColumn;
    LedgerRRGESectionId_W           dynamicSectionId;
    List                            emptyPropertiesList;
    boolean                         validateFullLineValues;
    boolean                         singleLineForNotDefinedRegion;
    boolean                         validateFirstColumnForLineValues;
    container                       intBaseTypes;
    List                            propertiesOutOfTable;
    private const str               RegionDelimiter	        = ':';
    private const str               CharS	                = '$';
    private const str               Exclamation	            = '!';
    private const str               Quote	                = "'";
    private const str               SectionIdConst	        = 'SectionId';
    private const str               One	                    = '1';
    private const str               Percent	                = '%';
    private const str               Digits	                = '0123456789';
    private const int               Ten	                    = 10;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cellAddress</Name>
				<Source><![CDATA[
    private str cellAddress(str _worksheet, str _cell)
    {
        setPrefix(strFmt("@LedgerRRG:LedgerRRG_CellArg", _worksheet + Exclamation + _cell));
        return excelDocument.cellAddress(_worksheet, _cell);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createValues</Name>
				<Source><![CDATA[
    private boolean createValues()
    {
        LedgerRRGCellCode_RU            valueColumn;
        LedgerRRGEColumnNum_W           valueColumnNum;
        LedgerRRGCellCode_RU            propertyCell;
        LedgerRRGEProperty_W            property;
        LedgerRRGESectionProperties_W   sectionProperty;
        boolean                         rowInited;
        ListEnumerator                  le = valueColumnsList.getEnumerator();
        LedgerRRGEDescriptionLayout_W   descriptionLayout;
        boolean                         rowHasValues;
        List                            propertiesRow = new List(Types::Class);
        LedgerRRGEPropertyDataType_W    dataType;
        LedgerRRGESectionPropertyId_W   propertyId;
        RefRecId                        propertyRecId;
        int                             rowOffset;
        int                             locBottom;
        int                             locRow;
        ListEnumerator                  cellEnumerator;
        LedgerRRGEPropertyCells_W       propertyCells;
        List                            cellList;
    
        void setRowHasValue(LedgerRRGEProperty_W _property)
        {
            if (!rowHasValues && validateFullLineValues && !_property.isDefaultValue())
            {
                rowHasValues = true;
            }
    
            if (!rowHasValues && validateFirstColumnForLineValues && !validateFullLineValues)
            {
                if (!_property.isDefaultValue())
                {
                    rowHasValues = true;
                }
                else
                {
                    validateFirstColumnForLineValues = false;
                }
            }
        }
    
        if (verticalFieldsColumn)
        {
            while (row <= endRow && !this.getValueStr(worksheet, this.cellAddress(worksheet, ComExcelDocument_RU::changeCellRows(verticalFieldsColumn, row))))
            {
                row++;
            }
        }
    
        while (row <= endRow && le.moveNext())
        {
            [valueColumn, valueColumnNum, descriptionLayout, dataType, propertyRecId, rowOffset] = le.current();
    
            if (verticalFieldsForm)
            {
                locRow          = row + rowOffset;
                bottom          = locRow;
                propertyCell    = ComExcelDocument_RU::changeCellRows(valueColumn, locRow);
            }
            else
            {
                propertyCell    = ComExcelDocument_RU::changeCellRows(valueColumn, row);
            }
    
            [locRow, locBottom] = this.getRangeStartEndRows(propertyCell);
    
            if (locBottom > bottom)
            {
                bottom = locBottom;
            }
    
            if (!verticalFieldsForm)
            {
                row = locRow;
            }
    
            if (!rowInited)
            {
                if (lineColumn)
                {
                    propertyLineNum = this.getValueStr(worksheet, this.cellAddress(worksheet, ComExcelDocument_RU::changeCellRows(lineColumn, row)));
                }
    
                rowInited   = true;
            }
    
            if (!propertyRecId && propertyLineNum)
            {
                propertyId = propertyLayout.parseValue(sectionNum, tableLayout.TableNum, propertyLineNum, valueColumnNum);
            }
    
            if (propertyId || propertyRecId)
            {
                lineNum++;
    
                if (propertyRecId)
                {
                    sectionProperty = LedgerRRGESectionProperties_W::findRecId(propertyRecId);
                }
    
                if (!sectionProperty)
                {
                    sectionProperty.LedgerRRGETemplates_W = tableLayout.LedgerRRGETemplates_W;
                    sectionProperty.SectionId           = tableLayout.SectionID;
                    sectionProperty.PropertyId          = propertyId;
                    sectionProperty.TableLayoutRefRecId = tableLayout.RecId;
                    sectionProperty.SectionRefRecId     = tableLayout.SectionRefRecId;
                    sectionProperty.Description         = this.formatDescription(row, descriptionLayout);
                    sectionProperty.OutputType          = LedgerRRGEPropertyOutputType_W::Predefined;
                    sectionProperty.DataType            = dataType;
                }
    
                sectionProperty.ExcelSheet      = worksheet;
                sectionProperty.LineNum         = lineNum;
                sectionProperty.PropertyType    = LedgerRRGESectionPropertyType_W::Cell;
    
                property = LedgerRRGEProperty_W::newFromProperty(sectionProperty);
                if (property.cellList() && property.cellList().elements())
                {
                    cellList = new List(Types::Record);
    
                    cellEnumerator = property.cellList().getEnumerator();
                    while (cellEnumerator.moveNext())
                    {
                        propertyCells           = cellEnumerator.current();
                        propertyCells.RecId     = 0;
                        propertyCells.ExcelCell = this.setCellRows(propertyCells.ExcelCell, locRow, bottom);
                        cellList.addEnd(propertyCells);
                    }
    
                    property.cellStr('');
                    cellEnumerator = cellList.getEnumerator();
                    while (cellEnumerator.moveNext())
                    {
                        propertyCells = cellEnumerator.current();
                        property.cellList().addEnd(propertyCells);
                    }
                }
                else
                {
                    property.cellStr(this.setCellRows(valueColumn, locRow, bottom));
                }
    
                property.updateValue(excelDocument);
                property.dynamicSectionId(dynamicSectionId);
                propertiesRow.addEnd(property);
    
                setRowHasValue(property);
            }
        }
    
        if (!tableLayout.Dynamic || rowHasValues)
        {
            if (propertiesOutOfTable)
            {
                le = propertiesOutOfTable.getEnumerator();
    
                while (le.moveNext())
                {
                    property = le.current();
                    property = property.copy();
                    property.dynamicSectionId(dynamicSectionId);
                    propertiesRow.addEnd(property);
    
                    setRowHasValue(property);
                }
            }
    
            this.mergePropertyList(propertiesRow);
        }
        else
        {
            if (!singleLineForNotDefinedRegion)
            {
                row = endRow + 1;
            }
        }
    
        if (!isXML && !rowHasValues && !emptyPropertiesList)
        {
            emptyPropertiesList = propertiesRow;
        }
    
        return row <= endRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedParentSectionRow</Name>
				<Source><![CDATA[
    private container findRelatedParentSectionRow(str _path)
    {
        const str PathDelemiter	= '\\';

        LedgerRRGEProperty_W        parentProperty;
        LedgerRRGEProperty_W        cellProperty;
        LedgerRRGEPropertyCells_W   propertyCell;
        int                         sectionStartRow;
        int                         sectionEndRow;
        ListEnumerator              le;
        LedgerRRGESectionId_W       parentSectionName;
        int                         pos;

        if (!_path)
        {
            return [startRow, endRow];
        }

        pos = strscan(_path, PathDelemiter, 1, maxint());
        parentSectionName = pos ? substr(_path, 1, pos - 1) : _path;

        parentProperty = loadBase.currentProperty();
        while (parentProperty && parentProperty.property().SectionId != parentSectionName)
        {
            parentProperty = parentProperty.parent();
        }

        if (!parentProperty)
        {
            return [startRow, endRow];
        }

        if (pos)
        {
            cellProperty = parentProperty.findPropertyByPath(_path);
        }

        if (!cellProperty || !cellProperty.cellList())
        {
            cellProperty = parentProperty.findAnyRequisiteWithCells();
        }

        if (cellProperty && cellProperty.cellList())
        {
            le = cellProperty.cellList().getEnumerator();
            if (le.moveNext())
            {
                propertyCell = le.current();
                [sectionStartRow, sectionEndRow] = this.getRangeStartEndRows(propertyCell.ExcelCell);

                if (sectionStartRow > 0 && sectionStartRow < sectionEndRow)
                {
                    return [sectionStartRow, sectionEndRow];
                }
            }
        }

        return [startRow, endRow];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedSectionRow</Name>
				<Source><![CDATA[
    private container findRelatedSectionRow(LedgerRRGESectionId_W _sectionText)
    {
        System.Text.RegularExpressions.Regex            regEx;
        System.Text.RegularExpressions.Match            regExMatch;
        System.Text.RegularExpressions.GroupCollection  matchGroups;
        System.Text.RegularExpressions.Group            matchGroup;
        InteropPermission                               permission;
        LedgerRRGESectionId_W                           sectionId;
        int                                             sectionStartRow = startRow;
        int                                             sectionEndRow   = endRow;
        LedgerRRGETableLayouts_W                        relatedTableLayout;
        LedgerRRGETableColumns_W                        column;
        LedgerRRGEProperty_W                            property;

        permission = new InteropPermission(InteropKind::ClrInterop);
        permission.assert();

        regEx = new System.Text.RegularExpressions.Regex(strfmt('%%(?<%1>=?[\\w+\\\\?]+)%', SectionIdConst));
        regExMatch = regEx.Match(_sectionText);
        if(regExMatch.get_Success())
        {
            matchGroups = regExMatch.get_Groups();

            matchGroup  = matchGroups.get_Item(SectionIdConst);
            sectionId   = matchGroup.get_Value();

            if (sectionId)
            {
                if (substr(sectionId, 1, 1) == '=')
                {
                    return this.findRelatedParentSectionRow(subStr(sectionId, 2, maxint()));
                }

                select firstonly RecId from relatedTableLayout
                    where relatedTableLayout.LedgerRRGETemplates_W == tableLayout.LedgerRRGETemplates_W
                       && relatedTableLayout.SectionID  == sectionId;

                if (relatedTableLayout.RecId)
                {
                    select firstonly ExcelColumn, PropertyRefRecId from column order by OrderLineNum
                        where column.TableLayoutRefRecId  == relatedTableLayout.RecId
                           && column.ColumnType           == LedgerRRGEColumnType_W::Value;

                    if (column)
                    {
                        property = LedgerRRGEProperty_W::newFromProperty(column.property());

                        [sectionStartRow] = this.getRangeStartEndRows(column.ExcelColumn);
                        sectionStartRow--;

                        do
                        {
                            sectionStartRow++;
                            property.cellStr(this.setCellRows(column.ExcelColumn, sectionStartRow, sectionStartRow));
                            property.updateValue(excelDocument);
                        }
                        while (!property.isDefaultValue());

                        sectionEndRow = sectionStartRow;
                    }
                }
            }
        }

        return [sectionStartRow, sectionEndRow];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fmtStrList</Name>
				<Source><![CDATA[
    private str fmtStrList(str _format, List _parmList)
    {
        ListEnumerator  le;
        str             res = _format;
        int             parmPos;
        int             parmNum = 1;
        str             parmNumStr;

        void nextParm()
        {
            parmNumStr  = int2str(parmNum);
            parmPos     = strScan(res, Percent + parmNumStr, parmPos, strLen(res));
            parmNum++;
        }

        if (_format && _parmList)
        {
            nextParm();
            le = _parmList.getEnumerator();
            while (parmPos && le.moveNext())
            {
                parmPos++;
                res = strFmt(strIns(strDel(res, parmPos, strLen(parmNumStr)), One, parmPos), le.current());
                nextParm();
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDescription</Name>
				<Source><![CDATA[
    private str formatDescription(int _top, LedgerRRGEDescriptionLayout_W _descriptionLayout)
    {
        List                            strList;
        ListEnumerator                  le;
        LedgerRRGCellCode_RU            descriptionColumn;
        LedgerRRGEDescriptionLayout_W   columnLayout;

        if (descriptionColumnsList)
        {
            strList = new List(Types::String);
            le      = descriptionColumnsList.getEnumerator();
            while (le.moveNext())
            {
                [descriptionColumn, columnLayout] = le.current();

                strList.addEnd(descriptionColumn ? this.getValueStr(worksheet, this.cellAddress(worksheet, ComExcelDocument_RU::changeCellRows(descriptionColumn, _top))):columnLayout);
            }

            return this.fmtStrList(_descriptionLayout ? _descriptionLayout : descriptionFormat,  strList);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeStartEndRows</Name>
				<Source><![CDATA[
    private container getRangeStartEndRows(str _range)
    {
        str locFirstCell;
        str loclastCell;
        str tmpColName;
        int locStartRow;
        int locEndRow;

        if (ComExcelDocument_RU::isRegion(_range))
        {
            [locFirstCell, locLastCell] = str2con_RU(_range, RegionDelimiter);
        }
        else
        {
            locFirstCell = _range;
        }

        if (locFirstCell)
        {
            [tmpColName, locStartRow] = ComExcelDocument_RU::cell2ColNameRow(locFirstCell);
        }

        if (locLastCell)
        {
            [tmpColName, locEndRow] = ComExcelDocument_RU::cell2ColNameRow(locLastCell);
        }

        if (!locEndRow)
        {
            locEndRow = row;
        }

        return [locStartRow, locEndRow];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueStr</Name>
				<Source><![CDATA[
    private str getValueStr(str _worksheetName, str _cellName)
    {
        setPrefix(strFmt("@LedgerRRG:LedgerRRG_CellArg", _worksheetName + Exclamation + _cellName));
        return excelDocument.getValueStr(_worksheetName, _cellName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableColumns</Name>
				<Source><![CDATA[
    private void initTableColumns()
    {
        LedgerRRGETableColumns_W    tableColumns;
        str                         column;
        int                         aRow;
        boolean                     propertyIdMissed;
        str                         prevColumn;
        int                         minRow;
        ListEnumerator              le;
        List                        tmpList;
        container                   con;
        boolean                     verticalFieldsFormInited;

        while select tableColumns order by OrderLineNum
            where tableColumns.TableLayoutRefRecId == tableLayout.RecId
        {
            prevColumn      = column;
            [column, aRow]  = ComExcelDocument_RU::cell2ColNameRow(tableColumns.ExcelColumn);
            if (!startRow)
            {
                startRow = aRow;
            }

            switch (tableColumns.ColumnType)
            {
                case LedgerRRGEColumnType_W::Line:
                    if (lineColumn || propertyLineNum)
                    {
                        throw error(strFmt("@LedgerRRG:LedgerRRG_OneColumn", LedgerRRGEColumnType_W::Line));
                    }

                    lineColumn      = tableColumns.ExcelColumn;
                    propertyLineNum = tableColumns.LineNum;
                    break;

                case LedgerRRGEColumnType_W::Value:
                    if (!valueColumnsList)
                    {
                        valueColumnsList = new List(Types::Container);
                    }

                    if (!minRow || aRow < minRow)
                    {
                        minRow = aRow;
                    }

                    if (!verticalFieldsFormInited && prevColumn)
                    {
                        verticalFieldsFormInited    = true;
                        verticalFieldsForm          = prevColumn == column;
                        if (verticalFieldsForm)
                        {
                            verticalFieldsColumn = column;
                        }
                    }
                    else
                    {
                        if (verticalFieldsForm && prevColumn && prevColumn != column)
                        {
                            verticalFieldsForm      = false;
                            verticalFieldsColumn    = '';
                        }
                    }

                    if (!tableColumns.PropertyRefRecId)
                    {
                        propertyIdMissed = true;
                    }

                    if (tableColumns.ExcelColumn)
                    {
                        valueColumnsList.addEnd([tableColumns.ExcelColumn,
                                                 tableColumns.ColumnNum,
                                                 tableColumns.Layout,
                                                 tableColumns.DataType,
                                                 tableColumns.PropertyRefRecId,
                                                 aRow]);
                    }
                    break;

                case LedgerRRGEColumnType_W::Description:
                    if (!descriptionColumnsList)
                    {
                        descriptionColumnsList = new List(Types::Container);
                    }

                    descriptionColumnsList.addEnd([tableColumns.ExcelColumn, tableColumns.Layout]);
                    break;

                default:
                    throw error("@LedgerRRG:LedgerRRG_UnknownColumn");
            }
        }

        if (!lineColumn && !propertyLineNum && propertyIdMissed)
        {
            throw error(strFmt("@LedgerRRG:LedgerRRG_LineNumNotSet", LedgerRRGEColumnType_W::Line));
        }

        if (!valueColumnsList)
        {
            throw error(strFmt("@LedgerRRG:LedgerRRG_ColumnNotFound", LedgerRRGEColumnType_W::Value));
        }

        if (verticalFieldsForm)
        {
            tmpList = new List(Types::Container);
            le = valueColumnsList.getEnumerator();
            while (le.moveNext())
            {
                con = le.current();
                con = conPoke(con, 6, conPeek(con, 6) - minRow);
                tmpList.addEnd(con);
            }

            valueColumnsList = tmpList;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List load()
    {
        if (!loadBase)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        dynamicSectionId    = tableLayout.SectionID;
        propertyList        = new List(Types::Class);
        propertyLayout      = LedgerRRGEPropertyLayouts_W::find(tableLayout.layoutRecId());
        sectionNum          = tableLayout.section().SectionNum;
        descriptionFormat   = tableLayout.DescriptionLayout ? tableLayout.DescriptionLayout : '%1';
    
        if (tableLayout.ExcelRegion)
        {
            [startRow, endRow] = this.getRangeStartEndRows(tableLayout.ExcelRegion);
        }
    
        if (tableLayout.Notes)
        {
            [startRow, endRow] = this.findRelatedSectionRow(tableLayout.Notes);
        }
    
        this.initTableColumns();
        this.initRequisitesInSameSection();
    
        if (startRow)
        {
            if (!endRow)
            {
                endRow = singleLineForNotDefinedRegion ? startRow : maxint() - 1;
            }
            else
            {
                validateFullLineValues              = true;
                validateFirstColumnForLineValues    = !validateFullLineValues;
            }
    
            lineNum = (select maxof(LineNum) from ledgerRRGESectionProperties_W
                            where ledgerRRGESectionProperties_W.LedgerRRGETemplates_W == tableLayout.LedgerRRGETemplates_W &&
                                  ledgerRRGESectionProperties_W.SectionRefRecId == tableLayout.SectionRefRecId).LineNum;
    
            row = startRow;
            while (row <= endRow)
            {
                if (tableLayout.Dynamic)
                {
                    dynamicSectionId = loadBase.createDynamicSectionId(tableLayout.SectionID);
                }
    
                row = this.createValues() ? (bottom ? bottom : row) : endRow;
    
                row++;
            }
        }
    
        if (!propertyList.elements() && !isXML)
        {
            this.mergePropertyList(emptyPropertiesList);
        }
    
        return propertyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergePropertyList</Name>
				<Source><![CDATA[
    private void mergePropertyList(List _list)
    {
        ListEnumerator le;

        if (_list)
        {
            le = _list.getEnumerator();
            while (le.moveNext())
            {
                propertyList.addEnd(le.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
        singleLineForNotDefinedRegion       = false;
        validateFullLineValues              = singleLineForNotDefinedRegion;
        validateFirstColumnForLineValues    = !validateFullLineValues;

        intBaseTypes = [LedgerRRGEBaseType_W::integer,
                         LedgerRRGEBaseType_W::byte,
                         LedgerRRGEBaseType_W::int,
                         LedgerRRGEBaseType_W::long,
                         LedgerRRGEBaseType_W::nonNegativeInteger,
                         LedgerRRGEBaseType_W::positiveInteger,
                         LedgerRRGEBaseType_W::short,
                         LedgerRRGEBaseType_W::unsignedByte,
                         LedgerRRGEBaseType_W::unsignedInt,
                         LedgerRRGEBaseType_W::unsignedShort];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcelDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ComExcelDocument_RU parmExcelDocument(ComExcelDocument_RU _excelDocument = excelDocument)
    {
        excelDocument = _excelDocument;

        return excelDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsXML</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmIsXML(boolean _isXML = isXML)
    {
        isXML = _isXML;

        return isXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadBase</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGELoadBase_W parmLoadBase(LedgerRRGELoadBase_W _loadBase = loadBase)
    {
        if (!prmisDefault(_loadBase))
        {
            loadBase = _loadBase;
            if (_loadBase)
            {
                excelDocument   = _loadBase.excelDocument();
                isXML           = _loadBase.document().isXML();
            }
        }

        return loadBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableLayout</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGETableLayouts_W parmTableLayout(LedgerRRGETableLayouts_W _tableLayout = tableLayout)
    {
        tableLayout = _tableLayout;

        return tableLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorksheet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str parmWorksheet(str _worksheet = worksheet)
    {
        worksheet = _worksheet;

        return worksheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCellRows</Name>
				<Source><![CDATA[
    private str setCellRows(str _cellName, int _top, int _bottom)
    {
        str cell;
        str firstRegionCell;
        str lastRegionCell;
        int firstCellRow;
        int lastCellRow;

   
        if (ComExcelDocument_RU::isRegion(_cellName))
        {
            [firstRegionCell, lastRegionCell] = str2con_RU(_cellName, RegionDelimiter);
        }
        else
        {
            firstRegionCell = _cellName;
        }

        [firstRegionCell, firstCellRow] = ComExcelDocument_RU::cell2ColNameRow(firstRegionCell);
        cell                            = firstRegionCell + int2str(_top);

        if (lastRegionCell)
        {
            [lastRegionCell, lastCellRow] = ComExcelDocument_RU::cell2ColNameRow(lastRegionCell);
            cell += RegionDelimiter + lastRegionCell + int2str(_bottom);
        }

        return cell;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public LedgerRRGELoadTableProperties_W construct()
    {
        return new LedgerRRGELoadTableProperties_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTableProperties</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public List loadTableProperties(LedgerRRGELoadBase_W     _loadBase,
                                           LedgerRRGETableLayouts_W _tableLayout,
                                           str                      _worksheet = _tableLayout.ExcelSheet)
    {
        LedgerRRGELoadTableProperties_W loadTableProperties = LedgerRRGELoadTableProperties_W::construct();

        if (!_loadBase)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        loadTableProperties.parmLoadBase(_loadBase);
        loadTableProperties.parmTableLayout(_tableLayout);
        loadTableProperties.parmWorksheet(_worksheet);

        return loadTableProperties.load();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRequisitesInSameSection</Name>
				<Source><![CDATA[
    private void initRequisitesInSameSection()
    {
        LedgerRRGESectionProperties_W   sectionProperty, sectionPropertySectionGroup, sectionPropertyDynTableGroup,
                                        sectionPropertyDynNotTable, sectionPropertyRef;
        LedgerRRGETableColumns_W        ledgerRRGETableColumns;
        LedgerRRGEProperty_W            property;
    
        if (isXML)
        {
            propertiesOutOfTable = new List(Types::Class);
            while select sectionPropertySectionGroup group by SectionRefRecId
                where sectionPropertySectionGroup.LedgerRRGETemplates_W == tableLayout.LedgerRRGETemplates_W
                   && sectionPropertySectionGroup.Dynamic == NoYes::Yes
            exists join sectionPropertyDynTableGroup
                where sectionPropertyDynTableGroup.RecId == sectionPropertySectionGroup.DynamicValueRefRecId &&
                      sectionPropertyDynTableGroup.SectionRefRecId == tableLayout.SectionRefRecId
            {
                while select DynamicValueRefRecId from sectionPropertyDynNotTable
                    where sectionPropertyDynNotTable.LedgerRRGETemplates_W == tableLayout.LedgerRRGETemplates_W &&
                          sectionPropertyDynNotTable.Dynamic == NoYes::Yes &&
                          sectionPropertyDynNotTable.DynamicValueRefRecId != 0 &&
                          sectionPropertyDynNotTable.SectionRefRecId == sectionPropertySectionGroup.SectionRefRecId
                notexists join sectionPropertyRef
                    where sectionPropertyRef.RecId == sectionPropertyDynNotTable.DynamicValueRefRecId &&
                          sectionPropertyRef.SectionRefRecId == tableLayout.SectionRefRecId
                exists join ledgerRRGETableColumns
                    where ledgerRRGETableColumns.TableLayoutRefRecId == tableLayout.RecId &&
                          ledgerRRGETableColumns.PropertyRefRecId == sectionPropertyRef.RecId
                {
                    sectionProperty = LedgerRRGESectionProperties_W::findRecId(sectionPropertyDynNotTable.DynamicValueRefRecId);
                    sectionProperty.ExcelSheet          = worksheet;
                    sectionProperty.SectionId           = tableLayout.SectionID;
                    sectionProperty.PropertyId          = '';
                    sectionProperty.TableLayoutRefRecId = tableLayout.RecId;
                    sectionProperty.SectionRefRecId     = tableLayout.SectionRefRecId;
                    sectionProperty.OutputType          = LedgerRRGEPropertyOutputType_W::Predefined;
    
                    property = LedgerRRGEProperty_W::newFromProperty(sectionProperty);
                    property.updateValue(excelDocument);
                    propertiesOutOfTable.addEnd(property);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>