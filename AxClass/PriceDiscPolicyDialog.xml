<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscPolicyDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscPolicyDialog</c> class is prompting the user to confirm or change the price discount change policy for a given record.
/// </summary>
class PriceDiscPolicyDialog extends RunBase
{
    RefTableName                relationTypeName;

    container                   policySystemEntry;
    container                   policyManualEntry;

    Map                         policyManualFieldList;
    Map                         policySystemFieldList;

    PriceDiscPolicyField        singlePolicyField;
    RefFieldId                  singleFieldSystemEntry;
    RefFieldId                  singleFieldManualEntry;
    container                   fieldIdCarrier;
    PriceDiscResultFields       priceDiscResultFields;
    boolean                     showLineItem;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        relationTypeName,
        policySystemEntry,
        policyManualEntry,
        priceDiscResultFields,
        fieldIdCarrier,
        showLineItem
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDialogFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the dialog fields presented to the user if a price discount change policy exists for a
    ///    specified record..
    /// </summary>
    /// <param name="_dialog">
    ///    The instance of the <c>DialogRunbase</c> class.
    /// </param>
    /// <param name="_dialogField">
    ///    The instance of the <c>DialogField</c> class.
    /// </param>
    /// <param name="_policyFields">
    ///    A container that contains the list of field IDs that represent the price discount change policy.
    /// </param>
    /// <param name="_policyFieldList">
    ///    A map used to store the instances of the <c>DialogField</c> class created based on the <paramref
    ///    name="_dialogField" /> parameter.
    /// </param>
    /// <param name="_singleFieldEntry">
    ///    A field ID. Only a single instance of the <c>DialogField</c> class is created if a field ID is
    ///    specified.
    /// </param>
    /// <remarks>
    ///    The method is required as the number and type of dialog fields is undecided until the class is
    ///    executed.
    /// </remarks>
    protected void createDialogFields(
        DialogRunbase         _dialog,
        DialogField           _dialogField,
        container             _policyFields,
        Map                   _policyFieldList,
        RefFieldId            _singleFieldEntry)
    {
        RefFieldId localFieldId;
        if (_singleFieldEntry)
        {
            localFieldId = _singleFieldEntry;
            this.createDialogField(_dialog, _dialogField, _policyFieldList, localFieldId);
        }
        else
        {
            for (int i=1; i<=conLen(_policyfields); i++)
            {
                localFieldId = conPeek(_policyfields, i);
                this.createDialogField(_dialog, _dialogField, _policyFieldList, localFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDialogField</Name>
				<Source><![CDATA[
    protected void createDialogField(
        DialogRunbase   _dialog,
        DialogField     _dialogField,
        Map             _policyFieldList,
        RefFieldId      _policyFieldId)
    {
        LabelString fieldLabel;
        LabelString helpLabel;
        if ((priceDiscResultFields.TableId    == tableNum(SalesTable)          && _policyFieldId == fieldNum(SalesTable, MultiLineDisc))
            || (priceDiscResultFields.TableId == tableNum(PurchTable)          && _policyFieldId == fieldNum(PurchTable, MultiLineDisc))
            || (priceDiscResultFields.TableId == tableNum(SalesQuotationTable) && _policyFieldId == fieldNum(SalesQuotationTable, MultiLineDisc)))
        {
            fieldLabel = "@SYS11440";
            helpLabel  = "@SYS8746";
        }
        else
        {
            SysDictField dictField = new SysDictField(priceDiscResultFields.TableId, _policyFieldId);
            fieldLabel = dictField.label();
            helpLabel  = dictField.help();
        }

        _dialogField = _dialog.addField(enumStr(NoYes), fieldLabel, helpLabel);
        _dialogField.value(NoYes::Yes);
        _policyFieldList.insert(_policyFieldId, _dialogField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls the layout of the user dialog.
    /// </summary>
    /// <param name="_dialog">
    ///    The <c>DialogRunbase</c> class object in question.
    /// </param>
    /// <param name="_forceOnClient">
    ///    A Boolean value that specifies whether the dialog is executed on the client.
    /// </param>
    /// <returns>
    ///    The modified <c>DialogRunbase</c> class object.
    /// </returns>
    public Object dialog(
        DialogRunbase _dialog = null,
        boolean _forceOnClient = false)
    {
        DialogRunbase   dialog = this.dialogInternal( _dialog, _forceOnClient);

        DialogGroup     mainDialogGroup;
        DialogField     dialogField;

        dialog.windowType(FormWindowType::PopUp);
        policyManualFieldList = new Map(Types::Integer, Types::Class);
        policySystemFieldList = new Map(Types::Integer, Types::Class);

        dialog.caption("@SYS133048");
        dialog.addInfoImage();

        if (showLineItem
            && priceDiscResultFields.SalesPurchQty
            && priceDiscResultFields.ItemId)
        {
            dialog.addText(strFmt("@SYS309701", priceDiscResultFields.ItemId, priceDiscResultFields.SalesPurchQty));
        }

        dialog.addText("@SYS308552");
        dialog.addText("@SYS309702");

        mainDialogGroup = dialog.addGroup();
        mainDialogGroup.columns(1);
        mainDialogGroup.frameType(FormFrameType::Auto);

        if (!singleFieldSystemEntry)
        {
            dialog.addGroup(enum2str(PriceDiscSystemSource::ManualEntry));
            this.createDialogFields(dialog, dialogField, policyManualEntry, policyManualFieldList, singleFieldManualEntry);
        }

        if (!singleFieldManualEntry)
        {
            dialog.addGroup(enum2str(priceDiscResultFields.SystemEntrySource));
            this.createDialogFields(dialog, dialogField, policySystemEntry, policySystemFieldList, singleFieldSystemEntry);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the policies for a given record.
    /// </summary>
    /// <returns>
    ///    true if one or more policies exist; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Besides returning true or false the method also initiates internal variables holding the found
    ///    policies.
    /// </remarks>
    protected boolean findPolicies()
    {
        PriceDiscPolicyFieldMappingCache fieldMapping = PriceDiscResultFields::tableFieldMapping();
        boolean                          ret          = false;

        if (priceDiscResultFields.ManualEntryChangePolicy)
        {
            policyManualEntry = PriceDiscPolicyFields::retrieveTablePolicyFields(priceDiscResultFields.TableId, priceDiscResultFields.ManualEntryChangePolicy);
            singleFieldManualEntry = singlePolicyField && conFind(policyManualEntry, fieldMapping.policyField2TableField(priceDiscResultFields.TableId, singlePolicyField)) ?
                                                                                      fieldMapping.policyField2TableField(priceDiscResultFields.TableId, singlePolicyField) : 0;
        }

        if (!singleFieldManualEntry
            && priceDiscResultFields.SystemEntryChangePolicy)
        {
            policySystemEntry = PriceDiscPolicyFields::retrieveTablePolicyFields(priceDiscResultFields.TableId, priceDiscResultFields.SystemEntryChangePolicy);

            singleFieldSystemEntry = singlePolicyField && conFind(policySystemEntry, fieldMapping.policyField2TableField(priceDiscResultFields.TableId, singlePolicyField)) ?
                                                                                    fieldMapping.policyField2TableField(priceDiscResultFields.TableId, singlePolicyField) : 0;
        }

        if (singlePolicyField)
        {
            ret = singleFieldManualEntry || singleFieldSystemEntry;
        }
        else
        {
            ret = policyManualEntry || policySystemEntry;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls the retrival of dialog field values.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    The actual retrival of the dialog field values happens in the <c>updatePolicy</c> method.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (policyManualEntry)
        {
            priceDiscResultFields.ManualEntryChangePolicy = this.updatePolicy(priceDiscResultFields.ManualEntryChangePolicy,
                                                                              policyManualEntry,
                                                                              policyManualFieldList,
                                                                              singleFieldManualEntry);
        }

        if (policySystemEntry)
        {
            priceDiscResultFields.SystemEntryChangePolicy = this.updatePolicy(priceDiscResultFields.SystemEntryChangePolicy,
                                                                              policySystemEntry,
                                                                              policySystemFieldList,
                                                                              singleFieldSystemEntry);

            priceDiscResultFields.SystemEntrySource = priceDiscResultFields.SystemEntryChangePolicy ? priceDiscResultFields.SystemEntrySource : PriceDiscSystemSource::None;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS133048";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does nothing.
    /// </summary>
    /// <remarks>
    /// As the dialog is created dynamicly no last choices are relevant.
    /// </remarks>
    public void getLast()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        relationTypeName            = tableId2name(priceDiscResultFields.TableId);
        fieldIdCarrier              = [singlePolicyField ? singlePolicyField.parmTableMapId() : 0, 
                                       singlePolicyField ? singlePolicyField.parmTableMapFieldId() : 0 ,
                                       singleFieldSystemEntry,
                                       singleFieldManualEntry];
        container ret = [#CurrentVersion, #CurrentList];
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscResultFields</Name>
				<Source><![CDATA[
    public PriceDiscResultFields parmPriceDiscResultFields(PriceDiscResultFields _priceDiscResultFields = priceDiscResultFields)
    {
        priceDiscResultFields = _priceDiscResultFields;
        return priceDiscResultFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSinglePolicyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the single policy field.
    /// </summary>
    /// <param name = "_singlePolicyField">
    /// A <c>PriceDiscPolicyField</c> policy field.
    /// </param>
    [Hookable(false)]
    final public void initializeSinglePolicyField(PriceDiscPolicyField _singlePolicyField)
    {
        singlePolicyField = _singlePolicyField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptUnpack</Name>
				<Source><![CDATA[
    protected boolean promptUnpack(container packedClass, boolean promptRet = true)
    {
        boolean ret;

        ret = super(packedClass, true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPolicyDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that price discount policies exist.
    /// </summary>
    /// <returns>
    /// true if the user presses the OK button in the dialog or if no policies exist; otherwise, false.
    /// </returns>
    public boolean runPolicyDialog()
    {
        boolean ret         = false;
        boolean policyExist = false;

        if (priceDiscResultFields.ManualEntryChangePolicy
        || priceDiscResultFields.SystemEntryChangePolicy)
        {
            policyExist = this.findPolicies();
        }

        if (policyExist)
        {
            if (this.prompt())
            {
                ret = true;
            }
        }

        return  ret || !policyExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShowLineItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the product id should be displayed on the dialog.
    /// </summary>
    /// <param name="_showLineItem">
    /// A boolean type.
    /// </param>
    public void setShowLineItem(boolean _showLineItem)
    {
        showLineItem = _showLineItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
        }

        TableId singlePolicyTableId;
        FieldId singlePolicyFieldId;
        [singlePolicyTableId, singlePolicyFieldId, singleFieldSystemEntry, singleFieldManualEntry] = fieldIdCarrier;

        singlePolicyField = singlePolicyTableId && singlePolicyFieldId ? PriceDiscPolicyField::newTableMapField(singlePolicyTableId, singlePolicyFieldId) : null;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the policies in question if the user has changed any values in the dialog.
    /// </summary>
    /// <param name="_origPriceDiscPolicy">
    /// The record ID of the <c>PriceDiscChangePolicy</c> record.
    /// </param>
    /// <param name="_policy">
    /// A container that contains a policy as it looked before the dialog was opened.
    /// </param>
    /// <param name="_policyFieldList">
    /// A map that stores the instances of the <c>DialogField</c> class coming from the dialog.
    /// </param>
    /// <param name="_singleFieldEntry">
    /// A field ID that specifies if only a single policy field is handled.
    /// </param>
    /// <returns>
    /// The record ID of the <c>PriceDiscChangePolicy</c> record.
    /// </returns>
    protected PriceDiscChangePolicyRefRecId updatePolicy(
        PriceDiscChangePolicyRefRecId   _origPriceDiscPolicy,
        container                       _policy,
        Map                             _policyFieldList,
        RefFieldId                      _singleFieldEntry = 0)
    {
        int                         localFieldId = 0;
        int                         i;
        container                   newPolicy;
        DialogField                 dialogField;
        PriceDiscPolicyFindOrCreate policyFindOrCreate;

        if (_singleFieldEntry)
        {
            if (_policyFieldList.exists(_singleFieldEntry))
            {
                dialogField = _policyFieldList.lookup(_singleFieldEntry);
            }
            else
            {
                dialogField = null;
            }
            newPolicy = _policy;
            if (dialogField && dialogField.value())
            {
                newPolicy = conDel(newPolicy, conFind(newPolicy, _singleFieldEntry),1);
            }
        }
        else
        {
            for (i=1; i<=conLen(_policy); i++)
            {
                localFieldId = conPeek(_policy, i);
                if (_policyFieldList.exists(localFieldId))
                {
                    dialogField = _policyFieldList.lookup(localFieldId);
                }
                else
                {
                    dialogField = null;
                }
                if (dialogField && !dialogField.value())
                {
                    newPolicy += localFieldId;
                }
            }
        }

        PriceDiscChangePolicyRefRecId   newPriceDiscPolicy;

        if (conLen(_policy) != conLen(newPolicy))
        {
            policyFindOrCreate = PriceDiscPolicyFindOrCreate::newFromPriceDiscResultFields(priceDiscResultFields);
            
            newPriceDiscPolicy = newPolicy ? policyFindOrCreate.findOrCreateChangePolicyFromPolicyFieldList(PriceDiscResultFields::tableFieldMapping().table2PolicyFieldList(priceDiscResultFields.TableId, newPolicy)) : 0;
        }
        else
        {
            newPriceDiscPolicy = _origPriceDiscPolicy;
        }

        return newPriceDiscPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PriceDiscPolicyDialog construct()
    {
        return new PriceDiscPolicyDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForSingleField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the  <c>PriceDiscPolicyDialog</c> class and initiates the internal variabel.
    /// </summary>
    /// <param name="_priceDiscResultFields">
    /// An instance of the <c>PriceDiscResultFields</c> table map.
    /// </param>
    /// <param name="_singlePolicyField">
    /// An <c>PriceDiscPolicyField</c> object specifying only a single policy field should be displayed in the dialog.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PriceDiscPolicyDialog</c> class initiated with the passed parameters.
    /// </returns>
    [Hookable(false)]
    public static PriceDiscPolicyDialog newForSingleField(
        PriceDiscResultFields   _priceDiscResultFields,
        PriceDiscPolicyField    _singlePolicyField)
    {
        return PriceDiscPolicyDialog::newForFields(_priceDiscResultFields, _singlePolicyField, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAllFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the  <c>PriceDiscPolicyDialog</c> class and initiates the internal variabel.
    /// </summary>
    /// <param name="_priceDiscResultFields">
    /// An instance of the <c>PriceDiscResultFields</c> table map.
    /// </param>
    /// <param name="_showLineItem">
    /// A boolean controlling if item and line number should be displayed in the dialog.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PriceDiscPolicyDialog</c> class initiated with the passed parameters.
    /// </returns>
    [Hookable(false)]
    public static PriceDiscPolicyDialog newForAllFields(
        PriceDiscResultFields   _priceDiscResultFields,
        boolean                 _showLineItem)
    {
        return PriceDiscPolicyDialog::newForFields(_priceDiscResultFields, null, _showLineItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForFields</Name>
				<Source><![CDATA[
    private static PriceDiscPolicyDialog newForFields(
        PriceDiscResultFields   _priceDiscResultFields,
        PriceDiscPolicyField    _singlePolicyField,
        boolean                 _showLineItem)
    {
        PriceDiscPolicyDialog policyDialog = PriceDiscPolicyDialog::construct();

        policyDialog.initializeSinglePolicyField(_singlePolicyField);
        policyDialog.parmPriceDiscResultFields(_priceDiscResultFields);
        policyDialog.setShowLineItem(_showLineItem);

        return policyDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>