<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetproposalDisposalSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetproposalDisposalSale extends RAssetProposal implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
        public RAssetTransType assetTransType()
    {
        return RAssetTransType::DisposalSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
        public void createJournalLines(RAssetStandardId  _assetStandardId,
                                    boolean          _runFromBatch = true,
                                    RAssetAmount     _assetAmount  = 0)
    {
        LedgerJournalTrans_RAsset ljt_rAsset;

        if (rAssetStandards.Depreciation            &&
            rAssetStandards.postingProfile(runDate) &&
            ! rAssetStandards.DisposalDate)
        {
            rAssetJournal.createVoucher();
            rAssetJournal.createTrans(0,
                                      rAssetTable,
                                      runDate,
                                      rAssetStandards,
                                      "");

            ljt_rAsset = rAssetJournal.ledgerJournalTrans_RAsset();
            ljt_rAsset.selectForUpdate(true);
            ljt_rAsset.PostValue = RAssetPostValue::SaleValue;
            ljt_rAsset.doUpdate();

            this.createDisposalTrans(RAssetDisposalType::Sold, _assetStandardId, rAssetJournal.ledgerJournalTrans());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116127");

        dialogRunDate.label("@GLS116311");
        dialogAssetStandardId.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>