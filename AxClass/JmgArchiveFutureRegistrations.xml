<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgArchiveFutureRegistrations</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    When run this class moves registrations, having a timestamp in the future, from the <see
///    cref="T:JmgTermReg" /> table to the <see cref="T:JmgTermRegArchive" /> table.
/// </summary>
/// <remarks>
///    All registrations are compared to the current system date and time.
/// </remarks>
class JmgArchiveFutureRegistrations extends RunBaseBatch implements BatchRetryable
{
    private static boolean isJmgTermRegArchiveInitExtensibilityFlightEnabled = JmgTermRegArchiveInitExtensibilityFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dialog that prompts the user.
    /// </summary>
    /// <param name="dialog">
    ///    An already initialized dialog that can be passed
    /// </param>
    /// <param name="forceOnClient">
    ///    A Boolean value that indicates whether the dialog must be initialized on the client.
    /// </param>
    /// <returns>
    ///    The dialog that prompts the user.
    /// </returns>
    /// <remarks>
    ///    The <see cref="T:JmgArchiveFutureRegistrations" /> class adds a static text to the dialog.
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret = this.dialogInternal(dialog, forceOnClient);

        ret.caption("@SYS40033");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	protected void new()
    {
        super();
	}

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS40033";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the actual job of the class. Registrations with a timestamp in the future compared to the
    ///    current system time are moved from the <see cref="T:JmgTermReg" /> table to the <see
    ///    cref="T:JmgTermRegArchive" /> table.
    /// </summary>
    public void run()
    {
        JmgTermReg              jmgTermReg;
        JmgProfileSeconds       currentTime    = new JmgProfileSeconds(JmgProfileSeconds::getSysDate(), JmgProfileSeconds::getSysTime());
        utcdatetime             utcDateTimeNow = JmgProfileSeconds::getJmgTermRegCurrentTime();

        super();

        ttsbegin;

        JmgTermRegArchive archive;
        JmgTermRegArchiveMap map;

        while select forupdate jmgTermReg
            where jmgTermReg.RegDateTime > utcDateTimeNow
        {
            if (isJmgTermRegArchiveInitExtensibilityFlightEnabled)
            {
                archive = JmgTermRegArchive::initFromJmgTermReg(jmgTermReg);
            }
            else
            {
                map.data(jmgTermReg);
                archive.data(map);
            }

            archive.Description = strfmt("@SYS40034", JmgProfileSeconds::formattedSeconds(currentTime.seconds(), JmgSecondPresentationEnum::Clocktime), date2StrUsr(currentTime.date(), DateFlags::FormatAll));
            archive.insert();
            jmgTermReg.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgArchiveFutureRegistrations</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgArchiveFutureRegistrations</c> class.
    /// </returns>
    public static JmgArchiveFutureRegistrations construct()
    {
        return new JmgArchiveFutureRegistrations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>JmgArchiveFutureRegistrations</c> class when it is called from a
    ///    menu item.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>JmgArchiveFutureRegistrations</c> class.
    /// </param>
    /// <remarks>
    ///    Use the
    ///    <c>
    ///       main
    ///    </c>
    ///     class design pattern whenever a class is called from a menu item. Do not call the
    ///    <c>
    ///       main
    ///    </c>
    ///     method explicitly from the code; call it implicitly from a menu item.Typically, you would:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             Instantiate the class by calling the static <c>construct</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>prompt</c> method to create a dialog box.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>run</c> method, if the user clicks OK in the dialog box.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static void main(Args _args)
    {
        JmgArchiveFutureRegistrations jmgArchiveFutureRegistrations = JmgArchiveFutureRegistrations::construct();

        if (jmgArchiveFutureRegistrations.prompt())
        {
            jmgArchiveFutureRegistrations.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>