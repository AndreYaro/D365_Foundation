<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSearchPublishingSessionBaseRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
using AppLogging = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;
using Generic = System.Collections.Generic;

/// <summary>
///    The <c>RetailSearchPublishingSessionUpdateRequest</c> class is used to update publish session in database.
/// </summary>
/// <remarks>
///    This class is used for Real-time service data contract.
/// </remarks>
[DataContractAttribute('RetailSearchPublishingSessionBaseRequest')]
public class RetailSearchPublishingSessionBaseRequest
{
    private const str ProductPublishingCountsKey = 'ProductPublishingCounts';
    private const str NumberOfProductsFailedKey = 'NumberOfProductsFailed';
    private const str NumberOfCatalogsPublishedKey = 'NumberOfCatalogsPublished';
    private const str NumberOfCatalogsFailedKey = 'NumberOfCatalogsFailed';

    protected RetailSearchPublishingSessionId sessionId;
    protected RetailConnProfileName dataStoreName;
    protected RetailSearchPublishingEntityType entityType;
    protected RetailSearchPublishingSessionStatus statusIn;
    protected RetailSearchPublishingSessionStatus statusOut;
    protected RetailSearchPublishingSessionEntityCount changedEntitiesCount;
    protected RetailSearchPublishingSessionEntityCount publishedEntitiesCount;
    protected RetailSearchPublishingSessionMessage message;
    protected RetailSearchPublishingSessionDetailsData detailsData;
    protected RetailSearchPublishingSessionDateTime queuedDateTime;
    protected RetailSearchPublishingSessionDateTime startDateTime;
    protected RetailSearchPublishingSessionDateTime completedDateTime;

    protected const str WhiteSpaceConst = ' '; // value is displayed in the UI, part of index, must be language agnostic.

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmQueuedDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the queued date time value.
    /// </summary>
    /// <param name = "_queuedDateTime">The queued date time value.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('QueuedDateTime')]
    public RetailSearchPublishingSessionDateTime parmQueuedDateTime(RetailSearchPublishingSessionDateTime _queuedDateTime = queuedDateTime)
    {
        queuedDateTime = _queuedDateTime;
        return queuedDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the start date time value.
    /// </summary>
    /// <param name = "_startDateTime">The start date time value.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('StartDateTime')]
    public RetailSearchPublishingSessionDateTime parmStartDateTime(RetailSearchPublishingSessionDateTime _startDateTime = startDateTime)
    {
        startDateTime = _startDateTime;
        return startDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompletedDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the start date time value.
    /// </summary>
    /// <param name = "_startDateTime">The start date time value.</param>
    /// <returns>The value.</returns>
    [DataMemberAttribute('CompletedDateTime')]
    public RetailSearchPublishingSessionDateTime parmCompletedDateTime(RetailSearchPublishingSessionDateTime _completedDateTime = completedDateTime)
    {
        completedDateTime = _completedDateTime;
        return completedDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateAndProcessDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates request object.
    /// </summary>
    internal void ValidateAndProcessDetails()
    {
        this.SetSessionStatusAndDates();
        this.ProcessDetails();

        switch (this.entityType)
        {
            case RetailSearchPublishingEntityType::Product:
                if (!this.dataStoreName)
                {
                    throw Global::error('The data store is empty or null. Required for Product.');
                }

                RetailConnDatabaseProfile dataStore = RetailConnDatabaseProfile::find(this.dataStoreName);
                if (!dataStore)
                {
                    throw Global::error(strfmt("@Retail:CDXDataStoreNotExistError", this.dataStoreName));
                }

                break;
            default: // All other entities for now.
                if (!this.dataStoreName)
                {
                    this.dataStoreName = WhiteSpaceConst;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProcessDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process details.
    /// </summary>
    private void ProcessDetails()
    {
        Map paramsMap = RetailSearchPublishingSessionBaseRequest::GetDetailsData(this.detailsData);
        Generic.Dictionary<str, str> productPublishingCounts;
        str failedProductsCountMsg;
        str separator = ', ';
        System.String strMessage = '';
        System.Exception exception;

        try
        {
            strMessage = strFmt("@Retail:RetailSearchPublishingMessageNumberOfPublishedProducts", this.publishedEntitiesCount);

            if (paramsMap != null && !paramsMap.empty())
            {
                if (paramsMap.exists(ProductPublishingCountsKey))
                {
                    productPublishingCounts = paramsMap.lookup(ProductPublishingCountsKey);
  
                    str countStr;

                    if (productPublishingCounts.ContainsKey(NumberOfProductsFailedKey))
                    {
                        countStr = productPublishingCounts.get_Item(NumberOfProductsFailedKey);

                        if (countStr)
                        {
                            strMessage = System.String::Concat(strMessage, separator, strFmt("@Retail:RetailSearchPublishingMessageNumberOfFailedProducts", countStr));
                        }
                    }

                    if (productPublishingCounts.ContainsKey(NumberOfCatalogsPublishedKey))
                    {
                        countStr = productPublishingCounts.get_Item(NumberOfCatalogsPublishedKey);

                        if (countStr)
                        {
                            strMessage = System.String::Concat(strMessage, separator, strFmt("@Retail:RetailSearchPublishingMessageNumberOfPublishedCatalogs", countStr));
                        }
                    }

                    if (productPublishingCounts.ContainsKey(NumberOfCatalogsFailedKey))
                    {
                        countStr = productPublishingCounts.get_Item(NumberOfCatalogsFailedKey);

                        if (countStr)
                        {
                            strMessage = System.String::Concat(strMessage, separator, strFmt("@Retail:RetailSearchPublishingMessageNumberOfFailedCatalogs", countStr));
                        }
                    }
                }
            }

            this.message = strMessage;
        }
        catch(exception)
        {
            AppLogging::EventWriteRealTimeServiceContractMethodFailedError(funcName(), exception.StackTrace);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetSessionStatusAndDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates date time and status fields for the session if status changes.
    /// </summary>
    private void SetSessionStatusAndDates()
    {
        if(statusOut != statusIn)
        {
            if (statusOut == RetailSearchPublishingSessionStatus::None ||
                statusOut == RetailSearchPublishingSessionStatus::Queued ||
                statusOut == RetailSearchPublishingSessionStatus::InProgress)
            {
                statusOut = statusIn;
            }

            if (!queuedDateTime &&
                statusOut != RetailSearchPublishingSessionStatus::None)
            {
                queuedDateTime = DateTimeUtil::utcNow();
            }

            if (!startDateTime &&
                statusOut != RetailSearchPublishingSessionStatus::None &&
                statusOut != RetailSearchPublishingSessionStatus::Queued)
            {
                startDateTime = DateTimeUtil::utcNow();
            }

            if (!completedDateTime &&
                statusOut != RetailSearchPublishingSessionStatus::None &&
                statusOut != RetailSearchPublishingSessionStatus::Queued &&
                statusOut != RetailSearchPublishingSessionStatus::InProgress)
            {
                completedDateTime = DateTimeUtil::utcNow();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDetailsData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserialize details data softly without exceptions.
    /// </summary>
    /// <param name = "_detailsData">The new details value.</param>
    /// <returns>The deserialized value.</returns>
    protected static Map GetDetailsData(str _detailsData)
    {
        Map paramsMap = new Map(Types::String, Types::String);
        System.Exception exception;

        if (_detailsData)
        {
            try
            {
                Newtonsoft.Json.Linq.JObject jsonObject= Newtonsoft.Json.JsonConvert::DeserializeObject(_detailsData);
                if(jsonObject != null)
                {
                    Newtonsoft.Json.Linq.JProperty property = jsonObject.First;
                    while(property != null)
                    {
                        str name = property.name;
                        if(property.Value != null)
                        {
                            str value = property.Value.ToString();
                            paramsMap.insert(name, value);
                        }
                        property = property.Next;
                    }
                }
            }
            catch (exception)
            {
                AppLogging::EventWriteApplicationDiagnostic(exception.Message, exception.StackTrace);
                AppLogging::EventWriteRealTimeServiceContractMethodFailedError(funcName(), exception.StackTrace);
            }
        }

        return paramsMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>