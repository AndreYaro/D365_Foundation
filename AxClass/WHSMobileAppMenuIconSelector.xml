<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppMenuIconSelector</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppMenuIconSelector</c> class holds icon names for warehouse mobile app menu and menu items.
/// </summary>
public class WHSMobileAppMenuIconSelector
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>menuIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default menu icon name.
    /// </summary>
    /// <param name="_menuItemName">Menu item name.</param>
    /// <returns>Default menu icon name.</returns>
    public static str menuIcon(WHSMenuItemName _menuItemName)
    {
        const str DefaultMenuIcon = 'DefaultMenuIcon';
        const str DefaultMenuItemIcon = 'DefaultMenuItemIcon';
        str ret = strFmt('%1|MenuIcon|', curExt());

        if (WHSRFMenuTable::exist(_menuItemName))
        {
            return ret + DefaultMenuIcon;
        }

        WHSWorkExecuteMode workExecuteMode = WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(_menuItemName));

        switch(workExecuteMode)
        {
            case WHSWorkExecuteMode::About :
            case WHSWorkExecuteMode::ChangeWarehouse :
            case WHSWorkExecuteMode::CompleteMixedLicensePlate :
            case WHSWorkExecuteMode::InquiryLocation :
            case WHSWorkExecuteMode::InquiryLicensePlate :
            case WHSWorkExecuteMode::StartProdOrder :
            case WHSWorkExecuteMode::ProductionScrap :
            case WHSWorkExecuteMode::ProdLastPallet :
            case WHSWorkExecuteMode::InquiryItem :
            case WHSWorkExecuteMode::ReprintLabel :
            case WHSWorkExecuteMode::LicensePlateBuild :
            case WHSWorkExecuteMode::LicensePlateBreak :
            case WHSWorkExecuteMode::DriverCheckIn :
            case WHSWorkExecuteMode::DriverCheckOut :
            case WHSWorkExecuteMode::FlushNumSeqCache :
            case WHSWorkExecuteMode::ChangeBatchDisposition :
            case WHSWorkExecuteMode::WorkList :
            case WHSWorkExecuteMode::ConsolidateLicensePlates :
            case WHSWorkExecuteMode::MaterialConsumption :
            case WHSWorkExecuteMode::RemoveContainerFromGroup :
            case WHSWorkExecuteMode::EmptyKanban :
            case WHSWorkExecuteMode::CancelWork :
            case WHSWorkExecuteMode::OutboundSorting :
            case WHSWorkExecuteMode::ReprintCartonLabel :
            case WHSWorkExecuteMode::ReprintMultipleCartonLabels :
            case WHSWorkExecuteMode::AssignToPutawayCluster :
            case WHSWorkExecuteMode::PurchaseOrderLineReceiving :
            case WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate :
            case WHSWorkExecuteMode::PurchaseOrderItemReceiving :
            case WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate :
            case WHSWorkExecuteMode::LicensePlateReceiving :
            case WHSWorkExecuteMode::LicensePlateReceivingAndLocate :
            case WHSWorkExecuteMode::LoadItemReceiving :
            case WHSWorkExecuteMode::LoadItemReceivingAndLocate :
            case WHSWorkExecuteMode::ReturnItemReceiving :
            case WHSWorkExecuteMode::ReturnOrder :
            case WHSWorkExecuteMode::ReturnOrderAndLocate :
            case WHSWorkExecuteMode::TransferOrderItemReceiving :
            case WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate :
            case WHSWorkExecuteMode::TransferOrderLineReceiving :
            case WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate :
            case WHSWorkExecuteMode::MixedLPReceiving :
            case WHSWorkExecuteMode::MixedLPReceivingAndLocate :
            case WHSWorkExecuteMode::ReportAsFinished :
            case WHSWorkExecuteMode::ReportAsFinishedAndLocate :
            case WHSWorkExecuteMode::KanbanPut :
            case WHSWorkExecuteMode::KanbanPutAndLocate :
            case WHSWorkExecuteMode::ReportAsFinishedBySerial :
            case WHSWorkExecuteMode::Movement :
            case WHSWorkExecuteMode::Quarantine :
            case WHSWorkExecuteMode::MovementByTemplate :
            case WHSWorkExecuteMode::WarehouseTransfer :
            case WHSWorkExecuteMode::LicensePlateLoading :
            case WHSWorkExecuteMode::PackToNestedLPs :
            case WHSWorkExecuteMode::AdjustmentIn :
            case WHSWorkExecuteMode::AdjustmentOut :
            case WHSWorkExecuteMode::SpotCycleCounting :
            case WHSWorkExecuteMode::SystemDirected :
            case WHSWorkExecuteMode::SystemDirectedClusterPicking :
            case WHSWorkExecuteMode::UserDirected :
            case WHSWorkExecuteMode::UserGrouping :
            case WHSWorkExecuteMode::SystemGrouping :
            case WHSWorkExecuteMode::ValidatedUserDirected :
            case WHSWorkExecuteMode::ClusterPicking :
            case WHSWorkExecuteMode::ClusterPutaway :
            case WHSWorkExecuteMode::CycleCountGrouping :
            case WHSWorkExecuteMode::TransportLoading :
            case WHSWorkExecuteMode::LogOff :
            case WHSWorkExecuteMode::CreateTranferOrderFromLP :
            case WHSWorkExecuteMode::GenericDataInquiry:
            case WHSWorkExecuteMode::OverrideLabelPrinter:
                ret = ret + enum2Symbol(enumNum(WHSWorkExecuteMode), workExecuteMode);
                break;

            default :
                ret = ret + DefaultMenuItemIcon;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>