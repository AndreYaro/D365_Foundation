<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAllocateByTerm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetAllocateByTerm</c> class manages the budget allocation by term process.
/// </summary>
public class BudgetAllocateByTerm
{
    BudgetTransactionLine budgetTransactionLine;
    BudgetAllocationTerm budgetAllocationTerm;

    LineNum newLineNumFactor;
    LineNum currentLineNum;

    #define.DetailLineCountAdjustments(2)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNewLineNumFactor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the new line number factor by using the <c>BudgetTransactionLine</c> record of the
    ///    source and the total number of <c>BudgetAllocationTermDetail</c> lines present for the specified
    ///    <c>BudgetAllocationTerm</c> record.
    /// </summary>
    protected void calculateNewLineNumFactor()
    {
        BudgetTransactionLine budgetTransactionLineNextRow;

        LineNum nextLineNum;
        LineNum detailLineCount;

        BudgetAllocationTermDetail budgetAllocationTermDetail;

        currentLineNum = budgetTransactionLine.LineNumber;

        // Get the next minimum budget transaction line number after the source budget transaction line number.
        select minof(LineNumber), minof(RecId)
            from budgetTransactionLineNextRow
            where budgetTransactionLineNextRow.BudgetTransactionHeader == budgetTransactionLine.BudgetTransactionHeader &&
                budgetTransactionLineNextRow.LineNumber > currentLineNum;

        nextLineNum = budgetTransactionLineNextRow.LineNumber;

        if (budgetTransactionLineNextRow.RecId != 0)
        {
            // When there is a budget transaction line after the source budget transaction line, the the new lines should be inserted between the two lines, so
            // count the number of leger allocation lines present for the given leger allocate key.
            select count(LineNumber)
                from budgetAllocationTermDetail
                where budgetAllocationTermDetail.BudgetAllocationTerm == budgetAllocationTerm.RecId;

            detailLineCount = budgetAllocationTermDetail.LineNumber;

            if (detailLineCount != 0)
            {
                // While calculating the new line number factor consider the new offset line that will be inserted after budget allocation.
                // In order to get a distinct newLineNumFactor add detailLineCountAdjustments to the detail count (one for the offset line and one for the line that the allocation
                // line must come before.
                newLineNumFactor = (nextLineNum - currentLineNum) / (detailLineCount + #DetailLineCountAdjustments);
            }
        }
        else
        {
            // When there is no budget transaction line after the source budget transaction line.
            newLineNumFactor = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the source <c>BudgetTransactionLine</c> record before creating new lines by using budget
    ///    allocation terms.
    /// </summary>
    /// <returns>
    ///    true if the budget transaction line is valid; otherwise, false.
    /// </returns>
    protected boolean checkBudgetTransactionLine()
    {
        boolean ret = true;
        BudgetTransactionHeader budgetTransactionHeader;

        budgetTransactionHeader = BudgetTransactionHeader::find(budgetTransactionLine.BudgetTransactionHeader);

        if (BudgetTransactionHeader::checkExist(budgetTransactionHeader.RecId) == false ||
            budgetTransactionHeader.isUserBlocked() == true)
        {
            // Budget transaction does not exist or is in use by another user; throw error to cancel the BudgetTransaction Line creation.
            throw error("@SYS21628");
        }

        if (budgetTransactionHeader.checkBudgetTransAvailableToComplete() == false)
        {
            // Source Budget transaction has already been processed; throw error to cancel the BudgetTransaction Line creation.
            checkFailed("@SYS23025");
            throw error("@SYS21628");
        }

        if (budgetTransactionLine.TransactionCurrencyAmount == 0)
        {
            // Source Budget Transaction Line has 0 amount; throw error to cancel the BudgetTransaction Line creation.
            throw error(strfmt("@SYS190317", LedgerDimensionFacade::getDisplayValueForLedgerDimension(budgetTransactionLine.LedgerDimension)));
        }

        if (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Encumbrance || budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::PreEncumbrance)
        {
            // Source Budget Transaction type should not be of type Encumbrance or PreEncumbrance.
            throw error(strfmt("@SYS134253", budgetTransactionHeader.BudgetTransactionType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBudgetTransactionLineDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies some of the budget transaction line details from the source budget transaction line to the
    ///    new line.
    /// </summary>
    /// <param name="_budgetTransactionLineNew">
    ///    A <c>BudgetTransactionLine</c> record buffer that needs details such as the budget transaction
    ///    header, currency, and date from the source budget transaction line.
    /// </param>
    protected void copyBudgetTransactionLineDetails(BudgetTransactionLine _budgetTransactionLineNew)
    {
        _budgetTransactionLineNew.TransactionCurrency = budgetTransactionLine.TransactionCurrency;
        _budgetTransactionLineNew.BudgetTransactionHeader = budgetTransactionLine.BudgetTransactionHeader;
        _budgetTransactionLineNew.Date = budgetTransactionLine.Date;
        _budgetTransactionLineNew.BudgetType = budgetTransactionLine.BudgetType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetTransactionLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates new budget transaction lines by using the budget allocation terms and the source budget
    ///    transaction line.
    /// </summary>
    /// <remarks>
    ///    The <c>calculateNewLineNumFactor</c> method must be called prior to this method in order get the
    ///    new line number factor.
    /// </remarks>
    protected void createBudgetTransactionLines()
    {
        BudgetTransactionLine budgetTransactionLineNew;
        BudgetTransactionLine budgetTransactionLineNewOffset;

        LineNum offsetLineNum;
        BudgetAllocatePercent allocatedPercentage;
        BudgetThresholdPercent budgetAllocationPctProportion;
        BudgetAllocationTermDetail budgetAllocationTermDetail;
        Currency currency;

        AmountCur distributionAmountForLine;
        Counter lineCount;

        ttsbegin;

        currentLineNum = budgetTransactionLine.LineNumber;

        // Store the first new line number for the offset Line and is used in later part of code if an offset line needs to be inserted.
        offsetLineNum = this.getNextLineNum();

        currency = Currency::find(budgetTransactionLine.TransactionCurrency);

        select sum(Percent), count(RecId) from budgetAllocationTermDetail
            where budgetAllocationTermDetail.BudgetAllocationTerm == budgetAllocationTerm.RecId;

        BudgetAllocatePercent totalPercentToAllocate = budgetAllocationTermDetail.Percent / 100;
        AmountCur distributionAmountRemaining = currency.amount_Instance(budgetTransactionLine.TransactionCurrencyAmount * totalPercentToAllocate);
        int64 distributionCount = budgetAllocationTermDetail.RecId;

        while select Percent,DefaultDimension
            from budgetAllocationTermDetail
            order by budgetAllocationTermDetail.LineNumber
            where budgetAllocationTermDetail.BudgetAllocationTerm == budgetAllocationTerm.RecId
        {
            budgetTransactionLineNew.clear();
            budgetAllocationPctProportion = budgetAllocationTermDetail.Percent / 100;
            lineCount++;

            this.copyBudgetTransactionLineDetails(budgetTransactionLineNew);

            budgetTransactionLineNew.LineNumber = this.getNextLineNum();

            if (lineCount == distributionCount)
            {
                distributionAmountForLine = distributionAmountRemaining;
            }
            else
            {
                distributionAmountForLine = currency.amount_Instance(budgetTransactionLine.TransactionCurrencyAmount * budgetAllocationPctProportion);
                distributionAmountRemaining -= distributionAmountForLine;
            }

            budgetTransactionLineNew.TransactionCurrencyAmount = distributionAmountForLine;
            budgetTransactionLineNew.AccountingCurrencyAmount = BudgetTransactionManager::calculateTransAmountToAccountingAmount(
                distributionAmountForLine,
                budgetTransactionLineNew.TransactionCurrency,
                budgetTransactionLineNew.Date);

            // The Ledger Dimension on the new budget transaction line is a merge of dimensions on the budget allocation term detail line over
            // the dimensions on the source budget transaction line.
            budgetTransactionLineNew.LedgerDimension = BudgetTransactionManager::mergeDefaultDimWithLedgerDim(
                budgetAllocationTermDetail.DefaultDimension,
                budgetTransactionLine.LedgerDimension,
                budgetTransactionLineNew.Date);

            budgetTransactionLineNew.Comment = strfmt("@SYS134183", budgetAllocationTerm.Name);

            if (budgetTransactionLineNew.LedgerDimension != 0 && budgetTransactionLineNew.validateWrite())
            {
                budgetTransactionLineNew.write();
                allocatedPercentage += budgetAllocationTermDetail.Percent;
            }
            else
            {
                throw error('@Budget:BudgetDimensionAllocationError');
            }
        }

        if (allocatedPercentage > 0)
        {
            // Create an offset line for the allocated amount based on the allocated percentage.
            budgetAllocationPctProportion = allocatedPercentage / 100;

            this.copyBudgetTransactionLineDetails(budgetTransactionLineNewOffset);

            budgetTransactionLineNewOffset.LineNumber = offsetLineNum;
            budgetTransactionLineNewOffset.LedgerDimension = budgetTransactionLine.LedgerDimension;

            // The AmountCur value should be reversed for the offset transaction line.
            budgetTransactionLineNewOffset.TransactionCurrencyAmount = currency.amount_Instance((-1) * budgetTransactionLine.TransactionCurrencyAmount * budgetAllocationPctProportion);

            budgetTransactionLineNewOffset.AccountingCurrencyAmount = BudgetTransactionManager::calculateTransAmountToAccountingAmount(
                budgetTransactionLineNewOffset.TransactionCurrencyAmount,
                budgetTransactionLineNewOffset.TransactionCurrency,
                budgetTransactionLineNewOffset.Date);

            budgetTransactionLineNewOffset.Comment = strfmt("@SYS134183", budgetAllocationTerm.Name);

            if (budgetTransactionLineNewOffset.validateWrite())
            {
                budgetTransactionLineNewOffset.write();
            }
            else
            {
                throw Exception::Error;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the next line number based on the current line number and the new line number factor.
    /// </summary>
    /// <returns>
    ///    The <c>LineNum</c> value as the next line number based on the current line number and the new line
    ///    number factor.
    /// </returns>
    /// <remarks>
    ///    The <c>calculateNewLineNumFactor</c> method must be called earlier than this method to get the new
    ///    line number factor.
    /// </remarks>
    protected LineNum getNextLineNum()
    {
        LineNum nextLineNum;

        nextLineNum = currentLineNum + newLineNumFactor;

        currentLineNum = nextLineNum;

        if (nextLineNum == 0)
        {
            // To avoid a line number with value zero and two lines having the same line number,
            // calculate the next line number by manipulating the new line number factor.
            nextLineNum = newLineNumFactor / 2;
        }

        return nextLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>BudgetAllocateByPeriod</c> class.
    /// </summary>
    /// <param name="_budgetTransactionLineId">
    ///    The record ID of the <c>BudgetTransactionLine</c> record to allocate.
    /// </param>
    /// <param name="_budgetAllocationTermId">
    ///    The budget allocation term ID.
    /// </param>
    protected void initialize(RecId _budgetTransactionLineId, BudgetAllocationTermId _budgetAllocationTermId)
    {
        budgetTransactionLine = BudgetTransactionLine::find(_budgetTransactionLineId);
        budgetAllocationTerm = BudgetAllocationTerm::findByTermId(_budgetAllocationTermId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the allocation of the <c>BudgetTransactionLine</c> record.
    /// </summary>
    protected void process()
    {
        if (this.checkBudgetTransactionLine())
        {
            // When the source budget transaction line is valid.
            this.calculateNewLineNumFactor();
            this.createBudgetTransactionLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates the <c>BudgetTransactionLine</c> record by using the specified budget allocation term ID.
    /// </summary>
    /// <param name="_budgetTransactionLineId">
    ///    The record ID of the <c>BudgetTransactionLine</c> record to allocate.
    /// </param>
    /// <param name="_budgetAllocationTermId">
    ///    The budget allocation term ID.
    /// </param>
    public static void allocateLine(RecId _budgetTransactionLineId, BudgetAllocationTermId _budgetAllocationTermId)
    {
        BudgetAllocateByTerm budgetAllocateByTerm = new BudgetAllocateByTerm();

        budgetAllocateByTerm = new BudgetAllocateByTerm();
        budgetAllocateByTerm.initialize(_budgetTransactionLineId, _budgetAllocationTermId);
        budgetAllocateByTerm.process();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>