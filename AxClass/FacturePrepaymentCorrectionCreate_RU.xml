<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FacturePrepaymentCorrectionCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates facture for prepayment corrections.
/// </summary>
class FacturePrepaymentCorrectionCreate_RU extends RunBase
{
    ModuleCustVend module;
    TmpFacturePrepaymentCorrection_RU correctionPaym;
    TmpFacturePrepaymentCorrection_RU correctionTax;
    DialogField dlgFactureExtarnalId;
    FactureExternalId_RU factureExtarnalId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFacture</Name>
				<Source><![CDATA[
    private FactureJour_RU createFacture(
        LedgerJournalTrans _trans,
        CustVendAc _custVendAc,
        FactureExternalId_RU _origFactureExternalId,
        FactureDate_RU _origFactureDate,
        FactureExternalId_RU _corFactureExternalId = '',
        FactureDate_RU _corFactureDate = dateNull())
    {
        FactureModule_RU factureModule = (module == ModuleCustVend::Cust) ? FactureModule_RU::TaxCorrectionSales : FactureModule_RU::TaxCorrectionPurch;
        FactureJourCreate_RU factureCreate = FactureJourCreate_RU::construct(factureModule);

        factureCreate.appendTrans([ _trans.TableId, _trans.RecId, 0], 1);
        factureCreate.initParameters(
            NoYes::Yes,
            NoYes::No,
            Printout::After,
            NoYes::No,
            _corFactureExternalId,
            _corFactureDate ? _corFactureDate : _trans.TransDate,
            _custVendAc,
            _trans.CurrencyCode,
            FactureType_RU::TaxCorrection,
            '',
            '',
            '',
            '',
            '',
            dateNull(),
            0,
            _trans.TransDate,
            '',
            _origFactureExternalId,
            _origFactureDate,
            dateNull(),
            FactureCorrectionType_RU::Correction);

        factureCreate.runOperation();

        FactureJour_RU factureJour = factureCreate.getFactureJour();

        if (factureJour)
        {
            FactureCalcAmountAdjustments_RU::factureAdjUpdate(factureCreate.getFactureJour());
            this.distributeAmount(factureJour);
        }

        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFactureCor</Name>
				<Source><![CDATA[
    private FactureJour_RU createFactureCor(
        LedgerJournalTrans _ledgerJournalTrans,
        CustVendAc _custVendAc,
        FactureExternalId_RU _origFactureExternalId,
        FactureDate_RU _origFactureDate,
        FactureExternalId_RU _corFactureExternalId,
        FactureDate_RU _corFactureDate)
    {
        NumberSeq factureNumberSeq;
        FactureModule_RU factureModule;
        LanguageId languageId;
        CustVendTrans custVendTrans;

        ttsbegin;

        if (module == ModuleCustVend::Cust)
        {
            factureNumberSeq = NumberSeq::newGetNum(CustParameters::numRefCustFactureId_RU(), false, true);
            factureModule = FactureModule_RU::TaxCorrectionPurch_Cust;
            languageId = CustTable::find(_custVendAc).languageId();
            custVendTrans = CustTrans::find(_ledgerJournalTrans.ledgerJournalTrans_W().OrigPaymRefRecId_RU);
        }
        else
        {
            factureNumberSeq = NumberSeq::newGetNum(VendParameters::numRefVendFactureId_RU(), false, true);
            factureModule = FactureModule_RU::TaxCorrectionSales_Vend;
            languageId = VendTable::find(_custVendAc).languageId();
            custVendTrans = VendTrans::find(_ledgerJournalTrans.ledgerJournalTrans_W().OrigPaymRefRecId_RU);
        }

        if (!factureNumberSeq)
        {
            throw error(strFmt("@SYS53911", "@GLS106861", "@SYS25194"));
        }

        FactureJour_RU jour;
        jour.Module = factureModule;
        jour.FactureType = FactureType_RU::TaxCorrection;
        jour.FactureId = factureNumberSeq.num();
        jour.FactureExternalId = _corFactureExternalId;
        jour.Voucher = _ledgerJournalTrans.Voucher;
        jour.FactureDate = _corFactureDate;
        jour.FactureDate_External = _corFactureDate;
        jour.FactureTax = _ledgerJournalTrans.amount();
        jour.CurrencyCode = _ledgerJournalTrans.CurrencyCode;
        jour.CustVendInvoiceAccount = _custVendAc;
        jour.Consignee = "";
        jour.Consignor = "";
        jour.NumberSequenceGroupId = "";
        jour.OffSessionId = "";
        jour.PrintInMST = NoYes::No;
        jour.DocumentNum = _ledgerJournalTrans.DocumentNum;
        jour.DocumentDate = _ledgerJournalTrans.DocumentDate;
        jour.LanguageId = languageId;
        jour.LanguageId = jour.LanguageId ? jour.LanguageId : infolog.language();
        jour.CorrectionType = FactureCorrectionType_RU::Correction;
        jour.CorrectedFactureExternalId = _origFactureExternalId;
        jour.CorrectedFactureDate = _origFactureDate;
        jour.PrepaymTaxCorrection = NoYes::Yes;

        if (custVendTrans)
        {
            jour.PaymentTransDate = custVendTrans.DocumentDate ? custVendTrans.DocumentDate : custVendTrans.TransDate;
            jour.PaymentOrderNum = custVendTrans.DocumentNum;
        }

        jour.insert();

        VATType_RU vatType;

        switch (TaxTable::find(_ledgerJournalTrans.TaxCode).TaxType_W)
        {
            case TaxType_W::VAT :
                vatType = VATType_RU::Full;
                break;
            case TaxType_W::VATReduced :
                vatType = VATType_RU::Reduced;
                break;
            case TaxType_W::VATZero :
                vatType = VATType_RU::Zero;
                break;
            default :
                vatType = VATType_RU::NonLiable;
                break;
        }

        FactureTrans_RU trans = jour.newTrans(
            jour.FactureAmount,
            jour.FactureTax,
            0,
            FactureLineType_RU::TaxCorrection,
            _ledgerJournalTrans.ExchRate,
            TaxData::percent(_ledgerJournalTrans.TaxCode, jour.FactureDate, jour.FactureAmount),
            jour.FactureTax,
            jour.FactureTax,
            jour.FactureTax,
            vatType,
            '',
            _ledgerJournalTrans.DefaultDimension);

        trans.TaxGroup = _ledgerJournalTrans.TaxGroup;
        trans.TaxItemGroup = _ledgerJournalTrans.TaxItemGroup;
        trans.TaxCode = _ledgerJournalTrans.TaxCode;

        trans.InvoiceLineNum = _ledgerJournalTrans.LineNum;
        trans.InvoiceId = _ledgerJournalTrans.JournalNum;
        trans.MarkupRefRecId = _ledgerJournalTrans.RecId;
        trans.MarkupRefTableId = _ledgerJournalTrans.TableId;
        trans.update();

        ttscommit;

        return jour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        dialog.caption("@GLS112796");

        dlgFactureExtarnalId = dialog.addFieldValue(extendedTypeStr(FactureExternalId_RU), '');
        dlgFactureExtarnalId.mandatory_RU(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeAmount</Name>
				<Source><![CDATA[
    private void distributeAmount(FactureJour_RU _factureJour)
    {
        FactureTaxCorrectionEngine_RU factureTaxCorrectionEngine = FactureTaxCorrectionEngine_RU::newParameters(_factureJour, false, false, true);

        FactureTrans_RU factureTransOrig;
        factureTransOrig.setTmp();
        factureTransOrig.setTmpData(factureTaxCorrectionEngine.getFactureTransOrig());

        FactureTrans_RU factureTrans;
        factureTrans.setTmp();
        factureTrans.setTmpData(factureTaxCorrectionEngine.getFactureTrans());

        Set setRecId = new Set(Types::Int64);

        while select RecId from factureTransOrig
        {
            setRecId.add(factureTransOrig.RecId);
        }

        while select forupdate factureTrans
        {
            factureTaxCorrectionEngine.distributeAmount(factureTrans, factureTrans.vat, setRecId);
        }

        factureTaxCorrectionEngine.updateTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            factureExtarnalId = dlgFactureExtarnalId.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionPaym</Name>
				<Source><![CDATA[
    public TmpFacturePrepaymentCorrection_RU parmCorrectionPaym(TmpFacturePrepaymentCorrection_RU _correctionPaym = correctionPaym)
    {
        correctionPaym = _correctionPaym;

        return correctionPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionTax</Name>
				<Source><![CDATA[
    public TmpFacturePrepaymentCorrection_RU parmCorrectionTax(TmpFacturePrepaymentCorrection_RU _correctionTax = correctionTax)
    {
        correctionTax = _correctionTax;

        return correctionTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModule</Name>
				<Source><![CDATA[
    public ModuleCustVend parmModule(ModuleCustVend _module = module)
    {
        module = _module;

        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        TmpFacturePrepaymentCorrection_RU correctionTaxLocal;
        FactureExternalId_RU corFactureExternalId;
        FactureDate_RU corFactureDate;
        FactureJour_RU factureJour;

        LedgerJournalTrans ledgerJournalTransPaym = LedgerJournalTrans::findRecId(correctionPaym.LedgerJournalTransPaym, false);
        correctionTaxLocal.linkPhysicalTableInstance(correctionTax);

        while select FactureExternalId, FactureDate_External, LedgerJournalTransTax from correctionTaxLocal
            order by ProcessDateTime
            where correctionTaxLocal.RefRecId == correctionPaym.RecId
        {
            if (correctionTaxLocal.FactureExternalId)
            {
                if (!corFactureExternalId || !corFactureDate)
                {
                    corFactureExternalId = correctionTaxLocal.FactureExternalId;
                    corFactureDate = correctionTaxLocal.FactureDate_External;
                }

                continue;
            }

            LedgerJournalTrans ledgerJournalTransTax = LedgerJournalTrans::findRecId(correctionTaxLocal.LedgerJournalTransTax, false);

            if (FactureTrans_RU::findLedgerJournalTrans(ledgerJournalTransTax.JournalNum, ledgerJournalTransTax.LineNum, ledgerJournalTransTax.RecId, false))
            {
                continue;
            }

            if (corFactureExternalId)
            {
                factureJour = this.createFactureCor(
                    ledgerJournalTransTax,
                    ledgerJournalTransPaym.parmAccount(),
                    correctionPaym.FactureExternalId,
                    correctionPaym.FactureDate_External,
                    corFactureExternalId,
                    corFactureDate);
            }
            else
            {
                if (module == ModuleCustVend::Vend)
                {
                    if (this.prompt())
                    {
                        corFactureExternalId = factureExtarnalId;
                    }
                }

                factureJour = this.createFacture(
                    ledgerJournalTransTax,
                    ledgerJournalTransPaym.parmAccount(),
                    correctionPaym.FactureExternalId,
                    correctionPaym.FactureDate_External,
                    corFactureExternalId,
                    corFactureDate);
            }

            if (factureJour && !corFactureDate)
            {
                corFactureExternalId = factureJour.FactureExternalId;
                corFactureDate = factureJour.FactureDate_External;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FacturePrepaymentCorrectionCreate_RU construct()
    {
        return new FacturePrepaymentCorrectionCreate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static Description description()
    {
        return "@GLS112796";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>