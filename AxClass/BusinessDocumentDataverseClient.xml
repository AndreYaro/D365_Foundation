<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentDataverseClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.DataverseSdk;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System.Collections;

/// <summary>
/// A Dataverse client for Electronic invoicing documents.
/// </summary>
[SysObsoleteAttribute('BusinessDocumentDataverseClient is deprecated and should not be used ', true, 6\7\2024)]
internal class BusinessDocumentDataverseClient
{
    private const str SubmissionsEntityName = 'mseis_electronicinvoicesubmission';
    private const str SubmissionsEntityUIDFieldName = 'mseis_uid';
    private const str SubmissionsEntityDataAreaIdFieldName = 'mseis_legalentity';
    private const str SubmissionsEntityIdFieldName = 'mseis_number';
    private const str SubmissionsEntityLogFieldName = 'mseis_log';
    private const str SubmissionsEntityStateFieldName = 'mseis_state';

    internal const str SubmissionDocumentsEntityName = 'mseis_electronicinvoicesubmissiondocument';
    internal const str SubmissionDocumentsEntityUIDFieldName = 'mseis_uid';
    internal const str SubmissionDocumentsEntityInvoiceIdFieldName = 'mseis_invoiceid';
    internal const str SubmissionDocumentsEntityInvoiceDateFieldName = 'mseis_invoicedate';
    internal const str SubmissionDocumentsEntityInvoiceAccountFieldName = 'mseis_invoiceaccount';
    internal const str SubmissionDocumentsEntityTaxInvoiceSalesIdFieldName = 'mseis_taxinvoicesalesid';
    
    private IOrganizationService organizationService;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance.
    /// </summary>
    public void new()
    {
        const str AppName = 'Dynamics 365 Finance';

        var dataverseIntegrationParameters = BusinessDocumentDataverseIntegrationParameters::find();
        str appId = dataverseIntegrationParameters.AppId;
        if (!appId)
        {
            throw error("@BusinessDocumentSubmissionService:AppIdIsEmpty");
        }
        str secret = KeyVaultCertificateHelper::getManualSecretValue(dataverseIntegrationParameters.AppKeyVaultSecretRef, false);
        if (!secret)
        {
            throw error("@BusinessDocumentSubmissionService:SecretIsEmpty");
        }

        organizationService = SysDataverseUtility::GetOrganizationServiceForCurrentUserUsingAadAppAuthentication(AppName, appId, secret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    private ICollection executeQuery(QueryExpression _queryExpression)
    {
        ICollection ret = null;
        try
        {
            var entityCollection = organizationService.RetrieveMultiple(_queryExpression);
            ret = entityCollection.Entities;
        }
        catch (Exception::CLRError)
        {
            error("@BusinessDocumentSubmissionService:CannotRetrieveDataFromDataverse");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubmissionResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets submission result by a given <c>BusinessDocumentSubmission</c> table record.
    /// </summary>
    /// <param name = "_submissionTable">A <c>BusinessDocumentSubmission</c> table record.</param>
    /// <returns>A submission result.</returns>
    public BusinessDocumentDataverseSubmissionResult getSubmissionResult(BusinessDocumentSubmission _submissionTable)
    {
        BusinessDocumentDataverseSubmissionResult ret;

        if (_submissionTable.RecId == 0)
        {
            throw error("@BusinessDocumentSubmissionService:SubmissionRecordShouldNotBeEmpty");
        }
        if (_submissionTable.RefTableId != tableNum(BusinessDocumentBatchSubmission))
        {
            throw error("@BusinessDocumentSubmissionService:BatchSubmissionExpected");
        }

        BusinessDocumentBatchSubmission batchSubmissionTable = BusinessDocumentBatchSubmission::find(_submissionTable.RefRecId);

        var conditionExpressionDataAreaId = new ConditionExpression(
            SubmissionsEntityDataAreaIdFieldName,
            ConditionOperator::Equal,
            batchSubmissionTable.DataAreaId);

        var conditionExpressionSubmissionId = new ConditionExpression(
            SubmissionsEntityIdFieldName,
            ConditionOperator::Equal,
            strFmt('BatchSubmissionId:"%1"', batchSubmissionTable.Id));

        var filterExpression = new FilterExpression();
        filterExpression.set_FilterOperator(LogicalOperator::And);
        filterExpression.AddCondition(conditionExpressionDataAreaId);
        filterExpression.AddCondition(conditionExpressionSubmissionId);

        var queryExpression = new QueryExpression(SubmissionsEntityName);
        queryExpression.set_ColumnSet(new ColumnSet(SubmissionsEntityUIDFieldName, SubmissionsEntityLogFieldName, SubmissionsEntityStateFieldName));
        queryExpression.set_Criteria(filterExpression);
        queryExpression.set_TopCount(1);

        var entities = this.executeQuery(queryExpression);
        if (entities != null)
        {
            var entitiesEnumerator = entities.GetEnumerator();
            if (entitiesEnumerator.MoveNext())
            {
                Microsoft.Xrm.Sdk.Entity entity = entitiesEnumerator.get_Current();
                var attributes = entity.get_Attributes();

                guid uid;
                if (attributes.Contains(SubmissionsEntityUIDFieldName))
                {
                    uid = str2Guid(attributes.get_Item(SubmissionsEntityUIDFieldName));
                }
                else
                {
                    error(strFmt("@BusinessDocumentSubmissionService:CannotRetrieveSubmissionUIDFromDataverse", batchSubmissionTable.Id));
                }

                str log;
                if (attributes.Contains(SubmissionsEntityLogFieldName))
                {
                    log = attributes.get_Item(SubmissionsEntityLogFieldName);
                }

                BusinessDocumentState state;
                if (attributes.Contains(SubmissionsEntityStateFieldName))
                {
                    str stateStr = attributes.get_Item(SubmissionsEntityStateFieldName);
                    state = symbol2Enum(enumNum(BusinessDocumentState), stateStr);
                }
                else
                {
                    error(strFmt("@BusinessDocumentSubmissionService:CannotRetrieveSubmissionStateFromDataverse", batchSubmissionTable.Id));
                }
                ret = new BusinessDocumentDataverseSubmissionResult(uid, log, state);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubmissionDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a submission documents collection by a given UID.
    /// </summary>
    /// <param name = "_submissionUID">A submission UID.</param>
    /// <returns>A submission documents collection.</returns>
    public ICollection getSubmissionDocuments(guid _submissionUID)
    {
        var conditionExpression = new ConditionExpression(
            SubmissionDocumentsEntityUIDFieldName,
            ConditionOperator::Equal,
            strLwr(guid2StrWithoutBraces(_submissionUID)));

        var filterExpression = new FilterExpression();
        filterExpression.AddCondition(conditionExpression);

        var queryExpression = new QueryExpression(SubmissionDocumentsEntityName);
        queryExpression.ColumnSet = new ColumnSet(
            SubmissionDocumentsEntityInvoiceIdFieldName,
            SubmissionDocumentsEntityInvoiceDateFieldName,
            SubmissionDocumentsEntityInvoiceAccountFieldName,
            SubmissionDocumentsEntityTaxInvoiceSalesIdFieldName);
        queryExpression.set_Criteria(filterExpression);

        return this.executeQuery(queryExpression);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<IsObsolete>Yes</IsObsolete>
</AxClass>