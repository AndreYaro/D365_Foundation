<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashReceiptPrinting_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>CashReceiptPrinting_W</c> collects and prints Cash Receipts.
/// </summary>
public class CashReceiptPrinting_W
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prepareForPrintingReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes list with records of <c>CustInvoiceTable</c> formed by <c>CustPostInvoiceJob</c>.
    /// </summary>
    /// <param name = "_custPostInvoice"><c>CustPostInvoice</c>.</param>
    /// <param name = "_recordSortedList">Prepared list.</param>
    /// <returns>
    /// Returns container with pairs Voucher + TransDate of
    /// successfully printed receipts or null in case of none.
    /// </returns>
    public static container prepareForPrintingReceipt(CustPostInvoice _custPostInvoice, RecordSortedList _recordSortedList = null)
    {
        RecordSortedList journalList = new RecordSortedList(tableNum(CustInvoiceJour));
        CustInvoiceTable custInvoiceTable = _custPostInvoice.parmCustInvoiceTable();
        CustInvoiceJour custInvoiceJour = custInvoiceTable.custInvoiceJour();
        container successfullyPrintedReceipts;

        _recordSortedList.first(custInvoiceTable);

        do
        {
            if(custInvoiceTable && custInvoiceTable.Posted)
            {
                custInvoiceJour = custInvoiceTable.custInvoiceJour();
                journalList.ins(custInvoiceJour);
            }
        }
        while (_recordSortedList.next(custInvoiceTable));

        if (journalList.len())
        {
            successfullyPrintedReceipts = CashReceiptPrinting_W::printCODCashReceipt(journalList);
        }

        return successfullyPrintedReceipts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCODCashReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls GER configuration for printing receipt
    /// for all documents which are prepared.
    /// </summary>
    /// <param name = "_invoiceJourList">list of <c>CustInvoiceJour</c>.</param>
    /// <returns>
    /// Returns container of next structure : [[Voucher1, TransDate1], [Voucher2, TransDate2], ...]
    /// or null in case of none successfully printed receipts.
    /// </returns>
    private static container printCODCashReceipt(RecordSortedList _invoiceJourList)
    {
        CustInvoiceJour custInvoiceJour;
        CustTrans       custTrans, custTransPayment;
        CustSettlement  custSettlement;
        container       cashRegisterKeys;

        _invoiceJourList.first(custInvoiceJour);

        do
        {
            if (custInvoiceJour && PaymTerm::isCashAccount(custInvoiceJour.Payment))
            {
                custTrans = custInvoiceJour.custTrans();

                select firstonly custTransPayment
                exists join custSettlement
                    where custSettlement.OffsetRecid == custTransPayment.RecId
                        && custSettlement.TransRecId == custTrans.RecId
                        && custSettlement.TransCompany == custTrans.dataAreaId
                        && custSettlement.AccountNum == custTrans.AccountNum;

                CashRegisterFiscalTrans_W cashRegisterFiscalTrans_W = CashRegisterFiscalTrans_W::findCustTrans(custTransPayment);
                if (cashRegisterFiscalTrans_W)
                {
                    Args args = new Args();
                    args.record(custTransPayment);

                    CashRegisterReceiptPrint_W action = new CashRegisterReceiptPrint_W();
                    action.parmArgs(args);
                    if (action.runElectronicReporting(cashRegisterFiscalTrans_W))
                    {
                        cashRegisterKeys += [[cashRegisterFiscalTrans_W.Voucher, CashRegisterFiscalTrans_W.TransDate]];
                    }
                }
            }
        }
        while (_invoiceJourList.next(custInvoiceJour));

        return cashRegisterKeys;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printAllReadyReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints all receipts which are ready.
    /// </summary>
    public static void printAllReadyReceipts()
    {
        CashRegisterFiscalTrans_W cashRegisterFiscalTrans;
        while select cashRegisterFiscalTrans
        {
            CashReceiptPrinting_W::openFileFromArchive(cashRegisterFiscalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReadyReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints specific receipt only.
    /// </summary>
    /// <param name = "_readyReceipts">
    /// Container of next structure : [[Voucher1, TransDate1], [Voucher2, TransDate2], ...]
    /// which allows to find linked receipt.
    /// </param>
    public static void printReadyReceipts(container _readyReceipts)
    {

        for (int i = 0; i <= conLen(_readyReceipts); i++)
        {
            str voucher;
            date transDate;
            [voucher, transDate] = conPeek(_readyReceipts, i);
            CashRegisterFiscalTrans_W cashRegisterFiscalTrans;
            select firstonly cashRegisterFiscalTrans
                where cashRegisterFiscalTrans.Voucher == voucher 
                    && cashRegisterFiscalTrans.TransDate == transDate;

            if (cashRegisterFiscalTrans)
            {
                CashReceiptPrinting_W::openFileFromArchive(cashRegisterFiscalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllReceiptsAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all attachments for receipts.
    /// </summary>
    public static void clearAllReceiptsAttachments()
    {
        CashRegisterFiscalTrans_W cashRegisterFiscalTrans;
        while select cashRegisterFiscalTrans
        {
            cashRegisterFiscalTrans.deleteAllConnectedDocuments();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFileFromArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens saved in archive receipt.
    /// </summary>
    /// <param name = "_cashRegisterFiscalTrans_W">Cash Transaction for needed receipt.</param>
    public static void openFileFromArchive(CashRegisterFiscalTrans_W _cashRegisterFiscalTrans_W)
    {
        if (_cashRegisterFiscalTrans_W)
        {
            DocuRef docuRef = DocuRef::findTableIdRecId(CompanyInfo::find().DataArea, _cashRegisterFiscalTrans_W.TableId, _cashRegisterFiscalTrans_W.RecId);
            if (docuRef && docuRef.isValueAttached())
            {
                CashReceiptPrinting_W::navigateToFile(docuRef);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>navigateToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Navigates user to the document attachment for download.
    /// </summary>
    /// <param name="_docuRef">The DocuRef record to open.</param>
    private static void navigateToFile(DocuRef _docuRef)
    {
        Browser br = new Browser();
        str url = CashReceiptPrinting_W::getPublicUrl(_docuRef);

        if (url)
        {
            br.navigate(url, false, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPublicUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a public URL that points at the provided document reference.
    /// </summary>
    /// <param name="_ref">A document reference that has an attached file or URL.</param>
    /// <returns>A URL that can be used to navigate to the attached URL or download the attached file.</returns>
    private static str getPublicUrl(DocuRef _ref)
    {
        str url;
        if (_ref.isValueAttached())
        {
            var docuValue = _ref.docuValue();
            url = docuValue.Path;

            if (!url || docuValue.Type == DocuValueType::Others)
            {
                str accessToken = DocumentManagement::createAccessToken(_ref);
                url = Microsoft.Dynamics.AX.Framework.FileManagement.URLBuilderUtilities::GetDownloadUrl(docuValue.FileId, accessToken);
            }
        }

        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAndPrintReceipts</Name>
				<Source><![CDATA[
    ///  <summary>
    ///  Generates and prints all needed receipts.
    ///  </summary>
    ///  <param name="_receiptDara">
    ///  Container of next structure : [[Voucher1, TransDate1], [Voucher2, TransDate2], ...].
    ///  </param>
    public static void generateAndPrintReceipts(container _receiptData)
    {
        for (int i = 0; i <= conLen(_receiptData); i++)
        {
            str voucher;
            date transDate;
            [voucher, transDate] = conPeek(_receiptData, i);
            CashRegisterFiscalTrans_W cashRegisterFiscalTrans;
            select firstonly cashRegisterFiscalTrans
                where cashRegisterFiscalTrans.Voucher == voucher &&
                      cashRegisterFiscalTrans.TransDate == transDate;

            if (cashRegisterFiscalTrans)
            {
                Args args = new Args();
                args.record(cashRegisterFiscalTrans);

                CashRegisterReceiptPrint_W action = new CashRegisterReceiptPrint_W();
                action.parmArgs(args);
                action.runOperation();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>