<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysInstrumentationSegment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides instrumentation for a code segment.
/// </summary>
internal class SysInstrumentationSegment implements System.IDisposable
{
    private str context;
    private str activity;
    private str activityId;
    private str executionId;
    private SysInstrumentationAdditionalParameters additionalParameters;
    
    private System.Diagnostics.Stopwatch stopWatch;

    private SysInstrumentationChannel instrumentationChannel;

    // Service Framework
    private SysInstrumentationActivityContext sf_ActivityContext;
    private SysInstrumentationActivity        sf_Activity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(str _context, str _activity, str _activityId, SysInstrumentationAdditionalParameters _additionalParameters)
    {
        stopwatch               = new System.Diagnostics.Stopwatch();
        instrumentationChannel  = SysInstrumentationChannelEventSource::construct();

        context                 = _context;
        activity                = _activity;
        activityId              = _activityId;
        executionId             = System.Guid::NewGuid().ToString();
        additionalParameters    = _additionalParameters ? _additionalParameters : SysInstrumentationAdditionalParameters::construct();

        SysInstrumentationLogger sf_Logger = SysInstrumentationLoggerFactory::CreateLogger(_context);

        sf_activity = SysInstrumentationActivity::construct(_activity, this.convertContextToNamespace(_context));

        sf_ActivityContext = sf_Logger.activityContextWithCustomProperties(sf_Activity);

        if (_additionalParameters != null)
        {
            _additionalParameters.addToActivity(sf_ActivityContext);
        }

        this.start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a new instrumentation segment.
    /// </summary>
    /// <param name = "_cotext">A context.</param>
    /// <param name = "_activity">An activity name.</param>
    /// <param name = "_activityId">An activity ID.</param>
    /// <param name = "_additionalParameters">Additional parameters.</param>
    /// <returns>An instrumentation segment.</returns>
    public static SysInstrumentationSegment construct(str _context, str _activity, int64 _activityId = 0, SysInstrumentationAdditionalParameters _additionalParameters = null)
    {
        return new SysInstrumentationSegment(_context, _activity, int642Str(_activityId), _additionalParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instrumentation channel.
    /// </summary>
    /// <param name = "_instrumentationChannel">An instrumentation channel.</param>
    public void setChannel(SysInstrumentationChannel _instrumentationChannel)
    {
        instrumentationChannel = _instrumentationChannel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalParameterToStopEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the given parameter to the list of parameters that will be emitted with the stop event. 
    /// Initially this list contains the parameters given when constructing the object.
    /// </summary>
    /// <param name = "_parameterName">The name of the parameter.</param>
    /// <param name = "_parameterValue">The value of the parameter.</param>
    public void addAdditionalParameterToStopEvent(str _parameterName, str _parameterValue)
    {
        additionalParameters.add(_parameterName, _parameterValue);
        sf_ActivityContext.addCustomProperty(_parameterName, _parameterValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the monitoring scope.
    /// </summary>
    public void Dispose()
    {
        stopwatch.Stop();

        str status = 'Success';

        if (this.ExecutionFailed())
        {
            status = 'Failure';
        }
        
        this.writeStop(Status);

        sf_ActivityContext.dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts measuring the execution time.
    /// </summary>
    protected void start()
    {
        this.writeStart();

        stopWatch.Start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStart</Name>
				<Source><![CDATA[
    private void writeStart()
    {
        instrumentationChannel.writeStartEvent(context, activity, activityId, executionId, additionalParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStop</Name>
				<Source><![CDATA[
    private void writeStop(str _status)
    {
        instrumentationChannel.writeStopEvent(context, activity, activityId, executionId, additionalParameters, _status, stopWatch.ElapsedMilliseconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ExecutionFailed</Name>
				<Source><![CDATA[
    private boolean ExecutionFailed()
    {
        return System.Runtime.InteropServices.Marshal::GetExceptionCode() != 0 || System.Runtime.InteropServices.Marshal::GetExceptionPointers() != System.IntPtr::Zero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertContextToNamespace</Name>
				<Source><![CDATA[
    private str convertContextToNamespace(str _context)
    {
        switch (_context)
        {
            case classStr(ProdInstrumentationActivities):
                return ProdInstrumentationLogger::instrumentationNamespace;
            case classStr(ReqInstrumentationActivities):
                return ReqInstrumentationLogger::instrumentationNamespace;
            case classStr(KanbanInstrumentationActivities):
                return KanbanInstrumentationLogger::instrumentationNamespace;
        }


        return _context;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>