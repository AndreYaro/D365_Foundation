<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB71_GeneralLedgerApplication</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReleaseUpdateDB71_GeneralLedgerApplication</c> class contains the GeneralLedger upgrade logic to upgrade to AX7.1.
/// </summary>
public class ReleaseUpdateDB71_GeneralLedgerApplication extends ReleaseUpdateDB
{
    private const TableName LedgerInterCompanyTempTableName = 'LEDGERINTERCOMPANYTMP';    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>myVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// The script runs in any system with the source version earlier than AX 7.1.
    /// </summary>
    /// <returns>The script version.</returns>
    public sysReleasedVersion myVersion()
    {
        return sysReleasedVersion::R1Update3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the module name of an upgrade class.
    /// </summary>
    /// <returns>
    ///    The module name.
    /// </returns>
    /// <remarks>
    ///    This method must be implemented by sub classes.The module name is displayed on the cockpit form for
    ///    every script.
    /// </remarks>
    public ReleaseUpdateModule moduleName()
    {
        return "@SYS24097";
    }

]]></Source>
			</Method>
			<Method>
				<Name>preSyncLedgerInterCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the <c>LedgerInterCompany</c> table data to temporary storage to prepare for a table
    /// structure change to the primary index.
    /// </summary>
    [
        UpgradeScriptDescriptionAttribute("@SYS3805"),
        UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
        UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
        UpgradeScriptTable(tableStr(LedgerInterCompany), false, true, false, true),
        UpgradeScriptTransactionAttribute(true)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void preSyncLedgerInterCompany()
    {
        this.createLedgerInterCompanyTemp();

        str clearTable = strFmt('DELETE %1', new DictTable(tableNum(LedgerInterCompany)).name(DbBackend::Sql));;
        this.executeSQL(clearTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerInterCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Migrates the <c>LedgerInterCompany</c> table data from temporary storage created during pre-sync
    /// stage to permanent storage.
    /// </summary>
    [
        UpgradeScriptDescription("@SYS3805"),
        UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
        UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::FinalScript),
        UpgradeScriptTable(tableStr(LedgerInterCompany), true, true, true, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateLedgerInterCompany()
    {
        str transferSQL = strFmt('INSERT INTO %1 (', new DictTable(tableNum(LedgerInterCompany)).name(DbBackend::Sql));
        transferSQL += '	COMPANY, ';
        transferSQL += '	ORIGINATINGCOMPANY, ';
        transferSQL += '	DESTINATIONCOMPANY, ';
        transferSQL += '	ORIGINATINGCREDITLEDGERDIMENSION, ';
        transferSQL += '	ORIGINATINGDEBITLEDGERDIMENSION, ';
        transferSQL += '	DESTINATIONCREDITLEDGERDIMENSION, ';
        transferSQL += '	DESTINATIONDEBITLEDGERDIMENSION, ';
        transferSQL += '	CREDITLEDGERDIMENSION, ';
        transferSQL += '	CUSTCASHDISCPOSTOPTION, ';
        transferSQL += '	CUSTCURRENCYEXCHPOSTOPTION, ';
        transferSQL += '	CUSTPOSTFINEOPTION_BR, ';
        transferSQL += '	CUSTPOSTFININTERESTOPTION_BR, ';
        transferSQL += '	DEBITLEDGERDIMENSION, ';
        transferSQL += '	JOURNALNAME, ';
        transferSQL += '	VENDCASHDISCPOSTOPTION, ';
        transferSQL += '	VENDCURRENCYEXCHPOSTOPTION, ';
        transferSQL += '	VENDPOSTFINEOPTION_BR, ';
        transferSQL += '	VENDPOSTFININTERESTOPTION_BR, ';
        transferSQL += '	RECVERSION, ';
        transferSQL += '	PARTITION, ';
        transferSQL += '	RECID) ';
        transferSQL += 'SELECT T1.COMPANY, ';
        transferSQL += '	T1.ORIGINATINGCOMPANY, ';
        transferSQL += '	T1.DESTINATIONCOMPANY, ';
        transferSQL += '	T1.ORIGINATINGCREDITLEDGERDIMENSION, ';
        transferSQL += '	T1.ORIGINATINGDEBITLEDGERDIMENSION, ';
        transferSQL += '	T1.DESTINATIONCREDITLEDGERDIMENSION, ';
        transferSQL += '	T1.DESTINATIONDEBITLEDGERDIMENSION, ';
        transferSQL += '	T1.CREDITLEDGERDIMENSION, ';
        transferSQL += '	T1.CUSTCASHDISCPOSTOPTION, ';
        transferSQL += '	T1.CUSTCURRENCYEXCHPOSTOPTION, ';
        transferSQL += '	T1.CUSTPOSTFINEOPTION_BR, ';
        transferSQL += '	T1.CUSTPOSTFININTERESTOPTION_BR, ';
        transferSQL += '	T1.DEBITLEDGERDIMENSION, ';
        transferSQL += '	T1.JOURNALNAME, ';
        transferSQL += '	T1.VENDCASHDISCPOSTOPTION, ';
        transferSQL += '	T1.VENDCURRENCYEXCHPOSTOPTION, ';
        transferSQL += '	T1.VENDPOSTFINEOPTION_BR, ';
        transferSQL += '	T1.VENDPOSTFININTERESTOPTION_BR, ';
        transferSQL += '	T1.RECVERSION, ';
        transferSQL += '	T1.PARTITION, ';
        transferSQL += '	T1.RECID ';
        transferSQL += strFmt('FROM %1 T1', LedgerInterCompanyTempTableName);

        this.executeSQL(transferSQL);

        this.executeSQL(strFmt('drop table %1', LedgerInterCompanyTempTableName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerInterCompanyTemp</Name>
				<Source><![CDATA[
    private void createLedgerInterCompanyTemp()
    {
        const str LedgerInterCompanyAlias = 'LEDGERINTERCOMPANYALIAS';        
        const str LedgerInterCompanyJoinAlias = 'LEDGERINTERCOMPANYJOINALIAS';        

        str tableExistsSQL = strFmt('SELECT COUNT(TABLE_NAME) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = \'%1\'', LedgerInterCompanyTempTableName);
        Connection sessionConn = new Connection();
        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(tableExistsSQL).assert();
        ResultSet tableExistsResult = statement.executeQueryWithParameters(tableExistsSQL, SqlParams::create());
        CodeAccessPermission::revertAssert();

        tableExistsResult.next();
        int tableExists = tableExistsResult.getInt(1);

        DictField dictField = new DictField(tableNum(LedgerInterCompany), fieldNum(LedgerInterCompany, JournalName));

        if (tableExists == 0)
        {
            str createTable = strFmt('CREATE TABLE %1 (', LedgerInterCompanyTempTableName);
            createTable += '[COMPANY] [nvarchar](4) NOT NULL,';
            createTable += '[ORIGINATINGCOMPANY] [nvarchar](4) NOT NULL,';
            createTable += '[DESTINATIONCOMPANY] [nvarchar](4) NOT NULL,';
            createTable += '[CREDITLEDGERDIMENSION] [bigint] NOT NULL,';
            createTable += '[ORIGINATINGCREDITLEDGERDIMENSION] [bigint] NOT NULL,';
            createTable += '[DESTINATIONCREDITLEDGERDIMENSION] [bigint] NOT NULL,';
            createTable += '[CUSTCASHDISCPOSTOPTION] [int] NOT NULL,';
            createTable += '[CUSTCURRENCYEXCHPOSTOPTION] [int] NOT NULL,';
            createTable += '[CUSTPOSTFINEOPTION_BR] [int] NOT NULL,';
            createTable += '[CUSTPOSTFININTERESTOPTION_BR] [int] NOT NULL,';
            createTable += '[DEBITLEDGERDIMENSION] [bigint] NOT NULL,';
            createTable += '[ORIGINATINGDEBITLEDGERDIMENSION] [bigint] NOT NULL,';
            createTable += '[DESTINATIONDEBITLEDGERDIMENSION] [bigint] NOT NULL,';
            createTable += '[JOURNALNAME] [nvarchar]('+ int2Str(dictField.stringLen()) +') NOT NULL,';
            createTable += '[VENDCASHDISCPOSTOPTION] [int] NOT NULL,';
            createTable += '[VENDCURRENCYEXCHPOSTOPTION] [int] NOT NULL,';
            createTable += '[VENDPOSTFINEOPTION_BR] [int] NOT NULL,';
            createTable += '[VENDPOSTFININTERESTOPTION_BR] [int] NOT NULL,';
            createTable += '[DATAAREAID] [nvarchar](4) NOT NULL,';
            createTable += '[RECVERSION] [int] NOT NULL,';
            createTable += '[PARTITION] [bigint] NOT NULL,';
            createTable += '[RECID] [bigint] NOT NULL';
            createTable += ')';

            this.executeSQL(createTable);
        }

        // Copy the current data into a temporary table to be referenced post synchronize (dataareaid removed
        // from actual table)
        str transferSQL = strFmt('INSERT INTO %1 (', LedgerInterCompanyTempTableName);
        transferSQL += '	COMPANY,';
        transferSQL += '	ORIGINATINGCOMPANY,';
        transferSQL += '	DESTINATIONCOMPANY,';
        transferSQL += '	CREDITLEDGERDIMENSION,';
        transferSQL += '	ORIGINATINGCREDITLEDGERDIMENSION,';
        transferSQL += '	DESTINATIONCREDITLEDGERDIMENSION,';
        transferSQL += '	CUSTCASHDISCPOSTOPTION,';
        transferSQL += '	CUSTCURRENCYEXCHPOSTOPTION,';
        transferSQL += '	CUSTPOSTFINEOPTION_BR,';
        transferSQL += '	CUSTPOSTFININTERESTOPTION_BR,';
        transferSQL += '	DEBITLEDGERDIMENSION,';
        transferSQL += '	ORIGINATINGDEBITLEDGERDIMENSION,';
        transferSQL += '	DESTINATIONDEBITLEDGERDIMENSION,';
        transferSQL += '	JOURNALNAME,';
        transferSQL += '	VENDCASHDISCPOSTOPTION,';
        transferSQL += '	VENDCURRENCYEXCHPOSTOPTION,';
        transferSQL += '	VENDPOSTFINEOPTION_BR,';
        transferSQL += '	VENDPOSTFININTERESTOPTION_BR,';
        transferSQL += '	DATAAREAID,';
        transferSQL += '	RECVERSION,';
        transferSQL += '	PARTITION,';
        transferSQL += '	RECID)';
        transferSQL += ' SELECT T1.COMPANY,';
        transferSQL += '	T1.DATAAREAID,';
        transferSQL += '	T1.COMPANY,';
        transferSQL += '	T1.CREDITLEDGERDIMENSION,';
        transferSQL += '	T1.CREDITLEDGERDIMENSION,';
        transferSQL += '	0,';
        transferSQL += '	T1.CUSTCASHDISCPOSTOPTION,';
        transferSQL += '	T1.CUSTCURRENCYEXCHPOSTOPTION,';
        transferSQL += '	T1.CUSTPOSTFINEOPTION_BR,';
        transferSQL += '	T1.CUSTPOSTFININTERESTOPTION_BR,';
        transferSQL += '	T1.DEBITLEDGERDIMENSION,';
        transferSQL += '	T1.DEBITLEDGERDIMENSION,';
        transferSQL += '	0,';
        transferSQL += '	T1.JOURNALNAME,';
        transferSQL += '	T1.VENDCASHDISCPOSTOPTION,';
        transferSQL += '	T1.VENDCURRENCYEXCHPOSTOPTION,';
        transferSQL += '	T1.VENDPOSTFINEOPTION_BR,';
        transferSQL += '	T1.VENDPOSTFININTERESTOPTION_BR,';
        transferSQL += '	T1.DATAAREAID,';
        transferSQL += '	T1.RECVERSION,';
        transferSQL += '	T1.PARTITION,';
        transferSQL += '	T1.RECID';
        transferSQL += strFmt(' FROM %1 T1', new DictTable(tableNum(LedgerInterCompany)).name(DbBackend::Sql));

        this.executeSQL(transferSQL);

        // Update the destination account information for the destination company (if the relationship is setup properly,
        // it will exist, but there is no preventive measure for this in the current model).
        transferSQL = strFmt('UPDATE %1 SET ', LedgerInterCompanyAlias);
        transferSQL += 'DESTINATIONCREDITLEDGERDIMENSION = ';
        transferSQL += '(';
        transferSQL += ' CASE';
        transferSQL += strFmt(' WHEN %1.CREDITLEDGERDIMENSION IS NULL THEN 0', LedgerInterCompanyJoinAlias);
        transferSQL += strFmt(' ELSE %1.CREDITLEDGERDIMENSION', LedgerInterCompanyJoinAlias);
        transferSQL += ' END';
        transferSQL += '),';
        transferSQL += 'DESTINATIONDEBITLEDGERDIMENSION = ';
        transferSQL += '(';
        transferSQL += ' CASE';
        transferSQL += strFmt(' WHEN %1.DEBITLEDGERDIMENSION IS NULL THEN 0', LedgerInterCompanyJoinAlias);
        transferSQL += strFmt(' ELSE %1.DEBITLEDGERDIMENSION', LedgerInterCompanyJoinAlias);
        transferSQL += ' END';
        transferSQL += ')';
        transferSQL += strFmt(' FROM %1 %2', LedgerInterCompanyTempTableName, LedgerInterCompanyAlias);
        transferSQL += strFmt(' LEFT OUTER JOIN %1 %2 ON %2.COMPANY = %3.DATAAREAID', LedgerInterCompanyTempTableName, LedgerInterCompanyJoinAlias, LedgerInterCompanyAlias);
        transferSQL += strFmt(' AND %1.DATAAREAID = %2.COMPANY', LedgerInterCompanyJoinAlias, LedgerInterCompanyAlias);

        this.executeSQL(transferSQL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournalLineErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes ledger journal line error records where the journal line has been deleted, or where the journal
    /// has been corrected and subsequently posted.
    /// </summary>
    [UpgradeScriptDescription("@SYS28500"),
     UpgradeScriptStage(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptType(ReleaseUpdateScriptType::StandardScript),
     UpgradeScriptTable(tableStr(LedgerJournalTrans_Error), false, false, false, true),
     UpgradeScriptTable(tableStr(LedgerJournalTrans), false, true, false, false),
     UpgradeScriptTable(tableStr(LedgerJournalTable), false, true, false, false), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteJournalLineErrors()
    {
        LedgerJournalTrans journalTrans;
        LedgerJournalTable journalTable;
        LedgerJournalTrans_Error errors;

        // Delete journal line errors where the journal line has been deleted
        delete_from errors
            notexists join journalTrans
                where journalTrans.RecId == errors.LedgerJournalTrans;

        // Delete journal line errors where the journal has been successfully posted
        delete_from errors
            exists join journalTrans
                where journalTrans.RecId == errors.LedgerJournalTrans
            exists join journalTable
                where journalTable.JournalNum == journalTrans.JournalNum
                    && journalTable.Posted == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQL</Name>
				<Source><![CDATA[
    private void executeSQL(str _sqlStatement, boolean _isUserConnection = false)
    {
        Connection sessionConn = _isUserConnection ? new UserConnection() : new Connection();

        try
        {
            Statement statement = sessionConn.createStatement();

            new SqlStatementExecutePermission(_sqlStatement).assert();
            statement.executeUpdateWithParameters(_sqlStatement, SqlParams::create());
            CodeAccessPermission::revertAssert();
        }
        finally
        {
            sessionConn.finalize();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>