<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCopyFrom</Name>
	<SourceCode>
		<Declaration><![CDATA[
/*

In 2.5 BOMCopy
*/
abstract public class BomCopyFrom
{
    BOMCopyTo     copyTo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
        abstract BOMId bomId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
        abstract void copy()
    {
    #if.never
        ttsbegin;

        // Copy

        ttscommit;
    #endif
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        /*
    Method to delete the 'to' buffer
    */
    void delete(BOMRouteCopyJob copyJob)
    {
        copyTo.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToBom</Name>
				<Source><![CDATA[
        abstract void initToBom(
        BOM         _toBom,
        InventDim   _inventDim)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToProdBom</Name>
				<Source><![CDATA[
        abstract void initToProdBom(ProdBOM toProdBom, boolean copyRef = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMUpdated</Name>
				<Source><![CDATA[
        boolean isBOMUpdated()
    {
        return copyTo.isBOMUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new(BOMCopyTo _copyTo)
    {
        copyTo  = _copyTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static BOMCopyFrom construct(
        BOMCopyTo         bomCopyTo,
        BOMSearchBase     bomSearch
        )
    {
        classId classId = classidget(bomSearch);

        switch (true)
        {
            case SysDictClass::isEqualOrSuperclass(classId,classnum(BOMSearch)):
                return new BOMCopyFromBOM(bomCopyTo,bomSearch);
            case SysDictClass::isEqualOrSuperclass(classId,classnum(ProdBOMSearch)):
                return new BOMCopyFromProd(bomCopyTo,bomSearch);

    #if.never
            case sysDictClass::isEqualOrSuperclass(classId,classnum(myBomSearch)):
                return new bomCopyFromMyBom(bomCopyTo,bomsearch);

    #endif
        }
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>