<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximDBKUpd_RealizeDrawback_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim DBK update realize drawback class.
/// </summary>
class EximDBKUpd_RealizeDrawback_IN extends EximDBKUpdate_IN
{
    Map custTransCollection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
        private QueryRun buildQueryRun()
    {
        Query                query;
        QueryBuildDataSource dataSource;

        query = new Query();

        dataSource = query.addDataSource(tablenum(EximDBKSchemesLine_IN));

        dataSource.addRange(fieldnum(EximDBKSchemesLine_IN, SchemesTableRecId)).value(queryValue(dbkSchemesTable.RecId));
        dataSource.addRange(fieldnum(EximDBKSchemesLine_IN, Status)).value(queryValue(EximDBKTransStatus_IN::Applied));
        dataSource.addRange(fieldnum(EximDBKSchemesLine_IN, MarkSelect)).value(queryValue(NoYes::Yes));

        return (new QueryRun(query));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustTransMap</Name>
				<Source><![CDATA[
        private void insertCustTransMap()
    {
        EximDBKSchemesLine_IN dbkSchemesLineLocal;
        EximDBKTrans_IN       dbkTrans;
        CustTrans             custTrans;

        custTransCollection = new Map(Types::String, Types::String);

        while select Voucher, SchemesTableRecId, Status
                from dbkTrans
                where dbkTrans.SchemesTableRecId == dbkSchemesTable.RecId
                   && dbkTrans.Status            == EximDBKStatus_IN::Drawback
            join Voucher, AmountMST, RecId
                from custTrans
                where custTrans.Voucher == dbkTrans.Voucher
        {
            while select SchemesTableRecId, RecId
                from dbkSchemesLineLocal
                    where dbkSchemesLineLocal.SchemesTableRecId == dbkTrans.SchemesTableRecId
                       && dbkSchemesLineLocal.AllowedDrawback   == custTrans.AmountMST
            {
                if (!custTransCollection.exists(dbkSchemesLineLocal.RecId))
                {
                    custTransCollection.insert(dbkSchemesLineLocal.RecId, custTrans.RecId);
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDBKTrans</Name>
				<Source><![CDATA[
        private void insertDBKTrans()
    {
        EximDBKTrans_IN newDBKTrans;

        newDBKTrans.Status            = EximDBKStatus_IN::Payment;
        newDBKTrans.Voucher           = voucher;
        newDBKTrans.TransDate         = DateTimeUtil::date(transDateTime);
        newDBKTrans.Amount            = -totalDrawbackAllowed;
        newDBKTrans.SchemesTableRecId = dbkSchemesTable.RecId;
        newDBKTrans.DrawbackLetterNum = dbkSchemesTable.DrawbackLetterNum;
        newDBKTrans.Text              = dbkSchemesTable.Text;

        newDBKTrans.insert();

        EximDBKSchemesLine_IN::updateTransStatus(dbkSchemesTable.RecId);
        EximDBKSchemesTable_IN::updateTransHeaderStatus(dbkSchemesTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The run method of the instance.
    /// </summary>
    protected void run()
    {
        #OCCRetryCount

        try
        {
            EximDBKUpd_RealizeDrawback_IN::runOnServer(portId,
                                                       productGroup,
                                                       fromDateTime,
                                                       toDateTime,
                                                       transDateTime,
                                                       detailSummary,
                                                       dbkSchemesTable);

            info("@GLS62028");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
            }
            else
            {
            throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>EximDBKUpd_RealizeDrawback_IN</c> class.
    /// </summary>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    protected boolean validate()
    {
        boolean      ret;
        EximPorts_IN eximPorts = EximPorts_IN::findByPortId(portId);

        ret = super();

        if (!dbkSchemesTable.BankAccount
            && !eximPorts.dbkBankAccount)
        {
            ret = checkFailed(strfmt("@GLS61988", eximPorts.PortId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates record in journal lines.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void writeJournalLine()
    {
        LedgerJournalTrans ledgerJournalTransUpd;
        CustTransOpen      custTransOpen;
        CustTrans          custTrans;
        SpecTransManager   specTransManager;
        BankAccountID      bankAccount;
        LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtensionIN;

        ledgerJournalTrans.AmountCurCredit   = dbkSchemesLine.AmountToSettle;
        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;

        bankAccount = dbkSchemesTable.BankAccount ? dbkSchemesTable.BankAccount : EximPorts_IN::findByPortId(portId).dbkBankAccount;

        ledgerJournalTrans.parmOffsetAccount(bankAccount, LedgerJournalACType::Bank);
        ledgerJournalTrans.OffsetDefaultDimension   = dbkSchemesLine.OffsetDefaultDimension;

        if (ledgerJournalTrans.validateWrite())
        {
            ledgerJournalTrans.insert();
        }
        if (ledgerJournalTrans.RecId)
        {
            ledgerJournalTransTaxExtensionIN.LedgerJournalTrans = ledgerJournalTrans.RecId;
            ledgerJournalTransTaxExtensionIN.insert();
        }

        if (!custTransCollection.empty())
        {
            select firstonly RecId, CurrencyCode
                from custTrans
                where custTrans.RecId == custTransCollection.lookup(dbkSchemesLine.RecId)
            join RecId, DataAreaId, TableId
                from custTransOpen
                where custTransOpen.RefRecId == custTrans.RecId;
        }

        if (custTransOpen)
        {
            specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);
            specTransManager.insert(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId, dbkSchemesLine.AmountToSettle, custTrans.CurrencyCode);

            ledgerJournalTransUpd = LedgerJournalTrans::findRecId(ledgerJournalTrans.RecId, true);

            ledgerJournalTransUpd.CustTransId   = custTrans.RecId;
            ledgerJournalTransUpd.SettleVoucher = SettlementType::SelectedTransact;

            ledgerJournalTransUpd.update();
        }

        totalDrawbackAllowed += dbkSchemesLine.AmountToSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on the server side.
    /// </summary>
    /// <param name="_portId">
    /// The port id.
    /// </param>
    /// <param name="_productGroup">
    /// The product group.
    /// </param>
    /// <param name="_fromDateTime">
    /// The from date time.
    /// </param>
    /// <param name="_toDateTime">
    /// The to date time.
    /// </param>
    /// <param name="_transDateTime">
    /// The transaction date time.
    /// </param>
    /// <param name="_detailSummary">
    /// The detail summary.
    /// </param>
    /// <param name="_dbkSchemesTable">
    /// The DBK schemes table.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runOnServer(
        EximPortId_IN           _portId,
        EximProductGroup_IN     _productGroup,
        FromDateTime            _fromDateTime,
        ToDateTime              _toDateTime,
        TransDateTime           _transDateTime,
        DetailSummary           _detailSummary,
        EximDBKSchemesTable_IN  _dbkSchemesTable)
    {
        EximDBKUpd_RealizeDrawback_IN  dbkRealizeDrawback;
        EximDBKSchemesLine_IN          dbkSchemesLine;
        QueryRun                       queryRun;

        dbkRealizeDrawback = new EximDBKUpd_RealizeDrawback_IN();

        dbkRealizeDrawback.parmPortId(_portId);
        dbkRealizeDrawback.parmProductGroup(_productGroup);
        dbkRealizeDrawback.parmFromDateTime(_fromDateTime);
        dbkRealizeDrawback.parmToDateTime(_toDateTime);
        dbkRealizeDrawback.parmTransDateTime(_transDateTime);
        dbkRealizeDrawback.parmDetailSummary(_detailSummary);
        dbkRealizeDrawback.parmDBKSchemesTable(_dbkSchemesTable);

        if (dbkRealizeDrawback.validate())
        {
            ttsbegin;

            dbkRealizeDrawback.ledgerVoucherTransCreate();

            dbkRealizeDrawback.insertCustTransMap();

            dbkRealizeDrawback.createJournal();

            queryRun = dbkRealizeDrawback.buildQueryRun();

            while (queryRun.next())
            {
                queryRun.changed(tablenum(EximDBKSchemesLine_IN));
                dbkSchemesLine = queryRun.get(tablenum(EximDBKSchemesLine_IN));
                dbkRealizeDrawback.parmDBKSchemesLine(dbkSchemesLine);

                if (dbkSchemesLine.AmountToSettle)
                {
                    dbkRealizeDrawback.initJournalLine();
                    dbkRealizeDrawback.writeJournalLine();
                }
            }

            dbkRealizeDrawback.insertDBKTrans();

            dbkRealizeDrawback.ledgerVoucherTransEnd();

            EximDBKSchemesTable_IN::updateTransHeaderStatus(dbkRealizeDrawback.parmDBKSchemesTable().RecId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>