<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBrokerClaimCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRBrokerClaimCreate</c> class handles the logic for creating a broker claim.
/// </summary>
class MCRBrokerClaimCreate
{
    TMPFrmVirtual           markedRecs;
    Boolean                 closing;
    SalesID                 salesID;
    MCRLedgerJournal        mcrLedgerJournal_Expense,
                            mcrLedgerJournal_Differential;
    MCRBrokerWriteOffReason mcrBrokerWriteOffReason;
    MCRBrokerVendInvoice    brokerVendInvoice;
    InvoiceDate             invoiceDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createClaim_Approval</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates rebate claims approval.
    /// </summary>
    /// <param name="_mcrBrokerAccrualRecID">
    ///     The RecID used to identify the broker accrual to be processed.
    /// </param>
    /// <param name="_approvalAmt">
    ///     The ammount of accrual that is to be approved.
    /// </param>
    protected void createClaim_Approval(RecID     _mcrBrokerAccrualRecID,
                                        AmountMST _approvalAmt)
    {
        MCRBrokerAccrual    mcrBrokerAccrual;
        MCRBrokerClaim      mcrBrokerClaim_Extra,
                            mcrBrokerClaim_Approval;
        boolean             processClaim = true;
        AmountCur           claimAmt = _approvalAmt;
        AmountCur           extraCredit = 0;
        LedgerJournalTrans  ledgerJournalTrans;

        mcrBrokerAccrual = MCRBrokerAccrual::findByRecID(_mcrBrokerAccrualRecID, true);

        // Set to absolute values to take returns into account
        extraCredit = - MCRBrokerClaimCreate::getOverApprovalAmount(mcrBrokerAccrual, _approvalAmt);

        // Prompt for reason if approving more than qualified
        if (extraCredit < 0)
        {
            if (mcrBrokerWriteOffReason)
            {
                mcrBrokerClaim_Extra.WriteOffCode    = mcrBrokerWriteOffReason.ReasonCode;
                mcrBrokerClaim_Extra.WriteOffLedgerDimension = mcrBrokerWriteOffReason.WriteOffLedgerDimension;
            }
            else
            {
                // If the user canceled when selecting a reason code, don't close anything
                processClaim = false;
            }
        }

        if (processClaim)
        {
            if (extraCredit < 0)
            {
                mcrBrokerClaim_Extra.BrokerAccrualRecID = _mcrBrokerAccrualRecID;
                // If dealing with a return, flip extraCredit to a positive number
                // So the ledgerJournalTrans creates it with the correct sign
                if (MCRBrokerAccrual.QualifiedAmt < 0)
                {
                    extraCredit = abs(extraCredit);
                }
                mcrBrokerClaim_Extra.AmountMST          = extraCredit;
                if (!mcrBrokerAccrual.MCDebitLedgerDimension)
                {
                    ledgerJournalTrans                      = this.createTrans_Differential(mcrBrokerAccrual, mcrBrokerClaim_Extra); // Extra Credit should be handled via a differential
                    mcrBrokerClaim_Extra.LJTransClaimRecID  = ledgerJournalTrans.RecId;
                }
                mcrBrokerClaim_Extra.insert();
            }

            mcrBrokerClaim_Approval.AmountMST            = _approvalAmt;
            mcrBrokerClaim_Approval.BrokerAccrualRecID   = _mcrBrokerAccrualRecID;
            mcrBrokerClaim_Approval.insert();

            brokerVendInvoice.createVendorInvoice(mcrBrokerClaim_Approval);

            // If this is populated it means this was a Ledger to Ledger misc charge, so we must move
            //      the money to the expense account for the same amount
            if (mcrBrokerAccrual.MCDebitLedgerDimension)
            {
                this.createTrans_Expense(mcrBrokerAccrual, mcrBrokerClaim_Approval); // Normal expense via expense journal

                if (mcrBrokerClaim_Extra)
                {
                    this.createTrans_Expense(mcrBrokerAccrual, mcrBrokerClaim_Extra); // Extra credit via expense journal
                }
            }

            mcrBrokerAccrual.ApprovedAmt += _approvalAmt;
            if (mcrBrokerAccrual.validateWrite())
            {
                mcrBrokerAccrual.update();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createClaim_Closure</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates rebate claims.
    /// </summary>
    /// <param name="_mcrBrokerAccrualRecID">
    ///     The RecID used to identify the broker accrual to be processed.
    /// </param>
    protected void createClaim_Closure(RecID _mcrBrokerAccrualRecID)
    {
        mcrBrokerAccrual    mcrBrokerAccrual;
        mcrBrokerClaim      mcrBrokerClaim;
        boolean             processClaim = true;
        AmountCur           difference = 0;
        LedgerJournalTrans  ledgerJournalTrans;

        mcrBrokerAccrual = MCRBrokerAccrual::findByRecID(_mcrBrokerAccrualRecID, true);

        difference = abs(mcrBrokerAccrual.QualifiedAmt) - abs(mcrBrokerAccrual.ApprovedAmt);

        // Prompt for reason if we're closing out an un-approved amount or approving more than qualified
        if (difference > 0)
        {
            if (mcrBrokerWriteOffReason)
            {
                mcrBrokerClaim.WriteOffCode = mcrBrokerWriteOffReason.ReasonCode;
                mcrBrokerClaim.WriteOffLedgerDimension = mcrBrokerWriteOffReason.WriteOffLedgerDimension;
            }
            else
            {
                // If the user canceled when selecting a reason code, don't process/close this accrual
                processClaim = false;
            }
        }
        else
        {
            processClaim = false;
        }

        if (processClaim)
        {
            if (mcrBrokerAccrual.QualifiedAmt < 0)
            {
                difference = -abs(difference);
            }
            else
            {
                difference = abs(difference);
            }

            mcrBrokerClaim.AmountMST            = difference;
            mcrBrokerClaim.BrokerAccrualRecID   = _mcrBrokerAccrualRecID;
            // If this is populated it means this was a Ledger to Ledger misc charge, so we must move
            //      the money to the expense account for the same amount
            if (mcrBrokerAccrual.MCDebitLedgerDimension)
            {
                ledgerJournalTrans = this.createTrans_Expense(mcrBrokerAccrual, mcrBrokerClaim); // Ledger to Ledger charge closing only needs an expense journal
            }
            else
            {
                ledgerJournalTrans = this.createTrans_Differential(mcrBrokerAccrual, mcrBrokerClaim); //  Customer to Ledger charge closing only needs a differential
                mcrBrokerClaim.LJTransClaimRecID    = ledgerJournalTrans.RecId;
            }

            mcrBrokerClaim.insert();
        }

        mcrBrokerAccrual.Status = MCROpenClosed::Closed;
        if (mcrBrokerAccrual.validateWrite())
        {
            mcrBrokerAccrual.update();
        }
        else
        {
            throw error("@SYS104318");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans_Differential</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a ledgerJournalTrans record based off the passed records.
    /// </summary>
    /// <param name="_mcrBrokerAccrual">
    ///     The broker accrual for which the differential transaction is being created.
    /// </param>
    /// <param name="_mcrBrokerClaim">
    ///     The broker claim for which the differential transaction is being created.
    /// </param>
    /// <returns>
    ///     The ledger journal containing the new differential transaction.
    /// </returns>
    private LedgerJournalTrans createTrans_Differential(MCRBrokerAccrual    _mcrBrokerAccrual,
                                                        MCRBrokerClaim      _mcrBrokerClaim)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        CurrencyCode        companyCurrency = CompanyInfoHelper::standardCurrency();
        AmountCur           creditAmt = 0;
        AmountCur           debitAmt = 0;

        if (_mcrBrokerClaim.AmountMST != 0)
        {
            // Now that we need a ledger journal table record to post the differential, create one
            if (!mcrLedgerJournal_Differential)
            {
                mcrLedgerJournal_Differential = MCRLedgerJournal::construct(LedgerJournalType::Daily, VendParameters::find().MCRBrokerDifferentialJournal);
                mcrLedgerJournal_Differential.createLedgerJournalTable();
            }

            if (mcrLedgerJournal_Differential)
            {
                mcrLedgerJournal_Differential.parmLedgerAccount(MCRAssistantLedgerDimension::mergeAccountAndDimension(
                    LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_mcrBrokerClaim.WriteOffLedgerDimension), _mcrBrokerAccrual.DefaultDimension));

                if (_mcrBrokerClaim.AmountMST < 0)
                {
                    debitAmt  = Currency::MCRRoundedOffTotalAmount(abs(_mcrBrokerClaim.AmountMST), companyCurrency);
                }
                else
                {
                    creditAmt = Currency::MCRRoundedOffTotalAmount(_mcrBrokerClaim.AmountMST, companyCurrency);
                }
                mcrLedgerJournal_Differential.parmCurrencyCode(companyCurrency);
                mcrLedgerJournal_Differential.parmDefaultDimension(_mcrBrokerAccrual.DefaultDimension);
                mcrLedgerJournal_Differential.parmledgerOffsetAccount(MCRAssistantLedgerDimension::mergeAccountAndDimension(
                    LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_mcrBrokerAccrual.MCCreditLedgerDimension), _mcrBrokerAccrual.DefaultDimension));
                mcrLedgerJournal_Differential.parmLedgerOffsetAccountType(LedgerJournalACType::Ledger);
                mcrLedgerJournal_Differential.parmApproved(NoYes::Yes);

                mcrLedgerJournal_Differential.parmTransTxt("@MCR34781"                   // Broker
                                                            + "@SYS77038"                     // -
                                                            + _mcrBrokerAccrual.SalesId       // SalesID
                                                            + "@SYS77038"                     // -
                                                            + "@MCR34365"                     // Differential
                                                            + "@SYS77038"                     // -
                                                            + _mcrBrokerClaim.WriteOffCode); // Reason code

                mcrLedgerJournal_Differential.parmExchRate(ExchangeRateHelper::getExchangeRate1_Static(
                                                                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                        companyCurrency,
                                                                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));

                ledgerJournalTrans = mcrLedgerJournal_Differential.createLedgerJournalTrans(creditAmt, debitAmt);
            }
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans_Expense</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a ledgerJournalTrans record based off the passed records.
    /// </summary>
    /// <param name="_mcrBrokerAccrual">
    ///     The broker accrual for which the expense transaction is being created.
    /// </param>
    /// <param name="_mcrBrokerClaim">
    ///     The broker claim for which the expense transaction is being created.
    /// </param>
    /// <returns>
    ///     The ledger journal containing the new expense transaction.
    /// </returns>
    private LedgerJournalTrans createTrans_Expense(MCRBrokerAccrual _mcrBrokerAccrual, MCRBrokerClaim _mcrBrokerClaim)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        CurrencyCode        companyCurrency = CompanyInfoHelper::standardCurrency();
        AmountCur           creditAmt = 0;
        AmountCur           debitAmt = 0;

        if (_mcrBrokerClaim.AmountMST != 0)
        {
            // Now that we need a ledger journal table record to post to the expense account, create one
            if (!mcrLedgerJournal_Expense)
            {
                mcrLedgerJournal_Expense = MCRLedgerJournal::construct(LedgerJournalType::Daily, VendParameters::find().MCRBrokerExpenseJournal);
                mcrLedgerJournal_Expense.createLedgerJournalTable();
            }
            if (mcrLedgerJournal_Expense)
            {
                mcrLedgerJournal_Expense.parmLedgerAccount(MCRAssistantLedgerDimension::mergeAccountAndDimension(
                    LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_mcrBrokerAccrual.MCDebitLedgerDimension),
                                                                          _mcrBrokerAccrual.DefaultDimension));

                mcrLedgerJournal_Expense.parmledgerOffsetAccount(MCRAssistantLedgerDimension::mergeAccountAndDimension(
                    LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_mcrBrokerAccrual.MCCreditLedgerDimension),
                                                                          _mcrBrokerAccrual.AccrualDefaultDimension));
                mcrLedgerJournal_Expense.parmLedgerOffsetAccountType(LedgerJournalACType::Ledger);
                mcrLedgerJournal_Expense.parmCurrencyCode(companyCurrency);
                mcrLedgerJournal_Expense.parmDefaultDimension(_mcrBrokerAccrual.AccrualDefaultDimension);
                mcrLedgerJournal_Expense.parmApproved(NoYes::Yes);
                mcrLedgerJournal_Expense.parmTransTxt("@MCR34781"                // Broker
                                                        + "@SYS77038"                 // -
                                                        + _mcrBrokerAccrual.SalesId   // SalesID
                                                        + "@SYS77038"                 // -
                                                        + "@SYS78349"                 // Expense
                                                        + "@SYS77038"                 // -
                                                        + LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension)); // Expense account or reason code account

                mcrLedgerJournal_Expense.parmExchRate(ExchangeRateHelper::getExchangeRate1_Static(
                                                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                        companyCurrency,
                                                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));

                // If this is an extra approval, the amount will be negative.
                // So the Misc. charge debit account needs to be debited, rather than credited
                if (_mcrBrokerClaim.AmountMST < 0)
                {
                    debitAmt  = Currency::MCRRoundedOffTotalAmount(abs(_mcrBrokerClaim.AmountMST), companyCurrency);
                }
                else
                {
                    creditAmt = Currency::MCRRoundedOffTotalAmount(_mcrBrokerClaim.AmountMST, companyCurrency);
                }

                ledgerJournalTrans = mcrLedgerJournal_Expense.createLedgerJournalTrans(creditAmt, debitAmt);
            }
        }
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeVendorInvoice</Name>
				<Source><![CDATA[
    protected void finalizeVendorInvoice()
    {
        if (brokerVendInvoice)
        {
            try
            {
                brokerVendInvoice.finalizeVendorInvoice(!VendParameters::find().MCRBrokerManualJourPost);

                info(strfmt("@GLS222667", brokerVendInvoice.parmInvoiceId()));
            }
            catch
            {
                error(strFmt("@SYP4881978", brokerVendInvoice.parmInvoiceId()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProcessClaim</Name>
				<Source><![CDATA[
    private boolean shouldProcessClaim()
    {
        AmountCur                       summedAmt;
        AmountCur                       diffOrExtra = 0;
        MCRBrokerAccrual                mcrBrokerAccrual;
        AmountCur                       approvalAmt;
        boolean                         processClaim = false;

        while select markedRecs
        {
            mcrBrokerAccrual = MCRBrokerAccrual::findByRecID(markedRecs.RecordNo);

            if (closing)
            {
                // Set to absolute values to take returns into account
                diffOrExtra = abs(mcrBrokerAccrual.QualifiedAmt) - abs(mcrBrokerAccrual.ApprovedAmt);
                if (diffOrExtra > 0)
                {
                    summedAmt += diffOrExtra;
                }
            }
            else
            {
                approvalAmt = markedRecs._Real2;
                // Set to absolute values to take returns into account
                diffOrExtra = - MCRBrokerClaimCreate::getOverApprovalAmount(mcrBrokerAccrual, approvalAmt);

                summedAmt += diffOrExtra;
            }
        }

        if (this.isOverOrUnderPay(SummedAmt) || this.isClaimOpenWithInvoiceDateRequired())
        {
            MCRBrokerClaimProcessingArgs brokerArgs = this.promptReasonCodeAndInvoiceDateDialog(summedAmt);

            if (brokerArgs)
            {
                processClaim = true;
                mcrBrokerWriteOffReason = MCRBrokerWriteOffReason::find(brokerArgs.parmWriteOffReasonCode());
                invoiceDate = brokerArgs.parmInvoiceDate();
            }
        }
        else
        {
            processClaim = true;
        }

        return processClaim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverOrUnderPay</Name>
				<Source><![CDATA[
    private boolean isOverOrUnderPay(AmountCur _amount)
    {
        return _amount != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClaimOpenWithInvoiceDateRequired</Name>
				<Source><![CDATA[
    private boolean isClaimOpenWithInvoiceDateRequired()
    {
        return !closing && this.isVendorInvoiceDateMandatory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorInvoiceDateMandatory</Name>
				<Source><![CDATA[
    private boolean isVendorInvoiceDateMandatory()
    {
        return VendParameters::find().VendInvoiceDocDate != VendInvoiceDocDate::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailises new instance of <c>MCRBrokerClaimCreate</c>.
    /// </summary>
    /// <param name="_markedRecords">
    /// The grid lines that have been marked to be claimed.
    /// </param>
    /// <param name="_salesID">
    /// The sales order associated with the broker claim.
    /// </param>
    /// <param name="_closing">
    /// Flag to indicate if the claim is being closed.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Throws error if nothing marked or no user associated with the claim.
    /// </exception>
    public void new(tmpFrmVirtual _markedRecords, SalesID _salesID = '', boolean _closing = false)
    {
        markedRecs.setTmpData(_markedRecords);
        closing = _closing;
        salesID = _salesID;

        select firstonly markedRecs;

        if (!markedRecs)
        {
            throw error("@MCR34430");
        }

        if (!HcmWorkerLookup::currentWorker())
        {
            throw error(strFmt( "@MCR37167", curUserId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournals</Name>
				<Source><![CDATA[
    private void postJournals()
    {
        LedgerJournalTable  ledgerJournalTable;

        if (MCRLedgerJournal_Expense)
        {
            try
            {
                ledgerJournalTable = MCRLedgerJournal_Expense.parmLedgerJournalTable();
                MCRLedgerJournal_Expense.post();
                info(strfmt("@MCR34358","@SYS78349", ledgerJournalTable.JournalNum),'',SysInfoAction_TableField::newBuffer(ledgerJournalTable));
            }
            catch
            {
                error(strFmt("@MCR36540",MCRLedgerJournal_Expense.parmLedgerJournalTable().JournalNum));
            }
        }

        if (MCRLedgerJournal_Differential)
        {
            try
            {
                ledgerJournalTable = MCRLedgerJournal_Differential.parmLedgerJournalTable();
                MCRLedgerJournal_Differential.post();
                info(strfmt("@MCR34358","@MCR34365", ledgerJournalTable.JournalNum),'',SysInfoAction_TableField::newBuffer(ledgerJournalTable));
            }
            catch
            {
                error(strFmt("@MCR36540",MCRLedgerJournal_Differential.parmLedgerJournalTable().JournalNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptReasonCodeAndInvoiceDateDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prompts the user for a reason for amount difference and allows the user to enter invoice document date.
    /// </summary>
    /// <param name="_diffOrExtra">
    ///     The amount justified by the reason code.
    /// </param>
    /// <returns>
    ///     The <c>MCRBrokerClaimProcessingArgs</c> contains the reason for the difference and invoice doucment date for the apprving process.
    /// </returns>
    private MCRBrokerClaimProcessingArgs promptReasonCodeAndInvoiceDateDialog(AmountCur _diffOrExtra)
    {
        Args args = new args();
        
        args.parm(num2str(_diffOrExtra, -1, -1, -1, 0));
        args.parmEnumType(enumNum(NoYes));
        args.parmEnum(closing);
        
        return MCRBrokerDocuDateAndReasonCodeDialog::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private boolean run()
    {
        boolean     processClaim = false;
        String30    currentBrokerId;
        MCRBrokerContractID currentBrokerContractId;
        NoYes       firstApprovalRecord = NoYes::Yes;

        select firstonly markedRecs;

        if (markedRecs)
        {
            processClaim = this.shouldProcessClaim();

            if (processClaim)
            {
                ttsBegin;

                while select markedRecs order by _MCRString1, _MCRString2
                    where (!salesID || markedRecs.SalesId == salesID)
                {
                    if (closing)
                    {
                        this.createClaim_Closure(markedRecs.RecordNo);
                    }
                    // Cannot approve 0 amounts
                    else if (markedRecs._Real2 != 0)
                    {
                        if (firstApprovalRecord)
                        {
                            firstApprovalRecord = NoYes::No;
                        }
                        else
                        {
                            if (MCRBrokerClaimCreate::hasGroupChanged(currentBrokerId, markedRecs,currentBrokerContractId))
                            {
                                // Post the last Invoice
                                this.finalizeVendorInvoice();
                                // create new instance
                                brokerVendInvoice    = null;
                            }
                        }

                        if (!brokerVendInvoice)
                        {
                            // CustomInvoiceId And CustomInvoiceDate are only filled in when Manual Invoice Identification is enabled.
                            // In that case, multiple vendor invoices cannot be posted at a time with the same custom invoice identification.
                            // This is prevented by a check.
                            brokerVendInvoice = MCRBrokerVendInvoice::newInvoiceDocumentFromParams(this.createMCRBrokerVendInvoiceParameters(markedRecs._MCRString1));
                        }

                        this.createClaim_Approval(markedRecs.RecordNo, markedRecs._Real2);
                        currentBrokerId      = markedRecs._MCRString1;
                        currentBrokerContractId = markedRecs._MCRString2;
                    }
                }

                // for the last group
                this.finalizeVendorInvoice();

                this.postJournals();

                ttsCommit;
            }
        }
        else
        {
            throw error("@MCR34430");
        }

        return processClaim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMCRBrokerVendInvoiceParameters</Name>
				<Source><![CDATA[
    private MCRBrokerVendInvoiceParameters createMCRBrokerVendInvoiceParameters(MCRBrokerVendAccount _brokerAccount)
    {
        MCRBrokerVendInvoiceParameters mcrBrokerVendInvoiceParameters = MCRBrokerVendInvoiceParameters::construct();
        mcrBrokerVendInvoiceParameters.parmMCRBrokerVendAccount(_brokerAccount);
        mcrBrokerVendInvoiceParameters.parmInvoiceDate(invoiceDate);
        return mcrBrokerVendInvoiceParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    private static LedgerJournalTable createLedgerJournalTable(LedgerJournalNameId _journalName)
    {
        LedgerJournalTable ledgerJournalTable;

        ledgerJournalTable.initFromLedgerJournalName(_journalName);

        if (ledgerJournalTable.validateWrite())
        {
            ledgerJournalTable.insert();
        }
        else
        {
            throw error("@SYS104318");
        }

        if (ledgerJournalTable.JournalName == "")
        {
            throw error("@MCR34431");
        }

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverApprovalAmount</Name>
				<Source><![CDATA[
    private static AmountCur getOverApprovalAmount(MCRBrokerAccrual _mcrBrokerAccrual, AmountCur _approvalAmt)
    {
        AmountCur overApprovalAmount;
        AmountCur totalOverPay;

        AmountCur overPaidBefore()
        {
            AmountCur overPaidBefore;

            overPaidBefore = abs(_mcrBrokerAccrual.ApprovedAmt) - abs(_mcrBrokerAccrual.QualifiedAmt);

            if (overPaidBefore <= 0)
            {
                overPaidBefore = 0;
            }

            return overPaidBefore;
        }

        // Set to absolute values to take returns into account
        totalOverPay = abs(_mcrBrokerAccrual.ApprovedAmt) + abs(_approvalAmt) - abs(_mcrBrokerAccrual.QualifiedAmt);

        // if true then overpay scenario
        if (totalOverPay > 0)
        {
            overApprovalAmount = totalOverPay - overPaidBefore();
        }

        return overApprovalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasGroupChanged</Name>
				<Source><![CDATA[
    private static boolean hasGroupChanged(String30        _currentBrokerId,
                                           TmpFrmVirtual   _markedRec,
                                           MCRBrokerContractID _currentBrokerContractId)
    {        
        if (_markedRec._MCRString1 != _currentBrokerId || MCRBrokerAccrual::findByRecID(_markedRec.RecordNo).BrokerContractID != _currentBrokerContractId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the creation of broker claims.
    /// </summary>
    /// <param name="_markedRecords">
    /// The claim lines that have been marked to be processed.
    /// </param>
    /// <param name="_salesID">
    /// The sales order associated with the broker claim.
    /// </param>
    /// <param name="_closing">
    /// Flag to indicate if the claim is being closed.
    /// </param>
    /// <returns>
    /// true if the claim is processed; otherwise, false.
    /// </returns>
    public static boolean main(tmpFrmVirtual _markedRecords, SalesID _salesID = '', boolean _closing = false)
    {
        boolean retVal = false;
        MCRBrokerClaimCreate mcrBrokerClaimCreate = new MCRBrokerClaimCreate(_markedRecords, _salesID, _closing);

        try
        {
            if (mcrBrokerClaimCreate)
            {
                if (!_closing)
                {
                    select firstonly RecId from _markedRecords 
                        where _markedRecords._Real2 == 0 
                        && (!_salesID || _markedRecords.SalesId == _salesID);
                    if (_markedRecords)
                    {
                        warning("@MCR34816");
                    }
                }
                retVal = mcrBrokerClaimCreate.run();
            }
        }
        catch
        {
            retVal = false;
        }

        return retVal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>