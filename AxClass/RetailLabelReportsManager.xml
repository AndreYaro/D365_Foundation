<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLabelReportsManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailLabelReportsManager</c> class is for managing label report printing.
/// </summary>
class RetailLabelReportsManager
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addItemToReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds item to label report.
    /// </summary>
    /// <param name="_rboStoreTable">
    /// Store table.
    /// </param>
    /// <param name="_terminalId">
    /// Store terminal Id.
    /// </param>
    /// <param name="_validOnDate">
    /// Valid on date.
    /// </param>
    /// <param name="_labelType">
    /// Type of label report (item or shelf).
    /// </param>
    /// <param name="_reportsMap">
    /// Map containing pair [report template name, class for printing report].
    /// </param>
    /// <param name="_xmlItem">
    /// XmlElement with information about item for print.
    /// </param>
    /// <returns>
    /// Container [result, errorMessage, ItemId, VariantId].
    /// </returns>
    protected static container addItemToReport(RetailStoreTable _rboStoreTable, RetailTerminalId _terminalId, date _validOnDate, RetailLabelTypeBase _labelType, Map _reportsMap, XmlElement _xmlItem)
    {
        ItemId itemId;
        RetailValidationId variantId;
        RetailQty qty;
        RetailInventItemLabelSetup labelSetup;
        RetailCreateSpecificLabel reportLabel;
        int reportsCount;
        str errorMessage;
        boolean result;

        RetailCreateSpecificLabel getReportingClass(str _reportName)
        {
            RetailCreateSpecificLabel reportLabelLoc;
            //If reporting class has not been already created for specific report
            if (!_reportsMap.exists(_reportName))
            {
                reportLabelLoc = new RetailCreateSpecificLabel();
                reportLabelLoc.parmReportName(_reportName);
                reportLabelLoc.parmLabelType(_labelType);
                reportLabelLoc.newRecordList();
                _reportsMap.insert(_reportName, reportLabelLoc);
            }
            else
            {
                reportLabelLoc = _reportsMap.lookup(_reportName);
            }

            return reportLabelLoc;
        }

        container errorResult(str _errorMessage)
        {
            return [false, _errorMessage, itemId, variantId];
        }

        itemId = RetailLabelReportsManager::getElementTextValue(_xmlItem, 'ItemId');
        if (!itemId)
        {
            return errorResult("@SYP4880794");
        }

        variantId = RetailLabelReportsManager::getElementTextValue(_xmlItem, 'VariantId');
        qty = str2num(RetailLabelReportsManager::getElementTextValue(_xmlItem, 'Quantity'));
        if (qty <= 0)
        {
            return errorResult("@SYP4880795");
        }

        //For each item label setup ...
        while select labelSetup
        where   labelSetup.LabelType == _labelType
        &&      labelSetup.ItemId == itemId
        {
            if (RetailLabelReportsManager::isLabelSetupApplicable(labelSetup, _rboStoreTable.RecId))
            {
                //If SSRS report name found for the label report setup
                if (!RetailCreateSpecificLabel::getSSRSReportName(labelSetup.ReportName))
                {
                    return errorResult(strFmt("@SYP4880796", labelSetup.ReportName));
                }
                else
                {
                    reportLabel = getReportingClass(labelSetup.ReportName);
                    [result, errorMessage] = reportLabel.addItemToPrint(_rboStoreTable.StoreNumber, labelSetup, variantId, qty, _validOnDate);
                    if (!result)
                    {
                        return errorResult(errorMessage);
                    }
                    reportsCount ++;
                }
            }
        }
        //If there has not been found any report and no error messages
        if (!reportsCount && !errorMessage)
        {
            return errorResult(strFmt("@SYP4880797", itemId));
        }

        return [true, '', itemId, variantId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>compressReportFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compresses folder with generated reports to zip file.
    /// </summary>
    /// <param name="_reportFolder">
    /// Folder to be compressed.
    /// </param>
    /// <returns>
    /// Container [result, errorMessage, archiveFileName].
    /// </returns>
    protected static container compressReportFolder(str _reportFolder)
    {
        CLRObject exception;
        str compressedFileName;
        str tmpFileName;

        //Deletes temprary file that can be created after calling System.IO.Path::GetTempFileName.
        //Exception is 'swallowed' because it is not a problem if file is not removed
        void removeTmpFile(str _tmpFileName)
        {
            try
            {
                if (System.IO.File::Exists(_tmpFileName))
                {
                    System.IO.File::Delete(_tmpFileName);
                }
            }
            catch(Exception::CLRError)
            {
                exception = CLRInterop::getLastException();
                eventSource.EventWriteReportingGenericClrException(classStr(RetailLabelReportsManager), staticMethodStr(RetailLabelReportsManager, compressReportFolder), 'inner type unknown for removeTmpFile');
            }
        }

        container errorResult(str _errorMessage)
        {
            eventSource.EventWriteReportingGenericClrException(classStr(RetailLabelReportsManager), staticMethodStr(RetailLabelReportsManager, compressReportFolder), 'inner type unknown');
            error(_errorMessage);
            return [false, "@SYP4880798", ''];
        }

        if (!_reportFolder || !System.IO.Directory::Exists(_reportFolder))
        {
            return errorResult(strFmt("@SYP4880799", _reportFolder));
        }

        try
        {
            tmpFileName = System.IO.Path::GetTempFileName();
            compressedFileName = System.IO.Path::ChangeExtension(tmpFileName, '.zip');

            removeTmpFile(tmpFileName);

            System.IO.Compression.ZipFile::CreateFromDirectory(_reportFolder, compressedFileName);
            return [true, '', compressedFileName];
        }
        catch (Exception::CLRError)
        {
            exception = CLRInterop::getLastException();
            return errorResult(exception.ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates folder for SSRS reports.
    /// </summary>
    /// <returns>
    /// String containing folder path.
    /// </returns>
    /// <remarks>
    /// Report folder is created in %Temp% folder. Folder name has format: 'LabelReport-Guid'
    /// </remarks>
    protected static str createReportFolder()
    {
        str tempFolder;
        str reportFolderName;
        str reportFolderPath;

        tempFolder = System.IO.Path::GetTempPath();
        reportFolderName = 'LabelReport-' + guid2str(newGuid());
        reportFolderPath = System.IO.Path::Combine(tempFolder, reportFolderName);
        System.IO.Directory::CreateDirectory(reportFolderPath);
        return reportFolderPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createResponseXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates xml for transaction service response.
    /// </summary>
    /// <param name="_reportFile">
    /// Archive filename with reports.
    /// </param>
    /// <param name="_notPrintedItems">
    /// List of not printed items.
    /// </param>
    /// <returns>
    /// String containing response xml.
    /// </returns>
    protected static str createResponseXml(str _reportFile, List _notPrintedItems)
    {
        XmlDocument         xmlDoc;
        XmlElement          xmlRoot, xmlFile, xmlItems, xmlItem;
        ListEnumerator      enumerator;

        ItemId              itemId;
        RetailVariantId     variantId;
        str                 itemMessage;

        // Create xml document and the root element
        xmlDoc = XMLDocument::newBlank();
        xmlRoot = xmlDoc.createElement('RunLabelReport');
        xmlDoc.appendChild(xmlRoot);

        // Add a child element for report archive file
        xmlFile = xmlDoc.createElement('ReportFile');
        xmlFile.setAttribute('Path', _reportFile);
        xmlRoot.appendChild(xmlFile);

        // Add a child elements for report archive file
        xmlItems = xmlDoc.createElement('NotPrintedItems');
        xmlRoot.appendChild(xmlItems);

        enumerator = _notPrintedItems.getEnumerator();
        while (enumerator.moveNext())
        {
            [itemMessage, itemId, variantId] = enumerator.current();
            xmlItem = xmlDoc.createElement('NotPrintedItem');
            xmlItem.setAttribute('ItemId', itemId);
            xmlItem.setAttribute('VariantId', variantId);
            xmlItem.setAttribute('Reason', itemMessage);
            xmlItems.appendChild(xmlItem);
        }

        return xmlDoc.toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElementTextValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets text value of xml element.
    /// </summary>
    /// <param name="_parentNode">
    /// Parent node.
    /// </param>
    /// <param name="_elementName">
    /// Name of element containing value.
    /// </param>
    /// <returns>
    /// Element value.
    /// </returns>
    protected static str getElementTextValue(XmlElement _parentNode, str _elementName)
    {
        XMLElement element = _parentNode.getNamedElement(_elementName);
        if (element)
        {
            return element.text();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfologContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all messages from infolog devided by '\n' symbol. Message starts with 'Infolog content:' string.
    /// </summary>
    /// <returns>
    /// Strinng containing infolog messages.
    /// </returns>
    protected static str getInfologContent()
    {
        int i, n = infologLine();
        str message = "@SYP4880800";
        for (i = 1; i <= n ; i++)
        {
            message += '\n';
            message += infolog.text(i);
        }
        return message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates report file name.
    /// </summary>
    /// <param name="_reportFolder">
    /// Report folder.
    /// </param>
    /// <param name="_fileFormat">
    /// SSRS output file format.
    /// </param>
    /// <param name="_fileNum">
    /// File number (index).
    /// </param>
    /// <returns>
    /// Report file name.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Rethrow Exception::Error if CLR error has been caught.
    /// </exception>
    protected static str getReportFileName(str _reportFolder, SRSReportFileFormat _fileFormat, int _fileNum)
    {
        CLRObject exception;
        str ext;
        str fileName = strFmt ('LabelReport%1', _fileNum);

        switch (_fileFormat)
        {
            case SRSReportFileFormat::CSV:
                ext = '.csv';
                break;

            case SRSReportFileFormat::Excel:
                ext = '.xlsx';
                break;

            case SRSReportFileFormat::HTML4_0:
                ext = '.html';
                break;

            case SRSReportFileFormat::MHTML:
                ext = '.mhtml';
                break;

            case SRSReportFileFormat::PDF:
                ext = '.pdf';
                break;

            case SRSReportFileFormat::XML:
                ext = '.xml';
                break;

            default:
                ext = '.tmp';
                break;
        }

        try
        {
            fileName = System.IO.Path::ChangeExtension(fileName,ext);
            return  System.IO.Path::Combine(_reportFolder, fileName);
        }
        catch (Exception::CLRError)
        {
            exception = CLRInterop::getLastException();
            throw error(exception.toString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLabelSetupApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if label setup is applicable for store.
    /// </summary>
    /// <param name="_labelSetup">
    /// label setup.
    /// </param>
    /// <param name="_storeRecId">
    /// Store RecId.
    /// </param>
    /// <returns>
    /// True if label setup is applicable for store;false otherwise.
    /// </returns>
    protected static boolean isLabelSetupApplicable(RetailInventItemLabelSetup _labelSetup, RecId _storeRecId)
    {
        OMOperatingUnit                 omOperatingUnit;
        Set                             omOperatingUnits;
        SetEnumerator                   omOperatingUnitsEnumerator;
        Set organizationTypes           = new Set(Types::Enum);
        RetailChannelTable              channel;

        organizationTypes.add(OMInternalOrganizationType::OperatingUnit);
        omOperatingUnits = OMInternalOrganization::getDescendantsAndSelf(_labelSetup.OMInternalOrganization, _labelSetup.OMHierarchyType, DateTimeUtil::utcNow(), organizationTypes);
        omOperatingUnitsEnumerator = omOperatingUnits.getEnumerator();
        while (omOperatingUnitsEnumerator.moveNext())
        {   // For each operating unit...

            omOperatingUnit = OMOperatingUnit::find(omOperatingUnitsEnumerator.current(), OMOperatingUnitType::RetailChannel);
            if (omOperatingUnit)
            {   // We have a value of the correct operting unit type...

                channel = RetailChannelTable::findByOperatingUnitId(omOperatingUnit.RecId);
                if (channel.RecId == _storeRecId )
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReportFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes folder with generated reports.
    /// </summary>
    /// <param name="_reportFolder">
    /// Folder path.
    /// </param>
    /// <remarks>
    /// This method 'swallows' all CLR exceptions.
    /// </remarks>
    protected static void removeReportFolder(str _reportFolder)
    {
        CLRObject exception;
        try
        {
            if (_reportFolder && System.IO.Directory::Exists(_reportFolder))
            {
                System.IO.Directory::Delete(_reportFolder, true);
            }
        }
        catch (Exception::CLRError)
        {
            exception = CLRInterop::getLastException();
            eventSource.EventWriteReportingGenericClrException(
                classStr(RetailLabelReportsManager), 
                staticMethodStr(RetailLabelReportsManager, removeReportFolder), 
                'inner type unknonwn');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runLabelReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run SSRS label report for selected items and export it to files (one file for each report template).
    /// </summary>
    /// <param name="_reportDataXmlStr">
    /// Xml string containing data for report (list of items, report date, type of label and type of file to export.
    /// </param>
    /// <returns>
    /// Container wich result (operation result, error message, list of not printed items).
    /// </returns>
    /// <remarks>
    /// Reports templates are taken from default setup for items.
    /// </remarks>
    public static container runLabelReport(str _reportDataXmlStr)
    {
        str message;
        boolean result;
        int i, printedItemsCount;

        RetailStoreId       storeId;
        RetailTerminalId    terminalId;
        RetailLabelTypeBase labelType;
        SRSReportFileFormat fileFormat;
        str                 reportFolder;
        str                 reportArchiveFileName;

        ItemId              itemId;
        RetailVariantId     variantId;
        str                 itemMessage;
        boolean             itemResult;
        str                 xmlResponse;
        date                reportDate;

        XmlDocument         xmlDoc;
        XmlElement          xmlRoot;
        XmlElement          xmlLines;
        XmlNodeList         xmlRecordList;
        XmlElement          xmlItem;

        Map                 reportsMap = new Map(Types::String, Types::Class);
        List                notPrintedItems = new List(Types::Container);
        CLRObject           exception;
        RetailStoreTable    rboStoreTable;

        container errorResult(str _message, boolean _returnInfologContent = false)
        {
            str infologContent;
            RetailLabelReportsManager::removeReportFolder(reportFolder);
            eventSource.EventWriteReportingRunLabelReportsError(classStr(RetailLabelReportsManager), funcName());

            if (_returnInfologContent)
            {
                infologContent = RetailLabelReportsManager::getInfologContent();
            }
            return [false, _message, infologContent, ''];
        }

        try
        {
            xmlDoc = new XmlDocument();
            xmlDoc.loadXml(_reportDataXmlStr);
            xmlRoot = xmlDoc.documentElement();

            storeId = RetailLabelReportsManager::getElementTextValue(xmlRoot, 'StoreId');
            if (!storeId)
            {
                return errorResult("@SYP4880802");
            }

            terminalId = RetailLabelReportsManager::getElementTextValue(xmlRoot, 'TerminalId');
            labelType = str2int(RetailLabelReportsManager::getElementTextValue(xmlRoot, 'LabelType'));
            if (!enum2Symbol(enumNum(RetailLabelTypeBase), labelType))
            {
                return errorResult("@SYP4880803");
            }

            fileFormat = str2int(RetailLabelReportsManager::getElementTextValue(xmlRoot, 'FileFormat'));
            if (!enum2Symbol(enumNum(SRSReportFileFormat), fileFormat))
            {
                return errorResult("@SYP4880804");
            }

            reportDate = str2Date(RetailLabelReportsManager::getElementTextValue(xmlRoot, 'ReportDate'), 213);
            rboStoreTable = RetailStoreTable::find(storeId);
            if (!rboStoreTable)
            {
                return errorResult(strFmt("@SYP4880805", storeId));
            }

            xmlLines = xmlRoot.getNamedElement('ItemsToPrint');
            if (!xmlLines)
            {
                return errorResult("@SYP4880806");
            }

            xmlRecordList = xmlLines.childNodes();
            if (!xmlRecordList || !xmlRecordList.length())
            {
                return errorResult("@SYP4880807");
            }

            for (i = 0; i < xmlRecordList.length(); i++)
            {
                xmlItem = xmlRecordList.item(i);
                [itemResult, itemMessage, itemId, variantId] = RetailLabelReportsManager::addItemToReport(rboStoreTable, terminalId,  reportDate, labelType, reportsMap, xmlItem);
                if (!itemResult)
                {
                    notPrintedItems.addEnd([itemMessage, itemId, variantId]);
                }
                else
                {
                    printedItemsCount++;
                }
            }

            //If at least 1 item has been printed
            if (printedItemsCount > 0 )
            {
                reportFolder = RetailLabelReportsManager::createReportFolder();

                [result, message] = RetailLabelReportsManager::runSSRSReports(reportsMap, reportFolder, fileFormat);
                if (!result)
                {
                    return errorResult(message, true);
                }
                [result, message, reportArchiveFileName] = RetailLabelReportsManager::compressReportFolder(reportFolder);
                if (!result)
                {
                    return errorResult(message, true);
                }
                xmlResponse = RetailLabelReportsManager::createResponseXml(reportArchiveFileName, notPrintedItems);

                RetailLabelReportsManager::removeReportFolder(reportFolder);
            }
            else
            {
                result = true;
                xmlResponse = RetailLabelReportsManager::createResponseXml('', notPrintedItems);
            }
        }
        catch (Exception::CLRError)
        {
            exception = CLRInterop::getLastException();
            error(exception.ToString());
            return errorResult(strFmt("@SYP4880808", staticMethodStr(RetailTransactionService, RunLabelReport)), true);
        }
        catch
        {
            return errorResult(strFmt("@SYP4880809", staticMethodStr(RetailTransactionService, RunLabelReport)), true);
        }

        return [result, message, '', xmlResponse];
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSSRSReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts SSRS reports printing.
    /// </summary>
    /// <param name="_reportsMap">
    /// Map containing pair [report template name, class for printing report].
    /// </param>
    /// <param name="_reportsFolder">
    /// Folder for report files.
    /// </param>
    /// <param name="_fileFormat">
    /// SSRS output file format.
    /// </param>
    /// <returns>
    /// Container [result, errorMessage].
    /// </returns>
    protected static container runSSRSReports(Map _reportsMap, str _reportsFolder, SRSReportFileFormat _fileFormat)
    {
        MapEnumerator               mapEnumerator;
        str                         filename;
        boolean                     result;
        str                         message;
        RetailCreateSpecificLabel   reportLabel;
        int                         i;
        CLRObject           exception;

        container errorResult()
        {
            return [false, "@SYP4880810"];
        }

        try
        {
            mapEnumerator = _reportsMap.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                reportLabel = mapEnumerator.currentValue();
                i++;
                filename = RetailLabelReportsManager::getReportFileName(_reportsFolder, _fileFormat, i);
                [result, message] = reportLabel.printSpecificLabelsToFile(_fileFormat, fileName);
                if (!result)
                {
                    eventSource.EventWriteReportingRunLabelReportsError(classStr(RetailLabelReportsManager), funcName());
                    return errorResult();
                }
            }
        }
        catch (Exception::CLRError)
        {
            exception = CLRInterop::getLastException();
            error(exception.ToString());
            return errorResult();
        }
        catch
        {
            return  errorResult();
        }

        return [true, message];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>