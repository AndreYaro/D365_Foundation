<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25Report_RegisterTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// General register trans report engine
/// </summary>
final class rTax25Report_RegisterTrans extends RunBaseBatch implements BatchRetryable
{
    RTax25RegType               regType;
    RTax25RegisterJournalTrans  journalTrans;

    Set                         hidedFields;

    RTax25RegisterId            registerId;
    RTax25RegisterJournalNum    journalNum;
    RTax25PeriodType            periodType;
    RTax25PeriodNum             periodNum;
    Yr                          journalYear;

    DialogField                 dialogRegisterId;
    DialogField                 dialogJournalNum;
    DialogField                 dialogPeriodType;
    DialogField                 dialogPeriodNum;
    DialogField                 dialogYear;

    FromDate                    fromDate;
    ToDate                      toDate;
    Name                        responsibleName;

    container                   packCont;
    boolean                     isPack;

    QueryRun                    queryRun;

    boolean                     isHeaderData;

    protected const Version currentVersion = 3;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public Name caption()
    {
        return journalTrans ? journalTrans.registerName() :
                   regType ?
                   RTax25RegisterTable::findRegisterId(regType.registerId()).RegisterName :
                   RTax25Report_RegisterTrans::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient   = false)
    {
        DialogRunbase   dialog = super();
        DialogGroup     regGroup;
        
        regGroup = dialog.addGroup("@SYS27587");

        dialogRegisterId = dialog.addFieldValue(extendedTypeStr(RTax25RegisterId), registerId);

        dialogJournalNum = dialog.addFieldValue(extendedTypeStr(RTax25RegisterJournalNum), journalNum);
        dialogPeriodType = dialog.addFieldValue(enumStr(RTax25PeriodType), periodType);
        dialogPeriodNum  = dialog.addFieldValue(extendedTypeStr(RTax25PeriodNum), periodNum);
        dialogYear       = dialog.addFieldValue(extendedTypeStr(Yr), journalYear);

        if (journalTrans)
        {
            regGroup.allowEdit(false);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDate getFromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        registerId  = dialogRegisterId.value();
        journalNum  = dialogJournalNum.value();
        periodType  = dialogPeriodType.value();
        periodNum   = dialogPeriodNum.value();
        journalYear = dialogYear.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponsibleName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Name getResponsibleName()
    {
        return responsibleName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDate getToDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hidedFields</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set hidedFields()
    {
        return hidedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query that is used in the report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initQueryRun()
    {
        TableId               regTransTabelId;
        QueryBuildDataSource  qbds, linkDS;
        QueryBuildRange       range;
        Query                 query = new Query();

        if (regType && regType.detachedTableId())
        {
            regTransTabelId = regType.detachedTableId();
        }
        else
        {
            regTransTabelId = tablenum(RTax25RegisterTrans);
        }

        qbds = query.addDataSource(regTransTabelId);
        qbds.clearSortIndex();
        qbds.addSortIndex(indexName2Id(regTransTabelId, 'JournalRegisterLineTypeIdx'));

        if (regTransTabelId == tablenum(RTax25RegisterTrans))
        {
            range = findOrCreateRange_W(qbds, fieldnum(RTax25RegisterTrans, RegisterId), registerId);
            range.status(RangeStatus::Hidden);

            range = findOrCreateRange_W(qbds, fieldNum(RTax25RegisterTrans, JournalNum), journalNum);
            range.status(RangeStatus::Hidden);

            range = findOrCreateRange_W(qbds, fieldNum(RTax25RegisterTrans, PeriodType), enum2Value(periodType));
            range.status(RangeStatus::Hidden);

            range = findOrCreateRange_W(qbds, fieldNum(RTax25RegisterTrans, PeriodNum), periodNum ? SysQuery::value(periodNum) : "");
            range.status(RangeStatus::Hidden);

            range = findOrCreateRange_W(qbds, fieldNum(RTax25RegisterTrans, FiscalYear), journalYear ? SysQuery::value(journalYear) : "");
            range.status(RangeStatus::Hidden);
        }
        else
        {
            if (journalTrans)
            {
                range = findOrCreateRange_W(qbds, fieldName2Id(regTransTabelId, 'JournalTransRefRecId'), queryValue(journalTrans.RecId));
                range.status(RangeStatus::Hidden);
            }
            else
            {
                linkDS = qbds.addDataSource(tablenum(RTax25RegisterJournalTrans));
                linkDS.addLink(fieldName2Id(regTransTabelId, 'JournalTransRefRecId'), fieldnum(RTax25RegisterJournalTrans, RecId));

                range = findOrCreateRange_W(linkDS, fieldnum(RTax25RegisterJournalTrans, Cancelled), queryValue(NoYes::No));
                range.status(RangeStatus::Hidden);

                range = findOrCreateRange_W(linkDS, fieldnum(RTax25RegisterJournalTrans, RegisterId), registerId);
                range.status(RangeStatus::Hidden);

                range = findOrCreateRange_W(linkDS, fieldnum(RTax25RegisterJournalTrans, JournalNum), journalNum);
                range.status(RangeStatus::Hidden);

                range = findOrCreateRange_W(linkDS, fieldnum(RTax25RegisterJournalTrans, PeriodType), enum2Value(periodType));
                range.status(RangeStatus::Hidden);

                range = findOrCreateRange_W(linkDS, fieldnum(RTax25RegisterJournalTrans, PeriodNum), periodNum ? SysQuery::value(periodNum) : "");
                range.status(RangeStatus::Hidden);

                range = findOrCreateRange_W(linkDS, fieldnum(RTax25RegisterJournalTrans, FiscalYear), journalYear ? SysQuery::value(journalYear) : "");
                range.status(RangeStatus::Hidden);
            }
        }

        hidedFields = new Set(Types::Integer);
        if (journalTrans)
        {
            hidedFields = RTax25RegisterHideSetup::hidedFields(journalTrans);
        }

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (!this.parmPack())
        {
            return packCont;
        }

        return [currentVersion, registerId, journalNum, periodType, periodNum, journalYear];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterJournalNum parmJournalNum(RTax25RegisterJournalNum _journalNum = journalNum)
    {
        journalNum = _journalNum;
        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPack</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmPack(boolean _isPack = isPack)
    {
        isPack = _isPack;
        return isPack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25PeriodNum parmPeriodNum(RTax25PeriodNum _periodNum = periodNum)
    {
        periodNum = _periodNum;
        return periodNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25PeriodType parmPeriodType(RTax25PeriodType _periodType = periodType)
    {
        periodType = _periodType;
        return periodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegisterId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterId parmRegisterId(RTax25RegisterId _registerId = registerId)
    {
        registerId = _registerId;
        return registerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegisterJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterJournalTrans parmRegisterJournalTrans(RTax25RegisterJournalTrans _journalTrans = journalTrans)
    {
        if (_journalTrans != journalTrans)
        {
            journalTrans = _journalTrans;
            registerId   = journalTrans.RegisterId;
            journalNum = journalTrans.JournalNum;
            periodNum  = journalTrans.PeriodNum;
            periodType = journalTrans.PeriodType;
            journalYear = journalTrans.FiscalYear;
            regType = RTax25RegType::construct(RTax25RegisterTable::registerId2Type(registerId),
                                               journalTrans.AssessedTaxRegisterType,
                                               ! RTax25RegisterTrans::existAny(journalNum, registerId, periodType, periodNum, journalYear));
        }

        return journalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmYear</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Yr parmYear(Yr _journalYear = journalYear)
    {
        journalYear = _journalYear;
        return journalYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of XMLExcelReport and executes it
    /// </summary>
    public void run()
    {
        Args                args;
        XMLExcelReport_RU   report;

        if (! journalTrans.RecId)
        {
            this.initQueryRun();
        }

        this.setHeaderData();

        if (! this.IsHeaderData())
            return;

        args   = new Args(this);
        report = OXMLExcelReport_RTax25RegTrans_RU::construct();

        args.record(journalTrans);
        report.parmArgs(args);

        if (report.init())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setHeaderData()
    {
        RTax25RegisterJournalTrans  localJournalTrans;
        RTax25RegisterTrans         registerTrans;
        QueryRun                    qr;
        QueryBuildDataSource        qbds;
        TableId                     regTabelId;

        isHeaderData = true;

        if (journalTrans)
        {
            responsibleName = journalTrans.Approved ?
                HcmWorker::find(journalTrans.Approver).name() :
                "";
            toDate   = journalTrans.toDate();
            fromDate = journalTrans.fromDate();
        }
        else
        {
            if (regType.detachedTableId())
            {
                regTabelId = tablenum(RTax25RegisterJournalTrans);
            }
            else
            {
                regTabelId = tablenum(RTax25RegisterTrans);
            }

            qr = new QueryRun(queryRun.query());

            if (regType.detachedTableId())
            {
                qbds = qr.query().dataSourceTable(regType.detachedTableId());
                qbds.clearSortIndex();
            }

            qbds = qr.query().dataSourceTable(regTabelId);
            qbds.addSortField(fieldName2Id(regTabelId, 'FiscalYear'), SortOrder::Descending);
            qbds.addSortField(fieldName2Id(regTabelId, 'PeriodNum'), SortOrder::Descending);
            qbds.firstOnly(true);
            qr.next();

            if (regType.detachedTableId())
            {
                localJournalTrans = qr.get(regTabelId);
            }
            else
            {
                registerTrans = qr.get(regTabelId);
                select firstonly localJournalTrans
                    where localJournalTrans.RegisterId == registerTrans.RegisterId
                        && localJournalTrans.PeriodType == registerTrans.PeriodType
                        && localJournalTrans.JournalNum == registerTrans.JournalNum
                        && localJournalTrans.PeriodNum == registerTrans.PeriodNum
                        && localJournalTrans.FiscalYear == registerTrans.FiscalYear
                        && localJournalTrans.Cancelled  == NoYes::No;
            }

            toDate = localJournalTrans.toDate();
            responsibleName = localJournalTrans.Approved
                ? HcmWorker::find(localJournalTrans.Approver).name()
                : '';

            qbds.sortClear();
            qbds.addSortField(fieldName2Id(regTabelId, 'FiscalYear'), SortOrder::Ascending);
            qbds.addSortField(fieldName2Id(regTabelId, 'PeriodNum'), SortOrder::Ascending);

            qr.reset();
            qr.next();

            if (regType.detachedTableId())
            {
                localJournalTrans = qr.get(regTabelId);
            }
            else
            {
                registerTrans = qr.get(regTabelId);
                select firstonly localJournalTrans
                    where localJournalTrans.RegisterId == registerTrans.RegisterId
                        && localJournalTrans.PeriodType == registerTrans.PeriodType
                        && localJournalTrans.JournalNum == registerTrans.JournalNum
                        && localJournalTrans.PeriodNum == registerTrans.PeriodNum
                        && localJournalTrans.FiscalYear == registerTrans.FiscalYear
                        && localJournalTrans.Cancelled  == NoYes::No;
            }

            fromDate = localJournalTrans.fromDate();

            if (! toDate || ! fromDate)
            {
                isHeaderData = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret = false;
        Integer         version = conPeek(_packedClass, 1);

        if (!this.parmPack())
        {
            packCont = _packedClass;
            return ret;
        }

        switch (version)
        {
            case currentVersion:
                [version, registerId, journalNum, periodType, periodNum, journalYear] = _packedClass;
                ret = true;
                break;
        }

        this.initQueryRun();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (! registerId)
            return checkFailed("@GLS103892");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS103788";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RTax25Report_RegisterTrans  registerTrans;

        if (_args.dataset() && _args.dataset() != tableNum(RTax25RegisterJournalTrans))
            throw error("@SYS26348");

        registerTrans = new RTax25Report_RegisterTrans();

        if (_args.record())
        {
            registerTrans.parmPack(false);
            registerTrans.getLast();
            registerTrans.parmRegisterJournalTrans(_args.record());
        }
        else
        {
            registerTrans.parmPack(true);
            registerTrans.getLast();
        }

        registerTrans.initQueryRun();

        if (registerTrans.prompt())
        {
            if (registerTrans.parmRegisterJournalTrans().RecId)
            {
                registerTrans.runOperation();
            }
            else
            {
                // print data from old data model
                registerTrans.parmRegType(RTax25RegType::construct(RTax25RegisterTable::registerId2Type(registerTrans.parmRegisterId()),
                    RAssetAssessedTaxRegType::None, false));
                registerTrans.runOperation();

                // print data from new data model
                registerTrans = new RTax25Report_RegisterTrans();
                registerTrans.parmPack(true);
                registerTrans.getLast();
                registerTrans.parmRegType(RTax25RegType::construct(RTax25RegisterTable::registerId2Type(registerTrans.parmRegisterId())));
                registerTrans.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHeaderData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isHeaderData()
    {
        return isHeaderData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegType parmRegType(RTax25RegType _regType = regType)
    {
        regType = _regType;
        return regType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>