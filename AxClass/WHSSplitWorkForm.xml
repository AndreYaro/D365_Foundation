<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSplitWorkForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSplitWorkForm</c> class is responsible for business logic executed in <c>WHSSplitWork</c> form.
/// </summary>
internal final class WHSSplitWorkForm
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSSplitWorkForm construct()
    {
        return new WHSSplitWorkForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryOpenInitialPickWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query of the data source in order to get only the open initial pick work lines of a work header.
    /// </summary>
    /// <param name = "_qbds">The query to be modified.</param>
    /// <param name = "_workId">The work id</param>
    [Hookable(false)]
    internal void modifyQueryOpenInitialPickWorkLines(QueryBuildDataSource _qbds, WHSWorkId _workId)
    {
        LineNum firstPutLineNum = WHSWorkTable::getFirstPutWorkLine(_workId).LineNum;

        _qbds.addRange(fieldNum(WHSWorkLine, WorkType)).value(queryValue(WHSWorkType::Pick));
        _qbds.addRange(fieldNum(WHSWorkLine, WorkStatus)).value(queryValue(WHSWorkStatus::Open));
        _qbds.addRange(fieldNum(WHSWorkLine, LineNum)).value(strFmt('<%1', queryValue(firstPutLineNum)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryAllWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query of the data source in order to get all the work lines of a work header.
    /// </summary>
    /// <param name = "_qbds">The query to be modified </param>
    [Hookable(false)]
    internal void modifyQueryAllWorkLines(QueryBuildDataSource _qbds)
    {
        _qbds.clearRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateArgsRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the args of the form.
    /// </summary>
    /// <param name = "_args">The args of the form</param>
    private void validateArgsRecord(xArgs _args)
    {
        if (!_args.record()
            || _args.record().TableId != tableNum(WHSWorkTable))
        {
            throw error(error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkTableFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the work table from args.
    /// </summary>
    /// <param name = "_args">The args of the form</param>
    /// <returns> The work table</returns>
    [Hookable(false)]
    internal WHSWorkTable findWorkTableFromArgs(xArgs _args)
    {
        this.validateArgsRecord(_args);

        WHSWorkTable workTable = _args.record() as WHSWorkTable;
        return workTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unBlockWorkBeingSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the SplitWork Blocking Reason and tries to unblock the work.
    /// </summary>
    /// <param name = "_workId">The id of the work that should be unblocked</param>
    [Hookable(false)]
    internal void unBlockWorkBeingSplit(WHSWorkId _workId)
    {
        ttsbegin;

        if (WHSWorkBeingSplitValidator::isWorkBeingSplitByCurrentUser(_workId))
        {
            WHSUnBlockSplittingWork::unBlockSplitWorkReason(_workId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>