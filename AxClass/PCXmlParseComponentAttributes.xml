<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcXmlParseComponentAttributes</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlParseComponentAttributes</c> class parses session XML for the attributes that are
/// associated with a specific component.
/// </summary>
class PcXmlParseComponentAttributes
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getComponentAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of attributes that are associated with a component.
    /// </summary>
    /// <param name="_componentRecId">
    /// A component record ID.
    /// </param>
    /// <returns>
    /// A collection of component attributes.
    /// </returns>
    protected Map getComponentAttributes(RecId _componentRecId)
    {
        Map                     componentAttributes = new Map(Types::Int64, Types::Record);
        EcoResCategoryAttribute componentAttribute;

        while select componentAttribute
            where componentAttribute.Category == _componentRecId
        {
            componentAttributes.insert(componentAttribute.RecId, componentAttribute);
        }

        return componentAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseUnassignedAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses unassigned attributes.
    /// </summary>
    /// <param name="_adaptorComponent">
    /// A component adapter.
    /// </param>
    /// <param name="_unassignedAttributes">
    /// A collection of unassigned attributes.
    /// </param>
    protected void parseUnassignedAttributes(PCAdaptorComponent _adaptorComponent, Map _unassignedAttributes)
    {
        MapEnumerator collectionEnumerator;

        // handle attributes which does not have a value assigned
        collectionEnumerator = _unassignedAttributes.getEnumerator();
        while ( collectionEnumerator.moveNext() )
        {
            _adaptorComponent.addAttribute(collectionEnumerator.currentValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCXmlParseComponentAttributes construct()
    {
        return new PCXmlParseComponentAttributes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseAssignedAttributesIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the assigned component attributes.
    /// </summary>
    /// <param name="_adaptorComponent">
    /// A component adapter.
    /// </param>
    /// <param name="_xmlReader">
    /// An instance of the <c>PCXmlParseReader</c> class.
    /// </param>
    /// <param name="_componentAttributes">
    /// A collection of component attributes.
    /// </param>
    /// <param name="_componentInstanceValue">
    /// A component instance value record.
    /// </param>
    protected void parseAssignedAttributesIL(
        PCAdaptorComponent          _adaptorComponent,
        PCXmlParseReader            _xmlReader,
        Map                         _componentAttributes,
        PCComponentInstanceValue    _componentInstanceValue)
    {
        RecId                           parsedComponentAttributeRecId;
        PCAdaptorAttribute              adaptorAttribute;
        PCXmlParseComponentAttribute    parseComponentAttribute       = PCXmlParseComponentAttribute::construct();
        EcoResCategoryAttribute         componentAttribute;

        #PC

        // handle attributes which are assigned a value
        while (_xmlReader.name() == #attributeElement)
        {
            parsedComponentAttributeRecId = str2int64(_xmlReader.getAttribute(#ReqIdAttribute));

            componentAttribute = _componentAttributes.lookup(parsedComponentAttributeRecId);

            _componentAttributes.remove(componentAttribute.RecId);

            if (componentAttribute)
            {
                adaptorAttribute = _adaptorComponent.addAttribute(componentAttribute);

                parseComponentAttribute.parseIL(componentAttribute, _xmlReader, _componentInstanceValue, adaptorAttribute);
            }
            _xmlReader.read();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>parseIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the session XML for the attributes of a component.
    /// </summary>
    /// <param name="_componentRecId">
    /// A component record ID.
    /// </param>
    /// <param name="_xmlReader">
    /// An instance of the <c>PCXmlParseReader</c> class.
    /// </param>
    /// <param name="_adaptorComponent">
    /// A component adapter.
    /// </param>
    /// <param name="_componentInstanceValue">
    /// A component instance record.
    /// </param>
    public void parseIL(
        RecId                     _componentRecId,
        PCXmlParseReader          _xmlReader,
        PCAdaptorComponent        _adaptorComponent,
        PCComponentInstanceValue  _componentInstanceValue)
    {
        Map componentAttributes;

        PCContractNotNull::assertObject(_xmlReader, funcName());
        PCContractNotNull::assertObject(_adaptorComponent, funcName());

        componentAttributes = this.getComponentAttributes(_componentRecId);

        this.parseAssignedAttributesIL(_adaptorComponent, _xmlReader, componentAttributes, _componentInstanceValue);

        this.parseUnassignedAttributes(_adaptorComponent, componentAttributes);
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>