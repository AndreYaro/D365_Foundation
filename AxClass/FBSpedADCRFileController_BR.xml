<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedADCRFileController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBSpedADCRFileController_BR</c> class is the controller class for the SPED ADCR - PR file generation operation.
/// </summary>
[FBTaxStatement_BRAttribute("@FiscalBooks_SpedADCR:SpedADCR", menuitemDisplayStr(FBSpedADCRFileExporter_BR))]
[FBTaxStatementLocation_BRAttribute('BRA', 'PR')]
[FBTaxStatementSetupMenuItem_BRAttribute(menuitemDisplayStr(FBSpedADCRSetupParameters_BR))]
public class FBSpedADCRFileController_BR extends FBTaxStatementController_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SysOperationController construct(Args _args)
    {
        FBSpedADCRFileController_BR controller = new FBSpedADCRFileController_BR();
        controller.initializeFromArgs(_args);

        FBBookingPeriod_BR bookingPeriod = controller.bookingPeriod();

        FBSpedADCRFileContract_BR contract = controller.getDataContractObject();
        contract.parmFiscalEstablishmentId(bookingPeriod.FiscalEstablishmentId);
        contract.parmFiscalEstablishmentDataArea(bookingPeriod.FiscalEstablishmentDataArea);
        contract.parmMonth(bookingPeriod.PeriodMonth);
        contract.parmYr(bookingPeriod.PeriodYear);
        contract.parmSpedFileName(FBUtil_BR::getDefaultFileNameSpedADCR(bookingPeriod));
        contract.parmBookingPeriod(bookingPeriod);
        controller.parmExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);
        controller.parmShowProgressForm(true);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperation</Name>
				<Source><![CDATA[
    protected void afterOperation(SysOperationExecutionMode _executionMode, AifAsyncResult _asyncResult)
    {
        this.saveSpedFileToZip();
        super(_executionMode, _asyncResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FBSpedADCRFileController_BR::construct(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSpedFileToZip</Name>
				<Source><![CDATA[
    private void saveSpedFileToZip()
    {
        FBSpedADCRFileContract_BR contract = this.getDataContractObject() as FBSpedADCRFileContract_BR;
        FileName tempFileName = contract.parmFileName();

        new InteropPermission(InteropKind::ClrInterop).assert();

        if (!System.IO.File::Exists(tempFileName))
        {
            return;
        }

        FileName tempCopySpedFileName;
        FileName tempZipArchiveFolder;
        try
        {
            tempZipArchiveFolder = System.IO.Path::Combine(
                System.IO.Path::GetDirectoryName(tempFileName),
                guid2Str(newGuid()));

            if (!System.IO.Directory::Exists(tempZipArchiveFolder))
            {
                System.IO.Directory::CreateDirectory(tempZipArchiveFolder);
            }

            tempCopySpedFileName = System.IO.Path::Combine(
                tempZipArchiveFolder,
                System.IO.Path::GetFileNameWithoutExtension(contract.parmSpedFileName()) + '.txt');

            System.IO.File::Copy(tempFileName, tempCopySpedFileName);

            FileName tempZipArchiveFileName = tempZipArchiveFolder + '.zip';
            System.IO.Compression.ZipFile::CreateFromDirectory(tempZipArchiveFolder, tempZipArchiveFileName);

            contract.parmFileName(tempZipArchiveFileName);
        }
        catch (Exception::CLRError)
        {
            System.Exception ex = ClrInterop::getLastException();
            ApplicationUnhandledExceptionLogger::logCLRException(ex);
            throw error(ex.Message);
        }
        finally
        {
            if (System.IO.File::Exists(tempFileName))
            {
                System.IO.File::Delete(tempFileName);
            }

            if (System.IO.File::Exists(tempCopySpedFileName))
            {
                System.IO.File::Delete(tempCopySpedFileName);
            }

            if (System.IO.Directory::Exists(tempZipArchiveFolder))
            {
                System.IO.Directory::Delete(tempZipArchiveFolder);
            }

            CodeAccessPermission::revertAssert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>