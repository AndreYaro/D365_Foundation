<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterJournalCreateVersioning</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormLetterJournalCreateVersioning</c> class is an abstract class that is used as the
/// versioning strategy for the journal creation.
/// </summary>
public abstract class FormLetterJournalCreateVersioning
{
    FormLetterVersionableJournalCreate   formLetterVersionableJournalCreate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the journal can be created.
    /// </summary>
    /// <returns>
    ///    true if journal can be created; otherwise, false.
    /// </returns>
    abstract public boolean check()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the line is discarded.
    /// </summary>
    /// <param name="_parmLine">
    ///    The line to be checked.
    /// </param>
    /// <returns>
    ///    true if the line should be discarded; otherwise, false.
    /// </returns>
    abstract public boolean checkDiscardLine(FormletterParmLine _parmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalChain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a journal chain.
    /// </summary>
    public void createJournalChain()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether journal history must be created.
    /// </summary>
    /// <returns>
    /// true if journal history must be created; otherwise, false.
    /// </returns>
    abstract public boolean createJournalHistory()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or updates a journal line based on a parameter line.
    /// </summary>
    /// <param name="_parmLine">
    ///    The parameter line based on which to create or update the journal line.
    /// </param>
    abstract public void createJournalLine(Common _parmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a link between the journal and the order.
    /// </summary>
    /// <param name="_parmLine">
    /// A parameter line indicating a journal line and an order line.
    /// </param>
    public void createJournalLink(Common _parmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the associated <c>FormLetterVersionableJournalCreate</c> object.
    /// </summary>
    public void init()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>FormLetterProvider</c> object.
    /// </summary>
    /// <param name="_formletterProvider">
    /// The <c>FormletterProvider</c> object to initialize.
    /// </param>
    public void initFormletterProvider(FormletterProvider _formletterProvider)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal header.
    /// </summary>
    public void initJournalHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from a <c>FormLetterContract</c>.
    /// </summary>
    /// <param name = "_formLetterContract">
    /// A <c>FormLetterContract</c> object.
    //</param>
    protected void initFromContract(FormLetterContract _formLetterContract)
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayUpdateIfHeaderChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method determines whether journal processing may be continued in case when only header data has changed,
    /// while lines remain the same.
    /// </summary>
    /// <returns>
    /// Boolean value false by default;
    /// </returns>
    /// <remarks>
    /// Overridden in FormLetterJournalCreateCorrection
    /// </remarks>
    public boolean mayUpdateIfHeaderChanged()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormLetterVersionableJournalCreate</Name>
				<Source><![CDATA[
    public FormLetterVersionableJournalCreate parmFormLetterVersionableJournalCreate(FormLetterVersionableJournalCreate _formLetterVersionableJournalCreate = formLetterVersionableJournalCreate)
    {
        formLetterVersionableJournalCreate = _formLetterVersionableJournalCreate;
        return formLetterVersionableJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an object of the class.
    /// </summary>
    /// <param name="_formLetterContract">
    ///    A <c>FormLetterContract</c> object to initialize based on.
    /// </param>
    /// <param name="_formLetterVersionableJournalCreate">
    ///    A <c>FormLetterVersionableJournalCreate</c> object to associate with the returned object.
    /// </param>
    /// <returns>
    ///    The constructed object.
    /// </returns>
    public static FormLetterJournalCreateVersioning newFormLetter(
        FormLetterContract                  _formLetterContract,
        FormLetterVersionableJournalCreate  _formLetterVersionableJournalCreate)
    {
        FormLetterJournalCreateVersioning formLetterJournalCreateVersioning;

        switch (_formLetterContract.parmVersioningUpdateType())
        {
            case VersioningUpdateType::Cancel,
                 VersioningUpdateType::Correction:
                formLetterJournalCreateVersioning = FormLetterJournalCreateCorrection::construct();
                _formLetterVersionableJournalCreate.setJournal(_formLetterContract.parmCallerTable());
                break;

            case VersioningUpdateType::Post:
                formLetterJournalCreateVersioning = FormLetterJournalCreatePost::construct();
                _formLetterVersionableJournalCreate.setJournal(_formLetterContract.parmCallerTable());
                break;

            default:
                formLetterJournalCreateVersioning = FormLetterJournalCreateInitialVersion::construct();
                break;
        }

        formLetterJournalCreateVersioning.parmFormLetterVersionableJournalCreate(_formLetterVersionableJournalCreate);

        return formLetterJournalCreateVersioning;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>