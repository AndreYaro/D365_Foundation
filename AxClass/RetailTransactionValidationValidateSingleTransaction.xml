<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationValidateSingleTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;
using Microsoft.Dynamics.Commerce.Runtime.DataModel;

using StringBuilder = System.Text.StringBuilder;
using StringWriter = System.IO.StringWriter;
using JsonTextWriter = Newtonsoft.Json.JsonTextWriter;

/// <summary>
/// The <c>RetailTransactionValidationValidateSingleTransaction</c> class contains logic to validate a single transaction.
/// </summary>
internal final class RetailTransactionValidationValidateSingleTransaction
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    private RetailTransactionTable transactionTable;
    private CustomerOrderInfo customerOrderInfo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the selected failed transactions from validation failures form.
    /// </summary>
    /// <param name = "_args">The argument for the execution.</param>
    public static void main(Args _args)
    {
        System.Exception ex;
        int fromLine = Global::infologLine();

        RetailTransactionTable transactionTable;
        try
        {
            ttsbegin;
            transactionTable = _args.record();
            transactionTable.ValidationStatus = RetailTransactionValidationStatus::InProgress;
            transactionTable.update();
            ttscommit;

            eventSource.SingleTransactionValidationFromUIStart(transactionTable.RecId);

            RetailTransactionValidationResultPersister resultPersister = RetailTransactionValidationResultPersister::construct(transactionTable);
            resultPersister.cleanUpPreviousErrors();

            RetailTransactionValidationCustomerOrderInfoCreator custOrderInfoCreator = RetailTransactionValidationCustomerOrderInfoCreator::construct(transactionTable);
            CustomerOrderInfo customerOrderInfo = custOrderInfoCreator.create();

            RetailTransactionValidationValidateSingleTransaction task = new RetailTransactionValidationValidateSingleTransaction();
            task.transactionTable = _args.record();
            task.customerOrderInfo = customerOrderInfo;

            RetailTransactionValidationResult validationResult = task.run();

            if (validationResult != null)
            {
                resultPersister.persist(validationResult);
            }

            eventSource.SingleTransactionValidationFromUIFinish(transactionTable.RecId);
        }
        catch(ex)
        {
            if (transactionTable.RecId)
            {
                eventSource.EventWriteTransactionValidationTransactionValidationClrError(transactionTable.RecId, ex.ToString());

                str infologMsgs = RetailUtilities::getInfologMessages(fromLine);

                RetailTransactionValidationSystemErrorHandler::markTransactionAsSystemError(transactionTable, infologMsgs);
            }
            else
            {
                eventSource.EventWriteTransactionValidationExceptionResultsInEmptyTransactionRecord(ex.ToString());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>RetailTransactionValidationValidateSingleTransaction</c>.
    /// </summary>
    /// <param name = "_transactionTable">The transaction record.</param>
    /// <param name = "_customerOrderInfo">The CustomerOrderInfo object.</param>
    /// <returns>A <c>RetailTransactionValidationValidateSingleTransaction</c> object.</returns>
    public static RetailTransactionValidationValidateSingleTransaction construct(RetailTransactionTable _transactionTable, CustomerOrderInfo _customerOrderInfo)
    {
        if (!_transactionTable || !_customerOrderInfo)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        RetailTransactionValidationValidateSingleTransaction instance = new RetailTransactionValidationValidateSingleTransaction();
        instance.transactionTable = _transactionTable;
        instance.customerOrderInfo = _customerOrderInfo;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the validate and updates the transaction with the results.
    /// </summary>
    /// <returns>
    /// The validation result if no exception was thrown during the validation or null if a exception was thrown.
    /// </returns>
    public RetailTransactionValidationResult run()
    {
        System.Exception ex;
        int fromLine;

        try 
        {
            fromLine = Global::infologLine();

            eventSource.EventWriteTransactionValidationTransactionWillBeValidated(transactionTable.RecId);
            
            List validationErrorsToBeInserted = this.validateTransaction();

            eventSource.EventWriteTransactionValidationTransactionValidated(transactionTable.RecId);

            return RetailTransactionValidationResult::construct(transactionTable, validationErrorsToBeInserted);
        }
        catch (ex)
        {
            eventSource.EventWriteTransactionValidationTransactionValidationClrError(transactionTable.RecId, ex.ToString());

            str infologMsgs = RetailUtilities::getInfologMessages(fromLine);

            RetailTransactionValidationSystemErrorHandler::markTransactionAsSystemError(transactionTable, infologMsgs);

            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransaction</Name>
				<Source><![CDATA[
    private List validateTransaction()
    {
        eventSource.EventWriteTransactionValidationStartTransactionValidation(transactionTable.RecId);

        RetailChannelTable channelTable = RetailChannelTable::findByRecId(transactionTable.Channel);

        // Create the class that orchestrates the rule invocation.
        RetailTransactionValidationRuleInvoker invoker = new RetailTransactionValidationRuleInvoker(customerOrderInfo, transactionTable.RecId, channelTable.DefaultCustAccount);

        // Iterate through all transaction-level rules and invoke them
        List transactionLevelRules = RetailTransactionValidationRuleMetadataCache::getTransactionLevelRules();
        ListEnumerator transactionLevelRulesEnumerator = transactionLevelRules.getEnumerator();

        while (transactionLevelRulesEnumerator.moveNext())
        {
            RetailTransactionValidationRuleMetadata ruleMetadata = transactionLevelRulesEnumerator.current();

            if (ruleMetadata.isApplicableTo(transactionTable.type))
            {
                invoker.invokeTransactionLevelRule(ruleMetadata);
            }
        }

        // Iterate through each line and invoke all line rules for them
        List lineRules = RetailTransactionValidationRuleMetadataCache::getLineLevelRules();

        for (int lineNum = 0; lineNum < customerOrderInfo.Items.Count; lineNum++)
        {
            ItemInfo itemInfo = customerOrderInfo.Items.get_Item(lineNum);

            ListEnumerator lineRulesEnumerator = lineRules.getEnumerator();
            while (lineRulesEnumerator.moveNext())
            {
                RetailTransactionValidationRuleMetadata ruleMetadata = lineRulesEnumerator.current();

                if (ruleMetadata.isApplicableTo(transactionTable.type))
                {
                    invoker.invokeLineLevelRule(ruleMetadata, itemInfo);
                }
            }
        }

        // Collect all errors to be reported
        List listOfErrors = invoker.getAllValidationErrors();

        str listOfErrorStr = this.getValidationErrorTypesJson(listOfErrors);

        eventSource.EventWriteTransactionValidationFinishTransactionValidation(transactionTable.RecId, listOfErrors.elements(), listOfErrorStr);

        return listOfErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationErrorTypesJson</Name>
				<Source><![CDATA[
    private str getValidationErrorTypesJson(List _listOfErrors)
    {
        var stringBuilder = new StringBuilder();

        using (var stringWriter = new StringWriter(stringBuilder))
        using (var writer = new JsonTextWriter(stringWriter))
        {
            writer.WriteStartArray();

            ListEnumerator errorEnumerator = _listOfErrors.getEnumerator();

            while (errorEnumerator.moveNext())
            {
                RetailTransactionValidationError validationError = errorEnumerator.current();
                writer.WriteValue(enum2Symbol(enumNum(RetailTransactionValidationType), validationError.ValidationType));
            }

            writer.WriteEndArray();
        }

        return stringBuilder.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>