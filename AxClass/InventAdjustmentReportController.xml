<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAdjustmentReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventAdjustmentReportController</c> class is the controller class for the
///    <c>InventAdjTransaction</c> and <c>InventAdjOnHand</c> SRS report.
/// </summary>
class InventAdjustmentReportController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether to show the Batch tab in the report dialog.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        InventAdjustmentReportContract inventAdjustmentReportContract = this.parmReportContract().parmRdpContract() as InventAdjustmentReportContract;
        if (inventAdjustmentReportContract.parmTmpTableDataRecId() > 0)
        {
            SRSReportRunPermission permission = new SRSReportRunPermission();
            permission.assert();
            int infologLinesCounter = infologLine();
            try // Catch error if cleanup has already been done
            {
                SRSTmpTblMarshaller::deleteTmpTblData(inventAdjustmentReportContract.parmTmpTableDataRecId());
            }
            catch (Exception::Error)
            {
                infolog.clear(infologLinesCounter);
            }
            CodeAccessPermission::revertAssert();
        }
        RecId recId = this.processReport(this.parmArgs().record(),this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
        inventAdjustmentReportContract.parmTmpTableDataRecId(recId);
        this.saveLast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic for the <c>InventAdjTransaction</c> and <c>InventAdjOnHand</c> SSRS
    ///    report.
    /// </summary>
    /// <param name="_tmpCaller">
    ///    The <c>TmpFormLookUp</c> table.
    /// </param>
    /// <param name="_query">
    ///    The <c>Query</c> object.
    /// </param>
    /// <returns>
    ///    Returns the record ID of the temporary table that was inserted into the <c>SRSTmpDataStore</c>
    ///    table.
    /// </returns>
    protected RecId processReport(
        TmpFormLookUp _tmpCaller,
        Query _query)
    {
        InventAdjustmentReportTmp   inventAdjustmentReportTmp;

        QueryRun queryRun = new QueryRun(_query);

        queryRun.setRecord(_tmpCaller);

        //Insert data in to the temporary table
        while (queryRun.next())
        {
            TmpFormLookUp tmpFormLookUp = queryRun.get(tableNum(TmpFormLookUp));
            InventDim inventDim = InventDim::find(tmpFormLookUp.InventDimId);

            inventAdjustmentReportTmp.AdjustNow               =   tmpFormLookUp.AdjustNow;
            inventAdjustmentReportTmp.PostedValue             =   tmpFormLookUp.PostedValue;
            inventAdjustmentReportTmp.DateFinancial           =   tmpFormLookUp.DateFinancial;
            inventAdjustmentReportTmp.ItemId                  =   tmpFormLookUp.ItemId;
            inventAdjustmentReportTmp.Qty                     =   tmpFormLookUp.Qty;
            inventAdjustmentReportTmp.ValueAdjustment         =   tmpFormLookUp.ValueAdjustment;
            inventAdjustmentReportTmp.LineNo                  =   tmpFormLookUp.LineNo;

            inventAdjustmentReportTmp.InventDimFieldsMap::initProductDimensionsFrom(inventDim);
            inventAdjustmentReportTmp.InventLocationId        =   inventDim.InventLocationId;
            inventAdjustmentReportTmp.insert();
        }

        SRSReportRunPermission permission = new SRSReportRunPermission();
        permission.assert();

        RecId tmpTableDataRecId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(inventAdjustmentReportTmp);
        delete_from inventAdjustmentReportTmp;
        CodeAccessPermission::revertAssert();

        return tmpTableDataRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventAdjustmentReportController  controller  = new InventAdjustmentReportController();

        switch (_args.menuItemName())
        {
            case menuitemOutputStr(InventAdjTransaction):
                controller.parmReportName(ssrsReportStr(InventAdjTransaction, Report));
                break;
            case menuitemOutputStr(InventAdjOnHand):
                controller.parmReportName(ssrsReportStr(InventAdjOnHand, Report));
                break;
            default:
                throw error(strFmt("@SYS22828", funcName()));
        }
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
