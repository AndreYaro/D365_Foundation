<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmEmploymentDateManagerFormExtensionAppSuiteHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handler for <c>HcmEmploymentDateManager.Extension</c> class events.
/// </summary>
public class HcmEmploymentDateManagerFormExtensionAppSuiteHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmEmployment_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the <c>OnActivated</c> method for the <c>HcmEmploymentDateManager</c> form.
    /// </summary>
    /// <param name = "_sender">The form data source.</param>
    /// <param name = "_e">The data souces event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmEmploymentDateManager, HcmEmployment), FormDataSourceEventType::Activated)]
    public static void HcmEmployment_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        var contractorTabPage = _sender.formRun().design().controlName(formControlStr(HcmEmploymentDateManager, contractorTabPage)) as FormTabPageControl;
        FormDataSource hcmEmployment_ds = _sender.formRun().dataSource(formDataSourceStr(HcmEmploymentDateManager, HcmEmployment)) as FormDataSource;
        HcmEmployment hcmEmployment = hcmEmployment_ds.cursor();

        contractorTabPage.visible(hcmEmployment.EmploymentType == HcmEmploymentType::Contractor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmEmploymentContractor_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the <c>OnInitialized</c> method for the <c>HcmEmploymentDateManager</c> form.
    /// </summary>
    /// <param name = "_sender">The form data source.</param>
    /// <param name = "_e">The data souces event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmEmploymentDateManager, HcmEmploymentContractor), FormDataSourceEventType::Initialized)]
    public static void HcmEmploymentContractor_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.query().dataSourceTable(tableNum(HcmEmploymentContractor)).addSortField(fieldNum(HcmEmploymentContractor,ValidFrom),SortOrder::Descending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmEmploymentContractor_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the <c>OnInitValue</c> method for the <c>HcmEmploymentDateManager</c> form.
    /// </summary>
    /// <param name = "_sender">The form data source.</param>
    /// <param name = "_e">The data souces event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmEmploymentDateManager, HcmEmploymentContractor), FormDataSourceEventType::InitValue)]
    public static void HcmEmploymentContractor_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        HcmEmploymentContractor sourceEmploymentContractor;

        HcmEmploymentContractor hcmEmploymentContractor = _sender.cursor();
        FormDataSource hcmEmployment_ds = _sender.formRun().dataSource(formDataSourceStr(HcmEmploymentDateManager, HcmEmployment)) as FormDataSource;
        HcmEmployment hcmEmployment = hcmEmployment_ds.cursor();

        utcdatetime minDateTime = DateTimeUtil::minValue();
        utcdatetime maxDateTime = DateTimeUtil::maxValue();

        select firstonly ValidTimeState(minDateTime, maxDateTime) sourceEmploymentContractor
            order by ValidFrom desc
            where sourceEmploymentContractor.Employment == hcmEmployment.RecId;

        if (sourceEmploymentContractor.RecId != 0)
        {
            buf2Buf(sourceEmploymentContractor, hcmEmploymentContractor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Contractor_Vendor_VendorID_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmWorker MainTab form control OnTabChanged event handler for the HcmWorker form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmEmploymentDateManager, Contractor_Vendor_VendorID), FormControlEventType::Validated)]
    public static void Contractor_Vendor_VendorID_OnValidated(FormControl _sender, FormControlEventArgs _e)
    {
        HcmEmploymentDateManagerFormExtensionAppSuiteHandler::setVendorDataAreaId(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PurchTable_PurchID_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmWorker MainTab form control OnTabChanged event handler for the HcmWorker form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmEmploymentDateManager, PurchTable_PurchID), FormControlEventType::Validated)]
    public static void PurchTable_PurchID_OnValidated(FormControl _sender, FormControlEventArgs _e)
    {
        HcmEmploymentDateManagerFormExtensionAppSuiteHandler::setVendorDataAreaId(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendorDataAreaId</Name>
				<Source><![CDATA[
    private static void setVendorDataAreaId(FormControl _employmentContractorControl)
    {
        // Retrieve the employment from the calling form
        FormRun hcmWorkerForm = _employmentContractorControl.formRun();
        FormDataSource employmentContractor_ds = hcmWorkerForm.dataSource(formDataSourceStr(HcmEmploymentDateManager, HcmEmploymentContractor)) as FormDataSource;
        HcmEmploymentContractor employmentContractor = employmentContractor_ds.cursor();

        if (employmentContractor.VendorDataAreaID == '')
        {
            // Retrieve the employment from the calling form
            FormDataSource hcmEmployment_ds = hcmWorkerForm.dataSource(formDataSourceStr(HcmWorker, HcmEmployment)) as FormDataSource;
            HcmEmployment employment = hcmEmployment_ds.cursor();

            //
            // The HcmEmploymentContractor.VendorDataAreaID field provides the DataArea containment
            // for both the Vendor and Purchase order selections.
            // Once set for either a Vendor or Purchase order selection it should not be changeable because it
            // must remain the same. Any subsequent Vendor or Purchase Order selection
            // must be valid for the existing DataArea containment.
            //
            employmentContractor.VendorDataAreaID = CompanyInfo::getDataArea(employment.LegalEntity);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>