<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransWMSOrderChildReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransWMSOrderChildReference</c> class is responsible for handling the <c>WMSOrder</c> inventory reference
/// from an <c>InventTrans</c> buffer.
/// </summary>
[InventTransChildTypeFactory(InventTransChildType::WMSOrder)]
final class InventTransWMSOrderChildReference extends InventTransChildReference
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInstantiateIssueChildMovement</Name>
				<Source><![CDATA[
    public boolean canInstantiateIssueChildMovement()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateIssueChildMovement</Name>
				<Source><![CDATA[
    public InventMovement instantiateIssueChildMovement()
    {
        return InventMovement::construct(this.parmInventTrans().wmsOrder(true), this.parmInventTrans().Qty > 0 ? InventMovSubType::TransferReceipt : InventMovSubType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReferenceSpecificJumpRef</Name>
				<Source><![CDATA[
    public boolean hasReferenceSpecificJumpRef()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performJumpRef</Name>
				<Source><![CDATA[
    public void performJumpRef()
    {
        Args            args = new Args();
        MenuFunction    menuFunction = new MenuFunction(menuitemdisplaystr(WMSOrder), MenuItemType::Display);
        
        // Check access rights
        if (!menuFunction || !menuFunction.checkAccessRights())
        {
            // Access rights are not sufficient to use this function.
            throw error("@SYS81158");
        }
        
        args.record(this.parmInventTrans().wmsOrder());
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferenceExpectedDate</Name>
				<Source><![CDATA[
    public void updateReferenceExpectedDate()
    {
        ttsbegin;

        WMSOrder wmsOrder = this.parmInventTrans().wmsOrder(true);

        if (wmsOrder)
        {
            wmsOrder.DlvDate = this.parmInventTrans().DateExpected;
            wmsOrder.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferenceQuantity</Name>
				<Source><![CDATA[
    public void updateReferenceQuantity(InventDimId _fromInventDimId, InventDimId _toInventDimId, boolean _isPhysicalReservation, InventQty _inventQty, PdsCWInventQty _cwQty)
    {
        ttsbegin;

        WMSOrder    wmsOrder = this.parmInventTrans().wmsOrder(true);

        if (wmsOrder)
        {
            wmsOrder.updateReservOrderedDim(InventDim::find(_fromInventDimId), InventDim::find(_toInventDimId), _inventQty, _isPhysicalReservation, _cwQty);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateReferenceQuantity</Name>
				<Source><![CDATA[
    public boolean canUpdateReferenceQuantity(InventDimId _fromInventDimId, InventDimId _toInventDimId, InventQty _inventQty, PdsCWInventQty _cwQty)
    {
        boolean     canUpdateQuantity = false;
        WMSOrder    wmsOrder = this.parmInventTrans().wmsOrder();

        if (wmsOrder)
        {
            canUpdateQuantity = wmsOrder.canUpdateReservOrderedDim(InventDim::find(_fromInventDimId), InventDim::find(_toInventDimId), _inventQty, _cwQty);
        }
        
        return canUpdateQuantity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>