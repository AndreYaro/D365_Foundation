<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResUnitConvertedPhysicalDimensions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResUnitConvertedPhysicalDimensions</c> class provides access to physical dimensions
/// converted from another <c>EcoResIPhysicalDimensions</c> object.
/// </summary>
internal final class EcoResUnitConvertedPhysicalDimensions implements EcoResIPhysicalDimensions
{
    private const EcoResProductRecId    NoProductRecId = 0;
    private const NoYes                 RoundAbsoluteValue = NoYes::Yes;
    private const NoYes                 NoRounding = NoYes::No;

    private EcoResIPhysicalDimensions   convertingPhysicalDimensions;

    private UnitOfMeasureSymbol convertingMassUnitSymbol;
    private UnitOfMeasureSymbol convertingLengthUnitSymbol;
    private UnitOfMeasureSymbol convertingVolumeUnitSymbol;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        EcoResIPhysicalDimensions   _convertingPhysicalDimensions,
        UnitOfMeasureSymbol         _convertingMassUnitSymbol,
        UnitOfMeasureSymbol         _convertingLengthUnitSymbol,
        UnitOfMeasureSymbol         _convertingVolumeUnitSymbol)
    {
        convertingPhysicalDimensions = _convertingPhysicalDimensions;
        convertingMassUnitSymbol     = _convertingMassUnitSymbol;
        convertingLengthUnitSymbol   = _convertingLengthUnitSymbol;
        convertingVolumeUnitSymbol   = _convertingVolumeUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhysicalUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public UnitOfMeasureSymbol parmPhysicalUnitSymbol()
    {
        return convertingPhysicalDimensions.parmPhysicalUnitSymbol();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWeight</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public Weight parmWeight()
    {
        return this.convertMass(convertingPhysicalDimensions.parmWeight());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConvertMass</Name>
				<Source><![CDATA[
    private boolean mustConvertMass(Weight _weight)
    {
        return _weight && convertingPhysicalDimensions.parmMassUnitSymbol() && this.parmMassUnitSymbol() && convertingPhysicalDimensions.parmMassUnitSymbol() != this.parmMassUnitSymbol();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertMass</Name>
				<Source><![CDATA[
    private Weight convertMass(Weight _weight)
    {
        if (this.mustConvertMass(_weight))
        {
            return UnitOfMeasureConverter::convert(_weight,
                    UnitOfMeasure::findBySymbol(convertingPhysicalDimensions.parmMassUnitSymbol()).RecId,
                    UnitOfMeasure::findBySymbol(this.parmMassUnitSymbol()).RecId,
                    RoundAbsoluteValue, NoProductRecId, NoRounding);
        }

        return _weight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMassUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public UnitOfMeasureSymbol parmMassUnitSymbol()
    {
        return convertingMassUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWidth</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventWidth parmWidth()
    {
        return this.convertLength(convertingPhysicalDimensions.parmWidth());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDepth</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventDepth parmDepth()
    {
        return this.convertLength(convertingPhysicalDimensions.parmDepth());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeight</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventHeight parmHeight()
    {
        return this.convertLength(convertingPhysicalDimensions.parmHeight());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConvertLength</Name>
				<Source><![CDATA[
    private boolean mustConvertLength(WHSLength _length)
    {
        return _length && convertingPhysicalDimensions.parmLengthUnitSymbol() && this.parmLengthUnitSymbol() && convertingPhysicalDimensions.parmLengthUnitSymbol() != this.parmLengthUnitSymbol();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertLength</Name>
				<Source><![CDATA[
    private WHSLength convertLength(WHSLength _length)
    {
        if (this.mustConvertLength(_length))
        {
            return UnitOfMeasureConverter::convert(_length,
                    UnitOfMeasure::findBySymbol(convertingPhysicalDimensions.parmLengthUnitSymbol()).RecId,
                    UnitOfMeasure::findBySymbol(this.parmLengthUnitSymbol()).RecId,
                    RoundAbsoluteValue, NoProductRecId, NoRounding);
        }

        return _length;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLengthUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public UnitOfMeasureSymbol parmLengthUnitSymbol()
    {
        return convertingLengthUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVolume</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public Volume parmVolume()
    {
        return this.convertVolume(convertingPhysicalDimensions.parmVolume());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConvertVolume</Name>
				<Source><![CDATA[
    private boolean mustConvertVolume(Volume _volume)
    {
        return _volume && convertingPhysicalDimensions.parmVolumeUnitSymbol() && this.parmVolumeUnitSymbol() && convertingPhysicalDimensions.parmVolumeUnitSymbol() != this.parmVolumeUnitSymbol();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertVolume</Name>
				<Source><![CDATA[
    private Volume convertVolume(Volume _volume)
    {
        if (this.mustConvertVolume(_volume))
        {
            return UnitOfMeasureConverter::convert(_volume,
                    UnitOfMeasure::findBySymbol(convertingPhysicalDimensions.parmVolumeUnitSymbol()).RecId,
                    UnitOfMeasure::findBySymbol(this.parmVolumeUnitSymbol()).RecId,
                    RoundAbsoluteValue, NoProductRecId, NoRounding);
        }

        return _volume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVolumeUnitSymbol</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public UnitOfMeasureSymbol parmVolumeUnitSymbol()
    {
        return convertingVolumeUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a physical dimension object based on another physical dimension object.
    /// </summary>
    /// </summary>
    /// <param name = "_convertingPhysicalDimensions">
    /// A <c>EcoResIPhysicalDimensions</c> to convert.
    /// </param>
    /// <param name = "_convertingMassUnitSymbol">
    /// A mass unit to convert to.
    /// </param>
    /// <param name = "_convertingLengthUnitSymbol">
    /// A length unit to convert to.
    /// </param>
    /// <param name = "_convertingVolumeUnitSymbol">
    /// A volume unit to convert to.
    /// </param>
    /// <returns>
    /// The <c>EcoResIPhysicalDimensions</c> object.
    /// </returns>
    [Hookable(false)]
    static internal EcoResIPhysicalDimensions createInstance(
        EcoResIPhysicalDimensions   _convertingPhysicalDimensions,
        UnitOfMeasureSymbol         _convertingMassUnitSymbol,
        UnitOfMeasureSymbol         _convertingLengthUnitSymbol,
        UnitOfMeasureSymbol         _convertingVolumeUnitSymbol)
    {
        return new EcoResUnitConvertedPhysicalDimensions(
            _convertingPhysicalDimensions, 
            _convertingMassUnitSymbol, 
            _convertingLengthUnitSymbol, 
            _convertingVolumeUnitSymbol);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>