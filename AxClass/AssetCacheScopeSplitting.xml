<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCacheScopeSplitting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetCacheScopeSplitting</c> class implements logic for asset cache scope of the asset splitting.
/// </summary>
[AssetCacheScope(AssetCacheScope::Splitting)]
internal class AssetCacheScopeSplitting extends AssetCacheScopeBase
{
    private const str KeyToCheckThatAnySplittingJournalExists = 'DoesAnySplittingJournalExist';
    private const int IndexOfAssetSplitJournal = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSplittingCache</Name>
				<Source><![CDATA[
    private container getSplittingCache(container _cacheList, int _idx)
    {
        if (_idx)
        {
            return AssetCacheScopeBase::getValue(conPeek(_cacheList, _idx));
        }
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheByAssetBook</Name>
				<Source><![CDATA[
    internal anytype getCacheByAssetBook(AssetId _assetId, AssetBookId _bookId)
    {
        boolean ret;

        if (_assetId && _bookId && this.doesAssetSplitJournalExist())
        {
            str key = AssetCacheManager::getKeyByAssetBook(_assetId, _bookId);
            container cacheList = AssetCache::getValue(AssetCacheScope::Splitting, LimitedCacheAssetListKey);
            int idx = AssetCacheScopeBase::findKeyIndexInCacheList(cacheList, key);
            container cache = this.getSplittingCache(cacheList, idx);
            if (cache == conNull())
            {
                ret = AssetSplit::doesAssetSplitJournalExistForAssetBook(_assetId, _bookId);
            }
            else
            {
                ret = conPeek(cache, IndexOfAssetSplitJournal);
            }
            cacheList = AssetCacheScopeBase::reprioritizeAssetBookInCacheList(cacheList, idx, key, [ret]);
            cacheList = AssetCacheScopeBase::removeMostOutdatedKeyFromCacheList(cacheList);
            AssetCache::insertValue(AssetCacheScope::Splitting, LimitedCacheAssetListKey, cacheList);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCache</Name>
				<Source><![CDATA[
    internal container getCache(str _key = LimitedCacheAssetListKey)
    {
        return AssetCache::getValue(AssetCacheScope::Splitting, _key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesAssetSplitJournalExist</Name>
				<Source><![CDATA[
    private boolean doesAssetSplitJournalExist()
    {
        boolean ret;
        str key = AssetCacheScopeSplitting::getKeyToCheckThatAnySplittingJournalExists();
        container cache = AssetCache::getValue(AssetCacheScope::Splitting, key);

        if (cache == conNull())
        {
            ret = AssetSplit::doesAssetSplitJournalExist();
            AssetCache::insertValue(AssetCacheScope::Splitting, key, ret);
        }
        else
        {
            ret = conPeek(cache, IndexOfAssetSplitJournal);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeValue</Name>
				<Source><![CDATA[
    internal void removeValue(str _key)
    {
        AssetCache::insertValue(AssetCacheScope::Splitting, AssetCacheScopeSplitting::getKeyToCheckThatAnySplittingJournalExists(), conNull());
        container cacheList = AssetCache::getValue(AssetCacheScope::Splitting, LimitedCacheAssetListKey);
        int idx = AssetCacheScopeBase::findKeyIndexInCacheList(cacheList, _key);
        if (idx)
        {
            cacheList = conPoke(cacheList, idx, [_key, conNull()]);
            AssetCache::insertValue(AssetCacheScope::Splitting, LimitedCacheAssetListKey, cacheList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyToCheckThatAnySplittingJournalExists</Name>
				<Source><![CDATA[
    internal static str getKeyToCheckThatAnySplittingJournalExists()
    {
        return AssetCacheManager::addDataAreaPostfixToKey(KeyToCheckThatAnySplittingJournalExists);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>