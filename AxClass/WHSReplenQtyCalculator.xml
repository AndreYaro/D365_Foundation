<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReplenQtyCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSReplenQtyCalculator</c> class is used to calculate available replenishment quantity.
/// </summary>
internal final class WHSReplenQtyCalculator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAvailableInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the available replenishment quantity in inventory unit.
    /// </summary>
    /// <param name="_workBuildId">
    /// The work build id.
    /// </param>
    /// <param name="_inventDimId">
    /// The dimension set for the inventory to be replenished.
    /// </param>
    /// <param name="_location">
    /// The location for the inventory to be replenished.
    /// </param>
    /// <param name="_itemId">
    /// The item Id for the inventory to be replenished.
    /// </param>
    /// <returns>
    /// The available replenishment quantity in inventory unit.
    /// </returns>
    [Hookable(false)] 
    internal static InventQty calculateAvailableInventQty(WHSWorkBuildId _workBuildId, InventDimId _inventDimId, WMSLocation _location, ItemId _itemId)
    {
        InventQty availReplenInventQty;
        InventDim inventDim;

        inventDim = InventDim::find(_inventDimId);
        inventDim.clearInventDimId();
        inventDim.wmsLocationId = _location.wmsLocationId;

        availReplenInventQty = WHSInventOnHand::getWorkPhysicalAvailHandlingQtyByInventDim(_itemId, inventDim, false);
        availReplenInventQty += WHSReplenQtyCalculator::getAllocatedReplenQty(_workBuildId, _inventDimId, _location.inventLocationId, _location.wmsLocationId, _itemId);
        availReplenInventQty += WHSReplenQtyCalculator::getReplenQtyInTempTable(_workBuildId, _inventDimId, _location, _itemId);
        availReplenInventQty -= WHSLocationDirective::getAllocAndAvailPhysicalQtyInTempTable(_inventDimId,
                                                                                    _location.InventLocationId,
                                                                                    _location.wmsLocationId,
                                                                                    _itemId);

        // We may end up with negative quantity because by getAllocAndAvailPhysicalQtyInTempTable() call we get consumption from
        // all currently running waves. While when we calculate available replenishment quantity we take into account only current wave.
        // Negative quantity may happen only in concurrent scenario - when several waves are running in parallel.
        availReplenInventQty = max(0, availReplenInventQty);

        return availReplenInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocatedReplenQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the quantity on a location that is allocated to existing replenishment work.
    /// </summary>
    /// <param name="_workBuildId">
    /// The work build id.
    /// </param>
    /// <param name="_inventDimId">
    /// The work inventory dimension set.
    /// </param>
    /// <param name="_inventLocationId">
    /// The replenishment put warehouse
    /// </param>
    /// <param name="_wmsLocationId">
    /// The replenishment put location
    /// </param>
    /// <param name="_itemId">
    /// The Item Id of the item.
    /// </param>
    /// <returns>
    /// The replenishment quantity allocated to an existing replenishment work header.
    /// </returns>
    private static InventQty getAllocatedReplenQty(
            WHSWorkBuildId      _workBuildId,
            InventDimId         _inventDimId,
            InventLocationId    _inventLocationId,
            WmsLocationId       _wmsLocationId,
            ItemId              _itemId)
    {
        WHSReplenWorkLink   replenWorkLink;
        WHSWorkLine         workline;
        WHSWorkTable        workTable;

        select sum(InventQty) from replenWorkLink
        where replenWorkLink.WorkBuildId == _workBuildId
        exists join workline
            where workLine.WorkId == replenWorkLink.ReplenWorkId
                && workLine.ItemId == _itemId
                && workLine.WmsLocationId == _wmsLocationId
                && workLine.InventDImId == _inventDimId
                && workLine.WorkType == WHSWorkType::Put
        exists join workTable
            where workTable.WorkId                  == workLine.WorkId
                && workTable.InventLocationId       == _inventLocationId;

        return replenWorkLink.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReplenQtyInTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an "incoming" replenishment quantity for specified item and dimensions in the <c>WHSTmpWorkLine</c> table.
    /// Takes into consideration only temp work lines which are created as part of current <c>workBuildId</c>.
    /// </summary>
    /// <param name="_workBuildId">
    /// The work build id.
    /// </param>
    /// <param name="_inventDimId">
    /// Identification of dimensions for the item that is replenished.
    /// </param>
    /// <param name="_location">
    /// Location to which replenishment puts meterial.
    /// </param>
    /// <param name="_itemId">
    /// Item number being replenished.
    /// </param>
    /// <returns>
    /// Quantity already being replenished in the <c>WHSTmpWorkLine</c> table for the specified parameters.
    /// </returns>
    /// <remarks>
    /// We take into account only temp replenishment lines created as part of our wave processing because
    /// it is not generally correct to take quantity from not yet created replenishment work from another wave.
    /// It also causes all sorts of concurrency issues.
    /// </remarks>
    private static InventQty getReplenQtyInTempTable(
        WHSWorkBuildId         _workBuildId,
        InventDimId            _inventDimId,
        WMSLocation            _location,
        ItemId                 _itemId)
    {
        WHSTmpWorkLine  tmpWorkLineLocal;
        InventDim       inventDim;
        InventDimParm   inventDimParm;
        InventDim       inventDimCriteria = InventDim::find(_inventDimId);

        inventDimParm.initFromInventDim(inventDimCriteria);

        select sum(InventQty) from tmpWorkLineLocal
            where tmpWorkLineLocal.WMSLocationId     == _location.WMSLocationId
            &&    tmpWorkLineLocal.InventLocationId  == _location.inventLocationId
            &&    tmpWorkLineLocal.ItemId            == _itemId
            &&    tmpWorkLineLocal.WorkTransType     == WHSWorkTransType::Replenishment
            &&    tmpWorkLineLocal.WorkType          == WHSWorkType::Put
            &&    tmpWorkLineLocal.WorkCreateId      == _workBuildId
                #InventDimExistsJoin(tmpWorkLineLocal.inventDimId, inventDim, inventDimCriteria, inventDimParm);

        return tmpWorkLineLocal.InventQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>