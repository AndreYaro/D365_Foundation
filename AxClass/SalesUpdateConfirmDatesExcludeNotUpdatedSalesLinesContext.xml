<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesUpdateConfirmDatesExcludeNotUpdatedSalesLinesContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>SalesUpdateConfirmDatesExcludeNotUpdatedSalesLinesContext</c> contains delivery schedule data of non-updated sales lines 
/// during the execution of the mechanism responsible for setting confirmed dates. 
/// Using this context enables the mechanism to consider only the updated sales lines, ensuring the accuracy of the on-hand quantity.
/// </summary>
internal final class SalesUpdateConfirmDatesExcludeNotUpdatedSalesLinesContext implements System.IDisposable
{
    private static SalesUpdateConfirmDatesExcludeNotUpdatedSalesLinesContext instance;

    protected Map deliveryQtyByDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        instance = this;

        this.deliveryQtyByDate = new Map(typeName2Type(extendedTypeStr(DateExpected)), Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    internal static SalesUpdateConfirmDatesExcludeNotUpdatedSalesLinesContext current()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add <c>SalesLine</c> buffer representing delivery line to a map that collects delivery dates and quantities.
    /// </summary>
    /// <param name = "_salesLine">
    /// The delivery <c>SalesLine</c> buffer to be added.
    /// </param>
    internal void addLine(SalesLine _salesLine)
    {
        if (deliveryQtyByDate.exists(_salesLine.ShippingDateRequested))
        {
            deliveryQtyByDate.insert(_salesLine.ShippingDateRequested, deliveryQtyByDate.lookup(_salesLine.ShippingDateRequested) + _salesLine.SalesQty);
        }
        else
        {
            deliveryQtyByDate.insert(_salesLine.ShippingDateRequested, _salesLine.SalesQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShippingQtyByDateMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a map with delivery quantity per date, where the key is the date and the value is the quantity.
    /// </summary>
    /// <returns>
    /// A map with collected data {key: date, value: quantity}.
    /// </returns>
    internal Map getShippingQtyByDateMap()
    {
        return deliveryQtyByDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>SalesUpdateConfirmDatesExcludeNotUpdatedSalesLinesContext</c> context.
    /// </summary>    
    /// <returns>
    /// An instance of <c>SalesUpdateConfirmDatesExcludeNotUpdatedSalesLinesContext</c> context.
    /// </returns>
    internal static SalesUpdateConfirmDatesExcludeNotUpdatedSalesLinesContext construct()
    {  
        return new SalesUpdateConfirmDatesExcludeNotUpdatedSalesLinesContext();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>