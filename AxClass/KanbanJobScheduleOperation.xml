<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobScheduleOperation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobScheduleOperation</c> class implements the business logic that is required to
///    perform compound schedule operations on multiple kanban jobs.
/// </summary>
public class KanbanJobScheduleOperation
{
    RefRecId wrkCtrResourceGroupRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canMoveBackward</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether all the selected kanban jobs can be moved one position back in the schedule.
    /// </summary>
    /// <param name = "_kanbanJob">Kanban job record to move.</param>
    /// <returns>
    ///    true if the selected kanban jobs can be moved; otherwise, false.
    /// </returns>
    public static boolean canMoveBackward(KanbanJob _kanbanJob)
    {
        return KanbanJobScheduleOperation::getPreviousKanbanJob(_kanbanJob) != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the previous kanban job schedule record in the same period if it exists.
    /// </summary>
    /// <param name = "_kanbanJob">Kanban Job record to search previous job for.</param>
    /// <returns>Kanban job schedule record of previous kanban job if found.</returns>
    public static KanbanJobSchedule getPreviousKanbanJob(KanbanJob _kanbanJob)
    {
        KanbanJobSchedule prevKjs;
        KanbanJob         kanbanJobPrev;

        if (_kanbanJob != null && _kanbanJob.Status == LeanKanbanJobStatus::Planned)
        {
            KanbanJobSchedule kjs = KanbanJobSchedule::findJob(_kanbanjob.recId);

            select firstonly prevKjs order by prevKjs.Sequence desc
                exists join kanbanJobPrev
                where kjs.PlannedPeriod     == prevKjs.PlannedPeriod
                    && kjs.WorkCell         == prevKjs.WorkCell
                    && kjs.Sequence         > prevKjs.Sequence
                    && kanbanJobPrev.RecId  == prevKjs.Job
                    && kanbanJobPrev.status == LeanKanbanJobStatus::Planned;
        }

        return prevKjs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveForward</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether all the selected kanban jobs can be moved one position forward in the schedule.
    /// </summary>
    /// <param name = "_kanbanJob">Kanban Job record to search next job for.</param>
    /// <returns>
    ///    true if the selected kanban job can be moved; otherwise, false.
    /// </returns>
    public static boolean canMoveForward(KanbanJob _kanbanJob)
    {
        return KanbanJobScheduleOperation::getNextKanbanJob(_kanbanJob) != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the next kanban job schedule record in the same period if it exists.
    /// </summary>
    /// <param name = "_kanbanJob"> Kanban Job record to search next job for.</param>
    /// <returns> Kanban job schedule record of next kanban job if found.</returns>
    public static KanbanJobSchedule getNextKanbanJob(KanbanJob _kanbanJob)
    {
        KanbanJobSchedule nextKjs;
        KanbanJob         kanbanJobNext;

        if (_kanbanJob != null && _kanbanJob.Status == LeanKanbanJobStatus::Planned)
        {
            KanbanJobSchedule kjs = KanbanJobSchedule::findJob(_kanbanjob.recId);

            select firstonly nextKjs order by nextKjs.Sequence asc
                exists join kanbanJobNext
                where kjs.PlannedPeriod     == nextKjs.PlannedPeriod
                    && kjs.WorkCell         == nextKjs.WorkCell
                    && kjs.Sequence         < nextKjs.Sequence
                    && kanbanJobNext.RecId  == nextKjs.Job
                    && kanbanJobNext.status ==LeanKanbanJobStatus::Planned;
        }

        return nextKjs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the status of the selected kanban jobs.
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job to change status for.</param>
    /// <param name = "_parmId">Parm id for the update if provided.</param>
    /// <param name = "_firstJob">Indicates the first job for update.</param>
    /// <returns>The parm id generated or kept.</returns>
    /// <remarks>
    ///    The <c>KanbanJobResetCreated</c> menu item will open a form to let the user select the target
    ///    status for the selected jobs.
    /// </remarks>
    public static ParmId changeStatus(KanbanJob _kanbanJob, ParmId _parmId, boolean _firstJob)
    {
        KanbanJobStatusUpdate           kanbanJobStatusUpdate;

        // Create a kanbanJobStatusUpdate record for it before calling the menu item
        // that will retrieve them to show the form offering changing their status
        KanbanJobStatus kanbanJobStatus = KanbanJobStatus::newKanbanJob(_kanbanJob, true);
        if (_firstJob)
        {
            // First record defines parmId, and the rest copy it
            kanbanJobStatusUpdate = KanbanJobStatusUpdate::makeParameters(kanbanJobStatus, LeanKanbanJobStatus::NotPlanned, true, false);
            _parmId = kanbanJobStatusUpdate.ParmId;
        }
        else
        {
            kanbanJobStatusUpdate = KanbanJobStatusUpdate::makeParameters(kanbanJobStatus, LeanKanbanJobStatus::NotPlanned, false, false);
            kanbanJobStatusUpdate.ParmId = _parmId;
        }

        ttsbegin;
        kanbanJobStatusUpdate.insert();
        ttscommit;

        return _parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPeggingTreeAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies the pegging tree supply availability of the selected kanban jobs.
    /// </summary>
    /// <param name = "_kanbanJob">Kanban job to check availability.</param>
    /// <returns>true if available; false otherwise.</returns>
    public static boolean checkPeggingTreeAvailable(KanbanJob _kanbanJob)
    {
         return KanbanJobPeggingTreeSupplyAvailable::newKanbanJob(_kanbanJob).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEventKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates event kanbans for the picking list lines of the selected kanban jobs.
    /// </summary>
    /// <param name = "_kanbanJob">Kanban job to create event kanbans for.</param>
    public static void createEventKanbans(KanbanJob _kanbanJob)
    {
        KanbanJobPickingList            kanbanJobPickingList;

        while select kanbanJobPickingList
            where kanbanJobPickingList.Job == _kanbanJob.RecId
        {
            ReqEventProcessKanban::newStandard(kanbanJobPickingList, true).runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCapacityConsumptionPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the consumption percentage of the specific job vs. the whole period.
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job to calculate consumption for.</param>
    /// <param name = "_planningPeriod">The planning period to calculate for.</param>
    /// <returns></returns>
    public static Percent calculateCapacityConsumptionPct(KanbanJob _kanbanJob, KanbanJobSchedulePlannedPeriod _planningPeriod)
    {
        KanbanJobCapacitySum            capacitySum;
        real                            consumptionRatio = 0;

        if (_kanbanJob.WorkCell)
        {
            LeanSchedulePlanningPeriod leanSchedulePlanningPeriod = LeanSchedulePlanningPeriod::newWrkCtrResourceGroup(_kanbanJob.WorkCell);

            KanbanJobSchedulePlannedPeriod periodStartDate = leanSchedulePlanningPeriod.planningPeriodStartDate(_planningPeriod);       //company TZ
            utcdatetime periodStartDateTime = DateTimeUtil::newDateTime(periodStartDate,0, DateTimeUtil::getCompanyTimeZone());                              //company TZ

            LeanWorkCellScheduleCapacity leanWorkCellScheduleCapacity = LeanWorkCellScheduleCapacity::newStandard(WrkCtrResourceGroup::find(_kanbanJob.WorkCell), periodStartDateTime);

            select PlannedCapacitySumSeconds, PlannedCapacitySumThroughput from capacitySum where capacitySum.Job == _kanbanJob.RecId;

            switch (leanSchedulePlanningPeriod.parmLeanProdFlowModelType())
            {
                case LeanProdFlowModelTypes::Hours:
                    consumptionRatio = capacitySum.PlannedCapacitySumSeconds / leanWorkCellScheduleCapacity.totalCapacitySeconds();
                    break;

                case LeanProdFlowModelTypes::Throughput:
                    consumptionRatio = capacitySum.PlannedCapacitySumThroughput / leanWorkCellScheduleCapacity.totalCapacityThroughput();
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        return consumptionRatio * 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPlanningPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the planning periods.
    /// </summary>
    /// <param name="_leanSchedulePlanningPeriod">
    ///    An initialized instance of the <c>LeanSchedulePlanningPeriod</c> class that is to work with the
    ///    planning periods.
    /// </param>
    /// <param name="_planningPeriodFrom">
    ///    The planning period date of the first planning period to retrieve data from.
    /// </param>
    /// <param name="_numPeriods">
    ///    The number of periods to show that start at the <c>_planningPeriodFrom</c> parameter and increase
    ///    in date to look for the open planning periods that follow.
    /// </param>
    /// <returns>
    ///    The list of temporary records representing planning periods.
    /// </returns>
    /// <remarks>
    ///    In the event of different planning period types among the planning periods, the retrieved periods
    ///    will be less than requested.
    /// </remarks>
    public KanbanPeriodTmp initPlanningPeriods(
        LeanSchedulePlanningPeriod     _leanSchedulePlanningPeriod,
        KanbanJobSchedulePlannedPeriod _planningPeriodFrom,
        int                            _numPeriods)
    {
        KanbanPeriodTmp                 planningPeriods;

        if (_numPeriods < 1)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        KanbanJobSchedulePlannedPeriod periodDate = _leanSchedulePlanningPeriod.planningPeriodStartDate(_planningPeriodFrom);       //company TZ
        utcdatetime periodDateTime = DateTimeUtil::newDateTime(periodDate,0, DateTimeUtil::getCompanyTimeZone());    //UTC

        LeanPlanningPeriodType leanPlanningPeriodType = KanbanJobScheduleOperation::workCellPlanningPeriodType(wrkCtrResourceGroupRecId, periodDate);

        for (var i = 0; i < _numPeriods; i++)
        {
            // Look for the next open period and get its start/end datetime
            if (i > 0)
            {
                periodDate     = _leanSchedulePlanningPeriod.nextPlanningPeriod(periodDate);
                periodDateTime = DateTimeUtil::newDateTime(periodDate, 0, DateTimeUtil::getCompanyTimeZone());

                // Do not continue if the periods have a different type (no mixing between days and weeks)
                if (KanbanJobScheduleOperation::workCellPlanningPeriodType(wrkCtrResourceGroupRecId, periodDate) != leanPlanningPeriodType)
                {
                    break;
                }
            }

            planningPeriods.StartDate = periodDate;
            planningPeriods.ConsumptionType = _leanSchedulePlanningPeriod.parmLeanProdFlowModelType();

            LeanWorkCellScheduleCapacity leanWorkCellScheduleCapacity = LeanWorkCellScheduleCapacity::newStandard(WrkCtrResourceGroup::find(wrkCtrResourceGroupRecId), periodDateTime);
            KanbanJobScheduleCapacitySum plannedPeriodCapacity = this.findPlannedPeriodCapacity(periodDate, wrkCtrResourceGroupRecId);
            switch (planningPeriods.ConsumptionType)
            {
                case LeanProdFlowModelTypes::Hours:
                    planningPeriods.TotalCapacitySeconds    = leanWorkCellScheduleCapacity.totalCapacitySeconds();
                    planningPeriods.PlannedCapacitySeconds  = plannedPeriodCapacity.PlannedCapacitySumSeconds;
                    break;

                case LeanProdFlowModelTypes::Throughput:
                    planningPeriods.TotalCapacityThroughput    = leanWorkCellScheduleCapacity.totalCapacityThroughput();
                    planningPeriods.PlannedCapacityThroughput  = plannedPeriodCapacity.PlannedCapacitySumThroughput;
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            planningPeriods.UnitOfMeasureSymbol = UnitOfMeasure::find(leanWorkCellScheduleCapacity.capacityUnitOfMeasure()).Symbol;
            planningPeriods.insert();
        }

        select planningPeriods;
        return planningPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlannedPeriodCapacity</Name>
				<Source><![CDATA[
    private KanbanJobScheduleCapacitySum findPlannedPeriodCapacity(KanbanJobSchedulePlannedPeriod _periodDate, WrkCtrResourceGroupRefRecId _workCell)
    {
        KanbanJobScheduleCapacitySum jobCapacity;
        select jobCapacity
            where jobCapacity.PlannedPeriod == _periodDate
                && jobCapacity.WorkCell     == _workCell;

        return jobCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveBackward</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the selected kanban jobs one position back in the schedule.
    /// </summary>
    /// <param name = "_kanbanJob">Kanban job to move.</param>
    /// <param name = "_postponeMove">The flag indicating whether the move should be postponed or not.</param>
    public static void  moveBackward(KanbanJob _kanbanjob, KanbanJobPostponeMove _postponeMove = NoYes::Yes)
    {
        if (KanbanJobScheduleOperation::canMove(_kanbanJob))
        {
            KanbanJobSchedule prevKjs = KanbanJobScheduleOperation::getPreviousKanbanJob(_kanbanjob);

            if (prevKjs != null) // With this check, we are not calling the move when the job is the last one of the period anyway.
            {
                KanbanJobScheduleOperation::move(kanbanJob::find(prevKjs.Job), prevKjs.PlannedPeriod, _kanbanjob, _postponeMove); // Instead of moving the current job backward, we are essentially moving the
            }// previous one forward to save one more query.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveEndNextPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the selected kanban jobs to the end of the next planning period in the schedule.
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job to move.</param>
    public static void moveEndNextPeriod(KanbanJob _kanbanJob)
    {
        KanbanJobSchedule               previousKjs;

        if (KanbanJobScheduleOperation::canMove(_kanbanJob))
        {
            KanbanJobSchedule kjs = KanbanJobSchedule::findJob(_kanbanjob.recId);
            LeanSchedulePlanningPeriod leanSchedulePlanningPeriod = LeanSchedulePlanningPeriod::newWrkCtrResourceGroup(_kanbanJob.WorkCell, kjs.PlannedPeriod);
            KanbanJobSchedulePlannedPeriod nextPeriod = leanSchedulePlanningPeriod.nextPlanningPeriod(kjs.PlannedPeriod);

            KanbanJobScheduleOperation::moveEndPeriod(_kanbanJob, nextPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveEndPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the selected kanban jobs to the end of the previous planning period in the schedule.
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job to move.</param>
    public static void moveEndPreviousPeriod(KanbanJob _kanbanJob)
    {
        if (KanbanJobScheduleOperation::canMove(_kanbanJob))
        {
            KanbanJobSchedule kjs = KanbanJobSchedule::findJob(_kanbanjob.recId);
            LeanSchedulePlanningPeriod leanSchedulePlanningPeriod = LeanSchedulePlanningPeriod::newWrkCtrResourceGroup(_kanbanJob.WorkCell, kjs.PlannedPeriod);
            KanbanJobSchedulePlannedPeriod previousPeriod = leanSchedulePlanningPeriod.previousPlanningPeriod(kjs.PlannedPeriod);

            KanbanJobScheduleOperation::moveEndPeriod(_kanbanJob, previousPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveEndPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the kanban job to the end of the period specified.
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job to move.</param>
    /// <param name = "_period">The period to move to.</param>
    /// <param name = "_postponeMove">The flag indicating whether the move should be postponed or not.</param>
    public static void moveEndPeriod(KanbanJob _kanbanJob, KanbanJobSchedulePlannedPeriod _period, KanbanJobPostponeMove _postponeMove = NoYes::Yes)
    {
        KanbanJobSchedule kjs = KanbanJobSchedule::findJob(_kanbanjob.recId);;
        KanbanJobSchedule otherKjs;

        select firstonly Job from otherKjs order by otherKjs.Sequence desc
                where otherKjs.PlannedPeriod == _period
                    && kjs.WorkCell          == otherKjs.WorkCell;

        KanbanJobScheduleOperation::move(_kanbanjob, _period, kanbanJob::find(otherKjs.Job), _postponeMove); // If no jobs found, it will still move.
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveForward</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the selected kanban jobs one position forward in the schedule.
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job to move.</param>
    /// <param name = "_postponeMove">The flag indicating whether the move should be postponed or not.</param>
    public static void moveForward(KanbanJob _kanbanjob, KanbanJobPostponeMove _postponeMove = NoYes::Yes)
    {
        if (KanbanJobScheduleOperation::canMove(_kanbanJob))
        {
            KanbanJobSchedule nextKjs = KanbanJobScheduleOperation::getNextKanbanJob(_kanbanjob);

            if (nextKjs != null) // With this check, we are not calling the move when the job is the last one of the period anyway.
            {
                KanbanJobScheduleOperation::move(_kanbanjob, nextKjs.PlannedPeriod, kanbanJob::find(nextKjs.Job), _postponeMove);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveStartNextPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the selected kanban jobs to the start of the next planning period in the schedule.
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job to move.</param>
    public static void moveStartNextPeriod(KanbanJob _kanbanJob)
    {
        if (KanbanJobScheduleOperation::canMove(_kanbanJob))
        {
            KanbanJobSchedule kjs = KanbanJobSchedule::findJob(_kanbanjob.recId);
            LeanSchedulePlanningPeriod leanSchedulePlanningPeriod = LeanSchedulePlanningPeriod::newWrkCtrResourceGroup(kjs.WorkCell, kjs.PlannedPeriod);
            KanbanJobSchedulePlannedPeriod nextPeriod = leanSchedulePlanningPeriod.nextPlanningPeriod(kjs.PlannedPeriod);

            KanbanJobScheduleOperation::moveStartPeriod(_kanbanJob, nextPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveStartPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the selected kanban jobs to the start of the previous planning period in the schedule.
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job to move.</param>
    public static void moveStartPreviousPeriod(KanbanJob _kanbanJob)
    {
        if (_kanbanjob != null && KanbanJobScheduleOperation::canMove(_kanbanJob))
        {
            KanbanJobSchedule kjs = KanbanJobSchedule::findJob(_kanbanjob.recId);
            LeanSchedulePlanningPeriod leanSchedulePlanningPeriod = LeanSchedulePlanningPeriod::newWrkCtrResourceGroup(kjs.WorkCell, kjs.PlannedPeriod);
            KanbanJobSchedulePlannedPeriod previousPeriod = leanSchedulePlanningPeriod.previousPlanningPeriod(kjs.PlannedPeriod);

            KanbanJobScheduleOperation::moveStartPeriod(_kanbanJob, previousPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveStartPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the kanban job to the start of the period specified.
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job to move.</param>
    /// <param name = "_period">The period to move to.</param>
    /// <param name = "_postponeMove">The flag indicating whether the move should be postponed or not.</param>
    public static void moveStartPeriod(KanbanJob _kanbanJob, KanbanJobSchedulePlannedPeriod _period, KanbanJobPostponeMove _postponeMove = NoYes::Yes)
    {
        KanbanJobScheduleOperation::move(_kanbanJob, _period, null, _postponeMove); // No need to specify a new job as it will move to the start.
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWrkCtrResourceGroupRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setting the work center resource group.
    /// </summary>
    /// <param name = "_wrkCtrResourceGroupRecId">Work center resource group reference.</param>
    /// <returns>The <c>RefRecId</c> of the resource group found.</returns>
    public RefRecId parmWrkCtrResourceGroupRecId(RefRecId _wrkCtrResourceGroupRecId = wrkCtrResourceGroupRecId)
    {
        wrkCtrResourceGroupRecId = _wrkCtrResourceGroupRecId;
        return wrkCtrResourceGroupRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planPeggingTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Plans the pegging tree of the selected kanban job.
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job to move.</param>
    public static void planPeggingTree(KanbanJob _kanbanJob)
    {
        // Plan its pegging tree
        KanbanJobPeggingTreePlanEvent::newKanbanJob(_kanbanJob).run();;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the indicated kanban job can be moved.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The record of a kanban job to check.
    /// </param>
    /// <returns>
    ///    true if the indicated kanban job can be moved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A kanban job can be moved if the lean kanban job status is set to either the
    ///    <c>Planned</c> enumeration value.
    /// </remarks>
    public static boolean canMove(KanbanJob _kanbanJob)
    {
        if (_kanbanJob != null && _kanbanJob.Status == LeanKanbanJobStatus::Planned)
        {
            return true;
        }
        else
        {
            error("@SCM:KanbanJobMoveOnlyPlanned" );
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanJobScheduleOperation construct()
    {
        return new KanbanJobScheduleOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>move</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the indicated kanban job after another existing job.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A kanban job record that identifies the kanban job that is moved.
    /// </param>
    /// <param name="_newPlanningPeriod">
    ///    A company time zone planning period date to which the job that is moved will belong.
    /// </param>
    /// <param name="_kanbanJobBefore">
    ///    A kanban job record that identifies a kanban job after which the job to move will be scheduled. If
    ///    null, the kanban job will be inserted at the start of the period.
    /// </param>
    /// <param name = "_postponeMove">
    ///     The flag indicating whether the move should be postponed or not.
    /// </param>
    /// <returns>
    ///    true if the movement succeeds; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_kanbanJobBefore" /> parameter may belong to the same or different planning
    ///    period as the <paramref name="_kanbanJob" /> parameter.
    /// </remarks>
    public static boolean move(
        KanbanJob                      _kanbanJob,
        KanbanJobSchedulePlannedPeriod _newPlanningPeriod,  //company TZ
        KanbanJob                      _kanbanJobBefore,
        KanbanJobPostponeMove          _postponeMove = NoYes::No)
    {
        boolean                 moved = false;

        // Perform a kanban job status update to (re)Planned
        KanbanJobStatus kanbanJobStatus = KanbanJobStatus::newKanbanJob(_kanbanJob, true);

        KanbanJobStatusUpdate kanbanJobStatusUpdate = KanbanJobStatusUpdate::makeParameters(kanbanJobStatus,LeanKanbanJobStatus::Planned,true,false);
        kanbanJobStatusUpdate.TransactionDateTime   = DateTimeUtil::newDateTime(_newPlanningPeriod,0,DateTimeUtil::getCompanyTimeZone()); //UTC
        kanbanJobStatusUpdate.PlanAfterType         = LeanPlanJobReferenceTypes::KanbanJob;
        kanbanJobStatusUpdate.PlanAfterJob          = _kanbanJobBefore.RecId;
        kanbanJobStatusUpdate.PostponeMove          = _postponeMove;

        ttsbegin;

        kanbanJobStatusUpdate.insert();
        moved = kanbanJobStatus.runStatusUpdate(kanbanJobStatusUpdate);
        ttscommit;

        return moved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPostponedMove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a postponed move of the Kanban jobs which are already sequenced by the move operation. This method was needed for performance optimization of multiple jobs planning.
    /// </summary>
    /// <param name = "_postponedMoveMap">The map containing the first jobs and schedule records to be moved.</param>
    /// <returns>First kanban job for the last period moved for focus</returns>
    /// <remarks>The map should contain a key of planned period type and value which is a container of 2 buffers packed into containers.</remarks>
    public static KanbanJob performPostponedMove(Map _postponedMoveMap)
    {
        KanbanJob firstKanbanJob;
        if (!_postponedMoveMap.empty())
        {
            var enumerator = _postponedMoveMap.getEnumerator();
            while (enumerator.MoveNext())
            {
                container records = enumerator.currentValue();
                firstKanbanJob = con2Buf(conPeek(records, 1));
                KanbanJobSchedule firstKanbanJobSchedule = con2Buf(conPeek(records, 2));
                // moving already planned jobs
                KanbanJobSchedulerMove::newStandard(firstKanbanJob, firstKanbanJobSchedule).run();
            }
        }

        return firstKanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanJobScheduleOperation</c> class.
    /// </summary>
    /// <param name="_wrkCtrResourceGroupRecId">
    ///    The record ID of the resource group to which these operations apply.
    /// </param>
    /// <returns>
    ///    The initialized instance of the <c>KanbanJobScheduleOperation</c> class.
    /// </returns>
    public static KanbanJobScheduleOperation newStandard(RefRecId _wrkCtrResourceGroupRecId)
    {
        KanbanJobScheduleOperation kanbanJobScheduleOperation = KanbanJobScheduleOperation::construct();

        kanbanJobScheduleOperation.parmWrkCtrResourceGroupRecId(_wrkCtrResourceGroupRecId);

        return kanbanJobScheduleOperation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workCellPlanningPeriodType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the planning period type of the current work cell at a specified date and time.
    /// </summary>
    /// <param name="_wrkCtrResourceGroupRecId">
    ///    The record identifier of a work center resource group that is used to filter the results.
    /// </param>
    /// <param name="_date">
    ///    The date to use in the search.
    /// </param>
    /// <returns>
    ///    The planning period type that applies to the current work cell and the given date and time. If the
    ///    planning period could not be found, the <c>LeanPlanningPeriodTypes::Day</c> enumeration value.
    /// </returns>
    public static LeanPlanningPeriodType workCellPlanningPeriodType(
        WrkCtrResourceGroupRefRecId _wrkCtrResourceGroupRecId,
        TransDate                   _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        LeanPlanningPeriodType leanPlanningPeriodType = LeanPlanningPeriodTypes::Day;

        LeanWorkCellCapacity leanWorkCellCapacity = LeanWorkCellCapacity::findActiveForWorkCell(_wrkCtrResourceGroupRecId,_date);
        if (leanWorkCellCapacity)
        {
            LeanProductionFlowModel leanProductionFlowModel = LeanProductionFlowModel::find(leanWorkCellCapacity.ProductionFlowModel);
            if (leanProductionFlowModel)
            {
                leanPlanningPeriodType = leanProductionFlowModel.PlanningPeriodType;
            }
        }

        return leanPlanningPeriodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlannedKanbanMinDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the first planned but not completed kanban planned date.
    /// </summary>
    /// <param name="_wrkCtrResourceGroupRecId">
    ///    The record identifier of a work center resource group that is used to filter the results; optional.
    /// </param>
    /// <returns>The date value for the kanban job.</returns>
    public static date getPlannedKanbanMinDate(WrkCtrResourceGroupRefRecId _wrkCtrResourceGroupRecId = 0)
    {
        KanbanJob           kanbanJob;
        KanbanJobSchedule   kanbanJobSchedule;

        select firstonly PlannedPeriod from kanbanJobSchedule order by PlannedPeriod asc
            join kanbanJob
                where kanbanJob.RecId == kanbanJobSchedule.Job
                   && kanbanJob.status ==LeanKanbanJobStatus::Planned
                   && (kanbanJob.WorkCell == _wrkCtrResourceGroupRecId || !_wrkCtrResourceGroupRecId);

        return kanbanJobSchedule.PlannedPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlannedKanbanMaxDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last planned but not completed kanban planned date.
    /// </summary>
    /// <returns>The date value for the kanban job.</returns>
    public static date getPlannedKanbanMaxDate()
    {
        KanbanJob           kanbanJob;
        KanbanJobSchedule   kanbanJobSchedule;

        select firstonly PlannedPeriod from kanbanJobSchedule order by PlannedPeriod desc
            join kanbanJob
                where kanbanJob.RecId == kanbanJobSchedule.Job
                   && kanbanJob.status ==LeanKanbanJobStatus::Planned;

        return kanbanJobSchedule.PlannedPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqTransRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the corresponding reqtrans record for the KanbanJob
    /// </summary>
    /// <param name = "_kanbanJob">The kanban job to find the record for.</param>
    /// <returns><c>ReqTrans</c> record.</returns>
    public static ReqTrans getReqTransRecord(KanbanJob _kanbanJob)
    {
        InventTransOrigin   inventTransOrig;
        ReqTrans            reqTrans;

        select reqTrans
                exists join inventTransOrig
                where inventTransOrig.InventTransId == _kanbanJob.InventTransId
                   && reqTrans.InventTransOrigin    == inventTransOrig.recId;

        return reqTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
