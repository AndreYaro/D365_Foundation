<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalTableJumpRefHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventJournalTableJumpRefHelper</c> class dispatches lookups for inventory journals to the appropriate forms.
/// </summary>
class InventJournalTableJumpRefHelper
{
    private InventJournalTable inventJournalTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the target form similarly to the <c>jumpRef</c> method on table.
    /// </summary>
    public void jumpRef()
    {
        if (!inventJournalTable)
        {
            throw error(Error::missingRecord(tableId2PName(tableNum(InventJournalTable))));
        }

        var jumpArgs = new Args();
        jumpArgs.record(inventJournalTable);
        var menuItemName = this.getMenuItemName(inventJournalTable);
        var menuFunction = new MenuFunction(menuItemName, MenuItemType::Display);
        menuFunction.run(jumpArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventJournalTableJumpRefHelper construct(InventJournalTable _inventJournalTable)
    {
        return new InventJournalTableJumpRefHelper(_inventJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the target form when the user clicks on journal ID.
    /// </summary>
    /// <param name = "_args">Lookup arguments.</param>
    public static void main(Args _args)
    {
        if (!InventJournalTableJumpRefHelper::isArgsValid(_args))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventJournalTable journal = InventJournalTableJumpRefHelper::getJournalFromArgs(_args);

        var helper = InventJournalTableJumpRefHelper::construct(journal);
        helper.jumpRef();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventJournalTable</c> used for the lookup.
    /// </summary>
    /// <param name = "_args">Lookup arguments.</param>
    /// <returns>The <c>InventJournalTable</c> record for the lookup.</returns>
    protected static InventJournalTable getJournalFromArgs(Args _args)
    {
        InventJournalTable journal;

        if (_args.record().TableId == tableNum(WMSJournalTable))
        {
            WMSJournalTable wmsJournalTable = _args.record();

            journal = InventJournalTable::find(wmsJournalTable.inventTransRefId);
        }
        else if (_args.record().TableId == tableNum(PurchLine))
        {
            PurchLine purchLine = _args.record();

            journal = InventJournalTable::find(purchLine.InventRefId);
        }
        else if (_args.record().TableId == tableNum(SalesLine)
            && InventJournalTableJumpRefFlight::instance().isEnabled())
        {
            SalesLine salesLine = _args.record();

            journal = InventJournalTable::find(salesLine.InventRefId);
        }
        else if (_args.record().TableId == tableNum(TmpInventTransMark)
            && InventJournalTableJumpRefFlight::instance().isEnabled())
        {
            TmpInventTransMark inventTransMark = _args.record();

            journal = InventJournalTable::find(inventTransMark.TransRefId);
        }
        else if (_args.record().TableId == tableNum(ProdTable))
        {
            ProdTable prodTable = _args.record();

            journal = InventJournalTable::find(prodTable.InventRefId);
        }
        else if (_args.lookupTable() == tableNum(InventJournalTable)
            && _args.lookupField() == fieldNum(InventJournalTable, JournalId))
        {
            journal = InventJournalTable::find(_args.lookupValue());
        }

        if (!journal)
        {
            throw error(Error::missingRecord(tableId2PName(tableNum(InventJournalTable))));
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isArgsValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the lookup arguments are valid.
    /// </summary>
    /// <param name = "_args">Lookup arguments.</param>
    /// <returns>true if the lookup arguments are valid; otherwise, false.</returns>
    protected static boolean isArgsValid(Args _args)
    {
        return _args.record().TableId == tableNum(WMSJournalTable) 
                || _args.record().TableId == tableNum(PurchLine)
                || _args.record().TableId == tableNum(ProdTable)
                || (_args.lookupTable() == tableNum(InventJournalTable)
                && _args.lookupField() == fieldNum(InventJournalTable, JournalId))
                || ((_args.record().TableId == tableNum(SalesLine)
                    || _args.record().TableId == tableNum(TmpInventTransMark))
                        && InventJournalTableJumpRefFlight::instance().isEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(InventJournalTable _inventJournalTable)
    {
        inventJournalTable = _inventJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the appropriate display menu item name for the given journal.
    /// </summary>
    /// <param name = "_inventJournalTable">Journal to find the menu item for.</param>
    /// <returns>The name of the the display menu item.</returns>
    private str getMenuItemName(InventJournalTable _inventJournalTable)
    {
        str result;
        var journalStatic = JournalStatic::newTable(_inventJournalTable);
        if (_inventJournalTable.JournalType == InventJournalType::project)
        {
            result = menuItemDisplayStr(InventJournalTableProject);
        }
        else
        {
            result = journalStatic.menuItemStrLines();
        }

        if (result == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>