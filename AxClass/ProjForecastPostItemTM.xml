<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastPostItemTM</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjForecastPostItemTM extends ProjForecastPostItem
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCost</Name>
				<Source><![CDATA[
    protected boolean checkCost()
    {
        boolean ret = super();

        if (ret)
        {
            boolean postWIPItem = isMultipleContractLineFeatureEnabled ? projRevProfile.PostWIPItem : projGroup.ItemTransTurnover;
            if (ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPTimeMaterial &&
                this.ledgerStatusCost() == ProjLedgerStatus::BalanceSheet &&
                postWIPItem == false &&
                projTrans.canBeCapitalize())
            {
                switch (this.forecastUpdateType())
                {
                    case ProjForecastUpdateType::Invoice:
                        if (! ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate)
                        {
                            if (! projTrans.forecastInvoiceDate())
                            {
                                ret = checkFailed("@SYS33044");
                            }
                        }
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterCost</Name>
				<Source><![CDATA[
    protected boolean checkEnterCost()
    {
        boolean ret = true;

        ret = super();

        if (ret)
        {
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Journals:
                    if (this.ledgerStatusCost() == ProjLedgerStatus::Never ||
                        this.ledgerStatusCost() == ProjLedgerStatus::None)
                    {
                        ret = false;
                    }

                    if (ret)
                    {
                        if (ProjForecastPostItemCostNonStockedFlight::instance().isEnabled() || this.postOnhandFinancial())
                        {
                            ret = true;
                        }
                        else
                        {
                            ret = false;
                        }
                    }
                    break;

                case ProjForecastUpdateType::Invoice:
                    if (ProjForecastPostItemCostNonStockedFlight::instance().isEnabled() || this.postOnhandFinancial())
                    {
                        ret = true;
                    }
                    else
                    {
                        ret = false;
                    }
                    break;

                case ProjForecastUpdateType::Estimate:
                    ret = false;
                    break;

                case ProjForecastUpdateType::Elimination:
                    ret = false;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterSalesAccrued</Name>
				<Source><![CDATA[
    protected boolean checkEnterSalesAccrued()
    {
        boolean ret = true;

        ret =  projTrans.transTurnover() &&
               projTrans.canBeAccrued()  &&
               this.checkEnterWIP();

        if (ret)
        {
            boolean postWIPItem = isMultipleContractLineFeatureEnabled ? projRevProfile.PostWIPItem : projGroup.ItemTransTurnover;
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Journals:
                case ProjForecastUpdateType::Invoice:
                    ret = postWIPItem;
                    break;

                case ProjForecastUpdateType::Estimate:
                    ret = false;
                    break;

                case ProjForecastUpdateType::Elimination:
                    ret = false;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    protected boolean checkEnterTurnover()
    {
        boolean ret = super();

        if (ret)
        {
            if (this.forecastUpdateType() != ProjForecastUpdateType::Invoice)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCost</Name>
				<Source><![CDATA[
    protected void postCost()
    {
        MapEnumerator   fundingAllocationEnumerator;
        Map             splitTransQty;

        if (this.forecastUpdateType() == ProjForecastUpdateType::Journals)
        {
            super();
        }
        
        boolean postWIPItem = isMultipleContractLineFeatureEnabled ? projRevProfile.PostWIPItem : projGroup.ItemTransTurnover;
        if (ForecastModel::find(HeadingSub::Heading, this.modelId()).ProjForecastWIPTimeMaterial &&
            this.ledgerStatusCost() == ProjLedgerStatus::BalanceSheet &&
            postWIPItem == false &&
            projTrans.canBeCapitalize())
        {
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Journals:
                    this.postingType(LedgerPostingType::ProjOffsetAccountItem);
                    this.costSales(ProjCostSales::Cost);
                    this.ledgerTransDate(projTrans.transDate());

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, -projTrans.transCost(), projTrans.currencyIdCost()).getEnumerator();
                    splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, -projTrans.qty());
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                        this.accountNum(projTrans.offsetAccountItemLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }

                    this.postingType(LedgerPostingType::ProjStatusAccountItem);
                    this.costSales(ProjCostSales::Cost);
                    this.ledgerTransDate(projTrans.transDate());

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transCost(), projTrans.currencyIdCost()).getEnumerator();
                    splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, projTrans.qty());
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                        this.accountNum(projTrans.statusAccountItemLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }
                    break;

                case ProjForecastUpdateType::Invoice:
                    this.postingType(LedgerPostingType::ProjStatusAccountItem);
                    this.costSales(ProjCostSales::Cost);
                    if (ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate)
                    {
                        this.ledgerTransDate(projTrans.transDate());
                    }
                    else
                    {
                        this.ledgerTransDate(projTrans.forecastInvoiceDate());
                    }

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList,-projTrans.transCost(),projTrans.currencyIdCost()).getEnumerator();
                    splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, -projTrans.qty());
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                        this.accountNum(projTrans.statusAccountItemLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }

                    this.postingType(LedgerPostingType::ProjOffsetAccountItem);
                    this.costSales(ProjCostSales::Cost);
                    if (ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate)
                    {
                        this.ledgerTransDate(projTrans.transDate());
                    }
                    else
                    {
                        this.ledgerTransDate(projTrans.forecastInvoiceDate());
                    }

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList,projTrans.transCost(),projTrans.currencyIdCost()).getEnumerator();
                    splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, projTrans.qty());
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                        this.accountNum(projTrans.offsetAccountItemLedgerDimension(fundingAllocationEnumerator.currentKey()));
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>