<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTSLConvert</Name>
	<SourceCode>
		<Declaration><![CDATA[
// A base class for converting temporary TSL transaction into another one
// on the basis of a sole rule
// It extends an object paradigm by calling "child" class methods transparently

class RTSLConvert
{
    List            childObjectList;
    ListIterator    childObjectIterator;
    RTSLConvert     childObject;

    boolean         outOfRange;
    boolean         validate;

    RTSLTranslation translation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildChildObjectList</Name>
				<Source><![CDATA[
        // Construct child object list according to
    // an overloaded specification
    private List buildChildObjectList()
    {
        container       childIds = this.childIds();
        classId         childId;
        DictClass       dictClass;
        int             i;

        childObjectList = new List(Types::Class);

        for (i = 1; i <= conlen(childIds); i++)
        {
            childId     = conpeek(childIds, i);
            dictClass   = new DictClass(childId);

            if (! dictClass)
                throw error("@SYS65036");

            if (! SysDictClass::isSuperclass(childId, classnum(RTSLConvert)))
                throw error(strfmt("@SYS25540", dictClass.name(), classstr(RTSLConvert)));

            childObject     = dictClass.makeObject();
            childObject.parmTranslation(translation);
            childObjectList.addEnd(childObject);
        }

        childObjectIterator = new ListIterator(childObjectList);

        return childObjectList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompanySetup</Name>
				<Source><![CDATA[
        // Check specific data existence in a foreign company
    // at the widest scope
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkCompanySetup(boolean              _ok,
                                     RTSLConsistencyCheck _consistencyCheck)
    {
        boolean  ok = _ok;

        #RTSLConvertChildCall(checkCompanySetup, ok, _consistencyCheck, ok)
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRange</Name>
				<Source><![CDATA[
        // Check if transaction is in the range for a range narrowing setup
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkRange(TmpRTSLTrans _tmpTrans,
                              Common       _rule)
    {
        boolean  ok = true;

        childObjectIterator.begin();
        while (childObjectIterator.more())
        {
            childObject = childObjectIterator.value();
            ok          = childObject.checkRange(_tmpTrans, _rule);
            if (! ok)
                return false;
            childObjectIterator.next();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>childIds</Name>
				<Source><![CDATA[
        // Child object specification
    // Must be overriden with
    //
    //    container ret;
    //    return ret;
    //
    // if no chindren present to avoid a deadlock
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container childIds()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTrans</Name>
				<Source><![CDATA[
        // The main method to convert transation
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpRTSLTrans convertTrans(TmpRTSLTrans _tmpTrans,
                                     Common       _rule)
    {
        TmpRTSLTrans    tmpTrans    = _tmpTrans;
        boolean         validatedOk = true;

        if (this.parmValidate())
        {
            validatedOk = this.validateTrans(_tmpTrans);
        }

        if (! validatedOk && translation.mustStopOnError())
            return tmpTrans;

        #RTSLConvertChildCall(convertTrans, tmpTrans, _rule, tmpTrans)
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void init()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void new(RTSLTranslation _translation)
    {
        this.parmTranslation(_translation);
        this.buildChildObjectList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTranslation</Name>
				<Source><![CDATA[
        private RTSLTranslation parmTranslation(RTSLTranslation _translation  = translation)
    {
        translation = _translation;

        if (translation)
        {
            this.init();
        }

        return translation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidate</Name>
				<Source><![CDATA[
        // By default this state is toggled then entire company is checked
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmValidate(boolean _validate = validate)
    {
        if (_validate != validate)
        {
            validate = _validate;

            childObjectIterator.begin();
            while (childObjectIterator.more())
            {
                childObject = childObjectIterator.value();
                childObject.parmValidate(validate);
                childObjectIterator.next();
            }
        }

        return validate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTrans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean validateTrans(TmpRTSLTrans  _tmpTrans)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>