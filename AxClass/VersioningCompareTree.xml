<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningCompareTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VersionCompareTree</c> class builds the contents of an instance of the
///    <c>FormTreeControl</c> class based on the contents of the <c>VersioningTmpTrans</c> temporary table.
/// </summary>
class VersioningCompareTree
{
    FormTreeControl             formTreeControl;
    VersioningTmpTrans          versioningTmpTrans;
    Imagelist                   equalList;
    XMLDocument                 xmlDoc;
    XMLNode                     nodeRoot;
    str                         versionTreeView;
    int                         currentLevel;
    boolean                     removeEmptyTreeNodes;
    boolean                     removeEmptyTreeNodesEP;

    #define.XMLNODENAME('node')
    #define.XMLATTRIBUTE_RECID('recId')
    #define.XMLATTRIBUTE_TITLE('title')
    #define.XMLATTRIBUTE_IMG('img')
    #define.XMLATTRIBUTE_IMGNUM('imgNum')

    #define.IMG_CHECK_ALL(0)
    #define.IMG_DIFFERENCE(1)
    #define.IMG_CHECK_RED(2)
    #define.IMG_CHECK_BLUE(3)
    #define.IMG_CHECK_SOME(4)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addChildNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>FormTreeControl</c> class that has the result of the analysis
    ///    stored in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_parentRecId">
    ///    A record ID that identifies the parent <c>VersioningTmpTrans</c> record. Each call to the method
    ///    builds one level in the tree. The method calls itself to build the subsequent levels.
    /// </param>
    /// <param name="_parentNodeIdx">
    ///    The index to the parent instance of the <c>FormTreeItem</c> class in the control instance of the
    ///    <c>FormTreeControl</c> class.
    /// </param>
    /// <returns>
    ///    true if child nodes are added; otherwise, false
    /// </returns>
    /// <remarks>
    ///    This method uses one way to expose the contents of the comparison stored in the
    ///    <c>VersioningTmpTrans</c> temporary table.
    /// </remarks>
    protected boolean addChildNodes(RefRecId _parentRecId, int _parentNodeIdx = 0)
    {
        FormTreeItem            formTreeItem;
        int                     nodeIdx;
        boolean                 found;
        int                     imageRes;
        VersioningTmpTrans      localVersioningTrans;

        localVersioningTrans.setTmpData(versioningTmpTrans);

        while select localVersioningTrans
            order by RecId
            where localVersioningTrans.ParentVersioningTmpTrans   == _parentRecId
        {
            found = true;
            imageRes = this.getImageName(localVersioningTrans.Action);
            nodeIdx = SysFormTreeControl::addTreeItem(formTreeControl, localVersioningTrans.ToolTipRecord, _parentNodeIdx, localVersioningTrans.RecId, imageRes, false);

            if (imageRes != #IMG_CHECK_ALL)
            {
                this.markChangeOnParent(nodeIdx);
            }

            if (this.addChildNodes(localVersioningTrans.RecId, nodeIdx))
            {
                formTreeItem = formTreeControl.getItem(nodeIdx);
                formTreeItem.children(true);
                formTreeControl.setItem(formTreeItem);

                formTreeControl.expand(nodeIdx, FormTreeExpand::Expand);
            }
        }
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addChildNodesEP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates an XML document by using hierarchical data records of the document that is being compared.
    /// </summary>
    /// <param name="_parentRecId">
    /// The parent record in the <c>VersioningTmpTrans</c> table that was identified by the <c>RecId</c>
    /// value. Each call to the method builds one level in the tree. The method calls itself to build the
    /// subsequent levels.
    /// </param>
    /// <param name="_parentNode">
    /// The parent node object in the XML document that is being populated.
    /// </param>
    protected void addChildNodesEP(RefRecId _parentRecId, XmlNode _parentNode = null)
    {
        boolean                 found;
        int                     imageRes;
        VersioningTmpTrans      localVersioningTrans;
        XMLNode                 currentNode, attributeNode;
        XMLNamedNodeMap         attributeNodeMap;

        localVersioningTrans.setTmpData(versioningTmpTrans);

        while select localVersioningTrans
            order by RecId
            where localVersioningTrans.ParentVersioningTmpTrans   == _parentRecId
        {
            found = true;
            imageRes = this.getImageName(localVersioningTrans.Action);
            currentLevel++;

            if (_parentRecId == 0)
            {
                xmldoc = XMLDocument::newXml('<' + #XMLNODENAME + int2str(currentLevel) + '/>');
                currentnode = xmlDoc.childNodes().item(0);
            }
            else
            {
                currentNode = _parentNode.appendChild(xmlDoc.createElement(#XMLNODENAME + int2str(currentLevel)));
            }

            currentNode.text(localVersioningTrans.ToolTipRecord);

            attributeNodeMap = currentNode.attributes();

            attributeNode = xmlDoc.createAttribute(#XMLATTRIBUTE_RECID);
            attributeNode.value(int642str(localVersioningTrans.RecId));
            attributeNodeMap.setNamedItem(attributeNode);

            attributeNode = xmlDoc.createAttribute(#XMLATTRIBUTE_TITLE);
            attributeNode.value(localVersioningTrans.ToolTipRecord);
            attributeNodeMap.setNamedItem(attributeNode);

            attributeNode = xmlDoc.createAttribute(#XMLATTRIBUTE_IMGNUM);
            attributeNode.value(int2str(imageRes));
            attributeNodeMap.setNamedItem(attributeNode);

            attributeNode = xmlDoc.createAttribute(#XMLATTRIBUTE_IMG);
            attributeNode.value(this.getIconName(imageRes));
            attributeNodeMap.setNamedItem(attributeNode);

            currentNode.attributes().setNamedItem(attributeNode);

            if (imageRes != #IMG_CHECK_ALL)
            {
                this.markChangeOnParentEP(currentNode.parentNode());
            }

            this.addChildNodesEP(localVersioningTrans.RecId, currentNode);
        }

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEPTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a tree structure that displays the tree structure of the actual comparison.
    /// </summary>
    /// <returns>
    /// A string that represents the XML tree hierarchy of the document that is being compared if any nodes
    /// are added to the tree; otherwise, an empty string.
    /// </returns>
    public str buildEPTree()
    {
        str retXml;

        this.addChildNodesEP(0);

        if (removeEmptyTreeNodes)
        {
            this.removeEmptyTreeNodesEP(xmlDoc.root());
        }

        if (xmlDoc != null)
        {
            retXml = xmlDoc.xml();
        }

        return retXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a tree structure in a <c>FormTreeControl</c> control which displays the tree structure of
    ///    the actual comparison.
    /// </summary>
    /// <returns>
    ///    true if any nodes are added to the tree; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method deletes the current contents of the <c>FormTreeControl</c> control.The tree is
    ///    initialized by using the <c>addChildNodes</c> method.
    /// </remarks>
    public boolean buildTree()
    {
        #Resource

        boolean isChildNodeAdded;

        equalList = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());

        equalList.add(new Image(#RES_COMPARE_UNCHANGED));
        equalList.add(new Image(#RES_COMPARE_CHANGED));
        equalList.add(new Image(#RES_COMPARE_REMOVED));
        equalList.add(new Image(#RES_COMPARE_ADDED));
        equalList.add(new Image(#RES_COMAPRE_UNCHANGED_WITH_CHILD_CHANGES));

        formTreeControl.setImagelist(equalList);
        formTreeControl.deleteAll();
        isChildNodeAdded =  this.addChildNodes(0);

        if (isChildNodeAdded && removeEmptyTreeNodes)
        {
            this.removeEmptyTreeNodes(formTreeControl.getRoot());
        }

        return isChildNodeAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIconName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the icon name to be displayed based on the image number that is associated with change
    /// type to the field that is evaluated.
    /// </summary>
    /// <param name="_imgNumber">
    /// The image number for which the icon name is to be returned
    /// </param>
    /// <returns>
    /// The image number that is passed
    /// </returns>

    protected str getIconName(int  _imgNumber)
    {
        #Resource
        str iconName;
        switch (_imgNumber)
        {
            case #IMG_CHECK_ALL:
                iconName = 'Icon' + int2str(#RES_COMPARE_UNCHANGED);
                break;
            case #IMG_DIFFERENCE:
                iconName =  'Icon' + int2str(#RES_COMPARE_CHANGED);
                break;
            case #IMG_CHECK_RED:
                iconName =  'Icon' + int2str(#RES_COMPARE_REMOVED);
                break;
            case #IMG_CHECK_BLUE:
                iconName =  'Icon' + int2str(#RES_COMPARE_ADDED);
                break;
            case #IMG_CHECK_SOME:
                iconName =  'Icon' + int2str(#RES_COMAPRE_UNCHANGED_WITH_CHILD_CHANGES);
                break;
        }

        return iconName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the image to display by using the change type to the field that is being evaluated.
    /// </summary>
    /// <param name="_action">
    /// A change to the field that is of the <c>VersioningChangeType</c> enumeration type.
    /// </param>
    /// <returns>
    /// An integer that is based on the action type.
    /// </returns>

    protected int getImageName(VersioningChangeType  _action)
    {
        int imageRes;

        switch (_action)
        {
            case VersioningChangeType::None:
                imageRes = #IMG_CHECK_ALL;
                break;
            case VersioningChangeType::Updated:
                imageRes = #IMG_DIFFERENCE;
                break;
            case VersioningChangeType::Inserted:
                imageRes = #IMG_CHECK_BLUE;
                break;
            case VersioningChangeType::Deleted:
                imageRes = #IMG_CHECK_RED;
                break;
        }

        return imageRes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markChangeOnParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks all parents to the specified node as having a changed child.
    /// </summary>
    /// <param name="_nodeIdx">
    ///    The ID of the item in the <c>FormTreeControl</c> control with which parents should be marked as
    ///    having a changed child.
    /// </param>
    /// <remarks>
    ///    The method is implement with recursion to mark all the way to the top of the tree structure.
    /// </remarks>
    protected void markChangeOnParent(int _nodeIdx)
    {
        int             tmpIdx;
        FormTreeItem    tmpItem;
        boolean         expand;
        tmpIdx = formTreeControl.getParent(_nodeIdx);

        if (tmpIdx)
        {
            tmpItem = formTreeControl.getItem(tmpIdx);
            if (tmpItem.image() == #IMG_CHECK_ALL)
            {
                tmpItem.image(#IMG_CHECK_SOME);
                tmpItem.selectedImage(#IMG_CHECK_SOME);
            }
            if (!tmpItem.children())
            {
                tmpItem.children(true);
                expand = true;
            }
            formTreeControl.setItem(tmpItem);

            if (expand)
            {
                formTreeControl.expand(tmpIdx, FormTreeExpand::Expand);
            }

            this.markChangeOnParent(tmpIdx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markChangeOnParentEP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks all the parents of the specified node as having a changed child.
    /// </summary>
    /// <param name="_currNode">
    /// The ID of the item in the <c>FormTreeControl</c> control with the parents that must be marked as
    /// having a changed child.
    /// </param>
    /// <remarks>
    /// The method is implemented by using recursion to mark all the way to the top of the tree structure.
    /// </remarks>
    protected void markChangeOnParentEP(XMLNode _currNode)
    {
        xmlnode                 parentNode, attributenode;
        XMLNamedNodeMap         attributeNodeMap;

        if (_currNode != null && _currNode.nodeType() == xmlnodetype::Element)
        {
            parentNode = _currNode.parentNode();

            if (_currNode.nodeType() != xmlnodetype::Text)
            {
                attributenodemap = _currNode.attributes();

                if (attributenodemap != null)
                {
                    attributenode = attributenodemap.getNamedItem(#XMLATTRIBUTE_IMGNUM);
                    attributeNode.value(int2str(#IMG_CHECK_SOME));

                    attributenode = attributenodemap.getNamedItem(#XMLATTRIBUTE_IMG);
                    attributeNode.value(this.getIconName(#IMG_CHECK_SOME));
                }
            }
            this.markChangeOnParentEP(parentNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormTreeControl</Name>
				<Source><![CDATA[
    public FormTreeControl parmFormTreeControl(FormTreeControl _formTreeControl = formTreeControl)
    {
        formTreeControl = _formTreeControl;

        return formTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemoveEmptyTreeNodes</Name>
				<Source><![CDATA[
    public boolean parmRemoveEmptyTreeNodes(boolean _removeEmptyTreeNodes = removeEmptyTreeNodes)
    {
        removeEmptyTreeNodes = _removeEmptyTreeNodes;

        return removeEmptyTreeNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersioningTmpTrans</Name>
				<Source><![CDATA[
    public VersioningTmpTrans parmVersioningTmpTrans(VersioningTmpTrans _versioningTmpTrans = versioningTmpTrans)
    {
        versioningTmpTrans = _versioningTmpTrans;

        return versioningTmpTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEmptyTreeNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all nodes that do not have a change in them and in their child nodes.
    /// </summary>
    /// <param name="_nodeIdx">
    /// The Identifier of a node.
    /// </param>
    /// <remarks>
    /// This method can be used only in the <c>FormTreeControl</c> control.
    /// </remarks>
    private void removeEmptyTreeNodes(int _nodeIdx)
    {
        FormTreeItem    tmpItem;
        int             childIdx;
        int             nextSiblingIdx;
        int             parentIdx;

        if (_nodeIdx)
        {
            tmpItem         = formTreeControl.getItem(_nodeIdx);
            nextSiblingIdx  = formTreeControl.getNextSibling(_nodeIdx);
            parentIdx       = formTreeControl.getParent(_nodeIdx);
            childIdx        = formtreecontrol.getChild(_nodeIdx);

            //start from the last sibling at the current level
            if (nextSiblingIdx != 0)
            {
                this.removeEmptyTreeNodes(nextSiblingIdx);
            }
            if (childIdx)
            {
                this.removeEmptyTreeNodes(childIdx);
            }

            if (tmpItem.idx() != formTreeControl.getRoot() && tmpItem.image() == #IMG_CHECK_ALL)
            {
                formTreeControl.delete(_nodeIdx);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RemoveEmptyTreeNodesEP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all nodes that do not have a change in them and in their child nodes.
    /// </summary>
    /// <param name="_parentNode">
    /// The parent node for which the child nodes are emptied; optional.
    /// </param>
    /// <param name="_currNode">
    /// The current node.
    /// </param>
    /// <remarks>
    /// This method can only be used in the Enterprise Portal.
    /// </remarks>
    private void RemoveEmptyTreeNodesEP(xmlNode _parentNode = null, xmlNode _currNode = null)
    {
        xmlnodeList                         nodelist;
        xmlnode                             currChild, attributenode;
        int                                 nodecount;
        XMLNamedNodeMap                     attributeNodeMap;
        int                                 attribVal, tmpchildcount;

        if (_currNode == null)
        {
            _currNode = _parentNode;
        }

        nodelist    = _currNode.childNodes();
        nodecount   =  nodelist.length();
        _parentNode = _currNode;

        for (nodecount = nodecount -1; nodecount >= 0; nodecount--)
        {
            _currNode = nodelist.item(nodecount);

            if (_currNode.nodeType() != xmlNodeType::Text)
            {
                attributenodemap = _currNode.attributes();
                attributenode = attributenodemap.getNamedItem(#XMLATTRIBUTE_IMGNUM);

                attribVal = str2int(attributeNode.value());
                if (xmlDoc.root().name() != _currnode.name() && attribVal == 0)
                {
                    tmpchildcount = _parentNode.childNodes().length();
                    _parentNode.removeChild(_currNode);
                    tmpchildcount = _parentNode.childNodes().length();
                }
                else
                {
                    currChild = nodelist.item(nodecount);
                    this.RemoveEmptyTreeNodesEP(_parentNode, _currNode);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VersioningCompareTree construct()
    {
        return new VersioningCompareTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a new instance of the <c>VersioningCompareTree</c> class based on the specified
    ///    <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_formTreeControl">
    ///    The <c>FormTreeControl</c> control to use to display the comparison.
    /// </param>
    /// <param name="_versioningTmpTrans">
    ///    The temporary table that contains the data to populate the tree control.
    /// </param>
    /// <returns>
    ///    An instance of the <c>VersionCompareTree</c> class.
    /// </returns>
    public static VersioningCompareTree newForm(
        FormTreeControl             _formTreeControl,
        VersioningTmpTrans          _versioningTmpTrans
        )
    {
        VersioningCompareTree   versioningCompareTree;

        versioningCompareTree = VersioningCompareTree::construct();
        versioningCompareTree.parmFormTreeControl(_formTreeControl);
        versioningCompareTree.parmVersioningTmpTrans(_versioningTmpTrans);

        return versioningCompareTree;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>