<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetRegisterEntryEntityHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetRegisterEntryEntityHelper</c> class is a helper for the entities associated with budget register entry.
/// </summary>
public class BudgetRegisterEntryEntityHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBudgetModelIDs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of budget model IDs for the specified legal entity.
    /// </summary>
    /// <param name = "_legalEntityId">
    /// The legal entity ID.
    /// </param>
    /// <returns>
    /// A list of budget model IDs for the specified legal entity.
    /// </returns>
    public static List getBudgetModelIDs(LegalEntityDataAreaId _legalEntityId)
    {
        List budgetModelIDs = new List(Types::String);

        if (_legalEntityId)
        {
            changecompany(_legalEntityId)
            {
                BudgetModel budgetModel;

                while select ModelId from budgetModel
                    order by budgetModel.ModelId
                    where budgetModel.Type == HeadingSub::Heading
                        && budgetModel.Blocked == NoYes::No
                {
                    budgetModelIDs.addEnd(budgetModel.ModelId);
                }
            }
        }

        return budgetModelIDs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of budget codes for the specified legal entity.
    /// </summary>
    /// <param name = "_legalEntityId">
    /// The legal entity ID.
    /// </param>
    /// <returns>
    /// A list of budget codes for the specified legal entity.
    /// </returns>
    public static List getBudgetCodes(LegalEntityDataAreaId _legalEntityId)
    {
        List budgetCodes = new List(Types::String);

        if (_legalEntityId)
        {
            changecompany(_legalEntityId)
            {
                // Get the budget code query passing Original budget as a default parameter and not as a restriction of the types.
                Query query = BudgetTransactionManager::getBudgetTransactionCodeQuery(false, BudgetTransactionType::OriginalBudget);

                query.dataSourceTable(tableNum(BudgetTransactionCode)).addOrderByField(fieldNum(BudgetTransactionCode, Name), SortOrder::Ascending);

                QueryRun queryRun = new QueryRun(query);

                while (queryRun.next())
                {
                    BudgetTransactionCode budgetCode = queryRun.get(tableNum(BudgetTransactionCode));
                    budgetCodes.addEnd(budgetCode.Name);
                }
            }
        }

        return budgetCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of reason codes for the specified legal entity.
    /// </summary>
    /// <param name = "_legalEntityId">
    /// The legal entity ID.
    /// </param>
    /// <returns>
    /// A list of reason codes for the specified legal entity.
    /// </returns>
    public static List getReasonCodes(LegalEntityDataAreaId _legalEntityId)
    {
        List reasonCodes = new List(Types::String);

        if (_legalEntityId)
        {
            changecompany(_legalEntityId)
            {
                ReasonTable reasonTable;

                while select Reason from reasonTable
                    order by reasonTable.Reason
                    where reasonTable.Ledger == NoYes::Yes
                {
                    reasonCodes.addEnd(reasonTable.Reason);
                }
            }
        }

        return reasonCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAccountStructures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of account structures for the specified legal entity.
    /// </summary>
    /// <param name = "_legalEntityId">
    /// The legal entity ID.
    /// </param>
    /// <returns>
    /// A list of account structures for the specified legal entity.
    /// </returns>
    public static List getDimensionAccountStructures(LegalEntityDataAreaId _legalEntityId)
    {
        List lookupList = new List(Types::String);
        LanguageId currentUserLanguage = Global::currentUserLanguage();

        DimensionHierarchyView hierarchyView;
        LedgerStructure ledgerStructure;
        DimensionHierarchyLevel hierarchyLevel;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;

        if (_legalEntityId)
        {
            LedgerRecId primaryLedger = Ledger::primaryLedger(CompanyInfo::current(_legalEntityId));

            while select Name from hierarchyView
                order by hierarchyView.Name
                where hierarchyView.IsDraft == NoYes::No
                    && hierarchyView.StructureType == DimensionHierarchyType::AccountStructure
                    && hierarchyView.UserLanguageId == currentUserLanguage
                exists join LedgerStructure
                    where ledgerStructure.DimensionHierarchy == hierarchyView.RecId
                        && ledgerStructure.Ledger == primaryLedger
                exists join hierarchyLevel
                    where hierarchyLevel.DimensionHierarchy == hierarchyView.RecId
                exists join budgetDimensionAttribute
                    where budgetDimensionAttribute.DimensionAttribute == hierarchyLevel.DimensionAttribute
            {
                lookupList.addEnd(hierarchyView.Name);
            }
        }

        return lookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntryNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of budget register entry numbers for the specified legal entity.
    /// </summary>
    /// <param name = "_legalEntityId">
    /// The legal entity ID.
    /// </param>
    /// <returns>
    /// A list of budget register entry numbers for the specified legal entity.
    /// </returns>
    public static List getEntryNumbers(LegalEntityDataAreaId _legalEntityId)
    {
        List entryNumbers = new List(Types::String);

        if (_legalEntityId)
        {
            LedgerRecId primaryLedger = Ledger::primaryLedger(CompanyInfo::current(_legalEntityId));

            BudgetTransactionHeader transactionHeader;

            while select TransactionNumber from transactionHeader
                order by transactionHeader.TransactionNumber
                where transactionHeader.PrimaryLedger == primaryLedger
            {
                entryNumbers.addEnd(transactionHeader.TransactionNumber);
            }
        }

        return entryNumbers;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>