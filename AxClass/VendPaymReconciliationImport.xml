<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPaymReconciliationImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class VendPaymReconciliationImport extends CustVendPaymReconciliationImport
{
    /// <summary>
    ///    Returns the transaction currency code for the vendor transaction.
    /// </summary>
    /// <param name="_refTableId">
    ///    The table ID for the <c>VendTransOpen</c> table.
    /// </param>
    /// <param name="_refRecId">
    ///    The record ID for the <c>VendTransOpen</c> transaction.
    /// </param>
    /// <param name="_refCompany">
    ///    The company in which to look for the <c>VendTransOpen</c> transaction.
    /// </param>
    /// <returns>
    ///    The currency code specified on the vendor transaction.
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fetchTransCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode fetchTransCurrencyCode(
        RefTableId  _refTableId,
        RefRecId    _refRecId,
        CompanyId  _refCompany)
    {
        VendTrans       vendTrans;
        VendTransOpen   vendTransOpen;
        ;

        changecompany(_refCompany)
        {
            select  RecId
            from    vendTransOpen
            where   vendTransOpen.TableId == _refTableId
               &&   vendTransOpen.RecId   == _refRecId
            join    CurrencyCode
            from    vendTrans
            where   vendTrans.RecId == vendTransOpen.RefRecId;
        }
        return vendTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalType</Name>
				<Source><![CDATA[
    protected LedgerJournalType journalType()
    {
        LedgerJournalType ret;

        ret = LedgerJournalType::Payment;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printControlReport</Name>
				<Source><![CDATA[
    protected void printControlReport()
    {
        Args                        args = new Args();
        container                   recordPass;
        Counter                     flag;

        args.name(ssrsReportStr(CustVendPaymJournal, Report));
        args.caller(this);
        args.parm('VendImport');

        for (flag=1; flag<=numOfRecord; flag++)
        {
            recordPass += [conPeek(recordContainer[flag],1)];
        }
        args.object(new SysAnyType(recordPass));

        new MenuFunction(menuitemOutputStr(CustVendPaymReportJournalRun), MenuItemType::Output).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusOnInvoice</Name>
				<Source><![CDATA[
    void setStatusOnInvoice(InvoiceId           _invoice,
                            CustVendPaymStatus  _status,
                            ErrorCodePayment    _errorCodePayment = '')
    {
        SpecTrans       specTrans;
        VendTrans       vendTrans;
        VendTransOpen   vendTransOpen;
        ;

        ttsbegin;

        while select crosscompany RecId from vendTrans
            where vendTrans.Invoice == _invoice
        join RecId from vendTransOpen
            where vendTransOpen.RefRecId == vendTrans.RecId
        join forupdate specTrans
            where specTrans.RefTableId  == vendTransOpen.TableId
                    && specTrans.RefRecId    == vendTransOpen.RecId
                    && specTrans.RefCompany   == vendTransOpen.DataAreaId
        {
            if (specTrans.RecId)
            {
                changecompany(specTrans.company())
                {
                    specTrans.PaymentStatus = _status;
                    specTrans.ErrorCodePayment  = _errorCodePayment;
                    specTrans.update();
                }
            }
            else
            {
                info(strFmt("@SYS66294", _invoice));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusOnInvoiceAccountVoucher</Name>
				<Source><![CDATA[
    void setStatusOnInvoiceAccountVoucher(VendAccount           _vendAccount,
                                          Voucher               _voucher,
                                          recId                 _vendTransRecId,
                                          CustVendPaymStatus    _status,
                                          ErrorCodePayment      _errorCodePayment = ''
                                         )
    {
        VendTrans       vendTrans;
        VendTransOpen   vendTransOpen;
        SpecTrans       specTrans;

        boolean         found;
        #ISOCountryRegionCodes
        ttsbegin;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            while select crosscompany RecId from vendTrans
                where vendTrans.RecId      == _vendTransRecId
                join RecId from vendTransOpen
                    where vendTransOpen.RefRecId == vendTrans.RecId
                join forupdate specTrans
                    where specTrans.RefTableId  == vendTransOpen.TableId
                            && specTrans.RefRecId    == vendTransOpen.RecId
                            && specTrans.RefCompany   == vendTransOpen.DataAreaId
            {
                if (specTrans.RecId)
                {
                    changecompany(specTrans.company())
                    {
                        specTrans.PaymentStatus    = _status;
                        specTrans.ErrorCodePayment = _errorCodePayment;
                        specTrans.update();

                        found = true;
                    }
                }
            }
        }
        else
        {
            while select crosscompany RecId from vendTrans
                where vendTrans.AccountNum == _vendAccount &&
                      vendTrans.Voucher    == _voucher     &&
                      vendTrans.RecId      == _vendTransRecId
                join RecId from vendTransOpen
                    where vendTransOpen.RefRecId == vendTrans.RecId
                join forupdate specTrans
                    where specTrans.RefTableId  == vendTransOpen.TableId
                            && specTrans.RefRecId    == vendTransOpen.RecId
                            && specTrans.RefCompany   == vendTransOpen.DataAreaId
            {
                if (specTrans.RecId)
                {
                    changecompany(specTrans.company())
                    {
                        specTrans.PaymentStatus    = _status;
                        specTrans.ErrorCodePayment = _errorCodePayment;
                        specTrans.update();

                        found = true;
                    }
                }
            }
        }

        // If not found with archived recId, try without this restriction

        if (!found)
        {
            while select crosscompany RecId from vendTrans
                where vendTrans.AccountNum == _vendAccount
                    && vendTrans.Voucher == _voucher
                join RecId from vendTransOpen
                    where vendTransOpen.RefRecId == vendTrans.RecId
                join forupdate specTrans
                    where specTrans.RefTableId  == vendTransOpen.TableId
                            && specTrans.RefRecId    == vendTransOpen.RecId
                            && specTrans.RefCompany   == vendTransOpen.DataAreaId
            {
                if (specTrans.RecId)
                {
                    changecompany(specTrans.company())
                    {
                        specTrans.PaymentStatus    = _status;
                        specTrans.ErrorCodePayment = _errorCodePayment;
                        specTrans.update();

                        found = true;
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusOnPaymentAccountVoucher</Name>
				<Source><![CDATA[
    void setStatusOnPaymentAccountVoucher(JournalId             _journalId,
                                          VendAccount           _vendAccount,
                                          Voucher               _voucher,
                                          CustVendPaymStatus    _status,
                                          ErrorCodePayment      _errorCodePayment = ''
                                         )
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        boolean                             found;
        DimensionAttributeValueCombination  dimAttrValueCombo;
        #ISOCountryRegionCodes

        ttsbegin;

        while select forupdate ledgerJournalTrans
            where ledgerJournalTrans.JournalNum     == _journalId                &&
                  ledgerJournalTrans.AccountType    == LedgerJournalACType::Vend &&
                  ledgerJournalTrans.Voucher        == _voucher
            join RecId from dimAttrValueCombo where
                dimAttrValueCombo.RecId == ledgerJournalTrans.LedgerDimension    &&
                dimAttrValueCombo.DisplayValue == _vendAccount
        {
            ledgerJournalTrans.PaymentStatus    = _status;
            ledgerJournalTrans.ErrorCodePayment = _errorCodePayment;
            ledgerJournalTrans.update();

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
            {
            this.updateInvoicesFromPayment(ledgerJournalTrans);
            }

            found = true;
        }

        if (!found)
        {
            while select forupdate ledgerJournalTrans
                where ledgerJournalTrans.AccountType    == LedgerJournalACType::Vend &&
                      ledgerJournalTrans.Voucher        == _voucher
                join RecId from dimAttrValueCombo where
                    dimAttrValueCombo.RecId == ledgerJournalTrans.LedgerDimension    &&
                    dimAttrValueCombo.DisplayValue == _vendAccount
            {
                ledgerJournalTrans.PaymentStatus    = _status;
                ledgerJournalTrans.ErrorCodePayment = _errorCodePayment;
                ledgerJournalTrans.update();

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
                {
                    this.updateInvoicesFromPayment(ledgerJournalTrans);
                }

                found = true;
            }
        }

        if (!found)
        {
            info(strFmt("@SYS68291", _vendAccount, _voucher, _journalId));
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case 1 :
                [version, #CurrentListV1] = _packedClass;
                break;

            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayments</Name>
				<Source><![CDATA[
    //Sp4 - NO-DIS - totally rewritten to handle splitting of journal lines by status on invoicees (SpecTrans)
    //               only the journal lines that has been involved during import is updated/splitted
    //               rejected transactions can optionally be transfered to a new separate journal
    void updatePayments()
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans, ledgerJournalTransStatus, ledgerJournalTransOrig;
        SpecTrans           specTrans;
        SpecTrans           specTransAggr;
        recId               specTransNum;
        LedgerJournalTable  ledgerJournalTableRejected;
        AmountCur           amountCurTrans;
        boolean             origTransUsed;
        boolean             origRecalc;
        container           rejectedJournals;
        recId               journalRecId;
        recId               firstTransRecId;
        int                 i;
        int                 recordRecIdIdx;
        container           transStatusRecId;
        #ISOCountryRegionCodes

        void createLedgerJournalTableRejected()
        {
            if (!ledgerJournalTableRejected.RecId)
            {
                ledgerJournalTableRejected.JournalName  = ledgerJournalTable.JournalName;
                ledgerJournalTableRejected.insert();
                ledgerJournalTableRejected.Name         = strFmt('%1',CustVendPaymStatus::Rejected);
                ledgerJournalTableRejected.update();
                rejectedJournals = conIns(rejectedJournals,1,ledgerJournalTableRejected.JournalName,ledgerJournalTableRejected.RecId);
            }
            else
            {
                if (ledgerJournalTableRejected.JournalName != ledgerJournalTable.JournalName)
                {
                    ledgerJournalTableRejected.clear();
                    journalRecId = conPeek(rejectedJournals,conFind(rejectedJournals,ledgerJournalTable.JournalName)+1);
                    ledgerJournalTableRejected = LedgerJournalTable::findByRecId(journalRecId);
                    if (!ledgerJournalTableRejected)
                    {
                        ledgerJournalTableRejected.JournalName  = ledgerJournalTable.JournalName;
                        ledgerJournalTableRejected.insert();
                        ledgerJournalTableRejected.Name         = strFmt('%1',CustVendPaymStatus::Rejected);
                        ledgerJournalTableRejected.update();
                        rejectedJournals = conIns(rejectedJournals,1,ledgerJournalTableRejected.JournalName,ledgerJournalTableRejected.RecId);
                    }
                }
            }
        }

        AmountCur calcAmount()
        {
            ExchangeRateHelper  exchangeRateHelper =
            ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(ledgerJournalTrans.Company).RecId), ledgerJournalTrans.CurrencyCode);

            return this.convertAmountTransCurToAmountPaymCur(
                    specTrans.Balance01,
                    specTrans.RefCompany,
                    this.fetchTransCurrencyCode(specTrans.RefTableId, specTrans.RefRecId, specTrans.RefCompany),
                    ledgerJournalTrans.Company,
                    ledgerJournalTrans.CurrencyCode,
                    ledgerJournalTrans.TransDate,
                    specTrans.CrossRate,
                    exchangeRateHelper.prepareExchangeRateForStorage(ledgerJournalTrans.crossrate()));
        }
        ;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            ttsbegin;

            while select forupdate ledgerJournalTable
                where       ledgerJournalTable.JournalType == LedgerJournalType::Payment &&
                            ledgerJournalTable.Posted      == NoYes::No
                join forupdate  ledgerJournalTrans
                    where       ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
            {
                recordRecIdIdx          = conFind(recordRecId,ledgerJournalTrans.RecId);

                if (recordRecIdIdx)
                {
                    ledgerJournalTransOrig  = ledgerJournalTrans.data();
                    specTransNum            = (select crosscompany count(RecId) from specTrans where specTrans.SpecTableId   == ledgerJournalTrans.TableId &&
                                                                                        specTrans.SpecRecId     == ledgerJournalTrans.RecId &&
                                                                                        specTrans.SpecCompany   == ledgerJournalTrans.company()).RecId;
                    origRecalc              = false;
                    firstTransRecId         = 0;
                    transStatusRecId        = conNull();

                    while select crosscompany count(RecId), sum(Balance01) from specTransAggr
                        group by PaymentStatus
                        where specTransAggr.SpecTableId == ledgerJournalTrans.TableId &&
                              specTransAggr.SpecRecId   == ledgerJournalTrans.RecId &&
                              specTransAggr.SpecCompany == ledgerJournalTrans.company()
                    {
                        amountCurTrans  = 0;

                        while select crosscompany specTrans
                            where specTrans.SpecTableId     == ledgerJournalTrans.TableId   &&
                                  specTrans.SpecRecId       == ledgerJournalTrans.RecId     &&
                                  specTrans.SpecCompany     == ledgerJournalTrans.company() &&
                                  specTrans.PaymentStatus   == specTransAggr.PaymentStatus
                        {
                            amountCurTrans += calcAmount();
                        }

                        if (specTransAggr.RecId         == specTransNum ||                          //All spectrans with same status
                            specTransAggr.PaymentStatus == ledgerJournalTransOrig.PaymentStatus)    //Same status as original journalTrans
                        {
                            if (specTransAggr.RecId == specTransNum)
                            {
                                origTransUsed   = true;
                            }
                            else
                            {
                                origRecalc      = true;
                            }

                            ledgerJournalTrans.PaymentStatus    = specTransAggr.PaymentStatus;

                            if (amountCurTrans < 0)
                            {
                                ledgerJournalTrans.AmountCurDebit   = abs(amountCurTrans);
                                ledgerJournalTrans.AmountCurCredit  = 0;
                            }
                            else
                            {
                                ledgerJournalTrans.AmountCurDebit   = 0;
                                ledgerJournalTrans.AmountCurCredit  = abs(amountCurTrans);
                            }

                            if (specTransAggr.PaymentStatus             == CustVendPaymStatus::Rejected &&
                                rejectionsInSeparateJournal             == NoYes::Yes)
                            {
                                createLedgerJournalTableRejected();
                                ledgerJournalTrans.JournalNum = ledgerJournalTableRejected.JournalNum;

                                ledgerJournalTrans.Voucher = NumberSeq::newGetVoucherFromId(
                                    ledgerJournalTableRejected.ledgerJournalName().NumberSequenceTable,
                                    false).voucher();
                            }

                            ledgerJournalTrans.fillPaymentNotes();
                            ledgerJournalTrans.update();
                            recordContainer[recordRecIdIdx] = [ledgerJournalTrans];
                        }
                        else
                        {
                            ledgerJournalTransStatus.clear();
                            ledgerJournalTransStatus                = ledgerJournalTrans.data();
                            ledgerJournalTransStatus.PaymentStatus  = specTransAggr.PaymentStatus;

                            if (amountCurTrans < 0)
                            {
                                ledgerJournalTransStatus.AmountCurDebit     = abs(amountCurTrans);
                                ledgerJournalTransStatus.AmountCurCredit    = 0;
                            }
                            else
                            {
                                ledgerJournalTransStatus.AmountCurDebit     = 0;
                                ledgerJournalTransStatus.AmountCurCredit    = abs(amountCurTrans);
                            }

                            if (ledgerJournalTransStatus.PaymentStatus == CustVendPaymStatus::Rejected &&
                                rejectionsInSeparateJournal == NoYes::Yes)
                            {
                                createLedgerJournalTableRejected();
                                ledgerJournalTransStatus.JournalNum = ledgerJournalTableRejected.JournalNum;

                                ledgerJournalTransStatus.Voucher = NumberSeq::newGetVoucherFromId(
                                    ledgerJournalTableRejected.ledgerJournalName().NumberSequenceTable,
                                     false).voucher();
                            }

                            ledgerJournalTransStatus.insert();

                            transStatusRecId += ledgerJournalTransStatus.RecId;

                            firstTransRecId = firstTransRecId ? firstTransRecId : ledgerJournalTransStatus.RecId;

                            while select forupdate crosscompany specTrans
                                where specTrans.SpecTableId     == ledgerJournalTrans.TableId   &&
                                      specTrans.SpecRecId       == ledgerJournalTrans.RecId     &&
                                      specTrans.SpecCompany     == ledgerJournalTrans.company() &&
                                      specTrans.PaymentStatus   == specTransAggr.PaymentStatus
                            {
                                specTrans.SpecRecId = ledgerJournalTransStatus.RecId;
                                changecompany(specTrans.company())
                                {
                                    specTrans.update();
                                }
                            }
                        }
                    }

                    if (!origTransUsed && firstTransRecId)
                    {
                        ledgerJournalTransStatus    = LedgerJournalTrans::findRecId(firstTransRecId,true);

                        if (origRecalc)
                        {
                            recordContainer[recordRecIdIdx]     = [ledgerJournalTransStatus];   //the orig trans is recalculated but not part of this return
                                                                                                //file handling, and thus must mot be a part of the report
                                                                                                //The position in the container is therefor replased with the
                                                                                                //transaction with the new status
                            transStatusRecId                    = conDel(transStatusRecId,conFind(transStatusRecId,ledgerJournalTransStatus.RecId),1);
                        }
                        else
                        {
                            ledgerJournalTrans.PaymentStatus    = ledgerJournalTransStatus.PaymentStatus;
                            ledgerJournalTrans.AmountCurCredit  = ledgerJournalTransStatus.AmountCurCredit;
                            ledgerJournalTrans.AmountCurDebit   = ledgerJournalTransStatus.AmountCurDebit;
                            ledgerJournalTrans.JournalNum       = ledgerJournalTransStatus.JournalNum;

                            while select forupdate crosscompany specTrans
                                where specTrans.SpecTableId     == ledgerJournalTransStatus.TableId   &&
                                      specTrans.SpecRecId       == ledgerJournalTransStatus.RecId     &&
                                      specTrans.SpecCompany     == ledgerJournalTransStatus.company()
                            {
                                specTrans.SpecRecId = ledgerJournalTrans.RecId;
                                changecompany(specTrans.company())
                                {
                                    specTrans.update();
                                }
                            }

                            ledgerJournalTrans.fillPaymentNotes();
                            ledgerJournalTrans.update();

                            recordContainer[recordRecIdIdx]     = [ledgerJournalTrans];
                            transStatusRecId                    = conDel(transStatusRecId,conFind(transStatusRecId,ledgerJournalTransStatus.RecId),1);

                            ledgerJournalTransStatus.delete();
                        }
                    }

                    if (conLen(transStatusRecId))
                    {
                        for (i=1;i<=conLen(transStatusRecId);i++)
                        {
                            //adding new records in the recordscontainer according to the changes in this method
                            if (conPeek(transStatusRecId,i))
                            {
                                ledgerJournalTransStatus = LedgerJournalTrans::findRecId(conPeek(transStatusRecId,i),true);
                                if (ledgerJournalTransStatus)
                                {
                                    ledgerJournalTransStatus.fillPaymentNotes();
                                    ledgerJournalTransStatus.update();
                                    this.fillControlReport(ledgerJournalTransStatus);
                                }
                            }
                        }
                    }
                }
            }
            ttscommit;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendFineAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the fine amount for the vendor transaction for an specific <c>SpecTrans</c>.
    /// </summary>
    /// <param name="_fineAmount">
    /// Fine amount to be set.
    /// </param>
    /// <param name="_specTransRecId">
    /// Rec ID of the <c>SpecTrans</c> record.
    /// </param>
    void updateVendFineAmount_BR(FineAmount_BR  _fineAmount, RecId _specTransRecId)
    {
        LedgerJournalTrans  ledgerJournalTransLoc;
        LedgerJournalTransPayment_BR payment;
        SpecTrans           specTransLoc;
        VendTransOpen       vendTransOpenloc;
        ;

        ttsbegin;
        select  RefRecId, RefTableId, RefCompany from specTransLoc where specTransLoc.RecId == _specTransRecId
            join RecId from ledgerJournalTransLoc
                where ledgerJournalTransLoc.RecId == specTransLoc.SpecRecId
                    && ledgerJournalTransLoc.TableId == specTransLoc.SpecTableId
                    && ledgerJournalTransLoc.DataAreaId == specTransLoc.SpecCompany
            join forUpdate payment
                where payment.RefRecId == ledgerJournalTransLoc.RecId;

        if (payment)
        {
            payment.FineAmountCur_BR = _fineAmount;
            payment.update();
        }

        if (specTransLoc.RefCompany)
        {
            changecompany(specTransLoc.RefCompany)
            {
                update_recordSet vendTransOpenloc
                    setting FineAmount_BR        = -_fineAmount,
                            FineAmountPaymCur_BR = -_fineAmount
                    where vendTransOpenloc.RecId == specTransLoc.RefRecId
                        && vendTransOpenloc.TableId == specTransLoc.RefTableId
                        && vendTransOpenloc.DataAreaId == specTransLoc.RefCompany;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendInterestAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the interest amount for the vendor transaction for an specific <c>SpecTrans</c>.
    /// </summary>
    /// <param name="_intAmount">
    /// Interest amount to be set.
    /// </param>
    /// <param name="_specTransRecId">
    /// Rec ID of the <c>SpecTrans</c> record.
    /// </param>
    void updateVendInterestAmount_BR(FinInterestAmount_BR _intAmount, RecId _specTransRecId)
    {
        LedgerJournalTrans  ledgerJournalTransLoc;
        LedgerJournalTransPayment_BR payment;
        SpecTrans           specTransLoc;
        VendTransOpen       vendTransOpenloc;
        ;

        ttsbegin;
        select RefRecId, RefTableId, RefCompany from specTransLoc where specTransLoc.RecId == _specTransRecId
            join RecId from ledgerJournalTransLoc
                where ledgerJournalTransLoc.RecId == specTransLoc.SpecRecId
                    && ledgerJournalTransLoc.TableId == specTransLoc.SpecTableId
                    && ledgerJournalTransLoc.DataAreaId == specTransLoc.SpecCompany
            join forUpdate payment
                where payment.RefRecId == ledgerJournalTransLoc.RecId;

        if (payment)
        {
            payment.FinInterestAmountCur_BR = _intAmount;
            payment.update();
        }

        if (specTransLoc.RefCompany)
        {
            changecompany(specTransLoc.RefCompany)
            {
                update_recordSet vendTransOpenloc
                    setting InterestAmount_BR = -_intAmount,
                            InterestAmountPaymCur_BR   = -_intAmount
                    where vendTransOpenloc.RecId == specTransLoc.RefRecId
                        && vendTransOpenloc.TableId == specTransLoc.RefTableId
                        && vendTransOpenloc.DataAreaId == specTransLoc.RefCompany;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        VendPaymReconciliationImportDialog dialog = VendPaymReconciliationImportDialog::construct();
        dialog.openDialog(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendPaymReconciliationImport</Name>
				<Source><![CDATA[
    static VendPaymReconciliationImport newVendPaymReconciliationImport(VendPaymModeTable vendPaymModeTable)
    {
        DictClass                       dictClass;
        VendPaymReconciliationImport    vendPaymReconciliationImport;
        ;

        if (! vendPaymModeTable.ClassIdReturn)
        {
            return null;
        }

        if (! SysDictClass::isSuperclass(vendPaymModeTable.ClassIdReturn, classNum(VendPaymReconciliationImport)))
        {
            return null;
        }

        dictClass = new DictClass(vendPaymModeTable.ClassIdReturn);
        vendPaymReconciliationImport = dictClass.makeObject();

        if (! vendPaymReconciliationImport)
        {
            return null;
        }
        return vendPaymReconciliationImport;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>