<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanPeggingTreeKanbanCollector</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanPeggingTreeKanbanCollector</c> class finds a sub node of the type kanban.
/// </summary>
/// <remarks>
///    This class uses a breadth-first search traverser for the first level kanbans.
/// </remarks>
class LeanPeggingTreeKanbanCollector
{
    ReqPeggingTreeTraverser traverser;
    List                    foundKanbans;
    Set                     elementsToTraverse;
    boolean                 canStart;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        if (!traverser)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        foundKanbans            = new List(Types::Record);
        elementsToTraverse      = new Set(Types::Integer);
        traverser.NodeVisited   += eventhandler(this.onNodeVisited);

        // we should collect the IDs of the starting node children, as
        // those will be the only ones allowed to be traversed
        ReqPeggingTree     peggingTreeLocal = traverser.parmPeggingTree();
        ReqPeggingTreeNode startingNode     = traverser.parmStartingNode();
        List               childNodes       = peggingTreeLocal.getChildren(startingNode);

        // if the node has no children we still need to create the list
        // as the start node is always the first one to traverse
        if (!childNodes)
        {
            childNodes = new List(Types::Class);
        }

        // the start node should be the first to traverse
        childNodes.addStart(startingNode);

        if (childNodes)
        {
            ListEnumerator listEnumerator = childNodes.getEnumerator();

            while (listEnumerator.moveNext())
            {
                ReqPeggingTreeNode currentNode = listEnumerator.current();
                elementsToTraverse.add(currentNode.parmNodeId());
            }
        }

        canStart = elementsToTraverse.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onNodeVisited</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines an event that is raised when visiting a tree node.
    /// </summary>
    /// <param name="sender">
    /// The sender object of the event.
    /// </param>
    /// <param name="_args">
    /// The event arguments.
    /// </param>
    /// <remarks>
    /// Using the event arguments, the traversal could be stopped.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void onNodeVisited(ReqPeggingTreeTraverser sender, ReqPeggingTreeEventArgs _args)
    {
        ReqPeggingTreeNode              currNode = _args.parmCurrentNode();
        boolean                         stopTraversing = !elementsToTraverse.in(currNode.parmNodeId());

        if (!stopTraversing)
        {
            // extract kanban data from current node
            LeanPeggingTreeKanbanDetails details = LeanPeggingTreeKanbanDetails::newStandard(currNode);
            Kanban kanban = details.parmKanban();

            if (kanban)
            {
                foundKanbans.addEnd(kanban);
            }
        }

        _args.parmStopTraversing(stopTraversing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFoundKanbans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public List parmFoundKanbans(List _foundKanbans = foundKanbans)
    {
        foundKanbans = _foundKanbans;

        return foundKanbans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTraverser</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ReqPeggingTreeTraverser parmTraverser(ReqPeggingTreeTraverser _traverser = traverser)
    {
        traverser = _traverser;

        return traverser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates the tree traversal.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        // we only collect the kanbans for the immediate children of the starting node
        if (canStart)
        {
            traverser.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected static LeanPeggingTreeKanbanCollector construct()
    {
        return new LeanPeggingTreeKanbanCollector();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>LeanPeggingTreeKanbanCollector</c> class.
    /// </summary>
    /// <param name="_peggingTree">
    /// The tree to be traversed;
    /// </param>
    /// <param name="_startingNode">
    /// The starting node.
    /// </param>
    /// <returns>
    /// An instance of <c>LeanPeggingTreeKanbanCollector</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanPeggingTreeKanbanCollector newStandard(ReqPeggingTree _peggingTree, ReqPeggingTreeNode _startingNode)
    {
        ReqPeggingTreeTraverser         traverser = ReqPeggingTreeTraverser::newStandard(_peggingTree,
                                                                                         _startingNode);
        LeanPeggingTreeKanbanCollector     result = LeanPeggingTreeKanbanCollector::construct();
        result.parmTraverser(traverser);
        result.init();

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
