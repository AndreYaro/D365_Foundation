<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConsignmentReplenishmentOrderFormLetter_ProductReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ConsignmentReplenishmentOrderFormLetter_ProductReceipt</c> class is the entry point for the formletter framework
/// and can be used to interact with the posting form <c>ConsignmentDraftReplenishmentOrderJournal</c> for posting product receipts.
/// </summary>
[SysOperationJournaledParametersAttribute(true)]
public class ConsignmentReplenishmentOrderFormLetter_ProductReceipt
extends ConsignmentReplenishmentOrderFormLetter implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription  description()
    {
        return "@SYS338940";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return ConsignmentReplenishmentOrderFormLetter_ProductReceipt::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the print management document type.
    /// </summary>
    /// <returns>
    ///    The print management document type for consignment.
    /// </returns>
    /// <remarks>The print functionality is not supported for consignment.</remarks>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        throw error(strFmt("@SYS19306",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newConsignmentProductReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of a <c>ConsignmentReplenishmentOrderFormLetter_ProductReceipt</c> class derivate.
    /// </summary>
    /// <param name="_className">
    /// The class name of the service class.
    /// </param>
    /// <param name="_methodName">
    /// The method name of the service operation.
    /// </param>
    /// <param name="_executionMode">
    /// The execution mode to use when executing the service operation.
    /// </param>
    /// <returns>
    /// An instance of the <c>ConsignmentReplenishmentOrderFormLetter_ProductReceipt</c> class.
    /// </returns>
    public static ConsignmentReplenishmentOrderFormLetter_ProductReceipt newConsignmentProductReceipt(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postReplenishmentOrderProductReceipt),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        ConsignmentReplenishmentOrderFormLetter_ProductReceipt formletter = new ConsignmentReplenishmentOrderFormLetter_ProductReceipt(_className, _methodName, _executionMode);
        formletter.init();
        return formletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a way to clean up after a dialog box has been canceled.
    /// </summary>
    protected void cleanupDialog()
    {
        if (!currentBatch)
        {
            ConsignmentDraftReplenishmentOrderJournalHeader::deleteDraftReplenishmentOrderJournals(this.parmId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperationUpdateError</Name>
				<Source><![CDATA[
    protected void afterOperationUpdateError(boolean _updateError)
    {
        if (_updateError)
        {
            ConsignmentDraftReplenishmentOrderJournalHeader::deleteDraftReplenishmentOrderJournals(this.parmId());
        }

        super(_updateError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>