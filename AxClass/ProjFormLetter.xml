<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFormLetter</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class ProjFormLetter extends FormLetter
{
    RecordSortedList        recordListProjProposalCost;
    RecordSortedList        recordListProjProposalEmpl;
    RecordSortedList        recordListProjProposalRevenue;
    RecordSortedList        recordListProjProposalOnAcc;
    RecordSortedList        recordListProjProposalItem;

    ProjProposalTotals      projProposalTotals;

    ProjProposalJour        projProposalJour;
    ProjInvoiceTable        projInvoiceTable;
    ProjInvoiceParmTable    projInvoiceParmTable;
    ProjInvoiceJour         projInvoiceJour;

    QueryRun                parmChooseLines;

    LedgerVoucher           ledgerVoucher;
    TransactionTxt          transactionTxt;

    ProjProposalId          projProposalId;
    ProjProposalJour        parmProjProposalJour;

    NoYes                   creditNote;

    TransDate               respiteDate;

    TypeOfCreditmaxCheck    checkCreditMax;
    boolean                 storno;
    boolean                 editLinesChanged;

    boolean                 proforma;
    boolean                 creditRemaining;

    CreditLineError         creditWarning;

    boolean                 readyForInvoicing;
    boolean                 fixedExchRate;

    StartDate               startDateUpdate;
    StartDate               startDateTable;
    TimeOfDay               startTimeUpdate;
    TimeOfDay               startTimeTable;

    boolean                 isBillingRule;
    boolean                 isRelease;
    boolean                 isManaged;
    boolean                 isInInvoicingWorkflow;
    boolean                 lateSelection;
    LateSelectionQuery      lateSelectionQuery;

    #localmacro.LinePrefix
        setPrefix(#PreFixField(%1, InvoiceProposalNum   ) + ' '
                + #PreFixField(%1, InvoiceProject       )    );
    #endmacro

    //List of parameters extracted from arguments for the transfer from main() to mainOnServer()
    #LOCALMACRO.CachedArgsList
        parmEnum
        , isInInvoicingWorkflow
    #ENDMACRO
    LtDocNumberingCode      ltDocNumberingCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSales_W</Name>
				<Source><![CDATA[
    protected boolean checkSales_W()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    public void chooseLines()
    {
        ProjFormletterParmData projFormletterParmData;
        progressTotal = 0;

        if (!readyForInvoicing)
        {
            projFormletterParmData = ProjFormletterParmData::newChooseLines(this.pack());
            projFormletterParmData.parmIsInInvoicingWorkflow(isInInvoicingWorkflow);
            projFormletterParmData.createData();
            this.getValuesFormletterParmData(projFormletterParmData);

            readyForInvoicing = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a way to clean up after a dialog box has been canceled.
    /// </summary>
    protected void cleanupDialog()
    {
        ProjInvoiceParmTable::deleteWithoutUpdate(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    public void createParmLine(ProjProposalJour  _projProposalJour)
    {
        if (!_projProposalJour)
        {
            throw error("@SYS50125");
        }

        if (! ProjInvoiceParmTable::exist(parmId, _projProposalJour.ProjInvoiceId))
        {
            currency            = _projProposalJour.CurrencyId;
            orderAccount        = _projProposalJour.OrderAccount;
            invoiceAccount      = _projProposalJour.InvoiceAccount;

            projInvoiceParmTable.clear();

            projInvoiceParmTable.initFromProjProposalJour(_projProposalJour);

            projInvoiceParmTable.ParmId                 = parmId;
            projInvoiceParmTable.BatchAdministration    = multiForm;
            projInvoiceParmTable.ParmJobStatus          = ParmJobStatus::Waiting;

            projInvoiceParmTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        FormRun         projectInvoiceEditLines;

        projectInvoiceEditLines = classfactory.formRunClass(FormLetter::newClientArgs(formStr(ProjInvoiceEditLines), this));

        projectInvoiceEditLines.init();

        if (showDialog)
        {
            return projectInvoiceEditLines;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLinesChanged</Name>
				<Source><![CDATA[
    public boolean  editLinesChanged(boolean  _editLinesChanged = editLinesChanged)
    {
        editLinesChanged = _editLinesChanged;

        return editLinesChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ok = super();

        if (!this.proforma() && !printFormletter)
        {
            if (Box::okCancel("@SYS28077",DialogButton::Cancel) == DialogButton::Cancel )
            {
                return checkFailed("@SYS21533");
            }
        }

        if (printFormletter && !this.proforma() && !this.usePrintManagement() &&
                new SRSPrintDestinationSettings(printerSettingsFormletter).printMediumType() == SRSPrintMediumType::Screen)
        {
            if (Box::okCancel("@SYS25905",DialogButton::Cancel) == DialogButton::Cancel)
            {
                return checkFailed("@SYS21533");
            }
        }

        if (!printFormletter && this.proforma())
        {
            if (Box::okCancel("@SYS25907", DialogButton::Cancel) == DialogButton::Cancel)
            {
                return false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValuesFormletterParmData</Name>
				<Source><![CDATA[
    protected void getValuesFormletterParmData(formletterParmData _projFormletterParmData)
    {
        this.parmQueryChooseLines(_projFormletterParmData.parmQueryChooseLines());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void initParameters(NoYes                  _mustBeUpdated      = proforma,
                               TypeOfCreditmaxCheck   _checkCreditMax     = checkCreditMax,
                               TransDate              _respiteDate        = respiteDate,
                               boolean                _storno             = storno,
                               NoYes                  _creditRemaining    = creditRemaining,
                               Printout               _printout           = printout,
                               NoYes                  _printFormletter    = printFormletter,
                               NoYes                  _usePrintManagement = usePrintManagement,
                               boolean                _isBillingRule      = isBillingRule,
                               boolean                _isRelease          = isRelease,
                               boolean                _isManaged          = isManaged)
    {
        proforma            = ! _mustBeUpdated;
        checkCreditMax      = _checkCreditMax;
        respiteDate         = _respiteDate;
        storno              = _storno;
        creditRemaining     = _creditRemaining;
        usePrintManagement  = _usePrintManagement;

        printout            = _printout;
        printFormletter     = _printFormletter;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            isBillingRule       = _isBillingRule;
            isRelease           = _isRelease;
            isManaged           = _isManaged;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBillingRule</Name>
				<Source><![CDATA[
    public boolean isBillingRule(boolean _isBillingRule = isBillingRule)
    {
        isBillingRule = _isBillingRule;

        return isBillingRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isManaged</Name>
				<Source><![CDATA[
    public boolean isManaged(boolean _isManaged = isManaged)
    {
        isManaged = _isManaged;

        return isManaged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRelease</Name>
				<Source><![CDATA[
    public boolean isRelease(boolean _isRelease = isRelease)
    {
        isRelease = _isRelease;

        return isRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInInvoicingWorkflow</Name>
				<Source><![CDATA[
    public boolean parmIsInInvoicingWorkflow(boolean _isInInvoicingWorkflow = isInInvoicingWorkflow)
    {
        isInInvoicingWorkflow = _isInInvoicingWorkflow;

        return isInInvoicingWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLtDocNumberingCode</Name>
				<Source><![CDATA[
    public LtDocNumberingCode parmLtDocNumberingCode(LtDocNumberingCode _ltDocNumberingCode = ltDocNumberingCode)
    {
        ltDocNumberingCode = _ltDocNumberingCode;
        return ltDocNumberingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjProposalJour</Name>
				<Source><![CDATA[
    public ProjProposalJour parmProjProposalJour(ProjProposalJour _projProposalJour = parmProjProposalJour)
    {
        parmProjProposalJour  = _projProposalJour;
        return parmProjProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryChooseLines</Name>
				<Source><![CDATA[
    QueryRun parmQueryChooseLines(QueryRun _parmChooseLines = parmChooseLines)
    {
        parmChooseLines = _parmChooseLines;

        return parmChooseLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReadyForInvoicing</Name>
				<Source><![CDATA[
    public boolean parmReadyForInvoicing(boolean _readyForInvoicing = readyForInvoicing)
    {
        readyForInvoicing = _readyForInvoicing;

        return readyForInvoicing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public ProjProposalJour parmSourceTable(Common _projProposalJour = projProposalJour)
    {
        projProposalJour = _projProposalJour as ProjProposalJour;

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTable2Update</Name>
				<Source><![CDATA[
    public ProjInvoiceParmTable parmTable2Update(Common _parmTable2Update = projInvoiceParmTable)
    {
        projInvoiceParmTable = _parmTable2Update as ProjInvoiceParmTable;

        return projInvoiceParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptInit</Name>
				<Source><![CDATA[
    void prePromptInit()
    {
        this.showQueryForm(false);
        this.chooseLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management node type.
    /// </summary>
    /// <returns>
    /// The print management node type for project.
    /// </returns>
    protected PrintMgmtNodeType printMgmtNodeType()
    {
        return PrintMgmtNodeType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    public boolean proforma(boolean _proforma = proforma)
    {
        proforma = _proforma;

        return proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the parameter Project Invoice Proposal.
    /// </summary>
    /// <param name = "_projProposalId">
    /// The new value of the parameter Project Invoice Proposal.
    /// </param>
    /// <returns>
    /// The current value of the parameter Project Invoice Proposal.
    /// </returns>
    public ProjProposalId projProposalId(ProjProposalId _projProposalId = projProposalId)
    {
        projProposalId  = _projProposalId;

        return projProposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        FormletterService               formletterService;

        infolog.updateViewSet(this);

        if (this.isInBatch())
        {
            this.parmBatchJobId(this.parmCurrentBatch().BatchJobId);
            this.parmBatchGroupId(this.parmCurrentBatch().GroupId);
        }

        formletterService = FormletterService::newFormletterService(this.pack(), this.documentStatus(), FormletterType::Project);
        formletterService.run();
        this.readFormletterServiceOutputs(formletterService);
        progress = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFormletterServiceOutputs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the output of the provided <c>FormletterService</c> instance.
    /// </summary>
    /// <param name = "formletterService">The provided <c>FormletterService</c> instance.</param>
    protected void readFormletterServiceOutputs(FormletterService formletterService)
    {
        numberOfRecords = formletterService.getNumberOfOrdersPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>storno</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the user selection for the dialog field, Credit correction.
    /// </summary>
    /// <returns>
    /// True if the dialog checkbox is checked.
    /// </returns>
    /// <remarks>
    /// If true, the transaction vouchers will be marked as corrections and will use storno principle when posting to General Ledger.
    /// </remarks>
    public boolean storno()
    {
        return storno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void  updateQueryBuild()
    {
        Common              proposalJour;
        ProjProposalJour    currProposalJour;
        FormDataSource      formDataSource;

        chooseLines = new SysQueryRun(queryStr(ProjUpdate));
        proposalJour = this.parmProjProposalJour();

        switch (true)
        {
            case proposalJour != null:
                formDataSource = FormDataUtil::getFormDataSource(proposalJour);
                for (currProposalJour = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : proposalJour;
                     currProposalJour;
                     currProposalJour=formDataSource.getNext())
                {
                     chooseLines.query().dataSourceTable(tableNum(ProjProposalJour)).addRange(fieldNum(ProjProposalJour, ProposalId)).value(queryValue(currProposalJour.ProposalId));
                }
                break;
            case this.projProposalId() != '':
                chooseLines.query().dataSourceTable(tableNum(ProjProposalJour)).addRange(fieldNum(ProjProposalJour, ProposalId)).value(queryValue(this.projProposalId()));
                break;
            default:
                chooseLines.query().dataSourceTable(tableNum(ProjProposalJour)).addRange(fieldNum(ProjProposalJour, LineProperty)).value(queryValue(ProjLinePropertyCode::Open));
                break;
        }

        chooseLines.query().interactive(showQueryForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if it is okay to continue.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called; optional.
    /// </param>
    /// <returns>
    /// true if it is okay to continue; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        if (!this.checkSales_W())
        {
            return checkFailed(strFmt("@SYS26498", projInvoiceParmTable.ParmId));
        }

        if (!this.checkLateSelection())
        {
            return false;
        }

        return super(_calledFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrinterSettingsFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the user to modify the printer settings using the standard print job settings dialog.
    /// </summary>
    /// <param name="_projFormLetter">
    /// The <c>ProjFormLetter</c> class where the printer settings are modified.
    /// </param>
    /// <returns>
    /// true if the settings were modified; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The <c>callPrinterSettingsFormLetter</c> method is static so it is possible to select AOS
    /// printers.Selecting AOS printers requires that the <c>SysPrintForm</c> is called from the server.
    /// </remarks>
    static boolean callPrinterSettingsFormLetter(ProjFormLetter _projFormLetter)
    {
    #PrintMgmtSetup
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(_projFormLetter.printerSettingsFormletter());
        boolean ok = SrsReportRunUtil::showSettingsDialog(printSettings, #SRSPrintDestinationTokenPrintMgmt, enum2Symbol(enumNum(PrintMgmtDocumentType), toanytype(_projFormLetter.printMgmtDocumentType())));

        _projFormLetter.updatePrinterSettingsFormLetter(printSettings.pack());

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjFormLetter construct(DocumentStatus  _document, boolean _getParmNum = true)
    {
        ProjFormLetter projFormLetter;

        switch (_document)
        {
            case DocumentStatus::ProjectInvoice       :
                projFormLetter = new ProjFormLetter_Invoice();
                if (_getParmNum)
                {
                    ttsbegin;
                    projFormLetter.parmId(NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num());
                    ttscommit;
                }
                return projFormLetter;

            default:
                throw error(strFmt("@SYS50949", _document));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS10619";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterSettingsFormletter</Name>
				<Source><![CDATA[
    static container getPrinterSettingsFormletter(DocumentStatus document)
    {
        ProjFormLetter  projFormLetterPrint;

        projFormLetterPrint = ProjFormLetter::construct(document);
        projFormLetterPrint.getLast();

        return projFormLetterPrint.printerSettingsFormletter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        Common              record;
        FormDataSource      recordDataSource;
        container           dataSourceRecordsPacked;

        Map mapTradeRecordLoc = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);

        if (!_args)
        {
            // Update must be called with parameters.
            throw error("@SYS25407");
        }

        record = _args.record();

        if (record && FormDataUtil::getFormDataSource(record))
        {
            recordDataSource  = FormDataUtil::getFormDataSource(record);
            dataSourceRecordsPacked = FormLetter::getFormRecord(recordDataSource);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && record && !FormDataUtil::getFormDataSource(record))
        {
            mapTradeRecordLoc.insert(record.RecId,record);
            dataSourceRecordsPacked = mapTradeRecordLoc.pack();
        }

        ProjFormLetter::mainOnServer(ProjFormLetter::packFromArgs(_args), record, dataSourceRecordsPacked);

        if (_args.caller() && _args.caller().name() == formStr(ProjInvoiceProposalDetail))
        {
            _args.caller().updateDisplay(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packFromArgs</Name>
				<Source><![CDATA[
	/// <summary>
    /// Packs <c>Args</c> information into a container.
    /// </summary>
    /// <param name = "_args">
	/// An <c>Args</c> object to pack
    /// </param>
    /// <returns>
    /// The packed information.
	/// </returns>
    /// <remarks>
    /// Additional information can be packed by using the <c>SysPackExtensions</c> class
    /// in a post event handler method.
	/// </remarks>
	[Hookable]
	private static container packFromArgs(Args _args)
    {
        int		parmEnum;
        boolean	isInInvoicingWorkflow;

        parmEnum = _args.parmEnum();

        if (_args.parm() == classStr(PSAProjInvoiceProposalTaskActionManager))
        {
            isInInvoicingWorkflow = true;
        }

        return [#CachedArgsList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks <c>Args</c> information from a container.
    /// </summary>
    /// <param name = "_cachedArgs">
    /// A container to unpack.
    /// </param>
    /// <param name = "_projFormLetter">
    /// A <c>ProjFormLetter</c> object to initialize with the content of the container.
    /// </param>
    /// <remarks>
    /// Additional information can be unpacked by using the <c>SysPackExtensions</c> class
    /// in a post event handler method.
    /// </remarks>
    [Hookable]
    private static void unpackFromArgs(container _cachedArgs, ProjFormletter _projFormLetter)
    {
        int		parmEnum;
        boolean	isInInvoicingWorkflow;
        [#CachedArgsList] = _cachedArgs;

        _projFormLetter.parmIsInInvoicingWorkflow(isInInvoicingWorkflow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainOnServer</Name>
				<Source><![CDATA[
    [Hookable]
    protected static void mainOnServer(container  _cachedArgs,
                                       Common     _record,
                                       container  _dataSourceRecordsPacked)
    {
        //Cached args
        int                 parmEnum;
        boolean             isInInvoicingWorkflow;

        ProjFormLetter      projFormLetter;
        ParmId              parmId;
        ProjProposalJour    localProjProposalJour;

        if (_cachedArgs == conNull())
        {
            throw error("@SYS25407");
        }

        [#CachedArgsList] = _cachedArgs;

        projFormLetter = ProjFormLetter::construct(parmEnum);
        parmId = projFormLetter.parmId();
        projFormLetter.getLast();

        if (_record)
        {
            switch (_record.TableId)
            {
                case tableNum(ProjProposalJour) :
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        localProjProposalJour = _record;
                        projFormLetter.projProposalId(localProjProposalJour.ProposalId);
                    }
                    projFormLetter.parmProjProposalJour(_record);
                    projFormLetter.parmDataSourceRecordsPacked(_dataSourceRecordsPacked);
                    if (!ProjProposalJour::hasDetails(projFormLetter.parmProjProposalJour()))
                    {
                        throw error("@SYS78876");
                    }
                    break;
            }
        }

        projFormLetter.parmId(parmId);

        if (!projFormLetter.isInBatch())
        {
            projFormLetter.parmReadyForInvoicing(false);
            projFormLetter.parmLateSelection(false);
            projFormLetter.parmLateSelectionQuery(conNull());
        }
        else
        {
            projFormLetter.parmLateSelection(true);
            projFormLetter.parmLateSelectionQuery();
        }

        ProjFormLetter::unpackFromArgs(_cachedArgs, projFormLetter);
        
        projFormLetter.prePromptInit();
        if (projFormLetter.prompt())
        {
            projFormLetter.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>posUsePrintManagement</Name>
				<Source><![CDATA[
    static int posUsePrintManagement()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a print preview for a record from <c>ProjProposalJour</c> table.
    /// </summary>
    /// <param name="_invoiceProposal">
    /// A record from <c>ProjProposalJour</c> table.
    /// </param>
    public static void printPreview(ProjProposalJour _invoiceProposal)
    {
        if (_invoiceProposal && _invoiceProposal.checkRecalculatesTotalsStatusIsRequired())
        {
            ProjProposalTranSummariesRefresh proposalTranSummariesRefresh = new ProjProposalTranSummariesRefresh();
            proposalTranSummariesRefresh.refreshProposalSummariesExecution(_invoiceProposal);
        }

        RecordSortedList recordList = new RecordSortedList(_invoiceProposal.TableId);
        recordList.sortOrder(fieldNum(ProjProposalJour, RecId));

        ProjProposalJour localJournal;
        if (FormDataUtil::getFormDataSource(_invoiceProposal))
        {
            FormDataSource dataSource = FormDataUtil::getFormDataSource(_invoiceProposal);
            for (localJournal = dataSource.getFirst(true);
                 localJournal;
                 localJournal = dataSource.getNext())
            {
                recordList.ins(localJournal);
            }
        }

        if (recordList.len() <= 0)
        {
            recordList.ins(_invoiceProposal);
        }

        recordList.first(localJournal);
        do
        {
            if (!localJournal)
            {
                break;
            }

            if (!ProjFormLetter::shouldPrintPreview(localJournal))
            {
                break;
            }

            ProjFormLetter projFormLetter = ProjFormLetter::construct(DocumentStatus::ProjectInvoice);
            boolean isManaged = (_invoiceProposal.psaInvoiceFormats == PSAInvoiceFormats::ManageInvoice);
            projFormLetter.initParameters(NoYes::No,
                                          TypeOfCreditmaxCheck::None,
                                          DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                          NoYes::No,
                                          NoYes::No,
                                          Printout::Current,
                                          NoYes::Yes,
                                          NoYes::No,
                                          PSAContractLineItems::hasBillingRules(localJournal.ProjInvoiceProjId),
                                          ProjProposalJour::isProposalRelease(localJournal.ProposalId),
                                          isManaged);

            ProjInvoiceJour projInvoiceJour;
            delete_from projInvoiceJour where
                projInvoiceJour.ProposalId == localJournal.ProposalId &&
                !projInvoiceJour.ProjInvoiceId;

            projFormLetter.createParmLine(localJournal);
            projFormLetter.parmProjProposalJour(localJournal);
            projFormLetter.runOperation();
        } while (recordList.next(localJournal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPrintPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the preview should be printed for the invoice proposal.
    /// </summary>
    /// <param name = "_projProposalJour">
    /// A <c>ProjProposalJour</c> record.
    /// </param>
    /// <returns>
    /// true.
    /// </returns>
    [HookableAttribute(true)]
    protected static boolean shouldPrintPreview(ProjProposalJour _projProposalJour)
    {
        // This method is used for extensibility.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the lateSelection control value.
    /// </summary>
    /// <returns>
    /// True if lateSelection control checkbox is marked ; otherwise false.
    /// </returns>
    public boolean lateSelection()
    {
        boolean ret;

        ret = this.parmLateSelection();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelectionRemoveLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an option to select the record to remove.
    /// </summary>
    /// <param name="_lateSelection">
    /// True if mark lateSelection checkbox, Otherwise false.
    /// </param>
    /// <param name="_parmId">
    /// A ParmId value.
    /// </param>
    /// <returns>
    /// true if the lateSelection control is checkbox marked; otherwise, false.
    /// </returns>
    public boolean lateSelectionRemoveLines(boolean _lateSelection, ParmId _parmId)
    {
        boolean  ok = true;

        if (_lateSelection && this.numberOfTables(_parmId) > 0)
        {
            if (Box::yesNo("@SYS72909", DialogButton::Yes))
            {
                ProjInvoiceParmtable::deleteWithoutUpdate(_parmId);
            }
            else
            {
                ok = false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the record count.
    /// </summary>
    /// <param name="_parmId">
    /// A ParmId value.
    /// </param>
    /// <returns>
    /// No of record.
    /// </returns>
    public Counter numberOfTables(ParmId _parmId)
    {
        ProjInvoiceParmTable  projInvoiceParmTableLoc;

        select count(RecId) from projInvoiceParmTableLoc
            where projInvoiceParmTableLoc.ParmId == _parmId;

        return any2int(projInvoiceParmTableLoc.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLateSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the lateselection control value.
    /// </summary>
    /// <param name="_lateSelection">
    /// A lateSelection control value.
    /// </param>
    /// <returns>
    /// True if mark; otherwise false.
    /// </returns>
    public boolean parmLateSelection(boolean _lateSelection = lateSelection)
    {
        lateSelection = _lateSelection;

        return lateSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLateSelectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the lateSelectionQuery query container.
    /// </summary>
    /// <param name="_lateSelectionQuery">
    /// A lateSelectionQuery value.
    /// </param>
    /// <returns>
    /// LateSelectionQuery query container.
    /// </returns>
    public LateSelectionQuery parmLateSelectionQuery(LateSelectionQuery _lateSelectionQuery = lateSelectionQuery)
    {
        lateSelectionQuery = _lateSelectionQuery;

        return lateSelectionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLateSelection</Name>
				<Source><![CDATA[
    protected boolean checkLateSelection()
    {
        boolean  ok = true;

        if (this.parmLateSelection() && !this.parmLateSelectionQuery())
        {
            ok = checkFailed("@SYS72782");
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>