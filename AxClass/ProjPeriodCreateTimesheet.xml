<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodCreateTimesheet</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPeriodCreateTimesheet extends ProjPeriodCreate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcStopDate</Name>
				<Source><![CDATA[
    protected void calcStopDate()
    {
        int counter;
        int periodOffset = 0;

        switch (this.timesheetFrequency())
        {
            case TSPeriodFrequency::Week,
            TSPeriodFrequency::Month,
            TSPeriodFrequency::Period:
            super();
                break;

            case TSPeriodFrequency::BiWeekly:
                stopDate = startDate + (14 * (periodQty-1));
                break;

            case TSPeriodFrequency::SemiMonthly:
            if (dayOfMth(startDate) > 15)
                {
                    periodOffset = 1;
                }
                for (counter=1;counter < ((periodQty+periodOffset)/2);counter++)
                {
                    stopDate = nextMth(stopDate);
                }

                if ((periodQty+periodOffset) mod 2 == 0)
                {
                    stopDate = endmth(stopDate);
                }
                else
                {
                    stopDate = dateStartMth(stopDate) + 14;
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog          = super();
        date            tmpStartDate    = this.lastDateInPeriod(projPeriodTimesheetWeek);
        date            tmpEndDate      = this.lastDateInPeriod(projPeriodLine);
        boolean         linesExist;

        linesExist = (select firstfast projPeriodLine where projPeriodLine.PeriodId == projPeriodId).RecId;

        if (this.parmUpdateTimesheetPeriods()==NoYes::Yes)
        {
            dialog.caption("@SYS190501");
            dialog.addGroup("@SYS40"); //period

            dialogPeriodStartDate = dialog.addFieldValue(extendedTypeStr(ProjPeriodFrom),startDate,"@SYS57856");
            dialogPeriodToDate    = dialog.addFieldValue(extendedTypeStr(ProjPeriodTo),stopDate,"@SYS22882");

            dialogPeriodStartDate.value(tmpStartDate);
            dialogPeriodToDate.value(tmpEndDate);
        }
        else
        {
            dialog.caption("@SYS50118");

            dialog.addGroup("@SYS40"); //Period

            this.createUpdateWorkerPeriodControlInDialog(dialog);

            dialogPeriodStartDate = dialog.addFieldValue(extendedTypeStr(ProjPeriodFrom),startDate,"@SYS57856");
            if (linesExist)
            {
                dialogPeriodStartDate.value(this.lastDateInPeriod(projPeriodLine)+1);
                dialogPeriodStartDate.enabled(NoYes::No);
            }

            if (!CEIntegrationEnabled && this.isTimesheetPeriod())
            {
                dialogCreateTimesheetPeriod = dialog.addFieldValue(extendedTypeStr(NoYesId),createTimesheetPeriod,"@SYS190501");

                startOfWeek = ProjPeriodTable::find(projPeriodId).WeekStart;

                if (startOfWeek == WeekDays::None)
                {
                    startOfWeek = ProjParameters::find().WeekStart;
                }

                dialogStartOfWeek = dialog.addFieldValue(extendedTypeStr(TSWeekStart),startOfWeek,"@SYS183947");
                if (linesExist)
                {
                    dialogStartOfWeek.enabled(NoYes::No);
                }
            }

            dialogPeriodLengthGroup   = dialog.addGroup('');
            dialogPeriodLengthGroup.columns(RangeStatus::Hidden);
   
			this.createNumberOfPeriodsControlInDialog(dialog);

            dialogPeriodFreqGroup   = dialog.addGroup('',dialogPeriodLengthGroup);
            dialogPeriodFreqGroup.columns(1);
            dialogPeriodFreqGroup.frameType(FormFrameType::None);

            dialogPeriodUnit = dialog.addFieldValue(enumStr(PerDayWeekMthQtYr),this.timeFrequency(),"@SYS11959","@SYS10128");
            dialogPeriodUnit.enabled(NoYes::No);
			
			if (!CEIntegrationEnabled)
		    {
                dialogTimesheetPeriodUnit = dialog.addFieldValue(enumStr(TSPeriodFrequency),this.timesheetFrequency(),"@SYS304322","@SYS304324");
                dialogTimesheetPeriodUnit.enabled(NoYes::No);
			}

            this.createUtilizationNormGroupInDialog(dialog);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeClass</Name>
				<Source><![CDATA[
    protected void executeClass()
    {
        if (this.parmUpdateTimesheetPeriods()==NoYes::Yes)
        {
            progress.setCaption("@SYS190503");
            startDate = ProjPeriodLine::findFromPeriod(this.parmProjPeriodId(),startDate,false).PeriodFrom;
            progress.setTotal(any2int((select count(RecId) from projPeriodLine
                                where projPeriodLine.PeriodId   == this.parmProjPeriodId()  &&
                                      projPeriodLine.PeriodFrom >= startDate                &&
                                      projPeriodLine.PeriodTo   <= stopDate).RecId));

            progressCounter++;
            progress.setCount(progressCounter);

            this.processTimesheetPeriods(startDate, stopDate);
        }
        else
        {
            progress.setCaption("@SYS190503");

            progressCounter++;
            progress.setCount(progressCounter);
            progress.setText(strFmt("@SYS70862",projPeriodId));

            this.evaluateTimesheetFrequency();

            if (createEmplPeriod == NoYes::Yes)
            {
                this.resourcePeriod();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateTimesheetFrequency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluate project timesheet period based one the timesheet frequency.
    /// </summary>
    protected void evaluateTimesheetFrequency()
    {
        switch (this.timesheetFrequency())
        {
            case TSPeriodFrequency::Week        :      this.projPeriodWeek();           break;
            case TSPeriodFrequency::BiWeekly    :      this.projPeriodBiWeekly();       break;
            case TSPeriodFrequency::SemiMonthly :      this.projPeriodSemiMonthly();    break;
            case TSPeriodFrequency::Month       :      this.projPeriodMonth();          break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ProjPeriodTable periodTable;

        ret = super();

        if (this.parmUpdateTimesheetPeriods()==NoYes::Yes)
        {
            this.parmStopDate(dialogPeriodToDate.value());
            this.parmStartDate(dialogPeriodStartDate.value());
            this.parmCreateTimesheetPeriod(NoYes::Yes);
        }
        else
        {
            if (dialogPeriodStartDate.value())
            {
                this.parmStartDate(dialogPeriodStartDate.value()+1);
            }
            else
            {
                this.parmStartDate(this.lastDateInPeriod(projPeriodLine)+1);
            }

            this.parmStopDate(startDate);

            this.parmPeriodQty(dialogPeriodQty.value());

            if (!CEIntegrationEnabled && this.isTimesheetPeriod())
            {
                this.parmCreateTimesheetPeriod(dialogCreateTimesheetPeriod.value());
                this.parmStartOfWeek(dialogStartOfWeek.value());

                ttsbegin;
                periodTable = ProjPeriodTable::find(projPeriodId,true);
                periodTable.WeekStart = startOfWeek;
                periodTable.update();
                ttscommit;
            }

            this.parmAutoSplitWeek(ProjPeriodTable::find(projPeriodId,false).AutoSplitWeek);
            this.calcStopDate();

            if (!CEIntegrationEnabled)
            {
                this.parmCreateEmplPeriod(dialogCreateResource.value());
                this.parmNormBillable(dialogNormBillable.value());
                this.parmNormEfficiency(dialogNormEfficiency.value());
			}
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTimesheetPeriods</Name>
				<Source><![CDATA[
    protected void processTimesheetPeriods(date  _fromDate,
                                      date  _toDate)
    {
        if (this.parmCreateTimesheetPeriod() == NoYes::Yes)
        {
            ProjPeriodTimesheetWeek::generatePeriods(projPeriodId,
                                                _fromDate,
                                                _toDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPeriodBiWeekly</Name>
				<Source><![CDATA[
    protected void projPeriodBiWeekly()
    {
        TransDate   nextPeriodStartDate;
        RecId       calendarRecId;

        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        loopDate = TSPeriods::getStartOfWeekOffset(startOfWeek, startDate);

        nextPeriodStartDate = FiscalCalendars::nextPeriodStartDateByDate(calendarRecId, loopDate);

        while (loopDate <= stopDate)
        {
            projPeriodLine.clear();
            projPeriodLine.PeriodId   = projPeriodId;

            projPeriodLine.PeriodFrom = loopDate;
            projPeriodLine.PeriodName = strFmt("@SYS183914",wkOfYr(loopDate));
            if ((loopDate + 13) >= nextPeriodStartDate && autoSplitWeek)
            {
                projPeriodLine.PeriodTo = nextPeriodStartDate - 1;
                projPeriodLine.PeriodName = strFmt("@SYS183915",wkOfYr(loopDate),'1');
                this.progressUpdateTrans(projPeriodLine.PeriodFrom);
                projPeriodLine.insert();
                projPeriodLine.PeriodFrom = nextPeriodStartDate;
                nextPeriodStartDate = FiscalCalendars::nextPeriodStartDateByDate(calendarRecId, nextPeriodStartDate);
                projPeriodLine.PeriodName = strFmt("@SYS183915",wkOfYr(loopDate),'2');
            }
            projPeriodLine.PeriodTo = loopDate + 13;
            loopDate += 14;
            this.progressUpdateTrans(projPeriodLine.PeriodFrom);
            projPeriodLine.insert();
        }

        //   loopDate = startDate - dayofwk(startDate) + 1;
        loopDate = TSPeriods::getStartOfWeekOffset(startOfWeek, startDate);

        this.processTimesheetPeriods(loopDate, stopDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPeriodMonth</Name>
				<Source><![CDATA[
    protected void projPeriodMonth()
    {
        super();

        loopDate = startDate - dayOfMth(startDate) + 1;

        this.processTimesheetPeriods(loopDate, stopDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPeriodSemiMonthly</Name>
				<Source><![CDATA[
    protected void projPeriodSemiMonthly()
    {
        if (dayOfMth(startDate) < 16)
        {
            loopDate = startDate - dayOfMth(startDate) + 1;
        }
        else
        {
            loopDate = startDate - dayOfMth(startDate) + 16;
        }

        while (loopDate < stopDate)
        {
            projPeriodLine.clear();
            projPeriodLine.PeriodId   = projPeriodId;

            projPeriodLine.PeriodFrom = loopDate;

            if (dayOfMth(startDate) < 16)
            {
                projPeriodLine.PeriodTo   = loopDate + 14;
            }
            else
            {
                projPeriodLine.PeriodTo = endmth(loopDate);
            }

            projPeriodLine.PeriodName = strFmt("@SYS184078",mthName(mthOfYr(loopDate)), projPeriodLine.PeriodTo);

            this.progressUpdateTrans(projPeriodLine.PeriodFrom);

            projPeriodLine.insert();

            if (dayOfMth(loopDate) < 16 && loopDate + 15 < stopDate)
            {
                projPeriodLine.PeriodFrom = loopDate + 15;
                projPeriodLine.PeriodTo   = endmth(loopDate);
                projPeriodLine.PeriodName = strFmt("@SYS184078",mthName(mthOfYr(loopDate)), projPeriodLine.PeriodTo);

                this.progressUpdateTrans(projPeriodLine.PeriodFrom);

                projPeriodLine.insert();
            }

            loopDate = endmth(loopDate)  + 1;
        }

        if (dayOfMth(startDate) < 16)
        {
            loopDate = startDate - dayOfMth(startDate) + 1;
        }
        else
        {
            loopDate = startDate - dayOfMth(startDate) + 16;
        }

        this.processTimesheetPeriods(loopDate, stopDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPeriodWeek</Name>
				<Source><![CDATA[
    protected void projPeriodWeek()
    {
        ProjPeriodLine  locprojPeriodLine;
        RecId           calendarRecId;

        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        if (calendarRecId && LedgerFiscalCalendar::existDate(calendarRecId, startDate))
        {
            //fiscal calendar exists for the start date entered so proceed with the periods creation
            
            ProjPeriodTo stopDateLoc = stopDate;

            super();

            if (!LedgerFiscalCalendar::existDate(calendarRecId, stopDateLoc))
            {
                warning('@Timesheet:TimesheetEndPeriodNotExistsInLedgerCal');
                return;
            }

            loopDate = TSPeriods::getStartOfWeekOffset(startOfWeek, startDate);

            this.processTimesheetPeriods(loopDate, stopDateLoc);
        }
        else
        {
            warning('@Timesheet:TimesheetPeriodNotExistsInLedgerCal');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription description()
    {
        return "@SYS190501";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>