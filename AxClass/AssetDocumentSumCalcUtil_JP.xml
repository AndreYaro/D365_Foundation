<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentSumCalcUtil_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The unility class used by AssetSumCalc to calculate the total amount of gaven document type from transactions.
/// </summary>
public class AssetDocumentSumCalcUtil_JP
{
    Map         docTypeVars;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetDocTypeVarValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum value of an asset document type.
    /// </summary>
    /// <param name="_transType">
    /// The <c>AssetTransType</c> enum.
    /// </param>
    /// <param name="_docType">
    /// The asset document type.
    /// </param>
    /// <returns>
    /// The sum value.
    /// </returns>
    public AmountMST getAssetDocTypeVarValue(AssetTransType _transType, AssetDocumentType_JP _docType)
    {
        if (docTypeVars.exists([_transType, _docType]))
        {
            return docTypeVars.lookup([_transType, _docType]);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVars</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the map from gaven types.
    /// </summary>
    /// <param name="_docTypes">
    /// The asset document types that need to be summed.
    /// </param>
    private void initVars(Set _docTypes)
    {
        SetEnumerator   se;

        if (_docTypes != null)
        {
            se = _docTypes.getEnumerator();

            while (se.moveNext())
            {
                docTypeVars.insert(se.current(), nullValueFromType(Types::Real));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        private void new()
    {
        docTypeVars = new Map(Types::Container, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack in client side.
    /// </summary>
    /// <returns>
    /// A container from asset document type set.
    /// </returns>
    public container packClient()
    {
        return docTypeVars.keySet().pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack on server side.
    /// </summary>
    /// <returns>
    /// A container from the map which contains asset document types and values.
    /// </returns>
    public container packServer()
    {
        return docTypeVars.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the focused transaction type and document type to the list.
    /// </summary>
    /// <param name="_summary">
    /// An <c>AssetDocumentSummary_JP</c> instance.
    /// </param>
    public void registerSummary(AssetDocumentSummary_JP _summary)
    {
        Set             types = _summary.transDocTypes();
        SetEnumerator   se;

        if (types != null)
        {
            se = types.getEnumerator();

            while (se.moveNext())
            {
                docTypeVars.insert(se.current(), nullValueFromType(Types::Real));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack package from client on server.
    /// </summary>
    /// <param name="packed">
    /// The packed container.
    /// </param>
    public void unpackClient(container packed)
    {
        this.initVars(docTypeVars.keySet());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack package from server on client.
    /// </summary>
    /// <param name="packed">
    /// The packed values from server side.
    /// </param>
    public void unpackServer(container packed)
    {
        docTypeVars = Map::create(packed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocTypeSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method to be invoked by AssetSumCalc to sum up the amount of an asset document type from trans.
    /// </summary>
    /// <param name="_transType">
    /// The <c>AssetTransType</c> enum.
    /// </param>
    /// <param name="_docType">
    /// The asset document type.
    /// </param>
    /// <param name="_amount">
    /// The amount.
    /// </param>
    public void updateDocTypeSum(AssetTransType _transType, AssetDocumentType_JP _docType, AmountMST _amount)
    {
        if (docTypeVars.exists([_transType, _docType]))
        {
            docTypeVars.insert([_transType, _docType], docTypeVars.lookup([_transType, _docType]) + _amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of <c>AssetDocumentSumCalcUtil_JP</c>
    /// </summary>
    /// <param name="_docTypes">
    /// The asset document types that need to be summed.
    /// </param>
    /// <returns>
    /// An instance of <c>AssetDocumentSumCalcUtil_JP</c>
    /// </returns>
    public static AssetDocumentSumCalcUtil_JP construct(Set _docTypes = null)
    {
        AssetDocumentSumCalcUtil_JP util = new AssetDocumentSumCalcUtil_JP();

        util.initVars(_docTypes);

        return util;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>