<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionAssignCostElement_Assign</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Assigns Cost Elements to multiple positions.
/// </summary>

class HcmPositionAssignCostElement_Assign extends HcmPositionForecastAssignCostElement
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createQueryByCompGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create the query for the table <c>HcmPositionForecastBudgetAccountLine</c> records to be added
    ///  this is based on the selected Compensation group.
    /// </summary>
    /// <returns>
    ///  Returns the query for <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </returns>
    ///
    private Query createQueryByCompGroup()
    {
        Query query;
        QueryBuildDataSource qbdsBudgetPurposeTypeDetail;
        QueryBuildDataSource qbdsCompensationGroupElement;
        QueryBuildDataSource qbdsPositionForecastBudgetAcctLine;

        query = new Query();
        query.allowCrossCompany(true);
        qbdsBudgetPurposeTypeDetail = query.addDataSource(tableNum(HcmBudgetPurposeTypeDetail));

        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LegalEntity)).value(queryValue(this.parmCompanyId()));
        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LedgerDimension)).value(strFmt(' > %1', 0));

        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, RecId)).value(this.formatValidDateRangeByScenario(fieldStr(HcmBudgetPurposeTypeDetail,  EffectiveDate),
                                                                                                                                    fieldStr(HcmBudgetPurposeTypeDetail,  ExpirationDate)));

        qbdsCompensationGroupElement = qbdsBudgetPurposeTypeDetail.addDataSource(tableNum(HcmPositionForecastCompGroupElement));
        qbdsCompensationGroupElement.addLink(fieldNum(HcmBudgetPurposeTypeDetail, BudgetPurposeType), fieldNum(HcmPositionForecastCompGroupElement, HcmBudgetPurposeType));
        qbdsCompensationGroupElement.joinMode(JoinMode::ExistsJoin);
        qbdsCompensationGroupElement.addRange(fieldNum(HcmPositionForecastCompGroupElement, HcmPositionForecastCompensationGroup)).value(queryValue(this.parmForecastCompGroupId()));

        qbdsPositionForecastBudgetAcctLine = qbdsBudgetPurposeTypeDetail.addDataSource(tableNum(HcmPositionForecastBudgetAcctLine));
        qbdsPositionForecastBudgetAcctLine.joinMode(JoinMode::NoExistsJoin);
        qbdsPositionForecastBudgetAcctLine.relations(true);
        qbdsPositionForecastBudgetAcctLine.addRange(fieldNum(HcmPositionForecastBudgetAcctLine, PositionForecastScenario)).value(queryValue(this.parmNewPositionForecastScenarioId()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryByCostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for the table <c>HcmPositionForecastBudgetAccountLine</c> records to added or updated.
    /// </summary>
    /// <param name="_hcmTmpPositionForecastAssignCostElement">
    /// The <c>HcmTmpPositionForecastAssignCostElement</c> table record.
    /// </param>
    /// <param name="_budgetPurposeType">
    /// The <c>HcmBudgetPurposeType</c> table record.
    /// </param>
    /// <returns>
    /// Returns the query for the table <c>HcmPositionForecastBudgetAcctLine</c> record.
    /// </returns>

    private Query createQueryByCostType(HcmTmpPositionForecastAssignCostElement _hcmTmpPositionForecastAssignCostElement,
                                                            HcmBudgetPurposeType _budgetPurposeType)
    {
        Query query;
        QueryBuildDataSource qbdsBudgetPurposeTypeDetail;
        QueryBuildDataSource qbdspositionForecastBudgetAcctLine;
        HcmPositionForecastScenario hcmPositionForecastScenario;

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(hcmTmpPositionForecastAssignCostElement.HcmPositionForecastScenario);
        query = new Query();
        qbdsBudgetPurposeTypeDetail = query.addDataSource(tableNum(HcmBudgetPurposeTypeDetail));

        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, BudgetPurposeType)).value(queryValue(_budgetPurposeType.RecId));

        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LegalEntity)).value(queryValue(hcmPositionForecastScenario.LegalEntity));
        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, RecId)).value(this.formatValidDateRangeByScenario(fieldStr(HcmBudgetPurposeTypeDetail, EffectiveDate),
                                                                                                                             fieldStr(HcmBudgetPurposeTypeDetail,  ExpirationDate)));

        qbdspositionForecastBudgetAcctLine = qbdsBudgetPurposeTypeDetail.addDataSource(tableNum(HcmPositionForecastBudgetAcctLine));

        qbdspositionForecastBudgetAcctLine.joinMode(JoinMode::NoExistsJoin);

        qbdspositionForecastBudgetAcctLine.relations(true);

        qbdspositionForecastBudgetAcctLine.addRange(fieldNum(HcmPositionForecastBudgetAcctLine, PositionForecastScenario)).value(queryValue(_hcmTmpPositionForecastAssignCostElement.HcmPositionForecastScenario));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryByTmpBudgetPurposeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates the query for the table <c>HcmPositionForecastBudgetAccountLine</c> records to be added
    /// based on selected purpose type.
    /// </summary>
    /// <returns>
    ///  The query for <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </returns>
    ///
    private Query createQueryByTmpBudgetPurposeType()
    {
        Query query;
        QueryBuildDataSource qbdsBudgetPurposeTypeDetail;
        QueryBuildDataSource qbdsPositionForecastBudgetAcctLine;
        HcmTmpBudgetPurposeType tmpBudgetPurposeType;
        int pos = 1;

        query = new Query();
        qbdsBudgetPurposeTypeDetail = query.addDataSource(tableNum(HcmBudgetPurposeTypeDetail));

        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LegalEntity)).value(queryValue(this.parmCompanyId()));
        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LedgerDimension)).value(strFmt(' > %1', 0));
        qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, RecId)).value(this.formatValidDateRangeByScenario(fieldStr(HcmBudgetPurposeTypeDetail,  EffectiveDate),
                                                                                                                                    fieldStr(HcmBudgetPurposeTypeDetail,  ExpirationDate)));

        // Get all selected budget types
        for (pos = 1; pos <= conLen(this.parmTmpBudgetPurposeTypeContainer()); pos++)
        {
            tmpBudgetPurposeType = con2Buf(conPeek(this.parmTmpBudgetPurposeTypeContainer(), pos));
            qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, BudgetPurposeType)).value(queryValue( tmpBudgetPurposeType.BudgetPurposeType));
        }

        qbdsPositionForecastBudgetAcctLine = qbdsBudgetPurposeTypeDetail.addDataSource(tableNum(HcmPositionForecastBudgetAcctLine));
        qbdsPositionForecastBudgetAcctLine.joinMode(JoinMode::NoExistsJoin);
        qbdsPositionForecastBudgetAcctLine.relations(true);
        qbdsPositionForecastBudgetAcctLine.addRange(fieldNum(HcmPositionForecastBudgetAcctLine, PositionForecastScenario)).value(queryValue(this.parmNewPositionForecastScenarioId()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryForForecastBudgetAccountLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the query for the table <c>HcmPositionForecastBudgetAccountLine</c> records use to add or update cost elements to the number of positions.
    /// </summary>
    /// <param name="_hcmTmpPositionForecastAssignCostElement">
    /// The <c>HcmTmpPositionForecastAssignCostElement</c> table record.
    /// </param>
    /// <param name="_budgetPurposeType">
    /// The <c>HcmBudgetPurposeType</c> table record.
    /// </param>
    /// <returns>
    /// Returns the query for <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </returns>
    /// <remarks>
    /// Query returns the records for <c>HcmPositionForecastBudgetAccountLine</c> table that are used to push cost element changes to the forecast positions.
    /// </remarks>
    protected Query createQueryForForecastBudgetAccountLine(HcmTmpPositionForecastAssignCostElement _hcmTmpPositionForecastAssignCostElement, HcmBudgetPurposeType _budgetPurposeType)
    {
        Query query;
        if (this.parmForecastCompGroupId() > 0)
        {
            query = this.createQueryByCompGroup();
        }
        else if (this.parmMassUpdateNeeded())
        {
            query = this.createQueryByTmpBudgetPurposeType();
        }
        else
        {
            query = this.createQueryByCostType(_hcmTmpPositionForecastAssignCostElement, _budgetPurposeType);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompensationGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>HcmPositionForecastScenario</c> record
    /// and <c>HcmPositionForecastCompensationGroup</c> record exists.
    /// </summary>
    /// <returns>
    ///  true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean hasCompensationGroup()
    {
        boolean hasCompensationGroup;

        hasCompensationGroup = ((this.parmNewPositionForecastScenarioId() == 0)
            || (this.parmForecastCompGroupId() == 0));

        return hasCompensationGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBudgetAccountLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process records of the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_positionForecastBudgetAcctLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </param>
    protected void processBudgetAccountLine(HcmPositionForecastBudgetAcctLine _positionForecastBudgetAcctLine)
    {
        ttsbegin;
        _positionForecastBudgetAcctLine.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineNextIncreaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the next increase date value for the current <c>HcmPositionForecastScenario</c> record.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The <c>HcmPositionForecastScenarioRecId</c> value of the position forecast scenario to process.
    /// </param>
    /// <param name="_compensationGroupId">
    /// The <c>HcmPositionForecastCompensationGroupID</c> value of the compensation group to process.
    /// </param>
    /// <param name="_compensationGroupDataAreaId">
    /// The <c>DataAreaId</c> value of the compensation group to process.
    /// </param>
    /// <param name="_basisDate">
    /// The date value of the compensation group to process.
    /// </param>
    /// <returns>
    /// The date value of the next increase date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static date determineNextIncreaseDate(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
        HcmPositionForecastCompensationGroupId  _compensationGroupId,
        DataAreaId                              _compensationGroupDataAreaId,
        TransDate                               _basisDate)
    {
        HcmPositionForecastScenario positionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);
        HcmPositionForecastCompensationGroup positionForecastCompensationGroup;
        FiscalCalendarPeriod fiscalCalendarPeriodStart;
        FiscalCalendarPeriod fiscalCalendarPeriodEnd;
        HcmForecastScenario forecastScenario;
        BudgetPlanningProcess planningProcess;
        BudgetCycle cycle;
        int currentYear;
        str basisMonthStr;
        MonthsOfYear basisMonthEnum;
        str basisDayStr;
        DaysOfMonth basisDayEnum;
        date nextIncreaseDate = dateNull();
        boolean nextIncreaseDateFound;
        boolean basisDateNotNull = _basisDate != dateNull();
        int loopCounter = 1;

        if (basisDateNotNull)
        {
            currentYear = year(_basisDate);
            basisMonthStr = int2str(mthOfYr(_basisDate));
            basisMonthEnum = mthOfYr(_basisDate);
            basisDayStr = int2str(dayOfMth(_basisDate));
            basisDayEnum = dayOfMth(_basisDate);
        }

        if ((_compensationGroupId != '')
            && (_compensationGroupDataAreaId != '')
            && basisDateNotNull)
        {
            positionForecastCompensationGroup = HcmPositionForecastCompensationGroup::findByCompensationGrpIdDataAreaId(_compensationGroupId, _compensationGroupDataAreaId);
        }

        if (positionForecastCompensationGroup.RecId != 0)
        {
            select firstonly RecId from forecastScenario
                where positionForecastScenario.ForecastScenario == forecastScenario.RecId
                join RecId from planningProcess
                    where planningProcess.RecId == forecastScenario.BudgetPlanningProcess
                join StartFiscalCalendarPeriod, EndFiscalCalendarPeriod from cycle
                    where planningProcess.BudgetCycle == cycle.RecId
                join StartDate from fiscalCalendarPeriodStart
                    where fiscalCalendarPeriodStart.RecId == cycle.StartFiscalCalendarPeriod
                join EndDate from fiscalCalendarPeriodEnd
                    where fiscalCalendarPeriodEnd.RecId == cycle.EndFiscalCalendarPeriod;

            if (positionForecastCompensationGroup.StepRule == HcmPositionForecastStepRule::AnniversaryDate)
            {
                currentYear = max(year(fiscalCalendarPeriodStart.StartDate), year(_basisDate));
            }
            else
            {
                currentYear = year(fiscalCalendarPeriodStart.StartDate);
            }

            while (loopCounter <= 2
                    && !nextIncreaseDateFound)
            {
                if (!System.DateTime::IsLeapYear(currentYear)
                    && basisMonthEnum == MonthsOfYear::February
                    && basisDayEnum == DaysOfMonth::Day29)
                {
                    // Anniversary dates landing on 2/29 but the current year is not a leap year then set to the 28th.
                    basisDayEnum = DaysOfMonth::Day28;
                    basisDayStr = int2str(basisDayEnum);
                }

                nextIncreaseDate = str2DateDMY(strFmt('%1/%2/%3', basisDayStr, basisMonthStr, int2str(currentYear)));

                if ((nextIncreaseDate <= fiscalCalendarPeriodEnd.EndDate)
                    && (nextIncreaseDate >= fiscalCalendarPeriodStart.StartDate))
                {
                    nextIncreaseDateFound = true;
                    break;
                }

                currentYear++;
                loopCounter++;
            }
        }

        return nextIncreaseDateFound ? nextIncreaseDate : dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetAcctLineSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line source for budget account Line.
    /// </summary>
    /// <returns>
    /// Returns the line source of the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </returns>
    protected HcmPositionForecastBudgetAcctLineSource getBudgetAcctLineSource()
    {
        HcmPositionForecastBudgetAcctLineSource costLineSource;

        // Cost line source should be original assignment when it is assigned from compensation group.
        if (this.parmForecastCompGroupId() > 0)
        {
            costLineSource = HcmPositionForecastBudgetAcctLineSource::OriginalAssignment;
        }
        else
        {
            costLineSource = HcmPositionForecastBudgetAcctLineSource::Manual;
        }

        return costLineSource;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>