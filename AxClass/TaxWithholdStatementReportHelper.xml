<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdStatementReportHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWitholdStatementReportHelper</c> class is the helper class that is the base logic of the
/// <c>TaxWithholdStatement</c> report.
/// </summary>
public class TaxWithholdStatementReportHelper
{
    //Report parameters
    NoYesId                                     earilerField;
    TaxWithholdProvisionalReceiptNumber_IN      provisionalReceiptNumber;
    TaxWithholdTANNumber_IN                     taxAccountNumber;
    TaxWithholdStatement_IN                     statement;
    TaxWithholdType_IN                          taxWithholdType;
    TransDate                                   taxWithholdDate;
    TaxWithholdPeriodEnd_IN                     periodEnd;

    HcmPersonnelNumberId                        responsiblePerson;
    Name                                        fullName;
    Name                                        designation;
    TransDate                                   printdate;
    TaxWithholdPreparationUltiltyName_IN        utilityName;

    NoYesId                                     efiling;
    NoYesId                                     correctedEfiling;
    Filename                                    fileName;
    NoYesId                                     efillingFiled;

    TransDate                                   fromdate;
    TransDate                                   todate;

    boolean                                     isPrintOrNot;

    //Tmp table
    TaxWithholdStatementTmpParameter            parameterTmpTable;
    TaxWithholdStatementTmpConstantString       constantStringTmpTable;
    TaxWithholdStatementTmpParticularInfo       particularInfoTmpTable;
    TaxWithholdStatementTmpTrans                taxTransTmpTable;
    TaxWithholdStatementTmpTransSummary         taxtransSummaryTmpTable;
    TaxWithholdStatementTmpTrans                transTmpTable;
    TaxWithholdStatementTmpTransSummary         transSummary;

    LogisticsPostalAddress                      logisticsPostalAddress;
    LogisticsPostalAddress                      logisticsPostalAddressResponsible;
    str                                         responsibleaddress;
    Email                                       responsibleEmail;
    Phone                                       responsibleTelePhone;
    int                                         responsibleStateCode;
    Email                                       responsibleAlternateEmail;
    Phone                                       responsibleAlternateTelePhone;
    #define.2(2)

    #define.QuarterOneStart('0101')
    #define.QuarterOneEnd('3103')
    #define.QuarterTwoStart('0104')
    #define.QuarterTwoEnd('3006')
    #define.QuarterThreeStart('0107')
    #define.QuarterThreeEnd('3009')
    #define.QuarterFourStart('0110')
    #define.QuarterFourEnd('3112')
    #define.NatureType1('01')
    #define.NatureType2('02')
    #define.AmountZero(0)
    #define.AdditionalOneYear(1)
    #define.AdditionalTwoYears(2)
    #define.SerialNumberOne(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcOrAdjustTaxWithholdAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate or Adjust the withhold tax amount.
    /// </summary>
    /// <param name="_taxWithholdTrans">
    /// TaxWithholdTrans
    /// </param>
    /// <param name="_taxWithholdRegNumber">
    /// TaxWithholdRegNumber
    /// </param>
    /// <param name="_taxWithholdComponentGroup">
    /// TaxWithholdComponentGroup
    /// </param>
    /// <param name="_taxWithholdType">
    /// TaxWithholdType
    /// </param>
    /// <param name="_isAdjustOrNot">
    /// Adjust or calculate
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcOrAdjustTaxWithholdAmount(
        TaxWithholdTrans_IN                 _taxWithholdTrans,
        TaxWithholdRegNumbers_IN            _taxWithholdRegNumber,
        TaxWithholdComponentGroupTable_IN   _taxWithholdComponentGroup,
        TaxWithholdType_IN                  _taxWithholdType,
        boolean                             _isAdjustOrNot = false)
    {
        TaxWithholdTrans_IN             taxWithholdTrans;
        TaxWithholdReportingCodes_IN    taxWithholdReportingCode;

        Amount                          totalTaxTmp;
        boolean                         adjusted = false;

        container                       conForAmountOrig;
        Counter                         counterForAmountOrig;

        isPrintOrNot = true;

        while select sum(AmountOriginMST), sum(TaxWithholdAmount), sum(AdjustedBaseAmount) from taxWithholdTrans
            group by Voucher, TaxWithholdComponentGroup, TaxWithholdComponent
            where   (!_isAdjustOrNot
                &&  taxWithholdTrans.RecoverableAccount         == false
                &&  taxWithholdTrans.Settled                    == false
                &&  taxWithholdTrans.TaxWithholdComponentGroup  == _taxWithholdComponentGroup.RecId
                &&  taxWithholdTrans.TransDate                  >= fromdate
                &&  taxWithholdTrans.TransDate                  <= todate
                &&  (taxWithholdTrans.Voucher                   == _taxWithholdTrans.Voucher
                ||  ((taxWithholdTrans.InventRefId              == _taxWithholdTrans.PurchId
                ||  taxWithholdTrans.InventRefId                == _taxWithholdTrans.SalesId)
                &&  taxWithholdTrans.InventRefId
                &&  taxWithholdTrans.ReturnVoucher              == _taxWithholdTrans.Voucher))
                &&  taxWithholdTrans.TaxWithholdRegNumber       == _taxWithholdRegNumber.RecId)
                ||  (_isAdjustOrNot
                &&  taxWithholdTrans.SourceTransVoucher         == _taxWithholdTrans.Voucher
                &&  taxWithholdTrans.SourceTransDate            == _taxWithholdTrans.TransDate
                &&  taxWithholdTrans.TaxWithholdComponentGroup  == _taxWithholdComponentGroup.RecId)
        {
            select ReportingCode from taxWithholdReportingCode
                where   taxWithholdReportingCode.TaxType                    == _taxWithholdType
                    &&  taxWithholdReportingCode.TaxWithholdComponent       == taxWithholdTrans.TaxWithholdComponent
                    &&  taxWithholdReportingCode.TaxWithholdComponentGroup  == taxWithholdTrans.TaxWithholdComponentGroup;

            if (!conFind(conForAmountOrig, taxWithholdTrans.Voucher))
            {
                AmountCur actualWithholdTaxBaseAmount = taxWithholdTrans.AdjustedBaseAmount ? taxWithholdTrans.AdjustedBaseAmount : taxWithholdTrans.AmountOriginMST;

                taxTransTmpTable.AmountPaidOrDebitedRs  += actualWithholdTaxBaseAmount;
                taxTransTmpTable.TotalPurchaseValueRs   += actualWithholdTaxBaseAmount;
                counterForAmountOrig++;
                conForAmountOrig = conPoke(conForAmountOrig, counterForAmountOrig, taxWithholdTrans.Voucher);
                if (!_isAdjustOrNot)
                {
                    taxTransTmpTable.SectionCode = _taxWithholdComponentGroup.SectionCode;
                }
            }

            switch (taxWithholdReportingCode.ReportingCode)
            {
                case TaxWithholdReportingCode_IN::PECess:
                case TaxWithholdReportingCode_IN::SHECess:
                    taxTransTmpTable.EducationCessRs    += -taxWithholdTrans.TaxWithholdAmount;
                    break;

                case TaxWithholdReportingCode_IN::Surcharge:
                    taxTransTmpTable.SurchargeRs        += -taxWithholdTrans.TaxWithholdAmount;
                    break;

                case TaxWithholdReportingCode_IN::TCS:
                case TaxWithholdReportingCode_IN::TDS:
                    taxTransTmpTable.TaxTypeRs          += -taxWithholdTrans.TaxWithholdAmount;
                    break;
            }

            if (_isAdjustOrNot)
            {
                adjusted = true;
            }
            totalTaxTmp = taxTransTmpTable.EducationCessRs + taxTransTmpTable.SurchargeRs + taxTransTmpTable.TaxTypeRs;
        }

        if (adjusted && totalTaxTmp == 0)
        {
            isPrintOrNot = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInterestOthersValueAnnexure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the interest and others values of an annexure.
    /// </summary>
    /// <param name="_settledVoucher">
    /// A ledger voucher.
    /// </param>
    /// <returns>
    /// A container that contains the interest and others values of the annexure.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getInterestOthersValueAnnexure(Voucher   _settledVoucher)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        CustVendPaymJournalFee      custVendPaymJournalFee;
        VendPaymFee                 vendPaymFee;
        Amount                      interestRsTmp;
        Amount                      othersRsTmp;
        Amount                      feeRsTmp;

        while select FeeId, FeeValue from custVendPaymJournalFee
            join TaxWithholdFeeType_IN from vendPaymFee
                where vendPaymFee.FeeId == custVendPaymJournalFee.FeeId
            exists join ledgerJournalTrans
                where custVendPaymJournalFee.RefRecId   == ledgerJournalTrans.RecId
                    && custVendPaymJournalFee.Module    == ModuleCustVend::Vend
                    && ledgerJournalTrans.Voucher       == _settledVoucher
        {
            if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Interest)
            {
                interestRsTmp += custVendPaymJournalFee.FeeValue;
            }
            else if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::None)
            {
                feeRsTmp += custVendPaymJournalFee.FeeValue;
            }
            else if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Others)
            {
                othersRsTmp   += custVendPaymJournalFee.FeeValue;
            }
        }

        return [interestRsTmp, feeRsTmp, othersRsTmp];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponsibleInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get the details of the responsible person.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void getResponsibleInfo()
    {
        #TaxWithhold_IN
        HcmWorker                           hcmWorker = HcmWorker::findByPersonnelNumber(responsiblePerson);
        DirPartyTable                       dirPartyTable = DirPartyTable::findRec(hcmWorker.Person);
        LogisticsLocation                   logisticsLocationPostalAddr;
        DirPartyLocation                    dirPartyLocation;

        //To get the Fields related to postal address of the responsible person
        select firstonly Location, Street, State, ZipCode, City from logisticsPostalAddressResponsible
            join RecId from logisticsLocationPostalAddr
                where logisticsPostalAddressResponsible.Location == logisticsLocationPostalAddr.RecId
            exists join Party from dirPartyLocation
                where dirPartyLocation.Location ==logisticsLocationPostalAddr.RecId
                    && dirPartyLocation.Party == dirPartyTable.RecId
                    && dirPartyLocation.IsPrimary == NoYes::Yes;

        //To get the fields related to Electronic address of the responsible person
        responsibleAddress          = conPeek(TaxWithholdEFilling_IN::wordWrap(logisticsPostalAddressResponsible.Street, #25), 1);
        responsibleStateCode        = TaxWithholdEFilling_IN::setStateCode(logisticsPostalAddressResponsible.State);
        responsibleEmail            = hcmWorker.email();
        responsibleTelePhone        = TaxWithholdEFilling_IN::getPhone(hcmWorker.Person);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAnnexureFieldValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the annexure fields value.
    /// </summary>
    /// <param name="_taxWithholdTrans">
    /// The TaxWithholdTrans table.
    /// </param>
    /// <param name="_taxWithholdSettleTrans">
    /// The TaxWithholdSettleTrans table.
    /// </param>
    /// <param name="_bsrCode">
    /// The bsr code.
    /// </param>
    /// <param name="_challanNumber">
    /// The challan number.
    /// </param>
    /// <param name="_challanDate">
    /// The challan date.
    /// </param>
    /// <param name="_totalAllocatedAmongPartiesTax">
    /// The total allcated among parties tax.
    /// </param>
    /// <param name="_totalAll">
    /// The total amounts.
    /// </param>
    /// <param name="_interestRs">
    /// The interest amounts.
    /// </param>
    /// <param name="_othersRs">
    /// The other amounts.
    /// </param>
    /// <param name="_serialNumber">
    /// The serial number.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initAnnexureFieldValues(
        TaxWithholdTrans_IN         _taxWithholdTrans,
        TaxWithholdSettleTrans_IN   _taxWithholdSettleTrans,
        BSRCode_IN                  _bsrCode,
        TaxWithholdChallanNumber_IN _challanNumber,
        TransDate                   _challanDate,
        Amount                      _totalAllocatedAmongPartiesTax,
        Amount                      _totalAll,
        Amount                      _interestRs,
        Amount                      _othersRs,
        int                         _serialNumber)
    {
        CustTable                       custTable;
        VendTable                       vendTable;
        TaxInformationCustTable_IN      taxInformationCustTable;
        TaxInformationVendTable_IN      taxInformationVendTable;
        TransDate                       dateOfDeduction;
        TaxWithholdTrans_IN             taxWithholdTransReason;
        #TaxWithholdStatement_IN
        #TaxWithhold_IN

        if (_taxWithholdTrans.CustAccount)
        {
            custTable               = CustTable::find(_taxWithholdTrans.CustAccount);
            taxInformationCustTable = custTable.getTaxInformationCustTable_IN();
            taxTransTmpTable.PartyCode                  = taxInformationCustTable.NatureOfAssessee == NatureOfAssessee_IN::Company ? #NatureType1 : #NatureType2;
            taxTransTmpTable.PartyName                  = custTable.name();
            taxTransTmpTable.PartyPANNumber             = taxInformationCustTable.panNumber;
            taxTransTmpTable.PartyPANReferenceNumber    = taxInformationCustTable.PANReferenceNumber;
        }
        if (_taxWithholdTrans.VendAccount)
        {
            vendTable   = VendTable::find(_taxWithholdTrans.VendAccount);
            taxInformationVendTable = vendTable.getTaxInformationVendTable_IN();
            taxTransTmpTable.PartyCode                  = taxInformationVendTable.NatureOfAssessee == NatureOfAssessee_IN::Company ? #NatureType1 : #NatureType2;
            taxTransTmpTable.PartyName                  = vendTable.name();
            taxTransTmpTable.PartyPANNumber             = taxInformationVendTable.panNumber;
            taxTransTmpTable.PartyPANReferenceNumber    = taxInformationVendTable.PANReferenceNumber;
        }
        taxTransTmpTable.BSRCode                        = _bsrCode;
        taxTransTmpTable.VoucherChallanNumber           = _challanNumber;
        taxTransTmpTable.TaxDepositedDate               = _challanDate;
        taxTransTmpTable.TotalAllocatedAmongPartiesTax  = _totalAllocatedAmongPartiesTax;
        taxTransTmpTable.TotalAll                       = _totalAll;
        taxTransTmpTable.InterestRs                     = _interestRs;
        taxTransTmpTable.OthersRs                       = _othersRs;
        taxTransTmpTable.SerialNumber                   = _serialNumber;
        taxTransTmpTable.DateOfCreditedOrDebited        = _taxWithholdTrans.TransDate;
        taxTransTmpTable.DespositedByBookEntry          = _taxWithholdSettleTrans.BookEntry;
        taxTransTmpTable.RefSettlementTransRecId        = _taxWithholdSettleTrans.RecId;
        taxTransTmpTable.TotalTaxRs                     = taxTransTmpTable.TaxTypeRs + taxTransTmpTable.SurchargeRs + taxTransTmpTable.EducationCessRs;
        taxTransTmpTable.TotalTaxDepositedRs            = taxTransTmpTable.TaxTypeRs + taxTransTmpTable.SurchargeRs + taxTransTmpTable.EducationCessRs;
        if (taxTransTmpTable.AmountPaidOrDebitedRs)
        {
            taxTransTmpTable.DeductedOrCollectedRate        = taxTransTmpTable.TotalTaxRs/taxTransTmpTable.AmountPaidOrDebitedRs*100;
        }
        else
        {
            taxTransTmpTable.DeductedOrCollectedRate        = _taxWithholdSettleTrans.Value;
        }

        if (_taxWithholdTrans.Reason == #ZeroDeductDueToThreshholdMark
            &&  taxTransTmpTable.TotalTaxRs)
        {
            select firstOnly taxWithholdTransReason
                where taxWithholdTransReason.Voucher == _taxWithholdTrans.Voucher
                        && taxWithholdTransReason.Reason == #IsSoftwareDeclReceived;
            if (taxWithholdTransReason)
            {
                _taxWithholdTrans.Reason = #IsSoftwareDeclReceived;
            }
            else
            {
                _taxWithholdTrans.Reason = '';
            }
        }

        taxTransTmpTable.ReasonForConcessions     = _taxWithholdTrans.Reason;

        if (taxTransTmpTable.ReasonForConcessions == #ZeroDeductDueToThreshholdMark)
        {
            // show empty date if the transaction is marked with 'Y'
            dateOfDeduction = DateTimeUtil::date(DateTimeUtil::minValue());
        }
        else
        {
            dateOfDeduction = _taxWithholdTrans.TransDate;
        }
        taxTransTmpTable.DateofDeductionOrCollection    = dateOfDeduction;
        taxTransTmpTable.ConcessionCertificateNumber    = _taxWithholdTrans.ConcessionCertificateNumber;
        if (_taxWithholdTrans.TaxApplicability == TaxWithholdTaxApplicability_IN::ITAct)
        {
            taxTransTmpTable.TaxApplicability = #ITAct;
        }
        else if (_taxWithholdTrans.TaxApplicability == TaxWithholdTaxApplicability_IN::DTAA)
        {
            taxTransTmpTable.TaxApplicability = #DTAA;
        }

        taxTransTmpTable.RemittanceCountryCode          = TaxWithholdCountryRegionToRemittance_IN::find(_taxWithholdTrans.CountryRegionToRemittance).CountryCode;
        taxTransTmpTable.RemittanceNatureCode           = TaxWithholdNatureOfRemittance_IN::find(_taxWithholdTrans.NatureOfRemittance).NatureCode;
        taxTransTmpTable.AcknowledgermentNumber         = _taxWithholdTrans.AcknowledgermentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConstantString26QTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>TaxWithholdStatementTmpConstantString</c> temporary table for a 26Q
    /// report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initConstantString26QTmp()
    {
        #TaxWithholdStatement_IN
        constantStringTmpTable.Title = #Form26Q;
        constantStringTmpTable.TitleSection = "@SYS34952" + #SeeSection_27D + "@SYS34953";
        constantStringTmpTable.TitleDescription = #Statement1_1_27D + "@SYS34952" + #3 + "@SYS34953" + #Statement1_2_27D;
        constantStringTmpTable.TitleDescription2 = #Statement2_1_27D + "@SYS34952" + #Statement2_2_27D + "@SYS34953";
        constantStringTmpTable.TitleDescription3 = "@SYS34952" + #Year + "@SYS34953";
        constantStringTmpTable.Point1TAN = #1 + "@SYS35672" + " " + "@SYS34952" + " " + #a + " " + "@SYS34953" + " " +#TANNumber;
        constantStringTmpTable.Point1PAN = "@SYS34952" + " " + #b + " " + "@SYS34953" + " "+ #PANNumber;
        constantStringTmpTable.Point1D = "@SYS34952" + " " + #d + " " + "@SYS34953" + " " + #StatementHeaderD
            + "@SYS34952" + " " + #YesNo + " " + "@SYS34953";
        constantStringTmpTable.Point1E = "@SYS34952" + " " + #e + " " + "@SYS34953" + " " + #StatementHeaderE_1
            + "@SYS34952" + " " + #d + " " + "@SYS34953" + #StatementHeaderE_2;
        constantStringTmpTable.Point1F = "@SYS34952" + " " + #f + " " + "@SYS34953" + " " + #TypeOfDeductor;
        constantStringTmpTable.Point2Heading = #Particulars_2_26Q;
        constantStringTmpTable.Point2Type = "@SYS34952" + #b + "@SYS34953" + " " + #TypeOfDeductor;
        constantStringTmpTable.Point2Branch = "@SYS34952" + #c + "@SYS34953" + " " + #Branch + " " + "@SYS34952" + #ifAny +"@SYS34953";
        constantStringTmpTable.Point2Address = "@SYS34952" + #d + "@SYS34953" + " " + #Address;
        constantStringTmpTable.Point2IsCentralStateGovernment = "@SYS34952" + #b + "@SYS34953" + " " + #IsCentralStateGovernment;
        constantStringTmpTable.Point2CentralStateGovernmentName = #CentralStateGovernmentName;
        constantStringTmpTable.Point2CentralStateGovernmentAINCode = #CentralStateGovernmentAINCode;
        constantStringTmpTable.Point2TANRegistrationNumber = "@SYS34952" + #c + "@SYS34953" + " " + #TANRegistrationNumber;
        constantStringTmpTable.Point2AlternateTelePhone = #AlternateTelePhone;
        constantStringTmpTable.Point2AlternateTeleEmail = #AlternateEmail;
        constantStringTmpTable.Point3Heading = #Particulars3;
        constantStringTmpTable.Point3ResposibleAlternateTelePhone = #AlternateTelePhone;
        constantStringTmpTable.Point3ResposibleAlternateEmail = #AlternateEmail;
        constantStringTmpTable.Point3ResposibleMobilePhone = #MobileNumber;
        constantStringTmpTable.Point4Heading = #DetailsOfTax_5_26Q;
        constantStringTmpTable.Point4SectionCode = #SectionCode;
        constantStringTmpTable.Point4Amount = #TaxAmount;
        constantStringTmpTable.Point4Fee = #Fee;
        constantStringTmpTable.Point4TotalTax = #TotalTax + "@SYS34952" + #TotalTax_26Q + "@SYS34953";
        constantStringTmpTable.Point4ModeOfDeposit = #ModeOfDepositChallan + "@SYS34952" + #C + "@SYS34953"
            + #ModeOfDepositBookAdjustment + "@SYS34952" + #B + "@SYS34953";
        constantStringTmpTable.Point4MinorHeaderOfChallan = #MinorHeaderOfChallan;
        constantStringTmpTable.Point4YesNoByDeposite = #BookEntry_27Q;
        constantStringTmpTable.Point4ColumnNo1 = #ColumnNo401;
        constantStringTmpTable.Point4ColumnNo2 = #ColumnNo402;
        // Surcharge and education is not printed for 26Q, so shift 2 column
        constantStringTmpTable.Point4ColumnNo5 = #ColumnNo403;
        constantStringTmpTable.Point4ColumnNo6 = #ColumnNo404;
        constantStringTmpTable.Point4ColumnNo7 = #ColumnNo405;
        constantStringTmpTable.Point4ColumnNo8 = #ColumnNo406;
        constantStringTmpTable.Point4ColumnNo9 = #ColumnNo407;
        constantStringTmpTable.Point4ColumnNo10 = #ColumnNo408;
        constantStringTmpTable.Point4ColumnNo11 = #ColumnNo409;
        constantStringTmpTable.Point4ColumnNo12 = #ColumnNo410;
        constantStringTmpTable.Point4ColumnNo13 = #ColumnNo411;
        constantStringTmpTable.Point5Heading = #DetailsOfAmount5_26Q;
        constantStringTmpTable.Point5Signature = #Verification_Signature;
        constantStringTmpTable.Point5NameAndDesignation = #Verification_NameDesig;
        constantStringTmpTable.Point5Note1 = "@SYS34952" + #1 + "@SYS34953" + #Notes1_26Q + '"' + #Government + '"' + " " + "@SYS35673" + " " + '"' + #Others + '"' + "@SYS35672";
        constantStringTmpTable.AnnexureHeading = #AnnexureHeading_26Q;
        constantStringTmpTable.AnnexureText = #AnnexureText_26Q;
        constantStringTmpTable.AnnexureSummaryDescription1 = #DetailsOfAmount_1_26Q;
        constantStringTmpTable.AnnexureSummaryDescription2 = "@SYS34952" + #DateFormatDMY + "@SYS34953" + #DetailsOfAmount_2_26Q;
        constantStringTmpTable.AnnexureSummarySectionCode = #Section_2_26Q;
        constantStringTmpTable.AnnexureSummaryTotal = #TotalTDS_2_26Q;
        constantStringTmpTable.AnnexureSummaryName = #NameofDeductor;
        constantStringTmpTable.AnnexureSummaryAmountPerChallan = #AnnexureSummaryAmountPerChallan;
        constantStringTmpTable.AnnexureSummaryTotalInterest = #AnnexureSummaryTotalInterest;
        constantStringTmpTable.AnnexureDetailCode = #DeducteeCode + "@SYS34952" + #DeducteeCode_26Q + "@SYS34953";
        constantStringTmpTable.AnnexureDetailPANReferenceNumber = #DeducteeReferenceNumber;
        constantStringTmpTable.AnnexureDetailPAN = #PANNumber_3;
        constantStringTmpTable.AnnexureDetailName = #Name_3;
        constantStringTmpTable.AnnexureDetailSectionCode = #SectionCode;
        constantStringTmpTable.AnnexureDetailTransPostDate = #Date_3 + "@SYS34952" + #DateFormatDMY + "@SYS34953";
        constantStringTmpTable.AnnexureDetailAmount = #AmountPaid_3;
        constantStringTmpTable.AnnexureDetailYesNoByDeposited = #PaidByBook_3;
        constantStringTmpTable.AnnexureDetailTotalTaxAmount = #TotalTaxDeducted;
        constantStringTmpTable.AnnexureDetailTaxDate = #Dateofdeduction;
        constantStringTmpTable.AnnexureDetailTaxAmount = #TDS;
        constantStringTmpTable.AnnexureDetailRate = #Rate_3;
        constantStringTmpTable.AnnexureDetailReason = #Reason_3_26Q;
        constantStringTmpTable.AnnexureDetailConcessionNumber = #AnnexureDetailConcessionNumber;
        constantStringTmpTable.AnnexureDetailColumnNo1 = #ColumnNo412;
        constantStringTmpTable.AnnexureDetailColumnNo2 = #ColumnNo413;
        constantStringTmpTable.AnnexureDetailColumnNo3 = #ColumnNo414;
        constantStringTmpTable.AnnexureDetailColumnNo4 = #ColumnNo415;
        constantStringTmpTable.AnnexureDetailColumnNo5 = #ColumnNo416;
        constantStringTmpTable.AnnexureDetailColumnNo6 = #ColumnNo417;
        constantStringTmpTable.AnnexureDetailColumnNo7 = #ColumnNo418;
        constantStringTmpTable.AnnexureDetailColumnNo8 = #ColumnNo419;
        constantStringTmpTable.AnnexureDetailColumnNo9 = #ColumnNo420;
        constantStringTmpTable.AnnexureDetailColumnNo10 = #ColumnNo421;
        constantStringTmpTable.AnnexureDetailColumnNo11 = #ColumnNo422;
        constantStringTmpTable.AnnexureDetailColumnNo12 = #ColumnNo423;
        constantStringTmpTable.AnnexureDetailColumnNo13 = #ColumnNo424;
        constantStringTmpTable.AnnexureDetailColumnNo14 = #ColumnNo425;
        constantStringTmpTable.AnnexureNoteSignature = #Verification_Signature;
        constantStringTmpTable.AnnexureNoteNameAndDesignation = #Verification_NameDesig;
        constantStringTmpTable.AnnexureNote1 = #Note + " " + "@SYS35668" + " " + #Write + '"' + #A1 + '"' + #ifThe + '"' + #lowerdeduction + '"' + " " + "@SYS25338" + " " + '"' + #nodeduction + '"' + #Notes_5_1_26Q + "," + #Write + " " + '"' + #B1 + '"' + #Notes_5_2_26Q;
        constantStringTmpTable.AnnexureNote2 = "";

        constantStringTmpTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConstantString27EQTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>TaxWithholdStatementTmpConstantString</c> temporary table for a 27EQ
    /// report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initConstantString27EQTmp()
    {
        #TaxWithholdStatement_IN
        constantStringTmpTable.Title = #Form27EQ;
        constantStringTmpTable.TitleSection = "@SYS34952" + #SeeSection_27EQ + "@SYS34953";
        constantStringTmpTable.TitleDescription = '"' + #Statement1_27EQ;
        constantStringTmpTable.TitleDescription2 = '"' + #Statement2_1_27D + "@SYS34952" + #Statement2_2_27D + "@SYS34953";
        constantStringTmpTable.TitleDescription3 = "@SYS34952" + #Year + "@SYS34953" + '"';
        constantStringTmpTable.Point1TAN = #1 + "@SYS35672" + " " + "@SYS34952" + " " + #a + " " + "@SYS34953" + " " +#TAN;
        constantStringTmpTable.Point1PAN = "@SYS34952" + " " + #b + " " + "@SYS34953" + " " +#PAN;
        constantStringTmpTable.Point1D = "@SYS34952" + " " + #d + " " + "@SYS34953" + " " + #StatementHeaderD
            + "@SYS34952" + " " + #YesNo + " " + "@SYS34953";
        constantStringTmpTable.Point1E = "@SYS34952" + " " + #e + " " + "@SYS34953" + " " + #StatementHeaderE_1
            + "@SYS34952" + " " + #d + " " + "@SYS34953" + #StatementHeaderE_2;
        constantStringTmpTable.Point1F = "@SYS34952" + " " + #f + " " + "@SYS34953" + " " + #TypeOfDeductor;
        constantStringTmpTable.Point2Heading = #Particulars_2_27EQ;
        constantStringTmpTable.Point2Branch = "@SYS34952" + #b + "@SYS34953" + " " + #Branch + " " + "@SYS34952" + #ifAny +"@SYS34953";
        constantStringTmpTable.Point2Address = "@SYS34952" + #d + "@SYS34953" + " " + #Address;
        constantStringTmpTable.Point2IsCentralStateGovernment = "@SYS34952" + #b + "@SYS34953" + " " + #IsCentralStateGovernment;
        constantStringTmpTable.Point2CentralStateGovernmentName = #CentralStateGovernmentName;
        constantStringTmpTable.Point2CentralStateGovernmentAINCode = #CentralStateGovernmentAINCode;
        constantStringTmpTable.Point2TANRegistrationNumber = "@SYS34952" + #c +  "@SYS34953" + " " + #TANRegistrationNumber;
        constantStringTmpTable.Point2AlternateTelePhone = #AlternateTelePhone;
        constantStringTmpTable.Point2AlternateTeleEmail = #AlternateEmail;
        constantStringTmpTable.Point3Heading = #Particulars3_27EQ;
        constantStringTmpTable.Point3ResposibleAlternateTelePhone = #AlternateTelePhone;
        constantStringTmpTable.Point3ResposibleAlternateEmail = #AlternateEmail;
        constantStringTmpTable.Point3ResposibleMobilePhone = #MobileNumber;
        constantStringTmpTable.Point4Heading = #DetailsOfTaxTable_27EQ;
        constantStringTmpTable.Point4SectionCode = #CollectionCode;
        constantStringTmpTable.Point4Amount = #TaxAmount;
        constantStringTmpTable.Point4Fee = #Fee;
        constantStringTmpTable.Point4TotalTax = #TotalTax + "@SYS34952" + #TotalTax_27EQ + "@SYS34953";
        constantStringTmpTable.Point4ModeOfDeposit = #ModeOfDepositChallan + "@SYS34952" + #C + "@SYS34953"
            + #ModeOfDepositBookAdjustment + "@SYS34952" + #B + "@SYS34953";
        constantStringTmpTable.Point4MinorHeaderOfChallan = #MinorHeaderOfChallan;
        constantStringTmpTable.Point4YesNoByDeposite = #BookPaid_27EQ;
        constantStringTmpTable.Point4ColumnNo1 = #ColumnNo651;
        constantStringTmpTable.Point4ColumnNo2 = #ColumnNo652;
        constantStringTmpTable.Point4ColumnNo3 = #ColumnNo653;
        constantStringTmpTable.Point4ColumnNo4 = #ColumnNo654;
        constantStringTmpTable.Point4ColumnNo5 = #ColumnNo655;
        constantStringTmpTable.Point4ColumnNo6 = #ColumnNo656;
        constantStringTmpTable.Point4ColumnNo7 = #ColumnNo657;
        constantStringTmpTable.Point4ColumnNo8 = #ColumnNo658;
        constantStringTmpTable.Point4ColumnNo9 = #ColumnNo659;
        constantStringTmpTable.Point4ColumnNo10 = #ColumnNo660;
        constantStringTmpTable.Point4ColumnNo11 = #ColumnNo661;
        constantStringTmpTable.Point4ColumnNo12 = #ColumnNo662;
        constantStringTmpTable.Point4ColumnNo13 = #ColumnNo663;
        constantStringTmpTable.Point5Heading = #DetailsOfAmount5_27EQ;
        constantStringTmpTable.Point5Signature = #Verification_Signature27EQ;
        constantStringTmpTable.Point5NameAndDesignation = #Verification_NameDesig27EQ;
        constantStringTmpTable.Point5Note1 = "@SYS34952" + #1 + "@SYS34953" + " " + #Notes1_Line1_27EQ;
        constantStringTmpTable.Point5Note2 = #Notes1_Line2_27EQ;
        constantStringTmpTable.AnnexureHeading = #AnnexureHeading_27EQ;
        constantStringTmpTable.AnnexureText = "@SYS34952" + #AnnexureText_27EQ + "@SYS34953";
        constantStringTmpTable.AnnexureSummaryDescription1 = #DetailsOfAmount_1_27EQ;
        constantStringTmpTable.AnnexureSummaryDescription2 = "@SYS34952" + #DateFormatDMY + "@SYS34953" + #DetailsOfAmount_2_27EQ;
        constantStringTmpTable.AnnexureSummarySectionCode = #CollectionCode_2_27EQ;
        constantStringTmpTable.AnnexureSummaryTotal = #TotalTCS_2_27EQ;
        constantStringTmpTable.AnnexureSummaryName = #NameOfCollector_2_27EQ;
        constantStringTmpTable.AnnexureSummaryAmountPerChallan = #AnnexureSummaryAmountPerChallan;
        constantStringTmpTable.AnnexureSummaryTotalInterest = #AnnexureSummaryTotalInterest;
        constantStringTmpTable.AnnexureDetailCode = #Partycode + "@SYS34952" + #DeducteeCode_26Q + "@SYS34953";
        constantStringTmpTable.AnnexureDetailPANReferenceNumber = #PartyReferenceNumber;
        constantStringTmpTable.AnnexureDetailPAN = #PANNumber_3_27EQ;
        constantStringTmpTable.AnnexureDetailName = #Name_3_27EQ;
        constantStringTmpTable.AnnexureDetailSectionCode = #CollectionCode;
        constantStringTmpTable.AnnexureDetailTotalValue = #TotalValue_3_27EQ;
        constantStringTmpTable.AnnexureDetailTransPostDate = #Date_3_27EQ + "@SYS34952" + #DateFormatDMY + "@SYS34953";
        constantStringTmpTable.AnnexureDetailAmount = #AmountPaid_3_27EQ;
        constantStringTmpTable.AnnexureDetailYesNoByDeposited = #PaidByBook_3;
        constantStringTmpTable.AnnexureDetailTaxAmount = #TaxAmount;
        constantStringTmpTable.AnnexureDetailTotalTaxAmount = #TotalTaxcollected + "@SYS34952" + #TotalTaxCollected_12_27EQ + "@SYS34953" + #Rs;
        constantStringTmpTable.AnnexureDetailTaxDate = #Dateofcollection;
        constantStringTmpTable.AnnexureDetailRate = #Rate_3_collected;
        constantStringTmpTable.AnnexureDetailReason = #Reason_12_27EQ;
        constantStringTmpTable.AnnexureDetailConcessionNumber = #AnnexureDetailConcessionNumber;
        constantStringTmpTable.AnnexureDetailColumnNo1 = #ColumnNo664;
        constantStringTmpTable.AnnexureDetailColumnNo2 = #ColumnNo665;
        constantStringTmpTable.AnnexureDetailColumnNo3 = #ColumnNo666;
        constantStringTmpTable.AnnexureDetailColumnNo4 = #ColumnNo667;
        constantStringTmpTable.AnnexureDetailColumnNo5 = #ColumnNo668;
        constantStringTmpTable.AnnexureDetailColumnNo6 = #ColumnNo669;
        constantStringTmpTable.AnnexureDetailColumnNo7 = #ColumnNo670;
        constantStringTmpTable.AnnexureDetailColumnNo8 = #ColumnNo671;
        constantStringTmpTable.AnnexureDetailColumnNo9 = #ColumnNo672;
        constantStringTmpTable.AnnexureDetailColumnNo10 = #ColumnNo673;
        constantStringTmpTable.AnnexureDetailColumnNo11 = #ColumnNo674;
        constantStringTmpTable.AnnexureDetailColumnNo12 = #ColumnNo675;
        constantStringTmpTable.AnnexureDetailColumnNo13 = #ColumnNo676;
        constantStringTmpTable.AnnexureDetailColumnNo14 = #ColumnNo677;
        constantStringTmpTable.AnnexureDetailColumnNo15 = #ColumnNo678;
        constantStringTmpTable.AnnexureDetailColumnNo16 = #ColumnNo679;
        constantStringTmpTable.AnnexureDetailColumnNo17 = #ColumnNo680;
        constantStringTmpTable.AnnexureDetailColumnNo18 = #ColumnNo681;
        constantStringTmpTable.AnnexureNoteSignature = #Verification_Signature27EQ;
        constantStringTmpTable.AnnexureNoteNameAndDesignation = #Verification_NameDesig27EQ;
        constantStringTmpTable.AnnexureNote1 = #Note + " " + #Notes_1_1_27EQ;
        constantStringTmpTable.AnnexureNote2 = #Notes_1_2_27EQ;
        constantStringTmpTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConstantString27QTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>TaxWithholdStatementTmpConstantString</c> temporary table for a 27Q
    /// report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initConstantString27QTmp()
    {
        #TaxWithholdStatement_IN
        constantStringTmpTable.Title = #Form27Q;
        constantStringTmpTable.TitleSection = #SeeSections_2_27Q;
        constantStringTmpTable.TitleDescription = #Statement1_1_27D + "@SYS34952" + #3 + "@SYS34953" + #Statement1_3_27D;
        constantStringTmpTable.TitleDescription2 = #Statement2_1_27D + "@SYS34952" + #Statement2_2_27D + "@SYS34953";
        constantStringTmpTable.TitleDescription3 = "@SYS34952" + #Year + "@SYS34953";
        constantStringTmpTable.Point1TAN = #1 + "@SYS35672" + " " + "@SYS34952" + " " + #a + " " + "@SYS34953" + " " + #TAN_27Q + " " + "@SYS34952" + #TAN + "@SYS34953";
        constantStringTmpTable.Point1PAN = "@SYS34952" + " " + #b + " " + "@SYS34953" + " " +  #PANNumber + " " + "@SYS34952" + #PAN + "@SYS34953";
        constantStringTmpTable.Point1D = "@SYS34952" + " " + #d + " " + "@SYS34953" + " " + #StatementHeaderD
            + "@SYS34952" + " " + #YesNo + " " + "@SYS34953";
        constantStringTmpTable.Point1E = "@SYS34952" + " " + #e + " " + "@SYS34953" + " " + #StatementHeaderE_1
            + "@SYS34952" + " " + #d + " " + "@SYS34953" + #StatementHeaderE_2;
        constantStringTmpTable.Point1F = "@SYS34952" + " " + #f + " " + "@SYS34953" + " " + #TypeOfDeductor;
        constantStringTmpTable.Point2Heading = #Particulars_2_26Q;
        constantStringTmpTable.Point2Type = "@SYS34952" + #b + "@SYS34953" + " " + #TypeOfDeductor;
        constantStringTmpTable.Point2Branch = "@SYS34952" + #c + "@SYS34953" + " " + #Branch + " " + "@SYS34952" + #ifAny +"@SYS34953";
        constantStringTmpTable.Point2Address = "@SYS34952" + #d + "@SYS34953" + " " + #Address;
        constantStringTmpTable.Point2IsCentralStateGovernment = "@SYS34952" + " " + #b + " " + "@SYS34953" + " " + #IsCentralStateGovernment;
        constantStringTmpTable.Point2CentralStateGovernmentName = #CentralStateGovernmentName;
        constantStringTmpTable.Point2CentralStateGovernmentAINCode = #CentralStateGovernmentAINCode;
        constantStringTmpTable.Point2TANRegistrationNumber = "@SYS34952" + " " + #c + " " + "@SYS34953" + " " + #TANRegistrationNumber;
        constantStringTmpTable.Point2AlternateTelePhone = #AlternateTelePhone;
        constantStringTmpTable.Point2AlternateTeleEmail = #AlternateEmail;
        constantStringTmpTable.Point3Heading = #Particulars3;
        constantStringTmpTable.Point3Note = "@SYS35668" + " " + #Relevant;
        constantStringTmpTable.Point3ResposibleAlternateTelePhone = #AlternateTelePhone;
        constantStringTmpTable.Point3ResposibleAlternateEmail = #AlternateEmail;
        constantStringTmpTable.Point3ResposibleMobilePhone = #MobileNumber;
        constantStringTmpTable.Point4Heading = #DetailsOfTax_5_26Q;
        constantStringTmpTable.Point4SectionCode = #SectionCode;
        constantStringTmpTable.Point4Amount = #TaxAmount;
        constantStringTmpTable.Point4Fee = #Fee;
        constantStringTmpTable.Point4TotalTax = #TotalTax + "@SYS34952" + #TotalTax_27Q + "@SYS34953";
        constantStringTmpTable.Point4ModeOfDeposit = #ModeOfDepositChallan + "@SYS34952" + #C + "@SYS34953"
            + #ModeOfDepositBookAdjustment + "@SYS34952" + #B + "@SYS34953";
        constantStringTmpTable.Point4MinorHeaderOfChallan = #MinorHeaderOfChallan;
        constantStringTmpTable.Point4YesNoByDeposite = #BookEntry_27Q;
        constantStringTmpTable.Point4ColumnNo1 = #ColumnNo701;
        constantStringTmpTable.Point4ColumnNo2 = #ColumnNo702;
        constantStringTmpTable.Point4ColumnNo3 = #ColumnNo703;
        constantStringTmpTable.Point4ColumnNo4 = #ColumnNo704;
        constantStringTmpTable.Point4ColumnNo5 = #ColumnNo705;
        constantStringTmpTable.Point4ColumnNo6 = #ColumnNo706;
        constantStringTmpTable.Point4ColumnNo7 = #ColumnNo707;
        constantStringTmpTable.Point4ColumnNo8 = #ColumnNo708;
        constantStringTmpTable.Point4ColumnNo9 = #ColumnNo709;
        constantStringTmpTable.Point4ColumnNo10 = #ColumnNo710;
        constantStringTmpTable.Point4ColumnNo11 = #ColumnNo711;
        constantStringTmpTable.Point4ColumnNo12 = #ColumnNo712;
        constantStringTmpTable.Point4ColumnNo13 = #ColumnNo713;
        constantStringTmpTable.Point5Heading = #DetailsOfAmount5_26Q;
        constantStringTmpTable.Point5Signature = #Verification_Signature;
        constantStringTmpTable.Point5NameAndDesignation = #Verification_NameDesig;
        constantStringTmpTable.Point5Note1 = "@SYS34952" + #1 + "@SYS34953" + #Notes1_26Q + '"' + #Government + '"' + " " + "@SYS35673" + " " + '"' + #Others + '"' + "@SYS35672";
        constantStringTmpTable.AnnexureHeading = #AnnexureHeading_26Q;
        constantStringTmpTable.AnnexureText = "@SYS34952" + #AnnexureText_27Q + "@SYS34953";
        constantStringTmpTable.AnnexureSummaryDescription1 = #DetailsOfAmount_1_26Q;
        constantStringTmpTable.AnnexureSummaryDescription2 = "@SYS34952" + #DateFormatDMY + "@SYS34953" + #DetailsOfAmount_2_26Q;
        constantStringTmpTable.AnnexureSummarySectionCode = #Section_2_26Q;
        constantStringTmpTable.AnnexureSummaryTotal = #TotalTDS_2_27Q;
        constantStringTmpTable.AnnexureSummaryName = #NameofDeductor;
        constantStringTmpTable.AnnexureSummaryAmountPerChallan = #AnnexureSummaryAmountPerChallan;
        constantStringTmpTable.AnnexureSummaryTotalInterest = #AnnexureSummaryTotalInterest;
        constantStringTmpTable.AnnexureDetailCode = #DeducteeCode + "@SYS34952" + #DeducteeCode_26Q + "@SYS34953";
        constantStringTmpTable.AnnexureDetailPANReferenceNumber = #DeducteeReferenceNumber;
        constantStringTmpTable.AnnexureDetailPAN = #PANNumber_3;
        constantStringTmpTable.AnnexureDetailName = #Name_3;
        constantStringTmpTable.AnnexureDetailSectionCode = #SectionCode;
        constantStringTmpTable.AnnexureDetailTransPostDate = #Date_3 + "@SYS34952" + #DateFormatDMY + "@SYS34953";
        constantStringTmpTable.AnnexureDetailAmount = #AmountPaid_3;
        constantStringTmpTable.AnnexureDetailYesNoByDeposited = #PaidByBook_3;
        constantStringTmpTable.AnnexureDetailTotalTaxAmount = #TotalTaxDeducted + "@SYS34952" + #TotTaxDeducted_3_27Q + "@SYS34953" + #Rs;
        constantStringTmpTable.AnnexureDetailTaxDate = #Dateofdeduction;
        constantStringTmpTable.AnnexureDetailTaxAmount = #TaxAmount;
        constantStringTmpTable.AnnexureDetailRate = #Rate_3;
        constantStringTmpTable.AnnexureDetailReason = #Reason_3_26Q;
        constantStringTmpTable.AnnexureDetailConcessionNumber = #AnnexureDetailConcessionNumber;
        constantStringTmpTable.AnnexureDetailTaxApplicability = #AnnexureDetailTaxApplicability_1 + "@SYS34952" + #a + "@SYS34953"
            + #AnnexureDetailTaxApplicability_2 + "@SYS34952" + #b + "@SYS34953";
        constantStringTmpTable.AnnexureDetailNatureRemittance = #AnnexureDetailNatureRemittance;
        constantStringTmpTable.AnnexureDetailAcknowledgementNumber = #AnnexureDetailAcknowledgementNumber;
        constantStringTmpTable.AnnexureDetailCountrytoRemittance = #AnnexureDetailCountrytoRemittance;
        constantStringTmpTable.AnnexureDetailColumnNo1 = #ColumnNo714;
        constantStringTmpTable.AnnexureDetailColumnNo2 = #ColumnNo715;
        constantStringTmpTable.AnnexureDetailColumnNo3 = #ColumnNo716;
        constantStringTmpTable.AnnexureDetailColumnNo4 = #ColumnNo717;
        constantStringTmpTable.AnnexureDetailColumnNo5 = #ColumnNo718;
        constantStringTmpTable.AnnexureDetailColumnNo6 = #ColumnNo719;
        constantStringTmpTable.AnnexureDetailColumnNo7 = #ColumnNo720;
        constantStringTmpTable.AnnexureDetailColumnNo8 = #ColumnNo721;
        constantStringTmpTable.AnnexureDetailColumnNo9 = #ColumnNo722;
        constantStringTmpTable.AnnexureDetailColumnNo10 = #ColumnNo723;
        constantStringTmpTable.AnnexureDetailColumnNo11 = #ColumnNo724;
        constantStringTmpTable.AnnexureDetailColumnNo12 = #ColumnNo725;
        constantStringTmpTable.AnnexureDetailColumnNo13 = #ColumnNo726;
        constantStringTmpTable.AnnexureDetailColumnNo14 = #ColumnNo727;
        constantStringTmpTable.AnnexureDetailColumnNo15 = #ColumnNo728;
        constantStringTmpTable.AnnexureDetailColumnNo16 = #ColumnNo729;
        constantStringTmpTable.AnnexureDetailColumnNo17 = #ColumnNo730;
        constantStringTmpTable.AnnexureDetailColumnNo18 = #ColumnNo731;
        constantStringTmpTable.AnnexureDetailColumnNo19 = #ColumnNo732;
        constantStringTmpTable.AnnexureDetailColumnNo20 = #ColumnNo733;
        constantStringTmpTable.AnnexureDetailColumnNo21 = #ColumnNo734;
        constantStringTmpTable.AnnexureNoteSignature = #Verification_Signature;
        constantStringTmpTable.AnnexureNoteNameAndDesignation = #Verification_NameDesig;
        constantStringTmpTable.AnnexureNote1 = #Note + " " + "@SYS35668" + " " + #Write + '"' + #A1 + '"' + #ifThe + '"' + #lowerdeduction + '"' + " " + "@SYS25338" + " " + '"' + #nodeduction + '"' + #Notes_5_1_26Q + ".";
        constantStringTmpTable.AnnexureNote2 = #Write + " " + '"' + #B1 + '"' + #Notes_5_2_26Q;
        constantStringTmpTable.AnnexureNote3 = "   " + #Write + " " + '"' + #G1 + '"' + #Notes_5_3_27Q;
        constantStringTmpTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConstantStringTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>TaxWithholdStatementTmpConstantString</c> temporary table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initConstantStringTmpTable()
    {
        switch (statement)
        {
            case TaxWithholdStatement_IN::Form26Q:
                this.initConstantString26QTmp();
                break;
            case TaxWithholdStatement_IN::Form27Q:
                this.initConstantString27QTmp();
                break;
            case TaxWithholdStatement_IN::Form27EQ:
                this.initConstantString27EQTmp();
                break;
            default:
                return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameterTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>TaxWithholdStatementTmpParameter</c> temporary table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initParameterTmpTable()
    {
        int currentYear;
        str assessmentYear;
        str financialYear;

        currentYear = year(taxWithholdDate);

        // calculate the financial year and assessment year
        if (currentYear)
        {
            if (taxWithholdDate     >= Global::str2DateDMY(#QuarterTwoStart + int2str(currentYear))
                || taxWithholdDate  <= Global::str2DateDMY(#QuarterFourEnd + int2str(currentYear)))
            {
                financialYear = int2str(currentYear) + "@SYS77038" + int2str(currentYear + #AdditionalOneYear);
                assessmentYear = int2str(currentYear + #AdditionalOneYear) + "@SYS77038" + int2str(currentYear + #AdditionalTwoYears);
            }
            if (taxWithholdDate     >= Global::str2DateDMY(#QuarterOneStart + int2str(currentYear))
                && taxWithholdDate  <= Global::str2DateDMY(#QuarterOneEnd + int2str(currentYear)))
            {
                financialYear = int2str(currentYear - #AdditionalOneYear) + "@SYS77038" + int2str(currentYear);
                assessmentYear = int2str(currentYear) + "@SYS77038" + int2str(currentYear + #AdditionalOneYear);
            }
        }

        parameterTmpTable.StatementFiledEarlier         = earilerField;
        parameterTmpTable.ProvisionalReceiptNumber      = provisionalReceiptNumber;
        parameterTmpTable.TanNumber                     = taxAccountNumber;
        parameterTmpTable.Statement                     = statement;
        parameterTmpTable.TaxWithholdDate               = taxWithholdDate;
        parameterTmpTable.PeriodEnd                     = periodEnd;
        parameterTmpTable.FullName                      = fullName;
        parameterTmpTable.Designation                   = designation;
        parameterTmpTable.PrintingDate                  = printdate;
        parameterTmpTable.UtilityName                   = utilityName;
        parameterTmpTable.eFilling                      = efiling;
        parameterTmpTable.CorrectedEfilling             = correctedEfiling;
        parameterTmpTable.FileName                      = fileName;
        parameterTmpTable.eFillingFiled                 = efillingFiled;
        parameterTmpTable.FromDate                      = fromdate;
        parameterTmpTable.ToDate                        = todate;
        parameterTmpTable.AssessmentYear                = assessmentYear;
        parameterTmpTable.FinancialYear                 = financialYear;
        parameterTmpTable.PanNumber                     = CompanyInfoHelper::getTaxInformationLegalEntity_IN(CompanyInfo::find()).panNumber;
        parameterTmpTable.Place                         = logisticsPostalAddress.City;
        parameterTmpTable.NameAndDesignation            = fullName + "@SYS35667" + designation;
        parameterTmpTable.LastDateCurrentMonth          = endmth(todate);

        parameterTmpTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParticularInfoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>TaxWithholdStatementTmpParticularInfo</c> temporary table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initParticularInfoTmpTable()
    {
        DirPartyLocation                dirPartyLocation;
        TaxInformation_IN               taxInformation;
        TaxInformationLegalEntity_IN    taxInfomationLegalEntity;
        TaxWithholdRegNumbers_IN        taxWithholdRegNumbers;
        CompanyInfo                     companyInfo;
        utcdatetime                     fromDateTime;
        utcdatetime                     toDateTime;
        HcmWorker                       hcmWorker = HcmWorker::findByPersonnelNumber(responsiblePerson);

        fromDateTime = DateTimeUtil::newDateTime(fromdate, timeMax());
        toDateTime   = DateTimeUtil::newDateTime(todate, timeMax());

        companyInfo                 = CompanyInfo::find();
        taxInfomationLegalEntity    = TaxInformationLegalEntity_IN::findByLegalEntity(companyInfo.RecId);
        taxWithholdRegNumbers       = TaxWithholdRegNumbers_IN::findByTaxRegistrationNumber(taxAccountNumber, TaxRegistrationType_IN::Company);

        select firstonly validTimeState(fromdate, todate) RegistrationLocation from taxInformation
            where taxInformation.tan == taxWithholdRegNumbers.RecId
            join Location from dirPartyLocation
                order by IsPrimary desc
                where dirPartyLocation.Location     == taxInformation.RegistrationLocation
                join Name, RecId from companyInfo
                    where companyInfo.RecId     == dirPartyLocation.Party
                        && companyInfo.DataArea == curext();

        logisticsPostalAddress  = LogisticsPostalAddress::findByLocation(dirPartyLocation.Location);

        //Initialize the tmp table.
        particularInfoTmpTable.Name                         = companyInfo.Name;
        particularInfoTmpTable.TANRegistrationNumber        = taxWithholdRegNumbers.TANRegistrationNumber;
        particularInfoTmpTable.FullName                     = fullName;
        particularInfoTmpTable.TypeOfDeductor               = taxInfomationLegalEntity.TypeOfDeductor;
        particularInfoTmpTable.Branch                       = '';
        particularInfoTmpTable.Address                      = '';
        particularInfoTmpTable.FlatNo                       = '';
        particularInfoTmpTable.NameOfPremise                = '';
        particularInfoTmpTable.RoadStreetLane               = logisticsPostalAddress.Street;
        particularInfoTmpTable.AreaLocation                 = '';
        particularInfoTmpTable.TownCity                     = logisticsPostalAddress.City;
        particularInfoTmpTable.State                        = logisticsPostalAddress.State;
        particularInfoTmpTable.PinCode                      = logisticsPostalAddress.ZipCode;
        particularInfoTmpTable.TelephoneNo                  = TaxWithholdEFilling_IN::getPhone(companyInfo.RecId);
        particularInfoTmpTable.Email                        = companyInfo.email();
        particularInfoTmpTable.AlternateTelephoneNo         = TaxWithholdEFilling_IN::getLogisticsElectronicAddress(companyInfo.RecId,
            LogisticsElectronicAddressMethodType::Phone, NoYes::No).Locator;
        particularInfoTmpTable.AlternateEmail               = TaxWithholdEFilling_IN::getLogisticsElectronicAddress(companyInfo.RecId,
            LogisticsElectronicAddressMethodType::Email, NoYes::No).Locator;

        particularInfoTmpTable.ResponsibleAddress               = '';
        particularInfoTmpTable.ResponsibleRoadStreetLane        = logisticsPostalAddressResponsible.Street;
        particularInfoTmpTable.ResponsiblePinCode               = logisticsPostalAddressResponsible.ZipCode;
        particularInfoTmpTable.ResponsibleState                 = logisticsPostalAddressResponsible.State;
        particularInfoTmpTable.ResponsibleTownCity              = logisticsPostalAddressResponsible.City;
        particularInfoTmpTable.ResponsibleTelePhone             = responsibleTelePhone;
        particularInfoTmpTable.ResponsibleEmail                 = responsibleEmail;
        particularInfoTmpTable.ResponsibleAlternateEmail        = TaxWithholdEFilling_IN::getLogisticsElectronicAddress(hcmWorker.Person,
            LogisticsElectronicAddressMethodType::Email, NoYes::No).Locator;
        particularInfoTmpTable.ResponsibleAlternateMobilePhone  = TaxWithholdEFilling_IN::getLogisticsElectronicAddress(hcmWorker.Person,
            LogisticsElectronicAddressMethodType::Phone, NoYes::Yes).Locator;
        particularInfoTmpTable.ResponsibleAlternateTelePhone    = TaxWithholdEFilling_IN::getLogisticsElectronicAddress(hcmWorker.Person,
            LogisticsElectronicAddressMethodType::Phone, NoYes::No).Locator;
        particularInfoTmpTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report parameters.
    /// </summary>
    /// <param name="_earilerField">
    /// The parameter eariler field.
    /// </param>
    /// <param name="_provisionalReceiptNumber">
    /// The parameter provisional receipt number.
    /// </param>
    /// <param name="_taxAccountNumber">
    /// The parameter TAN number.
    /// </param>
    /// <param name="_statement">
    /// The parameter statement type.
    /// </param>
    /// <param name="_taxWithholdType">
    /// The parameter tax withhold type.
    /// </param>
    /// <param name="_taxWithholdDate">
    /// The parameter tax withhold date.
    /// </param>
    /// <param name="_periodEnd">
    /// The parameter period end.
    /// </param>
    /// <param name="_responsiblePerson">
    /// The parameter responsible person.
    /// </param>
    /// <param name="_fullName">
    /// The parameter full name.
    /// </param>
    /// <param name="_designation">
    /// The parameter designation.
    /// </param>
    /// <param name="_printdate">
    /// The parameter print date.
    /// </param>
    /// <param name="_utilityName">
    /// The parameter utility name.
    /// </param>
    /// <param name="_efiling">
    /// The parameter efiling.
    /// </param>
    /// <param name="_correctedEfiling">
    /// The parameter corrected efiling.
    /// </param>
    /// <param name="_fileName">
    /// The parameter file name.
    /// </param>
    /// <param name="_efillingFiled">
    /// The parameter efilling filed.
    /// </param>
    /// <param name="_fromDate">
    /// The parameter from date.
    /// </param>
    /// <param name="_toDate">
    /// The parameter to date.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initReportParameters(
        NoYesId                                 _earilerField,
        TaxWithholdProvisionalReceiptNumber_IN  _provisionalReceiptNumber,
        TaxWithholdTANNumber_IN                 _taxAccountNumber,
        TaxWithholdStatement_IN                 _statement,
        TaxWithholdType_IN                      _taxWithholdType,
        TransDate                               _taxWithholdDate,
        TaxWithholdPeriodEnd_IN                 _periodEnd,
        HcmPersonnelNumberId                    _responsiblePerson,
        Name                                    _fullName,
        Name                                    _designation,
        TransDate                               _printdate,
        TaxWithholdPreparationUltiltyName_IN    _utilityName,
        NoYesId                                 _efiling,
        NoYesId                                 _correctedEfiling,
        Filename                                _fileName,
        NoYesId                                 _efillingFiled,
        TransDate                               _fromDate,
        TransDate                               _toDate)
    {
        earilerField                =   _earilerField;
        provisionalReceiptNumber    =   _provisionalReceiptNumber;
        taxAccountNumber            =   _taxAccountNumber;
        statement                   =   _statement;
        taxWithholdType             =   _taxWithholdType;
        taxWithholdDate             =   _taxWithholdDate;
        periodEnd                   =   _periodEnd;
        responsiblePerson           =   _responsiblePerson;
        fullName                    =   _fullName;
        designation                 =   _designation;
        printdate                   =   _printdate;
        utilityName                 =   _utilityName;
        efiling                     =   _efiling;
        correctedEfiling            =   _correctedEfiling;
        fileName                    =   _fileName;
        efillingFiled               =   _efillingFiled;
        fromDate                    =   _fromDate;
        toDate                      =   _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a tax withhold statement report.
    /// </summary>
    /// <param name="_taxWithholdType">
    /// A tax withhold type.
    /// </param>
    /// <param name="_taxWithholdStatus">
    /// A tax withhold component status.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initTaxWithholdStatement(
        TaxWithholdType_IN                  _taxWithholdType,
        TaxWithholdComponentStatus_IN       _taxWithholdStatus = TaxWithholdComponentStatus_IN::Resident)
    {
        #TaxWithholdStatement_IN
        TaxWithholdComponentGroupTable_IN   taxWithholdComponentGroup;
        TaxWithholdRegNumbers_IN            taxWithholdRegNumber;
        TaxWithholdSettleTrans_IN           taxWithholdSettleTrans;
        TaxWithholdSettleTrans_IN           taxWithholdSettleTransLoc;
        TaxWithholdTrans_IN                 taxWithholdTrans;
        TaxWithholdReportingCodes_IN        taxWithholdReportingCodes;
        LedgerJournalTrans                  ledgerJournalTrans;
        int                                 serialNumber = #SerialNumberOne;
        container                           containerTmp = conNull();

        boolean                         checkTrans  = false;
        boolean                         checkRes    = false;
        //#TaxWithholdStatement_IN

        taxWithholdRegNumber    = TaxWithholdRegNumbers_IN::findByTaxRegistrationNumber(taxAccountNumber, TaxRegistrationType_IN::Company);

        while select SectionCode, RecId from taxWithholdComponentGroup
            where   (_taxWithholdType == TaxWithholdType_IN::TCS && taxWithholdComponentGroup.TaxType == _taxWithholdType)
                ||  (_taxWithholdType == TaxWithholdType_IN::TDS && taxWithholdComponentGroup.TaxType == _taxWithholdType && taxWithholdComponentGroup.Status == _taxWithholdStatus)
        {
            while select LedgerVoucher, maxOf(MinorHeadCode) from taxWithholdSettleTrans
                group by LedgerVoucher
                where   taxWithholdSettleTrans.TaxWithholdComponentGroup    == taxWithholdComponentGroup.RecId
                    &&  taxWithholdSettleTrans.TransDate                    >= fromdate
                    &&  taxWithholdSettleTrans.TransDate                    <= todate
                    &&  taxWithholdSettleTrans.TaxWithholdRegNumber         == taxWithholdRegNumber.RecId
                    &&  taxWithholdSettleTrans.TaxAmount
                    &&  taxWithholdSettleTrans.LedgerVoucher                != ''
            {
                checkRes    = false;
                taxtransSummaryTmpTable.clear();

                taxtransSummaryTmpTable.MinorHeadCode   = taxWithholdSettleTrans.MinorHeadCode;
                taxtransSummaryTmpTable.ModeOfDeposit   = #ModeOfDepositThruChallan;

                while select TaxWithholdComponent, TaxWithholdComponentGroup, TaxWithholdAmount from taxWithholdTrans
                    where   taxWithholdTrans.LedgerVoucher              == taxWithholdSettleTrans.LedgerVoucher
                        &&  taxWithholdTrans.TransDate                  >= fromdate
                        &&  taxWithholdTrans.TransDate                  <= todate
                        &&  taxWithholdTrans.RecoverableAccount         == false
                        &&  taxWithholdTrans.Settled                    == false
                        &&  taxWithholdTrans.TaxWithholdRegNumber       == taxWithholdRegNumber.RecId
                        &&  taxWithholdTrans.TaxWithholdComponentGroup  == taxWithholdComponentGroup.RecId
                {
                    checkRes    = true;
                    taxtransSummaryTmpTable.SectionCode = taxWithholdComponentGroup.SectionCode;
                    select firstOnly TaxWithholdComponentGroup, TaxWithholdComponent, ReportingCode from taxWithholdReportingCodes
                        where   taxWithholdReportingCodes.TaxWithholdComponentGroup == taxWithholdTrans.TaxWithholdComponentGroup
                            &&  taxWithholdReportingCodes.TaxWithholdComponent      == taxWithholdTrans.TaxWithholdComponent;
                    switch (taxWithholdReportingCodes.ReportingCode)
                    {
                        case    TaxWithholdReportingCode_IN::PECess:
                        case    TaxWithholdReportingCode_IN::SHECess:
                            taxtransSummaryTmpTable.EducationCessRs += - taxWithholdTrans.TaxWithholdAmount;
                            break;

                        case    TaxWithholdReportingCode_IN::Surcharge:
                            taxtransSummaryTmpTable.SurchargeRs     += - taxWithholdTrans.TaxWithholdAmount;
                            break;

                        case    TaxWithholdReportingCode_IN::TDS:
                        case    TaxWithholdReportingCode_IN::TCS:
                            taxtransSummaryTmpTable.TaxTypeRs       += - taxWithholdTrans.TaxWithholdAmount;
                            break;

                        default:
                            break;
                    }
                }
                if (checkRes)
                {
                    containerTmp = this.getInterestOthersValueAnnexure(taxWithholdSettleTrans.LedgerVoucher);

                    select BookEntry, BSRCode, ChallanNumber, ChallanDate from taxWithholdSettleTransLoc
                        where taxWithholdSettleTransLoc.LedgerVoucher   == taxWithholdSettleTrans.LedgerVoucher;

                    select BankChequeNum from ledgerJournalTrans
                        where ledgerJournalTrans.Voucher    == taxWithholdSettleTrans.LedgerVoucher;

                    taxtransSummaryTmpTable.SerialNumber            = serialNumber;
                    taxtransSummaryTmpTable.InterestRs              = conPeek(containerTmp, 1);
                    taxtransSummaryTmpTable.FeeRs                   = conPeek(containerTmp, 2);
                    taxtransSummaryTmpTable.OthersRs                = conPeek(containerTmp, 3);
                    taxtransSummaryTmpTable.DespositedByBookEntry   = taxWithholdSettleTransLoc.BookEntry;
                    taxtransSummaryTmpTable.ChequeNum               = ledgerJournalTrans.BankChequeNum;
                    taxtransSummaryTmpTable.BSRCode                 = taxWithholdSettleTransLoc.BSRCode;
                    taxtransSummaryTmpTable.VoucherChallanNumber    = taxWithholdSettleTransLoc.ChallanNumber;
                    taxtransSummaryTmpTable.TaxDepositedDate        = taxWithholdSettleTransLoc.ChallanDate;
                    taxtransSummaryTmpTable.TotalTaxDepositedRs     = taxtransSummaryTmpTable.TaxTypeRs + taxtransSummaryTmpTable.SurchargeRs
                        + taxtransSummaryTmpTable.EducationCessRs + taxtransSummaryTmpTable.InterestRs + taxtransSummaryTmpTable.FeeRs + taxtransSummaryTmpTable.OthersRs;

                    if (taxtransSummaryTmpTable.TotalTaxDepositedRs)
                    {
                        taxtransSummaryTmpTable.insert();
                        serialNumber++;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdStatementAnnexure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the annexure of a tax withhold statement report.
    /// </summary>
    /// <param name="_taxWithholdType">
    /// A tax withhold type.
    /// </param>
    /// <param name="_taxWithholdStatus">
    /// A tax withhold component status.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initTaxWithholdStatementAnnexure(
        TaxWithholdType_IN                  _taxWithholdType,
        TaxWithholdComponentStatus_IN       _taxWithholdStatus = TaxWithholdComponentStatus_IN::Resident)
    {
        TaxWithholdComponentGroupTable_IN   taxWithholdComponentGroup;
        TaxWithholdSettleTrans_IN           taxWithholdSettleTrans;
        TaxWithholdSettleTrans_IN           taxWithholdSettleTransLoc;
        TaxWithholdSettleTrans_IN           taxWithholdSettleTransLocal;
        TaxWithholdRegNumbers_IN            taxWithholdRegNumber;
        TaxWithholdReportVoucher_IN         taxWithholdReportVoucher;
        TaxWithholdPaymentVersion_IN        taxWithholdPaymentVersion;
        TaxWithholdTrans_IN                 taxWithholdTrans;

        container                       voucherComponentGroupCon;
        int                             counterVoucherComponentGroup;
        int                             serialNumber = 0;

        BSRCode_IN                      bsrCodeTmp;
        TaxWithholdChallanNumber_IN     challanNumberTmp;
        TransDate                       challanDateTmp;
        Amount                          totalAllocatedAmongPartiesTaxTmp;
        Amount                          totalAllTmp;
        Amount                          interestRsTmp;
        Amount                          feeRsTmp;
        Amount                          othersRsTmp;

        taxWithholdRegNumber    = TaxWithholdRegNumbers_IN::findByTaxRegistrationNumber(taxAccountNumber, TaxRegistrationType_IN::Company);
        while select SectionCode, RecId  from taxWithholdComponentGroup
            where (_taxWithholdType == TaxWithholdType_IN::TCS && taxWithholdComponentGroup.TaxType == _taxWithholdType)
                || (_taxWithholdType == TaxWithholdType_IN::TDS && taxWithholdComponentGroup.TaxType == _taxWithholdType && taxWithholdComponentGroup.Status == _taxWithholdStatus)
        {
            voucherComponentGroupCon    = conNull();

            while select LedgerVoucher from taxWithholdSettleTrans
                group by LedgerVoucher
                where taxWithholdSettleTrans.TaxWithholdComponentGroup  == taxWithholdComponentGroup.RecId
                    &&  taxWithholdSettleTrans.TransDate                >= fromDate
                    &&  taxWithholdSettleTrans.TransDate                <= toDate
                    &&  taxWithholdSettleTrans.TaxAmount
                    &&  taxWithholdSettleTrans.TaxWithholdRegNumber     == taxWithholdRegNumber.RecId
                    &&  taxWithholdSettleTrans.LedgerVoucher            != ''
            {
                bsrCodeTmp                          = '';
                challanNumberTmp                    = '';
                challanDateTmp                      = dateNull();
                totalAllocatedAmongPartiesTaxTmp    = #AmountZero;
                totalAllTmp                         = #AmountZero;
                interestRsTmp                       = #AmountZero;
                othersRsTmp                         = #AmountZero;
                serialNumber                        = #SerialNumberOne;
                select taxWithholdSettleTransLoc
                    where taxWithholdSettleTransLoc.TaxWithholdComponentGroup   == taxWithholdComponentGroup.RecId
                        && taxWithholdSettleTransLoc.TransDate                  >= fromDate
                        && taxWithholdSettleTransLoc.TransDate                  <= toDate
                        && taxWithholdSettleTransLoc.LedgerVoucher              == taxWithholdSettleTrans.LedgerVoucher
                        && taxWithholdSettleTransLoc.TaxWithholdRegNumber       == taxWithholdRegNumber.RecId;
                if (taxWithholdSettleTransLoc)
                {
                    bsrCodeTmp                      = taxWithholdSettleTransLoc.bsrCode;
                    challanNumberTmp                = taxWithholdSettleTransLoc.ChallanNumber;
                    challanDateTmp                  = taxWithholdSettleTransLoc.ChallanDate;

                    //Get Interest and Other value
                    [interestRsTmp, feeRsTmp, othersRsTmp] = this.getInterestOthersValueAnnexure(taxWithholdSettleTrans.LedgerVoucher);

                    select sum(TaxAmount) from taxWithholdSettleTransLocal
                        where taxWithholdSettleTransLocal.TaxWithholdComponentGroup == taxWithholdComponentGroup.RecId
                            && taxWithholdSettleTransLocal.TransDate                >= fromDate
                            && taxWithholdSettleTransLocal.TransDate                <= toDate
                            && taxWithholdSettleTransLocal.TaxWithholdRegNumber     == taxWithholdRegNumber.RecId
                            && taxWithholdSettleTransLocal.LedgerVoucher            == taxWithholdSettleTransLoc.LedgerVoucher;

                    totalAllocatedAmongPartiesTaxTmp    = - taxWithholdSettleTransLocal.TaxAmount;
                    totalAllTmp                         = - taxWithholdSettleTransLocal.TaxAmount + interestRsTmp + feeRsTmp + othersRsTmp;

                    select firstOnly PaymentVersion from taxWithholdReportVoucher
                        where taxWithholdReportVoucher.Voucher == taxWithholdSettleTransLoc.Voucher;

                    taxWithholdPaymentVersion = taxWithholdReportVoucher.PaymentVersion;

                    while select maxOf(CustAccount), maxOf(VendAccount), maxOf(Reason), maxOf(TransDate), maxOf(PurchId), maxOf(SalesId),
                        maxOf(TaxApplicability), maxOf(ConcessionCertificateNumber), maxOf(CountryRegionToRemittance), maxOf(NatureOfRemittance), maxOf(AcknowledgermentNumber)
                        from taxWithholdTrans
                        group by Voucher
                            where (taxWithholdTrans.LedgerVoucher               == taxWithholdSettleTransLoc.LedgerVoucher
                                    || taxWithholdTrans.LedgerVoucher           == '')
                                && taxWithholdTrans.TaxWithholdComponentGroup   == taxWithholdComponentGroup.RecId
                                && taxWithholdTrans.TransDate                   >= fromDate
                                && taxWithholdTrans.TransDate                   <= toDate
                                && taxWithholdTrans.InventRefId                 == ''
                                && taxWithholdTrans.TaxWithholdRegNumber        == taxWithholdRegNumber.RecId
                                && taxWithholdTrans.Settled                     == false
                                && taxWithholdTrans.SourceTransVoucher          == ''
                                && taxWithholdTrans.SourceTransDate             == dateNull()
                        exists join taxWithholdReportVoucher
                            where taxWithholdReportVoucher.PaymentVersion       == taxWithholdPaymentVersion
                               && (taxWithholdReportVoucher.Voucher == taxWithholdTrans.Voucher
                                   || taxWithholdReportVoucher.Voucher == taxWithholdTrans.SettledVoucher)
                    {
                        taxTransTmpTable.clear();

                        // Calculate the Withhold tax amount for each component
                        this.calcOrAdjustTaxWithholdAmount(
                            taxWithholdTrans,
                            taxWithholdRegNumber,
                            taxWithholdComponentGroup,
                            _taxWithholdType);

                        if (!conFind(voucherComponentGroupCon, taxWithholdTrans.Voucher))
                        {
                            counterVoucherComponentGroup++;
                            voucherComponentGroupCon =  conPoke(voucherComponentGroupCon, counterVoucherComponentGroup, taxWithholdTrans.Voucher);

                            // Calculate the Adjustment of Withhold tax amount for each component
                            this.calcOrAdjustTaxWithholdAmount(
                                taxWithholdTrans,
                                taxWithholdRegNumber,
                                taxWithholdComponentGroup,
                                _taxWithholdType,
                                true);
                        }

                        this.initAnnexureFieldValues(
                            taxWithholdTrans,
                            taxWithholdSettleTransLoc,
                            bsrCodeTmp,
                            challanNumberTmp,
                            challanDateTmp,
                            totalAllocatedAmongPartiesTaxTmp,
                            totalAllTmp,
                            interestRsTmp,
                            othersRsTmp,
                            serialNumber);
                        if (isPrintOrNot)
                        {
                            taxTransTmpTable.insert();
                            serialNumber ++;
                        }
                    }

                    while select taxWithholdTrans
                        order by TransDate, RecId asc
                        where taxWithholdTrans.LedgerVoucher                == taxWithholdSettleTransLoc.LedgerVoucher
                            && taxWithholdTrans.TaxWithholdComponentGroup   == taxWithholdComponentGroup.RecId
                            && taxWithholdTrans.TransDate                   >= fromDate
                            && taxWithholdTrans.TransDate                   <= toDate
                            && taxWithholdTrans.InventRefId                 == ''
                            && taxWithholdTrans.TaxWithholdRegNumber        == taxWithholdRegNumber.RecId
                            && taxWithholdTrans.Settled                     == false
                            && taxWithholdTrans.TransactionReversal         == false
                            && taxWithholdTrans.SourceTransVoucher          != ''
                            && taxWithholdTrans.SourceTransDate             != dateNull()
                    if (!conFind(voucherComponentGroupCon, taxWithholdTrans.SourceTransVoucher))
                    {
                        taxTransTmpTable.clear();
                        counterVoucherComponentGroup++;
                        voucherComponentGroupCon =  conPoke(voucherComponentGroupCon, counterVoucherComponentGroup, taxWithholdTrans.SourceTransVoucher);

                        this.calcOrAdjustTaxWithholdAmount(
                            taxWithholdTrans,
                            taxWithholdRegNumber,
                            taxWithholdComponentGroup,
                            _taxWithholdType);

                        this.initAnnexureFieldValues(
                            taxWithholdTrans,
                            taxWithholdSettleTransLoc,
                            bsrCodeTmp,
                            challanNumberTmp,
                            challanDateTmp,
                            totalAllocatedAmongPartiesTaxTmp,
                            totalAllTmp,
                            interestRsTmp,
                            othersRsTmp,
                            serialNumber);
                        if (taxTransTmpTable.TotalTaxRs)
                        {
                            taxTransTmpTable.insert();
                            serialNumber ++;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdStatementTransTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>TaxWithholdStatementTmpParticularInfo</c> temporary table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initTaxWithholdStatementTransTmpTable()
    {
        switch (statement)
        {
            case TaxWithholdStatement_IN::Form26Q:
                this.initTaxWithholdStatement(TaxWithholdType_IN::TDS, TaxWithholdComponentStatus_IN::Resident);
                this.initTaxWithholdStatementAnnexure(TaxWithholdType_IN::TDS, TaxWithholdComponentStatus_IN::Resident);
                break;
            case TaxWithholdStatement_IN::Form27Q:
                this.initTaxWithholdStatement(TaxWithholdType_IN::TDS, TaxWithholdComponentStatus_IN::NonResident);
                this.initTaxWithholdStatementAnnexure(TaxWithholdType_IN::TDS, TaxWithholdComponentStatus_IN::NonResident);
                break;
            case TaxWithholdStatement_IN::Form27EQ:
                this.initTaxWithholdStatement(TaxWithholdType_IN::TCS);
                this.initTaxWithholdStatementAnnexure(TaxWithholdType_IN::TCS);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTemporaryTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes all the temporary tables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initTemporaryTables()
    {
        this.getResponsibleInfo();
        this.initParticularInfoTmpTable();
        this.initConstantStringTmpTable();
        this.initParameterTmpTable();
        this.initTaxWithholdStatementTransTmpTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConstantStringTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the TaxWithholdStatementTmpConstantString tmp table.
    /// </summary>
    /// <param name="_constantStringTmpTable">
    /// TaxWithholdStatementTmpConstantString tmp table
    /// </param>
    /// <returns>
    /// TaxWithholdStatementTmpConstantString tmp table
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdStatementTmpConstantString parmConstantStringTmpTable(TaxWithholdStatementTmpConstantString      _constantStringTmpTable = constantStringTmpTable)
    {
        constantStringTmpTable =  _constantStringTmpTable;
        return constantStringTmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParameterTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the TaxWithholdStatementTmpParameter tmp table.
    /// </summary>
    /// <param name="_parameterTmpTable">
    /// TaxWithholdStatementTmpParameter tmp table
    /// </param>
    /// <returns>
    /// TaxWithholdStatementTmpParameter tmp table
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdStatementTmpParameter parmParameterTmpTable(TaxWithholdStatementTmpParameter      _parameterTmpTable = parameterTmpTable)
    {
        parameterTmpTable =  _parameterTmpTable;
        return parameterTmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParticularInfoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the TaxWithholdStatementTmpParticularInfo tmp table.
    /// </summary>
    /// <param name="_particularInfoTmpTable">
    /// TaxWithholdStatementTmpParticularInfo tmp table
    /// </param>
    /// <returns>
    /// TaxWithholdStatementTmpParticularInfo tmp table
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdStatementTmpParticularInfo parmParticularInfoTmpTable(TaxWithholdStatementTmpParticularInfo      _particularInfoTmpTable = particularInfoTmpTable)
    {
        particularInfoTmpTable =  _particularInfoTmpTable;
        return particularInfoTmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTransSummaryTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the TaxWithholdStatementTmpTransSummary tmp table.
    /// </summary>
    /// <param name="_taxtransSummaryTmpTable">
    /// Tmp table of TaxWithholdSettleTrans info.
    /// </param>
    /// <returns>
    /// TaxWithholdStatementTmpTransSummary tmp table
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdStatementTmpTransSummary parmTaxTransSummaryTmpTable(TaxWithholdStatementTmpTransSummary  _taxtransSummaryTmpTable = taxtransSummaryTmpTable)
    {
        taxtransSummaryTmpTable =  _taxtransSummaryTmpTable;
        return taxtransSummaryTmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTransTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the TaxWithholdStatementTmpTrans tmp table.
    /// </summary>
    /// <param name="_taxTransTmpTable">
    /// Tmp table of TaxWithholdTrans_IN info(For Annexure)
    /// </param>
    /// <returns>
    /// TaxWithholdStatementTmpTrans tmp table
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdStatementTmpTrans parmTaxTransTmpTable(TaxWithholdStatementTmpTrans   _taxTransTmpTable = taxTransTmpTable)
    {
        taxTransTmpTable =  _taxTransTmpTable;
        return taxTransTmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the report helper class.
    /// </summary>
    /// <param name="_earilerField">
    /// The parameter eariler field.
    /// </param>
    /// <param name="_provisionalReceiptNumber">
    /// The parameter provisional receipt number.
    /// </param>
    /// <param name="_taxAccountNumber">
    /// The parameter TAN number.
    /// </param>
    /// <param name="_statement">
    /// The parameter statement type.
    /// </param>
    /// <param name="_taxWithholdType">
    /// The parameter tax withhold type.
    /// </param>
    /// <param name="_taxWithholdDate">
    /// The parameter tax withhold date.
    /// </param>
    /// <param name="_periodEnd">
    /// The parameter period end.
    /// </param>
    /// <param name="_responsiblePerson">
    /// The parameter responsible Person.
    /// </param>
    /// <param name="_fullName">
    /// The parameter full name.
    /// </param>
    /// <param name="_designation">
    /// The parameter designation.
    /// </param>
    /// <param name="_printdate">
    /// The parameter print date.
    /// </param>
    /// <param name="_utilityName">
    /// The parameter utility name.
    /// </param>
    /// <param name="_efiling">
    /// The parameter efiling.
    /// </param>
    /// <param name="_correctedEfiling">
    /// The parameter corrected efiling.
    /// </param>
    /// <param name="_fileName">
    /// The parameter file name.
    /// </param>
    /// <param name="_efillingFiled">
    /// The parameter efilling filed.
    /// </param>
    /// <param name="_fromDate">
    /// The parameter from date.
    /// </param>
    /// <param name="_toDate">
    /// The parameter to date.
    /// </param>
    /// <returns>
    /// The report helper class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdStatementReportHelper construct(
        NoYesId                                 _earilerField,
        TaxWithholdProvisionalReceiptNumber_IN  _provisionalReceiptNumber,
        TaxWithholdTANNumber_IN                 _taxAccountNumber,
        TaxWithholdStatement_IN                 _statement,
        TaxWithholdType_IN                      _taxWithholdType,
        TransDate                               _taxWithholdDate,
        TaxWithholdPeriodEnd_IN                 _periodEnd,
        HcmPersonnelNumberId                    _responsiblePerson,
        Name                                    _fullName,
        Name                                    _designation,
        TransDate                               _printdate,
        TaxWithholdPreparationUltiltyName_IN    _utilityName,
        NoYesId                                 _efiling,
        NoYesId                                 _correctedEfiling,
        Filename                                _fileName,
        NoYesId                                 _efillingFiled,
        TransDate                               _fromDate,
        TransDate                               _toDate)
    {
        TaxWithholdStatementReportHelper           taxWithholdStatementReportHelper;

        taxWithholdStatementReportHelper = new TaxWithholdStatementReportHelper();
        taxWithholdStatementReportHelper.initReportParameters(
            _earilerField,
            _provisionalReceiptNumber,
            _taxAccountNumber,
            _statement,
            _taxWithholdType,
            _taxWithholdDate,
            _periodEnd,
            _responsiblePerson,
            _fullName,
            _designation,
            _printdate,
            _utilityName,
            _efiling,
            _correctedEfiling,
            _fileName,
            _efillingFiled,
            _fromDate,
            _toDate);

        return taxWithholdStatementReportHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromToDateAndPeriodEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the period end, from date, and to date.
    /// </summary>
    /// <param name="_taxWithholddate">
    /// A tax withholding date.
    /// </param>
    /// <returns>
    /// A container that contains the period end, from date, and to date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getFromToDateAndPeriodEnd(TransDate _taxWithholddate)
    {
        int                     currentYear;
        TransDate               fromdate;
        TransDate               todate;
        TaxWithholdPeriodEnd_IN periodEnd;
        TransDate               quarterOneStartDate;
        TransDate               quarterOneEndDate;
        TransDate               quarterTwoStartDate;
        TransDate               quarterTwoEndDate;
        TransDate               quarterThreeStartDate;
        TransDate               quarterThreeEndDate;
        TransDate               quarterFourStartDate;
        TransDate               quarterFourEndDate;

        if (_taxWithholddate)
        {
            currentYear           = year(_taxWithholddate);
            quarterOneStartDate   = Global::str2DateDMY(#QuarterOneStart + int2str(currentYear));
            quarterOneEndDate     = Global::str2DateDMY(#QuarterOneEnd + int2str(currentYear));
            quarterTwoStartDate   = Global::str2DateDMY(#QuarterTwoStart + int2str(currentYear));
            quarterTwoEndDate     = Global::str2DateDMY(#QuarterTwoEnd + int2str(currentYear));
            quarterThreeStartDate = Global::str2DateDMY(#QuarterThreeStart + int2str(currentYear));
            quarterThreeEndDate   = Global::str2DateDMY(#QuarterThreeEnd + int2str(currentYear));
            quarterFourStartDate  = Global::str2DateDMY(#QuarterFourStart + int2str(currentYear));
            quarterFourEndDate    = Global::str2DateDMY(#QuarterFourEnd + int2str(currentYear));

            if (_taxWithholddate    >= quarterOneStartDate
                && _taxWithholddate  <= quarterOneEndDate)
            {
                //March
                periodEnd   = "@SYS24778";
                fromdate    = quarterOneStartDate;
                todate      = quarterOneEndDate;
            }
            else if (_taxWithholddate   >= quarterTwoStartDate
                    && _taxWithholddate <= quarterTwoEndDate)
            {
                //June
                periodEnd   = "@SYS24781";
                fromdate    = quarterTwoStartDate;
                todate      = quarterTwoEndDate;
            }
            else if (_taxWithholddate   >= quarterThreeStartDate
                    && _taxWithholddate <= quarterThreeEndDate)
            {
                //September
                periodEnd   = "@SYS24784";
                fromdate    = quarterThreeStartDate;
                todate      = quarterThreeEndDate;
            }
            else if (_taxWithholddate   >= quarterFourStartDate
                    && _taxWithholddate <= quarterFourEndDate)
            {
                //December
                periodEnd   = "@SYS24787";
                fromdate    = quarterFourStartDate;
                todate      = quarterFourEndDate;
            }
        }

        return [periodEnd, fromdate, todate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSerialNumberAndTotalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count and sum of tax amount and fee values for all <c>TaxWithholdSettleTrans</c> record that is grouped by
    /// the <c>LedgerVoucher</c> field.
    /// </summary>
    /// <param name="_taxWithholdStatement">
    /// A <c>TaxWithholdStatement</c> record.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_taxAccountNumber">
    /// A tax account number.
    /// </param>
    /// <returns>
    /// A container that contains the count and total deposit amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getSerialNumberAndTotalTaxAmount(
        TaxWithholdStatement_IN         _taxWithholdStatement,
        TransDate                       _fromDate,
        TransDate                       _toDate,
        TaxWithholdTANNumber_IN         _taxAccountNumber)
    {
        TaxWithholdType_IN                  taxWithholdType;
        TaxWithholdComponentStatus_IN       taxWithholdComponentStatus;

        TaxWithholdComponentGroupTable_IN   taxWithholdComponentGroup;
        TaxWithholdSettleTrans_IN           taxWithholdSettleTrans;
        TaxWithholdSettleTrans_IN           taxWithholdSettleTransLoc;
        TaxWithholdRegNumbers_IN            taxWithholdRegNumber;
        CustVendPaymJournalFee              custVendPaymJournalFee;
        VendPaymFee                         vendPaymFee;
        LedgerJournalTrans                  ledgerJournalTrans;

        Amount                              totalDepositAmount;
        Amount                              interestRsTmp;
        Amount                              feeRsTmp;
        Amount                              othersRsTmp;
        int                                 serialNumber;

        switch (_taxWithholdStatement)
        {
            case TaxWithholdStatement_IN::Form26Q:
                taxWithholdType             = TaxWithholdType_IN::TDS;
                taxWithholdComponentStatus  = TaxWithholdComponentStatus_IN::Resident;
                break;

            case TaxWithholdStatement_IN::Form27Q:
                taxWithholdType             = TaxWithholdType_IN::TDS;
                taxWithholdComponentStatus  = TaxWithholdComponentStatus_IN::NonResident;
                break;

            case TaxWithholdStatement_IN::Form27EQ:
                taxWithholdType             = TaxWithholdType_IN::TCS;
                break;
        }
        taxWithholdRegNumber    = TaxWithholdRegNumbers_IN::findByTaxRegistrationNumber(_taxAccountNumber, TaxRegistrationType_IN::Company);
        totalDepositAmount      = 0;
        while select taxWithholdComponentGroup
            where (taxWithholdType == TaxWithholdType_IN::TCS && taxWithholdComponentGroup.TaxType == taxWithholdType)
                || (taxWithholdType == TaxWithholdType_IN::TDS && taxWithholdComponentGroup.TaxType == taxWithholdType && taxWithholdComponentGroup.Status == taxWithholdComponentStatus)
        {
            while select LedgerVoucher from taxWithholdSettleTrans
                group by LedgerVoucher
                where   taxWithholdSettleTrans.TaxWithholdComponentGroup    == taxWithholdComponentGroup.RecId
                    &&  taxWithholdSettleTrans.TransDate                    >= _fromDate
                    &&  taxWithholdSettleTrans.TransDate                    <= _toDate
                    &&  taxWithholdSettleTrans.TaxWithholdRegNumber         == taxWithholdRegNumber.RecId
                    &&  taxWithholdSettleTrans.LedgerVoucher                != ''
            {
                interestRsTmp = 0;
                feeRsTmp      = 0;
                othersRsTmp   = 0;

                select taxWithholdSettleTransLoc
                    where taxWithholdSettleTransLoc.TaxWithholdComponentGroup   == taxWithholdComponentGroup.RecId
                        && taxWithholdSettleTransLoc.TransDate                  >= _fromDate
                        && taxWithholdSettleTransLoc.TransDate                  <= _toDate
                        && taxWithholdSettleTransLoc.LedgerVoucher              == taxWithholdSettleTrans.LedgerVoucher
                        && taxWithholdSettleTransLoc.TaxWithholdRegNumber       == taxWithholdRegNumber.RecId;

                if (taxWithholdSettleTransLoc)
                {
                    while select FeeId, FeeValue from custVendPaymJournalFee
                        join TaxWithholdFeeType_IN from vendPaymFee
                            where vendPaymFee.FeeId == custVendPaymJournalFee.FeeId
                        exists join ledgerJournalTrans
                            where custVendPaymJournalFee.RefRecId   == ledgerJournalTrans.RecId
                                && custVendPaymJournalFee.Module    == ModuleCustVend::Vend
                                && ledgerJournalTrans.Voucher       == taxWithholdSettleTrans.LedgerVoucher
                    {
                        if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Interest)
                        {
                            interestRsTmp += custVendPaymJournalFee.FeeValue;
                        }
                        else if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::None)
                        {
                            feeRsTmp      += custVendPaymJournalFee.FeeValue;
                        }
                        else if (vendPaymFee.TaxWithholdFeeType_IN == TaxWithholdFeeType_IN::Others)
                        {
                            othersRsTmp   += custVendPaymJournalFee.FeeValue;
                        }
                    }

                    select sum(TaxAmount) from taxWithholdSettleTransLoc
                        where taxWithholdSettleTransLoc.TaxWithholdComponentGroup == taxWithholdComponentGroup.RecId
                            && taxWithholdSettleTransLoc.TransDate                >= _fromDate
                            && taxWithholdSettleTransLoc.TransDate                <= _toDate
                            && taxWithholdSettleTransLoc.TaxWithholdRegNumber     == taxWithholdRegNumber.RecId
                            && taxWithholdSettleTransLoc.LedgerVoucher            == taxWithholdSettleTransLoc.LedgerVoucher;

                    totalDepositAmount    += - taxWithholdSettleTransLoc.TaxAmount + interestRsTmp + feeRsTmp + othersRsTmp;
                    serialNumber++;
                }
            }
        }
        return [totalDepositAmount, serialNumber];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>