<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableUpdateFromPurchReqLineMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for updating the <c>PurchTable</c> record from <c>PurchLine</c> or <c>PurchReqLine</c>.
/// </summary>
class PurchTableUpdateFromPurchReqLineMap
{
    PurchTable      purchTable;
    ListEnumerator  purchReqLineMapListEnumerator;

    InventSiteId                    siteId;
    InventLocationId                locationId;
    LogisticsPostalAddressRecId     addressRecId;
    Addressing                      deliveryAddress;
    AddressZipCodeId                deliveryZipCode;
    AddressCountyId                 deliveryCounty;
    AddressCountryRegionId          deliveryCountryRegionId;
    AddressStateId                  deliveryStateId;
    VendName                        deliveryName;
    AddressCity                     deliveryCity;
    AddressStreet                   deliveryStreet;
    PurchReqAttention               attention;
    DimensionDefault                dimension;
    RecId                           requesterRecId;
    PurchVendorShipCalendarId       shipCalendarId;

    boolean                         first           = true;
    boolean                         setSiteId       = true;
    boolean                         setShipCalendar = true;
    boolean                         setLocationId   = true;
    boolean                         setAddress      = true;
    boolean                         setDim			= false;

    // Only related to purchReqLine
    boolean                         setAtt          = true;
    boolean                         setReq          = true;
    ProjId                          projId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchTableUpdateFromPurchReqLineMap construct()
    {
        return new PurchTableUpdateFromPurchReqLineMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchTableUpdateFromPurchReqLineMap</c> object.
    /// </summary>
    /// <param name = "_purchTable">The <c>PurchTable</c> record to update.</param>
    /// <param name = "_purchReqLineMapListEnumerator">A list enumerator contains records from <c>PurchLine</c> or <c>PurchReqLine</c>.</param>
    public void initialize(PurchTable _purchTable, ListEnumerator _purchReqLineMapListEnumerator)
    {
        this.purchTable                     = _purchTable;
        this.purchReqLineMapListEnumerator  = _purchReqLineMapListEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <PurchTable> record from <c>PurchLine</c> or <c>PurchReqLine</c>.
    /// </summary>
    public void update()
    {
        PurchReqLineMap purchReqLineMap;
        InventSiteId inventSiteIdOrig = purchTable.InventSiteId;

        while (purchReqLineMapListEnumerator.moveNext())
        {
            purchReqLineMap = purchReqLineMapListEnumerator.current();
            if (!this.mustSkipDetermineFieldsToUpdate(purchReqLineMap))
            {
                this.determineFieldsToUpdate(purchReqLineMap);
            }
        }

        purchTable.InventSiteId          = setSiteId     ? siteId : '';
        purchTable.InventLocationId      = setLocationId ? locationId : '';

        // if setAddress is false, default delivery address will be setting according to company delivery address.
        // Delivery name will be setting to company name by setLocation() method.
        if (setAddress)
        {
            purchTable.DeliveryPostalAddress = addressRecId;
            purchTable.DeliveryName          = deliveryName;
        }
        else
        {
            purchTable.Type().setDefaultDeliveryAddress();
        }

        if (setDim)
        {
            purchTable.DefaultDimension = dimension;
        }
        else if (purchReqLineMap.TableId == tableNum(PurchLine))
        {
            purchTable.modifiedInventSiteFromParent(purchReqLineMap);
        }

        if (purchReqLineMap.TableId == tableNum(PurchReqLine))
        {
            purchTable.ReqAttention   = setAtt ? attention : '';
            purchTable.Requester      = setReq ? requesterRecId : 0;
            purchTable.ProjId         = projId;
            purchTable.CurrencyCode   = purchReqLineMap.CurrencyCode;
            purchTable.AccountingDate = purchReqLineMap.TransDate;
        }
        
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled
            && setShipCalendar)
        {
            purchTable.ShipCalendarId = shipCalendarId;
        }

        if (purchTable.InventSiteId != inventSiteIdOrig)
        {
            LogisticsLocationSelectForm_PurchTable logisticsLocationSelectForm = new LogisticsLocationSelectForm_PurchTable(purchTable);
            logisticsLocationSelectForm.setTaxGroup(purchTable.DeliveryPostalAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineFieldsToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines which fields should be updated in the <c>PurchTable</c> record.
    /// </summary>
    /// <param name = "_purchReqLineMap">
    /// A <c>PurchLine</c> or <c>PurchReqLine</c> record used to determine which fields to update in the <c>PurchTable</c> record.
    /// </param>
    protected void determineFieldsToUpdate(PurchReqLineMap _purchReqLineMap)
    {
        LogisticsPostalAddress  postalAddress   = LogisticsPostalAddress::findRecId(_purchReqLineMap.DeliveryPostalAddress);
        InventDim               inventDim       = InventDim::find(_purchReqLineMap.InventDimId);

        if (first)
        {
            first                   = false;
            siteId                  = inventDim.InventSiteId;
            locationId              = inventDim.InventLocationId;
            addressRecId            = _purchReqLineMap.DeliveryPostalAddress;
            deliveryAddress         = postalAddress.Address;
            deliveryZipCode         = postalAddress.ZipCode;
            deliveryCounty          = postalAddress.County;
            deliveryCountryRegionId = postalAddress.CountryRegionId;
            deliveryStateId         = postalAddress.State;
            deliveryName            = _purchReqLineMap.DeliveryName;
            deliveryCity            = postalAddress.City;
            deliveryStreet          = postalAddress.Street;
            dimension               = _purchReqLineMap.DefaultDimension;

            if (_purchReqLineMap.TableId == tableNum(PurchReqLine))
            {
                attention           = _purchReqLineMap.Attention;
                requesterRecId      = _purchReqLineMap.Requisitioner;
                projId              = _purchReqLineMap.ProjId;
                setDim				= true;
            
                if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
                {
                    PurchReqLine purchReqLine = _purchReqLineMap as PurchReqLine;
                    shipCalendarId = purchReqLine.ShipCalendarId;
                }
            }
        }
        else
        {
            setSiteId       = setSiteId     && (siteId          == inventDim.InventSiteId);
            setLocationId   = setLocationId && (locationId      == inventDim.InventLocationId);
            setDim          = setDim        && (dimension       == _purchReqLineMap.DefaultDimension);
            setAddress      = setAddress
                               && deliveryAddress         == postalAddress.Address
                               && deliveryZipCode         == postalAddress.ZipCode
                               && deliveryCounty          == postalAddress.County
                               && deliveryCountryRegionId == postalAddress.CountryRegionId
                               && deliveryStateId         == postalAddress.State
                               && deliveryName            == _purchReqLineMap.DeliveryName
                               && deliveryCity            == postalAddress.City
                               && deliveryStreet          == postalAddress.Street
                               && addressRecId            == _purchReqLineMap.DeliveryPostalAddress;

            if (_purchReqLineMap.TableId == tableNum(PurchReqLine))
            {
                setReq = setReq && (requesterRecId  == _purchReqLineMap.Requisitioner);
                setAtt = setAtt && (attention       == _purchReqLineMap.Attention);
            
                if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
                {
                    PurchReqLine purchReqLine = _purchReqLineMap as PurchReqLine;
                    setShipCalendar = setShipCalendar && (shipCalendarId == purchReqLine.ShipCalendarId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipDetermineFieldsToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the purchase line or purchase requisition line record must be considered to determine which fields to update in the <c>PurchTable</c> record.
    /// </summary>
    /// <param name = "_purchReqLineMap">
    /// A purchase line or purchase requisition line record.
    /// </param>
    /// <returns>
    /// true if the purchase line or purchase requisition line record must be considered to determine which fields to update in the <c>PurchTable</c> record; otherwise, false.
    /// </returns>
    protected boolean mustSkipDetermineFieldsToUpdate(PurchReqLineMap _purchReqLineMap)
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>