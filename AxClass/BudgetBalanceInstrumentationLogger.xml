<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetBalanceInstrumentationLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Logger utility class utilized by the budget balances to log telemetry.
/// </summary>
internal final class BudgetBalanceInstrumentationLogger extends SysInstrumentationLoggerBase
{
    public const str BudgetBalanceNamespace = 'BudgetBalance';

    private BudgetBalanceInstrumentationProcessActivities processActivities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>namespace</Name>
				<Source><![CDATA[
    protected final str namespace()
    {
        return BudgetBalanceNamespace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instrumentation logger for budget balances with the specified name.
    /// </summary>
    /// <param name = "_loggerName">The name of the logger.</param>
    /// <returns>An instrumentation logger.</returns>
    internal static BudgetBalanceInstrumentationLogger createLogger(str _loggerName)
    {
        return new BudgetBalanceInstrumentationLogger(_loggerName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processActivities</Name>
				<Source><![CDATA[
    internal BudgetBalanceInstrumentationProcessActivities processActivities()
    {
        if (!processActivities)
        {
            processActivities = BudgetBalanceInstrumentationProcessActivities::newFromLogger(this);
        }

        return processActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs an information message.
    /// </summary>
    /// <param name = "_message">The message.</param>
    public final void logInformation(str _message)
    {
        logger.logInformation(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a warning message.
    /// </summary>
    /// <param name = "_message">The message.</param>
    public final void logWarning(str _message)
    {
        logger.logWarning(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs an error message.
    /// </summary>
    /// <param name = "_message">The message.</param>
    public final void logError(str _message)
    {
        logger.logError(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs an exception and a message.
    /// </summary>
    /// <param name = "_exception">The Exception to log.</param>
    /// <param name = "_message">A message to log.</param>
    public final void logException(System.Exception _exception, str _message)
    {
        logger.logException(_exception, _message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityContextWithCustomProperties</Name>
				<Source><![CDATA[
    internal final SysInstrumentationActivityContext activityContextWithCustomProperties(SysInstrumentationActivity _activity, SysInstrumentationExceptionContext _exceptionContext = null)
    {
        return logger.activityContextWithCustomProperties(_activity, _exceptionContext);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>