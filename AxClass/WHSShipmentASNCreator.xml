<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipmentASNCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipmentASNCreator</c> class is used to create ASN items for outbound shipments.
/// </summary>
public class WHSShipmentASNCreator
{
    // These workInventTrans records could be related to different load line records,
    // the relatedLoadLine variable is used to avoid duplicates.
    private WHSLoadLine relatedLoadLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>WHSShipmentASNCreator </c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>WHSShipmentASNCreator</c> class.
    /// </returns>
    public static WHSShipmentASNCreator construct()
    {
        return new WHSShipmentASNCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateASNItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates ASN item records for outbound shipments.
    /// </summary>
    /// <param name="_licensePlateId">
    ///    License plate to be used in ASN item creation.
    /// </param>
    /// <param name="_workLine">
    ///    <c>WHSWorkLine</c> record to be used in ASN item creation.
    /// </param>
    /// <param name="_whsModule">
    ///    The <c>WHSModule</c> module used for the ASN item creation.
    /// </param>
    /// <returns>
    ///    Container showing item ID, qty, lowest unit of measure, and unit of measure on load line
    /// </returns>
    public container generateASNItems(
        WHSLicensePlateId   _licensePlateId,
        WHSWorkLine         _workLine,
        WHSModule           _whsModule)
    {
        container generatedASNItems;

        ttsbegin;

        WHSShipmentASNCreatorParameters shipmentASNCreatorParameters = this.initializeShipmentASNItemsParameters(_whsModule, _workLine);
        if (!shipmentASNCreatorParameters)
        {
            throw error(strFmt("@WAX2543", _workLine.LoadId));
        }

        InventDimParm   inventDimParmShipDim;
        InventDim       workLineInventDim = InventDim::find(_workLine.InventDimId);

        if (!WHSWorkLine::isInventDimIdBlank(workLineInventDim.InventDimId))
        {
            //Keep only the inventory dimensions that are required for the shipment.
            inventDimParmShipDim.initDimTransferReceipt(workLineInventDim);
            //License Plate is a parameter of the method and must be joined separately in the query.
            inventDimParmShipDim.LicensePlateFlag = NoYes::No;
        }

        if (this.mustCreateASNItemsBasedOnWorkTransactions(_whsModule, workLineInventDim.InventLocationId))
        {
            generatedASNItems = this.createASNItemsBasedOnWorkTransactions(
                _workLine,
                _licensePlateId,
                shipmentASNCreatorParameters.statusIssueCriteria,
                _whsModule,
                inventDimParmShipDim,
                workLineInventDim,
                shipmentASNCreatorParameters.purchaseLine);
        }
        else
        {
            generatedASNItems = this.createASNItems(
                _workLine,
                _licensePlateId,
                shipmentASNCreatorParameters.statusIssueCriteria,
                _whsModule,
                inventDimParmShipDim,
                workLineInventDim,
                shipmentASNCreatorParameters.purchaseLine);
        }

        ttscommit;

        return generatedASNItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateASNItemsBasedOnWorkTransactions</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustCreateASNItemsBasedOnWorkTransactions(WHSModule _whsModule, InventLocationId _warehouseId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeShipmentASNItemsParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>WHSShipmentASNCreatorParameters</c> class based on module and work line.
    /// </summary>
    /// <param name="_whsModule">
    ///    The <c>WHSModule</c> module used for the ASN item creation.
    /// </param>
    /// <param name="_workLine">
    ///    <c>WHSWorkLine</c> record to be used in ASN item creation.
    /// </param>
    /// <returns>The <c>WHSShipmentASNCreatorParameters</c> object.</returns>
    protected WHSShipmentASNCreatorParameters initializeShipmentASNItemsParameters(
        WHSModule   _whsModule,
        WHSWorkLine _workLine)
    {
        WHSShipmentASNCreatorParameters shipmentASNCreatorParameters = WHSShipmentASNCreatorParameters::construct();

        switch (_whsModule)
        {
            case WHSModule::Transfer:
                shipmentASNCreatorParameters = WHSShipmentASNCreatorParameters::construct();
                shipmentASNCreatorParameters.statusIssueCriteria = StatusIssue::Sold;
                break;

            case WHSModule::Sales:
                // Remember the intercompany purchase order line if there is one.
                WHSLoadLine whsLoadLine = WHSLoadLine::findbyRecId(_workLine.LoadLineRefRecId);
                
                shipmentASNCreatorParameters = WHSShipmentASNCreatorParameters::construct();
                shipmentASNCreatorParameters.purchaseLine = whsLoadLine.salesLine().interCompanyPurchLine();
                shipmentASNCreatorParameters.statusIssueCriteria = StatusIssue::Deducted;
                break;
        }

        return shipmentASNCreatorParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createASNItemsBasedOnWorkTransactions</Name>
				<Source><![CDATA[
    private container createASNItemsBasedOnWorkTransactions(
        WHSWorkLine         _workLine,
        WHSLicensePlateId   _licensePlateId,
        StatusIssue         _statusIssueCriteria,
        WHSModule           _whsModule,
        InventDimParm       _inventDimParmShipDim,
        InventDim           _workLineInventDim,
        PurchLine           _purchLine)
    {
        const boolean DoNotReverseQuantitiesSign = false;

        ItemId      itemId;
        Counter     itemIdCount;
        WHSASNItem  asnItem;

        WMSLocationId finalPutLocation = this.findFinalPutawayLocationId(_workLine);

        void createAsnItem(ItemId _itemId, InventDimId _inventDimId, InventQty _qty, PdsCWQty _pdsCwQty)
        {
            InventDim inventDim = InventDim::find(_inventDimId);
            inventDim.wMSLocationId = finalPutLocation;
            inventDim.LicensePlateId = _licensePlateId;
            inventDim = InventDim::findOrCreate(inventDim);

            UnitOfMeasureSymbol inventUnit = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);

            asnItem = WHSASNItem::findByLPModuleItemLineNum(_licensePlateId, _whsModule, _itemId, _workLine.LoadLineRefRecId, inventDim.InventDimId, true);

            if (asnItem.RecId != 0)
            {
                if (PdsGlobal::pdsIsCWItem(_itemId))
                {
                    asnItem.Qty            += _pdsCwQty;
                    asnItem.CapturedWeight += _qty;
                }
                else
                {
                    asnItem.Qty += _qty;
                }

                asnItem.write();
            }
            else
            {
                asnItem.LicensePlateId  = _licensePlateId;
                asnItem.Module          = _whsModule;
                this.initASNItemFromWorkLine(asnItem, _workLine);
                asnItem.uom             = inventUnit;

                // For intercompany orders we want to populate the purchase order information, so this ASN can be imported in the vendor company.
                this.initASNItemFromPurchLine(asnItem, _purchLine);

                this.initASNItemFromInventTransactionValues(
                    asnItem,
                    inventDim,
                    _itemId,
                    _qty,
                    _pdsCwQty,
                    DoNotReverseQuantitiesSign);

                asnItem.InventDimId     = inventDim.InventDimId;

                if (asnItem.Qty > 0)
                {
                    asnItem.insert();
                }

                if (itemId != _itemId)
                {
                    itemId = _itemId;
                    itemIdCount++;
                }
            }
        }

        if (WHSInventoryTransactionConfigurationProvider::shouldUseWorkInventoryTransactionQuery(_workLine.WorkId))
        {
            WHSWorkInventoryTransactionDescriptor inventoryUpdateDescriptor = WHSWorkInventoryTransactionQuery::newFromWorkId(_workLine.WorkId).registeredReceiptByWorkLine(
                _workLine.LineNum,
                WHSWorkInventoryTransactionQueryParameters::construct());

            WHSWorkInventoryTransactionDescriptorEnumerator enumerator = inventoryUpdateDescriptor.getEnumerator();

            while (enumerator.moveNext())
            {
                WHSWorkInventoryTransactionDescriptorElement inventoryTransactionDescriptorElement = enumerator.current();

                InventDim inventDimFromDescriptor =
                    inventoryTransactionDescriptorElement.parmInventoryDimensionsDescriptor().convertToInventDim(true);

                createAsnItem(
                    inventoryTransactionDescriptorElement.parmItemId(),
                    inventDimFromDescriptor.InventDimId,
                    inventoryTransactionDescriptorElement.parmHandlingQty(),
                    inventoryTransactionDescriptorElement.parmHandlingWeight());
            }
        }
        else
        {
            InventTrans         inventTrans;
            WHSWorkInventTrans  workInventTrans;
            InventTransOrigin   inventTransOrigin;
            
            while select ItemId, InventDimId, Qty, PdsCWQty from inventTrans
                exists join workInventTrans
                    where workInventTrans.WorkId == _workLine.WorkId
                        && workInventTrans.LineNum == _workLine.LineNum
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                        && inventTransOrigin.InventTransId == workInventTrans.InventTransIdTo
            {
                InventQty asnItemQuantity;
                PdsCWQty asnItemCWQuantity;

                [asnItemQuantity, asnItemCWQuantity] = this.calculateASNItemQuantitiesForWorkTransaction(_workLine, inventTrans);

                createAsnItem(
                    inventTrans.ItemId,
                    inventTrans.inventDimId,
                    asnItemQuantity,
                    asnItemCWQuantity);
            }
        }

        return this.generateASNItemInformation(asnItem, itemIdCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateASNItemQuantitiesForWorkTransaction</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal container calculateASNItemQuantitiesForWorkTransaction(WHSWorkLine _workLine, InventTrans _inventTrans)
    {
        return [_inventTrans.Qty, _inventTrans.PdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFinalPutawayLocationId</Name>
				<Source><![CDATA[
    private WMSLocationId findFinalPutawayLocationId(WHSWorkLine _workLine)
    {
        WHSWorkId workId = this.findFinalWorkId(_workLine);

        return WHSWorkTable::findFinalPutawayLocation(workId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFinalWorkId</Name>
				<Source><![CDATA[
    private WHSWorkId findFinalWorkId(WHSWorkLine _workLine)
    {
        WHSWorkTable workTable = WHSWorkTable::find(_workLine.WorkId);

        if (workTable.isOriginForConsolidatedWork())
        {
            WHSWorkId consolidatedWorkId = WHSConsolidatedWorkLine::findLastConsolidatedWorkLineByOriginWorkLine(
                                            WHSConsolidatedWorkLine::findOriginWorkLineWithinWork(_workLine)).WorkId;

            return consolidatedWorkId;
        }

        return workTable.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createASNItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates ASN item records for outbound shipments.
    /// </summary>
    /// <param name = "_workLine">
    /// <c>WHSWorkLine</c> record to be used in ASN item creation.
    /// </param>
    /// <param name = "_licensePlateId">
    /// License plate to be used in ASN item creation.
    /// </param>
    /// <param name = "_statusIssueCriteria">
    /// <c>StatusIssue</c> to be used in ASN item creation.
    /// </param>
    /// <param name = "_whsModule">
    /// The <c>WHSModule</c> module used for the ASN item creation.
    /// </param>
    /// <param name = "_inventDimParmShipDim">
    /// <c>InventDimParm</c> record to be used in ASN item creation.
    /// </param>
    /// <param name = "_workLineInventDim">
    /// <c>InventDim</c> record to be used in ASN item creation.
    /// </param>
    /// <param name = "_purchLine"></param>
    /// <returns>
    /// Container showing item ID, qty, lowest unit of measure, and unit of measure on load line
    /// </returns>
    private container createASNItems(
        WHSWorkLine         _workLine,
        WHSLicensePlateId   _licensePlateId,
        StatusIssue         _statusIssueCriteria,
        WHSModule           _whsModule,
        InventDimParm       _inventDimParmShipDim,
        InventDim           _workLineInventDim,
        PurchLine           _purchLine)
    {
        const boolean ReverseQuantitiesSign = true;

        Counter     itemIdCount;
        WHSASNItem  asnItem;
        
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        WHSWorkInventTrans  workInventTrans;
        InventDim           inventDim;
        ItemId              itemId;

        boolean transIdConditionflight = WHSLoadUOMStructureCreatorTransIdConditionForSortedWorkFlight::instance().isEnabled();

        while select ItemId, InventDimId, Qty, PdsCWQty, InventTransOrigin, StatusIssue from inventTrans
            join RecId, qty from workInventTrans
                where workInventTrans.WorkId    == _workLine.WorkId
                    && workInventTrans.LineNum  == _workLine.LineNum
                    && (!transIdConditionflight || !relatedLoadLine || workInventTrans.InventTransIdParent == relatedLoadLine.InventTransId)
                join RecId, inventTransId from inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                        && inventTransOrigin.InventTransId == workInventTrans.InventTransIdParent
                    #InventDimInnerJoin(inventTrans.inventDimId, inventDim, _workLineInventDim, _inventDimParmShipDim)
                        && inventDim.LicensePlateId == _licensePlateId
        {
            if (!this.validateStatusIssueCriteria(inventTrans.StatusIssue, _statusIssueCriteria))
            {
                continue;
            }

            UnitOfMeasureSymbol inventUnit = WHSCatchWeightHelper::inventHandlingUnitId(inventTrans.ItemId);

            asnItem = WHSASNItem::findByLPModuleItemLineNum(_licensePlateId, _whsModule, inventTrans.ItemId, _workLine.LoadLineRefRecId, inventDim.InventDimId, true);

            boolean getQtyFromWorkTransSum = false;
            InventQty workTransSumQty;
            if (workInventTrans.Qty != - inventTrans.Qty && !PdsGlobal::pdsIsCWItem(inventTrans.ItemId))
            {
                WHSWorkInventTrans workInventTransSum;
                WhsWorkLine workLineSum;

                select sum(Qty) from workInventTransSum 
                    where workInventTransSum.InventTransIdParent == inventTransOrigin.InventTransId
                    join recid from workLineSum
                        where workLineSum.WorkId == workInventTransSum.WorkId
                           && workLineSum.LineNum == workInventTransSum.LineNum
                           && workLineSum.InventDimId == _workLineInventDim.inventDimId
                           && workLineSum.WorkType == _workLine.WorkType
                           && workLineSum.WorkStatus != WHSWorkStatus::Cancelled
                           && workLineSum.WorkStatus != WHSWorkStatus::Combined
                           && workLineSum.WorkStatus != WHSWorkStatus::Skipped;
                
                getQtyFromWorkTransSum = (workInventTransSum.Qty == - inventTrans.Qty);

                if (getQtyFromWorkTransSum)
                {
                    select sum(Qty) from workInventTransSum 
                        where workInventTransSum.InventTransIdParent == inventTransOrigin.InventTransId
                        join recid from workLineSum
                            where workLineSum.WorkId == workInventTransSum.WorkId
                               && workLineSum.LineNum == workInventTransSum.LineNum
                               && workLineSum.InventDimId == _workLineInventDim.inventDimId
                               && workLineSum.WorkType == _workLine.WorkType
                               && workLineSum.WorkStatus != WHSWorkStatus::Cancelled
                               && workLineSum.WorkStatus != WHSWorkStatus::Combined
                               && workLineSum.WorkStatus != WHSWorkStatus::Skipped
                               && workLineSum.LoadLineRefRecId == _workLine.LoadLineRefRecId;
                    
                    workTransSumQty = workInventTransSum.Qty;
                }
            }
            
            if (asnItem.RecId != 0)
            {
                if (PdsGlobal::pdsIsCWItem(inventTrans.ItemId))
                {
                    asnItem.Qty            += -inventTrans.PdsCWQty;
                    asnItem.CapturedWeight += -inventTrans.Qty;
                }
                else
                {
                    if (getQtyFromWorkTransSum)
                    {
                        asnItem.Qty += workTransSumQty;
                    }
                    else 
                    {
                        asnItem.Qty += -inventTrans.Qty;
                    }
                }

                asnItem.write();
            }
            else
            {
                asnItem.LicensePlateId  = _licensePlateId;
                asnItem.Module          = _whsModule;
                this.initASNItemFromWorkLine(asnItem, _workLine);
                asnItem.uom             = inventUnit;
                // For intercompany orders we want to populate the purchase order information, so this ASN can be imported in the vendor company.
                this.initASNItemFromPurchLine(asnItem, _purchLine);
                this.initASNItemFromInventTransInventDim(asnItem, inventDim, inventTrans, ReverseQuantitiesSign);

                if (getQtyFromWorkTransSum)
                {
                    asnItem.Qty = workTransSumQty;
                }

                if (asnItem.Qty > 0)
                {
                    asnItem.insert();
                }

                if (itemId != inventTrans.ItemId)
                {
                    itemId = inventTrans.ItemId;
                    itemIdCount++;
                }
            }
        }

        return this.generateASNItemInformation(asnItem, itemIdCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateASNItemInformation</Name>
				<Source><![CDATA[
    private container generateASNItemInformation(WHSASNItem _asnItem, Counter _itemIdCount)
    {
        container asnItems;

        if (_itemIdCount == 1)
        {
            asnItems = [_asnItem.ItemId, _asnItem.Qty, _asnItem.uom, WHSLoadLine::findbyRecId(_asnItem.LoadLineRefRecId).UOM];
        }
        else
        {
            asnItems = ['', _asnItem.Qty, '', ''];
        }

        return asnItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusIssueCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the status issue value with the status issue criteria.
    /// </summary>
    /// <param name = "_statusIssue">A <c>StatusIssue</c> value to be validated.</param>
    /// <param name = "_statusIssueCriteria">A status issue criteria for comparison.</param>
    /// <returns>true if the values are equal; otherwise, false.</returns>
    protected boolean validateStatusIssueCriteria(StatusIssue _statusIssue, StatusIssue _statusIssueCriteria)
    {
        return _statusIssue == _statusIssueCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initASNItemFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields on the ASN item.
    /// </summary>
    /// <param name="_asnItem">
    /// The <c>WHSASNItem</c> table record the initialization is based on.
    /// </param>
    /// <param name="_workLine">
    /// The <c>WHSWorkLine</c> record to be used for initialization.
    /// </param>
    private void initASNItemFromWorkLine(WHSASNItem _asnItem, WHSWorkLine _workLine)
    {
        _asnItem.LoadId             = _workLine.LoadId;
        _asnItem.ShipmentId         = _workLine.ShipmentId;
        _asnItem.LoadLineRefRecId   = _workLine.LoadLineRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initASNItemFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields on the ASN item.
    /// </summary>
    /// <param name="_asnItem">
    /// The <c>WHSASNItem</c> table record the initialization is based on.
    /// </param>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> record to be used for initialization.
    /// </param>
    private void initASNItemFromPurchLine(WHSASNItem _asnItem, PurchLine _purchLine)
    {
        if (_purchLine)
        {
            _asnItem.PurchId         = _purchLine.PurchId;
            _asnItem.InventTransId   = _purchLine.InventTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initASNItemFromInventTransInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields on the ASN item.
    /// </summary>
    /// <param name="_asnItem">
    /// The <c>WHSASNItem</c> table record the initialization is based on.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record to be used for initialization.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record to be used for initialization.
    /// </param>
    /// <param name="_reverseQuantitiesSign">
    /// Determines if the quantities from the <c>InventTrans</c> record will have sign reversed.
    /// </param>
    private void initASNItemFromInventTransInventDim(
        WHSASNItem  _asnItem,
        InventDim   _inventDim,
        InventTrans _inventTrans,
        boolean     _reverseQuantitiesSign)
    {
        this.initASNItemFromInventTransactionValues(
            _asnItem,
            _inventDim,
            _inventTrans.ItemId,
            _inventTrans.Qty,
            _inventTrans.PdsCWQty,
            _reverseQuantitiesSign);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initASNItemFromInventTransactionValues</Name>
				<Source><![CDATA[
    private void initASNItemFromInventTransactionValues(
        WHSASNItem  _asnItem,
        InventDim   _inventDim,
        ItemId      _itemId,
        InventQty   _qty,
        PdsCWQty    _pdsCwQty,
        boolean     _reverseQuantitiesSign)
    {
        _asnItem.ItemId         = _itemId;
        _asnItem.Description    = InventTable::find(_itemId).itemName(_inventDim);

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            _asnItem.Qty            = _reverseQuantitiesSign ? -_pdsCwQty : _pdsCwQty;
            _asnItem.CapturedWeight = _reverseQuantitiesSign ? -_qty : _qty;
        }
        else
        {
            _asnItem.Qty = _reverseQuantitiesSign ? -_qty : _qty;
        }

        _asnItem.InventDimId    = _inventDim.InventDimId;

        if (_inventDim.inventBatchId)
        {
            _asnItem.BatchExpirationDate = InventBatch::find(_inventDim.inventBatchId, _itemId).ExpDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateASN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates ASN for a shipment.
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment ID for which ASN is generated.
    /// </param>
    public void generateASN(WHSShipmentId _shipmentId)
    {
        WHSWorkLine         workLine;
        WHSWorkTable        workTable;
        WHSUOMStructure     uomStructure;
        WHSModule           whsModule = WHSModule::Sales;
        RefRecId            prevLoadLineRefRecId;
        WHSWorkId           prevWorkLineWorkId;
        WHSLoadLine         loadLine;
        WHSLicensePlateId   targetLicensePlateId;
        WHSWorkId           createdWorkId;

        while select workLine
        order by workLine.WorkId, workLine.LoadLineRefRecId
            where workLine.ShipmentId           == _shipmentId
                && workLine.LoadLineRefRecId    != 0
            join WorkId, TargetLicensePlateId, WorkStatus from workTable
                where workTable.WorkId      == workLine.WorkId
                    && workTable.WorkStatus != WHSWorkStatus::Cancelled
                    && workTable.WorkStatus != WHSWorkStatus::Combined
                    && workLine.WorkStatus  != WHSWorkStatus::Cancelled
                join UOM from loadLine
                    where loadLine.RecId == workLine.LoadLineRefRecId
        {
            // If workId changed, we need to check if the work was consolidated and
            // if it was, find the target lp from the last consolidated work
            if (prevWorkLineWorkId != workTable.WorkId)
            {
                if (workTable.isOriginForConsolidatedWork())
                {
                    WHSWorkTable consolidatedWork = WHSWorkTable::find(WHSConsolidatedWorkLine::findLastConsolidatedWorkLineByOriginWorkLine(
                                                            WHSConsolidatedWorkLine::findOriginWorkLineWithinWork(workLine)).workId);

                    targetLicensePlateId    = consolidatedWork.TargetLicensePlateId;
                    createdWorkId           = consolidatedWork.WorkId;
                }
                else
                {
                    targetLicensePlateId    = workTable.TargetLicensePlateId;
                    createdWorkId           = workTable.WorkId;
                }
            }

            if (uomStructure.LicensePlateId != targetLicensePlateId)
            {
                var outboundUOMStructureCreator = WHSOutboundUOMStructureCreator::construct();
                outboundUOMStructureCreator.parmLicensePlateId(targetLicensePlateId);
                outboundUOMStructureCreator.parmWorkLine(workLine);
                outboundUOMStructureCreator.parmCreatedWorkId(createdWorkId);
                outboundUOMStructureCreator.parmWHSModule(whsModule);
                outboundUOMStructureCreator.parmUOMPack(loadLine.UOM);

                uomStructure = outboundUOMStructureCreator.createUOMStructure();
            }
            else
            {
                UnitOfMeasureSymbol inventUnit = WHSCatchWeightHelper::inventHandlingUnitId(workLine.ItemId);

                // Update existing UOMStructure record with data from the current work line.
                uomStructure.Qty        += workLine.InventQtyWork;
                uomStructure.ItemId     = (uomStructure.ItemId  != workLine.ItemId) ? '' : uomStructure.ItemId;
                uomStructure.uomPack    = (uomStructure.uomPack != loadLine.UOM)    ? '' : uomStructure.uomPack;
                uomStructure.uomItem    = (uomStructure.uomItem != inventUnit)      ? '' : uomStructure.uomItem;
                uomStructure.write();
            }

            // The update or creation of ASNItems must occur only once per WHSLoadLine or per WHSWorkTable (header)
            // in order to avoid adding the quantity of the InventTrans records twice for the same line.
            if (targetLicensePlateId
                && (workLine.LoadLineRefRecId   != prevLoadLineRefRecId
                ||  workLine.WorkId             != prevWorkLineWorkId))
            {
                prevLoadLineRefRecId = workLine.LoadLineRefRecId;
                prevWorkLineWorkId   = workLine.WorkId;
                this.generateASNItems(targetLicensePlateId, workLine, whsModule);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRelatedLoadLine</Name>
				<Source><![CDATA[
    internal WHSLoadLine parmRelatedLoadLine(WHSLoadLine _relatedLoadLine)
    {
        relatedLoadLine = _relatedLoadLine;
        return relatedLoadLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>