<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMCopyToProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class contains functionality to copy data to <c>ProdBOM</c> records, via the <c>copyTo</c> method.
/// </summary>
public class BomCopyToProd extends BOMCopyTo
{
    ProdId      toProdId;

    ProdTable   prodTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLineOffset</Name>
				<Source><![CDATA[
    LineNum calcLineOffset()
    {
        return ProdBOM::lastLineNum(toProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySteps</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copies the steps information from the <c>BOM</c> table definition to the <c>ProdBOM</c> instance used in production.
    /// </summary>
    /// <param name="_copyFrom">
    ///     A map referencing the <c>BOM</c> record to copy the information from.
    /// </param>
    /// <param name="_copyTo">
    ///     A map referencing the <c>ProdBOM</c> record to copy the information to.
    /// </param>
    /// <param name="_tableName">
    ///     The name of the table that contains the step records; optional, defaults to the AOT name of the <c>PmfProdBOMStep</c> table.
    /// </param>
    public void copySteps(BOMMap _copyFrom, BOMMap _copyTo, str _tableName = tablestr(PmfProdBOMStep))
    {
        if (#PMFEnabled)
        {
            super(_copyFrom, _copyTo, _tableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTo</Name>
				<Source><![CDATA[
    public void copyTo(
        BOMCopyFrom   _copyFrom,
        BOMSearchBase _search,
        BOMMap        _toProdBOMMap,
        boolean       _copyRef = false)
    {
        BOMMap                          fromBomMap      = _search.bom();
        InventTable                     inventTable     = InventTable::find(fromBomMap.ItemId);
        InventDim                       fromInventDim   = fromBomMap.inventDim();
        InventDim                       inventDim;
        ProdBOM                         toProdBOM = _toProdBOMMap;

        BOM         pmfBOM  = fromBomMap.TableId == tableNum(BOM)
                            ? fromBomMap
                            : null;

        toProdBOM.initFromProdTable(prodTable);
        _copyFrom.initToProdBom(toProdBOM, _copyRef);
        toProdBOM.ProdId = toProdId;

        // Copy only product dimensions
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(fromBomMap.ItemId, fromInventDim, inventDim);

        // If BOM line is mark for WrkCtrConsumption
        inventDim = this.updateInventDimFromRoute(inventDim, toProdBOM, inventTable);

        this.updateInventoryDimensionBasedOnBOMMapFromInventDim(inventDim, fromInventDim);
        this.updateInventoryDimensionBasedOnBOMMapToInventDim(inventDim, toProdBOM.prodTable().inventDim(), inventTable);
        this.updateInventoryDimensionProfileId(inventDim, fromInventDim, fromBomMap.ItemId);

        toProdBOM.setInventDimIdFromInventDim(inventDim);

        toProdBOM.DefaultDimension  = toProdBOM.mergeDimension(prodTable.DefaultDimension, inventTable.DefaultDimension);

        if (prodTable.isProjMethodConsumed())
        {
            ProjInventJournalTransMapForm::construct(toProdBOM).initProdBOM();
        }

        super(_copyFrom,_search,toProdBOM);

        this.copySteps(fromBomMap, toProdBOM, tableStr(PmfProdBOMStep));

        if (toProdBOM.Formula == BOMFormula::Formula5)
        {
            toProdBOM.selectForUpdate(true);
            toProdBOM.PmfQtyWithoutYield = toProdBOM.pmfStepQty(prodTable.QtySched);
            toProdBOM.BomQty = toProdBOM.PmfQtyWithoutYield;
            toProdBOM.PdsCWQty = toProdBOM.pmfStepCWQty(prodTable.QtySched);
            toProdBOM.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryDimensionBasedOnBOMMapFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory dimension based on <c>InventDim</c> record of BOMMap from.
    /// </summary>
    /// <param name = "_inventDimTo">The <c>InventDim</c> record to which to copy.</param>
    /// <param name = "_inventDimFrom">The <c>InventDim</c> record from which to copy.</param>
    protected void updateInventoryDimensionBasedOnBOMMapFromInventDim(
        InventDim   _inventDimTo,
        InventDim   _inventDimBOMMapFrom)
    {
        // Handle inventLocationId separately
        if (!_inventDimTo.InventLocationId && _inventDimBOMMapFrom.InventLocationId)
        {
            _inventDimTo.InventLocationId = _inventDimBOMMapFrom.InventLocationId;
        }

        // Get the site as well
        if (!_inventDimTo.InventLocationId)
        {
            _inventDimTo.InventSiteId = _inventDimBOMMapFrom.InventSiteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryDimensionBasedOnBOMMapToInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory dimension based on <c>InventDim</c> record of BOMMap to.
    /// </summary>
    /// <param name = "_inventDimTo">The <c>InventDim</c> record to which to copy.</param>
    /// <param name = "_inventDimFrom">The <c>InventDim</c> record from which to copy.</param>
    /// <param name = "_inventTable">The <c>InventTable</c> record.</param>    
    protected void updateInventoryDimensionBasedOnBOMMapToInventDim(
        InventDim   _inventDimTo,
        InventDim   _inventDimBOMMapTo,
        InventTable _inventTable)
    {
        // If this is a site less BOM then take site from prodTable
        boolean isSiteLessBOM;
        if (!_inventDimTo.InventSiteId)
        {
            isSiteLessBOM = true;
            _inventDimTo.InventSiteId = _inventDimBOMMapTo.InventSiteId;
        }

        // Default warehouse
        if (!_inventDimTo.InventLocationId)
        {
            _inventDimTo.InventLocationId = _inventTable.inventLocationId('', InventDim::findOrCreate(_inventDimTo).InventDimId, _inventDimTo.InventSiteId);
        }

        // If no warehouse and the item has warehouse as a coverage dimension, then use the one from the production order
        if (!_inventDimTo.InventLocationId
            && isSiteLessBOM
            && EcoResProductDimGroupSetup::newInventTable(_inventTable).getFieldSetup(fieldNum(InventDim, InventLocationId)).isCoveragePlanByDimensionEnabled())
        {
            _inventDimTo.InventLocationId = _inventDimBOMMapTo.InventLocationId;
        }

        if (_inventDimTo.InventLocationId)
        {
            _inventDimTo.initFromInventLocation(_inventDimTo.inventLocation());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryDimensionProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory dimension profile id.
    /// </summary>
    /// <param name = "_inventDimTo">The <c>InventDim</c> record to which to copy.</param>
    /// <param name = "_inventDimFrom">The <c>InventDim</c> record from which to copy.</param>
    /// <param name = "_itemId">The item number.</param>
    protected void updateInventoryDimensionProfileId(
        InventDim   _inventDimTo,
        InventDim   _inventDimFrom,
        ItemId      _itemId)
    {
        // <GEERU>
        // Default inventory profile
        if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(_itemId, fieldNum(InventDim, InventProfileId_RU)))
        {
            if (!_inventDimTo.InventProfileId_RU && _inventDimFrom.InventProfileId_RU)
            {
                _inventDimTo.InventProfileId_RU = _inventDimFrom.InventProfileId_RU;
            }

            if (!_inventDimTo.InventProfileId_RU)
            {
                _inventDimTo.InventProfileId_RU = BOMParameters::find().InventProfileId_RU;
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBOM</Name>
				<Source><![CDATA[
    BOMMap defaultBOM()
    {
        ProdBOM bom;

        return bom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    void delete()
    {
        ttsbegin;

        ProdBOMSearch search = ProdBOMSearch::newProdId(toProdId,true);

        while (search.next())
        {
            if (! search.prodBOM().validateDelete())
            {
                throw error("@SYS18722");
            }

            this.deleteProdBOM(search);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the production bill of materials record.
    /// </summary>
    /// <param name = "_search">An instance of the <c>ProdBOMSearch</c> class.</param>
    [Replaceable]
    protected void deleteProdBOM(ProdBOMSearch _search)
    {
        _search.prodBOM().delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        ProdId          _toId,
        OprNum          _oprOffset = 0
        )
    {
        toProdId    = _toId;

        prodTable   = ProdTable::find(toProdId);

        super(_oprOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy compensation principles from BOM.
    /// </summary>
    /// <param name="_fromBOMId">
    /// This parameter is not needed for the <c>BOMCopyToProd</c> implementation of the base class.
    /// </param>
    /// <remarks>
    /// All <c>ProdBOM</c> records have been created at this point.
    /// </remarks>
    public void postCopy(BOMId _fromBOMId = '')
    {
        if (#PDSPotencyEnabled)
        {
            BOMCopyToProd::copyProdCompensationPrinciples(toProdId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimFromRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates warehouse and location in the passed in InventDim based on route information.
    /// </summary>
    /// <param name="_inventDim">
    /// <c>InventDim</c> which is to be updated with the found warehouse and/or location
    /// </param>
    /// <param name="_prodBOM">
    /// Production BOM for which location and warehouse is to be found
    /// </param>
    /// <param name="_inventTable">
    /// <c>InventTable</c> record containing the item in the <c>ProdBOM</c> line; optional
    /// </param>
    /// <returns>
    /// <c>InventDim</c> updated with found warehouse and location
    /// </returns>
    public InventDim updateInventDimFromRoute(InventDim _inventDim, ProdBOM _prodBOM, InventTable _inventTable = null)
    {
        InventDim prodTableInventDim = prodTable.inventDim();
        TransDate bomDate = prodTable.bomDate ? prodTable.bomDate : (prodTable.DlvDate ? prodTable.DlvDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        InventLocationId inputInventLocationId = _prodBOM.BOMMap::routeInputInventLocationId(prodTable.ItemId,
                                                       prodTable.RouteId,
                                                       prodTableInventDim.ConfigId,
                                                       prodTableInventDim.InventSiteId,
                                                       _prodBOM.OprNum,
                                                       _prodBOM.WrkCtrConsumption,
                                                       bomDate);

        if (inputInventLocationId)
        {
            _inventDim.InventLocationId = inputInventLocationId;

            if (prmisDefault(_inventTable))
            {
                _inventTable = InventTable::find(_prodBOM.ItemId);
            }

            if (!(InventLocation::find(inputInventLocationId).WHSEnabled) ||
                !_inventTable.whsItemIsWHSControlled())
            {
                WMSLocationId    inputWMSLocationId =  _prodBOM.BOMMap::routeInputWMSLocationId(prodTable.ItemId,
                                                       prodTable.RouteId,
                                                       prodTableInventDim.ConfigId,
                                                       prodTableInventDim.InventSiteId,
                                                       _prodBOM.OprNum,
                                                       _prodBOM.WrkCtrConsumption,
                                                       bomDate);

                if (inputWMSLocationId)
                {
                   _inventDim.wmsLocationId = inputWMSLocationId;
                }
            }
        }

        return _inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProdCompensationPrinciples</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates compensation principles for any compensating ingredients on a production order.
    /// </summary>
    /// <param name="_prodId">
    /// Id of PO to process.
    /// </param>
    /// <remarks>
    /// This method must be called after all <c>ProdBOM</c> records have been created to ensure that the
    /// referenced active ingredients exist in the production order.
    /// </remarks>
    public static void copyProdCompensationPrinciples(ProdId _prodId)
    {
        ProdBOM             prodBOM;

        while select prodBOM
            where prodBOM.ProdId             == _prodId
                && prodBOM.pdsIngredientType == PDSIngredientTypeEnum::Compensating
        {
            prodBOM.pdsCopyPrinciple();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMRouteCopy</Name>
				<Source><![CDATA[
    static BOMCopyToProd newBOMRouteCopy(
        BOMRouteCopyJob bomRouteCopy,
        OprNum          oprOffset
        )
    {
        BOMCopyToProd   bomCopyToProd;

        bomCopyToProd = new BOMCopyToProd(
            bomRouteCopy.parmToProdId(),
            oprOffset);

        return bomCopyToProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdSpilt</Name>
				<Source><![CDATA[
    static BOMCopyToProd newProdSpilt(ProdId  prodId)
    {
        BOMCopyToProd   bomCopyToProd;

        bomCopyToProd = new BOMCopyToProd(prodId);

        return bomCopyToProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdTableType</Name>
				<Source><![CDATA[
    static BOMCopyToProd newProdTableType(ProdTable prodTable)
    {
        BOMCopyToProd    copyTo;

        copyTo = new BOMCopyToProd(prodTable.ProdId);
        copyTo.parmCalcLineOffset(false);

        return copyTo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>