<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPoFirmByQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqTransPoFirmByQuery</c> class allows firming all planned orders matching a specific set of criteria.
/// /// </summary>
internal class ReqTransPoFirmByQuery extends ReqTransPoMarkFirm
{
    private QueryRun reqPoQueryRun;
    private ReqPlanId planId;
    private Days firmTimefenceDaysForward;
    private Days firmTimefenceDaysBackward;
    private boolean usedFirmTimefenceDays;

    private DialogField fieldPlanId;
    private DialogField fieldFirmTimefenceDaysForward;
    private DialogField fieldFirmTimefenceDaysBackward;

    private ReqInstrumentationLogger logger;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        planId,
        firmTimefenceDaysForward,
        firmTimefenceDaysBackward
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCMPlanning:ReqTransPoFirmByQuery";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        #SysOperation

        dialog = super();

        dialog.addGroup("@SYS14433");

        fieldPlanId = dialog.addField(extendedTypeStr(ReqPlanId));
        fieldPlanId.value(planId);

        fieldFirmTimefenceDaysForward = dialog.addField(extendedTypeStr(Days), "@SCMPlanning:ReqTransPoFirmByQueryForwardTimefence");
        fieldFirmTimefenceDaysForward.value(firmTimefenceDaysForward);
        fieldFirmTimefenceDaysBackward = dialog.addField(extendedTypeStr(Days), "@SCMPlanning:ReqTransPoFirmByQueryBackwardTimefence");
        fieldFirmTimefenceDaysBackward.value(firmTimefenceDaysBackward);

        dialog.addGroup("@SYS866");
        dialog.addText("@SCMPlanning:ReqTransPoFirmByQueryWarning", 440);

        FormBuildButtonGroupControl buttonGroup = dialog.dialogForm().buildControl(#QueryToolBarButtonGroup);
        FormBuildButtonControl previewButton = buttonGroup.addControl(FormControlType::Button, 'ReqTransPoFirmByQueryPreview');
        previewButton.text("@SCMPlanning:ReqTransPoFirmByQueryPreview");
        previewButton.registerOverrideMethod(methodStr(FormButtonControl, clicked), methodStr(ReqTransPoFirmByQuery, previewOrders), this);
        
        FormBuildGroupControl queriesGroupControl = dialog.dialogForm().control(#QueriesGroupControlName);
        FormBuildStringControl orderDateControl = this.getChildStringControl(queriesGroupControl, "@SYS27900");
        if (orderDateControl)
        {
            orderDateControl.helpText("@SCMPlanning:PlannedOrderFirmingOrderDateHelpText");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildStringControl</Name>
				<Source><![CDATA[
    private FormBuildStringControl getChildStringControl(FormBuildControl _parentControl, str _childLabel)
    {
        FormBuildStringControl foundControl;

        for (int i = 1; i <= _parentControl.controlCount(); i++)
        {
            FormBuildControl childControl = _parentControl.controlNum(i);
            if (childControl is FormBuildGroupControl)
            {
                FormBuildGroupControl childGroup = childControl;
                foundControl = this.getChildStringControl(childGroup, _childLabel);
                if (foundControl)
                {
                    break;
                }
            }
            else if (childControl is FormBuildStringControl)
            {
                FormBuildStringControl childStringControl = childControl;
                if (childStringControl.label() == _childLabel)
                {
                    foundControl = childStringControl;
                    break;
                }
            }
        }

        return foundControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        this.getQueryFiltersFromDialog();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryFiltersFromDialog</Name>
				<Source><![CDATA[
    private void getQueryFiltersFromDialog()
    {
        planId = fieldPlanId.value();
        firmTimefenceDaysForward = fieldFirmTimefenceDaysForward.value();
        firmTimefenceDaysBackward = fieldFirmTimefenceDaysBackward.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        planId = ReqPlanSched::defaultDynamicId();
        reqPoQueryRun = new QueryRun(queryStr(ReqTransPoFirm));
        firmTimefenceDaysForward = ReqPlanSched::find(planId).TimeFenceAuthorization;
        firmTimefenceDaysBackward = ReqPlanSched::find(planId).TimeFenceAuthorization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, ReqPoQueryRun.pack()] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
        container packedQuery;
        boolean ret = true;

        if (version == #CurrentVersion)
        {
            container baseClassContainer;
            [version, #currentList, packedQuery, baseClassContainer] = _packedClass;
            ret = super(baseClassContainer);
        }

        if (!packedQuery)
        {
            return false;
        }

        reqPoQueryRun = new QueryRun(packedQuery);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        if (!planId)
        {
            ok = checkFailed("@SCMPlanning:ReqTransPoFirmByQueryPlanMustBeSpecified");
        }

        if (ok && !ReqPlan::exist(planId))
        {
            ok = checkFailed(strFmt("@SCMPlanning:ReqTransPoFirmByQueryPlanDoesNotExist", planId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return reqPoQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        super();
        reqPoQueryRun = new QueryRun(queryStr(ReqTransPoFirm));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    private void prepareQuery()
    {
        if (!this.validate())
        {
            throw error("@SYS18447");
        }
        
        ReqPlanVersion activeVersion = ReqPlanVersion::findActiveReqPlanId(planId, curExt());

        Query query = reqPoQueryRun.query();
        
        QueryBuildRange reqDateOrderRange = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(ReqPO)), fieldNum(ReqPO, ReqDateOrder));
        if (!reqDateOrderRange.value())
        {
            reqDateOrderRange.value(SysQueryRangeUtil::dayRange(-firmTimefenceDaysBackward, firmTimefenceDaysForward));
            usedFirmTimefenceDays = true;
        }      
        else
        {
            usedFirmTimefenceDays = false;
        }

        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(ReqPO)), fieldNum(ReqPO, PlanVersion)).value(queryValue(activeVersion.RecId));
        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(ReqTrans)), fieldNum(ReqTrans, PlanVersion)).value(queryValue(activeVersion.RecId));

        query.forceNestedLoop(true);

        reqPoQueryRun.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logAndCountOrders</Name>
				<Source><![CDATA[
    private int logAndCountOrders()
    {
        setPrefix("@SCMPlanning:ReqTransPoFirmByQueryPreviewHeader");

        int numberOfPlannedOrders = 0;

        while (reqPoQueryRun.next())
        {
            numberOfPlannedOrders++;

            ReqTrans reqTrans = reqPoQueryRun.get(tableNum(ReqTrans));
            ReqPo reqPO = reqPoQueryRun.get(tableNum(ReqPo));

            info(strFmt("@SCMPlanning:ReqTransPoFirmByQueryPreviewOrderFormat", reqPO.RefId, reqTrans.ItemId, reqTrans.Qty, reqPO.ReqDateOrder, reqTrans.RefType));
        }

        return numberOfPlannedOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewOrders</Name>
				<Source><![CDATA[
    internal void previewOrders(FormButtonControl _button)
    {
        using (var activityContext = logger.firmByQueryActivities().previewOrders())
        {
            if (_button)
            {
                this.getQueryFiltersFromDialog();
            }
            this.prepareQuery();

            int numberOfPlannedOrders = this.logAndCountOrders();

            info(strFmt("@SCMPlanning:ReqTransPoFirmByQueryNumberOfPreviewOrders", numberOfPlannedOrders));
            
            if (usedFirmTimefenceDays)
            {                
                SysQuery::findOrCreateRange(reqPoQueryRun.query().dataSourceTable(tableNum(ReqPO)), fieldNum(ReqPO, ReqDateOrder)).value('');
            }            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMarkedRecordsMap</Name>
				<Source><![CDATA[
    private void buildMarkedRecordsMap()
    {
        using (var activityContext = logger.firmByQueryActivities().buildMarkedRecordsMap())
        {
            this.prepareQuery();

            Map markedRecordsMap = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);

            while (reqPoQueryRun.next())
            {
                ReqTrans reqTrans = reqPoQueryRun.get(tableNum(ReqTrans));

                markedRecordsMap.insert(reqTrans.RecId, reqTrans);
            }

            this.parmConReqTransMark(markedRecordsMap.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        setPrefix(ReqTransPoFirmByQuery::description());

        this.buildMarkedRecordsMap();
            
        mapReqTransMark = null;  //resetting map, so that it can be repopulated
        this.mapReqTransMark();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqTransPoFirmByQuery construct()
    {
        return new ReqTransPoFirmByQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        logger = ReqInstrumentationLogger::createLogger(classStr(ReqTransPoMarkFirm));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqParameters::checkPlanningProcessesAreEnabled();

        ReqTransPoFirmByQuery reqTransPoFirmByQuery = ReqTransPoFirmByQuery::construct();

        if (reqTransPoFirmByQuery.prompt())
        {
            reqTransPoFirmByQuery.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areMarkedElementsKnownUpfront</Name>
				<Source><![CDATA[
    protected boolean areMarkedElementsKnownUpfront()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanId</Name>
				<Source><![CDATA[
    internal ReqPlanId parmPlanId(ReqPlanId _planId = planId)
    {
        planId = _planId;
        return planId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirmTimefenceDaysForward</Name>
				<Source><![CDATA[
    internal Days parmFirmTimefenceDaysForward(Days _firmTimefenceDaysForward = firmTimefenceDaysForward)
    {
        firmTimefenceDaysForward = _firmTimefenceDaysForward;
        return firmTimefenceDaysForward;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirmTimefenceDaysBackward</Name>
				<Source><![CDATA[
    internal Days parmFirmTimefenceDaysBackward(Days _firmTimefenceDaysBackward = firmTimefenceDaysBackward)
    {
        firmTimefenceDaysBackward = _firmTimefenceDaysBackward;
        return firmTimefenceDaysBackward;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>