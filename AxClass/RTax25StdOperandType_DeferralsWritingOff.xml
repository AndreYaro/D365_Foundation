<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25StdOperandType_DeferralsWritingOff</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25StdOperandType_DeferralsWritingOff extends RTax25StdOperandType
{
    FormIntControl      controlPeriodLag;
    FormComboBoxControl controlPeriodType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupFrom</Name>
				<Source><![CDATA[
        public void lookupFrom()
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(RDeferralsGroup), controlRefIdFrom);
        Query                query          = new Query();
        QueryBuildDataSource qbds;

        sysTableLookup.addLookupfield(fieldNum(RDeferralsGroup, DeferralsGroupId), true);
        sysTableLookup.addLookupfield(fieldNum(RDeferralsGroup, Name));
        sysTableLookup.addLookupfield(fieldNum(RDeferralsGroup, DeferralsBookId));

        qbds = query.addDataSource(tableNum(RDeferralsGroup));

        qbds.addRange(fieldNum(RDeferralsGroup, DeferralsGroupId)).value(RTax25StdSeq::find(expressionLine.SeqNum).ChannelId);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operand</Name>
				<Source><![CDATA[
        public AmountMST operand()
    {
        AmountMST                     ret;
        RDeferralsTableMethodIterator iterator, iteratorLast;
        RDeferralsBook                deferralsBook;
        RDeferralsTable               deferralsTable;
        RDeferralsGroup               rDefferalsGroup;
        TransDate                     startDate;
        RDeferralsSum                 normalizedAmount;
        RDeferralsWritingOffFactor    writingOffFactor;

        rDefferalsGroup  = RDeferralsGroup::find((expressionLine.RefIdFrom));
        if (rDefferalsGroup.RecId)
        {
            if (! RTax25StdChannel_DeferralFactor::notExistWritingOffTrans(rDefferalsGroup.DeferralsGroupId,
                                                                           expressionLine.rTax25ProfitTable,
                                                                           dateFrom,
                                                                           dateTo))
            {
                return checkFailed(strFmt("@GLS107274", RTax25ProfitTable::find(expressionLine.rTax25ProfitTable).ProfitId, rDefferalsGroup.DeferralsGroupId, dateFrom));
            }

            delete_from writingOffFactor
                where writingOffFactor.StartDate         == dateFrom
                   && writingOffFactor.rTax25ProfitTable == expressionLine.rTax25ProfitTable
                   && writingOffFactor.DeferralsGroupId  == rDefferalsGroup.DeferralsGroupId;

            while select deferralsBook
                where deferralsBook.DeferralsGroupId   == rDefferalsGroup.DeferralsGroupId
                   && deferralsBook.StartDeferralsDate <= dateTo
                   && deferralsBook.EndDeferralsDate   >= dateFrom
                   && !deferralsBook.Depreciate
            exists join deferralsTable
                where deferralsTable.DeferralsId       == deferralsBook.DeferralsId
                   && deferralsTable.rTax25ProfitTable == expressionLine.rTax25ProfitTable
            {
                iterator = RDeferralsTableMethodIterator::construct(deferralsBook.DeferralsProfile);
                iterator.initFromDeferralsBook(deferralsBook, dateTo);

                iterator.parmStartPeriodDate(dateFrom > deferralsBook.StartDeferralsDate ?
                                             dateFrom : deferralsBook.StartDeferralsDate);
                iterator.parmEndPeriodDate(dateTo < deferralsBook.EndDeferralsDate ?
                                           dateTo : deferralsBook.EndDeferralsDate);

                startDate = deferralsBook.LastDeferralsDate ?
                            deferralsBook.LastDeferralsDate + 1 :
                            deferralsBook.StartDeferralsDate;
                iteratorLast = RDeferralsTableMethodIterator::construct(deferralsBook.DeferralsProfile);
                iteratorLast.initFromDeferralsBook(deferralsBook, dateFrom - 1);

                iteratorLast.parmStartPeriodDate(startDate);
                iteratorLast.parmEndPeriodDate(dateFrom - 1);

                normalizedAmount = 0;
                while (iteratorLast.next())
                {
                    normalizedAmount += RDeferralsProposal::roundAmount(deferralsBook,
                                                                        iteratorLast.getIntervalSum());
                }

                iterator.parmNetBookValue(iterator.parmNetBookValue() - normalizedAmount);

                while (iterator.next())
                {
                    ret += RDeferralsProposal::roundAmount(deferralsBook,
                                                           iterator.getIntervalSum());
                }
            }
        }
        else
        {
            checkFailed(strFmt("@GLS104241", rDefferalsGroup.DeferralsGroupId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
        public FormRun parmFormRun(FormRun _formRun)
    {
        Object  tmpFormRun;
        anytype anyNull = null;

        if (formRun != _formRun)
        {
            tmpFormRun = _formRun;

            controlPeriodLag  = formHasMethod(_formRun, identifierStr(getControlPeriodLag))  ?
                                tmpFormRun.getControlPeriodLag()                             :
                                anyNull;
            controlPeriodType = formHasMethod(_formRun, identifierStr(getControlPeriodType)) ?
                                tmpFormRun.getControlPeriodType()                             :
                                anyNull;
        }

        return super(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
        public void updateDesign()
    {
        boolean enabled = RTax25StdSeq::find(expressionLine.SeqNum).ChannelType != RTax25StdChannelType::DeferralsFactor;
        ;

        controlRefIdFrom.enabled(enabled);
        controlRefIdFrom.lookupButton(enabled ? FormLookupButton::Always : FormLookupButton::Never);
        controlRefIdTo.enabled(false);

        controlPeriodType.enabled(false);
        controlPeriodLag.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date which corresponds to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        ReportingDate_RU     correctedPeriodDate;
        RDeferralsBook       deferralsBook;
        RDeferralsTable      deferralsTable;
        RDeferralsGroup      rDefferalsGroup = RDeferralsGroup::find((expressionLine.RefIdFrom));

        RDeferralsTransCorrectiveView   rDeferralsTrans;

        select firstonly ReportingDate from rDeferralsTrans
            order by ReportingDate asc
            where rDeferralsTrans.AccountingDate    >= _fromDateCalc &&
                    rDeferralsTrans.AccountingDate  <= _toDateCalc   &&
                    rDeferralsTrans.ReportingDate   <= _toDateCorr
        exists join deferralsBook
            where deferralsBook.DeferralsGroupId    == rDefferalsGroup.DeferralsGroupId
                && deferralsBook.DeferralsId        == rDeferralsTrans.DeferralsId
                && deferralsBook.DeferralsBookId    == rDeferralsTrans.DeferralsBookId
                && deferralsBook.StartDeferralsDate <= _toDateCorr
                && !deferralsBook.Depreciate
        exists join deferralsTable
            where deferralsTable.DeferralsId       == deferralsBook.DeferralsId
                && deferralsTable.rTax25ProfitTable == expressionLine.rTax25ProfitTable;

        if (rDeferralsTrans.ReportingDate)
        {
            correctedPeriodDate = dateEndQtr(rDeferralsTrans.ReportingDate);
        }

        return correctedPeriodDate;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>