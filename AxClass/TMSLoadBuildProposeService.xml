<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildProposeService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>TMSLoadBuildService</c> class handles the load building through Sys Operation Framework.
/// </summary>
class TMSLoadBuildProposeService
{
    private TMSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateProposedLoadContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the proposed load content data for particular Load building session.
    /// </summary>
    /// <param name="_packedSupplyDemandQueryRun">
    /// The packaged sypply demand query run object.
    /// </param>
    /// <param name="_loadBuildSupplyDemandType">
    /// The supply demand type.
    /// </param>
    /// <param name="_loadBuildSessionId">
    /// The ID of the load building session for which to generate the proposed load content data.
    /// </param>
    protected void generateProposedLoadContent(
        container                       _packedSupplyDemandQueryRun,
        TMSLoadBuildSupplyDemandType    _loadBuildSupplyDemandType,
        TMSLoadBuildSessionId           _loadBuildSessionId)
    {
        TMSProposedLoadContentBuilder   proposedLoadContentBuilder = TMSProposedLoadContentBuilder::construct();

        proposedLoadContentBuilder.buildProposedLoadContent(
            _packedSupplyDemandQueryRun,
            _loadBuildSupplyDemandType,
            _loadBuildSessionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateProposedLoadInitDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the proposed load data for particular Load building session.
    /// </summary>
    /// <param name="_loadBuildSessionId">
    ///  The ID of the load building session for which to generate the proposed load content data.
    /// </param>
    /// <param name="_loadTemplateList">
    ///  The list of <c>WHSLoadTemplate</c> records.
    /// </param>
    /// <param name="_scheduledRouteCode">
    ///  The scheduled route ID tied to the new load being created.
    /// </param>
    /// <returns>
    ///  An instance of <c>TMSProposedLoadInitDataContract</c>
    /// </returns>
    protected TMSProposedLoadInitDataContract generateProposedLoadInitDataContract(
        TMSLoadBuildSessionId           _loadBuildSessionId,
        TMSLoadBuildLoadTemplateList    _loadTemplateList,
        TMSRouteCode                    _scheduledRouteCode)
    {
        TMSProposedLoadInitDataContract     proposedLoadInitDataContract = TMSProposedLoadInitDataContract::construct();
        WHSLoadTemplate                     loadTemplate;

        loadTemplate = _loadTemplateList.getDefaultLoadTemplate();

        proposedLoadInitDataContract.parmLoadBuildSessionId(_loadBuildSessionId);
        proposedLoadInitDataContract.parmLoadTemplateId(loadTemplate.LoadTemplateId);
        proposedLoadInitDataContract.parmScheduledRouteCode(_scheduledRouteCode);
        proposedLoadInitDataContract.parmMaxNumberOfLoads(_scheduledRouteCode ? 1 : 0);

        return proposedLoadInitDataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposeLoads</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Proposes loads for load building.
    /// </summary>
    /// <param name="_dataContract">
    ///     An instance of the <c>TMSLoadBuildProposeDataContract</c> class.
    /// </param>
    /// <returns>
    ///     An Id of the <c>TMSLoadBuildSession</c> record created.
    /// </returns>
    public TMSLoadBuildSessionId proposeLoads(TMSLoadBuildProposeDataContract _dataContract)
    {
        #AviFiles
        #define.CurrentNumberOfSteps(3) //One step for initialization plus one step for each of 2 groups.
        
        SysOperationProgress progress = SysOperationProgress::newGeneral(#aviUpdate, "@SYS8577", #CurrentNumberOfSteps);
        progress.setCount(1);

        if (!_dataContract || !_dataContract.validate())
        {
            throw error(strFmt("@SYS112535", funcName(), varStr(_dataContract)));
        }

        TMSLoadBuildStrategy loadBuildStrategy = TMSLoadBuildStrategy::find(_dataContract.parmLoadBuildStrategyId());
        TMSLoadBuildStrategyBuilder tmsLoadBuildStrategyBuilder = TMSLoadBuildStrategyBuilder::newLoadBuildStrategy(loadBuildStrategy);
        TMSILoadBuildStrategy concreateLoadBuildStrategy = tmsLoadBuildStrategyBuilder.buildLoadBuildStrategy();

        if (!concreateLoadBuildStrategy)
        {
            throw error("@SYP4861032");
        }

        TMSLoadBuildSession tmsLoadBuildSession;

        using (var activityContext = this.instrumentationLogger().loadBuildingActivities().proposeLoads())
        {
            ttsBegin;
            tmsLoadBuildSession.SessionState = TMSLoadBuildSessionState::None;
            tmsLoadBuildSession.insert();

            this.generateProposedLoadContent(
                _dataContract.parmPackedSupplyDemandQueryRun(),
                _dataContract.parmLoadBuildSupplyDemandType(),
                tmsLoadBuildSession.RecId);

            TMSProposedLoadInitDataContract proposedLoadInitDataContract = this.generateProposedLoadInitDataContract(
                tmsLoadBuildSession.RecId,
                _dataContract.parmLoadTemplateList(),
                _dataContract.parmScheduledRouteCode());

            TMSLoadBuildStrategyInputSet tmsLoadBuildStrategyInputSet;
            select count(RecId) from tmsLoadBuildStrategyInputSet
                where tmsLoadBuildStrategyInputSet.LoadBuildSession == tmsLoadBuildSession.RecId;

            ttsCommit;

            if (tmsLoadBuildStrategyInputSet.RecId > 0)
            {
                progress.setTotal(1 + tmsLoadBuildStrategyInputSet.RecId);

                while select RecId from tmsLoadBuildStrategyInputSet
                    where tmsLoadBuildStrategyInputSet.LoadBuildSession == tmsLoadBuildSession.RecId
                {
                    progress.incCount();
                    try
                    {
                        using (var sessionActivityContext = this.instrumentationLogger().loadBuildingActivities().sessionProposeLoads())
                        {
                            this.instrumentationLogger().logRecordInformation(tmsLoadBuildStrategyInputSet);

                            concreateLoadBuildStrategy.proposeLoads(tmsLoadBuildStrategyInputSet.RecId,
                                                                    _dataContract.parmLoadTemplateList(),
                                                                    proposedLoadInitDataContract);
                        }
                    }
                    catch (Exception::CLRError)
                    {
                        System.Exception sysException = CLRInterop::getLastException();
                        ApplicationUnhandledExceptionLogger::logCLRException(sysException);

                        while (!CLRInterop::isNull(sysException.get_InnerException()))
                        {
                            sysException = sysException.get_InnerException();
                        }
                        error(sysException.get_Message());
                    }
                    catch
                    {
                        error(strFmt("@SYP4861034", concreateLoadBuildStrategy.getDescription(), tmsLoadBuildSession.RecId, tmsLoadBuildStrategyInputSet.RecId));
                    }
                }
            }
        
            ttsBegin;
            tmsLoadBuildSession.SessionState = TMSLoadBuildSessionState::LoadsProposed;
            tmsLoadBuildSession.update();
            ttsCommit;
        }

        return tmsLoadBuildSession.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSLoadBuildProposeService construct()
    {
        return new TMSLoadBuildProposeService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private TMSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = TMSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>