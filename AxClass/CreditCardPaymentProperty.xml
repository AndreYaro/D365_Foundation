<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardPaymentProperty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A CreditCardPaymentProperty stores the value and metadata for a property.
/// </summary>
/// <remarks>
/// A property can be of one type either string, decimal, date/time or property list.
/// </remarks>
using Retail=Microsoft.Dynamics.Retail;

class CreditCardPaymentProperty
{
    str ns; // Can't use namespace, compiler says its a reserved word for future use
    str name;
    CreditCardPropertyDataType valueType;
    CreditCardPropertySecurityLevel securityLevel;
    CreditCardPropertyIsEncrypted isEncrypted;

    // Metadata
    str displayName;
    str description;
    CreditCardPropertyIsPassword isPassword;
    CreditCardPropertyIsReadonly isReadonly;
    CreditCardPropertySequenceNumber sequenceNumber;
    boolean isHidden;

    // Only one of these based on valueType
    utcdatetime dateTimeValue; // CreditCardPropertyDataType::DateTime
    real decimalValue; // CreditCardPropertyDataType::DateTime
    str stringValue; // CreditCardPropertyDataType::String
    CreditCardPaymentProperties propertyListValue; // CreditCardPropertyDataType::PropertyList

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        securityLevel = CreditCardPropertySecurityLevel::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTimeValue</Name>
				<Source><![CDATA[
    public utcdatetime parmDateTimeValue(utcdatetime _value = dateTimeValue)
    {
        if (!prmisDefault(_value))
        {
            dateTimeValue = _value;
            valueType = CreditCardPropertyDataType::DateTime;
        }
        return dateTimeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDecimalValue</Name>
				<Source><![CDATA[
    public real parmDecimalValue(real _value = decimalValue)
    {
        if (!prmisDefault(_value))
        {
            decimalValue = _value;
            valueType = CreditCardPropertyDataType::Decimal;
        }
        return decimalValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public str parmDescription(str _description = description)
    {
        description = _description;
        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayName</Name>
				<Source><![CDATA[
    public str parmDisplayName(str _displayName = displayName)
    {
        displayName = _displayName;
        return displayName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsEncrypted</Name>
				<Source><![CDATA[
    public CreditCardPropertyIsEncrypted parmIsEncrypted(CreditCardPropertyIsEncrypted _isEncrypted = isEncrypted)
    {
        isEncrypted = _isEncrypted;
        return isEncrypted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPassword</Name>
				<Source><![CDATA[
    public CreditCardPropertyIsPassword parmIsPassword(CreditCardPropertyIsPassword _isPassword = isPassword)
    {
        isPassword = _isPassword;
        return isPassword;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReadonly</Name>
				<Source><![CDATA[
    public CreditCardPropertyIsReadonly parmIsReadonly(CreditCardPropertyIsReadonly _isReadonly = isReadonly)
    {
        isReadonly = _isReadonly;
        return isReadonly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsHidden</Name>
				<Source><![CDATA[
    public boolean parmIsHidden(boolean _isHidden = isHidden)
    {
        isHidden = _isHidden;
        return isHidden;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public str parmName(str _name = name)
    {
        name = _name;
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNamespace</Name>
				<Source><![CDATA[
    public str parmNamespace(str _namespace = ns)
    {
        ns = _namespace;
        return ns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPropertyListValue</Name>
				<Source><![CDATA[
    public CreditCardPaymentProperties parmPropertyListValue(CreditCardPaymentProperties _value = propertyListValue)
    {
        if (!prmisDefault(_value))
        {
            propertyListValue = _value;
            valueType = CreditCardPropertyDataType::PropertyList;
        }
        return propertyListValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSecurityLevel</Name>
				<Source><![CDATA[
    public CreditCardPropertySecurityLevel parmSecurityLevel(CreditCardPropertySecurityLevel _securityLevel = securityLevel)
    {
        securityLevel = _securityLevel;
        return securityLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSequenceNumber</Name>
				<Source><![CDATA[
    public CreditCardPropertySequenceNumber parmSequenceNumber(CreditCardPropertySequenceNumber _sequenceNumber = sequenceNumber)
    {
        sequenceNumber = _sequenceNumber;
        return sequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStringValue</Name>
				<Source><![CDATA[
    public str parmStringValue(str _value = stringValue)
    {
        if (!prmisDefault(_value))
        {
            stringValue = _value;
            valueType = CreditCardPropertyDataType::String;
        }
        return stringValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValueType</Name>
				<Source><![CDATA[
    public CreditCardPropertyDataType parmValueType(CreditCardPropertyDataType _valueType = valueType)
    {
        valueType = _valueType;
        return valueType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the property to a CLR property.
    /// </summary>
    /// <returns>
    /// A CLR property.
    /// </returns>
    public Retail.PaymentSDK.Portable.PaymentProperty toProperty()
    {
        Retail.PaymentSDK.Portable.PaymentProperty property;

        if (valueType == CreditCardPropertyDataType::PropertyList)
        {
            property = new Retail.PaymentSDK.Portable.PaymentProperty(ns, name, propertyListValue.toArray());
        }
        else
        {
            property = new Retail.PaymentSDK.Portable.PaymentProperty();

            property.set_Namespace(ns);
            property.set_Name(name);
            property.set_IsReadOnly(isReadonly ? NoYes::Yes : NoYes::No);
            property.set_IsHidden(isHidden ? NoYes::Yes : NoYes::No);
            property.set_IsEncrypted(isEncrypted ? NoYes::Yes : NoYes::No);
            property.set_IsPassword(isPassword ? NoYes::Yes : NoYes::No);
            property.set_SequenceNumber(sequenceNumber);
            property.set_SecurityLevel(Retail.PaymentSDK.Portable.SecurityLevel::None);
            switch (valueType)
            {
            case CreditCardPropertyDataType::DateTime:
                property.set_DateValue(dateTimeValue);
                property.set_ValueType(Retail.PaymentSDK.Portable.DataType::DateTime);
                break;
            case CreditCardPropertyDataType::Decimal:
                property.set_DecimalValue(decimalValue);
                property.set_ValueType(Retail.PaymentSDK.Portable.DataType::Decimal);
                break;
            case CreditCardPropertyDataType::String:
                property.set_StringValue(stringValue);
                property.set_ValueType(Retail.PaymentSDK.Portable.DataType::String);
                break;
            }
        }

        property.SetMetadata(displayName, description);

        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clrString2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a CLR string to a X++ string.
    /// </summary>
    /// <param name="_value">
    /// A CLR string value.
    /// </param>
    /// <returns>
    /// A X++ string value.
    /// </returns>
    public static str clrString2Str(System.String _value)
    {
        return CLRInterop::isNull(_value) ? null : _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a <c>CreditCardPaymentProperty</c> object from a CLR property.
    /// </summary>
    /// <param name="_property">
    /// A CLR property.
    /// </param>
    /// <param name="_hashtable">
    /// A hashtable for nested namespaces.
    /// </param>
    /// <returns>
    /// A new instance of <c>CreditCardPaymentProperty</c> object
    /// </returns>
    public static CreditCardPaymentProperty fromProperty(Retail.PaymentSDK.Portable.PaymentProperty _property, Microsoft.Dynamics.Retail.PaymentSDK.Portable.Hashtable _hashtable = null)
    {
        var property = CreditCardPaymentProperty::newName(_property.get_Namespace(), _property.get_Name());
        var valueType = CreditCardPaymentProperty::toDataType(_property.get_ValueType());
        Retail.PaymentSDK.Portable.PaymentProperty[] properties;

        property.parmDisplayName(CreditCardPaymentProperty::clrString2Str(_property.get_DisplayName()));
        property.parmDescription(CreditCardPaymentProperty::clrString2Str(_property.get_Description()));
        property.parmIsEncrypted(_property.get_IsEncrypted() ? FalseTrue::True : FalseTrue::False);
        property.parmIsReadonly(_property.get_IsReadOnly() ? FalseTrue::True : FalseTrue::False);
        property.parmIsHidden(_property.get_IsHidden() ? FalseTrue::True : FalseTrue::False);
        property.parmIsPassword(_property.get_IsPassword() ? FalseTrue::True : FalseTrue::False);
        property.parmSequenceNumber(_property.get_SequenceNumber());
        property.parmSecurityLevel(CreditCardPaymentProperty::toSecurityLevel(_property.get_SecurityLevel()));
        property.parmDateTimeValue(clrSystemDateTime2UtcDateTime(_property.get_DateValue()));
        property.parmDecimalValue(_property.get_DecimalValue());
        property.parmStringValue(CreditCardPaymentProperty::clrString2Str(_property.get_StringValue()));
        if (valueType == CreditCardPropertyDataType::PropertyList)
        {
            // The method in the next statement exists to workaround a bug/limitation in X++.
            // X++ can only see/call the first overloaded method when the descriminator is an "out" parameter.
            // This is the case for Microsoft.Dynamics.Retail.PaymentSDK.PaymentProperty::GetPropertyValue().
            // If the bug is fixed, the following call could be changed to use overloaded method.
            if (Retail.SDKManager.Portable.AXBridge::PaymentProperty_GetPropertyValueProperties(_hashtable, _property.get_Namespace(), _property.get_Name(), byRef properties))
            {
                property.parmPropertyListValue(CreditCardPaymentProperties::fromProperties(properties));
            }
        }
        property.parmValueType(valueType);

        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a <c>CreditCardPaymentProperty</c> object.
    /// </summary>
    /// <param name="_namespace">
    /// A namespace.
    /// </param>
    /// <param name="_name">
    /// A name.
    /// </param>
    /// <param name="_level">
    /// A security level.
    /// </param>
    /// <param name="_displayName">
    /// A descriptive name.
    /// </param>
    /// <param name="_description">
    /// A description.
    /// </param>
    /// <param name="_value">
    /// The value of the property.
    /// </param>
    /// <returns>
    /// A new instance of <c>CreditCardPaymentProperty</c> object
    /// </returns>
    public static CreditCardPaymentProperty newDisplay(str _namespace, str _name, CreditCardPropertySecurityLevel _level, str _displayName, str _description, anytype _value = '')
    {
        var property = CreditCardPaymentProperty::newValue(_namespace, _name, _value);
        property.parmSecurityLevel(_level);
        property.parmDisplayName(_displayName);
        property.parmDescription(_description);
        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a <c>CreditCardPaymentProperty</c> object.
    /// </summary>
    /// <param name="_namespace">
    /// A namespace.
    /// </param>
    /// <param name="_name">
    /// A name.
    /// </param>
    /// <returns>
    /// A new instance of <c>CreditCardPaymentProperty</c> object
    /// </returns>
    public static CreditCardPaymentProperty newName(str _namespace, str _name)
    {
        var property = new CreditCardPaymentProperty();
        property.parmNamespace(_namespace);
        property.parmName(_name);
        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a <c>CreditCardPaymentProperty</c> object.
    /// </summary>
    /// <param name="_namespace">
    /// A namespace.
    /// </param>
    /// <param name="_name">
    /// A name.
    /// </param>
    /// <param name="_value">
    /// The value of the property.
    /// </param>
    /// <returns>
    /// A new instance of <c>CreditCardPaymentProperty</c> object
    /// </returns>
    public static CreditCardPaymentProperty newValue(str _namespace, str _name, anytype _value)
    {
        var property = CreditCardPaymentProperty::newName(_namespace, _name);

        switch (typeOf(_value))
        {
            case Types::Date:
                property.parmDateTimeValue(DateTimeUtil::newDateTime(_value, 0));
                break;
            case Types::UtcDateTime:
                property.parmDateTimeValue(_value);
                break;
            case Types::Real:
            case Types::Int64:
            case Types::Integer:
                property.parmDecimalValue(_value);
                break;
            case Types::Enum:
                property.parmStringValue(enum2str(_value));
                break;
            case Types::String:
                property.parmStringValue(_value);
                break;
            case Types::Class:
                Object o = _value;
                if (!(o is CreditCardPaymentProperties))
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
                property.parmPropertyListValue(_value);
                break;
            default:
                throw error('Unknown value type for CreditCardPaymentProperty.');
        }
        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a CLR property data type to a X++ property data type.
    /// </summary>
    /// <param name="_dataType">
    /// A CLR data type.
    /// </param>
    /// <returns>
    /// A value in the <c>CreditCardPropertyDataType</c> enumeration.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An unrecognized data type was encountered.
    /// </exception>
    public static CreditCardPropertyDataType toDataType(Retail.PaymentSDK.Portable.DataType _dataType)
    {
        switch (_dataType)
        {
            case Retail.PaymentSDK.Portable.DataType::DateTime:
                return CreditCardPropertyDataType::DateTime;
            case Retail.PaymentSDK.Portable.DataType::Decimal:
                return CreditCardPropertyDataType::Decimal;
            case Retail.PaymentSDK.Portable.DataType::String:
                return CreditCardPropertyDataType::String;
            case Retail.PaymentSDK.Portable.DataType::PropertyList:
                return CreditCardPropertyDataType::PropertyList;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toSecurityLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a CLR property security level to a X++ property security level.
    /// </summary>
    /// <param name="_securityLevel">
    /// A CLR security level.
    /// </param>
    /// <returns>
    /// A value in the <c>CreditCardPropertySecurityLevel</c> enumeration.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An unrecognized security level was encountered.
    /// </exception>
    public static CreditCardPropertySecurityLevel toSecurityLevel(Retail.PaymentSDK.Portable.SecurityLevel _securityLevel)
    {
        return CreditCardPropertySecurityLevel::None;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>