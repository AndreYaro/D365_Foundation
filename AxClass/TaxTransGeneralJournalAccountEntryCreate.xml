<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransGeneralJournalAccountEntryCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransGeneralJournalAccountEntryCreate</c> class is used to create tax transaction for general journal account entry.
/// </summary>
class TaxTransGeneralJournalAccountEntryCreate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTaxTransRelationshipRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Populate the <c>TaxTransRelationshipRule</c> table with the data necessary for the insertRecordSet operations
    ///  that will create the <c>TaxTransGeneralJournalAccountEntry</c> records.
    /// </summary>
    /// <returns>
    ///  A populated instance of the <c>TaxTransRelationshipRule</c> table.
    /// </returns>
    private TaxTransRelationshipRule buildTaxTransRelationshipRule()
    {
        void addTaxTransRelationshipRule(
            TaxTransRelationshipType    _relationshipType,
            MonetaryAmount              _monetaryAmount,
            boolean                     _expenditureDocument,
            boolean                     _primarySide)
        {
            TaxTransRelationshipRule taxTransRelationshipRule;
            taxTransRelationshipRule.TaxTransRelationshipType = _relationshipType;
            taxTransRelationshipRule.MonetaryAmount = _monetaryAmount;
            taxTransRelationshipRule.ExpenditureDocument = _expenditureDocument;
            taxTransRelationshipRule.PrimarySide = _primarySide;
            taxTransRelationshipRule.insert();
        }

        void addPrimarySideTaxTransRelationshipRules(boolean _expenditureDocument)
        {
            // Create taxTrans relationship for line discount
            addTaxTransRelationshipRule(TaxTransRelationshipType::LineDiscount, MonetaryAmount::PriceAdjustment, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::LineDiscount, MonetaryAmount::Discount, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::LineDiscount, MonetaryAmount::PriceAdjustmentVariance, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::LineDiscount, MonetaryAmount::DiscountVariance, _expenditureDocument, true);
            // Create taxTrans relationship for total discount
            addTaxTransRelationshipRule(TaxTransRelationshipType::TotalDiscount, MonetaryAmount::TotalDiscount, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::TotalDiscount, MonetaryAmount::TotalDiscountVariance, _expenditureDocument, true);
            // Create taxTrans relationship for profit and loss
            addTaxTransRelationshipRule(TaxTransRelationshipType::TransactionLineAccount, MonetaryAmount::ExtendedPrice, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::TransactionLineAccount, MonetaryAmount::PriceVariance, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::TransactionLineAccount, MonetaryAmount::Charge, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::TransactionLineAccount, MonetaryAmount::QuantityVariance, _expenditureDocument, true );
            addTaxTransRelationshipRule(TaxTransRelationshipType::TransactionLineAccount, MonetaryAmount::ChargeVariance, _expenditureDocument, true);
            // Create taxTrans relationship for tax and non-recoverable tax
            addTaxTransRelationshipRule(TaxTransRelationshipType::Tax, MonetaryAmount::Tax, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::Tax, MonetaryAmount::TaxVariance, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::Tax, MonetaryAmount::TaxMeasure, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::TaxInCostPrice, MonetaryAmount::TaxMeasureNonRecoverable, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::TaxInCostPrice, MonetaryAmount::TaxNonRecoverable, _expenditureDocument, true);
            addTaxTransRelationshipRule(TaxTransRelationshipType::TaxInCostPrice, MonetaryAmount::TaxNonRecoverableVariance, _expenditureDocument, true);
        }

        TaxTransRelationshipRule taxTransRelationshipRule;

        // Check if the static mapping table has been initialized yet.
        select firstonly RecId from taxTransRelationshipRule;

        if (!taxTransRelationshipRule)
        {
            // Initialize the mapping table.

            // Primary side
            // Expenditure document
            addPrimarySideTaxTransRelationshipRules(true);

            // Non-expenditure document
            addPrimarySideTaxTransRelationshipRules(false);

            // Offset side
            // Expenditure document
            // Create taxTrans relationship for tax and non-recoverable tax
            // If additional offset records become necessary than tax direction will be needed to uniquely identify these records as
            // the offset records for a use tax transaction.
            addTaxTransRelationshipRule(TaxTransRelationshipType::UseTaxPayable, MonetaryAmount::Tax, true, false);
            addTaxTransRelationshipRule(TaxTransRelationshipType::UseTaxPayable, MonetaryAmount::TaxVariance, true, false);
            addTaxTransRelationshipRule(TaxTransRelationshipType::UseTaxPayable, MonetaryAmount::TaxNonRecoverable, true, false);
            addTaxTransRelationshipRule(TaxTransRelationshipType::UseTaxPayable, MonetaryAmount::TaxNonRecoverableVariance, true, false);
        }
        // <GTE>
        else
        {
            // check if the relationship rule for TaxMeasure is created
            select firstonly RecId from taxTransRelationshipRule
                where TaxTransRelationshipRule.MonetaryAmount == MonetaryAmount::TaxMeasure;
            if (!TaxTransRelationshipRule)
            {
                addTaxTransRelationshipRule(TaxTransRelationshipType::Tax, MonetaryAmount::TaxMeasure, true, true);
                addTaxTransRelationshipRule(TaxTransRelationshipType::Tax, MonetaryAmount::TaxMeasure, false, true);
            }

            // check if the relationship rule for TaxMeasure is created
            select firstonly RecId from taxTransRelationshipRule
                where TaxTransRelationshipRule.MonetaryAmount == MonetaryAmount::TaxMeasureNonRecoverable;
            if (!TaxTransRelationshipRule)
            {
                addTaxTransRelationshipRule(TaxTransRelationshipType::TaxInCostPrice, MonetaryAmount::TaxMeasureNonRecoverable, true, true);
                addTaxTransRelationshipRule(TaxTransRelationshipType::TaxInCostPrice, MonetaryAmount::TaxMeasureNonRecoverable, false, true);
            }

            select firstonly RecId from taxTransRelationshipRule
                where TaxTransRelationshipRule.MonetaryAmount == MonetaryAmount::QuantityVariance;
            if (!TaxTransRelationshipRule)
            {
                addTaxTransRelationshipRule(TaxTransRelationshipType::TransactionLineAccount, MonetaryAmount::QuantityVariance, true, true);
                addTaxTransRelationshipRule(TaxTransRelationshipType::TransactionLineAccount, MonetaryAmount::QuantityVariance, false, true);
            }
        }
        // </GTE>
        return taxTransRelationshipRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates <c>TaxTransGeneralJournalAccountEntry</c> records for the specified subledger journal transfer ID.
    /// </summary>
    /// <param name="_transferId">
    ///  The identifier for a group of subledger journal entries that are transferred to the ledger together.
    /// </param>
    /// <param name="_ledgerRecId">
    ///  The identifier for the <c>Ledger</c> record with which the subledger journal entries being transferred are associated.
    /// </param>
    public void create(RefRecId _transferId, LedgerRecId _ledgerRecId)
    {
        TaxTransRelationshipRule taxTransRelationshipRule;

        if (this.doTaxTransRecordsExistForTransfer(_transferId, _ledgerRecId))
        {
            taxTransRelationshipRule = this.buildTaxTransRelationshipRule();

            this.createTaxTransGeneralJournalAccountEntriesForSourceDocuments(_transferId, _ledgerRecId, taxTransRelationshipRule);

            // Free text invoices must be handled separately - see the method remarks for details.
            if (TaxLinkBatchGenerationImprovePerfFlight::instance().isEnabled())
            {
                this.createTaxTransGeneralJournalAccountEntriesForFreeTextInvoiceSourceDocumentsV2(_transferId, _ledgerRecId, taxTransRelationshipRule);
            }
            else
            {
                this.createTaxTransGeneralJournalAccountEntriesForFreeTextInvoiceSourceDocuments(_transferId, _ledgerRecId, taxTransRelationshipRule);
            }

            this.createTaxTransGeneralJournalAccountEntriesForBankStatementSourceDocuments(_transferId, _ledgerRecId, taxTransRelationshipRule);
        }

        // Tax recognized in the subledger without tax transaction source document lines. Those tax transaction relationships are stored in the TaxTransSubledgerJournalAccountEntry table.
        // This can occur when tax is recognized in the subledger through the ledger voucher framework.
        this.createFromTaxTransSubledgerJourAccEntry(_transferId, _ledgerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxTransGeneralJournalAccountEntriesForFreeTextInvoiceSourceDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates <c>TaxTransGeneralJournalAccountEntry</c> records for the specified subledger journal transfer ID, handling
    ///  free text invoices.
    /// </summary>
    /// <param name="_transferId">
    ///  The identifier for a group of subledger journal entries that are transferred to the ledger together.
    /// </param>
    /// <param name="_ledgerRecId">
    ///  The identifier for the <c>Ledger</c> the subledger journal entries being transferred are associated with.
    /// </param>
    /// <param name="_taxTransRelationshipRule">
    ///  The table containing the rules for determining the TaxTransRelationshipType to assign to the taxlink record.
    /// </param>
    /// <remarks>
    ///  The primary side on a FTI transaction is stored with the transaction currency amount on the accounting distribution
    ///  and the accounting currency amount on the subledger journal account entry distribution having the same sign.
    ///  This is different from other non-expenditure documents where the two amounts have the same sign and thus must be
    ///  handled separately.
    /// </remarks>
    private void createTaxTransGeneralJournalAccountEntriesForFreeTextInvoiceSourceDocuments(
        SubledgerJournalTransferId  _transferId,
        LedgerRecId                 _ledgerRecId,
        TaxTransRelationshipRule    _taxTransRelationshipRule)
    {
        AccountingEvent                                         accountingEvent;
        SubledgerJournalEntry                                   subledgerJournalEntry;
        SubledgerJournalAccountEntry                            subledgerJournalAccountEntry;
        SubledgerJournalAccountEntryDistribution                subledgerJournalAccountEntryDistribution;
        GeneralJournalAccountEntrySubledgerJournalAccountEntry  generalJournalAccountEntrySubledgerJournalAccountEntry;
        SourceDocumentLine                                      taxSourceDocumentLine;
        TaxTrans                                                taxTrans;
        AccountingDistribution                                  taxRelatedAccountingDistribution;
        TaxTransGeneralJournalAccountEntry                      taxTransGeneralJournalAccountEntry;
        SourceDocumentHeader                                    sourceDocumentHeader;

        // <GIN>
        boolean checkTaxParameters_INEnabled = TaxParameters::checkTaxParameters_IN();
        // </GIN>

        boolean isTaxBankExchangeRateDifferenceFlightingEnabled = FeatureStateProvider::isFeatureEnabled(TaxBankExchangeRateDifferenceFlighting::instance()) || TaxBankExchangeRateDifferenceV2Flight::instance().isEnabled();

        insert_recordset taxTransGeneralJournalAccountEntry(TaxTrans,
                                                            TransactionCurrencyAmount,
                                                            TransactionCurrency,
                                                            MonetaryAmountType,
                                                            AllocationFactor,
                                                            AccountingCurrencyAmount,
                                                            SubledgerJournalAccountEntry,
                                                            GeneralJournalAccountEntry,
                                                            LedgerDimension,
                                                            TaxTransRelationship)
           select subLedgerJournalEntry
                group by taxTrans.RecId,
                        taxRelatedAccountingDistribution.TransactionCurrency,
                        taxRelatedAccountingDistribution.MonetaryAmount,
                        subledgerJournalAccountEntry.LedgerDimension,
                        subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry,
                        generalJournalAccountEntrySubledgerJournalAccountEntry.GeneralJournalAccountEntry,
                        _taxTransRelationshipRule.TaxTransRelationshipType
                    where subLedgerJournalEntry.TransferId  == _transferId
                        && subledgerJournalEntry.Ledger == _ledgerRecId
                        // Exclude period open and period closed values because they are only used during year end to move to the next year.
                        // These values have no impact on tax.
                        && subledgerJournalEntry.Type != SubledgerJournalEntryType::PeriodClosed
                        && subledgerJournalEntry.Type != SubledgerJournalEntryType::PeriodOpened
                // Get the TaxTrans and required information to find the parent accounting distribution.
                // We do not look for the tax accounting distribution because it may not exist. In a Zero tax scenario there will be no
                // tax accounting distribution but there will still be a TaxTrans related to the document and we will want to create
                // TaxLink records for that TaxTrans.
                join accountingEvent
                        where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                    join taxSourceDocumentLine
                        where taxSourceDocumentLine.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
                    join RecId from taxTrans
                        where taxTrans.SourceDocumentLine == taxSourceDocumentLine.RecId
                    // Restrict this set based operation to only work against FTI
                    join sourceDocumentHeader
                        where sourceDocumentHeader.RecId == accountingEvent.SourceDocumentHeader
                            && sourceDocumentHeader.TypeEnumName == enumStr(SourceDocument_CustomerInvoice)
                // Get all the accounting distributions that are related to the parent source document line for the tax source document line
                // These are all the accounting distributions that contribute to the tax base amount for the tax transaction that is
                // represented by the tax source document line. We want to make tax link records for all these accounting distributions.
                // We get the allocation factor so it can be used to show the correct tax amount on the report while ensuring we are
                // reconciling the general ledger account entry amounts against the tax trans amounts.
                join sum(TransactionCurrencyAmount), TransactionCurrency, MonetaryAmount, sum(AllocationFactor) from taxRelatedAccountingDistribution
                    where taxRelatedAccountingDistribution.AccountingEvent == accountingEvent.RecId
                        // Select all the accounting distributions that contribute to the tax amount or tax base amount
                        && (taxRelatedAccountingDistribution.SourceDocumentLine == taxSourceDocumentLine.RecId
                            || taxRelatedAccountingDistribution.SourceDocumentLine == taxSourceDocumentLine.ParentSourceDocumentLine)
                // Get the subledger journal account entry distributions for the accounting distributions to retrieve the accounting currency amount
                join sum(AccountingCurrencyAmount), SubledgerJournalAccountEntry from subledgerJournalAccountEntryDistribution
                    where subledgerJournalAccountEntryDistribution.AccountingDistribution == taxRelatedAccountingDistribution.RecId
                // Get the general journal account entry for the subledger journal account entry.
                join GeneralJournalAccountEntry from generalJournalAccountEntrySubledgerJournalAccountEntry
                    where generalJournalAccountEntrySubledgerJournalAccountEntry.SubledgerJournalAccountEntry
                          == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                // Get the subledger journal account entry for the subledger journal account entry distribution
                // in order to retrieve the ledger dimension.
                join LedgerDimension from subledgerJournalAccountEntry
                    where subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                        // Only include valid posting types. This is for FTI only so all expenditure posting types are removed
                        && (subledgerJournalAccountEntry.PostingType == LedgerPostingType::Tax
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::CustRevenue       // Revenue FTI
                            // <GIN>
                            || (checkTaxParameters_INEnabled
                                && (subledgerJournalAccountEntry.PostingType == LedgerPostingType::VAT_IN
                                    || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesTax_IN
                                    || subledgerJournalAccountEntry.PostingType == LedgerPostingType::Excise_IN
                                    || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ServiceTax_IN
                                    || subledgerJournalAccountEntry.PostingType == LedgerPostingType::Customs_IN)))
                            // </GIN>
                // Get the tax trans relationship type to assign to the taxlink based on the monetary amount assigned to the taxlink
                join TaxTransRelationshipType from _taxTransRelationshipRule
                    where _taxTransRelationshipRule.MonetaryAmount == taxRelatedAccountingDistribution.MonetaryAmount
                        // Use the following relationship to filter and return the primary side entry only.
                        // Free text invoices have the primary side SLJAED accounting currency amount share the same sign as
                        // the transaction currency amount on the accounting distribution.
                        && _taxTransRelationshipRule.ExpenditureDocument == NoYes::No
                        && _taxTransRelationshipRule.PrimarySide == NoYes::Yes
                        && (
                            (taxTrans.TaxDirection == TaxDirection::OutgoingTax 
                                && taxTrans.ReverseCharge_W == NoYes::No
                                && taxTrans.IntracomVAT == NoYes::No)
                            || taxTrans.TaxDirection == TaxDirection::TaxExemptSales 
                            || taxTrans.TaxDirection == TaxDirection::OutgoingTax_W
                                && taxTrans.ReverseCharge_W == NoYes::No
                                && taxTrans.IntracomVAT == NoYes::No)
                        // Same sign
                        && ((subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxRelatedAccountingDistribution.TransactionCurrencyAmount >= 0)
                            && (!isTaxBankExchangeRateDifferenceFlightingEnabled
                                || (taxTrans.TaxDirection != TaxDirection::IncomingTax_W && taxTrans.TaxDirection != TaxDirection::OutgoingTax_W)
                                || (taxRelatedAccountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                    && (subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxTrans.TaxAmount > 0
                                        || (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled()
                                            && subledgerJournalAccountEntryDistribution.ReportingCurrencyAmount * taxTrans.TaxAmountRep > 0)))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxTransGeneralJournalAccountEntriesForFreeTextInvoiceSourceDocumentsV2</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates <c>TaxTransGeneralJournalAccountEntry</c> records for the specified subledger journal transfer ID, handling
    ///  free text invoices.
    /// </summary>
    /// <param name="_transferId">
    ///  The identifier for a group of subledger journal entries that are transferred to the ledger together.
    /// </param>
    /// <param name="_ledgerRecId">
    ///  The identifier for the <c>Ledger</c> the subledger journal entries being transferred are associated with.
    /// </param>
    /// <param name="_taxTransRelationshipRule">
    ///  The table containing the rules for determining the TaxTransRelationshipType to assign to the taxlink record.
    /// </param>
    /// <remarks>
    ///  The primary side on a FTI transaction is stored with the transaction currency amount on the accounting distribution
    ///  and the accounting currency amount on the subledger journal account entry distribution having the same sign.
    ///  This is different from other non-expenditure documents where the two amounts have the same sign and thus must be
    ///  handled separately.
    /// </remarks>
    private void createTaxTransGeneralJournalAccountEntriesForFreeTextInvoiceSourceDocumentsV2(
        SubledgerJournalTransferId  _transferId,
        LedgerRecId                 _ledgerRecId,
        TaxTransRelationshipRule    _taxTransRelationshipRule)
    {
        SubledgerJournalEntry                                   subledgerJournalEntry;
        SubledgerJournalAccountEntry                            subledgerJournalAccountEntry;
        SubledgerJournalAccountEntryDistribution                subledgerJournalAccountEntryDistribution;
        GeneralJournalAccountEntrySubledgerJournalAccountEntry  generalJournalAccountEntrySubledgerJournalAccountEntry;
        TaxTrans                                                taxTrans;
        AccountingDistribution                                  taxRelatedAccountingDistribution;
        TaxTransGeneralJournalAccountEntry                      taxTransGeneralJournalAccountEntry;

        // <GIN>
        boolean checkTaxParameters_INEnabled = TaxParameters::checkTaxParameters_IN();
        // </GIN>

        boolean isTaxBankExchangeRateDifferenceFlightingEnabled = FeatureStateProvider::isFeatureEnabled(TaxBankExchangeRateDifferenceFlighting::instance()) || TaxBankExchangeRateDifferenceV2Flight::instance().isEnabled();
        insert_recordset taxTransGeneralJournalAccountEntry(LedgerDimension,
                                                            AccountingCurrencyAmount,
                                                            SubledgerJournalAccountEntry,
                                                            TransactionCurrencyAmount,
                                                            TransactionCurrency,
                                                            MonetaryAmountType,
                                                            AllocationFactor,
                                                            TaxTrans,
                                                            GeneralJournalAccountEntry,
                                                            TaxTransRelationship)
           select subLedgerJournalEntry
                group by taxTrans.RecId,
                        taxRelatedAccountingDistribution.TransactionCurrency,
                        taxRelatedAccountingDistribution.MonetaryAmount,
                        subledgerJournalAccountEntry.LedgerDimension,
                        subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry,
                        generalJournalAccountEntrySubledgerJournalAccountEntry.GeneralJournalAccountEntry,
                        _taxTransRelationshipRule.TaxTransRelationshipType
                where subLedgerJournalEntry.TransferId  == _transferId
                    && subledgerJournalEntry.Ledger == _ledgerRecId
                    // Exclude period open and period closed values because they are only used during year end to move to the next year.
                    // These values have no impact on tax.
                    && subledgerJournalEntry.Type != SubledgerJournalEntryType::PeriodClosed
                    && subledgerJournalEntry.Type != SubledgerJournalEntryType::PeriodOpened
                // Get the TaxTrans and required information to find the parent accounting distribution.
                // We do not look for the tax accounting distribution because it may not exist. In a Zero tax scenario there will be no
                // tax accounting distribution but there will still be a TaxTrans related to the document and we will want to create
                // TaxLink records for that TaxTrans.
                join LedgerDimension from subledgerJournalAccountEntry
                    where subledgerJournalAccountEntry.SubledgerJournalEntry == subLedgerJournalEntry.RecId
                        // Only include valid posting types. This is for FTI only so all expenditure posting types are removed
                        && (subledgerJournalAccountEntry.PostingType == LedgerPostingType::Tax
                        || subledgerJournalAccountEntry.PostingType == LedgerPostingType::CustRevenue       // Revenue FTI
                        // <GIN>
                        || (checkTaxParameters_INEnabled
                            && (subledgerJournalAccountEntry.PostingType == LedgerPostingType::VAT_IN
                                || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesTax_IN
                                || subledgerJournalAccountEntry.PostingType == LedgerPostingType::Excise_IN
                                || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ServiceTax_IN
                                || subledgerJournalAccountEntry.PostingType == LedgerPostingType::Customs_IN)))
                // </GIN>
                // Get the subledger journal account entry distributions for the accounting distributions to retrieve the accounting currency amount
                join sum(AccountingCurrencyAmount), SubledgerJournalAccountEntry from subledgerJournalAccountEntryDistribution
                    where subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
                // Get all the accounting distributions that are related to the parent source document line for the tax source document line
                // These are all the accounting distributions that contribute to the tax base amount for the tax transaction that is
                // represented by the tax source document line. We want to make tax link records for all these accounting distributions.
                // We get the allocation factor so it can be used to show the correct tax amount on the report while ensuring we are
                // reconciling the general ledger account entry amounts against the tax trans amounts.
                // Select all the accounting distributions that contribute to the tax amount or tax base amount
                join sum(TransactionCurrencyAmount), TransactionCurrency, MonetaryAmount, sum(AllocationFactor) from taxRelatedAccountingDistribution
                    where taxRelatedAccountingDistribution.SourceDocumentLine == subledgerJournalAccountEntryDistribution.SourceDocumentLine
                        && taxRelatedAccountingDistribution.RecId == subledgerJournalAccountEntryDistribution.AccountingDistribution
                join RecId from taxTrans
                    where taxTrans.SourceDocumentLine == subledgerJournalAccountEntryDistribution.SourceDocumentLine
                        && (taxTrans.HeadingTableId == tableNum(CustInvoiceJour) // for FTI line tax
                            || taxTrans.HeadingTableId == tableNum(CustInvoiceTable)) // for FTI charge tax
                        && (
                            (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                                && taxTrans.ReverseCharge_W == NoYes::No
                                && taxTrans.IntracomVAT == NoYes::No)
                            || taxTrans.TaxDirection == TaxDirection::TaxExemptSales
                            || taxTrans.TaxDirection == TaxDirection::OutgoingTax_W
                                && taxTrans.ReverseCharge_W == NoYes::No
                                && taxTrans.IntracomVAT == NoYes::No)
                // Get the general journal account entry for the subledger journal account entry.
                join GeneralJournalAccountEntry from generalJournalAccountEntrySubledgerJournalAccountEntry
                    where generalJournalAccountEntrySubledgerJournalAccountEntry.SubledgerJournalAccountEntry
                            == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                // Get the subledger journal account entry for the subledger journal account entry distribution
                // in order to retrieve the ledger dimension.
                // Get the tax trans relationship type to assign to the taxlink based on the monetary amount assigned to the taxlink
                join TaxTransRelationshipType from _taxTransRelationshipRule
                    where _taxTransRelationshipRule.MonetaryAmount == taxRelatedAccountingDistribution.MonetaryAmount
                // Use the following relationship to filter and return the primary side entry only.
                // Free text invoices have the primary side SLJAED accounting currency amount share the same sign as
                // the transaction currency amount on the accounting distribution.
                && _taxTransRelationshipRule.ExpenditureDocument == NoYes::No
                && _taxTransRelationshipRule.PrimarySide == NoYes::Yes
                // Same sign
                && ((subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxRelatedAccountingDistribution.TransactionCurrencyAmount >= 0)
                && (!isTaxBankExchangeRateDifferenceFlightingEnabled
                    || (taxTrans.TaxDirection != TaxDirection::IncomingTax_W && taxTrans.TaxDirection != TaxDirection::OutgoingTax_W)
                    || (taxRelatedAccountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                        && (subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxTrans.TaxAmount > 0
                            || (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled()
                                && subledgerJournalAccountEntryDistribution.ReportingCurrencyAmount * taxTrans.TaxAmountRep > 0)))));

    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxTransGeneralJournalAccountEntriesForBankStatementSourceDocuments</Name>
				<Source><![CDATA[
    private void createTaxTransGeneralJournalAccountEntriesForBankStatementSourceDocuments(
        SubledgerJournalTransferId _transferId,
        LedgerRecId _ledgerRecId,
        TaxTransRelationshipRule _taxTransRelationshipRule)
    {
        AccountingEvent accountingEvent;
        SubledgerJournalEntry subledgerJournalEntry;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        SubledgerJournalAccountEntryDistribution subledgerJournalAccountEntryDistribution;
        GeneralJournalAccountEntrySubledgerJournalAccountEntry generalJournalAccountEntrySubledgerJournalAccountEntry;
        SourceDocumentLine taxSourceDocumentLine;
        TaxTrans taxTrans;
        AccountingDistribution taxRelatedAccountingDistribution;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        SourceDocumentHeader sourceDocumentHeader;

        // <GIN>
        boolean checkTaxParameters_INEnabled = TaxParameters::checkTaxParameters_IN();
        // </GIN>

        boolean isTaxBankExchangeRateDifferenceFlightingEnabled = FeatureStateProvider::isFeatureEnabled(TaxBankExchangeRateDifferenceFlighting::instance()) || TaxBankExchangeRateDifferenceV2Flight::instance().isEnabled();

        insert_recordset taxTransGeneralJournalAccountEntry(TaxTrans,
                                                            TransactionCurrencyAmount,
                                                            TransactionCurrency,
                                                            MonetaryAmountType,
                                                            AllocationFactor,
                                                            AccountingCurrencyAmount,
                                                            SubledgerJournalAccountEntry,
                                                            GeneralJournalAccountEntry,
                                                            LedgerDimension,
                                                            TaxTransRelationship)
            select subLedgerJournalEntry
                group by taxTrans.RecId,
                    taxRelatedAccountingDistribution.TransactionCurrency,
                    taxRelatedAccountingDistribution.MonetaryAmount,
                    subledgerJournalAccountEntry.LedgerDimension,
                    subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry,
                    generalJournalAccountEntrySubledgerJournalAccountEntry.GeneralJournalAccountEntry,
                    _taxTransRelationshipRule.TaxTransRelationshipType
                where subLedgerJournalEntry.TransferId  == _transferId
                    && subledgerJournalEntry.Ledger == _ledgerRecId
                    // Exclude period open and period closed values because they are only used during year end to move to the next year.
                    // These values have no impact on tax.
                    && subledgerJournalEntry.Type != SubledgerJournalEntryType::PeriodClosed
                    && subledgerJournalEntry.Type != SubledgerJournalEntryType::PeriodOpened
                 // Get the TaxTrans and required information to find the parent accounting distribution.
                 // We do not look for the tax accounting distribution because it may not exist. In a Zero tax scenario there will be no
                 // tax accounting distribution but there will still be a TaxTrans related to the document and we will want to create
                 // TaxLink records for that TaxTrans.
                 join accountingEvent
                     where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                 join taxSourceDocumentLine
                     where taxSourceDocumentLine.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
                 join RecId from taxTrans
                     where taxTrans.SourceDocumentLine == taxSourceDocumentLine.RecId
                 // Restrict this set based operation to only work against Bank Statement
                 join sourceDocumentHeader
                     where sourceDocumentHeader.RecId == accountingEvent.SourceDocumentHeader
                         && sourceDocumentHeader.TypeEnumName == enumStr(SourceDocument_BankStatement)
                 // Get all the accounting distributions that are related to the parent source document line for the tax source document line
                 // These are all the accounting distributions that contribute to the tax base amount for the tax transaction that is
                 // represented by the tax source document line. We want to make tax link records for all these accounting distributions.
                 // We get the allocation factor so it can be used to show the correct tax amount on the report while ensuring we are
                 // reconciling the general ledger account entry amounts against the tax trans amounts.
                 join sum(TransactionCurrencyAmount), TransactionCurrency, MonetaryAmount, sum(AllocationFactor) from taxRelatedAccountingDistribution
                     where taxRelatedAccountingDistribution.AccountingEvent == accountingEvent.RecId
                         // Select all the accounting distributions that contribute to the tax amount or tax base amount
                         && (taxRelatedAccountingDistribution.SourceDocumentLine == taxSourceDocumentLine.RecId
                             || taxRelatedAccountingDistribution.SourceDocumentLine == taxSourceDocumentLine.ParentSourceDocumentLine)
                 // Get the subledger journal account entry distributions for the accounting distributions to retrieve the accounting currency amount
                 join sum(AccountingCurrencyAmount), SubledgerJournalAccountEntry from subledgerJournalAccountEntryDistribution
                     where subledgerJournalAccountEntryDistribution.AccountingDistribution == taxRelatedAccountingDistribution.RecId
                 // Get the general journal account entry for the subledger journal account entry.
                 join GeneralJournalAccountEntry from generalJournalAccountEntrySubledgerJournalAccountEntry
                     where generalJournalAccountEntrySubledgerJournalAccountEntry.SubledgerJournalAccountEntry
                         == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                 // Get the subledger journal account entry for the subledger journal account entry distribution
                 // in order to retrieve the ledger dimension.
                 join LedgerDimension from subledgerJournalAccountEntry
                     where subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                         // Only include valid posting types. This is for bank statement only so all expenditure posting types are removed
                         && (subledgerJournalAccountEntry.PostingType == LedgerPostingType::Tax
                             // <GIN>
                             || (checkTaxParameters_INEnabled
                                 && (subledgerJournalAccountEntry.PostingType == LedgerPostingType::VAT_IN
                                     || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesTax_IN
                                     || subledgerJournalAccountEntry.PostingType == LedgerPostingType::Excise_IN
                                     || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ServiceTax_IN
                                     || subledgerJournalAccountEntry.PostingType == LedgerPostingType::Customs_IN)))
                             // </GIN>
                             // Get the tax trans relationship type to assign to the taxlink based on the monetary amount assigned to the taxlink
                 join TaxTransRelationshipType from _taxTransRelationshipRule
                     where _taxTransRelationshipRule.MonetaryAmount == taxRelatedAccountingDistribution.MonetaryAmount
                         // Use the following relationship to filter and return the primary side entry only.
                         // Bank statement has the primary side SLJAED accounting currency amount share the same sign as
                         // the transaction currency amount on the accounting distribution.
                         && _taxTransRelationshipRule.ExpenditureDocument == NoYes::No
                         && _taxTransRelationshipRule.PrimarySide == NoYes::Yes
                         && (
                             (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                                 && taxTrans.ReverseCharge_W == NoYes::No
                                 && taxTrans.IntracomVAT == NoYes::No)
                             || taxTrans.TaxDirection == TaxDirection::TaxExemptSales
                             || taxTrans.TaxDirection == TaxDirection::OutgoingTax_W
                                 && taxTrans.ReverseCharge_W == NoYes::No
                                 && taxTrans.IntracomVAT == NoYes::No)
                          // Same sign
                          && ((subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxRelatedAccountingDistribution.TransactionCurrencyAmount >= 0)
                                && (!isTaxBankExchangeRateDifferenceFlightingEnabled
                                    || (taxTrans.TaxDirection != TaxDirection::IncomingTax_W && taxTrans.TaxDirection != TaxDirection::OutgoingTax_W)
                                    || (taxRelatedAccountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                        && (subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxTrans.TaxAmount > 0
                                            || (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled()
                                                && subledgerJournalAccountEntryDistribution.ReportingCurrencyAmount * taxTrans.TaxAmountRep > 0)))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxTransGeneralJournalAccountEntriesForSourceDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates <c>TaxTransGeneralJournalAccountEntry</c> records for the specified subledger journal transfer ID.
    /// </summary>
    /// <param name="_transferId">
    ///  The identifier for a group of subledger journal entries that are transferred to the ledger together.
    /// </param>
    /// <param name="_ledgerRecId">
    ///  The identifier for the <c>Ledger</c> record with which the subledger journal entries being transferred are associated.
    /// </param>
    /// <param name="_taxTransRelationshipRule">
    ///  The table containing the rules for determining the TaxTransRelationshipType to assign to the taxlink record.
    /// </param>
    private void createTaxTransGeneralJournalAccountEntriesForSourceDocuments(
        SubledgerJournalTransferId  _transferId,
        LedgerRecId                 _ledgerRecId,
        TaxTransRelationshipRule    _taxTransRelationshipRule)
    {
        AccountingEvent                                         accountingEvent;
        SubledgerJournalEntry                                   subledgerJournalEntry;
        SubledgerJournalAccountEntry                            subledgerJournalAccountEntry;
        SubledgerJournalAccountEntryDistribution                subledgerJournalAccountEntryDistribution;
        GeneralJournalAccountEntrySubledgerJournalAccountEntry  generalJournalAccountEntrySubledgerJournalAccountEntry;
        SourceDocumentLine                                      taxSourceDocumentLine;
        TaxTrans                                                taxTrans;
        AccountingDistribution                                  taxRelatedAccountingDistribution;
        TaxTransGeneralJournalAccountEntry                      taxTransGeneralJournalAccountEntry;

        // <GIN>
        boolean                                     checkTaxParameters_INEnabled = TaxParameters::checkTaxParameters_IN();
        // </GIN>

        boolean isTaxBankExchangeRateDifferenceFlightingEnabled = FeatureStateProvider::isFeatureEnabled(TaxBankExchangeRateDifferenceFlighting::instance()) || TaxBankExchangeRateDifferenceV2Flight::instance().isEnabled();

        insert_recordset taxTransGeneralJournalAccountEntry(TaxTrans,
                                                            TransactionCurrencyAmount,
                                                            TransactionCurrency,
                                                            MonetaryAmountType,
                                                            AllocationFactor,
                                                            AccountingCurrencyAmount,
                                                            SubledgerJournalAccountEntry,
                                                            GeneralJournalAccountEntry,
                                                            LedgerDimension,
                                                            TaxTransRelationship)
           select subLedgerJournalEntry
                group by taxTrans.RecId,
                        taxRelatedAccountingDistribution.TransactionCurrency,
                        taxRelatedAccountingDistribution.MonetaryAmount,
                        subledgerJournalAccountEntry.LedgerDimension,
                        subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry,
                        generalJournalAccountEntrySubledgerJournalAccountEntry.GeneralJournalAccountEntry,
                        _taxTransRelationshipRule.TaxTransRelationshipType
                    where subLedgerJournalEntry.TransferId  == _transferId
                        && subledgerJournalEntry.Ledger == _ledgerRecId
                        // Exclude period open and period closed values because they are only used during year end to move to the next year.
                        // These values have no impact on tax.
                        && subledgerJournalEntry.Type != SubledgerJournalEntryType::PeriodClosed
                        && subledgerJournalEntry.Type != SubledgerJournalEntryType::PeriodOpened
                // Get the TaxTrans and required information to find the parent accounting distribution.
                // We do not look for the tax accounting distribution because it may not exist. In a Zero tax scenario there will be no
                // tax accounting distribution but there will still be a TaxTrans related to the document and we will want to create
                // TaxLink records for that TaxTrans.
                join accountingEvent
                        where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                    join taxSourceDocumentLine
                        where taxSourceDocumentLine.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
                    join RecId from taxTrans
                        where taxTrans.SourceDocumentLine == taxSourceDocumentLine.RecId
                // Get all the accounting distributions that are related to the parent source document line for the tax source document line
                // These are all the accounting distributions that contribute to the tax base amount for the tax transaction that is
                // represented by the tax source document line. We want to make tax link records for all these accounting distributions.
                // We get the allocation factor so it can be used to show the correct tax amount on the report while ensuring we are
                // reconciling the general ledger account entry amounts against the tax trans amounts.
                join sum(TransactionCurrencyAmount), TransactionCurrency, MonetaryAmount, sum(AllocationFactor) from taxRelatedAccountingDistribution
                    where taxRelatedAccountingDistribution.AccountingEvent == accountingEvent.RecId
                        // Select all the accounting distributions that contribute to the tax amount or tax base amount
                        && (taxRelatedAccountingDistribution.SourceDocumentLine == taxSourceDocumentLine.RecId
                            || taxRelatedAccountingDistribution.SourceDocumentLine == taxSourceDocumentLine.ParentSourceDocumentLine)
                // Get the subledger journal account entry distributions for the accounting distributions to retrieve the accounting currency amount
                join sum(AccountingCurrencyAmount), SubledgerJournalAccountEntry from subledgerJournalAccountEntryDistribution
                    where subledgerJournalAccountEntryDistribution.AccountingDistribution == taxRelatedAccountingDistribution.RecId
                // Get the general journal account entry for the subledger journal account entry.
                join GeneralJournalAccountEntry from generalJournalAccountEntrySubledgerJournalAccountEntry
                    where generalJournalAccountEntrySubledgerJournalAccountEntry.SubledgerJournalAccountEntry
                          == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                // Get the subledger journal account entry for the subledger journal account entry distribution
                // in order to retrieve the ledger dimension.
                join LedgerDimension from subledgerJournalAccountEntry
                    where subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                        // Only include valid posting types
                        && (subledgerJournalAccountEntry.PostingType == LedgerPostingType::Tax
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::GST_IN
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::CustRevenue       // Revenue FTI
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::VendInvoiceDisc   // Vendor invoice total discount
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchConsump      // Expenditure for product (stocked items)
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchDisc         // Vendor invoice line discount
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchAdvance      // Prepayment invoice
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchExpense      // Expenditure for expense (categories)
                            // Posting types likely used for ledger charge
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::CustInvoiceDisc
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesDisc
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesFreight
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesFee
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesPostage
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::Rebate
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchCash
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchFreight
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchFee
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchPostage
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchMarkupFreight
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchMarkupCustoms
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchMarkupInsurance
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchCharge
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::MCRBrokerFee
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::LedgerJournal
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjCost
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjWIPCost
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjWIPCostvalue
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjTurnover          // FTI with project
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::IntercompanyCost
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::IntercompanyRevenue
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjStatusAccountItem
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjPayrollAllocation
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::FixedAssetsDebit
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::FixedAssetsCredit
                            || (TaxCreateLineAmountLinkForPostingTypeFlight::instance().isEnabled()
                                && (subledgerJournalAccountEntry.PostingType == LedgerPostingType::PaymentFee
                                    || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesRoundOff
                                    || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchOffsetAccount))
                            // <GIN>
                            || (checkTaxParameters_INEnabled
                                && (subledgerJournalAccountEntry.PostingType == LedgerPostingType::VAT_IN
                                    || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesTax_IN
                                    || subledgerJournalAccountEntry.PostingType == LedgerPostingType::Excise_IN
                                    || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ServiceTax_IN
                                    || subledgerJournalAccountEntry.PostingType == LedgerPostingType::Customs_IN)))
                            // </GIN>
                // Get the tax trans relationship type to assign to the taxlink based on the monetary amount from the accounting distribution.
                join TaxTransRelationshipType from _taxTransRelationshipRule
                    where _taxTransRelationshipRule.MonetaryAmount == taxRelatedAccountingDistribution.MonetaryAmount
                        // Note the following relationship also filters to the primary side entry for everything but use tax.
                        // For example, for expenditure documents such as Vendor Invoice, the primary side entry will be the SLJAED record
                        // where the accounting currency amount shares the same sign as the transaction currency amount in the accounting
                        // distribution record, while for non-expenditure document such as Sales Order, this relationship is reversed.
                        // Because zero amounts are also an option, include that case in the same sign check.
                        && (
                            // Expenditure document primary side
                               (_taxTransRelationshipRule.ExpenditureDocument == NoYes::Yes
                                && _taxTransRelationshipRule.PrimarySide == NoYes::Yes
                                && (taxTrans.TaxDirection == TaxDirection::IncomingTax 
                                    || (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                                        && (taxTrans.ReverseCharge_W  == NoYes::Yes
                                            || taxTrans.IntracomVAT == NoYes::Yes))
                                    || taxTrans.TaxDirection == TaxDirection::UseTax 
                                    || taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase 
                                    || taxTrans.TaxDirection == TaxDirection::IncomingTax_W
                                    || (taxTrans.TaxDirection == TaxDirection::OutgoingTax_W
                                        && (taxTrans.ReverseCharge_W  == NoYes::Yes
                                            || taxTrans.IntracomVAT == NoYes::Yes)))
                                // Same sign
                                && ((subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxRelatedAccountingDistribution.TransactionCurrencyAmount >= 0)
                                    && (!isTaxBankExchangeRateDifferenceFlightingEnabled
                                        || (taxTrans.TaxDirection != TaxDirection::IncomingTax_W && taxTrans.TaxDirection != TaxDirection::OutgoingTax_W)
                                        || (taxRelatedAccountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                            && (subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxTrans.TaxAmount > 0
                                                || (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled()
                                                    && subledgerJournalAccountEntryDistribution.ReportingCurrencyAmount * taxTrans.TaxAmountRep > 0))))
                                    ))
                            // Non-expenditure document primary side
                            || (_taxTransRelationshipRule.ExpenditureDocument == NoYes::No
                                && _taxTransRelationshipRule.PrimarySide == NoYes::Yes
                                && (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                                    || taxTrans.TaxDirection == TaxDirection::TaxExemptSales 
                                    || taxTrans.TaxDirection == TaxDirection::OutgoingTax_W)
                                // Opposite sign
                                && subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxRelatedAccountingDistribution.TransactionCurrencyAmount < 0
                                    && (!isTaxBankExchangeRateDifferenceFlightingEnabled
                                        || (taxTrans.TaxDirection != TaxDirection::OutgoingTax_W)
                                        || (taxRelatedAccountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                            && (subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxTrans.TaxAmount < 0
                                                || (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled()
                                                    && subledgerJournalAccountEntryDistribution.ReportingCurrencyAmount * taxTrans.TaxAmountRep < 0))))
                                )
                            // Expenditure document offset side
                            // Use tax is a special case where we also want the offset side. Use tax is only on expenditure documents.
                            || (_taxTransRelationshipRule.ExpenditureDocument == NoYes::Yes
                                && _taxTransRelationshipRule.PrimarySide == NoYes::No
                                && taxTrans.TaxDirection == TaxDirection::UseTax
                                // Opposite sign
                                && subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxRelatedAccountingDistribution.TransactionCurrencyAmount < 0
                                )
                        );

        SourceDocumentLine  parentSourceDocumentLine;
        TaxDocCompLineSourceDocLine taxDocCompLineSourceDocLine;
        insert_recordset taxTransGeneralJournalAccountEntry(TaxTrans,
                                                            TransactionCurrencyAmount,
                                                            TransactionCurrency,
                                                            MonetaryAmountType,
                                                            AllocationFactor,
                                                            AccountingCurrencyAmount,
                                                            SubledgerJournalAccountEntry,
                                                            GeneralJournalAccountEntry,
                                                            LedgerDimension,
                                                            TaxTransRelationship)
           select subLedgerJournalEntry
                group by taxTrans.RecId,
                        taxRelatedAccountingDistribution.TransactionCurrency,
                        taxRelatedAccountingDistribution.MonetaryAmount,
                        subledgerJournalAccountEntry.LedgerDimension,
                        subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry,
                        generalJournalAccountEntrySubledgerJournalAccountEntry.GeneralJournalAccountEntry,
                        _taxTransRelationshipRule.TaxTransRelationshipType
                    where subLedgerJournalEntry.TransferId  == _transferId
                        && subledgerJournalEntry.Ledger == _ledgerRecId
                        // Exclude period open and period closed values because they are only used during year end to move to the next year.
                        // These values have no impact on tax.
                        && subledgerJournalEntry.Type != SubledgerJournalEntryType::PeriodClosed
                        && subledgerJournalEntry.Type != SubledgerJournalEntryType::PeriodOpened
                // Get the TaxTrans and required information to find the parent accounting distribution.
                // We do not look for the tax accounting distribution because it may not exist. In a Zero tax scenario there will be no
                // tax accounting distribution but there will still be a TaxTrans related to the document and we will want to create
                // TaxLink records for that TaxTrans.
                join accountingEvent
                        where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                    join taxSourceDocumentLine
                        where taxSourceDocumentLine.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
                    join RecId from taxTrans
                        where taxTrans.SourceDocumentLine == taxSourceDocumentLine.RecId
                    join parentSourceDocumentLine
                        where parentSourceDocumentLine.RecId == taxSourceDocumentLine.ParentSourceDocumentLine
                    join taxDocCompLineSourceDocLine
                        where taxDocCompLineSourceDocLine.SourceDocumentLine == parentSourceDocumentLine.RecId
                // Get all the accounting distributions that are related to the grand parent source document line for the tax source document line when it is used for GTE
                // These are all the accounting distributions that contribute to the tax base amount for the tax transaction that is
                // represented by the tax source document line. We want to make tax link records for all these accounting distributions.
                // We get the allocation factor so it can be used to show the correct tax amount on the report while ensuring we are
                // reconciling the general ledger account entry amounts against the tax trans amounts.
                join sum(TransactionCurrencyAmount), TransactionCurrency, MonetaryAmount, sum(AllocationFactor) from taxRelatedAccountingDistribution
                        where taxRelatedAccountingDistribution.AccountingEvent == accountingEvent.RecId
                        // Select all the accounting distributions that contribute tax base amount
                        && taxRelatedAccountingDistribution.SourceDocumentLine == parentSourceDocumentLine.ParentSourceDocumentLine
                // Get the subledger journal account entry distributions for the accounting distributions to retrieve the accounting currency amount
                join sum(AccountingCurrencyAmount), SubledgerJournalAccountEntry from subledgerJournalAccountEntryDistribution
                    where subledgerJournalAccountEntryDistribution.AccountingDistribution == taxRelatedAccountingDistribution.RecId
                // Get the general journal account entry for the subledger journal account entry.
                join GeneralJournalAccountEntry from generalJournalAccountEntrySubledgerJournalAccountEntry
                    where generalJournalAccountEntrySubledgerJournalAccountEntry.SubledgerJournalAccountEntry
                          == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                // Get the subledger journal account entry for the subledger journal account entry distribution
                // in order to retrieve the ledger dimension.
                join LedgerDimension from subledgerJournalAccountEntry
                    where subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                        // Only include valid posting types
                        && (subledgerJournalAccountEntry.PostingType == LedgerPostingType::CustRevenue       // Revenue FTI
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::VendInvoiceDisc   // Vendor invoice total discount
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchConsump      // Expenditure for product (stocked items)
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchDisc         // Vendor invoice line discount
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchAdvance      // Prepayment invoice
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchExpense      // Expenditure for expense (categories)
                            // Posting types likely used for ledger charge
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::CustInvoiceDisc
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesDisc
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesFreight
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesFee
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesPostage
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::Rebate
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchCash
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchFreight
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchFee
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchPostage
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchMarkupFreight
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchMarkupCustoms
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchMarkupInsurance
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchCharge
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::MCRBrokerFee
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::LedgerJournal
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjCost
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjWIPCost
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjWIPCostvalue
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::IntercompanyCost
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::IntercompanyRevenue
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjStatusAccountItem
                            || subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjPayrollAllocation)
                            // Get the tax trans relationship type to assign to the taxlink based on the monetary amount from the accounting distribution.
                            join TaxTransRelationshipType from _taxTransRelationshipRule
                    where _taxTransRelationshipRule.MonetaryAmount == taxRelatedAccountingDistribution.MonetaryAmount
                        // Note the following relationship also filters to the primary side entry for everything but use tax.
                        // For example, for expenditure documents such as Vendor Invoice, the primary side entry will be the SLJAED record
                        // where the accounting currency amount shares the same sign as the transaction currency amount in the accounting
                        // distribution record, while for non-expenditure document such as Sales Order, this relationship is reversed.
                        // Because zero amounts are also an option, include that case in the same sign check.
                        && (
                            // Expenditure document primary side
                            (_taxTransRelationshipRule.ExpenditureDocument == NoYes::Yes
                                && _taxTransRelationshipRule.PrimarySide == NoYes::Yes
                                && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                                    || (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                                        && TaxTrans.ReverseCharge_W  == NoYes::Yes)
                                    || taxTrans.TaxDirection == TaxDirection::UseTax
                                    || taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase
                                    || taxTrans.TaxDirection == TaxDirection::IncomingTax_W
                                    || (taxTrans.TaxDirection == TaxDirection::OutgoingTax_W
                                        && TaxTrans.ReverseCharge_W  == NoYes::Yes))
                                // Same sign
                                && subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxRelatedAccountingDistribution.TransactionCurrencyAmount >= 0
                                )
                            // Non-expenditure document primary side
                            || (_taxTransRelationshipRule.ExpenditureDocument == NoYes::No
                                && _taxTransRelationshipRule.PrimarySide == NoYes::Yes
                                && (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                                    || taxTrans.TaxDirection == TaxDirection::TaxExemptSales
                                    || taxTrans.TaxDirection == TaxDirection::OutgoingTax_W)
                                // Opposite sign
                                && subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxRelatedAccountingDistribution.TransactionCurrencyAmount < 0
                                )
                            // Expenditure document offset side
                            // Use tax is a special case where we also want the offset side. Use tax is only on expenditure documents.
                            || (_taxTransRelationshipRule.ExpenditureDocument == NoYes::Yes
                                && _taxTransRelationshipRule.PrimarySide == NoYes::No
                                && taxTrans.TaxDirection == TaxDirection::UseTax
                                // Opposite sign
                                && subledgerJournalAccountEntryDistribution.AccountingCurrencyAmount * taxRelatedAccountingDistribution.TransactionCurrencyAmount < 0
                                )
                        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTaxTransSubledgerJourAccEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates <c>TaxTransGeneralJournalAccountEntry</c> records from the specified <c>TaxTransSubledgerJournalAccountEntry</c> records.
    /// </summary>
    /// <param name="_transferId">
    ///  The identifier for a group of subledger journal entries that are transferred to the ledger together.
    /// </param>
    /// <param name="_ledgerRecId">
    ///  The identifier for the <c>Ledger</c> the subledger journal entries being transferred are associated with.
    /// </param>
    /// <remarks>
    ///  Use this method to transfer records with <c>TaxTransGeneralJournalAccountEntry</c> and no source document lines.
    /// </remarks>
    public void createFromTaxTransSubledgerJourAccEntry(
        SubledgerJournalTransferId  _transferId,
        LedgerRecId                 _ledgerRecId)
    {
        // set allocation factor to its default value of 1 from tax trans on subledger journal account entry
        const AllocationFactor allocationFactor = 1;

        TaxTransGeneralJournalAccountEntry                      taxTransGeneralJournalAccountEntry;
        TaxTransSubledgerJournalAccountEntry                    taxTransSubledgerJournalAccountEntry;
        GeneralJournalAccountEntrySubledgerJournalAccountEntry  generalJournalAccountEntrySubledgerJournalAccountEntry;
        SubledgerJournalAccountEntry                            subledgerJournalAccountEntry;
        SubledgerJournalEntry                                   subledgerJournalEntry;

        insert_recordset taxTransGeneralJournalAccountEntry(AllocationFactor,
                                                            TaxTrans,
                                                            LedgerDimension,
                                                            TaxTransRelationship,
                                                            GeneralJournalAccountEntry,
                                                            TransactionCurrencyAmount,
                                                            AccountingCurrencyAmount,
                                                            SubledgerJournalAccountEntry,
                                                            TransactionCurrency)
            select allocationFactor, TaxTrans, LedgerDimension, TaxTransRelationship
                from taxTransSubledgerJournalAccountEntry
                join GeneralJournalAccountEntry from generalJournalAccountEntrySubledgerJournalAccountEntry
                    where generalJournalAccountEntrySubledgerJournalAccountEntry.SubledgerJournalAccountEntry
                          == taxTransSubledgerJournalAccountEntry.SubledgerJournalAccountEntry
                join TransactionCurrencyAmount, AccountingCurrencyAmount, RecId, TransactionCurrency
                    from subledgerJournalAccountEntry
                    where subledgerJournalAccountEntry.RecId == taxTransSubledgerJournalAccountEntry.SubledgerJournalAccountEntry
                        && subledgerJournalAccountEntry.IsTransferredInDetail != TransferPolicy::DoNotTransfer
                join subledgerJournalEntry
                    where subledgerJournalEntry.RecId == subledgerJournalAccountEntry.SubledgerJournalEntry
                        && subledgerJournalEntry.TransferId == _transferId
                        && subledgerJournalEntry.Ledger == _ledgerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxTransRecordsExistForTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Check to see if <c>TaxTrans</c> records exist in the transfer that may require
    ///  <c>TaxTransGeneralJournalAccountEntry</c> records created.
    /// </summary>
    /// <param name="_transferId">
    ///  The identifier for a group of subledger journal entries that are transferred to the ledger together.
    /// </param>
    /// <param name="_ledgerRecId">
    ///  The identifier for the <c>Ledger</c> record with which the subledger journal entries being transferred are associated.
    /// </param>
    /// <returns>
    ///  True if we may require <c>TaxTransGeneralJournalAccountEntry</c> records created; otherwise false.
    /// </returns>
    protected boolean doTaxTransRecordsExistForTransfer(RefRecId _transferId, LedgerRecId _ledgerRecId)
    {
        boolean taxExists = false;

        TaxTrans                taxTrans;
        SubledgerJournalEntry   subledgerJournalEntry;
        AccountingEvent         accountingEvent;
        SourceDocumentLine      sourceDocumentLine;

        select firstonly RecId from taxTrans
            join TransferId from subledgerJournalEntry
                where subLedgerJournalEntry.TransferId == _transferId
                    && subledgerJournalEntry.Ledger == _ledgerRecId
            join RecId from accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
            join RecId from sourceDocumentLine
                where sourceDocumentLine.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
                    && sourceDocumentLine.RecId == taxTrans.SourceDocumentLine;

        if (taxTrans.RecId)
        {
            taxExists = true;
        }

        return taxExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxTransGeneralJournalAccountEntryCreate construct()
    {
        return new TaxTransGeneralJournalAccountEntryCreate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>