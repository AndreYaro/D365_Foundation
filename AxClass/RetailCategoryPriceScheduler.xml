<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCategoryPriceScheduler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCategoryPriceScheduler</c> class provides the Retail category price rule scheduler.
/// </summary>
public class RetailCategoryPriceScheduler extends RunBaseBatch implements BatchRetryable
{
    RetailCategoryPriceRule categoryPriceRule;
    CurrencyCode priceCurrencyCode;
    FromDate priceFromDate;
    ToDate priceToDate;
    RetailPriceBasisDate priceBasisDate;
    RetailCategoryPriceProductSelectionType productSelectionType;
    boolean isZeroPriceOnly;
    boolean expirePreviousTAs;
    boolean findNext;
    Object caller;

    // <GEERU>
    boolean     ruleScope;
    boolean     isGroupProcessing;
    container   excludedCategories;
    PriceDiscJournalNum   priceDiscJournalNum;
    PriceDiscJournalNum expireJourNum;
    // </GEERU>

    #define.CurrentVersion(4)
    #localmacro.CurrentList
        categoryPriceRule,
        priceCurrencyCode,
        priceFromDate,
        priceToDate,
        priceBasisDate,
        expirePreviousTAs,
        findNext,
        ruleScope,
        isGroupProcessing,
        excludedCategories,
        priceDiscJournalNum,
        expireJourNum,
        productSelectionType
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generatePrices</Name>
				<Source><![CDATA[
    private void generatePrices()
    {
        PriceDiscAdmTable priceDiscAdm;

        MenuFunction menuFunction;
        Args args;

        if (!categoryPriceRule)
        {
            return;
        }

        priceDiscAdm = categoryPriceRule.generatePricesByScheduler(this);

        if (!this.isInBatch())
        {
            // <GEERU>
            if (!this.parmIsGroupProcessing())
            {
                if (RetailPriceDiscAdmTable::findByPriceDiscAdmTable(priceDiscAdm.RecId).EcoResCategoryHierarchyId)
                {
                    menuFunction = new MenuFunction(menuitemDisplayStr(RetailPriceDiscResearch), MenuItemType::Display);
                }
                else
                {
            // </GEERU>
            menuFunction = new MenuFunction(menuitemDisplayStr(PriceDiscAdm), MenuItemType::Display);
            // <GEERU>
                }
            // </GEERU>
            args = new Args();
            args.name(classStr(RetailCategoryPriceScheduler));
            args.caller(caller);
            args.record(priceDiscAdm);
            menuFunction.run(args);
            // <GEERU>
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the <c>RetailCategoryPriceScheduler</c> class.
    /// </summary>
    /// <returns>A container that contains the current instance of <c>RetailCategoryPriceScheduler</c>.</returns>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    public Object parmCaller(Object _caller)
    {
        caller = _caller;

        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryPriceRule</Name>
				<Source><![CDATA[
    public RetailCategoryPriceRule parmCategoryPriceRule(RetailCategoryPriceRule _categoryPriceRule = categoryPriceRule)
    {
        categoryPriceRule = _categoryPriceRule;
        return categoryPriceRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = priceCurrencyCode)
    {
        priceCurrencyCode = _currencyCode;

        return priceCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpirePreviousTAs</Name>
				<Source><![CDATA[
    public boolean parmExpirePreviousTAs(boolean _expirePreviousTAs = expirePreviousTAs)
    {
        expirePreviousTAs = _expirePreviousTAs;

        return expirePreviousTAs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFindNext</Name>
				<Source><![CDATA[
    public boolean parmFindNext(boolean _findNext = findNext)
    {
        findNext = _findNext;

        return findNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = priceFromDate)
    {
        priceFromDate = _fromDate;
        return priceFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductSelectionType</Name>
				<Source><![CDATA[
    public RetailCategoryPriceProductSelectionType parmProductSelectionType(RetailCategoryPriceProductSelectionType _productSelectionType = productSelectionType)
    {
        productSelectionType = _productSelectionType;

        return productSelectionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _ToDate = priceToDate)
    {
        priceToDate = _ToDate;
        return priceToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the implementation of the class.
    /// </summary>
    public void run()
    {
        super();

        this.generatePrices();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="_packedClass"/> parameter to the current instance of <c>RetailCategoryPriceScheduler</c>.
    /// </summary>
    /// <param name = "packedClass">The container from which to deserialize the instance.</param>
    /// <returns>true if deserialization was successful; otherwise, false.</returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailCategoryPriceScheduler construct()
    {
        return new RetailCategoryPriceScheduler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryPriceProductQueryHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates <c>RetailCategoryPriceProductQueryHelper</c> to get configured query based on this class.
    /// </summary>
    /// <returns>
    /// Instance of the <c>RetailCategoryPriceProductQueryHelper</c> class.
    /// </returns>
    public RetailCategoryPriceProductQueryHelper categoryPriceProductQueryHelper()
    {
        return RetailCategoryPriceProductQueryHelper::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludedCategories</Name>
				<Source><![CDATA[
    public container parmExcludedCategories(container _excludedCategories = excludedCategories)
    {
        excludedCategories = _excludedCategories;

        return excludedCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpireJourNum</Name>
				<Source><![CDATA[
    public PriceDiscJournalNum parmExpireJourNum(PriceDiscJournalNum _expireJourNum = expireJourNum)
    {
        expireJourNum = _expireJourNum;

        return expireJourNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsGroupProcessing</Name>
				<Source><![CDATA[
    public boolean parmIsGroupProcessing(boolean _isGroupProcessing = isGroupProcessing)
    {
        isGroupProcessing = _isGroupProcessing;

        return isGroupProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceBasisDate</Name>
				<Source><![CDATA[
    public RetailPriceBasisDate parmPriceBasisDate(RetailPriceBasisDate _priceBasisDate = priceBasisDate)
    {
        priceBasisDate = _priceBasisDate;

        return priceBasisDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscJournalNum</Name>
				<Source><![CDATA[
    public PriceDiscJournalNum parmPriceDiscJournalNum(PriceDiscJournalNum _priceDiscJournalNum = priceDiscJournalNum)
    {
        priceDiscJournalNum = _priceDiscJournalNum;

        return priceDiscJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessExpireTAJour</Name>
				<Source><![CDATA[
    public static void postProcessExpireTAJour(PriceDiscJournalNum _expireJourNum)
    {
        PriceDiscAdmTrans newAdmTrans;
        PriceDiscAdmTable admTable;
        TransDate expiredDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        if (_expireJourNum)
        {
            select firstOnly RecId from newAdmTrans
                where newAdmTrans.JournalNum == _expireJourNum;

            if (newAdmTrans)
            {
                update_recordSet newAdmTrans setting
                    FromDate = expiredDate
                where newAdmTrans.JournalNum == _expireJourNum
                    && newAdmTrans.FromDate > expiredDate;

                info("@REX1270", '', SysInfoAction_TableField::newBuffer(PriceDiscAdmTable::find(_expireJourNum)));
            }
            else
            {
                delete_from admTable
                    where admTable.JournalNum == _expireJourNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>