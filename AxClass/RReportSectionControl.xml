<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RReportSectionControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
class      RReportSectionControl
{
    ReportRun               reportRun;
    identifiername          designName;
    ReportDesign            design;
    ReportSection           reportSection;

    ReportShapeControl      shapeTop;
    ReportShapeControl      shapeBottom;

    container               conRepeatableColumn;

    List                    lstControl;
    ListIterator            itLstControl;

    int                     maxHeightCntr;

    Set                     setNotPrintColumn;

    int                     lastColumnOnPage;

    #MACROLIB.RLedgerSheetRepEngine
    #define.index("idx")
    #define.control("cntr")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addColumnsRepeatable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container addColumnsRepeatable(int _iLeftPos, int _toColumnNum, Map _mapCntrTemplate)
    {
        int         cx, col, iLeftPos = _iLeftPos;
        int         createdColumn;
        boolean     bOk = true;

        ;

        if (conRepeatableColumn != connull())
        {
            for (cx =1; bOk && (cx <= conlen(conRepeatableColumn)); cx++)
            {
                col = conpeek(conRepeatableColumn, cx);

                [bOk, iLeftPos, createdColumn] = this.addConrol(iLeftPos, col, _toColumnNum, _mapCntrTemplate);
            }
        }

        return [bOk, iLeftPos];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConrol</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container addConrol(int _iLeftPos, int _curCol, int _toColumnNum, Map _mapCntrTemplate)
    {
        ReportControl   control;
        Struct          structTemplate;
        int             iLeftPos =  _iLeftPos;
        ;

        if (setNotPrintColumn.in(_curCol))
        {
            return [ true, iLeftPos, 0];
        }

        if (! this.checkAvailableSpace(iLeftPos, _curCol, _toColumnNum, _mapCntrTemplate))
        {
            return [ false, iLeftPos, 0];
        }

        structTemplate = this.getStructTemplate(_curCol, _mapCntrTemplate);

        control = this.createControl(iLeftPos + #leftMarning, structTemplate);

        iLeftPos += this.getControlWidth(control.width100mm());

        this.createVShapeControl(iLeftPos);

        this.addControlInList(_curCol, control);

        lastColumnOnPage = _curCol;

        return [true, iLeftPos, 1];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlInList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addControlInList(int            _curCol,
                                    ReportControl  _control)
    {
        Struct   struct;

        ;

        maxHeightCntr = max(maxHeightCntr, _control.height100mm() + _control.top100mm());

        struct = new Struct(Types::Integer, #index, Types::Class, #control);
        struct.value(#index, _curCol);
        struct.value(#control, _control);

        lstControl.addEnd(struct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAvailableSpace</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkAvailableSpace(int _leftPos,
                                          int _curCol,
                                          int _toColumnNum,
                                          Map _mapCntrTemplate)
    {
        boolean         bRet = false;
        int             availableWidth, cntrWidth, tmp, pageWidth, cx, repeatColumn,curCol = _curCol ;
        Struct          structTemplate, nextStructTemplate, tmpStructTemplate;

        ;

        design.leftMarginUnit(Units::mm);
        design.rightMarginUnit(Units::mm);

        pageWidth = reportRun.printerPageWidth() - (design.leftMarginValue() + design.rightMarginUnit()) * 100;

        availableWidth = pageWidth - _leftPos;
        structTemplate = this.getStructTemplate(curCol, _mapCntrTemplate);

        cntrWidth      += this.getControlWidth(structTemplate.value(#structWidth));

        if (curCol == (_toColumnNum + #firstColumnNum - 1))
        {
            nextStructTemplate = this.getStructTemplate(curCol + 1, _mapCntrTemplate);
            cntrWidth          += this.getControlWidth(nextStructTemplate.value(#structWidth));
        }

        bRet = (availableWidth >= cntrWidth);

        if (! bRet)
        {
            tmp = this.getControlWidth(structTemplate.value(#structWidth));

            if (conRepeatableColumn != connull())
            {
                for (cx = 1; cx <= conlen(conRepeatableColumn); cx++)
                {
                    repeatColumn      = conpeek(conRepeatableColumn, cx);
                    tmpStructTemplate = this.getStructTemplate( repeatColumn, _mapCntrTemplate);

                    tmp               += this.getControlWidth(tmpStructTemplate.value(#structWidth));

                    if (tmp >= pageWidth)
                        throw error(strfmt("@GLS110504", repeatColumn + 1));
                }
            }

            if (nextStructTemplate)
            {
                tmp += this.getControlWidth(nextStructTemplate.value(#structWidth));
            }

            if (tmp >= pageWidth)
            {
                curCol = (nextStructTemplate) ? curCol : curCol +1;
                throw error(strfmt("@GLS110504", curCol));
            }
        }

        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createControl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ReportControl createControl(int _iLeftPos, Struct  _columnTemplate)
    {
        ReportTextControl   textControl;
        int                 cx, iCount;
        boolean             bSetHeight = false;

        ;

        textControl = reportSection.addTextControl("");
        textControl.showLabel(false);
        textControl.left100mm(_iLeftPos);
        textControl.top100mm(#topMarning);

        iCount = _columnTemplate.fields();

        for (cx = 1; cx <= iCount; cx++)
        {
            switch (_columnTemplate.fieldName(cx))
            {
                case #structFontSize :
                    textControl.fontSize(_columnTemplate.value(#structFontSize));
                    break;

                case #structFontBold :
                    textControl.bold(_columnTemplate.value(#structFontBold));
                    break;

                case #structTop :
                    textControl.top100mm(_columnTemplate.value(#structTop));
                    break;

                case #structLeft :
                    textControl.left100mm(_columnTemplate.value(#structLeft));
                    break;

                case #structWidth :
                    textControl.width100mm(_columnTemplate.value(#structWidth));
                    break;

                case #structHeight :
                    textControl.height100mm(_columnTemplate.value(#structHeight));
                    bSetHeight = true;
                    break;

                case #structTextAlignment :
                    textControl.alignment(_columnTemplate.value(#structTextAlignment));
                    break;

                case #structFontItalic :
                    textControl.italic(_columnTemplate.value(#structFontItalic));
                    break;

                case #structLineBelow :
                    textControl.lineBelow(_columnTemplate.value(#structLineBelow));
                    break;

                case #structThickness :
                    textControl.thickness(_columnTemplate.value(#structThickness));
                    break;

                default :
                    throw error(strfmt("@GLS105058", funcname(), _columnTemplate.fieldName(cx)));
            }
        }

        if (! bSetHeight)
        {
            textControl.height(1.0, Units::char);
        }

        return textControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createControlsInSection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container createControlsInSection(Map      _mapCntrTemplate,
                                                int      _fromColumnNum,
                                                int      _toColumnNum,
                                                int      _iLeftPos)
    {
        int         iColumnNum, createdColumn, iLeftPos = _iLeftPos;
        boolean     bOk = true;

        ;

        iColumnNum    = _fromColumnNum - 1;
        createdColumn = 0;

        while (bOk && (iColumnNum < _toColumnNum))
        {
            iColumnNum    += (createdColumn > 0) ? createdColumn : 1;
            createdColumn = 0;

            if ((conRepeatableColumn != connull()) && (confind(conRepeatableColumn, iColumnNum)))
            {
                continue;
            }

            [bOk, iLeftPos, createdColumn] = this.addConrol(iLeftPos, iColumnNum, _toColumnNum, _mapCntrTemplate);
        }

        if (iColumnNum < _fromColumnNum)
        {
            throw error("@GLS110503");
        }

        return [bOk, iLeftPos];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHShapeControl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ReportShapeControl createHShapeControl(int _top, int _width)
    {
        ReportShapeControl      shapeControl;

        ;

        shapeControl = reportSection.addShapeControl(ShapeType::Horizontal);

        shapeControl.left100mm(0);
        shapeControl.height100mm(0);
        shapeControl.width100mm(_width);
        shapeControl.top100mm(_top);

        return shapeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVShapeControl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ReportShapeControl createVShapeControl(int _leftPos)
    {
        ReportShapeControl      shapeControl;

        ;

        shapeControl = reportSection.addShapeControl(ShapeType::Vertical);

        shapeControl.width100mm(0);
        shapeControl.top100mm(0);
        shapeControl.left100mm(_leftPos);

        return shapeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlWidth</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int getControlWidth(int width)
    {
        ;

        if (width <= 0)
            return 0;

        return #leftMarning + width + #rightMarning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastCreatedColNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int getLastCreatedColNum()
    {
        return lastColumnOnPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStructTemplate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Struct getStructTemplate(int _iKey, Map _mapCntrTemplate)
    {
        if (_mapCntrTemplate.exists(_iKey))
        {
            return  _mapCntrTemplate.lookup(_iKey);
        }
        else
        {
            return  _mapCntrTemplate.lookup(#defaultTemplate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>height100mm</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int height100mm()
    {
        return reportSection.heightmm100();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    //  _reportRun              -> Report.
    //  _designName             -> Name of selected design.
    //  _mapCntrTemplate        -> Map keep templates to create conrol elements.
    //  _fromColumnNum          -> Number is for first originating column into section.
    //  _toColumnNum            -> Number is for last originating column.
    //  _conRepeatableColumn    -> Keep column repeatable.
    //  _conNotPrintColumn      -> Numbers of column are not printable
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(ReportRun       _reportRun,
                    identifiername  _designName,
                    Map             _mapCntrTemplate,
                    int             _fromColumnNum,
                    int             _toColumnNum,
                    container       _conRepeatableColumn,
                    Set             _setNotPrintColumn)
    {
        int             iLeftPos;
        boolean         bOk = true;

        ;

        setNotPrintColumn   = _setNotPrintColumn;

        maxHeightCntr       = 0;
        conRepeatableColumn = _conRepeatableColumn;

        reportRun       = _reportRun;
        designName      = _designName;
        design          = (designName) ? _reportRun.design(designName) :  _reportRun.design();

        //Create section
        reportSection   = design.addSection(ReportBlockType::Control);
        reportSection.controlNumber(design.sectionCount() + 1);

        //Create control elements

        iLeftPos    = 0;
        lstControl  = new List(Types::Class);

        this.createVShapeControl(iLeftPos);

        lastColumnOnPage = #firstColumnNum - 1;

        //Add columns repeatable
        [bOk, iLeftPos] = this.addColumnsRepeatable(iLeftPos, _toColumnNum, _mapCntrTemplate);

        if (!bOk)
            throw error("@GLS110503");

        [bOk, iLeftPos] = this.createControlsInSection(_mapCntrTemplate, _fromColumnNum, _toColumnNum, iLeftPos);

        itLstControl    = new ListIterator(lstControl);

        this.setVShapeControlHeight(maxHeightCntr + #bottomMarning);

        //Create shape horizontal
        shapeTop    = this.createHShapeControl(0, iLeftPos);
        shapeBottom = this.createHShapeControl(maxHeightCntr + #bottomMarning, iLeftPos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean printSection(Map  _mapRowBuff, boolean  _printTopLine, boolean _printBottomLine, boolean  _showGrid = true)
    {
        boolean             bRet = false;

        ReportTextControl   reportTextControl;
        Struct              struct;

        int                 iColumn;
        TempStr             tempStr;

        ;

        shapeTop.visible(_printTopLine);
        shapeBottom.visible(_printBottomLine);

        this.visibleGridLine(_showGrid);

        itLstControl.begin();

        while (itLstControl.more())
        {
            struct = itLstControl.value();

            reportTextControl = struct.value(#control);
            iColumn           = struct.value(#index);

            if (_mapRowBuff.exists(iColumn))
            {
                tempStr = _mapRowBuff.lookup(iColumn);
            }
            else
            {
                tempStr = "";
            }
            reportTextControl.text(tempStr);

            itLstControl.next();

            bRet = true;
        }

        if (bRet)
        {
            reportRun.execute(reportSection.controlNumber());
        }

        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVShapeControlHeight</Name>
				<Source><![CDATA[
private void setVShapeControlHeight(int _height)
    {
        ReportControl       ctl;
        ReportShapeControl  rsc;
        int                 i = 1;

        ;
        ctl = reportSection.controlNo(1);
        while (ctl)
        {
            if (ctl.controlType() == ReportFieldType::Box)
            {
                rsc = ctl as ReportShapeControl;

                if (rsc && rsc.type() == ShapeType::Vertical)
                    ctl.height100mm(_height);
            }

            i++;
            ctl =  reportSection.controlNo(i);
        }

        reportSection.height100mm(_height);
    }
]]></Source>
			</Method>
			<Method>
				<Name>visibleGridLine</Name>
				<Source><![CDATA[
    private void visibleGridLine(boolean _visible)
    {
        ReportControl       ctl;
        ReportShapeControl  rsc;
        int                 i = 1;

        ;

        ctl = reportSection.controlNo(1);

        while (ctl)
        {
            if (ctl.controlType() == ReportFieldType::Box)
            {
                rsc = ctl;

                if (rsc.type() == ShapeType::Vertical)
                {
                    if (_visible)
                        ctl.show();
                    else
                        ctl.hide();
                }
            }

            i++;
            ctl =  reportSection.controlNo(i);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>