<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesConfirmController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesConfirmController</c> class is the helper class for the associated SRS Report.
/// </summary>
public class SalesConfirmController extends TradeDocumentReportController implements BatchRetryable
{
    FormletterJournalPrint              formletterJournalPrint;
    CustConfirmJour                     custConfirmJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales confirmation document title.
    /// </summary>
    /// <returns>
    /// The document title.
    /// </returns>
    protected str documentTitle()
    {
        str documentTitle;

        if (printCopyOriginal == PrintCopyOriginal::Copy)
        {
            if (custConfirmJour.isProforma())
            {
                documentTitle = literalStr("@SYS70793");
            }
            else
            {
                documentTitle = literalStr("@SYS24432");
            }
        }
        else
        {
            if (custConfirmJour.isProforma())
            {
                documentTitle = literalStr("@SYS7845");
            }
            else
            {
                documentTitle = literalStr("@SYS12529");
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentIdentifier</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected str documentIdentifier()
    {
        return custConfirmJour.ConfirmDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReportExceptions</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean handleReportExceptions()
    {
        return SalesConfirmControllerExceptionsFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextTableId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected TableId reportExceptionContextTableId()
    {
        return custConfirmJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextRecordId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected RecId reportExceptionContextRecordId()
    {
        return custConfirmJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstJournal</Name>
				<Source><![CDATA[
    protected boolean getFirstJournal()
    {
        return journalList.first(custConfirmJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextJournal</Name>
				<Source><![CDATA[
    protected boolean getNextJournal()
    {
        return journalList.next(custConfirmJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record ID of the journal record to be passed to the contract.
    /// </summary>
    /// <returns>
    /// The record ID of the journal record.
    /// </returns>
    protected RecId getRecordId()
    {
        return custConfirmJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(SalesConfirmJournalPrint))
        {
            // Set the caller
            formletterJournalPrint = this.parmArgs().caller();
        }

        if (this.parmArgs().record())
        {
            // Get journal list from the selected record/s
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::SalesOrderConfirmation);

        formLetterReport.parmPrintType(printCopyOriginal);

        if (formletterJournalPrint)
        {
            // Get the print settings
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(formletterJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(formletterJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(formletterJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SRSReportParameters</c> values in the report contract.
    /// </summary>
    protected void modifyContract()
    {
        SRSTmpDataStore             srsTmpDataStore;
        SalesConfirmHeaderTmp       salesConfirmHeaderTmp;
        SalesConfirmContract        salesConfirmContract = contract as SalesConfirmContract;

        if (formletterJournalPrint)
        {
            // Pack the class and insert into the temporary store.
            srsTmpDataStore.Value = formletterJournalPrint.pack();
            srsTmpDataStore.insert();

            // Set the rec id to contract parameter.
            salesConfirmContract.parmFormLetterRecordId(srsTmpDataStore.RecId);

            // To Capture the createdTransactionId.
            select firstonly CreatedTransactionId from salesConfirmHeaderTmp
                where salesConfirmHeaderTmp.JournalRecId == custConfirmJour.RecId;

            salesConfirmContract.parmCreatedTransactionId(salesConfirmHeaderTmp.CreatedTransactionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    protected void output()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().documentReport().output(this.reportExceptionContextTableId(), this.reportExceptionContextRecordId()))
        {
            formLetterReport.loadPrintSettings(custConfirmJour, SalesTable::find(custConfirmJour.SalesId), custConfirmJour.LanguageId);

            if (this.validateReportPrintJobSettingsEmailTo(activityContext))
            {
                this.parmReportContract().parmRdlContract().parmLanguageId(custConfirmJour.LanguageId);
                this.parmReportContract().parmRdlContract().parmLabelLanguageId(custConfirmJour.LanguageId);

                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReportPrintJobSettingsEmailTo</Name>
				<Source><![CDATA[
    private boolean validateReportPrintJobSettingsEmailTo(SysInstrumentationActivityContext _activityContext)
    {
        boolean ret = true;

        if (SalesConfirmControllerSendPrintReportEmailFlight::instance().isEnabled())
        {
            PrintMgmtReportRun printMgmtReportRunLocal = formLetterReport.parmReportRun();

            _activityContext.addCustomProperty(classstr(PrintMgmtReportRun), int2Str(printMgmtReportRunLocal.getPrintSettingsCount()));

            if (printMgmtReportRunLocal.next())
            {
                SRSPrintDestinationSettings printSettings = printMgmtReportRunLocal.settingDetail().parmPrintJobSettings();
                if (printSettings.printMediumType() == SRSPrintMediumType::Email)
                {
                    str emailTo = printSettings.emailTo();

                    if (!emailTo)
                    {
                        ret = checkFailed(strFmt("@SCM:SalesOrderEmailWasNotSent", custConfirmJour.SalesId));
                    }
                    else if (!SysEmailDistributor::validateEmail(emailTo))
                    {
                        ret = checkFailed(strFmt("@SCM:SalesOrderEmailWasNotSentInvalidEmail", custConfirmJour.SalesId, emailTo));
                    }
                }

                _activityContext.addCustomProperty(enumStr(SRSPrintMediumType), enum2Symbol(enumNum(SRSPrintMediumType), printSettings.printMediumType()));

                printMgmtReportRunLocal.reset();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataContractRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values in the <c>CustConfirmJour</c> record.
    /// </summary>
    /// <param name="_common">
    /// A <c>CustConfirmJour</c> record.
    /// </param>
    protected void setDataContractRecord(Common _common)
    {
        custConfirmJour = args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesConfirmController construct()
    {
        return new SalesConfirmController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        SrsReportRunController formLetterController = SalesConfirmController::construct();

        SalesConfirmController controller = formLetterController;
        controller.initArgs(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesOrderConfirmation).getDefaultReportFormat());

        if (classIdGet(_args.caller()) == classNum(SalesConfirmJournalPrint))
        {
            formLetterController.renderingCompleted += eventhandler(SalesConfirmJournalPrint::renderingCompleted);
        }
        formLetterController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDataContract</Name>
				<Source><![CDATA[
    public static SrsReportDataContract newDataContract(Args _args)
    {
        SalesConfirmController formLetterController = SalesConfirmController::construct();

        if (_args.dataset() != tableNum(CustConfirmJour))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        formLetterController.initDataContract(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesOrderConfirmation).getDefaultReportFormat());

        return formLetterController.parmReportContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>