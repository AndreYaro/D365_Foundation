<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostBeginningAmounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostBeginningAmounts</c> class handles beginning amounts for item, inventory dimension
///    ID, and cost groups.
/// </summary>
class InventCostBeginningAmounts
{
    Map             itemBeginningAmounts;
    Map             costGroupBeginningAmounts;
    Set             addedCostGroups;
    InventClosing   inventClosing;

    #define.keySeparator('+')
    #define.itemMap(1)
    #define.costGroupMap(2)
    #define.itemMap(1)
    #define.addedCostGroupSet(3)
    #define.inventClosing(4)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildItemKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a key for looking up a combination of item and inventory dimension IDs.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID for the key
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID for the key.
    /// </param>
    /// <returns>
    ///    A key combined of item and inventory dimension ID.
    /// </returns>
    protected str buildItemKey(
        ItemId      _itemId,
        InventDimId _inventDimId)
    {
        return _itemId + #keySeparator + _inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds beginning amounts for a given item and inventory dimension combination in the beginning
    ///    amounts map.
    /// </summary>
    /// <param name="_costGroupId">
    ///    The cost group ID for which to find the beginning amounts.
    /// </param>
    /// <returns>
    ///    The beginning amounts found in the beginning amounts map.
    /// </returns>
    /// <remarks>
    ///    The beginning amounts map is created during the temporary table generation.
    /// </remarks>
    public InventCostAmountHandler findCostGroup(CostGroupId _costGroupId)
    {
        InventCostAmountHandler amounts = InventCostAmountHandler::construct();

        if (costGroupBeginningAmounts.exists(_costGroupId))
        {
            amounts = costGroupBeginningAmounts.lookup(_costGroupId);
        }
        return amounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds beginning amounts for a given item and inventory dimension combination in the beginning
    ///    amounts map.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID for which to find the beginning amounts.
    /// </param>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> for which find the beginning amounts.
    /// </param>
    /// <returns>
    ///    The beginning amounts found in the beginning amounts map.
    /// </returns>
    /// <remarks>
    ///    The beginning amounts map is created during the temporary table generation.
    /// </remarks>
    public InventCostAmountHandler findItem(
        ItemId                  _itemId,
        InventDimId             _inventDimId
        )
    {
        InventCostAmountHandler amounts = InventCostAmountHandler::construct();

        if (itemBeginningAmounts.exists(this.buildItemKey(_itemId, _inventDimId)))
        {
            amounts = itemBeginningAmounts.lookup(this.buildItemKey(_itemId, _inventDimId));
        }
        return amounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemStored</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether an item and inventory dimension combination has been stored in the map.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID for which to check.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID for which to check.
    /// </param>
    /// <returns>
    ///    true if item and inventory dimension combination has been stored in map; otherwise false.
    /// </returns>
    /// <remarks>
    ///    The beginning amounts map is created during the temporary table generation.
    /// </remarks>
    public boolean isItemStored(
        ItemId      _itemId,
        InventDimId _inventDimId
        )
    {
        return itemBeginningAmounts.exists(this.buildItemKey(_itemId, _inventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of this class.
    /// </summary>
    /// <param name="_inventClosing">
    ///    The inventory closing record from which the inventory cost transaction sum records are selected.
    /// </param>
    protected void new(InventClosing _inventClosing)
    {
        inventClosing               = _inventClosing;
        itemBeginningAmounts        = new Map(Types::String, Types::Class);
        costGroupBeginningAmounts   = new Map(Types::String, Types::Class);
        addedCostGroups             = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        container conWithInventClosing = [inventClosing];
        return [itemBeginningAmounts.pack(), costGroupBeginningAmounts.pack(), addedCostGroups.pack(), conWithInventClosing];
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeCostGroupBeginning</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates beginning amounts for a given cost group and stores the result for later retrieval.
    /// </summary>
    /// <param name="_costGroupId">
    ///    The cost group ID for which the beginning amounts are calculated.
    /// </param>
    /// <param name="_inventCostTransView">
    ///    The <c>InventCostTransView</c> record from where the necessary lookup information (<c>ItemId</c>,
    ///    <c>InventItemId</c> and <c>InvetSiteId</c>) is taken.
    /// </param>
    public void storeCostGroupBeginning(
        CostGroupId         _costGroupId,
        InventCostTransView _inventCostTransView
        )
    {
        InventCostAmountHandler amounts = InventCostAmountHandler::construct();
        InventCostAmountHandler costGroupAmounts = InventCostAmountHandler::construct();
        str                     itemKey = this.buildItemKey(_inventCostTransView.ItemId, _inventCostTransView.InventDimId);

        // Only add this item/cost group combination if it hasn't already been added
        if (_inventCostTransView)
        {
            if (!addedCostGroups.in(_costGroupId + #keySeparator + itemKey))
            {
                // Find the beginning quantity and amounts for the item (either in map or by calculation)
                if (itemBeginningAmounts.exists(itemKey))
                {
                    amounts = itemBeginningAmounts.lookup(itemKey);
                }
                else
                {
                    amounts = InventCostBeginningAmounts::getBeginningAmounts(_inventCostTransView.ItemId,
                                                                              _inventCostTransView.InventDimId,
                                                                              _inventCostTransView.InventSiteId,
                                                                              inventClosing);
                    itemBeginningAmounts.insert(itemKey, amounts);
                }

                // Add the item amounts to the cost group amounts
                if (costGroupBeginningAmounts.exists(_costGroupId))
                {
                    costGroupAmounts = this.findCostGroup(_costGroupId);
                }
                costGroupAmounts.addAllAmounts(amounts);
                costGroupBeginningAmounts.insert(_costGroupId, costGroupAmounts);

                addedCostGroups.add(_costGroupId + #keySeparator + itemKey);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeCostGroupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates beginning amounts for a given cost group and stores the result for later retrieval.
    /// </summary>
    /// <param name="_costGroupId">
    ///    The cost group ID for which the beginning amounts are calculated.
    /// </param>
    /// <param name="_inventCostTmpTransBreakdown">
    ///    The temporary breakdown record that contains the amounts that need to be added to the beginning
    ///    amounts.
    /// </param>
    /// <param name="_inventCostTransView">
    ///    The <c>inventCostTransView</c> record from where the necessary lookup information (<c>ItemId</c>,
    ///    <c>InventItemId</c> and <c>InventSiteId</c>) is taken.
    /// </param>
    public void storeCostGroupTrans(
        CostGroupId                 _costGroupId,
        InventCostTmpTransBreakdown _inventCostTmpTransBreakdown,
        InventCostTransView         _inventCostTransView
        )
    {
        InventCostAmountHandler amounts = InventCostAmountHandler::construct();

        if (_inventCostTransView)
        {
            // Find beginning amounts and add this transaction
            amounts = this.findCostGroup(_costGroupId);
            InventCostReport_CostBase::addAmountsToTotals(_inventCostTmpTransBreakdown, amounts);
            // Cost is not included in beginning amounts
            // COGS is not calculated as it is always offset to 0 in order to get the period movement
            amounts.clearAmount(InventCostAmountType::Cost);
            amounts.clearAmount(InventCostAmountType::COGS);
            costGroupBeginningAmounts.insert(_costGroupId, amounts);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeItemBeginning</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates beginning amounts for a given item and inventory dimension ID combination and stores the
    ///    result for later retrieval.
    /// </summary>
    /// <param name="_inventCostTransView">
    ///    The <c>InventCostTransView</c> from where the necessary lookup information is taken.
    /// </param>
    /// <param name="_inventCostTransSum">
    ///    The <c>InventCostTransSum</c> to use for calculation. If this parameter is not provided, the
    ///    <c>InventCostTransSum</c> is found using the other input parameters; optional.
    /// </param>
    public void storeItemBeginning(
        InventCostTransView _inventCostTransView,
        InventCostTransSum  _inventCostTransSum = null
        )
    {
        InventCostAmountHandler amounts = InventCostAmountHandler::construct();
        ItemId                  itemId;
        InventDimId             inventDimId;
        InventSiteId            inventSiteId;

        if (_inventCostTransView)
        {
            itemId          = _inventCostTransView.ItemId;
            inventDimId     = _inventCostTransView.InventDimId;
            inventSiteId    = _inventCostTransView.InventSiteId;
        }
        else
        {
            if (_inventCostTransSum)
            {
                itemId          = _inventCostTransSum.ItemId;
                inventDimId     = _inventCostTransSum.FinancialInventDimId;
                inventSiteId    = InventDim::find(_inventCostTransSum.FinancialInventDimId).InventSiteId;
            }
        }

        if (_inventCostTransView || _inventCostTransSum)
        {
            if (!itemBeginningAmounts.exists(this.buildItemKey(itemId, inventDimId)))
            {
                amounts = InventCostBeginningAmounts::getBeginningAmounts(itemId,
                                                                          inventDimId,
                                                                          inventSiteId,
                                                                          inventClosing,
                                                                          _inventCostTransSum);

                itemBeginningAmounts.insert(this.buildItemKey(itemId, inventDimId), amounts);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeItemTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates beginning amounts for a given item and inventory dimension ID combination and stores the
    ///    result for later retrieval.
    /// </summary>
    /// <param name="_inventCostTmpTransBreakdown">
    ///    The temporary breakdown record that contains the amounts to add to the beginning amounts.
    /// </param>
    /// <param name="_inventCostTransView">
    ///    The <paramref name="_inventCostTransView" /> from where the necessary lookup information
    ///    (<c>itemId</c>, <c>inventItemId</c> and <c>invetSiteId</c>) is taken.
    /// </param>
    public void storeItemTrans(
        InventCostTmpTransBreakdown _inventCostTmpTransBreakdown,
        InventCostTransView         _inventCostTransView
        )
    {
        InventCostAmountHandler amounts = InventCostAmountHandler::construct();

        if (_inventCostTransView)
        {
            // Find beginning amounts and add this transaction
            amounts = this.findItem(_inventCostTransView.ItemId, _inventCostTransView.InventDimId);
            InventCostReport_CostBase::addAmountsToTotals(_inventCostTmpTransBreakdown, amounts);
            // Cost is not included in beginning amounts
            // COGS is not calculated as it is always offset to 0 in order to get the period movement
            amounts.clearAmount(InventCostAmountType::Cost);
            amounts.clearAmount(InventCostAmountType::COGS);
            itemBeginningAmounts.insert(this.buildItemKey(_inventCostTransView.ItemId, _inventCostTransView.InventDimId), amounts);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the parameters that were packed during the call to the pack method.
    /// </summary>
    /// <param name="con">
    ///    A container with the packed parameters.
    /// </param>
    /// <remarks>
    ///    The sequence of the parameters in the container must be in the same order as in the pack method.
    /// </remarks>
    public void unpack(container con)
    {
        itemBeginningAmounts           = Map::create(conPeek(con, #itemMap));
        costGroupBeginningAmounts      = Map::create(conPeek(con, #costGroupMap));
        addedCostGroups                = Set::create(conPeek(con, #addedCostGroupSet));
        container conWithInventClosing = conPeek(con, #inventClosing);
        [inventClosing]                = conWithInventClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventCostBeginningAmounts construct(InventClosing _inventClosing)
    {
        return new InventCostBeginningAmounts(_inventClosing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBeginningAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the beginning amounts for a given item and date.
    /// </summary>
    /// <param name="_itemId">
    ///    The item for which to find the amount.
    /// </param>
    /// <param name="_inventDimId">
    ///    The dimension ID for the given item.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The site ID for the given item.
    /// </param>
    /// <param name="_inventClosing">
    ///    The inventory closing record from which the <c>InventCostTransSum</c> records are selected
    /// </param>
    /// <param name="_inventCostTransSum">
    ///    The <c>InventCostTransSum</c> to use for calculation. If this parameter is not provided, the
    ///    <c>InventCostTransSum</c> is found using other input parameters; optional.
    /// </param>
    /// <returns>
    ///    The beginning amounts for the given item and date.
    /// </returns>
    /// <remarks>
    ///    The inventory closing record prior to the given date is used to get the relevant
    ///    <c>InventCostTransSum</c> value.The quantities in <c>InventCostTransSum</c> are distributed
    ///    according to the cost group rollup that is activated on the date the <c>InventCostTransSum</c>
    ///    record was written. After the <c>InventCostTransSum</c> amounts and quantities have been found and
    ///    calculated, the <c>InventCostTrans</c> records between the date of the <c>InventCostTransSum</c>
    ///    record and the given <c>fromDate</c> are found and added to the amounts.
    /// </remarks>
    protected static InventCostAmountHandler getBeginningAmounts(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        InventSiteId            _inventSiteId,
        InventClosing           _inventClosing,
        InventCostTransSum      _inventCostTransSum = null
        )
    {
        InventDim                   inventDim;
        Qty                         qty = 0;
        RecId                       oldInventCostTransRecId = 0;
        InventCostAmountHandler     amounts = InventCostAmountHandler::construct();

        // If no inventClosing is given, the beginning quantity and amounts are zero
        if (_inventClosing)
        {
            TransDate closingDate = _inventClosing.TransDate;

            InventCostTransSum inventCostTransSum = _inventCostTransSum;
            if (!inventCostTransSum)
            {
                select sum(wipOutQty),
                       sum(OnHandQty),
                       sum(cogsQty),
                       sum(wipInQty),
                       sum(DeferredCOGSQty)
                    from inventCostTransSum
                    where inventCostTransSum.InventClosingRefRecId  == _inventClosing.RecId
                       && inventCostTransSum.ItemId                 == _itemId
                       && inventCostTransSum.FinancialInventDimId   == _inventDimId;
            }

            // Find the item that activated at the closing date
            InventTable inventTable = InventTable::find(_itemId);
            InventItemPrice inventItemPrice = InventItemPrice::stdCostFindDate(inventTable, closingDate, _inventDimId, inventDim, _inventSiteId, false);
            AmountMST unitPrice = inventItemPrice.pcsPrice();

            // COGS is not calculated as it is always offset to 0 in order to get the period movement
            amounts.addAmount(inventCostTransSum.OnHandQty * unitPrice, InventCostAmountType::OnHand);
            amounts.addAmount(inventCostTransSum.DeferredCOGSQty * unitPrice, InventCostAmountType::Deferred);
            amounts.addAmount((inventCostTransSum.wipInQty + inventCostTransSum.wipOutQty) * unitPrice, InventCostAmountType::WIP);

            // Distribute quantity according to costgrouprollup
            qty = inventCostTransSum.getQty();
            if (qty != 0)
            {
                Query query = new Query();
                QueryBuildDataSource qbdsInventItemCostGroupRollup = query.addDataSource(tableNum(InventItemCostGroupRollup));
                qbdsInventItemCostGroupRollup.addRange(fieldNum(InventItemCostGroupRollup, InventItemPriceRefRecId)).value(queryValue(inventItemPrice.RecId));
                qbdsInventItemCostGroupRollup.addRange(fieldNum(InventItemCostGroupRollup, Split)).value(queryValue(NoYes::No));
                QueryBuildDataSource qbdsBOMCostGroup = qbdsInventItemCostGroupRollup.addDataSource(tableNum(BOMCostGroup));
                qbdsBOMCostGroup.addLink(fieldNum(InventItemCostGroupRollup, CostGroupId), fieldNum(BOMCostGroup, CostGroupId));

                QueryRun queryRun = new QueryRun(query);
                queryRun.query().recordLevelSecurity(true);
                while (queryRun.next())
                {
                    InventItemCostGroupRollup inventItemCostGroupRollup = queryRun.get(tableNum(InventItemCostGroupRollup));
                    BOMCostGroup bomCostGroup = queryRun.get(tableNum(BOMCostGroup));

                    InventCostReport_CostBase::addAmountBasedOnCostGroup((inventItemCostGroupRollup.CostAmountStd / inventItemCostGroupRollup.Qty) * qty, amounts, bomCostGroup);
                }
            }
        }

        return amounts;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
