<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJobCardDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute(querystr(ProdJobCard))
]
public class ProdJobCardDP extends SRSReportDataProviderBase
{
    ProdJobCardTmp  prodJobCardTmp;
    BarcodeSetupId  barcodeSetupId;
    BarcodeSetup    barcodeSetup;
    Barcode         barcode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barcode</Name>
				<Source><![CDATA[
    protected BarCodeString barcode(ProdRouteJob _prodRouteJob)
    {
        str jobId = strupr(_prodRouteJob.JobId);

        if (barcodeSetup.validateBarcode(jobId))
        {
            barcode.string(true, jobId);
            barcode.encode();
        }
        else
        {
            throw(error(strfmt("@SYS41409", barcode.barcodeType(), jobId)));
        }

        return barcode.barcodeStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementFollowUpTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>ProdJobCardTmp</c> temporary.
    /// </summary>
    /// <returns>
    /// The <c>ProdJobCardTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(ProdJobCardTmp))
    ]
    public ProdJobCardTmp getAgreementFollowUpTmp()
    {
        select * from prodJobCardTmp;
        return prodJobCardTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    protected void insertIntoTempTable(
        ProdTable        _prodTable,
        ProdRoute        _prodRoute,
        ProdRouteJob     _prodRouteJob,
        ProdJournalRoute _journalRoute,
        WrkCtrTable      _wrkCtrTable,
        HcmWorker        _hcmWorker,
        DocuRef          _docuRef,
        HcmWorker        _journalRouteWorker
        )
    {
        prodJobCardTmp.InventRefType    = _prodTable.InventRefType;
        prodJobCardTmp.InventRefId      = _prodTable.InventRefId;
        prodJobCardTmp.ReferenceName    = _prodTable.referenceName();
        prodJobCardTmp.ProdId           = _prodTable.ProdId;
        prodJobCardTmp.Name             = _prodTable.Name;
        prodJobCardTmp.DlvDate          = _prodTable.DlvDate;
        prodJobCardTmp.ItemId           = _prodTable.ItemId;
        prodJobCardTmp.QtyStUp          = _prodTable.QtyStUp;
        prodJobCardTmp.StUpDate         = _prodTable.StUpDate;
        prodJobCardTmp.ItemName         = _prodTable.itemName();

        prodJobCardTmp.OprNum           = _prodRoute.OprNum;
        prodJobCardTmp.OprPriority      = _prodRoute.OprPriority;
        prodJobCardTmp.OprId            = _prodRoute.OprId;
        if (_prodRoute.OprPriority == RouteOprPriority::Primary)
            prodJobCardTmp.CalcQtyPrimary   = _prodRoute.CalcQty;
        prodJobCardTmp.CalcSetUp        = _prodRoute.CalcSetUp;
        prodJobCardTmp.CalcProc         = _prodRoute.CalcProc;

        prodJobCardTmp.OprPriority      = _prodRouteJob.OprPriority;
        prodJobCardTmp.JobId            = _prodRouteJob.JobId;
        prodJobCardTmp.JobType          = _prodRouteJob.JobType;
        prodJobCardTmp.WrkCtrId         = _prodRouteJob.WrkCtrId;
        prodJobCardTmp.FromDate         = _prodRouteJob.FromDate;
        prodJobCardTmp.FromTime         = _prodRouteJob.FromTime;
        prodJobCardTmp.ToDate           = _prodRouteJob.ToDate;
        prodJobCardTmp.ToTime           = _prodRouteJob.ToTime;

        prodJobCardTmp.ProdJournalRoute_ErrorCause  = _journalRoute.ErrorCause;
        prodJobCardTmp.ProdJournalRoute_FromTime    = _journalRoute.FromTime;
        prodJobCardTmp.ProdJournalRoute_JobFinished = _journalRoute.JobFinished;
        prodJobCardTmp.ProdJournalRoute_JobIdPrompt = _journalRoute.JobId;
        prodJobCardTmp.ProdJournalRoute_QtyError    = _journalRoute.QtyError;
        prodJobCardTmp.ProdJournalRoute_QtyGood     = _journalRoute.QtyGood;
        prodJobCardTmp.ProdJournalRoute_ToTime      = _journalRoute.ToTime;
        prodJobCardTmp.ProdJournalRoute_TransDate   = _journalRoute.TransDate;
        prodJobCardTmp.ProdJournalRoute_Hours       = _journalRoute.Hours;

        prodJobCardTmp.ProdJournalRoute_RecId = _journalRoute.RecId;

        prodJobCardTmp.ProdJournalRoute_PersonnelNumber = _journalRouteWorker.PersonnelNumber;

        prodJobCardTmp.DocuRef_Name     = _docuRef.Name;
        prodJobCardTmp.DocuRef_TypeId   = _docuRef.TypeId;
        prodJobCardTmp.DocuRef_Notes    = _docuRef.Notes;

        prodJobCardTmp.PersonnelNumber  = _hcmWorker.PersonnelNumber;

        prodJobCardTmp.Barcode          = this.barcode(_prodRouteJob);

        prodJobCardTmp.insert();
        prodJobCardTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the query of the  <c>ProdJobCard</c>Microsoft SQL Server Reporting Services.
    /// </summary>
    /// <remarks>
    /// The report calls the X++ business logic to populate the data.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun = new QueryRun(this.parmQuery());

        this.setupBarcode();

        while (queryRun.next())
        {
            ProdTable        prodTable    = queryRun.get(tablenum(ProdTable));
            ProdRoute        prodRoute    = queryRun.get(tablenum(ProdRoute));
            ProdRouteJob     prodRouteJob = queryRun.get(tablenum(ProdRouteJob));
            WrkCtrTable      wrkCtrTable  = queryRun.get(tablenum(WrkCtrTable));
            HcmWorker        hcmWorker    = queryRun.get(tablenum(HcmWorker));
            DocuRef          docuRef      = queryRun.get(tablenum(DocuRef));
            ProdJournalRoute journalRoute = queryRun.get(tablenum(ProdJournalRoute));
            HcmWorker journalRouteWorker = queryRun.get(tablenum(HcmWorker), 2);

            this.insertIntoTempTable(prodTable, prodRoute, prodRouteJob, journalRoute, wrkCtrTable, hcmWorker, docuRef, journalRouteWorker);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bar-code settings.
    /// </summary>
    protected void setupBarcode()
    {
        barcodeSetupId = JmgParameters::find().getBarcodeSetupId();
        barcodeSetup = BarcodeSetup::find(barcodeSetupId);
        barcode = barcodeSetup.barcode();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>