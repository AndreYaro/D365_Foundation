<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationEditLinesForm_Proj_Confir</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesQuotationEditLinesFormFactoryAttribute(ModuleAxapta::Project, DocumentStatus::Confirmation)]
class SalesQuotationEditLinesForm_Proj_Confir extends SalesQuotationEditLinesForm_Proj implements BatchRetryable
{
    NumberSeq                       numberSeq;
    Num                             number;

    Voucher                         voucher;

    RecordSortedList                journalList;

    SalesCalcTax                    salesCalcTax;

    CustQuotationConfirmJour        custQuotationConfirmJour;

    CustQuotationConfirmTrans       custQuotationConfirmTrans;

    RecordSortedList                recordListSalesQuotationParmLine;

    SalesQty                        updateNow;
    InventQty                       updateNowInvent;

    AmountCur                       lineValue;
    AmountCur                       lineValueInclTax;

    LineNum                         sumByLineNum;

    LedgerVoucher                   ledgerVoucher;
    boolean                         ledgerVoucherIsSet;

    #localmacro.LinePrefix
        setPrefix(#PreFixField(%1, ItemId)  + ' '
                + %2 );
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    NumberSeq allocateNumAndVoucher()
    {
        return NumberSeq::newGetNum(SalesParameters::numRefQuotationConfirmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLine</Name>
				<Source><![CDATA[
    protected void calcLine(SalesQuotationLine _salesQuotationLine, SalesQuotationParmLine _salesQuotationParmLine)
    {
        _salesQuotationLine = this.getSalesQuotationLine(_salesQuotationParmLine);
        updateNow           = _salesQuotationParmLine.DeliverNow;
        updateNowInvent     = _salesQuotationParmLine.InventNow;
        lineValue           = _salesQuotationLine.calcLineAmountExclTax(updateNow, _salesQuotationParmLine.salesQuotationParmTable().Transdate, tax);
        lineValueInclTax    = _salesQuotationLine.calcLineAmount(updateNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBlockedLevel</Name>
				<Source><![CDATA[
    protected boolean checkBlockedLevel()
    {
        boolean  ok = true;

        if (!CustTable::canCustomerBeUpdated(salesQuotationTable.CustAccount, salesQuotationTable.InvoiceAccount, this.documentStatus()))
        {
            ok = checkFailed(strFmt("@SYS7987",salesQuotationTable.CustAccount));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    protected boolean checkDiscardLine()
    {
        if (salesQuotationParmLine.DeliverNow == 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHeading</Name>
				<Source><![CDATA[
    protected boolean checkHeading()
    {
        boolean  ok = true;

        if (!salesQuotationTable.RecId)
        {
            ok = checkFailed(strFmt("@SYS84605",salesQuotationTable.QuotationId));
        }

        if (!salesQuotationTable.CustAccount && !salesQuotationTable.BusRelAccount)
        {
            // Quotation %1 has no account reference for the customer/prospect table.
            ok = checkFailed(strFmt("@SYS84606",salesQuotationTable.QuotationId));
        }

        if (salesQuotationTable.CustAccount)
        {
            if (!CustTable::exist(salesQuotationTable.CustAccount))
            {
                ok = checkFailed(strFmt("@SYS84607",salesQuotationTable.CustAccount, salesQuotationTable.QuotationId));
            }

            if (!salesQuotationTable.InvoiceAccount)
            {
                ok = checkFailed(strFmt("@SYS84608",salesQuotationTable.QuotationId));
            }
        }
        else if (salesQuotationTable.BusRelAccount && !smmBusRelTable::find(salesQuotationTable.BusRelAccount))
        {
            ok = checkFailed(strFmt("@SYS84607",salesQuotationTable.BusRelAccount, salesQuotationTable.QuotationId));
        }

        if (salesQuotationTable.CurrencyCode && ! Currency::exist(salesQuotationTable.CurrencyCode))
        {
            ok = checkFailed(strFmt("@SYS84610",salesQuotationTable.CurrencyCode,salesQuotationTable.QuotationId));
        }

        if (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Confirmed)
        {
            ok = checkFailed(strFmt("@SCM:QuotationAlreadyConfirmed", salesQuotationTable.quotationId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfSomethingIsPosted</Name>
				<Source><![CDATA[
    protected boolean checkIfSomethingIsPosted()
    {
        if (!salesQuotationLine)
        {
            return checkFailed("@SYS26185");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSales</Name>
				<Source><![CDATA[
    protected boolean checkSales()
    {
        boolean  ok = true;

        // In transactions in order to get enforce selection of eg. CustTable
        ttsbegin;

        if (!this.checkHeading() || !this.checkBlockedLevel())
        {
            ok = false;
        }

        ttscommit;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    boolean createJournal()
    {
        journalList = this.newJournalList();

        salesQuotationTotals = SalesQuotationTotals::construct(salesQuotationParmTable,
                                                               SalesUpdate::All,
                                                               AccountOrder::None,
                                                               this.parmId(),
                                                               salesQuotationTable.QuotationId,
                                                               this.documentStatus());
        salesQuotationTotals.callerModuleType(ModuleAxapta::Project);
        salesQuotationTotals.prepareTotalAmountCalculation();
        salesQuotationTotals.prepareQuantitiesCalculation();

        this.tax(salesQuotationTotals.tax());
        recordListSalesQuotationParmLine = salesQuotationTotals.recordSortedListLine();

        if (!this.checkSales())
        {
            throw error(strFmt("@SYS84612", salesQuotationParmTable.QuotationId));
        }

        this.insertJournal();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    void displayProgress()
    {
        this.progressUpdate(strFmt("@SYS84613",salesQuotationTable.QuotationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::Confirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedEuroTriangulation</Name>
				<Source><![CDATA[
    protected UnknownNoYes fixedEuroTriangulation()
    {
        return(salesQuotationTable.fixedEuroTriangulation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    protected CustExchRate fixedExchRate()
    {
        return(salesQuotationTable.fixedExchRate(true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRateSecondary</Name>
				<Source><![CDATA[
    protected ExchrateSecondary fixedExchRateSecondary()
    {
        return (salesQuotationTable.fixedExchRateSecondary());
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCaption</Name>
				<Source><![CDATA[
    str formLetterCaption()
    {
        return "@SYS5368";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterSorting</Name>
				<Source><![CDATA[
    container formLetterSorting(TableId sortingTableId, FieldId recIdField)
    {
        container                       sortOrder;
        FormLetterSortingParameters     sortingParameters;

        while select Position, FieldId from sortingParameters
            order by Position, FieldId
            where sortingParameters.SortingTableId == sortingTableId
        {
            sortOrder += [sortingParameters.FieldId];
        }

        sortOrder += [recIdField];

        return sortOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    container getNumAndVoucher()
    {
        return [numberSeq.num(), ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesQuotationLine</Name>
				<Source><![CDATA[
    protected SalesQuotationLine getSalesQuotationLine(SalesQuotationParmLine _salesQuotationParmLine, boolean _forUpdate = false)
    {
        SalesQuotationLine  localSalesQuotationLine;

        salesQuotationLine.selectForUpdate(_forUpdate);

        select firstonly localSalesQuotationLine
            where localSalesQuotationLine.RecId == _salesQuotationParmLine.SalesQuotationLineRecId;

        if (!SalesQuotationTable::exist(localSalesQuotationLine.QuotationId))
        {
            throw error("@SYS84618");
        }

        return localSalesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void initJournal()
    {
        custQuotationConfirmJour.clear();
        custQuotationConfirmJour.initValue();

        custQuotationConfirmJour.QuotationConfirmId = number;

        if (!custQuotationConfirmJour.QuotationConfirmId)
        {
            // Quotation confirmation journal id must be filled in.
            throw error("@SYS100046");
        }

        custQuotationConfirmJour.ParmId                 = this.parmId();
        custQuotationConfirmJour.QuotationDate          = salesQuotationParmTable.Transdate;

        custQuotationConfirmJour.initFromSalesQuotationTable(salesQuotationTable);

        custQuotationConfirmJour.setDocNum(salesQuotationTable);

        custQuotationConfirmJour.InterCompanyPosted     = this.interCompanyPosted();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project))
        &&  custQuotationConfirmJour.QuotationType == QuotationType::Project)
        {
            custQuotationConfirmJour.Assessment = this.parmPSAAssessment();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkup</Name>
				<Source><![CDATA[
    protected void initMarkup()
    {
        markup = new Markup(salesQuotationTable.CurrencyCode);
        markup.setTax(this.tax());
        markup.parmExchRate(this.fixedExchRate(), this.fixedExchRateSecondary(), this.fixedEuroTriangulation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournal</Name>
				<Source><![CDATA[
    protected void insertJournal()
    {
        ttsbegin;

        numberSeq           = this.allocateNumAndVoucher();
        [number, voucher]    = this.getNumAndVoucher();

        if (this.updateNow())
        {
            this.postUpdate();

            TransactionLog::create(this.transactionLogType(),this.transactionLogTxt());
            ttscommit;

            if (TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.transitDocument();
            }

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                TaxBusinessService::transferTaxDocument(salesQuotationParmTable, custQuotationConfirmJour);
            }
            // </GTE>
        }
        else
        {
            throw error("@SYS21533");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journal</Name>
				<Source><![CDATA[
    CustQuotationConfirmJour journal()
    {
        return custQuotationConfirmJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    protected RecordSortedList newJournalList()
    {
        RecordSortedList recordSortedList = new RecordSortedList(tableNum(CustQuotationConfirmJour));
        recordSortedList.sortOrderFromContainer(this.formLetterSorting(tableNum(CustQuotationConfirmJour), fieldNum(CustQuotationConfirmJour, RecId)));

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupLine</Name>
				<Source><![CDATA[
    protected void postMarkupLine()
    {
        this.postMarkupOnTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    protected void postMarkupOnJour(SalesQuotationTable _salesQuotationTableMarkup)
    {
        markup.postJournal(1,
                           salesQuotationTotals.totalOrderBalance(_salesQuotationTableMarkup.RecId),
                           _salesQuotationTableMarkup,
                           _salesQuotationTableMarkup.DefaultDimension,
                           custQuotationConfirmJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
    protected void postMarkupOnTrans()
    {
        markup.postJournal(updateNow,
                           lineValue,
                           salesQuotationLine,
                           salesQuotationLine.DefaultDimension,
                           custQuotationConfirmTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    protected void postMarkupTable()
    {
        QueryRun qR = new QueryRun(salesQuotationParmTable.querySalesQuotationParmSubTable());
        while (qR.next())
        {
            SalesQuotationTable salesQuotationTableMarkup = null;
            if (qR.changed(tableNum(SalesQuotationParmSubTable)))
            {
                SalesQuotationParmSubTable salesQuotationParmSubTable = qR.get(tableNum(SalesQuotationParmSubTable));
                salesQuotationTableMarkup = salesQuotationParmSubTable.salesQuotationTable();
            }

            if (!salesQuotationTableMarkup)
            {
                continue;
            }

            this.postMarkupOnJour(salesQuotationTableMarkup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    protected void postTax(boolean post)
    {
        salesCalcTax = SalesCalcTax::construct(this.journal());
        salesCalcTax.tax(this.tax());
        salesCalcTax.post(ledgerVoucher, post);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the report.
    /// </summary>
    protected void printJournal()
    {
        if (printFormletter && journalList.len() > 0)
        {
            custQuotationConfirmJour.printJournal(this, journalList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for sales quotation confirmation.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::Confirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildSalesQuotationTable</Name>
				<Source><![CDATA[
    QueryRun queryBuildSalesQuotationTable()
    {
        QueryRun localQueryRun = new SysQueryRun(queryStr(SalesQuotationUpdate));
        Query query = localQueryRun.query();
        QueryBuildDataSource salesQuotationTabledataSource = query.dataSourceTable(tableNum(SalesQuotationTable));
        salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, CustAccount));

        QueryBuildDataSource salesQuotationLinedataSource = query.dataSourceTable(tableNum(SalesQuotationLine));
        salesQuotationLinedataSource.joinMode(JoinMode::OuterJoin);
        salesQuotationLinedataSource.relations(true);

        SalesQuotation_ProjUtils::addExternalProjectFiltering(query);

        salesQuotationLinedataSource.addSortField(fieldNum(SalesQuotationLine, QuotationId));
        salesQuotationLinedataSource.addSortField(fieldNum(SalesQuotationLine, LineNum));

        if (callerRecordsPackedMap == conNull())
        {
            salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationId)).value(salesQuotationTable.QuotationId);
            // Quotation type = Project
            this.addQuotationTypeRange(salesQuotationTabledataSource);
            
            this.addTemplateNameRange(salesQuotationTabledataSource);

            if (!skipQueryStatusFilter)
            {
                QueryBuildRange queryBuildRangeStatus = salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationStatus));
                queryBuildRangeStatus.value(strFmt('%1', enum2str(SalesQuotationStatus::Sent)));
            }
        }
        else
        {
            Map mapSalesQuotationRecord = Map::create(callerRecordsPackedMap);
            MapEnumerator mapSalesQuotationRecordEnumerator = mapSalesQuotationRecord.getEnumerator();
            numberOfRecords = 0;
            while (mapSalesQuotationRecordEnumerator.moveNext())
            {
                SalesQuotationTable localSalesQuotationTable = mapSalesQuotationRecordEnumerator.currentValue();

                if (!skipQueryStatusFilter)
                {
                    QueryBuildRange queryBuildRangeStatus = salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationStatus));
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        queryBuildRangeStatus.value(strFmt('%1,%2,%3,%4', enum2str(SalesQuotationStatus::Created), enum2str(SalesQuotationStatus::Sent), enum2str(SalesQuotationStatus::Approved), enum2str(SalesQuotationStatus::Revised)));
                    }
                    else
                    {
                        queryBuildRangeStatus.value(strFmt('%1,%2', enum2str(SalesQuotationStatus::Created), enum2str(SalesQuotationStatus::Sent)));
                    }
                    queryBuildRangeStatus.status(RangeStatus::Locked);
                    // Quotation type = Project
                    this.addQuotationTypeRange(salesQuotationTabledataSource);
                }

                if (localSalesQuotationTable.mayConfirmationBeUpdated())
                {
                    if (this.mustAddOpportunityIdRange(localSalesQuotationTable))
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, OpportunityId)).value(queryValue(localSalesQuotationTable.OpportunityId));
                    }
                    else
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(queryValue(localSalesQuotationTable.QuotationId));
                    }

                    numberOfRecords++;
                }
            }
        }

        return localQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddOpportunityIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the range for the opportunity identification field must be added.
    /// </summary>
    /// <param name = "_localSalesQuotationTable">A <c>SalesQuotationTable</c> table buffer that contains the opportunity information.</param>
    /// <returns>
    /// true if the range must be added; otherwise, false. 
    /// </returns>
    protected boolean mustAddOpportunityIdRange(SalesQuotationTable _localSalesQuotationTable)
    {
        return _localSalesQuotationTable.OpportunityId && this.parmUpdateOpportunity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQuotationTypeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a range for the <c>QuotationType</c> field on the <c>SalesQuotationTable</c> table.
    /// </summary>
    /// <param name = "_salesQuotationTableDataSource">
    /// A <c>QueryBuildDataSource</c> instance for the <c>SalesQuotationTable</c> table.
    /// </param>
    protected void addQuotationTypeRange(QueryBuildDataSource _salesQuotationTableDataSource)
    {
        QueryBuildRange queryBuildRangeType = _salesQuotationTableDataSource.addRange(fieldNum(SalesQuotationTable, QuotationType));
        queryBuildRangeType.value(enum2str(QuotationType::Project));
        queryBuildRangeType.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTemplateNameRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a range for the <c>TemplateName</c> field on the <c>SalesQuotationTable</c> table.
    /// </summary>
    /// <param name = "_salesQuotationTableDataSource">
    /// A <c>QueryBuildDataSource</c> instance for the <c>SalesQuotationTable</c> table.
    /// </param>
    protected void addTemplateNameRange(QueryBuildDataSource _salesQuotationTableDataSource)
    {
        QueryBuildRange queryBuildRangeTemplate = _salesQuotationTableDataSource.addRange(fieldNum(SalesQuotationTable, TemplateName));
        queryBuildRangeTemplate.value(SysQuery::valueEmptyString());
        queryBuildRangeTemplate.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        super();

        if (recordsUpdated > 0)
        {
            info(strFmt("@SYS99552", recordsUpdated,"@SYS8985"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProjTransferSelection</Name>
				<Source><![CDATA[
    boolean showProjTransferSelection()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showReasonCode</Name>
				<Source><![CDATA[
    boolean showReasonCode()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    TransTxt transactionLogTxt()
    {
        return "@SYS84614";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    TransactionLogType transactionLogType()
    {
        return TransactionLogType::SalesQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    boolean updateNow()
    {
        this.initJournal();
        this.initMarkup();

        this.displayProgress();

        salesQuotationLine.clear();
        salesQuotationParmLine.clear();

        recordListSalesQuotationParmLine.first(salesQuotationParmLine);
        while (salesQuotationParmLine)
        {
            if (!this.checkDiscardLine())
            {
                salesQuotationLine = this.getSalesQuotationLine(salesQuotationParmLine);

                setPrefix(#PreFixField(salesQuotationLine, QuotationId));

                this.displayProgress();

                if (!salesQuotationLine.CustAccount)
                {
                    throw error(strFmt("@SYS99269",salesQuotationLine.QuotationId));
                }

                if (!salesQuotationLine.checkInventDim())
                {
                    throw error("@SYS319221");
                }

                #LinePrefix(salesQuotationLine, salesQuotationLine.inventdim().preFixProductDim(EcoResProductDimGroupSetup::newItemId(salesQuotationLine.ItemId)))

                this.calcLine(salesQuotationLine, salesQuotationParmLine);
                this.writeJournalLine();
                this.postMarkupLine();
            }

            if (!recordListSalesQuotationParmLine.next(salesQuotationParmLine))
            {
                break;
            }
        }

        if (!this.checkIfSomethingIsPosted())
        {
            return false;
        }

        progress.setText("@SYS25781");
        this.writeJournal();
        this.postMarkupTable();
        this.postTax(false);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournal</Name>
				<Source><![CDATA[
    protected void writeJournal()
    {
        if (lineDeliveryName || lineDeliveryPostalAddress)
        {
            custQuotationConfirmJour.DeliveryPostalAddress     = lineDeliveryPostalAddress;
            custQuotationConfirmJour.DeliveryName              = lineDeliveryName;
        }

        custQuotationConfirmJour.SalesBalance      = salesQuotationTotals.totalBalance();
        custQuotationConfirmJour.CostValue         = salesQuotationTotals.totalCostValue();
        custQuotationConfirmJour.EndDisc           = salesQuotationTotals.totalEndDisc();
        custQuotationConfirmJour.SumLineDisc       = salesQuotationTotals.totalLineDisc();
        custQuotationConfirmJour.SumMarkup         = salesQuotationTotals.totalMarkup();
        custQuotationConfirmJour.SumTax            = salesQuotationTotals.totalTaxAmount();
        custQuotationConfirmJour.RoundOff          = salesQuotationTotals.totalRoundOff();

        custQuotationConfirmJour.RespiteDate       = salesQuotationParmUpdate.RespiteDate ? salesQuotationParmUpdate.RespiteDate
                                                                                   : salesQuotationTable.QuotationExpiryDate;
        custQuotationConfirmJour.QuotationAmount   = salesQuotationTotals.totalAmount();

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            custQuotationConfirmJour.QuotationAmount   = salesQuotationTotals.totalAmountGTE();
        }
        // </GTE>

        custQuotationConfirmJour.insert();

        Docu::copy(salesQuotationTable, custQuotationConfirmJour);

        journalList.ins(custQuotationConfirmJour);

        this.writeTmpTaxWorkTrans(custQuotationConfirmJour.RecId);
        journalTmpTaxWorkTrans.copyFromTax(
            this.tax(),
            custQuotationConfirmJour.RecId,
            custQuotationConfirmJour.TableId);

        this.writeJournalSalesLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalLine</Name>
				<Source><![CDATA[
    protected void writeJournalLine()
    {
        Label   label = new Label(custQuotationConfirmJour.LanguageId);
        SalesQuotationTable lineSalesQuotationTable = salesQuotationLine.salesQuotationTable();

        super();

        custQuotationConfirmTrans.initFromSalesQuotationLine(salesQuotationLine);
        custQuotationConfirmTrans.setLinenum(sumByLineNum);
        sumByLineNum++;

        custQuotationConfirmTrans.SalesId               = custQuotationConfirmJour.SalesId;
        custQuotationConfirmTrans.QuotationConfirmId    = custQuotationConfirmJour.QuotationConfirmId;
        custQuotationConfirmTrans.QuotationDate         = custQuotationConfirmJour.QuotationDate;
        custQuotationConfirmTrans.Qty                   = updateNow;
        custQuotationConfirmTrans.InventQty             = updateNowInvent;
        custQuotationConfirmTrans.LineAmount            = lineValue;
        custQuotationConfirmTrans.LineAmountTax         = lineValueInclTax - lineValue;

        custQuotationConfirmTrans.TaxWriteCode          = this.tax().taxWriteCode();

        custQuotationConfirmTrans.LineHeader = label.extractString(literalStr("@SYS84505"))    + ' ' + salesQuotationLine.QuotationId                   + ' '
                                      + label.extractString(literalStr("@SYS24704")) + ' ' + lineSalesQuotationTable.CustAccount  + ' '
                                      + label.extractString(literalStr("@SYS7924")) + ' ' + salesQuotationLine.deliveryAddress().Address                + ' '
                                      + (lineSalesQuotationTable.CustPurchaseOrder ? (label.extractString(literalStr("@SYS9452")) + ' ' + lineSalesQuotationTable.CustPurchaseOrder + ' ') : '')
                                      + custQuotationConfirmTrans.LineHeader;

        custQuotationConfirmTrans.LineAmountMST     = custQuotationConfirmJour.amountMST(custQuotationConfirmTrans.LineAmount);
        custQuotationConfirmTrans.LineAmountTaxMST  = custQuotationConfirmJour.amountMST(custQuotationConfirmTrans.LineAmountTax);

        if (InventReportDimHistory::canCreateHistory(custQuotationConfirmTrans))
        {
            InventReportDimHistory::addFromCustQuotationConfirmTrans(custQuotationConfirmTrans);
        }
        custQuotationConfirmTrans.insert();

        Docu::copy(salesQuotationLine, custQuotationConfirmTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalSalesLink</Name>
				<Source><![CDATA[
    protected void writeJournalSalesLink()
    {
        SalesQuotationParmLine              localSalesQuotationParmLine;
        CustQuotationConfirmSalesLink       custQuotationConfirmSalesLink;
        CustQuotationConfirmSalesLink       custQuotationConfirmSalesLinkRef;

        ttsbegin;

        while select localSalesQuotationParmLine
            where localSalesQuotationParmLine.ParmId        == salesQuotationParmTable.ParmId
               && localSalesQuotationParmLine.QuotationId   == salesQuotationTable.QuotationId
        {
            custQuotationConfirmSalesLink.clear();
            custQuotationConfirmSalesLink.initFromSalesQuotationParmLine  (localSalesQuotationParmLine);
            custQuotationConfirmSalesLink.initFromSalesQuotationTable     (SalesQuotationTable::find(localSalesQuotationParmLine.OrigQuotationId));
            custQuotationConfirmSalesLink.initFromCustQuotationConfirmJour       (custQuotationConfirmJour);

            // exist() can not be used - OrigSalesId is <blank>
            select firstonly RecId from custQuotationConfirmSalesLinkRef
                where custQuotationConfirmSalesLinkRef.QuotationConfirmId   == custQuotationConfirmSalesLink.QuotationConfirmId    &&
                      custQuotationConfirmSalesLinkRef.QuotationDate        == custQuotationConfirmSalesLink.QuotationDate  &&
                      custQuotationConfirmSalesLinkRef.OrigSalesId          == custQuotationConfirmSalesLink.OrigSalesId;
            if (!custQuotationConfirmSalesLinkRef.RecId)
            {
                custQuotationConfirmSalesLink.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    [SysObsolete('The method has been deprecated, use TmpTaxWorkTrans.copyFromTax method instead.', false, 20\7\2020)]
    void writeTmpTaxWorkTrans(RecId headingRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@SYS84615";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        CustQuotationConfirmTrans       custQuotationConfirmTransLoc;
        SalesQuotationParmLine          salesQuotationParmLineLoc;
        TransitDocumentManager_IN transitDocManager = TransitDocumentManager_IN::newManager();

        transitDocManager.transit(salesQuotationParmTable, custQuotationConfirmJour);

        while select custQuotationConfirmTransLoc
                where custQuotationConfirmTransLoc.SalesId                  == custQuotationConfirmJour.SalesId
                    && custQuotationConfirmTransLoc.QuotationConfirmId      == custQuotationConfirmJour.QuotationConfirmId
                    && custQuotationConfirmTransLoc.QuotationDate           == custQuotationConfirmJour.QuotationDate
                join salesQuotationParmLineLoc
                    where salesQuotationParmLineLoc.InventTransId        == custQuotationConfirmTransLoc.InventTransId
                        && salesQuotationParmLineLoc.ParmId              == salesQuotationParmTable.ParmId
                        && salesQuotationParmLineLoc.TableRefId          == salesQuotationParmTable.TableRefId
                        && salesQuotationParmLineLoc.QuotationId         == salesQuotationParmTable.QuotationId
        {
            transitDocManager.transit(salesQuotationParmLineLoc, custQuotationConfirmTransLoc, custQuotationConfirmJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>