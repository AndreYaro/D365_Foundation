<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResSearchCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resource search criteria.
/// </summary>
public class ResSearchCriteria
{
    private const str criteriaFormat = "%1:'%2'";
    private const str criteriaDelimiter = ";";
    private const str argumentDelimiter = ":";
    private Map criteria;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setCriteriaItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the search criteria.
    /// </summary>
    /// <param name = "_searcCriteriaItem">Search criteria.</param>
    /// <returns>True when operation succeeds. Otherwise, false.</returns>
    public boolean setCriteriaItem(ResISearchCriteriaItem _searcCriteriaItem)
    {
        ClassId classId = classIdGet(_searcCriteriaItem);
        criteria.insert(classId, _searcCriteriaItem);
        return _searcCriteriaItem && true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCriteriaItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the search criteria.
    /// </summary>
    /// <param name = "_classId">Search criteria class identifier.</param>
    /// <returns>True when operation succeeds. Otherwise, false.</returns>
    public boolean removeCriteriaItem(ClassId _classId)
    {
        if (criteria.exists(_classId))
        {
            criteria.remove(_classId);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCriteriaItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the search criteria argument.
    /// </summary>
    /// <param name = "_classId">Search criteria class identifier.</param>
    /// <returns>String argument value.</returns>
    public ResISearchCriteriaItem getCriteriaItem(ClassId _classId)
    {
        if (criteria.exists(_classId))
        {
            ResISearchCriteriaItem searchCriteria = criteria.lookup(_classId);
            return searchCriteria;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCriteriaString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the criteria string.
    /// </summary>
    /// <returns>String search criteria.</returns>
    public str getCriteriaString()
    {
        MapEnumerator enumerator = this.getCriteriaEnumerator();
        str criteriaStr;
        str format = "%1";

        while (enumerator.moveNext())
        {
            ResISearchCriteriaItem searchCriteria = enumerator.currentValue();
            str criteriaItem = strFmt(criteriaFormat, enumerator.currentKey(), searchCriteria.getValues());
            criteriaStr = strFmt(format, criteriaItem, criteriaStr, criteriaDelimiter);
            format = "%2%3%1";
        }

        return criteriaStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCriteriaRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the criteria records.
    /// </summary>
    /// <returns>Search criteria in tableBuffer.</returns>
    public ResTmpCharacteristicSelected getCriteriaRecords()
    {
        ResTmpCharacteristicSelected selected;
        MapEnumerator enumerator = this.getCriteriaEnumerator();

        while (enumerator.moveNext())
        {
            ResISearchCriteriaItem searchCriteriaItem = enumerator.currentValue();
            Enumerator valuesEnumerator = searchCriteriaItem.getCriteriaItemValuesEnumerator();

            while (valuesEnumerator.moveNext())
            {
                str characteristicId = valuesEnumerator.current();
                if (characteristicId)
                {
                    selected.CharacteristicSet = ResSearchCriteriaItemFactory::getCharacteristicSet(classIdGet(searchCriteriaItem));
                    selected.CharacteristicId = characteristicId;
                    selected.insert();
                }
            }
        }

        return selected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCriteriaEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enumerator of search criteria objects.
    /// </summary>
    /// <returns>Criteria objects enumerator.</returns>
    public MapEnumerator getCriteriaEnumerator()
    {
        return criteria.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new resource search criteria.
    /// </summary>
    protected void new ()
    {
        criteria = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a resource search criteria.
    /// </summary>
    /// <returns>Instance of <c>ResSearchCriteria</c>.</returns>
    public static ResSearchCriteria construct()
    {
        ResSearchCriteria searchCriteria = new ResSearchCriteria();
        return searchCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a resource search criteria based on the specified search string.
    /// </summary>
    /// <param name = "_searchString">Search criteria string.</param>
    /// <returns>Instance of <c>ResSearchCriteria</c>.</returns>
    public static ResSearchCriteria createCriteria(str _searchString)
    {
        ResSearchCriteria searchCriteria = ResSearchCriteria::construct();

        if (_searchString)
        {
            List criteriaSet = strSplit(_searchString, criteriaDelimiter);
            ListEnumerator enumerator = criteriaSet.getEnumerator();

            str criteriaItem;
            int criteriaLength;
            int delimiterPosition;
            ClassId classId;
            str argument;

            while (enumerator.moveNext())
            {
                criteriaItem = enumerator.current();
                criteriaLength = strLen(criteriaItem);
                delimiterPosition = strScan(criteriaItem, argumentDelimiter, 1, criteriaLength);
                classId = str2Int(subStr(criteriaItem, 1, delimiterPosition - 1));
                argument = subStr(criteriaItem, delimiterPosition + 1, criteriaLength);
                argument = strReplace(argument, "'", "");

                ResISearchCriteriaItem searchCriteriaItem = ClassFactory::makeObjectOnServer(classId);

                if (searchCriteriaItem)
                {
                    searchCriteriaItem.setValues(argument);
                    searchCriteria.setCriteriaItem(searchCriteriaItem);
                }
            }
        }

        return searchCriteria;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
