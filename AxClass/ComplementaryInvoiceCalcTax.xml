<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ComplementaryInvoiceCalcTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ComplementaryInvoiceCalcTax</c> class calculates tax amount and provide data to tax engine
/// for complementary invoices.
/// </summary>
abstract class ComplementaryInvoiceCalcTax
{
    boolean             update;
    AmountCur           balance;

    TaxComplementaryInvoice tax;
    QueryRun            queryTransact;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalICMSAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves additional ICMS amount for the current line.
    /// </summary>
    /// <returns>
    /// The additional ICMS amount for the current line.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract TaxAmount additionalICMSAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalIPIAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the additional IPI amount for the current line.
    /// </summary>
    /// <returns>
    /// The additional IPI amount for the current line.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract TaxAmount additionalIPIAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves base amount for the current line.
    /// </summary>
    /// <returns>
    /// The base amount for the current line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract AmountCur  baseAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates taxes for a complementary invoice.
    /// </summary>
    /// <param name="_balance">
    /// The balance to be added to the amount.
    /// </param>
    /// <returns>
    /// The tax amount calculated.
    /// </returns>
    [Replaceable]
    public TaxAmountCur  calcTax(AmountCur    _balance)
    {
        TaxCalculation  taxCalculation;
        TaxAmountCur    amountCur;
        boolean         loadTaxUncommitted;
        Voucher         ledgerVoucher;

        balance         = _balance;
        loadTaxUncommitted = TaxUncommitted::existByDocumentId(this.tableId(), this.recID());
        taxCalculation = TaxCalculation::newForSourceTypeWithTaxUncommitted(TaxSourceType::ComplementaryInvoice, this, loadTaxUncommitted, false);
        ledgerVoucher = this.ledgerVoucher();

        if (TaxTrans::exist(ledgerVoucher, this.documentDate(), ''))
        {
            amountCur       = Tax::taxTotal(ledgerVoucher, this.documentDate());
        }
        else
        {
            if (loadTaxUncommitted)
            {
                amountCur       = taxCalculation.totalTaxAmount();
            }
            else
            {
                amountCur       = taxCalculation.calculateTax();
            }
        }

        this.tax(taxCalculation);
        return -amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>complementaryType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the complementary type of the current invoice.
    /// </summary>
    /// <returns>
    /// The complementary type of the current invoice.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract InvoiceComplementaryType_BR complementaryType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for this complementary invoice.
    /// </summary>
    /// <returns>
    /// The currency code for this complementary invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract CurrencyCode currencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default dimension for the current complementary line.
    /// </summary>
    /// <returns>
    /// Default dimension for the current complementary line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract DimensionDefault defaultDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description of the current line.
    /// </summary>
    /// <returns>
    /// The description of the current line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract Name description()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the document date for the current invoice.
    /// </summary>
    /// <returns>
    /// The document date for the current invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract date documentDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the exchange rate for the current invoice.
    /// </summary>
    /// <param name="_date">
    /// The date from which to retrieve the exchange rate.
    /// </param>
    /// <returns>
    /// The exchange rate for the current invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the secondary exchange rate for the current invoice.
    /// </summary>
    /// <param name="_date">
    /// The date from which to retrieve the exchange rate.
    /// </param>
    /// <returns>
    /// The secondary exchange rate for the current invoice.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the cursor to traverse the lines.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract void  initCursor()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice date for the current invoice.
    /// </summary>
    /// <returns>
    /// The invoice date for the current invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract TransDate invoiceDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger voucher for the current invoice.
    /// </summary>
    /// <returns>
    /// The ledger voucher for the current invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract Voucher ledgerVoucher()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Go to the next line of this invoice.
    /// </summary>
    /// <returns>
    /// A buffer that corresponds to the next record; null of there is no more lines.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract Common nextLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the operation account for this invoice.
    /// </summary>
    /// <returns>
    /// The operation account for this invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract LedgerDimensionAccount operationAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger posting type for this invoice.
    /// </summary>
    /// <returns>
    /// The ledger posting type for this invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract LedgerPostingType operationPosting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the taxes.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// An instance of the <c>LedgerPostingController</c> class to help with the posting.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void post(LedgerPostingController _ledgerPostingController)
    {
        TaxPost taxPost;

        taxPost = TaxPost::newForSourceType(TaxSourceType::ComplementaryInvoice, this, true);
        taxPost.updateAndPost(_ledgerPostingController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a record from the <c>QueryRun</c> object.
    /// </summary>
    /// <param name="_queryRun">
    /// A <c>QueryRun</c> object from which to retrieve the record.
    /// </param>
    /// <returns>
    /// A record from the query.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract Common queryGet(QueryRun _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>recID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the current invoice.
    /// </summary>
    /// <returns>
    /// The record ID of the current invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract recId  recID()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of the current invoice.
    /// </summary>
    /// <returns>
    /// The table ID of the current invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract tableId  tableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>Tax</c> object.
    /// </summary>
    /// <param name="_tax">
    /// The <c>Tax</c> object to be set, optional.
    /// </param>
    /// <returns>
    /// The current instance of <c>Tax</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxComplementaryInvoice tax(TaxComplementaryInvoice _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxation origin of the current complementary invoice line
    /// </summary>
    /// <returns>
    /// A taxation origin
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract FITaxationOrigin_BR taxationOrigin()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax module type of the current complementary invoice.
    /// </summary>
    /// <returns>
    /// The tax module type of the current complementary invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract TaxModuleType taxModuleType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>TaxGroup</c> value of the current record.
    /// </summary>
    /// <returns>
    /// The <c>TaxGroup</c> value of the current record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract TaxGroup transTaxGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>TaxItemGroup</c> value of the current record.
    /// </summary>
    /// <returns>
    /// The <c>TaxItemGroup</c> value of the current record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract TaxItemGroup transTaxItemGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the operation is for a final user.
    /// </summary>
    /// <returns>
    /// true if is for a final user; otherwise, false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract boolean useAndConsumption()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>