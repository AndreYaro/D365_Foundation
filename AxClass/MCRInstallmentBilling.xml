<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRInstallmentBilling</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRInstallmentBilling</c> class used for paying an order on installment.
/// </summary>
class MCRInstallmentBilling
{
    // Whether or not the user is prompted with an info message,
    // Informing the user that installment billing plans are available.
    boolean                         promptForIB;

    SalesTable                      salesTable;

    // This set holds all eligible inst plans
    Set                             eligibleInstPlans;
    // Total eligible inst billing amount
    AmountCur                       totalSOIBAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyInstallmentPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the installment plan to the sales order.
    /// </summary>
    /// <param name="_mcrInstallmentPlanSalesTable">
    /// The installment plan to be copied to.
    /// </param>
    /// <remarks>
    /// Only one installmetn plan is allowed per sales order.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If the passed in record does not have a payment schedule ID, throws an error.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If the installment plan is not found, throws an error.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If the number of installments selected is not supported, throws an error.
    /// </exception>
    public void copyInstallmentPlan(mcrInstallmentPlanSalesTable _mcrInstallmentPlanSalesTable)
    {
        CustVendPaymSched           custVendPaymSched;
        PaymSched                   paymSched;

        if (!_mcrInstallmentPlanSalesTable.PaymSchedId)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
        paymSched = paymSched::find(_mcrInstallmentPlanSalesTable.PaymSchedId);
        if (!paymSched)
        {
            // payment schedule is not found
            throw error ("@MCR30778");
        }
        // Do not recalculate the schedule lines if any lines have been invoiced.
        else if (!_mcrInstallmentPlanSalesTable.hasBeenInvoiced()
                && !_mcrInstallmentPlanSalesTable.hasAnyPayments())
        {
            // Copy the plan
            _mcrInstallmentPlanSalesTable.Description = paymSched.Description;

            // should only set the FlexNumber once per sales order
            if (paymSched.MCRFlexiblePlan && _mcrInstallmentPlanSalesTable.FlexNumInstallments == 0)
            {
                // prompt user
                _mcrInstallmentPlanSalesTable.FlexNumInstallments = this.promptForNumInstallments(paymSched);
                // validate entry
                if (paymSched.MCRMinNumInstallments > _mcrInstallmentPlanSalesTable.FlexNumInstallments ||
                   paymSched.MCRMaxNumInstallments < _mcrInstallmentPlanSalesTable.FlexNumInstallments)
                {
                    throw error("@MCR30777");
                }
            }

            ttsbegin;
            _mcrInstallmentPlanSalesTable.selectForUpdate(true);
            _mcrInstallmentPlanSalesTable.write(); 

            salesTable.selectForUpdate(true);
            salesTable.reread();
            salesTable.PaymentSched = _mcrInstallmentPlanSalesTable.PaymSchedId;
            salesTable.update();
            ttscommit;

            if (_mcrInstallmentPlanSalesTable.FlexNumInstallments)
            {
                paymSched.PaymBy = PaymSchedBy::NumOfPayment;
                paymSched.NumOfPayment = _mcrInstallmentPlanSalesTable.FlexNumInstallments;
            }
            custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust, salesTable);
            custVendPaymSched.createPaymSched(paymSched);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEligibleInstPlans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the user is prompted with
    /// an info message, informing them that installment plans exist.
    /// </summary>
    /// <remarks>
    /// The valid plans are stored in a set and can be retrieved for plan selection.
    /// The method assumes that there is atleast 1 eligible item on the sales order.
    /// </remarks>
    private void getEligibleInstPlans()
    {
        PaymSched           paymSched;
        MCRInstallmentSetup mcrInstallmentSetup;
        Catalog             catalog;
        SalesLine           salesLine;
        InventItemGroupItem inventItemGroupItem;
        MCRSalesLine        mcrSalesLine;
        MCRSourceCodeSetup  mcrSourceCodeSetup;

        // initialize the set
        this.initPlanSet();

        mcrSourceCodeSetup = MCRSourceCodeSetup::find(salesTable.mcrSalesTable().SourceId);
        catalog = Catalog::find(mcrSourceCodeSetup.Catalog);

        // If the offer on the sales order only allows it's on plans then only get those
        if (mcrSourceCodeSetup
            && mcrSourceCodeSetup.OnlyCatalogPlans)
        {
            while select paymSched
                join  PaymSchedId
                from  mcrInstallmentSetup
                where mcrInstallmentSetup.PaymSchedId   == paymSched.Name
                   && mcrInstallmentSetup.Catalog       == mcrSourceCodeSetup.Catalog
            {
                if (this.validateInstBillingPlan(paymSched.Name))
                {
                    // Only add the plan once
                    if (!eligibleInstPlans.in(paymSched))
                    {
                        eligibleInstPlans.add(paymSched);
                    }
                }
            }
        }
        else
        {
            // Otherwise need to loop through and get all plans tied to the
            //  sales lines item/group and the sales orders offer and the offers
            //      promotional items
            while select SalesId, ItemId from  salesLine
                where salesLine.SalesId == salesTable.SalesId
                join ItemGroupId from inventItemGroupItem
                    where inventItemGroupItem.ItemId == salesLine.ItemId
                       && inventItemGroupItem.ItemDataAreaId == salesLine.dataAreaId
                join PaymSchedId from  mcrInstallmentSetup
                    where (mcrInstallmentSetup.ItemId
                        &&    mcrInstallmentSetup.ItemId        == salesLine.ItemId)
                        ||   (mcrInstallmentSetup.ItemGroupId
                        &&    mcrInstallmentSetup.ItemGroupId   == inventItemGroupItem.ItemGroupId)
                        ||   (mcrInstallmentSetup.Catalog
                        &&    mcrInstallmentSetup.Catalog       == catalog.RecId)
                join paymSched
                    where paymSched.Name == mcrInstallmentSetup.PaymSchedId
                exists join mcrSalesLine
                    where mcrSalesLine.InstallmentEligible == NoYes::Yes
                        && mcrSalesLine.SalesLine == salesLine.RecId
            {
                if (!eligibleInstPlans.in(paymSched)
                        && this.validateInstBillingPlan(paymSched.Name))
                {
                    eligibleInstPlans.add(paymSched);
                }
            }
            // Any payment schedule that is not assigned to an
            //      item/item group/catalog can be used on any order
            while select paymSched
                notExists join mcrInstallmentSetup
                where mcrInstallmentSetup.PaymSchedId == paymSched.Name
            {
                eligibleInstPlans.add(paymSched);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPlanSet</Name>
				<Source><![CDATA[
    private void initPlanSet()
    {
        eligibleInstPlans       = new Set(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPlanValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the passed installment plan is valid.
    /// </summary>
    /// <param name="_paymSchedId">
    /// The payment schedule ID to be validated.
    /// </param>
    /// <returns>
    /// true if the installment plan is valid; otherwise, false.
    /// </returns>
    public boolean isPlanValid(PaymSchedId _paymSchedId)
    {
        PaymSched paymSched;

        if (_paymSchedId)
        {
            if (!eligibleInstPlans)
            {
                this.getEligibleInstPlans();
            }

            paymSched = PaymSched::find(_paymSchedId);

            if (eligibleInstPlans.in(paymSched))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SalesTable</c> class variable to the passed record.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record to be used to set the class variable.
    /// </param>
    public void new(SalesTable _salesTable)
    {
        salesTable = _salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForNumInstallments</Name>
				<Source><![CDATA[
    private MCRFlexNumInstallments promptForNumInstallments(PaymSched _paymSched)
    {
        Dialog          dialogNumInstallments;

        DialogField     numOfPayments;
        DialogField     minNumOfPayments;
        DialogField     maxNumOfPayments;
        // create the dialog
        dialogNumInstallments = new Dialog("@MCR30775");

        // Min number of installments user can choose
        minNumOfPayments = dialogNumInstallments.addField(extendedTypeStr(MCRMinNumInstallments));
        minNumOfPayments.value(_paymSched.MCRMinNumInstallments);
        minNumOfPayments.enabled(false);

        // Max number of installments user can choose
        maxNumOfPayments = dialogNumInstallments.addField(extendedTypeStr(MCRMaxNumInstallments));
        maxNumOfPayments.value(_paymSched.MCRMaxNumInstallments);
        maxNumOfPayments.enabled(false);

        // Number of installments to calculate the plan for
        numOfPayments = dialogNumInstallments.addField(extendedTypeStr(MCRFlexNumInstallments));

        // center the dialog
        dialogNumInstallments.dialogForm().buildDesign().topMode(3);
        dialogNumInstallments.dialogForm().buildDesign().leftMode(4);
        dialogNumInstallments.run();

        return numOfPayments.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInstBillingPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the installment billing plan.
    /// </summary>
    /// <param name="_paymSchedId">
    /// The <c>PaymSchedId</c> of the payment schedule to be validated.
    /// </param>
    /// <returns>
    /// true if the installment billing plan is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Assumes that the plan minimum amount is checked against the total eligible installment billing
    /// amount, even if the actual amount might be less due to a down payment.
    /// Dates are checked against the sales table creation date.
    /// Lines could have different dates.
    /// </remarks>
    private boolean validateInstBillingPlan(PaymSchedId    _paymSchedId)
    {
        PaymSched               paymSched = PaymSched::find(_paymSchedId);
        boolean                 validInstPlan = true;
        AmountCur               convertedMinOrderValue;
        AmountCur               convertedMaxOrderValue;
        AmountCur               installmentEligibleTotal;
        MCRSalesOrderTotals     mcrSalesOrderTotals;

        // Does the plan exist
        if (!paymSched)
        {
            validInstPlan = false;
        }
        if (paymSched.MCRMinOrderValue
            || paymSched.MCRMaxOrderValue)
        {
            convertedMinOrderValue =
                CurrencyExchangeHelper::curAmount2CurAmount(paymSched.MCRMinOrderValue, CompanyInfoHelper::standardCurrency(), salesTable.CurrencyCode);

            convertedMaxOrderValue =
                CurrencyExchangeHelper::curAmount2CurAmount(paymSched.MCRMaxOrderValue, CompanyInfoHelper::standardCurrency(), salesTable.CurrencyCode);

            mcrSalesOrderTotals = new MCRSalesOrderTotals(salesTable);
            installmentEligibleTotal = mcrSalesOrderTotals.getInstallmentEligibleTotal();
            // Installment eligible amount should be greater than the min and lesser than the max
            if ((convertedMinOrderValue && installmentEligibleTotal < convertedMinOrderValue)
                || (convertedMaxOrderValue && installmentEligibleTotal > convertedMaxOrderValue))
            {
                validInstPlan = false;
            }
        }
        return validInstPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validPaymentSchedules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a comma separated list of valid payment schedule record ID's.
    /// </summary>
    /// <returns>
    /// A comma separated list of valid payment schedule record ID's.
    /// </returns>
    public str validPaymentSchedules()
    {
        SetEnumerator   enumerator;
        PaymSched       paymSched;
        str             ret;

        if (!eligibleInstPlans)
        {
            this.getEligibleInstPlans();
        }
        enumerator = eligibleInstPlans.getEnumerator();

        while (enumerator.moveNext())
        {
            paymSched = enumerator.current();
            if (paymSched)
            {
                ret += int642str(paymSched.RecId) + ', ';
            }
        }

        if (ret != "") //Remove the last ', ', if the variable ret has been set at all.
        {
            ret = subStr(ret, 1, strLen(ret) - 2); //Remove the last ', '.
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>