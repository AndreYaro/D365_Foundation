<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableDepConv_MidMonth_15th</Name>
	<SourceCode>
		<Declaration><![CDATA[
//
//  The primary functionality of this class type is to calculate the
//  asset depreciation amounts for fixed assets employing a depreciation
//  convention of 'Mid-Month 15th'. For this purpose this class type must always
//  be used in conjuction with the AssetTableMethod_SL and
//  AssetTableMethod_RB asset depreciation amount calculation classes.
//
//  This secondary functionality of this class type is to calculate the
//  asset depreciation start date for fixed assets employing a depreciation
//  convention.
//
[AssetTableDepConvAttribute(AssetDepreciationConvention::MidMonth15)]
public class AssetTableDepConv_MidMonth_15th extends AssetTableDepConv
{
    Percent     midMonthPercentage;
    Factor      midMonthFactor;
    Months      monthsInYear;
    boolean     isFirstMonth;
    boolean     isLastMonth;

    #DEFINE.HalfMonthFactor(0.5)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustLastDepreciationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the projected depreciation date based on a given depreciation convention.
    /// </summary>
    /// <param name="_endDate">
    /// A date to adjust
    /// </param>
    /// <param name="_partialPeriod">
    /// Value model's life remaining.
    /// </param>
    /// <returns>
    /// Adjusted date of the last projected depreciation date.
    /// </returns>
    protected TransDate adjustLastDepreciationDate(TransDate _endDate, real _partialPeriod = 0)
    {
        return depreciationInterval.findMiddleOfPeriod(_endDate) - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RB</Name>
				<Source><![CDATA[
    //
    //  This method calculates the "Reducing Balance" type period depreciation amount
    //  for the asset's current transaction.
    //
    public AssetAmount calc_RB(AssetAmount  _basisForDepreciation,
                               AssetAmount  _prevDepAmountThisYear,
                               TransDate    _depreciationDate,
                               AssetDepreciationTime _periods)
    {
        AssetAmount                 estimatedYearlyDepreciation;
        AssetAmount                 firstLastMonthDepreciation;
        AssetAmount                 netAmountToDepreciate;
        AssetAmount                 prevDepAmountThisYear = _prevDepAmountThisYear;
        AssetAmount                 retValue = 0.00;
        AssetAmount                 periodAmount;
        TransDate                   origAssetPeriodDate;
        AssetDepreciationTime       numberOfPeriodsLeftInYear;
        AssetDepreciationTime       numberOfPeriodsInInterval;

        //
        //  Reducing Balance cannot have a last year because it is percentage not period based.
        //  Depreciations using Reducing Balance usually switch to a "Straight Line" method of
        //  depreciation in order to fully depreciate the asset within its lifetime.
        //
        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods, true);
            this.setMidMonthPercentage();
            if (isFirstYear)
            {
                estimatedYearlyDepreciation     = _basisForDepreciation *
                                                  midMonthPercentage;

                firstLastMonthDepreciation      = (estimatedYearlyDepreciation / midMonthFactor) / 2;

                netAmountToDepreciate = estimatedYearlyDepreciation - _prevDepAmountThisYear;

                //
                //  Depending on the AssetAccrual (Monthly, Quarterly, Half-yearly, or Yearly)
                //  this loop is designed to work at a "Monthly" level and roll up the calculated
                //  amounts to meet the requirements of the larger accruals.
                //  This functionality was needed in order to meet the specific first and last
                //  month requirements of this depreciation convention
                //
                origAssetPeriodDate = assetPeriodDate;
                while (depreciationInterval.findLastDayOfPeriod(assetPeriodDate) <= _depreciationDate)
                {
                    numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                    numberOfPeriodsInInterval = 1;

                    this.checkIsFirstMonth(depreciationInterval.findLastDayOfPeriod(assetPeriodDate));
                    if (isFirstMonth)
                    {
                        numberOfPeriodsLeftInYear = (depreciationInterval.periodOfYear(
                            depreciationInterval.findLastDayOfPeriod(assetBook.DepreciationStartDate))
                            - depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfPeriod(assetPeriodDate))) + 1;
                        netAmountToDepreciate = firstLastMonthDepreciation - prevDepAmountThisYear;

                        periodAmount = this.getPeriodAmount(
                            netAmountToDepreciate,
                            numberOfPeriodsInInterval,
                            numberOfPeriodsLeftInYear);
                        
                        if (periodAmount)
                        {
                            prevDepAmountThisYear += periodAmount;
                            retValue += periodAmount;
                        }
                        assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;
                    }
                    else
                    {
                        netAmountToDepreciate = estimatedYearlyDepreciation - prevDepAmountThisYear;

                        periodAmount = this.getPeriodAmount(
                            netAmountToDepreciate,
                            numberOfPeriodsInInterval,
                            numberOfPeriodsLeftInYear);

                        prevDepAmountThisYear += periodAmount;
                        retValue += periodAmount;
                        assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;
                    }
                }
                assetPeriodDate = origAssetPeriodDate;
            }
            else
            {
                retValue = this.calc_ReducingBalance(_basisForDepreciation, _depreciationDate);
            }
        }
        catch
        {
            //
            //  An error has occurred within this calculation process, throw an error..
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            //
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SL</Name>
				<Source><![CDATA[
    //
    //  This method calculates the "Straight Line" type period depreciation amount
    //  for the asset's current transaction.
    //
    public AssetAmount calc_SL(AssetAmount    _basisForDepreciation,
                               AssetAmount    _prevDepAmountThisYear,
                               AssetAmount    _prevDepAmountExternal,
                               AssetAmount    _prevDepAmountPriorYears,
                               TransDate      _depreciationDate,
                               AssetDepreciationTime _periods)
    {
        AssetAmount                 estimatedYearlyDepreciation;
        AssetAmount                 firstLastMonthDepreciation;
        AssetAmount                 netAmountToDepreciate;
        AssetAmount                 prevDepAmountThisYear = _prevDepAmountThisYear;
        AssetAmount                 retValue = 0.00;
        AssetAmount                 periodAmount;
        TransDate                   origAssetPeriodDate;
        AssetDepreciationTime       numberOfPeriodsLeftInYear;
        AssetDepreciationTime       numberOfPeriodsInInterval;

        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods);
            this.setMidMonthPercentage();
            if (isFirstYear || islastYear)
            {
                //
                //  This makes sure to account for any depreciation rounding errors that
                //  that could create a difference between the estimated final year's amount and
                //  the actual final year's amount.
                //  This only affects "Straight Line Service Life" because "Straight Line Life Remaining"
                //  always uses the Net Book value but "Service Life" does not.
                //
                if (islastYear &&
                    depreciationProfile.Method == AssetDepreciationMethod::StraightLine)
                {
                    estimatedYearlyDepreciation  = _basisForDepreciation - _prevDepAmountPriorYears;
                }
                else
                {
                    estimatedYearlyDepreciation  = _basisForDepreciation *
                                                   this.depreciationPercentage_SL() *
                                                   midMonthPercentage;
                }

                firstLastMonthDepreciation      = (estimatedYearlyDepreciation / midMonthFactor) / 2;

                //
                //  Depending on the AssetAccrual (Monthly, Quarterly, Half-yearly, or Yearly)
                //  this loop is designed to work at a "Monthly" level and roll up the calulated
                //  amounts to meet the requirements of the larger accruals.
                //  This functionality was needed in order to meet the specific first and last
                //  month requirements of this depreciation convention
                //
                origAssetPeriodDate = assetPeriodDate;
                if (isFirstYear)
                {
                    while (depreciationInterval.findLastDayOfPeriod(assetPeriodDate) <= _depreciationDate)
                    {
                        numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                        numberOfPeriodsInInterval = 1;

                        if (prevDepAmountThisYear == 0  &&
                            depreciationInterval.periodOfYear(assetBook.DepreciationStartDate) < depreciationInterval.periodOfYear(assetBook.AcquisitionDate) &&
                            depreciationInterval.endPeriod(assetBook.AcquisitionDate) == depreciationInterval.endPeriod(_depreciationDate))
                        {
                            numberOfPeriodsInInterval = depreciationInterval.periodOfYear(assetPeriodDate) - depreciationInterval.periodOfYear(assetBook.DepreciationStartDate) + #HalfMonthFactor;
                            numberOfPeriodsLeftInYear = midMonthFactor;
                        }

                        this.checkIsFirstMonth(depreciationInterval.findLastDayOfPeriod(assetPeriodDate));
                        if (isFirstMonth)
                        {
                            numberOfPeriodsLeftInYear = (depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfPeriod(assetBook.DepreciationStartDate))
                                - depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfPeriod(assetPeriodDate))) + 1;
                            netAmountToDepreciate = firstLastMonthDepreciation - prevDepAmountThisYear;

                            periodAmount = this.getPeriodAmount(
                                netAmountToDepreciate,
                                numberOfPeriodsInInterval,
                                numberOfPeriodsLeftInYear);

                            if (periodAmount)
                            {
                                prevDepAmountThisYear += periodAmount;
                                retValue += periodAmount;
                            }
                            assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;
                        }
                        else
                        {
                            netAmountToDepreciate = estimatedYearlyDepreciation - prevDepAmountThisYear;

                            periodAmount = this.getPeriodAmount(
                                netAmountToDepreciate,
                                numberOfPeriodsInInterval,
                                numberOfPeriodsLeftInYear);

                            prevDepAmountThisYear += periodAmount;
                            retValue += periodAmount;
                            assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;
                        }
                    }
                }
                else
                {
                    // Straight line Service life might have additional acquisitions that would increase the original life of the asset.
                    // Depreciate the total of acquisitions over the number of periods until the asset is fully depreciated.
                    if (depreciationProfile.Method == AssetDepreciationMethod::StraightLine)
                    {
                        AmountMST straightLineRegularDepreciationAmount =
                            this.calc_StraightLine(_basisForDepreciation, _prevDepAmountThisYear, _prevDepAmountExternal, _periods);
                        if (straightLineRegularDepreciationAmount <= estimatedYearlyDepreciation)
                        {
                            retValue = straightLineRegularDepreciationAmount;
                        }
                    }

                    if (!retValue)
                    {
                        while (depreciationInterval.findLastDayOfPeriod(assetPeriodDate) <= _depreciationDate)
                        {
                            numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                            numberOfPeriodsInInterval = 1;

                            this.checkIsLastMonth(depreciationInterval.findLastDayOfPeriod(assetPeriodDate));
                            if (isLastMonth)
                            {
                                numberOfPeriodsLeftInYear = (depreciationInterval.periodOfYear(lastDepreciationDate)
                                        - depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfPeriod(assetPeriodDate))) + 1;
                                netAmountToDepreciate = estimatedYearlyDepreciation - prevDepAmountThisYear;

                                periodAmount = this.getPeriodAmount(
                                    netAmountToDepreciate,
                                    numberOfPeriodsInInterval,
                                    numberOfPeriodsLeftInYear);

                                if (periodAmount)
                                {
                                    prevDepAmountThisYear += periodAmount;
                                    retValue += periodAmount;
                                }
                                assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;

                                break;
                            }
                            else
                            {
                                numberOfPeriodsLeftInYear = (depreciationInterval.periodOfYear(depreciationInterval.findFirstDayOfPeriod(lastDepreciationDate) - 1)
                                    - depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfPeriod(assetPeriodDate))) + 1;
                                netAmountToDepreciate = estimatedYearlyDepreciation - firstLastMonthDepreciation - prevDepAmountThisYear;

                                periodAmount = this.getPeriodAmount(
                                    netAmountToDepreciate,
                                    numberOfPeriodsInInterval,
                                    numberOfPeriodsLeftInYear);

                                prevDepAmountThisYear += periodAmount;
                                retValue += periodAmount;
                                assetPeriodDate = depreciationInterval.findLastDayOfPeriod(assetPeriodDate) + 1;
                            }
                        }
                    }
                }
                assetPeriodDate = origAssetPeriodDate;
            }
            else
            {
                retValue = this.calc_StraightLine(_basisForDepreciation, _prevDepAmountThisYear, _prevDepAmountExternal, _periods);
            }
        }
        catch
        {
            //
            //  An error has occurred within this calculation process, throw an error..
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            //
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SLP_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the "Straight Line Percentage" type period depreciation amount
    ///  for the asset's current transaction.
    /// </summary>
    /// <param name="_basisForDepreciation">
    /// Amount to be taken as the base amount to calculate depreciation.
    /// </param>
    /// <param name="_prevDepAmountThisYear">
    /// Depreciation amount for prev year.
    /// </param>
    /// <param name="_depreciationDate">
    /// The depreciation start date.
    /// </param>
    /// <param name="_periods">
    /// The period for which to calculate depreciation amount.
    /// </param>
    /// <returns>
    /// Returns the amount calculated as SLP type period depreciation.
    /// </returns>
    public AssetAmount calc_SLP_IN(AssetAmount              _basisForDepreciation,
                                   AssetAmount              _prevDepAmountThisYear,
                                   TransDate                _depreciationDate,
                                   AssetDepreciationTime    _periods)
    {
        AssetAmount                 estimatedYearlyDepreciation;
        AssetAmount                 firstLastMonthDepreciation;
        AssetAmount                 netAmountToDepreciate;
        AssetAmount                 prevDepAmountThisYear = _prevDepAmountThisYear;
        AssetAmount                 retValue = 0.00;
        AssetAmount                 periodAmount;
        TransDate                   origAssetPeriodDate;
        AssetDepreciationTime       numberOfPeriodsLeftInYear;
        AssetDepreciationTime       numberOfPeriodsInInterval;

        //  Straight Line Percentage cannot have a last year because it is percentage not period based.
        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods, true);
            this.setMidMonthPercentage();
            if (isFirstYear)
            {
                estimatedYearlyDepreciation     = _basisForDepreciation *
                                                  midMonthPercentage;

                firstLastMonthDepreciation      = (estimatedYearlyDepreciation / midMonthFactor) / 2;

                netAmountToDepreciate = estimatedYearlyDepreciation - _prevDepAmountThisYear;
                switch (depreciationProfile.DepreciationYear)
                {
                    case AssetDepreciationYear::Fiscal:
                        numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                        numberOfPeriodsInInterval = this.setNumberOfPeriodsInInterval(_depreciationDate);
                        if (isFirstMonth)
                        {
                            numberOfPeriodsLeftInYear   = depreciationInterval.numOfPeriods(_depreciationDate, assetPeriodDate);
                            netAmountToDepreciate       = firstLastMonthDepreciation - _prevDepAmountThisYear;
                        }
                        else
                        {
                            netAmountToDepreciate = estimatedYearlyDepreciation - _prevDepAmountThisYear;
                        }

                        retValue = this.getPeriodAmount(
                            netAmountToDepreciate,
                            numberOfPeriodsInInterval,
                            numberOfPeriodsLeftInYear);

                        break;

                    case AssetDepreciationYear::Calendar:
                        //  Depending on the AssetAccrual (Monthly, Quarterly, Half-yearly, or Yearly)
                        //  this loop is designed to work at a "Monthly" level and roll up the calculated
                        //  amounts to meet the requirements of the larger accruals.
                        //  This functionality was needed in order to meet the specific first and last
                        //  month requirements of this depreciation convention
                        origAssetPeriodDate = assetPeriodDate;
                        while (dateEndMth(assetPeriodDate) <= _depreciationDate)
                        {
                            numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                            numberOfPeriodsInInterval = 1;

                            this.checkIsFirstMonth(dateEndMth(assetPeriodDate));
                            if (isFirstMonth)
                            {
                                numberOfPeriodsLeftInYear   = (mthOfYr(dateEndMth(assetBook.DepreciationStartDate)) - mthOfYr(dateEndMth(assetPeriodDate))) + 1;
                                netAmountToDepreciate       = firstLastMonthDepreciation - prevDepAmountThisYear;

                                periodAmount = this.getPeriodAmount(
                                    netAmountToDepreciate,
                                    numberOfPeriodsInInterval,
                                    numberOfPeriodsLeftInYear);
                                    
                                if (periodAmount)
                                {
                                    prevDepAmountThisYear   += periodAmount;
                                    retValue                += periodAmount;
                                }
                                assetPeriodDate = dateEndMth(assetPeriodDate) + 1;
                            }
                            else
                            {
                                netAmountToDepreciate = estimatedYearlyDepreciation - prevDepAmountThisYear;

                                periodAmount = this.getPeriodAmount(
                                    netAmountToDepreciate,
                                    numberOfPeriodsInInterval,
                                    numberOfPeriodsLeftInYear);
                                    
                                prevDepAmountThisYear += periodAmount;
                                retValue += periodAmount;
                                assetPeriodDate = dateEndMth(assetPeriodDate) + 1;
                            }
                        }
                        assetPeriodDate = origAssetPeriodDate;
                        break;

                    default:
                        //  The enumeration is unknown, throw an error;
                        throw error(strFmt("@SYS99083", depreciationProfile.Profile));
                }
            }
            else
            {
                retValue = this.calc_StraightLinePercentage_IN(_basisForDepreciation, _depreciationDate);
            }
        }
        catch
        {
            //  An error has occurred within this calculation process, throw an error..
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurrencyAmount</Name>
				<Source><![CDATA[
    //
    //  This method calculates the asset's period depreciation amount into the correct currency.
    //
    //  This method assumes that an instance of this class type exists
    //  and that calc_RB() or calc_SL() methods have already been run.
    //
    public AssetAmount calcCurrencyAmount(AssetAmount _amount, AssetDepreciationTime _periods)
    {
        AssetAmount amount;

        if (assetBook.RecId)
        {
            amount = assetBook.roundDepreciationAmount(
                _amount,
                isReportingCurrencyDepreciation);
        }
        else
        {
            amount = CurrencyExchangeHelper::amount(_amount, this.getCurrencyCode());
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDisposalNumberDepreciationPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of depreciation periods used in the final year of the disposal.
    /// </summary>
    /// <param name="_disposalTransDate">
    /// The disposal transaction date.
    /// </param>
    /// <param name="_projectedLastDayOfDepreciation">
    /// The expected last date of depreciation.
    /// </param>
    /// <param name="_isDisposalSameYear">
    /// Indicates whether asset acquisition and disposal are in same year.
    /// </param>
    /// <returns>
    /// The number of periods that is based on mid-quarter convention rule.
    /// </returns>
    /// <remarks>
    /// When the Mid-month (15th of month) depreciation convention is in play, half of the monthâ€™s depreciation is allowed in the month of disposal.
    /// </remarks>

    public AssetDepreciationTime calcDisposalNumberDepreciationPeriods(
        TransDate       _disposalTransDate,
        AssetTransDate  _projectedLastDayOfDepreciation,
        boolean         _isDisposalSameYear)
    {
        AssetDepreciationTime numberOfMonths;

        // Determine the disposal happens in a year that is the final year of depreciation
        if (_isDisposalSameYear)
        {
            numberOfMonths = depreciationInterval.periodOfYear(_disposalTransDate)
                - depreciationInterval.periodOfYear(assetBook.DepreciationStartDate) + 1;
        }
        else
        {
            numberOfMonths = depreciationInterval.periodOfYear(_disposalTransDate);
        }

        numberOfMonths -= #HalfMonthFactor;

        if (numberOfMonths < 0)
        {
            numberOfMonths = 0;
        }

        return numberOfMonths;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMidMonthPercentage</Name>
				<Source><![CDATA[
    //
    //  This method corrdinates the calculation of the mid-month percentage required
    //  to accurately calculate the assets depreciation amount.
    //
    private Percent calcMidMonthPercentage(TransDate _transDate,
                                           boolean _isFirstYear = false,
                                           boolean _isLastYear = false)
    {
        ;

        this.setMidMonthFactors(_transDate, _isFirstYear, _isLastYear);

        return midMonthFactor / monthsInYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    //
    //  This method returns the adjustment to asset's remaining life.
    //
    //  This method assumes that an instance of this class type exists
    //  and that calc_RB() or calc_SL() methods have already been run.
    //
    public AssetDepreciationTime calcRestPeriod(
        AssetDepreciationTime _restPeriod,
        AssetTransDate _periodstart,
        AssetDepreciationTime _periods)
    {
        AssetDepreciationTime restPeriod;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
                restPeriod = this.getFiscalDepreciationPeriod(_restPeriod, _periodstart, _periods);
                boolean isKnownAccrual = this.checkKnownAssetAccrual();

                if (!isKnownAccrual)
                {
                    throw error(strFmt("@SYS99071", depreciationProfile.Profile));
                }
                break;

            case AssetDepreciationYear::Calendar:
                if (isFirstYear || isLastYear)
                {
                    restPeriod = this.getCalendarDepreciationPeriod(_periodstart);
                    boolean isKnownAccrualType = this.checkKnownAssetAccrualForCalendar();

                    if (!isKnownAccrualType)
                    {
                        throw error(strFmt("@SYS99071", depreciationProfile.Profile));
                    }
                }
                else
                {
                    restPeriod = 1;
                }
                break;

            default:
                // The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDepreciationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the asset fiscal remaining depreciation periods.
    /// </summary>
    /// <param name = "_restPeriod">
    /// Number of remaining periods.
    /// </param>
    /// <param name = "_periodStart">
    /// Starting date of the period.
    /// </param>
    /// <param name = "_periods">
    /// The asset depreciation period.
    /// </param>
    /// <returns>
    /// The remaining asset depreciation periods.
    /// </returns>
    protected AssetDepreciationTime getFiscalDepreciationPeriod(
        AssetDepreciationTime _restPeriod,
        AssetTransDate _periodStart,
        AssetDepreciationTime _periods)
    {
        AssetDepreciationTime restPeriod;

        switch (depreciationProfile.Accrual)
        {
            case AssetAccrual::FiscalPeriod:
                if (isFirstYear)
                {
                    if (_periodStart == assetBook.DepreciationStartDate)
                    {
                        restPeriod = frac(midMonthPercentage * monthsInYear);
                    }
                    else
                    {
                        restPeriod = _restPeriod;
                    }
                }
                else if (isLastYear)
                {
                    if (isLastMonth &&
                        depreciationInterval.endPeriod(_periodStart) == depreciationInterval.endPeriod(assetPeriodDate))
                    {
                        restPeriod = _periods;
                    }
                    else
                    {
                        restPeriod = midMonthPercentage;
                    }
                }
                else
                {
                    restPeriod = midMonthPercentage;
                }
                break;

            case AssetAccrual::Yearly:
                if (isFirstYear)
                {
                    restPeriod = midMonthPercentage;
                }
                else if (isLastYear)
                {
                    restPeriod = _periods;
                }
                else
                {
                    restPeriod = 1;
                }
                break;

            default:
                break;
        }

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKnownAssetAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the given asset accrual is a known accrual.
    /// </summary>
    /// <returns>
    /// true if the <c>AssetAccrual</c> enumeration value is of known type; otherwise, false.
    /// </returns>
    protected boolean checkKnownAssetAccrual()
    {
        boolean isKnownAccrual = true;

        switch (depreciationProfile.Accrual)
        {
            case AssetAccrual::FiscalPeriod:
            case AssetAccrual::Yearly:
                break;
            default:
                isKnownAccrual = false;
        }

        return isKnownAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarDepreciationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the asset calendar remaining depreciation periods.
    /// </summary>
    /// <param name = "_periodstart">
    /// Starting date of the period.
    /// </param>
    /// <returns>
    /// The remaining asset depreciation periods.
    /// </returns>
    protected AssetDepreciationTime getCalendarDepreciationPeriod(AssetTransDate _periodStart)
    {
        AssetDepreciationTime restPeriod;

        switch (depreciationProfile.Accrual)
        {
            case AssetAccrual::Yearly:
                restPeriod = midMonthPercentage;
                break;
            case AssetAccrual::HalfYearly:
            case AssetAccrual::Quarterly:
            case AssetAccrual::Monthly:
                if (_periodStart == assetBook.DepreciationStartDate ||
                        (isLastMonth && mthOfYr(depreciationInterval.endPeriod(_periodStart)) == mthOfYr(depreciationInterval.endPeriod(assetPeriodDate))))
                {
                    restPeriod = frac(midMonthPercentage * depreciationInterval.numOfPeriodsPerYear());
                }
                else
                {
                    restPeriod = 1;
                }
                break;

            default:
                break;
        }

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKnownAssetAccrualForCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the given asset accrual is a known accrual.
    /// </summary>
    /// <returns>
    /// true if the <c>AssetAccrual</c> enumeration value is of known type; otherwise, false.
    /// </returns>
    protected boolean checkKnownAssetAccrualForCalendar()
    {
        boolean isKnownAccrual = true;

        switch (depreciationProfile.Accrual)
        {
            case AssetAccrual::Yearly:
            case AssetAccrual::HalfYearly:
            case AssetAccrual::Quarterly:
            case AssetAccrual::Monthly:
                break;
            default:
                isKnownAccrual = false;
        }

        return isKnownAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStartDate</Name>
				<Source><![CDATA[
    //
    //  This method calculates the asset's starting depreciation date.
    //
    //  The "Mid Month 15th of the Month" depreciation convention will always calculate the "depreciation run date"
    //  based off the day of the month the asset was placed in service. The calculated date should always be the
    //  middle of the month the asset was placed in service.
    //
    //  The AssetBook.usedFromDate is considered to be the "placed in service date".
    //
    protected AssetDepreciationStartDate calcStartDate(AssetUsedFromDate _usedFromDate)
    {
        AssetDepreciationStartDate  startDate;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
            case AssetDepreciationYear::Calendar:
                startDate = depreciationInterval.findMiddleOfPeriod(_usedFromDate);
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsFirstMonth</Name>
				<Source><![CDATA[
    //
    //  This method checks if the current depreciation transaction date
    //  is in the asset's estimated first month of the first year of depreciation.
    //
    private void checkIsFirstMonth(TransDate _depreciationDate)
    {
        date            startDate;
        date            endDate;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
            case AssetDepreciationYear::Calendar:
                startDate = depreciationInterval.findFirstDayOfPeriod(assetBook.DepreciationStartDate);
                endDate = depreciationInterval.findLastDayOfPeriod(assetBook.DepreciationStartDate);
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        if (_depreciationDate >= startDate &&
            _depreciationDate <= endDate)
        {
            isFirstMonth  = true;
            isLastMonth   = false;
        }
        else
        {
            isFirstMonth  = false;
            isLastMonth   = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsLastMonth</Name>
				<Source><![CDATA[
    //
    //  This method checks if the current depreciation transaction date
    //  is in the asset's estimated last month of the last year of depreciation.
    //
    private void checkIsLastMonth(TransDate _depreciationDate)
    {
        date            startDate;
        date            endDate;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
            case AssetDepreciationYear::Calendar:
                startDate = depreciationInterval.findFirstDayOfPeriod(lastDepreciationDate);
                endDate = depreciationInterval.findLastDayOfPeriod(lastDepreciationDate);
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        if (_depreciationDate >= startDate &&
            _depreciationDate <= endDate)
        {
            isFirstMonth  = false;
            isLastMonth   = true;
        }
        else
        {
            isFirstMonth  = false;
            isLastMonth   = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfPeriodsInYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total number of depreciation periods used in a given year of the disposal.
    /// </summary>
    /// <param name="_disposalTransDate">
    /// The disposal transaction date.
    /// </param>
    /// <param name="_lastDayOfDepreciation">
    /// The last date of recorded depreciation.
    /// </param>
    /// <param name="_disposalInSameYear">
    /// A boolean value indicating if the disposal is done in the same year as acquisition.
    /// </param>
    /// <returns>
    /// The total number of periods used in a given year.
    /// </returns>
    protected AssetDepreciationTime getNumberOfPeriodsInYear(
        AssetTransDate  _disposalTransDate,
        AssetTransDate  _lastDayOfDepreciation,
        boolean         _disposalInSameYear)
    {
        AssetDepreciationTime   numberOfPeriods;
        TransDate               lastDayOfYear;

        lastDayOfYear = depreciationInterval.findLastDayOfYear(_disposalTransDate);

        if (_lastDayOfDepreciation
            && _lastDayOfDepreciation < lastDayOfYear)
        {
            numberOfPeriods = depreciationInterval.periodOfYear(_lastDayOfDepreciation) - #HalfMonthFactor;
        }
        else
        {
            numberOfPeriods = depreciationInterval.periodOfYear(lastDayOfYear);
        }

        if (_disposalInSameYear)
        {
            numberOfPeriods =  numberOfPeriods - depreciationInterval.periodOfYear(assetBook.DepreciationStartDate) + #HalfMonthFactor;
            if (numberOfPeriods < 0)
            {
                numberOfPeriods = 0;
            }
        }

        return numberOfPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetPeriodDate</Name>
				<Source><![CDATA[
    //
    //  This method sets the various date properties required for this class.
    //
    protected void setAssetPeriodDate(TransDate _depreciationDate,
                                      AssetDepreciationTime _periods,
                                      boolean   _isRB_Calc = false)
    {
        this.checkIsFirstYear(_depreciationDate);
        if (isFirstYear)
        {
            startingServiceLife = assetBook.ServiceLife;

            if (depreciationInterval.periodOfYear(assetBook.DepreciationStartDate)
                >= depreciationInterval.periodOfYear(depreciationInterval.startOfPeriod(_depreciationDate)))
            {
                assetPeriodDate = assetBook.DepreciationStartDate;
            }
            else
            {
                assetPeriodDate = depreciationInterval.startOfPeriod(_depreciationDate);
            }
        }
        else
        {
            this.checkIsLastYear(_depreciationDate, _periods, _isRB_Calc);
            if (islastYear)
            {
                startingServiceLife = this.calcMidMonthPercentage(assetBook.DepreciationStartDate, false, true);

                if (depreciationInterval.periodOfYear(depreciationInterval.startOfPeriod(_depreciationDate))
                    < depreciationInterval.periodOfYear(lastDepreciationDate))
                {
                    assetPeriodDate = depreciationInterval.startOfPeriod(_depreciationDate);
                }
                else
                {
                    assetPeriodDate = lastDepreciationDate;
                }
            }
            else
            {
                isFirstMonth  = false;
                isLastMonth   = false;
                assetPeriodDate = _depreciationDate;
                switch (depreciationProfile.DepreciationYear)
                {
                    case AssetDepreciationYear::Fiscal:
                        startingServiceLife = assetBook.ServiceLife -
                            (year(depreciationInterval.openingPeriodDate(_depreciationDate)) -
                             year(depreciationInterval.openingPeriodDate(assetBook.DepreciationStartDate))) +
                            this.calcMidMonthPercentage(assetBook.DepreciationStartDate, false, true);
                        break;

                    case AssetDepreciationYear::Calendar:
                        startingServiceLife = assetBook.ServiceLife -
                            (year(_depreciationDate) - year(assetBook.DepreciationStartDate)) +
                            this.calcMidMonthPercentage(assetBook.DepreciationStartDate, false, true);
                        break;

                    default:
                        //  The enumeration is unknown, throw an error;
                        throw error(strFmt("@SYS99083", depreciationProfile.Profile));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMidMonthFactors</Name>
				<Source><![CDATA[
    //
    //  This method calculates the mid-month percentage.
    //
    protected void setMidMonthFactors(TransDate _transDate,
                                      boolean _isFirstYear = false,
                                      boolean _isLastYear = false)
    {
        int     month;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
            case AssetDepreciationYear::Calendar:
                if (_isLastYear)
                {
                    month = depreciationInterval.periodOfYear(lastDepreciationDate);
                }
                else
                {
                    month = depreciationInterval.periodOfYear(_transDate);
                }
                monthsInYear = depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfYear(_transDate));
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        if (_isFirstYear)
        {
            midMonthFactor = (monthsInYear - month) + #HalfMonthFactor;
        }
        else if (_isLastYear)
        {
            midMonthFactor = monthsInYear - ((monthsInYear - month) + #HalfMonthFactor);
        }
        else
        {
            midMonthFactor = monthsInYear;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMidMonthPercentage</Name>
				<Source><![CDATA[
    //
    //  This method sets mid-month percentage.
    //
    private void setMidMonthPercentage()
    {
        if (isFirstYear || isLastYear)
        {
            midMonthPercentage = this.calcMidMonthPercentage(assetBook.DepreciationStartDate, isFirstYear, isLastYear);
        }
        else
        {
            midMonthPercentage = this.calcMidMonthPercentage(assetPeriodDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>