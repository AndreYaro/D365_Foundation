<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandJobStatusChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCommandJobStatusChange</c> class handles status changes on kanban jobs.
/// </summary>
public class LeanCommandJobStatusChange extends LeanCommandBase
{
    KanbanJob           kanbanJob;
    LeanKanbanJobStatus oldStatus;
    boolean             requiresUndo;
    boolean             isNewKanbanJob;

    Kanban              kanban;
    KanbanCard          kanbanCard;
    KanbanRule          kanbanRule;

    boolean             kanbanCardReleased;
    boolean             kanbanInFinalStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the logic of the job status change event.
    /// </summary>
    /// <returns>
    ///    true if the kanban card was successfully processed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is executed in a transaction scope provided by the <c>LeanRulesEngine</c> class.
    /// </remarks>
    protected boolean execute()
    {
        boolean result = kanbanJob.checkValid(kanbanJob.RecId);

        if (result)
        {
            this.handleCurrentCard();
            this.handleUrgencyUpdate();

            // the printing checks should be done only in case we're in final status
            // and this is the first job for this kanban
            if (   kanbanCard
                && !this.isFinalStatus()
                && !kanbanJob.existPreviousJob()
                && !this.isKanbanCancelled()
                && this.isKanbanJobProgressing())
            {
                kanbanCard.setPrintStatusToPrintAutomatically(kanban, kanbanRule);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCurrentCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reassigns the current kanban card, if it is required.
    /// </summary>
    protected void handleCurrentCard()
    {
        // eventually release the card and reassign it to currently active rule
        if (kanbanCard.CardType == KanbanCardType::Circulating &&
            (kanbanInFinalStatus || kanbanCardReleased))
        {
            kanbanRule = KanbanRule::find(kanban.KanbanRule);

            KanbanCard::unAssign(kanban);
            kanbanCard = KanbanCard::find(kanbanCard.RecId, true);
            kanbanRule.status().reassignCard(kanbanCard);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleUrgencyUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the urgency level of the rule, if it is required, according to the job status change.
    /// </summary>
    protected void handleUrgencyUpdate()
    {
        real variation = 0;

        if (kanbanJob.Status != oldStatus)
        {
            if (oldStatus == LeanKanbanJobStatus::NotPlanned)
            {
                // Job was reset back to unplanned so it should increase the urgency level
                variation = -1 / kanban.numberOfKanbanJobs();
            }
            else if (kanbanJob.Status == LeanKanbanJobStatus::NotPlanned)
            {
                // Job entered a planned state so it should decrease the urgency level
                variation = 1 / kanban.numberOfKanbanJobs();
            }
        }
        else if (   kanban.Status == LeanKanbanStatus::Emptied
                 && kanbanJob.Status == LeanKanbanJobStatus::Completed)
        {
            // Completed jobs from empty kanbans do not count and readjust the whole kanban
            // (we will go through this branch only once per kanban, not once per job as the other adjustments)
            variation = 1;
        }

        if (   variation
            && kanbanRule)
        {
            ttsbegin;
            kanbanRule = KanbanRule::find(kanbanRule.RecId, true);
            kanbanRule.UrgencyLevel += variation;
            kanbanRule.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal state of the object.
    /// </summary>
    private void init()
    {
        boolean     result = false;

        kanban      = kanbanJob.kanban();
        kanbanCard  = kanban.kanbanCard();
        kanbanRule  = kanban.kanbanRule();

        kanbanInFinalStatus = kanban.Status == LeanKanbanStatus::Emptied;

        if (kanbanCard.CardType == KanbanCardType::Circulating)
        {
            kanbanCardReleased =  kanbanInFinalStatus;

            if (   !kanbanInFinalStatus
                && requiresUndo
                && kanbanJob.Status == LeanKanbanJobStatus::Planned)
            {
                KanbanJob firstKanbanJob = kanban.firstKanbanJob();

                // card should also be released if the first kanban's job is reset back to
                // status planned and the rule is configured to use circ. cards + manual assignment
                kanbanCardReleased =    firstKanbanJob.RecId == kanbanJob.RecId
                                     && kanbanRule.UsesCirculatingCards
                                     && kanbanRule.CardAssignmentType == KanbanCardAssignmentType::Manual;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFinalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the job status is final.
    /// </summary>
    /// <returns>
    /// true if the kanban is emptied; otherwise, false.
    /// </returns>
    private boolean isFinalStatus()
    {
        return Kanban::find(kanbanJob.Kanban).Status == LeanKanbanStatus::Emptied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isKanbanCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether the kanban is to be canceled.
    /// </summary>
    /// <returns>
    ///    true if the kanban is to be canceled; otherwise, false.
    /// </returns>
    public boolean isKanbanCancelled()
    {
        return kanban.Status == LeanKanbanStatus::NotAssigned && requiresUndo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isKanbanCardReleased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether to release a card.
    /// </summary>
    /// <returns>
    ///    true if the card should be released; otherwise, false.
    /// </returns>
    public boolean isKanbanCardReleased()
    {
        return kanbanCardReleased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isKanbanInFinalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether the kanban is in the final status.
    /// </summary>
    /// <returns>
    ///    true if the kanban is in the final status; otherwise, false.
    /// </returns>
    public boolean isKanbanInFinalStatus()
    {
        return kanbanInFinalStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isKanbanJobProgressing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban job is to be updated.
    /// </summary>
    /// <returns>
    ///    true if the kanban job is to be updated; otherwise, false.
    /// </returns>
    public boolean isKanbanJobProgressing()
    {
        return    kanbanJob.Status > oldStatus
               || isNewKanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsNewKanbanJob</Name>
				<Source><![CDATA[
        public boolean parmIsNewKanbanJob(boolean _isNewKanbanJob = isNewKanbanJob)
    {
        isNewKanbanJob = _isNewKanbanJob;

        return isNewKanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJob</Name>
				<Source><![CDATA[
        public KanbanJob parmKanbanJob(KanbanJob _kanbanJob = kanbanJob)
    {
        kanbanJob = _kanbanJob;

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOldStatus</Name>
				<Source><![CDATA[
        public LeanKanbanJobStatus parmOldStatus(LeanKanbanJobStatus _oldStatus = oldStatus)
    {
        oldStatus = _oldStatus;

        return oldStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequiresUndo</Name>
				<Source><![CDATA[
        public boolean parmRequiresUndo(boolean _requiresUndo = requiresUndo)
    {
        requiresUndo = _requiresUndo;

        return requiresUndo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static LeanCommandJobStatusChange construct()
    {
        return new LeanCommandJobStatusChange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
        public static LeanCommandJobStatusChange newStandard(
        KanbanJob           _kanbanJob,
        LeanKanbanJobStatus _oldStatus,
        boolean             _requiresUndo,
        boolean             _isNewKanbanJob)
    {
        LeanCommandJobStatusChange leanCommandJobStatusChange = LeanCommandJobStatusChange::construct();
        leanCommandJobStatusChange.parmKanbanJob(_kanbanJob);
        leanCommandJobStatusChange.parmOldStatus(_oldStatus);
        leanCommandJobStatusChange.parmRequiresUndo(_requiresUndo);
        leanCommandJobStatusChange.parmIsNewKanbanJob(_isNewKanbanJob);

        // init the internal flags
        leanCommandJobStatusChange.init();

        return leanCommandJobStatusChange;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
