<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport770TransHandler_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReport770TransHandler_IT extends RunBase
{
    TaxReport770Table_IT taxReport770Table;  
    TaxReport770Trans_IT reportTrans;
    TaxReport770VendTotal_IT vendTotal;
    TaxReport770TableActionType_IT actionType;
    TaxReport770Id_IT reportId;
    TransDate fromDate;
    TransDate toDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcVendTaxPaym</Name>
				<Source><![CDATA[
    public void calcVendTaxPaym()
    {
        TaxReport770TaxPaymentsV2_IT::reCalculateVendTaxPayment(taxReport770Table.ReportId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVendTotal</Name>
				<Source><![CDATA[
    public void calcVendTotal()
    {
        ttsbegin;
        while select sum(WithholdBaseAmount), sum(TaxWithholdAmount), sum(NotTaxableExpenses),
            sum(NotTaxableByTreaty), sum(ExemptedAmount), sum(PaidAmount), sum(WithholdAsDeposit),
            sum(WithholdSuspended), sum(Prepayment) from reportTrans
            group by VendAccount
            where reportTrans.ReportId == reportId &&
                  ! reportTrans.Excluded
        {
            select firstonly forupdate vendTotal
                where vendTotal.ReportId == reportId && vendTotal.VendAccount == reportTrans.VendAccount;
            vendTotal.Prepayment = reportTrans.Prepayment;
            vendTotal.PaidGross = reportTrans.WithholdBaseAmount  +
             reportTrans.ExemptedAmount +
             reportTrans.NotTaxableExpenses +
             reportTrans.NotTaxableByTreaty;
            vendTotal.NotTaxableByTreaty = reportTrans.NotTaxableByTreaty;
            vendTotal.OtherNonTaxable = reportTrans.ExemptedAmount  +
             reportTrans.NotTaxableExpenses;
            vendTotal.WithholdBaseAmount = reportTrans.WithholdBaseAmount;
            vendTotal.WithholdAsDeposit = reportTrans.WithholdAsDeposit;
            vendTotal.WithholdForTaxPurpose = reportTrans.TaxWithholdAmount;
            vendTotal.WithholdSuspended = reportTrans.WithholdSuspended;
            vendTotal.NotTaxableExpenses = reportTrans.NotTaxableExpenses;
            vendTotal.PaidAmount = reportTrans.PaidAmount;
            if (vendTotal.RecId == 0)
            {
                vendTotal.ReportId = reportId;
                vendTotal.VendAccount = reportTrans.VendAccount;
                vendTotal.insert();
            }
            else
            {
                vendTotal.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTrans</Name>
				<Source><![CDATA[
    private void deleteTrans()
    {
        ttsbegin;
        delete_from reportTrans where reportTrans.ReportId == reportId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteVendTaxPaym</Name>
				<Source><![CDATA[
    private void deleteVendTaxPaym(VendAccount _vendAccount = '')
    {
        TaxReport770TaxPaymentsV2_IT::deleteVendTaxPayment( reportId, _vendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteVendTotal</Name>
				<Source><![CDATA[
    private void deleteVendTotal(VendAccount _vendAccount = '')
    {
        ttsbegin;
        if (_vendAccount)
        {
            delete_from vendTotal where vendTotal.ReportId == reportId && vendTotal.VendAccount == _vendAccount;
        }
        else
        {
            delete_from vendTotal where vendTotal.ReportId == reportId;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        reportId = taxReport770Table.ReportId;
        fromDate = mkDate(1, 1, taxReport770Table.Year - 1);
        toDate = mkDate(31, 12, taxReport770Table.Year - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWithholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report transaction record from the withold tax transaction record.
    /// </summary>
    /// <param name = "_withholdTable">A withhold tax table record which is linked to a withhold tax transaction record.</param>
    /// <param name = "_withholdTrans">A withhold tax transaction record.</param>
    /// <returns>A report transaction record.</returns>
    public TaxReport770Trans_IT initFromWithholdTrans(TaxWithholdTable _withholdTable, TaxWithholdTrans _withholdTrans)
    {
        TaxReport770Trans_IT report770Trans;

        report770Trans.ReportId = reportId;
        report770Trans.VendAccount = _withholdTrans.VendAccount;
        report770Trans.TransDate = _withholdTrans.TransDate;
        report770Trans.TaxWithholdCode = _withholdTrans.TaxWithholdCode;
        report770Trans.WithholdAsDeposit = _withholdTrans.TaxWithholdAmount;
        report770Trans.NotTaxableExpenses = _withholdTrans.NotTaxableExpenses;
        report770Trans.NotTaxableByTreaty = _withholdTrans.NotTaxableByTreaty;
        report770Trans.ExemptedAmount = _withholdTrans.ExemptedAmount;
        report770Trans.WithholdBaseAmount = _withholdTrans.WithholdBaseAmount;
        report770Trans.TaxWithholdAmount = _withholdTrans.TaxWithholdAmount;
        report770Trans.PaidAmount = _withholdTrans.TaxWithholdAmount;
        report770Trans.Month = mthOfYr(_withholdTrans.TransDate);
        report770Trans.Year = year(_withholdTrans.TransDate);
        //calc amounts
        if (_withholdTable.TaxWithholdSource)
        {
            report770Trans.Total = _withholdTrans.TaxWithholdBaseAmount +
                 _withholdTrans.NotTaxableExpenses +
                 _withholdTrans.NotTaxableByTreaty +
                 _withholdTrans.ExemptedAmount;
        }
        else
        {
            report770Trans.Prepayment = _withholdTrans.TaxWithholdBaseAmount +
                   _withholdTrans.NotTaxableExpenses +
                   _withholdTrans.NotTaxableByTreaty +
                   _withholdTrans.ExemptedAmount;
        }
        report770Trans.TaxWithholdTransRefRecId = _withholdTrans.RecId;

        return report770Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReport770Table</Name>
				<Source><![CDATA[
    public TaxReport770Table_IT parmTaxReport770Table(TaxReport770Table_IT _taxReport770Table = taxReport770Table)
    {
        taxReport770Table = _taxReport770Table;
        return taxReport770Table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReport770TableActionType</Name>
				<Source><![CDATA[
    public TaxReport770TableActionType_IT parmTaxReport770TableActionType(TaxReport770TableActionType_IT _actionType = actionType)
    {
        actionType = _actionType;
        return actionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.initValue();
         switch (actionType)
        {
            case TaxReport770TableActionType_IT::Transfer :
                boolean keepSuspendedPaymentsPrevPeriod = false;

                if (TaxReport770TaxPaymentsV2_IT::existSuspendedPaymentsFromPrevPeriod(taxReport770Table.ReportId)
                    && Box::yesNo("@ApplicationSuite_Localization:SuspendedTaxPaymentsDeletionWarning", DialogButton::Ok) == DialogButton::No)
                {
                    keepSuspendedPaymentsPrevPeriod = true;
                }

                this.transfer(keepSuspendedPaymentsPrevPeriod);
                break;

            case TaxReport770TableActionType_IT::Reset :
                if (Box::okCancel("@SYS61075", DialogButton::Ok) == DialogButton::Ok)
                {
                    taxReport770Table.selectForUpdate(true);
                    ttsbegin;
                    taxReport770Table.initReport();
                    taxReport770Table.update();
                    ttscommit;
                    this.deleteTrans();
                    this.deleteVendTotal();
                    this.deleteVendTaxPaym();
                    this.transfer();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transfer</Name>
				<Source><![CDATA[
    private void transfer(boolean _keepPaymentsSuspendedFromPrevPeriod = false)
    {
        this.transferTaxWithholdTrans();
        this.calcVendTotal();

        if (_keepPaymentsSuspendedFromPrevPeriod)
        {
            TaxReport770TaxPaymentsV2_IT::reCalculateVendTaxPaymentKeepingSuspendedPaymFromPrevPeriod(reportId);
        }
        else 
        {
            this.calcVendTaxPaym();
        }

        TaxReport770TransHandler_IT::deleteVendTotalWithoutTransactions(reportId);
        TaxReport770TransHandler_IT::calcCompanyTotal(reportId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferTaxWithholdTrans</Name>
				<Source><![CDATA[
    public void transferTaxWithholdTrans()
    {
        TaxWithholdTrans withholdTrans;
        TaxReport770Trans_IT taxReport770TransIns;
        TaxReport770Trans_IT taxReport770Trans;
        TaxWithholdTable taxWithholdTable;

        ttsbegin;
        while select withholdTrans
            order by VendAccount, TransDate

            where  withholdTrans.TransDate >= fromDate &&
                   withholdTrans.TransDate <= toDate
        outer join TaxWithholdSource from taxWithholdTable
            where withholdTrans.TaxWithholdCode == taxWithholdTable.TaxWithholdCode

        notexists join taxReport770Trans
            where taxReport770Trans.TaxWithholdTransRefRecId == withholdTrans.RecId &&
                  taxReport770Trans.ReportId == reportId
        {
            taxReport770TransIns = this.initFromWithholdTrans(taxWithholdTable, withholdTrans);
            taxReport770TransIns.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCompanyTotal</Name>
				<Source><![CDATA[
    public static TmpTaxReport770Total_IT calcCompanyTotal(TaxReport770Id_IT _reportId)
    {
        TaxReport770VendTotal_IT vendTotal;
        TmpTaxReport770Total_IT tmpTotal;

        select sum(Prepayment), sum(PaidGross), sum(NotTaxableByTreaty),
            sum(OtherNonTaxable), sum(WithholdBaseAmount), sum(WithholdAsDeposit), sum(WithholdForTaxPurpose),
            sum(WithholdSuspended), sum(NotTaxableExpenses), sum(PaidAmount), sum(BaseAmountPrev), sum(WithholdAmountPrev)
            from vendTotal where vendTotal.ReportId == _reportId;

        tmpTotal.Prepayment += vendTotal.Prepayment;
        tmpTotal.PaidGross += vendTotal.PaidGross;
        tmpTotal.NotTaxableByTreaty += vendTotal.NotTaxableByTreaty;
        tmpTotal.OtherNonTaxable += vendTotal.OtherNonTaxable;
        tmpTotal.WithholdBaseAmount += vendTotal.WithholdBaseAmount;
        tmpTotal.WithholdAsDeposit += vendTotal.WithholdAsDeposit;
        tmpTotal.WithholdForTaxPurpose += vendTotal.WithholdForTaxPurpose;
        tmpTotal.WithholdSuspended += vendTotal.WithholdSuspended;
        tmpTotal.NotTaxableExpenses += vendTotal.NotTaxableExpenses;
        tmpTotal.PaidAmount = tmpTotal.PaidGross
         - tmpTotal.WithholdAsDeposit
         - tmpTotal.WithholdSuspended
         - tmpTotal.WithholdForTaxPurpose;
        tmpTotal.BaseAmountPrev += vendTotal.BaseAmountPrev;
        tmpTotal.WithholdAmountPrev += vendTotal.WithholdAmountPrev;
        tmpTotal.insert();
        return tmpTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteVendTotalWithoutTransactions</Name>
				<Source><![CDATA[
    public static void deleteVendTotalWithoutTransactions(TaxReport770Id_IT _reportId)
    {
        TaxReport770VendTotal_IT vendTotal;
        TaxReport770Trans_IT reportTrans;
        ttsbegin;
        delete_from vendTotal
            where vendTotal.ReportId == _reportId
        notexists join reportTrans
            where reportTrans.ReportId == _reportId
                && reportTrans.VendAccount == vendTotal.VendAccount;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS61068";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        TaxReport770TransHandler_IT taxReport770TransHandler;
        FormDataSource datasource = FormDataUtil::getFormDataSource(args.record());
        if (args && args.record())
        {
            taxReport770TransHandler = new TaxReport770TransHandler_IT();
            if (taxReport770TransHandler.parmTaxReport770Table(args.record()).RecId)
            {
                taxReport770TransHandler.parmTaxReport770TableActionType(args.parmEnum());
                taxReport770TransHandler.runOperation();
                datasource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendTotal</Name>
				<Source><![CDATA[
    public static void updateVendTotal(TaxReport770Trans_IT _reportTrans, TaxReport770Trans_IT _reportTransOrig, boolean _isDelete = false)
    {
        TaxReport770VendTotal_IT vendTotal;
        int factorOrig = 1;
        int factor = 1;

        //do not add new amounts when deleting record or excluding record
        if (_isDelete || _reportTrans.Excluded == NoYes::Yes)
        {
            factor = 0;
        }

        //do not substract original amounts when creating new record or the orignal record was excluded
        if (_reportTrans.RecId == 0 || _reportTransOrig.Excluded == NoYes::Yes)
        {
            factorOrig = 0;
        }
        ttsbegin;
        select firstonly forupdate vendTotal
            where vendTotal.ReportId == _reportTrans.ReportId
                && vendTotal.VendAccount == _reportTrans.VendAccount;
        vendTotal.Prepayment += factor * _reportTrans.Prepayment -
         factorOrig * _reportTransOrig.Prepayment;
        vendTotal.PaidGross += factor * (_reportTrans.WithholdBaseAmount   +
         _reportTrans.ExemptedAmount +
         _reportTrans.NotTaxableExpenses +
         _reportTrans.NotTaxableByTreaty)  -
         factorOrig * (_reportTransOrig.WithholdBaseAmount +
         _reportTransOrig.ExemptedAmount +
         _reportTransOrig.NotTaxableExpenses +
         _reportTransOrig.NotTaxableByTreaty) ;
        vendTotal.NotTaxableByTreaty += factor * _reportTrans.NotTaxableByTreaty -
         factorOrig * _reportTransOrig.NotTaxableByTreaty;

        vendTotal.OtherNonTaxable += factor * (_reportTrans.ExemptedAmount + _reportTrans.NotTaxableExpenses) -
         factorOrig * (_reportTransOrig.ExemptedAmount + _reportTransOrig.NotTaxableExpenses);

        vendTotal.WithholdBaseAmount += factor * _reportTrans.WithholdBaseAmount -
         factorOrig * _reportTransOrig.WithholdBaseAmount;

        vendTotal.WithholdAsDeposit += factor * _reportTrans.WithholdAsDeposit -
         factorOrig * _reportTransOrig.WithholdAsDeposit;

        vendTotal.WithholdForTaxPurpose += factor * _reportTrans.TaxWithholdAmount -
         factorOrig * _reportTransOrig.TaxWithholdAmount;

        vendTotal.WithholdSuspended += factor * _reportTrans.WithholdSuspended  -
         factorOrig * _reportTransOrig.WithholdSuspended;

        vendTotal.NotTaxableExpenses += factor * _reportTrans.NotTaxableExpenses -
         factorOrig * _reportTransOrig.NotTaxableExpenses;

        vendTotal.PaidAmount += factor * _reportTrans.PaidAmount -
         factorOrig * _reportTransOrig.PaidAmount;

        if (vendTotal.RecId == 0)
        {
            vendTotal.ReportId = _reportTrans.ReportId;
            vendTotal.VendAccount = _reportTrans.VendAccount;
            vendTotal.insert();
        }
        else
        {
            vendTotal.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>