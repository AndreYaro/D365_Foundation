<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgActiveJobsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgActiveJobsDP</c> class is the support class for the <c>JmgActiveJobs</c> report.
/// </summary>
[
       SRSReportParameterAttribute(classstr(JmgActiveJobsContract))
]
public class JmgActiveJobsDP extends SRSReportDataProviderBase
{
    JmgTmpActiveJobs  jmgTmpActiveJobs;

    #define.calcGroupIdAll('All')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getJmgTmpActiveJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>JmgTmpActiveJobs</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>JmgTmpActiveJobs</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('JmgTmpActiveJobs')
    ]
    public JmgTmpActiveJobs getJmgTmpActiveJobs()
    {
        select jmgTmpActiveJobs;
        return jmgTmpActiveJobs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJmgTmpActiveJobs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record into the <c>JmgTmpActiveJobs</c> temporary buffer based on the
    ///    <c>JmgTmpEmplSignedIn</c> record.
    /// </summary>
    /// <param name="_jmgTmpEmplSignedIn">
    ///    The <c>JmgTmpEmplSignedIn</c> record that is used to initialize the inserted
    ///    <c>JmgTmpActiveJobs</c> record.
    /// </param>
    private void insertJmgTmpActiveJobs(JmgTmpEmplSignedIn _jmgTmpEmplSignedIn)
    {
        jmgTmpActiveJobs.EmplName           = _jmgTmpEmplSignedIn.EmplName;
        jmgTmpActiveJobs.Description        = _jmgTmpEmplSignedIn.AbsenceDescription;
        jmgTmpActiveJobs.PersonnelNumber    = HcmWorker::find(_jmgTmpEmplSignedIn.Worker).PersonnelNumber;

        jmgTmpActiveJobs.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the <c>JmgAttendanceReport</c> temporary table.
    /// </summary>
    public void processReport()
    {
        JmgGroupCalcId          jmgGroupCalcId;
        Set                     activeJobs;
        SetEnumerator           enumerator;

        JmgEmplSignedInForm     jmgEmplSignedInForm = new JmgEmplSignedInForm();
        JmgActiveJobsContract   contract            = this.parmDataContract() as JmgActiveJobsContract;

        if (contract)
        {
            jmgGroupCalcId = contract.parmCalcGroupId();
        }

        if (jmgGroupCalcId && jmgGroupCalcId != #calcGroupIdAll)
        {
            activeJobs = jmgEmplSignedInForm.getRecordSet(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), jmgGroupCalcId);
        }
        else
        {
            activeJobs = jmgEmplSignedInForm.getRecordSet(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        }

        enumerator = activeJobs.getEnumerator();

        while (enumerator.moveNext())
        {
           this.insertJmgTmpActiveJobs(enumerator.current());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
