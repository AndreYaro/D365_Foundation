<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankClientEditStatement_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Edit Bank-Client's payment line
/// </summary>
class BankClientEditStatement_RU extends RunBaseBatch implements BatchRetryable
{
    BankClientPayment_RU    bankClientPayment;

    CustVendAC              custVendAccount;
    ModuleCustVend          partnerType;
    AmountCur               amountCur;
    CurrencyCode            currencyCode;

    DialogField             dlgPartnerType, dlgAmountCur, dlgCurrencyCode;
    FormBuildStringControl  custVendAccountCtrl;
    FormStringControl       strCustVendAccount;

    DialogRunbase           dialog;

    #define.CustVendAccount('CustVendAccount')

    #localmacro.dlgFields
    custVendAccount
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendAccount_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements lookup method for custVendAccountCtrl dialog control
    /// </summary>
    /// <remarks>
    /// Data source of query depends of partner type
    /// </remarks>
    public void custVendAccount_lookup()
    {
        var callingControl = dialog.formRun().controlCallingMethod();

        SysTableLookup sysTableLookup;

        if (dlgPartnerType.value() == ModuleCustVend::Cust)
        {
            sysTableLookup = SysTableLookup::newParameters(tablenum(CustTable), callingControl, true,
                    CustomerDataInteractorFactory::useExistingOrCreateResolver(callingControl));
            sysTableLookup.addLookupfield(fieldnum(CustTable, AccountNum));
            sysTableLookup.addLookupfield(fieldnum(CustTable, Party));
        }
        else
        {
            sysTableLookup = SysTableLookup::newParameters(tablenum(VendTable), callingControl, true,
                    VendorDataInteractorFactory::useExistingOrCreateResolver(callingControl));
            sysTableLookup.addLookupfield(fieldnum(VendTable, AccountNum));
            sysTableLookup.addLookupfield(fieldnum(VendTable, Party));
        }

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendAccount_resolveAmbiguousReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements resolveAmbiguousReference method for custVendAccountCtrl dialog control
    /// </summary>
    /// <returns>
    /// The resolved reference.
    /// </returns>
    public str custVendAccount_resolveAmbiguousReference()
    {
        var callingControl = dialog.formRun().controlCallingMethod();

        if (dlgPartnerType.value() == ModuleCustVend::Cust)
        {
            return CustomerDataInteractorFactory::resolveAmbiguousReferenceForControl(callingControl);
        }
        else
        {
            return VendorDataInteractorFactory::resolveAmbiguousReferenceForControl(callingControl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogGroup dialogGroup;
        #define.lookupType(2)
        ;

        dialog = super();

        dialogGroup = dialog.addGroup("@GLS103215");
        dlgPartnerType      = dialog.addFieldValue(enumstr(ModuleCustVend), partnerType, "@SYS82661");

        custVendAccountCtrl = dialogGroup.formBuildGroup().addControl(FormControlType::String, #CustVendAccount);
        custVendAccountCtrl.extendedDataType(extendedtypenum(CustVendAC));
        custVendAccountCtrl.text(custVendAccount);
        custVendAccountCtrl.lookupButton(#lookupType);
        custVendAccountCtrl.label("@GLS103215");
        custVendAccountCtrl.helpText("@GLS104555");

        dialog.addGroup("@GLS103162");
        dlgAmountCur        = dialog.addFieldValue(extendedTypeStr(AmountCur), amountCur);
        dlgCurrencyCode     = dialog.addFieldValue(extendedTypeStr(CurrencyCode), currencyCode);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets control's method overload parameters for dialog
    /// </summary>
    /// <param name="_dialog">
    /// <c>DialogRunbase</c> type value
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        FormRun formRun;
        ;

        super(dialog);

        formRun = _dialog.dialogForm().formRun();
        formRun.controlMethodOverload(true);
        formRun.controlMethodOverloadObject(this);

        strCustVendAccount = formRun.design().control(custVendAccountCtrl.id());
        this.setControlAccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets values, that have been chosen in dialog and assigns they to class's variables
    /// </summary>
    /// <returns>
    /// Returns boolean value form super class
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        partnerType     = dlgPartnerType.value();
        amountCur       = dlgAmountCur.value();
        currencyCode    = dlgCurrencyCode.value();
        custVendAccount = strCustVendAccount.text();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class's variables from payment line
    /// </summary>
    /// <param name="_bankClientPayment">
    /// Bank_Client's payment line record
    /// </param>
    public void initFromPayment(BankClientPayment_RU _bankClientPayment)
    {
        bankClientPayment = _bankClientPayment;
        partnerType       = _bankClientPayment.PartnerType;
        custVendAccount   = _bankClientPayment.CustVendAC;
        amountCur         = _bankClientPayment.AmountCur;
        currencyCode      = _bankClientPayment.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        BankClientPayment_RU bankClientPaymentUpd;
        super();

        ttsbegin;
        bankClientPaymentUpd = BankClientPayment_RU::findRecId(bankClientPayment.RecId, true);

        if (bankClientPaymentUpd.CustVendAC != custVendAccount ||  bankClientPaymentUpd.PartnerType != partnerType)
        {
            bankClientPaymentUpd.PartnerType  = partnerType;
            bankClientPaymentUpd.CustVendAC   = custVendAccount;
            bankClientPaymentUpd.initPostingProfile();
            bankClientPaymentUpd.initCustVendDimension();
        }

        bankClientPaymentUpd.AmountCur    = amountCur;
        bankClientPaymentUpd.CurrencyCode = currencyCode;
        bankClientPaymentUpd.validateFields();
        bankClientPaymentUpd.update();

        if (bankClientPaymentUpd.PaymentDirection == BankClientPaymentDirection_RU::Outgoing)
        {
            BankClientPayment_RU::joinWithSource(bankClientPaymentUpd.RecId);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines access property of dialog controls
    /// </summary>
    protected void setControlAccess()
    {
        if (bankClientPayment.PartnerType == ModuleCustVend::Vend &&
            bankClientPayment.Unrecognized &&
            bankClientPayment.CustVendAC)
        {
            dlgPartnerType.enabled(false);
            strCustVendAccount.enabled(false);
        }

        dlgAmountCur.enabled(bankClientPayment.AmountCur == 0);
        dlgCurrencyCode.enabled(!bankClientPayment.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks customer(vendor) account Id, amount and currency code
    /// </summary>
    /// <param name="calledFrom">
    /// The object or form which calls the method
    /// </param>
    /// <returns>
    /// Returns true if customer(vendor) account Id, amount and currency code is not empty, otherwise false
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (!custVendAccount || !amountCur || !currencyCode)
            ret = checkFailed("@GLS115368");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BankClientEditStatement_RU construct()
    {
        return new BankClientEditStatement_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS106739";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main (Args _args)
    {
        BankClientEditStatement_RU  editStatement = BankClientEditStatement_RU::construct();

        if (_args.dataset() != tablenum(BankClientPayment_RU))
        {
            throw error(Error::missingParameter(_args.caller()));
        }

        editStatement.initFromPayment(_args.record());

        if (editStatement.prompt())
        {
            editStatement.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>