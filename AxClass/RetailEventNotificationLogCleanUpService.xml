<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEventNotificationLogCleanUpService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;


/// <summary>
/// clean up email notification logs.
/// </summary>
/// <remarks>
/// Runs the class in batch.
/// </remarks>
internal final class RetailEventNotificationLogCleanUpService extends SysOperationServiceBase
{
    // The default maximum number of rows that can be deleted in each task run.
    //      it can be overridden by RetailSharedConfigurationParameters::findByName(keyNameMaxRowsToDeleteInEachTaskRun).
    private static int defaultMaxRowsToDeleteInEachTaskRun = 2000;
    private static str keyNameMaxRowsToDeleteInEachTaskRun = 'NotificationLog_NumOfRowsToBeCleaned';
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run(RetailEventNotificationLogCleanUpContract _contract)
    {
        this.cleanUp(_contract.parmRetentionDays(), _contract.parmAlsoDeleteUnsent());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    private void cleanUp(int retentionDays, NoYes alsoDeleteUnsent)
    {
        
        utcdatetime deleteBeforeDateTime = DateTimeUtil::addDays(DateTimeUtil::utcNow(), -1 * retentionDays);

        // count and log.
        Query q_count = this.getQueryWithRangeParameters(alsoDeleteUnsent, deleteBeforeDateTime);

        /* select count(recid) ... */
        q_count.dataSourceNo(1).addSelectionField(fieldNum(RetailEventNotificationlog, RecId), SelectionField::Count);

        QueryRun qr_count = new QueryRun(q_count);
        qr_count.next();
        RetailEventNotificationlog retailEventNotificationlog_count = qr_count.get(tableNum(RetailEventNotificationLog));
        int countRecordsToDelete = retailEventNotificationlog_count.RecId;
        
        int countRecordsDeletedInThisRun = max(min(countRecordsToDelete, this.getMaxRowsToDeleteInEachRun()), 0);

        str logMessage = strFmt(
            "@Retail:RetailEventNotificationLogCleanUpService_TaskSummary",   // %1 records to delete before %2, will delete %3 of logs in this task run.
            countRecordsToDelete,
            deleteBeforeDateTime,
            countRecordsDeletedInThisRun);
        Info(logMessage);

        // Email notification logs clean-up task with batchJobId {0}, batchTaskId {1}: {2} records to delete before {3}, will delete {4} in this task run.
        eventSource.EventWriteEmailNotificationLogCleanUpTaskRunning(
            this.getCurrentBatchHeader().parmBatchHeaderId(),
            this.getCurrentBatchTask().RecId,
            countRecordsToDelete,
            deleteBeforeDateTime,
            countRecordsDeletedInThisRun,
            retentionDays,
            alsoDeleteUnsent);

        if (countRecordsToDelete <= 0)
        {
            return;
        }

        // get the max id to delete in this task run.
        Query q_maxid = this.getQueryWithRangeParameters(alsoDeleteUnsent, deleteBeforeDateTime);
        q_maxid.dataSourceNo(1).addOrderByField(fieldNum(RetailEventNotificationLog, RecId));

        QueryRun qr_maxid = new QueryRun(q_maxid);
        
        /*
        -- return the record in number countRecordsDeletedInThisRun(i.e. 2000) line.

        SELECT*
        FROM (
            SELECT ROW_NUMBER() OVER(
                ORDER BY T2.RECID) AS ROWNUMBER,
                ...
        ) T1
        WHERE T1.ROWNUMBER>=countRecordsDeletedInThisRun)
            AND T1.ROWNUMBER<countRecordsDeletedInThisRun + 1
        */
        qr_maxid.enablePositionPaging(true);
        qr_maxid.addPageRange(countRecordsDeletedInThisRun, 1);
        
        RecId maxIdToDelete = 0;
        while(qr_maxid.next())
        {
            RetailEventNotificationLog retailEventNotificationLog_search = qr_maxid.get(tableNum(RetailEventNotificationLog));
            maxIdToDelete = retailEventNotificationlog_search.RecId;
            break;
        }

        // delete records.
        if (maxIdToDelete > 0)
        {
            Query q_delete = this.getQueryWithRangeParameters(alsoDeleteUnsent, deleteBeforeDateTime);

            /* where ... and RecId <= maxIdToDelete */
            q_delete.dataSourceNo(1).addRange(fieldNum(RetailEventNotificationLog, RecId)).value(strFmt('(%1 <= %2)',
                fieldStr(RetailEventNotificationLog, RecId),
                maxIdToDelete));

            Query::delete_from(q_delete, true, true, true);

            // schedule next task after interval.
            if (countRecordsDeletedInThisRun < countRecordsToDelete)
            {
                this.createNextTask(alsoDeleteUnsent, retentionDays);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryWithRangeParameters</Name>
				<Source><![CDATA[
    private Query getQueryWithRangeParameters(NoYes alsoDeleteUnsent, utcdatetime deleteBeforeDateTime)
    {
        /*
        select * from RetailEventNotificationLog
        where sentDateTime <= deleteBeforeDateTime
            (and sentSuccessfully = 1)  -- if alsoDeleteUnsent
        */
        Query query = new Query();
        query.allowCrossCompany(true);
        QueryBuildDataSource qbd = query.addDataSource(TableNum(RetailEventNotificationLog));

        qbd.addRange(fieldNum(RetailEventNotificationLog, SentDateTime)).value(strFmt('(%1 <= %2)',
            fieldStr(RetailEventNotificationLog, SentDateTime),
            date2StrXpp(utcDateTime2SystemDateTime(deleteBeforeDateTime))));

        if (alsoDeleteUnsent == NoYes::No)
        {
            qbd.addRange(fieldNum(RetailEventNotificationLog, SentSuccessfully)).value('1');
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNextTask</Name>
				<Source><![CDATA[
    private void createNextTask(NoYes alsoDeleteUnsent, int retentionDays)
    {
        var batchController = new SysOperationServiceController(classStr(RetailEventNotificationLogCleanUpService), methodStr(RetailEventNotificationLogCleanUpService, run));
        batchController.parmDialogCaption("@Retail:RetailEventNotificationLogCleanUpJob_Caption");
        RetailEventNotificationLogCleanUpContract newContract = batchController.getDataContractObject();
        newContract.parmAlsoDeleteUnsent(alsoDeleteUnsent);
        newContract.parmRetentionDays(retentionDays);

        BatchHeader batchHeader = this.getCurrentBatchHeader();   // .batchHeaderId = Batch Job Record Id on form
        batchHeader.addTask(batchController);
        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxRowsToDeleteInEachRun</Name>
				<Source><![CDATA[
    private int getMaxRowsToDeleteInEachRun()
    {
        RetailSharedConfigurationParameters configuredMaxRowsToDelete = RetailSharedConfigurationParameters::findByName(keyNameMaxRowsToDeleteInEachTaskRun);
        if (configuredMaxRowsToDelete.Value != '')
        {
            int configuredValue = str2Int(configuredMaxRowsToDelete.Value);
            if (configuredValue > 0)
            {
                return configuredValue;
            }
        }

        return defaultMaxRowsToDeleteInEachTaskRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>