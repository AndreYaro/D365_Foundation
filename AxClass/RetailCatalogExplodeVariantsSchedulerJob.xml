<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogExplodeVariantsSchedulerJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCatalogPublishSchedulerJob</c> class is a dialog class
/// used to schedule retail catalog publishing job.
/// </summary>
class RetailCatalogExplodeVariantsSchedulerJob extends RunBaseBatch implements BatchRetryable
{
    int64   catalogRecId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        catalogRecId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
        // override so we preserve theinput parameters and not retrieve the last ones.
        // super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the <c>RetailCatalogPublishSchedulerJob</c> class.
    /// </summary>
    /// <returns>A container that contains the current instance of <c>RetailCatalogPublishSchedulerJob</c>.</returns>
    public container pack()
    {
        container ret;

        ret = [#CurrentVersion,#CurrentList];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmcatalogRecId</Name>
				<Source><![CDATA[
    public CatalogRefRecId parmcatalogRecId(CatalogRefRecId _catalogRecId = catalogRecId)
    {
        catalogRecId = _catalogRecId;

        return catalogRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the implementation of the class.
    /// </summary>
    public void run()
    {
        EcoResProductMaster masters;
        EcoResDistinctProductVariant variants;
        CatalogProduct catalogProductMasters, catalogProductVariants;
        CatalogProductCategory catalogProductCategory, catalogProductCategoryCurrent;
        CatalogRefRecId inputCatalog = this.parmcatalogRecId();

        // Initialize Catalog Manager
        CatalogManager catalogManager = CatalogManager::construct(inputCatalog);

        int64 currentProductMasterRecId = 0;

        // Select all product masters from the catalog
        while select RecId, SearchName from masters
            join catalogProductMasters
            where catalogProductMasters.Product == masters.RecId &&
                catalogProductMasters.Catalog == inputCatalog
                outer join catalogProductCategory
                    where catalogProductCategory.CatalogProduct == catalogProductMasters.RecId
        {
            // Explode variants for the product that inherited Category from Navigation hierarchy
            if (currentProductMasterRecId != catalogProductMasters.Product)
            {
                // Make sure we add variants via inheritance only once per product master
                currentProductMasterRecId = catalogProductMasters.Product;

                // When product is added with navigation hierarchy inheritance (CatalogProduct.UseHierarchy = YES) 
                // explode variants on the navigation hierarchy category
                if (catalogProductMasters.UseHierarchy == NoYes::Yes)
                {
                    // Verify if there are already variants for this product master on the catalog
                    select firstonly RecId from variants
                    where variants.ProductMaster == masters.RecId
                        join catalogProductVariants
                        where catalogProductVariants.Product == variants.RecId &&
                            catalogProductVariants.Catalog == inputCatalog;

                    if (!variants)
                    {
                        // Create a list of variants to add to catalog
                        RetailTmpProductsToAdd variantsToAdd = this.getProductVariants(masters);

                        // Add all variants to the catalog, using navigation hierarchy inheritance
                        catalogManager.addProductsToCatalog(variantsToAdd);
                    }
                }
            }

            // When the product master is explicitly added to a category on the catalog,
            // verify if the variants already exist on the current category
            if (catalogProductCategory)
            {
                select firstonly RecId from variants
                    where variants.ProductMaster == masters.RecId
                        join catalogProductVariants
                        where catalogProductVariants.Product == variants.RecId &&
                            catalogProductVariants.Catalog == inputCatalog
                            join catalogProductCategoryCurrent
                                where catalogProductCategoryCurrent.CatalogProduct == catalogProductVariants.RecId &&
                                    catalogProductCategoryCurrent.CategoryHierarchy == catalogProductCategory.CategoryHierarchy &&
                                    catalogProductCategoryCurrent.Category == catalogProductCategory.Category;

                if (!variants)
                {
                    // Create a list of variants to add to catalog
                    RetailTmpProductsToAdd variantsToAdd = this.getProductVariants(masters);

                    // If the product was explicitly added to the catalog category, add the variants to the same category
                    catalogManager.addProductsToCategory(variantsToAdd, catalogProductCategory.CategoryHierarchy, catalogProductCategory.Category);

                    variantsToAdd.dispose();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductVariants</Name>
				<Source><![CDATA[
    private RetailTmpProductsToAdd getProductVariants(EcoResProductmaster _productMaster)
    {
        EcoResDistinctProductVariant variantsLocal;
        RetailTmpProductsToAdd variantsToAddLocal;

        EcoResProductRecId masterId = _productMaster.RecId;
        str masterName = _productMaster.SearchName;
        
        // Create a list of variants to add to catalog
        insert_recordset variantsToAddLocal
            (EcoResProduct, EcoResProductName, EcoResDistinctProductVariant)
        select masterId, masterName, RecId from variantsLocal
            where variantsLocal.ProductMaster == _productMaster.RecId;

        return variantsToAddLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="_packedClass"/> parameter to the current instance of <c>RetailCatalogExplodeVariantsSchedulerJob</c>.
    /// </summary>
    /// <param name = "packedClass">The container from which to deserialize the instance.</param>
    /// <returns>true if deserialization was successful; otherwise, false.</returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static RetailCatalogExplodeVariantsSchedulerJob construct()
    {
        return new RetailCatalogExplodeVariantsSchedulerJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides class description.
    /// </summary>
    /// <returns>The <c>ClassDescription</c>.</returns>
    public static ClassDescription description()
    {
        return "@Retail:RetailCatalogExplodeVariantsJobDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The main method which initializes the call for the other methods.
    /// </summary>
    /// <param name="_args">
    /// Retail catalog scheduler job record.
    /// </param>
    /// <param name="_supress_dialog">
    /// Boolean value, which shows suppress dialog state.
    /// </param>
    public static void main(Args _args, boolean _supress_dialog = false)
    {
        RetailCatalogExplodeVariantsSchedulerJob scheduler = RetailCatalogExplodeVariantsSchedulerJob::construct();
        Catalog inputCatalog = _args.record();

        scheduler.parmcatalogRecId(inputCatalog.RecId);

        if (!_supress_dialog)
        {
            if (scheduler.prompt())
            {
                scheduler.runOperation();
            }
        }
        else
        {
            scheduler.runOperation();
        }

        if (_args.caller().name() == formStr(RetailCatalogDetails))
        {
            _args.caller().refreshCatalogDetails();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailCatalogExplodeVariantsSchedulerJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailCatalogExplodeVariantsSchedulerJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>