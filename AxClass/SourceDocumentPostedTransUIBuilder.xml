<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentPostedTransUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SourceDocumentPostedTransUIBuilder</c> class is used to manage the parameter form for the
/// <c>SourceDocumentPostedTrans</c> report.
/// </summary>
public class SourceDocumentPostedTransUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField                       dialogFieldFromDate;
    DialogField                       dialogFieldToDate;
    DialogField                       dialogFieldDateCode;
    DialogField                       dialogFieldSourceDocumentType;
    DialogField                       dialogFieldDocumentNumber;
    DialogField                       dialogFieldProject;
    RefRecId                          sourceDocumentRelationTypeId;
    SourceDocumentTmpTypeInformation  sourceDocumentTmpTypeInformation;
    SourceDocumentPostedTransHelperUI sourceDocumentPostedTransHelperUI;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dateIntervalModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the from date and to date fields based on the selected date interval.
    /// </summary>
    /// <param name="_control">
    /// The <c>FormStringControl</c> object whose value determines the date field values.
    /// </param>
    /// <returns>
    /// True if the control value has been modified; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean dateIntervalModified(FormStringControl _control)
    {
        boolean          returnValue;
        LedgerPeriodCode ledgerPeriodCode;

        returnValue = _control.modified();

        if (returnValue)
        {
            if (dialogFieldDateCode.value() != '')
            {
                ledgerPeriodCode = LedgerPeriodCode::find(dialogFieldDateCode.value());

                if (ledgerPeriodCode)
                {
                    dialogFieldFromDate.value(ledgerPeriodCode.fromDate());
                    dialogFieldToDate.value(ledgerPeriodCode.toDate());
                }
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIntervalValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that date interval is valid.
    /// </summary>
    /// <param name="_control">
    /// The control in which to verify the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the control value is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The date interval must exist in the <c>LedgerPeriodCode</c> table.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean dateIntervalValidate(FormStringControl _control)
    {
        str     dateCodeValue;
        boolean returnValue = true;

        dateCodeValue = _control.valueStr();

        if (dateCodeValue)
        {
            returnValue = LedgerPeriodCode::checkExist(dateCodeValue);
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the date interval parameter when the from or to date field is changed.
    /// </summary>
    /// <param name="_control">
    /// The <c>FormDateControl</c> object that has changed.
    /// </param>
    /// <returns>
    /// True if the control value has been modified; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean dateModified(FormDateControl _control)
    {
        boolean returnValue;

        returnValue = _control.modified();

        if (returnValue)
        {
            dialogFieldDateCode.value('');
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentNumberLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup for the document number.
    /// </summary>
    /// <param name="_documentNumberControl">
    /// The control that is behind the looked up dialog field.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void documentNumberLookup(FormStringControl _documentNumberControl)
    {
        if (sourceDocumentPostedTransHelperUI)
        {
            sourceDocumentPostedTransHelperUI.lookupDocumentNumber();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentNumberValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified document number is valid.
    /// </summary>
    /// <param name="_control">
    /// The control containing the document number value to be validated.
    /// </param>
    /// <returns>
    /// true if the value is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean documentNumberValidate(FormStringControl _control)
    {
        boolean isValid = true;

        if (sourceDocumentPostedTransHelperUI)
        {
            sourceDocumentPostedTransHelperUI.parmDocumentNumber(dialogFieldDocumentNumber.value());

            sourceDocumentPostedTransHelperUI.validateDocumentNumber();

            isValid = sourceDocumentPostedTransHelperUI.parmIsDocumentNumberValid();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InstantiateSourceDocPostedTransHelperUI</Name>
				<Source><![CDATA[
    private void InstantiateSourceDocPostedTransHelperUI()
    {
        SourceDocumentHeader sourceDocumentHeader;
        SourceDocument       sourceDocument;

        select firstOnly sourceDocumentHeader
            where sourceDocumentHeader.SourceRelationType == sourceDocumentRelationTypeId;

        if (sourceDocumentHeader)
        {
            sourceDocument                    = SourceDocument::newFromSourceDocumentHeader(sourceDocumentHeader);
            sourceDocumentPostedTransHelperUI = SourceDocumentPostedTransHelperUI::newForSourceDocument(sourceDocument, dialogFieldDocumentNumber.control());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the dialog field methods to capture events.
    /// </summary>
    public void postRun()
    {
        Dialog                            dialogLocal = this.dialog();
        SourceDocumentPostedTransContract contract   = this.dataContractObject();

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        dialogFieldDateCode           = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(SourceDocumentPostedTransContract, parmDateCode));
        dialogFieldFromDate           = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(SourceDocumentPostedTransContract, parmFromDate));
        dialogFieldToDate             = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(SourceDocumentPostedTransContract, parmToDate));
        dialogFieldSourceDocumentType = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(SourceDocumentPostedTransContract, parmSourceDocumentType));
        dialogFieldDocumentNumber     = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(SourceDocumentPostedTransContract, parmDocumentNumber));
        dialogFieldProject            = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(SourceDocumentPostedTransContract, parmProjId));

        sourceDocumentRelationTypeId = contract.parmSourceDocumentRelationType();

        this.InstantiateSourceDocPostedTransHelperUI();

        dialogFieldDateCode.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(SourceDocumentPostedTransUIBuilder, dateIntervalModified), this);

        dialogFieldDateCode.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(SourceDocumentPostedTransUIBuilder, dateIntervalValidate), this);

        // run these to sync to the system date
        this.dateIntervalModified(dialogFieldDateCode.control());

        dialogFieldFromDate.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(SourceDocumentPostedTransUIBuilder, dateModified), this);
        dialogFieldToDate.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(SourceDocumentPostedTransUIBuilder, dateModified), this);

        sourceDocumentTmpTypeInformation = SourceDocumentType::getSourceDocumentTypeInformation(classId2Name(classIdGet(this)));

        dialogFieldSourceDocumentType.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(SourceDocumentPostedTransUIBuilder, sourceDocumentTypeControlLookup), this);
        dialogFieldSourceDocumentType.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(SourceDocumentPostedTransUIBuilder, sourceDocumentTypeControlValidate), this);
        dialogFieldSourceDocumentType.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(SourceDocumentPostedTransUIBuilder, sourceDocumentTypeControlModified), this);
        dialogFieldDocumentNumber.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(SourceDocumentPostedTransUIBuilder, documentNumberLookup), this);
        dialogFieldDocumentNumber.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(SourceDocumentPostedTransUIBuilder, documentNumberValidate), this);
        dialogFieldProject.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(SourceDocumentPostedTransUIBuilder, projectIdValidate), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectIdValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified project Id.
    /// </summary>
    /// <param name="_control">
    /// The control containing the project Id value to be validated.
    /// </param>
    /// <returns>
    /// true if the value is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean projectIdValidate(FormStringControl _control)
    {
        return ProjTable::checkExist(dialogFieldProject.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentTypeControlLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup for the source document type.
    /// </summary>
    /// <param name="_sourceDocumentTypeControl">
    /// The control that is behind the looked up dialog field.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void sourceDocumentTypeControlLookup(FormStringControl _sourceDocumentTypeControl)
    {
        FormStringControl sourceDocumentType;
        SysTableLookup    tableLookup;
        Query             query;

        query = new query();
        query.addDataSource(tableNum(SourceDocumentTmpTypeInformation));
        query.dataSourceTable(tableNum(SourceDocumentTmpTypeInformation)).addOrderByField(fieldNum(SourceDocumentTmpTypeInformation, SourceRelationType), SortOrder::Ascending);
        query.dataSourceTable(tableNum(SourceDocumentTmpTypeInformation)).addRange(
            fieldNum(SourceDocumentTmpTypeInformation, SourceRelationType)).value(SysQuery::value(tableNum(AdvancedLedgerEntryHeader)));

        sourceDocumentType = _sourceDocumentTypeControl;
        tableLookup        = SysTableLookup::newParameters(tableNum(SourceDocumentTmpTypeInformation), sourceDocumentType);

        tableLookup.addLookupfield(fieldNum(SourceDocumentTmpTypeInformation, EnumTranslatedName), true);
        tableLookup.setLabel("@SourceDocumentation:SourceDocumentType");

        tableLookup.parmTmpBuffer(sourceDocumentTmpTypeInformation);
        tableLookup.parmQuery(query);
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentTypeControlModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the from date and to date fields based on the selected date interval.
    /// </summary>
    /// <param name="_control">
    /// The <c>FormStringControl</c> object whose value determines the date field values.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean sourceDocumentTypeControlModified(FormStringControl _control)
    {
        boolean returnValue;

        returnValue = _control.modified();

        if (returnValue)
        {
            if (dialogFieldSourceDocumentType.value() != '')
            {
                select ClassId, SourceRelationType
                    from sourceDocumentTmpTypeInformation
                        where sourceDocumentTmpTypeInformation.EnumTranslatedName == dialogFieldSourceDocumentType.value();

                if (sourceDocumentTmpTypeInformation)
                {
                    sourceDocumentRelationTypeId = sourceDocumentTmpTypeInformation.SourceRelationType;
                }
            }
            else
            {
                sourceDocumentRelationTypeId = 0;
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentTypeControlValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates, whether source document type enum is valid .
    /// </summary>
    /// <param name="_sourceDocumentTypeControl">
    /// The source doucment type control in which to verify the changed dialog field.
    /// </param>
    /// <returns>
    /// true if the source doucment type control value is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The source document type must exist in the <c>SourceDocumentTmpTypeInformation</c> table.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean sourceDocumentTypeControlValidate(FormStringControl _sourceDocumentTypeControl)
    {
        boolean isValid;
        str     sourceDocumentTypeEnumText;

        #define.AdvancedLedgerEntryDocument("Advanced ledger entry source document");

        isValid = true;

        sourceDocumentTypeEnumText = _sourceDocumentTypeControl.text();

        if (isValid && sourceDocumentTypeEnumText == #AdvancedLedgerEntryDocument)
        {
            select RecId
                from sourceDocumentTmpTypeInformation
                    where sourceDocumentTmpTypeInformation.EnumTranslatedName == #AdvancedLedgerEntryDocument;

            sourceDocumentRelationTypeId = sourceDocumentTmpTypeInformation.SourceRelationType;
        }
        else
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>