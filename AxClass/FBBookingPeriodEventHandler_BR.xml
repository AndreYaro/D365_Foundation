<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBBookingPeriodEventHandler_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FBBookingPeriodEventHandler_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>FBBookingPeriod_BR_onDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles <c>FBBookingPeriod_BR</c> record deleting event.
    /// </summary>
    /// <param name="_sender">The <c>FBBookingPeriod_BR</c> record being deleted.</param>
    /// <param name="_e">The data event arguments.</param>
    [DataEventHandler(tableStr(FBBookingPeriod_BR), DataEventType::Deleting)]
    public static void FBBookingPeriod_BR_onDeleting(Common _sender, DataEventArgs _e)
    {
        FBBookingPeriod_BR bookingPeriod = _sender as FBBookingPeriod_BR;

        FBFiscalPrinterDailyReport_BR       fiscalPrinterDailyReport;

        // Keep min report number before it is deleted
        select minof(Number) from fiscalPrinterDailyReport
                where fiscalPrinterDailyReport.fbBookingPeriod_BR == bookingPeriod.RecId;

        if (fiscalPrinterDailyReport.Number)
        {
            FiscalEstablishment_BR fiscalEstablishment = bookingPeriod.fiscalEstablishment();

            fiscalEstablishment.selectForUpdate(true);
            fiscalEstablishment.NextFiscalPrinterDailyReportNumber = fiscalPrinterDailyReport.Number;
            fiscalEstablishment.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FBBookingPeriod_BR_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles <c>FBBookingPeriod_BR</c> record deleted event.
    /// </summary>
    /// <param name="_sender">The <c>FBBookingPeriod_BR</c> record deleted.</param>
    /// <param name="_e">The data event arguments.</param>
    [DataEventHandler(tableStr(FBBookingPeriod_BR), DataEventType::Deleted)]
    public static void FBBookingPeriod_BR_onDeleted(Common _sender, DataEventArgs _e)
    {
        FBBookingPeriod_BR bookingPeriod = _sender as FBBookingPeriod_BR;

        FiscalEstablishment_BR              fiscalEstablishment;
        FBTaxWithholdTrans_BR               fbTaxWithholdingTrans;
        FBNonFiscalOperation_BR             fbNonFiscalOperation;
        FiscalOrganization_BR               fiscalOrganization;
        FBTaxTrans_BR                       fbTaxTrans;
        FBBookingPeriod_BR                  rootBookingPeriod;
        FBTaxAssessment_BR                  pisTaxAssessment, cofinsTaxAssessment;
        FBTaxAssessmentWhtBalanceControl_BR pisTaxWhtBalanceControl, cofinsTaxWhtBalanceControl;

        changeCompany (bookingPeriod.FiscalEstablishmentDataArea)
        {
            ttsbegin;

            fiscalEstablishment = FiscalEstablishment_BR::findById(bookingPeriod.FiscalEstablishmentId);
            fiscalOrganization  = FiscalOrganization_BR::findByFiscalEstablishmentId(bookingPeriod.FiscalEstablishmentId, bookingPeriod.FiscalEstablishmentDataArea);
            if (!fiscalOrganization)
            {
                if (fiscalEstablishment.FiscalOrganization_BR)
                {
                    fiscalOrganization  = FiscalOrganization_BR::find(fiscalEstablishment.FiscalOrganization_BR);
                    rootBookingPeriod   = FBBookingPeriod_BR::findByFiscalEstablishmentAndPeriod(fiscalOrganization.FiscalEstablishmentId, fiscalOrganization.FiscalEstablishmentDataArea, bookingPeriod.PeriodMonth, bookingPeriod.PeriodYear);
                }
            }
            else
            {
                rootBookingPeriod = bookingPeriod;
            }

            if (rootBookingPeriod)
            {
                select firstOnly pisTaxAssessment
                    where   pisTaxAssessment.FBBookingPeriod_BR == rootBookingPeriod.RecId
                        &&  pisTaxAssessment.TaxType            == TaxType_BR::PIS;

                if (pisTaxAssessment)
                {
                    pisTaxWhtBalanceControl = FBTaxAssessmentWhtBalanceControl_BR::construct(pisTaxAssessment);
                }

                select firstOnly cofinsTaxAssessment
                    where   cofinsTaxAssessment.FBBookingPeriod_BR  == rootBookingPeriod.RecId
                        &&  cofinsTaxAssessment.TaxType             == TaxType_BR::COFINS;

                if (cofinsTaxAssessment)
                {
                    cofinsTaxWhtBalanceControl = FBTaxAssessmentWhtBalanceControl_BR::construct(cofinsTaxAssessment);
                }
            }

            // Delete FBTaxTrans_BR related to PIS or COFINS for branch fiscal establishment
            delete_from fbTaxTrans
                where   fbTaxTrans.FiscalEstablishmentId    == bookingPeriod.FiscalEstablishmentId
                    &&  fbTaxTrans.FiscalEstablishmentDataArea == bookingPeriod.FiscalEstablishmentDataArea
                    &&  fbTaxTrans.FBTaxAssessment_BR       == pisTaxAssessment.RecId;

            delete_from fbTaxTrans
                where   fbTaxTrans.FiscalEstablishmentId    == bookingPeriod.FiscalEstablishmentId
                    &&  fbTaxTrans.FiscalEstablishmentDataArea == bookingPeriod.FiscalEstablishmentDataArea
                    &&  fbTaxTrans.FBTaxAssessment_BR       == cofinsTaxAssessment.RecId;

            // Delete association with tax withholding trans
            // Besides that, it is necessary to update the withholding credit control
            while select forupdate fbTaxWithholdingTrans
                where fbTaxWithholdingTrans.fbBookingPeriod_BR == bookingPeriod.RecId
            {
                fbTaxWithholdingTrans.fbBookingPeriod_BR = 0;
                fbTaxWithholdingTrans.write();
                
                if (pisTaxAssessment)
                {
                    pisTaxWhtBalanceControl.updateCreditFromTaxWithholdTrans(fbTaxWithholdingTrans.CustWhtContributionType, -fbTaxWithholdingTrans.PisWithholdAmount, fbTaxWithholdingTrans.AssessmentRegimen);
                }
                
                if (cofinsTaxAssessment)
                {
                    cofinsTaxWhtBalanceControl.updateCreditFromTaxWithholdTrans(fbTaxWithholdingTrans.CustWhtContributionType, -fbTaxWithholdingTrans.CofinsWithholdAmount, fbTaxWithholdingTrans.AssessmentRegimen);
                }
            }

            // Delete association with non fiscal operations
            while select forupdate fbNonFiscalOperation
                where fbNonFiscalOperation.fbBookingPeriod_BR == bookingPeriod.RecId
            {
                fbNonFiscalOperation.fbBookingPeriod_BR = 0;
                fbNonFiscalOperation.write();
            }

            // Update the withholding credit balance from PIS and COFINS tax assessment
            if (pisTaxAssessment)
            {
                pisTaxWhtBalanceControl.updateWhtCreditDistribution();
            }

            if (cofinsTaxAssessment)
            {
                cofinsTaxWhtBalanceControl.updateWhtCreditDistribution();
            }

            ttscommit;
        }

        FBBookingPeriodProdTable_BR bookingPeriodProdTable_BR;

        delete_from bookingPeriodProdTable_BR
            where bookingPeriodProdTable_BR.FBBookingPeriod_BR == bookingPeriod.RecId;

        FBProductionReportingPeriod_BR productionReportingPeriod;

        delete_from productionReportingPeriod
            where productionReportingPeriod.FBBookingPeriod_BR == bookingPeriod.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FBBookingPeriod_BR_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles <c>FBBookingPeriod_BR</c> record inserted event.
    /// </summary>
    /// <param name="_sender">The <c>FBBookingPeriod_BR</c> record being inserted.</param>
    /// <param name="_e">The data event arguments.</param>
    [DataEventHandler(tableStr(FBBookingPeriod_BR), DataEventType::Inserted)]
    public static void FBBookingPeriod_BR_onInserted(Common _sender, DataEventArgs _e)
    {
        FBBookingPeriod_BR bookingPeriod = _sender as FBBookingPeriod_BR;
        FBProductionReportingPeriod_BR productionReportingPeriod;

        productionReportingPeriod.FBBookingPeriod_BR = bookingPeriod.RecId;
        productionReportingPeriod.FromDate = bookingPeriod.periodFrom();
        productionReportingPeriod.ToDate = bookingPeriod.periodTo();
        productionReportingPeriod.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>