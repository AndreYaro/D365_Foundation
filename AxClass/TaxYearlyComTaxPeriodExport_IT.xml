<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxYearlyComTaxPeriodExport_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
/// <summary>
/// The TaxYearlyComTaxPeriodExport_IT class is responsible for the export Tax yearly communication records and related information via GER configuration.
/// </summary>
public class TaxYearlyComTaxPeriodExport_IT extends RunBase implements ERIFormatPostProcessingTask
{
    private const int CurrentVersion = 1;
    private const int SysLastValuesCurrentVersion = 1;

    private RecId taxYearlyComId;
    private DialogField dialogFileName;
    private ERFileName filename;
    private Yr taxYearlyReportYear;
    private ATECOFINCode_IT aTECOFINCode;
    private TaxPeriod taxPeriod;

    private readonly boolean isMultiTaxId = MultipleTaxIdReportingHelper::isMultipleTaxIdEnabledForScope(MultipleTaxIdScope::VATDeclaration);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        const str ICL = '_ICL';

        Dialog dialog = super();

        if (!filename)
        {
            filename = strFmt('%1%2%3', CompanyInfo::find().CoRegNum, ICL, subStr(int2str(this.parmYear()), 3, 2));
        }

        dialog.addGroup("@SYS26552");

        dialogFileName = dialog.addFieldValue(extendedTypeStr(ERFileName), filename);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        filename = fileNameTrim(dialogFileName.value());

        if (!filename)
        {
            ret = checkFailed("@SYS18624");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    public ERFileName parmFileName(ERFileName _filename = filename)
    {
        filename = _filename;
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxYearlyComId</Name>
				<Source><![CDATA[
    public RecId parmTaxYearlyComId(RecId _taxYearlyComId = taxYearlyComId)
    {
        taxYearlyComId = _taxYearlyComId;
        return taxYearlyComId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmYear</Name>
				<Source><![CDATA[
    public Yr parmYear(Yr _year = taxYearlyReportYear)
    {
        taxYearlyReportYear = _year;
        return taxYearlyReportYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmATECOFINCode_IT</Name>
				<Source><![CDATA[
    public ATECOFINCode_IT parmATECOFINCode_IT(ATECOFINCode_IT _aTECOFINCode_IT = _aTECOFINCode_IT)
    {
        _aTECOFINCode_IT = _aTECOFINCode_IT;
        return _aTECOFINCode_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxperiod</Name>
				<Source><![CDATA[
    public TaxPeriod parmTaxperiod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        ERFormatMappingId formatMappingId = TaxParameters::find().TaxYearlyComERFormatMapping_IT;

        if (this.validateFormat(formatMappingId))
        {
            Query query = new Query();

            QueryBuildDataSource qbds = query.addDataSource(tableNum(TaxYearlyComV2_IT));
            qbds.addRange(fieldNum(TaxYearlyComV2_IT, RecId))
                .value(queryValue(this.parmTaxYearlyComId()));

            ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId, this.parmFileName())
                .withFileDestination(ERObjectsFactory::createFileDestinationBrowser())
                .withParameter(this.getERDataBaseContext())
                .withPostProcessingTask(this)
                .run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFormat</Name>
				<Source><![CDATA[
    private boolean validateFormat(ERFormatMappingId _formatMappingId)
    {
        boolean ret = true;

        if (!_formatMappingId)
        {
            // Error on function run. Format mapping is not specified in Sales tax parameters.
            str message = strfmt("@GLS110288" + "@SYS35672" + ' ' + "@SYS93945", "@AccountsReceivable:FormatMapping", "@SYS336146", "@SYS35672");
            error(message);
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public void execute()
    {
        TaxYearlyComV2_IT taxYearlyCom;
        update_recordset taxYearlyCom
            setting 
                ExportDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                Exported = NoYes::Yes,
                ExportedFile = filename
            where taxYearlyCom.RecId == this.parmTaxYearlyComId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidForPacking</Name>
				<Source><![CDATA[
    public boolean isValidForPacking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidForPartiallyPacking</Name>
				<Source><![CDATA[
    public boolean isValidForPartiallyPacking()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@VATDeclaration:TaxYearlyCommunicationExport";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxYearlyComTaxPeriodExport_IT construct(RefRecId _taxYearlyComRecId)
    {
        TaxYearlyComTaxPeriodExport_IT export = new TaxYearlyComTaxPeriodExport_IT();
        export.parmTaxYearlyComId(_taxYearlyComRecId);

        return export;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args.record() || _args.dataset() != tablenum(TaxYearlyComV2_IT))
        {
            throw error(strfmt("@SYS25516", TaxYearlyComTaxPeriodExport_IT::description()));
        }

        TaxYearlyComV2_IT taxYearlyCom = _args.record();

        TaxYearlyComTaxPeriodExport_IT export = TaxYearlyComTaxPeriodExport_IT::construct(taxYearlyCom.RecId);

        if (export.prompt())
        {
            export.runOperation();
            TaxYearlyComTaxPeriodExport_IT::refereshCallerDataSource(taxYearlyCom);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refereshCallerDataSource</Name>
				<Source><![CDATA[
    private static void refereshCallerDataSource(Common _cursor)
    {
        FormDataSource ds = FormDataUtil::getFormDataSource(_cursor);
        if (ds)
        {
            ds.reread();
            ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    public void saveLast()
    {
        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        //super();

        // The following fields must be maintained to mimic the functionality of the overriden method.
        inGetSaveLast   = true;

        // Persist the pertinent values to the SysLastValue table.
        xSysLastValue::putValue(this.packSysLastValues(),
                                this.lastValueDataAreaId(),
                                this.lastValueUserId(),
                                this.lastValueType(),
                                this.lastValueElementName(),
                                this.lastValueDesignName());

        // The following fields must be maintained to mimic the functionality of the overriden method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
        container packedValues;
        getLastCalled   = true;
        inGetSaveLast   = true;

        // Restore the pertinent values from the SysLastValue table.
        packedValues = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                               this.lastValueUserId(),
                                               this.lastValueType(),
                                               this.lastValueElementName(),
                                               this.lastValueDesignName());

        this.unpackSysLastValues(packedValues);

        // The following fields must be maintained to mimic the functionality of the overriden method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    public void unpackSysLastValues(container _packedValues)
    {
        Version version = RunBase::getVersion(_packedValues);

        switch (version)
        {
            case SysLastValuesCurrentVersion:
                [version, fileName] = _packedValues;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    public container packSysLastValues()
    {
        return [SysLastValuesCurrentVersion, fileName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [CurrentVersion, fileName, taxYearlyComId];
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, fileName, taxYearlyComId] = _packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERDataBaseContext</Name>
				<Source><![CDATA[
    private ERModelDefinitionDatabaseContext getERDataBaseContext()
    {
        ERModelDefinitionDatabaseContext databaseContext = new ERModelDefinitionDatabaseContext();

        Query query = new Query();
        query.addDataSource(tableNum(TaxYearlyComV2_IT))
            .addRange(fieldNum(TaxYearlyComV2_IT, RecId))
            .value(queryValue(this.parmTaxYearlyComId()));
        databaseContext.addQuery(tableNum(TaxYearlyComV2_IT), query);

        databaseContext.addTemporaryTable(this.getTmpTaxReportLine());

        return databaseContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxReportLine</Name>
				<Source><![CDATA[
    private TaxReportLine_IT getTmpTaxReportLine()
    {
        TaxReportLine_IT taxReportLine, tmpTaxReportLine;
        LineNum lineNum, fieldValueLength;
        const int WriterNonPosValueLength = 16;
        const str PlusSign = '+';
        int AdditionalValueLength = WriterNonPosValueLength - strLen(PlusSign);

        tmpTaxReportLine.setTempDB();

        Query query = new Query();
        QueryBuildDataSource qbdsTaxReportLine = query.addDataSource(tableNum(TaxReportLine_IT));
        qbdsTaxReportLine.addSortField(fieldNum(TaxReportLine_IT, LineNum), SortOrder::Ascending);

        QueryBuildDataSource qbdsTaxReportHeader = qbdsTaxReportLine.addDataSource(tableNum(TaxReportHeader_IT));
        qbdsTaxReportHeader.relations(true);
        qbdsTaxReportHeader.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource qbdsTaxYearlyComReport = qbdsTaxReportHeader.addDataSource(tableNum(TaxYearlyComReportV2_IT));
        qbdsTaxYearlyComReport.relations(true);
        qbdsTaxYearlyComReport.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource qbdsTaxYearlyCom = qbdsTaxYearlyComReport.addDataSource(tableNum(TaxYearlyComV2_IT));
        qbdsTaxYearlyCom.relations(true);
        qbdsTaxYearlyCom.joinMode(JoinMode::ExistsJoin);
        qbdsTaxYearlyCom.addRange(fieldNum(TaxYearlyComV2_IT, RecId)).value(queryValue(this.parmTaxYearlyComId()));

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            lineNum++;
            taxReportLine = queryRun.get(tableNum(TaxReportLine_IT));
            tmpTaxReportLine.data(taxReportLine);
            tmpTaxReportLine.TaxReportHeader = lineNum; // to skip the index constraints
            tmpTaxReportLine.LineNum = lineNum;

            fieldValueLength = strLen(taxReportLine.FieldValue);

            if (taxReportLine.FieldFormat == TaxReportFieldFormat_IT::AN
                && fieldValueLength > WriterNonPosValueLength)
            {
                tmpTaxReportLine.FieldValue = subStr(taxReportLine.FieldValue, 1, WriterNonPosValueLength);
                tmpTaxReportLine.insert();

                for (int position = WriterNonPosValueLength + 1; position <= fieldValueLength; position += AdditionalValueLength)
                {
                    lineNum++;
                    tmpTaxReportLine.TaxReportHeader = lineNum;
                    tmpTaxReportLine.LineNum = lineNum;
                    tmpTaxReportLine.FieldValue = PlusSign + subStr(taxReportLine.FieldValue, position, AdditionalValueLength);
                    tmpTaxReportLine.insert();
                }
            }
            else
            {
                tmpTaxReportLine.insert();
            }
        }

        return tmpTaxReportLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>