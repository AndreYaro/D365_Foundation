<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesComplementaryInvSourceDocLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SalesComplementaryInvSourceDocLine</c> class provides the information to handle the
///    distributions and subledger journal account entries for a sales complementary invoice line.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_SalesComplementaryInv), SourceDocumentLine_SalesComplementaryInv::SalesComplementaryInvoiceLine)]
public class SalesComplementaryInvSourceDocLine extends SourceDocumentLineItem
    implements SourceDocumentLineItemIProduct,
               SourceDocumentLineItemIProject
{
    SalesComplementaryInvoiceHeader salesComplInv;
    SalesComplementaryInvoiceLine   salesComplLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the legal entity rec ID associated with the source document line.
    /// </summary>
    /// <returns>
    /// <c>LegalEntityRecId</c> associated with this source document line.
    /// </returns>
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap sourceDocumentAmountMap = SourceDocumentAmountMap::construct();

        SourceDocumentAmount extendedPrice = SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(), salesComplLine.Amount, MonetaryAmount::ExtendedPrice, false);
        sourceDocumentAmountMap.insert(extendedPrice);
        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    public BusinessEvent documentsBusinessEvent()
    {
        return new BusinessEvent(enumNum(BusinessEvent_SalesComplementaryInv), BusinessEvent_SalesComplementaryInv::SalesComplementaryInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        salesComplLine = _sourceDocumentLineImplementation;
        salesComplInv = salesComplLine.salesComplementaryInvoiceHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancelling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the sales complementary invoice line is cancelling a previously posted sales complementary invoice
    /// </summary>
    /// <returns>
    /// True if it's cancelling a previously posted sales complementary invoice, false otherwise
    /// </returns>
    public boolean isCancelling()
    {
        return salesComplLine.Amount < 0 || salesComplLine.AdditionalICMSAmount < 0 || salesComplLine.AdditionalIPIAmount < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return salesComplInv.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategory</Name>
				<Source><![CDATA[
    public Common parmCategory()
    {
        return EcoResCategory::find(salesComplLine.EcoResCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryName</Name>
				<Source><![CDATA[
    public str parmCategoryName()
    {
        return EcoResCategory::find(salesComplLine.EcoResCategory).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        return salesComplLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        return salesComplLine.AccountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public Common parmInventTable()
    {
        return InventTable::find(salesComplLine.ItemCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmItemDataAreaId()
    {
        DataAreaId      dataAreaId;

        if (salesComplLine.ItemCode)
        {
            dataAreaId = salesComplLine.DataAreaId;
        }

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return salesComplLine.ItemCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmProjectActivityNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjectCategoryId()
    {
        return salesComplLine.ProjCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFundingSourceRecId</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmProjectFundingSourceRecId()
    {
        return salesComplLine.ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    public ProjId parmProjectId()
    {
        return salesComplLine.ProjTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLineProperty</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmProjectLineProperty()
    {
        ProjLinePropertyId  projLinePropertyId;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            projLinePropertyId = ProjLinePropertySetup::findLinePropertyId(salesComplLine.ProjTable, salesComplLine.ProjCategory);
        }

        return projLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceCategoryRecId</Name>
				<Source><![CDATA[
    public ResourceCategoryRecId parmProjectResourceCategoryRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceRecId</Name>
				<Source><![CDATA[
    public ResourceRecId parmProjectResourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransactionId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjectTransactionId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup parmSalesTaxGroup()
    {
        return salesComplLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStocked</Name>
				<Source><![CDATA[
    public TradeStockedProduct parmStocked()
    {
        return salesComplLine.StockedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return salesComplInv.Currency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
