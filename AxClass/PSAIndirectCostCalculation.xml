<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>psaIndirectCostCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class psaIndirectCostCalculation
{
    PSAIndirectCompoundingSetup     psaIndirectCompoundingSetup;
    PSAIndirectCompoundingRules     psaIndirectCompoundingRules;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    public Amount calculate(Amount                      _rBaseAmount,
                            PSAIndirectComponentGroupId _sGroupId,
                            PSAIndirectComponentType    _eType,
                            PSAIndirectComponentId      _sId,
                            TransDate                   _dTrans,
                            RecId                       _iRefRecId,
                            Qty                         _rQty                = 1,
                            CurrencyCode                _transactionCurrency = Ledger::accountingCurrency())
    {
        #define.BaseComponent('Base amount')
        PSAIndirectCompoundingRulesSelection        tRulesSelection;
        PSAIndirectCompoundingSetup                 tCompoundingSetup;
        Amount                                      rRet = 0;

        if (_sId == #BaseComponent)
        {
            return _rBaseAmount * _rQty;
        }

        tCompoundingSetup = PSAIndirectCompoundingSetup::validCompoundingSetup(_sGroupId, _sId, _dTrans);

        if (!tCompoundingSetup)
        {
            return 0;
        }

        if (tCompoundingSetup.CalcMethod == PSAIndirectComponentCalcMethod::UnitRate)
        {
            switch (_eType)
            {
                case PSAIndirectComponentType::Cost:
                    if (_iRefRecId)
                    {
                        PSAIndirectComponentTransLog::insertLogLine(_iRefRecId, tCompoundingSetup.RecId, _eType); // Log used rate
                    }
                    return tCompoundingSetup.CostRate * _rQty;

                case PSAIndirectComponentType::Revenue:
                    if (_iRefRecId)
                    {
                        PSAIndirectComponentTransLog::insertLogLine(_iRefRecId, tCompoundingSetup.RecId, _eType); // Log used rate
                    }
                    return CurrencyExchangeHelper::curAmount(tCompoundingSetup.RevenueRate * _rQty, _transactionCurrency);

                case PSAIndirectComponentType::Invoice:
                    if (_iRefRecId)
                    {
                        PSAIndirectComponentTransLog::insertLogLine(_iRefRecId, tCompoundingSetup.RecId, _eType); // Log used rate
                    }
                    return CurrencyExchangeHelper::curAmount(tCompoundingSetup.InvoiceRate * _rQty, _transactionCurrency);

                default:
                    throw error(strFmt("@SYS19306", funcName()));
            }
        }

        while select ComponentId from tRulesSelection
               where tRulesSelection.BaseComponentId    == _sId         &&
                     tRulesSelection.ComponentGroupId   == _sGroupId    &&
                     tRulesSelection.ComponentType      == _eType
        {
            switch (_eType)
            {
                case PSAIndirectComponentType::Cost:
                    if (_iRefRecId)
                    {
                        PSAIndirectComponentTransLog::insertLogLine(_iRefRecId, tCompoundingSetup.RecId, _eType); // Log used rate
                    }
                    rRet = rRet + this.calculate(_rBaseAmount, _sGroupId, _eType, tRulesSelection.ComponentId, _dTrans, _iRefRecId, _rQty) * tCompoundingSetup.CostRate / 100;
                    break;

                case PSAIndirectComponentType::Revenue:
                    if (_iRefRecId)
                    {
                        PSAIndirectComponentTransLog::insertLogLine(_iRefRecId, tCompoundingSetup.RecId, _eType); // Log used rate
                    }
                    rRet = rRet + this.calculate(_rBaseAmount, _sGroupId, _eType, tRulesSelection.ComponentId, _dTrans, _iRefRecId, _rQty) * tCompoundingSetup.RevenueRate / 100;
                    break;

                case PSAIndirectComponentType::Invoice:
                    if (_iRefRecId)
                    {
                        PSAIndirectComponentTransLog::insertLogLine(_iRefRecId, tCompoundingSetup.RecId, _eType); // Log used rate
                    }
                    rRet = rRet + this.calculate(_rBaseAmount, _sGroupId, _eType, tRulesSelection.ComponentId, _dTrans, _iRefRecId, _rQty) * tCompoundingSetup.InvoiceRate / 100;
                    break;

                default :
                    throw error(strFmt("@SYS19306", funcName()));
            }
        }

        return rRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectComponentGroupId</Name>
				<Source><![CDATA[
    public PSAIndirectComponentId indirectComponentGroupId()
    {
        if (psaIndirectCompoundingSetup)
        {
            return psaIndirectCompoundingSetup.ProjComponentGroupId;
        }
        else
        {
            return psaIndirectCompoundingRules.ComponentGroupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _tRecord = null)
    {
        if (_tRecord.TableId == tableNum(PSAIndirectCompoundingSetup))
        {
            psaIndirectCompoundingSetup = _tRecord;
        }
        else
        {
            psaIndirectCompoundingRules = _tRecord;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
