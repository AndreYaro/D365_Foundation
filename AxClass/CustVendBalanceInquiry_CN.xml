<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendBalanceInquiry_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendBalanceInquiry_CN</c> class is used to define some abstract methods and other methods
/// based on the customer and vendor balance inquiry's business logic.
/// </summary>
abstract class CustVendBalanceInquiry_CN extends RunBaseBatch
{
    DialogField                     dialogDisplayCur;
    DialogField                     dialogFromDate;
    DialogField                     dialogToDate;

    CustVendBalanceDisplayCur_CN    isDisplayCur;
    FromDate                        fromDate;
    ToDate                          toDate;

    SysQueryRun                     queryRun;
    DialogRunbase                   dialogRunbase;

    CustVendTable                   custVendTable;
    CustVendTrans                   custVendTrans;
    tableId                         custVendTableId;

    CustVendBalanceListTmp_CN       custVendBalanceListTmp;

    #define.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        isDisplayCur,
        fromDate,
        toDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the validity of from date and to date.
    /// </summary>
    /// <param name="_fromDate">
    /// The beginning date of date range.
    /// </param>
    /// <param name="_toDate">
    /// The end date of date range.
    /// </param>
    /// <param name="_showErrMsg">
    /// Show the error message form if true, otherwise, don't show.
    /// </param>
    /// <returns>
    /// True if from date and to date is right, otherwise, false.
    /// </returns>
    private boolean checkDateRange(date _fromDate, date _toDate, boolean _showErrMsg = true)
    {
        str         errorMsg;
        boolean     isCorrect;

        isCorrect = true;
        if (!_fromDate
            || !_toDate)
        {
            errorMsg  = "@GLS60488";
            isCorrect = false;
        }
        else if (_fromDate > _toDate)
        {
            errorMsg  = strfmt("@SYS55013", _fromDate, _toDate);
            isCorrect = false;
        }

        if (!isCorrect)
        {
            if (_showErrMsg)
            {
                checkFailed(errorMsg);
            }
        }
        return isCorrect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the fromDate and the toDate whether in the fiscal periods which has been already created.
    /// </summary>
    /// <param name="_fromDate">
    /// The beginning date of date range.
    /// </param>
    /// <param name="_toDate">
    /// The end date of date range.
    /// </param>
    /// <param name="_showErrMsg">
    /// Show the error message form if true, otherwise, don't show.
    /// </param>
    /// <returns>
    /// True if the fromDate and the toDate are in the fiscal periods which has been already created; otherwise, false.
    /// </returns>
    private boolean checkFiscalYear(date _fromDate, date _toDate, boolean _showErrMsg = true)
    {
        date        dFromClose, dToClose;
        str         errorMsg;
        boolean     isCorrect = true;

        dFromClose  = LedgerFiscalCalendar::findClosingPeriodEndDateByDate(CompanyInfoHelper::fiscalCalendarRecId(),_fromDate);
        dToClose    = LedgerFiscalCalendar::findClosingPeriodEndDateByDate(CompanyInfoHelper::fiscalCalendarRecId(),_toDate);

        if (!dFromClose
            && !dToClose)
        {
            errorMsg  = strfmt("@GLS60484", _fromDate, _toDate);
            isCorrect = false;
        }
        else if (!dFromClose
            && dToClose)
        {
            errorMsg  = strfmt("@GLS60485", _fromDate);
            isCorrect = false;
        }
        else if (dFromClose
            && ! dToClose)
        {
            errorMsg  = strfmt("@GLS60486", _toDate);
            isCorrect = false;
        }

        if (!isCorrect)
        {
            if (_showErrMsg)
            {
                checkFailed(errorMsg);
            }
        }
        return isCorrect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalanceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to generate the balance list and store the result in temporary table.
    /// </summary>
    public void createBalanceList()
    {
        CurrencyCode    currencyCode;
        date            periodStartDate;

        currencyCode    = Ledger::accountingCurrency();

        periodStartDate = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(), toDate);

        queryRun.reset();

        while (queryRun.next())
        {
            if (!queryRun.changed(custVendTableId))
            {
                continue;
            }

            custVendTable = queryRun.get(custVendTableId);
            ttsbegin;
            if (isDisplayCur)
            {
                while select sum(AmountMST) from custVendTrans
                    group by AccountNum, CurrencyCode
                    where custVendTrans.AccountNum == custVendTable.AccountNum
                        && custVendTrans.TransDate <  fromDate
                {
                    custVendBalanceListTmp.AccountNum     = custVendTable.AccountNum;
                    custVendBalanceListTmp.Name           = custVendTable.name();
                    custVendBalanceListTmp.OpeningBalance = custVendTrans.AmountMST;
                    custVendBalanceListTmp.CurrencyCode   = custVendTrans.CurrencyCode;
                    custVendBalanceListTmp.insert();
                }

                while select sum(AmountMST) from custVendTrans
                    group by AccountNum, CurrencyCode
                    where custVendTrans.AccountNum == custVendTable.AccountNum
                        && custVendTrans.TransDate >= periodStartDate
                        && custVendTrans.TransDate <= toDate
                {
                    custVendBalanceListTmp = custVendBalanceListTmp.findOrCreate(custVendTable, custVendTrans,custVendBalanceListTmp);
                    custVendBalanceListTmp.YearToDate = custVendTrans.AmountMST;
                    custVendBalanceListTmp.write();
                }

                while select sum(AmountMST), sum(AmountCur) from custVendTrans
                    group by AccountNum, CurrencyCode
                    where custVendTrans.AccountNum    == custVendTable.AccountNum
                        && custVendTrans.TransDate    >= fromDate
                        && custVendTrans.TransDate    <= toDate
                        && ((custVendTrans.AmountMST > 0 && !custVendTrans.Correct)
                        || (custVendTrans.AmountMST  < 0 &&  custVendTrans.Correct))
                {
                    custVendBalanceListTmp = custVendBalanceListTmp.findOrCreate(custVendTable, custVendTrans, custVendBalanceListTmp);
                    custVendBalanceListTmp.PrimaryDebit = custVendTrans.AmountMST;
                    if (custVendTrans.CurrencyCode != currencyCode)
                    {
                        custVendBalanceListTmp.ForeignDebit = custVendTrans.AmountCur;
                    }
                    custVendBalanceListTmp.write();
                }

                while select sum(AmountMST), sum(AmountCur) from custVendTrans
                    group by AccountNum, CurrencyCode
                    where custVendTrans.AccountNum  == custVendTable.AccountNum
                        && custVendTrans.TransDate      >= fromDate
                        && custVendTrans.TransDate      <= toDate
                        && ((custVendTrans.AmountMST < 0 && !custVendTrans.Correct)
                        || (custVendTrans.AmountMST  > 0 &&  custVendTrans.Correct))
                {
                    custVendBalanceListTmp = custVendBalanceListTmp.findOrCreate(custVendTable, custVendTrans, custVendBalanceListTmp);
                    custVendBalanceListTmp.PrimaryCredit = custVendTrans.AmountMST * -1;
                    if (custVendTrans.CurrencyCode != currencyCode)
                    {
                        custVendBalanceListTmp.ForeignCredit = custVendTrans.AmountCur * -1;
                    }
                    custVendBalanceListTmp.write();
                }

                while select custVendBalanceListTmp
                    where custVendBalanceListTmp.AccountNum == custVendTable.AccountNum
                {
                    custVendBalanceListTmp.PeriodBalance  = custVendBalanceListTmp.PrimaryDebit   - custVendBalanceListTmp.PrimaryCredit;
                    custVendBalanceListTmp.ClosingBalance = custVendBalanceListTmp.OpeningBalance + custVendBalanceListTmp.PeriodBalance;
                    if (custVendBalanceListTmp.OpeningBalance != 0
                        || custVendBalanceListTmp.YearToDate  != 0
                        || custVendBalanceListTmp.PrimaryDebit
                        || custVendBalanceListTmp.PrimaryCredit )
                    {
                        custVendBalanceListTmp.write();
                    }
                    else
                    {
                        custVendBalanceListTmp.delete();
                    }
                }
            }
            else
            {
                custVendBalanceListTmp.AccountNum = custVendTable.AccountNum;
                custVendBalanceListTmp.Name       = custVendTable.name();
                select sum(AmountMST) from custVendTrans
                    where custVendTrans.AccountNum    == custVendTable.AccountNum
                        && custVendTrans.TransDate    <  fromDate;
                custVendBalanceListTmp.OpeningBalance = custVendTrans.AmountMST;

                select sum(AmountMST) from custVendTrans
                    where custVendTrans.AccountNum    == custVendTable.AccountNum
                        && custVendTrans.TransDate    >= periodStartDate
                        && custVendTrans.TransDate    <= toDate;
                custVendBalanceListTmp.YearToDate = custVendTrans.AmountMST;

                select sum(AmountMST) from custVendTrans
                    where custVendTrans.AccountNum    == custVendTable.AccountNum
                        && custVendTrans.TransDate    >= fromDate
                        && custVendTrans.TransDate    <= toDate
                        && ((custVendTrans.AmountMST > 0 && !custVendTrans.Correct)
                        || (custVendTrans.AmountMST  < 0 &&  custVendTrans.Correct));
                custVendBalanceListTmp.PrimaryDebit = custVendTrans.AmountMST;

                select sum(AmountMST) from custVendTrans
                    where custVendTrans.AccountNum    == custVendTable.AccountNum
                        && custVendTrans.TransDate    >= fromDate
                        && custVendTrans.TransDate    <= toDate
                        && ((custVendTrans.AmountMST < 0 && !custVendTrans.Correct)
                        || (custVendTrans.AmountMST  > 0 &&  custVendTrans.Correct));
                custVendBalanceListTmp.PrimaryCredit  = custVendTrans.AmountMST * -1;

                custVendBalanceListTmp.ForeignDebit   = 0;
                custVendBalanceListTmp.ForeignCredit  = 0;
                custVendBalanceListTmp.CurrencyCode   = currencyCode;
                custVendBalanceListTmp.PeriodBalance  = custVendBalanceListTmp.PrimaryDebit - custVendBalanceListTmp.PrimaryCredit;
                custVendBalanceListTmp.ClosingBalance = custVendBalanceListTmp.OpeningBalance + custVendBalanceListTmp.PeriodBalance;

                if (custVendBalanceListTmp.OpeningBalance != 0
                    || custVendBalanceListTmp.YearToDate  != 0
                    || custVendBalanceListTmp.PrimaryDebit
                    || custVendBalanceListTmp.PrimaryCredit )
                {
                    custVendBalanceListTmp.insert();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query for running.
    /// </summary>
    protected abstract void createQueryRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialogRunbase       = super();
        dialogRunbase.addGroup("@SYS95627");
        dialogDisplayCur    = dialogRunbase.addFieldValue(extendedtypestr(CustVendBalanceDisplayCur_CN), isDisplayCur, "@GLS60489","@GLS60489");

        dialogRunbase.addGroup("@SYS83772");
        dialogFromDate = dialogRunbase.addFieldValue(extendedtypestr(FromDate), fromDate, "@SYS177151","@SYS177151");
        dialogToDate = dialogRunbase.addFieldValue(extendedtypestr(ToDate), toDate, "@SYS177152","@SYS177152");

        switch (this.module())
        {
            case CustVendBalanceInquiryType_CN::CustBalance:
                dialogRunbase.caption("@GLS60464");
                break;
            case CustVendBalanceInquiryType_CN::VendBalance:
                dialogRunbase.caption("@GLS60465");
                break;
        }
        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the value to fromDate.
    /// </summary>
    /// <param name="_date">
    /// The fromDate.
    /// </param>
    /// <returns>
    /// If the parameter is null, get the fromDate, else set the fromDate as _date.
    /// </returns>
    public FromDate fromDate(FromDate _date = dateNull())
    {
        if (_date != dateNull())
        {
            fromDate = _date;
        }
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalanceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to get the balance list which is stored in the CustVendBalanceListTmp_CN table.
    /// </summary>
    /// <returns>
    /// The CustVendBalanceListTmp_CN table.
    /// </returns>
    public CustVendBalanceListTmp_CN getBalanceList()
    {
        return custVendBalanceListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dialog fields.
    /// </summary>
    /// <returns>
    /// If 'True', the dialog fields are got successfully.
    /// </returns>
    public boolean getFromDialog()
    {
        isDisplayCur    = dialogDisplayCur.value();
        fromDate        = dialogFromDate.value();
        toDate          = dialogToDate.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize CustTable or VendTable id.
    /// </summary>
    /// <param name="_custVendTable">
    /// The CustTable or VendTable.
    /// </param>
    protected void initCustVendTableId(CustVendTable _custVendTable)
    {
        custVendTableId = _custVendTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize CustTrans or VendTrans.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The CustTrans or VendTrans.
    /// </param>
    protected void initCustVendTrans(CustVendTrans _custVendTrans)
    {
        custVendTrans = _custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisplayCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether to display the foreign currency columns in the Inquiry Form or not.
    /// </summary>
    /// <returns>
    /// Yes if display the foreign currency columns in the Inquiry Form, otherwise, no.
    /// </returns>
    public CustVendBalanceDisplayCur_CN isDisplayCur()
    {
        return isDisplayCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the quey result wether is empty.
    /// </summary>
    /// <returns>
    /// True if the query result is empty, otherwise, false.
    /// </returns>
    public boolean isEmpty()
    {
        select firstonly RecId from custVendBalanceListTmp;
        return (custVendBalanceListTmp.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// The cust vend balance inquiry type module.
    /// </summary>
    /// <returns>
    /// The instance of the <c>CustVendBalanceInquiryType_CN</c> class.
    /// </returns>
    public abstract CustVendBalanceInquiryType_CN module()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.createQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        str     sAccountRange;

        sAccountRange = queryRun.query().dataSourceTable(custVendTableId).range(1).value();
        return [#CurrentVersion, #CurrentList, sAccountRange];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the value to toDate.
    /// </summary>
    /// <param name="_date">
    /// The toDate.
    /// </param>
    /// <returns>
    /// If the parameter is null, get the toDate, else set the toDate as _date.
    /// </returns>
    public ToDate toDate(ToDate _date = dateNull())
    {
        if (_date != dateNull())
        {
            toDate = _date;
        }
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        str         sAccountRange;
        Version     version    = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, sAccountRange] = _packedClass;
                queryRun.query().dataSourceTable(custVendTableId).range(1).value(sAccountRange);
                break;

            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates date information.
    /// </summary>
    /// <param name="calledFrom">
    /// The instance the method called from.
    /// </param>
    /// <returns>
    /// If 'True', validates succeed.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret = true;

        ret = this.checkDateRange(fromDate, toDate);
        if (ret)
        {
            ret = this.checkFiscalYear(fromDate, toDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The constructor of the <c>CustVendBalanceInquiry_CN</c> class.
    /// </summary>
    /// <param name="_custVendBalanceInquiryType">
    /// The isntance of the <c>CustVendBalanceInquiryType_CN</c> class.
    /// </param>
    /// <param name="_custVendTrans">
    /// The instance of the <c>CustVendTrans</c> class.
    /// </param>
    /// <param name="_cusVendTable">
    /// The instance of the <c>CustVendTable</c> class.
    /// </param>
    /// <returns>
    /// The instance of the <c>CustVendBalanceInquiry_CN</c> class.
    /// </returns>
    public static CustVendBalanceInquiry_CN construct(
        CustVendBalanceInquiryType_CN   _custVendBalanceInquiryType,
        CustVendTrans                   _custVendTrans,
        CustVendTable                   _cusVendTable)
    {
        CustVendBalanceInquiry_CN custVendBalanceInquiry;

        switch (_custVendBalanceInquiryType)
        {
            case CustVendBalanceInquiryType_CN::CustBalance:
                custVendBalanceInquiry  = new CustBalanceInquiry_CN();
                break;
            case CustVendBalanceInquiryType_CN::VendBalance:
                custVendBalanceInquiry  = new VendBalanceInquiry_CN();
                break;
        }
        custVendBalanceInquiry.initCustVendTrans(_custVendTrans);
        custVendBalanceInquiry.initCustVendTableId(_cusVendTable);
        return custVendBalanceInquiry;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
