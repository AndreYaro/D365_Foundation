<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCalendarCapacityHourSliceGateway</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A table gateway for calendar capacity slices.
/// </summary>
class ResCalendarCapacityHourSliceGateway implements ResICalendarCapacityHourSliceGateway
{
    PreferredLocale preferredLocale = (new xSession()).PreferredLocale();

    #timeconstants

    const int secondsPerHour = #SecondsPerHour;
    const int hoursPerDay    = #hoursPerDay;
    const int secondsPerMinute = #secondsPerMinute;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ResCalendarCapacityHourSliceGateway construct()
    {
        return new ResCalendarCapacityHourSliceGateway();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCapacitySlices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a collection of calendar capacity slices from the calendar capacity table.
    /// </summary>
    /// <param name = "_date">Date to load slices for.</param>
    /// <param name = "_calendar">Calendar to load slices for.</param>
    /// <returns></returns>
    public Set loadCapacitySlices(TransDate _date, RecId _calendar)
    {
        utcdatetime day = this.getDay(_date);
        Set slices = ResCalendarCapacityHourSlice::newSet();
        ResCalendarCapacity capacity;

        while select capacity
            where capacity.Calendar == _calendar
            && capacity.Day == day
        {
            ResCalendarCapacityHourSlice slice = this.makeSliceObject(capacity);
            slices.add(slice);
        }

        return slices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCapacitySlices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes calendar capacity slices from calendar capacity table for specified date and calendar.
    /// </summary>
    /// <param name = "_date">Date to delete capacity slices for.</param>
    /// <param name = "_calendar">Calendar to delete capacity slices for.</param>
    public void deleteCapacitySlices(TransDate _date, RecId _calendar)
    {
        ResCalendarCapacity capacity;
        utcdatetime day = this.getDay(_date);

        ttsbegin;

        delete_from capacity
        where capacity.Day == day
            && capacity.Calendar == _calendar;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCapacitySlicesForDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes calendar capacity slices from calendar capacity table for specified date range and calendar.
    /// </summary>
    /// <param name = "_calendar">Date to delete capacity slices for.</param>
    /// <param name = "_fromDate">Date to delete capacity slices from.</param>
    /// <param name = "_toDate">Date to delete capacity slices to.</param>
    public void deleteCapacitySlicesForDates(CalendarRecId _calendar, TransDate _fromDate, TransDate _toDate)
    {
        ResCalendarCapacity capacity;
        utcdatetime dayFrom = this.getDay(_fromDate);
        utcdatetime dayTo   =  this.getDay(_toDate);

        delete_from capacity
            where capacity.Calendar == _calendar
            && capacity.Day >= dayFrom
            && capacity.Day <= dayTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCapacitySlices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the collection of calendar capacity slices into calendar capacity table.
    /// </summary>
    /// <param name = "_date">Date to insert on.</param>
    /// <param name = "_calendar">Calendar to insert for.</param>
    /// <param name = "_slices">Collection of calendar capacity slices to be inserted.</param>
    public void insertCapacitySlices(TransDate _date, RecId _calendar, Set _slices)
    {
        Enumerator enumerator = _slices.getEnumerator();

        while (enumerator.moveNext())
        {
            ResCalendarCapacityHourSlice slice = enumerator.current();
            this.insertCapacitySlice(_date, _calendar, slice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCapacitySlice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts individual calendar capacity slice for specified date and calendar.
    /// </summary>
    /// <param name = "_date">Date to insert on.</param>
    /// <param name = "_calendar">Calendar to insert for.</param>
    /// <param name = "_slice">Calendar capacity slice to be inserted.</param>
    public void insertCapacitySlice(TransDate _date, RecId _calendar, ResCalendarCapacityHourSlice _slice)
    {
        TimeOfDay           time = _slice.getHourTime();
        Seconds             start = _slice.parmStart();
        Seconds             end = _slice.parmEnd();

        ResCalendarCapacity calendarCapacity;

        calendarCapacity.Calendar = _calendar;
        this.fillDateFields(calendarCapacity, _date, time);
        calendarCapacity.Start  = _slice.parmStart();
        calendarCapacity.End    = _slice.parmEnd();
        calendarCapacity.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDateFields</Name>
				<Source><![CDATA[
    private void fillDateFields(ResCalendarCapacity _capacity, TransDate _date, TimeOfDay _timeOfDay)
    {
        utcdatetime dateTime = this.getDay(_date);
        _capacity.Hour = DateTimeUtil::newDateTime(_date, _timeOfDay);
        _capacity.Day  = dateTime;
        _capacity.Week = AVTimeframe::getTimeframe(dateTime, AVTimeframeType::Week).start();
        _capacity.Month = AVTimeframe::getTimeframe(dateTime, AVTimeframeType::Month).start();
        _capacity.Quarter = AVTimeframe::getTimeframe(dateTime, AVTimeframeType::Quarter).start();
        _capacity.HalfYear = AVTimeframe::getTimeframe(dateTime, AVTimeframeType::HalfYear).start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeSliceObject</Name>
				<Source><![CDATA[
    private ResCalendarCapacityHourSlice makeSliceObject(ResCalendarCapacity _capacity)
    {
        ResCalendarCapacityHourSlice slice = ResCalendarCapacityHourSlice::construct();

        slice.parmHour(DateTimeUtil::hour(_capacity.Hour));
        slice.parmStart(_capacity.Start);
        slice.parmEnd(_capacity.End);

        return slice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDay</Name>
				<Source><![CDATA[
    private utcdatetime getDay(TransDate _date)
    {
        return DateTimeUtil::newDateTime(_date, 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>