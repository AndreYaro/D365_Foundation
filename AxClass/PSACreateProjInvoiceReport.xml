<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSACreateProjInvoiceReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
//Description:      get temporary data to print invoice report
class PSACreateProjInvoiceReport
{
    ToDate          dEndDate;
    ProjInvoiceId   sMaxInvoiceId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getThisPeirodAmount</Name>
				<Source><![CDATA[
    // Description:     get the invoice amount
    private Amount  getThisPeirodAmount(ProjInvoiceId _invoiceId,PSAContractLineNum _contractLineNum)
    {
        Amount  rInvoiceAmount;

        rInvoiceAmount+=this.getThisPeirodCost(_invoiceId,_contractLineNum);
        rInvoiceAmount+=this.getThisPeirodEmpl(_invoiceId,_contractLineNum);
        rInvoiceAmount+=this.getThisPeirodItem(_invoiceId,_contractLineNum);
        rInvoiceAmount+=this.getThisPeirodOnAcc(_invoiceId,_contractLineNum);
        rInvoiceAmount+=this.getThisPeirodRevenue(_invoiceId,_contractLineNum);
        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getThisPeirodCost</Name>
				<Source><![CDATA[
    // Description:     get the invoice amount on projInvoiceCost
    private Amount  getThisPeirodCost(ProjInvoiceId _invoiceId,PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceCost     tInvoiceCost;
        Amount              rInvoiceAmount;

        while select tInvoiceCost
            where tInvoiceCost.ProjInvoiceId==_invoiceId
            &&    tInvoiceCost.PSAContractLineNum==_contractLineNum
        {
            rInvoiceAmount+=tInvoiceCost.amountMST();
        }

        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getThisPeirodEmpl</Name>
				<Source><![CDATA[
    // Description:     get this invoice amount on projInvoiceEmpl
    private Amount  getThisPeirodEmpl(ProjInvoiceId _invoiceId,PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceEmpl     tInvoiceEmpl;
        ProjInvoiceEmplDetail     projInvoiceEmplDetail;
        Amount              rInvoiceAmount;
        ProjEmplTransSale   projEmplTransSale;

        while select  tInvoiceEmpl
        where tInvoiceEmpl.ProjInvoiceId==_invoiceId
              && tInvoiceEmpl.PSAContractLineNum==_contractLineNum
        join InvoiceRefRecId,SaleRefRecId from projInvoiceEmplDetail
                where tInvoiceEmpl.RecId==projInvoiceEmplDetail.InvoiceRefRecId
        {
            rInvoiceAmount += tInvoiceEmpl.transTurnover();
            // add indirect invoice amount
            // this will filter by transaction as well as funding source
            select PSAIndirectInvoice from projEmplTransSale where projEmplTransSale.RecId==projInvoiceEmplDetail.SaleRefRecId;
            rInvoiceAmount += projEmplTransSale.PSAIndirectInvoice;
        }
        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getThisPeirodItem</Name>
				<Source><![CDATA[
    // Description:     get this invoice amount on projInvoiceItem
    private Amount  getThisPeirodItem(ProjInvoiceId _invoiceId,PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceItem     tInvoiceItem;
        Amount              rInvoiceAmount;

        while select  tInvoiceItem
            where tInvoiceItem.ProjInvoiceId==_invoiceId
            &&    tInvoiceItem.PSAContractLineNum==_contractLineNum
        {
            rInvoiceAmount+=tInvoiceItem.amountMST();
        }
        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getThisPeirodOnAcc</Name>
				<Source><![CDATA[
    // Description:     get this invoice amount on projInvoiceOnAcc
    private Amount  getThisPeirodOnAcc(ProjInvoiceId _invoiceId,PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceOnAcc     tInvoiceOnAcc;
        Amount              rInvoiceAmount;

        while select Amount from tInvoiceOnAcc
            where tInvoiceOnAcc.ProjInvoiceId==_invoiceId
            &&    tInvoiceOnAcc.PSAContractLineNum==_contractLineNum
        {
            rInvoiceAmount+=tInvoiceOnAcc.Amount;
        }

        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getThisPeirodRevenue</Name>
				<Source><![CDATA[
    // Description:     get this invoice amount on projInvoiceRevenue
    private Amount  getThisPeirodRevenue(ProjInvoiceId _invoiceId,PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceRevenue  tInvoiceRevenue;
        Amount              rInvoiceAmount;

        while select tInvoiceRevenue
            where tInvoiceRevenue.ProjInvoiceId==_invoiceId
            &&    tInvoiceRevenue.PSAContractLineNum==_contractLineNum
        {
            rInvoiceAmount+=tInvoiceRevenue.transTurnover();
        }

        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    // Description:     get this contractline num total data
    private Amount  getTotalAmount(PSAContractLineNum _contractLineNum)
    {
        Amount              rInvoiceAmount;

        rInvoiceAmount+=this.getTotalCost(_contractLineNum);
        rInvoiceAmount+=this.getTotalEmpl(_contractLineNum);
        rInvoiceAmount+=this.getTotalItem(_contractLineNum);
        rInvoiceAmount+=this.getTotalOnAcc(_contractLineNum);
        rInvoiceAmount+=this.getTotalRevenue(_contractLineNum);
        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalCost</Name>
				<Source><![CDATA[
    // Description:     get projInvoiceCost total data
    private Amount  getTotalCost(PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceCost     tInvoiceCost;
        Amount              rInvoiceAmount;

        while select tInvoiceCost
            where tInvoiceCost.PSAContractLineNum==_contractLineNum
        {
            if (sMaxInvoiceId)
            {
                if ((strcmp(tInvoiceCost.ProjInvoiceId,sMaxInvoiceId)<=0)&&(tInvoiceCost.ProjInvoiceId))
                {
                    rInvoiceAmount+=tInvoiceCost.amountMST();
                }
            }
            else
            {
                rInvoiceAmount+=tInvoiceCost.amountMST();
            }
        }
        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalEmpl</Name>
				<Source><![CDATA[
    // Description:     get projInvoiceEmpl total data
    private Amount  getTotalEmpl(PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceEmpl     tProjInvoiceEmpl;
        ProjInvoiceEmplDetail   projInvoiceEmplDetail;
        Amount              rInvoiceAmount;
        ProjEmplTransSale   projEmplTransSale;

        while select  tProjInvoiceEmpl
            where tProjInvoiceEmpl.PSAContractLineNum==_contractLineNum
            join InvoiceRefRecId,SaleRefRecId from projInvoiceEmplDetail
                where tProjInvoiceEmpl.RecId==projInvoiceEmplDetail.InvoiceRefRecId
        {
            if (sMaxInvoiceId)
            {
                if ((strcmp(tProjInvoiceEmpl.ProjInvoiceId,sMaxInvoiceId)<=0) && (tProjInvoiceEmpl.ProjInvoiceId))
                {
                    rInvoiceAmount += tProjInvoiceEmpl.transTurnover();
                }
            }
            else
            {
                rInvoiceAmount += tProjInvoiceEmpl.transTurnover();
            }

            // add indirect invoice amount
            select PSAIndirectInvoice from projEmplTransSale where projEmplTransSale.RecId==projInvoiceEmplDetail.SaleRefRecId;
            rInvoiceAmount +=projEmplTransSale.PSAIndirectInvoice;
        }

        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalItem</Name>
				<Source><![CDATA[
    // Description:     get projInvoiceItemc total data
    private Amount  getTotalItem(PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceItem     tInvoiceItem;
        Amount              rInvoiceAmount;

        while select  tInvoiceItem
            where tInvoiceItem.PSAContractLineNum==_contractLineNum
        {
            if (sMaxInvoiceId)
            {
                if ((strcmp(tInvoiceItem.ProjInvoiceId,sMaxInvoiceId)<=0)&&(tInvoiceItem.ProjInvoiceId))
                {
                    rInvoiceAmount+=tInvoiceItem.amountMST();
                }
            }
            else
            {
                rInvoiceAmount+=tInvoiceItem.amountMST();
            }
        }
        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOnAcc</Name>
				<Source><![CDATA[
    // Description:     get projInvoiceOnAcc total data
    private Amount  getTotalOnAcc(PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceOnAcc    tInvoiceOnAcc;
        Amount              rInvoiceAmount;

        while select ProjInvoiceId,Amount from tInvoiceOnAcc
            where tInvoiceOnAcc.PSAContractLineNum==_contractLineNum
        {
            if (sMaxInvoiceId)
            {
                if ((strcmp(tInvoiceOnAcc.ProjInvoiceId,sMaxInvoiceId)<=0)&&(tInvoiceOnAcc.ProjInvoiceId))
                {
                    rInvoiceAmount+=tInvoiceOnAcc.Amount;
                }
            }
            else
            {
                rInvoiceAmount+=tInvoiceOnAcc.Amount;
            }
        }

        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalRevenue</Name>
				<Source><![CDATA[
    // Description:     get revenue total data
    private Amount  getTotalRevenue(PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceRevenue  tInvoiceRevenue;
        Amount              rInvoiceAmount;

        while select tInvoiceRevenue
            where tInvoiceRevenue.PSAContractLineNum==_contractLineNum
        {
            if (sMaxInvoiceId)
            {
                if ((strcmp(tInvoiceRevenue.ProjInvoiceId,sMaxInvoiceId)<=0)&&(tInvoiceRevenue.ProjInvoiceId))
                {
                    rInvoiceAmount+=tInvoiceRevenue.transTurnover();
                }
            }
            else
            {
                rInvoiceAmount+=tInvoiceRevenue.transTurnover();
            }
        }

        return rInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportData</Name>
				<Source><![CDATA[
    // Description:     create report  data
    public PSAContractLineInvoiceReport setReportData(ProjInvoiceJour   _tInvoiceJour)
    {
        PSAContractLineInvoiceReport    tInvoiceReport;
        PSAContractLineItems            tContractLine;
        PSAContractInvoiceRetain        tInvoiceRetain;
        PSAContractProposalRetain       tProposalRetain;

        dEndDate=ProjProposalJour::find(_tInvoiceJour.ProposalId).PSAEndDate;
        _tInvoiceJour.ProjInvoiceId=ProjProposalJour::find(_tInvoiceJour.ProposalId).ProjInvoiceId;
        sMaxInvoiceId=_tInvoiceJour.ProjInvoiceId;
        ttsbegin;
        while select ContractLineNum,LineDesc,LineValue,ChangeOrderNum from tContractLine
            where tContractLine.ProjInvoiceProjId==_tInvoiceJour.ProjInvoiceProjId
        {
            tInvoiceReport.ProjInvoiceId=_tInvoiceJour.ProjInvoiceId;
            tInvoiceReport.ProjInvoiceProjId=_tInvoiceJour.ProjInvoiceProjId;
            tInvoiceReport.ContractLineNum=tContractLine.ContractLineNum;
            tInvoiceReport.LineDesc=tContractLine.LineDesc;
            tInvoiceReport.LineValue=tContractLine.LineValue;
            tInvoiceReport.ChangeOrderNum=tcontractLine.ChangeOrderNum;
            tInvoiceReport.ThisPeriodInvoice=this.getThisPeirodAmount(_tInvoiceJour.ProjInvoiceId,tInvoiceReport.ContractLineNum);
            tInvoiceReport.PreviousApplication=this.getTotalAmount(tInvoiceReport.ContractLineNum)-tInvoiceReport.ThisPeriodInvoice;
            tInvoiceReport.Materials=0.0;
            tInvoiceReport.TotalComplete=tInvoiceReport.ThisPeriodInvoice+tInvoiceReport.PreviousApplication;
            if (abs(tInvoiceReport.LineValue)>0)
            {
                tInvoiceReport.Percent=tInvoiceReport.TotalComplete*100/tInvoiceReport.LineValue;
            }
            else
            {
                tInvoiceReport.Percent=0.0;
            }

            tInvoiceReport.BalanceToFinish=tInvoiceReport.LineValue-tInvoiceReport.TotalComplete;

            if (_tInvoiceJour.ProjInvoiceId)
            {
                while  select RetainedNow,ProjInvoiceId from tInvoiceRetain
                        where tInvoiceRetain.ContractLineNum==tContractLine.ContractLineNum
                        && tInvoiceRetain.ProjInvoiceId<=_tInvoiceJour.ProjInvoiceId
                {
                    tInvoiceReport.Retainage+=tInvoiceRetain.RetainedNow;
                }
            }
            else
            {
                while  select RetainedNow from tProposalRetain
                        where tProposalRetain.ContractLineNum==tContractLine.ContractLineNum
                        &&    tInvoiceRetain.ProjProposalId<=_tInvoiceJour.ProposalId
                        &&    tProposalRetain.IsInitial==NoYes::No
                {
                    tInvoiceReport.Retainage+=tProposalRetain.RetainedNow;
                }
            }

            tInvoiceReport.insert();
            tInvoiceReport.clear();
        }

        ttscommit;
        tInvoiceReport.setTmpData(tInvoiceReport);
        return tInvoiceReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportData_bak</Name>
				<Source><![CDATA[
    // Description:     create report  data
    public PSAContractLineInvoiceReport setReportData_bak(ProjInvoiceJour   _tInvoiceJour)
    {
        PSAContractLineInvoiceReport    tInvoiceReport;
        PSAContractLineItems            tContractLine;
        PSAContractInvoiceRetain        tInvoiceRetain;
        PSAContractProposalRetain       tProposalRetain;
        ProjProposalJour                tTempProposalJour;

        dEndDate=ProjProposalJour::find(_tInvoiceJour.ProposalId).PSAEndDate;
        this.updateMaxInvoiceId(_tInvoiceJour);// get max invoice id before end date
        _tInvoiceJour.ProjInvoiceId=ProjProposalJour::find(_tInvoiceJour.ProposalId).ProjInvoiceId;

        ttsbegin;
        while select ContractLineNum,LineDesc,LineValue,ChangeOrderNum from tContractLine
            where tContractLine.ProjInvoiceProjId==_tInvoiceJour.ProjInvoiceProjId
        {
            tInvoiceReport.ProjInvoiceId=_tInvoiceJour.ProjInvoiceId;
            tInvoiceReport.ProjInvoiceProjId=_tInvoiceJour.ProjInvoiceProjId;
            tInvoiceReport.ContractLineNum=tContractLine.ContractLineNum;
            tInvoiceReport.LineDesc=tContractLine.LineDesc;
            tInvoiceReport.LineValue=tContractLine.LineValue;
            tInvoiceReport.ChangeOrderNum=tcontractLine.ChangeOrderNum;
            tInvoiceReport.ThisPeriodInvoice=this.getThisPeirodAmount(_tInvoiceJour.ProjInvoiceId,tInvoiceReport.ContractLineNum);

            if (sMaxInvoiceId)
            {
                if (_tInvoiceJour.InvoiceDate<=dEndDate)
                {
                    tInvoiceReport.PreviousApplication=this.getTotalAmount(tInvoiceReport.ContractLineNum)-tInvoiceReport.ThisPeriodInvoice;
                }
                else
                {
                    tInvoiceReport.PreviousApplication=this.getTotalAmount(tInvoiceReport.ContractLineNum);
                }
            }
            else
            {
                tInvoiceReport.PreviousApplication=0.00;
            }
            tInvoiceReport.Materials=0.0;
            tInvoiceReport.TotalComplete=tInvoiceReport.ThisPeriodInvoice+tInvoiceReport.PreviousApplication;
            if (abs(tInvoiceReport.LineValue)>0)
            {
                tInvoiceReport.Percent=tInvoiceReport.TotalComplete*100/tInvoiceReport.LineValue;
            }
            else
            {
                tInvoiceReport.Percent=0.0;
            }
            tInvoiceReport.BalanceToFinish=tInvoiceReport.LineValue-tInvoiceReport.TotalComplete;

            if (_tInvoiceJour.ProjInvoiceId)
            {
                while  select RetainedNow,ProjInvoiceId from tInvoiceRetain
                        where tInvoiceRetain.ContractLineNum==tContractLine.ContractLineNum
                        &&    tInvoiceRetain.InvoiceDate<=dEndDate
                {
                    if (sMaxInvoiceId)
                    {
                        if (strcmp(tInvoiceRetain.ProjInvoiceId,sMaxInvoiceId)<=0)
                        {
                            tInvoiceReport.Retainage+=tInvoiceRetain.RetainedNow;
                        }
                    }
                }
                if (_tInvoiceJour.InvoiceDate>dEndDate)
                {
                    while  select RetainedNow from tInvoiceRetain
                            where tInvoiceRetain.ContractLineNum==tContractLine.ContractLineNum
                            &&    tInvoiceRetain.ProjInvoiceId==_tInvoiceJour.ProjInvoiceId
                    {
                        tInvoiceReport.Retainage+=tInvoiceRetain.RetainedNow;
                    }
                }
            }
            else
            {
                while  select RetainedNow,ProposalId from tProposalRetain
                        where tProposalRetain.ContractLineNum==tContractLine.ContractLineNum
                        &&    tProposalRetain.IsInitial==NoYes::No
                {
                    tTempProposalJour=ProjProposalJour::find(tProposalRetain.ProposalId);
                    if (tTempProposalJour.InvoiceDate<=dEndDate)
                    {
                        if ((date2num(tTempProposalJour.InvoiceDate)>1)||(tProposalRetain.ProposalId==_tInvoiceJour.ProposalId))
                        {
                            tInvoiceReport.Retainage+=tProposalRetain.RetainedNow;
                        }
                    }
                }
                if (_tInvoiceJour.InvoiceDate>dEndDate)
                {
                    while  select RetainedNow from tProposalRetain
                            where tProposalRetain.ContractLineNum==tContractLine.ContractLineNum
                            &&    tInvoiceRetain.ProjProposalId==_tInvoiceJour.ProposalId
                            &&    tProposalRetain.IsInitial==NoYes::No
                    {
                        tInvoiceReport.Retainage+=tProposalRetain.RetainedNow;
                    }
                }
            }

            tInvoiceReport.insert();
            tInvoiceReport.clear();
        }

        ttscommit;
        tInvoiceReport.setTmpData(tInvoiceReport);
        return tInvoiceReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMaxInvoiceId</Name>
				<Source><![CDATA[
    // Description:     get max invoiceid before end date
    private void updateMaxInvoiceId(ProjInvoiceJour _tInvoiceJour)
    {
        ProjInvoiceJour     tProjInvoiceJour;

        select firstonly projInvoiceId,ProjInvoiceProjId from tProjInvoiceJour order by projInvoiceId desc
            where tProjInvoiceJour.ProjInvoiceProjId==_tInvoiceJour.ProjInvoiceProjId
            &&    tProjInvoiceJour.InvoiceDate<=dEndDate;
        if (tProjInvoiceJour)
        {
            sMaxInvoiceId=tProjInvoiceJour.ProjInvoiceId;
        }
        if (_tInvoiceJour.ProjInvoiceId)
        {
            if (!_tInvoiceJour.PSAEndDateMaxInvoiceId)
            {
                if (!sMaxInvoiceId)
                {
                    sMaxInvoiceId=_tInvoiceJour.ProjInvoiceId;
                }
                ttsbegin;
                select firstonly forupdate tProjInvoiceJour
                        where tProjInvoiceJour.RecId==_tInvoiceJour.RecId;
                if (tProjInvoiceJour)
                {
                    tProjInvoiceJour.PSAEndDateMaxInvoiceId=sMaxInvoiceId;
                    tProjInvoiceJour.update();
                }
                ttscommit;
                sMaxInvoiceId=tProjInvoiceJour.PSAEndDateMaxInvoiceId;
            }
            else
            {
                sMaxInvoiceId=_tInvoiceJour.PSAEndDateMaxInvoiceId;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>