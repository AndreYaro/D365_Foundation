<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailHardwareProfileCopier</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using RetailConst=Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants;
/// <summary>
/// Copies the hardware profile data into the required fields of <c>RetailHardwareProfile</c> table.
/// </summary>
class RetailHardwareProfileCopier extends RunBase
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    RetailHardwareProfileId    fromProfileId;
    RetailHardwareProfileId    toProfileId;

    DialogField dialogFieldFromProfileId;
    DialogField dialogFieldToProfileId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds fieldgroups and values to the dialog.
    /// </summary>
    /// <returns>
    /// The constructed dialog object.
    /// </returns>
    public Object dialog()
    {
        Dialog dialog;
        ;

        dialog = super();

        dialog.addGroup("@RET2818");
        dialogFieldFromProfileId = dialog.addFieldValue(extendedTypeStr(RetailHardwareProfileId), fromProfileId);

        dialog.addGroup("@RET2819");
        dialogFieldToProfileId = dialog.addFieldValue(extendedTypeStr(RetailHardwareProfileId), toProfileId);

        if (toProfileId)
        {
            dialogFieldToProfileId.enabled(false);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the from and to profiles data from the dialog.
    /// </summary>
    /// <returns>
    /// true, if dialog runs successfully.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        fromProfileId = dialogFieldFromProfileId.value();
        toProfileId = dialogFieldToProfileId.value();

        if (!fromProfileId)
        {
            ret = checkFailed("@RET2820");
            eventSource.EventWritePaymentsFromHardwareProfileIsRequired();
            
        }

        if (!toProfileId)
        {
            ret = checkFailed("@RET2821");
            eventSource.EventWritePaymentsToHardwareProfileIsRequired();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromHardwareProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the "toprofileID" value.
    /// </summary>
    /// <param name="_hardwareProfile">
    /// The instance of <c>RetailHardwareProfile</c> table.
    /// </param>
    void initFromHardwareProfile(RetailHardwareProfile _hardwareProfile)
    {
        eventSource.EventWritePaymentsInitilazeTopProfileId(_hardwareProfile.RecId);
        toProfileId = _hardwareProfile.profileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the fromhardware profile data into tohardware profile.
    /// </summary>
    public void run()
    {
        RetailHardwareProfile  fromHardwareProfile;
        RetailHardwareProfile  toHardwareProfile;
        str newServiceAccountId;

        eventSource.EventWritePaymentsCopyHardwareProfiles();

        if (fromProfileId != toProfileId)
        {
            ttsbegin;

            fromHardwareProfile = RetailHardwareProfile::find(fromProfileId);
            toHardwareProfile = RetailHardwareProfile::find(toProfileId, true);

            if (fromHardwareProfile)
            {
                if (toHardwareProfile)
                {
                    toHardwareProfile.delete();
                }
                toHardwareProfile = fromHardwareProfile.data();
                toHardwareProfile.profileId = toProfileId;

                var merchant = appl.DecryptForPurpose(toHardwareProfile.SecureMerchantProperties, CreditCardPaymentProperties::CryptoPurpose);
                var properties = CreditCardPaymentProperties::fromXmlString(merchant);
                var enum = properties.enumerator();

                while (enum.moveNext())
                {
                    CreditCardPaymentProperty property = enum.current();
                    var innerProperties = property.parmPropertyListValue();
                    var serviceAccountIdProp = innerProperties.find(RetailConst.GenericNamespace::get_MerchantAccount(), RetailConst.MerchantAccountProperties::get_ServiceAccountId());

                    if (serviceAccountIdProp)
                    {
                        newServiceAccountId = strLwr(Winapi::createGUID());
                        serviceAccountIdProp.parmStringValue(newServiceAccountId);
                    }
                }

                toHardwareProfile.SecureMerchantProperties = appl.EncryptForPurpose(properties.toXmlString(), CreditCardPaymentProperties::CryptoPurpose);
                toHardwareProfile.insert();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;

        ret = super(packedClass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the hardware profile to be copied.
    /// </summary>
    /// <param name="_hardwareProfile">
    /// The profile data record.
    /// </param>
    public static void copy(RetailHardwareProfile _hardwareProfile)
    {
        Args args = new Args();
        ;
        args.record(_hardwareProfile);

        RetailHardwareProfileCopier::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    Static public ClassDescription description()
    {
        return "@RET2817";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailHardwareProfileCopier    hardwareProfileCopier = new RetailHardwareProfileCopier();

        if (_args)
        {
            switch (_args.dataset())
            {
                case tablenum(RetailHardwareProfile)   :   hardwareProfileCopier.initFromHardwareProfile(_args.record());
                                                        break;
            }
        }

        if (hardwareProfileCopier.prompt())
        {
            hardwareProfileCopier.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>