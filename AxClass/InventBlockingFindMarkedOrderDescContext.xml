<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBlockingFindMarkedOrderDescContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventBlockingFindMarkedOrderDescContext implements System.IDisposable
{
    private static InventBlockingFindMarkedOrderDescContext instance;
    private static StackBase instanceStack;
    private static boolean useStack = InventBlockingFindMarkedOrderDescFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void Dispose()
    {
        if (useStack)
        {
            if (instanceStack)
            {
                instanceStack.pop();
            }
        }
        else
        {
            instance = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (useStack)
        {
            if (!instanceStack)
            {
                instanceStack = new StackBase(Types::Class);
            }

            instanceStack.push(this);
        }
        else
        {
            if (instance)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            instance = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    public static InventBlockingFindMarkedOrderDescContext construct()
    {
        return new InventBlockingFindMarkedOrderDescContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of the class.
    /// </summary>
    /// <returns>The instance of the class. If no instance is created null is returned.</returns>
    [Hookable(false)]
    public static InventBlockingFindMarkedOrderDescContext current()
    {
        if (useStack)
        {
            if (instanceStack)
            {
                return instanceStack.peek(instanceStack.count());
            }
            return null;
        }
        else
        {
            return instance;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>