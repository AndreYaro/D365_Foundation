<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResResourceCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resource collection provider class.
/// </summary>
public class ResResourceCollection extends AVCollectionController
{
    private ResISearchEngine searchEngine;
    private IResourcePreview preview;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>searchEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the resource search engine object.
    /// </summary>
    /// <param name = "_searchEngine">Resource search engine.</param>
    /// <returns>Resource search engine.</returns>
    protected ResISearchEngine searchEngine(ResISearchEngine _searchEngine = searchEngine)
    {
        searchEngine = _searchEngine;
        return searchEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the availability view context object.
    /// </summary>
    /// <returns>Availability view context object.</returns>
    protected ResAvailabilityViewContext getContext()
    {
        return this.control().controlContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the Collection item preview provider.
    /// </summary>
    /// <param name = "_preview">Preview provider instance.</param>
    /// <returns>Preview provider instance.</returns>
    public IResourcePreview previewProvider(IResourcePreview _preview = preview)
    {
        preview = _preview;
        return preview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for all resources of the company.
    /// </summary>
    /// <returns>Collection query.</returns>
    public Query getCollectionQuery()
    {
        Query query;
        
        if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            query = new Query(querystr(ResAvailabilityResourcesQueryV2));
        }
        else
        {
            query = new Query(querystr(ResAvailabilityResourcesQuery));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecuteQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for resources to be executed.
    /// </summary>
    /// <returns>Collection query with any applicable search conditions.</returns>
    public Query getExecuteQuery()
    {
        Query query = this.getCollectionQuery();

        // compose collection query
        ResAvailabilityViewContext context = this.getContext();
        if (context)
        {
            str searchString = context.searchString();
            if (searchString)
            {
                ResSearchCriteria searchCriteria = ResSearchCriteria::createCriteria(searchString);
                query = this.searchEngine().applySearch(query, searchCriteria);
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves resources for booking.
    /// </summary>
    /// <param name = "_start">Start of the collection page data.</param>
    /// <param name = "_end">End of the collection page data.</param>
    /// <returns>Instance of AvailabilityView Collection data contract.</returns>
    public AvailabilityViewCollectionDataContract getCollection(int _start, int _end)
    {
        Query query = this.getExecuteQuery();

        // retrieve collection data
        QueryRun queryRun = new QueryRun(query);
        queryRun.enablePositionPaging(true);

        List cItems = new List(Types::Class);
        int fetchCount = (_end - _start) + 1;

        if (fetchCount > 0 && _start >= 0)
        {
            queryRun.addPageRange(_start + 1, fetchCount);
            CollectionItemDataContract cItem;

            while (queryRun.next())
            {
                cItem = this.resolveEntity(queryRun.getNo(1));
                cItems.addEnd(cItem);
            }
        }

        AvailabilityViewCollectionDataContract collectionData = AvailabilityViewCollectionDataContract::construct();
        collectionData.items(cItems);
        return collectionData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of resource collection provider.
    /// </summary>
    protected void new ()
    {
        if (!this.searchEngine())
        {
            this.searchEngine(ResSearchEngine::construct());
        }

        if (!this.previewProvider())
        {
            this.previewProvider(ResResourcePreview::construct());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes common record to data contract instance.
    /// </summary>
    /// <param name = "_entity">Record instance.</param>
    /// <returns>Instance of <c>CollectionItemDataContract</c>.</returns>
    public CollectionItemDataContract resolveEntity(Common entity)
    {
        CollectionItemDataContract resource = CollectionItemDataContract::construct();
        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of resource collection provider.
    /// </summary>
    /// <returns>Resource collection provider.</returns>
    public static ResResourceCollection construct()
    {
        ResResourceCollection provider = new ResResourceCollection();
        return provider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>