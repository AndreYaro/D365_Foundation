<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransInitialization</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Responsible for initializing the <c>TaxTrans</c> table buffer from various sources.
/// </summary>
class TaxTransInitialization
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>TaxTransInitialization</c>
    /// </summary>
    /// <returns>The newly created instance.</returns>
    static TaxTransInitialization construct()
    {
        return new TaxTransInitialization();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the destination buffer with the source buffer.
    /// </summary>
    /// <param name = "_taxTransSource">The source buffer.</param>
    /// <param name = "_taxTransDestination">The destination buffer.</param>
    /// <param name = "_sign">The amount to multiply tax amounts by; must be 1 or -1.</param>
    /// <returns>The initialized destination buffer.</returns>
    public static void copyTaxTrans(TaxTrans  _taxTransSource,
                                 TaxTrans  _taxTransDestination,
                                 Integer   _sign = 1)
    {
        if (_sign != 1 && _sign != -1)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        _taxTransDestination.TaxCode                            = _taxTransSource.TaxCode;
        _taxTransDestination.TaxGroup                           = _taxTransSource.TaxGroup;
        _taxTransDestination.TaxItemGroup                       = _taxTransSource.TaxItemGroup;
        _taxTransDestination.TaxBaseAmount                      = _taxTransSource.TaxBaseAmount * _sign;
        _taxTransDestination.TaxBaseAmountCur                   = _taxTransSource.TaxBaseAmountCur * _sign;
        _taxTransDestination.TaxBaseAmountRep                   = _taxTransSource.TaxBaseAmountRep * _sign;
        _taxTransDestination.SourceBaseAmountCur                = _taxTransSource.SourceBaseAmountCur * _sign;
        _taxTransDestination.TaxBaseQty                         = _taxTransSource.TaxBaseQty * _sign;
        _taxTransDestination.TaxAmount                          = _taxTransSource.TaxAmount * _sign;
        _taxTransDestination.TaxAmountCur                       = _taxTransSource.TaxAmountCur * _sign;
        _taxTransDestination.TaxAmountRep                       = _taxTransSource.TaxAmountRep * _sign;
        _taxTransDestination.SourceTaxAmountCur                 = _taxTransSource.SourceTaxAmountCur * _sign;
        _taxTransDestination.TaxInCostPrice                     = _taxTransSource.TaxInCostPrice * _sign;
        _taxTransDestination.TaxInCostPriceMST                  = _taxTransSource.TaxInCostPriceMST * _sign;
        _taxTransDestination.TaxInCostPriceCur                  = _taxTransSource.TaxInCostPriceCur * _sign;
        _taxTransDestination.TaxInCostPriceRep                  = _taxTransSource.TaxInCostPriceRep * _sign;

        _taxTransDestination.CurrencyCode                       = _taxTransSource.CurrencyCode;
        _taxTransDestination.SourceCurrencyCode                 = _taxTransSource.SourceCurrencyCode;
        _taxTransDestination.TaxDirection                       = _taxTransSource.TaxDirection;
        _taxTransDestination.ReverseCharge_W                    = _taxTransSource.ReverseCharge_W;
        _taxTransDestination.ExemptTax                          = _taxTransSource.ExemptTax;
        _taxTransDestination.ExemptCode                         = _taxTransSource.ExemptCode;
        _taxTransDestination.TaxAutogenerated                   = _taxTransSource.TaxAutogenerated;
        _taxTransDestination.SourceRegulateAmountCur            = _taxTransSource.SourceRegulateAmountCur * _sign;
        _taxTransDestination.TaxInCostPriceRegulated            = _taxTransSource.TaxInCostPriceRegulated * _sign;
        _taxTransDestination.euroTriangulation                  = _taxTransSource.euroTriangulation;
        _taxTransDestination.TaxValue                           = _taxTransSource.TaxValue;
        _taxTransDestination.VATExemptPct                       = _taxTransSource.VATExemptPct;
        _taxTransDestination.PrintCode                          = _taxTransSource.PrintCode;
        _taxTransDestination.TaxJurisdictionCode                = _taxTransSource.TaxJurisdictionCode;
        _taxTransDestination.gsthstTaxType_CA                   = _taxTransSource.gsthstTaxType_CA;

        // <GEECZ>
        _taxTransDestination.PostponeVAT                        = _taxTransSource.PostponeVAT;
        // </GEECZ>

        TaxTransInitExtensions_W::copyTaxTrans(_taxTransSource, _taxTransDestination);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>TaxTrans</c> record using the <c>TaxUncommitted</c> record passed in.
    /// </summary>
    /// <param name="_taxUncommitted">
    /// The <c>TaxUncommitted</c> record to post.
    /// </param>
    /// <param name="_taxOrigin">
    /// The <c>TaxOrigin</c> to use during posting.
    /// </param>
    /// <param name = "_taxTransDestination">The target <c>TaxTrans</c> record.</param>
    /// <returns>The initialized target record.</returns>
    public static void initFromTaxUncommitted(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted, TaxOrigin _taxOrigin)
    {
        TaxTransInitialization taxTransInitialization = TaxTransInitialization::construct();

        // Set relevant fields from tax uncommitted
        taxTransInitialization.setFieldsFromTaxUncommitted(_taxTransDestination, _taxUncommitted, _taxOrigin);

        //Intercompany recalculation, if needed
        taxTransInitialization.intercompanyRecalcFromTaxUncommitted(_taxTransDestination, _taxUncommitted);

        TaxTransInitExtensions_W::initFromTaxUncommitted(_taxTransDestination, _taxUncommitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsFromTaxUncommitted</Name>
				<Source><![CDATA[
    private void setFieldsFromTaxUncommitted(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted, TaxOrigin _taxOrigin)
    {
        TaxTable        taxTable        = TaxTable::find(_taxUncommitted.TaxCode);
        TaxGroupData    taxGroupData    = TaxGroupData::find(_taxUncommitted.TaxGroup, _taxUncommitted.TaxCode);
        TaxOnItem       taxOnItem;

        _taxTransDestination.SourceTableId                      = _taxUncommitted.SourceTableId;
        _taxTransDestination.SourceRecId                        = _taxUncommitted.SourceRecId;
        _taxTransDestination.Source                             = _taxUncommitted.Source;
        _taxTransDestination.TransDate                          = _taxUncommitted.TransDate;
        _taxTransDestination.Voucher                            = _taxUncommitted.Voucher;
        _taxTransDestination.InventTransId                      = _taxUncommitted.InventTransId;
        _taxTransDestination.TaxCode                            = _taxUncommitted.TaxCode;
        _taxTransDestination.TaxGroup                           = _taxUncommitted.TaxGroup;
        _taxTransDestination.TaxItemGroup                       = _taxUncommitted.TaxItemGroup;
        _taxTransDestination.SourceBaseAmountCur                = _taxUncommitted.SourceBaseAmountCur;
        _taxTransDestination.TaxBaseQty                         = _taxUncommitted.TaxBaseQty;
        _taxTransDestination.SourceTaxAmountCur                 = _taxUncommitted.SourceTaxAmountCur;
        _taxTransDestination.TaxInCostPrice                     = _taxUncommitted.TaxInCostPrice;
        _taxTransDestination.CurrencyCode                       = _taxUncommitted.CurrencyCode;
        _taxTransDestination.SourceCurrencyCode                 = _taxUncommitted.SourceCurrencyCode;
        _taxTransDestination.TaxDirection                       = _taxUncommitted.TaxDirection;
        _taxTransDestination.UnrealizedTax                      = _taxUncommitted.UnrealizedTax;
        _taxTransDestination.RealizedDate                       = dateNull();
        _taxTransDestination.TaxOrigin                          = _taxOrigin;
        _taxTransDestination.SourceDocumentLine                 = _taxUncommitted.SourceDocumentLine;
        _taxTransDestination.HeadingTableId                     = _taxUncommitted.HeadingTableId;

        // tax code currency amounts
        _taxTransDestination.TaxBaseAmountCur                   = _taxUncommitted.TaxBaseAmountCur;
        _taxTransDestination.TaxAmountCur                       = _taxUncommitted.TaxAmountCur;
        _taxTransDestination.TaxInCostPriceCur                  = _taxUncommitted.TaxInCostPriceCur;

        // reporting currency amounts
        _taxTransDestination.TaxBaseAmountRep                   = _taxUncommitted.TaxBaseAmountRep;
        _taxTransDestination.TaxAmountrep                       = _taxUncommitted.TaxAmountRep;
        _taxTransDestination.TaxInCostPriceRep                  = _taxUncommitted.TaxInCostPriceRep;

        // accounting currency amounts
        _taxTransDestination.TaxBaseAmount                      = _taxUncommitted.TaxBaseAmount;
        _taxTransDestination.TaxAmount                          = _taxUncommitted.TaxAmount;
        _taxTransDestination.TaxInCostPriceMST                  = _taxUncommitted.TaxInCostPriceMST;

        _taxTransDestination.ReverseCharge_W                    = _taxUncommitted.ReverseCharge_W;
        _taxTransDestination.ExemptTax                          = _taxUncommitted.ExemptTax;
        _taxTransDestination.TaxAutogenerated                   = _taxUncommitted.TaxAutogenerated;
        _taxTransDestination.SourceRegulateAmountCur            = _taxUncommitted.SourceRegulateAmountCur;

        _taxTransDestination.TaxInCostPriceRegulated            = _taxUncommitted.TaxInCostPriceRegulated;

        _taxTransDestination.euroTriangulation                  = _taxUncommitted.euroTriangulation;
        _taxTransDestination.TaxValue                           = _taxUncommitted.showTaxValue();
        _taxTransDestination.VATExemptPct                       = TaxData::getVATExemptPct(_taxUncommitted.TaxDirection, _taxUncommitted.TaxCode, _taxUncommitted.CalculationDate, _taxUncommitted.TaxBaseAmount);
        _taxTransDestination.ExemptCode                         = TaxGroupData::find(_taxUncommitted.TaxGroup, _taxUncommitted.TaxCode).TaxExemptCode;

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            taxOnItem = TaxOnItem::find(_taxUncommitted.TaxItemGroup, _taxUncommitted.TaxCode);
            if (taxOnItem && taxOnItem.TaxExemptCode)
            {
                _taxTransDestination.ExemptCode = taxOnItem.TaxExemptCode;
            }
        }
        // </GBR>

        _taxTransDestination.PrintCode                          = taxTable.PrintCode;
        _taxTransDestination.SourceBaseAmountCurRegulated       = _taxUncommitted.SourceBaseAmountCurRegulated;
        _taxTransDestination.TaxJurisdictionCode                = taxTable.TaxJurisdictionCode;
        _taxTransDestination.TaxPrintDetail                     = TaxGroupHeading::find(_taxUncommitted.TaxGroup).TaxPrintDetail;
        _taxTransDestination.EmptyTaxBaseForOutgoingTax_W       = _taxUncommitted.EmptyTaxBaseForOutgoingTax_W;
        _taxTransDestination.gsthstTaxType_CA                   = _taxUncommitted.gsthstTaxType_CA;

        // <GEECZ>
        _taxTransDestination.PostponeVAT                        = _taxUncommitted.PostponeVAT;
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyRecalcFromTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the tax amounts for an intercompany transaction considering a potentially different exchange rate.
    /// </summary>
    /// <param name = "_taxTransDestination">
    /// The target <c>TaxTrans</c> record.
    /// </param>
    /// <param name="_taxUncommitted">
    /// The <c>TaxUncommitted</c> record to post.
    /// </param>
    protected void intercompanyRecalcFromTaxUncommitted(TaxTrans _taxTransDestination, TaxUncommitted _taxUncommitted)
    {
        CurrencyCode           accountingCurrency;
        CurrencyExchangeHelper currencyHelper;
        TaxCurrencyConversionRoutineHandler handler = TaxCurrencyConversionRoutineHandler::instance();

        if (_taxTransDestination.dataAreaId != _taxUncommitted.dataAreaId)
        {
            accountingCurrency = CompanyInfoHelper::standardCurrency();
            if (accountingCurrency != _taxUncommitted.SourceCurrencyCode)
            {
                currencyHelper = CurrencyExchangeHelper::newLedger(Ledger::current());
                currencyHelper.parmExchangeDate(_taxTransDestination.TransDate);
                _taxTransDestination.TaxBaseAmount                      = currencyHelper.calculateTransactionToAccounting(_taxUncommitted.SourceCurrencyCode, _taxUncommitted.SourceBaseAmountCur, true);
                _taxTransDestination.TaxAmount                          = currencyHelper.calculateTransactionToAccounting(_taxUncommitted.SourceCurrencyCode, _taxUncommitted.SourceRegulateAmountCur, true);
                _taxTransDestination.TaxInCostPriceMST                  = currencyHelper.calculateTransactionToAccounting(_taxUncommitted.SourceCurrencyCode, _taxUncommitted.TaxInCostPrice, true);
            }
            else
            {
                _taxTransDestination.TaxBaseAmount                      = _taxUncommitted.SourceBaseAmountCur;
                _taxTransDestination.TaxAmount                          = _taxUncommitted.SourceRegulateAmountCur;
                _taxTransDestination.TaxInCostPriceMST                  = _taxUncommitted.TaxInCostPrice;
            }

            if (_taxTransDestination.CurrencyCode && (_taxTransDestination.CurrencyCode != accountingCurrency))
            {
                if (currencyHelper == null)
                {
                    currencyHelper = CurrencyExchangeHelper::newLedger(Ledger::current());
                }

                _taxTransDestination.TaxBaseAmountCur = currencyHelper.calculateAccountingToTransaction(_taxTransDestination.CurrencyCode, _taxTransDestination.TaxBaseAmount, true);
                _taxTransDestination.TaxAmountCur = currencyHelper.calculateAccountingToTransaction(_taxTransDestination.CurrencyCode, _taxTransDestination.TaxAmount, true);
                _taxTransDestination.TaxInCostPriceCur = currencyHelper.calculateAccountingToTransaction(_taxTransDestination.CurrencyCode, _taxTransDestination.TaxInCostPriceMST, true);
            }
            else
            {
                _taxTransDestination.TaxBaseAmountCur = _taxTransDestination.TaxBaseAmount;
                _taxTransDestination.TaxAmountCur = _taxTransDestination.TaxAmount;
                _taxTransDestination.TaxInCostPriceCur = _taxTransDestination.TaxInCostPriceMST;
            }

            _taxTransDestination.TaxBaseAmountRep = handler.transCurrencyToReportingCurrency(_taxUncommitted.SourceCurrencyCode, _taxUncommitted.SourceBaseAmountCur, 
                                                                                             _taxUncommitted.ReportingCurrencyExchRate, _taxTransDestination.TransDate);
            _taxTransDestination.TaxAmountRep = handler.transCurrencyToReportingCurrency(_taxUncommitted.SourceCurrencyCode, _taxUncommitted.SourceRegulateAmountCur,
                                                                                             _taxUncommitted.ReportingCurrencyExchRate, _taxTransDestination.TransDate);
            _taxTransDestination.TaxInCostPriceRep = handler.transCurrencyToReportingCurrency(_taxUncommitted.SourceCurrencyCode, _taxUncommitted.TaxInCostPrice,
                                                                                             _taxUncommitted.ReportingCurrencyExchRate, _taxTransDestination.TransDate);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>TaxTrans</c> record based on the provided <c>TmpTaxWorkTrans</c>.
    /// </summary>
    /// <param name = "_taxTransDestination">The buffer to initialize.</param>
    /// <param name = "_tmpTaxWorkTrans">The source of initialization data.</param>
    /// <param name = "_taxOrigin">The origin of the initialized <c>TaxTrans</c>.</param>
    public static void initFromTaxWorkTrans(TaxTrans _taxTransDestination, TmpTaxWorkTrans _tmpTaxWorkTrans, TaxOrigin _taxOrigin)
    {
        #ISOCountryRegionCodes
        TaxTable    taxTable;
        TaxGroupData    taxGroupData;
        TaxOnItem       taxOnItem;

        taxTable                                = TaxTable::find(_tmpTaxWorkTrans.TaxCode);
        taxGroupData                            = TaxGroupData::find(_tmpTaxWorkTrans.TaxGroup, _tmpTaxWorkTrans.TaxCode);

        _taxTransDestination.SourceDocumentLine                 = _tmpTaxWorkTrans.SourceDocumentLine;
        _taxTransDestination.SourceTableId                      = _tmpTaxWorkTrans.SourceTableId;
        _taxTransDestination.SourceRecId                        = _tmpTaxWorkTrans.SourceRecId;
        _taxTransDestination.Source                             = _tmpTaxWorkTrans.Source;
        _taxTransDestination.TransDate                          = _tmpTaxWorkTrans.TransDate;
        _taxTransDestination.Voucher                            = _tmpTaxWorkTrans.Voucher;
        _taxTransDestination.InventTransId                      = _tmpTaxWorkTrans.InventTransId;
        _taxTransDestination.TaxCode                            = _tmpTaxWorkTrans.TaxCode;
        _taxTransDestination.TaxGroup                           = _tmpTaxWorkTrans.TaxGroup;
        _taxTransDestination.TaxItemGroup                       = _tmpTaxWorkTrans.TaxItemGroup;
        _taxTransDestination.TaxBaseAmount                      = _tmpTaxWorkTrans.TaxBaseAmount;
        _taxTransDestination.TaxBaseAmountCur                   = _tmpTaxWorkTrans.TaxBaseAmountCur;
        _taxTransDestination.TaxBaseAmountRep                   = _tmpTaxWorkTrans.TaxBaseAmountRep;
        _taxTransDestination.SourceBaseAmountCur                = _tmpTaxWorkTrans.SourceBaseAmountCur;
        _taxTransDestination.TaxBaseQty                         = _tmpTaxWorkTrans.TaxBaseQty;
        _taxTransDestination.TaxAmount                          = _tmpTaxWorkTrans.TaxAmount;
        _taxTransDestination.TaxAmountCur                       = _tmpTaxWorkTrans.TaxAmountCur;
        _taxTransDestination.TaxAmountRep                       = _tmpTaxWorkTrans.TaxAmountRep;
        _taxTransDestination.SourceTaxAmountCur                 = _tmpTaxWorkTrans.SourceTaxAmountCur;
        _taxTransDestination.TaxInCostPrice                     = _tmpTaxWorkTrans.TaxInCostPrice;
        _taxTransDestination.TaxInCostPriceMST                  = _tmpTaxWorkTrans.TaxInCostPriceMST;
        _taxTransDestination.TaxInCostPriceCur                  = _tmpTaxWorkTrans.TaxInCostPriceCur;
        _taxTransDestination.TaxInCostPriceRep                  = _tmpTaxWorkTrans.TaxInCostPriceRep;
        _taxTransDestination.CurrencyCode                       = _tmpTaxWorkTrans.CurrencyCode;
        _taxTransDestination.SourceCurrencyCode                 = _tmpTaxWorkTrans.SourceCurrencyCode;
        _taxTransDestination.TaxDirection                       = _tmpTaxWorkTrans.TaxDirection;
        _taxTransDestination.HeadingTableId                     = _tmpTaxWorkTrans.HeadingTableId;
        _taxTransDestination.UnrealizedTax                      = _tmpTaxWorkTrans.UnrealizedTax;
        _taxTransDestination.RealizedDate                       = dateNull();
        _taxTransDestination.TaxOrigin                          = _taxOrigin;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCA]))
        {
            _taxTransDestination.gsthstTaxType_CA               = _tmpTaxWorkTrans.gsthstTaxType_CA;
        }
        _taxTransDestination.ReverseCharge_W                    = _tmpTaxWorkTrans.ReverseCharge_W;
        _taxTransDestination.ExemptTax                          = _tmpTaxWorkTrans.ExemptTax;
        _taxTransDestination.TaxAutogenerated                   = _tmpTaxWorkTrans.TaxAutogenerated;
        _taxTransDestination.SourceRegulateAmountCur            = _tmpTaxWorkTrans.SourceRegulateAmountCur;
        _taxTransDestination.TaxInCostPriceRegulated            = _tmpTaxWorkTrans.TaxInCostPriceRegulated;
        _taxTransDestination.euroTriangulation                  = _tmpTaxWorkTrans.euroTriangulation;
        _taxTransDestination.TaxValue                           = _tmpTaxWorkTrans.showTaxValue();
        _taxTransDestination.VATExemptPct                       = TaxData::getVATExemptPct(_tmpTaxWorkTrans.TaxDirection, _tmpTaxWorkTrans.TaxCode, _tmpTaxWorkTrans.CalculationDate, _tmpTaxWorkTrans.TaxBaseAmount);
        _taxTransDestination.ExemptCode                         = taxGroupData.TaxExemptCode;

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            taxOnItem = TaxOnItem::find(_tmpTaxWorkTrans.TaxItemGroup, _tmpTaxWorkTrans.TaxCode);
            if (taxOnItem && taxOnItem.TaxExemptCode)
            {
                _taxTransDestination.ExemptCode = taxOnItem.TaxExemptCode;
            }
        }
        // </GBR>

        _taxTransDestination.PrintCode                          = taxTable.PrintCode;
        _taxTransDestination.SourceBaseAmountCurRegulated       = _tmpTaxWorkTrans.SourceBaseAmountCurRegulated;
        _taxTransDestination.TaxJurisdictionCode                = taxTable.TaxJurisdictionCode;
        _taxTransDestination.TaxPrintDetail                     = TaxGroupHeading::find(_tmpTaxWorkTrans.TaxGroup).TaxPrintDetail;
        _taxTransDestination.EmptyTaxBaseForOutgoingTax_W       = _tmpTaxWorkTrans.EmptyTaxBaseForOutgoingTax_W;

        // <GEECZ>
        _taxTransDestination.PostponeVAT                        = _tmpTaxWorkTrans.PostponeVAT;
        // </GEECZ>

        TaxTransInitExtensions_W::initFromTaxWorkTrans(_taxTransDestination, _tmpTaxWorkTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Protected new method so class is not directly instantiated
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>