<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchLineDocument</c> class is the workflow document class for the <c>PurchLine</c> class.
/// </summary>
/// <remarks>
///    This class is required in order to provide a unique workflow document for purchase lines.
/// </remarks>
class   PurchLineDocument
extends WorkflowDocument implements SysErrorMessageHelpScopeIWorkflow
{
    PurchLine            purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcHistoryInvoiceAmount</Name>
				<Source><![CDATA[
    private InvoiceAmountMST calcHistoryInvoiceAmount(recId _recId)
    {
        AmountMST  historyAmountMST;
        PurchTableVersion purchTableVersion;

        this.getPurchLine(_recId);

        if (purchLine)
        {
            purchTableVersion = purchTableVersion::findLatest(purchLine.PurchId, purchLine.dataAreaId);
            if (purchTableVersion.IsArchived)
            {
                historyAmountMST = PurchLineHistory::find(purchLine, purchTableVersion.VersionDateTime).LineAmount;
            }
            else
            {
                historyAmountMST = purchLine.LineAmount;
            }
        }

        return historyAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchLine</Name>
				<Source><![CDATA[
    private PurchLine getPurchLine(recId  _recId)
    {
        if (!purchLine)
        {
            purchLine = PurchLine::findRecId(_recId);
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the query to use for the document.
    /// </summary>
    /// <returns>
    ///    The name of the query to use for the document.
    /// </returns>
    queryName getQueryName()
    {
        return queryStr(PurchLineDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetSourceCheckResult</c> for the <c>PurchLine</c> record.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// The <c>BudgetSourceCheckResult</c> field for the <c>PurchLine</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The table ID must be a <c>PurchLine</c> record.
    /// </exception>
    public BudgetSourceCheckResult parmBudgetCheckResult(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        PurchLine purchLineLocal;
        BudgetSourceCheckResult budgetSourceCheckResult;

        if (_tableId != tableNum(PurchLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Debug::assert(_companyId != '');

        changecompany(_companyId)
        {
            purchLineLocal = PurchLine::findRecId(_recId);

            if (purchLineLocal)
            {
                budgetSourceCheckResult = purchLineLocal.getBudgetCheckResult();
            }
        }

        return budgetSourceCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcDeltaNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the difference between the actual purchase line amount and the latest approved purchase line.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// The difference between the purchase line amount and the current line amount if a change request is
    /// reused and the purchase line has been changed; otherwise, the purchase line amount.
    /// </returns>
    public InvoiceNetAmountDeltaMST parmCalcDeltaNetAmount(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        AmountMST           amountMST;
        AmountMST           currentAmountMST;
        AmountMST           historyAmountMST;

        this.getPurchLine(_recId);

        if (purchLine)
        {
            currentAmountMST = purchLine.LineAmount;
            historyAmountMST = this.calcHistoryInvoiceAmount(_recId);
        }

        amountMST = currentAmountMST - historyAmountMST;

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcDeltaNetAmountPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the difference in percentage between the actual purchase order invoice amount and the
    /// latest approved purchase order.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// The difference as a percent between the actual purchase order invoice amount and the latest
    /// approved purchase order; otherwise, 100.
    /// </returns>
    public InvoiceNetAmountDeltaPct parmCalcDeltaNetAmountPct(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        AmountMST   historyAmountMST;
        Percent     percent = 0;

        historyAmountMST = this.calcHistoryInvoiceAmount(_recId);

        if (historyAmountMST)
        {
            percent = ((purchLine.LineAmount - historyAmountMST)
                    /  historyAmountMST)
                    *  100;
        }

        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a purchaser order line has changed.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    true if a purchase order line has changed; otherwise, false.
    /// </returns>
    public PurchLineHasChanged parmHasChanged(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        VersioningTmpTrans  versioningTmpTrans;

        if (this.parmIsNewLine(_companyId, _tableId, _recId))
        {
            return NoYes::Yes;
        }

        this.getPurchLine(_recId);

        if (purchLine)
        {
            versioningTmpTrans.setTmpData(VersioningCompare::unpackVersioningTmpTrans(VersioningComparePurchLine::packFromLine(purchLine)));

            select firstonly RecId from versioningTmpTrans
                where   versioningTmpTrans.Action != VersioningChangeType::None;

            if (versioningTmpTrans)
            {
                return NoYes::Yes;
            }
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsNewLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the purchase order line is new.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    true if a version of the specified <c>PurchLine</c> record exists; otherwise, false.
    /// </returns>
    public PurchLineIsNew parmIsNewLine(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        this.getPurchLine(_recId);

        if (purchLine)
        {
            if (PurchLineHistory::exist(purchLine))
            {
                return NoYes::No;
            }
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoesPurchOrderLineRefBudgetRes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified purchase order line references a budget reservation.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the purchase order line table.
    /// </param>
    /// <param name="_purchLineTableId">
    /// The table ID that corresponds to the purchase order line table.
    /// </param>
    /// <param name="_purchLineRecId">
    /// The record ID that corresponds to the purchase order line table record.
    /// </param>
    /// <returns>
    /// Yes if the current document references a budget reservation; otherwise, no.
    /// </returns>
    public BudgetReservationReferenced_PSN parmDoesPurchOrderLineRefBudgetRes(CompanyId _companyId, TableId _purchLineTableId, PurchLineRefRecId _purchLineRecId)
    {
        BudgetReservationReferenced_PSN isBudgetReservationReferenced;

        if (_purchLineTableId != tableNum(PurchLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Debug::assert(_companyId != '');

        changecompany(_companyId)
        {
            if (PurchLine::findRecId(_purchLineRecId).BudgetReservationLine_PSN && PublicSectorUtils::isBudgetReservationEnabled())
            {
                isBudgetReservationReferenced = NoYes::Yes;
            }
            else
            {
                isBudgetReservationReferenced = NoYes::No;
            }
        }

        return isBudgetReservationReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequiresReApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a given purchase order line requires approval.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// true if approval is required; otherwise, false.
    /// </returns>
    public PurchReApprovalRequired parmRequiresReApproval(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        PurchTable  purchTable;

        this.getPurchLine(_recId);

        if (purchLine)
        {
            purchTable = purchLine.purchTable();

            if (purchTable
                && PurchReApprovalPolicyRule::evaluateLine(purchLine))
            {
                return NoYes::Yes;
            }
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchLineDocument construct()
    {
        return new PurchLineDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableErrorMessageHelpScopeAndShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean enableErrorMessageHelpScopeAndShowLink()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>