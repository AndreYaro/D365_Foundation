<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlAssetCreateDisposalTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class PlAssetCreateDisposalTemplate extends RunBase
{
    private DialogField dlgAssetBookId;
    private DialogField dlgAccDepDeb;
    private DialogField dlgAccDepCred;
    private DialogField dlgOverPrev;

    private AssetBookId assetBookId;
    private LedgerDimensionDefaultAccount accDepDebDimension;
    private LedgerDimensionDefaultAccount accDepCredDimension;
    private NoYes overPrev;

    private AssetSoldScrap assetSoldScrap;
    private AssetLedger assetLedger;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        assetBookId,
        accDepDebDimension,
        accDepCredDimension,
        overPrev
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.addGroup("@GLS109752");
        dlgAssetBookId = dialog.addFieldValue(extendedTypeStr(AssetBookId), assetBookId);

        dialog.addGroup("@GLS109602");

        dlgAccDepDeb = SegmentedEntryControlBuild::addToDialog(dialog, classstr(LedgerDimensionDefaultAccountController), extendedTypeStr(LedgerDimensionDefaultAccount), "@SYS129344", accDepDebDimension);
        dlgAccDepCred = SegmentedEntryControlBuild::addToDialog(dialog, classstr(LedgerDimensionDefaultAccountController), extendedTypeStr(LedgerDimensionDefaultAccount), "@SYS11162", accDepCredDimension);

        dialog.addGroup();
        dlgOverPrev = dialog.addFieldValue(extendedTypeStr(NoYesId), overPrev, "@SYS54006", "@GLS110164");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        assetBookId = dlgAssetBookId.value();
        accDepDebDimension   = dlgAccDepDeb.value();
        accDepCredDimension  = dlgAccDepCred.value();
        overPrev    = dlgOverPrev.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initValue(Args _args)
    {
        FormRun  formRun = _args.caller();

        if (formRun is AssetIPostingForm_PL)
        {
            AssetIPostingForm_PL fr = formRun as AssetIPostingForm_PL;
            assetSoldScrap = fr.parmAssetSoldScrap();
        }

        assetLedger = formRun.dataSource(formDataSourceStr(AssetPosting, AssetLedger)).cursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmameterRecord</Name>
				<Source><![CDATA[
    private void insertParmameterRecord(AssetPostValue      _postValue,
                        LedgerDimensionDefaultAccount  _accDimension,
                        LedgerDimensionDefaultAccount  _offsetDimension)
    {
        AssetDisposalParameters assetDisposal;

        if (_accDimension && _offsetDimension)
        {
            ttsbegin;
            assetDisposal = AssetDisposalParameters::find(assetSoldScrap,
                                                                assetLedger.PostingProfile,
                                                                assetBookId,
                                                                _postValue,
                                                                TableGroupAll::All,
                                                                '',
                                                                AssetPostType::All,
                                                                true);
            if (assetDisposal.RecId)
            {
                if (overPrev)
                {
                    if (assetDisposal.LedgerDimension != _accDimension)
                    {
                        info(strFmt("@GLS110165",
                                LedgerDimensionFacade::getMainAccountFromLedgerDimension(assetDisposal.LedgerDimension).MainAccountId,
                                LedgerDimensionFacade::getMainAccountFromLedgerDimension(_accDimension).MainAccountId,
                                _postValue));
                        assetDisposal.LedgerDimension = _accDimension;
                    }

                    if (assetDisposal.OffsetLedgerDimension != _offsetDimension)
                    {
                        info(strFmt("@GLS110165",
                                LedgerDimensionFacade::getMainAccountFromLedgerDimension(assetDisposal.OffsetLedgerDimension).MainAccountId,
                                LedgerDimensionFacade::getMainAccountFromLedgerDimension(_offsetDimension).MainAccountId,
                                _postValue));
                        assetDisposal.OffsetLedgerDimension = _offsetDimension;
                    }
                    assetDisposal.update();
                }
            }
            else
            {
                assetDisposal.initValue();
                assetDisposal.SoldScrap             = assetSoldScrap;
                assetDisposal.PostingProfile        = assetLedger.PostingProfile;
                assetDisposal.BookId                = assetBookId;
                assetDisposal.PostValue             = _postValue;
                assetDisposal.LedgerDimension       = _accDimension;
                assetDisposal.OffsetLedgerDimension = _offsetDimension;
                assetDisposal.insert();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.insertParmameterRecord(AssetPostValue::NBV,                      accDepDebDimension, accDepCredDimension);

        this.insertParmameterRecord(AssetPostValue::AccDeprPriorYears_PL,     accDepDebDimension, accDepCredDimension);
        this.insertParmameterRecord(AssetPostValue::AccDeprThisYear_PL,       accDepDebDimension, accDepCredDimension);

        this.insertParmameterRecord(AssetPostValue::AcqPriorYears,            accDepDebDimension, accDepCredDimension);
        this.insertParmameterRecord(AssetPostValue::AcqThisYear,              accDepDebDimension, accDepCredDimension);

        this.insertParmameterRecord(AssetPostValue::AcqAdjPriorYears,         accDepDebDimension, accDepCredDimension);
        this.insertParmameterRecord(AssetPostValue::AcqAdjThisYear,           accDepDebDimension, accDepCredDimension);

        this.insertParmameterRecord(AssetPostValue::DepPriorYears,            accDepDebDimension, accDepCredDimension);
        this.insertParmameterRecord(AssetPostValue::DepThisYear,              accDepDebDimension, accDepCredDimension);

        this.insertParmameterRecord(AssetPostValue::DepNotCostPriorYears_PL,  accDepDebDimension, accDepCredDimension);
        this.insertParmameterRecord(AssetPostValue::DepNotCostThisYear_PL,    accDepDebDimension, accDepCredDimension);

        this.insertParmameterRecord(AssetPostValue::DepAdjPriorYears,         accDepDebDimension, accDepCredDimension);
        this.insertParmameterRecord(AssetPostValue::DepAdjThisYear,           accDepDebDimension, accDepCredDimension);

        this.insertParmameterRecord(AssetPostValue::ExtraDepPriorYears,       accDepDebDimension, accDepCredDimension);
        this.insertParmameterRecord(AssetPostValue::ExtraDepThisYear,         accDepDebDimension, accDepCredDimension);

        this.insertParmameterRecord(AssetPostValue::PostOffAccDPriorYears_PL, accDepDebDimension, accDepCredDimension);
        this.insertParmameterRecord(AssetPostValue::PostOffAccDThisYear_PL,   accDepDebDimension, accDepCredDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@GLS110158";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PlAssetCreateDisposalTemplate   assetCreateDisposalTemplate;
        FormDataSource                  formDataSource;

        if (!_args
            || _args.dataset() != tableNum(AssetDisposalParameters))
        {
            throw error(strFmt("@SYS25516", PlAssetCreateDisposalTemplate::description()));
        }

        assetCreateDisposalTemplate = new PlAssetCreateDisposalTemplate();

        assetCreateDisposalTemplate.initValue(_args);

        if (assetCreateDisposalTemplate.prompt())
        {
            assetCreateDisposalTemplate.runOperation();

            formDataSource = _args.caller().datasource();
            formDataSource.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>