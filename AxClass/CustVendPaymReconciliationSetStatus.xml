<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymReconciliationSetStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendPaymReconciliationSetStatus extends RunBaseBatch implements BatchRetryable
{
    container conRecid;
    private NoYes reuseCheck;
    private boolean skipVoidConfirmationUserInteraction;
    private boolean voidAllNegotiableInstruments;

    // Packed variables
    private CustVendPaymStatus status;

    // Dialog fields
    private DialogField dialogField;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        status,
        conRecid,
        reuseCheck
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns false.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>dialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecid</Name>
				<Source><![CDATA[
    public void parmRecid(recId _recId)
    {
        conRecid += _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReuseCheck</Name>
				<Source><![CDATA[
    public NoYes parmReuseCheck(NoYes _reuseCheck = reuseCheck)
    {
        reuseCheck = _reuseCheck;
        return reuseCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipVoidConfirmationUserInteraction</Name>
				<Source><![CDATA[
    internal boolean parmSkipVoidConfirmationUserInteraction(boolean _skipVoidConfirmationUserInteraction = skipVoidConfirmationUserInteraction)
    {
        skipVoidConfirmationUserInteraction = _skipVoidConfirmationUserInteraction;
        return skipVoidConfirmationUserInteraction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoidAllNegotiableInstruments</Name>
				<Source><![CDATA[
    internal boolean parmVoidAllNegotiableInstruments(boolean _voidAllNegotiableInstruments = voidAllNegotiableInstruments)
    {
        voidAllNegotiableInstruments = _voidAllNegotiableInstruments;
        return voidAllNegotiableInstruments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatus</Name>
				<Source><![CDATA[
    public CustVendPaymStatus parmStatus(CustVendPaymStatus _status = status)
    {
        status = _status;
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectNegInst</Name>
				<Source><![CDATA[
    public boolean rejectNegInst(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankAccountID bankAccountID;
        BankChequeTable bankChequeTable;
        BankChequeTable bankChequeTableNotPrinted;
        BankChequeTable bankChequeTableLastNotPrinted;
        BankChequeTable bankChequeTableNextPrinted;
        ChequeNumMethod chequeNumMethod;
        BankChequePaymTrans bankChequePaymTrans;

        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            bankAccountID = _ledgerJournalTrans.parmOffsetAccount();
        }
        else
        {
            bankAccountID = CustVendPaymModeTable::findCommon(_ledgerJournalTrans).parmPaymAccount();
        }

        // Is there a cheque attached to this record?
        if ((_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            || _ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
            || _ledgerJournalTrans.AccountType == LedgerJournalACType::Bank
            || _ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
            && bankAccountID
            && BankChequeTable::exist(bankAccountID, _ledgerJournalTrans.BankChequeNum))
        {
            // Is the cheque already rejected/voided?
            if (BankChequeTable::find(bankAccountID, _ledgerJournalTrans.BankChequeNum).ChequeStatus == ChequeStatus::Rejected)
            {
                return checkFailed(strfmt('%1 %2: %3',"@SYS12371", _ledgerJournalTrans.Voucher, "@SYS24512"));
            }

            if (reuseCheck)
            {
                chequeNumMethod = BankChequeLayout::find(bankAccountID).ChequeNumMethod;

                if (chequeNumMethod == ChequeNumMethod::Fixed)
                {
                    delete_from bankChequePaymTrans
                        where bankChequePaymTrans.AccountId == bankAccountID
                           && bankChequePaymTrans.ChequeNum == _ledgerJournalTrans.PaymReference;
                }

                // Reuse check attached to ledger journal trans record
                BankChequeReprints::insertCheque(
                    bankAccountID,
                    _ledgerJournalTrans.BankChequeNum,
                    ChequeStatus::Void,
                    _ledgerJournalTrans.TransDate,
                    _ledgerJournalTrans.Voucher,
                    CustVendCheque::ledgerJournalACType2RecipientType(_ledgerJournalTrans.AccountType),
                    _ledgerJournalTrans.parmAccount(),
                    _ledgerJournalTrans.CurrencyCode,
                    _ledgerJournalTrans.amount(),
                    _ledgerJournalTrans.BankNegInstRecipientName);

                BankChequeTable::setChequeStatus(
                    bankAccountID,
                    _ledgerJournalTrans.PaymReference,
                    ChequeStatus::Created,
                    dateNull(),
                    '',
                    CustVendCheque::ledgerJournalACType2RecipientType(_ledgerJournalTrans.AccountType),
                    '',
                    '',
                    '',
                    0,
                    '');

                // Fix NotPrinted status checks immediately following the reused check
                select firstonly ChequeNum from bankChequeTableNextPrinted
                    where bankChequeTableNextPrinted.AccountID == bankAccountID
                        && bankChequeTableNextPrinted.ChequeNum > _ledgerJournalTrans.BankChequeNum
                        && bankChequeTableNextPrinted.ChequeStatus != ChequeStatus::NotPrinted;

                if (bankChequeTableNextPrinted.ChequeNum)
                {
                    while select ChequeNum from bankChequeTableNotPrinted
                        where bankChequeTableNotPrinted.AccountID == bankAccountID
                           && bankChequeTableNotPrinted.ChequeNum > _ledgerJournalTrans.BankChequeNum
                           && bankChequeTableNotPrinted.ChequeNum < bankChequeTableNextPrinted.ChequeNum
                           && bankChequeTableNotPrinted.ChequeStatus == ChequeStatus::NotPrinted
                    {
                        BankChequeTable::setChequeStatus(
                            bankAccountID,
                            bankChequeTableNotPrinted.ChequeNum,
                            ChequeStatus::Created,
                            dateNull(),
                            '',
                            CustVendCheque::ledgerJournalACType2RecipientType(_ledgerJournalTrans.AccountType),
                            '',
                            '',
                            '',
                            0,
                            '');
                    }

                    if (chequeNumMethod == ChequeNumMethod::Free)
                    {
                        delete_from bankChequeTable where bankChequeTable.AccountID == bankAccountID
                            && bankChequeTable.ChequeNum > _ledgerJournalTrans.BankChequeNum
                            && bankChequeTable.ChequeNum < bankChequeTableNextPrinted.ChequeNum
                            && bankChequeTable.ChequeStatus == ChequeStatus::Created;
                    }
                }
                else
                {
                    select firstonly ChequeNum from bankChequeTableLastNotPrinted
                        order by ChequeNum desc
                        where bankChequeTableLastNotPrinted.AccountID == bankAccountID
                            && bankChequeTableLastNotPrinted.ChequeNum > _ledgerJournalTrans.BankChequeNum
                            && bankChequeTableLastNotPrinted.ChequeStatus == ChequeStatus::NotPrinted;

                    if (bankChequeTableLastNotPrinted.ChequeNum)
                    {
                        while select bankChequeTableNotPrinted
                            where bankChequeTableNotPrinted.AccountID == bankAccountID
                                && bankChequeTableNotPrinted.ChequeNum > _ledgerJournalTrans.BankChequeNum
                                && bankChequeTableNotPrinted.ChequeNum <= bankChequeTableLastNotPrinted.ChequeNum
                                && bankChequeTableNotPrinted.ChequeStatus == ChequeStatus::NotPrinted
                        {
                            BankChequeTable::setChequeStatus(
                                bankAccountID,
                                bankChequeTableNotPrinted.ChequeNum,
                                ChequeStatus::Created,
                                dateNull(),
                                '',
                                CustVendCheque::ledgerJournalACType2RecipientType(_ledgerJournalTrans.AccountType),
                                '',
                                '',
                                '',
                                0,
                                '');
                        }

                        if (chequeNumMethod == ChequeNumMethod::Free)
                        {
                            delete_from bankChequeTable
                                where bankChequeTable.AccountID == bankAccountID
                                    && bankChequeTable.ChequeNum > _ledgerJournalTrans.BankChequeNum
                                    && bankChequeTable.ChequeNum <= bankChequeTableLastNotPrinted.ChequeNum
                                    && bankChequeTable.ChequeStatus == ChequeStatus::Created;
                        }
                    }
                }

                if (chequeNumMethod == ChequeNumMethod::Free)
                {
                    delete_from bankChequeTable
                        where bankChequeTable.AccountID == bankAccountID
                            && bankChequeTable.ChequeNum == _ledgerJournalTrans.PaymReference;
                }

                _ledgerJournalTrans.PaymReference = '';
                _ledgerJournalTrans.BankChequeNum = '';
                _ledgerJournalTrans.NoEdit = NoYes::No;
                _ledgerJournalTrans.update();

                return true;
            }
            else
            {
                str userInteractionMessage = strFmt("@SYS24509", _ledgerJournalTrans.BankChequeNum);

                if (this.canVoidNegotiableInstrument(userInteractionMessage, "@SYS24283"))
                {
                    BankChequeTable::setChequeStatus(
                        bankAccountID,
                        _ledgerJournalTrans.BankChequeNum,
                        ChequeStatus::Rejected,
                        _ledgerJournalTrans.TransDate,
                        _ledgerJournalTrans.Voucher,
                        CustVendCheque::ledgerJournalACType2RecipientType(_ledgerJournalTrans.AccountType),
                        _ledgerJournalTrans.Company,
                        _ledgerJournalTrans.parmAccount(),
                        _ledgerJournalTrans.CurrencyCode,
                        _ledgerJournalTrans.amount(),
                        _ledgerJournalTrans.BankNegInstRecipientName);

                    _ledgerJournalTrans.PaymReference = '';
                    _ledgerJournalTrans.BankChequeNum = '';
                    _ledgerJournalTrans.NoEdit = NoYes::No;
                    _ledgerJournalTrans.update();

                    return true;
                }
            }

            return false;
        }

        // Is there a bill of exchange attached to this record?
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
            && bankAccountID
            && BankBillOfExchangeTable::exist(bankAccountID, _ledgerJournalTrans.PaymReference))
        {
            // Is the bill of exchange already rejected/voided?
            if (BankBillOfExchangeTable::find(bankAccountID, _ledgerJournalTrans.PaymReference).DocumentStatus == BankBillOfExchangeStatus::Cancelled)
            {
                return checkFailed(strfmt('%1 %2: %3',"@SYS12371", _ledgerJournalTrans.Voucher, "@SYS79724"));
            }

            str userInteractionMessage = strfmt("@SYS79725", _ledgerJournalTrans.PaymReference);

            if (this.canVoidNegotiableInstrument(userInteractionMessage, "@SYS79726"))
            {
                BankBillOfExchangeTable::setBillOfExchangeDocStatus(
                    bankAccountID,
                    _ledgerJournalTrans.BankBillOfExchangeNum,
                    BankBillOfExchangeStatus::Cancelled,
                    _ledgerJournalTrans.TransDate,
                    _ledgerJournalTrans.Voucher,
                    _ledgerJournalTrans.parmAccount(),
                    _ledgerJournalTrans.CurrencyCode,
                    _ledgerJournalTrans.amount());

                _ledgerJournalTrans.PaymReference = '';
                _ledgerJournalTrans.BankBillOfExchangeNum = '';
                _ledgerJournalTrans.NoEdit = NoYes::No;
                _ledgerJournalTrans.update();

                return true;
            }
            return false;
        }
        // Is there a promissory note attached to this record?
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            && bankAccountID
            && BankPromissoryNoteTable::exist(bankAccountID, _ledgerJournalTrans.PaymReference))
        {
            // Is the promissory note already rejected/voided?
            if (BankPromissoryNoteTable::find(bankAccountID, _ledgerJournalTrans.PaymReference).DocumentStatus == BankPromissoryNoteStatus::Cancelled)
            {
                return checkFailed(strfmt('%1 %2: %3',"@SYS12371", _ledgerJournalTrans.Voucher, "@SYS79728"));
            }

            str userInteractionMessage = strfmt("@SYS79729", _ledgerJournalTrans.PaymReference);

            if (this.canVoidNegotiableInstrument(userInteractionMessage, "@SYS79730"))
            {
                BankPromissoryNoteTable::setPromissoryNoteDocStatus(
                    bankAccountID,
                    _ledgerJournalTrans.BankPromissoryNoteNum,
                    BankPromissoryNoteStatus::Cancelled,
                    _ledgerJournalTrans.TransDate,
                    _ledgerJournalTrans.Voucher,
                    _ledgerJournalTrans.parmAccount(),
                    _ledgerJournalTrans.CurrencyCode,
                    _ledgerJournalTrans.amount());

                _ledgerJournalTrans.PaymReference = '';
                _ledgerJournalTrans.BankPromissoryNoteNum = '';
                _ledgerJournalTrans.NoEdit = NoYes::No;
                _ledgerJournalTrans.update();

                return true;
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canVoidNegotiableInstrument</Name>
				<Source><![CDATA[
    private boolean canVoidNegotiableInstrument(str _userInteractionMessage, str _userInteractionTitle)
    {
        boolean canVoid;

        if (skipVoidConfirmationUserInteraction)
        {
            canVoid = voidAllNegotiableInstruments;
        }
        else
        {
            DialogButton response = Box::yesYesAllNoCancel(
                _userInteractionMessage,
                DialogButton::Yes,
                _userInteractionTitle);

            switch (response)
            {
                case DialogButton::Yes:
                    canVoid = true;
                    break;

                case DialogButton::YesToAll:
                    canVoid = true;
                    voidAllNegotiableInstruments = true;
                    skipVoidConfirmationUserInteraction = true;
                    break;

                case DialogButton::No:
                    canVoid = false;
                    break;

                case DialogButton::Cancel:
                    canVoid = false;
                    voidAllNegotiableInstruments = false;
                    skipVoidConfirmationUserInteraction = true;
                    break;

                default:
                    canVoid = false;
                    break;
            }
        }

        return canVoid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectOneVoucher_BR</Name>
				<Source><![CDATA[
    private boolean rejectOneVoucher_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankAccountID bankAccountID;
        BankChequeTable oneCheque;
        LedgerJournalTrans oneChequeTrans;
        int conIdx;

        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            bankAccountID = _ledgerJournalTrans.parmOffsetAccount();
        }
        else
        {
            bankAccountID = VendPaymModeTable::find(_ledgerJournalTrans.PaymMode).parmPaymAccount();
        }

        // Is there a cheque attached to this record?
        if ((_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            || _ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
            || _ledgerJournalTrans.AccountType == LedgerJournalACType::Bank
            || _ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
            && bankAccountID
            && BankChequeTable::exist(bankAccountID, _ledgerJournalTrans.BankChequeNum))
        {
            // Is the cheque already rejected/voided?
            if (BankChequeTable::find(bankAccountID, _ledgerJournalTrans.BankChequeNum).ChequeStatus == ChequeStatus::Rejected)
            {
                return checkFailed(strfmt('%1 %2: %3',"@SYS12371", _ledgerJournalTrans.Voucher, "@SYS24512"));
            }

            if (this.voidCheque_BR(_ledgerJournalTrans))
            {
                select firstOnly forUpdate oneCheque
                    where oneCheque.AccountID == bankAccountID
                       && oneCheque.ChequeNum == _ledgerJournalTrans.BankChequeNum;

                oneCheque.ChequeStatus = ChequeStatus::Rejected;
                oneCheque.update();

                while select forUpdate oneChequeTrans
                    where oneChequeTrans.PaymReference == _ledgerJournalTrans.PaymReference
                        && oneChequeTrans.JournalNum == _ledgerJournalTrans.JournalNum
                        && oneChequeTrans.Voucher == _ledgerJournalTrans.Voucher
                {
                    oneChequeTrans.BankChequeNum = '';
                    oneChequeTrans.NoEdit = NoYes::No;
                    oneChequeTrans.PaymentStatus = status;
                    oneChequeTrans.update();

                    conIdx = conFind(conRecid, oneChequeTrans.RecId);
                    if (conIdx)
                    {
                        conRecid = conDel(conRecid, conIdx, 1);
                    }
                }

                return true;
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update()
    {
        boolean ok;
        Counter counter;
        RecId recId;

        for (counter = conlen(conRecId); counter; counter--)
        {
            recId = conpeek(conRecId, counter);

            LedgerJournalTrans ledgerJournalTrans = this.findPayment(recId);

            ok = this.validatePayment(ledgerJournalTrans);

            if (ok)
            {
                this.updatePayment(ledgerJournalTrans);

                changecompany(ledgerJournalTrans.company())
                {
                    ledgerJournalTrans.update();
                }

                this.updatedPayment(this, ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPayment</Name>
				<Source><![CDATA[
    private LedgerJournalTrans findPayment(RecId _recId)
    {
        LedgerJournalTrans ledgerJournalTrans;

        select forupdate crosscompany ledgerJournalTrans
            where ledgerJournalTrans.RecId == _recId;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentStatusRejected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the class level <c>CustVendPaymStatus</c> for whether or not the payment status should be rejected.
    /// </summary>
    /// <returns>true if payment status is rejected; otherwise, false.</returns>
    protected boolean isPaymentStatusRejected()
    {
        return (status == CustVendPaymStatus::Rejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentStatusRejectedForCurrentTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>CustVendPaymStatus</c> for the current <c>LedgerJournalTrans</c> table buffer for whether or not the payment status should be rejected.
    /// </summary>
    /// <returns>true if the current transaction payment status is rejected; otherwise, false.</returns>
    protected boolean isPaymentStatusRejectedForCurrentTransaction(LedgerJournalTrans _ledgerJournalTrans)
    {
        return (_ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrepaymentFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>CustVendPaymStatus</c> and whether or not the current transaction has a prepayment facture. 
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The current <c>LedgerJournalTrans</c> table buffer.</param>
    /// <returns>true if there is a prepayment facture and matches certain <c>CustVendPaymStatus</c> values; otherwise, false.</returns>
    protected boolean isPrepaymentFacture(LedgerJournalTrans _ledgerJournalTrans)
    {
        #ISOCountryRegionCodes

        boolean isFactured = _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            && _ledgerJournalTrans.Prepayment
            && SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ])
            && FactureTrans_RU::findLedgerJournalTrans('', 0, _ledgerJournalTrans.RecId);

        return (status != CustVendPaymStatus::Confirmed && status != CustVendPaymStatus::Sent && isFactured);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current payment.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The <c>LedgerJournalTrans</c> record to be validated.</param>
    /// <returns>true if a valid payment; otherwise, false.</returns>
    protected boolean validatePayment(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ok = true;
        boolean norwayEnabled = false;
        boolean isOneVoucher_BR = false;
        ClassId classId;
        VendPaymModeTable vendPaymModeTable;

        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            norwayEnabled = true;
        }

        if (BrazilParameters::isEnabled())
        {
            vendPaymModeTable = VendPaymModeTable::find(_ledgerJournalTrans.PaymMode);
            isOneVoucher_BR = vendPaymModeTable.Posting_BR != Posting_BR::None;
            classId = vendPaymModeTable.ClassId;
        }

        if (this.isPaymentStatusRejected() || (reuseCheck && !norwayEnabled))
        {
            if (this.isPaymentStatusRejectedForCurrentTransaction(_ledgerJournalTrans))
            {
                if (reuseCheck && !norwayEnabled)
                {
                    ok = checkFailed(strfmt('%1 %2: %3', "@SYS12371", _ledgerJournalTrans.Voucher, "@SYS97817"));
                }
                else
                {
                    ok = checkFailed(strfmt('%1 %2: %3', "@SYS12371", _ledgerJournalTrans.Voucher, "@SYS24510"));
                }
            }
            else
            {
                if (isOneVoucher_BR)
                {
                    if (classId == classNum(VendOutPaym_Cheque))
                    {
                        ok = this.rejectOneVoucher_BR(_ledgerJournalTrans);
                    }

                    _ledgerJournalTrans.reread();
                }
                else
                {
                    ok = this.rejectNegInst(_ledgerJournalTrans);
                }
            }
        }        

        if (this.isPrepaymentFacture(_ledgerJournalTrans))
        {
            ok = checkFailed(strfmt('%1 %2: %3', "@SYS12371", _ledgerJournalTrans.Voucher, "@SYS24510" + ' ' + "@GLS113543"));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatingPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to allow override and additional payment status updates.
    /// </summary>
    /// <param name = "_custVendPaymReconciliationSetStatus">
    /// Identifies the parameters to update the payment.
    /// </param>
    /// <param name = "ledgerJournalTrans">
    /// Identifies the payment.
    /// </param>
    delegate void updatingPayment(CustVendPaymReconciliationSetStatus _custVendPaymReconciliationSetStatus, LedgerJournalTrans ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayment</Name>
				<Source><![CDATA[
    private void updatePayment(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean norwayEnabled = false;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            norwayEnabled = true;
        }

        _ledgerJournalTrans.PaymentStatus = status;

        if (_ledgerJournalTrans.ElectronicPaymentNumber &&
                        (status == CustVendPaymStatus::Rejected ||
                        status == CustVendPaymStatus::None ||
                        status == CustVendPaymStatus::Delete ||
                        status == CustVendPaymStatus::Deleted))
        {
            if (_ledgerJournalTrans.ElectronicPaymentNumber == _ledgerJournalTrans.PaymReference)
            {
                _ledgerJournalTrans.PaymReference = '';
            }
    
            _ledgerJournalTrans.ElectronicPaymentNumber = '';
        }

        if (norwayEnabled && status == CustVendPaymStatus::None)
        {
            _ledgerJournalTrans.NoEdit = NoYes::No; //To allow editing of transaction after changing status back to None. (At least NO requirement)
        }

        this.updatingPayment(this, _ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to allow additional behavior after a payment status has been updated.
    /// </summary>
    /// <param name = "_custVendPaymReconciliationSetStatus">
    /// Identifies the parameters to update the payment.
    /// </param>
    /// <param name = "_ledgerJournalTrans">
    /// Identifies the payment.
    /// </param>
    delegate void updatedPayment(CustVendPaymReconciliationSetStatus _custVendPaymReconciliationSetStatus, LedgerJournalTrans _ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedPaymentEventHandler</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(CustVendPaymReconciliationSetStatus), delegateStr(CustVendPaymReconciliationSetStatus,updatedPayment))]
    public static void updatedPaymentEventHandler(CustVendPaymReconciliationSetStatus _custVendPaymReconciliationSetStatus, LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean norwayEnabled = false;
        SpecTrans specTrans;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            norwayEnabled = true;
        }

        if (norwayEnabled)
        {
            while select forupdate crosscompany specTrans
                where specTrans.SpecCompany == _ledgerJournalTrans.company()
                    && specTrans.SpecTableId == _ledgerJournalTrans.TableId
                    && specTrans.SpecRecId == _ledgerJournalTrans.RecId
            {
                specTrans.PaymentStatus = _ledgerJournalTrans.PaymentStatus;
                specTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidCheque_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Asks the user if the check should be voided.
    /// </summary>
    /// <param name='_ledgerJournalTrans'>
    /// The payment journal line related to the check.
    /// </param>
    /// <returns>
    /// True if the user opts to void the check; otherwise, false.
    /// </returns>
    protected boolean voidCheque_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return Box::yesNo(
            strfmt("@SYS24509", _ledgerJournalTrans.BankChequeNum),
            DialogButton::Yes,
            "@SYS24283",
            "@SYS29058") == DialogButton::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFeesForPaymentLine</Name>
				<Source><![CDATA[
    internal void addFeesForPaymentLine(LedgerJournalTransRefRecId _refRecId, CustVendPaymReconciliationSetStatus _custVendPaymReconciliationSetStatus)
    {
        CustVendPaymJournalFee custVendPaymJournalFee;
        LedgerJournalTrans ledgerJournalTransFees;

        while select RecId from custVendPaymJournalFee
                where custVendPaymJournalFee.RefRecId == _refRecId
            join RecId from ledgerJournalTransFees
                    where ledgerJournalTransFees.RecId == custVendPaymJournalFee.FeeTransRecId
        {
            _custVendPaymReconciliationSetStatus.parmRecid(ledgerJournalTransFees.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendPaymReconciliationSetStatus custVendPaymReconciliationSetStatus;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans ledgerJournalTransFees;
        FormDataSource formDS = FormDataUtil::getFormDataSource(_args.record());
        CustVendPaymJournalFee custVendPaymJournalFee;
        custVendPaymReconciliationSetStatus = new CustVendPaymReconciliationSetStatus();
        custVendPaymReconciliationSetStatus.parmStatus(_args.parmEnum());

        for (ledgerJournalTrans = formDS.getFirst(true) ? formDS.getFirst(true) : _args.record();
            ledgerJournalTrans;
            ledgerJournalTrans = formDS.getNext())
        {
            custVendPaymReconciliationSetStatus.parmRecid(ledgerJournalTrans.RecId);
            custVendPaymReconciliationSetStatus.addFeesForPaymentLine(ledgerJournalTrans.RecId, custVendPaymReconciliationSetStatus);
        }

        CustVendPaymReconciliationSetStatus::runServer(custVendPaymReconciliationSetStatus.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForPaymentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs <c>custVendPaymReconciliationSetStatus</c>.
    /// </summary>
    /// <param name='_ledgerJournalTrans'>
    /// The payment journal line receiving the status update.
    /// </param>
    /// /// <param name='_custVendPaymStatus'>
    /// The new status for the payment line and associated fees.
    /// </param>
    internal static void runForPaymentLine(LedgerJournalTrans _ledgerJournalTrans, CustVendPaymStatus _custVendPaymStatus)
    {
        CustVendPaymReconciliationSetStatus custVendPaymReconciliationSetStatus = new CustVendPaymReconciliationSetStatus();
        custVendPaymReconciliationSetStatus.parmStatus(_custVendPaymStatus);
        custVendPaymReconciliationSetStatus.parmRecid(_ledgerJournalTrans.RecId);
        custVendPaymReconciliationSetStatus.addFeesForPaymentLine(_ledgerJournalTrans.RecId, custVendPaymReconciliationSetStatus);
        custVendPaymReconciliationSetStatus.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    public static void runServer(container _packedData)
    {
        CustVendPaymReconciliationSetStatus setStatus;
        setStatus = new CustVendPaymReconciliationSetStatus();
        setStatus.unpack(_packedData);
        setStatus.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServerReuseChecks</Name>
				<Source><![CDATA[
    public static void runServerReuseChecks(container _packedData)
    {
        CustVendPaymReconciliationSetStatus setStatus;
        setStatus = new CustVendPaymReconciliationSetStatus();
        setStatus.unpack(_packedData);
        setStatus.parmReuseCheck(NoYes::Yes);
        setStatus.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>