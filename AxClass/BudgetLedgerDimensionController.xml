<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetLedgerDimensionController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetLedgerDimensionController</c> class provides control interaction logic for use of the
/// dimension entry control for budgeting in the UI.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class BudgetLedgerDimensionController extends LedgerDimensionAccountController
{
    Set budgetEnabledDimensionAttributeRecIds;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        this.parmLedgerDimensionType(LedgerDimensionType::Budget);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetControllerState</Name>
				<Source><![CDATA[
    protected void resetControllerState()
    {
        super();

        budgetEnabledDimensionAttributeRecIds = new Set(extendedTypeId2Type(extendedTypeNum(DimensionAttributeRecId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowedAttributeCount</Name>
				<Source><![CDATA[
    protected int getAllowedAttributeCount(DimensionHierarchyId _dimensionHierarchyRecId)
    {
        int dimCount;

        DimensionHierarchyLevelCollection hierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(_dimensionHierarchyRecId);
        hierarchyLevelCollection.initializeEnumerator();

        while (hierarchyLevelCollection.moveNext())
        {
            if (this.doIncludeDimensionAttribute(hierarchyLevelCollection.currentDimensionAttributeId()))
            {
                dimCount++;
            }
        }

        return dimCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimAttributeValueRestrictionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date to which the dimension attribute values need to be restricted to.
    /// </summary>
    /// <returns>
    /// The date to which the dimension attribute values need to be restricted.
    /// </returns>
    /// <remarks>
    /// Restricts to the current date.
    /// </remarks>
    protected Date getDimAttributeValueRestrictionDate()
    {
        return this.parmControlDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doIncludeTotalDimAttributeValues</Name>
				<Source><![CDATA[
    protected boolean doIncludeTotalDimAttributeValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doIncludeDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the dimension attribute should be included.
    /// </summary>
    /// <param name = "_dimensionAttributeRecId">The record ID of the dimension attribute.</param>
    /// <returns>true if the dimension attribute should be included; otherwise, false.</returns>
    protected boolean doIncludeDimensionAttribute(DimensionAttributeRecId _dimensionAttributeRecId)
    {
        return budgetEnabledDimensionAttributeRecIds.in(_dimensionAttributeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProcessDimensionAlias</Name>
				<Source><![CDATA[
    protected boolean doProcessDimensionAlias()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountStructureForced</Name>
				<Source><![CDATA[
    protected boolean isAccountStructureForced()
    {
        if (BudgetParameters::find().DeriveAccountStructureFromCombination)
        {
            return super();
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInitialSegments</Name>
				<Source><![CDATA[
    protected void loadInitialSegments()
    {
        // Build budgetEnabledDimensionAttributeRecIds according to budget enabled dimensions
        budgetEnabledDimensionAttributeRecIds = new Set(extendedTypeId2Type(extendedTypeNum(DimensionAttributeRecId)));
        List budgetDimensionsList = BudgetPrimaryLedgerDimensionAttribute::budgetDimensionsList(Ledger::current());
        ListEnumerator enumerator = budgetDimensionsList.getEnumerator();

        while (enumerator.moveNext())
        {
            DimensionAttributeRecId dimensionAttributeRecId = enumerator.current();

            budgetEnabledDimensionAttributeRecIds.add(dimensionAttributeRecId);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the segmented value combination.
    /// </summary>
    /// <returns>
    /// The record for the segmented value combination.
    /// </returns>
    public DimensionAttributeValueCombination resolveReference()
    {
        DimensionAttributeValueCombination davc;

        if (curext() == this.parmDataAreaId() || this.parmDataAreaId() == '')
        {
            davc = super();
        }
        else
        {
            // Budgeting dimension storage uses Ledger::current() which relies on curext() to create the Display value.
            // Therefore, we must switch current companies to save when our DataAreaId is different than curext().
            changecompany(this.parmDataAreaId())
            {
                // Only attempt to save if there is at least 1 structure added
                davc = super();
            }
        }

        return davc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountStructureSetExternally</Name>
				<Source><![CDATA[
    public void accountStructureSetExternally()
    {
        super();

        this.loadInitialSegments();
        accountStructureSetExternallyFlag = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the <c>DimensionValidationStatus</c> enumeration value
    /// for the dimension value combination currently in the control.
    /// </summary>
    /// <param name="_originalCompany">
    /// The company that the controller was called from before any calls to change company.
    /// </param>
    /// <param name="_errorMessages">
    /// The list of error messages.
    /// </param>
    /// <param name="_dimensionStorage">
    /// The dimension storage object to use in validation; optional.
    /// </param>
    /// <returns>
    /// A <c>DimensionValidationStatus</c> enumeration value.
    /// </returns>
    public DimensionValidationStatus validateCombination(DataAreaId _originalCompany, List _errorMessages, DimensionStorage _dimensionStorage = null)
    {
        DimensionValidationStatus validationStatus = DimensionValidationStatus::Valid;
        DimensionStorage dimStorage = _dimensionStorage;
        DimensionValidationRequest request;
        DimensionValidationStatusContract status;

        changeCompany(this.parmDataAreaId())
        {
            if (dimStorage == null && this.getAccountStructure())
            {
                dimStorage = this.getDimensionStorage(true);
            }

            if (dimStorage && currentSegments.lastIndex() > 0)
            {
                request = DimensionValidationRequest::newForDimensionStorage(dimStorage, this.parmControlDate());
                request.parmDoValueActiveDatesValidation(true);
                request.parmDoValueSuspendedValidation(true);

                status = DimensionValidation::getStatus(request);
                status.displayValidationMessages();

                validationStatus = status.parmValidationStatus();
            }
        }

        return validationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the provided main account.
    /// </summary>
    /// <param name="_dimAttributeValue">
    /// The record ID of the dimension attribute value to validate.
    /// </param>
    /// <param name="_mainAccountNum">
    /// The display value of the specified main account.
    /// </param>
    /// <param name="_errorMessages">
    /// A list of validation error messages.
    /// </param>
    protected void validateMainAccount(DimensionAttributeValue _dimAttributeValue, MainAccountNum _mainAccountNum, List _errorMessages)
    {
        MainAccount mainAccount = MainAccount::find(_dimAttributeValue.EntityInstance);
        if (mainAccount.Type == DimensionLedgerAccountType::Reporting)
        {
            _errorMessages.addEnd(strFmt("@Budget:Budgeting_Validation_MainAccountType", _mainAccountNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAutoCompleteDataFromDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the appropriate auto complete data from the database.
    /// </summary>
    /// <param name="_elements">
    /// The collection to which the lookup data should be added.
    /// </param>
    /// <param name="_autoCompleteMode">
    /// The <c>AutoCompletDataMode</c> data type specifies type of auto complete data to load.
    /// </param>
    /// <param name="_dimensionAttributeId">
    /// The ID of the <c>DimensionAttribute</c> record to get auto complete data for.
    /// </param>
    /// <param name="_lastPagedValue">
    /// The last value paged into the result set.
    /// </param>
    /// <param name="_segmentIndex">
    /// The index of the segment to get auto complete data for.
    /// </param>
    /// <param name="_originalCompany">
    /// The company that the controller was called from before any calls to change company.
    /// </param>
    /// <returns>
    /// The number of records paged.
    /// </returns>
    protected int getAutoCompleteDataFromDatabase(
        Array                           _elements,
        AutoCompleteDataMode            _autoCompleteMode,
        str                             _filterValue,
        DimensionAttributeRecId         _dimensionAttributeId,
        str                             _lastPagedValue,
        int                             _segmentIndex,
        DataAreaId                      _originalCompany)
    {
        if (BudgetParameters::find().DeriveAccountStructureFromCombination)
        {
            // To get all the value of the dimension
            return super(_elements, AutoCompleteDataMode::AllValues, _filterValue, _dimensionAttributeId, _lastPagedValue, _segmentIndex, _originalCompany);
        }
        else
        {
            return super(_elements, _autoCompleteMode, _filterValue, _dimensionAttributeId, _lastPagedValue, _segmentIndex, _originalCompany);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>