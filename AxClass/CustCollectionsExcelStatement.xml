<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsExcelStatement</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;

using OfficeOpenXml;
using OfficeOpenXml.Style;
using OfficeOpenXml.Table;

public class CustCollectionsExcelStatement
{
    // these format strings correspond to built-in number codes as defined in the OXML standard
    // using them will result in excel using the built-ins and displaying based on user locale
    protected static const str MonetaryFormatString = '#,##0.00'; // OXML NumFmtID = 4
    protected static const str DateFormatString = 'mm-dd-yy'; // OXML NumFmtID = 14
    protected static const str GenericFormatString = '@'; // OXML NumFmtID = 49

    protected static readonly System.Drawing.Color HeaderColor = System.Drawing.Color::FromArgb(184, 204, 228);
    protected static readonly System.Drawing.Color BodyColor = System.Drawing.Color::FromArgb(219, 229, 241);

    private const int TransactionWorksheetColumn_TransDate = 1;
    private const int TransactionWorksheetColumn_Invoice = 2;
    private const int TransactionWorksheetColumn_TransType = 3;
    private const int TransactionWorksheetColumn_Txt = 4;
    private const int TransactionWorksheetColumn_PaymentTerm = 5;
    private const int TransactionWorksheetColumn_DueDate = 6;
    private const int TransactionWorksheetColumn_AmountCur = 7;
    private const int TransactionWorksheetColumn_Currency1 = 8;
    private const int TransactionWorksheetColumn_AmountRemaining = 9;
    private const int TransactionWorksheetColumn_AgingDate = 10;
    private const int TransactionWorksheetColumn_DaysUntilDue = 11;
    private const int TransactionWorksheetColumn_DaysPastDue = 12;
    private const int TransactionWorksheetColumn_PastDueAmount = 13;
    private const int TransactionWorksheetColumn_Currency2 = 14;
    private const int TransactionWorksheetColumn_AccountNum = 15;
    private const int TransactionWorksheetColumn_Name = 16;
    private const int TransactionWorksheetColumn_Company = 17;

    private const container AgingSummaryFieldNums = [fieldNum(CustTmpAccountSum, Balance02Cur),
                                                     fieldNum(CustTmpAccountSum, Balance03Cur),
                                                     fieldNum(CustTmpAccountSum, Balance04Cur),
                                                     fieldNum(CustTmpAccountSum, Balance05Cur),
                                                     fieldNum(CustTmpAccountSum, Balance06Cur),
                                                     fieldNum(CustTmpAccountSum, Balance07Cur)];

    // required members
    protected CustTable custTable;
    private CustTrans custTrans;

    // defaulted members
    private container selectedCompanies;
    private DateTransactionDuedate agedBy;
    private CustAgingDate agingDate;
    private boolean includeSettledTransactions;
    private TransDate closedTransDateRangeStart;
    private boolean generateSummaryStatement;

    // optional members (should be provided if generateSummaryStatement = true)
    private ContactPersonName contactPersonName;
    private CustVendReportName agingPeriodDefinition;

    protected LedgerRecId currentCompanyPrimaryLedger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>CustCollectionsExcelStatement</c> object that can be used to generate Microsoft Excel documents
    /// based on the provided customer and transaction buffers.
    /// </summary>
    /// <param name = "_context">A <c>CustTable</c> record buffer.</param>
    /// <param name = "_context">A <c>CustTrans</c> record buffer.</param>
    public void new(CustTable _custTable, CustTrans _custTrans)
    {
        custTable = _custTable;
        custTrans = _custTrans;

        selectedCompanies = [curExt()];
        agedBy = DateTransactionDuedate::DueDate;
        agingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        includeSettledTransactions = false;
        closedTransDateRangeStart = dateNull();
        generateSummaryStatement = false;

        currentCompanyPrimaryLedger = Ledger::primaryLedger(CompanyInfo::findDataArea(curExt()).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedCompanies</Name>
				<Source><![CDATA[
    public container parmSelectedCompanies(container _selectedCompanies = selectedCompanies)
    {
        selectedCompanies = _selectedCompanies;
        return selectedCompanies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgedBy</Name>
				<Source><![CDATA[
    public DateTransactionDuedate parmAgedBy(DateTransactionDuedate _agedBy = agedBy)
    {
        agedBy = _agedBy;
        return agedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgingDate</Name>
				<Source><![CDATA[
    public CustAgingDate parmAgingDate(CustAgingDate _agingDate = agingDate)
    {
        agingDate = _agingDate;
        return agingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeSettledTransactions</Name>
				<Source><![CDATA[
    public boolean parmIncludeSettledTransactions(boolean _includeSettledTransactions = includeSettledTransactions)
    {
        includeSettledTransactions = _includeSettledTransactions;
        return includeSettledTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClosedTransDateRangeStart</Name>
				<Source><![CDATA[
    public TransDate parmClosedTransDateRangeStart(TransDate _closedTransDateRangeStart = closedTransDateRangeStart)
    {
        closedTransDateRangeStart = _closedTransDateRangeStart;
        return closedTransDateRangeStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGenerateSummaryStatement</Name>
				<Source><![CDATA[
    public boolean parmGenerateSummaryStatement(boolean _generateSummaryStatement = generateSummaryStatement)
    {
        generateSummaryStatement = _generateSummaryStatement;
        return generateSummaryStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactPersonName</Name>
				<Source><![CDATA[
    public ContactPersonName parmContactPersonName(ContactPersonName _contactPersonName = contactPersonName)
    {
        contactPersonName = _contactPersonName;
        return contactPersonName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgingPeriodDefinition</Name>
				<Source><![CDATA[
    public CustVendReportName parmAgingPeriodDefinition(CustVendReportName _agingPeriodDefinition = agingPeriodDefinition)
    {
        agingPeriodDefinition = _agingPeriodDefinition;
        return agingPeriodDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a Microsoft Excel statement of the collections data.
    /// </summary>
    /// <returns>A <c>System.IO.Stream</c> object that contains the Microsoft Excel file data.</returns>
    public System.IO.Stream generateStatement()
    {
        if (!custTrans && !generateSummaryStatement)
        {
            // nothing selected, so nothing to do
            warning("@SYS84637");
            return null;
        }

        try
        {
            MemoryStream memoryStream = new MemoryStream();

            using (var package = new ExcelPackage(memoryStream))
            {
                if (generateSummaryStatement)
                {
                    this.createSummaryBalanceWorksheet(package);
                }

                this.createTransactionWorksheets(package);
                package.Save();
            }

            memoryStream.Seek(0, SeekOrigin::Begin);
            return memoryStream;
        }
        catch (Exception::CLRError)
        {
            // if the statement can't be generated, report an error and return null
            error("@SYS135884");
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setColumn</Name>
				<Source><![CDATA[
    protected void setColumn(OfficeOpenXml.ExcelRange _headerCell, str _columnDisplayName, Types _columnType)
    {
        var column = _headerCell.get_Worksheet().Column(_headerCell.get_Start().get_Column());

        var columnStyle = column.get_Style();
        var columnNumberFormat = columnStyle.get_Numberformat();

        switch (_columnType)
        {
            case Types::Real:
                columnNumberFormat.set_Format(MonetaryFormatString);
                columnStyle.set_HorizontalAlignment(ExcelHorizontalAlignment::Right);
                break;

            case Types::Integer:
            case Types::Int64:
                columnStyle.set_HorizontalAlignment(ExcelHorizontalAlignment::Right);
                break;

            case Types::Date:
                columnNumberFormat.set_Format(DateFormatString);
                columnStyle.set_HorizontalAlignment(ExcelHorizontalAlignment::Right);
                break;

            default:
                columnNumberFormat.set_Format(GenericFormatString);
                columnStyle.set_HorizontalAlignment(ExcelHorizontalAlignment::Left);
                break;
        }

        this.setCellLabel(_headerCell, _columnDisplayName, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setColumnFromTableField</Name>
				<Source><![CDATA[
    protected void setColumnFromTableField(OfficeOpenXml.ExcelRange _headerCell, tableId _tableNum, fieldId _fieldId)
    {
        DictField field = new DictField(_tableNum, _fieldId);
        this.setColumn(_headerCell, field.label(), field.baseType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCellLabel</Name>
				<Source><![CDATA[
    protected void setCellLabel(OfficeOpenXml.ExcelRange _cell, str _label, boolean _includeTrailingColon = true,
                                OfficeOpenXml.Style.ExcelHorizontalAlignment _horizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment::Left)
    {
        var cellStyle = _cell.get_Style();
        cellStyle.set_HorizontalAlignment(_horizontalAlignment);
        cellStyle.get_Font().set_Bold(true);
        this.setCellValue(_cell, strfmt('%1%2', _label, _includeTrailingColon ? ':' : ''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCellValue</Name>
				<Source><![CDATA[
    protected void setCellValue(OfficeOpenXml.ExcelRange _cell, anytype _value, str _numberFormat = '')
    {
        var type = typeOf(_value);

        if (!prmIsDefault(_numberFormat))
        {
            _cell.get_Style().get_Numberformat().set_Format(_numberFormat);
        }

        switch (type)
        {
            case Types::Real:
            case Types::Int64:
            case Types::Integer:
                _cell.set_Value(_value);
                break;

            case Types::Date:
                // we explictly use a DateTime cast here so that the EPPlus library can
                // infer it and convert it to an OA date number for Excel
                System.DateTime dateTime = _value;
                _cell.set_Value(dateTime);
                break;

            default:
                _cell.set_Value(any2Str(_value));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCellBackgroundColor</Name>
				<Source><![CDATA[
    protected void setCellBackgroundColor(OfficeOpenXml.ExcelRange _cell, System.Drawing.Color _color)
    {
        var fill = _cell.get_Style().get_Fill();
        fill.set_PatternType(ExcelFillStyle::Solid);
        fill.get_BackgroundColor().SetColor(_color);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCellConditionalTextColorWhenGreaterThan</Name>
				<Source><![CDATA[
    protected void setCellConditionalTextColorWhenGreaterThan(OfficeOpenXml.ExcelRange _cell, int _whenGreaterThan, System.Drawing.Color _color)
    {
        var conditionalFormatting = _cell.get_ConditionalFormatting().AddGreaterThan();
        conditionalFormatting.set_Formula(any2Str(_whenGreaterThan));
        conditionalFormatting.get_Style().get_Font().get_Color().set_Color(_color);
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoFitWorksheet</Name>
				<Source><![CDATA[
    protected void autoFitWorksheet(OfficeOpenXml.ExcelWorksheet _worksheet, container _skipColumns = conNull())
    {
        var lastColumn = _worksheet.get_Dimension().get_End().get_Column();
        for (var i = 1; i <= lastColumn; i++)
        {
            if (conFind(_skipColumns, i) == 0)
            {
                _worksheet.Column(i).AutoFit();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryBalanceWorksheet</Name>
				<Source><![CDATA[
    protected void createSummaryBalanceWorksheet(OfficeOpenXml.ExcelPackage package)
    {
        var summaryBalanceWorksheet = package.get_Workbook().get_Worksheets().Add("@SYS135878");

        // Get the aging period count to determine how many columns are necessary to display the information
        StatRepIntervalLine agingBucket;
        select count(LineNum) from agingBucket where agingBucket.Name == agingPeriodDefinition;
        var agingPeriodCount = min(agingBucket.LineNum, CustVendBalanceList::numOfBalanceAge());

        // create the header and body
        var bodyRowStart = this.setSummaryBalanceWorksheetAgingHeader(summaryBalanceWorksheet, 1, agingPeriodCount);
        this.setSummaryBalanceWorksheetBody(summaryBalanceWorksheet, bodyRowStart, agingPeriodCount);

        // Remove the gridlines from the statment worksheet
        summaryBalanceWorksheet.get_View().set_ShowGridLines(false);

        // skip auto-fit on column 2 as it was already auto-fit when generating the header to fit the address field
        this.autoFitWorksheet(summaryBalanceWorksheet, [2]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSummaryBalanceWorksheetAgingHeader</Name>
				<Source><![CDATA[
    protected int setSummaryBalanceWorksheetAgingHeader(OfficeOpenXml.ExcelWorksheet _worksheet, int _row, int _agingPeriodCount)
    {
        var currentRow = _row;
        var lastColumn = this.getSummaryBalanceWorksheetColumnForAgingPeriod(_agingPeriodCount) + 3;
        var cells = _worksheet.get_Cells();

        // Account name
        this.setCellLabel(cells.get_Item(currentRow, 1), "@SYS9624");
        this.setCellValue(cells.get_Item(currentRow, 2), custTable.name());
        // Report date
        this.setCellLabel(cells.get_Item(currentRow, lastColumn - 1), "@SYS117650");
        this.setCellValue(cells.get_Item(currentRow, lastColumn ), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateFormatString);
        currentRow++;

        // Account number
        this.setCellLabel(cells.get_Item(currentRow, 1), "@SYS36303");
        this.setCellValue(cells.get_Item(currentRow, 2), custTable.AccountNum);
        // Created by
        this.setCellLabel(cells.get_Item(currentRow, lastColumn - 1), "@SYS2192");
        this.setCellValue(cells.get_Item(currentRow, lastColumn ), this.getUserName());
        currentRow++;

        // Address
        var address = LogisticsLocationEntity::findPostalAddress(custTable, LogisticsLocationRoleType::Statement);
        var displayAddress = address ? address.Address : custTable.postalAddress().Address;
        // Set the address cell to the longest line in the address so that we can auto-fit against it. Text-wrapped cells don't count
        // towards auto-fit so we will fill in the full display address below after fitting.
        var addressCellAddress = cells.get_Item(currentRow, 2).get_Address();
        this.setCellValue(cells.get_Item(addressCellAddress), this.getLongestLine(displayAddress));
        currentRow += 2;

        // Contact
        this.setCellLabel(cells.get_Item(currentRow, 1), "@SYS73629");
        this.setCellValue(cells.get_Item(currentRow, 2), contactPersonName);
        currentRow++;

        // Terms of payment
        this.setCellLabel(cells.get_Item(currentRow, 1), "@SYS23346");
        this.setCellValue(cells.get_Item(currentRow, 2), custTable.PaymTermId);
        currentRow++;

        // Aging criteria: <date type>
        this.setCellLabel(cells.get_Item(currentRow, 1), "@AccountsReceivable:ExcelStmtAgingDateType");
        this.setCellValue(cells.get_Item(currentRow, 2), enum2str(agedBy));
        currentRow += 2;

        // Auto-fit and then reset the address cell
        _worksheet.Column(2).AutoFit();
        var addressCell = cells.get_Item(addressCellAddress);
        addressCell.get_Style().set_WrapText(true);
        this.setCellValue(addressCell, displayAddress);

        // Set the interior color of the statement header
        this.setCellBackgroundColor(cells.get_Item(_row, 1, currentRow - 1, lastColumn), HeaderColor);

        // Left-align the header information
        cells.get_Item(_row, 2, currentRow - 1, 2 ).get_Style().set_HorizontalAlignment(ExcelHorizontalAlignment::Left);
        cells.get_Item(_row, lastColumn, currentRow - 1, lastColumn).get_Style().set_HorizontalAlignment(ExcelHorizontalAlignment::Left);

        return currentRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSummaryBalanceWorksheetBody</Name>
				<Source><![CDATA[
    protected int setSummaryBalanceWorksheetBody(OfficeOpenXml.ExcelWorksheet _worksheet, int _row, int _agingPeriodCount)
    {
        var currentRow = _row;
        var lastColumn = this.getSummaryBalanceWorksheetColumnForAgingPeriod(_agingPeriodCount) + 3;
        var cells = _worksheet.get_Cells();

        // Aged balances header
        this.setCellLabel(cells.get_Item(currentRow, 1), "@SYS190116");

        // Total header
        this.setCellLabel(cells.get_Item(currentRow, lastColumn - 1), "@SYS58659", false);

        // caluclate the aging period information
        var custBalanceList = this.calculateAgingInformation(_agingPeriodCount);

        // Aging bucket descriptions
        for (var i = 1; i <= _agingPeriodCount; i++)
        {
            this.setCellLabel(cells.get_Item(currentRow, this.getSummaryBalanceWorksheetColumnForAgingPeriod(i)), custBalanceList.getDescription(i + 1), false, ExcelHorizontalAlignment::Right);
        }
        currentRow++;

        // "Balances as of %1"
        this.setCellLabel(cells.get_Item(currentRow, 1), strfmt("@AccountsReceivable:CustStmtExcelBalancesAsOf", agingDate), false);

        // insert an aging record if one doesn't exist
        var custSummary = custBalanceList.initTmpAccountSum();
        select firstonly custSummary;
        if (custSummary.RecId == 0)
        {
            // Create an empty record to display a zero balance
            custSummary.AccountNum = custTable.AccountNum;
            custSummary.CurrencyCode = custTable.Currency;
            custSummary.insert();
        }

        // iterate over the aging records
        while select custSummary order by CurrencyCode
        {
            this.setSummaryBalanceWorksheetAgingRow(_worksheet, currentRow, _agingPeriodCount, custSummary);
            currentRow++;
        }

        // Set the interior color of the statement body
        this.setCellBackgroundColor(cells.get_Item(_row, 1, currentRow - 1, lastColumn), BodyColor);

        return currentRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSummaryBalanceWorksheetAgingRow</Name>
				<Source><![CDATA[
    protected void setSummaryBalanceWorksheetAgingRow(OfficeOpenXml.ExcelWorksheet _worksheet, int _row, int _agingPeriodCount, CustTmpAccountSum _custSummary)
    {
        var cells = _worksheet.get_Cells();
        var agingSummaryFieldNumCount = conLen(AgingSummaryFieldNums);
        AmountCur currencyTotal = 0;

        for (var i = 1; i <= _agingPeriodCount; i++)
        {
            AmountCur balance = i <= agingSummaryFieldNumCount ? _custSummary.(conPeek(AgingSummaryFieldNums, i)) : 0;

            var agingPeriodColumn = this.getSummaryBalanceWorksheetColumnForAgingPeriod(i);
            this.setCellValue(cells.get_Item(_row, agingPeriodColumn), balance, MonetaryFormatString);
            this.setCellValue(cells.get_Item(_row, agingPeriodColumn + 1), _custSummary.CurrencyCode);

            currencyTotal += balance;
        }

        var lastColumn = this.getSummaryBalanceWorksheetColumnForAgingPeriod(_agingPeriodCount) + 3;

        this.setCellValue(cells.get_Item(_row, lastColumn - 1), currencyTotal, MonetaryFormatString);
        this.setCellValue(cells.get_Item(_row, lastColumn), _custSummary.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummaryBalanceWorksheetColumnForAgingPeriod</Name>
				<Source><![CDATA[
    private int getSummaryBalanceWorksheetColumnForAgingPeriod(int _agingPeriodNumber)
    {
        // 1 is the offset from the left side of the spreadsheet and each
        // period requires 2 columns to display information
        return 1 + (_agingPeriodNumber * 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionWorksheets</Name>
				<Source><![CDATA[
    protected void createTransactionWorksheets(OfficeOpenXml.ExcelPackage package)
    {
        var currentRow = 1;

        // create the worksheets we will need
        var worksheets = package.get_Workbook().get_Worksheets();
        var transactionTranCurrencyWorksheet = worksheets.Add("@AccountsReceivable:DetailedTransactions");
        var transactionCustCurrencyWorksheet = worksheets.Add(strfmt("@AccountsReceivable:TransactionsInCurrency", custTable.Currency));

        // set their headers
        this.setTransactionWorksheetHeader(transactionTranCurrencyWorksheet, currentRow);
        this.setTransactionWorksheetHeader(transactionCustCurrencyWorksheet, currentRow, true);
        currentRow++;

        CustTrans custTransLocal;
        FormDataSource formDs;

        // initialize the custTrans/formDs variables based on the data passed in
        if (generateSummaryStatement)
        {
            CustTable custTableLocal;
            select crossCompany:selectedCompanies custTransLocal
                where custTransLocal.Closed == dateNull()
                    // include settled transactions after the range if it is enabled
                    || (includeSettledTransactions &&
                        custTransLocal.Closed != dateNull() && custTransLocal.Closed >= closedTransDateRangeStart)
                exists join custTableLocal
                    where
                        custTableLocal.AccountNum == custTransLocal.AccountNum &&
                        custTableLocal.Party == custTable.Party;
        }
        else
        {
            // Get the transactions selected in the grid
            formDs = FormDataUtil::getFormDataSource(custTrans);
            custTransLocal = formDs && formDs.getFirst(true) ? formDs.getFirst(true) : custTrans;
        }

        while (custTransLocal)
        {
            this.setTransactionWorksheetRow(transactionTranCurrencyWorksheet, currentRow, custTransLocal);
            this.setTransactionWorksheetRow(transactionCustCurrencyWorksheet, currentRow, custTransLocal, true);
            currentRow++;

            if (generateSummaryStatement || !formDs)
            {
                // Get the next transaction from the select statement or the transaction provided
                next custTransLocal;
            }
            else
            {
                // Get the next transaction selected on the grid
                custTransLocal = formDs.getNext() as CustTrans;
            }
        }

        this.setTransactionWorksheetTable(transactionTranCurrencyWorksheet, transactionTranCurrencyWorksheet.get_Cells().get_Item(
                    transactionTranCurrencyWorksheet.get_Dimension().get_Address()));
        this.setTransactionWorksheetTable(transactionCustCurrencyWorksheet, transactionCustCurrencyWorksheet.get_Cells().get_Item(
                    transactionCustCurrencyWorksheet.get_Dimension().get_Address()));

        if (currentRow > 2)
        {
            var sumRow = currentRow + 1;

            var cells = transactionCustCurrencyWorksheet.get_Cells();
            this.setCellLabel(cells.get_Item(sumRow, 1), "@SYS58659");

            // set our summation formulas on the customer currency worksheet
            // we need to store the sumAddress field locally otherwise EPPlus will get confused about setting the formulas
            var sumAddress = cells.get_Item(2, TransactionWorksheetColumn_AmountRemaining, currentRow - 1, TransactionWorksheetColumn_AmountRemaining).get_Address();
            cells.get_Item(sumRow, TransactionWorksheetColumn_AmountRemaining).set_Formula(strFmt('SUM(%1)', sumAddress));
            sumAddress = cells.get_Item(2, TransactionWorksheetColumn_PastDueAmount, currentRow - 1, TransactionWorksheetColumn_PastDueAmount).get_Address();
            cells.get_Item(sumRow, TransactionWorksheetColumn_PastDueAmount).set_Formula(strFmt('SUM(%1)', sumAddress));

            this.setCellConditionalTextColorWhenGreaterThan(cells.get_Item(2, TransactionWorksheetColumn_PastDueAmount, sumRow, TransactionWorksheetColumn_PastDueAmount), 0, System.Drawing.Color::Red);
            this.setCellConditionalTextColorWhenGreaterThan(cells.get_Item(2, TransactionWorksheetColumn_DaysPastDue, sumRow, TransactionWorksheetColumn_DaysPastDue), 0, System.Drawing.Color::Red);
        }

        this.autoFitWorksheet(transactionTranCurrencyWorksheet);
        this.autoFitWorksheet(transactionCustCurrencyWorksheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionWorksheetHeader</Name>
				<Source><![CDATA[
    protected void setTransactionWorksheetHeader(OfficeOpenXml.ExcelWorksheet worksheet, int _row, boolean _customerCurrency = false)
    {
        var cells = worksheet.get_Cells();
        this.setColumnFromTableField(cells.get_Item(_row, TransactionWorksheetColumn_TransDate), tablenum(CustTrans), fieldnum(CustTrans, TransDate));
        this.setColumnFromTableField(cells.get_Item(_row, TransactionWorksheetColumn_Invoice), tablenum(CustTrans), fieldnum(CustTrans, Invoice));
        this.setColumnFromTableField(cells.get_Item(_row, TransactionWorksheetColumn_TransType), tablenum(CustTrans), fieldnum(CustTrans, TransType));
        this.setColumn (cells.get_Item(_row, TransactionWorksheetColumn_Txt), "@SYS80470", Types::String);
        this.setColumn (cells.get_Item(_row, TransactionWorksheetColumn_PaymentTerm), "@SYS5280", Types::String);
        this.setColumnFromTableField(cells.get_Item(_row, TransactionWorksheetColumn_DueDate), tablenum(CustTrans), fieldnum(CustTrans, DueDate));
        this.setColumn (cells.get_Item(_row, TransactionWorksheetColumn_AmountCur), "@SYS81979", Types::Real);
        this.setColumn (cells.get_Item(_row, TransactionWorksheetColumn_Currency1), _customerCurrency ? "@SYS135881" : "@SYS7572", Types::String);
        this.setColumn (cells.get_Item(_row, TransactionWorksheetColumn_AmountRemaining), "@SYS95895", Types::Real);
        this.setColumn (cells.get_Item(_row, TransactionWorksheetColumn_AgingDate), "@AccountsReceivable:ExcelStmtAgingDate", Types::Date);
        this.setColumn (cells.get_Item(_row, TransactionWorksheetColumn_DaysUntilDue), "@SYS135882", Types::Integer);
        this.setColumn (cells.get_Item(_row, TransactionWorksheetColumn_DaysPastDue), "@SYS53727", Types::Integer);
        this.setColumn (cells.get_Item(_row, TransactionWorksheetColumn_PastDueAmount), "@SYS135883", Types::Real);
        this.setColumn (cells.get_Item(_row, TransactionWorksheetColumn_Currency2), (_customerCurrency ? "@SYS135881" : "@SYS7572") + ' ', Types::String);
        this.setColumnFromTableField(cells.get_Item(_row, TransactionWorksheetColumn_AccountNum), tablenum(CustTable), fieldnum(CustTrans, AccountNum));
        this.setColumnFromTableField(cells.get_Item(_row, TransactionWorksheetColumn_Name), tablenum(DirPartyTable), fieldnum(DirPartyTable, Name));
        this.setColumn (cells.get_Item(_row, TransactionWorksheetColumn_Company), "@SYS13342", Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionWorksheetRow</Name>
				<Source><![CDATA[
    protected void setTransactionWorksheetRow(OfficeOpenXml.ExcelWorksheet worksheet, int _row, CustTrans _custTrans, boolean _customerCurrency = false)
    {
        var currencyHelper = this.constructCurrencyExchangeHelper(_custTrans);
        var currencyCode = this.determineCurrencyCode(_custTrans, _customerCurrency);

        var cells = worksheet.get_Cells();
        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_TransDate), _custTrans.TransDate);
        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_Invoice), _custTrans.Invoice);
        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_TransType), LedgerTransType::Cust == _custTrans.TransType ? (_custTrans.isInvoice() ? "@SYS14204" : "@SYS7084") : enum2str(_custTrans.TransType));
        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_Txt), _custTrans.Txt);
        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_PaymentTerm), _custTrans.paymentTerms(_custTrans));
        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_DueDate), _custTrans.DueDate);
        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_AmountCur), currencyHelper.calculateTransactionToTransaction(currentCompanyPrimaryLedger, _custTrans.CurrencyCode, currencyCode, _custTrans.AmountCur, 0, true));
        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_Currency1), currencyCode);

        var amountRemaining = this.calcAmountRemaining(_custTrans, _customerCurrency);
        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_AmountRemaining), amountRemaining);

        if (this.shouldCalculatePastDueInformation(_custTrans, _customerCurrency))
        {
            // Calculate past due information, etc.
            var transAgingDate = this.getTransAgingDate(_custTrans);
            this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_AgingDate), transAgingDate);

            var daysPastDue = agingDate - transAgingDate;
            if (daysPastDue > 0)
            {
                this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_DaysPastDue), daysPastDue);
                this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_PastDueAmount), amountRemaining);
                this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_Currency2), currencyCode);
            }
            else
            {
                this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_DaysUntilDue), abs(daysPastDue));
            }
        }

        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_AccountNum), _custTrans.AccountNum);

        // Since name is centralized in the GAB, we can just get the name for the customer
        // driving the scenario since it will be the same no matter what customer we
        // are dealing with in an a cross-company scenario.
        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_Name), custTable.name());
        this.setCellValue(cells.get_Item(_row, TransactionWorksheetColumn_Company), _custTrans.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculatePastDueInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should calculate past due information.
    /// </summary>
    /// <param name = "_custTrans">
    /// The customer transaction.
    /// </param>
    /// <param name = "_customerCurrency">
    /// Indicates when the currency code should be determined from the customer or the transaction; optional.
    /// </param>
    /// <returns>
    /// True if past due information should be calculated; otherwise false.
    /// </returns>
    protected boolean shouldCalculatePastDueInformation(CustTrans _custTrans, boolean _customerCurrency = false)
    {
        boolean ret;

        AmountCur amountRemaining = this.calcAmountRemaining(_custTrans, _customerCurrency);

        if (amountRemaining && _custTrans.isInvoice())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmountRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the amount remaining.
    /// </summary>
    /// <param name = "_custTrans">
    /// The customer transaction.
    /// </param>
    /// <param name = "_customerCurrency">
    /// Indicates when the currency code should be determined from the customer or the transaction; optional.
    /// </param>
    /// <returns>
    /// The amount remaining.
    /// </returns>
    protected AmountCur calcAmountRemaining(CustTrans _custTrans, boolean _customerCurrency = false)
    {
        CurrencyCode currencyCode = this.determineCurrencyCode(_custTrans, _customerCurrency);
        CurrencyExchangeHelper currencyHelper = this.constructCurrencyExchangeHelper(_custTrans);
        AmountCur amountRemaining = currencyHelper.calculateTransactionToTransaction(currentCompanyPrimaryLedger, _custTrans.CurrencyCode, currencyCode, _custTrans.remainAmountCur(), 0, true);
    
        return amountRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the currency code.
    /// </summary>
    /// <param name = "_custTrans">
    /// The customer transaction.
    /// </param>
    /// <param name = "_customerCurrency">
    /// Indicates when the currency code should be determined from the customer or the transaction; optional.
    /// </param>
    /// <returns>
    /// The currency code.
    /// </returns>
    protected CurrencyCode determineCurrencyCode(CustTrans _custTrans, boolean _customerCurrency = false)
    {
        CurrencyCode currencyCode = _customerCurrency ? custTable.Currency : _custTrans.CurrencyCode;

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCurrencyExchangeHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a <c>CurrencyExchangeHelper</c> instance.
    /// </summary>
    /// <param name = "_custTrans">
    /// The customer transaction.
    /// </param>
    /// <returns>
    /// An instance of <c>CurrencyExchangeHelper</c>.
    /// </returns>
    protected CurrencyExchangeHelper constructCurrencyExchangeHelper(CustTrans _custTrans)
    {
        CurrencyExchangeHelper currencyHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(_custTrans.company()).RecId));

        return currencyHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionWorksheetTable</Name>
				<Source><![CDATA[
    protected void setTransactionWorksheetTable(OfficeOpenXml.ExcelWorksheet _worksheet, OfficeOpenXml.ExcelRange _tableRange)
    {
        var table = _worksheet.get_Tables().Add(_tableRange, _worksheet.get_Name());
        table.set_TableStyle(TableStyles::Light2);
        table.set_ShowTotal(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAgingInformation</Name>
				<Source><![CDATA[
    private CustBalanceList calculateAgingInformation(int _agingPeriodCount)
    {
        CustBalanceList currencySummaryBalanceList = CustVendBalanceList::construct(
                    SysModule::Cust,
                    agedBy,
                    0,
                    dateMax(),
                    agingDate,
                    NoYes::No,
                    DayMonth::Day,
                    ForwardBackwardPrinting::Backward,
                    agingPeriodDefinition,
                    NoYes::Yes,
                    NoYes::No);

        CustTable custTableLocal;
        while select crossCompany:selectedCompanies custTableLocal
                where custTableLocal.Party == custTable.Party
        {
            changecompany(custTableLocal.company())
            {
                // This gets the Cur amounts
                currencySummaryBalanceList.calculateDetailsCurAsAlternateCust(custTableLocal, custTable);
            }
        }

        return currencySummaryBalanceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserName</Name>
				<Source><![CDATA[
    private str getUserName()
    {
        // Try to get the employee name
        var userName = HcmWorker::find(HcmWorkerLookup::currentWorker()).name();
        if (!userName)
        {
            UserInfo userInfo;
            select firstonly Name, NetworkAlias from userInfo where userInfo.Id == curuserid();

            // Get the user name since the employee name doesn't exist
            userName = userInfo.Name;
            if (!userName)
            {
                // Get the network alias since no other name exists
                userName = userInfo.NetworkAlias;
            }
        }

        return userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransAgingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the date which will be used to assign aging bucket to transaction.
    /// </summary>
    /// <param name = "_custTrans">
    ///     A <c>CustTrans</c> table buffer.
    /// </param>
    /// <returns>
    ///     The transaction date.
    /// </returns>
    [Replaceable(true)]
    protected TransDate getTransAgingDate(CustTrans _custTrans)
    {
        switch (agedBy)
        {
            case DateTransactionDuedate::DocumentDate:
                return _custTrans.DocumentDate;

            case DateTransactionDuedate::DueDate:
                return this.getTransAgingDueDate(_custTrans);

            default: // DateTransactionDuedate::TransactionDate
                return _custTrans.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransAgingDueDate</Name>
				<Source><![CDATA[
    private TransDate getTransAgingDueDate(CustTrans _custTrans)
    {
        var dueDate = this.getCustTransOpenDueDate(_custTrans);

        if (!dueDate)
        {
            dueDate = this.getCustVendSettlementDueDate(_custTrans);
        }

        if (!dueDate)
        {
            dueDate = _custTrans.DueDate;
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTransOpenDueDate</Name>
				<Source><![CDATA[
    private TransDate getCustTransOpenDueDate(CustTrans _custTrans)
    {
        CustTransOpen custTransOpen;
        select firstonly DueDate from custTransOpen
            where custTransOpen.RefRecId == _custTrans.RecId &&
                custTransOpen.TransDate <= closedTransDateRangeStart &&
                custTransOpen.DueDate > dateNull();

        return custTransOpen.DueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendSettlementDueDate</Name>
				<Source><![CDATA[
    private TransDate getCustVendSettlementDueDate(CustTrans _custTrans)
    {
        CustVendSettlement custSettlement;
        select firstonly DueDate from custSettlement
            where custSettlement.TransRecId == _custTrans.RecId &&
                custSettlement.TransDate > closedTransDateRangeStart &&
                custSettlement.DueDate > dateNull();

        return custSettlement.DueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLongestLine</Name>
				<Source><![CDATA[
    private str getLongestLine(str _multiLineString)
    {
        var longestLine = '';

        ListEnumerator lineEnumerator = strSplit(_multiLineString, '\n').getEnumerator();
        while (lineEnumerator.moveNext())
        {
            var currentLine = lineEnumerator.current();
            if (strLen(currentLine) > strLen(longestLine))
            {
                longestLine = currentLine;
            }
        }

        return longestLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>