<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvCheckDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventStdCostConvCheckDP</c> class provides data for the <c>InventStdCostConvCheck</c>
///    report.
/// </summary>
/// <remarks>
///    This class provides the methods that are used by the <c>InventStdCostConvCheck</c> report that
///    displays the issues that are associated with each item and the issues that must be resolved in
///    order to convert the item.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(InventStdCostConvCheck)),
    SRSReportParameterAttribute(classStr(InventStdCostConvCheckContract))
]
public class InventStdCostConvCheckDP extends SrsReportDataProviderPreProcessTempDB
{
    InventStdCostConvCheckTmp       inventStdCostConvCheckTmp;
    Map                             checkMap;
    DictEnum                        inventStdCostConvCheckTypeDictEnum;
    InventStdCostConv               inventStdCostConv;
    InventStdCostConvItem           inventStdCostConvItem;
    InventTable                     inventTable;
    InventModelGroupItem            inventModelGroupItem;

    InventStdCostConvEndDate        conversionDate;
    boolean                         updateStatus;
    RecId                           recId;
    InventTransCurrency_RU          inventTransCurrency;
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>CheckType</c> and <c>ErrorText</c> values by calling the methods of the
    ///    <c>InventStdCostConvCheck</c> class.
    /// </summary>
    /// <remarks>
    ///    This method calls the methods of the <c>InventStdCostConvCheck</c> class to retrieve the
    ///    <c>CheckType</c> and <c>ErrorText</c> values that are associated with items. Once the
    ///    <c>CheckType</c> and <c>ErrorText</c> values are retrieved, a call is made to the
    ///    <c>insertIntoTempTable</c> method by passing the <c>CheckType</c>, <c>ErrorText</c>, and
    ///    <c>errorExists</c> values.
    /// </remarks>
    private void executeData()
    {
        MapEnumerator checkMapEnumerator = checkMap.getEnumerator();
        boolean errorsExist = false;
        while (checkMapEnumerator.moveNext())
        {
            if (checkMapEnumerator.currentValue())
            {
                InventStdCostConvCheck inventStdCostConvCheck = InventStdCostConvCheck::newInventStdCostCheckType(inventStdCostConvItem, checkMapEnumerator.currentKey());
                if (!inventStdCostConvCheck.validate())
                {
                    errorsExist = true;
                    ListEnumerator errorListEnumerator = inventStdCostConvCheck.errorList().getEnumerator();
                    while (errorListEnumerator.moveNext())
                    {
                        this.insertIntoTempTable(checkMapEnumerator.currentKey(),errorListEnumerator.current(),errorsExist);
                    }
                }
            }
        }
        if (!errorsExist)
        {
            this.insertIntoTempTable(InventStdCostConvCheckType::Item,'',errorsExist);
        }
        this.updateCheckedStatus(errorsExist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventStdCostConvCheckTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>InventStdCostConvCheckTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>InventStdCostConvCheckTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('InventStdCostConvCheckTmp')]
    public InventStdCostConvCheckTmp getInventStdCostConvCheckTmp()
    {
        select * from inventStdCostConvCheckTmp;
        return inventStdCostConvCheckTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>InventStdCostConvCheckTmp</c> temporary table.
    /// </summary>
    /// <param name="_checkType">
    ///    The <c>Checktype</c> issue that is associated with the item.
    /// </param>
    /// <param name="_errorText">
    ///    The issue with the item.
    /// </param>
    /// <param name="_errorExists">
    ///    A Boolean value that indicates whether there is error associated with this item.
    /// </param>
    private void insertIntoTempTable(
        InventStdCostConvCheckType  _checkType,
        str                         _errorText,
        boolean                     _errorExists
        )
    {
        inventStdCostConvCheckTmp.TransitionEndDate     = inventStdCostConv.TransitionEndDate;
        inventStdCostConvCheckTmp.TransitionStartDate   = inventStdCostConv.TransitionStartDate;
        inventStdCostConvCheckTmp.Status                = inventStdCostConv.Status;
        inventStdCostConvCheckTmp.CostingVersionId      = inventStdCostConv.CostingVersionId;
        inventStdCostConvCheckTmp.ItemId                = inventStdCostConvItem.ItemId;
        inventStdCostConvCheckTmp.ModelGroupId1         = inventStdCostConvItem.ModelGroupId;
        inventStdCostConvCheckTmp.ItemName              = inventTable.defaultProductName();
        inventStdCostConvCheckTmp.ModelGroupId          = inventModelGroupItem.ModelGroupId;
        inventStdCostConvCheckTmp.ItemType              = inventTable.ItemType;
        inventStdCostConvCheckTmp.ItemDimCostPrice      = inventTable.ItemDimCostPrice;
        inventStdCostConvCheckTmp.CheckType             = _checkType;
        inventStdCostConvCheckTmp.ErrorText             = _errorText;
        inventStdCostConvCheckTmp.ErrorExists           = _errorExists;
        // <GEERU>
        inventStdCostConvCheckTmp.InventTransCurrency   = inventStdCostConv.InventTransCurrency_RU;
        // </GEERU>
        inventStdCostConvCheckTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        InventStdCostConvCheckContract  contract = this.parmDataContract() as InventStdCostConvCheckContract;

        conversionDate  = contract.parmConversionDate();
        updateStatus    = contract.parmUpdateStatus();
        recId           = contract.parmInventStdCostConvRecId();
        checkMap        = contract.parmCheckMap();

        QueryRun queryRun = new QueryRun(this.parmQuery());
        QueryBuildRange queryBuildRange = queryRun.query().dataSourceTable(tableNum(InventStdCostConv),1).addRange(fieldNum(InventStdCostConv, TransitionEndDate));
        queryBuildRange.value(queryValue(conversionDate));
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            inventTransCurrency = contract.parmInventTransCurrency();

            queryBuildRange = queryRun.query().dataSourceTable(tableNum(InventStdCostConv),1).addRange(fieldnum(InventStdCostConv, InventTransCurrency_RU));
            queryBuildRange.value(queryValue(inventTransCurrency));
            queryBuildRange.status(RangeStatus::Locked);
        }
        // </GEERU>
        queryBuildRange = queryRun.query().dataSourceTable(tableNum(InventStdCostConv),1).addRange(fieldNum(InventStdCostConv, RecId));
        queryBuildRange.value(queryValue(recId));
        queryRun.query().dataSourceTable(tableNum(InventStdCostConvItem)).update(updateStatus);

        if (updateStatus)
        {
            queryRun.query().dataSourceTable(tableNum(InventStdCostConvItem)).concurrencyModel(ConcurrencyModel::Optimistic);
        }

        while (queryRun.next())
        {
            inventTable             = queryRun.get(tableNum(InventTable));
            inventModelGroupItem    = queryRun.get(tableNum(InventModelGroupItem));
            inventStdCostConv       = queryRun.get(tableNum(InventStdCostConv));
            inventStdCostConvItem   = queryRun.get(tableNum(InventStdCostConvItem));
            this.executeData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCheckedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the values to the fields of the <c>InventStdCostConvItem</c> table.
    /// </summary>
    /// <param name="_errorsExist">
    ///    A <c>NoYes</c> enumeration value.
    /// </param>
    private void updateCheckedStatus(boolean _errorsExist)
    {
        if (updateStatus)
        {
            ttsbegin;
            if (_errorsExist)
            {
                inventStdCostConvItem.CheckedDateTime = DateTimeUtil::minValue();
                inventStdCostConvItem.Status          = InventStdCostConvItemStatus::Planned;
            }
            else
            {
                inventStdCostConvItem.CheckedDateTime = DateTimeUtil::utcNow();
                inventStdCostConvItem.Status          = InventStdCostConvItemStatus::Checked;
            }
            inventStdCostConvItem.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>