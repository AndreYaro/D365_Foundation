<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessKanbanProdBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqEventProcessKanbanProdBOM</c> class processes kanban production BOM line events.
/// </summary>
public class ReqEventProcessKanbanProdBOM extends ReqEventProcessKanban implements BatchRetryable
{
    ProdBOM     prodBOM;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the BOM ID to use.
    /// </summary>
    /// <returns>
    ///    A <c>BOMId</c> string value.
    /// </returns>
    protected BOMId bomId()
    {
        BOMId   bomId;

        if (kanbanRule.KanbanType == LeanKanbanType::Manufacturing)
        {
            bomId = prodBOM.ItemBomId;
        }

        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table buffer on which the class operates.
    /// </summary>
    /// <returns>
    ///    A <c>Common</c> table buffer.
    /// </returns>
    protected Common buffer()
    {
        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a description for the class.
    /// </summary>
    /// <returns>
    ///    A description of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYS4000038";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the due date and time of the event.
    /// </summary>
    /// <returns>
    ///    A <c>TransDateTime</c> temporal value.
    /// </returns>
    protected TransDateTime dueDateTime()
    {
        return DateTimeUtil::newDateTime(
                    prodBOM.RawMaterialDate,
                    prodBOM.RawMaterialTime,
                    DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the event origin exists.
    /// </summary>
    /// <returns>
    ///    true if the event origin exists; otherwise, false.
    /// </returns>
    protected boolean eventExists()
    {
        return    prodBOM
               && ProdBOM::exist(prodBOM.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string identification for the buffer.
    /// </summary>
    /// <returns>
    ///    A string value that identifies the buffer.
    /// </returns>
    protected str id()
    {
        return strFmt("@SYS319617",prodBOM.ItemId,prodBOM.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variables.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    public boolean init()
    {
        boolean result = super();

        if (result)
        {
            result = result
                     && prodBOM.ProdLineType == BOMType::PeggedSupply
                     && ProdTable::find(prodBOM.ProdId).RecId != 0;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the event quantity to process.
    /// </summary>
    protected void initInventQty()
    {
        super();

        if (   !kanbanRuleFound
            || !kanbanFlow.isLastActivityInventoryControlled()
            || kanbanFlow.isLastLocationKanbanSupermarket())
        {
            inventQty = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceRequirementParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the source requirement parameters.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    protected boolean initSourceRequirementParm()
    {
        if (!kanbanSourceRequirementParm)
        {
            kanbanSourceRequirementParm = KanbanSourceRequirementParm::newStandard(
                                                                        prodBOM,
                                                                        tableNum(ProdBOM),
                                                                        prodBOM.RecId,
                                                                        tableNum(ProdBOM),
                                                                        prodBOM.RecId);
        }

        return    kanbanSourceRequirementParm
               && kanbanSourceRequirementParm.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the inventory dimension for which the event is processed.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimId</c> string value.
    /// </returns>
    protected InventDimId inventDimId()
    {
        return prodBOM.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction originator of the production BOM line.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>InventTransOrigin</c> table.
    /// </returns>
    protected InventTransOriginId inventTransOriginId()
    {
        return InventTransOriginProdBOM::findInventTransOriginId(prodBOM.DataAreaId,prodBOM.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the item for which an event is processed.
    /// </summary>
    /// <returns>
    ///    An <c>ItemId</c> type string value.
    /// </returns>
    protected ItemId itemId()
    {
        return prodBOM.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanEventType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the kanban event type that is processed by the class.
    /// </summary>
    /// <returns>
    ///    A <c>KanbanEventType</c> enumeration value.
    /// </returns>
    protected KanbanEventType kanbanEventType()
    {
        return KanbanEventType::ProdBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProcessSynchronously</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the event must be processed synchronously.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    protected boolean mustProcessSynchronously()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUsePeggingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the event uses the <c>ReqPeggingEvent</c> table.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    protected boolean mustUsePeggingEvent()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdBOM</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ProdBOM parmProdBOM(ProdBOM _prodBOM = prodBOM)
    {
        prodBOM = _prodBOM;
        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the source document line that caused the event.
    /// </summary>
    /// <returns>
    ///    Always returns zero.
    /// </returns>
    protected SourceDocumentLineRefRecId sourceDocumentLineRefRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static ReqEventProcessKanbanProdBOM construct()
    {
        return new ReqEventProcessKanbanProdBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ReqEventProcessKanbanProdBOM</c> class.
    /// </summary>
    /// <param name="_prodBOM">
    ///    A <c>ProdBOM</c> table buffer to use to create the object.
    /// </param>
    /// <param name="_interactive">
    ///    A Boolean value that specifies whether the processing is performed interactively.
    /// </param>
    /// <returns>
    ///    A <c>ReqEventProcessKanbanProdBOM</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessKanbanProdBOM newStandard(
        ProdBOM _prodBOM,
        boolean _interactive = false)
    {
        ReqEventProcessKanbanProdBOM  reqEventProcess = ReqEventProcessKanbanProdBOM::construct();

        reqEventProcess.parmProdBOM(_prodBOM);
        reqEventProcess.parmInteractive(_interactive);
        reqEventProcess.parmAcceptReceiveSemiFinishedKanbanRule(false);
        reqEventProcess.parmAcceptReceiveFinishedKanbanRule(true);

        return reqEventProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>