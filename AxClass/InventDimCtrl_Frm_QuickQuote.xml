<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_QuickQuote</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventDimCtrl_Frm_QuickQuote extends InventDimCtrl_Frm
{
    Query                   origQuery;
    QueryRun                origQueryRun;
    QueryBuildDataSource    queryBuildDs;
    FormDataSource          localInventTable_DS;
    InventSiteId            inventSiteId;
    // <GEERU>
    InventProfileType_RU        inventProfileType;
    // </GEERU>
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    public void buildQuery()
    {
        QueryBuildDataSource    queryBuildDsDim;
        boolean                 sortfield;
        // <GEERU>
        #ISOCountryRegionCodes
        QueryBuildDataSource    queryBuildDsInventProfile;
        // </GEERU>

        if (origQuery)
        {
            this.modifyQuery();

            if (localInventTable_DS.queryRun())
            {
                queryBuildDsDim = localInventTable_DS.queryRun().query().dataSourceTable(tableNum(InventDim));
                // <GEERU>
                queryBuildDsInventProfile = localInventTable_DS.queryRun().query().dataSourceTable(tableNum(InventProfile_RU));
                // </GEERU>
            }
            else
            {
                queryBuildDsDim = localInventTable_DS.query().dataSourceTable(tableNum(InventDim));
                // <GEERU>
                queryBuildDsInventProfile = localInventTable_DS.query().dataSourceTable(tableNum(InventProfile_RU));
                // </GEERU>
            }
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) &&
                ! queryBuildDsInventProfile)
            {
                queryBuildDsInventProfile = queryBuildDsDim.addDataSource(tableNum(InventProfile_RU));
                queryBuildDsInventProfile.relations(true);
                queryBuildDsInventProfile.joinMode(JoinMode::ExistsJoin);
            }
            // </GEERU>

            queryBuildDsDim.sortClear();

            Enumerator enum = InventDim::dimEnabledFieldList().getEnumerator();
            while (enum.moveNext())
            {
                FieldId fieldIdOnInventDim = enum.current();
                if (InventDim::isFieldIdStorageDimension(fieldIdOnInventDim) || 
                    InventDim::isFieldIdTrackingDimension(fieldIdOnInventDim))
                {
                    FieldId fieldIdOnInventDimParm = InventDim::dim2dimParm(fieldIdOnInventDim);

                    if (dimParmVisibleGrid.(fieldIdOnInventDimParm))
                    {
                        queryBuildDsDim.addSortField(fieldIdOnInventDim);
                        sortfield = true;
                    }
                }
            }

            if (inventSiteId && 
                dimParmVisibleGrid.InventSiteIdFlag)
            {
                SysQuery::findOrCreateRange(queryBuildDsDim, fieldNum(InventDim, InventSiteId)).value(queryValue(inventSiteId));
            }

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                queryBuildDsDim.orderMode(queryBuildDsDim.sortFieldCount() ? OrderMode::GroupBy : OrderMode::OrderBy);
                queryBuildDsDim.enabled(true);
            }
            else
            // </GEERU>
            {
                queryBuildDsDim.orderMode(OrderMode::GroupBy);
                queryBuildDsDim.enabled(sortfield);
            }

            if (queryBuildDsInventProfile)
            {
                if (inventProfileType)
                {
                    queryBuildDsDim.enabled(true);
                    queryBuildDsInventProfile.enabled(true);
                    QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDsInventProfile, fieldNum(InventProfile_RU, InventProfileType));
                    queryBuildRange.value(queryValue(inventProfileType));
                    queryBuildRange.status(RangeStatus::Hidden);
                }
                else
                {
                    queryBuildDsInventProfile.enabled(false);
                }
            }
            // </GEERU>

            localInventTable_DS.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmVisibleGrid</Name>
				<Source><![CDATA[
    protected InventDimParm initDimParmVisibleGrid()
    {
        dimParmVisibleGrid.initSiteDimAllGrp();
        return dimParmVisibleGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    public void initFromCaller()
    {
        dimParmLockedRightClick.initConsistentDimensionsGeneral();
        dimParmVisibleGrid.ItemIdFlag          = true;
        // <GEERU>
        dimParmLockedRightClick.InventProfileIdFlag_RU = NoYes::No;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public void initQuery(FormDataSource _inventTable_DS)
    {
        localInventTable_DS = _inventTable_DS;

        if (localInventTable_DS.queryRun())
        {
            origQuery = _inventTable_DS.queryRun().query();
        }
        else
        {
            origQuery = _inventTable_DS.query();
        }

        queryBuildDs = origQuery.dataSourceTable(tableNum(InventSum));

        queryBuildDs.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
        queryBuildDs.addSelectionField(fieldNum(InventSum, AvailPhysical), SelectionField::Sum);

        queryBuildDs.addSelectionField(fieldNum(InventSum, PdsCWAvailPhysical), SelectionField::Sum);

        queryBuildDs.addSelectionField(fieldNum(InventSum, InventDimId), SelectionField::Min);

        this.modifyQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    public void modifyQuery()
    {
        QueryBuildDataSource queryBuildDsInvent = origQuery.dataSourceTable(tableNum(InventTable));
        queryBuildDsInvent.sortClear();
        queryBuildDsInvent.orderMode(OrderMode::GroupBy);
        queryBuildDsInvent.addSortField(fieldNum(InventTable,ItemId));
        queryBuildDsInvent.addSortField(fieldNum(InventTable,RecId));

        queryBuildDs.sortClear();
        queryBuildDs.orderMode(OrderMode::GroupBy);
        queryBuildDs.addSortField(fieldNum(InventSum,ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        largeRightClickForm = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventProfileType_RU</Name>
				<Source><![CDATA[
    public InventProfileType_RU parmInventProfileType_RU(InventProfileType_RU _inventProfileType = inventProfileType)
    {
        inventProfileType = _inventProfileType;
        return inventProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupShowItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the item number should be visible in the dimension setup form.
    /// </summary>
    /// <returns>
    ///    false always.
    /// </returns>
    public boolean setupShowItemId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the controls in the user interface by using the current parameter values.
    /// </summary>
    /// <remarks>
    /// This method hides or shows controls. It is also responsible for enabling and disabling controls.
    /// </remarks>
    public void updateControls()
    {
        super();

        this.buildQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm_QuickQuote construct()
    {
        return new InventDimCtrl_Frm_QuickQuote();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class that will be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <param name="_validDataSources">
    ///    A set containing a list of data sources used for validation, optional.
    /// </param>
    /// <returns>
    ///    An instance of this class that will be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_QuickQuote newFromForm(FormRun _formRun, Set _validDataSources = null)
    {
        InventDimCtrl_Frm_QuickQuote    inventDimCtrl = InventDimCtrl_Frm_QuickQuote::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmValidDataSources(_validDataSources);

        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
