<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XPnADataverseUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Linq;
using System.Web;

internal static class XPnADataverseUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isXPnAInstalled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isXPnAInstalled()
    {
        boolean doesSolutionExist = false;

        try
        {
            doesSolutionExist = SysDataverseUtility::IsDataverseLinked()
                && SysDataverseUtility::CheckSolutionExistence(SysDataverseUtility::GetOrganizationServiceForCurrentUser(XPnAConstants::OrgServiceName), XPnAConstants::AnchorSolutionName);
        }
        catch
        {
            SysInstrumentationLoggerFactory::CreateLogger(classStr(XPnADataverseUtility)).logInformation('User does not have permissions to query solutions');
        }

        return doesSolutionExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXPnAAppLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static System.String getXPnAAppLink()
    {
        var dataverseOrgUri = new Uri(SysDataverseUtility::DataverseOrganizationUrl());
        var uriBuilder = new System.UriBuilder(new Uri(dataverseOrgUri, XPnAConstants::AppLinkPath));

        var query = HttpUtility::ParseQueryString(uriBuilder.Query);
        query.Set(XPnAConstants::AppLinkNameParameter, XPnAConstants::ModelDrivenAppName);
        uriBuilder.Query = query.ToString();

        return uriBuilder.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>