<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkClusterQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is responsible for building queries related to work clusters.
/// </summary>
internal class WHSWorkClusterQueryBuilder
{
    private WHSClusterId clusterId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSWorkClusterQueryBuilder construct()
    {
        return new WHSWorkClusterQueryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromClusterId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the class based on the parameters.
    /// </summary>
    /// <param name = "_clusterId">The cluster Id to query for.</param>
    /// <returns>A new instance of the class.</returns>
    [Hookable(false)]
    internal static WHSWorkClusterQueryBuilder newFromClusterId(WHSClusterId _clusterId)
    {
        WHSWorkClusterQueryBuilder builder = WHSWorkClusterQueryBuilder::construct();
        
        builder.clusterId = _clusterId;
        
        return builder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPutWorkLinesCanBeProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that identifies put work lines within the cluster that can be processed.
    /// </summary>
    /// <param name = "_clusterProfileId">The cluster profile that defines the sorting.</param>
    /// <returns>A query that identifies put work lines within the cluster that can be processed</returns>
    [Hookable(false)]
    internal Query buildPutWorkLinesCanBeProcessed(WHSClusterProfileId _clusterProfileId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsCluster = query.addDataSource(tableNum(WHSWorkClusterLine));
        QueryBuildDataSource qbdsPutWorkLine = qbdsCluster.addDataSource(tableNum(WHSWorkLine));
        qbdsPutWorkLine.relations(true);
        qbdsPutWorkLine.addLink(fieldNum(WHSWorkClusterLine, WorkId), fieldNum(WHSWorkLine, WorkId), qbdsCluster.name());

        QueryBuildRange qbrCluster = qbdsCluster.addRange(fieldNum(WHSWorkClusterLine, ClusterId));
        qbrCluster.value(this.clusterId);

        QueryBuildRange qbrPutWorkStatus = qbdsPutWorkLine.addRange(fieldNum(WHSWorkLine, WorkStatus));
        qbrPutWorkStatus.value(strFmt("@SYS26868", enum2str(WHSWorkStatus::Open), enum2str(WHSWorkStatus::InProcess)));

        QueryBuildRange qbrPutWorkType = qbdsPutWorkLine.addRange(fieldNum(WHSWorkLine, WorkType));
        qbrPutWorkType.value(enum2str(WHSWorkType::Put));

        // Add Order by fields
        this.addClusterSortOrderingToWorkLineQbds(qbdsPutWorkLine, _clusterProfileId);

        if (this.isDeferredPutProcessingUsed())
        {
            this.addExclusionOfNonCompletedWorkDeferredPutProcessingTaskQbds(qbdsPutWorkLine);
        }

        return query;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExclusionOfNonCompletedWorkDeferredPutProcessingTaskQbds</Name>
				<Source><![CDATA[
    private void addExclusionOfNonCompletedWorkDeferredPutProcessingTaskQbds(QueryBuildDataSource _qbdsWorkLine)
    {
        QueryBuildDataSource qbdsWHSWorkDeferredPutProcessingTask = _qbdsWorkLine.addDataSource(tableNum(WHSWorkDeferredPutProcessingTask));

        qbdsWHSWorkDeferredPutProcessingTask.relations(true);
        qbdsWHSWorkDeferredPutProcessingTask.joinMode(JoinMode::NoExistsJoin);

        QueryBuildRange qbrStatus = qbdsWHSWorkDeferredPutProcessingTask.addRange(fieldNum(WHSWorkDeferredPutProcessingTask, Status));
        
        qbrStatus.value(SysQuery::valueNot(WHSWorkDeferredOperationStatus::Completed));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeferredPutProcessingUsed</Name>
				<Source><![CDATA[
    private boolean isDeferredPutProcessingUsed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addClusterSortOrderingToWorkLineQbds</Name>
				<Source><![CDATA[
    private void addClusterSortOrderingToWorkLineQbds(
        QueryBuildDataSource    _qbdsWorkLine,
        WHSClusterProfileId     _clusterProfileId)
    {
        WHSClusterSort  clusterSort;
        
        // Add Order by fields
        while select clusterSort
            where clusterSort.ClusterProfileId == _clusterProfileId
        {
            SortOrder sortOrder = SortOrder::Descending;

            if (clusterSort.AscendingDescending == AscendingDescending::Ascending)
            {
                sortOrder = SortOrder::Ascending;
            }

            _qbdsWorkLine.addOrderByField(fieldName2id(tableNum(WHSWorkLine), clusterSort.FieldName), sortOrder);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>