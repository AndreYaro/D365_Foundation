<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXPackageStore</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using Microsoft.DynamicsOnline.Infrastructure.Components.SharedServiceUnitStorage;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
///  Encapsulates how the packages are handled based on the provider type
/// </summary>
public class RetailCDXPackageStore
{
    private static SharedServiceUnitStorage storage;
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>writePackage</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Writes the package file to a destination store.
    ///  For file storage, provide the source file name, target dir and target file name
    ///  For cloud storage, provide the source file name. Files are stored in a default
    ///  container.
    /// </summary>
    /// <param name = "dataGroupRecId">Data group RecId.</param>
    /// <param name = "srcFileFullPath">full path of the Source file.</param>
    /// <param name = "destFileName">Name of the destination file.</param>
    /// <returns>Target data file path or blob record Id.</returns>
    public static RetailCDXFilePathOrGuid writePackage(RetailCDXDataGroupRefRecId dataGroupRecId, RetailCDXDownloadUpload direction,
        RetailCDXFilePath srcFileFullPath,
        Filename destFileName,
        int _maxRetryCount = 0)
    {
        RetailCDXFilePathOrGuid result;
        container retryTimeout = [3,10,30,90];
        int maxRetryCount = _maxRetryCount;
        int waitTime;
        CLRObject ex;

        if (maxRetryCount > conLen(retryTimeout))
        {
            maxRetryCount = conLen(retryTimeout);
        }

        for (int i = 1; i <= maxRetryCount+1; ++i)
        {
            // _maxRetryCount = 0: do once with no try-catch
            // _maxRetryCount = n: retry n times with try-catch, last retry without try-catch to throw CLRError if it still fails
            if (i > maxRetryCount)
            {
                result = RetailCDXPackageStore::doWritePackage(dataGroupRecId, direction, srcFileFullPath, destFileName);
            }
            else
            {
                try
                {
                    result = RetailCDXPackageStore::doWritePackage(dataGroupRecId, direction, srcFileFullPath, destFileName);
                    break;
                }
                catch (Exception::CLRError)
                {
                    ex = CLRInterop::getLastException();

                    info (strFmt('Failed on #%1 try of uploading data package to blob storage, error message: %2', i, ex.toString()));

                    waitTime = conPeek(retryTimeout, i);

                    // wait for exponential timeout and try again
                    sleep(waitTime * 1000); // Sleep for 1 second.
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the package that is no longer needed
    /// </summary>
    /// <param name = "fileIdOrFullPath">Guid of the cloud-based blob or the file full path</param>
    public static void deletePackage(RetailCDXDataGroupRefRecId dataGroupRecId, RetailCDXDownloadUpload direction, RetailCDXFilePathOrGuid fileIdOrFullPath)
    {
        if (fileIdOrFullPath != '' && dataGroupRecId != 0)
        {
            RetailCDXPackageStore::getSharedServiceUnitStorage().DeleteData(fileIdOrFullPath, RetailCDXPackageStore::getContainerName(dataGroupRecId, direction));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackageLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// For file based storage, returns the path given
    /// For cloud-based storage, the storage controller is consulted
    /// to get a read-only url link valid for the given duration
    /// </summary>
    /// <param name = "fileIdOrFullPath">Guid of the blob or the file name</param>
    /// <param name = "validTimeInMinutes">RO Link valid time</param>
    /// <returns></returns>
    public static RetailCDXFilePathOrGuid getPackageLink(RetailCDXDataGroupRefRecId dataGroupRecId, RetailCDXDownloadUpload direction,
                                     RetailCDXFilePathOrGuid                        fileIdOrFullPath,
                                     RetailCDXPackageLinkValidDuration              validTimeInMinutes)
    {
        return RetailCDXPackageStore::getPackageLinkImpl(dataGroupRecId, direction, fileIdOrFullPath, validTimeInMinutes, BlobUrlPermission::Read);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainerName</Name>
				<Source><![CDATA[
    public static str getContainerName(RetailCDXDataGroupRefRecId dataGroupRecId, RetailCDXDownloadUpload direction)
    {
        if (direction == RetailCDXDownloadUpload::Download)
        {
            return strFmt('retail-cdx-down-%1', dataGroupRecId);
        }
        else
        {
            return strFmt('retail-cdx-up-%1', dataGroupRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStorageContext</Name>
				<Source><![CDATA[
    private static StorageContext getStorageContext()
    {
        return SharedServiceUnitStorage::GetDefaultStorageContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doWritePackage</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Writes the package file to a destination store.
    ///  For file storage, provide the source file name, target dir and target file name
    ///  For cloud storage, provide the source file name. Files are stored in a default
    ///  container
    /// </summary>
    /// <param name = "dataGroupRecId">Data group RecId.</param>
    /// <param name = "srcFileFullPath">full path of the Source file.</param>
    /// <param name = "destFileName">Name of the destination file</param>
    /// <returns>Target data file path or blob record Id.</returns>
    private static RetailCDXFilePathOrGuid doWritePackage(RetailCDXDataGroupRefRecId dataGroupRecId, RetailCDXDownloadUpload direction,
        RetailCDXFilePath srcFileFullPath,
        Filename destFileName)
    {
        RetailCDXFilePathOrGuid dest; // can be file or url

        RetailCDXDataGroup dataGroup;
        RetailCDXFileStorageProvider dataStorageProvider;
        RetailCDXSharePath baseTargetDir;
        str dataGroupRecIDStr;
        RetailCDXSharePath dataGroupTargetDir;

        // Throw error if the source file path is not provided
        if (!srcFileFullPath)
        {
            throw Global::error("@Retail:SourceFilePathIsRequired");
        }

        if (!destFileName)
        {
            throw Global::error("@Retail:DestinationFileNameIsRequired");
        }

        //Create descriptor for data
        //The files are identified by a GUID as per the storage API
        SharedServiceUnitStorageData storageData = new SharedServiceUnitStorageData();
        dest = System.Guid::NewGuid().ToString();
        storageData.Id = dest;
        storageData.Name = destFileName;
        storageData.Description = "";
        storageData.Accessibility = Accessibility::Private;
        storageData.Retention = Retention::Permanent;
        storageData.Category = RetailCDXPackageStore::getContainerName(dataGroupRecId, direction);

        //Upload package
        RetailCDXPackageStore::getSharedServiceUnitStorage().UploadData(storageData, srcFileFullPath);

        return dest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUploadParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate upload url with valid SAS token and blob target storage GUID.
    /// </summary>
    /// <param name = "dataGroupRecId">Data group RecId.</param>
    /// <param name = "direction">CDX sync direction.</param>
    /// <param name = "destFileName">Name of the destination file.</param>
    /// <param name = "validTimeInMinutes">Valid time duration of SAS token in minute.</param>
    /// <returns>RetailAsyncClientUploadParameter containing upload blob url and blob target storage GUID.</returns>
    public static RetailAsyncClientUploadParameter getUploadParameter(RetailCDXDataGroupRefRecId dataGroupRecId, RetailCDXDownloadUpload direction,
        Filename destFileName,
        RetailCDXPackageLinkValidDuration validTimeInMinutes)
    {
        if (!dataGroupRecId)
        {
            throw Global::error("@Retail:RetailCDXPackageStoreDataGroupRecIdZeroError");
        }

        if (!destFileName)
        {
            throw Global::error("@Retail:DestinationFileNameIsRequired");
        }

        // RetailCDXFilePathOrGuid is a EDT that can be either a file(file path or GUID) or a url.
        RetailCDXFilePathOrGuid blobLink = null;
        RetailCDXFilePathOrGuid dest;
        RetailAsyncClientUploadParameter uploadParameter;

        RetailCDXDataGroup dataGroup;
        RetailCDXFileStorageProvider dataStorageProvider;
        str containerName;

        SharedServiceUnitStorage sharedServiceUnitStorage = RetailCDXPackageStore::getSharedServiceUnitStorage();

        // Create descriptor for data
        SharedServiceUnitStorageData storageData = new SharedServiceUnitStorageData();

        // The files are identified by a GUID as per the storage API
        dest = System.Guid::NewGuid().ToString();
        storageData.Id = dest;
        storageData.Name = destFileName;
        storageData.Description = "";
        storageData.Accessibility = Accessibility::Private;
        storageData.Retention = Retention::Permanent;
        containerName = RetailCDXPackageStore::getContainerName(dataGroupRecId, direction);
        storageData.Category = containerName;

        // Create blob.
        sharedServiceUnitStorage.CreateData(storageData);

        // Get the blob url with SAS token;
        blobLink = RetailCDXPackageStore::getPackageLinkImpl(dataGroupRecId, direction, dest, validTimeInMinutes, BlobUrlPermission::ReadWrite, sharedServiceUnitStorage);

        uploadParameter = new RetailAsyncClientUploadParameter();
        uploadParameter.paramUploadUrl(blobLink);
        uploadParameter.paramTargetStorage(dest);

        // Track the upload paths that have been reserved, later in RetailCdxPurgeHistory class all unused upload paths will be removed
        RetailCDXUploadPathHistory retailCDXUploadPathHistory;

        select firstonly RecId from retailCDXUploadPathHistory
            where retailCDXUploadPathHistory.DataGroup == dataGroupRecId
               && retailCDXUploadPathHistory.UploadPath == uploadParameter.paramTargetStorage();

        if (!retailCDXUploadPathHistory)
        {
            retailCDXUploadPathHistory.DataGroup = dataGroupRecId;
            retailCDXUploadPathHistory.UploadPath = uploadParameter.paramTargetStorage();
            retailCDXUploadPathHistory.insert();
        }

        return uploadParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharedServiceUnitStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the shared service unit storage.
    /// </summary>
    /// <returns>The shared service unit storage.</returns>
    private static SharedServiceUnitStorage getSharedServiceUnitStorage()
    {
        if (storage == null)
        {
            //Get Storage context
            StorageContext ctx = RetailCDXPackageStore::getStorageContext();

            //Create shared storage wrapper
            storage = new SharedServiceUnitStorage(ctx);
        }

        return storage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSharedServiceUnitStorageDataInstance</Name>
				<Source><![CDATA[
    internal static SharedServiceUnitStorageData createSharedServiceUnitStorageDataInstance(RetailCDXFilePathOrGuid fileIdOrFullPath,
                                                        RetailCDXFilePathOrGuid dest,
                                                        BlobUrlPermission blobUrlPermission,
                                                        System.TimeSpan ts,
                                                        SharedServiceUnitStorage sharedServiceUnitStorage)
    {
       return sharedServiceUnitStorage.GetData(fileIdOrFullPath,
                                               dest,
                                               blobUrlPermission,
                                               ts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackageLinkImpl</Name>
				<Source><![CDATA[
    private static RetailCDXFilePathOrGuid getPackageLinkImpl(RetailCDXDataGroupRefRecId dataGroupRecId, RetailCDXDownloadUpload direction,
                                           RetailCDXFilePathOrGuid                  fileIdOrFullPath,
                                           RetailCDXPackageLinkValidDuration        validTimeInMinutes,
                                           BlobUrlPermission                        blobUrlPermission,
                                           SharedServiceUnitStorage                 sharedServiceUnitStorage = null)
    {
        sharedServiceUnitStorage = sharedServiceUnitStorage == null ? RetailCDXPackageStore::getSharedServiceUnitStorage() : sharedServiceUnitStorage;
        RetailCDXFilePathOrGuid dest = RetailCDXPackageStore::getContainerName(dataGroupRecId, direction);

        SharedServiceUnitStorageData storageData;
        SharedServiceUnitNotFoundException sharedServiceUnitNotFoundException;
        int maxRetryCount = 4;

        System.TimeSpan ts = new System.TimeSpan(0, validTimeInMinutes, 0);

        for (int retryCount = 1; retryCount <= maxRetryCount; ++retryCount)
        {
            try
            {

                // Get a link with read-only token and given expiration time.
                storageData = RetailCDXPackageStore::createSharedServiceUnitStorageDataInstance(fileIdOrFullPath,
                                                                    dest,
                                                                    blobUrlPermission,
                                                                    ts,
                                                                    sharedServiceUnitStorage);

                break;
            }
            catch (sharedServiceUnitNotFoundException)
            {
                eventSource.EventWriteGetPackageLinkWarning(sharedServiceUnitNotFoundException.toString());

                // No need to retry this kind of exception
                throw;
            }
            catch (Exception::CLRError)
            {
                CLRObject ex = CLRInterop::getLastException();

                if (ex != null)
                {
                    if (ex.get_InnerException() != null)
                    {
                        ex = ex.get_InnerException();
                    }

                    eventSource.EventWriteGetPackageLinkWarning(ex.toString());
                }

                if (!RetailCDXRetryOnGetPackageLinkFlight::instance().isEnabled() || retryCount == maxRetryCount)
                {
                    // if there are no more retries, let the exception bubble up.
                    throw;
                }

                RetailCDXPackageStore::backoffBeforeNextRetry(retryCount);
            }
        }

        // get the package link;
        return storageData == null ? '' : storageData.BlobLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>backoffBeforeNextRetry</Name>
				<Source><![CDATA[
    internal static void backoffBeforeNextRetry (int iteration)
    {
        // backoff retry (1, 2, 3 seconds)
        sleep(iteration * 1000);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>