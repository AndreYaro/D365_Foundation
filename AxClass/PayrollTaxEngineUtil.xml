<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollTaxEngineUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Reflection;
using System.IO;
using System.Collections;
using Microsoft.Dynamics.AX.Metadata.MetaModel;

/// <summary>
/// The <c>PayrollTaxEngineUtil</c> class is a wrapper utility class around the Symmetry tax engine.
/// </summary>
/// <remarks>
/// This class has been created for a couple purposes:
/// 1. To make the use of the tax engine easier by hiding some of the implementation details from the
/// consumers of this class.
/// 2. To have a single place to contain code related to working with the Symmetry tax engine to make the
/// implementation of new code easier for developers.
/// </remarks>
class PayrollTaxEngineUtil
{
    #PayrollConstants
    #ISOCountryRegionCodes
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExpectedTaxEngineBaseCodeVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the expected tax engine base code version. This comes from the version file value for .NET Assemblies.
    /// </summary>
    /// <returns>
    /// The tax engine code compatibility version that is currently installed on
    /// the server in the base tax data xml file.
    /// </returns>
    public static str getExpectedTaxEngineBaseCodeVersion()
    {
        // This no longer is needed as the code gets shipped alongside of the binary updates
        return PayrollTaxEngineUtil::getTaxEngineCodeCompatibilityVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInTaxEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the Symmetry tax engine to the proxy pool.
    /// </summary>
    public static void checkInTaxEngine()
    {
        error("@PayrollProcessing:PayrollDeprecationMessage");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not a file exists on the server
    /// </summary>
    /// <param name="_fileName">
    /// The file name, including the full path.
    /// </param>
    /// <returns>
    /// true if the file exists; otherwise, false
    /// </returns>
    private static boolean fileExists(str _fileName)
    {
        #winapi
        #winerrors
        boolean ret;

        int         length;
        int         i;

        length = strLen(_filename);

        if ((length > 0) && (subStr(_filename, length, 1) == '\\'))
        {
            _filename = subStr(_filename, 1, length - 1);
            length -= 1;
        }

        // See KB Q115827
        i = strFind(_filename, ' .', length, -1);
        if ((length > 0) && (i == length))
        {
            return false;
        }

        ret = System.IO.File::Exists(_filename);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGNISMatchListFromTaxEngine</Name>
				<Source><![CDATA[
    public static ArrayList getGNISMatchListFromTaxEngine()
    {
        return new ArrayList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdListFromTaxEngine</Name>
				<Source><![CDATA[
    public static ArrayList getTaxIdListFromTaxEngine()
    {
        return new ArrayList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCodeListFromTaxEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of tax code ids for tax region.
    /// </summary>
    /// <returns>An ArrayList contianing tax code ids.</returns>
    public static ArrayList getTaxCodeListFromTaxEngine()
    {
        return new ArrayList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCalcListFromTaxEngine</Name>
				<Source><![CDATA[
    public static ArrayList getTaxCalcListFromTaxEngine()
    {
        return new ArrayList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertGenericListToArrayList</Name>
				<Source><![CDATA[
    private static ArrayList convertGenericListToArrayList(IList _genericList)
    {
        ArrayList arrayList = new System.Collections.ArrayList();

        IEnumerator genericListEnumerator = _genericList.GetEnumerator();

        while (genericListEnumerator.MoveNext())
        {
            arrayList.Add(genericListEnumerator.Current);
        }

        return arrayList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGNISLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>PrlTmpGNIS</c> table with all the Geographic Names Information System (GNIS) locations  from the Symmetry tax engine that match on the input parameters.
    /// </summary>
    /// <param name="_zipCode">
    /// The zip code value of the GNIS location to lookup.
    /// </param>
    /// <param name="_state">
    /// The state value of the GNIS location to lookup.
    /// </param>
    /// <param name="_city">
    /// The city value of the GNIS location to lookup.
    /// </param>
    /// <param name="_county">
    /// The county value of the GNIS location to lookup.
    /// </param>
    /// <param name="_municipalityName">
    /// The municipality name value of the GNIS location to lookup.
    /// </param>
    /// <param name="_schoolDistrictName">
    /// The school district name value of the GNIS location to lookup.
    /// </param>
    /// <returns>
    /// A <c>PrlTmpGNIS</c> table buffer.
    /// </returns>
    public static PrlTmpGNIS getGNISLocations(str _zipCode = '',
        str _state = '',
        str _city = '',
        str _county = '',
        str _municipalityName = '',
        str _schoolDistrictName = '')
    {
        #ISOCountryRegionCodes

        PrlTmpGNIS                                  tmpGNIS;
        System.Collections.ArrayList                taxEngineList;
        System.Collections.IEnumerator              taxEngineListEnumerator;
        str                                         stateCountyName,
                                                    cityCountyStateName,
                                                    cityCountyStateReverseName;
        //Symmetry.TaxEngine.LocationCode             locationCode;
        LogisticsAddressCountryRegion               countryUS = LogisticsAddressCountryRegion::findByISOCode(#isoUS);
        int                                         reverseCommaPosition,
                                                    commaPosition,
                                                    cityCountyStateNameLength;
        List                                        stateCountyList;
        ListEnumerator                              stateCountyListEnumerator;
        InteropPermission                           permission;

        permission = new InteropPermission(InteropKind::ClrInterop);
        permission.assert();
        // This code returns all the GNIS location codes that match the address parameters in a list
        taxEngineList = PayrollTaxEngineUtil::getTaxEngineLocationCodeList(#GNISLOCATION,
            _zipCode,
            _state,
            _city,
            _county,
            _municipalityName,
            _schoolDistrictName);
        taxEngineListEnumerator = taxEngineList.GetEnumerator();

        // the locationCode.get_GnisName() values represent the city, state, and county of the GNIS location
        // the values are in the format '<city>, <state> (<county>)'
        while (taxEngineListEnumerator.MoveNext())
        {
            tmpGNIS.clear();
            // the tax engine only supports US currently
            tmpGNIS.Country = countryUS.CountryRegionId;
            reverseCommaPosition = strFind(cityCountyStateReverseName, ',', 1, cityCountyStateNameLength);

            // we process the county/state first, then the city as the city can have commas in the city name
            if (reverseCommaPosition > 0)
            {
                // establish the commaPosition in the real location name
                commaPosition = (cityCountyStateNameLength - reverseCommaPosition + 1);
                stateCountyName = subStr(cityCountyStateName, commaPosition+1,  (cityCountyStateNameLength - (commaPosition+1)+1));
                stateCountyList = strSplit(stateCountyName, '()');
                stateCountyListEnumerator = stateCountyList.getEnumerator();

                // this list contains the state and county
                if (stateCountyListEnumerator.moveNext())
                {
                    tmpGNIS.State = strLTrim(strRTrim(stateCountyListEnumerator.current()));
                    //Get County
                    if (stateCountyListEnumerator.moveNext())
                    {
                        tmpGNIS.County = strLTrim(strRTrim(stateCountyListEnumerator.current()));
                    }
                }
                // the city will be everything left of the last comma in the location name
                tmpGNIS.City = strLTrim(strRTrim(subStr(cityCountyStateName, 1, commaPosition-1)));
                tmpGNIS.insert();
            }
        }
        CodeAccessPermission::revertAssert();
        return tmpGNIS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsCityFromSymmetryCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a city formatted for the Logistics module.
    /// </summary>
    /// <param name="_symmetryCity">
    /// The city value that was returned from the Symmetry tax engine.
    /// </param>
    /// <returns>
    /// A city value without additional information from the Symmetry tax engine.
    /// </returns>
    /// <remarks>
    /// This method performs the conversion on the city value by keeping all characters in the <c>_symmetryCity</c> value to the left of a comma, if present, that can be located in a city retrieved by the Symmetry tax engine.
    /// </remarks>
    public static LogisticsAddressCityName getLogisticsCityFromSymmetryCity(str _symmetryCity)
    {
        LogisticsAddressCityName logisticsAddressCity;
        int cityLength;
        int commaPosition;

        if (strLTrim(strRTrim(_symmetryCity)) != '')
        {
            cityLength = strLen(_symmetryCity);
            commaPosition = strFind(_symmetryCity, ',', 1, cityLength);
            if (commaPosition)
            {
                logisticsAddressCity = subStr(_symmetryCity, 1, commaPosition-1);
            }
            else
            {
                logisticsAddressCity = subStr(_symmetryCity, 1, cityLength);
            }
        }
        return logisticsAddressCity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMunicipalities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>PrlTmpMunSchool</c> table with municipalities that meet the
    /// specified criteria.
    /// </summary>
    /// <param name="_zipCode">
    /// The zip code value of the GNIS location to lookup.
    /// </param>
    /// <param name="_state">
    /// The state value of the GNIS location to lookup.
    /// </param>
    /// <param name="_city">
    /// The city value of the GNIS location to lookup.
    /// </param>
    /// <param name="_county">
    /// The county value of the GNIS location to lookup.
    /// </param>
    /// <param name="_municipalityName">
    /// The municipality name value of the GNIS location to lookup.
    /// </param>
    /// <param name="_schoolDistrictName">
    /// The school district name value of the GNIS location to lookup.
    /// </param>
    /// <returns>
    /// A <c>PrlTmpMunSchool</c> table buffer containing the inserted record or records
    /// of municipalities that meet the specified criteria.
    /// </returns>
    public static PrlTmpMunSchool getMunicipalities(str _zipCode = '',
        str _state = '',
        str _city = '',
        str _county = '',
        str _municipalityName = '',
        str _schoolDistrictName = '')
    {
        PrlTmpMunSchool municipalities;

        return municipalities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPoliticalSubDivision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the political sub-division id from the tax engine for the given parameters
    /// </summary>
    /// <param name="_state">
    /// The state ID for fetching the political sub-division
    /// </param>
    /// <param name="_county">
    /// The county ID for fetching the political sub-division
    /// </param>
    /// <param name="_municipality">
    /// The municipality ID for fetching the political sub-division
    /// </param>
    /// <param name="_schoolDistrict">
    /// The school district ID for fetching the political sub-division
    /// </param>
    /// <param name="_checkTaxInfo">
    /// Check the state, tax type, municipality, and school district before calling into tax engine
    /// </param>
    /// <returns>
    /// The political sub-division ID for the given arguements
    /// </returns>
    public static PayrollPoliticalSubdivisionId getPoliticalSubDivision(str _state,
        str _county,
        PayrollMunicipalityId _municipality,
        PayrollSchoolDistrictId _schoolDistrict,
        boolean _checkTaxInfo = true)
    {
        str uniqueTaxID;
        boolean checkPSD = false;

        #define.EIT("EIT")

        uniqueTaxID = strFmt("%1-%2-%3-%4-%5", _state, _county, _municipality, #EIT, _schoolDistrict);

        if (_checkTaxInfo)
        {
            if (str2int(_state) == PayrollUSState::PA && _municipality && _schoolDistrict)
            {
                //The tax info lines up, so check the political sub-division
                checkPSD = true;
            }
        }
        else
        {
            //The tax info is not being verified, so check the political sub-division
            checkPSD = true;
        }

        if (checkPSD)
        {
            return PayrollTaxEngineUtil::getPoliticalSubDivisionByTaxCode(uniqueTaxID, false);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPoliticalSubDivisionByTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the political sub-division id from the tax engine for the given parameter
    /// </summary>
    /// <param name="_taxCode">
    /// The Symmetry tax code to use for the lookup
    /// </param>
    /// <param name="_checkTaxInfo">
    /// Check the state, tax type, municipality, and school district before calling into tax engine
    /// </param>
    /// <returns>
    /// The political sub-division ID for the given arguement
    /// </returns>
    public static PayrollPoliticalSubdivisionId getPoliticalSubDivisionByTaxCode(PayrollTaxCodeId _taxCode,
        boolean _checkTaxInfo = true)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreTaxBasisForSymmetry</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Maps the pre tax basis to the symmetry specific benefit type values.
    /// </summary>
    /// <param name="_preTaxBasis">
    ///     Specifies the pre tax basis value.
    /// </param>
    /// <returns>
    ///     The corresponding ste benefit type enum value.
    /// </returns>
    public static int getPreTaxBasisForSymmetry(PayrollPreTaxBasis _preTaxBasis)
    {
        int     enumVal;

        switch (_preTaxBasis)
        {
            case PayrollPreTaxBasis::None:
                enumVal = enum2int(0);
                break;

            case PayrollPreTaxBasis::_401k:
                enumVal = enum2int(PRLSTEBenefitType::_401K);
                break;

            case PayrollPreTaxBasis::Roth401k:
                enumVal = enum2int(PRLSTEBenefitType::_Roth401K);
                break;

            case PayrollPreTaxBasis::_403b:
                enumVal = enum2int(PRLSTEBenefitType::_403B);
                break;

            case PayrollPreTaxBasis::Roth403b:
                enumVal = enum2int(PRLSTEBenefitType::_Roth403B);
                break;

            case PayrollPreTaxBasis::_457:
                enumVal = enum2int(PRLSTEBenefitType::_457);
                break;

            case PayrollPreTaxBasis::Section125:
                enumVal = enum2int(PRLSTEBenefitType::_125);
                break;

            case PayrollPreTaxBasis::FSA:
                enumVal = enum2int(PRLSTEBenefitType::_FSA);
                break;

            case PayrollPreTaxBasis::Custom:
                enumVal = enum2int(PRLSTEBenefitType::_Custom);
                break;

            case PayrollPreTaxBasis::Roth457:
                enumVal = enum2int(PRLSTEBenefitType::_Roth457);
                break;

            case PayrollPreTaxBasis::FSADependent:
                enumVal = enum2int(PRLSTEBenefitType::_FSADependent);
                break;

        }

        return enumVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchoolDistricts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>PrlTmpMunSchool</c> table with school districts that meet the
    /// specified criteria.
    /// </summary>
    /// <param name="_zipCode">
    /// The zip code value of the GNIS location to lookup.
    /// </param>
    /// <param name="_state">
    /// The state value of the GNIS location to lookup.
    /// </param>
    /// <param name="_city">
    /// The city value of the GNIS location to lookup.
    /// </param>
    /// <param name="_county">
    /// The county value of the GNIS location to lookup.
    /// </param>
    /// <param name="_municipalityName">
    /// The municipality name value of the GNIS location to lookup.
    /// </param>
    /// <param name="_schoolDistrictName">
    /// The school district name value of the GNIS location to lookup.
    /// </param>
    /// <returns>
    /// A <c>PrlTmpMunSchool</c> table buffer containing the inserted record or records
    /// of school districts that meet the specified criteria.
    /// </returns>
    public static PrlTmpMunSchool getSchoolDistricts(str _zipCode = '',
        str _state = '',
        str _city = '',
        str _county = '',
        str _municipalityName = '',
        str _schoolDistrictName = '')
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCodeSegment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the value of the tax code at the specified segment.
    /// </summary>
    /// <param name="_taxCode">
    ///     The value of the tax code to extract from.
    /// </param>
    /// <param name="_segmentNumber">
    ///     The segment number to extract.
    /// </param>
    /// <returns>
    ///     The value of the tax code at the given segment number.
    /// </returns>
    public static str getTaxCodeSegment(str _taxCode, PayrollTaxCodeSegment _segmentNumber)
    {
        List            list;
        ListEnumerator  listEnum;
        str             token;
        int             i=0;

        list = strSplit(_taxCode, #DASH);
        listEnum = list.getEnumerator();

        while (listEnum.moveNext())
        {
            i++;
            if (i == _segmentNumber)
            {
                token = listEnum.current();
                break;
            }
        }

        return token;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxCodeSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of a tax code at a given segment with a given value.
    /// </summary>
    /// <param name="_taxCode">
    /// The original tax code.
    /// </param>
    /// <param name="_segmentNumber">
    /// The segment number to replace.
    /// </param>
    /// <param name="_newSegmentValue">
    /// The desired value of the specified segment.
    /// </param>
    /// <returns>
    /// The updated tax code.
    /// </returns>
    public static str setTaxCodeSegment(str _taxCode, PayrollTaxCodeSegment _segmentNumber, str _newSegmentValue)
    {
        List taxCodeSegments = strSplit(_taxCode, #DASH);
        ListEnumerator taxCodeSegmentsEnumerator = taxCodeSegments.getEnumerator();
        taxCodeSegmentsEnumerator.moveNext();

        int currentTaxCodeSegmentNumber = 1;

        // Initialize the new tax code to either the new segment value or the first segment of the current tax code,
        // depending on the desired segment number.
        str taxCodeWithUpdatedSegmentValue = _segmentNumber == currentTaxCodeSegmentNumber ? _newSegmentValue
                                                                                           : taxCodeSegmentsEnumerator.current();

        // Iterate over remaining segments, adding each to the new tax code
        while (taxCodeSegmentsEnumerator.moveNext())
        {
            currentTaxCodeSegmentNumber++;

            // If the current tax code segment number matches the desired segment number,
            // add the new value instead of the existing value
            if (currentTaxCodeSegmentNumber == _segmentNumber)
            {
                taxCodeWithUpdatedSegmentValue += #DASH + _newSegmentValue;
            }
            else
            {
                taxCodeWithUpdatedSegmentValue += #DASH + taxCodeSegmentsEnumerator.current();
            }
        }

        return taxCodeWithUpdatedSegmentValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxEngineCodeCompatibilityVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax engine code compatibility version that is currently installed on
    /// the server in the base tax data xml file.
    /// </summary>
    /// <returns>
    /// The tax engine code compatibility version that is currently installed on
    /// the server in the base tax data xml file.
    /// </returns>
    /// <remarks>
    /// This version number represents the last version of the ste-net.dll with a new API that
    /// needed X++ application logic to uptake.
    /// </remarks>
    public static str getTaxEngineCodeCompatibilityVersion()
    {
        XmlDocument sourceXML;
        XmlNode versionNode;
        str version;

        sourceXML = PayrollTaxEngineUtil::loadBaseTaxDataXmlDocument();

        try
        {
            versionNode = sourceXML.selectSingleNode('//Record[@name="HcmSharedParameters"]');
            version = versionNode.selectSingleNode('Field[@name="TaxEngineCodeCompatibilityVersion"]').text();
        }
        catch
        {
            error("@Payroll:ThereInAProblemWithThePayrollTaxUpdateDataPleaseReinstallThe");
        }

        return version;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxEngineLocationCodeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of <c>Symmetry.TaxEngine.LocationCode</c> objects that match the postal location and the
    /// lookup type determined from the <c>_symmetryLocationCode</c> parameter.
    /// </summary>
    /// <param name="_symmetryLocationCode">
    /// The location code that will be passed to the engine to determine the data to retrieve.
    /// </param>
    /// <param name="_zipCode">
    /// The zip code value of the GNIS location to lookup.
    /// </param>
    /// <param name="_state">
    /// The state value of the GNIS location to lookup.
    /// </param>
    /// <param name="_city">
    /// The city value of the GNIS location to lookup.
    /// </param>
    /// <param name="_county">
    /// The county value of the GNIS location to lookup.
    /// </param>
    /// <param name="_municipalityName">
    /// The municipality name value of the GNIS location to lookup.
    /// </param>
    /// <param name="_schoolDistrictName">
    /// The school district name value of the GNIS location to lookup.
    /// </param>
    /// <returns>
    /// A list of <c>Symmetry.TaxEngine.LocationCode</c> objects representing the locations that matched the address.
    /// </returns>
    private static System.Collections.ArrayList getTaxEngineLocationCodeList(int _symmetryLocationCode,
        str _zipCode = '',
        str _state = '',
        str _city = '',
        str _county = '',
        str _municipalityName = '',
        str _schoolDistrictName = '')
    {
        return new System.Collections.ArrayList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxEngineVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the Symmetry Tax Engine.
    /// </summary>
    /// <returns>
    /// Returns a string value of the tax data version that the Symmetry Tax Engine was built against.
    /// </returns>
    public static str getTaxEngineVersion()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTableVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the version of the tax tables that are currently installed on the server.
    /// </summary>
    /// <returns>
    /// The version string of the tax tables that are currently installed on the server.
    /// </returns>
    public static str getTaxTableVersion()
    {
        str                 versionString;
        InteropPermission   permission = new InteropPermission(InteropKind::ClrInterop);

        permission.assert();

        CodeAccessPermission::revertAssert();

        // Return true if the version string is not empty
        return PayrollTaxEngineUtil::parseTaxTableVersion(versionString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNoStateIncomeTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes the state enum and returns if the state has a state income tax or not
    /// </summary>
    /// <param name="_stateLocation">
    /// The state to check for state income tax
    /// </param>
    /// <returns>
    /// True if the the given state has no state income tax, otherwise false
    /// </returns>
    public static boolean hasNoStateIncomeTax(PayrollUSState _stateLocation)
    {
        boolean hasNoStateIncomeTax;

        switch (_stateLocation)
        {
            case PayrollUSState::AK :
            case PayrollUSState::FL :
            case PayrollUSState::NH :
            case PayrollUSState::NV :
            case PayrollUSState::SD :
            case PayrollUSState::TN :
            case PayrollUSState::TX :
            case PayrollUSState::WA :
            case PayrollUSState::WY :
                hasNoStateIncomeTax = true;
                break;

            default :
                hasNoStateIncomeTax = false;
        }

        return hasNoStateIncomeTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadBaseTaxDataXmlDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loads the base tax data xml document
    /// </summary>
    /// <returns>
    ///     Returns an <c>XmlDocument</c> object of base tax data
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Throws an exception if no XML is found.
    /// </exception>
    public static XmlDocument loadBaseTaxDataXmlDocument()
    {
        return XmlDocument::newBlank();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxEngineLogFileForDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loads the tax engine log file for the specified pay statement document number.
    /// </summary>
    /// <param name="_documentNumber">
    ///     document number is passed.
    /// </param>
    /// <returns>
    ///     Returns a <c>StreamReader</c> instance of a tax engine log file if the log file
    ///     exists, otherwise returns null.
    /// </returns>
      public static StreamReader getTaxEngineLogFileForDocumentNumber(str _documentNumber)
      {
          var emptyStream = new System.IO.MemoryStream();
          return new System.IO.StreamReader(emptyStream);
      }

]]></Source>
			</Method>
			<Method>
				<Name>logExistsForDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a log file exists for the specified pay statement.
    /// </summary>
    /// <param name="_documentNumber">
    ///     document number is passed.
    /// </param>
    /// <returns>
    ///     True if the specified log file exists.
    /// </returns>
    public static boolean logExistsForDocumentNumber(str _documentNumber)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLogForDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the tax engine log file for the specified pay statement.
    /// </summary>
    /// <param name="_documentNumber">
    ///     document number is passed.
    /// </param>
    public static void deleteLogForDocumentNumber(str _documentNumber)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>money2Real</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns an Amount type initialized to the value of
    ///     the passed-in money amount.
    /// </summary>
    /// <returns>
    ///     The value from the money parameter returned as an x++ amount.
    /// </returns>
    public static Amount money2Real()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseTaxTableVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines and retrieves the tax table version out of a version string that
    /// is supplied by the tax engine.
    /// </summary>
    /// <param name="_taxTableVersionString">
    /// The full tax engine version string to be parsed.
    /// </param>
    /// <returns>
    /// The tax table version string for the data, only.
    /// </returns>
    /// <remarks>
    /// The version string returned by the tax engine has two components: the version of
    /// the tax engine assembly and the version of the tax table data. This method returns
    /// the latter value.
    /// </remarks>
    public static str parseTaxTableVersion(str _taxTableVersionString)
    {
        int     colonPosition;

        // Return the last section of the version string, assuming it was passed in
        colonPosition = strFind(_taxTableVersionString, ':', 1, strlen(_taxTableVersionString));
        return subStr(_taxTableVersionString, colonPosition + 2, strlen(_taxTableVersionString) - colonPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWorkerTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the worker tax codes based on the passed in worker tax region value.
    /// </summary>
    /// <param name="_workerTaxRegion">
    /// The worker tax region value for which to create the worker tax codes.
    /// </param>
    /// <param name="_isNewTaxRegion">
    /// Specifies if the method is being called for a new tax region; optional.
    /// </param>
    public static void refreshWorkerTaxCodes(PayrollWorkerTaxRegion _workerTaxRegion,
        boolean _isNewTaxRegion=true)
    {
        container taxCodeList;

        // If not paid by legal entity set, explain why nothing was done
        if (_isNewTaxRegion && !HcmWorker_Extension::isPaidByLegalEntity(_workerTaxRegion.Worker))
        {
            warning("@Payroll:NoTaxCodeRecordsWereCreatedInTheNewWorkerTaxRegionTheWorkerD");
            return;
        }

        taxCodeList = PayrollSetup::refreshWorkerTaxRegionTaxesAllTime(_workerTaxRegion, true);
        if (taxCodeList)
        {
            PayrollTaxEngineUtil::showTaxAdditionsForWorker(_workerTaxRegion.Worker, con2List(taxCodeList));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupMunicipalitiesLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>formRun</c> object that can be used for performing a lookup on municipalities using the <c>PayrollMunicipalitySchoolLookup</c> form.
    /// </summary>
    /// <param name="_zipCode">
    /// The zip code value of the GNIS location to lookup.
    /// </param>
    /// <param name="_state">
    /// The state value of the GNIS location to lookup.
    /// </param>
    /// <param name="_city">
    /// The city value of the GNIS location to lookup.
    /// </param>
    /// <param name="_county">
    /// The county value of the GNIS location to lookup.
    /// </param>
    /// <param name="_municipalityName">
    /// The municipality name value of the GNIS location to lookup.
    /// </param>
    /// <param name="_schoolDistrictName">
    /// The school district name value of the GNIS location to lookup.
    /// </param>
    /// <returns>
    /// Retrieves a <c>formRun</c> object that has been initialized for the <c>PayrollMunicipalitySchoolLookup</c> form.
    /// </returns>
    public static FormRun setupMunicipalitiesLookup(str _zipCode = '',
        str _state = '',
        str _city = '',
        str _county = '',
        str _municipalityName = '',
        str _schoolDistrictName = '')
    {
        Args args;
        Object formRun;
        PrlTmpMunSchool prlTmpMunSchool;

        prlTmpMunSchool = PayrollTaxEngineUtil::getMunicipalities(_zipCode,
            _state,
            _city,
            _county,
            _municipalityName,
            _schoolDistrictName);

        args = new Args(formStr(PayrollMunicipalitySchoolLookup));
        args.record(prlTmpMunSchool);
        args.parmEnum(#MUNICIPALITY);
        formRun = ClassFactory::formRunClassOnClient(args);

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupSchoolDistrictsLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>formRun</c> object that can be used for performing a lookup on school districts using the <c>PayrollMunicipalitySchoolLookup</c> form.
    /// </summary>
    /// <param name="_zipCode">
    /// The zip code value of the GNIS location to lookup.
    /// </param>
    /// <param name="_state">
    /// The state value of the GNIS location to lookup.
    /// </param>
    /// <param name="_city">
    /// The city value of the GNIS location to lookup.
    /// </param>
    /// <param name="_county">
    /// The county value of the GNIS location to lookup.
    /// </param>
    /// <param name="_municipalityName">
    /// The municipality name value of the GNIS location to lookup.
    /// </param>
    /// <param name="_schoolDistrictName">
    /// The school district name value of the GNIS location to lookup.
    /// </param>
    /// <returns>
    /// Retrieves a <c>formRun</c> object that has been initialized for the <c>PayrollMunicipalitySchoolLookup</c> form.
    /// </returns>
    public static FormRun setupSchoolDistrictsLookup(str _zipCode = '',
        str _state = '',
        str _city = '',
        str _county = '',
        str _municipalityName = '',
        str _schoolDistrictName = '')
    {
        #PayrollConstants
        Args        args;
        Object      formRun;
        PrlTmpMunSchool prlTmpMunSchool;

        prlTmpMunSchool = PayrollTaxEngineUtil::getSchoolDistricts(_zipCode,
            _state,
            _city,
            _county,
            _municipalityName,
            _schoolDistrictName);

        args = new Args(formStr(PayrollMunicipalitySchoolLookup));
        args.record(prlTmpMunSchool);
        args.parmEnum(#SCHOOLDISTRICT);
        formRun = ClassFactory::formRunClassOnClient(args);
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxAdditionsForWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays in an infolog the tax codes and tax code parameters that have been added for a worker.
    /// </summary>
    /// <param name="_worker">
    /// The <c>HcmWorkerRecId</c> that uniquely identifies the worker for whom to
    /// report tax additions.
    /// </param>
    /// <param name="_taxCodeList">
    /// A container that holds the list of tax code and parameters that have been added to
    /// the specified worker as part o the calling process.
    /// </param>
    /// <remarks>
    /// The container is populated by another process that is first run by the consumer.
    /// </remarks>
    public static void showTaxAdditionsForWorker(HcmWorkerRecId _worker, List _taxCodeList)
    {
        str             name;
        str             legalEntity;
        ListEnumerator  listEnumerator = _taxCodeList.getEnumerator();

        name = HcmWorker::worker2Name(_worker);
        legalEntity = CompanyInfo::getDataArea(CompanyInfo::current());

        info(strFmt("@Payroll:NewTaxCodesAndOrTaxCodeParametersWereAddedWithDefaultValuesFor1InThe2LegalEntity", name, legalEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2String</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a <c>str</c> to a <c>System.String</c> object.
    /// </summary>
    /// <param name="_string">
    ///     The <c>str</c> to convert.
    /// </param>
    /// <returns>
    ///     A <c>System.String</c> object.
    /// </returns>
    public static System.String str2String(str _string)
    {
        System.String result;
        System.String nullString = null;

        if (!_string)
        {
            result = nullString;
        }
        else
        {
            result = _string;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2TaxType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the PayrollTaxCodeType value, given a valid tax code.
    /// </summary>
    /// <param name="_taxCode">
    ///     The passed in tax code to get the segment from.
    /// </param>
    /// <returns>
    ///     The PayrollTaxCodeType value, that matches the 4th segment of the passed in
    ///     tax code.
    /// </returns>
    public static PayrollTaxCodeType str2TaxType(str _taxCode)
    {
        DictEnum                taxCodeTypeEnum = new DictEnum(enumNum(PayrollTaxCodeType));
        PayrollTaxCodeType      taxType;
        str                     taxCodeId;

        taxCodeId = PayrollTaxEngineUtil::getTaxCodeSegment(_taxCode, PayrollTaxCodeSegment::TaxCodeType);

        taxType = taxCodeTypeEnum.symbol2Value(taxCodeId);

        return taxType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCalculation2TaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retuns the tax code that corresponds to the specified TaxCalculation returned by the
    ///     tax engine.
    /// </summary>
    /// <returns>
    ///     The tax code, first 5 segments of the code returned by the tax engine.
    /// </returns>
    public static PayrollTaxCodeId taxCalculation2TaxCode()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodeStr2GnisStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the GNIS location code portion of the specified Symmetry tax code.
    /// </summary>
    /// <param name="_taxCodeId">
    /// The Symmetry tax code identifier from which to retrieve the GNIS location code.
    /// </param>
    /// <returns>
    /// A GNIS location code.
    /// </returns>
    public static PayrollGNIS taxCodeStr2GnisStr(PayrollTaxCodeId _taxCodeId)
    {
        PayrollGNIS     locationCode;
        int             i = 1,
                        currentPosition = 1;

        // The GNIS portion of a Symmetry tax code is always the first three segments
        for (i=1; i<=3; i++)
        {
            currentPosition = strFind(_taxCodeId, #DASH, currentPosition + 1, 12);
        }

        locationCode = strDel(_taxCodeId, currentPosition, (strLen(_taxCodeId) + 1) - currentPosition);

        return locationCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>