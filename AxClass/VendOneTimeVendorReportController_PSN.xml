<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOneTimeVendorReportController_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller class for one-time vendor error report.
/// </summary>
class VendOneTimeVendorReportController_PSN extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RecId                                 tmpTableRecId;
        VendOneTimeVendorTmp_PSN              vendOneTimeVendorTmp_PSN;
        SRSReportRunPermission                permission;
        VendOneTimeVendorReportContract_PSN   vendOneTimeVendorReportContract_PSN;
        VendOneTimeVendorReportController_PSN vendOneTimeVendorReportController_PSN;

        permission                          = new SRSReportRunPermission();
        vendOneTimeVendorReportContract_PSN = new VendOneTimeVendorReportContract_PSN();

        try
        {
            if (_args.record().TableId == tableNum(VendOneTimeVendorTmp_PSN))
            {
                vendOneTimeVendorTmp_PSN = _args.record();
            }

            if (_args.parmObject())
            {
                vendOneTimeVendorReportContract_PSN = _args.parmObject();
            }

            // Access permission
            permission.assert();

            // store the session context in the temporary cache
            tmpTableRecId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(vendOneTimeVendorTmp_PSN);

            // revert the access permissions
            CodeAccessPermission::revertAssert();

            // Invoking import one-time vendor error report
            vendOneTimeVendorReportContract_PSN.parmVendOneTimeVendorTmpRecId(tmpTableRecId);
            vendOneTimeVendorReportController_PSN = new VendOneTimeVendorReportController_PSN();
            vendOneTimeVendorReportController_PSN.parmReportName(ssrsReportStr(Vendonetimevendinvoices, VendOneTimeVendorReportDesign));
            vendOneTimeVendorReportController_PSN.parmArgs(_args);
            vendOneTimeVendorReportController_PSN.parmShowDialog(false);
            vendOneTimeVendorReportController_PSN.parmReportContract().parmRdpContract(vendOneTimeVendorReportContract_PSN);
            vendOneTimeVendorReportController_PSN.startoperation();
        }
        catch
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>