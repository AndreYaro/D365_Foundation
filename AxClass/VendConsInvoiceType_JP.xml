<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendConsInvoiceType_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>VendConsInvoiceType_JP</c> is the type class for vender consolidation invoice.
/// </summary>
public class VendConsInvoiceType_JP extends CustVendConsInvoiceType_JP
{
    #isoCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildConstructQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for Consolidated Invoice Construction.
    /// </summary>
    /// <returns>
    /// The constructed query.
    /// </returns>
    public Query buildConstructQuery()
    {
        query query = new query(queryStr(VendConsInvoiceConstruction_JP));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateConsInvoiceQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for Consolidated Invoice Updating.
    /// </summary>
    /// <returns>
    /// The query for updating.
    /// </returns>
    public Query buildUpdateConsInvoiceQuery()
    {
        query query = new query(queryStr(VendConsInvoiceUpdate_JP));
        QueryBuildDataSource qbdsVendInvoiceJour = SysQuery::findOrCreateDataSource(query, tableNum(VendInvoiceJour), tableNum(VendTable));
        qbdsVendInvoiceJour.relations(false);
        qbdsVendInvoiceJour.joinMode(JoinMode::InnerJoin);
        qbdsVendInvoiceJour.addLink(fieldNum(VendTable,AccountNum), fieldNum(VendInvoiceJour, InvoiceAccount));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for Consolidated Invoice updating.
    /// </summary>
    /// <returns>
    /// The constructed query.
    /// </returns>
    public Query buildUpdateQuery()
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        Query                   query;

        query = this.buildUpdateConsInvoiceQuery();

        qbds = query.dataSourceTable(tableNum(VendTable));
        qbr = qbds.findRange(fieldNum(VendTable, AccountNum));
        qbr.value(consInvoice.AccountNum);
        qbr.status(RangeStatus::Hidden);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of <c>VendConsInvoice_JP</c> based on a given
    /// <c>_consInvoice</c> record.
    /// </summary>
    /// <param name="_consInvoice">
    /// The given <c>_consInvoice</c>
    /// </param>
    /// <returns>
    /// The constructed <c>VendConsInvoice_JP</c> instance.
    /// </returns>
    public static VendConsInvoiceType_JP construct(VendConsInvoice_JP _consInvoice)
    {
        VendConsInvoiceType_JP  vendConsInvoiceType_JP;

        vendConsInvoiceType_JP = new VendConsInvoiceType_JP();
        vendConsInvoiceType_JP.parmCustVendConsInvoice_JP(_consInvoice);

        return  vendConsInvoiceType_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates consolidated invoice.
    /// </summary>
    /// <param name="_query">
    /// The given query
    /// </param>
    /// <param name="_executionDate">
    /// The execution date.
    /// </param>
    /// <param name="_isConsDateSpecified">
    /// The specify a consolidation date.
    /// </param>
    /// <param name="_consDateSpecified">
    /// The consolidation date.
    /// </param>
    /// <returns>
    /// Returns object of the VendConsInvoice_JP basis the filters provided
    /// </returns>
    public static VendConsInvoice_JP create(
        Query _query,
        CustVendExecutionDate_JP _executionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        NoYesId _isConsDateSpecified = NoYes::No,
        CustVendConsDate_JP _consDateSpecified = dateNull())
    {
        return VendConsInvoiceType_JP::createV2(_query, _executionDate, _isConsDateSpecified, _consDateSpecified);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates consolidated invoice.
    /// </summary>
    /// <param name="_query">
    /// The given query
    /// </param>
    /// <param name="_executionDate">
    /// The execution date.
    /// </param>
    /// <param name="_isConsDateSpecified">
    /// The specify a consolidation date.
    /// </param>
    /// <param name="_consDateSpecified">
    /// The consolidation date.
    /// </param>
    /// <param name = "_consolidationCurrency">
    /// The consolidation currency
    /// </param>
    /// <returns>
    /// Returns object of the VendConsInvoice_JP basis the filters provided
    /// </returns>
    public static VendConsInvoice_JP createV2(
        Query _query,
        CustVendExecutionDate_JP _executionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        NoYesId _isConsDateSpecified = NoYes::No,
        CustVendConsDate_JP _consDateSpecified = dateNull(),
        VendCurrencyCode _consolidationCurrency = null)
    {
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;
        VendInvoiceJour         invoiceJour;
        VendConsInvoice_JP      consInvoice;
        CustVendAC              account;
        TransDate               consPeriodEndDate;

        qbds = _query.dataSourceTable(tablenum(VendInvoiceJour));
        // use the execution date to limit the result set, while consolidation date will be used as the final criteria below for invoice date.
        qbds.addRange(fieldNum(VendInvoiceJour, InvoiceDate)).value(queryRange(dateNull(), _executionDate));

        if(_consolidationCurrency && TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(false))
        {
            qbds.addRange(fieldNum(VendInvoiceJour, CurrencyCode)).value(_consolidationCurrency);
        }
        qbds.addSortField(fieldNum(VendInvoiceJour, InvoiceAccount));
        queryRun = new QueryRun(_query);

        ttsbegin;
        while (queryRun.next())
        {
            invoiceJour = queryRun.get(tablenum(VendInvoiceJour));

            if (queryRun.changed(tablenum(VendInvoiceJour)))
            {
                if (!CustVendConsInvoiceType_JP::isInvoiceJourPaid(invoiceJour))
                {
                    // When the Use consolidation date specified below is checked, ignore the consolidation date on vendor table, and filter invoices with Invoice date by consolidation date.
                    // When it is not checked, filter invoices with Invoice date by current consolidation period end date on vendor.
                    if (_isConsDateSpecified)
                    {
                        consPeriodEndDate = _consDateSpecified;
                    }
                    else
                    {
                        consPeriodEndDate = CustVendConsInvoiceType_JP::getCurrentConsPeriodEndDate(invoiceJour.InvoiceAccount, CustVendACType::Vend, _executionDate);
                    }

                    if (invoiceJour.InvoiceDate <= consPeriodEndDate)
                    {
                        if (account != invoiceJour.InvoiceAccount)
                        {
                            account = invoiceJour.InvoiceAccount;
                            consInvoice = VendConsInvoiceType_JP::insertConsInvoice(invoiceJour, _executionDate, _isConsDateSpecified, _consDateSpecified);
                        }

                        if (consInvoice)
                        {
                            VendConsInvoiceType_JP::updateInvoiceJour(invoiceJour, consInvoice);
                        }
                    }
                }
            }
        }
        ttscommit;

        return consInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertConsInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a consolidated invoice.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The given <c>VendInvoiceJour</c> invoice.
    /// </param>
    /// <param name="_executionDate">
    /// The execution date.
    /// </param>
    /// <param name="_isConsDateSpecified">
    /// The specify a consolidation date.
    /// </param>
    /// <param name="_consDateSpecified">
    /// The consolidation date.
    /// </param>
    /// <returns>
    /// The consolidated invoice.
    /// </returns>
    private static CustVendConsInvoice_JP insertConsInvoice(
        VendInvoiceJour _vendInvoiceJour,
        CustVendExecutionDate_JP _executionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        NoYesId _isConsDateSpecified = NoYes::No,
        CustVendConsDate_JP _consDateSpecified = dateNull())
    {
        VendConsInvoice_JP  consInvoiceLocal;

        consInvoiceLocal.VendTable = _vendInvoiceJour.InvoiceAccount;
        consInvoiceLocal.initValue(_executionDate, _isConsDateSpecified, _consDateSpecified);
        consInvoiceLocal.PaymTerm  = _vendInvoiceJour.Payment;
        consInvoiceLocal.DueDate   = consInvoiceLocal.CustVendConsInvoice_JP::calcDueDate();
        consInvoiceLocal.insert();
        return consInvoiceLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendConsInvoiceEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether 'Use consolidated invoice for vendor' can be used.
    /// </summary>
    /// <param name="_raiseError">
    /// Indicates whether an error will be thrown out.
    /// </param>
    /// <returns>
    /// Returns true when country region code is JP and parameter is allowed to use. Otherwise returns false.
    /// </returns>
    public static boolean isVendConsInvoiceEnabled(boolean _raiseError = false)
    {
        boolean     ret;
        boolean     isLegalEntity_JP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);

        ret = isLegalEntity_JP
            && VendParameters::find().VendConsInvoice_JP;

        if (isLegalEntity_JP
            && !ret
            && _raiseError)
        {
            // The 'Use consolidated invoice for vendor' parameter is not selected.
            throw error("@GLS62969");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates consolidated invoice.
    /// </summary>
    /// <param name="_consInvoice">
    /// The record of consolidated invoice.
    /// </param>
    /// <param name="_query">
    /// The given query
    /// </param>
    public static void update(
        VendConsInvoice_JP  _consInvoice,
        Query               _query)
    {
        QueryRun            queryRun = new QueryRun(_query);
        VendInvoiceJour     invoiceJour;

        ttsbegin;
        while (queryRun.next())
        {
            invoiceJour = queryRun.get(tablenum(VendInvoiceJour));

            if (queryRun.changed(tablenum(VendInvoiceJour)))
            {
                if (!CustVendConsInvoiceType_JP::isInvoiceJourPaid(invoiceJour))
                {
                    Date consDate = _consInvoice.ConsDate;

                    if (invoiceJour.InvoiceDate <= consDate)
                    {
                        VendConsInvoiceType_JP::updateInvoiceJour(invoiceJour, _consInvoice);
                    }
                    
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates related invoice journal.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The given <c>VendInvoiceJour</c>
    /// </param>
    /// <param name="_consInvoice">
    /// The given <c>CustVendConsInvoice_JP</c>.
    /// </param>
    private static void updateInvoiceJour(
        VendInvoiceJour     _vendInvoiceJour,
        VendConsInvoice_JP  _consInvoice)
    {
        VendInvoiceJour     invoiceJourUpdate;

        ttsbegin;
        invoiceJourUpdate = VendInvoiceJour::findRecId(_vendInvoiceJour.RecId, true);
        invoiceJourUpdate.VendConsInvoice_JP = _consInvoice.RecId;
        invoiceJourUpdate.updateDue_JP();
        invoiceJourUpdate.update();

        // Since the invoice journal is marked with the consolidated invoice automatically,
        // so updates the related transactions accordingly.
        CustVendConsInvoiceType_JP::updateTransByMarkJour(invoiceJourUpdate, true);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    internal protected CurrencyCode getCurrencyCode()
    {
        VendInvoiceJour vendInvoiceJour;

        select firstonly CurrencyCode from vendInvoiceJour
            where vendInvoiceJour.VendConsInvoice_JP == consInvoice.RecId;

        return vendInvoiceJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalName</Name>
				<Source><![CDATA[
    internal protected LedgerJournalNameId getJournalName()
    {
        return VendParameters::find().ConsInvoiceLedgerJournalNameId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalACType</Name>
				<Source><![CDATA[
    internal protected LedgerJournalACType getJournalACType()
    {
        return LedgerJournalACType::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasHistoryInProgress</Name>
				<Source><![CDATA[
    internal protected boolean hasHistoryInProgress()
    {
        VendConsInvoiceHistory_JP consInvoiceHistoryPrevious;

        select firstonly RecId from consInvoiceHistoryPrevious
            where consInvoiceHistoryPrevious.ConsInvoiceRecId == consInvoice.RecId
                && consInvoiceHistoryPrevious.Status == CustVendConsInvoiceHistoryStatus_JP::InProgress;

        return consInvoiceHistoryPrevious.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>