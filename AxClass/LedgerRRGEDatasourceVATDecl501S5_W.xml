<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEDatasourceVATDecl501S5_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerRRGEDatasourceVATDecl501S5_W</c> class calculates values for sixth section of the VAT declaration.
/// </summary>
public class LedgerRRGEDatasourceVATDecl501S5_W extends LedgerRRGEDatasourceVATDeclarationBase_W
{
    int             lineNum;
    Map             values1Map;
    SetEnumerator   values1KeyEnumerator;
    Map             values2Map;
    SetEnumerator   values2KeyEnumerator;
    str             worksheetName1;
    str             worksheetName2;
    int             lastSectionNum;

    private const str Worksheet     = 'стр.8';
    private const int S5Table1Id    = 5010;
    private const int S5Table2Id    = 5020;
    private const int Field1Id      = 1;
    private const int Field2Id      = 2;
    private const int Field3Id      = 3;
    private const int Field4Id      = 4;
    private const int Field5Id      = 5;
    private const str Exclamation   = '!';
    private const str Quote         = "'";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>collectValues</Name>
				<Source><![CDATA[
    private void collectValues()
    {
        const int OperationCodesMaxCount = 17;

        RestoredVATSalesTaxTrans_RU restoredVATSalesTaxTrans;
        RestoredVATLogTable_RU      logTable;
        FactureJour_RU              factureJour;
        FactureTrans_RU             factureTrans;

        Map                         locValues1Map = new Map(Types::Integer, Types::Container);
        Map                         locValues2Map = new Map(Types::Container, Types::Container);

        void add2Record(int _key, VATOperationCode_RU _operationCode, Amount _baseAmount, TaxAmount _taxAmount, boolean _vatZero = true)
        {
            container   key = [_key, _operationCode];
            Amount      taxBaseVatZero, taxBaseVATStandard;
            Amount      taxAmountDecreaseVatZero, taxAmountDecreaseVATStandard;

            if (locValues2Map.exists(key))
            {
                [_operationCode, taxBaseVatZero, taxAmountDecreaseVatZero, taxBaseVATStandard, taxAmountDecreaseVATStandard] = locValues2Map.lookup(key);
            }

            if (_vatZero)
            {
                taxBaseVatZero              += _baseAmount;
                taxAmountDecreaseVatZero    += _taxAmount;
            }
            else
            {
                taxBaseVATStandard              += _baseAmount;
                taxAmountDecreaseVATStandard    += _taxAmount;
            }

            locValues2Map.insert(key, [_operationCode, taxBaseVatZero, taxAmountDecreaseVatZero, taxBaseVATStandard, taxAmountDecreaseVATStandard]);
        }

        void add1Record(TransDate _transDate, VATOperationCode_RU _operationCode, Amount _baseAmount, TaxAmount _taxAmount, boolean _vatZero = true)
        {
            int periodNum   = this.periodNum(_transDate);
            int yearNum     = year(_transDate);
            int key         = yearNum * 100 + periodNum;

            if (!_operationCode || !_taxAmount || !_baseAmount)
            {
                return;
            }

            if (!locValues1Map.exists(key))
            {
                locValues1Map.insert(key, [periodNum, yearNum]);
            }

            add2Record(key, _operationCode, _baseAmount, _taxAmount, _vatZero);
        }

        void reorderSectionNums()
        {
            int                 sectionNum;
            int                 tmpValue1, tmpValue2;
            int                 periodNum;
            int                 yearNum;
            int                 key;

            VATOperationCode_RU operationCode;
            Amount              taxBase1, taxBase2;
            Amount              taxAmountDecrease1, taxAmountDecrease2;
            MapEnumerator       me;

            Map                 sectionCodesCount = new Map(Types::Integer, Types::Integer);

            me = locValues1Map.getEnumerator();
            while (me.moveNext())
            {
                sectionNum++;
                [periodNum, yearNum] = me.currentValue();
                values1Map.insert(me.currentKey(), [periodNum, yearNum, sectionNum]);
            }

            me = locValues2Map.getEnumerator();
            while (me.moveNext())
            {
                [operationCode, taxBase1, taxAmountDecrease1, taxBase2, taxAmountDecrease2] = me.currentValue();
                taxAmountDecrease1   = decround(taxAmountDecrease1, 0);
                taxBase1             = decround(taxBase1, 0);

                taxAmountDecrease2   = decround(taxAmountDecrease2, 0);
                taxBase2             = decround(taxBase2, 0);

                [key] = me.currentKey();
                [periodNum, yearNum, sectionNum, tmpValue1, tmpValue2] = values1Map.lookup(key);
                if ((sectionCodesCount.exists(sectionNum) ? any2int(sectionCodesCount.lookup(sectionNum)) : 0) < OperationCodesMaxCount)
                {
                    sectionCodesCount.insert(sectionNum, sectionCodesCount.exists(sectionNum) ? any2int(sectionCodesCount.lookup(sectionNum)) + 1 : 1);
                    values2Map.insert(me.currentKey(), [operationCode, taxBase1, taxAmountDecrease1, taxBase2, taxAmountDecrease2, sectionNum]);
                }

                values1Map.insert(key, [periodNum, yearNum, sectionNum, tmpValue1 + taxAmountDecrease1, tmpValue2 + taxAmountDecrease2]);
            }
        }

        periodType = mthofyr(periodEnd) - mthofyr(periodStart) + 1;

        while select restoredVATSalesTaxTrans
            join TableId from logTable
                where restoredVATSalesTaxTrans.TransDate    >= periodStart
                   && restoredVATSalesTaxTrans.TransDate    <= periodEnd
                   && logTable.TransDate                    == restoredVATSalesTaxTrans.TransDate
                   && logTable.Approved
            join factureTrans
                join factureJour
                where factureTrans.FactureId                == restoredVATSalesTaxTrans.FactureId
                  &&  factureTrans.Module                   == restoredVATSalesTaxTrans.FactureModule
                  &&  factureTrans.InventTransId            == restoredVATSalesTaxTrans.InventTransId
                  &&  factureJour.FactureId                 == factureTrans.FactureId
                  &&  factureJour.Module                    == factureTrans.Module
                  && (factureJour.ProcessingType            == SalesBookFactureProcessingType_RU::VATZero
                  ||  factureJour.ProcessingType            == SalesBookFactureProcessingType_RU::VATZeroCorrection
                  ||  factureJour.ProcessingType            == SalesBookFactureProcessingType_RU::VATStandard
                  ||  factureJour.ProcessingType            == SalesBookFactureProcessingType_RU::VATStandardCorrection)

        {
            if ((factureJour.ProcessingType     == SalesBookFactureProcessingType_RU::VATZero            ||
                 factureJour.ProcessingType     == SalesBookFactureProcessingType_RU::VATZeroCorrection) &&
                 factureJour.ConfirmationDate                                                            &&
                 factureJour.ConfirmationDate   <  periodStart)
            {
                add1Record(factureJour.ConfirmationDate,
                           this.operationCode(factureTrans.TaxCode),
                           factureTrans.LineAmountMST,
                           restoredVATSalesTaxTrans.TaxReducedDirect + restoredVATSalesTaxTrans.TaxReducedIndirect + restoredVATSalesTaxTrans.TaxStandardDirect + restoredVATSalesTaxTrans.TaxStandardIndirect);
            }

            if ((factureJour.ProcessingType     == SalesBookFactureProcessingType_RU::VATStandard            ||
                 factureJour.ProcessingType     == SalesBookFactureProcessingType_RU::VATStandardCorrection) &&
               (!factureJour.ConfirmationDate                                                                ||
                 factureJour.ConfirmationDate   >  periodEnd)                                                &&
                 factureJour.expirationDate()   <  periodStart)
            {
                add1Record(factureJour.expirationDate(),
                           this.operationCode(factureTrans.TaxCode),
                           factureTrans.LineAmountMST,
                           restoredVATSalesTaxTrans.TaxReducedDirect + restoredVATSalesTaxTrans.TaxReducedIndirect + restoredVATSalesTaxTrans.TaxStandardDirect + restoredVATSalesTaxTrans.TaxStandardIndirect,
                           false);
            }
        }

        reorderSectionNums();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorksheet</Name>
				<Source><![CDATA[
    public str defaultWorksheet(int _tableId)
    {
        return Worksheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTables</Name>
				<Source><![CDATA[
    public void initTables()
    {
        const str TableName1	= 'Раздел 5 заголовок и строка 010';
        const str TableName2	= 'Раздел 5 таблица';
        const str Field1Req	    = 'КодОпер';
        const str Field1Name	= 'Код операции';
        const str Field1Cell	= 'A15:L15';
        const str Field2Req	    = 'НалБазаПод';
        const str Field2Name	= 'Налоговая база по  операциям, обоснованность  применения  налоговой ставки 0 процентов  по  которым  документально подтверждена  в  предыдущих  налоговых  периодах';
        const str Field2Cell	= 'A16:AD16';
        const str Field3Req	    = 'НалВычПод';
        const str Field3Name	= 'Налоговые вычеты по  операциям, обоснованность  применения  налоговой ставки 0 процентов  по  которым  документально подтверждена  в  предыдущих  налоговых  периодах';
        const str Field3Cell	= 'AE16:BH16';
        const str Field4Req	    = 'НалБазаНеПод';
        const str Field4Name	= 'Налоговая база по  операциям, обоснованность  применения  налоговой ставки 0 процентов  по  которым  документально не подтверждена  в  предыдущих  налоговых  периодах';
        const str Field4Cell	= 'BI16:CL16';
        const str Field5Req	    = 'НалВычНеПод';
        const str Field5Name	= 'Налоговые вычеты по  операциям, обоснованность  применения  налоговой ставки 0 процентов  по  которым  документально не подтверждена  в  предыдущих  налоговых  периодах';
        const str Field5Cell	= 'CM16:DP16';
        const str Field6Req	    = 'ОтчетГод';
        const str Field6Name	= 'Отчетный год';
        const str Field6Cell	= 'W10:AH10';
        const str Field7Req	    = 'Период';
        const str Field7Name	= 'Налоговый период (код)';
        const str Field7Cell	= 'BU10:BZ10';
        const str Field8Req	    = 'СумУменПод';
        const str Field8Name	= 'Сумма налога, исчисленная к уменьшению по данному разделу по операциям, обоснованность применения налоговой ставки 0 процентов по которым документально подтверждена в предыдущих налоговых периодах';
        const str Field8Cell	= 'AE50:BH50';
        const str Field9Req	    = 'СумУменНеПод';
        const str Field9Name	= 'Сумма налога, исчисленная к уменьшению по данному разделу по операциям, обоснованность применения налоговой ставки 0 процентов по которым документально не подтверждена в предыдущих налоговых периодах';
        const str Field9Cell	= 'CM50:DP50';

        super();

        this.addTable(S5Table1Id, TableName1);

        this.addField(S5Table1Id, Field1Id, Field6Req, Field6Name, Field6Cell, SysAlignment::AlignRight, 4, Minus);
        this.addField(S5Table1Id, Field2Id, Field7Req, Field7Name, Field7Cell, SysAlignment::AlignRight, 2, Zero);
        this.addField(S5Table1Id, Field3Id, Field8Req, Field8Name, Field8Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S5Table1Id, Field4Id, Field9Req, Field9Name, Field9Cell, SysAlignment::AlignLeft, 10, Minus);

        this.addTable(S5Table2Id, TableName2);

        this.addField(S5Table2Id, Field1Id, Field1Req, Field1Name, Field1Cell, SysAlignment::AlignLeft,  0);
        this.addField(S5Table2Id, Field2Id, Field2Req, Field2Name, Field2Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S5Table2Id, Field3Id, Field3Req, Field3Name, Field3Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S5Table2Id, Field4Id, Field4Req, Field4Name, Field4Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S5Table2Id, Field5Id, Field5Req, Field5Name, Field5Cell, SysAlignment::AlignLeft, 10, Minus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next(int _tableId)
    {
        boolean res;

        switch (_tableId)
        {
            case S5Table1Id:
                res = this.nextTable1();
                break;

            case S5Table2Id:
                res = this.nextTable2();
                break;
        }

        if (!res)
        {
            this.checkDynamicWorkdsheetInitialized(_tableId);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTable1</Name>
				<Source><![CDATA[
    private boolean nextTable1()
    {
        int     periodNum;
        int     yearNum;
        int     sectionNum;
        Amount  taxAmountDecrease1, taxAmountDecrease2;

        if (vatDeclaration && values1KeyEnumerator && values1KeyEnumerator.moveNext() && values1Map.exists(values1KeyEnumerator.current()))
        {
            [periodNum, yearNum, sectionNum, taxAmountDecrease1, taxAmountDecrease2] = values1Map.lookup(values1KeyEnumerator.current());

            vatDeclaration.setValue(Field1Id,  S5Table1Id, yearNum);
            vatDeclaration.setValue(Field2Id,  S5Table1Id, periodNum);
            vatDeclaration.setValue(Field3Id,  S5Table1Id, taxAmountDecrease1);
            vatDeclaration.setValue(Field4Id,  S5Table1Id, taxAmountDecrease2);

            worksheetName1 = this.worksheetName(sectionNum, S5Table1Id);

            this.setInitialized(S5Table1Id);

            if (!this.initialized(S5Table2Id))
            {
                this.nextTable2();
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTable2</Name>
				<Source><![CDATA[
    private boolean nextTable2()
    {
        VATOperationCode_RU operationCode;
        Amount              taxBaseVatZero, taxBaseVATStandard;
        Amount              taxAmountDecreaseVatZero, taxAmountDecreaseVATStandard;
        int                 sectionNum;

        if (vatDeclaration && values2KeyEnumerator && values2KeyEnumerator.moveNext() && values2Map.exists(values2KeyEnumerator.current()))
        {
            [operationCode, taxBaseVatZero, taxAmountDecreaseVatZero, taxBaseVATStandard, taxAmountDecreaseVATStandard, sectionNum] = values2Map.lookup(values2KeyEnumerator.current());

            if (lastSectionNum != sectionNum)
            {
                lineNum         = 0;
                lastSectionNum  = sectionNum;
                worksheetName2  = this.worksheetName(sectionNum, S5Table2Id);
            }

            lineNum++;

            vatDeclaration.setValue(Field1Id, S5Table2Id, operationCode);
            vatDeclaration.setValue(Field2Id, S5Table2Id, taxBaseVatZero);
            vatDeclaration.setValue(Field3Id, S5Table2Id, taxAmountDecreaseVatZero);
            vatDeclaration.setValue(Field4Id, S5Table2Id, taxBaseVATStandard);
            vatDeclaration.setValue(Field5Id, S5Table2Id, taxAmountDecreaseVATStandard);

            this.setInitialized(S5Table2Id);

            if (!this.initialized(S5Table2Id))
            {
                this.nextTable1();
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageCount</Name>
				<Source><![CDATA[
    public int pageCount(int _tableId)
    {
        if (_tableId == S5Table1Id && !worksheetDeleted && values1Map)
        {
            return values1Map.elements();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset(int _tableId)
    {
        super(S5Table1Id);
        super(S5Table2Id);

        if (!worksheetDeleted)
        {
            lastSectionNum = 0;

            values1Map = new Map(Types::Integer, Types::Container);
            values2Map = new Map(Types::Container, Types::Container);

            this.collectValues();

            values1KeyEnumerator = values1Map.keySet().getEnumerator();
            values2KeyEnumerator = values2Map.keySet().getEnumerator();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCellCode</Name>
				<Source><![CDATA[
    public void updateCellCode(int _fieldId, int _tableId)
    {
        str aWorksheet;
        str cell;
        int cellRow;
        str cellName;

        if (evaluator && evaluator.allowUpdateKeyCode())
        {
            switch (_tableId)
            {
                case S5Table1Id:
                    if (worksheetName1)
                    {
                        cell = ComExcelDocument_RU::replaceWorksheetName(evaluator.keyCode(), worksheetName1);
                    }
                    break;

                case S5Table2Id:
                    [aWorksheet, cell] = str2con_RU(evaluator.keyCode(), '!');

                    if (!cell)
                    {
                        cell = aWorksheet;
                    }

                    if (cell)
                    {
                        [cellName, cellRow] = ComExcelDocument_RU::cell2ColNameRow(cell, false);
                        cell                = ComExcelDocument_RU::replaceWorksheetName(ComExcelDocument_RU::changeCellRows(cell, cellRow + (lineNum - 1) * 2), worksheetName2);
                    }
                    break;
            }

            if (cell)
            {
                evaluator.updateKeyCode(cell);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S5_W construct()
    {
        return new LedgerRRGEDatasourceVATDecl501S5_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVATDeclaration</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S5_W newFromVATDeclaration(LedgerRRGEDatasourceVATDeclaration_W _vatDeclaration)
    {
        LedgerRRGEDatasourceVATDecl501S5_W section5 = LedgerRRGEDatasourceVATDecl501S5_W::construct();

        section5.parmVATDeclaration(_vatDeclaration);

        return section5;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>