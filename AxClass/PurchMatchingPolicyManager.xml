<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchMatchingPolicyManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchMatchingPolicyManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertMatchingPolicyWithNotSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a <c>PurchMatchingPolicyWithNotSetOption</c> enumeration value to a
    ///    <c>PurchMatchingPolicyOption</c> enumeration value.
    /// </summary>
    /// <param name="_matchingPolicyNotSet">
    ///    The <c>PurchMatchingPolicyWithNotSetOption</c> enumeration value to convert.
    /// </param>
    /// <returns>
    ///    The <c>PurchMatchingPolicyOption</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method should not be called when the <c>PurchMatchingPolicyWithNotSetOption</c> enumeration
    ///    value is <c>NotSet</c>.
    /// </remarks>
    protected PurchMatchingPolicyOption convertMatchingPolicyWithNotSet(PurchMatchingPolicyWithNotSetOption _matchingPolicyNotSet)
    {
        switch (_matchingPolicyNotSet)
        {
            case PurchMatchingPolicyWithNotSetOption::NoMatch:
                return PurchMatchingPolicyOption::NoMatch;
            case PurchMatchingPolicyWithNotSetOption::TwoWayMatch:
                return PurchMatchingPolicyOption::TwoWayMatch;
            case PurchMatchingPolicyWithNotSetOption::ThreeWayMatch:
                return PurchMatchingPolicyOption::ThreeWayMatch;
            case PurchMatchingPolicyWithNotSetOption::NotSet:
                Debug::assert(_matchingPolicyNotSet != PurchMatchingPolicyWithNotSetOption::NotSet);
                break;
        }
        return PurchMatchingPolicyOption::ThreeWayMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewMatchingPolicyHigher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the updated matching policy is higher than the original matching policy.
    /// </summary>
    /// <param name="_origMatchingPolicy">
    /// The original matching policy.
    /// </param>
    /// <param name="_newMatchingPolicy">
    /// The updated matching policy.
    /// </param>
    /// <returns>
    /// true when the undated matching policy is higher than the original matching policy; otherwise, false.
    /// </returns>
    private boolean isNewMatchingPolicyHigher(
        PurchMatchingPolicyOption _origMatchingPolicy,
        PurchMatchingPolicyOption _newMatchingPolicy)
    {
        if (_origMatchingPolicy == _newMatchingPolicy)
        {
            return false;
        }

        // Three way match is considered the highest, then two way and finally no match.
        if ( (_origMatchingPolicy == PurchMatchingPolicyOption::NoMatch)
            && (_newMatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch
                || _newMatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch))
        {
            return true;
        }

        if ( (_origMatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch)
            && (_newMatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowerItemRecordsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether records exist in the <c>InventTable</c> table that have a lower matching policy
    ///    than the specified matching policy.
    /// </summary>
    /// <param name="_compareMatchingPolicy">
    ///    The matching policy to compare.
    /// </param>
    /// <returns>
    ///    true when records exist with a lower matching policy; otherwise, false.
    /// </returns>
    private boolean lowerItemRecordsExist(PurchMatchingPolicyOption _compareMatchingPolicy)
    {
        boolean found;
        InventTable inventTable;

        // Three way match is considered the highest, then two way and finally no match.
        if (_compareMatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch)
        {
            found = (select firstonly RecId from inventTable
                     where
                         inventTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::TwoWayMatch
                         || inventTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::NoMatch).RecId != 0;
        }
        else if (_compareMatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch)
        {
            found = (select firstonly RecId from inventTable
                     where inventTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::NoMatch).RecId != 0;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowerPurchLineRecordsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether records exist in the <c>PurchLine</c> table that have a lower matching policy
    ///    than the specified matching policy.
    /// </summary>
    /// <param name="_compareMatchingPolicy">
    ///    The matching policy to compare.
    /// </param>
    /// <returns>
    ///    true when records exist with a lower matching policy; otherwise, false.
    /// </returns>
    private boolean lowerPurchLineRecordsExist(PurchMatchingPolicyOption _compareMatchingPolicy)
    {
        boolean found;
        PurchLine purchLine;

        // Three way match is considered the highest, then two way and finally no match.
        if (_compareMatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch)
        {
            found = (select firstonly RecId from purchLine
                     where !purchLine.IsDeleted
                        && (purchLine.MatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch
                        ||  purchLine.MatchingPolicy == PurchMatchingPolicyOption::NoMatch)).RecId != 0;
        }
        else if (_compareMatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch)
        {
            found = (select firstonly RecId from purchLine
                     where purchLine.MatchingPolicy == PurchMatchingPolicyOption::NoMatch
                        && !purchLine.IsDeleted).RecId != 0;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowerVendItemRecordsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether records exist in the <c>VendItemMatchingPolicy</c> table that have a lower
    ///    matching policy than the specified matching policy.
    /// </summary>
    /// <param name="_compareMatchingPolicy">
    ///    The matching policy to compare.
    /// </param>
    /// <returns>
    ///    true when records exist with a lower matching policy; otherwise, false.
    /// </returns>
    private boolean lowerVendItemRecordsExist(PurchMatchingPolicyOption _compareMatchingPolicy)
    {
        boolean found;
        VendItemMatchingPolicy vendItemMatchingPolicy;

        // Three way match is considered the highest, then two way and finally no match.
        if (_compareMatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch)
        {
            found = (select firstonly RecId from vendItemMatchingPolicy
                     where
                         vendItemMatchingPolicy.MatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch
                         || vendItemMatchingPolicy.MatchingPolicy == PurchMatchingPolicyOption::NoMatch).RecId != 0;
        }
        else if (_compareMatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch)
        {
            found = (select firstonly RecId from vendItemMatchingPolicy
                     where vendItemMatchingPolicy.MatchingPolicy == PurchMatchingPolicyOption::NoMatch).RecId != 0;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowerVendorRecordsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether records exist in the <c>VendTable</c> table that have a lower matching policy
    ///    than the specified matching policy.
    /// </summary>
    /// <param name="_compareMatchingPolicy">
    ///    The matching policy to compare.
    /// </param>
    /// <returns>
    ///    true when records exist with a lower matching policy; otherwise, false.
    /// </returns>
    private boolean lowerVendorRecordsExist(PurchMatchingPolicyOption _compareMatchingPolicy)
    {
        boolean found;
        VendTable vendTable;

        // Three way match is considered the highest, then two way and finally no match.
        if (_compareMatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch)
        {
            found = (select firstonly RecId from vendTable
                     where
                         vendTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::TwoWayMatch
                         || vendTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::NoMatch).RecId != 0;
        }
        else if (_compareMatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch)
        {
            found = (select firstonly RecId from vendTable
                     where vendTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::NoMatch).RecId != 0;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rolldownConditionsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the matching policy change on the <c>VendParametes</c> record must be rolled down.
    /// </summary>
    /// <param name="_vendParameters">
    ///    The <c>VendParameter</c> record that has been changed.
    /// </param>
    /// <returns>
    ///    true when the matching policy change must be rolled down; otherwise, false.
    /// </returns>
    private boolean rolldownConditionsExist(VendParameters _vendParameters)
    {
        PurchMatchingPolicyOption origMatchingPolicy;
        PurchMatchingPolicyOverrideOption origMatchingPolicyOverride;

        origMatchingPolicy = _vendParameters.orig().MatchingPolicy;
        origMatchingPolicyOverride = _vendParameters.orig().MatchingPolicyAllowOverride;

        if (origMatchingPolicy == _vendParameters.MatchingPolicy
            && origMatchingPolicyOverride == _vendParameters.MatchingPolicyAllowOverride)
        {
            // fields were not changed
            return false;
        }

        // Check for lower level records when the matching policy override is 'Higher than company policy'
        // and the original matching policy override is 'Higher or lower than the company policy'
        // or the matching policy is changed to a higher level than the original value.
        if ((_vendParameters.MatchingPolicyAllowOverride == PurchMatchingPolicyOverrideOption::HigherOnly)
            && ((origMatchingPolicyOverride == PurchMatchingPolicyOverrideOption::LowerOrHigher)
                || (this.isNewMatchingPolicyHigher(origMatchingPolicy, _vendParameters.MatchingPolicy) == true)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLowerItemRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates records in the <c>InventTable</c> table that have a lower matching policy than the
    ///    specified matching policy.
    /// </summary>
    /// <param name="_compareMatchingPolicy">
    ///    The matching policy to compare.
    /// </param>
    private void updateLowerItemRecords(PurchMatchingPolicyOption _compareMatchingPolicy)
    {
        InventTable inventTable;

        // Three way match is considered the highest, then two way and finally no match.
        if (_compareMatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch)
        {
            update_recordset inventTable
                setting MatchingPolicy = PurchMatchingPolicyWithNotSetOption::ThreeWayMatch
                where inventTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::TwoWayMatch
                    || inventTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::NoMatch;
        }
        else if (_compareMatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch)
        {
            update_recordset inventTable
                setting MatchingPolicy = PurchMatchingPolicyWithNotSetOption::TwoWayMatch
                where inventTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::NoMatch;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLowerPurchLineRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates records in the <c>PurchLine</c> table that have a lower matching policy than the specified
    ///    matching policy.
    /// </summary>
    /// <param name="_compareMatchingPolicy">
    ///    The matching policy to compare.
    /// </param>
    private void updateLowerPurchLineRecords(PurchMatchingPolicyOption _compareMatchingPolicy)
    {
        PurchLine purchLine;

        // Do not check PO change management/versioning for this change
        purchLine.skipDataMethods(true);
        purchLine.skipEvents(true);

        // Three way match is considered the highest, then two way and finally no match.
        if (_compareMatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch)
        {
            update_recordset purchLine
                setting MatchingPolicy = _compareMatchingPolicy
                where purchLine.MatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch
                    || purchLine.MatchingPolicy == PurchMatchingPolicyOption::NoMatch;
        }
        else if (_compareMatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch)
        {
            update_recordset purchLine
                setting MatchingPolicy = _compareMatchingPolicy
                where purchLine.MatchingPolicy == PurchMatchingPolicyOption::NoMatch;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLowerVendItemRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates records in the <c>VendItemMatchingPolicy</c> table that have a lower matching policy than
    ///    the specified matching policy.
    /// </summary>
    /// <param name="_compareMatchingPolicy">
    ///    The matching policy to compare.
    /// </param>
    private void updateLowerVendItemRecords(PurchMatchingPolicyOption _compareMatchingPolicy)
    {
        VendItemMatchingPolicy vendItemMatchingPolicy;

        // Three way match is considered the highest, then two way and finally no match.
        if (_compareMatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch)
        {
            update_recordset vendItemMatchingPolicy
                setting MatchingPolicy = _compareMatchingPolicy
                where vendItemMatchingPolicy.MatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch
                    || vendItemMatchingPolicy.MatchingPolicy == PurchMatchingPolicyOption::NoMatch;
        }
        else if (_compareMatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch)
        {
            update_recordset vendItemMatchingPolicy
                setting MatchingPolicy = _compareMatchingPolicy
                where vendItemMatchingPolicy.MatchingPolicy == PurchMatchingPolicyOption::NoMatch;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLowerVendorRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates records in the <c>VendTable</c> table that have a lower matching policy than the parameter.
    /// </summary>
    /// <param name="_compareMatchingPolicy">
    /// The matching policy to compare.
    /// </param>
    private void updateLowerVendorRecords(PurchMatchingPolicyOption _compareMatchingPolicy)
    {
        VendTable vendTable;

        // Three way match is considered the highest, then two way and finally no match.
        if (_compareMatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch)
        {
            update_recordset vendTable
                setting MatchingPolicy = PurchMatchingPolicyWithNotSetOption::ThreeWayMatch
                where vendTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::TwoWayMatch
                    || vendTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::NoMatch;
        }
        else if (_compareMatchingPolicy == PurchMatchingPolicyOption::TwoWayMatch)
        {
            update_recordset vendTable
                setting MatchingPolicy = PurchMatchingPolicyWithNotSetOption::TwoWayMatch
                where vendTable.MatchingPolicy == PurchMatchingPolicyWithNotSetOption::NoMatch;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMatchingPolicyBeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the matching policy can be changed.
    /// </summary>
    /// <param name="_changedMatchingPolicy">
    ///    The changed matching policy to validate.
    /// </param>
    /// <returns>
    ///    true when the changed matching policy is valid; otherwise, false.
    /// </returns>
    public static boolean canMatchingPolicyBeChanged(PurchMatchingPolicyOption _changedMatchingPolicy)
    {
        PurchMatchingPolicyManager matchingPolicyManager;
        VendParameters vendParameters;

        // Find the company matching policy override
        vendParameters = VendParameters::find();

        // if matching policy override is lower or higher, matching policy can be changed to any value
        // also if company and changed matching policy are the same the change is allowed
        if (vendParameters.MatchingPolicyAllowOverride == PurchMatchingPolicyOverrideOption::LowerOrHigher
            || _changedMatchingPolicy == vendParameters.MatchingPolicy)
        {
            return true;
        }

        // check if changed matching policy is higher than original matching policy, if higher change is allowed
        matchingPolicyManager = new PurchMatchingPolicyManager();
        if (matchingPolicyManager.isNewMatchingPolicyHigher(vendParameters.MatchingPolicy, _changedMatchingPolicy))
        {
            return true;
        }

        // matching policy changed to lower value, this is not allowed so return false
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMatchingPolicyWithNotSetBeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the matching policy that has a <c>PurchMatchingPolicyWithNotSetOption</c>
    ///    enumeration value of <c>NotSet</c> can be changed.
    /// </summary>
    /// <param name="_changedMatchingPolicyWithNotSet">
    ///    The changed matching policy to validate.
    /// </param>
    /// <returns>
    ///    true when the changed matching policy is valid; otherwise, false.
    /// </returns>
    public static boolean canMatchingPolicyWithNotSetBeChanged(PurchMatchingPolicyWithNotSetOption _changedMatchingPolicyWithNotSet)
    {
        PurchMatchingPolicyManager matchingPolicyManager;
        PurchMatchingPolicyOption changedMatchingPolicy;

        if (_changedMatchingPolicyWithNotSet == PurchMatchingPolicyWithNotSetOption::NotSet)
        {
            return true;
        }

        matchingPolicyManager = new PurchMatchingPolicyManager();
        changedMatchingPolicy = matchingPolicyManager.convertMatchingPolicyWithNotSet(_changedMatchingPolicyWithNotSet);

        return PurchMatchingPolicyManager::canMatchingPolicyBeChanged(changedMatchingPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMatchingPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the matching policy based on the parameters.
    /// </summary>
    /// <param name="_inventTable">
    /// The InventTable record to check for matching policy.
    /// </param>
    /// <param name="_vendTable">
    /// The VendTable record to check for matching policy.
    /// </param>
    /// <param name="_ecoResCategoryId">
    /// The record ID of the <c>EcoResCategory</c> record.
    /// </param>
    /// <param name="_showError">
    /// A boolean value to show/hide a warning when the category's matching policy is lower than the company's, and the company's MatchingPolicyAllowOverride is set to higher only
    /// </param>
    /// <returns>
    /// The matching policy for the parameters.
    /// </returns>
    /// <remarks>
    /// This method will check for the matching policy in the following order for items: Item/Vendor, Item, Vendor, and Company.
    /// This method will check for the matching policy in the following order for categories:  Purchasing policy, Vendor, and Company.
    /// </remarks>
    public static PurchMatchingPolicyOption findMatchingPolicy(
        InventTable _inventTable,
        VendTable _vendTable,
        EcoResCategoryId _ecoResCategoryId = 0,
        boolean _showError = false)
    {
        PurchMatchingPolicyOption   defaultMatchingPolicy;
        VendItemMatchingPolicy      vendItemMatchingPolicy;
        PurchMatchingPolicyManager  matchingPolicyManager;
        VendParameters              vendParameters = VendParameters::find();

        matchingPolicyManager = new PurchMatchingPolicyManager();

        if (vendParameters.editUseInvoiceMatching())
        {
            if (_inventTable != null && _vendTable != null)
            {
               vendItemMatchingPolicy = VendItemMatchingPolicy::find(_vendTable.AccountNum, _inventTable.ItemId);
            }

            if (vendItemMatchingPolicy.RecId != 0)
            {
                defaultMatchingPolicy  = vendItemMatchingPolicy.MatchingPolicy;
            }
            else if (_inventTable != null && _inventTable.MatchingPolicy != PurchMatchingPolicyWithNotSetOption::NotSet)
            {
               defaultMatchingPolicy = matchingPolicyManager.convertMatchingPolicyWithNotSet(_inventTable.MatchingPolicy);
            }
            else if (_inventTable == null && _ecoResCategoryId != 0 &&
                EcoResCategory::getProcurementCategoryMatchingPolicy(_ecoResCategoryId,
                                    CompanyInfo::current()) != PurchMatchingPolicyWithNotSetOption::NotSet)
            {
                defaultMatchingPolicy = matchingPolicyManager.convertMatchingPolicyWithNotSet(
                            EcoResCategory::getProcurementCategoryMatchingPolicy(_ecoResCategoryId, CompanyInfo::current()));
            }

            else if (_vendTable != null && _vendTable.MatchingPolicy != PurchMatchingPolicyWithNotSetOption::NotSet)
            {
               defaultMatchingPolicy = matchingPolicyManager.convertMatchingPolicyWithNotSet(_vendTable.MatchingPolicy);
            }
            else
            {
                defaultMatchingPolicy = vendParameters.MatchingPolicy;
            }

            if (vendParameters.MatchingPolicyAllowOverride == PurchMatchingPolicyOverrideOption::HigherOnly && enum2int(vendParameters.MatchingPolicy) < enum2int(defaultMatchingPolicy))
            {
                defaultMatchingPolicy = vendParameters.MatchingPolicy;
                if (_showError)
                {
                    warning(strfmt("@SYS329107", defaultMatchingPolicy));
                }
            }
        }
        else
        {
            // If use invoice matching is false set to matching policy
            // for the company
            defaultMatchingPolicy = vendParameters.MatchingPolicy;
        }

        return defaultMatchingPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowerMatchingPolicyRecordsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether records exist with a lower matching policy than the <c>VendParameter</c> record
    ///    matching policy.
    /// </summary>
    /// <param name="_vendParameters">
    ///    The <c>VendParameter</c> record that has been changed.
    /// </param>
    /// <returns>
    ///    true when there are lower level records; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method should be called when either the <c>MatchingPolicy</c> field or the
    ///    <c>MatchingPolicyAllowOverride</c> field on the <c>VendParameters</c> table is changed.This method
    ///    looks for lower matching policy records in the <c>PurchLine</c> table, the
    ///    <c>VendItemMatchingPolicy</c> table, the <c>VendTable</c> table, and the <c>InventTable</c> table.
    /// </remarks>
    public static boolean lowerMatchingPolicyRecordsExist(VendParameters _vendParameters)
    {
        PurchMatchingPolicyManager matchingPolicyManager;

        matchingPolicyManager = new PurchMatchingPolicyManager();

        if (!matchingPolicyManager.rolldownConditionsExist(_vendParameters))
        {
            return false;
        }

        if (matchingPolicyManager.lowerVendItemRecordsExist(_vendParameters.MatchingPolicy)  // check vend/item table
            || matchingPolicyManager.lowerItemRecordsExist(_vendParameters.MatchingPolicy)   // check item table
            || matchingPolicyManager.lowerVendorRecordsExist(_vendParameters.MatchingPolicy) // check vendor table
            || matchingPolicyManager.lowerPurchLineRecordsExist(_vendParameters.MatchingPolicy))  // check PurchLine table
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rolldownCompanyMatchingPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates records with a lower matching policy than the <c>VendParameter</c> record matching policy.
    /// </summary>
    /// <param name="_vendParameters">
    ///    The <c>VendParameter</c> record that has been changed.
    /// </param>
    /// <remarks>
    ///    This method updates the lower matching policy records in the <c>PurchLine</c> table, the
    ///    <c>VendItemMatchingPolicy</c> table, the <c>VendTable</c> table, and the <c>InventTable</c> table.
    /// </remarks>
    public static void rolldownCompanyMatchingPolicy(VendParameters _vendParameters)
    {
        PurchMatchingPolicyManager matchingPolicyManager;

        matchingPolicyManager = new PurchMatchingPolicyManager();

        // check that matching policy or override policy was changed
        if (matchingPolicyManager.rolldownConditionsExist(_vendParameters))
        {
            // update any lower level records with the most current matching policy
            matchingPolicyManager.updateLowerMatchingPolicyRecords(_vendParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLowerMatchingPolicyRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls methods to update records for purchase line, vendor/item, vendor and item having
    /// lower matching policy than the current <c>VendParameters</c> table record.
    /// </summary>
    /// <param name="_vendParameters"> The <c>VendParameter</c> record that has been changed.</param>
    protected void updateLowerMatchingPolicyRecords(VendParameters _vendParameters)
    {
        this.updateLowerPurchLineRecords(_vendParameters.MatchingPolicy);
        this.updateLowerVendItemRecords(_vendParameters.MatchingPolicy);
        this.updateLowerVendorRecords(_vendParameters.MatchingPolicy);
        this.updateLowerItemRecords(_vendParameters.MatchingPolicy);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>