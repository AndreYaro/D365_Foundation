<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTaxInquiryTrans_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to show the record of tax transactions related data.
/// </summary>
class SalesTaxInquiryTrans_IN
{
    TmpSalesTaxInquiryTable_IN  tmpSalesTaxInquiryTable;
    #DEFINE.FIELD1 (1)
    #DEFINE.FIELD2 (2)
    #DEFINE.FIELD3 (3)
    #DEFINE.FIELD4 (4)
    #DEFINE.FIELD5 (5)
    #DEFINE.FIELD6 (6)
    #DEFINE.FIELD7 (7)
    #DEFINE.FIELD8 (8)
    #DEFINE.FIELD9 (9)
    #DEFINE.FIELD10 (10)
    #DEFINE.FIELD11 (11)
    #DEFINE.FIELD12 (12)
    #DEFINE.FIELD13 (13)
    #DEFINE.FIELD14 (14)
    #DEFINE.FIELD15 (15)
    #DEFINE.FIELD16 (16)
    #DEFINE.FIELD17 (17)
    #DEFINE.FIELD18 (18)
    #DEFINE.FIELD19 (19)
    #DEFINE.FIELD20 (20)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// The execute function of the <c>SalesTaxInquiryTrans_IN</c> class.
    /// </summary>
    /// <param name="_queryRun">
    /// The instance of the <c>QueryRun</c> class.
    /// </param>
    /// <param name="_fieldValues">
    /// The field values of the form.
    /// </param>
    /// <param name="_registrationNumber">
    /// The tax registration number rec id.
    /// </param>
    /// <param name="_taxPeriod">
    /// The tax period.
    /// </param>
    /// <returns>
    /// The instance of the <c>TmpSalesTaxInquiryTable_IN</c> class.
    /// </returns>
    public TmpSalesTaxInquiryTable_IN execute(
        QueryRun                        _queryRun,
        container                       _fieldValues,
        TaxRegistrationNumberRecId_IN   _registrationNumber,
        TaxPeriod                       _taxPeriod)
    {
        fieldId                 fields[];
        container               fieldNames;
        int                     fieldCount;
        boolean                 insert;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        boolean                 transactionField,
                                miscChargeField,
                                invoiceField;
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalEntry         generalJournalEntry;

        for (fieldCount = 1;fieldCount <= conlen(_fieldValues);fieldCount++)
        {
            fieldNames += conpeek(_fieldValues, fieldCount);
            str fieldName = conpeek(fieldNames, fieldCount);

            if (fieldName == fieldid2name(tablenum(TaxTrans_IN), fieldnum(TaxTrans_IN, TransactionAmount)))
            {
                transactionField = true;
            }
            if (fieldName == fieldid2name(tablenum(TaxTrans_IN), fieldnum(TaxTrans_IN, InvoiceAmount)))
            {
                invoiceField = true;
            }
            if (fieldName == fieldid2name(tablenum(TaxTrans_IN), fieldnum(TaxTrans_IN, MiscChargeAmount)))
            {
                miscChargeField = true;
            }
        }

        while (_queryRun.next())
        {
            tmpSalesTaxInquiryTable.clear();
            for (fieldCount = 1;fieldCount <= conlen(fieldNames);fieldCount++)
            {
                fields[fieldCount] = fieldname2id(tablenum(SalesTaxInquiryView_IN), conpeek(fieldNames, fieldCount));
            }
            Common common = _queryRun.getNo(1);
            SalesTaxInquiryView_IN salesTaxInquiry = common;
            TaxTrans_IN taxTrans = TaxTrans_IN::findRecId(salesTaxInquiry.TaxTrans_INRecId);
            tmpSalesTaxInquiryTable.TransDate = salesTaxInquiry.TransDate;
            tmpSalesTaxInquiryTable.Voucher = salesTaxInquiry.Voucher;
            tmpSalesTaxInquiryTable.CostLedgerVoucher = taxTrans.CostLedgerVoucher;
            tmpSalesTaxInquiryTable.TaxComponentTable = salesTaxInquiry.TaxComponentTable;
            tmpSalesTaxInquiryTable.SourceTaxAmountCur = salesTaxInquiry.SourceTaxAmountCur;
            tmpSalesTaxInquiryTable.TaxRegistrationNumberTable = _registrationNumber;
            tmpSalesTaxInquiryTable.TaxSettlementPeriod = taxTrans.TaxPeriod ? taxTrans.TaxPeriod : _taxPeriod;
            tmpSalesTaxInquiryTable.LineNum = taxTrans.LineNum;

            if (taxTrans.CompanyRegistrationNumber == _registrationNumber &&
                taxTrans.TaxPeriod                 == _taxPeriod)
            {
                insert  = true;
                if (taxTrans.Source == TaxModuleType::Voucher)
                {
                    ttsbegin;
                    select forupdate taxTrans
                        where taxTrans.RecId == salesTaxInquiry.TaxTrans_INRecId;

                    select firstonly RecId, TransactionCurrencyAmount, GeneralJournalEntry from generalJournalAccountEntry
                                    where (generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance ||
                                           generalJournalAccountEntry.PostingType == LedgerPostingType::CustBalance)
                                join * from generalJournalEntry
                                    where  generalJournalEntry.RecId            == generalJournalAccountEntry.GeneralJournalEntry
                                join Voucher, AccountingDate from subledgerVoucherGeneralJournalEntry
                                    where  generalJournalEntry.subledgerVoucher == subledgerVoucherGeneralJournalEntry.Voucher
                                        && generalJournalEntry.AccountingDate   == subledgerVoucherGeneralJournalEntry.AccountingDate;

                    if (generalJournalAccountEntry.TransactionCurrencyAmount)
                    {
                        taxTrans.InvoiceAmount          = generalJournalAccountEntry.TransactionCurrencyAmount;
                        salesTaxInquiry.InvoiceAmount   = generalJournalAccountEntry.TransactionCurrencyAmount;
                        taxTrans.update();
                        salesTaxInquiry.data(taxTrans);
                        common = salesTaxInquiry;
                    }
                    ttscommit;
                }
            }

            if (insert)
            {
                ttsbegin;
                tmpSalesTaxInquiryTable.TransTableId                = taxTrans.TransTableId;
                tmpSalesTaxInquiryTable.TransRecId                  = taxTrans.TransRecId;
                tmpSalesTaxInquiryTable.SourceCurrencyCode          = taxTrans.SourceCurrencyCode;
                tmpSalesTaxInquiryTable.TransactionAmount           = !transactionField ? 0 : taxTrans.TransactionAmount;

                tmpSalesTaxInquiryTable.InvoiceAmount               = !invoiceField ? 0 : taxTrans.InvoiceAmount;
                tmpSalesTaxInquiryTable.MiscChargeAmount            = ! miscChargeField ? 0 :taxTrans.MiscChargeAmount;
                tmpSalesTaxInquiryTable.TaxAmount                   = taxTrans.TaxAmount;
                tmpSalesTaxInquiryTable.TaxAmountSecondary          = taxTrans.TaxAmountSecondary;
                tmpSalesTaxInquiryTable.Sort1   = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field1));
                tmpSalesTaxInquiryTable.Sort2   = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field2));
                tmpSalesTaxInquiryTable.Sort3   = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field3));
                tmpSalesTaxInquiryTable.Sort4   = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field4));
                tmpSalesTaxInquiryTable.Sort5   = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field5));
                tmpSalesTaxInquiryTable.Sort6   = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field6));
                tmpSalesTaxInquiryTable.Sort7   = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field7));
                tmpSalesTaxInquiryTable.Sort8   = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field8));
                tmpSalesTaxInquiryTable.Sort9   = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field9));
                tmpSalesTaxInquiryTable.Sort10  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field10));
                tmpSalesTaxInquiryTable.Sort11  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field11));
                tmpSalesTaxInquiryTable.Sort12  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field12));
                tmpSalesTaxInquiryTable.Sort13  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field13));
                tmpSalesTaxInquiryTable.Sort14  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field14));
                tmpSalesTaxInquiryTable.Sort15  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field15));
                tmpSalesTaxInquiryTable.Sort16  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field16));
                tmpSalesTaxInquiryTable.Sort17  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field17));
                tmpSalesTaxInquiryTable.Sort18  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field18));
                tmpSalesTaxInquiryTable.Sort19  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field19));
                tmpSalesTaxInquiryTable.Sort20  = TaxTrans_IN::getFieldValues(taxTrans, conpeek(fieldNames, #Field20));
                tmpSalesTaxInquiryTable.insert();
                ttscommit;
                this.insertIntoMarkupTrans(tmpSalesTaxInquiryTable.TransTableId ,
                                           tmpSalesTaxInquiryTable.TransRecId,
                                           tmpSalesTaxInquiryTable.TableId,
                                           tmpSalesTaxInquiryTable.RecId);
                insert = false;
            }
        }

        return tmpSalesTaxInquiryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts into markup transaction.
    /// </summary>
    /// <param name="_transTableId">
    /// The transaction table id.
    /// </param>
    /// <param name="_transRecId">
    /// The transaction record id.
    /// </param>
    /// <param name="_tmpTableId">
    /// The temporary table id.
    /// </param>
    /// <param name="_tmpRecId">
    /// The temporary record id.
    /// </param>
    public void insertIntoMarkupTrans(tableId  _transTableId,
                                      RecId    _transRecId,
                                      tableId  _tmpTableId,
                                      RecId    _tmpRecId )
    {
        MarkupTrans  markupTrans, markUpTransLoc, markUpTransCopy;

        if (_transTableId && _transRecId)
        {
            delete_from markUpTransLoc
                where   markUpTransLoc.TransTableId == _tmpTableId    &&
                        markUpTransLoc.TransRecId   == _tmpRecId;

            while select markUpTransCopy
                where   markUpTransCopy.TransTableId == _transTableId &&
                        markUpTransCopy.TransRecId   == _transRecId
            {
                ttsbegin;
                markupTrans = markUpTransCopy.data();
                markupTrans.TransTableId    = _tmpTableId;
                markupTrans.TransRecId      = _tmpRecId;
                markupTrans.insert();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpSalesTaxInquiryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// The temporary sales tax inquiry table.
    /// </summary>
    /// <param name="_tmpSalesTaxInquiryTable">
    /// The temporary sales tax inquiry table.
    /// </param>
    /// <returns>
    /// The instance of the <c>TmpSalesTaxInquiryTable_IN</c> class.
    /// </returns>
    public TmpSalesTaxInquiryTable_IN tmpSalesTaxInquiryTable(TmpSalesTaxInquiryTable_IN _tmpSalesTaxInquiryTable = tmpSalesTaxInquiryTable)
    {
        tmpSalesTaxInquiryTable = _tmpSalesTaxInquiryTable;

        return tmpSalesTaxInquiryTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
