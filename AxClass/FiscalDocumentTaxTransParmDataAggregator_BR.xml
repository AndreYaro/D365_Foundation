<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentTaxTransParmDataAggregator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Define the aggregation rules to be used when posting project fiscal document.
/// </summary>
class FiscalDocumentTaxTransParmDataAggregator_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aggregate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aggregate two <c>FiscalDocumentTaxTransParmData_BR</c> objects
    /// </summary>
    /// <param name="_taxTransParmData">
    /// The <c>FiscalDocTrans_BR</c> object to be added to aggregated object.
    /// </param>
    /// <param name="_taxTransParmDataToAggregate">
    /// The aggregated <c>FiscalDocTrans_BR</c> object.
    /// </param>
    public void aggregate(FiscalDocumentTaxTransParmData_BR _taxTransParmData, FiscalDocumentTaxTransParmData_BR _taxTransParmDataToAggregate)
    {
        TaxBase taxBaseAmount = _taxTransParmDataToAggregate.parmTaxBaseAmount();
        if (_taxTransParmDataToAggregate.parmType() == TaxType_BR::INSS)
        {
            taxBaseAmount = max(taxBaseAmount, abs(_taxTransParmData.parmTaxBaseAmount()));
        }
        else
        {
            taxBaseAmount += _taxTransParmData.parmTaxBaseAmount();
        }

        TaxAmount   taxAmount                    = _taxTransParmDataToAggregate.parmTaxAmount()                      + _taxTransParmData.parmTaxAmount();
        taxBase     taxBaseAmountOther           = _taxTransParmDataToAggregate.parmTaxBaseAmountOther()             + _taxTransParmData.parmTaxBaseAmountOther();
        TaxAmount   taxAmountOther               = _taxTransParmDataToAggregate.parmTaxAmountOther()                 + _taxTransParmData.parmTaxAmountOther();
        TaxBase     taxBaseAmountExempt          = _taxTransParmDataToAggregate.parmTaxBaseAmountExempt()            + _taxTransParmData.parmTaxBaseAmountExempt();
        TaxAmount   icmsDifIssuerTaxAmount       = _taxTransParmDataToAggregate.parmICMSDifIssuerTaxAmount()         + _taxTransParmData.parmICMSDifIssuerTaxAmount();
        TaxAmount   icmsRecipientTaxAmount       = _taxTransParmDataToAggregate.parmICMSDifRecipientTaxAmount()      + _taxTransParmData.parmICMSDifRecipientTaxAmount();
        TaxAmount   taxPovertyFundAmount		 = _taxTransParmDataToAggregate.parmTaxPovertyFundAmount()			 + _taxTransParmData.parmTaxPovertyFundAmount();

        _taxTransParmDataToAggregate.parmTaxBaseAmount                  (taxBaseAmount);
        _taxTransParmDataToAggregate.parmTaxAmount                      (taxAmount);
        _taxTransParmDataToAggregate.parmTaxBaseAmountOther             (taxBaseAmountOther);
        _taxTransParmDataToAggregate.parmTaxAmountOther                 (taxAmountOther);
        _taxTransParmDataToAggregate.parmTaxBaseAmountExempt            (taxBaseAmountExempt);
        _taxTransParmDataToAggregate.parmICMSDifIssuerTaxAmount         (icmsDifIssuerTaxAmount);
        _taxTransParmDataToAggregate.parmICMSDifRecipientTaxAmount      (icmsRecipientTaxAmount);
		_taxTransParmDataToAggregate.parmTaxPovertyFundAmount			(taxPovertyFundAmount);

        _taxTransParmDataToAggregate.addTaxTransRecId(_taxTransParmData.parmTaxTrans());

        this.clearReference(_taxTransParmData, _taxTransParmDataToAggregate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginNewAggregation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called every time a new aggregation is created, which is whenever a new key is identified.
    /// </summary>
    /// <param name="_taxTransParmData">
    /// The <c>FiscalDocumentTaxTransParmData_BR</c> object to aggregate
    /// </param>
    /// <param name="_taxTransParmDataToAggregate">
    /// The <c>FiscalDocumentTaxTransParmData_BR</c> object to be aggregated
    /// </param>
    public void beginNewAggregation(FiscalDocumentTaxTransParmData_BR _taxTransParmData, FiscalDocumentTaxTransParmData_BR _taxTransParmDataToAggregate)
    {
        _taxTransParmDataToAggregate.parmType                           (_taxTransParmData.parmType());
        _taxTransParmDataToAggregate.parmTaxationCode                   (_taxTransParmData.parmTaxationCode());
        _taxTransParmDataToAggregate.parmTaxExemptCode                  (_taxTransParmData.parmTaxExemptCode());
        _taxTransParmDataToAggregate.parmTaxationOrigin                 (_taxTransParmData.parmTaxationOrigin());
        _taxTransParmDataToAggregate.parmFiscalValue                    (_taxTransParmData.parmFiscalValue());
        _taxTransParmDataToAggregate.parmRetainedTax                    (_taxTransParmData.parmRetainedTax());
        _taxTransParmDataToAggregate.parmIncludedTax                    (_taxTransParmData.parmIncludedTax());

        _taxTransParmDataToAggregate.parmTaxValue                       (_taxTransParmData.parmTaxValue());
        _taxTransParmDataToAggregate.parmTaxNonRecoverablePct			(_taxTransParmData.parmTaxNonRecoverablePct());
        _taxTransParmDataToAggregate.parmTaxSubstitutionMarkupPct       (_taxTransParmData.parmTaxSubstitutionMarkupPct());
        _taxTransParmDataToAggregate.parmTaxReductionPct                (_taxTransParmData.parmTaxReductionPct());
        _taxTransParmDataToAggregate.parmTaxReceivableLongTerm          (_taxTransParmData.parmTaxReceivableLongTerm());
        _taxTransParmDataToAggregate.parmTaxPovertyFundPercentage       (_taxTransParmData.parmTaxPovertyFundPercentage());

        _taxTransParmDataToAggregate.parmTaxTrans                       (_taxTransParmData.parmTaxTrans());
        _taxTransParmDataToAggregate.parmTaxTransSourceRecId            (_taxTransParmData.parmTaxTransSourceRecId());
        _taxTransParmDataToAggregate.parmTaxTransSourceTableId          (_taxTransParmData.parmTaxTransSourceTableId());

        _taxTransParmDataToAggregate.addTaxTransRecId(_taxTransParmData.parmTaxTrans());
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearReference</Name>
				<Source><![CDATA[
        private void clearReference(FiscalDocumentTaxTransParmData_BR _taxTransParmData, FiscalDocumentTaxTransParmData_BR _taxTransParmDataToAggregate)
    {
        if (_taxTransParmDataToAggregate.parmTaxTrans() != _taxTransParmData.parmTaxTrans())
        {
            _taxTransParmDataToAggregate.parmTaxTrans(0);
        }

        if (_taxTransParmDataToAggregate.parmTaxTransSourceRecId() != _taxTransParmData.parmTaxTransSourceRecId())
        {
            _taxTransParmDataToAggregate.parmTaxTransSourceRecId(0);
        }

        if (_taxTransParmDataToAggregate.parmTaxTransSourceTableId() != _taxTransParmData.parmTaxTransSourceTableId())
        {
            _taxTransParmDataToAggregate.parmTaxTransSourceTableId(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the key that will be used in the aggregation
    /// </summary>
    /// <param name="_fiscalDocumentTaxTransParmData">
    /// The source to create the key
    /// </param>
    /// <returns>
    /// A string containing the key of the aggregation
    /// </returns>
    public str key(FiscalDocumentTaxTransParmData_BR _fiscalDocumentTaxTransParmData)
    {
        str key;

        key = strFmt("%1", _fiscalDocumentTaxTransParmData.parmType());

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FiscalDocumentTaxTransParmDataAggregator_BR construct()
    {
        return new FiscalDocumentTaxTransParmDataAggregator_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>