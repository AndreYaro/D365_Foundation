<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerTurnoverTypeable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RLedgerTurnoverTypeable</c> interface defines the programming interface which must be implemented
/// in order to be used with the <c>RLedgerTurnoverEngine</c> class
/// </summary>
interface RLedgerTurnoverTypeable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMainAccountRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds main account range to the report query.
    /// </summary>
    /// <param name="_accountRange">
    /// The main account range value.
    /// </param>
    /// <param name="_offset">
    /// The flag indicating whether the range value relates to the offset account.
    /// </param>
    public void addMainAccountRange(MainAccountRange _accountRange, boolean _offset = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountFieldLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding amount field labels.
    /// </summary>
    /// <returns>
    /// A container holding amount field labels.
    /// </returns>
    public container amountFieldLabels()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSelectParam</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean value indicating whether the report parameter can be selected.
    /// </summary>
    /// <param name="_name">
    /// The name of the parameter.
    /// </param>
    /// <returns>
    /// true if the report parameter can be selected; otherwise, false.
    /// </returns>
    public boolean canSelectParam(Name _name)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrecalcData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates precalculated data for a transaction.
    /// </summary>
    /// <param name="_trans">
    /// A table buffer holding the transaction.
    /// </param>
    /// <param name="_transHeader">
    /// A table buffer holding the transaction header.
    /// </param>
    /// <param name="_transSplit">
    /// A table buffer holding the split transaction.
    /// </param>
    public void createPrecalcData(Common _trans,
                                  Common _transHeader,
                                  Common _transSplit)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public ClassDescription description()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>drillThroughAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a drill-through action for a particular amount.
    /// </summary>
    /// <param name="_query">
    /// The query for a drill-through form.
    /// </param>
    /// <param name="_amountType">
    /// The type of the amount.
    /// </param>
    /// <param name="_tmpRecIdFilter">
    /// The reference to a temporary table containing record IDs for filtering.
    /// </param>
    public void drillThroughAction(Query _query, int _amountType, TmpRecIdFilter _tmpRecIdFilter)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns field ID for the transaction field holding the amount.
    /// </summary>
    /// <param name="_currencyType">
    /// The currency type report parameter value.
    /// </param>
    /// <returns>
    /// A field ID for the transaction field holding the amount.
    /// </returns>
    public FieldId fieldAmount(CurrencyType_RU _currencyType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns field ID for the transaction field holding the correction flag.
    /// </summary>
    /// <param name="_currencyType">
    /// The currency type report parameter value.
    /// </param>
    /// <returns>
    /// A container with table ID and field ID for the transaction field holding the correction flag.
    /// </returns>
    public container fieldCorrection(CurrencyType_RU _currencyType = CurrencyType_RU::Standard)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding the table and field IDs for the currency code field.
    /// </summary>
    /// <returns>
    /// A container holding the table and field IDs for the currency code field.
    /// </returns>
    /// <remarks>
    /// [TableId, FieldId]
    /// </remarks>
    public container fieldCurrencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding the table and field IDs for the default dimension field.
    /// </summary>
    /// <returns>
    /// A container holding the table and field IDs for the default dimension field.
    /// </returns>
    /// <remarks>
    /// [TableId, FieldId]
    /// </remarks>
    public container fieldDefaultDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding the table and field IDs for the ledger dimension field.
    /// </summary>
    /// <returns>
    /// A container holding the table and field IDs for the ledger dimension field.
    /// </returns>
    /// <remarks>
    /// [TableId, FieldId]
    /// </remarks>
    public container fieldLedgerDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding the table and field IDs for the Main account field.
    /// </summary>
    /// <returns>
    /// A container holding the table and field IDs for the Main account field.
    /// </returns>
    /// <remarks>
    /// [TableId, FieldId]
    /// </remarks>
    public container fieldMainAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldOperationsTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding the table and field IDs for the posting layer field.
    /// </summary>
    /// <returns>
    /// A container holding the table and field IDs for the posting layer field.
    /// </returns>
    /// <remarks>
    /// [TableId, FieldId]
    /// </remarks>
    public container fieldOperationsTax()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldSettlementDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding the table and field IDs for the settlement date field.
    /// </summary>
    /// <returns>
    /// A container holding the table and field IDs for the settlement date field.
    /// </returns>
    /// <remarks>
    /// [TableId, FieldId]
    /// </remarks>
    public container fieldSettlementDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding the table and field IDs for the transaction date field.
    /// </summary>
    /// <returns>
    /// A container holding the table and field IDs for the transaction date field.
    /// </returns>
    /// <remarks>
    /// [TableId, FieldId]
    /// </remarks>
    public container fieldTransDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a key value for a transaction field for filtering purposes.
    /// </summary>
    /// <param name="_trans">
    /// A table buffer holding the transaction.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID for the key field.
    /// </param>
    /// <returns>
    /// The key value for a transaction field for filtering purposes.
    /// </returns>
    public anytype getKeyValue(Common _trans, fieldId _fieldId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupKeyData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding field IDs of key fields for filtering purposes.
    /// </summary>
    /// <param name="_key">
    /// A container holding the selected parameters of the report.
    /// </param>
    /// <returns>
    /// A container holding field IDs of key fields for filtering purposes.
    /// </returns>
    public container groupKeyData(container _key)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding the default report grouping parameters.
    /// </summary>
    /// <returns>
    /// A container holding the default report grouping parameters.
    /// </returns>
    public container groupParamDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding labels for selected report grouping parameters.
    /// </summary>
    /// <param name="_key">
    /// A container holding the selected grouping parameters of the report.
    /// </param>
    /// <returns>
    /// A container holding labels for the selected report grouping parameters.
    /// </returns>
    public container groupParamLabels(container _key)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding the list of available report grouping parameters.
    /// </summary>
    /// <returns>
    /// A container holding the list of available report grouping parameters.
    /// </returns>
    public container groupParamNames()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamValueName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description of a particular report grouping parameter value.
    /// </summary>
    /// <param name="_paramName">
    /// The name of the report grouping parameter.
    /// </param>
    /// <param name="_paramValue">
    /// The value of the report grouping parameter.
    /// </param>
    /// <param name="_common">
    /// The table buffer containing the record of the related entity.
    /// </param>
    /// <returns>
    /// The description of a particular report grouping parameter value.
    /// </returns>
    public Name groupParamValueName(Name _paramName, container _paramValue, Common _common = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container of grouping parameter values for the transaction.
    /// </summary>
    /// <param name="_trans">
    /// A table buffer holding the transaction.
    /// </param>
    /// <param name="_key">
    /// A container holding the selected grouping parameters of the report.
    /// </param>
    /// <param name="_transHeader">
    /// A table buffer holding the transaction header.
    /// </param>
    /// <param name="_transSplit">
    /// A table buffer holding the split transaction.
    /// </param>
    /// <returns>
    /// A container of grouping parameter values for the transaction.
    /// </returns>
    public container groupParamValues(Common    _trans,
                                      container _key,
                                      Common    _transHeader = null,
                                      Common    _transSplit  = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the transaction must be included in the report calculation.
    /// </summary>
    /// <param name="_trans">
    /// A table buffer holding the transaction.
    /// </param>
    /// <param name="_subtrans">
    /// A table buffer holding the related transaction.
    /// </param>
    /// <param name="_currencyType">
    /// The currency type report parameter value.
    /// </param>
    /// <param name="_fromDate">
    /// The starting date of the report period.
    /// </param>
    /// <param name="_toDate">
    /// The ending date of the report period.
    /// </param>
    /// <returns>
    /// true if the transaction must be included in the report calculation; otherwise, false.
    /// </returns>
    public boolean isTransIncluded(Common           _trans,
                                   Common           _subtrans,
                                   CurrencyType_RU  _currencyType,
                                   TransDate        _fromDate = dateNull(),
                                   TransDate        _toDate   = dateNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the Main account report grouping parameter.
    /// </summary>
    /// <returns>
    /// The name of the Main account report grouping parameter.
    /// </returns>
    public str keyMainAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpandedBalance</Name>
				<Source><![CDATA[
        public boolean parmExpandedBalance(boolean _expandedBalance = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the packed query of the report type.
    /// </summary>
    /// <returns>
    /// The packed query of the report type.
    /// </returns>
    public container query()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the packed balance query of the report type.
    /// </summary>
    /// <param name="_key">
    /// A container holding the selected grouping parameters of the report.
    /// </param>
    /// <param name="_currencyType">
    /// The currency type report parameter value.
    /// </param>
    /// <param name="_debitCredit">
    /// The type of calculated amounts.
    /// </param>
    /// <param name="_query">
    /// The query of the report.
    /// </param>
    /// <param name="_debitExpr">
    /// An extended query range expression for debit amounts; optional.
    /// </param>
    /// <param name="_creditExpr">
    /// An extended query range expression for credit amounts; optional.
    /// </param>
    /// <returns>
    /// The packed balance query of the report type.
    /// </returns>
    public container queryBalance(container         _key,
                                  CurrencyType_RU   _currencyType,
                                  DebCredProposal   _debitCredit = DebCredProposal::None,
                                  Query             _query       = null,
                                  str               _debitExpr   = '',
                                  str               _creditExpr  = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>QueryRun</c> instance of the report query.
    /// </summary>
    /// <param name="_query">
    /// The query of the report.
    /// </param>
    /// <param name="_key">
    /// A container holding the selected grouping parameters of the report.
    /// </param>
    /// <returns>
    /// The <c>QueryRun</c> instance of the report query.
    /// </returns>
    public QueryRun queryRun(Query _query, container _key = conNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the settled amount on date for the transaction.
    /// </summary>
    /// <param name="_trans">
    /// A table buffer holding the transaction.
    /// </param>
    /// <param name="_settlement">
    /// A table buffer holding the settlement transaction.
    /// </param>
    /// <param name="_dateFrom">
    /// The starting date of the report period.
    /// </param>
    /// <param name="_dateTo">
    /// The ending date of the report period.
    /// </param>
    /// <param name="_currencyType">
    /// The currency type report parameter value.
    /// </param>
    /// <returns>
    /// The settled amount on date for the transaction.
    /// </returns>
    public Amount settledAmount(Common             _trans,
                                Common             _settlement,
                                TransDate          _dateFrom,
                                TransDate          _dateTo,
                                CurrencyType_RU    _currencyType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledTransAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the settled amounts on date for the transaction.
    /// </summary>
    /// <param name="_trans">
    /// A table buffer holding the transaction.
    /// </param>
    /// <param name="_dateFrom">
    /// The starting date of the report period.
    /// </param>
    /// <param name="_dateTo">
    /// The ending date of the report period.
    /// </param>
    /// <param name="_currencyType">
    /// The currency type report parameter value.
    /// </param>
    /// <param name="_trans_W">
    /// A table buffer holding _W extension table for the transaction.
    /// </param>
    /// <returns>
    /// The settled amounts on date for the transaction.
    /// </returns>
    /// <remarks>
    /// [debit amount, credit amount]
    /// </remarks>
    public container settledTransAmounts(Common          _trans,
                                         TransDate       _dateFrom,
                                         TransDate       _dateTo,
                                         CurrencyType_RU _currencyType,
                                         Common          _trans_W)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table ID of the setllement history table.
    /// </summary>
    /// <returns>
    /// The table ID of the setllement history table.
    /// </returns>
    public TableId settlementTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showBalanceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if itemizing balance is the option for this type of the report.
    /// </summary>
    /// <returns>
    /// true if itemizing balance is the option for this type of the report; otherwise, false.
    /// </returns>
    public boolean showBalanceTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if showing the transaction origin is the option for this type of the report.
    /// </summary>
    /// <returns>
    /// true if the transaction origin is the option for this type of the report; otherwise, false.
    /// </returns>
    public boolean showOrigin()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the buffer containing the split transaction.
    /// </summary>
    /// <param name="_trans">
    /// The source transaction.
    /// </param>
    /// <returns>
    /// The buffer containing the split transaction.
    /// </returns>
    public Common splitTrans(Common _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTransTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table ID for the subtransaction table.
    /// </summary>
    /// <returns>
    /// The table ID for the subtransaction table.
    /// </returns>
    public TableId subTransTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding amounts for the transaction.
    /// </summary>
    /// <param name="_trans">
    /// A table buffer holding the transaction.
    /// </param>
    /// <param name="_currencyType">
    /// The currency type report parameter value.
    /// </param>
    /// <param name="_trans_W">
    /// A table buffer holding _W extension table for the transaction.
    /// </param>
    /// <returns>
    /// A container holding amounts for the transaction.
    /// </returns>
    /// <remarks>
    /// [debit amount, credit amount]
    /// </remarks>
    public container transAmounts(Common _trans, CurrencyType_RU _currencyType, Common _trans_W)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDetailLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the container holding labels for the transaction document fields.
    /// </summary>
    /// <returns>
    /// The container holding labels for the transaction document fields.
    /// </returns>
    public container transDetailLabels()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding document fields for the transaction.
    /// </summary>
    /// <param name="_trans">
    /// A table buffer holding the transaction.
    /// </param>
    /// <param name="_transHeader">
    /// A table buffer holding the transaction header.
    /// </param>
    /// <returns>
    /// A container holding document fields for the transaction.
    /// </returns>
    public container transDetails(Common _trans, Common _transHeader = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transHeaderTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table ID of the transaction header table.
    /// </summary>
    /// <returns>
    /// The table ID of the transaction header table.
    /// </returns>
    public TableId transHeaderTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transKeyData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding field IDs of key fields for filtering purposes on the transaction level.
    /// </summary>
    /// <returns>
    /// A container holding field IDs of key fields for filtering purposes on the transaction level.
    /// </returns>
    public container transKeyData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table ID of the transaction table.
    /// </summary>
    /// <returns>
    /// The table ID of the transaction table.
    /// </returns>
    public TableId transTableId()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>