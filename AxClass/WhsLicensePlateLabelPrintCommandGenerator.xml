<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLicensePlateLabelPrintCommandGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class WhsLicensePlateLabelPrintCommandGenerator extends WhsLabelPrintCommandGenerator
{
    private WHSLicensePlateLabel licensePlateLabel;
    private WHSDocumentRoutingLabelLayoutLine routingLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>withLicensePlateLabel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WhsLicensePlateLabelPrintCommandGenerator withLicensePlateLabel(WHSLicensePlateLabel _licensePlateLabel)
    {
        licensePlateLabel = _licensePlateLabel;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withRoutingLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WhsLicensePlateLabelPrintCommandGenerator withRoutingLine(WHSDocumentRoutingLabelLayoutLine _routingLine)
    {
        routingLine = _routingLine;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelsForLicensePlate</Name>
				<Source><![CDATA[
    [Replaceable]
    public static int printLabelsForLicensePlate(WHSDocumentRoutingLabelLayoutLine _licensePlateRoutingLine, WHSLicensePlateLabel _licensePlateLabel, WHSLabelPrinterSelector _labelPrinterSelector)
    {
        WHSLabelLayout labelLayout = WHSLabelLayout::findRecId(_licensePlateRoutingLine.LabelLayout);

        _labelPrinterSelector.withForceUseOfFallbackPrinter(_licensePlateRoutingLine.UseSpecifiedPrinter == WHSDocumentRoutingUseSpecifiedPrinter::Always);
        _labelPrinterSelector.withFallbackPrinter(_licensePlateRoutingLine.PrinterName);
        WHSPrinterName printerName = _labelPrinterSelector.selectPrinterForPrinterStockType(labelLayout.PrinterStockTypeName);

        var generator = new WhsLicensePlateLabelPrintCommandGenerator()
                            .withLicensePlateLabel(_licensePlateLabel)
                            .withRoutingLine(_licensePlateRoutingLine)
                            .withLabelLayout(labelLayout)
                            .withPrinter(printerName);
                                    
        return generator.printLabels();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTranslator</Name>
				<Source><![CDATA[
    protected void configureTranslator(WhsDocumentRoutingTranslator _translator)
    {
        _translator.withRecord(routingLine, 'routingLine');
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTranslatorForDefaultDataSource</Name>
				<Source><![CDATA[
    protected void configureTranslatorForDefaultDataSource(WhsDocumentRoutingTranslator _translator)
    {
        _translator.withRecord(licensePlateLabel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureQuery</Name>
				<Source><![CDATA[
    protected void configureQuery(Query _query)
    {
        _query.dataSourceTable(tableNum(WHSLicensePlateLabel))
              .addRange(fieldNum(WHSLicensePlateLabel, LabelId))
              .value(queryValue(licensePlateLabel.LabelId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>