<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservationYearEndClose_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetResYearEndClose_PSN</c> class contains the business logic for budget reservation year-end close.
/// </summary>

public class BudgetReservationYearEndClose_PSN
{
    BudgetReservationYearEndCloseContract_PSN   budgetReservationYearEndCloseContract;
    FormRun                                     budgetReservationYearEndCloseForm;
    BudgetReservationTmpPeriodSelection_PSN     budgetReservationTmpPeriodSelection;
    BudgetReservationParmTmpPeriodClose_PSN     budgetReservationParmTmpPeriodClose;
    FiscalCalendarYear                          fiscalCalendarYear;
    FiscalCalendarYear                          previousFiscalCalendarYear;
    FiscalYearName                              origFiscalYearName;
    FiscalCalendarRecId                         fiscalCalendarRecId;
    boolean                                     isBudgetOnly;

    // Form controls
    FormComboBoxControl                         yearEndOption;
    FormReferenceGroupControl                   originalBudgetTransactionCode;
    FormReferenceGroupControl                   carryForwardBudgetTransactionCode;

    FormStringControl                           fiscalCalendarIdControl;
    FormStringControl                           selectFiscalCalendarYear;

    FormDateControl                             closingPostingDate;
    FormComboBoxControl                         periodCode;
    FormStringControl                           closingFiscalCalendarPeriod;

    FormDateControl                             openingPostingDate;
    FormStringControl                           openingFiscalCalendarPeriod;

    FormGridControl                             gridRetrieveBudgetReservations;

    FormCommandButtonControl                    buttonProcess;

    FormButtonControl                           buttonRetrieveBudgetReservations;
    FormButtonControl                           buttonIncludeAll;
    FormButtonControl                           buttonExcludeAll;
    FormButtonControl                           buttonViewSubledgerJournal;
    FormButtonControl                           buttonViewBudgetReservation;

    /// <summary>
    /// Enables or disables the controls of original and carry-forward budget codes.
    /// </summary>
    /// <param name="_budgetTransactionCodeRecId">
    /// The record ID of the <c>BudgetTransactionCode</c> table.
    /// </param>
    /// <param name="_budgetTransactionType">
    /// The enum value of the <c>BudgetTransactionType</c>.
    /// </param>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditBudgetTransactionCodeControls</Name>
				<Source><![CDATA[
    private void allowEditBudgetTransactionCodeControls(RefRecId _budgetTransactionCodeRecId, BudgetTransactionType _budgetTransactionType)
    {
        BudgetTransactionCodeRecId  budgetTransactionCodeRecId;
        BudgetTransactionCode       budgetTransactionCode;
        SysQueryRun                 budgetCodes;
        Counter                     budgetCodeCount;

        // Check to see if saved budget codes are still valid.
        budgetTransactionCode = BudgetTransactionCode::find(_budgetTransactionCodeRecId);
        budgetCodes = this.getBudgetCodesQuery(_budgetTransactionType);
        budgetCodeCount = QueryRun::getQueryRowCount(budgetCodes.query(), intMax());

        if (!budgetTransactionCode.RecId
            || budgetTransactionCode.BudgetTransactionType != _budgetTransactionType
            || budgetTransactionCode.WorkflowTableSequenceNumber)
        {
            budgetTransactionCodeRecId = 0;

            if (budgetCodeCount == 1)
            {
                budgetTransactionCodeRecId = this.getFirstBudgetCode(_budgetTransactionType);
            }
        }

        if (_budgetTransactionType == BudgetTransactionType::OriginalBudget)
        {
            if (_budgetTransactionCodeRecId == 0)
            {
                budgetReservationParmTmpPeriodClose.OriginalBudgetTransactionCode = budgetTransactionCodeRecId;
            }

            originalBudgetTransactionCode.allowEdit(budgetCodeCount == 0 || budgetCodeCount > 1);
        }
        else if (_budgetTransactionType == BudgetTransactionType::CarryForwardBudget)
        {
            if (_budgetTransactionCodeRecId == 0)
            {
                budgetReservationParmTmpPeriodClose.CarryForwardBudgetTransactionCode = budgetTransactionCodeRecId;
            }

            carryForwardBudgetTransactionCode.allowEdit(budgetCodeCount == 0 || budgetCodeCount > 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBudgetReservationTmpPeriodSel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>BudgetReservationTmpPeriodSelection_PSN</c> table records.
    /// </summary>

    public void deleteBudgetReservationTmpPeriodSel()
    {
        budgetReservationTmpPeriodSelection.deleteAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchBudgetReservationsBySysQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetReservationHeader_PSN</c> table records based on the <c>SysQueryForm</c> filters.
    /// </summary>

    public void fetchBudgetReservationsBySysQuery()
    {
        SysQueryRun queryRun = new SysQueryRun(new Query());
        queryRun.title("@Budgeting_BudgetReservationPS:BudgetResYearEndCloseClassRetrieveDocumentTitle");

        QueryBuildDataSource budgetReservationHeaderQbds = queryRun.query().addDataSource(tableNum(BudgetReservationHeader_PSN));

        QueryBuildRange initialBudgetReservationStatusCriteria = budgetReservationHeaderQbds.addRange(fieldNum(BudgetReservationHeader_PSN, DocumentStatus));
        initialBudgetReservationStatusCriteria.value(queryValue(BudgetReservationDocumentStatus_PSN::Posted));
        initialBudgetReservationStatusCriteria.status(RangeStatus::Hidden);

        if (queryRun.prompt())
        {
            gridRetrieveBudgetReservations.lockWindowUpdate(true);

            budgetReservationTmpPeriodSelection.deleteAll();

            container budgetReservationListContainer = BudgetReservationYearEndClose_PSN::validateAndFilterBudgetReservations(
            queryRun.pack(),
            previousFiscalCalendarYear.StartDate,
            previousFiscalCalendarYear.EndDate);

            if (budgetReservationListContainer != conNull())
            {
                List budgetReservationList = List::create(budgetReservationListContainer);

                if (budgetReservationList.elements() > 0)
                {
                    ttsbegin;

                    ListEnumerator budgetReservationListEnum = budgetReservationList.getEnumerator();
                    BudgetReservationRecId_PSN  budgetReservationHeaderRecID;
                    Amount                      budgetReservationTotalAmount;

                    while (budgetReservationListEnum.moveNext())
                    {
                        [budgetReservationHeaderRecID, budgetReservationTotalAmount] = budgetReservationListEnum.current();

                        budgetReservationTmpPeriodSelection.addItem(budgetReservationHeaderRecID, budgetReservationTotalAmount);
                    }

                    ttscommit;
                }
            }

            this.updateDesign();

            gridRetrieveBudgetReservations.lockWindowUpdate(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCodesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>SysQueryRun</c> class instance filtered by the budget transaction types in the <c>BudgetTransactionCode</c> table.
    /// </summary>
    /// <param name="_budgetTransactionType">
    /// The value of the enum <c>BudgetTransactionType</c>.
    /// </param>
    /// <param name="_getWorkflowBudgetCode">
    /// Determines whether to fetch the <c>BudgetTransactionCode</c> table records with value of workflow table sequenceNumber field value or not.
    /// </param>
    /// <returns>
    /// The <c>SysQueryRun</c> instance.
    /// </returns>

    private SysQueryRun getBudgetCodesQuery(BudgetTransactionType _budgetTransactionType, boolean _getWorkflowBudgetCode = false)
    {
        Query       lookupQuery;
        SysQueryRun queryRun;

        // Add the query to the lookup form.
        lookupQuery = BudgetTransactionManager::getBudgetTransactionCodeQuery(true, _budgetTransactionType);

        if (_getWorkflowBudgetCode)
        {
            lookupQuery.dataSourceTable(tableNum(BudgetTransactionCode)).addRange(
                fieldNum(BudgetTransactionCode, WorkflowTableSequenceNumber)).value(SysQuery::valueNotEmptyString());
        }
        else
        {
            lookupQuery.dataSourceTable(tableNum(BudgetTransactionCode)).addRange(
                fieldNum(BudgetTransactionCode, WorkflowTableSequenceNumber)).value(SysQuery::valueEmptyString());
        }

        lookupQuery.dataSourceTable(tableNum(BudgetTransactionCode)).addOrderByField(
            fieldNum(BudgetTransactionCode, IsDefault),
            SortOrder::Descending);

        queryRun = new SysQueryRun(lookupQuery);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstBudgetCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the first record's record ID value of the <c>BudgetTransactionCode</c> table that has the specified budget transaction type.
    /// </summary>
    /// <param name="_budgetTransactionType">
    /// The enum <c>BudgetTransactionType</c> value.
    /// </param>
    /// <param name="_getWorkflowBudgetCode">
    /// A boolean value that specifies whether to fetch the workflow related budget codes or not.
    /// </param>
    /// <returns>
    /// The first record's record ID value of the <c>BudgetTransactionCode</c> table.
    /// </returns>

    public BudgetTransactionCodeRecId getFirstBudgetCode(BudgetTransactionType _budgetTransactionType, boolean _getWorkflowBudgetCode = false)
    {
        SysQueryRun             budgetCodes;
        Counter                 budgetCodeCount;
        BudgetTransactionCode   budgetTransactionCode;

        budgetCodes     = this.getBudgetCodesQuery(_budgetTransactionType, _getWorkflowBudgetCode);
        budgetCodeCount = QueryRun::getQueryRowCount(budgetCodes.query(), intMax());

        if (budgetCodeCount >= 1)
        {
            budgetCodes.next();
            budgetTransactionCode = budgetCodes.get(tableNum(BudgetTransactionCode));
        }

        return budgetTransactionCode.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeOrExcludeAllBudgetReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks or unmarks all records currently displayed in the grid.
    /// </summary>
    /// <param name="_includeAllBudgetReservations">
    /// A boolean value that specifies whether to mark or unmark all the records in the grid.
    /// </param>
    public void includeOrExcludeAllBudgetReservations(boolean _includeAllBudgetReservations)
    {
        gridRetrieveBudgetReservations.lockWindowUpdate(true);

        budgetReservationTmpPeriodSelection.selectAll(_includeAllBudgetReservations);
        budgetReservationTmpPeriodSelection.dataSource().research();

        gridRetrieveBudgetReservations.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBudgetReservationParmTmpPeriodClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetReservationParmTmpPeriodClose_PSN</c> table with default values.
    /// </summary>

    public void initBudgetReservationParmTmpPeriodClose()
    {
        FormDataSource  formDataSourceBudgetReservation;

        if (this.isBudgetControlEnabledForBudgetRes())
        {
            budgetReservationParmTmpPeriodClose.YearEndOption = PurchYearEndOption::ProcessAndCarryForwardBudget;
        }
        else
        {
            // No budget control - set the year-end option and don't allow the user to change it.
            budgetReservationParmTmpPeriodClose.YearEndOption = PurchYearEndOption::ProcessAndDoNotCarryForwardBudget;

            formDataSourceBudgetReservation = budgetReservationParmTmpPeriodClose.dataSource();
            formDataSourceBudgetReservation.object(fieldNum(BudgetReservationParmTmpPeriodClose_PSN, YearEndOption)).allowEdit(false);
            formDataSourceBudgetReservation.object(fieldNum(BudgetReservationParmTmpPeriodClose_PSN, YearEndOption)).skip(true);
        }

        // Original budget code.
        budgetReservationParmTmpPeriodClose.OriginalBudgetTransactionCode = this.getFirstBudgetCode(BudgetTransactionType::OriginalBudget);

        // Carry-forward budget code.
        budgetReservationParmTmpPeriodClose.CarryForwardBudgetTransactionCode = this.getFirstBudgetCode(BudgetTransactionType::CarryForwardBudget);
        budgetReservationParmTmpPeriodClose.insert();

        // Setting fiscal calendar current and previous years table buffer.
        this.setFiscalCalendarYear();

        // Setting fiscal calendar periods controls values.
        this.setCalendarPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetControlEnabledForBudgetRes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether budget control has been enabled for budget reservations.
    /// </summary>
    /// <returns>
    /// true if budget control has been enabled for budget reservations; otherwise, false.
    /// </returns>

    private boolean isBudgetControlEnabledForBudgetRes()
    {
        LedgerRecId ledgerRecId = Ledger::current();
        boolean     budgetControlEnabledForBR;

        budgetControlEnabledForBR = Ledger::isLedgerBudgetControlEnabled(ledgerRecId)
            && BudgetControlConfiguration::isSourceIntegratorEnabled(ledgerRecId, BudgetControlSourceIntegrator::BudgetReservation_PSN);

        return budgetControlEnabledForBR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupClosingPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform lookup of closing fiscal calendar periods.
    /// </summary>
    /// <returns>
    /// The <c>SysTableLookup</c> class instance.
    /// </returns>

    public SysTableLookup lookupClosingPeriod()
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(FiscalCalendarPeriod), closingFiscalCalendarPeriod, false);
        sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, Name));

        queryBuildDataSource = query.addDataSource(tableNum(FiscalCalendarPeriod));
        queryBuildDataSource.addSelectionField(fieldNum(FiscalCalendarPeriod, Name));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(FiscalCalendarPeriod, FiscalCalendarYear));

        if (previousFiscalCalendarYear)
        {
            queryBuildRange.value(queryValue(previousFiscalCalendarYear.RecId));
        }
        else
        {
            queryBuildRange.value(queryValue(fiscalCalendarYear.RecId));
        }

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(FiscalCalendarPeriod, Type));
        queryBuildRange.value(queryValue(FiscalPeriodType::Closing));

        // Force sorting of the list by start date.
        queryBuildDataSource.addOrderByField(fieldNum(FiscalCalendarPeriod, StartDate));

        sysTableLookup.parmQuery(query);

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservParmTmpPeriodClose</Name>
				<Source><![CDATA[
    public BudgetReservationParmTmpPeriodClose_PSN parmBudgetReservParmTmpPeriodClose(BudgetReservationParmTmpPeriodClose_PSN _budgetReservationParmTmpPeriodClose = budgetReservationParmTmpPeriodClose)
    {
        budgetReservationParmTmpPeriodClose = _budgetReservationParmTmpPeriodClose;

        return budgetReservationParmTmpPeriodClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservTmpPeriodSelection</Name>
				<Source><![CDATA[
    public BudgetReservationTmpPeriodSelection_PSN parmBudgetReservTmpPeriodSelection(BudgetReservationTmpPeriodSelection_PSN _budgetReservationTmpPeriodSelection = budgetReservationTmpPeriodSelection)
    {
        budgetReservationTmpPeriodSelection = _budgetReservationTmpPeriodSelection;

        return budgetReservationTmpPeriodSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservYearEndCloseForm</Name>
				<Source><![CDATA[
    public FormRun parmBudgetReservYearEndCloseForm(FormRun _budgetReservationYearEndCloseForm = budgetReservationYearEndCloseForm)
    {
        budgetReservationYearEndCloseForm = _budgetReservationYearEndCloseForm;

        return budgetReservationYearEndCloseForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbudgetReservationYearEndCloseContract</Name>
				<Source><![CDATA[
    public BudgetReservationYearEndCloseContract_PSN parmbudgetReservationYearEndCloseContract(BudgetReservationYearEndCloseContract_PSN _budgetReservationYearEndCloseContract = budgetReservationYearEndCloseContract)
    {
        budgetReservationYearEndCloseContract = _budgetReservationYearEndCloseContract;

        return budgetReservationYearEndCloseContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonExcludeAll</Name>
				<Source><![CDATA[
    public FormButtonControl parmButtonExcludeAll(FormButtonControl _buttonExcludeAll = buttonExcludeAll)
    {
        buttonExcludeAll = _buttonExcludeAll;

        return buttonExcludeAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonIncludeAll</Name>
				<Source><![CDATA[
    public FormButtonControl parmButtonIncludeAll(FormButtonControl _buttonIncludeAll = buttonIncludeAll)
    {
        buttonIncludeAll = _buttonIncludeAll;

        return buttonIncludeAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonProcess</Name>
				<Source><![CDATA[
    public FormCommandButtonControl parmButtonProcess(FormCommandButtonControl _buttonProcess = buttonProcess)
    {
        buttonProcess = _buttonProcess;

        return buttonProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonRetrieveBudgetReservation</Name>
				<Source><![CDATA[
    public FormButtonControl parmButtonRetrieveBudgetReservation(FormButtonControl _buttonRetrieveBudgetReservations = buttonRetrieveBudgetReservations)
    {
        buttonRetrieveBudgetReservations = _buttonRetrieveBudgetReservations;

        return buttonRetrieveBudgetReservations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonViewBudgetReservation</Name>
				<Source><![CDATA[
    public FormButtonControl parmButtonViewBudgetReservation(FormButtonControl _buttonViewBudgetReservation = buttonViewBudgetReservation)
    {
        buttonViewBudgetReservation = _buttonViewBudgetReservation;

        return buttonViewBudgetReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonViewSubledgerJournal</Name>
				<Source><![CDATA[
    public FormButtonControl parmButtonViewSubledgerJournal(FormButtonControl _buttonViewSubledgerJournal = buttonViewSubledgerJournal)
    {
        buttonViewSubledgerJournal = _buttonViewSubledgerJournal;

        return buttonViewSubledgerJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCarryForwardBudgetTransactionCode</Name>
				<Source><![CDATA[
    public FormReferenceGroupControl parmCarryForwardBudgetTransactionCode(FormReferenceGroupControl _carryForwardBudgetTransactionCode = carryForwardBudgetTransactionCode)
    {
        carryForwardBudgetTransactionCode = _carryForwardBudgetTransactionCode;

        return carryForwardBudgetTransactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClosingFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    public FormStringControl parmClosingFiscalCalendarPeriod(FormStringControl _closingFiscalCalendarPeriod = closingFiscalCalendarPeriod)
    {
        closingFiscalCalendarPeriod = _closingFiscalCalendarPeriod;

        return closingFiscalCalendarPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClosingPostingDate</Name>
				<Source><![CDATA[
    public FormDateControl parmClosingPostingDate(FormDateControl _closingPostingDate = closingPostingDate)
    {
        closingPostingDate = _closingPostingDate;

        return closingPostingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalCalendarIdControl</Name>
				<Source><![CDATA[
    public FormStringControl parmFiscalCalendarIdControl(FormStringControl _fiscalCalendarIdControl = fiscalCalendarIdControl)
    {
        fiscalCalendarIdControl = _fiscalCalendarIdControl;

        return fiscalCalendarIdControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalCalendarRecId</Name>
				<Source><![CDATA[
    public FiscalCalendarRecId parmFiscalCalendarRecId(FiscalCalendarRecId _fiscalCalendarRecId = fiscalCalendarRecId)
    {
        fiscalCalendarRecId = _fiscalCalendarRecId;

        return fiscalCalendarRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGridRetrieveBudgetReservations</Name>
				<Source><![CDATA[
    public FormGridControl parmGridRetrieveBudgetReservations(FormGridControl _gridRetrieveBudgetReservations = gridRetrieveBudgetReservations)
    {
        gridRetrieveBudgetReservations = _gridRetrieveBudgetReservations;

        return gridRetrieveBudgetReservations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBudgetOnly</Name>
				<Source><![CDATA[
    public boolean parmIsBudgetOnly(boolean _isBudgetOnly = isBudgetOnly)
    {
        isBudgetOnly = _isBudgetOnly;

        return isBudgetOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpeningFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    public FormStringControl parmOpeningFiscalCalendarPeriod(FormStringControl _openingFiscalCalendarPeriod = openingFiscalCalendarPeriod)
    {
        openingFiscalCalendarPeriod = _openingFiscalCalendarPeriod;

        return openingFiscalCalendarPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpeningPostingDate</Name>
				<Source><![CDATA[
    public FormDateControl parmOpeningPostingDate(FormDateControl _openingPostingDate = openingPostingDate)
    {
        openingPostingDate = _openingPostingDate;

        return openingPostingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigFiscalYearName</Name>
				<Source><![CDATA[
    public FiscalYearName parmOrigFiscalYearName(FiscalYearName _origFiscalYearName = origFiscalYearName)
    {
        origFiscalYearName = _origFiscalYearName;

        return origFiscalYearName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalBudgetTransactionCode</Name>
				<Source><![CDATA[
    public FormReferenceGroupControl parmOriginalBudgetTransactionCode(FormReferenceGroupControl _originalBudgetTransactionCode = originalBudgetTransactionCode)
    {
        originalBudgetTransactionCode = _originalBudgetTransactionCode;

        return originalBudgetTransactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodCode</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmPeriodCode(FormComboBoxControl _periodCode = periodCode)
    {
        periodCode = _periodCode;

        return periodCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectFiscalCalendarYear</Name>
				<Source><![CDATA[
    public FormStringControl parmSelectFiscalCalendarYear(FormStringControl _selectFiscalCalendarYear = selectFiscalCalendarYear)
    {
        selectFiscalCalendarYear = _selectFiscalCalendarYear;

        return selectFiscalCalendarYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmYearEndOptionControl</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmYearEndOptionControl(FormComboBoxControl _yearEndOption = yearEndOption)
    {
        yearEndOption = _yearEndOption;

        return yearEndOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBudgetOnlyProcess</Name>
				<Source><![CDATA[
    public boolean performBudgetOnlyProcess()
    {
        LedgerParameters ledgerParameters = LedgerParameters::find();

        return (ledgerParameters.IsEncumbranceProcessEnabled == NoYes::No
            && ledgerParameters.IsBudgetReservationEnabled_PSN == NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetFormData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>BudgetReservationTmpPeriodSelection_PSN</c> table records.
    /// </summary>
    public void resetFormData()
    {
        this.setCalendarPeriod();

        gridRetrieveBudgetReservations.lockWindowUpdate(true);
        budgetReservationTmpPeriodSelection.deleteAll();
        gridRetrieveBudgetReservations.lockWindowUpdate(false);

        budgetReservationYearEndCloseForm.redraw();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreLastSavedValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value on all controls to the values stored on the contract class.
    /// </summary>

    public void restoreLastSavedValues()
    {
        // Year-end options.
        yearEndOption.selection(budgetReservationYearEndCloseContract.parmYearEndOption());
        originalBudgetTransactionCode.value(budgetReservationYearEndCloseContract.parmOriginalBudgetTransactionCode());
        carryForwardBudgetTransactionCode.value(budgetReservationYearEndCloseContract.parmCarryForwardBudgetTransactionCode());

        // Setting previous values on temp tables.
        budgetReservationParmTmpPeriodClose.YearEndOption = budgetReservationYearEndCloseContract.parmYearEndOption();
        budgetReservationParmTmpPeriodClose.OriginalBudgetTransactionCode = budgetReservationYearEndCloseContract.parmOriginalBudgetTransactionCode();
        budgetReservationParmTmpPeriodClose.CarryForwardBudgetTransactionCode = budgetReservationYearEndCloseContract.parmCarryForwardBudgetTransactionCode();
        budgetReservationParmTmpPeriodClose.write();

        // Checking to see if saved budget original budget code is still valid.
        this.allowEditBudgetTransactionCodeControls(budgetReservationParmTmpPeriodClose.OriginalBudgetTransactionCode, BudgetTransactionType::OriginalBudget);

        // Checking to see if saved budget carry-forward budget code is still valid.
        this.allowEditBudgetTransactionCodeControls(budgetReservationParmTmpPeriodClose.CarryForwardBudgetTransactionCode, BudgetTransactionType::CarryForwardBudget);

        if (budgetReservationYearEndCloseContract.parmFiscalCalendarId())
        {
            // Setting last saved fiscal calendar ID.
            fiscalCalendarIdControl.text(budgetReservationYearEndCloseContract.parmFiscalCalendarId());

            // Setting last saved fiscal calendar year.
            selectFiscalCalendarYear.text(budgetReservationYearEndCloseContract.parmPrevFiscalYearName());

            this.parmFiscalCalendarRecId(FiscalCalendar::findByCalendarId(budgetReservationYearEndCloseContract.parmFiscalCalendarId()).RecId);

            periodCode.selection(budgetReservationYearEndCloseContract.parmFiscalPeriodType());

            // Setting the other fiscal calendar controls values based on the above settings.
            this.selectFiscalCalendarYearControlModified();
        }
        else
        {
            budgetReservationYearEndCloseForm.redraw();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFiscalCalendarYearControlModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the data on the form on the modification of the fiscal calendar year.
    /// </summary>

    public void selectFiscalCalendarYearControlModified()
    {
        if (origFiscalYearName != selectFiscalCalendarYear.text())
        {
            // Fetching the current and previous fiscal calendar year based on fiscal year name and fiscal calendar.
            select firstonly previousFiscalCalendarYear
                where previousFiscalCalendarYear.FiscalCalendar  == this.parmFiscalCalendarRecId()
                    && previousFiscalCalendarYear.Name == selectFiscalCalendarYear.text()
                outer join firstonly fiscalCalendarYear
                    order by fiscalCalendarYear.StartDate asc
                    where  fiscalCalendarYear.StartDate > previousFiscalCalendarYear.StartDate
                        && fiscalCalendarYear.FiscalCalendar == previousFiscalCalendarYear.FiscalCalendar;

            this.resetFormData();

            origFiscalYearName = selectFiscalCalendarYear.text();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalendarPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fiscal year and period controls value.
    /// </summary>

    private void setCalendarPeriod()
    {
        FiscalCalendarYear      localFiscalCalendarYear;
        FiscalCalendarPeriod    fiscalCalendarPeriod;

        selectFiscalCalendarYear.text(previousFiscalCalendarYear.yearName());
        closingPostingDate.dateValue(previousFiscalCalendarYear.EndDate);

        // Fetching current year and its opening period based on previous fiscal year-end date and fiscal calendar.
        select firstonly localFiscalCalendarYear
            order by localFiscalCalendarYear.StartDate asc
            where localFiscalCalendarYear.StartDate > previousFiscalCalendarYear.EndDate
                && localFiscalCalendarYear.FiscalCalendar == this.parmFiscalCalendarRecId()
            outer join firstonly RecId, Name from fiscalCalendarPeriod
                where fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
                    && fiscalCalendarPeriod.FiscalCalendarYear == localFiscalCalendarYear.RecId;

        if (!previousFiscalCalendarYear)
        {
            fiscalCalendarYear = localFiscalCalendarYear;
        }

        openingPostingDate.dateValue(fiscalCalendarYear.StartDate);

        openingFiscalCalendarPeriod.text(fiscalCalendarPeriod.periodName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContractParmFromFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the setting of contract parm method from respective control values.
    /// </summary>

    public void setContractParmFromFormControl()
    {
        FiscalCalendarPeriod  fiscalCalendarPeriod;
        List                  budgetReservationList = new List(Types::Int64);
        boolean               normalPeriodCodeSelected;

        budgetReservationYearEndCloseContract.parmYearEndOption(budgetReservationParmTmpPeriodClose.YearEndOption);
        budgetReservationYearEndCloseContract.parmOriginalBudgetTransactionCode(budgetReservationParmTmpPeriodClose.OriginalBudgetTransactionCode);
        budgetReservationYearEndCloseContract.parmCarryForwardBudgetTransactionCode(budgetReservationParmTmpPeriodClose.CarryForwardBudgetTransactionCode);
        budgetReservationYearEndCloseContract.parmFiscalCalendarId(fiscalCalendarIdControl.text());
        budgetReservationYearEndCloseContract.parmFiscalPeriodType(periodCode.selection());
        budgetReservationYearEndCloseContract.parmPrevFiscalYearName(selectFiscalCalendarYear.text());
        budgetReservationYearEndCloseContract.parmPrevFiscalYearStartDate(previousFiscalCalendarYear.StartDate);
        budgetReservationYearEndCloseContract.parmPrevFiscalYearEndDate(previousFiscalCalendarYear.EndDate);
        budgetReservationYearEndCloseContract.parmClosingPostingDate(closingPostingDate.dateValue());

        normalPeriodCodeSelected = (periodCode.selection() == FiscalPeriodType::Operating);
        
        if (normalPeriodCodeSelected)
        {
            select firstonly RecId from fiscalCalendarPeriod
                order by fiscalCalendarPeriod.EndDate desc
                where  fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
                    && fiscalCalendarPeriod.EndDate <= closingPostingDate.dateValue()
                    && fiscalCalendarPeriod.FiscalCalendarYear == previousFiscalCalendarYear.RecId;
        }
        else
        {
            fiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(
                previousFiscalCalendarYear.RecId,
                closingFiscalCalendarPeriod.text());
        }

        budgetReservationYearEndCloseContract.parmClosingFiscalCalendarPeriod(fiscalCalendarPeriod.RecId);
        budgetReservationYearEndCloseContract.parmOpeningPostingDate(openingPostingDate.dateValue());

        fiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(
            fiscalCalendarYear.RecId,
            openingFiscalCalendarPeriod.text());

        budgetReservationYearEndCloseContract.parmOpeningFiscalCalendarPeriod(fiscalCalendarPeriod.RecId);

        gridRetrieveBudgetReservations.lockWindowUpdate(true);

        while select Selected, BudgetReservationHeader_PSN from budgetReservationTmpPeriodSelection
        {
            if (budgetReservationTmpPeriodSelection.Selected == NoYes::Yes)
            {
                budgetReservationList.addEnd(budgetReservationTmpPeriodSelection.BudgetReservationHeader_PSN);
            }
        }

        gridRetrieveBudgetReservations.lockWindowUpdate(false);

        if (budgetReservationList.elements() > 0)
        {
            budgetReservationYearEndCloseContract.parmBudgetReservationContainer(budgetReservationList.pack());
        }
        else
        {
            budgetReservationYearEndCloseContract.parmBudgetReservationContainer(conNull());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalCalendarYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets current and previous fiscal calendar year based on specified date and fiscal calendar.
    /// </summary>

    private void setFiscalCalendarYear()
    {
        date currentDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));

        select firstonly fiscalCalendarYear
            where fiscalCalendarYear.FiscalCalendar == this.parmFiscalCalendarRecId()
                && fiscalCalendarYear.StartDate <= currentDate
                && fiscalCalendarYear.EndDate >= currentDate
            outer join firstonly previousFiscalCalendarYear
                order by previousFiscalCalendarYear.StartDate desc
                where previousFiscalCalendarYear.FiscalCalendar == fiscalCalendarYear.FiscalCalendar
                    && previousFiscalCalendarYear.StartDate < fiscalCalendarYear.StartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOperatingFiscalPeriodType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears enum element 'Opening' from the period code control.
    /// </summary>

    public void setOperatingFiscalPeriodType()
    {
        periodCode.delete(enum2str(FiscalPeriodType::Opening));
        periodCode.selection(periodCode.find(enum2str(FiscalPeriodType::Operating)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOriginalFiscalYearName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current fiscal calendar year to a class variable.
    /// </summary>

    public void setOriginalFiscalYearName()
    {
        origFiscalYearName = selectFiscalCalendarYear.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetCodeControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates budget controls based on the year-end option selected.
    /// </summary>

    public void updateBudgetCodeControls()
    {
        boolean doAllowYearEndOptionSet;

        // Check the budget codes and if necessary report warning messages.
        doAllowYearEndOptionSet = (budgetReservationParmTmpPeriodClose.YearEndOption == PurchYearEndOption::ProcessAndCarryForwardBudget);

        originalBudgetTransactionCode.enabled(doAllowYearEndOptionSet);
        originalBudgetTransactionCode.skip(!doAllowYearEndOptionSet);
        carryForwardBudgetTransactionCode.enabled(doAllowYearEndOptionSet);
        carryForwardBudgetTransactionCode.skip(!doAllowYearEndOptionSet);
        carryForwardBudgetTransactionCode.allowEdit(doAllowYearEndOptionSet);

        if (!doAllowYearEndOptionSet)
        {
            carryForwardBudgetTransactionCode.value(0);
            budgetReservationParmTmpPeriodClose.CarryForwardBudgetTransactionCode = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates controls based on the fiscal period type selection.
    /// </summary>

    public void updateDesign()
    {
        boolean         areRecordsFound = !budgetReservationTmpPeriodSelection.isTableEmpty();
        boolean         isNormalPeriodCodeSelected;
        FormDataSource  formDataSourceTmpPeriodClose;

        buttonIncludeAll.enabled(areRecordsFound);
        buttonExcludeAll.enabled(areRecordsFound);
        buttonViewSubledgerJournal.enabled(areRecordsFound);
        buttonViewBudgetReservation.enabled(areRecordsFound);
        buttonProcess.enabled(areRecordsFound);

        isNormalPeriodCodeSelected = (periodCode.selection() == FiscalPeriodType::Operating);

        if (isNormalPeriodCodeSelected && closingFiscalCalendarPeriod.text())
        {
            closingFiscalCalendarPeriod.text("");
        }

        closingFiscalCalendarPeriod.enabled(!isNormalPeriodCodeSelected);
        closingFiscalCalendarPeriod.skip(isNormalPeriodCodeSelected);

        formDataSourceTmpPeriodClose = budgetReservationParmTmpPeriodClose.dataSource();
        formDataSourceTmpPeriodClose.rereadReferenceDataSources();
        formDataSourceTmpPeriodClose.refresh();

        if (areRecordsFound)
        {
            budgetReservationTmpPeriodSelection.dataSource().research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetCodesParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for valid budget codes for budget reservation year-end processing.
    /// </summary>
    /// <returns>
    /// true if the budget codes are valid; otherwise, false.
    /// </returns>

    private boolean validateBudgetCodesParameters()
    {
        BudgetTransactionCode   originalBudgetCode;
        BudgetTransactionCode   carryForwardBudgetCode;

        boolean                 doesOriginalBudgetCodeErrorExist;
        boolean                 doesCarryForwardBudgetCodeErrorExist;
        boolean                 doesOriginalBudgetCodeExist = false;
        boolean                 doesCarryForwardBudgetCodeExist = false;
        boolean                 isValid = true;

        // Check if we may need budget carry-forward settings.
        if (budgetReservationYearEndCloseContract.parmYearEndOption() == PurchYearEndOption::ProcessAndCarryForwardBudget)
        {
            // Validate the number sequence.
            isValid = BudgetTransactionManager::checkBudgetTransactionNumberSequence();

            doesOriginalBudgetCodeErrorExist = !originalBudgetTransactionCode;

            if (doesOriginalBudgetCodeErrorExist)
            {
                originalBudgetCode = BudgetTransactionCode::findDefaultByTransactionType(BudgetTransactionType::OriginalBudget);
                doesOriginalBudgetCodeExist = originalBudgetCode.RecId && !originalBudgetCode.WorkflowTableSequenceNumber;
            }

            doesCarryForwardBudgetCodeErrorExist = !carryForwardBudgetTransactionCode;

            if (doesCarryForwardBudgetCodeErrorExist)
            {
                carryForwardBudgetCode = BudgetTransactionCode::findDefaultByTransactionType(BudgetTransactionType::CarryForwardBudget);
                doesCarryForwardBudgetCodeExist = carryForwardBudgetCode.RecId && !carryForwardBudgetCode.WorkflowTableSequenceNumber;
            }

            if (doesOriginalBudgetCodeErrorExist && doesCarryForwardBudgetCodeErrorExist)
            {
                // Both budget codes are empty.
                if (doesOriginalBudgetCodeExist && doesCarryForwardBudgetCodeExist)
                {
                    // Both budget codes exist in table.
                    isValid = checkFailed(strFmt("@SYS330738", "@SYS330733", "@SYS330744"));
                }
                else if (!doesOriginalBudgetCodeExist && !doesCarryForwardBudgetCodeExist)
                {
                    // Both budget codes do not exist.
                    isValid = checkFailed(strFmt("@SYS330740", formstr(BudgetTransactionCode), "@SYS330733", "@SYS330744"));
                }
            }
            else if (doesOriginalBudgetCodeErrorExist)
            {
                // Original budget code is empty.
                if (doesOriginalBudgetCodeExist)
                {
                    // Original budget code exist in table.
                    isValid = checkFailed(strFmt("@SYS330737", "@SYS330733"));
                }
                else
                {
                    // No original budget codes exist in the budget transaction table.
                    isValid = checkFailed(strFmt("@SYS330739", formstr(BudgetTransactionCode), "@SYS330733"));
                }
            }
            else if (doesCarryForwardBudgetCodeErrorExist)
            {
                // Carry-forward budget code is empty.
                if (doesCarryForwardBudgetCodeExist)
                {
                    // Carry-forward budget code exist in table.
                    isValid = checkFailed(strFmt("@SYS330737", "@SYS330744"));
                }
                else
                {
                    // No carry-forward budget codes exist in the budget transaction table.
                    isValid = checkFailed(strFmt("@SYS330739", formstr(BudgetTransactionCode), "@SYS330744"));
                }
            }

            // Verify budget transaction codes exist.
            originalBudgetCode      = BudgetTransactionCode::find(budgetReservationYearEndCloseContract.parmOriginalBudgetTransactionCode());
            carryForwardBudgetCode  = BudgetTransactionCode::find(budgetReservationYearEndCloseContract.parmCarryForwardBudgetTransactionCode());

            if (originalBudgetCode.BudgetTransactionType != BudgetTransactionType::OriginalBudget
                && carryForwardBudgetCode.BudgetTransactionType != BudgetTransactionType::CarryForwardBudget)
            {
                isValid = checkFailed(strFmt("@SYS330742", formstr(BudgetTransactionCode)));
            }
            else if (originalBudgetCode.BudgetTransactionType != BudgetTransactionType::OriginalBudget)
            {
                isValid = checkFailed(strFmt("@SYS330741", "@SYS330749", formstr(BudgetTransactionCode)));
            }
            else if (carryForwardBudgetCode.BudgetTransactionType != BudgetTransactionType::CarryForwardBudget)
            {
                isValid = checkFailed(strFmt("@SYS330741", "@SYS330750", formstr(BudgetTransactionCode)));
            }

            doesOriginalBudgetCodeErrorExist        = originalBudgetTransactionCode && originalBudgetCode.RecId == 0;
            doesCarryForwardBudgetCodeErrorExist    = carryForwardBudgetTransactionCode && carryForwardBudgetCode.RecId == 0;

            if (doesOriginalBudgetCodeErrorExist && doesCarryForwardBudgetCodeErrorExist)
            {
                isValid = checkFailed(strFmt("@SYS330736", formstr(BudgetTransactionCode)));
            }
            else if (doesOriginalBudgetCodeErrorExist)
            {
                isValid = checkFailed(
                strFmt(
                    "@SYS330735",
                    originalBudgetCode.Name,
                    BudgetTransactionType::OriginalBudget,
                    formstr(BudgetTransactionCode)));
            }
            else if (doesCarryForwardBudgetCodeErrorExist)
            {
                isValid = checkFailed(
                strFmt(
                    "@SYS330735",
                    carryForwardBudgetCode.Name,
                    BudgetTransactionType::CarryForwardBudget,
                    formstr(BudgetTransactionCode)));
            }

            // Verify budget codes do not have workflow enabled.
            doesOriginalBudgetCodeErrorExist        = originalBudgetCode.WorkflowTableSequenceNumber != "";
            doesCarryForwardBudgetCodeErrorExist    = carryForwardBudgetCode.WorkflowTableSequenceNumber != "";

            if (doesOriginalBudgetCodeErrorExist && doesCarryForwardBudgetCodeErrorExist)
            {
                isValid = checkFailed(strFmt("@SYS330734", formstr(BudgetTransactionCode)));
            }
            else if (doesOriginalBudgetCodeErrorExist)
            {
                isValid = checkFailed(strFmt("@SYS330748", "@SYS330749", formstr(BudgetTransactionCode)));
            }
            else if (doesCarryForwardBudgetCodeErrorExist)
            {
                isValid = checkFailed(strFmt("@SYS330748", "@SYS330750", formstr(BudgetTransactionCode)));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetResJouralizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the records exists for budget reservation in journalizing definition or not.
    /// </summary>
    /// <returns>
    /// true if the journalizing definition records exists for budget reservation; otherwise, false;
    /// </returns>

    private boolean validateBudgetResJouralizingDefinition()
    {
        JournalizingDefinitionBudgetReservation_PSN jouralizingDefinitionBudgetReservationTransaction;
        boolean                                     isValid = true;

        if (LedgerParameters::find().IsBudgetReservationEnabled_PSN == NoYes::Yes)
        {
            select firstOnly RecId from jouralizingDefinitionBudgetReservationTransaction
                where jouralizingDefinitionBudgetReservationTransaction.BudgetReservationJournalizingType == BudgetReservationJournalizingType_PSN::BudgetReservationYearEndProcess;

            if (!jouralizingDefinitionBudgetReservationTransaction.RecId)
            {
                isValid = checkFailed("@SYS303883");
            }

            if (isValid)
            {
                JournalizingDefinitionBudgetReservation_PSN jouralizingDefinitionBudgetReservationTransaction2;
                select firstOnly RecId from jouralizingDefinitionBudgetReservationTransaction2
                    where jouralizingDefinitionBudgetReservationTransaction2.BudgetReservationJournalizingType == BudgetReservationJournalizingType_PSN::BudgetReservation;

                if (!jouralizingDefinitionBudgetReservationTransaction2.RecId)
                {
                    isValid = checkFailed("@SYS303883");
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalCalendarParameters</Name>
				<Source><![CDATA[
    private boolean validateFiscalCalendarParameters()
    {
        boolean isValid = true;

        if (budgetReservationYearEndCloseContract.parmFiscalCalendarId() == "" || budgetReservationYearEndCloseContract.parmPrevFiscalYearName() == "")
        {
            isValid = checkFailed(strFmt("@SYS26332", "@SYS127885"));
        }

        // Closing fiscal period validation.
        isValid = this.validateFiscalPeriod(budgetReservationYearEndCloseContract.parmClosingFiscalCalendarPeriod(), budgetReservationYearEndCloseContract.parmClosingPostingDate(), "@SYS303879", "@SYS303880", "@SYS303896");

        // Opening fiscal period validation.
        isValid = isValid && this.validateFiscalPeriod(budgetReservationYearEndCloseContract.parmOpeningFiscalCalendarPeriod(), budgetReservationYearEndCloseContract.parmOpeningPostingDate(), strFmt("@SYS26332", "@SYS303600"), "@SYS303895", "@SYS303897");

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalPeriod</Name>
				<Source><![CDATA[
    private boolean validateFiscalPeriod(
        FiscalCalendarPeriodRecId _fiscalCalendarPeriod,
        TransDate _postingDate,
        str _strPeriodNotDefined,
        str _strPeriodClosed,
        str _strPeriodInSufficientRights)
    {
        boolean isValid = true;
        
        FiscalCalendarPeriod period = FiscalCalendarPeriod::find(_fiscalCalendarPeriod);

        if (!period)
        {
            isValid = checkFailed(_strPeriodNotDefined);
        }
        else
        {
            if (period.currentLedgerPeriodStatus() != FiscalPeriodStatus::Open)
            {
                isValid = checkFailed(_strPeriodClosed);
            }

            if (!LedgerFiscalCalendar::checkModuleIsOpen(SysModule::Ledger, _postingDate, period))
            {
                isValid = checkFailed(_strPeriodClosed);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoBudgetResReferencesExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the budget reservations contained in the <c>budgetReservationContainer</c> list are referenced by downstream documents.
    /// </summary>
    /// <returns>
    /// true if there are no downstream documents referencing the budget reservation; otherwise, false.
    /// </returns>

    private boolean validateNoBudgetResReferencesExist()
    {
        FiscalCalendarYear          localFiscalCalendarYear;
        ListEnumerator              budgetResListEnumerator;
        BudgetReservationRecId_PSN  budgetReservationRecId;
        boolean                     containsNoReferences = true;

        localFiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(this.parmFiscalCalendarRecId(), budgetReservationYearEndCloseContract.parmPrevFiscalYearName());

        budgetResListEnumerator = List::create(budgetReservationYearEndCloseContract.parmBudgetReservationContainer()).getEnumerator();

        while (budgetResListEnumerator.moveNext())
        {
            budgetReservationRecId = budgetResListEnumerator.current();

            // Check if any draft purchase order, unposted invoices or draft purchase requisitions exist against the current budget reservation.
            containsNoReferences = this.validateNoDraftPurchOrderExist(budgetReservationRecId, localFiscalCalendarYear.StartDate, localFiscalCalendarYear.EndDate)
                && this.validateNoUnpostedInvoiceExist(budgetReservationRecId, localFiscalCalendarYear.StartDate, localFiscalCalendarYear.EndDate)
                && this.validateNoDraftPurchReqExist(budgetReservationRecId, localFiscalCalendarYear.StartDate, localFiscalCalendarYear.EndDate)
                && containsNoReferences;
        }

        return containsNoReferences;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoDraftPurchOrderExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there are purchase orders with status other than confirmed or finalized referencing the specified budget reservation.
    /// </summary>
    /// <param name="_budgetReservationId">
    /// A record ID of the <c>BudgetReservationHeader_PSN</c> table.
    /// </param>
    /// <param name="_startDate">
    /// The fiscal year start date.
    /// </param>
    /// <param name="_endDate">
    /// The fiscal year-end date.
    /// </param>
    /// <returns>
    /// true if there are no purchase order records referencing the specified budget reservation; otherwise, false.
    /// </returns>

    private boolean validateNoDraftPurchOrderExist(BudgetReservationRecId_PSN _budgetReservationId, TransDate _startDate, TransDate _endDate)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
        BudgetReservationLine_PSN   budgetReservationLine;
        PurchTable                  purchTable;
        PurchLine                   purchLine;
        boolean                     recordsNotFound = true;

        select firstonly RecId, DocumentNumber from budgetReservationHeader
            where budgetReservationHeader.RecId == _budgetReservationId
            exists join budgetReservationLine
                where budgetReservationLine.BudgetReservationHeader_PSN == budgetReservationHeader.RecId
            exists join purchLine
                where purchLine.BudgetReservationLine_PSN == budgetReservationLine.RecId
            exists join purchTable
                where purchTable.DocumentState != VersioningDocumentState::Confirmed
                    && purchTable.DocumentState != VersioningDocumentState::Finalized
                    && purchTable.AccountingDate >= _startDate
                    && purchTable.AccountingDate <= _endDate
                    && purchTable.PurchId == purchLine.PurchId;

        if (budgetReservationHeader.RecId != 0)
        {
            recordsNotFound = checkFailed(strFmt("@Budgeting_BudgetReservationPS:BudgetResYearEndCloseClassPurchaseOrderExistsInfolog", budgetReservationHeader.DocumentNumber));
        }

        return recordsNotFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoDraftPurchReqExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there are draft purchase requisitions referencing the specified budget reservation.
    /// </summary>
    /// <param name="_budgetReservationId">
    /// A record ID of the <c>BudgetReservationHeader_PSN</c> table.
    /// </param>
    /// <param name="_startDate">
    /// The fiscal year start date.
    /// </param>
    /// <param name="_endDate">
    /// The fiscal year end date.
    /// </param>
    /// <returns>
    /// true if there are no draft purchase requisitions referencing the specified budget reservation; otherwise, false.
    /// </returns>

    private boolean validateNoDraftPurchReqExist(BudgetReservationRecId_PSN _budgetReservationId, TransDate _startDate, TransDate _endDate)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
        BudgetReservationLine_PSN   budgetReservationLine;
        PurchReqTable               purchReqTable;
        PurchReqLine                purchReqLine;
        boolean                     recordsNotFound = true;

        select firstonly RecId, DocumentNumber from budgetReservationHeader
            where budgetReservationHeader.RecId == _budgetReservationId
            exists join budgetReservationLine
                where budgetReservationLine.BudgetReservationHeader_PSN == budgetReservationHeader.RecId
            exists join purchReqLine
                where purchReqLine.BudgetReservationLine_PSN == budgetReservationLine.RecId
            exists join purchReqTable
                where (
                    purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::Draft
                        || purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::InReview)
                    && purchReqTable.TransDate >= _startDate
                    && purchReqTable.TransDate <= _endDate
                    && purchReqLine.PurchReqTable == purchReqTable.RecId;

        if (budgetReservationHeader.RecId != 0)
        {
            recordsNotFound = checkFailed(strFmt("@Budgeting_BudgetReservationPS:BudgetResYearEndCloseClassUnconfirmedPRExistsInfolog", budgetReservationHeader.DocumentNumber));
        }

        return recordsNotFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoUnpostedInvoiceExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there are unposted invoices referencing the specified budget reservation.
    /// </summary>
    /// <param name="_budgetReservationRecId">
    /// A record ID of the <c>BudgetReservationHeader_PSN</c> table.
    /// </param>
    /// <param name="_startDate">
    /// The fiscal year start date.
    /// </param>
    /// <param name="_endDate">
    /// The fiscal year-end date.
    /// </param>
    /// <returns>
    /// true if there are no unposted invoice referencing the specified budget reservation; otherwise, false.
    /// </returns>

    private boolean validateNoUnpostedInvoiceExist(BudgetReservationRecId_PSN _budgetReservationRecId, TransDate _startDate, TransDate _endDate)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
        BudgetReservationLine_PSN   budgetReservationLine;
        VendInvoiceInfoTable        vendInvoiceInfoTable;
        VendInvoiceInfoLine         vendInvoiceInfoLine;
        boolean                     recordsNotFound = true;

        select firstonly RecId, DocumentNumber from budgetReservationHeader
            where budgetReservationHeader.RecId == _budgetReservationRecId
            exists join budgetReservationLine
                where budgetReservationLine.BudgetReservationHeader_PSN == budgetReservationHeader.RecId
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.BudgetReservationLine_PSN == budgetReservationLine.RecId
            exists join vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
                    && vendInvoiceInfoTable.TransDate >= _startDate
                    && vendInvoiceInfoTable.TransDate <= _endDate
                    && vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId;

        if (budgetReservationHeader.RecId != 0)
        {
            recordsNotFound = checkFailed(strFmt("@Budgeting_BudgetReservationPS:BudgetResYearEndCloseClassVendorInvoiceExistsInfolog", budgetReservationHeader.DocumentNumber));
        }

        return recordsNotFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the selected fiscal calendar period is valid or not.
    /// </summary>
    /// <returns>
    /// true if the fiscal calendar period is valid; otherwise, false.
    /// </returns>
    public boolean validatePeriod()
    {
        boolean                    isPeriodValid = true;
        FiscalCalendarPeriod       fiscalCalendarPeriod;

        fiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(previousFiscalCalendarYear.RecId, closingFiscalCalendarPeriod.text());

        if (fiscalCalendarPeriod.currentLedgerPeriodStatus() != FiscalPeriodStatus::Open)
        {
            warning(strFmt("@SYS303880", enum2str(FiscalPeriodStatus::Open)));
            isPeriodValid = false;
        }

        if (!LedgerFiscalCalendar::checkModuleIsOpen(SysModule::Ledger, closingPostingDate.dateValue(), fiscalCalendarPeriod, false))
        {
            warning("@SYS303886");
            isPeriodValid = false;
        }

        return isPeriodValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the period code is valid or not and updates the form design.
    /// </summary>

    public void validatePeriodCode()
    {
        date ledgerPostingDate;

        if (periodCode.selection() == periodCode.find(enum2str(FiscalPeriodType::Closing)))
        {
            ledgerPostingDate = closingPostingDate.dateValue();

            if (ledgerPostingDate >= fiscalCalendarYear.StartDate && ledgerPostingDate <= fiscalCalendarYear.EndDate)
            {
                warning("@SYS303882");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodForClosingPeriodControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the closing fiscal period value.
    /// </summary>
    /// <returns>
    /// true if the value of the closing fiscal period is valid; otherwise, false.
    /// </returns>

    public boolean validatePeriodForClosingPeriodControl()
    {
        boolean              isValid = true;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        PeriodName           periodName = closingFiscalCalendarPeriod.valueStr();

        if (periodName)
        {
            fiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(fiscalCalendarYear.RecId, periodName);

            isValid = fiscalCalendarPeriod.RecId != 0;

            if (!isValid)
            {
                warning(strFmt("@SYS112224", periodName, closingFiscalCalendarPeriod.label(), tablePName(FiscalCalendarPeriod)));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcessParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that all the required parameters are valid for the year-end process.
    /// </summary>
    /// <returns>
    /// true if the all the parameters are valid; otherwise, false.
    /// </returns>

    public boolean validateProcessParameters()
    {
        boolean isValid = true;

        // Do not repeat validation for subprocess.
        if (budgetReservationYearEndCloseContract.parmIsSubProcess())
        {
            return true;
        }

        // Check budget reservation list is not empty.
        if (budgetReservationYearEndCloseContract.parmBudgetReservationContainer() == conNull())
        {
            isValid = checkFailed("@Budgeting_BudgetReservationPS:BudgetReservationYearEndCloseInvalidParameterMessage");
        }

        // Checking the journalizing defination records for budget reservation year-end processing.
        isValid = isValid && this.validateBudgetResJouralizingDefinition();

        // Checking the fiscal calendar periods parameters are valid for year-end processing.
        isValid = isValid && this.validateFiscalCalendarParameters();

        // Checks for downsstream document references.
        isValid = isValid && this.validateNoBudgetResReferencesExist();

        // Checks if the budget codes are valid for year-end processing.
        isValid = isValid && this.validateBudgetCodesParameters();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>visibleControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the visibility of the form controls.
    /// </summary>

    public void visibleControls()
    {
        isBudgetOnly = this.performBudgetOnlyProcess();

        closingFiscalCalendarPeriod.visible(!isBudgetOnly);
        periodCode.visible(!isBudgetOnly);
        openingFiscalCalendarPeriod.visible(!isBudgetOnly);
        buttonViewSubledgerJournal.visible(!isBudgetOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an object instance of the <c>BudgetReservationYearEndClose_PSN</c> class.
    /// </summary>
    /// <returns>
    /// An object instance of the <c>BudgetReservationYearEndClose_PSN</c> class.
    /// </returns>
    public static BudgetReservationYearEndClose_PSN construct()
    {
        return new BudgetReservationYearEndClose_PSN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetReservationValidForProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a budget reservation is valid for the year-end process.
    /// </summary>
    /// <param name="_budgetReservationRecId">
    /// The unique record ID of the <c>BudgetReservationHeader_PSN</c> table.
    /// </param>
    /// <param name="_startDate">
    /// The first day of the old fiscal year.
    /// </param>
    /// <param name="_endDate">
    /// The last day of the old fiscal year.
    /// </param>
    /// <returns>
    /// true if the budget reservation is valid for the process; otherwise, false.
    /// </returns>

    private static boolean isBudgetReservationValidForProcess(
        BudgetReservationRecId_PSN _budgetReservationRecId,
        TransDate _startDate,
        TransDate _endDate)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
        AccountingEvent             accountingEvent;
        SourceDocumentLine          sourceDocumentLine;
        SubledgerJournalEntry       subledgerJournalEntry;
        BudgetSourceInquiryDetails  budgetDetails;
        boolean                     processBudgetReservation    = false;
        boolean                     hasNegativeBalance          = false;

        select firstonly RecId, AccountingDate, SourceDocumentHeader from accountingEvent
            order by AccountingDate desc
            join SourceDocumentHeader from budgetReservationHeader
                where accountingEvent.SourceDocumentHeader == budgetReservationHeader.SourceDocumentHeader
                    && budgetReservationHeader.RecId == _budgetReservationRecId;

        if (accountingEvent.RecId
            && accountingEvent.AccountingDate >= _startDate
            && accountingEvent.AccountingDate <= _endDate)
        {
            sourceDocumentLine = SourceDocumentLine::findBySourceDocumentHeader(budgetReservationHeader.SourceDocumentHeader);

            while (!processBudgetReservation && sourceDocumentLine)
            {
                budgetDetails = BudgetSourceSourceDocumentLine::getBudgetSourceInquiryDetails(sourceDocumentLine);

                if (budgetDetails)
                {
                    while (!processBudgetReservation && budgetDetails.next())
                    {
                        // Determine if there is a budgetary amount being tracked for the reservation and process the reservation if there is.
                        processBudgetReservation = budgetDetails.currentAmountTracked() != 0;

                        if (budgetDetails.currentAmountAvailable() < 0)
                        {
                            processBudgetReservation = false;
                            hasNegativeBalance = true;
                        }
                    }
                }

                next sourceDocumentLine;
            }

            if (!processBudgetReservation && !hasNegativeBalance)
            {
                subledgerJournalEntry = SubledgerJournalEntry::findByAccountingEvent(accountingEvent);

                if (subledgerJournalEntry.RecId)
                {
                    processBudgetReservation = true;
                }
            }
        }

        return processBudgetReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndFilterBudgetReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a list of budget reservations.
    /// </summary>
    /// <param name="_packedSysQueryRun">
    ///  A container containing a packed <c>SysQueryRun</c> object.
    /// </param>
    /// <param name="_oldFiscalYearStartDate">
    /// The start date of the old fiscal year.
    /// </param>
    /// <param name="_oldFiscalYearEndDate">
    /// The end date of the old fiscal year.
    /// </param>
    /// <param name="_fiscalCalendarID">
    /// The ID of the fiscalcalendar; deprecated.
    /// </param>
    /// <param name="_fiscalYearName">
    /// The name of the fiscal year; deprecated.
    /// </param>
    /// <returns>
    /// A container with the list of valid budget reservations.
    /// </returns>

    private static container validateAndFilterBudgetReservations(
        container           _packedSysQueryRun,
        TransDate           _oldFiscalYearStartDate,
        TransDate           _oldFiscalYearEndDate,
        FiscalCalendarID    _fiscalCalendarID = "",
        FiscalYearName      _fiscalYearName = "")
    {
        BudgetReservationRecId_PSN  budgetReservationRecId;
        boolean                     isValid;
        List                        budgetReservationList;
        SysQueryRun                 queryRun;
        Amount                      budgetReservationTotalAmount;

        queryRun = new SysQueryRun(_packedSysQueryRun);
        budgetReservationList = new List(Types::Container);

        // Go through the budget reservations records and validate if they can be processed.
        while(queryRun.next())
        {
            budgetReservationRecId = queryRun.get(tableNum(BudgetReservationHeader_PSN)).RecId;

            isValid = BudgetReservationYearEndClose_PSN::isBudgetReservationValidForProcess(budgetReservationRecId, _oldFiscalYearStartDate, _oldFiscalYearEndDate);

            if (isValid)
            {
                budgetReservationTotalAmount = BudgetReservationCalculateBalance_PSN::getTotalBalance(budgetReservationRecId);

                if (budgetReservationTotalAmount > 0)
                {
                    budgetReservationList.addEnd([budgetReservationRecId, budgetReservationTotalAmount]);
                }
            }
        }

        return budgetReservationList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewDetailForm</Name>
				<Source><![CDATA[
    public static void viewDetailForm(BudgetReservationHeader_PSN _record, str _formName)
    {
        FormRun formRun;
        Args args = new Args();

        args.name(_formName);
        args.record(_record);
        args.openMode(OpenMode::View);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();

        if (_formName == formStr(BudgetReservation_PSN))
        {
            formRun.dataSource(literalStr(BudgetReservationHeader_PSN)).findRecord(_record);         
        }

        formRun.wait(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>