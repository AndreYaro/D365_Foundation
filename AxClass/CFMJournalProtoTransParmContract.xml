<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalProtoTransParmContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class presents the base class for data contract for <c>CFMJournalProtoTrans</c> class.
/// </summary>
abstract class CFMJournalProtoTransParmContract
{
    CFMAnalyticDataEditUncommitted dataEditUncommitted;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDirPartyMapFromQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets DirPartyMap from QueryRun.
    /// </summary>
    /// <param name="_queryRun">
    /// Given QueryRun object.
    /// </param>
    /// <param name="_accountType">
    /// Type of CFMAccountType.
    /// </param>
    /// <returns>
    /// DirPartyMap cursor depending on account type.
    /// </returns>
    protected DirPartyMap getDirPartyMapFromQueryRun(QueryRun _queryRun, CFMAccountType _accountType)
    {
        DirPartyMap locDirPartyMap;

        switch (_accountType)
        {
            case CFMAccountType::Cust:
                locDirPartyMap = _queryRun.get(tableNum(CustTable));
                break;

            case CFMAccountType::Vend:
                locDirPartyMap = _queryRun.get(tableNum(VendTable));
                break;

            case CFMAccountType::Worker:
                locDirPartyMap = _queryRun.get(tableNum(HCMWorker));
                break;

            default:
                locDirPartyMap = null;
        }

        return locDirPartyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataEditUncommitted</Name>
				<Source><![CDATA[
    public CFMAnalyticDataEditUncommitted parmDataEditUncommitted(CFMAnalyticDataEditUncommitted _dataEditUncommitted = dataEditUncommitted)
    {
        dataEditUncommitted = _dataEditUncommitted;

        return dataEditUncommitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates contract context for its correctness.
    /// </summary>
    /// <returns>
    /// <c>true</c> if contract doesn't contains errors otherwise <c>false</c>.
    /// </returns>
    abstract public boolean validate()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>