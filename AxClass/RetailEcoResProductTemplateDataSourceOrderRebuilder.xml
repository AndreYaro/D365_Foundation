<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEcoResProductTemplateDataSourceOrderRebuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEcoResProductTemplateDataSourceOrderRebuilder</c> class finds and fixes inconsistencies in the item templates.
/// </summary>
internal class RetailEcoResProductTemplateDataSourceOrderRebuilder
{
    #EcoResProductDetailsExtended

    private boolean doUpdate;
    private container reOrderedSharedTemplateNames;
    private container reOrderedPersonalTemplateNames;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>RetailEcoResProductTemplateDataSourceOrderRebuilder</c> class.
    /// </summary>
    /// <returns>The newly created instance.</returns>
    public static RetailEcoResProductTemplateDataSourceOrderRebuilder construct()
    {
        return new RetailEcoResProductTemplateDataSourceOrderRebuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the value of <c>doUpdate</c>
    /// </summary>
    /// <param name = "_doUpdate">true if data needs to be updated; otherwise, false.</param>
    /// <returns>A boolean value.</returns>
    public boolean parmDoUpdate(boolean _doUpdate)
    {
        doUpdate = _doUpdate;

        return doUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceProductTemplatesDataWithCorrectOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all corrupted product templates and fixes them.
    /// </summary>
    /// <returns>A container consisting of all template names which are fixed or need to be fixed.</returns>
    public container replaceProductTemplatesDataWithCorrectOrder()
    {
        return [this.fixSharedProductTemplatesDatasourcesOrder(), this.fixPersonalProductTemplatesDatasourcesOrder()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixSharedProductTemplatesDatasourcesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all corrupted shared product templates and fixes them.
    /// </summary>
    /// <returns> A container consists of all shared template names which are fixed or need to be fixed.</returns>
    private container fixSharedProductTemplatesDatasourcesOrder()
    {
        SysRecordTemplateTable sysRecordTemplateTable = SysRecordTemplateTable::find(tableNum(InventTable),true);
        container allTemplatesData = this.getReOrderTemplatesContainer(sysRecordTemplateTable.Data, SysRecordTemplateType::Company);

        // Update the data to the table once all templates data is fixed.
        if (doUpdate && conLen(reOrderedSharedTemplateNames) > 0)
        {
            ttsbegin;
            sysRecordTemplateTable.Data = allTemplatesData;
            sysRecordTemplateTable.update();
            ttscommit;
        }

        return reOrderedSharedTemplateNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixPersonalProductTemplatesDatasourcesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all corrupted personal product templates and fixes them.
    /// </summary>
    /// <returns> A container consisting of all personal template names which are fixed or needed to be fixed.</returns>
    private container fixPersonalProductTemplatesDatasourcesOrder()
    {
        SysLastValue sysLastValue;
        
        while select sysLastValue
            where sysLastValue.ElementName == classStr(SysRecordTemplateStorageUser)
                && sysLastValue.DesignName == tableStr(InventTable)
        {
            container allTemplatesData = this.getReOrderTemplatesContainer([sysLastValue.Value], SysRecordTemplateType::User, sysLastValue.UserId);

            // Update the data to the table once all templates data is fixed.
            if (doUpdate && conLen(reOrderedPersonalTemplateNames) > 0)
            {
                ttsbegin;
                sysLastValue.Value = allTemplatesData;
                sysLastValue.update();
                ttscommit;
            }
        }

        return reOrderedPersonalTemplateNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReOrderTemplatesContainer</Name>
				<Source><![CDATA[
    private container getReOrderTemplatesContainer(container _templatesContainer, SysRecordTemplateType _templateType, UserId _userId = '')
    {
        int containerLength = conLen(_templatesContainer);

        // Loop through all the templates.
        for (int i=1; i<= containerLength; i++)
        {
            container specificTemplate;

            // get each template container , which has 4 values init
            // 1.Template Name, 2. ,3. Data sources data (it is container), 4. Template description
            specificTemplate = conPeek(_templatesContainer, i);

            if (conLen(specificTemplate) == 4)
            {
                container reOrderedTemplate = this.reOrderSpecificTemplate(specificTemplate, _templateType, _userId);

                // Replace the specific template only if the data sources order is corrected.
                if (reOrderedTemplate)
                {
                    _templatesContainer = conPoke(_templatesContainer, i, reOrderedTemplate);
                }
            }
        }

        return _templatesContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reOrderSpecificTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fixes an item template data sources order.
    /// </summary>
    /// <param name = "_specificTemplate">An item template which datasources should be reordered.</param>
    /// <param name = "_templateType">The item template type.</param>
    /// <param name = "_userId">The user ID in case of a personal item template.</param>
    /// <returns>The specified template with its datasources reordered.</returns>
    private container reOrderSpecificTemplate(container _specificTemplate, SysRecordTemplateType _templateType, UserId _userId = '')
    {
        container reOrderedTemplate;
        container dataSourcesCont = conPeek(_specificTemplate, 3);

        // Get the list of data sources whose order is corrected and its related data.
        List reOrderedDataSourcesList = this.createDataSourceOrderListFromPredefinedList(dataSourcesCont);

        // Fix the template data only if it needs correction.
        if (reOrderedDataSourcesList)
        {
            if (_templateType == SysRecordTemplateType::Company)
            {
                reOrderedSharedTemplateNames += conPeek(_specificTemplate, 1);
            }
            else if (_templateType == SysRecordTemplateType::User)
            {
                reOrderedPersonalTemplateNames += [[_userId, conPeek(_specificTemplate, 1)]];
            }

            // Get th the container which has the correct data sources order.
            container correctDataSourceCont = this.copyDataSourcesIntoContainer(reOrderedDataSourcesList);

            // Add the container data to template, i.e. replace the old template data with correct data.
            reOrderedTemplate = conPoke(_specificTemplate, 3, correctDataSourceCont);
        }

        return reOrderedTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataSourceOrderListFromPredefinedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list, consists of data sources and the order of the data sources
    /// is in sync with EcoResProductTemplateManager.dataSourcesNameList()
    /// </summary>
    /// <param name = "_dataSourcesCont">Container whose data sources order needs to be fixed.</param>
    /// <returns>A list with correct data sources order.</returns>
    private List createDataSourceOrderListFromPredefinedList(container _dataSourcesCont)
    {
        List reorderedDataSourcesList = new List(Types::Container);
        EcoResProductTemplateManager templateManager = EcoResProductTemplateManager::construct();
        int dataSourcePosition = 1;
        boolean reorderingRequired = true;

        // Get the order of the data sources to be followed.
        List dataSourcesNameList = templateManager.dataSourcesNameList();

        ListEnumerator listEnumerator = dataSourcesNameList.getEnumerator();

        // Loop through all data sources and fix the order of <c>_dataSourcesCont</c>.
        while(listEnumerator.moveNext())
        {
            str dataSourceName = listEnumerator.current();

            // Loop through container and create a list with proper data sources order.
            // The data sources order should be in sync with method <c>dataSourcesNameList</c> of class <c>EcoResProductTemplateManager</c>.
            for (int position = 1; position <= conLen(_dataSourcesCont); position++)
            {
                container specificDataSource;
                ModuleInventPurchSales moduleType;

                specificDataSource = conPeek(_dataSourcesCont,position);

                int dataSourceFound = conFind(specificDataSource,dataSourceName);

                //'InventTableModule' is the original data source name which is stored in template.
                // <c>ModuleType</c> field is the basis to identify which module the record belongs to.
                if (listEnumerator.current() == #PurchDS
                    || listEnumerator.current() == #InventDS
                    || listEnumerator.current() == #SalesDS)
                {
                    dataSourceName = tableStr(InventTableModule);

                    specificDataSource = conPeek(_dataSourcesCont,position);

                    if (conPeek(specificDataSource, 1) == tableStr(InventTableModule))
                    {
                        container moduleTypeCont = conPeek(conPeek(specificDataSource, 2), 10);
                        moduleType = str2Int(conPeek(moduleTypeCont, 2));

                        dataSourceFound = this.isCorrectInventTableModuleDataSourceFound(listEnumerator,moduleType,dataSourceFound);
                    }
                }

                // Re-ordering of data sources is required only if the data souce in template which is at second position
                // is not in sync with method <c>dataSourcesNameList</c> of class <c>EcoResProductTemplateManager</c>.
                if ( (dataSourcePosition == 2) && (position == 2) && conFind(specificDataSource,dataSourceName))
                {
                    reorderingRequired = false;
                    break;
                }

                // Add the data source to list.
                if (dataSourceFound > 0)
                {
                    reorderedDataSourcesList.addEnd(specificDataSource);
                    break;
                }
            }

            if(!reorderingRequired)
            {
                break;
            }

            dataSourcePosition++;
        }

        if (!reorderingRequired)
        {
            reorderedDataSourcesList = null;
        }

        return reorderedDataSourcesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCorrectInventTableModuleDataSourceFound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the correct data source found for the specified module type
    /// </summary>
    /// <param name = "_listEnumerator">List enumerator contains a data source name</param>
    /// <param name = "_moduleType">Module type , Invent/Sales/Purch.</param>
    /// <param name = "_dataSourceFound">An int, contains 1 if data dource found, otherwise 0</param>
    /// <returns> 0 if data source is not found.</returns>
    private int isCorrectInventTableModuleDataSourceFound(ListEnumerator _listEnumerator,
                                                   ModuleInventPurchSales _moduleType,
                                                   int _dataSourceFound)
    {
        // Template has 3 data sources with same name i.e. 'InventTableModule'. <c>ModuleType</c> field is the basis to identify
        // which module it belongs to. Following checks are needed to ensure that the same module record is not added more than once.
        if (_listEnumerator.current() == #PurchDS
            && (( _moduleType == ModuleInventPurchSales::Invent) || ( _moduleType == ModuleInventPurchSales::Sales))
            )
        {
            _dataSourceFound = 0;
        }
        else if (_listEnumerator.current() == #InventDS
                && (( _moduleType == ModuleInventPurchSales::Purch) || ( _moduleType == ModuleInventPurchSales::Sales))
                )
        {
            _dataSourceFound = 0;
        }
        else if (_listEnumerator.current() == #SalesDS
                && (( _moduleType == ModuleInventPurchSales::Invent) || ( _moduleType == ModuleInventPurchSales::Purch))
                )
        {
            _dataSourceFound = 0;
        }

        return _dataSourceFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDataSourcesIntoContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container from a data sources list.
    /// </summary>
    /// <param name = "_reOrderedList">List, consists of data sources and its related data.</param>
    /// <returns>A container which is created from a data sources list.</returns>
    private container copyDataSourcesIntoContainer(List _reOrderedList)
    {
        container reordereedDataSources;

        ListEnumerator listEnumerator = _reOrderedList.getEnumerator();

        while(listEnumerator.moveNext())
        {
            container tableData = [listEnumerator.current()];

            reordereedDataSources += tableData;
        }

        return reordereedDataSources;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>