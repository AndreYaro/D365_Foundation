<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementWriteOffController</c> class manages the state of settlement write off functionality.
/// This class maintains the state information across the estimation and application of write off adjustment amounts.
/// It serves as the control point for the calculation and creation of journal data.
/// </summary>
internal final class SettlementWriteOffController
{
    private SettlementWriteOffCalculator settlementWriteOffCalculator;
    private SettlementWriteOffCalculatedTransactions settlementWriteOffCalculatedTransactions;
    private SettlementWriteOffJournalProcessor settlementWriteOffJournalProcessor;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPotentialAdjustmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the potential adjustment amount for write off.
    /// </summary>
    /// <returns>The potential adjustment amount.</returns>
    internal AmountMST getPotentialAdjustmentAmount()
    {
        return settlementWriteOffCalculatedTransactions.parmPotentialAdjustmentAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSettlementWriteOff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal data, including header and lines, necessary for write off.
    /// </summary>
    /// <param name = "_journalContract">The journal contract.</param>
    /// <returns>The journal header identifier. If lines were appended to an existing header, this will return the existing header identifier.</returns>
    internal LedgerJournalId processSettlementWriteOff(SettlementWriteOffJournalContract _journalContract)
    {
        return settlementWriteOffJournalProcessor.processWriteOff(_journalContract, settlementWriteOffCalculatedTransactions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePotentialAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the potential adjustment amount estimated for a settlement write off.
    /// </summary>
    /// <param name = "_transactionContext">The originating transaction context.</param>
    private void calculatePotentialAdjustment(SettlementWriteOffTransactionContext _transactionContext)
    {
        settlementWriteOffCalculatedTransactions = settlementWriteOffCalculator.calculatePotentialAdjustment(_transactionContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the settlement write off controller.
    /// </summary>
    /// <returns>The new instance of the write off controller.</returns>
    internal static SettlementWriteOffController construct()
    {
        return new SettlementWriteOffController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new settlement write off controller from a specific transaction context.
    /// </summary>
    /// <param name = "_transactionContext">The transaction context.</param>
    /// <param name = "_calculator">The calculator for potential adjustment amounts.</param>
    /// <param name = "_journalProcessor">The processor for creating adjustment data.</param>
    /// <returns>The settlement write off controller.</returns>
    internal static SettlementWriteOffController newFromTransaction(
        SettlementWriteOffTransactionContext _transactionContext,
        SettlementWriteOffCalculator _calculator,
        SettlementWriteOffJournalProcessor _journalProcessor)
    {
        SettlementWriteOffController writeOffController = SettlementWriteOffController::construct();
        writeOffController.settlementWriteOffCalculator = _calculator;
        writeOffController.settlementWriteOffJournalProcessor = _journalProcessor;

        writeOffController.calculatePotentialAdjustment(_transactionContext);

        return writeOffController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>