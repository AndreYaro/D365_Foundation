<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetTableMethod_Fact</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RAssetTableMethod_Fact extends RAssetTableMethod
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        public RAssetAmount calc(RAssetTransDate _transDate)
    {
        RAssetAmount     rAssetAmount = 0;
        real             currentPeriod, lastPeriod, totalIntervalWithFactor = totalInterval / assetFactor;
        RAssetAmount     depreciate, lastValue, amountToDepreciateCalc = amountToDepreciate;

        #define.ten(10)

        if (currentIntervalMth != 0 && totalInterval != 0)
        {
            if (currentIntervalMth >= roundUp(totalIntervalWithFactor, 0))
            {
                depreciate = amountNetBookValue - parmPrevDepAmount;
            }
            else
            {
                currentPeriod = currentIntervalMth * assetFactor / totalInterval;
                rAssetAmount  = power(currentPeriod,power(#ten, (( (this.percentage()/100) * 2) -1)));
                lastPeriod    = ((currentIntervalMth - 1) * assetFactor) / totalInterval;
                lastValue     = power(lastPeriod,power(#ten, (( (this.percentage()/100) * 2) -1)));

                amountToDepreciateCalc -= rAssetStandards.ScrapValue;

                depreciate    = (rAssetAmount - lastValue) * amountToDepreciateCalc;
            }

            depreciate = this.adjustDepreciationAmountForPartialPeriod(_transDate, depreciate);

            if (amountNetBookValue - parmPrevDepAmount - depreciate <
                RAssetGroup::assetDepreciationMin(rAssetStandards.AssetGroup))
            {
                depreciate = amountNetBookValue - parmPrevDepAmount;
            }
        }

        return depreciate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>