<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOENInfo_OrderShipped</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generate event notification for order shipped.
/// </summary>
public class RetailOENInfo_OrderShipped extends RetailOENInfo
{
    CustInvoiceJour invoiceJournal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EventNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return the event notification type.
    /// </summary>
    /// <returns>
    /// Event notification type.
    /// </returns>
    public RetailEventNotificationType EventNotificationType()
    {
        return RetailEventNotificationType::Shipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the invoice journal and sales order.
    /// </summary>
    /// <param name="refRecId">
    /// Record id of <c>CustInvoiceJour</c>.
    /// </param>
    public void resolveSalesOrder(RefRecId _refRecId)
    {
        this.invoiceJournal = CustInvoiceJour::findRecId(_refRecId);
        this.parmSalesOrder(SalesTable::find(invoiceJournal.SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSaleslineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the object of <c>SalesLine</c> table with replacing e-mail related placeholders with the actual subject, message etc.
    /// </summary>
    /// <param name="saleslineTableTemplate">
    /// String containing the template for message.
    /// </param>
    /// <returns>
    /// Message template with actual subject and message.
    /// </returns>
    protected str generateSaleslineTable(str _saleslineTableTemplate)
    {
        SalesLine       salesLine;
        CustInvoiceTrans custInvoiceTrans;
        str             result;
        Map             saleslineMap;
        MCRSalesLine    mcrSalesLine;
        RetailGiftCardTransactions retailGiftCardTransactions;
        RetailDlvModeTmp   pickupDeliveryModes;

        pickupDeliveryModes = RetailDlvMode::getPickupDeliveryModes();
        RetailParameters retailParameters = RetailParameters::find();
        while select LineNum from custInvoiceTrans
                where custInvoiceTrans.SalesId == invoiceJournal.SalesId
                && custInvoiceTrans.InvoiceDate == invoiceJournal.InvoiceDate
                && custInvoiceTrans.InvoiceId == invoiceJournal.InvoiceId
                && custInvoiceTrans.numberSequenceGroup == invoiceJournal.numberSequenceGroup
            join salesLine
                where salesLine.SalesId == salesOrder.SalesId
                && salesLine.InventTransId == custInvoiceTrans.InventTransId
                && salesLine.DlvMode != retailParameters.CarryOutDeliveryModeCode
                && salesLine.DlvMode != retailParameters.ElectronicDeliveryModeCode
                && salesLine.SalesQty > 0
            outer join firstOnly GiftCardGiftMessage from mcrSalesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
            outer join firstOnly Amount, CardNumber from retailGiftCardTransactions
                where retailGiftCardTransactions.MCRInventTransId == salesLine.InventTransId
                    && retailGiftCardTransactions.Operation == RetailGiftCardOperation::Issue
            notexists join pickupDeliveryModes
                where pickupDeliveryModes.Code == salesLine.DlvMode
        {
            saleslineMap = this.createSalesLineMap(salesLine, retailGiftCardTransactions, mcrSalesLine);
            result += SysEmailMessage::stringExpand(_saleslineTableTemplate, saleslineMap);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineQtyShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Sales line quantity shipped.
    /// </summary>
    /// <param name="_salesLine">
    /// Sales line used for getting the shipped quantity.
    /// </param>
    /// <returns>
    /// The quantity shipped.
    /// </returns>
    protected SalesQty getSalesLineQtyShipped(SalesLine _salesLine)
    {
        CustInvoiceTrans custInvoiceTrans;
        select firstonly custInvoiceTrans
            where custInvoiceTrans.SalesId == _salesLine.SalesId
            && custInvoiceTrans.InvoiceDate == invoiceJournal.InvoiceDate
            && custInvoiceTrans.InvoiceId == invoiceJournal.InvoiceId
            && custInvoiceTrans.InventTransId == _salesLine.InventTransId
            && custInvoiceTrans.numberSequenceGroup == invoiceJournal.numberSequenceGroup;

        return custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotificationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether notification is enabled.
    /// </summary>
    /// <returns>
    /// True if the notification type is enabled and there is at least one line on the packing slip with a shipping mode of delivery; otherwise, false.
    /// </returns>
    public boolean isNotificationEnabled()
    {
        boolean ret = super();

        if (ret)
        {
            ret = this.salesOrder.getRetailSalesOrderType() == RetailSalesOrderType::CustomerOrder;
        }

        if (ret)
        {
            RetailParameters retailParameters = RetailParameters::find();
            RetailDlvModeTmp pickupDeliveryModes = RetailDlvMode::getPickupDeliveryModes();

            SalesLine salesLine;
            CustInvoiceTrans custInvoiceTrans;
            select firstonly LineNum from custInvoiceTrans
                    where custInvoiceTrans.SalesId == invoiceJournal.SalesId
                    && custInvoiceTrans.InvoiceDate == invoiceJournal.InvoiceDate
                    && custInvoiceTrans.InvoiceId == invoiceJournal.InvoiceId
                    && custInvoiceTrans.numberSequenceGroup == invoiceJournal.numberSequenceGroup
                join salesLine
                    where salesLine.SalesId == salesOrder.SalesId
                    && salesLine.InventTransId == custInvoiceTrans.InventTransId
                    && salesLine.DlvMode != retailParameters.CarryOutDeliveryModeCode
                    && salesLine.DlvMode != retailParameters.ElectronicDeliveryModeCode
                    && salesLine.SalesQty > 0
                notexists join pickupDeliveryModes
                    where pickupDeliveryModes.Code == salesLine.DlvMode;

            if (!salesLine)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>