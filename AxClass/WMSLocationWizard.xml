<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsLocationWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class wmsLocationWizard extends SysDefaultDataWizard
{
    WMSLocationWizardTableCtrl_Aisle            wmsLocationWizardTableCtrl_Aisle;
    WMSLocationWizardTableCtrl_InboundDock      wmsLocationWizardTableCtrl_InboundDock;
    WMSLocationWizardTableCtrl_OutboundDock     wmsLocationWizardTableCtrl_OutboundDock;
    WMSLocationWizardTableCtrl_Pick             wmsLocationWizardTableCtrl_Pick;
    WMSLocationWizardTableCtrl_Buffer           wmsLocationWizardTableCtrl_Buffer;

    InventLocationId                            inventLocationId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accessMenuFunction</Name>
				<Source><![CDATA[
    public MenuFunction accessMenuFunction()
    {
        return new MenuFunction(menuitemDisplayStr(WMSlocationWizard),MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>aisleSettingsModified</Name>
				<Source><![CDATA[
    void aisleSettingsModified()
    {
        wmsLocationWizardTableCtrl_InboundDock.aisleSettingsModified();
        wmsLocationWizardTableCtrl_OutboundDock.aisleSettingsModified();
        wmsLocationWizardTableCtrl_Pick.aisleSettingsModified();
        wmsLocationWizardTableCtrl_Buffer.aisleSettingsModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDB</Name>
				<Source><![CDATA[
    protected void createDB()
    {
        wmsLocationWizardTableCtrl_Aisle.insertDBDirect();
        wmsLocationWizardTableCtrl_InboundDock.insertDBDirect();
        wmsLocationWizardTableCtrl_OutboundDock.insertDBDirect();
        wmsLocationWizardTableCtrl_Pick.insertDBDirect();
        wmsLocationWizardTableCtrl_Buffer.insertDBDirect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enabled</Name>
				<Source><![CDATA[
    boolean enabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endTextAdd</Name>
				<Source><![CDATA[
    public str endTextAdd()
    {
        return "@SYS57218";
    }

]]></Source>
			</Method>
			<Method>
				<Name>endTextCreate</Name>
				<Source><![CDATA[
    str endTextCreate()
    {
        return "@SYS57219";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formname</Name>
				<Source><![CDATA[
    FormName formname()
    {
        return formStr(WMSLocationWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLocationCoordinate</Name>
				<Source><![CDATA[
    boolean hasLocationCoordinate()
    {
        InventLocation  inventLocation = InventLocation::find(inventLocationId);

        if (inventLocation.wmsAisleNameActive || inventLocation.wmsRackNameActive || inventLocation.wmsLevelNameActive || inventLocation.wmsPositionNameActive)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    boolean init(Args args = null)
    {
        boolean             ret;
        InventLocation      inventLocation;
        InventLocationId    inventLocationIdTmp;

        if (args && args.dataset() == tableNum(InventLocation))
        {
            inventLocation = args.record();
            inventLocationIdTmp = inventLocation.InventLocationId;
        }
        else
        {
            select count(RecId) from inventLocation;
            if (inventLocation.RecId == 1)
            {
                select firstonly inventLocation;
                inventLocationIdTmp = inventLocation.InventLocationId;
            }
        }
        wmsLocationWizardTableCtrl_Aisle         = WMSLocationWizardTableCtrl_Aisle::newFromWizard(this);
        wmsLocationWizardTableCtrl_InboundDock   = WMSLocationWizardTableCtrl_InboundDock::newFromWizard(this);
        wmsLocationWizardTableCtrl_OutboundDock  = WMSLocationWizardTableCtrl_OutboundDock::newFromWizard(this);
        wmsLocationWizardTableCtrl_Pick          = WMSLocationWizardTableCtrl_Pick::newFromWizard(this);
        wmsLocationWizardTableCtrl_Buffer        = WMSLocationWizardTableCtrl_Buffer::newFromWizard(this);

        if (inventLocationIdTmp)
        {
            this.parmInventLocationId(inventLocationIdTmp);
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationExists</Name>
				<Source><![CDATA[
    private boolean inventLocationExists()
    {
        InventLocation  inventLocation;

        select firstonly inventLocation;
        if (!inventLocation)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        container       warehouseInformation;

        if (inventLocationId != _inventLocationId)
        {
            inventLocationId = _inventLocationId;

            warehouseInformation = WMSLocationWizard::getWarehouseInformation(inventLocationId);
            if (conLen(warehouseInformation) == 5)
            {
                wmsLocationWizardTableCtrl_Aisle.initWarehouseInformation(_inventLocationId, conPeek(warehouseInformation, 1));
                wmsLocationWizardTableCtrl_InboundDock.initWarehouseInformation(_inventLocationId, conPeek(warehouseInformation, 2));
                wmsLocationWizardTableCtrl_OutboundDock.initWarehouseInformation(_inventLocationId, conPeek(warehouseInformation, 3));
                wmsLocationWizardTableCtrl_Pick.initWarehouseInformation(_inventLocationId, conPeek(warehouseInformation, 4));
                wmsLocationWizardTableCtrl_Buffer.initWarehouseInformation(_inventLocationId, conPeek(warehouseInformation, 5));
            }
        }
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBufferAisle</Name>
				<Source><![CDATA[
    void setBufferAisle(WMSAisle bufferAisle)
    {
        wmsLocationWizardTableCtrl_Pick.setBufferAisle(bufferAisle);
        wmsLocationWizardTableCtrl_Buffer.setBufferAisle(bufferAisle);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBufferBuffer</Name>
				<Source><![CDATA[
    void setBufferBuffer(WMSLocation bufferBuffer)
    {
        wmsLocationWizardTableCtrl_InboundDock.parmBufferBuffer(bufferBuffer);
        wmsLocationWizardTableCtrl_OutboundDock.parmBufferBuffer(bufferBuffer);
        wmsLocationWizardTableCtrl_Pick.parmBufferBuffer(bufferBuffer);
        wmsLocationWizardTableCtrl_Buffer.parmBufferBuffer(bufferBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBufferInboundDock</Name>
				<Source><![CDATA[
    void setBufferInboundDock(WMSLocation bufferInboundDock)
    {
        wmsLocationWizardTableCtrl_InboundDock.parmBufferInboundDock(bufferInboundDock);
        wmsLocationWizardTableCtrl_OutboundDock.parmBufferInboundDock(bufferInboundDock);
        wmsLocationWizardTableCtrl_Pick.parmBufferInboundDock(bufferInboundDock);
        wmsLocationWizardTableCtrl_Buffer.parmBufferInboundDock(bufferInboundDock);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBufferOutboundDock</Name>
				<Source><![CDATA[
    void setBufferOutboundDock(WMSLocation bufferOutboundDock)
    {
        wmsLocationWizardTableCtrl_InboundDock.parmBufferOutboundDock(bufferOutboundDock);
        wmsLocationWizardTableCtrl_OutboundDock.parmBufferOutboundDock(bufferOutboundDock);
        wmsLocationWizardTableCtrl_Pick.parmBufferOutboundDock(bufferOutboundDock);
        wmsLocationWizardTableCtrl_Buffer.parmBufferOutboundDock(bufferOutboundDock);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBufferPick</Name>
				<Source><![CDATA[
    void setBufferPick(WMSLocation bufferPick)
    {
        wmsLocationWizardTableCtrl_InboundDock.parmBufferPick(bufferPick);
        wmsLocationWizardTableCtrl_OutboundDock.parmBufferPick(bufferPick);
        wmsLocationWizardTableCtrl_Pick.parmBufferPick(bufferPick);
        wmsLocationWizardTableCtrl_Buffer.parmBufferPick(bufferPick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the warehouse exist.
    /// </summary>
    /// <param name = "_inventLocationId">The id of a Warehouse.</param>
    /// <returns>True if a warehouse is found for the inventLocationId supplied, otherwise false.</returns>
    public boolean validateInventLocation(InventLocationId _inventLocationId)
    {
        boolean         ret = true;
        InventLocation  inventLocation;

        inventLocation = InventLocation::find(_inventLocationId);
        if (_inventLocationId && ! inventLocation)
        {
            ret = checkFailed(strFmt("@SYS5001", _inventLocationId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationWizardTableCtrl_Aisle</Name>
				<Source><![CDATA[
    WMSLocationWizardTableCtrl_Aisle         wmsLocationWizardTableCtrl_Aisle()
    {
        return     wmsLocationWizardTableCtrl_Aisle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationWizardTableCtrl_Buffer</Name>
				<Source><![CDATA[
    WMSLocationWizardTableCtrl_Buffer       wmsLocationWizardTableCtrl_Buffer()
    {
        return     wmsLocationWizardTableCtrl_Buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationWizardTableCtrl_InboundDock</Name>
				<Source><![CDATA[
    WMSLocationWizardTableCtrl_InboundDock      wmsLocationWizardTableCtrl_InboundDock()
    {
        return     wmsLocationWizardTableCtrl_InboundDock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationWizardTableCtrl_OutboundDock</Name>
				<Source><![CDATA[
    WMSLocationWizardTableCtrl_OutboundDock     wmsLocationWizardTableCtrl_OutboundDock()
    {
        return     wmsLocationWizardTableCtrl_OutboundDock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationWizardTableCtrl_Pick</Name>
				<Source><![CDATA[
    WMSLocationWizardTableCtrl_Pick     wmsLocationWizardTableCtrl_Pick()
    {
        return     wmsLocationWizardTableCtrl_Pick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static str description()
    {
        return "@SYS20394";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehouseInformation</Name>
				<Source><![CDATA[
    static container getWarehouseInformation(InventLocationId _inventLocationId)
    {
        container   aisleInformation = WMSLocationWizardTableCtrl_Aisle::getWarehouseInformation(_inventLocationId);
        container   inboundInformation = WMSLocationWizardTableCtrl_InboundDock::getWarehouseInformation(_inventLocationId);
        container   outboundInformation = WMSLocationWizardTableCtrl_OutboundDock::getWarehouseInformation(_inventLocationId);
        container   pickInformation = WMSLocationWizardTableCtrl_Pick::getWarehouseInformation(_inventLocationId);
        container   bufferInformation = WMSLocationWizardTableCtrl_Buffer::getWarehouseInformation(_inventLocationId);

        return [aisleInformation, inboundInformation, outboundInformation, pickInformation, bufferInformation];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSLocationWizard construct()
    {
        return new WMSLocationWizard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        WMSLocationWizard wizard = new WMSLocationWizard();

        if (! wizard.inventLocationExists())
        {
            warning("@SYS57585");
            throw(error("@SYS56253"));
        }

        wizard.init(args);
        if (wizard.prompt())
        {
            wizard.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>