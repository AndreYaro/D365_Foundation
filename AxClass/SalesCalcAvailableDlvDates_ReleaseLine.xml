<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcAvailableDlvDates_ReleaseLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesCalcAvailableDlvDates_ReleaseLine extends SalesCalcAvailableDlvDates
{
    SalesCreateReleaseOrderLineTmp  releaseOrderLine;
    SalesCreateReleaseOrderLineTmp  releaseOrderLineOrig;
    SalesCreateReleaseOrderLineTmp  releaseOrderLineCaller;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        releaseOrderLine,
        releaseOrderLineOrig,
        releaseOrderLineCaller
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to perform delivery date control on the confirmed dates.
    /// </summary>
    /// <returns>
    /// true if the delivery date control is performed on the confirmed dates; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method always returns false in subclasses that are related to tables that do not contain
    /// confirmed date fields. For example, the <c>TmpSalesTable</c> and <c>TmpSalesLine</c> tables.
    /// </remarks>
    protected boolean checkConfirmedDates()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLeadTime</Name>
				<Source><![CDATA[
    public LeadTime salesLeadTime(CalendarDays _basedOnCalendarSetup = NoYes::Yes)
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateControlActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the delivery date control is active.
    /// </summary>
    /// <returns>
    /// true if the delivery date control is active; otherwise, false.
    /// </returns>
    protected boolean deliveryDateControlActive()
    {
        boolean ok = super();

        if (ok)
        {
            if (releaseOrderLine.SalesQty < 0)
            {
                ok = false;
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllUnitConversionInfoRequired</Name>
				<Source><![CDATA[
    protected boolean validateAllUnitConversionInfoRequired()
    {
        return EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(releaseOrderLine.ItemId, releaseOrderLine.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateCaller</Name>
				<Source><![CDATA[
    protected boolean doUpdateCaller(boolean _disableDlvDateControl = false)
    {
        if (_disableDlvDateControl)
        {
            if (releaseOrderLineOrig.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                return true;
            }
        }
        else
        {
            if (deliveryDateControlMap.DlvMode                 != releaseOrderLineOrig.DlvMode
            ||  deliveryDateControlMap.InventDimId             != releaseOrderLineOrig.InventDimId
            ||  deliveryDateControlMap.ShippingDateRequested   != releaseOrderLineOrig.ShippingDateRequested
            ||  deliveryDateControlMap.ReceiptDateRequested    != releaseOrderLineOrig.ReceiptDateRequested)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether changes have been made to fields that influence the delivery date control.
    /// </summary>
    /// <returns>
    /// true if changes have been made to fields that influence the delivery date control; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method returns true if changes have been made to these fields. The method is called from the
    /// <see cref="M:SalesCalcAvailableDlvDates.validateWritePrompt" /> to determine whether to perform the
    /// validation or delivery date control.
    /// </remarks>
    protected boolean doValidateWrite()
    {
        if (releaseOrderLine.DlvMode                 != releaseOrderLineOrig.DlvMode                 ||
            releaseOrderLine.InventDimId             != releaseOrderLineOrig.InventDimId             ||
            releaseOrderLine.SalesQty                != releaseOrderLineOrig.SalesQty                ||
            (#PdsCatchWeightEnabled
                && releaseOrderLine.PdsCWQty         != releaseOrderLineOrig.PdsCWQty)               ||
            releaseOrderLine.DeliveryPostalAddress   != releaseOrderLineOrig.DeliveryPostalAddress   ||
            releaseOrderLine.DeliveryDateControlType != releaseOrderLineOrig.DeliveryDateControlType)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId2DlvDateType</Name>
				<Source><![CDATA[
    protected SalesDlvDateType fieldId2DlvDateType(FieldId _fieldId)
    {
        SalesDlvDateType    dlvDateType;

        switch (_fieldId)
        {
            case fieldNum(SalesCreateReleaseOrderLineTmp,ReceiptDateRequested) :
                dlvDateType = SalesDlvDateType::RequestedReceipt;
                break;
            case fieldNum(SalesCreateReleaseOrderLineTmp,ShippingDateRequested) :
                dlvDateType = SalesDlvDateType::RequestedShipping;
                break;
            default :
                dlvDateType = SalesDlvDateType::None;
                break;
        }

        return dlvDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    protected ItemId getItemId()
    {
        return releaseOrderLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMasterDateType</Name>
				<Source><![CDATA[
    protected SalesDlvDateType initMasterDateType(SalesDlvDateType _masterDateType)
    {
        SalesDlvDateType    masterDateTypeLocal = _masterDateType;

        if (_masterDateType != SalesDlvDateType::RequestedReceipt
            && _masterDateType != SalesDlvDateType::RequestedShipping)
        {
            if (releaseOrderLine.ReceiptDateRequested)
            {
                masterDateTypeLocal = SalesDlvDateType::RequestedReceipt;
            }
            else if (releaseOrderLine.ShippingDateRequested)
            {
                masterDateTypeLocal = SalesDlvDateType::RequestedShipping;
            }
            else
            {
                masterDateTypeLocal = SalesDlvDateType::RequestedShipping;
                releaseOrderLine.ShippingDateRequested = this.effectiveOrderDate() + this.salesLeadTime();
            }
        }
        return masterDateTypeLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates sales lead time for the given instance of a sales line.
    /// </summary>
    /// <param name="_salesLine">
    ///    Sales line for which lead time will be calculated.
    /// </param>
    /// <param name="_inventDim">
    ///    Inventory dimensions used to calculate sales lead time.
    /// </param>
    /// <returns>
    ///    The lead time in days.
    /// </returns>
    public LeadTime leadTime(SalesLine _salesLine, InventDim _inventDim)
    {
        PriceDisc_Price localPriceDisc = _salesLine.salesPurchLineInterface().priceDisc_PriceCache(_inventDim, true);
        PriceGroupId priceGroupId = _salesLine.priceGroupId();

        if (!this.parmPriceDisc()                                   ||
            !this.parmPriceDisc().isEqual(localPriceDisc)           ||
            this.parmPriceDisc().parmPriceGroupId() != priceGroupId)
        {
            localPriceDisc.price();
            this.parmPriceDisc(localPriceDisc);
        }

        return this.parmPriceDisc().deliveryDays();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorText</Name>
				<Source><![CDATA[
    public SalesCreateReleaseOrderLog parmErrorText(SalesCreateReleaseOrderLog _errorText = errorText)
    {
        errorText            = _errorText;
        releaseOrderLine.Log = errorText;
        return errorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId parmInventLocationId(InventLocationId  _inventLocationId = InventDim::find(releaseOrderLine.InventDimId).InventLocationId)
    {
        InventDim inventDim = InventDim::find(releaseOrderLine.InventDimId);
        if (_inventLocationId != inventDim.InventLocationId)
        {
            inventDim.InventLocationId = _inventLocationId;
            inventDim.initFromInventLocation(inventDim.inventLocation());
            inventDim = InventDim::findOrCreate(inventDim);
            deliveryDateControlMap.InventDimId = inventDim.InventDimId;
            releaseOrderLine.InventDimId       = inventDim.InventDimId;
        }
        return inventDim.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    protected InventSiteId parmInventSiteId(InventSiteId  _inventSiteId = InventDim::find(releaseOrderLine.InventDimId).InventSiteId)
    {
        InventDim inventDim = InventDim::find(releaseOrderLine.InventDimId);
        if (_inventSiteId != inventDim.InventSiteId)
        {
            inventDim.InventSiteId = _inventSiteId;
            inventDim = InventDim::findOrCreate(inventDim);
            deliveryDateControlMap.InventDimId = inventDim.InventDimId;
            releaseOrderLine.InventDimId       = inventDim.InventDimId;
        }
        return inventDim.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesCreateReleaseOrderLineTmp</Name>
				<Source><![CDATA[
    public SalesCreateReleaseOrderLineTmp parmSalesCreateReleaseOrderLineTmp(SalesCreateReleaseOrderLineTmp _releaseOrderLine = releaseOrderLine)
    {
        deliveryDateControlMap     = _releaseOrderLine.data();
        releaseOrderLine           = _releaseOrderLine.data();
        releaseOrderLineOrig       = _releaseOrderLine.orig();
        releaseOrderLineCaller     = _releaseOrderLine;

        return releaseOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdateBuffer</Name>
				<Source><![CDATA[
    protected void preUpdateBuffer()
    {
        super();

        releaseOrderLine.Log     = '';
        releaseOrderLine.LogType = Exception::Info;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the receipt calendar ID for the customer.
    /// </summary>
    /// <returns>
    /// The receipt calendar ID for the customer.
    /// </returns>
    protected CalendarId receiptCalendarId()
    {
        if (receiptCalendarId)
        {
            return receiptCalendarId;
        }
        receiptCalendarId = LogisticsLocationExt::find(releaseOrderLine.deliveryLocation()).SalesCalendarId;

        if (!receiptCalendarId && releaseOrderLine.AddressRefTableId && releaseOrderLine.AddressRefRecId )
        {
            switch (releaseOrderLine.AddressRefTableId)
            {
                case tableNum(LogisticsLocation) :
                    receiptCalendarId = LogisticsLocationExt::find(releaseOrderLine.AddressRefRecId).SalesCalendarId;
                    break;

                case tableNum(CustTable) :
                    receiptCalendarId = (select custTable where custTable.TableId == releaseOrderLine.AddressRefTableId && custTable.RecId == releaseOrderLine.AddressRefRecId).SalesCalendarId;
                    break;
                default :
                    break;
            }
        }

        if (!receiptCalendarId)
        {
            receiptCalendarId = CustTable::find(releaseOrderLine.CustAccount).SalesCalendarId;
        }

        return receiptCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLeadTimeBasedOnDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales lead time based on the delivery date control type and sets that the sales lead time has been found.
    /// </summary>
    protected void initializeSalesLeadTimeBasedOnDeliveryDateControlType()
    {
        SalesLine salesLine;
        salesLine.ItemId           = releaseOrderLine.ItemId;
        salesLine.CustAccount      = releaseOrderLine.CustAccount;
        salesLine.InventDimId      = releaseOrderLine.InventDimId;
        salesLine.SalesUnit        = releaseOrderLine.Units;
        salesLine.CurrencyCode     = releaseOrderLine.Currency;
        salesLine.SalesQty         = releaseOrderLine.SalesQty;
        if (#PdsCatchWeightEnabled)
        {
            salesLine.PdsCWQty = releaseOrderLine.PdsCWQty;
        }
        
        InventDim inventDim = InventDim::find(this.parmInventDimId());

        switch (releaseOrderLine.DeliveryDateControlType)
        {
            case SalesDeliveryDateControlType::ATPPlusIssueMargin:
                MarginIssue marginIssue = this.marginIssue(releaseOrderLine.ItemId, inventDim);
                //
                // No break here.
                // The process of calculation ATP and "ATP + Issue margin" is
                // typically the same. The only difference is in adding an extra lead time in a latter case.
                //
            case SalesDeliveryDateControlType::ATP:
                    SalesATPCalculation salesATPCalculation = SalesATPCalculation::newSalesCalculation(
                        releaseOrderLine.ItemId,
                        InventDim::inventDimIdBlank(),
                        releaseOrderLine.CustAccount);

                // marginIssue will be > 0 only for "ATP + Issue margin" delivery date control method.
                salesATPCalculation.parmMarginIssue(marginIssue);
                salesATPCalculation.parmIssueMarginCalendarId(this.reqSetupDim().reqCalendarId());

                salesLeadTime = salesATPCalculation.atpLeadTime(
                        salesLine.RemainInventPhysical,
                        this.effectiveOrderDate(),
                        releaseOrderLine.InventTransId);

                salesLeadTimeBasedOnCalendarSetup = salesLeadTime;
                break;
            case SalesDeliveryDateControlType::None:
            case SalesDeliveryDateControlType::SalesLeadTime:
                // For SalesDeliveryDateControlType::None lead time should also be calculated.
                salesLeadTime = this.leadTime(salesLine, inventDim);
                salesLeadTimeBasedOnCalendarSetup = this.adjustLeadTimeForWorkingDays(salesLeadTime);
                break;
        }

        salesLeadTimeFound = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = _packedClass;

                if (packedSuper)
                    return super(packedSuper);
            break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    protected void updateCaller(Common  _record,
                                boolean _disableDlvDateControl = false)
    {
        super(_record,_disableDlvDateControl);

        if (_record.TableId != tableNum(SalesCreateReleaseOrderLineTmp))
        {
            throw error("@SYS18626");
        }

        SalesCreateReleaseOrderLineTmp releaseOrderLineCallerLocal = _record;

        if (this.parmCancelModifiedField())
        {
            if (releaseOrderLineOrig.RecId)
            {
                releaseOrderLineCallerLocal.ShippingDateRequested   = releaseOrderLineOrig.ShippingDateRequested;
                releaseOrderLineCallerLocal.ReceiptDateRequested    = releaseOrderLineOrig.ReceiptDateRequested;
                releaseOrderLineCallerLocal.DeliveryDateControlType = releaseOrderLineOrig.DeliveryDateControlType;
                releaseOrderLineCallerLocal.Log                     = releaseOrderLineOrig.Log;
                releaseOrderLineCallerLocal.LogType                 = releaseOrderLineOrig.LogType;
            }
            return;
        }

        if (_disableDlvDateControl)
        {
            releaseOrderLineCallerLocal.DeliveryDateControlType = SalesDeliveryDateControlType::None;
            releaseOrderLineCallerLocal.Log                     = '';
            releaseOrderLineCallerLocal.LogType                 = Exception::Info;
        }
        else
        {
            releaseOrderLineCallerLocal.DlvMode               = deliveryDateControlMap.DlvMode;
            releaseOrderLineCallerLocal.InventDimId           = deliveryDateControlMap.InventDimId;
            releaseOrderLineCallerLocal.ShippingDateRequested = deliveryDateControlMap.ShippingDateRequested;

            if (isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl)))
            {
                releaseOrderLineCallerLocal.ReceiptDateRequested  = deliveryDateControlMap.ReceiptDateRequested;
            }
            if (this.parmShowDialog())
            {
                this.parmErrorText('');
                this.parmErrorTextType(Exception::Info);

                if ( this.parmShippingDate() >=  this.effectiveOrderDate() &&
                     this.parmShippingDate() <  (this.effectiveOrderDate() + this.salesLeadTime()))
                {
                    this.errorTextHandling(strFmt("@SYS88285", date2StrUsr(this.parmReceiptDate(), DateFlags::FormatAll)), Exception::Warning, false);
                }
            }
            releaseOrderLineCallerLocal.Log               = this.parmErrorText();
            releaseOrderLineCallerLocal.LogType           = this.parmErrorTextType();
        }

        FormDataSource releaseOrderLine_ds = FormDataUtil::getFormDataSource(releaseOrderLineCallerLocal);

        if (releaseOrderLine_ds)
        {
            releaseOrderLine_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static SalesCalcAvailableDlvDates_ReleaseLine construct()
    {
        return new SalesCalcAvailableDlvDates_ReleaseLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesCreateReleaseOrderLineTmp</Name>
				<Source><![CDATA[
    public static SalesCalcAvailableDlvDates_ReleaseLine newSalesCreateReleaseOrderLineTmp(SalesCreateReleaseOrderLineTmp _releaseOrderLine,
                                                                                                  FieldId                        _fieldId   = 0,
                                                                                                  InventDim                      _inventDim = null)
    {
        InventDim                               localInventDim = InventDim::find(_releaseOrderLine.InventDimId);
        SalesCalcAvailableDlvDates_ReleaseLine  salesCalc = SalesCalcAvailableDlvDates_ReleaseLine::construct();
        InventDim                               inventDim = _inventDim ? _inventDim : localInventDim;

        SalesDlvDateType masterDateType = salesCalc.fieldId2DlvDateType(_fieldId);
        salesCalc.parmSalesCreateReleaseOrderLineTmp(_releaseOrderLine);
        salesCalc.parmInventLocationIdSelected(inventDim.InventLocationId);
        salesCalc.parmDlvModeIdSelected(_releaseOrderLine.DlvMode);
        if (_inventDim)
        {
            salesCalc.inventDimIdUpdate(_inventDim);
            salesCalc.parmInventLocationIdSelected(salesCalc.parmInventLocationId());
            salesCalc.parmInventSiteIdSelected(salesCalc.parmInventSiteId());
        }
        else
        {
            salesCalc.parmInventLocationIdSelected(inventDim.InventLocationId);
            salesCalc.parmInventSiteIdSelected(inventDim.InventSiteId);
        }

        localInventDim.InventLocationId = salesCalc.parmInventLocationIdSelected();
        localInventDim.InventSiteId     = salesCalc.parmInventSiteIdSelected();
        localInventDim = InventDim::findOrCreate(localInventDim);

        salesCalc.parmInventLocationTransportShipping(inventDim.InventLocationId);
        salesCalc.parmOrderEntryDeadlineGroupId(CustTable::find(_releaseOrderLine.CustAccount).OrderEntryDeadlineGroupId);
        salesCalc.parmRecalculateShippingDate(false);
        salesCalc.parmInventDimId(localInventDim.InventDimId);
        salesCalc.initReqSetupDim(_releaseOrderLine.ItemId, localInventDim, _releaseOrderLine.DeliveryDateControlType);

        if (!_releaseOrderLine.RecId)
        {
            masterDateType = salesCalc.initMasterDateType(masterDateType);
        }
        salesCalc.initMaster(masterDateType);

        return salesCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>