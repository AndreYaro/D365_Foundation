<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ActivityFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Holds convenience methods for working with project activities.
/// </summary>
class ActivityFacade
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActivityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves activity type for given activity.
    /// </summary>
    /// <param name = "_activity">Activity to get type for.</param>
    /// <returns>Type of the activity.</returns>
    public static PSARSEntityType getActivityType(ActivityRecId _activity)
    {
        HierarchyLinkTable hierarchyLinkTable;
        HierarchyTreeTable hierarchyTreeTable;
        smmActivities smmActivities;
        PSARSEntityType returnValue = PSARSEntityType::None;

        if (_activity)
        {
            select firstonly RefTableId from hierarchyLinkTable
            join hierarchyTreeTable
                where hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId
            join smmActivities
                where smmActivities.RecId == hierarchyTreeTable.RefRecId
                && smmActivities.RecId == _activity;

            if (hierarchyLinkTable.RefTableId == tablenum(ProjTable))
            {
                returnValue = PSARSEntityType::Project;
            }

            if (hierarchyLinkTable.RefTableId == tablenum(SalesQuotationTable))
            {
                returnValue = PSARSEntityType::Quotation;
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Id of the project or quotation associated with the specified activity.
    /// </summary>
    /// <param name = "_activity">Activity to get Id for.</param>
    /// <returns>Project or quotation identifier.</returns>
    public static Name getId(ActivityRecId _activity)
    {
        PSARSEntityType activityType = ActivityFacade::getActivityType(_activity);
        switch (activityType)
        {
            case PSARSEntityType::Project:
                return ActivityFacade::getProjId(_activity);

            case PSARSEntityType::Quotation:
                return ActivityFacade::getQuotationId(_activity);
        }

        return ActivityFacade::getActivityNumber(_activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuotationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restrives the Id of the quotation associated with the given activity.
    /// </summary>
    /// <param name = "_activity">Activity to get Id for.</param>
    /// <returns>Quotation identifier.</returns>
    public static QuotationId getQuotationId(ActivityRecId _activity)
    {
        SalesQuotationTable quotationTable;
        HierarchyLinkTable hierarchyLinkTable;
        HierarchyTreeTable hierarchyTreeTable;
        smmActivities smmActivities;

        if (_activity)
        {
            select firstonly QuotationId from quotationTable
            exists join hierarchyLinkTable
                where hierarchyLinkTable.RefRecId == quotationTable.RecId
                && hierarchyLinkTable.RefTableId == quotationTable.TableId
            exists join hierarchyTreeTable
                where hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId
            exists join smmActivities
                where smmActivities.RecId == hierarchyTreeTable.RefRecId
                && smmActivities.RecId == _activity;
        }

        return quotationTable.QuotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restrives the Id of the project associated with the given activity.
    /// </summary>
    /// <param name = "_activity">Activity to get Id for.</param>
    /// <returns>Project identifier.</returns>
    public static ProjId getProjId(ActivityRecId _activity)
    {
        ProjTable projectTable;
        HierarchyLinkTable hierarchyLinkTable;
        HierarchyTreeTable hierarchyTreeTable;
        smmActivities smmActivities;

        if (_activity)
        {
            select firstonly ProjId from projectTable
            exists join hierarchyLinkTable
                where hierarchyLinkTable.RefRecId == projectTable.RecId
                && hierarchyLinkTable.RefTableId == projectTable.TableId
            exists join hierarchyTreeTable
                where hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId
            exists join smmActivities
                where smmActivities.RecId == hierarchyTreeTable.RefRecId
                && smmActivities.RecId == _activity;
        }

        return projectTable.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves booked capacity for activity.
    /// </summary>
    /// <param name = "_activity">Activity.</param>
    /// <param name = "_commitType">Capacity booking type.</param>
    /// <param name = "_includeGenericResource">Include capacity of booked generic resources in result.</param>
    /// <returns>Booked capacity in seconds.</returns>
    public static real getBookedCapacity(ActivityRecId _activity, ResCommitType _commitType, boolean _includeGenericResource)
    {
        ResBookingView resBooking;
        
        if (_activity)
        {
            if (_includeGenericResource)
            {
                select sum(Capacity) from resBooking
                    group by resBooking.Activity, resBooking.CommitType
                        where resBooking.Activity == _activity
                            && resBooking.CommitType == _commitType;
            }
            else
            {
                PSAProjSchedRole psaProjSchedRole;
                select sum(Capacity) from resBooking
                    group by resBooking.Activity, resBooking.CommitType
                        where resBooking.Activity == _activity
                            && resBooking.CommitType == _commitType
                        join psaProjSchedRole
                            where psaProjSchedRole.RecId == resBooking.ActivityResource
                                && psaProjSchedRole.Resource != 0;
            }
        }
        return ResBooking.Capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedCapacityByDateTimeRangeInSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves assigned capacity in seconds for activity by the specified date time range.
    /// </summary>
    /// <param name = "_activity">Activity.</param>
    /// <param name = "_commitType">Capacity assignment type.</param>
    /// <param name = "_includeGenericResource">Include capacity of assigned generic resources in result.</param>
    /// <param name = "_startDateTime">Start date time.</param>
    /// <param name = "_endDateTime">End date time.</param>
    /// <returns>Assigned capacity in seconds.</returns>
    public static real getAssignedCapacityByDateTimeRangeInSeconds(ActivityRecId _activity, ResCommitType _commitType, boolean _includeGenericResource,
        utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        ResAssignmentView resAssignment;
        
        if (_activity)
        {
            if (_includeGenericResource)
            {
                select sum(Capacity) from resAssignment
                    group by resAssignment.Activity, resAssignment.CommitType
                        where resAssignment.Activity == _activity
                            && resAssignment.CommitType == _commitType
                            && resAssignment.Hour >= _startDateTime
                            && resAssignment.Hour <= _endDateTime;
            }
            else
            {
                PSAProjSchedRole psaProjSchedRole;
                select sum(Capacity) from resAssignment
                    group by resAssignment.Activity, resAssignment.CommitType
                        where resAssignment.Activity == _activity
                            && resAssignment.CommitType == _commitType
                            && resAssignment.Hour >= _startDateTime
                            && resAssignment.Hour <= _endDateTime
                        join psaProjSchedRole
                            where psaProjSchedRole.RecId == resAssignment.ActivityResource
                                && psaProjSchedRole.Resource != 0;
            }
        }
        return resAssignment.Capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedCapacityByDateTimeRangeInHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves assigned capacity in hours for activity in hours by the specified date time range.
    /// </summary>
    /// <param name = "_activity">Activity.</param>
    /// <param name = "_commitType">Capacity assignment type.</param>
    /// <param name = "_includeGenericResource">Include capacity of assigned generic resources in result.</param>
    /// <param name = "_startDateTime">Start date time.</param>
    /// <param name = "_endDateTime">End date time.</param>
    /// <returns>Assigned capacity in hours.</returns>
    public static Hours getAssignedCapacityByDateTimeRangeInHours(ActivityRecId _activity, ResCommitType _commitType, boolean _includeGenericResource,
        utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        real assignedSeconds =  ActivityFacade::getAssignedCapacityByDateTimeRangeInSeconds(_activity, _commitType, _includeGenericResource, _startDateTime, _endDateTime);
        Hours assignedHours = assignedSeconds / #SecondsPerHour;

        return assignedHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves assigned capacity for activity.
    /// </summary>
    /// <param name = "_activity">Activity.</param>
    /// <param name = "_commitType">Capacity assignment type.</param>
    /// <param name = "_includeGenericResource">Include capacity of assigned generic resources in result.</param>
    /// <returns>Assigned capacity in seconds.</returns>
    public static real getAssignedCapacity(ActivityRecId _activity, ResCommitType _commitType, boolean _includeGenericResource)
    {
        ResAssignmentView resAssignment;
        if (_activity)
        {
            if (_includeGenericResource)
            {
                select sum(Capacity) from resAssignment
                    group by resAssignment.Activity, resAssignment.CommitType
                        where resAssignment.Activity == _activity
                            && resAssignment.CommitType == _commitType;
            }
            else
            {
                PSAProjSchedRole psaProjSchedRole;
                select sum(Capacity) from resAssignment
                    group by resAssignment.Activity, resAssignment.CommitType
                        where resAssignment.Activity == _activity
                            && resAssignment.CommitType == _commitType
                        join psaProjSchedRole
                            where psaProjSchedRole.RecId == resAssignment.ActivityResource
                                && psaProjSchedRole.Resource != 0;
            }
        }
        return resAssignment.Capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedCapacityInHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves assigned capacity for activity.
    /// </summary>
    /// <param name = "_activity">Activity.</param>
    /// <param name = "_commitType">Capacity assignment type.</param>
    /// <param name = "_includeGenericResource">Include capacity of assigned generic resources in result.</param>
    /// <returns>Assigned capacity in hours.</returns>
    public static Hours getAssignedCapacityInHours(ActivityRecId _activity, ResCommitType _commitType, boolean _includeGenericResource)
    {
        real assignedSeconds =  ActivityFacade::getAssignedCapacity(_activity, _commitType, _includeGenericResource);
        Hours assignedHours = assignedSeconds / #SecondsPerHour;

        return assignedHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedCapacityPerActivityResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves assigned capacity for activity per each individual activity resource.
    /// </summary>
    /// <param name = "_activity">Activity.</param>
    /// <param name = "_commitType">Capacity assignment type.</param>
    /// <returns>Assigned capacity in seconds per specific activity resource.</returns>
    public static Map getAssignedCapacityPerActivityResource(ActivityRecId _activity, ResCommitType _commitType)
    {
        Map capacityPerActivityResource = new Map(Types::Int64, Types::Int64);

        if (_activity)
        {
            ResAssignmentView   resAssignment;
            while select ActivityResource, sum(Capacity) from resAssignment
                group by resAssignment.ActivityResource, resAssignment.CommitType
                    where resAssignment.Activity == _activity
                        && resAssignment.CommitType == _commitType
            {
                capacityPerActivityResource.insert(resAssignment.ActivityResource, resAssignment.Capacity);
            }
        }

        return capacityPerActivityResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves calendar associated with the given activity.
    /// </summary>
    /// <param name = "_activity">Activity to get calendar for.</param>
    /// <returns>Record Id of the calendar.</returns>
    public static CalendarRecId getCalendar(ActivityRecId _activity)
    {
        CalendarRecId calendar;

        if (_activity)
        {
            ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);

            PSARSEntityType resEntityType = ActivityFacade::getActivityType(rootActivity);
            if (resEntityType == PSARSEntityType::Project)
            {
                ProjTable projectTable = ProjTable::findByActivityRecId(rootActivity);
                calendar = ResourceCalendarFacade::getCalendarRecId(projectTable.PSASchedCalendarId);
            }
            else if (resEntityType == PSARSEntityType::Quotation)
            {
                SalesQuotationTable quotationTable = SalesQuotationTable::findByActivityRecId(rootActivity);
                calendar = ResourceCalendarFacade::getCalendarRecId(quotationTable.PSASchedCalendarId);
            }
        }

        return calendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useActivityCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether activity calendar should be used instead of resource calendar for determination of the resource capacity.
    /// </summary>
    /// <param name = "_activity">Activity to get ignore resource calendar setting for.</param>
    /// <returns>Ignore resource calendar setting.</returns>
    public static boolean useActivityCalendar(ActivityRecId _activity)
    {
        boolean useActivityCalendar;

        if (_activity)
        {
            ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);
            PSARSEntityType resEntityType = ActivityFacade::getActivityType(rootActivity);
            if (resEntityType == PSARSEntityType::Project)
            {
                ProjTable projectTable = ProjTable::findByActivityRecId(rootActivity);
                useActivityCalendar = projectTable.PSASchedIgnoreCalendar;
            }
            else if (resEntityType == PSARSEntityType::Quotation)
            {
                SalesQuotationTable quotationTable = SalesQuotationTable::findByActivityRecId(rootActivity);
                useActivityCalendar = quotationTable.PSASchedIgnoreCalendar;
            }
        }

        return useActivityCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the remaining unassigned capacity in seconds for specified activity and commit type.
    /// </summary>
    /// <param name = "_activity">Activity to get capacity for.</param>
    /// <param name = "_commitType">Capacity assignment type.</param>
    /// <returns>Remaining unassigned capacity in seconds.</returns>
    public static real getRemainingCapacity(ActivityRecId _activity, ResCommitType _commitType)
    {
        return ActivityFacade::getRemainingCapacityInSeconds(_activity, _commitType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingCapacityInSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the remaining unassigned capacity in seconds for specified activity and commit type.
    /// </summary>
    /// <param name = "_activity">Activity to get capacity for.</param>
    /// <param name = "_commitType">Capacity assignment type.</param>
    /// <param name="_includePlannedResource">Include planned resource booking hours if true.</param>
    /// <returns>Remaining unassigned capacity in seconds.</returns>
    public static real getRemainingCapacityInSeconds(ActivityRecId _activity, ResCommitType _commitType, boolean _includePlannedResource = false)
    {
        real remainingCapacity;
        
        if (_activity)
        {
            remainingCapacity = (ProjPlanVersion::findByActivityRecId(_activity).TaskEffort * #SecondsPerHour) 
                - ActivityFacade::getAssignedCapacity(_activity, _commitType, _includePlannedResource);
        }

        return remainingCapacity > 0 ? remainingCapacity : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingCapacityInHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the remaining unassigned capacity in hours for specified activity and commit type.
    /// </summary>
    /// <param name = "_activity">Activity to get capacity for.</param>
    /// <param name = "_commitType">Capacity assignment type.</param>
    /// <param name="_includePlannedResource">Include planned resource booking hours if true.</param>
    /// <returns>Remaining unassigned capacity in hours.</returns>
    public static Hours getRemainingCapacityInHours(ActivityRecId _activity, ResCommitType _commitType, boolean _includePlannedResource = false)
    {
        real remainingCapacity;
            
        if (_activity)
        {
            remainingCapacity = ActivityFacade::getRemainingCapacityInSeconds(_activity, _commitType, _includePlannedResource) / #SecondsPerHour;
        }

        remainingCapacity = max(0, remainingCapacity);

        return remainingCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves activity number for specified activity.
    /// </summary>
    /// <param name = "_activity">Activity record ID.</param>
    /// <returns>Activity number.</returns>
    public static smmActivityNumber getActivityNumber(ActivityRecId _activity)
    {
        smmActivities smmActivity;

        if (_activity)
        {
            select firstonly ActivityNumber from smmActivity
                where smmActivity.RecId == _activity;
        }

        return smmActivity.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootProjectActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves project root activity for specified project task actvity.
    /// </summary>
    /// <param name = "_activity">Task activity.</param>
    /// <returns>Record Id of the project root activity.</returns>
    public static ActivityRecId getRootProjectActivity(ActivityRecId _activity)
    {
        ActivityRecId returnValue = 0;

        if (_activity)
        {
            ProjId projId = ActivityFacade::getProjId(_activity);

            returnValue = ProjWBS::getRootActivityRecId(projId);
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestReservationDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the earliest reservation date/time of the specified activity
    /// </summary>
    /// <param name = "_activity">Activity record identifier.</param>
    /// <returns>Earliest reservation date/time.</returns>
    public static utcdatetime getEarliestReservationDateTime(ActivityRecId _activity)
    {
        utcdatetime earliestDate;

        if (_activity)
        {
            ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);

            ResBookingView bookingView;

            select minof(Hour) from bookingView
                where bookingView.Activity == rootActivity;

            ResAssignmentView assignmentView;
            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                PSAProjSchedRole teamTable;

                select minof(Hour) from assignmentView
                exists join teamTable
                where teamTable.RecId == assignmentView.ActivityResource &&
                    teamTable.RootActivity == rootActivity;
            }
            else
            {
                ResActivityResourceEngagementView activityResources;

                select minof(Hour) from assignmentView
                exists join activityResources
                where activityResources.ActivityResource == assignmentView.ActivityResource &&
                    activityResources.Activity == rootActivity;
            }

            utcdatetime minDateTime = DateTimeUtil::minValue();
            if ((bookingView.Hour == minDateTime) && (assignmentView.Hour == minDateTime))
            {
                earliestDate = minDateTime;
            }
            else if ((bookingView.Hour == minDateTime) && (assignmentView.Hour != minDateTime))
            {
                earliestDate = assignmentView.Hour;
            }
            else if ((bookingView.Hour != minDateTime) && (assignmentView.Hour == minDateTime))
            {
                earliestDate = bookingView.Hour;
            }
            else
            {
                earliestDate = bookingView.Hour < assignmentView.Hour ? bookingView.Hour : assignmentView.Hour;
            }
        }

        return earliestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestReservationDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the latest reservation date/time of the specified activity
    /// </summary>
    /// <param name = "_activity">Activity record identifier.</param>
    /// <returns>Last reservation date/time.</returns>
    public static utcdatetime getLatestReservationDateTime(ActivityRecId _activity)
    {
        utcdatetime latestDate;

        if (_activity)
        {
            ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);

            ResBookingView bookingView;
            select maxof(Hour) from bookingView
                where bookingView.Activity == rootActivity;

            ResAssignmentView assignmentView;

            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                PSAProjSchedRole teamTable;

                select maxof(Hour) from assignmentView
                exists join teamTable
                    where teamTable.RecId == assignmentView.ActivityResource
                        && teamTable.RootActivity == rootActivity;
            }
            else
            {
                ResActivityResourceEngagementView activityResources;

                select maxof(Hour) from assignmentView
                exists join activityResources
                    where activityResources.ActivityResource == assignmentView.ActivityResource
                        && activityResources.Activity == rootActivity;
            }

            utcdatetime minDateTime = DateTimeUtil::minValue();
            if ((bookingView.Hour == minDateTime) && (assignmentView.Hour == minDateTime))
            {
                latestDate = minDateTime;
            }
            else if ((bookingView.Hour == minDateTime) && (assignmentView.Hour != minDateTime))
            {
                latestDate = assignmentView.Hour;
            }
            else if ((bookingView.Hour != minDateTime) && (assignmentView.Hour == minDateTime))
            {
                latestDate = bookingView.Hour;
            }
            else
            {
                latestDate = bookingView.Hour > assignmentView.Hour ? bookingView.Hour : assignmentView.Hour;
        }
        }
        return latestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestBookingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get booking maximum date time by activity.
    /// </summary>
    /// <param name = "_activity">Activity Rec Id.</param>
    /// <returns>Booking max date time.</returns>
    static public utcdatetime getLatestBookingDate(ActivityRecId _activity)
    {
        ResBooking  resBooking;

        if (_activity)
        {
            ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);

            select maxOf(Day) from resBooking
                where resBooking.Activity == rootActivity;
        }

        return resBooking ? resBooking.Day : DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestBookingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get booking minimum date time by activity.
    /// </summary>
    /// <param name = "_activity">Activity Rec Id.</param>
    /// <returns>Booking min date time.</returns>
    static public utcdatetime getEarliestBookingDate(ActivityRecId _activity)
    {
        ResBooking  resBooking;

        if (_activity)
        {
            ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);

            select minOf(Day) from resBooking
                where resBooking.Activity == rootActivity;
        }

        return resBooking ? resBooking.Day : DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActivityByProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds root activity for given project.
    /// </summary>
    /// <param name = "_projectId">The Id of the project to find activity for.</param>
    /// <returns>Activity associated with the project.</returns>
    public static ActivityRecId findActivityByProjectId(ProjId _projectId)
    {
        ResActivityView activities;

        if (_projectId)
        {
            select firstonly Activity from activities
                where activities.ProjectId == _projectId;
        }

        return activities.Activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActivityByQuotationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds root activity for given project quotation.
    /// </summary>
    /// <param name = "_quotationId">The Id of the project quotation to find activity for.</param>
    /// <returns>Activity associated with the project quotation.</returns>
    public static ActivityRecId findActivityByQuotationId(QuotationId _quotationId)
    {
        ResActivityView activities;

        if (_quotationId)
        {
            select firstonly Activity from activities
                where activities.QuoteId == _quotationId;
        }

        return activities.Activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnyAssignmentForActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is any assignment record for given task activity or root activity.
    /// </summary>
    /// <param name = "_activity">Task or root activity to look for.</param>
    /// <returns>true if there are existing records for the given activity; false, otherwise.</returns>
    /// <remarks>
    /// This verion does not support the lookup by ResCommitType and whether to include or exclude planned resources.
    /// If these constraints are needed, please use existsAnyAssignmentForActivityV2().
    /// </remarks>
    public static boolean existsAnyAssignmentForActivity(ActivityRecId _activity)
    {
        return ActivityFacade::existsAnyAssignmentForActivityV2(_activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnyAssignmentForActivityV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is any assignment record for given task activity or root activity.
    /// </summary>
    /// <param name = "_activity">Task or root activity to look for.</param>
    /// <param name = "_commitType">The specified commit type. It is default to any type.</param>
    /// <param name = "_includePlannedResource">Whether to inlcude planned resource. It is default to include.</param>
    /// <returns>true if there are existing records for the given activity; false, otherwise.</returns>
    public static boolean existsAnyAssignmentForActivityV2(ActivityRecId _activity, 
        ResCommitType _commitType = ResCommitType::AnyType, boolean _includePlannedResource = true)
    {
        boolean hasAssignment = false;

        if (_activity)
        {
            if (ActivityFacade::isRootActivity(_activity))
            {
                HierarchyTreeTable taskHierarchyTreeTable;
                ResAssignment resAssignment;
                HierarchyTreeTable rootHierarchyTreeTable;
                
                if (_includePlannedResource)
                {
                    select firstonly RefRecId from taskHierarchyTreeTable
                        exists join resAssignment
                            where resAssignment.Activity == taskHierarchyTreeTable.RefRecId
                                && (_commitType == ResCommitType::AnyType || resAssignment.CommitType == _commitType)
                        exists join rootHierarchyTreeTable
                            where rootHierarchyTreeTable.HierarchyId == taskHierarchyTreeTable.HierarchyId
                                && rootHierarchyTreeTable.RefRecId == _activity;
                }
                else
                {
                    PSAProjSchedRole teamMember;

                    select firstonly RefRecId from taskHierarchyTreeTable
                        exists join resAssignment
                            where resAssignment.Activity == taskHierarchyTreeTable.RefRecId
                                && (_commitType == ResCommitType::AnyType || resAssignment.CommitType == _commitType)
                        exists join teamMember
                                where teamMember.RecId == resAssignment.ActivityResource
                                    && teamMember.Resource != 0
                        exists join rootHierarchyTreeTable
                            where rootHierarchyTreeTable.HierarchyId == taskHierarchyTreeTable.HierarchyId
                                && rootHierarchyTreeTable.RefRecId == _activity;
                }

                hasAssignment = taskHierarchyTreeTable.RefRecId != 0;
            }
            else
            {
                ResAssignment     resAssignment;

                if (_includePlannedResource)
                {
                    select firstonly RecId from resAssignment
                        where resAssignment.Activity == _activity
                            && (_commitType == ResCommitType::AnyType || resAssignment.CommitType == _commitType);
                }
                else
                {
                    PSAProjSchedRole teamMember;

                    select firstonly RecId from resAssignment
                        where resAssignment.Activity == _activity
                            && (_commitType == ResCommitType::AnyType || resAssignment.CommitType == _commitType)
                        exists join teamMember
                                where teamMember.RecId == resAssignment.ActivityResource
                                    && teamMember.Resource != 0;
                }

                hasAssignment = resAssignment.RecId != 0;
            }
        }

        return hasAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivitiesByProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a query for the project activities lookup.
    /// </summary>
    /// <param name="_legalEntity">
    ///     The legal entity of the activities to be loaded.
    /// </param>
    /// <param name="_projRecId">
    ///     The project for which the activities are to be loaded.
    /// </param>
    /// <returns>
    ///     The query for the project activities lookup.
    /// </returns>
    internal static Query getActivitiesByProject(LegalEntityDataAreaId _legalEntity = curExt(), RefRecId _projRecId = 0)
    {
        Query q = new Query();

        QueryBuildDataSource qbdsSmmActivities = q.addDataSource(tablenum(smmActivities));

        QueryBuildDataSource qbdsHierarchyTreeTable = qbdsSmmActivities.addDataSource(tablenum(HierarchyTreeTable));
        qbdsHierarchyTreeTable.joinMode(JoinMode::ExistsJoin);
        qbdsHierarchyTreeTable.addLink(fieldnum(smmActivities, RecId), fieldnum(HierarchyTreeTable, RefRecId));

        QueryBuildDataSource qbdsHierarchyLinkTable = qbdsHierarchyTreeTable.addDataSource(tablenum(HierarchyLinkTable));
        qbdsHierarchyLinkTable.joinMode(JoinMode::InnerJoin);
        qbdsHierarchyLinkTable.addLink(fieldnum(HierarchyTreeTable, HierarchyId), fieldnum(HierarchyLinkTable, HierarchyId));
        qbdsHierarchyLinkTable.addLink(fieldnum(HierarchyTreeTable, DataAreaId), fieldnum(HierarchyLinkTable, DataAreaId));

        QueryBuildDataSource qbdsProjTable = qbdsHierarchyLinkTable.addDataSource(tablenum(ProjTable));
        qbdsProjTable.addLink(fieldnum(HierarchyLinkTable, RefRecId), fieldnum(ProjTable, RecId));

        // Filter to leaf nodes only
        if (ProjParameters::find().BlockParentActivitySelection)
        {
            QueryBuildDataSource qbdsParentHierarchyTreeTable = qbdsHierarchyTreeTable.addDataSource(tablenum(HierarchyTreeTable));
            qbdsParentHierarchyTreeTable.joinMode(JoinMode::NoExistsJoin);
            qbdsParentHierarchyTreeTable.addLink(fieldnum(HierarchyTreeTable, HierarchyId), fieldnum(HierarchyTreeTable, HierarchyId));
            qbdsParentHierarchyTreeTable.addLink(fieldnum(HierarchyTreeTable, ElementNumber), fieldnum(HierarchyTreeTable, ParentElementNumber));
        }

        // Filter to only project table
        QueryBuildRange tableIdRange = qbdsHierarchyLinkTable.addRange(fieldNum(HierarchyLinkTable, RefTableId));
        tableIdRange.value(SysQuery::value(tableNum(ProjTable)));

        // Filter to currently selected project
        QueryBuildRange recIdRange = qbdsProjTable.addRange(fieldNum(ProjTable, RecId));
        recIdRange.value(SysQuery::value(_projRecId));

        // Filter to appropriate legal entity
        QueryBuildRange legalEntityRange = qbdsProjTable.addRange(fieldNum(ProjTable, DataAreaId));
        legalEntityRange.value(SysQuery::value(_legalEntity));

        // Filter out closed activites
        QueryBuildRange closedRange = qbdsSmmActivities.addRange(fieldNum(smmActivities, Closed));
        closedRange.value(SysQuery::value(NoYes::No));

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivitiesWithAssignmentByRootActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of the task activity record IDs which has resource assignment.
    /// </summary>
    /// <param name = "_activity">The specified root activity.</param>
    /// <param name = "_commitType">The specified commit type. It is default to any type.</param>
    /// <param name = "_includePlannedResource">Whether to inlcude planned resource. It is default to include.</param>
    /// <returns>A list Int64 with task activity record IDs which has resource assignment.</returns>
    public static List getActivitiesWithAssignmentByRootActivity(ActivityRecId _rootActivity, 
        ResCommitType _commitType = ResCommitType::AnyType, boolean _includePlannedResource = false)
    {
        List assignedActivityList = new List(Types::Int64);

        if (_rootActivity)
        {
            ResAssignment resAssignment;
            HierarchyTreeTable taskHierarchyTreeTable;
            HierarchyTreeTable rootHierarchyTreeTable;

            if (_includePlannedResource)
            {
                while select RefRecId from taskHierarchyTreeTable
                    group by taskHierarchyTreeTable.RefRecId
                    exists join resAssignment
                        where resAssignment.Activity == taskHierarchyTreeTable.RefRecId
                            && (_commitType == ResCommitType::AnyType || resAssignment.CommitType == _commitType)
                    exists join rootHierarchyTreeTable
                        where rootHierarchyTreeTable.HierarchyId == taskHierarchyTreeTable.HierarchyId
                            && rootHierarchyTreeTable.RefRecId == _rootActivity
                {
                    assignedActivityList.addEnd(taskHierarchyTreeTable.RefRecId);
                }
            }
            else
            {
                PSAProjSchedRole teamMember;

                while select RefRecId from taskHierarchyTreeTable
                    group by taskHierarchyTreeTable.RefRecId
                    exists join resAssignment
                        where resAssignment.Activity == taskHierarchyTreeTable.RefRecId
                            && (_commitType == ResCommitType::AnyType || resAssignment.CommitType == _commitType)
                    exists join teamMember
                        where teamMember.RecId == resAssignment.ActivityResource
                            && teamMember.Resource != 0
                    exists join rootHierarchyTreeTable
                        where rootHierarchyTreeTable.HierarchyId == taskHierarchyTreeTable.HierarchyId
                            && rootHierarchyTreeTable.RefRecId == _rootActivity
                {
                    assignedActivityList.addEnd(taskHierarchyTreeTable.RefRecId);
                }
            }
        }

        return assignedActivityList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all reservations of specified type from the activity and updates activity scheduling status accordingly.
    /// </summary>
    /// <param name = "_activity">Activity to remove reservations from.</param>
    /// <param name = "_reservationType">Type of reservations to remove.</param>
    public static void releaseReservations(ActivityRecId _activity, ResReservationType _reservationType)
    {
        if (_activity && _reservationType)
        {
            ResReservationSchedule cancellationParameters = ResReservationSchedule::construct();
            cancellationParameters.activity(_activity);
            cancellationParameters.reservationType(_reservationType);
            cancellationParameters.start(DateTimeUtil::minValue());
            cancellationParameters.end(DateTimeUtil::maxValue());
            cancellationParameters.commitment(ResCommitType::AnyType);

            List schedules = new List(Types::Class);
            schedules.addEnd(cancellationParameters);

            ResCancelEntireDay cancelAssignments = ResCancelEntireDay::construct();
            cancelAssignments.Schedules(schedules);
            cancelAssignments.Cancel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestTeamMemberPlannedStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the earliest start date among team member's planned start dates.
    /// </summary>
    /// <param name = "_activity">Activity record identifier.</param>
    /// <returns>Earliest planned start date.</returns>
    public static date getEarliestTeamMemberPlannedStartDate(ActivityRecId _activity)
    {
        date earliestDate;

        if (_activity)
        {
            ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);

            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                PSAProjSchedRole teamTable;
                select minof(PSARoleStartDate) from teamTable
                    where teamTable.RootActivity == rootActivity;

                earliestDate = teamTable.PSARoleStartDate ?
                    teamTable.PSARoleStartDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
            else
            {
                ResActivityResourceEngagementView activityResources;
                select minof(PlannedStartDate) from activityResources
                    where activityResources.Activity == rootActivity;

                earliestDate = activityResources.PlannedStartDate ?
                    activityResources.PlannedStartDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
        }

        return earliestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestTeamMemberPlannedEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the latest end date among team member's planned end dates.
    /// </summary>
    /// <param name = "_activity">Activity record identifier</param>
    /// <returns>Latest planned end date</returns>
    public static date getLatestTeamMemberPlannedEndDate(ActivityRecId _activity)
    {
        date latestDate;

        if (_activity)
        {
            ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);

            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                PSAProjSchedRole teamTable;
                select maxof(PSARoleEndDate) from teamTable
                    where teamTable.RootActivity == rootActivity;

                latestDate = teamTable.PSARoleEndDate ?
                    teamTable.PSARoleEndDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
            else
            {
                ResActivityResourceEngagementView activityResources;
                select maxof(PlannedEndDate) from activityResources
                    where activityResources.Activity == rootActivity;

                latestDate = activityResources.PlannedEndDate ?
                    activityResources.PlannedEndDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
        }

        return latestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActivityResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Look up activity resource record ID by activity and resource. This method can be used to look up if a resource is a team member by
    /// </summary>
    /// <param name = "_activity"><c>smmActivities</c> record ID.</param>
    /// <param name = "_resource"><c>ResourceView</c> record ID.</param>
    /// <returns>
    /// Return engagement team table <c>PSAProjSchedRole</c> record ID if the specified resource
    /// is a team member of the specified engagement or a task of the engagement.
    /// </returns>
    public static ActivityResourceRecId findActivityResource(ActivityRecId _activity, ResourceRecId _resource)
    {
        PSAProjSchedRole activityResources;

        if (_activity && _resource)
        {
            ProjTable projectTable;
            SalesQuotationTable quotationTable;
            HierarchyLinkTable hierarchyLinkTable;
            HierarchyTreeTable hierarchyTreeTable;
            smmActivities smmActivities;

            ActivityRecId rootActivity = HierarchyTreeTable::findActivityRootRefRecId(_activity);
            PSARSEntityType activityType = ActivityFacade::getActivityType(rootActivity);
            switch (activityType)
            {
                case PSARSEntityType::Project:
                    select firstonly RecId from activityResources
                        where activityResources.Resource == _resource
                    join projectTable
                        where projectTable.ProjId == activityResources.ProjId
                    join hierarchyLinkTable
                        where hierarchyLinkTable.RefRecId == projectTable.RecId
                        && hierarchyLinkTable.RefTableId == projectTable.TableId
                    join hierarchyTreeTable
                        where hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId
                    join smmActivities
                        where smmActivities.RecId == hierarchyTreeTable.RefRecId
                        && smmActivities.RecId == rootActivity;
                    break;

                case PSARSEntityType::Quotation:
                    select firstonly RecId from activityResources
                        where activityResources.Resource == _resource
                    join quotationTable
                        where quotationTable.QuotationId == activityResources.QuotationId
                    join hierarchyLinkTable
                        where hierarchyLinkTable.RefRecId == quotationTable.RecId
                        && hierarchyLinkTable.RefTableId == quotationTable.TableId
                    join hierarchyTreeTable
                        where hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId
                    join smmActivities
                        where smmActivities.RecId == hierarchyTreeTable.RefRecId
                        && smmActivities.RecId == rootActivity;
                    break;
                default:
                    break;
            }
        }

        return activityResources.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDateWithinActivitySchedulingDateRage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify if the specified date is a valid date within the specified activity scheduling time range.
    /// </summary>
    /// <param name = "_activity"><c>smmActivities</c> record ID.</param>
    /// <param name = "_verifyDate">Target date to be verified.</param>
    /// <returns>true if the specified date is within the activity scheduling date range; otherwise, false.</returns>
    public static boolean isDateWithinActivitySchedulingDateRage(ActivityRecId _activity, date _verifyDate)
    {
        boolean withinActivitySchedulingDateRange = false;

        if (_activity && _verifyDate)
        {
            ProjPlanVersion planVersion = ProjPlanVersion::findByActivityRecId(_activity);
            withinActivitySchedulingDateRange = ((planVersion.TaskStartDate <= _verifyDate) && (planVersion.TaskFinishDate >= _verifyDate));            
        }

        return withinActivitySchedulingDateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves WBS task name if it has been defined or activity number if it's not.
    /// </summary>
    /// <param name = "_activity">Activity record ID.</param>
    /// <returns>WBS task name or activity number if not defined.</returns>
    public static Name getTaskName(ActivityRecId _activity)
    {
        HierarchyTreeTable hierarchyTreeTable;
        Name taskName;

        if (_activity)
        {
            select firstonly Name from hierarchyTreeTable
                where hierarchyTreeTable.RefRecId == _activity;

            taskName = hierarchyTreeTable.Name;

            if (!taskName)
            {
                smmActivities smmActivity;
                select firstonly ActivityNumber from smmActivity
                    where smmActivity.RecId == _activity;

                taskName = smmActivity.ActivityNumber;
            }
        }

        return taskName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves project or quotation root activity from the specified WBS task actvity.
    /// </summary>
    /// <param name = "_activity">Task activity.</param>
    /// <returns>Record ID of the project or quotation root activity.</returns>
    public static ActivityRecID getRootActivity(ActivityRecId _activity)
    {
        ActivityRecId rootActivity;

        if (_activity)
        {
            HierarchyTreeTable hierarchyTreeTable;
            HierarchyIdBase hierarchyId = HierarchyTreeTable::findRefRecId(_activity).HierarchyId;

            select firstonly RefRecId from hierarchyTreeTable 
                where hierarchyTreeTable.HierarchyId == hierarchyId
                    && hierarchyTreeTable.ParentElementNumber == '';

            rootActivity = hierarchyTreeTable.RefRecId;
        }

        return rootActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRootActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the specify activity is root activity.
    /// </summary>
    /// <param name = "_activity">Task activity.</param>
    /// <returns>true if this is a root activity; false otherwise.</returns>
    public static boolean isRootActivity(ActivityRecId _activity)
    {
        boolean isRootActivity = false;

        if (_activity)
        {
            HierarchyTreeTable hierarchyTreeTable;

            select firstonly ParentElementNumber from hierarchyTreeTable
                where hierarchyTreeTable.RefRecId == _activity;
                    
            isRootActivity = (hierarchyTreeTable.ParentElementNumber == '') ? true : false;
        }

        return isRootActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the scheduling start and scheduling end dates by the specified activity record identifier.
    /// </summary>
    /// <param name = "_activity">Activity record identifier for a WBS task or the root of project activity.</param>
    /// <returns>A container which contains the scheduling start and scheduling end dates.</returns>
    public static container getSchedDates(ActivityRecId _activity)
    {
        date schedStartDate;
        date schedEndDate;

        if (_activity)
        {
            if ((ActivityFacade::isRootActivity(_activity)) && (ActivityFacade::getActivityType(_activity) == PSARSEntityType::Project))
            {
                HierarchyLinkTable  hierarchyLinkTable;
                HierarchyTreeTable  hierarchyTreeTable;
                ProjTable           projTable;

                select firstonly PSASchedStartDate, PSASchedEndDate from projTable
                    exists join hierarchyLinkTable
                        where hierarchyLinkTable.RefTableId == projTable.TableId
                            && hierarchyLinkTable.RefRecId == projTable.RecId
                    exists join hierarchyTreeTable
                        where hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId
                            && hierarchyTreeTable.RefRecId == _activity;

                schedStartDate = projTable.PSASchedStartDate;
                schedEndDate = projTable.PSASchedEndDate;
            }
            else
            {
                ProjPlanVersion planVersion = ProjPlanVersion::findByActivityRecId(_activity);
                
                schedStartDate = planVersion.TaskStartDate;
                schedEndDate = planVersion.TaskFinishDate;
            }
        }

        return [schedStartDate, schedEndDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the specified activity is project quotation activity.
    /// </summary>
    /// <param name = "_activity">Activity record identifier.</param>
    /// <returns>true if this is quotation activity; otherwise, false.</returns>
    [Hookable(false), Wrappable(false)]
    public static boolean isQuotation(ActivityRecId _activity)
    {
        boolean isQuotation; 

        if (_activity)
        {
            HierarchyLinkTable hierarchyLinkTable;
            HierarchyTreeTable hierarchyTreeTable;
            SalesQuotationTable quoteTable;

            ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);

            select firstonly RecId from quoteTable
                exists join hierarchyLinkTable
                    where hierarchyLinkTable.RefTableId == quoteTable.TableId
                        && hierarchyLinkTable.RefRecId == quoteTable.RecId
                exists join hierarchyTreeTable
                    where hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId
                        && hierarchyTreeTable.RefRecId == rootActivity;

            isQuotation = (quoteTable.RecId) ? true : false;
        }

        return isQuotation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>