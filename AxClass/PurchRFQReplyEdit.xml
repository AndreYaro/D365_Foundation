<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQReplyEdit</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchRFQReplyEdit
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAlternateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an alternate for the given line.
    /// </summary>
    /// <param name = "_purchRFQLine">
    /// The record of the <c>PurchRFQLine</c> table;
    /// </param>
    protected static void addAlternateLine(PurchRFQLine _purchRFQLine)
    {
        PurchRFQLineCreateAlternateParameters createAlternateLineParameters = PurchRFQLineCreateAlternateParameters::construct();
        createAlternateLineParameters.BidType = PurchRFQBidType::Open;
        createAlternateLineParameters.ItemName = '';
        createAlternateLineParameters.Name = '';

        _purchRFQLine.createAlternateLine(createAlternateLineParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAlternateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the given alternate line.
    /// </summary>
    /// <param name = "_purchRFQLine">
    /// The record of the <c>PurchRFQLine</c> table;
    /// </param>
    protected static void removeAlternateLine(PurchRFQLine _purchRFQLine)
    {
        ttsbegin;
        _purchRFQLine.delete();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDataForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the reply data from a <c>PurchRFQReplyLine</c> record buffer.
    /// </summary>
    /// <param name="_rfqId">
    /// The RFQ ID of the <c>PurchRFQReplyLine</c> record to clear out.
    /// </param>
    /// <param name="_lineNum">
    /// The line number of the <c>PurchRFQReplyLine</c> record to clear.
    /// </param>
    public static void clearDataForLine(PurchRFQId _rfqId, LineNum _lineNum)
    {
        PurchRFQReplyLine   purchRFQReplyLine = PurchRFQReplyLine::find(_rfqId,_lineNum,true);

        if (purchRFQReplyLine)
        {
            ttsbegin;

            purchRFQReplyLine.CalendarDays   = NoYes::No;
            purchRFQReplyLine.Comment        = "";
            purchRFQReplyLine.DeliveryDate   = dateNull();
            purchRFQReplyLine.ExternalItemId = "";
            purchRFQReplyLine.LeadTime       = 0;
            purchRFQReplyLine.LineAmount     = 0;
            purchRFQReplyLine.LineDisc       = 0;
            purchRFQReplyLine.LinePercent    = 0;
            purchRFQReplyLine.MultiLnDisc    = 0;
            purchRFQReplyLine.MultiLnPercent = 0;
            purchRFQReplyLine.Name           = "";
            purchRFQReplyLine.PriceUnit      = 0;
            purchRFQReplyLine.PurchMarkup    = 0;
            purchRFQReplyLine.PurchPrice     = 0;
            purchRFQReplyLine.PurchQty       = 0;
            purchRFQReplyLine.PurchUnit      = "";
            purchRFQReplyLine.QtyOrdered     = 0;
            purchRFQReplyLine.ValidFrom      = dateNull();
            purchRFQReplyLine.ValidTo        = dateNull();

            purchRFQReplyLine.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySuggestedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies data from a <c>PurchRFQLine</c> record buffer to a <c>PurchRFQReplyLine</c> record buffer
    /// for all the line items that are associated with the supplied RFQ ID.
    /// </summary>
    /// <param name="_rfqId">
    /// The RFQ ID of a record that has data to copy to the reply.
    /// </param>
    public static void copySuggestedData(PurchRFQId _rfqId)
    {
        PurchRFQCopyReplyData purchRFQCopyReplyData = PurchRFQCopyReplyData::construct();

        purchRFQCopyReplyData.parmPurchRFQId(_rfqId);
        purchRFQCopyReplyData.run(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySuggestedDataForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies data from the <c>PurchRFQLine</c> record to the <c>PurchRFQReplyLine</c> record.
    /// </summary>
    /// <param name="_rfqId">
    /// The RFQ ID of the line record from which to copy data.
    /// </param>
    /// <param name="_lineNum">
    /// The line number of the line record to copy data from.
    /// </param>
    public static void copySuggestedDataForLine(PurchRFQId _rfqId, LineNum _lineNum)
    {
        PurchRFQLine            purchRFQLine        = PurchRFQLine::find(_rfqId, _lineNum, true);
        PurchRFQReplyLine       purchRFQReplyLine   = PurchRFQReplyLine::find(_rfqId, _lineNum, true);

        ttsbegin;

        if  (purchRFQLine.RecId && purchRFQReplyLine.RecId)
        {
            PurchRFQCopyReplyData::copyLineData(purchRFQLine, purchRFQReplyLine, false);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>declineRFQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of an RFQ to declined.
    /// </summary>
    /// <param name="_rfqId">
    /// The RFQ ID of a record in the <c>PurchRFQTable</c> table.
    /// </param>
    public static void declineRFQ(PurchRFQId _rfqId)
    {
        PurchRFQTable   purchRFQTable;
        PurchRFQLine    purchRFQLine;

        ttsbegin;

        while select forupdate purchRFQLine
            where purchRFQLine.rfqId == _rfqId
        {
            purchRFQLine.Status = PurchRFQStatus::Declined;
            purchRFQLine.update();
        }

        select firstonly forupdate purchRFQTable
            where purchRFQTable.rfqId == _rfqId;

        if  (purchRFQTable.RecId)
        {
            purchRFQTable.StatusHigh = PurchRFQStatus::Declined;
            purchRFQTable.StatusLow  = PurchRFQStatus::Declined;
            purchRFQTable.setPurchRFQVendReplyDate();
            purchRFQTable.update();

            PurchRFQReplyTable::find(_rfqId).updateReplyProgressStatus(xUserInfo::doesCurrentUserHaveProcurementAgentRights()
                ? PurchRFQReplyProgressStatus::DeclinedByProcurementAgent
                : PurchRFQReplyProgressStatus::DeclinedByVendor);
        }

        if (purchRFQTable.StatusHigh == PurchRFQStatus::Declined)
        {
            info(strfmt("@SYS313937",_rfqId)); // RFQ %1 was declined.
        }

        PurchRFQReplyEdit::deleteInventTrans(_rfqId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Common              rec = _args.record();
        PurchRFQTable       purchRFQTable;
        PurchRFQCaseTable   purchRFQCaseTable;
        PurchRFQLine        purchRFQLine;
        PurchRFQReplyTable  purchRFQReplyTable;

        switch (rec.TableId)
        {
            case tablenum(PurchRFQReplyTable):
                purchRFQReplyTable = rec;
                purchRFQTable = PurchRFQTable::find(purchRFQReplyTable.RFQId);
                purchRFQCaseTable = PurchRFQCaseTable::find(purchRFQTable.RFQCaseId);
                break;

            case tablenum(PurchRFQTable):
                purchRFQTable = rec;
                purchRFQCaseTable = PurchRFQCaseTable::find(purchRFQTable.RFQCaseId);
                break;

            case tablenum(PurchRFQLine):
                purchRFQLine = rec;
                purchRFQCaseTable = PurchRFQCaseTable::find(purchRFQLine.purchRFQTable().RFQCaseId);
                break;
        }

        if (!purchRFQCaseTable)
        {
            throw error(Error::missingRecord(tablePName(PurchRFQCaseTable)));
        }

        if (_args.menuItemName() != menuItemActionStr(PurchRFQAttachment)
            && _args.menuItemName() != menuItemActionStr(PurchRFQLineAttachment)
            && _args.menuItemName() != menuItemActionStr(PurchRFQReplyEditBid)
            && purchRFQCaseTable.isRFQExpiredForCurrentUser())
        {
            throw error("@SCM:RFQExpiredErrorMessage");
        }

        if (purchRFQTable)
        {
            switch (_args.menuItemName())
            {
                // Reset Bid data.
                case menuItemActionStr(PurchRFQReplyReset):
                    PurchRFQReplyEdit::copySuggestedData(purchRFQTable.rfqId);
                    break;

                // Send RFQ to purchasing agent.
                case menuItemActionStr(PurchRFQReplySend):
                    PurchRFQReplySubmitController::main(_args);
                    break;

                // Recall Bid.
                case menuItemActionStr(PurchRFQReplyRecall):
                    if (xUserInfo::doesCurrentUserHaveProcurementAgentRights())
                    {
                        throw error("@SCM:PurchRFQPurchaserCannotRecallBid");
                    }

                    PurchRFQReplyEdit::recallRFQ(purchRFQTable.rfqId, _args);
                    break;

                // Decline Bid.
                case menuItemActionStr(PurchRFQReplyDecline):
                    PurchRFQReplyDeclineController::main(_args);
                    break;

                // Start Bid.
                case menuItemActionStr(PurchRFQReplyStartBid):
                    PurchRFQReplyEdit::startBid(purchRFQTable, PurchRFQReplyEdit::getRFQReplyEditProgressStatus(_args));
                    break;
                    
                // Edit Bid.
                case menuItemActionStr(PurchRFQReplyEditBid):
                    PurchRFQReplyEdit::editRFQReply(purchRFQTable, _args);
                    break;

                case menuItemActionStr(PurchRFQAttachment):
                    PurchRFQReplyEdit::showRFQDocuments(purchRFQTable);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(staticMethodStr(PurchRFQReplyEdit, main)));
            }
        }

        if (purchRFQLine)
        {
            switch (_args.menuItemName())
            {
                // Reset reply line data.
                case menuItemActionStr(PurchRFQReplyLineReset):
                    PurchRFQReplyEdit::copySuggestedDataForLine(purchRFQLine.rfqId,purchRFQLine.LineNum);
                    break;

                case menuItemActionStr(PurchRFQReplyLineAddAlternate):
                    PurchRFQReplyEdit::addAlternateLine(purchRFQLine);
                    break;
            
                case menuItemActionStr(PurchRFQReplyLineRemoveAlternate):
                    PurchRFQReplyEdit::removeAlternateLine(purchRFQLine);
                    break;

                case menuItemActionStr(PurchRFQLineAttachment):
                    PurchRFQReplyEdit::showRFQLineDocuments(purchRFQLine);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(staticMethodStr(PurchRFQReplyEdit, main)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRFQDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the attachment form for the request for quotation attachments.
    /// </summary>
    /// <param name = "_purchRFQLine">
    /// The record of the <c>PurchRFQTable</c> table.
    /// </param>
    public static void showRFQDocuments(PurchRFQTable _purchRFQTable)
    {
        PurchRFQReplyEdit::showReferenceDocuments(_purchRFQTable.lastSentJournal());
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRFQLineDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the attachment form for the request for quotation line attachments.
    /// </summary>
    /// <param name = "_purchRFQLine">
    /// The record of the <c>PurchRFQLine</c> table.
    /// </param>
    public static void showRFQLineDocuments(PurchRFQLine _purchRFQLine)
    {
        PurchRFQReplyEdit::showReferenceDocuments(_purchRFQLine.lastJournalTransByStatus(PurchRFQStatus::Sent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>startBid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the bid process by setting the bid in progress and copying the reply values from source RFQ case, requested quantities.
    /// </summary>
    /// <param name = "_purchRFQTable">The <c>PurchRFQTable</c> record to be used.</param>
    /// <param name = "_replyProgressStatus">The <c>PurchRFQReplyProgressStatus</c> value to set.</param>
    public static void startBid(PurchRFQTable _purchRFQTable, PurchRFQReplyProgressStatus _replyProgressStatus = PurchRFQReplyProgressStatus::VendorEditing)
    {
        if (!_purchRFQTable)
        {
            throw error(Error::missingRecord(tablePName(PurchRFQTable)));
        }

        ttsbegin;

        PurchRFQTable::find(_purchRFQTable.rfqId, true).setBidInProgressStatus(NoYes::Yes);
        PurchRFQReplyEdit::copySuggestedData(_purchRFQTable.rfqId);
        PurchRFQReplyTable::find(_purchRFQTable.rfqId).updateReplyProgressStatus(_replyProgressStatus);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recallRFQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recall a given RFQ.
    /// </summary>
    /// <param name="_rfqId">
    /// The RFQ ID of a record in the <c>PurchRFQTable</c> table.
    /// </param>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void recallRFQ(PurchRFQId _rfqId, Args _args)
    {
        PurchRFQTable purchRFQTable = PurchRFQTable::find(_rfqId);

        if (purchRFQTable.ExpiryDateTime < DateTimeUtil::utcNow())
        {
            throw error("@SYS4010260");
        }

        Args args = new Args();
        args.parm(classStr(FormletterService) + '.' + methodStr(FormletterService, postRequestForQuoteReSend));
        args.parmEnum(PurchRFQUpdateType::Resent);
        args.parmEnumType(enumName2Id(enumStr(PurchRFQUpdateType)));
        args.caller(_args.caller());

        args.record(purchRFQTable);

        // Call the resend process
        new MenuFunction(menuitemActionStr(PurchRFQVendFormLetter_ReSend), MenuItemType::Action).run(args);
        PurchRFQReplyTable::find(purchRFQTable.rfqId).updateReplyProgressStatus(PurchRFQReplyProgressStatus::VendorEditing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendRFQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of an RFQ to received and creates an RFQ receive journal.
    /// </summary>
    /// <param name="_rfqId">
    /// The RFQ ID of a record in the <c>PurchRFQTable</c> table.
    /// </param>
    public static void sendRFQ(PurchRFQId _rfqId)
    {
        PurchRFQReplyEdit::checkSealedBidValues(_rfqId);
        
        if (!PurchRFQTableKMCollection::isQuestionnaireComplete(_rfqId))
        {
            throw error("@SYS4001511");
        }

        ttsBegin;

        PurchRFQTable purchRFQTable = PurchRFQTable::find(_rfqId, true);

        // For purchase agreement type RFQ's, validate the 'ValidityDateStart' and 'ValidityDateEnd' dates
        if (purchRFQTable.RFQType == PurchRFQType::PurchAgreement)
        {
            PurchRFQReplyEdit::validatePARFQReplyDates(purchRFQTable);
        }

        if (purchRFQTable.RecId && purchRFQTable.StatusHigh < PurchRFQStatus::Rejected)
        {
            PurchRFQReplyEdit::updateLinesToReceivedStatus(_rfqId);
            purchRFQTable.reread();

            //Send must update the header level reply fields only when all lines are in Sent status
            if (purchRFQTable.StatusHigh == PurchRFQStatus::Sent)
            {
                purchRFQTable.StatusHigh = PurchRFQStatus::Received;
                purchRFQTable.StatusLow  = PurchRFQStatus::Received;
            }

            purchRFQTable.ReplySubmittedBy = DirPersonUser::current().PersonParty;
            purchRFQTable.setPurchRFQVendReplyDate();
            purchRFQTable.update();

            PurchRFQReplyTable::find(_rfqId).updateReplyProgressStatus(xUserInfo::doesCurrentUserHaveProcurementAgentRights()
                ? PurchRFQReplyProgressStatus::SubmittedByProcurementAgent
                : PurchRFQReplyProgressStatus::SubmittedByVendor);
        }

        PurchRFQReceiveJournalCreate purchRFQReceiveJournalCreate = PurchRFQReceiveJournalCreate::construct();
        purchRFQReceiveJournalCreate.parmPurchRFQTable(purchRFQTable);
        purchRFQReceiveJournalCreate.run();

        PurchRFQCaseTable rfqCaseTable = PurchRFQCaseTable::find(purchRFQTable.RFQCaseId);

        if (rfqCaseTable.BidType == PurchRFQBidType::Sealed && rfqCaseTable.IsSealed == NoYes::Yes)
        {
            Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteApplicationDiagnostic(
                'Log submit activity for sealed bid',
                new System.Diagnostics.StackTrace().ToString());

            PurchRFQReplyEncryptionAuditLog::logActivity(_rfqId, PurchRFQReplyActivity::Submitted, PurchRFQReplyEncryptionActivity::Encrypt);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinesToReceivedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of RFQ lines from sent to received
    /// </summary>
    /// <param name="_rfqId">
    /// The RFQ ID of a record in the <c>PurchRFQTable</c> table.
    /// </param>
    public static void updateLinesToReceivedStatus(PurchRFQId _rfqId)
    {
        PurchRFQLine        purchRFQLine;
        PurchRFQReplyLine   purchRFQReplyLine;

        if (PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled() &&
            !TaxSolutionScopeIntegrationUtil::IsCompanyEnabled())
        {
            // proactively check the constraint in order to avoid downgrade to row-by-row update
            purchRFQReplyLine.skipDataMethods(true);
        }

        update_recordSet purchRFQReplyLine
            setting ReplyReceived = NoYes::Yes
                exists join purchRFQLine
                where purchRFQLine.rfqId              == _rfqId
                    && purchRFQLine.Status            == PurchRFQStatus::Sent
                    && purchRFQReplyLine.RFQLineRecId == purchRFQLine.RecId;

        while select forupdate purchRFQLine
            where purchRFQLine.rfqId   == _rfqId
                && purchRFQLine.Status == PurchRFQStatus::Sent
        {
            purchRFQLine.Status = PurchRFQStatus::Received;
            purchRFQLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSealedBidValues</Name>
				<Source><![CDATA[
    private static boolean checkSealedBidValues(PurchRFQId _purchRFQId)
    {
        boolean sealedReplyExists = true;
        boolean isSealed = PurchRFQTable::findByRFQId(_purchRFQId).IsSealed;
        
        if (isSealed)
        {
            if (!PurchRFQSealedReplyLine::existsRFQId(_purchRFQId))
            {
                throw Error("@SCM:RFQSealedBidSubmitErrorMessage");
            }

            if (!PurchRFQSealedBidManager::checkReplyNotSubmitted(_purchRFQId, false))
            {
                throw Error("@SCM:RFQSealedBidSubmitErrorMessageOnSubmittedBid");
            }
        }
        
        return sealedReplyExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePARFQReplyDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the purchase agreement reply dates for purchase agreement type RFQ's.
    /// </summary>
    /// <param name="_purchRFQTable">
    /// The <c>PurchRFQTable</c> record.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The <c>ValidityDateStart</c> is null.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The <c>ValidityDateEnd</c> is null.
    /// </exception>
    private static void validatePARFQReplyDates(PurchRFQTable _purchRFQTable)
    {
        PurchRFQReplyTable  purchRFQReplyTable;
        PurchRFQCaseTable   purchRFQCaseTable = PurchRFQCaseTable::find(_purchRFQTable.RFQCaseId);
        boolean             rfqIsNotSealed = purchRFQCaseTable.IsSealed == NoYes::No;

        if (_purchRFQTable && _purchRFQTable.RFQType == PurchRFQType::PurchAgreement)
        {
            purchRFQReplyTable = PurchRFQReplyTable::find(_purchRFQTable.RFQId);

            if (purchRFQReplyTable.ValidityDateStart == dateNull() && rfqIsNotSealed)
            {
                throw error(strFmt("@SYS26332", fieldPName(PurchRFQReplyTable, ValidityDateStart)));
            }

            if (purchRFQReplyTable.ValidityDateEnd == dateNull() && rfqIsNotSealed)
            {
                throw error(strFmt("@SYS26332", fieldPName(PurchRFQReplyTable, ValidityDateEnd)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showReferenceDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the reference documents.
    /// </summary>
    /// <param name = "_tableWithDocuRef">
    /// The record of the table associated with the attachments.
    /// </param>
    public static void showReferenceDocuments(Common _tableWithDocuRef)
    {
        Args args = new Args();

        args.record(_tableWithDocuRef);

        new MenuFunction(menuItemDisplayStr(DocuAttachment), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRFQReplyEditProgressStatus</Name>
				<Source><![CDATA[
    private static PurchRFQReplyProgressStatus getRFQReplyEditProgressStatus(Args _args)
    {
        PurchRFQReplyProgressStatus replyProgressStatus;
        
        switch (_args.callerName())
        {
            case formStr(PurchRFQReplyTable):
            case formStr(PurchRFQReplyTableListPage):
                replyProgressStatus = PurchRFQReplyProgressStatus::ProcurementAgentEditing;
                break;

            case formStr(PurchRFQVendReply):
                replyProgressStatus = xUserInfo::doesCurrentUserHaveProcurementAgentRights()
                                               ? PurchRFQReplyProgressStatus::ProcurementAgentEditing
                                               : PurchRFQReplyProgressStatus::VendorEditing;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return replyProgressStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editRFQReply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits RFQ reply and open vendor reply form accordingly.
    /// </summary>
    /// <param name = "_purchRFQTable">The <c>PurchRFQTable</c> record.</param>
    /// <param name = "_args">The arguments to start the process.</param>
    private static void editRFQReply(PurchRFQTable _purchRFQTable, Args _args)
    {
        if (!_purchRFQTable)
        {
            throw error(Error::missingRecord(tablePName(PurchRFQTable)));
        }

        PurchRFQReplyTable purchRFQReplyTable = purchRFQReplyTable::find(_purchRFQTable.RFQId);

        if (!purchRFQReplyTable)
        {
            throw error(Error::missingRecord(tablePName(PurchRFQReplyTable)));
        }
        
        if (VendTable::find(_purchRFQTable.VendAccount).VendVendorCollaborationType == VendVendorCollaborationType::Disabled
            || PurchRFQReplyEdit::confirmEditingRFQReplyByProcurementAgent(purchRFQReplyTable.ReplyProgressStatus))
        {
            if (purchRFQReplyTable.isSubmitted())
            {
                PurchRFQReplyEdit::returnRequestForQuote(_purchRFQTable, _args);
            }

            PurchRFQReplyEdit::openRFQReplyForEdit(_purchRFQTable, PurchRFQReplyEdit::getRFQReplyEditProgressStatus(_args), _args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmEditingRFQReplyByProcurementAgent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms if the procurement agent wants to continue editing the RFQ reply.
    /// </summary>
    /// <param name = "_replyProgressStatus">
    /// The <c>PurchRFQReplyProgressStatus</c> value.
    /// </param>
    /// <returns>
    /// true if the procurement agent wants to edit the reply; otherwise, false.
    /// </returns>
    private static boolean confirmEditingRFQReplyByProcurementAgent(PurchRFQReplyProgressStatus _replyProgressStatus)
    {
        boolean continueEditingReply;

        switch (_replyProgressStatus)
        {
            case PurchRFQReplyProgressStatus::VendorEditing:
                continueEditingReply = Box::okCancel("@SCM:PurchRFQReplyEditUpdatingConfirmMessage", DialogButton::Cancel) == DialogButton::Ok;
                break;

            case PurchRFQReplyProgressStatus::SubmittedByVendor:
                // Fall through
            case PurchRFQReplyProgressStatus::SubmittedByProcurementAgent:
                continueEditingReply = Box::okCancel("@SCM:PurchRFQReplyEditSubmittedConfirmMessage", DialogButton::Cancel) == DialogButton::Ok;
                break;

            case PurchRFQReplyProgressStatus::NotStarted:
                continueEditingReply = Box::okCancel("@SCM:PurchRFQReplyEditNotStartedConfirmMessage", DialogButton::Cancel) == DialogButton::Ok;
                break;

            case PurchRFQReplyProgressStatus::ProcurementAgentEditing:
                continueEditingReply = true;
                break;

            case PurchRFQReplyProgressStatus::DeclinedByProcurementAgent:
                // Fall through
            case PurchRFQReplyProgressStatus::DeclinedByVendor:
                continueEditingReply = false;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return continueEditingReply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openRFQReplyForEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens request for quotation reply for edit.
    /// </summary>
    /// <param name = "_purchRFQTable">The <c>PurchRFQTable</c> record.</param>
    /// <param name = "_replyProgressStatus">The <c>PurchRFQReplyProgressStatus</c> value.</param>
    /// <param name = "_callerArgs">The caller args.</param>
    public static void openRFQReplyForEdit(PurchRFQTable _purchRFQTable, PurchRFQReplyProgressStatus _replyProgressStatus, Args _callerArgs)
    {
        if (!_purchRFQTable)
        {
            throw error(Error::missingRecord(tablePName(PurchRFQTable)));
        }
        
        PurchRFQReplyTable replyTable = PurchRFQReplyTable::find(_purchRFQTable.RFQId);

        if (replyTable.ReplyProgressStatus == PurchRFQReplyProgressStatus::NotStarted)
        {
            PurchRFQReplyEdit::startBid(_purchRFQTable, _replyProgressStatus);
        }
        else
        {
            replyTable.updateReplyProgressStatus(_replyProgressStatus);
        }

        PurchRFQReplyEdit::openPurchRFQVendReplyForm(_purchRFQTable, _callerArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnRequestForQuote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the request for quotation reply.
    /// </summary>
    /// <param name = "_purchRFQTable">The <c>PurchRFQTable</c> record.</param>
    /// <param name = "_callerArgs">The caller args.</param>
    private static void returnRequestForQuote(PurchRFQTable _purchRFQTable, Args _callerArgs)
    {
        if (!_purchRFQTable)
        {
            throw error(Error::missingRecord(tablePName(PurchRFQTable)));
        }

        Args args = new Args();

        args.record(_purchRFQTable);
        args.parmObject(_callerArgs.callerFormControl());
        args.caller(_callerArgs.caller());
            
        new MenuFunction(menuItemActionStr(PurchRFQFormLetter_Resend), MenuItemType::Action).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openPurchRFQVendReplyForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>PurchRFQVendReply</c> RFQ reply form in the Edit mode.
    /// </summary>
    /// <param name = "_purchRFQTable">The <c>PurchRFQTable</c> record.</param>
    /// <param name = "_callerArgs">The caller args.</param>
    private static void openPurchRFQVendReplyForm(PurchRFQTable _purchRFQTable, Args _callerArgs)
    {
        if (!_purchRFQTable)
        {
            throw error('@PublicSector:PurchPublishedRequestForQuotationBidNotCreatedError');
        }

        Args args = new Args();
        args.record(_purchRFQTable);

        MenuFunction vendReplyMenu;

        if (_callerArgs)
        {
            args.parmObject(_callerArgs.caller());
            vendReplyMenu = new MenuFunction(menuItemDisplayStr(PurchRFQVendReplyEditRFQ), MenuItemType::Display);
        }
        else
        {
            vendReplyMenu = new MenuFunction(menuItemDisplayStr(PurchRFQVendReply), MenuItemType::Display);
        }

        vendReplyMenu.openMode(ViewEditMode::Edit);
        vendReplyMenu.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes inventory transactions after RFQ is declined.
    /// </summary>
    /// <param name="_rfqId">
    /// The RFQ ID of a record in the <c>PurchRFQTable</c> table.
    /// </param>
    private static void deleteInventTrans(PurchRFQId _rfqId)
    {
        PurchRFQLine purchRFQLine;
        PurchRFQLine alternativeRFQLine;

        while select forupdate purchRFQLine
            where purchRFQLine.rfqId == _rfqId
                && purchRFQLine.InventTransId != ''
        {
            // Only delete transactions if this line is rejected for all vendors or
            // it was created manually and so no other vendors can be involved.
            if (!purchRFQLine.createdManually())
            {
                // Check alternative lines
                select firstonly RecId from alternativeRFQLine
                    where alternativeRFQLine.rfqId != purchRFQLine.rfqId
                        && alternativeRFQLine.rfqCaseLineRefRecId == purchRFQLine.rfqCaseLineRefRecId
                        && alternativeRFQLine.Status < PurchRFQStatus::Rejected;
            }

            if (purchRFQLine.createdManually() || !alternativeRFQLine.RecId)
            {
                InventUpd_DeleteMovement deleted = InventUpd_DeleteMovement::newMovement(InventMovement::construct(purchRFQLine), false);
                if (deleted)
                {
                    deleted.updateNow();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>