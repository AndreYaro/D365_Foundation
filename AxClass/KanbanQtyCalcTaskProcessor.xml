<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanQtyCalcTaskProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanQtyCalcTaskProcessor</c> class loops through <c>KanbanQuantityCalculationProposal</c>
///    records and processes specific tasks for each record.
/// </summary>
/// <remarks>
///    Several instances of this class can work in parallel in order to distribute the load.
/// </remarks>
class KanbanQtyCalcTaskProcessor extends RunBaseBatch implements BatchRetryable
{
    // input variables
    KanbanQuantityCalculation       kanbanQuantityCalculation;
    className                       taskClassName;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        kanbanQuantityCalculation,
        taskClassName
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doCalculateOptimum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the specified <c>KanbanQuantityCalculationProposal</c> record with an optimal kanban quantity.
    /// </summary>
    /// <param name="_kanbanQuantityCalculationProposal">
    /// A <c>KanbanQuantityCalculationProposal</c> record.
    /// </param>
    protected void doCalculateOptimum(KanbanQuantityCalculationProposal _kanbanQuantityCalculationProposal)
    {
        KanbanQuantityCalculateOptimum kanbanQuantityCalculateOptimum = KanbanQuantityCalculateOptimum::newStandard(_kanbanQuantityCalculationProposal);
        kanbanQuantityCalculateOptimum.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doMaintainKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the logic to enable the proposed kanban quantity by updating the related kanban rule or
    ///    creating a new replacing kanban rule.
    /// </summary>
    /// <param name="_kanbanQuantityCalculationProposal">
    ///    A <c>KanbanQuantityCalculationProposal</c> record having a proposed kanban quantity.
    /// </param>
    protected void doMaintainKanbanRule(KanbanQuantityCalculationProposal _kanbanQuantityCalculationProposal)
    {
        KanbanQuantityMaintainKanbanRule kanbanQuantityMaintainKanbanRule = KanbanQuantityMaintainKanbanRule::newStandard(_kanbanQuantityCalculationProposal);
        kanbanQuantityMaintainKanbanRule.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProgressBar</Name>
				<Source><![CDATA[
        private void initProgressBar()
    {
        KanbanQuantityCalculationProposal   kanbanQuantityCalculationProposal;
        str                                 caption;

        if (this.isInBatch())
        {
            return;
        }

        select count(RecId) from kanbanQuantityCalculationProposal
            where kanbanQuantityCalculationProposal.KanbanQuantityCalculation == kanbanQuantityCalculation.RecId;

        switch (taskClassName)
        {
            case classstr(KanbanQtyCalcUpdateCommand):
                caption = KanbanQtyCalcUpdateCommand::description();
                break;

            case classstr(KanbanQtyCalcEnableCommand):
                caption = KanbanQtyCalcEnableCommand::description();
                break;
        }

        this.progressInit(caption,kanbanQuantityCalculationProposal.RecId,'');
        this.parmProgress().update(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanQuantityCalculation</Name>
				<Source><![CDATA[
        public KanbanQuantityCalculation  parmKanbanQuantityCalculation(KanbanQuantityCalculation _kanbanQuantityCalculation = kanbanQuantityCalculation)
    {
        kanbanQuantityCalculation = _kanbanQuantityCalculation;

        return kanbanQuantityCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaskClassName</Name>
				<Source><![CDATA[
        public className parmTaskClassName(className _taskClassName = taskClassName)
    {
        taskClassName = _taskClassName;

        return taskClassName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects and processes a single proposal line until all lines are processed.
    /// </summary>
    /// <remarks>
    ///    A parallel object may exist at the same time.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The related setup is missing or incorrect.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount
        #define.infologMessageElement(2)
        InfologData                         infologDataError;
        KanbanQuantityCalculationProposal   kanbanQuantityCalculationProposal;
        KanbanRuleFixed                     kanbanRuleFixed;
        KanbanRule                          kanbanRule;

        Set errorSet = new Set(Types::Record);
        this.initProgressBar();

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            do
            {
                // the below pattern allows several instances of this class to process proposal records.
                kanbanQuantityCalculationProposal.readPast(true);
                ttsbegin;

                select pessimisticlock firstonly kanbanQuantityCalculationProposal
                    where  kanbanQuantityCalculationProposal.KanbanQuantityCalculation  == kanbanQuantityCalculation.RecId
                        && kanbanQuantityCalculationProposal.Processed                  == NoYes::No
                    join TableId from kanbanRuleFixed
                        where  kanbanRuleFixed.RecId == kanbanQuantityCalculationProposal.KanbanRuleFixed
                    join RuleId from kanbanRule
                        where kanbanRule.RecId == kanbanRuleFixed.ParentRecId;

                if (kanbanQuantityCalculationProposal)
                {
                    if (! errorSet.in(kanbanQuantityCalculationProposal))
                    {
                        setprefix(#PreFixFieldValue(kanbanRule,RuleId,kanbanRule.RuleId));

                        switch (taskClassName)
                        {
                            case classstr(KanbanQtyCalcUpdateCommand):
                                this.doCalculateOptimum(kanbanQuantityCalculationProposal);
                                break;

                            case classstr(KanbanQtyCalcEnableCommand):
                                this.doMaintainKanbanRule(kanbanQuantityCalculationProposal);
                                break;
                        }

                        kanbanQuantityCalculationProposal.Processed = NoYes::Yes;
                        kanbanQuantityCalculationProposal.update();
                    }
                    else
                    {
                        kanbanQuantityCalculationProposal.Processed = NoYes::Yes;
                        kanbanQuantityCalculationProposal.doUpdate();
                    }
                }

                ttscommit;

                this.parmProgress().incCount();
                this.parmProgress().update(true);
            }
            while (kanbanQuantityCalculationProposal);
        }
        catch (Exception::Error)
        {
            if (! errorSet.in(kanbanQuantityCalculationProposal))
            {
                errorSet.add(kanbanQuantityCalculationProposal);

                // infolog is cleared when calling retry but the user needs to know the error message.
                if (infologDataError)
                {
                    infologDataError += [conpeek(infolog.infologData(),#infologMessageElement)];
                }
                else
                {
                    infologDataError = infolog.infologData();
                }
                retry;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        this.parmProgress().kill();

        if (infologDataError)
        {
            infolog.import(infologDataError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean  unpack(container  packedClass)
    {
        Integer  version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanQtyCalcTaskProcessor</c> class.
    /// </summary>
    /// <returns>
    /// A <c>KanbanQtyCalcTaskProcessor</c> object.
    /// </returns>
    private static KanbanQtyCalcTaskProcessor construct()
    {
        return new KanbanQtyCalcTaskProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanQtyCalcTaskProcessor</c> class.
    /// </summary>
    /// <param name="_kanbanQuantityCalculation">
    /// A <c>KanbanQuantityCalculation</c> record that represents the kanban quantity calculation.
    /// </param>
    /// <param name="_taskClassName">
    /// A string value that holds the class name of the class that should be instantiated and executed for each <c>KanbanQuantityCalculationProposal</c> record.
    /// </param>
    /// <returns>
    /// A <c>KanbanQtyCalcTaskProcessor</c> object.
    /// </returns>
    public static KanbanQtyCalcTaskProcessor newStandard(
        KanbanQuantityCalculation   _kanbanQuantityCalculation,
        className                   _taskClassName)
    {
        KanbanQtyCalcTaskProcessor kanbanQtyCalcTaskProcessor = KanbanQtyCalcTaskProcessor::construct();
        kanbanQtyCalcTaskProcessor.parmKanbanQuantityCalculation(_kanbanQuantityCalculation);
        kanbanQtyCalcTaskProcessor.parmTaskClassName(_taskClassName);

        return kanbanQtyCalcTaskProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>