<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueProcessUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventValueProcessUIBuilder</c> class handles the UI events for the inventory value process dialog box.
/// </summary>
public class InventValueProcessUIBuilder extends SysOperationAutomaticUIBuilder
{
    DialogField reportIdField;
    DialogField dateCodeField;
    DialogField fromDateField;
    DialogField toDateField;
    DialogField runInBundle;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the dialog for the inventory value report.
    /// </summary>
    public void build()
    {
        super();

        reportIdField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventValueReportContract, parmReportId));
        dateCodeField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventValueReportContract, parmDateInterval));
        fromDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventValueReportContract, parmFromDate));
        toDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventValueReportContract, parmToDate));
        runInBundle = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventValueProcessContract, parmRunInBundle));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCodeModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the UI modified event for the date code dialog field. The from-date and to-date are set
    ///    according to date code lookup.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the changed dialog field.
    /// </param>
    /// <returns>
    ///    true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean dateCodeModified(FormStringControl _control)
    {
        boolean ret = _control.modified();

        if (ret)
        {
            if (dateCodeField.value() != '')
            {
                LedgerPeriodCode ledgerPeriodCode = LedgerPeriodCode::find(dateCodeField.value());
                fromDateField.value(ledgerPeriodCode.fromDate());
                toDateField.value(ledgerPeriodCode.toDate());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromOrToDateModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the date code dialog field if the from-date or the to-date has been modified.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the changed dialog field.
    /// </param>
    /// <returns>
    ///    true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean fromOrToDateModified(FormDateControl _control)
    {
        boolean ret = _control.modified();

        if (ret)
        {
            dateCodeField.value('');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    public void postBuild()
    {
        super();
        if (reportIdField.value() != '')
        {
            InventValueReport inventValueReport = InventValueReport::findByReportId(reportIdField.value());

            if (inventValueReport.RecId != 0 && inventValueReport.DetailLevel == TotalTrans::Trans && inventValueReport.CalcAvgUnitCost == NoYes::Yes)
            {
                reportIdField.value('');
            }
        }

        runInBundle.visible(InventValueReportStorageBundleFeature::isEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers method override in order to capture dialog events.
    /// </summary>
    public void postRun()
    {
        super();

        dialog.dialogForm().formRun().controlMethodOverload(false);

        reportIdField.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(InventValueReportUIBuilder, reportIdModified), this);
        dateCodeField.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(InventValueReportUIBuilder, dateCodeModified), this);
        fromDateField.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(InventValueReportUIBuilder, fromOrToDateModified), this);
        toDateField.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(InventValueReportUIBuilder, fromOrToDateModified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the UI modified event for the report ID dialog field. The date code is set according to the
    ///    report definition.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the changed dialog field.
    /// </param>
    /// <returns>
    ///    true if the control value has been modified; otherwise, false.
    /// </returns>
    public boolean reportIdModified(FormStringControl _control)
    {
        boolean ret = _control.modified();

        if (ret)
        {
            if (reportIdField.value() != '')
            {
                InventValueReport inventValueReport = InventValueReport::findByReportId(reportIdField.value());

                if (inventValueReport.RecId != 0)
                {
                    if (inventValueReport.DefaultDateInterval != '')
                    {
                        dateCodeField.value(inventValueReport.DefaultDateInterval);
                        this.dateCodeModified(dateCodeField.control());
                    }

                    if (inventValueReport.DetailLevel == TotalTrans::Trans && inventValueReport.CalcAvgUnitCost == NoYes::Yes)
                    {
                        if (!this.forceShowAverageUnitCostOnTransDetailLevel())
                        {
                            infolog.add(Exception::Info, "@SCM:InventValueReportStorageAverageUnitCostInfo");
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceShowAverageUnitCostOnTransDetailLevel</Name>
				<Source><![CDATA[
    public boolean forceShowAverageUnitCostOnTransDetailLevel()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoOnce</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays one-time message boxes with inventory value report hints.
    /// </summary>
    /// <param name="_inventValueReportContract">
    /// The data contract class.
    /// </param>
    public static void infoOnce(InventValueReportContract _inventValueReportContract)
    {
        const str FirstBoxIdentifier = '1';
        const str SecondBoxIdentifier = '2';

        Box::infoOnce("@SYS323601", "@SYS322629", classStr(InventValueReportUIBuilder) + FirstBoxIdentifier);

        InventValueReport inventValueReport = InventValueReport::findByReportId(_inventValueReportContract.parmReportId());
        if ((inventValueReport.ViewLabor || inventValueReport.ViewIndirect) && _inventValueReportContract.parmQuery() != null)
        {
            QueryBuildDataSource queryBuildDataSource = _inventValueReportContract.parmQuery().dataSourceTable(tableNum(InventValueReportTmpLine));
            if (queryBuildDataSource != null
             && queryBuildDataSource.findRange(fieldNum(InventValueReportTmpLine, ResourceId)) != null
             && queryBuildDataSource.findRange(fieldNum(InventValueReportTmpLine, ResourceId)).value() != '')
            {
                Box::infoOnce("@SYS323601", "@SYS322630", classStr(InventValueReportUIBuilder) + SecondBoxIdentifier);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>