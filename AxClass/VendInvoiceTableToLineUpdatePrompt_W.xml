<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceTableToLineUpdatePrompt_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceTableToLineUpdatePrompt_W</c> class handles the dialog form used in the header to line feature for vendor invoices.
/// </summary>
class VendInvoiceTableToLineUpdatePrompt_W extends SalesPurchTableToLineUpdatePrompt
{
    DialogButton    copyTaxGroupToMarkupTrans;
    boolean         wasLineUpdated;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        packedFieldList,
        packedPreviousAnswers,
        sourceTable,
        copyTaxGroupToMarkupTrans
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the field for the given <c>FieldId</c> will be enabled on the parameters form.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> to check for enabling.
    /// </param>
    /// <returns>
    /// true if the field should be enabled; otherwise, false.
    /// </returns>
    public boolean fieldEnabled(FieldId _fieldId)
    {
        // Use the PurchTable class, as we share their parameters table
        return PurchTable2LineParameters::fieldEnabled(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerFieldId_W</Name>
				<Source><![CDATA[
        protected FieldId headerFieldId_W(FieldId _internalFieldId)
    {
        return PurchTable::internalFieldIdToFieldId_W(_internalFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for the header table that is used in the header to line feature.
    /// </summary>
    /// <returns>
    /// The ID for the <c>PurchTable</c> table.
    /// </returns>
    protected TableId headerTableId()
    {
        // Use PurchTable, as we share their parameters table
        return tableNum(PurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerTableId_W</Name>
				<Source><![CDATA[
        protected TableId headerTableId_W(FieldId _internalFieldId)
    {
        return PurchTable::internalFieldIdToTableId_W(_internalFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerToLineFieldIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fields that are supported by the table-to-line functionality of the module.
    /// </summary>
    /// <returns>
    /// A container of fields that are supported by the table-to-line functionality of the module.
    /// </returns>
    public container headerToLineFieldIdList()
    {
        // Use the PurchTable class, as we share their parameters table
        return PurchTable2LineParameters::header2LineFieldIdList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDependentFieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if a field is changed beyond the usual new != orig comparison.
    /// </summary>
    /// <param name="_fieldId">
    /// The field to be checked.
    /// </param>
    /// <returns>
    /// true if the field is considered changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This enables each module to check for changes to dependent fields.
    /// </remarks>
    protected boolean isDependentFieldChanged(FieldId _fieldId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the individual part of a field array has been changed.
    /// </summary>
    /// <param name="_arrayFieldId">
    /// The field to be checked.
    /// </param>
    /// <returns>
    /// true if the field value changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This must be done by each module on the concrete table. The field comparison will not work directly
    /// on the sourceTable, as xRecord.orig().(fieldId) does not compile.
    /// </remarks>
    protected boolean isFieldChanged(FieldId _arrayFieldId)
    {
        FieldId invoiceFieldId = VendInvoiceTableToLineUpdate_W::convertPurchTableFieldToVendInvoice(fieldExt2Id(_arrayFieldId));
        VendInvoiceInfoTable vendInvoiceInfoTable = sourceTable as VendInvoiceInfoTable;
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W = vendInvoiceInfoTable.vendInvoiceInfoTable_W();

        if (invoiceFieldId == 0)
        {
            // Field does not exist on an invoice
            return false;
        }

        return vendInvoiceInfoTable_W.(invoiceFieldId) != vendInvoiceInfoTable_W.orig().(invoiceFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lines2Update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are invoice lines to update.
    /// </summary>
    /// <returns>
    /// True if there are invoice lines to update; otherwise, false.
    /// </returns>
    protected boolean lines2Update()
    {
        VendInvoiceInfoTable    vendInvoiceInfoTable = sourceTable as VendInvoiceInfoTable;

        return vendInvoiceInfoTable.existLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFieldObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PurchTable2LineField</c> class based on a field ID.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID to create the <c>PurchTable2LineField</c> class from.
    /// </param>
    /// <returns>
    /// A <c>PurchTable2LineField</c> class.
    /// </returns>
    protected SalesPurchTableToLineField newFieldObject(FieldId _fieldId)
    {
        // Use the PurchTable class, as we share their parameters table
        return PurchTable2LineField::construct(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        packedFieldList          = updateFields.pack();
        this.packPreviousAnswers();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        VendInvoiceTableToLineUpdate_W   vendInvoiceTableToLineUpdate_W;

        if (!this.fieldsToUpdate())
        {
            wasLineUpdated = false;
            return;
        }

        vendInvoiceTableToLineUpdate_W = VendInvoiceTableToLineUpdate_W::construct(this);
        vendInvoiceTableToLineUpdate_W.update();
        wasLineUpdated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        if (ret)
        {
            //When moving data from server to client, we need to copy all updateFields list,
            //because dialog() is using it. Otherwise, it is better to move only checkbox results in order not
            //to overwrite changed settings in updateFields
            if (!updateFields)
            {
                updateFields = List::create(packedFieldList);
            }
            else
            {
                this.unpackPreviousAnswers();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasLineUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the invoice line was updated.
    /// </summary>
    /// <returns>
    /// True if line was updated; otherwise, false
    /// </returns>
    public boolean wasLineUpdated()
    {
        return wasLineUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static VendInvoiceTableToLineUpdatePrompt_W construct()
    {
        return new VendInvoiceTableToLineUpdatePrompt_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public static ClassDescription description()
    {
        return "@SYS62838";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and initiates a new instance of the <c>VendInvoiceTable_WToLine_WUpdatePrompt</c> class.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// A buffer of the <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <returns>
    ///  An instance of the <c>VendInvoiceTable_WToLine_WUpdatePrompt</c> class.
    /// </returns>
    public static VendInvoiceTableToLineUpdatePrompt_W newFromVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceTableToLineUpdatePrompt_W vendInvoiceTableToLineUpdatePrompt_W = VendInvoiceTableToLineUpdatePrompt_W::construct();

        //Call getLast to prevent it from being called during prompt, thus rewriting the field list with saved values
        vendInvoiceTableToLineUpdatePrompt_W.getLast();

        //Get previous answers from saved field list and store them
        vendInvoiceTableToLineUpdatePrompt_W.packPreviousAnswers();

        vendInvoiceTableToLineUpdatePrompt_W.parmSourceTable(_vendInvoiceInfoTable);

        return vendInvoiceTableToLineUpdatePrompt_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>