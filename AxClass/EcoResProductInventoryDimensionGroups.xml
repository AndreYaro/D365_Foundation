<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductInventoryDimensionGroups</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EcoResProductInventoryDimensionGroups
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesCWItemExistForTrackingDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates if there are Catch Weight enabled items for the specified Tracking Dimension Group.
    /// </summary>
    /// <param name="_trackingDimensionGroupId">
    ///    A <c>RecId</c> field of the <c>EcoResTrackingDimensionGroup</c> record to search for CW items.
    /// </param>
    /// <returns>
    ///    true if the Tracking Dimension Group has CW items associated with it, otherwise false.
    /// </returns>
    static public boolean doesCWItemExistForTrackingDimensionGroup(
        EcoResTrackingDimensionGroupRecId          _trackingDimensionGroupId)
    {
        EcoResTrackingDimensionGroupProduct     ecoResTrackingDimensionGroupProduct;
        EcoResTrackingDimensionGroupItem        ecoResTrackingDimensionGroupItem;
        InventTable                             inventTable;
        EcoResProduct                           ecoResProduct;
        boolean                                 cwItemExists = false;

        if (#PdsCatchWeightEnabled)
        {
            select firstOnly crossCompany RecId from ecoResTrackingDimensionGroupProduct
                exists join ecoResProduct
                    where ecoResTrackingDimensionGroupProduct.TrackingDimensionGroup == _trackingDimensionGroupId
                       && ecoResProduct.RecId                                        == ecoResTrackingDimensionGroupProduct.Product
                       && ecoResProduct.PdsCWProduct                                 == NoYes::Yes;

            if (ecoResTrackingDimensionGroupProduct.RecId != 0)
            {
                cwItemExists = true;
            }

            if (!cwItemExists)
            {
                select firstOnly crossCompany RecId from ecoResTrackingDimensionGroupItem
                    exists join inventTable
                        where inventTable.ItemId     == ecoResTrackingDimensionGroupItem.ItemId
                           && inventTable.dataAreaId == ecoResTrackingDimensionGroupItem.ItemDataAreaId
                    exists join ecoResProduct
                        where ecoResProduct.RecId                                     == inventTable.Product
                           && ecoResProduct.PdsCWProduct                              == NoYes::Yes
                           && ecoResTrackingDimensionGroupItem.TrackingDimensionGroup == _trackingDimensionGroupId;

                if (ecoResTrackingDimensionGroupItem.RecId != 0)
                {
                    cwItemExists = true;
                }
            }
        }

        return cwItemExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductValidForTrackingDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates if a product is valid for the specified Tracking Dimension Group
    /// </summary>
    /// <param name="_ecoResProductRecId">
    ///   A <c>RecId</c> field of the <c>EcoResProduct</c> record to validate
    /// </param>
    /// <param name="_newEcoResTrackingDimensionGroupRecId">
    ///    A <c>RecId</c> field of the <c>EcoResTrackingDimensionGroup</c> record to validate.
    /// </param>
    /// <param name="_origEcoResTrackingDimensionGroupRecId">
    ///    An optional <c>RecId</c> field of the <c>EcoResTrackingDimensionGroup</c>, representing the original Tracking Dimension Group.
    /// </param>
    /// <returns>
    ///    true if the Tracking Dimension Group can be associatd with the Product, otherwise false.
    /// </returns>
    static public boolean isProductValidForTrackingDimensionGroup(
        EcoResProductRecId                  _ecoResProductRecId,
        EcoResTrackingDimensionGroupRecId   _newEcoResTrackingDimensionGroupRecId,
        EcoResTrackingDimensionGroupRecId   _origEcoResTrackingDimensionGroupRecId)
    {
        InventTable                         inventTable;
        EcoResTrackingDimensionGroupItem    ecoResTrackingDimensionGroupItem;
        boolean                             validProductForTrackingDimensionGroup = true;

        // Test if any items for this product are using some other group
        select firstonly crosscompany RecId from inventTable
            where inventTable.Product == _ecoResProductRecId
            exists join ecoResTrackingDimensionGroupItem
                where ecoResTrackingDimensionGroupItem.ItemDataAreaId           == inventTable.DataAreaId
                    && ecoResTrackingDimensionGroupItem.ItemId                   == inventTable.ItemId
                    && ecoResTrackingDimensionGroupItem.TrackingDimensionGroup   != _newEcoResTrackingDimensionGroupRecId;

        if (inventTable.RecId)
        {
            validProductForTrackingDimensionGroup = checkFailed("@SYS312266"); // The specified tracking dimension group cannot be assigned because at least one item that is assigned to this product is using another tracking dimension group.

            if (_origEcoResTrackingDimensionGroupRecId != 0)
            {
                checkFailed("@SYS339284");
            }
            else
            {
                checkFailed("@SYS339286");
            }
        }

        validProductForTrackingDimensionGroup = validProductForTrackingDimensionGroup
            && EcoResProductInventoryDimensionGroups::isReleasedProductValidForTrackDimGroup(_ecoResProductRecId, _newEcoResTrackingDimensionGroupRecId);

        return validProductForTrackingDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReleasedProductValidForTrackDimGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates if a released product is valid for the specified Tracking Dimension Group
    /// </summary>
    /// <param name="_ecoResProductRecId">
    ///   A <c>RecId</c> field of the <c>EcoResProduct</c> record to validate
    /// </param>
    /// <param name="_newEcoResTrackingDimensionGroupRecId">
    ///    A <c>RecId</c> field of the <c>EcoResTrackingDimensionGroup</c> record to validate.
    /// </param>
    /// <returns>
    ///    true if the Tracking Dimension Group can be associatd with the released product, otherwise false.
    /// </returns>
    static public boolean isReleasedProductValidForTrackDimGroup(
        EcoResProductRecId                  _ecoResProductRecId,
        EcoResTrackingDimensionGroupRecId   _newEcoResTrackingDimensionGroupRecId)
    {
        boolean                             validProductForTrackingDimensionGroup = true;

        if (#PdsCatchWeightEnabled)
        {
            EcoResProduct ecoResProduct = EcoResProduct::find(_ecoResProductRecId);

            if (ecoResProduct.PdsCWProduct)
            {
                EcoResTrackingDimensionGroup ecoResTrackingDimensionGroup = EcoResTrackingDimensionGroup::find(_newEcoResTrackingDimensionGroupRecId);
                validProductForTrackingDimensionGroup = ecoResTrackingDimensionGroup.isValidForCWProduct();
            }
        }

        return validProductForTrackingDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStorageGroupForItems</Name>
				<Source><![CDATA[
    static public void setStorageGroupForItems(
        EcoResProductRecId                  _product,
        EcoResStorageDimensionGroupRecId    _ecoResStorageDimensionGroupRecIdNew)
    {
        EcoResStorageDimensionGroupItem     ecoResStorageDimensionGroupItem;
        EcoResStorageDimensionGroupItem     ecoResStorageDimensionGroupItemExisting;
        InventTable                         inventTable;

        ttsbegin;
        // Insert for those items not configured yet (No need to update existing as it can only be specifed for the product if all items have the same group)

        RecordInsertList rilEcoResStorageDimensionGroupItem = new RecordInsertList(tableNum(EcoResStorageDimensionGroupItem), false, true, true);

        while select crosscompany ItemId, DataAreaId from inventTable
            where inventTable.Product == _product
        notexists join ecoResStorageDimensionGroupItemExisting
            where ecoResStorageDimensionGroupItemExisting.ItemId         == inventTable.ItemId
               && ecoResStorageDimensionGroupItemExisting.ItemDataAreaId == inventTable.DataAreaId
        {
            ecoResStorageDimensionGroupItem.clear();
            ecoResStorageDimensionGroupItem.ItemId = inventTable.ItemId;
            ecoResStorageDimensionGroupItem.ItemDataAreaId = inventTable.DataAreaId;
            ecoResStorageDimensionGroupItem.StorageDimensionGroup = _ecoResStorageDimensionGroupRecIdNew;
            rilEcoResStorageDimensionGroupItem.add(ecoResStorageDimensionGroupItem);
        }

        rilEcoResStorageDimensionGroupItem.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTrackingGroupForItems</Name>
				<Source><![CDATA[
    static public void setTrackingGroupForItems(
        EcoResProductRecId                  _product,
        EcoResTrackingDimensionGroupRecId   _ecoResTrackingDimensionGroupRecIdNew)
    {
        EcoResTrackingDimensionGroupItem    ecoResTrackingDimensionGroupItem;
        EcoResTrackingDimensionGroupItem    ecoResTrackingDimensionGroupItemExisting;
        InventTable                         inventTable;

        ttsbegin;
        // <GEERU>
        if (_ecoResTrackingDimensionGroupRecIdNew &&
            ! EcoResTrackingDimGroupSetup::checkProductRUDimForNotRuContextCompany(_product, _ecoResTrackingDimensionGroupRecIdNew))
        {
            throw error("@GLS222391");
        }
        // </GEERU>

        // Insert for those items not configured yet (No need to update existing as it can only be specifed for the product if all items have the same group)

        RecordInsertList rilEcoResTrackingDimensionGroupItem = new RecordInsertList(tableNum(EcoResTrackingDimensionGroupItem), false, true, true);

        while select crosscompany ItemId, DataAreaId from inventTable
            where inventTable.Product == _product
        notexists join ecoResTrackingDimensionGroupItemExisting
            where ecoResTrackingDimensionGroupItemExisting.ItemId         == inventTable.ItemId
               && ecoResTrackingDimensionGroupItemExisting.ItemDataAreaId == inventTable.DataAreaId
        {
            ecoResTrackingDimensionGroupItem.clear();
            ecoResTrackingDimensionGroupItem.ItemId = inventTable.ItemId;
            ecoResTrackingDimensionGroupItem.ItemDataAreaId = inventTable.DataAreaId;
            ecoResTrackingDimensionGroupItem.TrackingDimensionGroup = _ecoResTrackingDimensionGroupRecIdNew;
            rilEcoResTrackingDimensionGroupItem.add(ecoResTrackingDimensionGroupItem);
        }

        rilEcoResTrackingDimensionGroupItem.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionGroupsForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns product, storage, and tracking dimension groups to a product.
    /// </summary>
    /// <param name="_product">
    ///    The product for which dimension groups are assigned.
    /// </param>
    /// <param name="_ecoResProductDimensionGroupRecIdNew">
    ///    The product dimension group that is assigned to the product.
    /// </param>
    /// <param name="_ecoResStorageDimensionGroupRecIdNew">
    ///    The storage dimension group that is assigned to the product.
    /// </param>
    /// <param name="_ecoResTrackingDimensionGroupRecIdNew">
    ///    The tracking dimension group that is assigned to the product.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    A validation to see whether the groups can be assigned has failed.
    /// </exception>
    public static void updateDimensionGroupsForProduct(
        EcoResProductRecId                  _product,
        EcoResProductDimensionGroupRecId    _ecoResProductDimensionGroupRecIdNew,
        EcoResStorageDimensionGroupRecId    _ecoResStorageDimensionGroupRecIdNew,
        EcoResTrackingDimensionGroupRecId   _ecoResTrackingDimensionGroupRecIdNew)
    {
        if (!EcoResProductInventoryDimensionGroups::validateNewDimensionGroupsForProduct(
                _product, _ecoResProductDimensionGroupRecIdNew, _ecoResStorageDimensionGroupRecIdNew, _ecoResTrackingDimensionGroupRecIdNew))
        {
            throw error("@SYS18447");
        }

        ttsbegin;
        EcoResProductDimensionGroupProduct ecoResProductDimensionGroupProduct = EcoResProductDimensionGroupProduct::findByProduct(_product, true);
        if (_ecoResProductDimensionGroupRecIdNew != ecoResProductDimensionGroupProduct.ProductDimensionGroup)
        {
            if (_ecoResProductDimensionGroupRecIdNew)
            {
                if (!ecoResProductDimensionGroupProduct)
                {
                    ecoResProductDimensionGroupProduct.Product = _product;
                }
                ecoResProductDimensionGroupProduct.ProductDimensionGroup = _ecoResProductDimensionGroupRecIdNew;
                ecoResProductDimensionGroupProduct.write();
            }
            else
            {
                // delete if no value
                ecoResProductDimensionGroupProduct.delete();
            }
        }

        EcoResStorageDimensionGroupProduct ecoResStorageDimensionGroupProduct = EcoResStorageDimensionGroupProduct::findByProduct(_product, true);
        if (_ecoResStorageDimensionGroupRecIdNew != ecoResStorageDimensionGroupProduct.StorageDimensionGroup)
        {
            if (_ecoResStorageDimensionGroupRecIdNew)
            {
                if (!ecoResStorageDimensionGroupProduct)
                {
                    ecoResStorageDimensionGroupProduct.Product = _product;
                }
                ecoResStorageDimensionGroupProduct.StorageDimensionGroup = _ecoResStorageDimensionGroupRecIdNew;
                ecoResStorageDimensionGroupProduct.write();

                EcoResProductInventoryDimensionGroups::setStorageGroupForItems(_product, _ecoResStorageDimensionGroupRecIdNew);
            }
            else
            {
                // delete if no value
                ecoResStorageDimensionGroupProduct.delete();
            }
        }

        EcoResTrackingDimensionGroupProduct ecoResTrackingDimensionGroupProduct = EcoResTrackingDimensionGroupProduct::findByProduct(_product, true);
        if (_ecoResTrackingDimensionGroupRecIdNew != ecoResTrackingDimensionGroupProduct.TrackingDimensionGroup)
        {
            if (_ecoResTrackingDimensionGroupRecIdNew)
            {
                if (!ecoResTrackingDimensionGroupProduct)
                {
                    ecoResTrackingDimensionGroupProduct.Product = _product;
                }
                ecoResTrackingDimensionGroupProduct.TrackingDimensionGroup = _ecoResTrackingDimensionGroupRecIdNew;
                ecoResTrackingDimensionGroupProduct.write();

                EcoResProductInventoryDimensionGroups::setTrackingGroupForItems(_product, _ecoResTrackingDimensionGroupRecIdNew);
            }
            else
            {
                // delete if no value
                ecoResTrackingDimensionGroupProduct.delete();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewDimensionGroupsForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the specified dimension groups can be assigned to the specified product.
    /// </summary>
    /// <param name="_product">
    ///    The product for which dimension groups are assigned.
    /// </param>
    /// <param name="_ecoResProductDimensionGroupRecIdNew">
    ///    The product dimension group that is assigned to the product.
    /// </param>
    /// <param name="_ecoResStorageDimensionGroupRecIdNew">
    ///    The storage dimension group that is assigned to the product.
    /// </param>
    /// <param name="_ecoResTrackingDimensionGroupRecIdNew">
    ///    The tracking dimension group that is assigned to the product.
    /// </param>
    /// <returns>
    ///    true if validation succeeded; otherwise, false.
    /// </returns>
    public static boolean validateNewDimensionGroupsForProduct(
        EcoResProductRecId                  _product,
        EcoResProductDimensionGroupRecId    _ecoResProductDimensionGroupRecIdNew,
        EcoResStorageDimensionGroupRecId    _ecoResStorageDimensionGroupRecIdNew,
        EcoResTrackingDimensionGroupRecId   _ecoResTrackingDimensionGroupRecIdNew)
    {
        boolean                                 result = true;

        if (!_product)
        {
            return checkFailed(strFmt("@SYS50104", fieldPName(EcoResStorageDimensionGroupProduct, Product)));
        }

        EcoResProductDimensionGroupProduct ecoResProductDimensionGroupProduct = EcoResProductDimensionGroupProduct::findByProduct(_product);
        if (_ecoResProductDimensionGroupRecIdNew != ecoResProductDimensionGroupProduct.ProductDimensionGroup)
        {
            if (_ecoResProductDimensionGroupRecIdNew)
            {
                if (!ecoResProductDimensionGroupProduct)
                {
                    ecoResProductDimensionGroupProduct.Product = _product;
                }
                ecoResProductDimensionGroupProduct.ProductDimensionGroup = _ecoResProductDimensionGroupRecIdNew;
                result = ecoResProductDimensionGroupProduct.validateWrite() && result;
            }
            else
            {
                // delete if no value
                result = ecoResProductDimensionGroupProduct.validateDelete() && result;
            }
        }

        EcoResStorageDimensionGroupProduct ecoResStorageDimensionGroupProduct = EcoResStorageDimensionGroupProduct::findByProduct(_product);
        if (_ecoResStorageDimensionGroupRecIdNew != ecoResStorageDimensionGroupProduct.StorageDimensionGroup)
        {
            if (_ecoResStorageDimensionGroupRecIdNew)
            {
                if (!ecoResStorageDimensionGroupProduct)
                {
                    ecoResStorageDimensionGroupProduct.Product = _product;
                }
                ecoResStorageDimensionGroupProduct.StorageDimensionGroup = _ecoResStorageDimensionGroupRecIdNew;
                result = ecoResStorageDimensionGroupProduct.validateWrite() && result;
            }
            else
            {
                // delete if no value
                result = ecoResStorageDimensionGroupProduct.validateDelete() && result;
            }
        }

        EcoResTrackingDimensionGroupProduct ecoResTrackingDimensionGroupProduct = EcoResTrackingDimensionGroupProduct::findByProduct(_product);
        if (_ecoResTrackingDimensionGroupRecIdNew != ecoResTrackingDimensionGroupProduct.TrackingDimensionGroup)
        {
            if (_ecoResTrackingDimensionGroupRecIdNew)
            {
                if (!ecoResTrackingDimensionGroupProduct)
                {
                    ecoResTrackingDimensionGroupProduct.Product = _product;
                }
                ecoResTrackingDimensionGroupProduct.TrackingDimensionGroup = _ecoResTrackingDimensionGroupRecIdNew;
                result = ecoResTrackingDimensionGroupProduct.validateWrite() && result;

                // If WHS Enabled, validate InventBatch tracking dimension setup and physical inventory configs
                result = result && WHSInvent::checkBatchBlankIssueReceipt(_ecoResStorageDimensionGroupRecIdNew, _ecoResTrackingDimensionGroupRecIdNew);
                result = result && WHSInvent::checkNonPhysicalDims(_ecoResStorageDimensionGroupRecIdNew, _ecoResTrackingDimensionGroupRecIdNew);
            }
            else
            {
                // delete if no value
                result = ecoResTrackingDimensionGroupProduct.validateDelete() && result;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCaptureSerialInOutboundProcess</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean mustCaptureSerialInOutboundProcess(EcoResTrackingDimensionGroup _trackingDimGroup)
    {
        return _trackingDimGroup.CaptureSerial == WHSWhenToCapture::Packing || _trackingDimGroup.CaptureSerial == WHSWhenToCapture::Picking;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>