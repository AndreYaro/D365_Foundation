<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_StdDeferralsFactor</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class RTax25RegCalc_StdDeferralsFactor extends RTax25RegCalc_StdDeferrals implements BatchRetryable
{
    RDeferralsFactorCalculation factorCalculation;

    private const Version currentVersion_StdDeferralsFactor = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>channel</Name>
				<Source><![CDATA[
    public RTax25StdChannel channel()
    {
        return RTax25StdChannel_DeferralFactor::newParameters(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunBase dialog = super();

        dialogFromDate.allowEdit(false);
        dialogToDate.allowEdit(false);
        dialogPreview.visible(false);
        dialogUseDocuments.visible(false);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        if (factorCalculation)
        {
            this.dateFrom(factorCalculation.StartDate);
            this.dateTo(factorCalculation.EndDate);

            return true;
        }

        return super(_registerJournalTrans, _batch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion_StdDeferralsFactor, overWrite, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactorCalculation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RDeferralsFactorCalculation parmFactorCalculation(RDeferralsFactorCalculation _factorCalculation = factorCalculation)
    {
        factorCalculation = _factorCalculation;
        return factorCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSequences</Name>
				<Source><![CDATA[
    protected void runSequences()
    {
        TransDate   startDate = dateFrom;
        TransDate   endDate   = dateTo;

        while (startDate < endDate)
        {
            queryRun.reset();
            this.dateFrom(startDate);
            this.dateTo(endmth(startDate));
            super();
            startDate = endmth(startDate) + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = conpeek(packedClass,1);
        container   packedQuery = conpeek(packedClass, conlen(packedClass));

        switch (version)
        {
            case currentVersion_StdDeferralsFactor:
                [version, overWrite] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun  = new SysQueryRun(packedQuery) ;
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS107175";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>