<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtReportFormatPopulatorAppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Populates the <c>PrintMgmtReportFormat</c> table used for print management with the App suite documents.
/// </summary>
[ExtensionOf(classStr(PrintMgmtReportFormatPopulator))]
public final class PrintMgmtReportFormatPopulatorAppSuite_Extension
{
    #ISOCountryRegionCodes
    #PrintMgmtSetup
    #RusReportFormats

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDocuments</Name>
				<Source><![CDATA[
    protected void addDocuments()
    {
        // Purchasing documents
        this.addPurchaseDocuments();

        // Sales documents
        this.addSalesDocuments();

        // Inventory documents
        this.addInventoryDocuments();
        
        // Project documents
        this.addProjectDocuments();
        
        // Add the WHS reports.
        this.addWarehouseDocuments();
        
        // Add the TMS reports.
        this.addTransportationDocuments();
        
        this.addLocalizationDocuments();

        next addDocuments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPurchaseDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds purchase records to the <c>PrintMgmtReportFormat</c> table.
    /// </summary>
    protected void addPurchaseDocuments()
    {
        this.addStandard(PrintMgmtDocumentType::PurchAgreementConfirmation);

        switch (isoCountryCode)
        {
            case #isoLT, #isoLV, #isoCZ, #isoHU:
                this.addStandard(PrintMgmtDocumentType::PurchaseOrderInvoice, countryRegionId);
                break;
            case #isoRU:
                this.addNonSSRS(PrintMgmtDocumentType::PurchaseOrderInvoice, #Torg12M15, #Torg12M15, countryRegionId, true);
                this.addOther(PrintMgmtDocumentType::PurchaseOrderInvoice, ssrsReportStr(VendInvoiceDocument, Report), ssrsReportStr(VendInvoiceDocument, Report), #NoCountryRegionId);
                break;
            case #isoMY:
                this.addStandard(PrintMgmtDocumentType::PurchaseOrderInvoice, countryRegionId);
                this.addOther(PrintMgmtDocumentType::PurchaseOrderInvoice, ssrsReportStr(VendInvoiceDocument, Report), ssrsReportStr(SalesInvoice, Report), #NoCountryRegionId);
                break;

            case #isoJP:
                this.addStandard(PrintMgmtDocumentType::PurchaseOrderInvoice);
                this.addOther(PrintMgmtDocumentType::PurchaseOrderInvoice, ssrsReportStr(VendInvoiceDocument, Report_JP), ssrsReportStr(VendInvoiceDocument, Report_JP), countryRegionId);
                break;

            default:
                this.addStandard(PrintMgmtDocumentType::PurchaseOrderInvoice);
        }

        if (isoCountryCode == #isoCZ)
        {
            this.addStandard(PrintMgmtDocumentType::PurchaseOrderPackingSlip, countryRegionId);
        }

        else if (isoCountryCode == #isoRU)
        {
            this.addNonSSRS(PrintMgmtDocumentType::PurchaseOrderPackingSlip, #ProductReceipt, #ProductReceipt, countryRegionId, true);
            this.addOther(PrintMgmtDocumentType::PurchaseOrderPackingSlip, ssrsReportStr(PurchPackingSlip, Report), ssrsReportStr(PurchPackingSlip, Report), #NoCountryRegionId);
        }
        else
        {
            this.addStandard(PrintMgmtDocumentType::PurchaseOrderPackingSlip);
        }

        if (isoCountryCode == #isoCZ)
        {
            this.addStandard(PrintMgmtDocumentType::PurchaseOrderReceiptsList, countryRegionId);
        }
        else
        {
            this.addStandard(PrintMgmtDocumentType::PurchaseOrderReceiptsList);
        }

        switch (isoCountryCode)
        {
            case #isoCZ, #isoHU:
                this.addStandard(PrintMgmtDocumentType::PurchaseOrderRequisition, countryRegionId);
                break;

            default:
                this.addStandard(PrintMgmtDocumentType::PurchaseOrderRequisition);
        }

        this.addStandard(PrintMgmtDocumentType::PurchRFQ);
        this.addStandard(PrintMgmtDocumentType::PurchRFQAccept);
        this.addStandard(PrintMgmtDocumentType::PurchRFQReject);
        this.addStandard(PrintMgmtDocumentType::PurchRFQReturn);
        this.addStandard(PrintMgmtDocumentType::PurchaseOrderConfirmationRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds sales records to the <c>PrintMgmtReportFormat</c> table.
    /// </summary>
    protected void addSalesDocuments()
    {
        this.addStandard(PrintMgmtDocumentType::Confirmation);
        this.addStandard(PrintMgmtDocumentType::CustCollectionLetter);
        this.addStandard(PrintMgmtDocumentType::CustInterestNote);

        switch (isoCountryCode)
        {
            case #isoFR:
                this.addStandard(PrintMgmtDocumentType::CustAccountStatement);
                this.addStandard(PrintMgmtDocumentType::CustAccountStatement_FR);

            default:
                this.addStandard(PrintMgmtDocumentType::CustAccountStatement);

                this.addOther(PrintMgmtDocumentType::CustAccountStatement, ssrsReportStr(CustAccountStatementExt, ReportScheduleLines), ssrsReportStr(CustAccountStatementExt, ReportScheduleLines), #NoCountryRegionId);
        }

        switch (isoCountryCode)
        {
            case #isoCZ, #isoHU:
                this.addStandard(PrintMgmtDocumentType::Quotation, countryRegionId);
                break;

            default:
                this.addStandard(PrintMgmtDocumentType::Quotation);
        }

        this.addStandard(PrintMgmtDocumentType::SalesAgreementConfirmation);

        switch (isoCountryCode)
        {
            case #isoRU:
                this.addNonSSRS(PrintMgmtDocumentType::SalesFreeTextInvoice, #Torg12M15, #Torg12M15, countryRegionId, true);
                this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FreeTextInvoice, Report), ssrsReportStr(FreeTextInvoice, Report), #NoCountryRegionId);
                break;

            case #isoEE, #isoLT, #isoHU, #isoLV, #isoCZ, #isoPL:
                this.addStandard(PrintMgmtDocumentType::SalesFreeTextInvoice, countryRegionId);
                break;

            case #isoTH:
                this.addStandard(PrintMgmtDocumentType::SalesFreeTextInvoice, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FreeTextInvoice, ReportTH), ssrsReportStr(FreeTextInvoice, ReportTH), #NoCountryRegionId);
                break;

            case #isoIN:
                this.addStandard(PrintMgmtDocumentType::SalesFreeTextInvoice, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FreeTextInvoice, ReportIN), ssrsReportStr(FreeTextInvoice, ReportIN), #NoCountryRegionId);
                break;

            case #isoMY:
                this.addStandard(PrintMgmtDocumentType::SalesFreeTextInvoice, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FreeTextInvoice, ReportFull_MY), ssrsReportStr(FreeTextInvoice, ReportFull_MY), countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FreeTextInvoice, ReportSimplified_MY), ssrsReportStr(FreeTextInvoice, ReportSimplified_MY), countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FreeTextInvoice, Report), ssrsReportStr(FreeTextInvoice, Report), #NoCountryRegionId);
                break;

            case #isoJP:
                this.addStandard(PrintMgmtDocumentType::SalesFreeTextInvoice);
                this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FreeTextInvoice, Report_JP), ssrsReportStr(FreeTextInvoice, Report_JP), countryRegionId);
                break;

            case #isoFR:
                this.addStandard(PrintMgmtDocumentType::SalesFreeTextInvoice, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FreeTextInvoice, Report), ssrsReportStr(FreeTextInvoice, Report), #NoCountryRegionId);
                break;

            case #isoAE:
                this.addStandard(PrintMgmtDocumentType::SalesFreeTextInvoice, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FreeTextInvoice, Report_AE), ssrsReportStr(FreeTextInvoice, Report_AE), countryRegionId);
                break;

            case #isoIT:
                this.addStandard(PrintMgmtDocumentType::SalesFreeTextInvoice, countryRegionId);

                if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
                {
                    this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FreeTextInvoice, Report_IT), ssrsReportStr(FreeTextInvoice, Report_IT), countryRegionId);
                }
                break;

            case #isoSA:
                this.addStandard(PrintMgmtDocumentType::SalesFreeTextInvoice);

                if (FeatureStateProvider::isFeatureEnabled(SimplifiedInvoiceSAFeature::instance()) 
                    || FeatureStateProvider::isFeatureEnabled(IntegrationTaxAuthoritiesSAFeature::instance()))
                {
                    this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FreeTextInvoice, Report_SA), ssrsReportStr(FreeTextInvoice, Report_SA), countryRegionId);
                }

                break;

            default:
                this.addStandard(PrintMgmtDocumentType::SalesFreeTextInvoice);
        }

        if (MarkupPeriodChargeFeature::instance().isEnabled())
        {
            this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(MarkupPeriodChargeFreeTextInvoice, Report), ssrsReportStr(MarkupPeriodChargeFreeTextInvoice, Report), #NoCountryRegionId);
        }

        switch (isoCountryCode)
        {
            case #isoCZ, #isoHU:
                this.addStandard(PrintMgmtDocumentType::SalesOrderConfirmation, countryRegionId);
                break;

            default:
                this.addStandard(PrintMgmtDocumentType::SalesOrderConfirmation);
        }

        switch (isoCountryCode)
        {
            case #isoEE, #isoLT, #isoHU, #isoLV, #isoCZ, #isoPL:
                this.addStandard(PrintMgmtDocumentType::SalesOrderInvoice, countryRegionId);
                break;

            case #isoRU:
                this.addNonSSRS(PrintMgmtDocumentType::SalesOrderInvoice, #Torg12M15, #Torg12M15, countryRegionId, true);
                this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice, Report), ssrsReportStr(SalesInvoice, Report), #NoCountryRegionId);
                break;

            case #isoTH:
                this.addStandard(PrintMgmtDocumentType::SalesOrderInvoice, countryRegionId);
                this.addStandard(PrintMgmtDocumentType::CustDebitCreditNote, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice, Report), ssrsReportStr(SalesInvoice, Report), #NoCountryRegionId);
                break;

            case #isoMY:
                this.addStandard(PrintMgmtDocumentType::SalesOrderInvoice, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice, ReportFull_MY), ssrsReportStr(SalesInvoice, ReportFull_MY), countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice, ReportSimplified_MY), ssrsReportStr(SalesInvoice, ReportSimplified_MY), countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice, Report), ssrsReportStr(SalesInvoice, Report), #NoCountryRegionId);
                break;

            case #isoFR:
                this.addStandard(PrintMgmtDocumentType::SalesOrderInvoice, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice, Report), ssrsReportStr(SalesInvoice, Report), #NoCountryRegionId);
                break;

            // <GIN>
            case #isoIN:
                this.addStandard(PrintMgmtDocumentType::SalesOrderInvoice, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice_IN, Report), ssrsReportStr(SalesInvoice_IN, Report), countryRegionId);
                break;
            // </GIN>

            case #isoJP:
                this.addStandard(PrintMgmtDocumentType::SalesOrderInvoice);
                this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice, Report_JP), ssrsReportStr(SalesInvoice, Report_JP), countryRegionId);
                break;

            case #isoAE:
                this.addStandard(PrintMgmtDocumentType::SalesOrderInvoice, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice, Report_AE), ssrsReportStr(SalesInvoice, Report_AE), countryRegionId);
                break;

            case #isoIT:
                this.addStandard(PrintMgmtDocumentType::SalesOrderInvoice);
                if (FeatureStateProvider::isFeatureEnabled(InvoicingPerPackingSlipFeature::instance()))
                {
                    this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice, Report_IT), ssrsReportStr(SalesInvoice, Report_IT), countryRegionId);
                }
                break;

            case #isoSA:
                this.addStandard(PrintMgmtDocumentType::SalesOrderInvoice);

                if (FeatureStateProvider::isFeatureEnabled(SimplifiedInvoiceSAFeature::instance()) 
                    || FeatureStateProvider::isFeatureEnabled(IntegrationTaxAuthoritiesSAFeature::instance()))
                {
                    this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice, Report_SA), ssrsReportStr(SalesInvoice, Report_SA), countryRegionId);
                }
                break;

            default:
                this.addStandard(PrintMgmtDocumentType::SalesOrderInvoice);
        }

        switch (isoCountryCode)
        {
            case #isoCZ:
                this.addStandard(PrintMgmtDocumentType::SalesOrderPackingSlip, countryRegionId);
                break;

            case #isoLT:
                this.addStandard(PrintMgmtDocumentType::SalesOrderPackingSlip, countryRegionId);
                break;

            case #isoTH:
                this.addStandard(PrintMgmtDocumentType::SalesOrderPackingSlip, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SalesOrderPackingSlip, ssrsReportStr(SalesPackingSlip, Report), ssrsReportStr(SalesPackingSlip, Report), #NoCountryRegionId);
                break;

            default:
                this.addStandard(PrintMgmtDocumentType::SalesOrderPackingSlip);
        }

        switch (isoCountryCode)
        {
            case #isoCZ, #isoHU, #isoPL:
                this.addStandard(PrintMgmtDocumentType::SalesAdvanceInvoice, countryRegionId);
                this.addStandard(PrintMgmtDocumentType::PurchaseAdvanceInvoice, countryRegionId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventoryDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds inventory records to the <c>PrintMgmtReportFormat</c> table.
    /// </summary>
    protected void addInventoryDocuments()
    {
        if (isoCountryCode == #isoCZ)
        {
            this.addStandard(PrintMgmtDocumentType::InventPickList, countryRegionId);
        }
        else
        {
            this.addStandard(PrintMgmtDocumentType::InventPickList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjectDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds project records to the <c>PrintMgmtReportFormat</c> table.
    /// </summary>
    protected void addProjectDocuments()
    {
        switch (isoCountryCode)
        {
            case #isoLT, #isoHU, #isoCZ, #isoPL:
                this.addStandard(PrintMgmtDocumentType::ProjectInvoice, countryRegionId);
                break;

            default:
                this.addStandard(PrintMgmtDocumentType::ProjectInvoice);
        }

        switch (isoCountryCode)
        {
            case #isoMY:
                this.addStandard(PrintMgmtDocumentType::SIProjInvoice, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SIProjInvoice, ssrsReportStr(PSAProjInvoice, ReportFull_MY), ssrsReportStr(PSAProjInvoice, ReportFull_MY), countryRegionId);
                this.addOther(PrintMgmtDocumentType::SIProjInvoice, ssrsReportStr(PSAProjInvoice, ReportSimplified_MY), ssrsReportStr(PSAProjInvoice, ReportSimplified_MY), countryRegionId);
                this.addOther(PrintMgmtDocumentType::SIProjInvoice, ssrsReportStr(PSAProjInvoice, Report), ssrsReportStr(PSAProjInvoice, Report), #NoCountryRegionId);
                break;

            case #isoJP:
                this.addStandard(PrintMgmtDocumentType::SIProjInvoice);
                this.addOther(PrintMgmtDocumentType::SIProjInvoice, ssrsReportStr(PSAProjInvoice, Report_JP), ssrsReportStr(PSAProjInvoice, Report_JP), countryRegionId);
                break;

            case #isoAE:
                this.addStandard(PrintMgmtDocumentType::SIProjInvoice);
                this.addOther(PrintMgmtDocumentType::SIProjInvoice, ssrsReportStr(PSAProjInvoice, Report_AE), ssrsReportStr(PSAProjInvoice, Report_AE), countryRegionId);
                break;

            case #isoIT:
                this.addStandard(PrintMgmtDocumentType::SIProjInvoice);

                if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
                {
                    this.addOther(PrintMgmtDocumentType::SIProjInvoice, ssrsReportStr(PSAProjInvoice, Report_IT), ssrsReportStr(PSAProjInvoice, Report_IT), countryRegionId);
                }
                break;

            case #isoSA:
                this.addStandard(PrintMgmtDocumentType::SIProjInvoice);

                if (FeatureStateProvider::isFeatureEnabled(IntegrationTaxAuthoritiesSAFeature::instance()))
                {
                    this.addOther(PrintMgmtDocumentType::SIProjInvoice, ssrsReportStr(PSAProjInvoice, Report_SA), ssrsReportStr(PSAProjInvoice, Report_SA), countryRegionId);
                }
                break;

            default:
                this.addStandard(PrintMgmtDocumentType::SIProjInvoice);
        }

        switch (isoCountryCode)
        {
            case #isoMY:
                this.addStandard(PrintMgmtDocumentType::SIProjInvoiceWithBR, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SIProjInvoiceWithBR, ssrsReportStr(PSAContractLineInvoice, ReportFull_MY), ssrsReportStr(PSAContractLineInvoice, ReportFull_MY), countryRegionId);
                this.addOther(PrintMgmtDocumentType::SIProjInvoiceWithBR, ssrsReportStr(PSAContractLineInvoice, ReportSimplified_MY), ssrsReportStr(PSAContractLineInvoice, ReportSimplified_MY), countryRegionId);
                this.addOther(PrintMgmtDocumentType::SIProjInvoiceWithBR, ssrsReportStr(PSAContractLineInvoice, Report), ssrsReportStr(PSAContractLineInvoice, Report), #NoCountryRegionId);
                break;

            case #isoTH:
                this.addStandard(PrintMgmtDocumentType::SIProjInvoiceWithBR, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SIProjInvoiceWithBR, ssrsReportStr(PSAContractLineInvoice, ReportTH), ssrsReportStr(PSAContractLineInvoice, ReportTH), countryRegionId);
                break;

            case #isoAE:
                this.addStandard(PrintMgmtDocumentType::SIProjInvoiceWithBR, countryRegionId);
                this.addOther(PrintMgmtDocumentType::SIProjInvoiceWithBR, ssrsReportStr(PSAContractLineInvoice, Report_AE), ssrsReportStr(PSAContractLineInvoice, Report_AE), countryRegionId);
                break;

            case #isoSA:
                this.addStandard(PrintMgmtDocumentType::SIProjInvoiceWithBR);

                if (FeatureStateProvider::isFeatureEnabled(IntegrationTaxAuthoritiesSAFeature::instance()))
                {
                    this.addOther(PrintMgmtDocumentType::SIProjInvoiceWithBR, ssrsReportStr(PSAContractLineInvoice, Report_SA), ssrsReportStr(PSAContractLineInvoice, Report_SA), countryRegionId);
                }
                break;

            default:
                // </GMY>
                this.addStandard(PrintMgmtDocumentType::SIProjInvoiceWithBR);
        }

        switch (isoCountryCode)
        {
            case #isoJP:
                this.addStandard(PrintMgmtDocumentType::SIManagedProjInvoice);
                this.addOther(PrintMgmtDocumentType::SIManagedProjInvoice, ssrsReportStr(PSAManageInvoice, Report_JP), ssrsReportStr(PSAManageInvoice, Report_JP), countryRegionId);
                break;

            case #isoSA:
                this.addStandard(PrintMgmtDocumentType::SIManagedProjInvoice);
                
                if (FeatureStateProvider::isFeatureEnabled(IntegrationTaxAuthoritiesSAFeature::instance()))
                {
                    this.addOther(PrintMgmtDocumentType::SIManagedProjInvoice, ssrsReportStr(PSAManageInvoice, Report_SA), ssrsReportStr(PSAManageInvoice, Report_SA), countryRegionId);
                }
                break;

            default:
                this.addStandard(PrintMgmtDocumentType::SIManagedProjInvoice);
        }

        this.addStandard(PrintMgmtDocumentType::SIProjInvoice);
        this.addStandard(PrintMgmtDocumentType::SIProjInvoiceWithBR);
        this.addStandard(PrintMgmtDocumentType::SIManagedProjInvoice);
        this.addStandard(PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice);
        this.addStandard(PrintMgmtDocumentType::ProjectQuotation);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.addStandard(PrintMgmtDocumentType::TaxReimburstmentSlip_HU, countryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWarehouseDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds warehouse records to the <c>PrintMgmtReportFormat</c> table.
    /// </summary>
    protected void addWarehouseDocuments()
    {
        this.addStandard(PrintMgmtDocumentType::WHSPickListShippingWave);
        this.addStandard(PrintMgmtDocumentType::WHSPickListShippingLoad);
        this.addStandard(PrintMgmtDocumentType::WHSPickListShippingShipment);
        this.addStandard(PrintMgmtDocumentType::WHSPickListProd);
        this.addStandard(PrintMgmtDocumentType::WHSLoadList);
        this.addStandard(PrintMgmtDocumentType::WHSContainerContents);
        this.addStandard(PrintMgmtDocumentType::WHSBOL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransportationDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds transportation records to the <c>PrintMgmtReportFormat</c> table.
    /// </summary>
    protected void addTransportationDocuments()
    {
        this.addStandard(PrintMgmtDocumentType::TMSCertificateOfOrigin);
        this.addStandard(PrintMgmtDocumentType::TMSCommercialInvoice);
        this.addStandard(PrintMgmtDocumentType::TMSLoadTender);
        this.addStandard(PrintMgmtDocumentType::TMSRoute);
        this.addStandard(PrintMgmtDocumentType::TMSUsmcaCertificateOfOrigin);

        this.addStandard(PrintMgmtDocumentType::VendPaymAdvice);
        this.addStandard(PrintMgmtDocumentType::CustPaymAdvice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLocalizationDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds localization records to the <c>PrintMgmtReportFormat</c> table.
    /// </summary>
    protected void addLocalizationDocuments()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(SalesInvoice_IN, Report), ssrsReportStr(SalesInvoice_IN, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::PurchaseOrderInvoice, ssrsReportStr(VendInvoiceDocument_IN, Report), ssrsReportStr(VendInvoiceDocument_IN, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::PurchaseOrderPackingSlip, ssrsReportStr(PurchGoodsReceiptNote_IN , Report), ssrsReportStr(PurchGoodsReceiptNote_IN , Report), countryRegionId);
        }

        if (PrintMgmtDelegates::BrazilParametersIsEnabled())
        {
            this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(FiscalDocument_BR, Report), ssrsReportStr(FiscalDocument_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::SalesOrderInvoice, ssrsReportStr(EFDocDANFE_BR, Report), ssrsReportStr(EFDocDANFE_BR, Report), countryRegionId);

            this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(FiscalDocument_BR, Report), ssrsReportStr(FiscalDocument_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::SalesFreeTextInvoice, ssrsReportStr(EFDocDANFE_BR, Report), ssrsReportStr(EFDocDANFE_BR, Report), countryRegionId);

            this.addOther(PrintMgmtDocumentType::SalesOrderPackingSlip, ssrsReportStr(FiscalDocument_BR, Report), ssrsReportStr(FiscalDocument_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::SalesOrderPackingSlip, ssrsReportStr(EFDocDANFE_BR, Report), ssrsReportStr(EFDocDANFE_BR, Report), countryRegionId);

            this.addOther(PrintMgmtDocumentType::PurchaseOrderInvoice, ssrsReportStr(FiscalDocument_BR, Report), ssrsReportStr(FiscalDocument_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::PurchaseOrderInvoice, ssrsReportStr(EFDocDANFE_BR, Report), ssrsReportStr(EFDocDANFE_BR, Report), countryRegionId);

            this.addOther(PrintMgmtDocumentType::TaxFiscalDocument_BR, ssrsReportStr(EFDocDANFE_BR, Report), ssrsReportStr(EFDocDANFE_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::TaxFiscalDocument_BR, ssrsReportStr(FiscalDocument_BR, Report), ssrsReportStr(FiscalDocument_BR, Report), countryRegionId);

            this.addOther(PrintMgmtDocumentType::ComplementaryInvoice_BR, ssrsReportStr(EFDocDANFE_BR, Report), ssrsReportStr(EFDocDANFE_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::ComplementaryInvoice_BR, ssrsReportStr(FiscalDocument_BR, Report), ssrsReportStr(FiscalDocument_BR, Report), countryRegionId);

            this.addOther(PrintMgmtDocumentType::ProjectInvoice, ssrsReportStr(EFDocDANFE_BR, Report)      , ssrsReportStr(EFDocDANFE_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::ProjectInvoice, ssrsReportStr(FiscalDocument_BR, Report)  , ssrsReportStr(FiscalDocument_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::ProjectInvoice, ssrsReportStr(RPS_BR, Report)             , ssrsReportStr(RPS_BR, Report), countryRegionId);

            this.addOther(PrintMgmtDocumentType::SIProjInvoice, ssrsReportStr(EFDocDANFE_BR, Report)      , ssrsReportStr(EFDocDANFE_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::SIProjInvoice, ssrsReportStr(FiscalDocument_BR, Report)  , ssrsReportStr(FiscalDocument_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::SIProjInvoice, ssrsReportStr(RPS_BR, Report)             , ssrsReportStr(RPS_BR, Report), countryRegionId);

            this.addOther(PrintMgmtDocumentType::SIProjInvoiceWithBR, ssrsReportStr(EFDocDANFE_BR, Report)      , ssrsReportStr(EFDocDANFE_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::SIProjInvoiceWithBR, ssrsReportStr(FiscalDocument_BR, Report)  , ssrsReportStr(FiscalDocument_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::SIProjInvoiceWithBR, ssrsReportStr(RPS_BR, Report)             , ssrsReportStr(RPS_BR, Report), countryRegionId);

            this.addOther(PrintMgmtDocumentType::TransferOrderFiscalDoc_BR, ssrsReportStr(EFDocDANFE_BR, Report)      , ssrsReportStr(EFDocDANFE_BR, Report), countryRegionId);
            this.addOther(PrintMgmtDocumentType::TransferOrderFiscalDoc_BR, ssrsReportStr(FiscalDocument_BR, Report)  , ssrsReportStr(FiscalDocument_BR, Report), countryRegionId);

            this.addStandard(PrintMgmtDocumentType::ProjDebitNote_BR, countryRegionId);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.addNonSSRS(PrintMgmtDocumentType::PurchaseOrderFacture,            #Facture,                    #Facture,                       countryRegionId, true);
            this.addNonSSRS(PrintMgmtDocumentType::SalesOrderFacture,               #Facture,                    #Facture,                       countryRegionId, true);
            this.addNonSSRS(PrintMgmtDocumentType::SalesFreeTextFacture,            #Facture,                    #Facture,                       countryRegionId, true);
            this.addNonSSRS(PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU,       #Invoice4Paym,               #Invoice4Paym,                  countryRegionId, true);
            this.addNonSSRS(PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU,       #Invoice4Paym,               #Invoice4Paym,                  countryRegionId, true);
            this.addNonSSRS(PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU,    #Invoice4Paym,               #Invoice4Paym,                  countryRegionId, true);
            this.addNonSSRS(PrintMgmtDocumentType::SalesOrderBailee,                #MX3,                        #MX3,                           countryRegionId, true);
            this.addNonSSRS(PrintMgmtDocumentType::PurchaseOrderBailee,             #MX1,                        #MX1,                           countryRegionId, true);
            this.addNonSSRS(PrintMgmtDocumentType::WMSBilOfLadingTranspDocument_RU, #BillOfLadingTranspDocument, #BillOfLadingTranspDocument,    countryRegionId, true);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.addNonSSRS(PrintMgmtDocumentType::WMSBillOfLading_RU, #BillOfLading1T, #BillOfLading1T, countryRegionId, true);
            this.addOther  (PrintMgmtDocumentType::WMSBillOfLading_RU, ssrsReportStr(WMSBillOfLading, Report), ssrsReportStr(WMSBillOfLading, Report), #NoCountryRegionId);
        }
        else
        {
            // needed even in non-RU context
            this.addStandard(PrintMgmtDocumentType::WMSBillOfLading_RU);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>