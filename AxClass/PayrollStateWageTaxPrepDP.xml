<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollStateWageTaxPrepDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollStateWageTaxPrepDP</c> class is the report data provider class for <c>PayrollStateWageTaxPrepReport</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(PayrollStateWageTaxPrepReport)),
    SRSReportParameterAttribute(classStr(PayrollStateWageTaxPrepContract))
]
public class PayrollStateWageTaxPrepDP extends SRSReportDataProviderPreProcessTempDB
{
    Set                                workerMonth;
    Set                                workerPayStatement;
    ToDate                             toDate;
    FromDate                           fromDate;
    DirPerson                          dirPerson;
    MonthsOfYear                       taxPayPeriodMonth;
    PayrollTaxYear                     payrollTaxYear;
    PayrollPayStatement                payrollPayStatement;
    LogisticsAddressStateId            addressStateId;
    HcmPersonPrivateDetails            hcmPersonPrivateDetails;
    PayrollStateWageTaxPrepTmp         payrollStateWageTaxPrepTmp;
    HcmPersonIdentificationNumber      hcmPersonIdentificationNumber;
    LogisticsAddressCountryRegionId    countryRegionCode;
    PayrollTaxTransactionHistoryUnion  payrollTaxTransactionHistoryUnion;
    PayrollTaxCodeRecId                sutaStateTaxCodeRecId;
    PayrollTaxCodeRecId                sitStateTaxCodeRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActualCombinedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the tax line amount of the pay statement against specified payroll tax code.
    /// </summary>
    /// <param name="_taxCode">
    /// The payroll tax code Rec id.
    /// </param>
    /// <returns>
    /// The sum of tax line amount.
    /// </returns>
    private Amount getActualCombinedTax(PayrollTaxCodeRecId _taxCode = 0)
    {
        PayrollPayStatement               payrollPayStatementLocal;
        PayrollTaxTransactionHistoryUnion payrollTaxTransactionHistoryUnionLocal;

        select sum(TaxLineAmount) from payrollTaxTransactionHistoryUnionLocal
        join RecId, PaymentStatus from payrollPayStatementLocal
            where payrollTaxTransactionHistoryUnionLocal.PayStatement   == payrollPayStatementLocal.RecId
                && payrollTaxTransactionHistoryUnionLocal.Worker        == payrollTaxTransactionHistoryUnion.Worker
                && payrollTaxTransactionHistoryUnionLocal.TaxCode       == _taxCode
                && payrollTaxTransactionHistoryUnionLocal.PayStatement  == payrollTaxTransactionHistoryUnion.PayStatement
                && payrollPayStatementLocal.PaymentStatus             == PayrollPaymentStatus::PaymentIssued;

        return payrollTaxTransactionHistoryUnionLocal.TaxLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayrollStateWageTaxPrepTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>PayrollStateWageTaxPrepTmp</c> record.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PayrollStateWageTaxPrepTmp))
    ]
    public PayrollStateWageTaxPrepTmp getPayrollStateWageTaxPrepTmp()
    {
        select payrollStateWageTaxPrepTmp;
        return payrollStateWageTaxPrepTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMonthsPayrollStateWageTaxPrepTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the empty records in the <c>PayrollStateWageTaxPrepTmp</c> temporary table for months in quarter.
    /// </summary>
    /// <param name="_fromDate">
    /// The start date of quarter.
    /// </param>
    /// <param name="_toDate">
    /// The end date of quarter.
    /// </param>
    private void insertMonthsPayrollStateWageTaxPrepTmp(
        FromDate              _fromDate,
        ToDate                _toDate)
    {
        Counter startMonthOfQuarter;
        Counter endMonthOfQuarter;
        Counter monthCounter;

        startMonthOfQuarter = mthOfYr(_fromDate);
        endMonthOfQuarter   = mthOfYr(_toDate);

        for (monthCounter = startMonthOfQuarter; monthCounter <= endMonthOfQuarter; monthCounter++)
        {
            ttsBegin;
            payrollStateWageTaxPrepTmp.WageMonth = monthCounter;
            payrollStateWageTaxPrepTmp.insert();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPayrollStateWageTaxPrepTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the records in the <c>PayrollStateWageTaxPrepTmp</c> temporary table.
    /// </summary>
    private void insertPayrollStateWageTaxPrepTmp()
    {
        str workerInPayStatement;
        str workerInPayPeriod;
        PayrollUSState priorState;
        Amount priorStateWages;

        if (payrollTaxTransactionHistoryUnion.PayStatement)
        {
            // It's not an adjustment transaction.
            workerInPayStatement = strFmt("%1-%2", dirPerson.RecId, payrollPayStatement.RecId);
            if (workerPayStatement.in(workerInPayStatement))
            {
                // This paystatement has been processed.
                return ;
            }
            workerPayStatement.add(workerInPayStatement);

            workerInPayPeriod = strFmt("%1-%2", dirPerson.RecId, taxPayPeriodMonth);
            if (workerMonth.in(workerInPayPeriod))
            {
                // If a worker has multiple pay statements in one pay period, only the first one will be counted in "Worker summary"
                taxPayPeriodMonth = MonthsOfYear::None;
                priorState = 0;
                priorStateWages = 0.0;
            }
            else
            {
                workerMonth.add(workerinPayPeriod);
                priorState = payrollTaxTransactionHistoryUnion.PriorState;
                priorStateWages = payrollTaxTransactionHistoryUnion.PriorStateWageAmount;
            }
        }

        ttsBegin;
        payrollStateWageTaxPrepTmp = this.populatePayrollStateWageTaxPrepTmp(payrollStateWageTaxPrepTmp, priorState, priorStateWages);

        payrollStateWageTaxPrepTmp.insert();
        ttsCommit;

        payrollStateWageTaxPrepTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePayrollStateWageTaxPrepTmp</Name>
				<Source><![CDATA[
    protected PayrollStateWageTaxPrepTmp populatePayrollStateWageTaxPrepTmp(PayrollStateWageTaxPrepTmp _payrollStateWageTaxPrepTmp, PayrollUSState _priorState, Amount _priorStateWages)
    {
        PayrollStateWageTaxPrepTmp payrollStateWageTaxPrepTmpInner = _payrollStateWageTaxPrepTmp;
        payrollStateWageTaxPrepTmpInner.WorkerName           = dirPerson.Name;
        payrollStateWageTaxPrepTmpInner.GrossWages           = payrollTaxTransactionHistoryUnion.GrossWages;
        payrollStateWageTaxPrepTmpInner.ExcessWages          = payrollTaxTransactionHistoryUnion.ExcessWages;
        payrollStateWageTaxPrepTmpInner.SubjectWages         = payrollTaxTransactionHistoryUnion.SubjectWages;
        payrollStateWageTaxPrepTmpInner.GrossSubjectWages    = payrollTaxTransactionHistoryUnion.GrossSubjectWages;
        payrollStateWageTaxPrepTmpInner.StateWithholdingTax  = this.getActualCombinedTax(sitStateTaxCodeRecId);
        payrollStateWageTaxPrepTmpInner.IdentificationNumber = hcmPersonIdentificationNumber.IdentificationNumber;
        payrollStateWageTaxPrepTmpInner.WageMonth            = taxPayPeriodMonth;
        payrollStateWageTaxPrepTmpInner.StateUnemploymentTax = this.getActualCombinedTax(sutaStateTaxCodeRecId);
        payrollStateWageTaxPrepTmpInner.PriorState           = _priorState;
        payrollStateWageTaxPrepTmpInner.PriorStateWageAmount = _priorStateWages;

        if (payrollTaxTransactionHistoryUnion.PayStatement)
        {
            // It's not an adjustment transaction.
            switch (hcmPersonPrivateDetails.Gender)
            {
                case HcmPersonGender::Male:
                    payrollStateWageTaxPrepTmpInner.IsMale = NoYes::Yes;
                    break;

                case HcmPersonGender::Female:
                    payrollStateWageTaxPrepTmpInner.IsFemale = NoYes::Yes;
                    break;

                default:
                    payrollStateWageTaxPrepTmpInner.IsUnspecifiedGender = NoYes::Yes;
                    break;
            }
        }

        return payrollStateWageTaxPrepTmpInner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        Query                 query;
        QueryRun              queryRun;
        PayrollPayPeriod      payrollPayPeriod;
        QueryBuildDataSource  payrollTaxTransactionHistoryUnionDatasource;
        QueryBuildDataSource  hcmPersonIdentificationDatasource;
        QueryBuildDataSource  payrollPayPeriodDatasource;

        PayrollTaxCodeId                 sutaStateTaxCode;
        PayrollTaxCodeId                 sitStateTaxCode;
        PayrollWageTaxQuarter            payrollWageTaxQuarter;
        PayrollStateWageTaxPrepContract  contract;

        workerMonth = new Set(Types::String);
        workerPayStatement  = new Set(Types::String);

        query  = this.parmQuery();

        payrollTaxTransactionHistoryUnionDatasource = query.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion));
        hcmPersonIdentificationDatasource = query.dataSourceTable(tableNum(HcmPersonIdentificationNumber));
        payrollPayPeriodDatasource        = query.dataSourceTable(tableNum(PayrollPayPeriod));

        payrolltaxtransactionhistoryuniondatasource.clearranges();
        hcmpersonidentificationdatasource.clearranges();
        payrollpayperioddatasource.clearranges();

        contract = this.parmDataContract() as PayrollStateWageTaxPrepContract;

        this.setUserConnection(payrollStateWageTaxPrepTmp);

        addressStateId        = contract.parmAddressStateId();
        payrollTaxYear        = contract.parmWageTaxYear();
        payrollWageTaxQuarter = contract.parmWageTaxQuarter();

        countryRegionCode = SysCountryRegionCode::getCountryRegionIdByIsoCode(SysCountryRegionCode::countryInfo());

        sutaStateTaxCode        = strFmt('USA-%1-ER_SUTA', addressStateId);
        sutaStateTaxCodeRecId   = PayrollTaxCode::findByCodeCountryRegion(sutaStateTaxCode, countryRegionCode).RecId;
        sitStateTaxCode         = strFmt('USA-%1-SIT', addressStateId);
        sitStateTaxCodeRecId    = PayrollTaxCode::findByCodeCountryRegion(sitStateTaxCode, countryRegionCode).RecId;

        // Calculates the date range for tax transactions.
        this.setDateRangeForTaxQuarter(payrollWageTaxQuarter);

        // Inserts empty records against each month in a quarter so as to display all months in group by month section of the report.
        this.insertMonthsPayrollStateWageTaxPrepTmp(fromDate, toDate);

        // Applying range on SSN identificationType.
        SysQuery::findOrCreateRange(
            hcmPersonIdentificationDatasource,
            fieldNum(HcmPersonIdentificationNumber, IdentificationType)).value(SysQuery::value(HcmSharedParameters::find().SSNIdentificationType));

        // Ranges on pay period.
        SysQuery::findOrCreateRange(
            payrollTaxTransactionHistoryUnionDatasource,
            fieldNum(PayrollTaxTransactionHistoryUnion, TransDate)).value(SysQuery::range(fromDate, toDate));

        // ranges on period end date.
        SysQuery::findOrCreateRange(
            payrollPayPeriodDatasource,
            fieldNum(PayrollPayPeriod, PeriodEndDate)).value(SysQuery::range(fromDate, toDate));

        query.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion)).addSortField(fieldNum(PayrollTaxTransactionHistoryUnion, TransDate));
        query.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion)).addSortField(fieldNum(PayrollTaxTransactionHistoryUnion, Worker));

        // At the first run we only process paystatements which have USA-XX-ER_SUTA tax line
        // Applying range on USA-XX-ER_SUTA.
        SysQuery::findOrCreateRange(
            payrollTaxTransactionHistoryUnionDatasource,
            fieldNum(PayrollTaxTransactionHistoryUnion, TaxCode)).value(SysQuery::value(sutaStateTaxCodeRecId));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            dirPerson                         = queryRun.get(tableNum(DirPerson));
            payrollPayPeriod                  = queryRun.get(tableNum(PayrollPayPeriod));
            hcmPersonPrivateDetails           = queryRun.get(tableNum(HcmPersonPrivateDetails));
            hcmPersonIdentificationNumber     = queryRun.get(tableNum(HcmPersonIdentificationNumber));
            payrollTaxTransactionHistoryUnion = queryRun.get(tableNum(PayrollTaxTransactionHistoryUnion));
            payrollPayStatement               = queryRun.get(tableNum(PayrollPayStatement));

            if (!payrollTaxTransactionHistoryUnion.PayStatement)
            {
                // Insert in temp table if the record is an adjustment transaction.
                taxPayPeriodMonth = MonthsOfYear::none;
                this.insertPayrollStateWageTaxPrepTmp();
            }
            else if (payrollPayStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued)
            {
                this.setPayPeriodMonth(payrollPayPeriod.PeriodEndDate, payrollPayPeriod.PeriodStartDate);
                this.insertPayrollStateWageTaxPrepTmp();
            }
        }

        // At the second run we only process paystatements which have USA-XX-SIT tax line but don't have USA-XX-ER_SUTA tax line
        // Applying range on USA-XX-SIT.
        payrollTaxTransactionHistoryUnionDatasource.clearRange(fieldNum(PayrollTaxTransactionHistoryUnion, TaxCode));
        SysQuery::findOrCreateRange(
            payrollTaxTransactionHistoryUnionDatasource,
            fieldNum(PayrollTaxTransactionHistoryUnion, TaxCode)).value(SysQuery::value(sitStateTaxCodeRecId));

        // Workers are not counted in "Worker summary" if the paystatements have only USA-XX-SIT tax line
        taxPayPeriodMonth = MonthsOfYear::none;

        queryrun = new queryrun(query);

        while (queryrun.next())
        {
            dirPerson                         = queryRun.get(tableNum(DirPerson));
            payrollPayPeriod                  = queryRun.get(tableNum(PayrollPayPeriod));
            hcmPersonPrivateDetails           = queryRun.get(tableNum(HcmPersonPrivateDetails));
            hcmPersonIdentificationNumber     = queryRun.get(tableNum(HcmPersonIdentificationNumber));
            payrollTaxTransactionHistoryUnion = queryRun.get(tableNum(PayrollTaxTransactionHistoryUnion));
            payrollPayStatement               = queryRun.get(tableNum(PayrollPayStatement));

            if (payrollPayStatement.paymentStatus == payrollPaymentStatus::paymentissued)
            {
                // If paystatement only has USA-XX-SIT the gross wage column should be 0.00,
                // but the withholding amount column should be the sum of USA-XX-SIT actual amount.
                payrollTaxTransactionHistoryUnion.GrossWages = 0.00;
                payrollTaxTransactionHistoryUnion.ExcessWages = 0.00;
                payrollTaxTransactionHistoryUnion.SubjectWages = 0.00;
                payrollTaxTransactionHistoryUnion.GrossSubjectWages = 0.00;

                this.insertPayrollStateWageTaxPrepTmp();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateRangeForTaxQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the date range for selected tax quarter.
    /// </summary>
    /// <param name="_payrollWageTaxQuarter">
    /// The selected tax quarter.
    /// </param>
    private void setDateRangeForTaxQuarter(PayrollWageTaxQuarter _payrollWageTaxQuarter)
    {
        switch (_payrollWageTaxQuarter)
        {
            case PayrollWageTaxQuarter::Q1:
                fromDate = mkDate(1, 1, payrollTaxYear);
                toDate   = mkDate(31, 3, payrollTaxYear);
                break;

            case PayrollWageTaxQuarter::Q2:
                fromDate = mkDate(1, 4, payrollTaxYear);
                toDate   = mkDate(30, 6, payrollTaxYear);
                break;

            case PayrollWageTaxQuarter::Q3:
                fromDate = mkDate(1, 7, payrollTaxYear);
                toDate   = mkDate(30, 9, payrollTaxYear);
                break;

            case PayrollWageTaxQuarter::Q4:
                fromDate = mkDate(1, 10, payrollTaxYear);
                toDate   = mkDate(31, 12, payrollTaxYear);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPayPeriodMonth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the pay period month if period start date and period end date spans 12th of the month.
    /// </summary>
    /// <param name="_periodEndDate">
    /// The selected period end date.
    /// </param>
    /// <param name="_periodStartDate">
    /// The selected period start date.
    /// </param>
    private void setPayPeriodMonth(PeriodEnd _periodEndDate, PeriodStart _periodStartDate)
    {
        // Get tax pay period month.
        taxPayPeriodMonth = MonthsOfYear::None;

        if (_periodEndDate      >= mkDate(12, mthOfYr(_periodEndDate), year(_periodEndDate))
             && _periodStartDate <= mkDate(12, mthOfYr(_periodEndDate), year(_periodEndDate)))
        {
            taxPayPeriodMonth = mthOfYr(_periodEndDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PayrollStateWageTaxPrepDP construct()
    {
        return new PayrollStateWageTaxPrepDP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    private void setUserConnection(Common _common)
    {
        UserConnection connection = this.parmUserConnection();

        if (connection)
        {
            _common.setConnection(connection);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>