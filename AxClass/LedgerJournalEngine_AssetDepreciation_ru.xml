<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_AssetDepreciation_ru</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalEngine_AssetDepreciation_ru extends LedgerJournalEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCurCreditModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts a <c>LedgerJournalTrans</c> record and the <c>LedgerJournalTrans_Project</c> fields in
    /// response to a change in the <c>AmountCurCredit</c> field.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record that is modified.
    /// </param>
    /// <param name="_ledgerJournalTransProj">
    /// The <c>LedgerJournalTrans_Project</c> record that is modified; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// The <c>LedgerJournalTrans_RCash</c> record that is modified; optional.
    /// </param>
    public void amountCurCreditModified(LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project _ledgerJournalTransProj = null,
        LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        super(_ledgerJournalTrans, _ledgerJournalTransProj, _ledgerJournalTrans_RCash);
        this.setDeprBonusAmount_RU(_ledgerJournalTrans, DebCredProposal::Credit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurDebitModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts a <c>LedgerJournalTrans</c> record and the <c>LedgerJournalTrans_Project</c> fields in
    /// response to a change in the <c>AmountCurDebit</c> value.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record that is modified.
    /// </param>
    /// <param name="_ledgerJournalTransProj">
    /// The <c>LedgerJournalTrans_Project</c> record that is modified; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// The <c>LedgerJournalTrans_RCash</c> record that is modified; optional.
    /// </param>
    public void amountCurDebitModified(LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project _ledgerJournalTransProj = null,
        LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        super(_ledgerJournalTrans, _ledgerJournalTransProj, _ledgerJournalTrans_RCash);
        this.setDeprBonusAmount_RU(_ledgerJournalTrans, DebCredProposal::Debit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        super(_ledgerJournalTrans, _ledgerJournalTrans_Asset);

        _ledgerJournalTrans.CurrencyCode = CompanyInfoHelper::standardCurrency();

        _ledgerJournalTrans.OffsetAccountType = _ledgerJournalTrans.ledgerJournalTable().OffsetAccountType;
        _ledgerJournalTrans.OffsetLedgerDimension = _ledgerJournalTrans.ledgerJournalTable().OffsetLedgerDimension;
        _ledgerJournalTrans.AccountType = LedgerJournalACType::FixedAssets_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeprBonusAmount_RU</Name>
				<Source><![CDATA[
    public void setDeprBonusAmount_RU(LedgerJournalTrans _ledgerJournalTrans,
        DebCredProposal _debCredProposal,
        RAssetDeprBonusId _deprBonusId = '')
    {
        if (_ledgerJournalTrans.RecId)
        {
            LedgerJournalTrans_RAsset ledgerJournalTransRAsset = LedgerJournalTrans_RAsset::find(_ledgerJournalTrans.RecId);

            RefRecId sourceLineRecId = _ledgerJournalTrans.RecId;
            RAssetDeprBonusId deprBonusId = _deprBonusId ? _deprBonusId : ledgerJournalTransRAsset.DepreciationBonusId;
            RAssetStandards rAssetStandards = RAssetStandards::find(ledgerJournalTransRAsset.AssetId, ledgerJournalTransRAsset.StandardId);

            if (ledgerJournalTransRAsset.TransType == RAssetTransType::Revaluation
                && deprBonusId)
            {
                LedgerJournalTrans ledgerJournalTransLocal;
                while select forupdate ledgerJournalTransLocal
                    join forupdate ledgerJournalTransRAsset
                        where ledgerJournalTransRAsset.RefRecId == ledgerJournalTransLocal.RecId
                            && ledgerJournalTransRAsset.ToFromRecId == sourceLineRecId
                            && ledgerJournalTransRAsset.TransType == RAssetTransType::Depreciation
                            && ledgerJournalTransRAsset.StandardId == rAssetStandards.AssetStandardId
                            && ledgerJournalTransRAsset.DepreciationBonusId
                {
                    AmountCur bonusAmountCur = RAssetBonus::bonusAmountCur(deprBonusId,
                        rAssetStandards.AssetStandardId,
                        rAssetTable,
                        ledgerJournalTransLocal.TransDate,
                        _ledgerJournalTrans.amount(),
                        _ledgerJournalTrans.CurrencyCode);

                    if (bonusAmountCur < RAssetGroup::assetDepreciationMin(rAssetStandards.AssetGroup))
                    {
                        bonusAmountCur = 0.0;
                    }

                    switch (_debCredProposal)
                    {
                        case DebCredProposal::Debit:
                            ledgerJournalTransLocal.AmountCurCredit = bonusAmountCur;
                            ledgerJournalTransLocal.AmountCurDebit  = 0.;
                            break;

                        case DebCredProposal::Credit:
                            ledgerJournalTransLocal.AmountCurDebit  = bonusAmountCur;
                            ledgerJournalTransLocal.AmountCurCredit = 0.;
                            break;

                        default:
                            break;
                    }

                    ledgerJournalTransLocal.update();

                    if (ledgerJournalTransRAsset.DepreciationBonusId != deprBonusId)
                    {
                        ledgerJournalTransRAsset.DepreciationBonusId = deprBonusId;
                        ledgerJournalTransRAsset.update();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the internal caches for the journal and voucher tables and updates the data source of a
    /// specified <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_updateCashDisc">
    /// A Boolean value that indicates whether the cash discount of a journal line was manually entered;
    /// optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset">
    /// A <c>LedgerJournalTrans_Asset</c> record.
    /// </param>
    /// <param name="_ledgerJournalTrans_RDeferrals">
    /// A <c>LedgerJournalTrans_RDeferrals</c> record.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// A <c>LedgerJournalTrans_RCash</c> recordâ€¦
    /// </param>
    /// <remarks>
    /// This method must be called from the <c>LedgerJournalTrans</c> data source of the journal form
    /// <c>write</c> method after the <c>super</c> method is called.
    /// </remarks>
    public void write(LedgerJournalTrans _ledgerJournalTrans,
        boolean _updateCashDisc = false,
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null,
        LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        RAssetTable rassetTableLocal = RAssetTable::find(_ledgerJournalTrans.parmAccount());
        RAssetStandards assetStandardsLocal = RAssetStandards::find(_ledgerJournalTrans.parmAccount(), ledgerJournalTrans_RAsset.StandardId);

        super(_ledgerJournalTrans, _updateCashDisc, _ledgerJournalTrans_Asset, _ledgerJournalTrans_RDeferrals, _ledgerJournalTrans_RCash);

        if (!_ledgerJournalTrans.parmOffsetAccount())
        {
            _ledgerJournalTrans.OffsetLedgerDimension = assetStandardsLocal.assetOffsetLedgerDimension(ledgerJournalTrans_RAsset.StandardId,
                _ledgerJournalTrans.PostingProfile,
                ledgerJournalTrans_RAsset.TransType,
                _ledgerJournalTrans.TransDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>