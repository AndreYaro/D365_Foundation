<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimOnHand</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventDimOnHand extends Set
{
    ItemId                  itemIdCriteria;
    InventDim               inventDimCriteria;
    InventDimParm           inventDimParmCriteria;
    InventDimParm           inventDimParmOnHandLevel;
    InventDimOnHandLevel    inventDimOnHandLevel;
    NoYes                   onlyPositiveOnHands;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified instance of the <c>inventDimOnHandMember</c> class exists.
    /// </summary>
    /// <param name="_inventDimOnHandMember">
    ///    The instance of the <c>inventDimOnHandMember</c> class to be checked for existence.
    /// </param>
    /// <param name="_allowPassedQtyToBeLarger">
    ///    A Boolean value that indicates whether the item ID, inventory dimension, and quantity must match;
    ///    optional.
    /// </param>
    /// <returns>
    ///    true if the instance of the <c>inventDimOnHandMember</c> class exists; otherwise, false.
    /// </returns>
    public boolean exists(
        InventDimOnHandMember   _inventDimOnHandMember,
        boolean                 _allowPassedQtyToBeLarger = false)
    {
        InventDimOnHandIterator inventDimOnHandIterator = this.onHandIterator();

        while (inventDimOnHandIterator.more())
        {
            InventDimOnHandMember inventDimOnHandMemberExisting = inventDimOnHandIterator.value();
            if (inventDimOnHandMemberExisting.parmItemId()      == _inventDimOnHandMember.parmItemId()          &&
                inventDimOnHandMemberExisting.parmInventDimId() == _inventDimOnHandMember.parmInventDimId())
            {
                if (_allowPassedQtyToBeLarger)//this on-hand is allowed to be less that the one that is passed as argument
                {
                    return (inventDimOnHandMemberExisting.parmInventQty() <= _inventDimOnHandMember.parmInventQty());
                }
                return (inventDimOnHandMemberExisting.parmInventQty()   == _inventDimOnHandMember.parmInventQty());
            }
            inventDimOnHandIterator.next();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstElement</Name>
				<Source><![CDATA[
    public InventDimOnHandMember firstElement()
    {
        InventDimOnHandIterator inventDimOnHandIterator = this.onHandIterator();

        if (!inventDimOnHandIterator.more())
        {
            return null;
        }
        return inventDimOnHandIterator.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        switch (inventDimOnHandLevel)
        {
            case InventDimOnHandLevel::TotalQty:
                inventDimParmOnHandLevel.clear();
                this.initializeDimParm();
                break;
            case InventDimOnHandLevel::Item:
                inventDimParmOnHandLevel.clear();
                inventDimParmOnHandLevel.ItemIdFlag     = NoYes::Yes;
                this.initializeDimParm();
                break;
            case InventDimOnHandLevel::ProductDimensions:
                this.initializeProductDimensions();
                break;
            case InventDimOnHandLevel::Detailed:
                inventDimParmOnHandLevel.clear();
                inventDimParmOnHandLevel.ItemIdFlag     = NoYes::Yes;
                inventDimParmOnHandLevel.setAllInventDim();
                this.initializeDimParm();
                break;
            case InventDimOnHandLevel::DimParm:
                this.initializeDimParm();
                break;
            case InventDimOnHandLevel::SpecPositive:
                this.initializeSpecPositive();
                break;
            default:
                throw(error(strFmt("@SYS19306", funcName())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDimParm</Name>
				<Source><![CDATA[
    protected void initializeDimParm()
    {
        PdsCWInventQty          cwQty = 0;

        QueryRun queryRunDimParm = new QueryRun(this.queryDimParm());
        while (queryRunDimParm.next())
        {
            InventSum inventSumItem = queryRunDimParm.get(tableNum(InventSum)) as InventSum;
            InventDim inventDimItem = InventDim::findOrCreate(queryRunDimParm.get(tableNum(InventDim)) as InventDim);

            InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(inventSumItem.ItemId, inventDimItem, inventDimParmOnHandLevel);
            InventQty qty = this.onHandQty(inventOnHandQty);

            cwQty = this.pdsCWOnHandQty(inventOnHandQty);

            if (qty > 0 || (qty < 0 && !onlyPositiveOnHands))
            {
                InventDimOnHandMember inventDimOnHandMember = InventDimOnHandMember::construct(inventSumItem.ItemId, inventDimItem.InventDimId, qty, cwQty);

                this.insertOrUpdate(inventDimOnHandMember);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProductDimensions</Name>
				<Source><![CDATA[
    protected void initializeProductDimensions()
    {
        InventSum   inventSum;
        InventDim   inventDim;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select ItemId from inventSum
                group by ItemId
                where   inventSum.ClosedQty   == NoYes::No
                    &&  #InventDimFieldsFilter(inventSum, InventDimCriteria, InventDimParmCriteria)
            {
                this.initializeProductDimensionsItem(inventSum.ItemId);
            }
        }
        else
        {
            while select ItemId from inventSum
                group by ItemId
                where inventSum.ClosedQty   == NoYes::No
                #InventDimJoin(inventSum.inventDimId, inventDim, InventDimCriteria, InventDimParmCriteria)
            {
                this.initializeProductDimensionsItem(inventSum.ItemId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProductDimensionsItem</Name>
				<Source><![CDATA[
    protected void initializeProductDimensionsItem(ItemId _itemId)
    {
        InventDim                       inventDimItem;  // holding only item dimensions
        InventDim                       inventDimOnHand; // holding item dimensions and criteria values
        InventDimParm                   inventDimParmItem;
        EcoResProductDimGroupSetup      productDimGroupSetup = EcoResProductDimGroupSetup::newItemId(_itemId);
        InventDimGroupSetup             inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);

        QueryRun queryRunProductDimensions = new QueryRun(this.queryProductDimensions(_itemId, productDimGroupSetup));
        while (queryRunProductDimensions.next())
        {
            InventSum inventSumItem = queryRunProductDimensions.get(tableNum(InventSum)) as InventSum;
            inventDimOnHand.data(inventDimCriteria.data());
            inventDimOnHand.mergeUsedDim(inventDimGroupSetup, queryRunProductDimensions.get(tableNum(InventDim)) as InventDim);
            inventDimOnHand = InventDim::findOrCreate(inventDimOnHand);
            inventDimItem.data(inventDimOnHand.data());
            inventDimItem.clearNotProductDim(inventDimGroupSetup);
            inventDimItem = InventDim::findOrCreate(inventDimItem);
            inventDimParmItem.initFromInventDim(inventDimOnHand);
            inventDimParmItem.merge(inventDimParmOnHandLevel);

            InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(inventSumItem.ItemId, inventDimOnHand, inventDimParmItem);
            InventQty qty = this.onHandQty(inventOnHandQty);
            PdsCWInventQty cwQty = this.pdsCWOnHandQty(inventOnHandQty);

            if (qty > 0 || (qty < 0 && !onlyPositiveOnHands))
            {
                InventDimOnHandMember inventDimOnHandMember = InventDimOnHandMember::construct(inventSumItem.ItemId, inventDimItem.InventDimId, qty, cwQty);
                this.insertOrUpdate(inventDimOnHandMember);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSpecPositive</Name>
				<Source><![CDATA[
    protected void initializeSpecPositive()
    {
        InventDimOnHandMember   inventDimOnHandMember;

        PdsCWInventQty          cwQty = 0;

        InventSum               inventSumSpec;
        InventDim               inventDimSpec;
        InventDimParm           inventDimParmAll;

        inventDimParmAll.ItemIdFlag     = NoYes::Yes;
        inventDimParmAll.setAllInventDim();
        QueryRun queryRunDimParm = new QueryRun(this.queryDimParm());
        while (queryRunDimParm.next())
        {
            InventSum inventSumItem = queryRunDimParm.get(tableNum(InventSum)) as InventSum;
            InventDim inventDimItem = InventDim::findOrCreate(queryRunDimParm.get(tableNum(InventDim)) as InventDim);

            InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(inventSumItem.ItemId, inventDimItem, inventDimParmOnHandLevel);
            InventQty qty = this.onHandQty(inventOnHandQty);

            cwQty = this.pdsCWOnHandQty(inventOnHandQty);

            if (qty > 0)
            {
                QueryRun queryRunSpec = new QueryRun(this.queryInventSumItemConfigSpec(inventSumItem.ItemId, inventDimItem));
                boolean anyNegative = false;
                while (queryRunSpec.next())
                {
                    inventSumSpec = queryRunSpec.get(tableNum(InventSum)) as InventSum;
                    inventDimSpec = queryRunSpec.get(tableNum(InventDim)) as InventDim;
                    inventOnHandQty = InventOnHandQty::newParametersActive(inventSumSpec.ItemId, inventDimSpec, inventDimParmAll, inventDimParmAll);
                    if (this.onHandQty(inventOnHandQty) < 0)
                    {
                        anyNegative = true;
                        break;
                    }
                }
                if (anyNegative)
                {
                    inventDimOnHandMember = InventDimOnHandMember::construct(inventSumItem.ItemId, inventDimItem.InventDimId, qty, cwQty);

                    this.insert(inventDimOnHandMember);
                }
                else
                {
                    queryRunSpec.reset();
                    while (queryRunSpec.next())
                    {
                        inventSumSpec = queryRunSpec.get(tableNum(InventSum)) as InventSum;
                        inventDimSpec = queryRunSpec.get(tableNum(InventDim)) as InventDim;
                        inventOnHandQty = InventOnHandQty::newParametersActive(inventSumSpec.ItemId, inventDimSpec, inventDimParmAll, inventDimParmAll);
                        qty = this.onHandQty(inventOnHandQty);

                        cwQty = this.pdsCWOnHandQty(inventOnHandQty);

                        if (qty != 0)
                        {
                            inventDimOnHandMember = InventDimOnHandMember::construct(inventSumSpec.ItemId, inventDimSpec.InventDimId, qty, cwQty);
                            this.insert(inventDimOnHandMember);
                        }
                    }
                }
            }
            if (qty < 0 && !onlyPositiveOnHands)
            {
                inventDimOnHandMember = InventDimOnHandMember::construct(inventSumItem.ItemId, inventDimItem.InventDimId, qty, cwQty);
                this.insert(inventDimOnHandMember);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    protected void insert(InventDimOnHandMember _inventDimOnHandMember)
    {
        this.add(_inventDimOnHandMember);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdate</Name>
				<Source><![CDATA[
    public void insertOrUpdate(InventDimOnHandMember _inventDimOnHandMember)
    {
        InventDimOnHandIterator inventDimOnHandIterator = this.onHandIterator();

        while (inventDimOnHandIterator.more())
        {
            InventDimOnHandMember inventDimOnHandMemberExisting = inventDimOnHandIterator.value();
            if (inventDimOnHandMemberExisting.parmItemId()      == _inventDimOnHandMember.parmItemId()          &&
                inventDimOnHandMemberExisting.parmInventDimId() == _inventDimOnHandMember.parmInventDimId())
            {
                InventQty qty = inventDimOnHandMemberExisting.parmInventQty() + _inventDimOnHandMember.parmInventQty();

                PdsCWInventQty cwQty = inventDimOnHandMemberExisting.pdsCWParmInventQty() + _inventDimOnHandMember.pdsCWParmInventQty();

                if (qty == 0)
                {
                    this.remove(inventDimOnHandMemberExisting);
                }
                else
                {
                    inventDimOnHandMemberExisting.parmInventQty(qty);

                    inventDimOnHandMemberExisting.pdsCWParmInventQty(cwQty);
                }
                return;
            }
            inventDimOnHandIterator.next();
        }
        this.insert(_inventDimOnHandMember);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHandIterator</Name>
				<Source><![CDATA[
    public InventDimOnHandIterator onHandIterator()
    {
        return new InventDimOnHandIterator(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHandQty</Name>
				<Source><![CDATA[
    abstract public InventQty onHandQty(InventOnHandQty _inventOnHandQty)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;
        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimOnHandLevel</Name>
				<Source><![CDATA[
    public InventDimOnHandLevel parmInventDimOnHandLevel(InventDimOnHandLevel _inventDimOnHandLevel = inventDimOnHandLevel)
    {
        inventDimOnHandLevel = _inventDimOnHandLevel;
        return inventDimOnHandLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParmCriteria</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParmCriteria(InventDimParm _inventDimParmCriteria = inventDimParmCriteria)
    {
        inventDimParmCriteria = _inventDimParmCriteria;
        return inventDimParmCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParmOnHandLevel</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParmOnHandLevel(InventDimParm _inventDimParmOnHandLevel = inventDimParmOnHandLevel)
    {
        inventDimParmOnHandLevel = _inventDimParmOnHandLevel;
        return inventDimParmOnHandLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemIdCriteria</Name>
				<Source><![CDATA[
    public ItemId parmItemIdCriteria(ItemId _itemIdCriteria = itemIdCriteria)
    {
        itemIdCriteria = _itemIdCriteria;
        return itemIdCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyPositiveOnHands</Name>
				<Source><![CDATA[
    public NoYes parmOnlyPositiveOnHands(NoYes _onlyPositiveOnHands = onlyPositiveOnHands)
    {
        onlyPositiveOnHands = _onlyPositiveOnHands;
        return onlyPositiveOnHands;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOnHandQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a default value of 0 for CW on-hand quantity
    /// It is overridden in derived classes.
    /// </summary>
    /// <param name="_inventOnHandQty">InventOnHandQty class.</param>
    /// <returns>CW quantity.</returns>
    public PdsCWInventQty pdsCWOnHandQty(InventOnHandQty _inventOnHandQty)
    {
        //
        // should not be abstract, otherwise the overriding classes
        // that we don't modify won't instantiate anymore
        //

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryDimParm</Name>
				<Source><![CDATA[
    protected Query queryDimParm()
    {
        ListEnumerator          dimFields   = InventDim::dimEnabledFieldList().getEnumerator();
        Query                   query       = new Query();
        QueryBuildDataSource    qbsSum      = query.addDataSource(tableNum(InventSum));
        QueryBuildDataSource    qbsDim      = qbsSum.addDataSource(tableNum(InventDim));
        boolean                 anyGroupBy  = false;

        qbsDim.joinMode(JoinMode::InnerJoin);
        qbsDim.relations(true);
        qbsDim.sortClear();

        qbsSum.addRange(fieldNum(InventSum, Closed)).value(enum2Value(NoYes::No));
        qbsSum.addRange(fieldNum(InventSum, ClosedQty)).value(enum2Value(NoYes::No));
        if (itemIdCriteria)
        {
            qbsSum.addRange(fieldNum(InventSum,ItemId)).value(queryValue(itemIdCriteria));
        }

        if (inventDimParmOnHandLevel.ItemIdFlag)
        {
            qbsSum.addSortField(fieldNum(InventSum,ItemId));
            anyGroupBy = true;
        }
        if (anyGroupBy)
        {
            qbsSum.orderMode(OrderMode::GroupBy);
        }

        inventDimParmCriteria.queryAddRange(qbsDim, inventDimCriteria);
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            InventSum::queryAddRangeBasedOnInventDimCriteria(qbsSum, inventDimCriteria);
        }
        inventDimParmOnHandLevel = InventDimParm::orParms(inventDimParmCriteria, inventDimParmOnHandLevel);

        anyGroupBy = false;
        while (dimFields.moveNext())
        {
            FieldId dimFieldId = dimFields.current();
            if (inventDimParmOnHandLevel.isFieldIdEnabled(dimFieldId))
            {
                qbsDim.addSortField(dimFieldId);
                anyGroupBy = true;
            }
        }
        if (anyGroupBy)
        {
            qbsDim.orderMode(OrderMode::GroupBy);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInventSumItemConfigSpec</Name>
				<Source><![CDATA[
    protected Query queryInventSumItemConfigSpec(
        ItemId      _itemId,
        InventDim   _inventDimCriteria)
    {
        ListEnumerator          dimFields   = InventDim::dimEnabledFieldList().getEnumerator();
        Query                   query       = new Query();
        QueryBuildDataSource    qbsSum      = query.addDataSource(tableNum(InventSum));
        QueryBuildDataSource    qbsDim      = qbsSum.addDataSource(tableNum(InventDim));

        qbsDim.joinMode(JoinMode::InnerJoin);
        qbsDim.relations(true);
        qbsDim.sortClear();

        qbsSum.addRange(fieldNum(InventSum, Closed)).value(enum2Value(NoYes::No));
        qbsSum.addRange(fieldNum(InventSum, ClosedQty)).value(enum2Value(NoYes::No));
        if (inventDimParmOnHandLevel.ItemIdFlag)
        {
            qbsSum.addRange(fieldNum(InventSum,ItemId)).value(queryValue(_itemId));
        }

        while (dimFields.moveNext())
        {
            FieldId dimFieldId = dimFields.current();
            if (inventDimParmOnHandLevel.isFieldIdEnabled(dimFieldId))
            {
                QueryBuildRange qbrDim = qbsDim.addRange(dimFieldId);
                if (_inventDimCriteria.(dimFieldId))
                {
                    qbrDim.value(_inventDimCriteria.(dimFieldId));
                }
                else
                {
                    qbrDim.value(SysQuery::valueEmptyString());
                }
                if (InventUseDimOfInventSumToggle::instance().isEnabled())
                {
                    QueryBuildRange qbrSum = qbsSum.addRange(InventDim::getInventSumFieldIdFromInventDimFieldId(dimFieldId));
                    if (_inventDimCriteria.(dimFieldId))
                    {
                        qbrSum.value(_inventDimCriteria.(dimFieldId));
                    }
                    else
                    {
                        qbrSum.value(SysQuery::valueEmptyString());
                    }
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryProductDimensions</Name>
				<Source><![CDATA[
    protected Query queryProductDimensions(
        ItemId                          _itemId,
        EcoResProductDimGroupSetup      _productDimGroupSetup)
    {
        ListEnumerator          dimFields   = InventDim::dimEnabledFieldList().getEnumerator();
        Query                   query       = new Query();
        QueryBuildDataSource    qbsSum      = query.addDataSource(tableNum(InventSum));
        QueryBuildDataSource    qbsDim      = qbsSum.addDataSource(tableNum(InventDim));
        boolean                 anyGroupBy  = false;

        qbsDim.joinMode(JoinMode::InnerJoin);
        qbsDim.relations(true);
        qbsDim.sortClear();

        qbsSum.addRange(fieldNum(InventSum, Closed)).value(enum2Value(NoYes::No));
        qbsSum.addRange(fieldNum(InventSum, ClosedQty)).value(enum2Value(NoYes::No));
        qbsSum.addRange(fieldNum(InventSum,ItemId)).value(queryValue(_itemId));

        qbsSum.addSortField(fieldNum(InventSum,ItemId));
        qbsSum.orderMode(OrderMode::GroupBy);

        inventDimParmCriteria.queryAddRange(qbsDim, inventDimCriteria);
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            InventSum::queryAddRangeBasedOnInventDimCriteria(qbsSum, inventDimCriteria);
        }

        inventDimParmOnHandLevel.clear();
        inventDimParmOnHandLevel.ItemIdFlag = NoYes::Yes;
        inventDimParmOnHandLevel = _productDimGroupSetup.inventDimParmActiveDimensions();

        anyGroupBy = false;
        while (dimFields.moveNext())
        {
            FieldId dimFieldId = dimFields.current();
            if (inventDimParmOnHandLevel.isFieldIdEnabled(dimFieldId))
            {
                qbsDim.addSortField(dimFieldId);
                anyGroupBy = true;
            }
        }
        if (anyGroupBy)
        {
            qbsDim.orderMode(OrderMode::GroupBy);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAvailPhysical</Name>
				<Source><![CDATA[
    public static InventDimOnHand newAvailPhysical(
        ItemId                  _itemId,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParmCriteria,
        InventDimOnHandLevel    _inventDimOnHandLevel,
        InventDimParm           _inventDimParmOnHandLevel)
    {
        InventDimOnHand inventDimOnHand = new InventDimOnHand_AvailPhysical();

        inventDimOnHand.parmItemIdCriteria(_itemId);
        inventDimOnHand.parmInventDimCriteria(_inventDimCriteria);
        inventDimOnHand.parmInventDimParmCriteria(_inventDimParmCriteria);
        inventDimOnHand.parmInventDimOnHandLevel(_inventDimOnHandLevel);
        inventDimOnHand.parmInventDimParmOnHandLevel(_inventDimParmOnHandLevel);
        inventDimOnHand.initialize();
        return inventDimOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPhysicalArrived</Name>
				<Source><![CDATA[
    public static InventDimOnHand newPhysicalArrived(
        ItemId                  _itemId,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParmCriteria,
        InventDimOnHandLevel    _inventDimOnHandLevel,
        InventDimParm           _inventDimParmOnHandLevel,
        NoYes                   _onlyPositiveOnHands = NoYes::No)
    {
        InventDimOnHand inventDimOnHand = new InventDimOnHand_PhysicalArrived();

        inventDimOnHand.parmItemIdCriteria(_itemId);
        inventDimOnHand.parmInventDimCriteria(_inventDimCriteria);
        inventDimOnHand.parmInventDimParmCriteria(_inventDimParmCriteria);
        inventDimOnHand.parmInventDimOnHandLevel(_inventDimOnHandLevel);
        inventDimOnHand.parmInventDimParmOnHandLevel(_inventDimParmOnHandLevel);
        inventDimOnHand.parmOnlyPositiveOnHands(_onlyPositiveOnHands);
        inventDimOnHand.initialize();
        return inventDimOnHand;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>