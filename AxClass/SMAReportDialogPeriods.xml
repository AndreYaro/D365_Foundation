<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMAReportDialogPeriods</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SMAReportDialogPeriods implements SysPackable
{
    ProjPeriodId    periodId;
    TransDate       periodTo;
    TransDate       periodFrom;

    #define.CurrentVersion(1)
    #localMacro.CurrentList
        periodId,
        periodFrom,
        periodTo
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildPeriods</Name>
				<Source><![CDATA[
    public container buildPeriods()
    {
        ProjPeriodLine  projPeriodLine;
        container       periods;

        while select PeriodId, PeriodFrom, PeriodTo from projPeriodLine
            where projPeriodLine.PeriodId   == this.parmPeriodId()  &&
                  projPeriodLine.PeriodFrom >= this.parmPeriodFrom() &&
                  projPeriodLine.PeriodTo   <= this.parmPeriodTo()
        {
            periods += [[projPeriodLine.PeriodFrom, projPeriodLine.PeriodTo]];
        }

        return periods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNextDates</Name>
				<Source><![CDATA[
    public container initNextDates(ProjPeriodId _projPeriodId = this.parmPeriodId(), TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate       fromdate;
        TransDate       toDate;
        ProjPeriodLine  projPeriodLine = ProjPeriodLine::smaFindNextFromDate(_projPeriodId, _transDate);

        if (!projPeriodLine)
        {
            fromdate    = dateNull();
            toDate      = dateNull();
        }
        else
        {
            fromdate    = projPeriodLine.PeriodFrom;
            toDate      = projPeriodLine.PeriodTo;
        }

        return [fromdate, toDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodFrom</Name>
				<Source><![CDATA[
    public TransDate parmPeriodFrom(TransDate _periodFrom = periodFrom)
    {
        periodFrom = _periodFrom;

        return periodFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodId</Name>
				<Source><![CDATA[
    public ProjPeriodId parmPeriodId(ProjPeriodId _projPeriodId = periodId)
    {
        periodId = _projPeriodId;

        return periodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodTo</Name>
				<Source><![CDATA[
    public TransDate parmPeriodTo(TransDate _projPeriodTo = periodTo)
    {
        periodTo = _projPeriodTo;

        return periodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret = true;

        if (!this.parmPeriodId())
        {
            // Field Period code must be filled in.
            return checkFailed(strfmt("@SYS26332", "@SYS22717"));
        }

        if (!this.parmPeriodFrom() || !this.parmPeriodTo())
        {
            return checkFailed("@SYS95151");
        }

        ret = ret && this.validateDateConsistensy();
        ret = ret && this.validatePeriodFrom();
        ret = ret && this.validatePeriodTo();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateConsistensy</Name>
				<Source><![CDATA[
    public boolean validateDateConsistensy()
    {
        if (this.parmPeriodId())
        {
            if (this.parmPeriodTo() && this.parmPeriodFrom() > this.parmPeriodTo())
            {
                // From date must be before To date
                return checkFailed("@SYS91020");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodFrom</Name>
				<Source><![CDATA[
    public boolean validatePeriodFrom()
    {
        ProjPeriodLine      projPeriodLine;

        if (this.parmPeriodId())
        {
            projPeriodLine = ProjPeriodLine::findFromPeriodFrom( this.parmPeriodId(),
                                                                 this.parmPeriodFrom());
            if (!projPeriodLine)
            {
                // The entered date must follow the Period code.
                return checkFailed("@SYS84221");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodTo</Name>
				<Source><![CDATA[
    public boolean validatePeriodTo()
    {
        ProjPeriodLine      projPeriodLine;

        if (this.parmPeriodId())
        {
            projPeriodLine = ProjPeriodLine::findFromPeriodTo(this.parmPeriodId(), this.parmPeriodTo());

            if (!projPeriodLine)
            {
                // The entered date must follow the Period code.
                return checkFailed("@SYS84221");
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>