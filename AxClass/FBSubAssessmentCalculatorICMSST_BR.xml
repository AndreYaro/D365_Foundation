<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSubAssessmentCalculatorICMSST_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Totals calculator for ICMS-ST sub tax assessment.
/// </summary>
public class FBSubAssessmentCalculatorICMSST_BR
{
    protected AmountMST debitAdjustments, creditAdjustments, debitsOutgoing, creditReversals, withTaxCredit, debitReversals, creditBalanceFromPrevious, deductions, collectAmounts, balance, creditInventory;

    protected boolean isRetail;
    protected FBBookingPeriod_BR fbBookingPeriod;
    protected FBSubTaxAssessment_BR subTaxAssessment;

    protected RunbaseProgress progress;

    #FiscalBooks_BR

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the totals.
    /// </summary>
    public void calculate()
    {
        if (progress)
        {
            progress.setCaption("@SYS58374");
            progress.setTotal(9);
        }

        debitAdjustments = this.getDebitAdjustmentsAmount();
        this.incProgressCount();
        creditAdjustments = this.getCreditAdjustmentsAmount();
        this.incProgressCount();
        debitsOutgoing = this.getFDAdjustmentAmount(FBFiscalDocumentClassificationICMS_BR::DebitReversal);
        this.incProgressCount();
        creditReversals = this.getCreditReversalAdjustmentAmount();
        this.incProgressCount();
        withTaxCredit = this.getFDAdjustmentAmount(FBFiscalDocumentClassificationICMS_BR::CreditReversal);
        this.incProgressCount();
        debitReversals = 0;
        this.incProgressCount();
        creditInventory = isRetail ? this.getCreditInventoryAmount() / 3 : 0;
        this.incProgressCount();
        creditBalanceFromPrevious = 0;
        this.incProgressCount();
        collectAmounts = this.getFDAdjustmentAmount(FBFiscalDocumentClassificationICMS_BR::SpecialPurposeDebit);
        this.incProgressCount();

        balance = debitsOutgoing + debitAdjustments + creditReversals - withTaxCredit - creditAdjustments - creditInventory - debitReversals - creditBalanceFromPrevious;

        deductions = balance > 0 ? balance : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the balance amount.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    public AmountMST getBalance()
    {
        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amounts collected or to be collected, extra-assessment.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    public AmountMST getCollectAmounts()
    {
        return collectAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the credit adjustment amount from incoming fiscal documents.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    public AmountMST getCreditAdjustments()
    {
        return creditAdjustments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditAdjustmentsAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the credit adjustment amount from incoming fiscal documents.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    protected AmountMST getCreditAdjustmentsAmount()
    {
        Query q = new Query(isRetail ? queryStr(FBBlock1900CreditTotalsRetail_BR) : queryStr(FBBlock1900CreditTotals_BR));

        FBBookingPeriod_BR::addQueryRange(q, fbBookingPeriod.RecId);

        if (!isRetail)
        {
            FBBookingPeriod_BR::addQueryRange(q, fbBookingPeriod.RecId, 2);
        }

        QueryRun qr = new QueryRun(q);
        AmountMST ret;
        if (qr.next())
        {
            if (isRetail)
            {
                FBICMSSTOrICMSIncomingTaxTrans_BR fbICMSSTOrICMSIncomingTaxTrans;

                fbICMSSTOrICMSIncomingTaxTrans = qr.get(tableNum(FBICMSSTOrICMSIncomingTaxTrans_BR));

                ret = fbICMSSTOrICMSIncomingTaxTrans.TaxAmountOther;
            }
            else
            {
                FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumed;

                fiscalDocumentTaxTransPresumed = qr.get(tableNum(FiscalDocumentTaxTransPresumed_BR));

                ret = fiscalDocumentTaxTransPresumed.SPEDPresumedTaxAmount;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditBalanceFromPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the credit balance from previous period amount.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    public AmountMST getCreditBalanceFromPreviousPeriod()
    {
        return creditBalanceFromPrevious;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the credit of inventory adjustment amount.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    public AmountMST getCreditInventory()
    {
        return creditInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditInventoryAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the credit of inventory amount.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    protected AmountMST getCreditInventoryAmount()
    {
        FBBookingPeriod_BR creditInventoryBookingPeriod, currentBookingPeriod;
        currentBookingPeriod = fbBookingPeriod;
        for (int i = 1; i <= 3; i++)
        {
            if (currentBookingPeriod.isCreditInventoryAdjustmentOn())
            {
                creditInventoryBookingPeriod = currentBookingPeriod;
                break;
            }

            currentBookingPeriod = currentBookingPeriod.getPreviousBookingPeriod();
        }

        AmountMST ret;

        if (creditInventoryBookingPeriod)
        {
            FBICMSSTInventoryBalance_BR inventoryBalance;

            select sum(ICMSSTTaxAmount) from inventoryBalance
                where inventoryBalance.FBBookingPeriod_BR == creditInventoryBookingPeriod.getPreviousBookingPeriod().RecId;

            ret = inventoryBalance.ICMSSTTaxAmount;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditReversalAdjustmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the credit reversal amount from outgoing fiscal documents.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    /// <remarks>
    /// Credit reversal amount is valid only for retail company, otherwise - it is zero.
    /// </remarks>
    protected AmountMST getCreditReversalAdjustmentAmount()
    {
        AmountMST ret;

        if (isRetail)
        {
            Query q = new Query(queryStr(FBBlock1900CreditReversalTotals_BR));

            FBBookingPeriod_BR::addQueryRange(q, fbBookingPeriod.RecId);

            QueryRun qr = new QueryRun(q);
            if (qr.next())
            {
                FBCreditReversalFromOutgoingFD_BR fbCreditReversalFromOutgoingFD = qr.get(tableNum(FBCreditReversalFromOutgoingFD_BR));

                ret = fbCreditReversalFromOutgoingFD.TaxAmount;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditReversals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the credit reversal amount from outgoing fiscal documents.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    public AmountMST getCreditReversals()
    {
        return creditReversals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the debit adjustment amount from outgoing fiscal documents.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    public AmountMST getDebitAdjustments()
    {
        return debitAdjustments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitAdjustmentsAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the debit adjustment amount from outgoing fiscal documents.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    protected AmountMST getDebitAdjustmentsAmount()
    {
        Query q = new Query(isRetail ? queryStr(FBBlock1900DebitTotalsRetail_BR) : queryStr(FBBlock1900DebitTotals_BR));

        FBBookingPeriod_BR::addQueryRange(q, fbBookingPeriod.RecId);

        QueryRun qr = new QueryRun(q);
        AmountMST ret;
        if (qr.next())
        {
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans = qr.get(tableNum(FiscalDocumentTaxTrans_BR));

            ret = fiscalDocumentTaxTrans.TaxAmountOther;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitOutgoing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amounts of ICMS debits from outgoing fiscal documents.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    public AmountMST getDebitOutgoing()
    {
        return debitsOutgoing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitReversals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the debit reversal amount.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    public AmountMST getDebitReversals()
    {
        return debitReversals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeductions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the deductions amount.
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    public AmountMST getDeductions()
    {
        return deductions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFDAdjustmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total by document adjustment amount for current sub-assessment for specified classification.
    /// </summary>
    /// <param name="_classification">
    /// The classification of by document adjustment code, for which to calculate total amount.
    /// </param>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    protected AmountMST getFDAdjustmentAmount(FBFiscalDocumentClassificationICMS_BR _classification)
    {
        FBFiscalDocumentAdjustment_BR fiscalDocumentAdjustment;
        FBFiscalDocumentAdjustmentCodeICMS_BR fiscalDocumentAdjustmentCode;
        FBTaxAssessment_BR taxAssessment;

        if (subTaxAssessment)
        {
            select sum(TaxAmount) from fiscalDocumentAdjustment
                where fiscalDocumentAdjustment.IsCancelled == false
                exists join fiscalDocumentAdjustmentCode
                    where fiscalDocumentAdjustmentCode.RecId == fiscalDocumentAdjustment.FBFiscalDocumentAdjustmentCodeICMS_BR
                        && fiscalDocumentAdjustmentCode.Classification == _classification
                        && fiscalDocumentAdjustmentCode.AssessmentType == enum2int(subTaxAssessment)
                exists join taxAssessment
                    where taxAssessment.RecId == fiscalDocumentAdjustment.FBTaxAssessment_BR
                        && taxAssessment.FBBookingPeriod_BR == fbBookingPeriod.RecId;
        }

        return fiscalDocumentAdjustment.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchasesWithTaxCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount of credits for "Entries and purchases with tax credit".
    /// </summary>
    /// <returns>
    /// The total amount in master currency.
    /// </returns>
    public AmountMST getPurchasesWithTaxCredit()
    {
        return withTaxCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFBBookingPeriod</Name>
				<Source><![CDATA[
    public FBBookingPeriod_BR parmFBBookingPeriod(FBBookingPeriod_BR _fbBookingPeriod = fbBookingPeriod)
    {
        fbBookingPeriod = _fbBookingPeriod;

        return fbBookingPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRetail</Name>
				<Source><![CDATA[
    public boolean parmIsRetail(boolean _isRetail = isRetail)
    {
        isRetail = _isRetail;

        return isRetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProgress</Name>
				<Source><![CDATA[
    public RunbaseProgress parmProgress(RunbaseProgress _progress = progress)
    {
        progress = _progress;

        return progress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubTaxAssessment</Name>
				<Source><![CDATA[
    public FBSubTaxAssessment_BR parmSubTaxAssessment(FBSubTaxAssessment_BR _subTaxAssessment = subTaxAssessment)
    {
        subTaxAssessment = _subTaxAssessment;

        return subTaxAssessment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FBSubAssessmentCalculatorICMSST_BR construct()
    {
        return new FBSubAssessmentCalculatorICMSST_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>incProgressCount</Name>
				<Source><![CDATA[
    private void incProgressCount()
    {
        if (progress)
        {
            progress.incCount();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>