<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyUpdateRemPhys_SalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InterCompanyUpdateRemPhys_SalesLine extends InterCompanyUpdateRemPhys
{
    SalesLine   salesLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public void parmBuffer(Common _buffer)
    {
        super(_buffer);
        salesLine = _buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeExternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes physical quantities from intercompany sales order line to intercompany purchase order line in other company
    /// </summary>
    public void synchronizeExternal()
    {
        PurchLine       purchLine;
        InventQty       newRemainInventPhysical;
        InventQty       newRemainPurchSalesPhysical;
        PdsCWInventQty  newPdsCWRemainInventPhysical;
        boolean         interCompanyStocked;
        boolean         isStocked = salesLine.isStocked();
        
        if (salesLine.InterCompanyInventTransId)
        {
            UnitOfMeasureSymbol salesCompanyInventUnit = salesLine.inventTable().inventUnitId();

            changecompany(salesLine.salesTable().InterCompanyCompanyId)
            {
                setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

                purchLine = PurchLine::findInventTransId(salesLine.InterCompanyInventTransId,true);
                //
                //  No conversion needed between sales/purchase units since they have to match in an intercompany chain
                //

                // Handle if the product is stocked in one company and not stocked in the other company
                interCompanyStocked = purchLine.isStocked();

                if (isStocked && !interCompanyStocked && diffInventPhysical)
                {
                    // If ICPO line is not stocked then keep InventPhysical at zero
                    diffInventPhysical = 0;
                }
              
                this.resetPurchLineDiffPhysical(purchLine, interCompanyStocked, isStocked);
                 
                if (diffInventPhysical)
                {
                    // Inventory units might differ
                    UnitOfMeasureSymbol purchCompanyInventUnit = purchLine.inventTable().inventUnitId();
                    diffInventPhysical = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
                                                                                                               purchLine.InventDimId,
                                                                                                               diffInventPhysical,
                                                                                                               salesCompanyInventUnit,
                                                                                                               purchCompanyInventUnit,
                                                                                                               NoYes::Yes);
                }


                if (!isStocked && interCompanyStocked && !diffInventPhysical)
                {
                    // If ICSO line is notstocked then diffInventPhysical is zero and we need to calculate the value to synchronize
                    diffInventPhysical = purchLine.calcQtyOrdered(diffPurchSalesPhysical);
                }

                newRemainInventPhysical         = purchLine.RemainInventPhysical      - diffInventPhysical;
                newRemainPurchSalesPhysical     = purchLine.RemainPurchPhysical       - diffPurchSalesPhysical;
                newPdsCWRemainInventPhysical    = purchLine.PdsCWRemainInventPhysical - diffPdsCWRemainInventPhysical;

                if (salesLine.creditNoteLine())
                {
                    if (newRemainInventPhysical > 0 || newRemainPurchSalesPhysical > 0)
                    {
                        throw error("@SYS12641");
                    }
                }
                else
                {
                    if (newRemainInventPhysical < 0 || newRemainPurchSalesPhysical < 0)
                    {
                        throw error("@SYS12641");
                    }
                }

                //
                //  Remain physical must not be negative
                //
                purchLine.RemainInventPhysical      = newRemainInventPhysical;
                purchLine.RemainPurchPhysical       = newRemainPurchSalesPhysical;
                purchLine.PdsCWRemainInventPhysical = newPdsCWRemainInventPhysical;

                setPrefix(#PreFixField(PurchLine, PurchId));
                if (!purchLine.validateWrite())
                {
                    throw error("@SYS18738");
                }
            
                InterCompanyUpdateRemPhys::synchronize(purchLine,
                                                       diffInventPhysical,
                                                       diffPurchSalesPhysical,
                                                       InterCompanySkipUpdate::InterCompany,
                                                       diffPdsCWRemainInventPhysical);

                // Rereading the PurchLine buffer in order to avoid update conflicts.
                // In certain drop shipment scenarios, the PurchLine buffer is updated in the call to InterCompanyUpdateRemPhys::synchronize().
                if (purchLine.ItemRefType  == InventRefType::Sales
                    &&  purchLine.InventRefTransId
                    &&  purchLine.isDropShipment())
                {
                    purchLine.reread();
                    purchLine.RemainInventPhysical      = newRemainInventPhysical;
                    purchLine.RemainPurchPhysical       = newRemainPurchSalesPhysical;
                    purchLine.PdsCWRemainInventPhysical = newPdsCWRemainInventPhysical;
                }

                purchLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeInternal</Name>
				<Source><![CDATA[
    public void synchronizeInternal()
    {
        PurchLine   purchLine;
        InventQty   newRemainInventPhysical;
        InventQty   newRemainPurchSalesPhysical;
        InventQty   newDiffInventPhysical;
        InventQty   newDiffPurchSalesPhysical;
        PdsCWInventQty newPdsCWRemainInventPhysical;

        if (salesLine.InventRefType == InventRefType::Purch
        &&  salesLine.InventRefTransId
        &&  salesLine.DeliveryType == TradeLineDlvType::DropShip)
        {
            purchLine = PurchLine::findInventTransId(salesLine.InventRefTransId,true);

            if (purchLine.ProjId && !SalesTable::find(salesLine.SalesId).InterCompanyOrder)
            {
                // To avoid executing infinite loop when project sales order with direct delivery is cancelled.
                str cacheKey =  purchLine.ProjId + ':' + purchLine.PurchId + ':' + purchLine.InventTransId + ':' + purchLine.ProjTransId;
                SysGlobalCache globalCache = appl.globalCache();

                globalCache.set(classStr(InterCompanyUpdateRemPhys_SalesLine), cacheKey, true);
            }

            if (purchLine.InterCompanyInventTransId
            ||  purchLine.isDropShipment())
            {
                //
                //  Unit conversion is performed internally, since Sales- and PurchUnit can differ
                //
                if (purchLine.PurchUnit != salesLine.SalesUnit)
                {
                    diffPurchSalesPhysical = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                                   salesLine.InventDimId,
                                                                                                                   diffPurchSalesPhysical,
                                                                                                                   salesLine.SalesUnit,
                                                                                                                   purchLine.PurchUnit,
                                                                                                                   NoYes::Yes);
                    diffInventPhysical     = purchLine.calcQtyOrdered(diffPurchSalesPhysical);
                }

                //Handle situations where Deliver remainder is set to 0 on Purch line 
                if (IntercompanyTransferInventDimOverDeliveryFlight::instance().isEnabled()
                    && IntercompanyTransferInventDimOverDeliveryContext::currentIsOverDeliverySync()
                    && purchLine.RemainInventPhysical == 0 
                    && diffInventPhysical < 0)
                {
                    newRemainInventPhysical = 0;
                }
                else
                {
                    newRemainInventPhysical      = purchLine.RemainInventPhysical - diffInventPhysical;
                }

                newRemainPurchSalesPhysical  = purchLine.RemainPurchPhysical  - diffPurchSalesPhysical;
                newPdsCWRemainInventPhysical = purchLine.PdsCWRemainInventPhysical - diffPdsCWRemainInventPhysical;

                if (!salesLine.creditNoteLine() &&
                    (newRemainInventPhysical < 0 || newRemainPurchSalesPhysical < 0))
                {
                    throw error("@SYS12641");
                }

                newDiffInventPhysical       = purchLine.RemainInventPhysical - newRemainInventPhysical;
                newDiffPurchSalesPhysical   = purchLine.RemainPurchPhysical  - newRemainPurchSalesPhysical;

                purchLine.RemainInventPhysical      = newRemainInventPhysical;
                purchLine.RemainPurchPhysical       = newRemainPurchSalesPhysical;
                purchLine.PdsCWRemainInventPhysical = newPdsCWRemainInventPhysical;

                setPrefix(#PreFixField(PurchLine, PurchId));

                if (purchLine.validateWrite())
                {
                    InterCompanyUpdateRemPhys::synchronize(purchLine,
                                                           newDiffInventPhysical,
                                                           newDiffPurchSalesPhysical,
                                                           InterCompanySkipUpdate::Internal,
                                                           diffPdsCWRemainInventPhysical);
                    purchLine.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPurchLineDiffPhysical</Name>
				<Source><![CDATA[
    private void resetPurchLineDiffPhysical(PurchLine _purchLine, boolean _interCompanyStocked, boolean _isStocked)
    {
        // Skip to cancel or reduce deliver remainder of IC purch line,
        // when IC purch line has performed product receipt with 'Canceled', 'Received' or 'Invoiced' marked.
        if (_purchLine.PurchStatus == PurchStatus::Received 
            || _purchLine.PurchStatus == PurchStatus::Invoiced
            || _purchLine.PurchStatus == PurchStatus::Canceled)
        {
            // Reset delivery remainder for stocked intercompany purchase lines
            if (_isStocked 
                && _interCompanyStocked
                && diffInventPhysical > 0 && diffPurchSalesPhysical > 0)
            {
                diffInventPhysical = 0;
                diffPurchSalesPhysical = 0;
            }
            // Reset delivery remainder for non-stocked intercompany purchase lines
            else
            {
                diffInventPhysical     = diffInventPhysical > 0 ? 0 : diffInventPhysical;
                diffPurchSalesPhysical = diffPurchSalesPhysical > 0 ? 0 : diffPurchSalesPhysical;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>