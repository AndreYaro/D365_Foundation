<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingOpenSalesSummaryFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingOpenSalesSummaryFilter</c> class provides tracing hierarchy filtering for
///    the <see cref="SalesLine form"/> form for showing not shipped sales order lines.
/// </summary>
class InventTrackingOpenSalesSummaryFilter extends InventTrackingShippedSalesSummaryFilter
{
    Set                 includedInventTransId;
    List                transKeyDimFieldList;

    InventDimParm       trackingInventDimParm;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the given inventory transaction ID to the filter table.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The inventory transaction ID to add.
    /// </param>
    private void addToFilter(InventTransId _inventTransId)
    {
        SalesLineTmpFilter      salesLineTmpFilter = filterTmp as salesLineTmpFilter;

        if (includedInventTransId.in(_inventTransId))
        {
            return;
        }
        includedInventTransId.add(_inventTransId);

        salesLineTmpFilter.InventTransId = _inventTransId;
        salesLineTmpFilter.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>captionSuffix</Name>
				<Source><![CDATA[
    protected str captionSuffix()
    {
        #define.ListSeparator(', ')

        return "@SYS4004863" + #ListSeparator + tracingCriteria.captionSuffix();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnInventTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>Query</c> for retrieving the <c>InventTransId</c> for the not shipped return order lines that have <c>InventTransOrigin</c> records.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID to search for.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The dimensions to search for.
    /// </param>
    /// <param name="_inventDimParm">
    ///    An <c>InventDimParm</c> record specifying which fields to use as ranges.
    /// </param>
    /// <returns>
    ///    A <c>Query</c> to use for retrieving the <c>InventTransId</c> for the not shipped return order lines with <c>InventTransOrigin</c> records.
    /// </returns>
    private Query createReturnInventTransQuery(ItemId _itemId, InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        Query                   query = new Query();

        QueryBuildDataSource dsInventTransOrigin = query.addDataSource(tableNum(InventTransOrigin));
        dsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, InventTransId));
        dsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(SysQuery::value(InventTransType::Sales));

        QueryBuildDataSource dsInventTrans = dsInventTransOrigin.addDataSource(tableNum(InventTrans));
        dsInventTrans.relations(true);
        dsInventTrans.joinMode(JoinMode::ExistsJoin);
        dsInventTrans.addRange(fieldNum(InventTrans, ItemId)).value(queryValue(_itemId));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Ordered));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Arrived));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Registered));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::None));

        this.inventDimExistsJoin(dsInventTrans, _inventDimCriteria, _inventDimParm, true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnSalesLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>Query</c> for retrieving the <c>InventTransId</c> for the not shipped return order lines that do not yet have any
    ///    related <c>InventTransOrigin</c> records.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID to search for.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The dimensions to search for.
    /// </param>
    /// <param name="_inventDimParm">
    ///    An <c>InventDimParm</c> record specifying which fields to use as ranges.
    /// </param>
    /// <returns>
    ///    A <c>Query</c> to use for retrieving the <c>InventTransId</c> for the not shipped return order lines without <c>InventTransOrigin</c> records.
    /// </returns>
    private Query createReturnSalesLineQuery(ItemId _itemId, InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        Query                   query = new Query();

        QueryBuildDataSource dsSalesLine = query.addDataSource(tableNum(SalesLine));
        dsSalesLine.addSelectionField(fieldNum(SalesLine, InventTransId));
        dsSalesLine.addRange(fieldNum(SalesLine, ItemId)).value(queryValue(_itemId));
        dsSalesLine.addRange(fieldNum(SalesLine, ExpectedRetQty)).value('<0');

        QueryBuildDataSource dsInventDim = this.inventDimExistsJoin(dsSalesLine, _inventDimCriteria, _inventDimParm, true);

        QueryBuildDataSource dsInventTransOrigin = dsInventDim.addDataSource(tableNum(InventTransOrigin));
        dsInventTransOrigin.joinMode(JoinMode::NoExistsJoin);
        dsInventTransOrigin.addLink(fieldNum(SalesLine, InventTransId), fieldNum(InventTransOrigin, InventTransId), dsSalesLine.name());

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesInventTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>Query</c> for retrieving the <c>InventTransId</c> for the not shipped sales order lines.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID to search for.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The dimensions to search for.
    /// </param>
    /// <param name="_inventDimParm">
    ///    An <c>InventDimParm</c> record specifying which fields to use as ranges.
    /// </param>
    /// <returns>
    ///    A <c>Query</c> to use for retrieving the <c>InventTransId</c> for the not shipped sales order lines.
    /// </returns>
    private Query createSalesInventTransQuery(ItemId _itemId, InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        Query                   query = new Query();

        QueryBuildDataSource dsInventTransOrigin = query.addDataSource(tableNum(InventTransOrigin));
        dsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, InventTransId));
        dsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(SysQuery::value(InventTransType::Sales));

        QueryBuildDataSource dsInventTrans = dsInventTransOrigin.addDataSource(tableNum(InventTrans));
        dsInventTrans.relations(true);
        dsInventTrans.joinMode(JoinMode::ExistsJoin);
        dsInventTrans.addRange(fieldNum(InventTrans, ItemId)).value(queryValue(_itemId));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::OnOrder));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::ReservOrdered));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::ReservPhysical));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::Picked));
        dsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::None));

        this.inventDimExistsJoin(dsInventTrans, _inventDimCriteria, _inventDimParm, true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInFilterDTO</Name>
				<Source><![CDATA[
    protected boolean includeInFilterDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();

        includedInventTransId = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKeyDataDTO</Name>
				<Source><![CDATA[
    protected void insertKeyDataDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        InventDim           inventDimCriteria = _inventTransDTO.inventDim();

        InventTransOrigin   inventTransOrigin;

        QueryRun queryRun = new QueryRun(this.createSalesInventTransQuery(_inventTransOriginDTO.itemId(), inventDimCriteria, trackingInventDimParm));
        while (queryRun.next())
        {
            inventTransOrigin = queryRun.get(tableNum(InventTransOrigin));
            this.addToFilter(inventTransOrigin.InventTransId);
        }

        queryRun = new QueryRun(this.createReturnInventTransQuery(_inventTransOriginDTO.itemId(), inventDimCriteria, trackingInventDimParm));
        while (queryRun.next())
        {
            inventTransOrigin = queryRun.get(tableNum(InventTransOrigin));
            this.addToFilter(inventTransOrigin.InventTransId);
        }

        queryRun = new QueryRun(this.createReturnSalesLineQuery(_inventTransOriginDTO.itemId(), inventDimCriteria, trackingInventDimParm));
        while (queryRun.next())
        {
            SalesLine salesLine = queryRun.get(tableNum(SalesLine));
            this.addToFilter(salesLine.InventTransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        transKeyDimFieldList = InventDim::dimTrackingDimFieldList();

        trackingInventDimParm.setAllInventDim();
        trackingInventDimParm.clearProductDimensions();
        trackingInventDimParm.clearStorageDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transKeyDTO</Name>
				<Source><![CDATA[
    protected str transKeyDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        InventDim       inventDim = _inventTransDTO.inventDim();
        str             key       = _inventTransOriginDTO.itemId();
        ListEnumerator  fieldEnum = transKeyDimFieldList.getEnumerator();

        while (fieldEnum.moveNext())
        {
            key += ':' + inventDim.(fieldEnum.current());
        }
        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventTrackingOpenSalesSummaryFilter construct()
    {
        return new InventTrackingOpenSalesSummaryFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTrackingOpenSalesSummaryFilter</c> class with a given tracing hierarchy.
    /// </summary>
    /// <param name="_hierarchy">
    ///    The tracing hierarchy to use.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTrackingOpenSalesSummaryFilter</c> class.
    /// </returns>
    public static InventTrackingOpenSalesSummaryFilter newHierarchy(
        InventTrackingDimTracingHierarchy   _hierarchy)
    {
        InventTrackingOpenSalesSummaryFilter filter = InventTrackingOpenSalesSummaryFilter::construct();

        filter.parmTracingHierarchy(_hierarchy);

        return filter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
