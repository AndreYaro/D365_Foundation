<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumLogTTSCleanupService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Net requirement cleanup service.
/// </summary>
internal final class InventSumLogTTSCleanupService
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runTask</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void runTask(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        ProcessExecutionSourceStatus processExecutionSourceStatus = ProcessExecutionSourceStatus::Success;
        int startLine = infologLine();

        try
        {
            new InventSumLogTTSCleanup().run();
        }

        // Some batch maintenance required by process automation to ensure we persist a record for the batch task execution.
        catch
        {
            // Don't throw, just record that we failed.
            processExecutionSourceStatus = ProcessExecutionSourceStatus::Error;
        }
        finally
        {
            ProcessExecutionSourceLink processExecutionSourceLink = ProcessExecutionSourceLink::writeSourceLinkItem(this.createExecutionSourceLinkItem(_processScheduleWorkItem, processExecutionSourceStatus));

            if (processExecutionSourceStatus == ProcessExecutionSourceStatus::Error)
            {
                Integer currentLine = infologLine();

                container infoLogData = infolog.copy(startLine + 1, currentLine);

                SysInfologEnumerator infoLogEnumerator = SysInfologEnumerator::newData(infoLogData);
                while (infoLogEnumerator.moveNext())
                {
                    ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::newFromProcessExecutionSourceLinkAndMessage(processExecutionSourceLink.RecId, infoLogEnumerator.currentException(), infoLogEnumerator.currentMessage());
                    ProcessExecutionMessageLog::insertMessage(messageLogItem);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExecutionSourceLinkItem</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLinkItem createExecutionSourceLinkItem(ProcessScheduleWorkItem _contract, ProcessExecutionSourceStatus _processExecutionSourceStatus)
    {
        ProcessExecutionSourceLinkItem linkItem = ProcessExecutionSourceLinkItem::construct();

        linkItem.parmExecutionId(_contract.parmExecutionId());
        linkItem.parmExecutionSourceStatus(_processExecutionSourceStatus);
        linkItem.parmHeader("@SCM:NetRequirementsCleanup");
        if (_processExecutionSourceStatus == ProcessExecutionSourceStatus::Error)
        {
            linkItem.parmMessage("@SCM:InventSumLogTTSCleanupServiceError");
        }
        else
        {
            linkItem.parmMessage("@SCM:InventSumLogTTSCleanupServiceSuccess");
        }
        linkItem.parmProcessScheduleSeriesPatternRecId(_contract.parmProcessScheduleSeriesPatternRecId());
        linkItem.parmProcessScheduleOccurrenceRecId(_contract.parmProcessScheduleOccurrenceRecId());
        linkItem.parmSourceRecId(0);
        linkItem.parmSourceTableId(0);

        return linkItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>