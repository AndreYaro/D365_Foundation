<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAutomationStatementFormViewMatchingStatusPresenter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAutomationStatementFormViewMatchingStatusPresenter</c> class is the helper class for controlling the
/// form contrls of LineViewMatchingStatus of the <c>BankAutomationStatementForm</c> form.
/// </summary>
internal final class BankAutomationStatementFormViewMatchingStatusPresenter
{
    private FormRun formRun;
    private FormDataSource dsStatement;
    private FormDataSource dsReportEntry;
    private Query reportEntryQueryOrigin;
    private BankAutomationStatementFormViewMatchingStatusType currentStatusType;

    private container formPartControlNameContainer = [
        formControlStr(BankAutomationStatementForm, BankStatementTotalCard),
        formControlStr(BankAutomationStatementForm, BankStatementUnmatchedCard),
        formControlStr(BankAutomationStatementForm, BankStatementMatchedCard),
        formControlStr(BankAutomationStatementForm, BankStatementReconciledCard)];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(FormRun _formRun)
    {
        formRun = _formRun;
        dsStatement = formRun.dataSource(formDataSourceStr(BankAutomationStatementForm, BankStmtISOAccountStatement));;
        dsReportEntry = formRun.dataSource(formDataSourceStr(BankAutomationStatementForm, BankStmtISOReportEntry));;
        currentStatusType = BankAutomationStatementFormViewMatchingStatusType::Total;
        reportEntryQueryOrigin = new Query(dsReportEntry.query().pack(false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of <c>BankAutomationStatementFormViewMatchingStatusPresenter</c>.
    /// </summary>
    /// <param name="_formRun">The form run instance of <c>BankAutomationStatementForm</c>.</param>
    /// <returns>Returns instance of <c>BankAutomationStatementFormViewMatchingStatusPresenter</c>.</returns>
    internal static BankAutomationStatementFormViewMatchingStatusPresenter construct(FormRun _formRun)
    {
        return new BankAutomationStatementFormViewMatchingStatusPresenter(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportEntryQueryOriginCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the instance of original <c>BankStmtISOReportEntry</c> data source query.
    /// </summary>
    /// <returns>Returns the copy of the instance of original <c>BankStmtISOReportEntry</c> data source query.</returns>
    internal Query createReportEntryQueryOriginCopy()
    {
        return new Query(reportEntryQueryOrigin.pack(false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportEntryQueryOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new query instance copy of original <c>BankStmtISOReportEntry</c> data source query copy.
    /// </summary>
    /// <returns>Returns the new query instance copy of original <c>BankStmtISOReportEntry</c> data source query copy.</returns>
    private Query createReportEntryQueryOrigin()
    {
        Query reportEntryQueryOriginCopy = this.createReportEntryQueryOriginCopy();
        QueryBuildDataSource qbds = reportEntryQueryOriginCopy.dataSourceTable(tableNum(BankStmtISOReportEntry));
        BankStmtISOAccountStatement currentStatementCursor = dsStatement.cursor();
        qbds.addRange(fieldNum(BankStmtISOReportEntry, BankStmtISOAccountStatement)).value(SysQuery::value(currentStatementCursor.RecId));
        return reportEntryQueryOriginCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBookQueryToMatchingStatusType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the bank statement line details book, lists all lines based on the <c>BankAutomationStatementFormViewMatchingStatusType</c>.
    /// </summary>
    /// <param name="_statusType">The matching status card type to be refreshed.</param>
    internal void refreshBookQueryToMatchingStatusType(BankAutomationStatementFormViewMatchingStatusType _statusType)
    {
        switch (_statusType)
        {
            case BankAutomationStatementFormViewMatchingStatusType::Total:
                this.refreshBookQueryToTotalLines();
                break;

            case BankAutomationStatementFormViewMatchingStatusType::Unmatched:
                this.refreshBookQueryToUnmatchedLines();
                break;

            case BankAutomationStatementFormViewMatchingStatusType::Matched:
                this.refreshBookQueryToMatchedLines();
                break;

            case BankAutomationStatementFormViewMatchingStatusType::Reconciled:
                this.refreshBookQueryToReconciledLines();
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBookQueryToOriginQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the bank statement line details book, lists lines as the original query.
    /// </summary>
    /// <param name="_currentStatement">The statement to be refreshed.</param>
    internal void refreshBookQueryToOriginQuery(BankStmtISOAccountStatement _currentStatement)
    {
        Query reportEntryQueryOriginCopy = this.createReportEntryQueryOriginCopy();
        QueryBuildDataSource qbds = reportEntryQueryOriginCopy.dataSourceTable(tableNum(BankStmtISOReportEntry));
        qbds.addRange(fieldNum(BankStmtISOReportEntry, BankStmtISOAccountStatement)).value(SysQuery::value(_currentStatement.RecId));

        dsReportEntry.query(reportEntryQueryOriginCopy);
        dsReportEntry.executeQuery();
        dsReportEntry.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBookQueryToTotalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the bank statement line details book, lists all lines.
    /// </summary>
    internal void refreshBookQueryToTotalLines()
    {
        Query reportEntryQueryOriginCopy = this.createReportEntryQueryOrigin();
        dsReportEntry.query(reportEntryQueryOriginCopy);
        dsReportEntry.executeQuery();
        dsReportEntry.refresh();

        currentStatusType = BankAutomationStatementFormViewMatchingStatusType::Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBookQueryToUnmatchedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the bank statement line details book, lists only the unmatched lines.
    /// </summary>
    internal void refreshBookQueryToUnmatchedLines()
    {
        Query reportEntryQueryOriginCopy = this.createReportEntryQueryOrigin();
        QueryBuildDataSource qbds = reportEntryQueryOriginCopy.dataSourceTable(tableNum(BankStmtISOReportEntry));
        QueryBuildDataSource qbdsMatchingItem = qbds.addDataSource(tableNum(BankReconciliationMatchingItem));
        qbdsMatchingItem.joinMode(JoinMode::NoExistsJoin);
        qbdsMatchingItem.addLink(fieldNum(BankStmtISOReportEntry, RecId), fieldNum(BankReconciliationMatchingItem, BankStmtISOReportEntry));

        dsReportEntry.query(reportEntryQueryOriginCopy);
        dsReportEntry.executeQuery();
        dsReportEntry.refresh();

        currentStatusType = BankAutomationStatementFormViewMatchingStatusType::Unmatched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBookQueryToMatchedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the bank statement line details book, lists only the matched but unreconciled lines.
    /// </summary>
    internal void refreshBookQueryToMatchedLines()
    {
        Query reportEntryQueryOriginCopy = this.createReportEntryQueryOrigin();
        QueryBuildDataSource qbds = reportEntryQueryOriginCopy.dataSourceTable(tableNum(BankStmtISOReportEntry));
        qbds.addRange(fieldNum(BankStmtISOReportEntry, Reconciled)).value(SysQuery::value(NoYes::No));
        QueryBuildDataSource qbdsMatchingItem = qbds.addDataSource(tableNum(BankReconciliationMatchingItem));
        qbdsMatchingItem.joinMode(JoinMode::InnerJoin);
        qbdsMatchingItem.addLink(fieldNum(BankStmtISOReportEntry, RecId), fieldNum(BankReconciliationMatchingItem, BankStmtISOReportEntry));

        QueryBuildDataSource qbdsMatching = qbdsMatchingItem.addDataSource(tableNum(BankReconciliationMatching));
        qbdsMatching.joinMode(JoinMode::InnerJoin);
        qbdsMatching.addLink(fieldNum(BankReconciliationMatchingItem,BankReconciliationMatching), fieldNum(BankReconciliationMatching, RecId));

        dsReportEntry.query(reportEntryQueryOriginCopy);
        dsReportEntry.executeQuery();
        dsReportEntry.refresh();

        currentStatusType = BankAutomationStatementFormViewMatchingStatusType::Matched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBookQueryToReconciledLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the bank statement line details book, lists only the reconciled lines.
    /// </summary>
    internal void refreshBookQueryToReconciledLines()
    {
        Query reportEntryQueryOriginCopy = this.createReportEntryQueryOrigin();
        QueryBuildDataSource qbds = reportEntryQueryOriginCopy.dataSourceTable(tableNum(BankStmtISOReportEntry));
        qbds.addRange(fieldNum(BankStmtISOReportEntry, Reconciled)).value(SysQuery::value(NoYes::Yes));

        dsReportEntry.query(reportEntryQueryOriginCopy);
        dsReportEntry.executeQuery();
        dsReportEntry.refresh();

        currentStatusType = BankAutomationStatementFormViewMatchingStatusType::Reconciled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFocusToStatusCardByStatusType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets focus to the given bank statement status card by the given matching status type.
    /// </summary>
    /// <param name="_statusType">The matching status type card to set focus.</param>
    internal void setFocusToStatusCardByStatusType(BankAutomationStatementFormViewMatchingStatusType _statusType)
    {
        this.setUnfocusToAllCards();
        switch (_statusType)
        {
            case BankAutomationStatementFormViewMatchingStatusType::Total:
                this.setFocusToStatusCard(formControlStr(BankAutomationStatementForm, BankStatementTotalCard));
                break;

            case BankAutomationStatementFormViewMatchingStatusType::Unmatched:
                this.setFocusToStatusCard(formControlStr(BankAutomationStatementForm, BankStatementUnmatchedCard));
                break;

            case BankAutomationStatementFormViewMatchingStatusType::Matched:
                this.setFocusToStatusCard(formControlStr(BankAutomationStatementForm, BankStatementMatchedCard));
                break;

            case BankAutomationStatementFormViewMatchingStatusType::Reconciled:
                this.setFocusToStatusCard(formControlStr(BankAutomationStatementForm, BankStatementReconciledCard));
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnfocusToAllCards</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets unfocus to all bank statement status cards.
    /// </summary>
    private void setUnfocusToAllCards()
    {
        if (formRun)
        {
            for (int i = 1; i <= conlen(formPartControlNameContainer); i++)
            {
                this.setFocusToStatusCard(conpeek(formPartControlNameContainer, i), false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFocusToStatusCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets focus to the given bank statement status card.
    /// </summary>
    /// <param name="_formControlStr">The given bank statement status card form control name.</param>
    /// <param name="_isFocus">The given focus flag.</param>
    private void setFocusToStatusCard(str _formControlStr, boolean _isFocus = true)
    {
        if (formRun)
        {
            FormPartControl formPartControl = formRun.design().controlName(_formControlStr);
            if (formPartControl)
            {
                FormRun formPartFormRun = formPartControl.getPartFormRun();
                if (formPartFormRun)
                {
                    formPartFormRun.focusOnCard(_isFocus);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAllMatchingStatusCardsStatisticsContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the matching status cards statistics data in bank statement detail view.
    /// </summary>
    internal void refreshAllMatchingStatusCardsStatisticsContent()
    {
        if (formRun)
        {
            for (int i = 1; i <= conlen(formPartControlNameContainer); i++)
            {
                this.refreshMatchingStatusCardsStatisticsContent(conpeek(formPartControlNameContainer, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMatchingStatusCardsStatisticsContent</Name>
				<Source><![CDATA[
    private void refreshMatchingStatusCardsStatisticsContent(str _formControlStr)
    {
        FormPartControl formPartControl = formRun.design().controlName(_formControlStr);
        if (formPartControl)
        {
            FormRun formPartFormRun = formPartControl.getPartFormRun();
            if (formPartFormRun)
            {
                formPartFormRun.refreshStatisticsContent();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>