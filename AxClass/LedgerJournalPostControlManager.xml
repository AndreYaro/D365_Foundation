<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalPostControlManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalPostControlManager</c> class manages posting restrictions data creation,
///    retrieval, update, and deletion for a specific journal name.
/// </summary>
public class LedgerJournalPostControlManager
{
    #LedgerJournalPostControl

    LedgerJournalNameId ledgerJournalName;
    LedgerJournalType ledgerJournalType;
    Set userGroupsWithPostPermissions;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerJournalPostControlUserInfos</Name>
				<Source><![CDATA[
    private List getLedgerJournalPostControlUserInfos(Query query, boolean _haveUserGroup)
    {
        List ledgerJournalPostControlUsers;
        Set addedUsers;
        QueryRun queryRun;
        UserGroupList userGroupList;
        UserInfo userInfo;
        LedgerJournalPostControlUserInfo ledgerJournalPostControlUserInfo;
        LedgerJournalPostControlUser ledgerJournalPostControlUser;

        Debug::assert(query != null);

        ledgerJournalPostControlUsers = new List(Types::Class);
        addedUsers = new Set(Types::String);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            if (_haveUserGroup)
            {
                userGroupList = queryRun.get(tablenum(UserGroupList)) as UserGroupList;
            }
            else
            {
                userGroupList = null;
            }

            userInfo = queryRun.get(tablenum(UserInfo)) as UserInfo;
            ledgerJournalPostControlUser = queryRun.get(tablenum(LedgerJournalPostControlUser)) as LedgerJournalPostControlUser;

            if (!addedUsers.in(userInfo.Id))
            {
                addedUsers.add(userInfo.Id);

                ledgerJournalPostControlUserInfo = new LedgerJournalPostControlUserInfo();
                ledgerJournalPostControlUserInfo.parmUserId(userInfo.Id);
                ledgerJournalPostControlUserInfo.parmEnabledByUserGroupId(userGroupList.GroupId);
                ledgerJournalPostControlUserInfo.parmUserName(userInfo.Name);
                ledgerJournalPostControlUserInfo.parmLedgerJournalNameId(ledgerJournalName);

                if (ledgerJournalPostControlUser.RecId == 0)
                {
                    ledgerJournalPostControlUserInfo.parmControlEnabled(false);
                    ledgerJournalPostControlUserInfo.parmEnabledByUserGroup(NoYes::No);
                }
                else
                {
                    ledgerJournalPostControlUserInfo.parmControlEnabled(true);
                    ledgerJournalPostControlUserInfo.parmEnabledByUserGroup(ledgerJournalPostControlUser.EnabledByUserGroup);
                }

                ledgerJournalPostControlUsers.addEnd(ledgerJournalPostControlUserInfo);
            }
        }

        return ledgerJournalPostControlUsers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserGroupsWithPostControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of user groups that have post permissions to the ledger journal name and their
    ///    associated posting restriction settings.
    /// </summary>
    /// <returns>
    ///    A list user groups from the <see cref="T:LedgerJournalPostControlUserGroupInfo" />.
    /// </returns>
    public List getUserGroupsWithPostControls()
    {
        List ledgerJournalPostControlUserGroups;
        LedgerJournalPostControlUserGroup ledgerJournalPostControlUserGroup;
        LedgerJournalPostControlUserGroupInfo ledgerJournalPostControlUserGroupInfo;
        UserGroupInfo userGroupInfo;

        if (userGroupsWithPostPermissions == null)
        {
            userGroupsWithPostPermissions = LedgerJournalPostControlManager::getUserGroupsWithPostPermissions();
        }

        ledgerJournalPostControlUserGroups = new List(Types::Class);

        while select userGroupInfo
            outer join RecId, ControlEnabled, LastSetupTimestamp from ledgerJournalPostControlUserGroup
            order by userGroupInfo.Id
            where (userGroupInfo.Id == ledgerJournalPostControlUserGroup.UserGroupId) &&
                    (ledgerJournalPostControlUserGroup.LedgerJournalName == ledgerJournalName)
        {
            if (userGroupInfo.RecId != 0)
            {
                ledgerJournalPostControlUserGroupInfo = new LedgerJournalPostControlUserGroupInfo();
                ledgerJournalPostControlUserGroupInfo.parmUserGroupId(userGroupInfo.Id);
                ledgerJournalPostControlUserGroupInfo.parmUserGroupName(userGroupInfo.Name);
                ledgerJournalPostControlUserGroupInfo.parmLedgerJournalNameId(ledgerJournalName);

                if (ledgerJournalPostControlUserGroup.RecId != 0)
                {
                    ledgerJournalPostControlUserGroupInfo.parmControlEnabled(ledgerJournalPostControlUserGroup.ControlEnabled);
                    ledgerJournalPostControlUserGroupInfo.parmLastSetupTimestamp(ledgerJournalPostControlUserGroup.LastSetupTimestamp);
                    ledgerJournalPostControlUserGroups.addEnd(ledgerJournalPostControlUserGroupInfo);
                }
                else if ((userGroupInfo.Id != #Admin) && userGroupsWithPostPermissions.in(userGroupInfo.Id))
                {
                    ledgerJournalPostControlUserGroupInfo.parmControlEnabled(NoYes::No);
                    ledgerJournalPostControlUserGroups.addEnd(ledgerJournalPostControlUserGroupInfo);
                }
            }
        }

        return ledgerJournalPostControlUserGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUsersWithPostControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of users and their associated posting restriction settings.
    /// </summary>
    /// <param name="_userGroupId">
    /// The ID of a user group; optional.
    /// </param>
    /// <returns>
    /// A list users from the <see cref="T:LedgerJournalPostControlUserInfo" />.
    /// </returns>
    /// <remarks>
    /// If the <paramref name="_userGroupId" /> parameter is empty, returns all users and their associated
    /// posting restriction settings; otherwise, returns only users who belong to the specific user group
    /// and their associated posting restriction settings.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The user group does not have posting permissions to the ledger journal name.
    /// </exception>
    public List getUsersWithPostControls(UserGroupId _userGroupId = '')
    {
        List ledgerJournalPostControlUsers;
        Query query;
        QueryBuildDataSource userGroupListDs;
        QueryBuildDataSource userInfoDs;
        QueryBuildDataSource ledgerJournalPostControlUserDs;
        SetEnumerator userGroupsWithPostPermissionsEnumerator;
        str userGroupsRange;
        int i = 0;
        boolean haveUserGroup;

        if (userGroupsWithPostPermissions == null)
        {
            userGroupsWithPostPermissions =
                LedgerJournalPostControlManager::getUserGroupsWithPostPermissions();
        }

        if ((_userGroupId != '') && (!userGroupsWithPostPermissions.in(_userGroupId)))
        {
            throw error(strfmt("@SYS116795", ledgerJournalName));
        }

        ledgerJournalPostControlUsers = new List(Types::Class);

        if (userGroupsWithPostPermissions.empty())
        {
            // include only users because there are no user groups
            query = new query();

            userInfoDs = query.addDataSource(tableNum(UserInfo));

            ledgerJournalPostControlUserDs = userInfoDs.addDataSource(tableNum(LedgerJournalPostControlUser));
            ledgerJournalPostControlUserDs.addLink(fieldNum(UserInfo, Id), fieldNum(LedgerJournalPostControlUser, UserId));
            ledgerJournalPostControlUserDs.joinMode(JoinMode::OuterJoin);
            ledgerJournalPostControlUserDs.fetchMode(QueryFetchMode::One2One);
            ledgerJournalPostControlUserDs.addRange(fieldnum(LedgerJournalPostControlUser, LedgerJournalName)).value(ledgerJournalName);

            haveUserGroup = false;
        }
        else
        {
            // The query includes users who belong to the user groups that have
            // posting permissions to the current ledger journal name, along with their posting restriction
            // settings.  The outer join to LedgerJournalPostControlUser table is used in the query here to
            // ensure that user without posting restrictions is retrieved also.  The query further restricts
            // itself to only retrieve all users of a specific user group if _userGroupId parameter value is
            // provided.

            query = new Query(querystr(LedgerJournalPostControlAllUsers));

            userGroupListDs = query.dataSourceTable(tablenum(UserGroupList));
            userInfoDs = query.dataSourceTable(tablenum(UserInfo));
            ledgerJournalPostControlUserDs = query.dataSourceTable(tablenum(LedgerJournalPostControlUser));

            ledgerJournalPostControlUserDs.addRange(fieldnum(LedgerJournalPostControlUser, LedgerJournalName)).value(ledgerJournalName);

            if (_userGroupId != '')
            {
                userGroupListDs.addRange(fieldnum(UserGroupList, GroupId)).value(_userGroupId);
            }
            else
            {
                userGroupsWithPostPermissionsEnumerator = userGroupsWithPostPermissions.getEnumerator();
                while (userGroupsWithPostPermissionsEnumerator.moveNext())
                {
                    if (i == 0)
                    {
                        userGroupsRange += strfmt('%1', userGroupsWithPostPermissionsEnumerator.current());
                    }
                    else
                    {
                        userGroupsRange += strfmt(',%1',
                        userGroupsWithPostPermissionsEnumerator.current());
                    }
                    i++;
                }

                userGroupListDs.addRange(fieldnum(UserGroupList, GroupId)).value(userGroupsRange);

                // the consuming code will filter out the duplicates
                userGroupListDs.addOrderByField(fieldnum(UserGroupList, UserId));
            }

            haveUserGroup = true;
        }

        ledgerJournalPostControlUsers = this.getLedgerJournalPostControlUserInfos(query, haveUserGroup);

        return ledgerJournalPostControlUsers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        ledgerJournalName = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalNameId</Name>
				<Source><![CDATA[
    private LedgerJournalNameId parmLedgerJournalNameId(LedgerJournalNameId _ledgerJournalNameId = ledgerJournalName)
    {
        ledgerJournalName = _ledgerJournalNameId;

        return ledgerJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalType</Name>
				<Source><![CDATA[
    private LedgerJournalType parmLedgerJournalType(LedgerJournalType _ledgerJournalType = ledgerJournalType)
    {
        ledgerJournalType = _ledgerJournalType;

        return ledgerJournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLedgerJournalPostControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset <c>LedgerJournalPostControlUser</c> and <c>LedgerJournalPostControlUserGroup</c> tables for
    /// the ledger journal name.
    /// </summary>
    /// <param name="_userId">
    /// The ID of a user; optional.
    /// </param>
    /// <remarks>
    ///  The reset process will do the following:
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    Calculate posting restrictions for any user who is newly added to a user group, removed from a user
    ///    group that has post permission to the journal name, or whose user group post permission to the
    ///    journal name is changed. Insert or delete posting restriction records in
    ///    <c>LedgerJournalPostControlUser </c>table, depending on the calculation result.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Update <c>LedgerJournalPostControlUserGroup lastSetupTimestamp</c> with current universal
    ///    <c>datetime</c>.
    ///    </description>
    ///   </item>
    ///  </list>
    ///
    ///  If the <paramref name="_userId" />
    ///   parameter is given a non-default value, only the posting restriction of the specified user is
    ///  calculated and reset when it is needed.
    /// </remarks>
    public void resetLedgerJournalPostControl(UserId _userId = '')
    {
        // Reset user groups with post permissions after post control is reset.
        userGroupsWithPostPermissions = LedgerJournalPostControlManager::resetLedgerJournalPostControlServer(
            _userId,
            ledgerJournalName,
            ledgerJournalType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLedgerJournalPostControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves posting restriction settings on the ledger journal name for the specified users and user
    /// groups to the disk.
    /// </summary>
    /// <param name="_users">
    /// A map of the user ID and <see cref="T:LedgerJournalPostControlUserInfo" /> for the users of whom
    /// the posting restriction settings should be saved.
    /// </param>
    /// <param name="_userGroups">
    /// A map of user group ID and <see cref="T:LedgerJournalPostControlUserGroupInfo" /> for user groups
    /// of which the posting restriction settings should be saved.
    /// </param>
    /// <remarks>
    /// User groups that have post permissions are always queried again and both users and user groups are
    /// always validated before their restriction settings on the journal name are saved to the disk. When
    /// a user or user group encounters validation error, that user or user group posting restriction
    /// settings will not be saved. For all of the other users or user groups that do not have any
    /// validation errors, their posting restriction settings will be saved.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_users" /> parameter is null.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_userGroups" /> parameter is null.
    /// </exception>
    public void saveLedgerJournalPostControl(Map _users, Map _userGroups)
    {
        if ((_users == null) || (_userGroups == null))
        {
            throw error(Error::missingParameter(null));
        }

        // Posting permissions may have changed before saving any new posting restriction
        // set up; therefore, the user groups with posting permissions needs to be reset.
        userGroupsWithPostPermissions = LedgerJournalPostControlManager::savePostControlServer(
            _users,
            _userGroups,
            ledgerJournalName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewUsersPostControlServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates posting restrictions for users who are newly added to a user group.
    /// </summary>
    /// <param name="_userId">
    /// The ID of user. If a value is given, only the specific user is checked. If the user is new, his or
    /// her posting restriction is calculated; optional.
    /// </param>
    /// <param name="_ledgerJournalNameId">
    /// The ledger journal name. If a value is given, only new users who have post permissions to the
    /// ledger journal name, their posting restrictions are calculated; optional.
    /// </param>
    /// <remarks>
    /// Add posting restrictions if a user does not already have posting restrictions set up and his or her
    /// new user group has posting restrictions enabled.
    /// </remarks>
    private static void addNewUsersPostControlServer(UserId _userId = '', LedgerJournalNameId _ledgerJournalNameId = '')
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource userGroupListDs;
        QueryBuildDataSource ledgerJournalPostControlUserGroupDs;
        QueryBuildRange qbr;
        UserGroupList newUserGroupList;
        UserGroupList existingUserGroupList;
        LedgerJournalPostControlUser ledgerJournalPostControlUser;
        LedgerJournalPostControlUserGroup newUserLedgerJournalPostControlUserGroup;
        LedgerJournalPostControlUserGroup existingUserLedgerJournalPostControlUserGroup;

        // Construct a query to retrieve all the non-admin users who are added after the last time
        // the user posting restrictions is setup.
        query = new Query();
        userGroupListDs = query.addDataSource(tablenum(UserGroupList));

        // Inner joins UserGroupList table to LedgerJournalPostControlUserGroup table to retreive only
        // users who belong to user groups that have posting permissions to the ledger journal name and
        // also to allow later adding restrictions to find only new users who belongs to a user group
        // that has posting restriction enabled.
        ledgerJournalPostControlUserGroupDs = userGroupListDs.addDataSource(tablenum(LedgerJournalPostControlUserGroup));
        ledgerJournalPostControlUserGroupDs.update(true);
        ledgerJournalPostControlUserGroupDs.joinMode(JoinMode::InnerJoin);
        ledgerJournalPostControlUserGroupDs.relations(false);
        ledgerJournalPostControlUserGroupDs.addLink(fieldnum(UserGroupList, GroupId), fieldnum(LedgerJournalPostControlUserGroup, UserGroupId));

        // Restrict to users who belong to at least one user group that has posting restrictions enabled.
        ledgerJournalPostControlUserGroupDs.addRange(fieldnum(LedgerJournalPostControlUserGroup, ControlEnabled)).value('1');
        // Restrict to new users.
        qbr = ledgerJournalPostControlUserGroupDs.addRange(fieldnum(LedgerJournalPostControlUserGroup, LastSetupTimestamp));
        qbr.status(RangeStatus::Hidden);
        qbr.value(strfmt('(%1 < %2.%3)', fieldstr(LedgerJournalPostControlUserGroup,LastSetupTimestamp), userGroupListDs.name(), fieldstr(UserGroupList, CreatedDateTime)));
        // Restrict to non-admin users.
        userGroupListDs.addRange(fieldnum(UserGroupList, GroupId)).value(
            strfmt('!= %1', #Admin));

        userGroupListDs.addGroupByField(fieldnum(UserGroupList, UserId));
        // Group by LegerJournalPostControlUserGroup.LedgerJournalName so that it is selected for later use.
        ledgerJournalPostControlUserGroupDs.addGroupByField(fieldnum(LedgerJournalPostControlUserGroup, LedgerJournalName));

        if (_userId != '')
        {
            userGroupListDs.addRange(fieldnum(UserGroupList, UserId)).value(_userId);
        }

        if (_ledgerJournalNameId != '')
        {
            ledgerJournalPostControlUserGroupDs.addRange(fieldnum(LedgerJournalPostControlUserGroup, LedgerJournalName)).value(_ledgerJournalNameId);
        }

        queryRun = new QueryRun(query);

        ttsbegin;

        while (queryRun.next())
        {
            newUserGroupList = queryRun.get(tablenum(UserGroupList)) as UserGroupList;
            newUserLedgerJournalPostControlUserGroup = queryRun.get(tablenum(LedgerJournalPostControlUserGroup)) as LedgerJournalPostControlUserGroup;

            // Check if the user belongs to any other user group that already had posting restriction setup once.
            // If so, then, the new user group posting restriction setup should not be rolled down.
            select firstonly RecId from existingUserGroupList
                where existingUserGroupList.UserId == newUserGroupList.UserId
            exists join existingUserLedgerJournalPostControlUserGroup
                where (existingUserLedgerJournalPostControlUserGroup.UserGroupId == existingUserGroupList.GroupId) &&
                    (existingUserLedgerJournalPostControlUserGroup.LedgerJournalName == newUserLedgerJournalPostControlUserGroup.LedgerJournalName) &&
                    (existingUserLedgerJournalPostControlUserGroup.LastSetupTimestamp >= existingUserGroupList.CreatedDateTime);

            // This is a completely newly added user and the posting restriction should be rolled down.
            if (existingUserGroupList.RecId == 0 && !LedgerJournalPostControlUser::exist(newUserLedgerJournalPostControlUserGroup.LedgerJournalName, newUserGroupList.UserId))
            {
                ledgerJournalPostControlUser.UserId = newUserGroupList.UserId;
                ledgerJournalPostControlUser.LedgerJournalName = newUserLedgerJournalPostControlUserGroup.LedgerJournalName;
                ledgerJournalPostControlUser.EnabledByUserGroup = NoYes::Yes;
                ledgerJournalPostControlUser.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static LedgerJournalPostControlManager construct(LedgerJournalNameId _ledgerJournalNameId, LedgerJournalType _ledgerJournalType)
    {
        LedgerJournalPostControlManager ledgerJournalPostControlManager;

        ledgerJournalPostControlManager = new LedgerJournalPostControlManager();
        ledgerJournalPostControlManager.parmLedgerJournalNameId(_ledgerJournalNameId);
        ledgerJournalPostControlManager.parmLedgerJournalType(_ledgerJournalType);

        return ledgerJournalPostControlManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserGroupsWithPostPermissions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of user groups that have post permissions.
    /// </summary>
    /// <returns>
    ///    A set of user group IDs.
    /// </returns>
    private static Set getUserGroupsWithPostPermissions()
    {
        UserGroupInfo userGroup;
        Set userGroups;

        userGroups = new Set(Types::String);

        while select id from userGroup
        {
            userGroups.add(userGroup.id);
        }

        return userGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostControlSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets posting restrictions set up for the specified ledger journal name.
    /// </summary>
    /// <param name="_ledgerJournalNameId">
    ///    The ledger journal name.
    /// </param>
    /// <returns>
    ///    true if there is posting restriction set up for the ledger journal name; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_ledgerJournalNameId" /> parameter is empty.
    /// </exception>
    public static boolean hasPostControlSetup(LedgerJournalNameId _ledgerJournalNameId)
    {
        LedgerJournalPostControlUserGroup ledgerJournalPostControlUserGroup;
        LedgerJournalPostControlUser ledgerJournalPostControlUser;
        boolean hasPostControlSetup;

        if (_ledgerJournalNameId == '')
        {
            throw error(Error::missingParameter(null));
        }

        hasPostControlSetup = true;

        select firstonly RecId from ledgerJournalPostControlUserGroup
            where (ledgerJournalPostControlUserGroup.LedgerJournalName == _ledgerJournalNameId) &&
                    (ledgerJournalPostControlUserGroup.ControlEnabled == NoYes::Yes);

        if (ledgerJournalPostControlUserGroup.RecId == 0)
        {
            select firstonly RecId from ledgerJournalPostControlUser
                where (ledgerJournalPostControlUser.LedgerJournalName == _ledgerJournalNameId);

            if (ledgerJournalPostControlUser.RecId == 0)
            {
                hasPostControlSetup = false;
            }
        }

        return hasPostControlSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostControlSetupByUserGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting restriction set up type for the ledger journal name to see whether it is by user
    /// group.
    /// </summary>
    /// <param name="_ledgerJournalNameId">
    /// The JournalName of a LedgerJournalName.
    /// </param>
    /// <returns>
    /// true if the posting restriction set up type for the ledger journal name is by user group;
    /// otherwise, false.
    /// </returns>
    /// <remarks>
    /// Posting restriction set up type is considered to be by user group if there is no user group that
    /// has a posting restriction enabled.
    /// </remarks>
    public static boolean isPostControlSetupByUserGroup(LedgerJournalNameId _ledgerJournalNameId)
    {
        LedgerJournalPostControlUserGroup ledgerJournalPostControlUserGroup;

        select firstonly RecId from ledgerJournalPostControlUserGroup
            where (ledgerJournalPostControlUserGroup.LedgerJournalName == _ledgerJournalNameId) &&
                    (ledgerJournalPostControlUserGroup.ControlEnabled == NoYes::Yes);

        if (ledgerJournalPostControlUserGroup.RecId == 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWithLedgerJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of this class to manage posting restrictions data for a given ledger journal
    ///    name.
    /// </summary>
    /// <param name="_ledgerJournalName">
    ///    A <c>LedgerJournalName</c> record.
    /// </param>
    /// <returns>
    ///    An instance of LedgerJournalPostControlManager class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_ledgerJournalName" /> parameter is empty.
    /// </exception>
    public static LedgerJournalPostControlManager newWithLedgerJournalName(LedgerJournalName _ledgerJournalName)
    {
        if (_ledgerJournalName == null)
        {
            throw error(Error::missingParameter(null));
        }

        return LedgerJournalPostControlManager::newWithLedgerJournalNameIdAndType(_ledgerJournalName.JournalName, _ledgerJournalName.JournalType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWithLedgerJournalNameIdAndType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of this class to manage posting restrictions data for a ledger journal name
    ///    with the ledger journal type.
    /// </summary>
    /// <param name="_ledgerJournalNameId">
    ///    The ledger journal name.
    /// </param>
    /// <param name="_ledgerJournalType">
    ///    The ledger journal type.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LedgerJournalPostControlManager</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_ledgerJournalNameId" /> parameter is empty.
    /// </exception>
    public static LedgerJournalPostControlManager newWithLedgerJournalNameIdAndType(LedgerJournalNameId _ledgerJournalNameId, LedgerJournalType _ledgerJournalType)
    {
        if (_ledgerJournalNameId == '')
        {
            throw error(Error::missingParameter(null));
        }

        return LedgerJournalPostControlManager::construct(_ledgerJournalNameId, _ledgerJournalType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExistingUsersPostControlServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes existing users posting restrictions if the users no longer belong to a user group that has
    /// posting permissions or if the users posting restrictions are enabled by the user group but the user
    /// no longer belongs to any user group that has posting restrictions.
    /// </summary>
    /// <param name="_userId">
    /// The ID of a user; optional.
    /// </param>
    /// <param name="_ledgerJournalNameId">
    /// The ledger journal name; optional.
    /// </param>
    private static void removeExistingUsersPostControlServer(UserId _userId = '', LedgerJournalNameId _ledgerJournalNameId = '')
    {
        LedgerJournalPostControlUserGroup ledgerJournalPostControlUserGroup;
        LedgerJournalPostControlUser ledgerJournalPostControlUser;
        UserGroupList userGroupList;
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource ledgerJournalPostControlUserDs;
        int i;
        boolean userHasOneControlEnabledUserGroup;
        boolean userPostControlEnabledByUserGroup;

        query = new Query();
        ledgerJournalPostControlUserDs = query.addDataSource(tablenum(LedgerJournalPostControlUser));
        ledgerJournalPostControlUserDs.update(true);

        if (_userId != '')
        {
            ledgerJournalPostControlUserDs.addRange(fieldnum(LedgerJournalPostControlUser, UserId)).value(_userId);
        }

        if (_ledgerJournalNameId != '')
        {
            ledgerJournalPostControlUserDs.addRange(fieldnum(LedgerJournalPostControlUser, LedgerJournalName)).value(_ledgerJournalNameId);
        }

        queryRun = new QueryRun(query);
        ttsbegin;
        while (queryRun.next())
        {
            ledgerJournalPostControlUser = queryRun.get(tablenum(LedgerJournalPostControlUser));

            if (ledgerJournalPostControlUser.EnabledByUserGroup)
            {
                userHasOneControlEnabledUserGroup = false;
                userPostControlEnabledByUserGroup = true;

                while select ControlEnabled from ledgerJournalPostControlUserGroup
                    exists join userGroupList
                        where (ledgerJournalPostControlUserGroup.UserGroupId == userGroupList.GroupId) &&
                             (userGroupList.UserId == ledgerJournalPostControlUser.UserId) &&
                             (ledgerJournalPostControlUserGroup.LedgerJournalName == ledgerJournalPostControlUser.LedgerJournalName)
                {
                    // A record is found such that the user belongs to a user group that has posting
                    // restriction set up.
                    i++;

                    // If the user post control restriction is not enabled by user group,
                    // then the user post restriction is explicitly set up.  Therefore,
                    // it should not be updated based on the user group's posting restriciton
                    // set up.
                    if (!ledgerJournalPostControlUser.EnabledByUserGroup)
                    {
                        userPostControlEnabledByUserGroup = false;
                        break;
                    }
                    else
                    {
                        // Check if the user group has posting restriction enabled.  If
                        // the user group has posting restriction enabled, the user posting
                        // restriction must not be removed.
                        if (ledgerJournalPostControlUserGroup.ControlEnabled)
                        {
                            userHasOneControlEnabledUserGroup = true;
                        }
                    }
                }
            }
            else
            {
                // user with no user group is valid
                i = 1;
                userPostControlEnabledByUserGroup = false;
            }

            // Remove user posting restrictions because those users no longer belong to a user group,
            // or only belong to user groups that no longer have posting permissions, or only belong
            // to user groups that have no posting restrictions set up.
            if (i == 0)
            {
                ledgerJournalPostControlUser.delete();
            }
            else
            {
                // Remove user posting restrictions because the user posting restriction is set up through a
                // user group, but no user group to which he/she belongs has any posting restriction enabled
                // any more.
                if (userPostControlEnabledByUserGroup && !userHasOneControlEnabledUserGroup)
                {
                    ledgerJournalPostControlUser.delete();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLedgerJournalPostControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes all posting restriction settings for the specified ledger journal name from the disk.
    /// </summary>
    /// <param name="_ledgerJournalNameId">
    ///    The ledger journal name.
    /// </param>
    /// <remarks>
    ///    This removes both user and user group posting restriction settings.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_ledgerJournalNameId" /> parameter is empty.
    /// </exception>
    public static void removeLedgerJournalPostControl(LedgerJournalNameId _ledgerJournalNameId)
    {
        if (_ledgerJournalNameId == '')
        {
            throw error(Error::missingParameter(null));
        }

        LedgerJournalPostControlManager::removeLedgerJournalPostControlServer(_ledgerJournalNameId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLedgerJournalPostControlServer</Name>
				<Source><![CDATA[
    private static void removeLedgerJournalPostControlServer(LedgerJournalNameId _ledgerJournalNameId)
    {
        LedgerJournalPostControlUserGroup ledgerJournalPostControlUserGroup;
        LedgerJournalPostControlUser ledgerJournalPostControlUser;

        ttsbegin;

        delete_from ledgerJournalPostControlUserGroup
            where (ledgerJournalPostControlUserGroup.LedgerJournalName == _ledgerJournalNameId);

        delete_from ledgerJournalPostControlUser
            where (ledgerJournalPostControlUser.LedgerJournalName == _ledgerJournalNameId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNoPostPermissionsUserGroupsServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes posting restrictions for user groups that no longer have post
    /// permissions to the given ledger journal name.
    /// </summary>
    /// <param name="_ledgerJournalNameId">
    /// The ledger journal name.
    /// </param>
    /// <returns>
    /// A set of user group IDs that have post permissions.
    /// </returns>
    internal static Set removeNoPostPermissionsUserGroupsServer(LedgerJournalNameId _ledgerJournalNameId)
    {
        Set userGroupsWithPostPermissions;
        LedgerJournalPostControlUserGroup ledgerJournalPostControlUserGroup;

        ttsbegin;
        userGroupsWithPostPermissions = LedgerJournalPostControlManager::getUserGroupsWithPostPermissions();

        Debug::assert(_ledgerJournalNameId != '');

        UserGroupInfo userGroup;

        delete_from ledgerJournalPostControlUserGroup
            where ledgerJournalPostControlUserGroup.LedgerJournalName == _ledgerJournalNameId
            notexists join userGroup
            where userGroup.id == ledgerJournalPostControlUserGroup.UserGroupId;

        ttscommit;

        return userGroupsWithPostPermissions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAllLedgerJournalPostControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset all users and user group posting restrictions.
    /// </summary>
    /// <remarks>
    ///  The reset process will:
    ///  <list type="number">
    ///   <item>
    ///   <description>Delete posting restrictions for any user group that no longer has posting permissions
    ///   to a journal name.</description>
    ///   </item>
    ///   <item>
    ///   <description>Calculate posting restrictions for any user who is newly added to a user group,
    ///   removed from a user group that has posting permission to a journal name, or whose user group post
    ///   permission to a journal name is changed. Inserts or deletes user posting restriction based on the
    ///   calculation result.</description>
    ///   </item>
    ///   <item>
    ///   <description>Update the <see cref="T:LedgerJournalPostControlUserGroup" /><see
    ///   cref="M:LedgerJournalPostControlUserGroupInfo.parmLastSetupTimestamp" /> with the current universal
    ///   time.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public static void resetAllLedgerJournalPostControls()
    {
        LedgerJournalPostControlManager::resetLedgerJournalPostControlServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLedgerJournalPostControlServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the <c>LedgerJournalPostControlUser</c> and <c>LedgerJournalPostControlUserGroup</c> tables.
    /// </summary>
    /// <param name="_userId">
    ///    The ID of the user; optional.
    /// </param>
    /// <param name="_ledgerJournalNameId">
    ///    The ledger journal name; optional.
    /// </param>
    /// <param name="_ledgerJournalType">
    ///    The ledger journal type; optional.
    /// </param>
    /// <returns>
    ///    A set of user group IDs that have ledger journal post permissions.
    /// </returns>
    /// <remarks>
    ///    The <c>resetLedgerJournalPostControl</c> and <c>resetAllLedgerJournalPostControls</c> methods call
    ///    this method to execute the reset logic in one transaction context on the server.
    /// </remarks>
    private static Set resetLedgerJournalPostControlServer(UserId _userId = '', LedgerJournalNameId _ledgerJournalNameId = '', LedgerJournalType _ledgerJournalType = LedgerJournalType::Daily)
    {
        LedgerJournalName ledgerJournalName;
        LedgerJournalType lastLedgerJournalType;
        Set userGroupsWithPostPermissions;

        ttsbegin;

        userGroupsWithPostPermissions = null;

        if ((_userId == '') && (_ledgerJournalNameId == '') && (_ledgerJournalType == LedgerJournalType::Daily))
        {
            while select ledgerJournalName
                group by ledgerJournalName.JournalType, ledgerJournalName.JournalName
            {
                if (ledgerJournalName.JournalType != lastLedgerJournalType)
                {
                    LedgerJournalPostControlManager::removeNoPostPermissionsUserGroupsServer(ledgerJournalName.JournalName);
                    lastLedgerJournalType = ledgerJournalName.JournalType;
                }
            }
        }
        else
        {
            Debug::assert(_ledgerJournalNameId != '');

            userGroupsWithPostPermissions = LedgerJournalPostControlManager::removeNoPostPermissionsUserGroupsServer(_ledgerJournalNameId);
        }

        LedgerJournalPostControlManager::removeExistingUsersPostControlServer(_userId, _ledgerJournalNameId);
        LedgerJournalPostControlManager::addNewUsersPostControlServer(_userId, _ledgerJournalNameId);
        LedgerJournalPostControlManager::updateUserGroupLastSetupTimeServer(_userId, _ledgerJournalNameId);
        ttscommit;

        return userGroupsWithPostPermissions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePostControlServer</Name>
				<Source><![CDATA[
    private static Set savePostControlServer(Map _users, Map _userGroups, LedgerJournalNameId _ledgerJournalNameId)
    {
        MapEnumerator usersEnumerator;
        MapEnumerator userGroupsEnumerator;
        LedgerJournalPostControlUser ledgerJournalPostControlUser;
        LedgerJournalPostControlUserGroup ledgerJournalPostControlUserGroup;
        userId userId;
        userGroupId userGroupId;
        LedgerJournalPostControlUserInfo user;
        LedgerJournalPostControlUserGroupInfo userGroup;
        utcdatetime currentTimestamp;
        Set userGroupsWithPostPermissions;

        Debug::assert(_users != null);
        Debug::assert(_userGroups != null);
        Debug::assert(_ledgerJournalNameId != '');

        currentTimestamp = DateTimeUtil::utcNow();
        userGroupsEnumerator = _userGroups.getEnumerator();

        ttsbegin;

        userGroupsWithPostPermissions = LedgerJournalPostControlManager::getUserGroupsWithPostPermissions();

        if (LedgerJournalPostControlManager::validateLedgerJournalName(_ledgerJournalNameId))
        {
            while (userGroupsEnumerator.moveNext())
            {
                userGroupId = userGroupsEnumerator.currentKey();
                userGroup = userGroupsEnumerator.currentValue();

                Debug::assert(userGroupId != '');
                Debug::assert(userGroup != null);

                // Check if the user group exists and has post permissions to the journal name.
                if (LedgerJournalPostControlManager::validateUserGroupPostControlServer(userGroupId, userGroupsWithPostPermissions))
                {
                    ledgerJournalPostControlUserGroup = LedgerJournalPostControlUserGroup::find(_ledgerJournalNameId, userGroupId, true);
                    ledgerJournalPostControlUserGroup.LastSetupTimestamp = currentTimestamp;
                    ledgerJournalPostControlUserGroup.ControlEnabled = userGroup.parmControlEnabled();
                    ledgerJournalPostControlUserGroup.LedgerJournalName = _ledgerJournalNameId;
                    ledgerJournalPostControlUserGroup.UserGroupId = userGroupId;
                    ledgerJournalPostControlUserGroup.write();
                }
            }

            usersEnumerator = _users.getEnumerator();

            while (usersEnumerator.moveNext())
            {
                userId = usersEnumerator.currentKey();
                user = usersEnumerator.currentValue();

                Debug::assert(userId != '');
                Debug::assert(user != null);

                // Check the user to see if he/she no longer belongs to a group that has post permissions
                // to the journal name or whose post restriction is enabled through a group that no longer
                // exists or no longer has post permission and the user does not belong to any other user
                // group that has post permission. Note: if the user posting control is not enabled,
                // no insert to LedgerJournalPostControlUser table is required.
                if (LedgerJournalPostControlManager::validateUserPostControlServer(user, userGroupsWithPostPermissions))
                {
                    ledgerJournalPostControlUser = LedgerJournalPostControlUser::find(_ledgerJournalNameId, userId, true);

                    if ((ledgerJournalPostControlUser.RecId != 0) && (user.parmControlEnabled() == NoYes::No))
                    {
                        ledgerJournalPostControlUser.delete();
                    }
                    else if (user.parmControlEnabled() == NoYes::Yes)
                    {
                        ledgerJournalPostControlUser.LedgerJournalName = _ledgerJournalNameId;
                        ledgerJournalPostControlUser.UserId = userId;

                        // If the user's posting restriciton is enabled through a user group, but that user
                        // group no longer has post permission, yet the user still belongs to another user
                        // group that has post permission.  Then, the user is regarded as still has posting
                        // restriction but not enabled by a user group.
                        if (user.parmEnabledByUserGroup() && !userGroupsWithPostPermissions.in(user.parmEnabledByUserGroupId()))
                        {
                            ledgerJournalPostControlUser.EnabledByUserGroup = NoYes::No;
                        }
                        else
                        {
                            ledgerJournalPostControlUser.EnabledByUserGroup = user.parmEnabledByUserGroup();
                        }

                        ledgerJournalPostControlUser.write();
                    }
                }
            }
        }
        ttscommit;

        return userGroupsWithPostPermissions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUserGroupLastSetupTimeServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the last setup timestamp for the specified ledger journal posting
    /// restrictions of the user groups to which the specified user belongs.
    /// </summary>
    /// <param name="_userId">
    /// The ID of the user; optional.
    /// </param>
    /// <param name="_ledgerJournalNameId">
    /// The ledger journal name; optional.
    /// </param>
    /// <remarks>
    /// One ledger journal name group should only have one setup timestamp value.
    /// </remarks>
    private static void updateUserGroupLastSetupTimeServer(UserId _userId = '', LedgerJournalNameId _ledgerJournalNameId = '')
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource ledgerJournalPostControlUserGroupDs;
        QueryBuildDataSource userGroupListDs;
        LedgerJournalPostControlUserGroup ledgerJournalPostControlUserGroup;
        utcdatetime currentTimestamp;

        currentTimestamp = DateTimeUtil::utcNow();

        query = new Query();
        ledgerJournalPostControlUserGroupDs = query.addDataSource(tablenum(LedgerJournalPostControlUserGroup));
        ledgerJournalPostControlUserGroupDs.update(true);

        if (_userId != '')
        {
            userGroupListDs = ledgerJournalPostControlUserGroupDs.addDataSource(tablenum(UserGroupList));
            userGroupListDs.relations(false);
            userGroupListDs.joinMode(JoinMode::InnerJoin);
            userGroupListDs.addLink(fieldnum(LedgerJournalPostControlUserGroup, UserGroupId), fieldnum(UserGroupList, GroupId));
            userGroupListDs.addRange(fieldnum(UserGroupList, UserId)).value(_userId);
        }

        if (_ledgerJournalNameId != '')
        {
            ledgerJournalPostControlUserGroupDs.addRange(fieldnum(LedgerJournalPostControlUserGroup, LedgerJournalName)).value(_ledgerJournalNameId);
        }

        queryRun = new QueryRun(query);
        ttsbegin;
        while (queryRun.next())
        {
            ledgerJournalPostControlUserGroup = queryRun.get(tablenum(LedgerJournalPostControlUserGroup));
            ledgerJournalPostControlUserGroup.LastSetupTimestamp = currentTimestamp;
            ledgerJournalPostControlUserGroup.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerJournalName</Name>
				<Source><![CDATA[
    private static boolean validateLedgerJournalName(LedgerJournalNameId _ledgerJournalNameId)
    {
        boolean validateWithNoError;

        Debug::assert(_ledgerJournalNameId != '');

        validateWithNoError = true;

        if (!LedgerJournalName::exist(_ledgerJournalNameId))
        {
            error(strfmt("@SYS116360", _ledgerJournalNameId));
            validateWithNoError = false;
        }

        return validateWithNoError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUserGroupPostControlServer</Name>
				<Source><![CDATA[
    private static boolean validateUserGroupPostControlServer(UserGroupId _userGroupId, Set userGroupsWithPostPermissions)
    {
        boolean validateWithNoError;

        Debug::assert(_userGroupId != '');

        validateWithNoError = true;

        if (!userGroupsWithPostPermissions.in(_userGroupId))
        {
            error(strfmt("@SYS116675", _userGroupId));
            validateWithNoError = false;
        }

        return validateWithNoError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUserPostControlServer</Name>
				<Source><![CDATA[
    private static boolean validateUserPostControlServer(LedgerJournalPostControlUserInfo _user, Set _userGroupsWithPostPermissions)
    {
        UserGroupList userGroupList;
        UserInfo userInfo;
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource userGroupListDs;
        int userGroupCount;
        int userGroupHasPostPermissionsCount;
        boolean userPostControlEnabledByUserGroup;
        boolean foundUserPostControlEnabledByUserGroup;
        boolean validateWithNoError;

        Debug::assert(_user != null);

        validateWithNoError = true;

        userPostControlEnabledByUserGroup = (_user.parmEnabledByUserGroup() == NoYes::Yes);
        userGroupCount = 0;
        userGroupHasPostPermissionsCount = 0;
        foundUserPostControlEnabledByUserGroup = false;

        query = new Query();
        userGroupListDs = query.addDataSource(tablenum(UserGroupList));
        userGroupListDs.addRange(fieldnum(UserGroupList, UserId)).value(_user.parmUserId());

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            userGroupList = queryRun.get(tablenum(UserGroupList));

            if (_userGroupsWithPostPermissions.in(userGroupList.GroupId))
            {
                userGroupHasPostPermissionsCount++;
            }

            if (userPostControlEnabledByUserGroup && (_user.parmEnabledByUserGroupId() == userGroupList.GroupId))
            {
                foundUserPostControlEnabledByUserGroup = true;
            }

            userGroupCount++;
        }

        // The user has been marked through a particular user group, but no longer belongs to that user group.
        if (userPostControlEnabledByUserGroup && (!foundUserPostControlEnabledByUserGroup))
        {
            validateWithNoError = false;
        }
        else if (!userPostControlEnabledByUserGroup && ((userGroupCount == 0) || (userGroupHasPostPermissionsCount == 0)))
        {
            select firstOnly * from userInfo
                where userInfo.Id == _user.parmUserId();

            if (userInfo == null)
            {
                // user with no user group was not found
                validateWithNoError = false;
            }
        }

        if (!validateWithNoError)
        {
            error(strfmt("@SYS116689", _user.parmUserId()));
        }

        return  validateWithNoError;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>