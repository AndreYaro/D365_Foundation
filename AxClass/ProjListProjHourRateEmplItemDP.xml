<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjHourRateEmplItemDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjHourRateEmplItemDP</c> class provides data for the
///    <c>ProjListProjHourRateEmplItem</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjStatementEmplItem)),
    SRSReportParameterAttribute(classStr(ProjListProjHourRateContract))
]

class ProjListProjHourRateEmplItemDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    ProjOptionRevenue       revenue;
    ProjOptionOnAcc         onAcc;
    TransDate               projFromDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    ProjListColumnData      actualVsBudget;
    ProjForecastModelId     forecastModelId;
    boolean                 skipBlankId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;
    ProjListProfitFactor    profitFactor;

    ProjListProjTrans_HourRate      listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjHelpClass           projHelpClass;
    ProjListProjProfitLossTmp       projListProjProfitLossTmp;
    projStatement                   projStatement;

    QueryRun                qrun;

    ResourceRecId           resourceId;
    Name                    name;

    ProjQty                 qtyHour;

    AmountMST               salary;
    AmountMST               revenueAmt;
    AmountMST               valueAdded;
    AmountMST               margin;

    int                     showQtyHour, showValueFactor, showRevenue, showSalary, showMargin;
    int                     hourQtyDecimals, valueAddedDecimals, grossMarginDecimals, amountDecimals;
    str                     headerLabel, periodLabel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
/// <summary>
///    Calculate the amounts that are needed for the report.
/// </summary>
void calculate()
{
    projStatement.parmResource(resourceId);

    switch (listProjTransLayout.parmAmountQty())
    {
        case ProjAmountQty::Amount:
            salary      = projStatement.a310_Cost_Hour(false,ProjListStateType::ProfitLoss);
            break;
        case ProjAmountQty::Qty:
            qtyHour     = projStatement.a310_Cost_Hour_Qty(false,ProjListStateType::ProfitLoss);
            break;
        case ProjAmountQty::AmountQty:
            salary      = projStatement.a310_Cost_Hour(false,ProjListStateType::ProfitLoss);
            qtyHour     = projStatement.a310_Cost_Hour_Qty(false,ProjListStateType::ProfitLoss);
            break;
    }

    revenueAmt  = projStatement.a100_Total_Revenue();
    valueAdded  = projStatement.a400_Value_Added();
    margin      = projStatement.a500_Gross_Margin();
}

]]></Source>
			</Method>
			<Method>
				<Name>calculateNoId</Name>
				<Source><![CDATA[
/// <summary>
///    Calculate the amounts for blank ID values.
/// </summary>
void calculateNoId()
{
    projStatement.parmResource(0);

    revenueAmt  = projStatement.a100_Total_Revenue();
    valueAdded  = projStatement.a400_Value_Added();
    margin      = projStatement.a500_Gross_Margin();
}

]]></Source>
			</Method>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
/// <summary>
///    This method retrieves the parameter values and assign them to the variables.
/// </summary>
private void getParameterValues()
{
    ProjListProjHourRateContract contract = this.parmDataContract() as ProjListProjHourRateContract;

    timeMaterial = contract.parmTimeMaterial();
    fixedPrice = contract.parmFixedPrice();
    investment = contract.parmInvestment();
    internalCost = contract.parmInternalCost();
    time = contract.parmTime();

    hour = contract.parmHour();
    expenses = contract.parmExpenses();
    item = contract.parmItem();
    revenue = contract.parmRevenue();
    onAcc = contract.parmOnAcc();

    projFromDate = contract.parmProjFromDate();
    projToDate = contract.parmProjToDate();
    ledgerFromDate = contract.parmLedgerFromDate();
    ledgerToDate = contract.parmLedgerToDate();

    actualVsBudget = contract.parmActualVsBudget();
    forecastModelId = contract.parmForecastModelId();

    skipBlankId = contract.parmSkipBlankId();
    skipZero = contract.parmSkipZero();
}

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjProfitLossTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Fetches the data from the <c>projListProjProfitLossTmp</c> table.
/// </summary>
/// <returns>
///    The data from the <c>projListProjProfitLossTmp</c> table.
/// </returns>
[SRSReportDataSetAttribute('projListProjProfitLossTmp')]
public ProjListProjProfitLossTmp getProjListProjProfitLossTmp()
{
    select * from projListProjProfitLossTmp;
    return projListProjProfitLossTmp;
}

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
/// <summary>
///    Initializes the <c>ProjListProjTrans</c> class by using the parameters.
/// </summary>
private void initProjListTrans()
{
    listProjTrans = ProjListProjTrans::construct(ProjListStateType::HourRate, ProjListStateId::EmplItem);
    listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

    listProjTrans.parmTimeMaterial(timeMaterial);
    listProjTrans.parmFixedPrice(fixedPrice);
    listProjTrans.parmInvestment(investment);
    listProjTrans.parmInternalCost(internalCost);
    listProjTrans.parmTime(time);

    listProjTrans.parmHour(hour);
    listProjTrans.parmExpenses(expenses);
    listProjTrans.parmItem(item);
    listProjTrans.parmRevenue(revenue);
    listProjTrans.parmOnAcc(onAcc);

    listProjTrans.parmProjFromDate(projFromDate);
    listProjTrans.parmProjToDate(projToDate);
    listProjTrans.parmLedgerFromDate(ledgerFromDate);
    listProjTrans.parmLedgerToDate(ledgerToDate);

    listProjTrans.parmColumnData(actualVsBudget);
    listProjTrans.parmForecastModelId(forecastModelId);

    listProjTransLayout.parmSkipBlank(skipBlankId);
    listProjTransLayout.parmSkipZero(skipZero);
}

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
/// <summary>
///    Initializes the query.
/// </summary>
/// <param name="localquery">
///    The query that is associated with the report data provider class.
/// </param>
/// <returns>
///    The modified query.
/// </returns>
Query initQuery(Query localquery)
{
    QueryBuildDataSource    queryBuildDataSource;
    QueryBuildRange         queryBuildRangeItem;
    QueryBuildRange         queryBuildRangeSubscription;
    int localnextUniqueId;

    localnextUniqueId = localquery.nextUniqueId()-1;

    //Take into account each table that will be added as a data source
    if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
    {
        localnextUniqueId = localnextUniqueId-1;//Deduct 1 for InventTable
    }
    if (isConfigurationkeyEnabled(configurationKeyNum(SMASubscription)))
    {
        localnextUniqueId = localnextUniqueId-1;//Deduct 1 for SMASubscription
    }

    if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
    {
        localnextUniqueId = localnextUniqueId+1;
        localquery.nextUniqueId(localnextUniqueId);

        queryBuildDataSource = localquery.dataSourceTable(tableNum(InventTable));
        if (!queryBuildDataSource)
        {
            queryBuildDataSource = localquery.addDataSource(tableNum(InventTable));
        }

        queryBuildRangeItem = queryBuildDataSource.findRange(fieldNum(InventTable, ItemId));
        if (!queryBuildRangeItem)
        {
            queryBuildRangeItem = queryBuildDataSource.addRange(fieldNum(InventTable, ItemId));
        }
    }

    if (isConfigurationkeyEnabled(configurationKeyNum(SMASubscription)))
    {
        localnextUniqueId = localnextUniqueId+1;
        localquery.nextUniqueId(localnextUniqueId);

        queryBuildDataSource = localquery.dataSourceTable(tableNum(SMASubscriptionTable));
        if (!queryBuildDataSource)
        {
            queryBuildDataSource = localquery.addDataSource(tableNum(SMASubscriptionTable));
        }
        queryBuildRangeSubscription = queryBuildDataSource.findRange(fieldNum(SMASubscriptionTable, SubscriptionId));
        if (!queryBuildRangeSubscription)
        {
            queryBuildRangeSubscription = queryBuildDataSource.addRange(fieldNum(SMASubscriptionTable, SubscriptionId));
        }
    }

    return localquery;
}

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjProfitLossTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Retrieves the required data and inserts it into the temporary table.
/// </summary>
private void insertProjListProjProfitLossTmp()
{
    projListProjProfitLossTmp.clear();

    projListProjProfitLossTmp.Id            = ResourceFacade::getID(resourceId);
    projListProjProfitLossTmp.Name          = name;

    projListProjProfitLossTmp.QtyHour       = qtyHour;

    if (!qtyHour)
    {
        projListProjProfitLossTmp.CostHour  = 0;
        projListProjProfitLossTmp.Revenue   = 0;
        projListProjProfitLossTmp.ValueAdded= 0;
    }
    else
    {
        projListProjProfitLossTmp.CostHour = salary/qtyHour;
        projListProjProfitLossTmp.Revenue  = revenueAmt/qtyHour;
        projListProjProfitLossTmp.ValueAdded = valueAdded/qtyHour;
    }

    projListProjProfitLossTmp.ContributionMargin = projListProjProfitLossTmp.ValueAdded - projListProjProfitLossTmp.CostHour;

    // set labels
    projListProjProfitLossTmp.IdLabel       = "@Res:Resource";
    projListProjProfitLossTmp.HeaderLabel   = headerLabel;
    projListProjProfitLossTmp.PeriodLabel   = periodLabel;

    // set decimal values
    projListProjProfitLossTmp.DecimalHourQty     = hourQtyDecimals;
    projListProjProfitLossTmp.DecimalValueAdded  = valueAddedDecimals;
    projListProjProfitLossTmp.DecimalGrossMargin = grossMarginDecimals;
    projListProjProfitLossTmp.DecimalAmount      = amountDecimals;

    // set field visibility
    projListProjProfitLossTmp.ShowContributionMargin = showMargin;
    projListProjProfitLossTmp.ShowCostHour           = showSalary;
    projListProjProfitLossTmp.ShowQtyHour            = showQtyHour;
    projListProjProfitLossTmp.ShowRevenue            = showRevenue;
    projListProjProfitLossTmp.ShowValueFactor        = showValueFactor;

    projListProjProfitLossTmp.insert();
}

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
/// <summary>
///    Indicates whether the amounts are equal to zero.
/// </summary>
/// <returns>
///    false if the values are zero; otherwise, true.
/// </returns>
boolean lineValue()
{
    if (qtyHour == 0)
    {
        return false;
    }
    else
    {
        return ((salary/qtyHour) != 0) || ((revenueAmt/qtyHour) !=0);
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>printEmplItem</Name>
				<Source><![CDATA[
/// <summary>
///    Retrieves the employee and item records and calls the <c>calculate</c> method.
/// </summary>
void printEmplItem()
{
    ResourceView    resourceLocal;

    if (SysReportRun::changed(qrun,tableNum(ResourceView)))
    {
        resourceLocal   = qrun.get(tableNum(ResourceView));

        resourceId      = resourceLocal.RecId;
        name            = ResourceFacade::getName(resourceId);

        this.calculate();

        if (! skipZero || (this.lineValue()))
        {
            this.insertProjListProjProfitLossTmp();
        }
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
/// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    This method provides the ability to write the report business logic. It will be called by SQL
///    Server Reporting Services (SSRS) at run time. This method should compute data and populate the data
///    tables that will be returned to SSRS.
/// </remarks>
public void processReport()
{
    this.getParameterValues();
    this.initProjListTrans();

    headerLabel   = listProjTrans.formatSelection(showAmount);
    periodLabel   = listProjTrans.formatPeriodLabel();

    [showQtyHour, showValueFactor, showRevenue, showSalary, showMargin] = listProjTrans.setDisplayFlags(ProjAmountQty::AmountQty);

    [hourQtyDecimals, amountDecimals,
    grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(ProjShowAmount::WithDec);

    projStatement = projStatement::newProjListHourRate(
                        listProjTrans,
                        ProjListStateProjType::Project,
                        projListProjTrans2Period::columnData2ActualBudget(actualVsBudget),
                        listProjTransLayout.parmAmountQty(),
                        forecastModelId);

    this.initQuery(this.parmQuery());

    qrun = new QueryRun(this.parmQuery());

    //  print lines with no Id eg. cost and revenue with no Employee
    if (! skipBlankId)
    {
        this.calculateNoId();
        if (this.lineValue())
        {
            this.insertProjListProjProfitLossTmp();
        }
    }
    while (qrun.next())
    {
        this.printEmplItem();
    }
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>