<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSequenceNumberMover</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class WHSSequenceNumberMover extends WHSSequenceNumberMoverBase
{
    protected container sequenceNumberSearchFieldNames;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromTableName</Name>
				<Source><![CDATA[
    public static WHSSequenceNumberMover newFromTableName(TableName _tableName, FieldName _sequenceNumberFieldName, container _sequenceNumberSearchFieldNames)
    {
        WHSSequenceNumberMover mover = new WHSSequenceNumberMover();
        
        mover.sysDictTable = SysDictTable::newName(_tableName);
        mover.sequenceNumberFieldName = _sequenceNumberFieldName;
        mover.sequenceNumberSearchFieldNames = _sequenceNumberSearchFieldNames;


        return mover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAdjacentSequenceNumberRow</Name>
				<Source><![CDATA[
    protected Common findAdjacentSequenceNumberRow(Common _row, boolean _up)
    {
        Common cursor = sysDictTable.makeRecord();

        if (sysDictTable.tableType() == TableType::InMemory)
        {
            cursor.setTmpData(_row);
        }

        SysDaQueryExpression otherSequenceNumbersExpression = this.buildQueryExpressionBySequenceNumberSearchFields(_row, cursor);
        SysDaQueryExpression sequenceNumberCompareExpression = this.buildSequenceNumberCompareExpression(_row, cursor, _up);
        SysDaQueryExpression whereExpression = otherSequenceNumbersExpression
            ? sequenceNumberCompareExpression.and(otherSequenceNumbersExpression)
            : sequenceNumberCompareExpression;

        SysDaOrderBys orderBySequenceNumberExpression = this.buildOrderBySequenceNumberExpression(_up);

        SysDaQueryObject query = this.initQuery(cursor);
        query.whereClause(whereExpression);
        query.orderByClause(orderBySequenceNumberExpression); 

        this.executeQuery(query);

        return cursor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryExpressionBySequenceNumberSearchFields</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildQueryExpressionBySequenceNumberSearchFields(Common _rowToMove, Common _cursor)
    {
        SysDaQueryExpression whereExpression;
        for (int fieldNumber = 1; fieldNumber <= conLen(sequenceNumberSearchFieldNames); fieldNumber++)
        {
            FieldName fieldName = conPeek(sequenceNumberSearchFieldNames, fieldNumber);
            anytype rowToMoveFieldValue = _rowToMove.getFieldValue(fieldName);

            SysDaQueryExpression equalsExpression =
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_cursor, fieldName),
                    new SysDaValueExpression(rowToMoveFieldValue));

            if (whereExpression)
            {
                whereExpression.and(equalsExpression);
            }
            else
            {
                whereExpression = equalsExpression;
            }
        }

        return whereExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSequenceNumberCompareExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildSequenceNumberCompareExpression(Common _row, Common _cursor, boolean _up)
    {
        anytype currentSequenceNumber = _row.getFieldValue(sequenceNumberFieldName);
        SysDaFieldExpression sequenceNumberFieldExpression = new SysDaFieldExpression(_cursor, sequenceNumberFieldName);
        SysDaValueExpression currentSequenceNumberValueExpression = new SysDaValueExpression(currentSequenceNumber);
        if (_up)
        {
            return new SysDaLessThanExpression(sequenceNumberFieldExpression, currentSequenceNumberValueExpression);
        }
        else
        {
            return new SysDaGreaterThanExpression(sequenceNumberFieldExpression, currentSequenceNumberValueExpression);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOrderBySequenceNumberExpression</Name>
				<Source><![CDATA[
    private SysDaOrderBys buildOrderBySequenceNumberExpression(boolean _up)
    {
        return _up
            ? new SysDaOrderBys().addDescending(sequenceNumberFieldName)
            : new SysDaOrderBys().add(sequenceNumberFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject initQuery(Common _cursor)
    {
        SysDaQueryObject query = new SysDaQueryObject(_cursor); 
        query.firstOnlyHint = true;
        query.forUpdateHint = true;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    private void executeQuery(SysDaQueryObject _query)
    {
        SysDaFindObject findObject = new SysDaFindObject(_query);
        new SysDaFindStatement().find(findObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    protected void validateParameters()
    {
        super();

        this.validateSequenceNumberSearchFieldsAreStrings();
        this.validateSequenceNumberSearchFieldsAreUnique();
        this.validateSequenceNumberSearchFieldsBelongToTable();
        this.validateSequenceNumberFieldNameNotInSearchFieldNames();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSequenceNumberSearchFieldsAreStrings</Name>
				<Source><![CDATA[
    private void validateSequenceNumberSearchFieldsAreStrings()
    {
        for (int itemNumber = 1; itemNumber <= conLen(sequenceNumberSearchFieldNames); itemNumber++)
        {
            anytype item = conPeek(sequenceNumberSearchFieldNames, itemNumber);
            if (typeOf(item) != Types::String)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSequenceNumberSearchFieldsAreUnique</Name>
				<Source><![CDATA[
    private void validateSequenceNumberSearchFieldsAreUnique()
    {
        Set stringsSet = new Set(Types::String);
        for (int stringNumber = 1; stringNumber <= conLen(sequenceNumberSearchFieldNames); stringNumber++)
        {
            str string = conPeek(sequenceNumberSearchFieldNames, stringNumber);
            if (!stringsSet.add(string))
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSequenceNumberSearchFieldsBelongToTable</Name>
				<Source><![CDATA[
    private void validateSequenceNumberSearchFieldsBelongToTable()
    {
        TableId tableId = sysDictTable.id();
        for (int fieldNumber = 1; fieldNumber <= conLen(sequenceNumberSearchFieldNames); fieldNumber++)
        {
            FieldName fieldName = conPeek(sequenceNumberSearchFieldNames, fieldNumber);
            boolean belongsToTable = fieldName2Id(tableId, fieldName);
            if (!belongsToTable)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSequenceNumberFieldNameNotInSearchFieldNames</Name>
				<Source><![CDATA[
    private void validateSequenceNumberFieldNameNotInSearchFieldNames()
    {
        for (int fieldNumber = 1; fieldNumber <= conLen(sequenceNumberSearchFieldNames); fieldNumber++)
        {
            FieldName conFieldName = conPeek(sequenceNumberSearchFieldNames, fieldNumber);
            if (sequenceNumberFieldName == conFieldName)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>