<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPostingProcessorSim_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerPostingProcessorSim_IT</c> class handles processing required during ledger posting.
/// </summary>
public class LedgerPostingProcessorSim_IT
{
    public Set generalJournalEntryRecIds;
    public Set generalJournalEntryTransferIds;

    private SysInstrumentationLogger instrumentationLogger;

    private static LedgerPostingProcessorSim_IT singleton;

    public boolean isAdded;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addGeneralJournalEntrySimRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a record ID from the <c>GeneralJournalEntrySim</c> table.
    /// </summary>
    /// <param name="_generalJournalEntryRecId">
    /// A record ID from the <c>GeneralJournalEntry</c> table.
    /// </param>
    public void addGeneralJournalEntrySimRecId(GeneralJournalEntryRecId _generalJournalEntryRecId)
    {
        generalJournalEntryRecIds.add(_generalJournalEntryRecId);

        isAdded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralJournalEntrySimTransferId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a transfer ID from the <c>GeneralJournalEntry</c> table.
    /// </summary>
    /// <param name="_transferId">
    /// A transfer ID from the <c>GeneralJournalEntry</c> table.
    /// </param>
    public void addGeneralJournalEntrySimTransferId(SubledgerJournalTransferId _transferId)
    {
        generalJournalEntryTransferIds.add(_transferId);

        isAdded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // reset because we assume the collections will be used if the class is initialized
        this.reset();

        instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(LedgerPostingProcessorSim_IT));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the processor.
    /// </summary>
    public void reset()
    {
        generalJournalEntryRecIds = new Set(Types::Int64);
        generalJournalEntryTransferIds = new Set(Types::Int64);

        isAdded = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyAbort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing after the abort of the database transaction.
    /// </summary>
    public void ttsNotifyAbort()
    {
        if (isAdded)
        {
            this.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyCommit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing after the commit of the database transaction.
    /// </summary>
    public void ttsNotifyCommit()
    {
        if (isAdded && appl.ttsLevel() == 0)
        {
            this.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyPostBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing after the beginning of the database transaction.
    /// </summary>
    public void ttsNotifyPostBegin()
    {
        if (isAdded && appl.ttsLevel() == 1)
        {
            this.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyPreCommit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing before the commit of the database transaction.
    /// </summary>
    /// <remarks>
    /// The inserts to the <c>DimensionFocusUnprocessedTransactionsSim_IT</c> table are
    /// held until database transaction level one to avoid database blocking in the
    /// case of a caller with a long running database transaction.
    /// </remarks>
    public void ttsNotifyPreCommit()
    {
        int ttsLevel = appl.ttsLevel();

        if (isAdded
            && ttsLevel == 1
            && generalJournalEntryRecIds != null)
        {
            if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                this.insertGeneralJournalUnprocessedTransactionsSim_IT();
            }
            else
            {
                SetEnumerator enumerator = generalJournalEntryRecIds.getEnumerator();
                RecordInsertList dimFocusUnprTransList = new RecordInsertList(tableNum(DimensionFocusUnprocessedTransactionsSim_IT));

                // disable caching so we don't get stale data
                DimensionHierarchy dimHierarchy;
                dimHierarchy.disableCache(true);

                while select RecId from dimHierarchy
                    where dimHierarchy.StructureType == DimensionHierarchyType::Focus
                        && (dimHierarchy.FocusState == DimensionFocusBalanceInitializationState::InProcess
                        || dimHierarchy.FocusState == DimensionFocusBalanceInitializationState::Initialized)
                {
                    while (enumerator.moveNext())
                    {
                        GeneralJournalEntryRecId generalJournalEntryRecId = enumerator.current();
                        DimensionFocusUnprocessedTransactionsSim_IT dimFocusUnprocessedTransactions;
                        dimFocusUnprocessedTransactions.GeneralJournalEntry = generalJournalEntryRecId;
                        dimFocusUnprocessedTransactions.FocusDimensionHierarchy = dimHierarchy.RecId;
                        dimFocusUnprocessedTransactions.State = DimensionFocusBalanceCalculationState::Pending;
                        dimFocusUnprTransList.add(dimFocusUnprocessedTransactions);
                    }

                    enumerator.reset();
                }

                dimFocusUnprTransList.insertDatabase();
            }
        }

        if (isAdded
            && ttsLevel == 1
            && generalJournalEntryTransferIds != null)
        {
            if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                this.insertGeneralJournalTransferUnprocessedTransactionsSim_IT();
            }
            else
            {
                SetEnumerator enumerator = generalJournalEntryTransferIds.getEnumerator();
                DimensionFocusBalanceCalculationState calculationState = DimensionFocusBalanceCalculationState::Pending;

                while (enumerator.moveNext())
                {
                    SubledgerJournalTransferId transferId = enumerator.current();
                    GeneralJournalEntrySim_IT generalJournalEntry;
                    DimensionHierarchy dimHierarchy;
                    DimensionFocusUnprocessedTransactionsSim_IT dimFocusUnprocessedTransactions;

                    insert_recordset dimFocusUnprocessedTransactions
                        (GeneralJournalEntry, FocusDimensionHierarchy, State)
                    select RecId from generalJournalEntry
                        where generalJournalEntry.TransferId == transferId
                    join RecId, calculationState from dimHierarchy
                        where dimHierarchy.StructureType == DimensionHierarchyType::Focus
                            && (dimHierarchy.FocusState == DimensionFocusBalanceInitializationState::InProcess
                            || dimHierarchy.FocusState == DimensionFocusBalanceInitializationState::Initialized);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGeneralJournalUnprocessedTransactionsSim_IT</Name>
				<Source><![CDATA[
    private void insertGeneralJournalUnprocessedTransactionsSim_IT()
    {
        RecordInsertList unprocessedTransList = new RecordInsertList(tableNum(GeneralLedgerBalanceUnprocessedTransactionsSim_IT));
        SetEnumerator enumerator = generalJournalEntryRecIds.getEnumerator();

        using (var activity = instrumentationLogger.activityContext(
            classStr(LedgerPostingProcessorSim_IT),
            methodStr(LedgerPostingProcessorSim_IT, insertGeneralJournalUnprocessedTransactionsSim_IT)))
        {
            activity.addCustomProperty('GeneralJournalHeaderUnprocessedCount', int2Str(generalJournalEntryRecIds.elements()));

            while (enumerator.moveNext())
            {
                GeneralJournalEntryRecId generalJournalEntryRecId = enumerator.current();

                GeneralLedgerBalanceUnprocessedTransactionsSim_IT unprocessedTransactions;
                unprocessedTransactions.GeneralJournalEntry = generalJournalEntryRecId;
                unprocessedTransactions.State = GeneralLedgerBalanceCalculationState::Pending;

                unprocessedTransList.add(unprocessedTransactions);
            }

            unprocessedTransList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGeneralJournalTransferUnprocessedTransactionsSim_IT</Name>
				<Source><![CDATA[
    private void insertGeneralJournalTransferUnprocessedTransactionsSim_IT()
    {
        SetEnumerator enumerator = generalJournalEntryTransferIds.getEnumerator();

        using (var activity = instrumentationLogger.activityContext(
            classStr(LedgerPostingProcessorSim_IT),
            methodStr(LedgerPostingProcessorSim_IT, insertGeneralJournalTransferUnprocessedTransactionsSim_IT)))
        {
            activity.addCustomProperty('GeneralJournalHeaderTransferUnprocessedCount', int2Str(generalJournalEntryRecIds.elements()));

            while (enumerator.moveNext())
            {
                GeneralLedgerBalanceUnprocessedTransactionsSim_IT unprocessedTransactions;
                GeneralLedgerBalanceCalculationState state = GeneralLedgerBalanceCalculationState::Pending;

                SubledgerJournalTransferId transferId = enumerator.current();
                GeneralJournalEntrySim_IT generalJournalEntry;

                insert_recordset unprocessedTransactions
                    (GeneralJournalEntry, State)
                select RecId, state from generalJournalEntry
                    where generalJournalEntry.TransferId == transferId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of <c>LedgerPostingProcessorSim_IT</c> class.
    /// </summary>
    /// <returns>The instance of the <c>LedgerPostingProcessorSim_IT</c> class.</returns>
    public static LedgerPostingProcessorSim_IT instance()
    {
        if (singleton == null)
        {
            singleton = LedgerPostingProcessorSim_IT::construct();
        }

        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerPostingProcessorSim_IT</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerPostingProcessorSim_IT</c> object.</returns>
    public static LedgerPostingProcessorSim_IT construct()
    {
        return new LedgerPostingProcessorSim_IT();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>