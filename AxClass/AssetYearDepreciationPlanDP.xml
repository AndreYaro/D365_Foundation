<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetYearDepreciationPlanDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///      The <c>AssetYearDepreciationPlanDP</c> class is the data provider for the <c>AssetYearDepreciationPlan</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetYearDepreciationPlan)),
    SRSReportParameterAttribute(classstr(AssetYearDepreciationPlanContract))
]
public class AssetYearDepreciationPlanDP extends SrsReportDataProviderPreProcessTempDB
{
    AssetYearDepreciationPlanTmp assetYearDepreciationPlanTmp;
    int monthOrder[12];
    AssetAmount runningStartingBalance;
    AssetAmount runningClosingBalance;
    AssetAmount runningWriteupDown;
    AssetAmount runningDepreciation1;
    AssetAmount runningDepreciation2;
    AssetAmount runningDepreciation3;
    AssetAmount runningDepreciation4;
    AssetAmount runningDepreciation5;
    AssetAmount runningDepreciation6;
    AssetAmount runningDepreciation7;
    AssetAmount runningDepreciation8;
    AssetAmount runningDepreciation9;
    AssetAmount runningDepreciation10;
    AssetAmount runningDepreciation11;
    AssetAmount runningDepreciation12;
    AssetAmount depreciationBeforePeriod;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRunningTotals</Name>
				<Source><![CDATA[
    private void addRunningTotals()
    {
        assetYearDepreciationPlanTmp.PrevRunningStartingValue = runningStartingBalance;
        runningStartingBalance += assetYearDepreciationPlanTmp.StartingValue;
        assetYearDepreciationPlanTmp.RunningStartingValue = runningStartingBalance;

        assetYearDepreciationPlanTmp.PrevRunningClosingValue = runningClosingBalance;
        runningClosingBalance += assetYearDepreciationPlanTmp.ClosingValue;
        assetYearDepreciationPlanTmp.RunningClosingValue = runningClosingBalance;

        assetYearDepreciationPlanTmp.PrevRunningWriteUpDown = runningWriteupDown;
        runningWriteupDown += assetYearDepreciationPlanTmp.WriteUpDown;
        assetYearDepreciationPlanTmp.RunningWriteUpDown = runningWriteupDown;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation1 = runningDepreciation1;
        runningDepreciation1 += assetYearDepreciationPlanTmp.Depreciation1;
        assetYearDepreciationPlanTmp.RunningDepreciation1 = runningDepreciation1;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation2 = runningDepreciation2;
        runningDepreciation2 += assetYearDepreciationPlanTmp.Depreciation2;
        assetYearDepreciationPlanTmp.RunningDepreciation2 = runningDepreciation2;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation3 = runningDepreciation3;
        runningDepreciation3 += assetYearDepreciationPlanTmp.Depreciation3;
        assetYearDepreciationPlanTmp.RunningDepreciation3 = runningDepreciation3;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation4 = runningDepreciation4;
        runningDepreciation4 += assetYearDepreciationPlanTmp.Depreciation4;
        assetYearDepreciationPlanTmp.RunningDepreciation4 = runningDepreciation4;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation5 = runningDepreciation5;
        runningDepreciation5 += assetYearDepreciationPlanTmp.Depreciation5;
        assetYearDepreciationPlanTmp.RunningDepreciation5 = runningDepreciation5;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation6 = runningDepreciation6;
        runningDepreciation6 += assetYearDepreciationPlanTmp.Depreciation6;
        assetYearDepreciationPlanTmp.RunningDepreciation6 = runningDepreciation6;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation7 = runningDepreciation7;
        runningDepreciation7 += assetYearDepreciationPlanTmp.Depreciation7;
        assetYearDepreciationPlanTmp.RunningDepreciation7 = runningDepreciation7;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation8 = runningDepreciation8;
        runningDepreciation8 += assetYearDepreciationPlanTmp.Depreciation8;
        assetYearDepreciationPlanTmp.RunningDepreciation8 = runningDepreciation8;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation9 = runningDepreciation9;
        runningDepreciation9 += assetYearDepreciationPlanTmp.Depreciation9;
        assetYearDepreciationPlanTmp.RunningDepreciation9 = runningDepreciation9;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation10 = runningDepreciation10;
        runningDepreciation10 += assetYearDepreciationPlanTmp.Depreciation10;
        assetYearDepreciationPlanTmp.RunningDepreciation10 = runningDepreciation10;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation11 = runningDepreciation11;
        runningDepreciation11 += assetYearDepreciationPlanTmp.Depreciation11;
        assetYearDepreciationPlanTmp.RunningDepreciation11 = runningDepreciation11;

        assetYearDepreciationPlanTmp.PrevRunningDepreciation12 = runningDepreciation12;
        runningDepreciation12 += assetYearDepreciationPlanTmp.Depreciation12;
        assetYearDepreciationPlanTmp.RunningDepreciation12 = runningDepreciation12;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToDepreciationValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the depreciation amount to the depreciation column, depending on the month of the transaction
    /// date.
    /// </summary>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <param name="_amount">
    /// The depreciation amount.
    /// </param>
    private void addToDepreciationValues(TransDate _date, AssetAmount _amount)
    {
        switch (mthOfYr(_date))
        {
            case monthOrder[1]:
                assetYearDepreciationPlanTmp.Depreciation1 += _amount;
                break;
            case monthOrder[2]:
                assetYearDepreciationPlanTmp.Depreciation2 += _amount;
                break;
            case monthOrder[3]:
                assetYearDepreciationPlanTmp.Depreciation3 += _amount;
                break;
            case monthOrder[4]:
                assetYearDepreciationPlanTmp.Depreciation4 += _amount;
                break;
            case monthOrder[5]:
                assetYearDepreciationPlanTmp.Depreciation5 += _amount;
                break;
            case monthOrder[6]:
                assetYearDepreciationPlanTmp.Depreciation6 += _amount;
                break;
            case monthOrder[7]:
                assetYearDepreciationPlanTmp.Depreciation7 += _amount;
                break;
            case monthOrder[8]:
                assetYearDepreciationPlanTmp.Depreciation8 += _amount;
                break;
            case monthOrder[9]:
                assetYearDepreciationPlanTmp.Depreciation9 += _amount;
                break;
            case monthOrder[10]:
                assetYearDepreciationPlanTmp.Depreciation10 += _amount;
                break;
            case monthOrder[11]:
                assetYearDepreciationPlanTmp.Depreciation11 += _amount;
                break;
            case monthOrder[12]:
                assetYearDepreciationPlanTmp.Depreciation12 += _amount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBudgetDepreciations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the depreciation amounts posted to the budget model.
    /// </summary>
    /// <param name="_assetBook">
    /// The <c>assetbook</c> object.
    /// </param>
    /// <param name="_fromDate">
    /// The start date.
    /// </param>
    /// <param name="_toDate">
    /// The end date.
    /// </param>
    /// <param name="_budgetModelId">
    /// The budget model ID.
    /// </param>
    private void calculateBudgetDepreciations(AssetBook _assetBook, FromDate _fromDate, ToDate _toDate, BudgetModelId _budgetModelId)
    {
        AssetBudget assetBudget;

        while select TransDate, AmountCur, CurrencyCode from assetBudget
            where assetBudget.AssetId     == _assetBook.AssetId                       &&
                  assetBudget.BookId      == _assetBook.BookId                        &&
                  (assetBudget.TransType  == AssetTransType::Depreciation            ||
                   assetBudget.TransType  == AssetTransType::DepreciationNotCost_PL) &&
                  assetBudget.TransDate   >= _fromDate                                &&
                  assetBudget.TransDate   <= _toDate                                  &&
                  assetBudget.BudgetModel == _budgetModelId
        {
            this.addToDepreciationValues(assetBudget.TransDate, -CurrencyExchangeHelper::amountCur2MST(assetBudget.AmountCur, assetBudget.CurrencyCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMonthlyPlanValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the futuristic depreciation amounts.
    /// </summary>
    /// <param name="_assetBook">
    /// The <c>assetbook</c> object.
    /// </param>
    /// <param name="_fromDate">
    /// The start date.
    /// </param>
    /// <param name="_toDate">
    /// The end date.
    /// </param>
    private void calculateMonthlyPlanValues(AssetBook _assetBook, FromDate _fromDate, ToDate _toDate)
    {
        TmpDateSum tmpDateSum;

        var initDeprProfile = AssetInitDepreciationProfile::newFromBookDate(_assetBook, _toDate);
        initDeprProfile.parmCalculateOnlyDepreciation(true);
        tmpDateSum.setTmpData(initDeprProfile.calcDepreciationProfile());

        select sum(TmpNumerals01) from tmpDateSum
            where tmpDateSum.TransDate < _fromDate;
        depreciationBeforePeriod = tmpDateSum.TmpNumerals01;

        while select tmpDateSum
            where tmpDateSum.TransDate >= _fromDate &&
                  tmpDateSum.TransDate <= _toDate
        {
            // TmpNumerals01 contains depreciation amount
            if (tmpDateSum.TmpNumerals01)
            {
               this.addToDepreciationValues(tmpDateSum.TransDate, tmpDateSum.TmpNumerals01);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMonthlyRealizedValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the posted depreciation amounts.
    /// </summary>
    /// <param name="_assetBook">
    /// The <c>assetBook</c> object.
    /// </param>
    /// <param name="_fromDate">
    /// The start date.
    /// </param>
    /// <param name="_toDate">
    /// The end date.
    /// </param>
    private void calculateMonthlyRealizedValues(AssetBook _assetBook, FromDate _fromDate, ToDate _toDate)
    {
        AssetTrans assetTrans;

        while select TransDate, AmountMST from assetTrans
            where assetTrans.AssetId    == _assetBook.assetId                       &&
                  assetTrans.BookId     == _assetBook.bookId                        &&
                  (assetTrans.TransType == AssetTransType::Depreciation            ||
                   assetTrans.TransType == AssetTransType::DepreciationNotCost_PL) &&
                  assetTrans.TransDate  >= _fromDate                                &&
                  assetTrans.TransDate  <= _toDate
        {
            this.addToDepreciationValues(assetTrans.TransDate, -assetTrans.AmountMST);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetYearDepreciationPlanTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>AssetYearDepreciationPlanTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The <c>AssetYearDepreciationPlanTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(AssetYearDepreciationPlanTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetYearDepreciationPlanTmp getAssetYearDepreciationPlanTmp()
    {
        select assetYearDepreciationPlanTmp;
        return assetYearDepreciationPlanTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMonthOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the array that contains the ordering of the months.
    /// </summary>
    /// <param name="_fromDate">
    /// The start date.
    /// </param>
    /// <param name="_toDate">
    /// The end date.
    /// </param>
    /// <remarks>
    /// This is used to keep track of the order of the months, as the fiscal year can start from any month.
    /// </remarks>
    private void initializeMonthOrder(FromDate _fromDate, ToDate _toDate)
    {
        int counter;
        int currentMonth;
        date currentDate = mkDate(1, mthOfYr(_fromDate), year(_fromDate));
        date endDate = mkDate(1, mthOfYr(_toDate), year(_toDate));

        counter = 1;

        do
        {
            currentMonth = mthOfYr(currentDate);
            monthOrder[counter] = currentMonth;
            counter++;
            currentDate = nextMth(currentDate);
        }
        while (currentDate <= endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the monthly depreciations for the assets in a specified period.
    /// </summary>
    public void processReport()
    {
        #ISOCountryRegionCodes

        AssetSumCalc assetSumStart, assetSumCalc;
        AssetBook assetBook;
        AssetTable assetTable;
        AssetYearDepreciationPlanContract assetYearDepreciationPlanContract;
        FromDate fromDate;
        ToDate toDate;
        boolean includeBudgetModel;
        boolean includedPostedTransactions;
        BudgetModelId budgetModelId;
        AssetAmount initialAmount, futureDepreciations;
        AssetBudget assetBudget;
        Percent percent;
        QueryRun queryRun;
        boolean showReportDescriptions, isPercentageInProfile;
        boolean isPoland = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);

        assetYearDepreciationPlanContract = this.parmDataContract() as AssetYearDepreciationPlanContract;

        fromDate = assetYearDepreciationPlanContract.parmFromDate();
        toDate = assetYearDepreciationPlanContract.parmToDate();
        includeBudgetModel = assetYearDepreciationPlanContract.parmIncludeBudgetModel();
        includedPostedTransactions = assetYearDepreciationPlanContract.parmIncludePostedTransactions();
        budgetModelId = assetYearDepreciationPlanContract.parmBudgetModelId();
        showReportDescriptions = assetYearDepreciationPlanContract.parmShowReportDescriptions();

        this.initializeMonthOrder(fromDate, toDate);

        if (isPoland)
        {
            isPercentageInProfile = (AssetParameters::find().AssetPercentageLevel_PL == PlAssetPercentageLevel::Profile);
        }

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            assetYearDepreciationPlanTmp.clear();
            assetTable = queryRun.get(tableNum(AssetTable)) as AssetTable;
            assetBook =  queryRun.get(tableNum(AssetBook)) as AssetBook;

            assetYearDepreciationPlanTmp.AssetId = assetBook.AssetId;
            assetYearDepreciationPlanTmp.ValueModel = assetBook.BookId;

            initialAmount = 0;

            if (isPoland
            && (assetBook.depreciationProfile().Method == AssetDepreciationMethod::StraightLinePercentage_PL
            || assetBook.depreciationProfile().Method == AssetDepreciationMethod::ReducingBalance_PL))
            {
                if (isPercentageInProfile)
                {
                    percent = assetBook.depreciationProfile().Percentage;
                }
                else
                {
                    percent = assetBook.Percentage_PL;
                }

                if (percent <= 0)
                {
                    // No depreciation percentage has been defined so skip the asset-book combination
                    continue;
                }
            }
            else
            {
                 percent = 0;
            }

            assetYearDepreciationPlanTmp.Percentage = percent;

            if (assetBook.Status == AssetStatus::NoAcquisition && assetBook.AcquisitionDate <= fromDate)
            {
                initialAmount = assetBook.AcquisitionPrice - assetBook.DeprPrevPeriods_PL;

                // Get future depreciation values
                this.calculateMonthlyPlanValues(assetBook, fromDate, toDate);

                initialAmount = initialAmount - depreciationBeforePeriod;
                assetYearDepreciationPlanTmp.StartingValue = initialAmount;

                assetYearDepreciationPlanTmp.ClosingValue = initialAmount - this.sumDepreciationValuesThisYear();
            }
            else
            {
                assetSumStart = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, dateNull(), fromDate-1);
                assetYearDepreciationPlanTmp.StartingValue = assetSumStart.netBookValue();

                assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, fromDate, toDate);

                if (isPoland)
                {
                    assetYearDepreciationPlanTmp.WriteUpDown = assetSumCalc.acquisitionValue() + assetSumCalc.writeUpDownAdjValue();
                }
                else
                {
                    assetYearDepreciationPlanTmp.WriteUpDown = assetSumCalc.acquisitionValueAll() +
                        assetSumCalc.writeUpDownAdjValue() +
                        assetSumCalc.revaluationValue() +
                        assetSumCalc.capitalReserveValue() +
                        assetSumCalc.netBookValueDisposal();
                }

                // get future depreciation values
                this.calculateMonthlyPlanValues(assetBook, fromDate, toDate);
                assetYearDepreciationPlanTmp.StartingValue = assetYearDepreciationPlanTmp.StartingValue - depreciationBeforePeriod;

                futureDepreciations = this.sumDepreciationValuesThisYear() + depreciationBeforePeriod;

                if (includedPostedTransactions)
                {
                    // get posted depreciation values
                    this.calculateMonthlyRealizedValues(assetBook, fromDate, toDate);
                }

                if (assetBook.Status == AssetStatus::NoAcquisition)
                {
                    assetYearDepreciationPlanTmp.ClosingValue = assetBook.AcquisitionPrice - futureDepreciations;
                }
                else
                {
                    assetYearDepreciationPlanTmp.ClosingValue = assetSumStart.netBookValue() + assetSumCalc.netBookValue() - futureDepreciations;
                }
            }

            if (showReportDescriptions)
            {
                this.addRunningTotals();
            }

            assetYearDepreciationPlanTmp.insert();

            if (includeBudgetModel)
            {
                select firstonly RecId from assetBudget
                    where assetBudget.AssetId     == assetBook.AssetId
                        && assetBudget.BookId      == assetBook.BookId
                        && assetBudget.TransDate   <= toDate
                        && assetBudget.BudgetModel == budgetModelId;

                if (assetBudget.RecId)
                {
                    assetYearDepreciationPlanTmp.clear();
                    assetYearDepreciationPlanTmp.AssetId = '';
                    assetYearDepreciationPlanTmp.ValueModel = "@SYS125894";
                    assetYearDepreciationPlanTmp.Percentage = percent;
                    assetSumStart = AssetSumCalc_Budget::newAssetPeriod(assetBook.AssetId, budgetModelId, dateNull(), fromDate -1, assetBook.BookId);
                    assetSumCalc = AssetSumCalc_Budget::newAssetPeriod(assetBook.AssetId, budgetModelId, fromDate, toDate, assetBook.BookId);

                    assetYearDepreciationPlanTmp.StartingValue = assetSumStart.netBookValue();

                    if (isPoland)
                    {
                        assetYearDepreciationPlanTmp.WriteUpDown = assetSumCalc.acquisitionValue() + assetSumCalc.writeUpDownAdjValue();
                    }
                    else
                    {
                        assetYearDepreciationPlanTmp.WriteUpDown = assetSumCalc.acquisitionValueAll() +
                            assetSumCalc.writeUpDownAdjValue() +
                            assetSumCalc.revaluationValue()    +
                            assetSumCalc.capitalReserveValue() +
                            assetSumCalc.netBookValueDisposal();
                    }

                    this.calculateBudgetDepreciations(assetBook, fromDate, toDate, budgetModelId);

                    assetYearDepreciationPlanTmp.ClosingValue = assetYearDepreciationPlanTmp.StartingValue + assetSumCalc.netBookValue();

                    if (showReportDescriptions)
                    {
                        this.addRunningTotals();
                    }

                    assetYearDepreciationPlanTmp.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumDepreciationValuesThisYear</Name>
				<Source><![CDATA[
    private AssetAmount sumDepreciationValuesThisYear()
    {
        return assetYearDepreciationPlanTmp.Depreciation1 +
            assetYearDepreciationPlanTmp.Depreciation2 +
            assetYearDepreciationPlanTmp.Depreciation3 +
            assetYearDepreciationPlanTmp.Depreciation4 +
            assetYearDepreciationPlanTmp.Depreciation5 +
            assetYearDepreciationPlanTmp.Depreciation6 +
            assetYearDepreciationPlanTmp.Depreciation7 +
            assetYearDepreciationPlanTmp.Depreciation8 +
            assetYearDepreciationPlanTmp.Depreciation9 +
            assetYearDepreciationPlanTmp.Depreciation10 +
            assetYearDepreciationPlanTmp.Depreciation11 +
            assetYearDepreciationPlanTmp.Depreciation12;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>