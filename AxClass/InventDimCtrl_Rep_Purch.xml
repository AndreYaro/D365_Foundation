<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Rep_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimCtrl_Rep_Purch extends InventDimCtrl_Rep
{
    DocumentStatus              documentStatus;
    InventDimParm               inventDimParmFormletterParameters;
    InventDimParm               inventDimLine;
    InventDimParm               inventDimItem;
    VendFormletterParameters    vendFormletterParameters;
    boolean                     firstInventDimParmFormletterParameters;

    //Included for SRS reports
    InventDimParm               inventDimParmVisible;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventDimVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventDimParm</c> record for the inventory dimensions visibility.
    /// </summary>
    /// <returns>
    ///    The <c>InventDimParm</c> record for the inventory dimensions visibility.
    /// </returns>
    public InventDimParm getInventDimVisibility()
    {
        return inventDimParmVisible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventDimCtrl_Rep_Purch</c> class.
    /// </summary>
    /// <remarks>
    /// This method should always be called from the <c>new</c> method.
    /// </remarks>
    public void init()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmFormletter</Name>
				<Source><![CDATA[
    protected void initDimParmFormletter()
    {
        ListEnumerator enumerator = this.dimFields().getEnumerator();

        switch (documentStatus)
        {
            case DocumentStatus::ConfirmationRequest :
                    InventDimFixedClass::inventDimFixed2InventDimParm(vendFormletterParameters.InventDimPurchOrderConfirmationRequest,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
            case DocumentStatus::PurchaseOrder :
                    InventDimFixedClass::inventDimFixed2InventDimParm(vendFormletterParameters.InventDimPurchaseOrder,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
            case DocumentStatus::Invoice :
                    InventDimFixedClass::inventDimFixed2InventDimParm(vendFormletterParameters.InventDimInvoice,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
            case DocumentStatus::PackingSlip :
                    InventDimFixedClass::inventDimFixed2InventDimParm(vendFormletterParameters.InventDimPackingSlip,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
            case DocumentStatus::ReceiptsList :
                    InventDimFixedClass::inventDimFixed2InventDimParm(vendFormletterParameters.InventDimReceiptsList,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
            case DocumentStatus::RFQ,
                 DocumentStatus::RFQAccept,
                 DocumentStatus::RFQReject :
                    InventDimFixedClass::inventDimFixed2InventDimParm(vendFormletterParameters.InventDimRFQ,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
            case DocumentStatus::PurchReq :
                    InventDimFixedClass::inventDimFixed2InventDimParm(vendFormletterParameters.InventDimPurchReq,inventDimParmFormletterParameters);
                    firstInventDimParmFormletterParameters = false;
                    break;
        }

        inventDimLine.clear();
        inventDimItem.clear();

        while (enumerator.moveNext())
        {
            fieldId dimFieldId = enumerator.current();
            if (InventDim::isFieldIdProductDimension(dimFieldId))
            {
                this.setDimParmFieldId(dimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimParmFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set the field values of the <c>InventDimParm</c> table.
    /// </summary>
    /// <param name = "_dimFieldId">
    ///    A field ID from the <c>InventDim</c> table.
    /// </param>
    protected void setDimParmFieldId(FieldId _dimFieldId)
    {
        fieldId dimParmFieldId = InventDim::dim2dimParm(_dimFieldId);
        if (vendFormletterParameters.ItemDimPlacement == ItemDimFormLetter::Line && inventDimParmFormletterParameters.(dimParmFieldId))
        {
            inventDimLine.(dimParmFieldId) = NoYes::Yes;
            inventDimParmVisible.(dimParmFieldId) = NoYes::Yes;//Included for SRS reports
        }
        else if (vendFormletterParameters.ItemDimPlacement == ItemDimFormLetter::Item && inventDimParmFormletterParameters.(dimParmFieldId))
        {
            inventDimItem.(dimParmFieldId) = NoYes::Yes;
            inventDimParmVisible.(dimParmFieldId) = NoYes::Yes;//Included for SRS reports
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimParmVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>Product</c> dimension visibility for <c>Inventory</c> dimensions.
    /// </summary>
    /// <returns>
    ///    The visibility <c>InventDimParm</c> record.
    /// </returns>
    /// <remarks>
    ///    This method is included for SSRS Report.
    /// </remarks>
    public InventDimParm initProductDimParmVisible()
    {
        ListEnumerator  enumerator      = this.dimFields().getEnumerator();

        while (enumerator.moveNext())
        {
            fieldId dimFieldId = enumerator.current();
            fieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
            dimParmVisible.(dimParmFieldId) = this.mustShowProductField(dimFieldId);
        }

        return dimParmVisible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimItemId</Name>
				<Source><![CDATA[
    public boolean isInventDimItemId()
    {
        return vendFormletterParameters.ItemDimPlacement == ItemDimFormLetter::Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimLine</Name>
				<Source><![CDATA[
    public boolean isInventDimLine()
    {
        ListEnumerator  enumerator      = this.dimFields().getEnumerator();

        while (enumerator.moveNext())
        {
            fieldId dimFieldId = enumerator.current();
            fieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);

            if (inventDimLine.(dimParmFieldId))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowControl</Name>
				<Source><![CDATA[
    protected boolean mustShowControl(InventDimControlInterface _fc)
    {
        fieldId dimParmFieldId = InventDim::dim2dimParm(inventDimControls.fieldId(_fc));
        return inventDimLine.(dimParmFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowField</Name>
				<Source><![CDATA[
    protected NoYes mustShowField(fieldId _dimFieldId)
    {
        fieldId parmFieldId = InventDim::dim2dimParm(_dimFieldId);

        if (firstInventDimParmFormletterParameters)
        {
            this.initDimParmFormletter();
        }

        if (_dimFieldId && inventDimParmFormletterParameters.(parmFieldId))
        {
            if (InventDim::isFieldIdProductDimension(_dimFieldId) && vendFormletterParameters.ItemDimPlacement != ItemDimFormLetter::Below)
            {
                return NoYes::No;
            }
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowProductField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether to show the <c>Product</c> dimension field.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID for the dimension.
    /// </param>
    /// <returns>
    ///    A <c>NoYes</c> enumeration value that indicates the show value.
    /// </returns>
    protected NoYes mustShowProductField(fieldId _dimFieldId)
    {
        fieldId parmFieldId = InventDim::dim2dimParm(_dimFieldId);

        if (firstInventDimParmFormletterParameters)
        {
            this.initDimParmFormletter();
        }

        if (_dimFieldId && inventDimParmFormletterParameters.(parmFieldId))
        {
            if (InventDim::isFieldIdProductDimension(_dimFieldId))
            {
                return NoYes::Yes;
            }
            return NoYes::No;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        vendFormletterParameters = VendFormletterParameters::find();
        firstInventDimParmFormletterParameters = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        documentStatus = _documentStatus;
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportStrItemId</Name>
				<Source><![CDATA[
    public str 255 reportStrItemId(InventDim _inventDim)
    {
        str             res             = '';

        if (this.isInventDimItemId())
        {
            ListEnumerator enumerator = this.dimFields().getEnumerator();
            while (enumerator.moveNext())
            {
                fieldId dimFieldId = enumerator.current();
                if (_inventDim.(dimFieldId) && inventDimItem.(InventDim::dim2dimParm(dimFieldId)))
                {
                    res += vendFormletterParameters.ItemDimSeparator + _inventDim.(dimFieldId);
                }
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlVisible</Name>
				<Source><![CDATA[
    protected void setControlVisible(InventDimControlInterface _control)
    {
        InventDimReportControlInterface reportControl = _control;

        super(_control);

        if (_control.visible())
        {
            // if the label is longer than the field we extend the width to show the full label.
            switch (reportControl.controlType())
            {
                case ReportFieldType::String:
                    fieldId fieldId = reportControl.dataField();
                    tableId tableId = reportControl.table();
                    if (tableId && fieldId && tableId == tablenum(InventDim))
                    {
                        SysDictField sysDictField = new SysDictField(tableId, fieldId);
                        str label = sysDictField.label();
                        if (strlen(label) > sysDictField.displayLength())
                            reportControl.width(strlen(label), Units::char);
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Rep_Purch construct()
    {
        return new InventDimCtrl_Rep_Purch();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>