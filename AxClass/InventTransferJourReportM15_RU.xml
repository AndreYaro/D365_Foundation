<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferJourReportM15_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class InventTransferJourReportM15_RU extends SalesPurchReport_Invent_RU implements BatchRetryable
{
    InventTransferJour      inventTransferJour;
    InventTransferJourLine  inventTransferJourLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPrintoutType</Name>
				<Source><![CDATA[
    protected PrintoutTypeTable_RU defaultPrintoutType()
    {
        return PrintoutTypeTable_RU::InventTransferInvoiceM15;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrintout</Name>
				<Source><![CDATA[
    protected PrintoutTable_RU findPrintout(Common _invoiceJour,
                                            InventLocationId _location)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales getModule()
    {
        return ModuleInventPurchSales::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    protected TableId getTableId()
    {
        return tableNum(InventTransferJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrency</Name>
				<Source><![CDATA[
    protected void initCurrency()
    {
        #define.ExchRateMST(100)

        header.CurrencyCode = CompanyInfoHelper::standardCurrency();
        exchRate            = #ExchRateMST;
        printInMST          = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccountType</Name>
				<Source><![CDATA[
    protected InventAccountType inventAccountType()
    {
        return InventAccountType::InventIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalDate</Name>
				<Source><![CDATA[
    protected TransDate journalDate()
    {
        return inventTransferJour.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    protected LanguageId languageId()
    {
        return CompanyInfo::languageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDialog</Name>
				<Source><![CDATA[
    protected SalesPurchDialog_RU newDialog()
    {
        return new SalesPurchDialog_InvoiceM15_RU(journalList, invoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
    protected OffReportType_RU offReportType()
    {
        return OffReportType_RU::TransferInvoiceM15;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderDescription</Name>
				<Source><![CDATA[
    protected Description orderDescription()
    {
        return this.lookupLabel(literalStr("@SYS78234"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    protected void prepareData()
    {
        company = CompanyInfo::find();

        if (! journalList && inventTransferJour)
        {
            journalList = FormLetter::createJournalListCopy(inventTransferJour);
        }

        if (! journalList)
            throw error("@SYS26348");

        internalId = 1;
        journalList.first(inventTransferJour);

        if (! inventTransferJour)
            throw error("@SYS26348");

        while (inventTransferJour)
        {
            if (inventTransferJour.Return_RU)
            {
                reverseInvoice = inventTransferJour.Storno_RU ? -1 : 1;
            }
            else
            {
                reverseInvoice = 1;
            }
            header.clear();
            this.prepareReportHeader();
            this.initCurrency();
            this.initCurrencyNames();

            while select inventTransferJourLine
                where inventTransferJourLine.TransferId == inventTransferJour.TransferId
                    && inventTransferJourLine.VoucherId  == inventTransferJour.VoucherId
            {
                this.prepareDynamicLine();
                this.writeDynamicLine();
            }

            this.prepareReportSubheader(inventTransferJour.InventLocationIdFrom);

            // Update totals
            header.LineNum = lineNum;
            this.insertHeader();

            if (! journalList.next(inventTransferJour))
                break;

            internalId++;
        }

        this.removeEmptyJournals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDynamicLine</Name>
				<Source><![CDATA[
    protected void prepareDynamicLine()
    {
        LedgerDimensionDefaultAccount   invPosting;
        writeLine = true;

        if (! inventPostingCache)
        {
            inventPostingCache = new Map(Types::String, Types::Int64);
        }

        lineNum++;

        dynamicData.clear();
        dynamicData.initFromReportTable(header);

        reverseLine = inventTransferJourLine.QtyShipped < 0 ? -1 : 1;

        InventTable inventTable = InventTable::find(inventTransferJourLine.ItemId);

        dynamicData.LineNum             = lineNum;
        dynamicData.ItemId              = inventTable.ItemId;
        dynamicData.ItemName            = inventTable.defaultProductName();
        dynamicData.Unit                = UnitOfMeasureTranslation::findByTranslation(
            UnitOfMeasure::unitOfMeasureIdBySymbol(inventTransferJourLine.UnitId),
            this.languageId()).Description;
        if (! dynamicData.Unit)
        {
            dynamicData.Unit            = inventTransferJourLine.UnitId;
        }
        dynamicData.CodeOKEI            = UnitOfMeasure_RU::codeOKEI_RU(UnitOfMeasure::findBySymbol(inventTransferJourLine.UnitId));
        dynamicData.Qty                 = inventTransferJourLine.QtyShipped;
        dynamicData.TaxPackagingQty     = inventTable.TaxPackagingQty;
        dynamicData.QtyNumber           = abs(inventTable.TaxPackagingQty ? roundUp(invoiceTrans.Qty / inventTable.TaxPackagingQty, 1) : 0);
        dynamicData.Packing             = inventTable.Packing_RU;
        dynamicData.GrossWeight         = abs(inventTransferJourLine.QtyShipped * inventTable.grossWeight());

        dynamicData.LineAmount          = printInMST ?
                                          CurrencyExchangeHelper::amountCur2MST(inventTransferJourLine.LineAmountShipped_RU, inventTransferJour.CurrencyCode_RU, 0, inventTransferJour.TransDate):
                                          inventTransferJourLine.LineAmountShipped_RU;
        dynamicData.Price               = inventTransferJourLine.Price_RU;
        dynamicData.LineAmountWithTax   = dynamicData.LineAmount;

        this.addLineAmountToHeader(dynamicData.LineAmount,
                                   dynamicData.vatAmount,
                                   dynamicData.LineAmountWithTax,
                                   dynamicData.Qty,
                                   dynamicData.QtyNumber,
                                   dynamicData.GrossWeight,
                                   abs(dynamicData.Qty * inventTable.NetWeight));

        InventDim inventDim = InventDim::find(inventTransferJourLine.InventDimId);
        dynamicData.InventLocationId = inventDim.InventLocationId;

        if (dynamicData.ItemId)
        {
            if (inventPostingCache.exists(dynamicData.ItemId+'#'+inventDim.InventProfileId_RU))
            {
                invPosting = inventPostingCache.lookup(dynamicData.ItemId+'#'+inventDim.InventProfileId_RU);
            }
            else
            {
                invPosting = InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(inventDim));
                inventPostingCache.insert(dynamicData.ItemId, invPosting);
            }

            dynamicData.InventPostingAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(invPosting);
        }
        subHeader.TotalAmtWithVAT += dynamicData.LineAmountWithTax;
        subHeader.TotalAmtVAT     += dynamicData.vatAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name="_inventDim">Inventory dimension.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(InventDim _inventDim)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = super(_inventDim);

        searchParameters.ItemCategory = 0;

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportHeader</Name>
				<Source><![CDATA[
    protected void prepareReportHeader()
    {
        lineNum = 0;

        header.InternalId       = internalId;

        header.initFromInventTransferJour(inventTransferJour);

        header.OrderDescription = this.orderDescription();
        header.LineNum          = lineNum;
        header.DocumentName     = this.prepareTxtData();
        header.DocumentName_Sec = this.prepareTxtData_Sec();
        header.UnitId           = UnitOfMeasure::find(UnitOfMeasureBaseUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure).Symbol;
        header.LanguageId       = this.languageId();

        [ header.DirectorName,
          header.DirectorTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(inventTransferJour.OffSessionId_RU, OffPosition_RU::Director);
        [ header.AccountantName,
          header.AccountantTitle ] = OfficialsTrans_RU::getNameTitleByIdPosition(inventTransferJour.OffSessionId_RU, OffPosition_RU::Accountant);

        switch (inventTransferJour.TransferType_RU)
        {
            case InventTransferType_RU::Standard:

                SalesPurchReportCounteragentData_RU counteragentData = this.initCompanyData();
                header.ConsignorBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsignorOKPO = counteragentData.parmOKPO();
                header.ConsignorOKDP = counteragentData.parmOKDP();

                counteragentData            = this.initCompanyData();
                header.ConsigneeBankAddress = inventTransferJour.ToAddressName;
                header.ConsigneeOKPO        = counteragentData.parmOKPO();
                header.ConsigneeOKDP        = counteragentData.parmOKDP();
                header.ConsigneeStructDept  = counteragentData.parmStructDept();
                break;

            case InventTransferType_RU::IssueToParty:

                counteragentData            = this.initCompanyData();
                header.ConsignorBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsignorOKPO        = counteragentData.parmOKPO();
                header.ConsignorOKDP        = counteragentData.parmOKDP();

                VendTable vendTable         = inventTransferJour.partyVendTable_RU();
                counteragentData            = this.initCustVendData(vendTable,
                                                                    VendBankAccount::find(vendTable.AccountNum, vendTable.BankAccount),
                                                                    vendTable.AccountNum);
                header.ConsigneeBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsigneeOKPO        = counteragentData.parmOKPO();
                header.ConsigneeOKDP        = counteragentData.parmOKDP();
                header.ConsigneeStructDept  = counteragentData.parmStructDept();
                break;

            case InventTransferType_RU::ReceiptFromParty:

                vendTable                   = inventTransferJour.partyVendTable_RU();
                counteragentData            = this.initCustVendData(vendTable,
                                                                    VendBankAccount::find(vendTable.AccountNum, vendTable.BankAccount),
                                                                    vendTable.AccountNum);
                header.ConsignorBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsignorOKPO        = counteragentData.parmOKPO();
                header.ConsignorOKDP        = counteragentData.parmOKDP();

                counteragentData            = this.initCompanyData();
                header.ConsigneeBankAddress = counteragentData.fullInvoiceInfo(true, true);
                header.ConsigneeOKPO        = counteragentData.parmOKPO();
                header.ConsigneeOKDP        = counteragentData.parmOKDP();
                header.ConsigneeStructDept  = counteragentData.parmStructDept();
                break;
        }
        header.ConsignorStructDept = InventLocation::find(inventTransferJour.InventLocationIdTo).Name;

        this.clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportSubheader</Name>
				<Source><![CDATA[
    protected void prepareReportSubheader(InventLocationId _location,
                                          Counter          _internalId = header.InternalId)
    {
        subHeader.createFromLocationId(_location,
                                       _internalId,
                                       inventTransferJour.VoucherId,
                                       inventTransferJour.OffSessionId_RU,
                                       this.offReportType());
        subHeader.PrintoutType = this.defaultPrintoutType();

        subHeader.TotalAmtWithVAT += dynamicData.LineAmountWithTax;
        subHeader.TotalAmtVAT     += dynamicData.vatAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTxtData</Name>
				<Source><![CDATA[
    final protected FreeTxt prepareTxtData()
    {
        return this.lookupLabel(literalStr("@GLS107000"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        XMLExcelReport_CustInvoiceM15_RU reportPrint = XMLExcelReport_CustInvoiceM15_RU::construct();
        reportPrint.parmData(dynamicData, subHeader, header);
        reportPrint.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaller</Name>
				<Source><![CDATA[
    public boolean setCaller(Object _object)
    {
        boolean ret = super(_object);

        if (! ret)
        {
            if (classIdGet(_object) == classNum(InventTransferJourReportM15_RU))
            {
                filterDialog = _object;
                ret          = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the parameters for the <c>InventTransferJourReportM15_RU</c> report.
    /// </summary>
    /// <param name="_printCopyOriginal">
    ///    The <c>PrintCopyOriginal</c> enumeration value that specifies whether the Original
    /// </param>
    /// <param name="_invoiceJour">
    ///    Instance of table <c>InventTransferJour</c>.
    /// </param>
    /// <param name="_journalList">
    ///    <c>List</c> of journals to be printed
    /// </param>
    protected void setReportParameters(PrintCopyOriginal   _printCopyOriginal = PrintCopyOriginal::Copy,
                                 InventTransferJour  _invoiceJour = null,
                                 RecordSortedList    _journalList = null)
    {
        inventTransferJour  = _invoiceJour;
        journalList         = _journalList;
        printCopyOriginal   = _printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    protected TableId transTableId()
    {
        return tableNum(InventTransferJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventTransferJourReportM15_RU   report = new InventTransferJourReportM15_RU();

        if (_args)
        {
            report.setReportParameters(_args.parmEnum(), _args.record());
            report.setCaller(_args.caller());
        }

        report.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>