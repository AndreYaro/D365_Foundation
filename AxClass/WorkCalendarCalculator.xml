<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkCalendarCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WorkCalendarCalculator</c> class provides helper methods for of working time calculations.
/// </summary>
class WorkCalendarCalculator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDuration</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the number of open days from the specified start and end dates, for a specific calendar.
    /// </summary>
    /// <param name="_startDate">
    ///     The start date.
    /// </param>
    /// <param name="_endDate">
    ///     The end date.
    /// </param>
    /// <param name="_calendarId">
    ///     The ID of the calendar to use.
    /// </param>
    /// <returns>
    ///     The number of open days that exist between the two dates.
    /// </returns>
    static Days calcDuration(TransDate _startDate, TransDate _endDate, CalendarId _calendarId)
    {
        WorkCalendarDate workCalendarDate;
        boolean hasRecord;
        WorkCalendarSched workCalendarSched = new WorkCalendarSched();
        Days duration = 0;
        TransDate transDate = _startDate;

        if (!_calendarId || !_startDate || !_endDate)
        {
            return duration;
        }

        select transDate, WorkTimeControl, CalendarId from workCalendarDate
            where workCalendarDate.CalendarId == _calendarId &&
                  workCalendarDate.TransDate >= _startDate &&
                  workCalendarDate.TransDate <= _endDate;

        while (transDate <= _endDate)
        {
            hasRecord = workCalendarDate != null;

            if (transDate == workCalendarDate.TransDate)
                {
                if (WorkCalendarDate.WorkTimeControl == WorkTimeControl::Open)
                {
                    duration++;
                }
                else if (WorkCalendarDate.WorkTimeControl == WorkTimeControl::UseBasic)
                {
                    duration += workCalendarSched.isDateOpen(_calendarId, transDate) ? 1 : 0;
                }

                if (hasRecord)
                {
                    next WorkCalendarDate;
                }
                transDate++;
            }
            else if (transDate < workCalendarDate.TransDate)
            {
                duration++;
                transDate++;
            }
            else if (transDate > workCalendarDate.TransDate)
            {
                duration++;
                if (hasRecord)
                {
                    next WorkCalendarDate;
                }
                else
                {
                    transDate++;
                }
            }
       }

        return duration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDurationForEffortAndResources</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the daily worker effort hours based on the specified total effort time, number of workers and calendar setup.
    /// </summary>
    /// <param name="_effort">
    ///     The total effort time.
    /// </param>
    /// <param name="_numberOfResources">
    ///     The number of workers.
    /// </param>
    /// <param name="_calendarId">
    ///     The ID of the calendar to use.
    /// </param>
    /// <returns>
    ///     The daily worker effort in hours.
    /// </returns>
    static real calcDurationForEffortAndResources(Hours _effort, NumberOfResources _numberOfResources, CalendarId _calendarId)
    {
        WorkCalendarTable workCalendarTable;

        if (_calendarId
            && _effort
            && _numberOfResources)
        {
            select firstonly StandardWorkDayHours from workCalendarTable
                where workCalendarTable.CalendarId == _calendarId;

            if (workCalendarTable && workCalendarTable.StandardWorkDayHours)
            {
                return _effort / _numberOfResources / workCalendarTable.StandardWorkDayHours;
            }
        }

        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDurationInHours</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the available working hours in the specified date interval.
    /// </summary>
    /// <param name="_startDate">
    ///     The specified start date.
    /// </param>
    /// <param name="_endDate">
    ///     The specified end date.
    /// </param>
    /// <param name="_calendarId">
    ///     The ID of the calendar to use.
    /// </param>
    /// <returns>
    ///     The number of hours available.
    /// </returns>
    static Hours calcDurationInHours(TransDate _startDate, TransDate _endDate, CalendarId _calendarId)
    {
        TransDate   transDate = _startDate;
        Days        duration  = 0;
        Hours       durationInHours;
        WorkCalendarTable workCalendarTable;

        WorkCalendarSched workCalendarSched = new WorkCalendarSched();

        if (_calendarId
            && _startDate
            && _endDate)
        {
            while (transDate <= _endDate)
            {
                duration += workCalendarSched.isDateOpen(_calendarId, transDate) ? 1 : 0;
                transDate++;
            }

            select firstonly StandardWorkDayHours from workCalendarTable
                where workCalendarTable.CalendarId == _calendarId;

            durationInHours = workCalendarTable.StandardWorkDayHours * duration;
        }

        return durationInHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEndDateForStartDateAndDuration</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the end day for a working period based on the starting day and duration of the operation.
    /// </summary>
    /// <param name="_startDate">
    ///     The start day of the working period.
    /// </param>
    /// <param name="_duration">
    ///     The duration of the working period.
    /// </param>
    /// <param name="_calendarId">
    ///     The ID of the calendar to use.
    /// </param>
    /// <returns>
    ///     The day where the working period will end.
    /// </returns>
    static TransDate findEndDateForStartDateAndDuration(TransDate _startDate, real _duration, CalendarId _calendarId)
    {
        TransDate   transDate = _startDate;
        real        duration  = _duration;

        WorkCalendarSched workCalendarSched = new WorkCalendarSched();

        if (_calendarId
            && _duration
            && _startDate)
        {
            while (duration - 1 > 0)
            {
                duration -= workCalendarSched.isDateOpen(_calendarId, transDate) ? 1 : 0;
                transDate++;
            }

            // Make sure the resulting endDate is open.
            while (!workCalendarSched.isDateOpen(_calendarId, transDate))
            {
                transDate++;
            }
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextWorkDay</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the next available working day including today.
    /// </summary>
    /// <param name="_calendarId">
    ///     The ID of the calendar to use.
    /// </param>
    /// <returns>
    ///     The next working day after today.
    /// </returns>
    static TransDate findNextWorkDay(CalendarId _calendarId)
    {
        TransDate transDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        WorkCalendarSched workCalendarSched = new WorkCalendarSched();

        if (_calendarId)
        {
            while (!workCalendarSched.isDateOpen(_calendarId, transDate))
            {
                transDate++;
            }
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextWorkDayAfterDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the next available working day after the specified date.
    /// </summary>
    /// <param name="_calendarId">
    ///     The ID of the calendar to use.
    /// </param>
    /// <param name="_transDate">
    ///     The date to use.
    /// </param>
    /// <returns>
    ///     The next working day after the specified date.
    /// </returns>
    static TransDate findNextWorkDayAfterDate(CalendarId _calendarId, TransDate _transDate)
    {
        TransDate transDate = _transDate + 1;

        WorkCalendarSched workCalendarSched = new WorkCalendarSched();

        if (_calendarId)
        {
            while (!workCalendarSched.isDateOpen(_calendarId, transDate))
            {
                transDate++;
            }
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStartDateForEndDateAndDuration</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the start date for a working period based on the specified end date, period duration and calendar setup.
    /// </summary>
    /// <param name="_endDate">
    ///     The end date of the working period.
    /// </param>
    /// <param name="_duration">
    ///     The working duration in hours.
    /// </param>
    /// <param name="_calendarId">
    ///     The ID of the calendar to use.
    /// </param>
    /// <returns>
    ///     The date where the period started.
    /// </returns>
    static TransDate findStartDateForEndDateAndDuration(TransDate _endDate, real _duration, CalendarId _calendarId)
    {
        TransDate   transDate = _endDate;
        real        duration  = _duration;

        WorkCalendarSched workCalendarSched = new WorkCalendarSched();

        if (_calendarId
            && _duration
            && _endDate)
        {
            while (duration - 1 > 0)
            {
                duration -= workCalendarSched.isDateOpen(_calendarId, transDate) ? 1 : 0;
                transDate--;
            }

            // Make sure the resulting startDate is open.
            while (!workCalendarSched.isDateOpen(_calendarId, transDate))
            {
                transDate--;
            }
        }

        return transDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>