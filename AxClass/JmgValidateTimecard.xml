<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgValidateTimecard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgValidateTimecard</c> class validates an employees electronic timecard registrations for a
///    specific day when run through the <c>JmgValidateTimecard::main</c> method.
/// </summary>
/// <remarks>
///    The
///    <c>
///       Args
///    </c>
///     object to the main method must contain a reference to a
///    <c>
///       JmgTimecardTable
///    </c>
///     record. Otherwise an error is thrown. The following issues about an employees electronic timecard
///    registrations is performed:
///    <list type="bullet">
///       <item>
///          <description>Matching clock-in and clock-out registration </description>
///       </item>
///       <item>
///          <description>Absence registrations are placed outside a clock-in - clock-out zone. </description>
///       </item>
///       <item>
///          <description>It is possible to place entered job time within a clock-in - clock-out zone.
///          </description>
///       </item>
///       <item>
///          <description>Entered job IDs are valid.</description>
///       </item>
///    </list>
///    When the electronic timecard form is configured to use input mode Elapsed time or Net time start
///    and stop date/time is automatically calculated during validation.
/// </remarks>
class JmgValidateTimecard extends RunBase
{
    JmgTimecardTable    jmgTimecardTable;
    boolean             throwError;
    boolean             validatedOk;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs the dialog, which prompts the user to determine whether registrations should be
    ///    validated.
    /// </summary>
    /// <param name="dialog">
    ///    An already initialized dialog can be passed.
    /// </param>
    /// <param name="forceOnClient">
    ///    Specifies whether the dialog must be instantiated on the client.
    /// </param>
    /// <returns>
    ///    The dialog.
    /// </returns>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret;

        ret = this.dialogInternal(dialog, forceOnClient);
        ret.caption("@SYS22548");
        ret.addText("@SYS39950"+'?');
        ret.parmIsModal(true);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS39950";
    }

]]></Source>
			</Method>
			<Method>
				<Name>error</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows an error message to the user.
    /// </summary>
    /// <param name="_errorMessage">
    ///    The error message to show.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    Throws the error message as an exception, if the <c>ThrowError</c> parameter is set.
    /// </exception>
    private void error(str _errorMessage)
    {
        validatedOk = false;
        if (throwError)
        {
            throw error(_errorMessage);
        }
        else
        {
            checkFailed(_errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBreakTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the amount of break time defined in the profile between the specified start time and end
    ///    time.
    /// </summary>
    /// <param name="_startTime">
    ///    An instance of the <c>JmgProfileSeconds</c> class that denotes the start time of the interval for
    ///    which the profile break time can be calculated.
    /// </param>
    /// <param name="_stopTime">
    ///    An instance of the <c>JmgProfileSeconds</c> class denoting the stop time of the interval for which
    ///    profile break time should be calculated.
    /// </param>
    /// <returns>
    ///    The amount of break time in seconds defined in the profile, which lies between the specified start
    ///    and stop time.
    /// </returns>
    /// <remarks>
    ///    The profile which is checked is fetched from the <c>JmgTimecardTable</c> record, specified in the
    ///    <paramref name="_args" /> parameter of the <see cref="M:JmgValidateTimecard.new" /> method.
    /// </remarks>
    protected JmgSeconds getBreakTime(utcdatetime _startTime, utcdatetime _stopTime)
    {
        JmgSeconds          ret;
        utcdatetime         breakStart;
        utcdatetime         breakStop;
        JmgProfileSpec      profileSpec;
        JmgProfileTypeTable jmgProfileTypeTable;

        while select StartDay, StartTime, EndDay, EndTime
            from profileSpec
            where profileSpec.Profile   == jmgTimecardTable.ProfileId
                && profileSpec.DayId    == dayofwk(jmgTimecardTable.ProfileDate) - 1
            exists join jmgProfileTypeTable
            where jmgProfileTypeTable.RecId             == profileSpec.ProfileType
                && (jmgProfileTypeTable.ProfileSpecType  == JmgProfileSpecTypeEnum::Break
                || jmgProfileTypeTable.ProfileSpecType  == JmgProfileSpecTypeEnum::BreakPay)
        {
            breakStart = DateTimeUtil::newDateTime(jmgTimecardTable.ProfileDate + profileSpec.StartDay, profileSpec.StartTime, DateTimeUtil::getUserPreferredTimeZone());
            breakStop  = DateTimeUtil::newDateTime(jmgTimecardTable.ProfileDate + profileSpec.EndDay, profileSpec.EndTime, DateTimeUtil::getUserPreferredTimeZone());

            if ( (breakStart > _startTime && breakStart < _stopTime)    ||
                 (breakStop > _startTime && breakStop < _stopTime)      ||
                 (breakStart <= _startTime && breakStop >= _stopTime))
            {
                ret += int642int(DateTimeUtil::getDifference(min(_stopTime, breakStop), max(_startTime, breakStart)));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadClockInOutZones</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an array of containers based on the employee electronic timecard registrations, each of
    ///    which contains a clock-in - clock-out time pair, and an integer value always set to 0.
    /// </summary>
    /// <returns>
    ///    An array of containers, each of which contains a clock-in - clock-out time pair, and an integer
    ///    value always set to 0.
    /// </returns>
    /// <remarks>
    ///    Each container constitutes a clock-in - clock-out zone. The integer is used when allocating time to
    ///    each clock-in - clock-out zone. An error is thrown if each clock-in is not matched with a clock-out
    ///    registration, or if any of the clock-in - clock-out zones overlap.The clock-in and clock-out times
    ///    are expressed by using instances of the <see cref="T:JmgProfileSeconds" /> class.
    /// </remarks>
    protected Array loadClockInOutZones()
    {
        Array ret;
        JmgTimecardTrans timecardTrans;
        utcdatetime clockInTime;
        utcdatetime clockOutTime;
        ret = new Array(Types::Container);

        while select JourRegType, StartDateTime from timecardTrans
            order by StartDateTime, JourRegType
            where timecardTrans.Worker      == jmgTimecardTable.Worker  &&
                  timecardTrans.ProfileDate == jmgTimecardTable.ProfileDate &&
                  (timecardTrans.JourRegType == JmgJourRegTypeEnum::SignIn ||
                   timecardTrans.JourRegType == JmgJourRegTypeEnum::SignOut)
        {
            if (timecardTrans.JourRegType == JmgJourRegTypeEnum::SignIn)
            {
                if (clockInTime)
                {
                    this.error(strfmt("@SYS39312", JmgStampTypeSpecEnum::SignIn));
                }
                else
                {
                    clockInTime = timecardTrans.StartDateTime;
                    clockOutTime = utcDateTimeNull();
                }
            }
            else
            {
                if (clockOutTime)
                {
                    this.error(strfmt("@SYS39312", JmgStampTypeSpecEnum::SignOut));
                }
                else
                {
                    if (!clockInTime)
                    {
                        this.error("@SYS39091");
                    }

                    clockOutTime = timecardTrans.StartDateTime;
                    if (clockInTime != utcDateTimeNull())
                    {
                        ret.value(ret.lastIndex() + 1, [clockInTime, clockOutTime, 0]);
                    }
                    clockInTime = utcDateTimeNull();
                }
            }
        }

        if (clockInTime)
        {
            this.error("@SYS39090");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [jmgTimecardTable.Worker, jmgTimecardTable.ProfileDate, validatedOk];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowError</Name>
				<Source><![CDATA[
    public boolean parmThrowError(boolean _throwError = throwError)
    {
        throwError = _throwError;
        return throwError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates electronic timecard registrations referred to by the <c>JmgValidateTimecard</c> record,
    ///    specified in the <paramref name="_args" /> parameter of the <see cref="M:JmgValidateTimecard.new"
    ///    /> method.
    /// </summary>
    /// <remarks>
    ///    Validation depends on the electronic timecard input mode. For more specific notes on what is
    ///    validated, please refer to <see cref="M:JmgValidateTimecard.validateAbsence" />, <see
    ///    cref="M:JmgValidateTimecard.validateElapsedTime" />, <see
    ///    cref="M:JmgValidateTimecard.validateJobId" />, <see cref="M:JmgValidateTimecard.validateNetTime"
    ///    />, and <see cref="M:JmgValidateTimecard.validateTimestamps" />.
    /// </remarks>
    public void run()
    {
        super();

        ttsbegin;
        validatedOk = true;
        switch (JmgParameters::find().TimecardInputMode)
        {
            case JmgTimecardInputMode::Timestamps:
                this.validateTimestamps();
                break;
            case JmgTimecardInputMode::ElapsedTime:
                this.validateElapsedTime();
                break;
            case JmgTimecardInputMode::NetTime:
                this.validateNetTime();
                break;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        JmgWorkerRecId  worker;
        JmgProfileDate  profileDate;
        [worker, profileDate, validatedOk] = _packedClass;

        if (!jmgTimecardTable)
        {
            jmgTimecardTable = JmgTimecardTable::find(worker, profileDate);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that entered absence registrations are placed outside of clock-in - clock-out zones.
    /// </summary>
    /// <param name="_zones">
    ///    Array of clock-in and clock-out zones as returned by the <see
    ///    cref="M:JmgValidateTimecard.loadClockInOutZones" /> method.
    /// </param>
    /// <remarks>
    ///    The method also validates that the entered absence job ID is valid.
    /// </remarks>
    protected void validateAbsence(Array _zones)
    {
        JmgTimecardTrans    timecardTrans;
        utcdatetime         clockInTime;
        utcdatetime         clockOutTime;
        int                 currentZone;
        while select forupdate timecardTrans
            where timecardTrans.Worker      == jmgTimecardTable.Worker      &&
                  timecardTrans.ProfileDate == jmgTimecardTable.ProfileDate &&
                  timecardTrans.JourRegType == JmgJourRegTypeEnum::Absence
        {
            this.validateJobId(timecardTrans.JobId);
            // Absence cannot be situated in a clock-in/-out zone.
            for (currentZone = 1; currentZone <= _zones.lastIndex(); currentZone++)
            {
                [clockInTime, clockOutTime] = _zones.value(currentZone);
                if ( (timecardTrans.StartDateTime > clockInTime && timecardTrans.StartDateTime < clockOutTime)  ||
                     (timecardTrans.StopDateTime  > clockInTime && timecardTrans.StopDateTime  < clockOutTime)  ||
                     (timecardTrans.StartDateTime <= clockInTime &&timecardTrans.StopDateTime  >= clockOutTime) )
                {
                    this.error("@SYS39314");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatedOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether the timecard is validated correctly.
    /// </summary>
    /// <returns>
    ///    true if the timecard registrations successfully validate; otherwise, <c>false</c>.
    /// </returns>
    public boolean validatedOk()
    {
        return validatedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateElapsedTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates electronic timecard registrations using Elapsed time input mode.
    /// </summary>
    /// <remarks>
    ///    The from and to time are calculated based on the actual entered value, as opposed to the <see
    ///    cref="M:JmgValidateTimecard.validateNetTime" /> method, where break time from the profile is taken
    ///    into consideration.  From and to time is updated on registrations. If the entered time on
    ///    registrations cannot be placed within a clock-in - clock-out zone, an error is thrown.
    /// </remarks>
    protected void validateElapsedTime()
    {
        JmgTimecardTrans    timecardTrans;
        JmgTimecardTrans    temp;
        utcdatetime         clockInTime;
        utcdatetime         clockOutTime;
        JmgSeconds          allocatedTime;
        JmgSeconds          timeToAllocate;

        Array               zones;
        int                 currentZone;
        RecordInsertList    recordInsertList;

        zones = this.loadClockInOutZones();
        this.validateAbsence(zones);

        // Process lines with a set start time
        while select forupdate timecardTrans
            order by LineNum
            where timecardTrans.Worker      == jmgTimecardTable.Worker      &&
                  timecardTrans.ProfileDate == jmgTimecardTable.ProfileDate &&
                  timecardTrans.JourRegType != JmgJourRegTypeEnum::SignIn   &&
                  timecardTrans.JourRegType != JmgJourRegTypeEnum::SignOut  &&
                  timecardTrans.JourRegType != JmgJourRegTypeEnum::Absence
        {
            this.validateJobId(timecardTrans.JobId);
            this.validateProj(timecardTrans);

            timeToAllocate = timecardTrans.Seconds;
            temp.data(timecardTrans);

            recordInsertList = new RecordInsertList(tableNum(JmgTimecardTrans));

            for (currentZone = 1; currentZone <= zones.lastIndex(); currentZone++)
            {
                if (timeToAllocate == 0)
                {
                    break;
                }

                [clockInTime, clockOutTime, allocatedTime] = zones.value(currentZone);
                if (allocatedTime < DateTimeUtil::getDifference(clockOutTime, clockInTime))
                {
                    temp.StartDateTime  = DateTimeUtil::addSeconds(clockInTime, allocatedTime);
                    temp.StopDateTime   = min(clockOutTime, DateTimeUtil::addSeconds(temp.StartDateTime, timeToAllocate));
                    temp.Seconds        = any2int(DateTimeUtil::getDifference(temp.StopDateTime, temp.StartDateTime));
                    recordInsertList.add(temp);

                    allocatedTime += temp.Seconds;
                    timeToAllocate -= temp.Seconds;
                    zones.value(currentZone, [clockInTime, clockOutTime, allocatedTime]);
                }
            }
            if (timeToAllocate > 0)
            {
                this.error(strfmt("@SYS39814", timecardTrans.JobId));
            }
            else
            {
                // replace the original record with new ones
                timecardTrans.delete();
                recordInsertList.insertDatabase();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJobId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified job ID. If the specified job ID is illegal, or if the employee is not allowed to register on the job ID, an error is thrown.
    /// </summary>
    /// <param name="_jobId">
    ///    The job ID to validate.
    /// </param>
    private void validateJobId(JmgJobId _jobId)
    {
        JmgTermJob  job;
        job = JmgTermJob::construct(_jobId);

        if (!_jobId)
        {
            this.error("@SYS24417");
        }

        if (!job.isValidJobId())
        {
            this.error(strfmt("@SYS39813", _jobId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNetTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates electronic timecard registrations using Net time input mode. From and to time is updated
    ///    on registrations. If the entered time on registrations cannot be placed within a clock-in -
    ///    clock-out zone, an error is thrown.
    /// </summary>
    /// <remarks>
    ///    The from and to time are calculated based on the actual entered value, taking break time into
    ///    consideration, as opposed to the <see cref="M:JmgValidateTimecard.validateElapsedTime" /> method
    /// </remarks>
    protected void validateNetTime()
    {
        JmgTimecardTrans    timecardTrans;
        JmgTimecardTrans    temp;
        utcdatetime         clockInTime;
        utcdatetime         clockOutTime;

        utcdatetime         start;
        utcdatetime         stop;
        JmgSeconds          allocatedTime;
        JmgSeconds          timeToAllocate;

        boolean             breakTimeChanged;

        JmgSeconds          breakSeconds;
        JmgSeconds          newBreakSeconds;

        Array               zones;
        int                 currentZone;
        RecordInsertList    recordInsertList;

        zones       = this.loadClockInOutZones();
        this.validateAbsence(zones);

        while select forupdate timecardTrans
            order by LineNum
            where timecardTrans.Worker      == jmgTimecardTable.Worker  &&
                  timecardTrans.ProfileDate == jmgTimecardTable.ProfileDate &&
                  timecardTrans.JourRegType != JmgJourRegTypeEnum::SignIn &&
                  timecardTrans.JourRegType != JmgJourRegTypeEnum::SignOut &&
                  timecardTrans.JourRegType != JmgJourRegTypeEnum::Absence
        {
            this.validateJobId(timecardTrans.JobId);
            this.validateProj(timecardTrans);

            timeToAllocate = timecardTrans.Seconds;
            temp.data(timecardTrans);

            recordInsertList = new RecordInsertList(tableNum(JmgTimecardTrans));

            for (currentZone = 1; currentZone <= zones.lastIndex(); currentZone++)
            {
                if (timeToAllocate == 0)
                {
                    break;
                }

                [clockInTime, clockOutTime, allocatedTime] = zones.value(currentZone);
                if (allocatedTime < DateTimeUtil::getDifference(clockOutTime, clockInTime))
                {
                    start = DateTimeUtil::addSeconds(clockInTime, allocatedTime);
                    stop  = min(clockOutTime, DateTimeUtil::addSeconds(start, timeToAllocate));

                    breakSeconds = this.getBreakTime(start, stop);

                    breakTimeChanged = breakSeconds != 0;
                    stop = min(DateTimeUtil::addSeconds(stop, breakSeconds), clockOutTime);
                    temp.Seconds = any2int(DateTimeUtil::getDifference(stop, start)) - breakSeconds;
                    newBreakSeconds = 0;
                    while (breakTimeChanged)
                    {
                        if (stop == clockOutTime)
                        {
                            temp.Seconds = any2int(DateTimeUtil::getDifference(stop, start)) - breakSeconds;
                            breakTimeChanged = false;
                        }
                        else
                        {
                            newBreakSeconds = this.getBreakTime(start, stop);
                            if (newBreakSeconds <= breakSeconds)
                            {
                                breakTimeChanged = false;
                            }
                            else
                            {
                                stop = min(clockOutTime, DateTimeUtil::addSeconds(stop, newBreakSeconds - breakSeconds));
                                breakSeconds = newBreakSeconds;
                            }
                        }
                    }

                    temp.StartDateTime = start;
                    temp.StopDateTime = stop;
                    recordInsertList.add(temp);

                    allocatedTime += temp.Seconds + breakSeconds;
                    timeToAllocate -= temp.Seconds + breakSeconds;
                    zones.value(currentZone, [clockInTime, clockOutTime, allocatedTime]);
                }
            }
            if (timeToAllocate > 0)
            {
                this.error(strfmt("@SYS39814", timecardTrans.JobId));
            }
            else
            {
                timecardTrans.delete();
                recordInsertList.insertDatabase();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProj</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates project timecard registrations.
    /// </summary>
    /// <param name="_jmgTimecardTrans">
    /// The timecard registration to validate.
    /// </param>
    protected void validateProj(JmgTimecardTrans _jmgTimecardTrans)
    {
        ProjValCheckTrans   projValCheckTrans;
        boolean             result;

        if (_jmgTimecardTrans.JourRegType   == JmgJourRegTypeEnum::PrjActivity  ||
            _jmgTimecardTrans.JourRegType   == JmgJourRegTypeEnum::PrjProject)
        {
            projValCheckTrans   = new ProjValCheckTrans();
            result = projValCheckTrans.validateMandatory(_jmgTimecardTrans);
            if (!result)
            {
                this.error("@SYS18447");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimestamps</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates electronic timecard registrations using Timestamp input mode. The time field is updated
    ///    on registrations. If registrations are placed outside a clock-in - clock-out zone, or if a
    ///    registrations from time is later than the to time, an error is thrown.
    /// </summary>
    protected void validateTimestamps()
    {
        JmgTimecardTrans    timecardTrans;
        utcdatetime         clockInTime;
        utcdatetime         clockOutTime;

        Array               zones;
        int                 currentZone;
        boolean             zoneFound;
        zones       = this.loadClockInOutZones();
        this.validateAbsence(zones);

        while select forupdate timecardTrans
            order by StartDateTime, JourRegType
            where timecardTrans.Worker      == jmgTimecardTable.Worker  &&
                  timecardTrans.ProfileDate == jmgTimecardTable.ProfileDate &&
                  timecardTrans.JourRegType != JmgJourRegTypeEnum::SignIn &&
                  timecardTrans.JourRegType != JmgJourRegTypeEnum::SignOut &&
                  timecardTrans.JourRegType != JmgJourRegTypeEnum::Absence
        {
            this.validateJobId(timecardTrans.JobId);
            this.validateProj(timecardTrans);

            zoneFound = false;
            for (currentZone = 1; currentZone <= zones.lastIndex(); currentZone++)
            {
                [clockInTime, clockOutTime] = zones.value(currentZone);
                if (timecardTrans.StartDateTime >= clockInTime && timecardTrans.StartDateTime <= clockOutTime &&
                    timecardTrans.StopDateTime  >= clockInTime && timecardTrans.StopDateTime  <= clockOutTime)
                {
                    zoneFound = true;
                }
            }

            if (zoneFound)
            {
                timecardTrans.Seconds = any2int(DateTimeUtil::getDifference(timecardTrans.StopDateTime, timecardTrans.StartDateTime));

                if (timecardTrans.Seconds < 0)
                {
                    this.error("@SYS39558");
                }
                timecardTrans.update();
            }
            else
            {
                this.error(strfmt("@SYS39814", timecardTrans.JobId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJmgTimecardTable</Name>
				<Source><![CDATA[
    public JmgTimecardTable parmJmgTimecardTable(JmgTimecardTable _jmgTimecardTable = jmgTimecardTable)
    {
        jmgTimecardTable = _jmgTimecardTable;

        return jmgTimecardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgValidateTimecard</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgValidateTimecard</c> class.
    /// </returns>
    public static JmgValidateTimecard construct()
    {
        return new JmgValidateTimecard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>JmgValidateTimecard</c> class when it is called from a menu item.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>JmgValidateTimecard</c> class.
    /// </param>
    /// <remarks>
    ///    Use the
    ///    <c>
    ///       main
    ///    </c>
    ///     class design pattern whenever a class is called from a menu item. Do not call the
    ///    <c>
    ///       main
    ///    </c>
    ///     method explicitly from the code; call it implicitly from a menu item.Typically, you would:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             Instantiate the class by calling the static <c>construct</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>prompt</c> method to create a dialog box.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>run</c> method, if the user clicks OK in the dialog box.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static void main(Args _args)
    {
        JmgValidateTimecard validateTimecard = JmgValidateTimecard::construct();
        if (_args && _args.dataset() == tablenum(JmgTimecardTable))
        {
            validateTimecard.getLast();
            validateTimecard.parmJmgTimecardTable(_args.record());
        }
        else
        {
            error(strfmt("@SYS19384", classstr(JmgValidateTimecard)));
        }
        if (_args.parmEnum() == NoYes::Yes || validateTimecard.prompt())
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
            {
                validateTimecard.runOperation();
            }

            FormRun caller = _args.caller();
            if (caller && caller.dataSource())
            {
                caller.dataSource().research();
            }

            if (validateTimecard.validatedOk())
            {
                _args.parmEnum(NoYes::Yes);
            }
            else
            {
                _args.parmEnum(NoYes::No);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>