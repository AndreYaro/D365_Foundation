<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsProposalWritingOffStorno</Name>
	<SourceCode>
		<Declaration><![CDATA[
[RDeferralsProposalFactory(RDeferralsTransType::WritingOff, 'storno')]
public class rDeferralsProposalWritingOffStorno extends RDeferralsProposal implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
public void createJournalLines()
    {
        RDeferralsTrans                 rDeferralsTrans;
        LedgerJournalTrans              ledgerJournalTrans;
        LedgerJournalTrans_RDeferrals   ledgerJournalTrans_RDeferrals;
        LedgerDimensionAccount ledgerDimension, offsetLedgerDimension;
        TransDate accountingDate;

        if (! deferralsBook.PostingProfile ||
            deferralsBook.Depreciate       ||
            deferralsBook.LastDeferralsDate < runDate)
            return;

        if (deferralsBook.Status == RDeferralsStatus::Retired)
            return;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00092, funcName());

        ttsbegin;

        while select LedgerDimension, OffsetLedgerDimension, Voucher, TransDate,
                     Amount, DeferralsPeriod, RecId, OffsetAccountType, TaxGroup, TaxItemGroup, DeferralsId
             from rDeferralsTrans
             order by DeferralsPeriod
             where rDeferralsTrans.DeferralsId     == deferralsBook.DeferralsId     &&
                   rDeferralsTrans.DeferralsBookId == deferralsBook.DeferralsBookId &&
                   rDeferralsTrans.DeferralsPeriod >= runDate                       &&
                   !rDeferralsTrans.StornoRecId
        {
            if (rDeferralsTrans.LedgerDimension && rDeferralsTrans.OffsetLedgerDimension)
            {
                ledgerDimension       = rDeferralsTrans.LedgerDimension;
                offsetLedgerDimension = rDeferralsTrans.OffsetLedgerDimension;
            }
            else
            {
                ledgerDimension = GeneralLedgerExtension::findReferenceNumberAccountingDate_RU(rDeferralsTrans.Voucher, rDeferralsTrans.getAccountingDate(), NoYes::No).LedgerDimension;
                offsetLedgerDimension = GeneralLedgerExtension::findReferenceNumberAccountingDate_RU(rDeferralsTrans.Voucher, rDeferralsTrans.getAccountingDate(), NoYes::Yes).LedgerDimension;
            }

            if (!ledgerDimension || !offsetLedgerDimension)
                continue;

            accountingDate = this.checkFirstDate(rDeferralsTrans.TransDate, rDeferralsTrans.DeferralsId);

            if (rDeferralsTrans.TransDate != accountingDate)
            {
                rDeferralsJournal.parmCorrect(true);
                rDeferralsJournal.parmAccountingDate(accountingDate);
            }
            else
            {
                rDeferralsJournal.parmCorrect(false);
            }

            rDeferralsJournal.createVoucher();
            rDeferralsJournal.createTrans(0,
                                          deferralsBook,
                                          rDeferralsTrans.TransDate,
                                          strFmt("@GLS103789", rDeferralsTrans.DeferralsPeriod),
                                          LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(ledgerDimension)
                                          //<RUP>
                                          ,
                                          deferralsBook.rPayWriteOffsetLedgerDimension ? offsetLedgerDimension : offsetDefaultAccount
                                          //</RUP>
                                          );

            ledgerJournalTrans                       = rDeferralsJournal.ledgerJournalTrans();
            ledgerJournalTrans_RDeferrals            = rDeferralsJournal.ledgerJournalTrans_RDeferrals();

            ledgerJournalTrans.selectForUpdate(true);
            ledgerJournalTrans_RDeferrals.selectForUpdate(true);
            ledgerJournalTrans.AmountCurCredit        = rDeferralsTrans.Amount;
            ledgerJournalTrans.DefaultDimension       = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimension);
            ledgerJournalTrans.OffsetLedgerDimension  = offsetLedgerDimension;
            ledgerJournalTrans.NoEdit                 = NoYes::Yes;
            ledgerJournalTrans_RDeferrals.Period      = rDeferralsTrans.DeferralsPeriod;
            ledgerJournalTrans_RDeferrals.ToFromRecId = rDeferralsTrans.RecId;

            if (rDeferralsTrans.LedgerDimension && rDeferralsTrans.OffsetLedgerDimension)
            {
                ledgerJournalTrans.OffsetAccountType = rDeferralsTrans.OffsetAccountType;
                ledgerJournalTrans.TaxGroup          = rDeferralsTrans.TaxGroup;
                ledgerJournalTrans.TaxItemGroup      = rDeferralsTrans.TaxItemGroup;
            }

            ledgerJournalTrans.doUpdate();
            ledgerJournalTrans_RDeferrals.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsTransType</Name>
				<Source><![CDATA[
    public RDeferralsTransType deferralsTransType()
    {
        return RDeferralsTransType::WritingOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@GLS103751");

        dialogRunDate.label("@GLS103786");
        dialogRunDate.helpText("@GLS103787");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        runDate           = dialogRunDate.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _runProposal = queryRun)
    {
        _runProposal.query().dataSourceNo(1).findRange(fieldNum(RDeferralsBook, Status)).value(SysQuery::valueNot(RDeferralsStatus::Retired));
        super (_runProposal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>