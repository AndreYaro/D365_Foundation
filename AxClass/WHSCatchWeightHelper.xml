<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Logic for handling warehousing items that are configured for Catch Weight.
/// </summary>
public final class WHSCatchWeightHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCatchWeightProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the shared product is a catch weight item.
    /// </summary>
    /// <param name = "_productRecId">
    /// A shared product record ID.
    /// </param>
    /// <returns>
    /// true if the shared product is a catch weight item; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean isCatchWeightProduct(EcoResProductRecId _productRecId)
    {
        return EcoResProduct::find(_productRecId).PdsCWProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAverageWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the average weight of a catch weight unit based on captured total weight and total number of catch weight units.
    /// </summary>
    /// <param name="_unitsBeingProcessed">
    /// The number of units being processed. Should be a whole number.
    /// </param>
    /// <param name="_totalNumOfUnits">
    /// The total number of units tied to the captured total weight. Should be a whole number.
    /// </param>
    /// <param name="_totalWeight">
    /// The total weight captured for the total number of units.
    /// </param>
    /// <param name="_decimalPrecision">
    /// The decimal precision in which to round the calculated average to; optional.
    /// </param>
    /// <returns>
    /// The calculated weight for the number of units being processed.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if _totalNumOfUnits is not a positive number.
    /// </exception>
    [Hookable(false)]
    public static InventQty calculateAverageWeight(
        InventHandlingQty               _unitsBeingProcessed,
        InventHandlingQty               _totalNumOfUnits,
        InventHandlingQty               _totalWeight,
        UnitOfMeasureDecimalPrecision   _decimalPrecision = -1)
    {
        InventHandlingQty ret;
    
        if (_totalNumOfUnits <= 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        if (_unitsBeingProcessed == _totalNumOfUnits)
        {
            ret = _totalWeight;
        }
        else
        {
            ret = (_unitsBeingProcessed / _totalNumOfUnits) * _totalWeight;
        }
    
        if (_decimalPrecision >= 0)
        {
            ret = decRound(ret, _decimalPrecision);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePickingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity that will be picked when executing initial pick work lines.
    /// </summary>
    /// <param name="_workLine">
    /// The work line being executed.
    /// </param>
    /// <param name="_inventDim">
    /// Inventory dimensions specified by user not originally on the work line.
    /// </param>
    /// <returns>
    /// The quantity that will be picked.
    /// </returns>
    [Hookable(false)]
    public static InventHandlingQty calculatePickingQuantity(
        WHSWorkLine _workLine,
        InventDim   _inventDim)
    {
        WHSReservationHierarchyProvider reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        List                            hierarchyList                = reservationHierarchyProvider.getDimListBelowLocation(InventTable::find(_workLine.ItemId), WHSReservationHierarchySortOrder::BottomUp);
        List                            fieldIdList                  = WHSReservationHierarchyInventDimUtil::hierarchyList2FieldIdList(hierarchyList);
        InventDim                       inventDimCriteria            = _workLine.inventDim();
        InventDimParm                   inventDimParm;

        inventDimCriteria.wMSLocationId = _workLine.WMSLocationId;
        inventDimCriteria.initFromInventDim(_inventDim, fieldIdList);
        inventDimParm.initFromInventDim(inventDimCriteria);

        InventSumUnionDeltaPhysicalQty  inventSumUnionDeltaPhysicalQty;
        InventDim                       inventDim;

        select sum(PdsCWPhysicalInvent) from inventSumUnionDeltaPhysicalQty
            where inventSumUnionDeltaPhysicalQty.ItemId                 == _workLine.ItemId
            &&    inventSumUnionDeltaPhysicalQty.PdsCWPhysicalInvent     > 0
            #InventDimInnerJoin(inventSumUnionDeltaPhysicalQty.InventDimId, inventDim, inventDimCriteria, inventDimParm);
            
        InventHandlingQty ret;
        boolean isBatchAboveItem = WHSReservationHierarchyInventDimUtil::isBatchAboveLocation(InventTable::find(_workLine.ItemId));

        // For Non-CW batch above items if there are multiple batches on a single LP, system moves only the required quantity for the
        // production to the staging location even though material picking is set to "Staging". So, system should only gather the
        // weight of the required quantity. But for the batch below scenario system moves the entire LP to the staging location.
        if (_workLine.whsWorkTable().WorkTransType == WHSWorkTransType::ProdPick
            && WHSInventTable::find(_workLine.ItemId).AllowMaterialOverPick == WHSAllowMaterialOverPick::Staging
            && inventDimCriteria.wmsLocation().whsLocationIsLPControlled()
            && (!isBatchAboveItem
                || (isBatchAboveItem
                    && WhsInvent::calculateHandlingQtyOnLicensePlate(_inventDim.LicensePlateId) == inventSumUnionDeltaPhysicalQty.PdsCWPhysicalInvent)
               )
            )
        {
            ret = inventSumUnionDeltaPhysicalQty.PdsCWPhysicalInvent;
        }
        else
        {
            ret = min(inventSumUnionDeltaPhysicalQty.PdsCWPhysicalInvent, _workLine.InventQtyRemain);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertInventQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts inventory unit for both catch weight and non catch weight items.
    /// </summary>
    /// <param name="_itemId">
    /// The item being converted.
    /// </param>
    /// <param name="_unitId">
    /// The from unit of measure.
    /// </param>
    /// <param name="_qty">
    /// The quantity being converted.
    /// </param>
    /// <param name="_inventDimId">
    /// Inventory dimensions used for variant specific conversions.
    /// </param>
    /// <returns>
    /// A converted quantity value.
    /// </returns>
    /// <remarks>
    /// Catch weight item quantity will be in the catch weight handling unit.
    /// </remarks>
    [Hookable(false)]
    public static InventHandlingQty convertInventQuantity(
        ItemId              _itemId,
        UnitOfMeasureSymbol _unitId,
        InventHandlingQty   _qty,
        InventDimId         _inventDimId)
    {
        if (EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
        {
            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                        _inventDimId,
                                                                                        _qty,
                                                                                        _unitId,
                                                                                        WHSCatchWeightHelper::inventHandlingUnitId(_itemId),
                                                                                        NoYes::Yes);
        }
        
        EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        return releasedProductUnitConverter.convertGivenUnitSymbols(_qty, _unitId, WHSCatchWeightHelper::inventHandlingUnitId(_itemId), NoYes::Yes, _itemId, _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventHandlingUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the handling unit for both catch weight enabled items and non catch weight enabled items.
    /// </summary>
    /// <param name="_itemId">
    /// The item whose handling unit will be returned.
    /// </param>
    /// <returns>
    /// The handling unit for the item.
    /// </returns>
    [Hookable(false)]
    public static InventHandlingUnitId inventHandlingUnitId(ItemId _itemId)
    {
        return PdsGlobal::pdsIsCWItem(_itemId) ? PdsCatchWeight::cwUnitId(_itemId) : InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventHandlingUnitDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of decimals for the items inventory handling unit.
    /// </summary>
    /// <param name = "_itemId">The item id to determine the handling unit decimals for.</param>
    /// <returns>The number of decimals for the items inventory handling unit.</returns>
    [Hookable(false)]
    public static UnitOfMeasureDecimalPrecision inventHandlingUnitDecimals(ItemId _itemId)
    {
        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            return UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(PdsCatchWeight::cwUnitId(_itemId)));
        }
        
        return InventTable::inventDecimals(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionVirtuelWeightAdj</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transaction is a system adjustment of weight made by a <c>PDSCW_InventMov_Vir_CWLoss</c> movement.
    /// </summary>
    /// <param name="_inventTrans">
    /// The transaction being evaluated.
    /// </param>
    /// <param name="_inventTransOrigin">
    /// The <c>InventTransOrigin</c> being evaluated; optional.
    /// </param>
    /// <returns>
    /// true if the transaction is a system adjustment of weight; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Based on the current use of system weight adjustments there will never be a catch weight quantity associated to the transaction
    /// and the <c>InventTransOrigin</c>'s ReferenceId will match the <c>InventTransId</c>.
    /// </remarks>
    [Hookable(false)]
    public static boolean isTransactionVirtuelWeightAdj(
        InventTrans         _inventTrans,
        InventTransOrigin   _inventTransOrigin = InventTransOrigin::find(_inventTrans.InventTransOrigin))
    {
        return _inventTrans.PdsCWQty            == 0
            && _inventTrans.Qty                 != 0
            && _inventTransOrigin.InventTransId == _inventTransOrigin.ReferenceId
            && PdsGlobal::pdsIsCWItem(_inventTransOrigin.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDefaultWeightForPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the default weight of a quantity based on total weight and total quantity of the item within the dimension set.
    /// </summary>
    /// <param name = "_itemId">Item used to find default weight.</param>
    /// <param name = "_inventDim">Dimension set to determine the on hand quantity values.</param>
    /// <param name = "_unitsBeingProcessed">The number of units being processed. Should be a whole number.</param>
    /// <param name = "_decimalPrecision">The decimal precision in which to round the calculated average to; optional.</param>
    /// <returns>The calculated default weight for the average of total inventory matching the dimension set.</returns>
    [Hookable(false)]
    public static InventQty calculateDefaultWeightForPick(
        ItemId                        _itemId,
        InventDim                     _inventDim,
        InventHandlingQty             _unitsBeingProcessed,
        UnitOfMeasureDecimalPrecision _decimalPrecision = -1)
    {
        InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(_itemId,  _inventDim);
        InventQty weightToPick;

        if (inventOnHandQty.pdsCWPhysicalInvent() > 0)
        {
            weightToPick = WHSCatchWeightHelper::calculateAverageWeight(_unitsBeingProcessed, inventOnHandQty.pdsCWPhysicalInvent(), inventOnHandQty.physicalInvent(), _decimalPrecision);
        }

        return weightToPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMovingWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method that calculates the weight to move based on inventory quantity.
    /// </summary>
    /// <param name = "_itemId">The item being moved.</param>
    /// <param name = "_inventDimId">The inventory dimensions being moved.</param>
    /// <param name = "_handlingQtyToMove">The handling quantity being moved.</param>
    /// <returns>The calculated weight to move.</returns>
    [Hookable(false)]
    public static WHSTransWeight calculateMovingWeight(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        InventHandlingQty   _handlingQtyToMove)
    {
        PdsCWInventQty  inventoryCWQty;
        WHSTransWeight  inventoryWeight;

        // Determine if we are moving all quantity for a physical dimension set.
        [inventoryCWQty, inventoryWeight] = WHSInventOnHand::getPhysicalHandlingQuantities(_itemId, _inventDimId);

        if (inventoryCWQty > _handlingQtyToMove)
        {
            // If moving partial quantity for a dimension set move the average weight.
            return WHSCatchWeightHelper::calculateAverageWeight(
                                                    _handlingQtyToMove,
                                                    inventoryCWQty,
                                                    inventoryWeight,
                                                    InventTable::inventDecimals(_itemId));
        }

        // If moving full quantity for a dimension set move actual weight.
        return inventoryWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightQuantity</Name>
				<Source><![CDATA[
    internal static void validateCatchWeightQuantity(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        InventHandlingQty   _cwQty,
        UnitOfMeasureSymbol _unitId,
        InventQty           _weight,
        UnitOfMeasureSymbol _weightUnitId   = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId)
    {
        InventHandlingQty catchWeightQty = WHSCatchWeightHelper::convertInventQuantity(_itemId, _unitId, _cwQty, _inventDimId);

        if (!PdsCatchWeight::validateQty(
            _itemId,
            _weight,
            UnitOfMeasure::unitOfMeasureIdBySymbol(_weightUnitId),
            catchWeightQty))
        {
            throw error("@SYS326740");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCatchWeightAndUpdatePass</Name>
				<Source><![CDATA[
    internal static WHSCapturedWeight calculateCatchWeightAndUpdatePass(ItemId _itemId, InventQty _inventQty, InventHandlingQty _totalReceiptQty, WHSRFPassthrough _pass)
    {
        WHSCapturedWeight calcCatchWeight = 0;

        if (WHSInventTable::shouldCaptureAggregateWeight(_itemId))
        {
            calcCatchWeight = WHSCatchWeightHelper::calculateAverageWeight(_inventQty,
                                                                    _totalReceiptQty - _pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtySum),
                                                                    _pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight) - _pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightWeightSum),
                                                                    InventTable::inventDecimals(_itemId));
        }
        else
        {
            // If not capturing aggregate weight use work creation handling quantity rounded to correct decimal precision.
            calcCatchWeight = WHSCatchWeightHelper::calculateAverageWeight(_inventQty,
                                                                    _inventQty,
                                                                    _pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight),
                                                                    InventTable::inventDecimals(_itemId));

            _pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);
        }

        if (_inventQty != (_totalReceiptQty - _pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtySum)))
        {
            _pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtySum, _pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtySum) + _inventQty);
            _pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightWeightSum, _pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightWeightSum) + calcCatchWeight);
        }

        return calcCatchWeight;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>