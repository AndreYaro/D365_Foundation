<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankTransSummarizationFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BankTransSummarizationFacade
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doSummarize</Name>
				<Source><![CDATA[
    internal static void doSummarize(List _journalNums, BankTransSummarizationLogger _logger)
    {
        if (BankTransSummarizationFacade::summarizationIsAllowed(_journalNums))
        {
            BankTransSummarizationCalculator bankTransSummarizationCalculator = BankTransSummarizationCalculator::construct(_journalNums);
            BankTransSummarizationCriteria bankTransSummarizationCriteria = bankTransSummarizationCalculator.getBankTransSummarizationDataInitializer().getCriteria();

            if (bankTransSummarizationCriteria != BankTransSummarizationCriteria::NoSummarization)
            {
                _logger.logSummarizationCriteria(bankTransSummarizationCriteria);

                List paymentTransactionGroups = bankTransSummarizationCalculator.runGrouping();
                BankTransSummarizationDocumentGroupFilter bankTransSummarizationDocumentGroupFilter = new BankTransSummarizationDocumentGroupFilter(paymentTransactionGroups);
                bankTransSummarizationDocumentGroupFilter.log(_logger);

                ttsbegin;
                BankTransSummarizationDocumentGenerator bankTransSummarizationDocumentGenerator = BankTransSummarizationDocumentGenerator::construct(bankTransSummarizationDocumentGroupFilter, bankTransSummarizationCriteria);
                bankTransSummarizationDocumentGenerator.setLogger(_logger);
                List documentTransPairsList = bankTransSummarizationDocumentGenerator.getDocumentTransPairsList();

                BankTransSummarizationPostingEngine::post(documentTransPairsList);
                ttscommit;
            }
            else
            {
                _logger.logSummarizationSkipped();
            }
        }
        else
        {
            _logger.logSummarizationSameVoucher();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizationIsAllowed</Name>
				<Source><![CDATA[
    private static boolean summarizationIsAllowed(List _journalNums)
    {
        Set set = new Set(Types::String);
        ListEnumerator journalNumEnumerator = _journalNums.getEnumerator();

        while (journalNumEnumerator.moveNext())
        {
            LedgerJournalId journalNum = journalNumEnumerator.current();
            LedgerJournalTrans ledgerJournalTrans;
            while select Voucher from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == journalNum
            {
                Voucher voucher = ledgerJournalTrans.Voucher;
                if (set.in(voucher))
                {
                    return false;
                }
                set.add(voucher);
            }
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>