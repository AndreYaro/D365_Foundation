<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastAssignCostElement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmPositionForecastAssignCostElementForm</c> class is the form runner class for the <c>HcmPositionForecastAssignCostElementForm</c> form.
/// </summary>

abstract class HcmPositionForecastAssignCostElement
{
    #define.BudgetCycleStart('BudgetProcessStartDate')
    #define.BudgetCycleEnd('BudgetProcessEndDate')

    Set                                     successfullyApplied;
    Set                                     failedToApplied;
    Set                                     accountLinesDeleted;
    boolean                                 showConfirmationForFailedDueToSuspendedFlag;
    HcmBudgetPurposeType                    budgetPurposeType;
    HcmPositionForecastCompensationGrid     positionForecastCompensationGrid;
    HcmTmpPositionForecastAssignCostElement hcmTmpPositionForecastAssignCostElement;

    CompanyInfoRecId                    selectedCompanyId;
    HcmPositionForecastScenarioRecId    newPositionForecastScenarioId;
    HcmPositionForecastScenarioRecId    currPositionForecastScenarioId;
    HcmPositionRecId                    livePositionId;
    HcmPositionForecastCompGroupRecId   compGroupId;
    HcmPositionForecastCompensationGridRecId compGridId;
    ValidFromDate                       positionForecastStart, budgetCycleStartDate;
    ValidToDate                         positionForecastEnd, budgetCycleEndDate;
    ValidFromDate                       validDateRangeStart;
    ValidToDate                         validDateRangeEnd;
    container                           tmpBudgetPurposeTypeContainer;
    boolean                             massUpdateNeeded;
    boolean                             massUpdateSuccess;
    boolean                             isEarningCostElement;
    boolean                             isEarningCostReset;
    boolean                             earningCostAssigned;
    ValidFromDateTime                   positionAsOfDateTime;
    Map                                 budgetProcessMap;
    int64                               numberOfSelectedForecastPosition;
    boolean                             updatePositionSucessfullyApplied;
    boolean canRunRecalc;
    boolean recalcPending;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPositionFailedToApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Record positions that are failed to update.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record ID of <c>HcmPositionForecastScenario</c> table.
    /// </param>
    protected void addPositionFailedToApplied(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId)
    {
        if (!failedToApplied.in(_positionForecastScenarioRecId))
        {
            failedToApplied.add(_positionForecastScenarioRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPositionSucessfullyApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Record positions that are scuccessfully updated.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record ID of <c>HcmPositionForecastScenario</c> table.
    /// </param>
    protected void addPositionSucessfullyApplied(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId)
    {
        if (!showConfirmationForFailedDueToSuspendedFlag)
        {
            if (!successfullyApplied.in(_positionForecastScenarioRecId))
            {
                successfullyApplied.add(_positionForecastScenarioRecId);
            }
        }
        updatePositionSucessfullyApplied = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowBudgetCostElementDefaultDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the default dates are allowed to set on the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <returns>
    /// true if default dates can be set; otherwise false.
    /// </returns>
    protected boolean allowBudgetCostElementDefaultDates()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the note field for the default <c>HcmPositionForecastBudgetAcctLine</c>
    /// record for the system generated earning line.
    /// </summary>
    /// <param name="_positionForecastBudgetAcctLineRecId">
    /// The record ID value of the <c>HcmPositionForecastBudgetAcctLine</c> record
    /// to process.
    /// </param>
    /// <param name="_checkForExistingNote">
    /// A boolean value indicates whether to check for existing record or not.
    /// </param>
    /// <param name="_note">
    /// A value set to the note field of <c>HcmPositionForecastAcctLineNote</c> record.
    /// </param>
    protected void createNotes(HcmPositionForecastBudgetAcctLineRecId _positionForecastBudgetAcctLineRecId, boolean _checkForExistingNote, HcmPositionForecastNote _note)
    {
        HcmPositionForecastAcctLineNote positionForecastAcctLineNote;

        if (_checkForExistingNote)
        {
            positionForecastAcctLineNote = HcmPositionForecastAcctLineNote::findByAcctLine(_positionForecastBudgetAcctLineRecId, true);
        }

        if (positionForecastAcctLineNote.RecId == 0 || _checkForExistingNote)
        {
            positionForecastAcctLineNote.HcmPositionForecastBudgetAcctLine = _positionForecastBudgetAcctLineRecId;
            positionForecastAcctLineNote.Note = _note;
        }

        positionForecastAcctLineNote.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryForForecastBudgetAccountLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the query for the table <c>HcmPositionForecastBudgetAccountLine</c> records used to add or update cost elements to the number of forecast positions.
    /// </summary>
    /// <param name="_hcmTmpPositionForecastAssignCostElement">
    /// The <c>HcmTmpPositionForecastAssignCostElement</c> table record.
    /// </param>
    /// <param name="_budgetPurposeType">
    /// The <c>HcmBudgetPurposeType</c> table record.
    /// </param>
    /// <returns>
    /// Returns the query for <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </returns>
    /// <remarks>
    /// Query returns the records for <c>HcmPositionForecastBudgetAccountLine</c> table that are used to push cost element changes to the forecast positions.
    /// </remarks>
    protected Query createQueryForForecastBudgetAccountLine(HcmTmpPositionForecastAssignCostElement _hcmTmpPositionForecastAssignCostElement, HcmBudgetPurposeType _budgetPurposeType)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSystemGeneratedNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the note field for the default <c>HcmPositionForecastBudgetAcctLine</c>
    /// record for the system generated earning line.
    /// </summary>
    /// <param name="_positionForecastBudgetAcctLineRecId">
    /// The record ID value of the <c>HcmPositionForecastBudgetAcctLine</c> record
    /// to process.
    /// </param>
    protected void createSystemGeneratedNote(HcmPositionForecastBudgetAcctLineRecId _positionForecastBudgetAcctLineRecId)
    {
        this.createNotes(_positionForecastBudgetAcctLineRecId, true, "@SYS4005942");
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatValidDateRangeByScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats starting and ending date type field references into a date range query string expression.
    /// </summary>
    /// <param name="startDateField">
    ///  The field name of starting date type field reference.
    /// </param>
    /// <param name="endDateField">
    /// The field name of the ending date type field reference.
    /// </param>
    /// <returns>
    /// The date range query string expression.
    /// </returns>
    protected str formatValidDateRangeByScenario(FieldName startDateField, FieldName endDateField)
    {
        String255 qualifiedDateRange;

        qualifiedDateRange = "(%1 <= %4) && (%2 >= %3)";

        return strFmt(qualifiedDateRange,
            startDateField,
            endDateField,
            date2StrXpp(this.parmValidDateRangeStart()),
            date2StrXpp(this.parmValidDateRangeEnd()) );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetAcctLineSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line source for budget account Line.
    /// </summary>
    /// <returns>
    /// Returns the line source of the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </returns>
    protected HcmPositionForecastBudgetAcctLineSource getBudgetAcctLineSource()
    {
        return HcmPositionForecastBudgetAcctLineSource::OriginalAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForBudgetCostElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the table <c>HcmPositionForecastBudgetAccountLine</c> records used to add or update
    /// cost elements to the number of forecast positions.
    /// </summary>
    /// <returns>
    /// Returns the query for <c>HcmPositionForecastBudgetAcctLine</c> table to add or update.
    /// </returns>
    /// <remarks>
    /// Child classes must override this method for process to create <c>HcmPositionForecastBudgetAcctLine</c> table to add or update.
    /// </remarks>
    protected Query getQueryForBudgetCostElement()
    {
        ///
        // This method should be implemented by every child. We are not making
        // this method abstract because there are two existing processes that are inheriting this class.
        ///
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalCountFromTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total record count from passing <c>HcmTmpPositionForecastAssignCostElement</c> table.
    /// </summary>
    /// <param name="_hcmTmpPositionForecastAssignCostElement">
    /// The <c>HcmTmpPositionForecastAssignCostElement</c> table record.
    /// </param>
    /// <returns>
    /// the total number of records from passing <c>HcmTmpPositionForecastAssignCostElement</c> table.
    /// </returns>
    private int64 getTotalCountFromTmpTable(HcmTmpPositionForecastAssignCostElement _hcmTmpPositionForecastAssignCostElement)
    {
        select count(RecId) from _hcmTmpPositionForecastAssignCostElement;
        return _hcmTmpPositionForecastAssignCostElement.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEarningExistedByCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the earning cost existed on Forecast position based on earning cost generation from level selection or not
    /// </summary>
    /// <param name="_isGeneratedByLevelSelection">
    /// The flag for earning cost generated by compensation level select
    /// </param>
    /// <returns>
    /// true if earning cost existed based on earning cost generation source.
    /// </returns>
    private boolean isEarningExistedByCriteria( boolean _isGeneratedByLevelSelection)
    {
        HcmBudgetPurposeTypeDetail              budgetPurposetypedetail;
        HcmPositionForecastBudgetAcctLine       positionForecastBudgetAcctLine;
        HcmPositionForecastCompensationGroup    positionForecastCompensationGroup;

        positionForecastCompensationGroup = HcmPositionForecastCompensationGroup::find(this.parmForecastCompGroupId(), this.parmCompanyId());

        select firstonly RecId from positionForecastBudgetAcctLine
            where positionForecastBudgetAcctLine.PositionForecastScenario == this.parmNewPositionForecastScenarioId()
                && positionForecastBudgetAcctLine.LegalEntity == this.parmCompanyId()
                && positionForecastBudgetAcctLine.IsSystemGenerated == _isGeneratedByLevelSelection
                exists join budgetPurposetypedetail
                    where budgetPurposetypedetail.RecId == positionForecastBudgetAcctLine.BudgetPurposeTypeDetail
                        && budgetPurposetypedetail.BudgetPurposeType == positionForecastCompensationGroup.HcmBudgetPurposeType;

        return positionForecastBudgetAcctLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineLockedForRecalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether editing is allowed for the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </summary>
    /// <param name="_positionForecastBudgetAcctLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </param>
    /// <param name="_budgetpurposetypedetail">
    /// The <c>HcmBudgetPurposeTypeDetail</c> table record.
    /// </param>
    /// <returns>
    /// true if line is locked for editing; otherwise, false.
    /// </returns>
    protected boolean isLineLockedForRecalculation(HcmPositionForecastBudgetAcctLine _positionForecastBudgetAcctLine, HcmBudgetPurposeTypeDetail _budgetpurposetypedetail)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        successfullyApplied = new Set(Types::Int64);
        failedToApplied  = new Set(Types::Int64);

        massUpdateNeeded = false;
        isEarningCostElement = false;
        massUpdateSuccess = false;
        selectedCompanyId = CompanyInfo::current();
        budgetProcessMap = new Map(Types::Int64, Types::Class);
        canRunRecalc = true;
        recalcPending = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCycleEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the Budget cycle end date.
    /// </summary>
    /// <param name="_budgetCycleEndDate">
    ///  The end date for Budget cycle.
    /// </param>
    /// <returns>
    ///  The end date for Budget cycle.
    /// </returns>
    public ValidToDate parmBudgetCycleEndDate(ValidFromDate _budgetCycleEndDate = budgetCycleEndDate)
    {
        budgetCycleEndDate = _budgetCycleEndDate;
        return budgetCycleEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCycleStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the Budget cycle start date.
    /// </summary>
    /// <param name="_budgetCycleStartDate">
    ///  The start date for Budget cycle.
    /// </param>
    /// <returns>
    ///  The start date for Budget cycle.
    /// </returns>
    public ValidFromDate parmBudgetCycleStartDate(ValidFromDate _budgetCycleStartDate = budgetCycleStartDate)
    {
        budgetCycleStartDate = _budgetCycleStartDate;
        return budgetCycleStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPurposeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the <c>HcmBudgetPurposeType</c> table record.
    /// </summary>
    /// <param name="_budgetPurposeType">
    ///  The <c>HcmBudgetPurposeType</c> table record.
    /// </param>
    /// <returns>
    ///  The <c>HcmBudgetPurposeType</c> table record.
    /// </returns>
    public HcmBudgetPurposeType parmBudgetPurposeType(HcmBudgetPurposeType _budgetPurposeType=budgetPurposeType)
    {
        budgetPurposeType = _budgetPurposeType;
        return budgetPurposeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanRunRecalcProcess</Name>
				<Source><![CDATA[
    public boolean parmCanRunRecalcProcess(boolean _canRunRecalc = canRunRecalc)
    {
        canRunRecalc = _canRunRecalc;
        return canRunRecalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the record ID of the comapany info in the <c>CompanyInfo</c> table.
    /// </summary>
    /// <param name="_selectedCompanyId">
    ///  The record ID of the comapany info in the <c>CompanyInfo</c> table.
    /// </param>
    /// <returns>
    /// The record ID of the comapany info in the <c>CompanyInfo</c> table.
    /// </returns>
    public CompanyInfoRecId parmCompanyId(CompanyInfoRecId _selectedCompanyId = selectedCompanyId)
    {
        selectedCompanyId = _selectedCompanyId;
        return selectedCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrPositionForecastScenarioId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the record ID of the forecast postion scenario in the <c>HcmPositionForecast</c> table.
    /// </summary>
    /// <param name="_currPositionForecastScenarioId">
    ///  The record ID of the current position forecast scenario in the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <returns>
    ///  The record ID of the current position forecast scenario in the <c>HcmPositionForecastScenario</c> table.
    /// </returns>
    public HcmPositionForecastScenarioRecId parmCurrPositionForecastScenarioId(HcmPositionForecastScenarioRecId _currPositionForecastScenarioId = currPositionForecastScenarioId)
    {
        currPositionForecastScenarioId = _currPositionForecastScenarioId;
        return currPositionForecastScenarioId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEarningCostAssigned</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the flag for earning cost assignment.
    /// </summary>
    /// <param name="_earningCostAssigned">
    ///  The flag for earning cost assignment.
    /// </param>
    /// <returns>
    ///  true if the earning cost assigned sucessfully.
    /// </returns>
    public boolean parmEarningCostAssigned (boolean _earningCostAssigned = earningCostAssigned)
    {
        earningCostAssigned = _earningCostAssigned;
        return earningCostAssigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastCompGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the record ID of the Compensation group in the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </summary>
    /// <param name="_compensationGroupId">
    ///  The record ID of the Compensation group in the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </param>
    /// <returns>
    ///  The record ID of the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </returns>
    public HcmPositionForecastCompGroupRecId parmForecastCompGroupId(HcmPositionForecastCompGroupRecId   _compensationGroupId=compGroupId)
    {
        compGroupId = _compensationGroupId;
        return compGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMassUpdateCostElmentAdded</Name>
				<Source><![CDATA[
    public boolean parmMassUpdateCostElmentAdded(boolean _massUpdateSuccess = massUpdateSuccess)
    {
        massUpdateSuccess = _massUpdateSuccess;
        return massUpdateSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMassUpdateNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the flag for mass update.
    /// </summary>
    /// <param name="_massUpdateNeeded">
    ///  The flag for mass update.
    /// </param>
    /// <returns>
    ///  true if process mass update.
    /// </returns>
    public boolean parmMassUpdateNeeded(boolean _massUpdateNeeded = massUpdateNeeded)
    {
        massUpdateNeeded = _massUpdateNeeded;
        return massUpdateNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewPositionForecastScenarioId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the record ID of the forecast postion scenario in the <c>HcmPositionForecast</c> table.
    /// </summary>
    /// <param name="_newPositionForecastScenarioId">
    ///  The record ID of the new position forecast scenario in the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <returns>
    ///  The record ID of the new position forecast scenario in the <c>HcmPositionForecastScenario</c> table.
    /// </returns>
    public HcmPositionForecastScenarioRecId parmNewPositionForecastScenarioId(HcmPositionForecastScenarioRecId _newPositionForecastScenarioId = newPositionForecastScenarioId)
    {
        newPositionForecastScenarioId = _newPositionForecastScenarioId;
        return newPositionForecastScenarioId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionAsOfDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the as of date time from position.
    /// </summary>
    /// <param name="_positionAsOfDateTime">
    ///  The as of date time from position.
    /// </param>
    /// <returns>
    ///  The as of date time from position.
    /// </returns>
    public ValidFromDateTime parmPositionAsOfDate(ValidFromDateTime _positionAsOfDateTime = positionAsOfDateTime)
    {
        positionAsOfDateTime = _positionAsOfDateTime;
        return positionAsOfDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastCompGrid</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the record ID of the Compensation group in the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </summary>
    /// <param name="_compensationGridId">
    ///  The record ID of the Compensation group in the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </param>
    /// <returns>
    ///  The record ID of the <c>HcmPositionForecastCompensationGrid</c> table.
    /// </returns>
    public HcmPositionForecastCompensationGridRecId parmPositionForecastCompGrid(HcmPositionForecastCompensationGridRecId _compensationGridId = compGridId)
    {
        compGridId = _compensationGridId;
        return compGridId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastEnd</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the Forecast position end date.
    /// </summary>
    /// <param name="_positionForecastEnd">
    ///  The end date for Forecast position.
    /// </param>
    /// <returns>
    ///  The end date for Forecast position.
    /// </returns>
    public ValidFromDate parmPositionForecastEnd(ValidFromDate _positionForecastEnd=positionForecastEnd)
    {
        positionForecastEnd = _positionForecastEnd;
        return positionForecastEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastStart</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the Forecast position start date.
    /// </summary>
    /// <param name="_positionForecastStart">
    ///  The start date for Forecast position.
    /// </param>
    /// <returns>
    ///  The start date for Forecast position.
    /// </returns>
    public ValidFromDate parmPositionForecastStart(ValidFromDate _positionForecastStart = positionForecastStart)
    {
        positionForecastStart = _positionForecastStart;
        return positionForecastStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpBudgetPurposeTypeContainer</Name>
				<Source><![CDATA[
    public final container parmTmpBudgetPurposeTypeContainer(container _tmpBudgetPurposeTypeContainer = tmpBudgetPurposeTypeContainer)
    {
        tmpBudgetPurposeTypeContainer = _tmpBudgetPurposeTypeContainer;

        return tmpBudgetPurposeTypeContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpPositionForecastAssignCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the <c>HcmTmpPositionForecastAssignCostElement</c> table record.
    /// </summary>
    /// <param name="_hcmTmpPositionForecastAssignCostElement">
    ///  The <c>HcmTmpPositionForecastAssignCostElement</c> table record.
    /// </param>
    /// <returns>
    ///  The <c>HcmTmpPositionForecastAssignCostElement</c> table record.
    /// </returns>
    public HcmTmpPositionForecastAssignCostElement parmTmpPositionForecastAssignCost (HcmTmpPositionForecastAssignCostElement _hcmTmpPositionForecastAssignCostElement = hcmTmpPositionForecastAssignCostElement)
    {
        hcmTmpPositionForecastAssignCostElement = _hcmTmpPositionForecastAssignCostElement;
        return hcmTmpPositionForecastAssignCostElement ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalForecastPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the total number of selected Forecast positions.
    /// </summary>
    /// <param name="_totalSelectedForecastPosition">
    /// The total number of selected Forecast positions.
    /// </param>
    /// <returns>
    /// The total number of selected Forecast positions.
    /// </returns>
    public int64 parmTotalForecastPosition(int64 _totalSelectedForecastPosition = numberOfSelectedForecastPosition)
    {
        numberOfSelectedForecastPosition = _totalSelectedForecastPosition;
        return numberOfSelectedForecastPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidDateRangeEnd</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the valid end date for Forecast position cost line.
    /// </summary>
    /// <param name="_validDateRangeEnd">
    ///  The end date for valid date range.
    /// </param>
    /// <returns>
    ///  The end date for valid date range.
    /// </returns>
    public ValidToDate parmValidDateRangeEnd(ValidToDate _validDateRangeEnd = validDateRangeEnd)
    {
        validDateRangeEnd = _validDateRangeEnd;
        return validDateRangeEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidDateRangeStart</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets or gets the valid start date for Forecast position cost line.
    /// </summary>
    /// <param name="_validDateRangeStart">
    ///  The start date for valid date range.
    /// </param>
    /// <returns>
    ///  The start date for valid date rangen.
    /// </returns>
    public ValidFromDate parmValidDateRangeStart(ValidFromDate _validDateRangeStart = validDateRangeStart )
    {
        validDateRangeStart= _validDateRangeStart;
        return validDateRangeStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBudgetAccountLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process records of the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_positionForecastBudgetAcctLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </param>
    protected void processBudgetAccountLine(HcmPositionForecastBudgetAcctLine _positionForecastBudgetAcctLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCostElementQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Inserts budget cost elements to the single forecast position.
    /// </summary>
    protected void processCostElementQuery()
    {
        HcmBudgetPurposeTypeDetail                  budgetpurposetypedetail;
        HcmPositionForecastBudgetAcctLine           positionForecastBudgetAcctLine;
        HcmPositionForecastScenario                 hcmPositionForecastScenario;
        QueryRun                                    queryRun;
        HcmPositionForecastCalcProcessLauncher      positionForecastCalcProcessLaucher;
        boolean                                     costElementAdded = false;
        Query                                       budgetCostElementQueryForForecastPosition;

        budgetCostElementQueryForForecastPosition = this.getQueryForBudgetCostElement();

        queryRun = new QueryRun(budgetCostElementQueryForForecastPosition);

        // Add all qualified cost elements to Forecast position
        while (queryRun.next())
        {
            budgetpurposetypedetail = queryRun.get(tableNum(HcmBudgetPurposeTypeDetail));

            positionForecastBudgetAcctLine = queryRun.get(tableNum(HcmPositionForecastBudgetAcctLine));

            this.setPositionForecastBudgetAcctline(this.parmNewPositionForecastScenarioId(),
                                        budgetpurposetypedetail,
                                        positionForecastBudgetAcctLine);

            this.processBudgetAccountLine(positionForecastBudgetAcctLine);
            // set the flags for recalculation purpose.
            if (costElementAdded == false)
            {
                costElementAdded = true;
                recalcPending = true;
            }
        }

        // Run the calculation process for the budget amount
        if (this.parmCanRunRecalcProcess() && (costElementAdded || recalcPending))
        {
            hcmPositionForecastScenario = HcmPositionForecastScenario::find(this.parmNewPositionForecastScenarioId());

            positionForecastCalcProcessLaucher = HcmPositionForecastCalcProcessLauncher::newForecastCalculateSinglePosition(hcmPositionForecastScenario);
            positionForecastCalcProcessLaucher.runPositionForecstCalculationProcess();
            recalcPending = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCostElementsByPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts budget cost elements to the single forecast position.
    /// </summary>
    private void processCostElementsByPosition()
    {
        HcmBudgetPurposeTypeDetail        budgetpurposetypedetail;
        HcmPositionForecastBudgetAcctLine positionForecastBudgetAcctLine;
        HcmPositionForecastScenario               hcmPositionForecastScenario;
        Query                             query;
        QueryRun                          queryRun;
        HcmPositionForecastCalcProcessLauncher      positionForecastCalcProcessLauncher;
        boolean                           costElementAdded = false;
        // Get all qualified cost elements for Forecast position
        query = this.createQueryForForecastBudgetAccountLine(this.parmTmpPositionForecastAssignCost(), this.parmBudgetPurposeType());

        queryRun = new QueryRun(query);

        // Add all qualified cost elements to Forecast position
        while (queryRun.next())
        {
            budgetpurposetypedetail = queryRun.get(tableNum(HcmBudgetPurposeTypeDetail));

            positionForecastBudgetAcctLine = queryRun.get(tableNum(HcmPositionForecastBudgetAcctLine));

            this.setPositionForecastBudgetAcctline(this.parmNewPositionForecastScenarioId(),
                                        budgetpurposetypedetail,
                                        positionForecastBudgetAcctLine);

            this.processBudgetAccountLine(positionForecastBudgetAcctLine);

            if (costElementAdded == false)
            {
                costElementAdded = true;
            }
        }

        // Run the calculation process for the budget amount
        if (costElementAdded || this.parmEarningCostAssigned())
        {
            hcmPositionForecastScenario = HcmPositionForecastScenario::find(this.parmNewPositionForecastScenarioId());
            this.parmMassUpdateCostElmentAdded(true);
            positionForecastCalcProcessLauncher = HcmPositionForecastCalcProcessLauncher::newForecastCalculateSinglePosition(hcmPositionForecastScenario);
            positionForecastCalcProcessLauncher.runPositionForecstCalculationProcess();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCostElementsPositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or Updates budget cost elements to the multiple positions.
    /// </summary>
    /// <param name="_budgetPurposeType">
    /// The <c>HcmBudgetPurposeType</c> table record.
    /// </param>
    /// <param name="_hcmTmpPositionForecastAssignCostElement">
    /// The <c>HcmTmpPositionForecastAssignCostElement</c> table record.
    /// </param>
    private void processCostElementsPositions(HcmBudgetPurposeType _budgetPurposeType, HcmTmpPositionForecastAssignCostElement _hcmTmpPositionForecastAssignCostElement)
    {
        HcmBudgetPurposeTypeDetail         budgetPurposeTypeDetail;
        HcmPositionForecastBudgetAcctLine positionForecastBudgetAcctLine;
        Query                             query;
        QueryRun                          queryRun;
        HcmPositionForecastCalcProcessLauncher      positionForecastCalcProcessLaucher;

        while select _hcmTmpPositionForecastAssignCostElement
        {
            // Set Valid data ranges based on each Forecast position scenario
            this.setValidDataRange(_hcmTmpPositionForecastAssignCostElement.HcmPositionForecastScenario);

            query = this.createQueryForForecastBudgetAccountLine(_hcmTmpPositionForecastAssignCostElement, _budgetPurposeType);

            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                budgetPurposeTypeDetail = queryRun.get(tableNum(HcmBudgetPurposeTypeDetail));

                positionForecastBudgetAcctLine = queryRun.get(tableNum(HcmPositionForecastBudgetAcctLine));

                this.setPositionForecastBudgetAcctline(_hcmTmpPositionForecastAssignCostElement.HcmPositionForecastScenario,
                                                       budgetPurposeTypeDetail, positionForecastBudgetAcctLine);

                showConfirmationForFailedDueToSuspendedFlag = this.isLineLockedForRecalculation(positionForecastBudgetAcctLine, budgetPurposeTypeDetail);

                if (positionForecastBudgetAcctLine.validateWrite())
                {
                    this.processBudgetAccountLine(positionForecastBudgetAcctLine);
                    updatePositionSucessfullyApplied = true;

                     // We need to record failure if the line is locked and amount or percent is modified. In this case we should allow user to update GL account.
                    if (showConfirmationForFailedDueToSuspendedFlag)
                    {
                        this.addPositionFailedToApplied(positionForecastBudgetAcctLine.PositionForecastScenario);
                        showConfirmationForFailedDueToSuspendedFlag = false;
                    }
                }
                else
                {
                    updatePositionSucessfullyApplied = false;
                    this.addPositionFailedToApplied(positionForecastBudgetAcctLine.PositionForecastScenario);
                }
            }

            // Update the last modification info for current forecast position
            if (updatePositionSucessfullyApplied == true)
            {
                this.addPositionSucessfullyApplied(_hcmTmpPositionForecastAssignCostElement.HcmPositionForecastScenario);

                this.updateLastModifiedByPosition(_hcmTmpPositionForecastAssignCostElement.HcmPositionForecastScenario);
            }
        }

        // Set the total number of selected Forecast positions
        this.parmTotalForecastPosition(this.getTotalCountFromTmpTable(_hcmTmpPositionForecastAssignCostElement));

        this.showConfirmationMessages();

        if (successfullyApplied)
        {
            positionForecastCalcProcessLaucher = HcmPositionForecastCalcProcessLauncher::newForecastCalcMultiplePositions(successfullyApplied);
            positionForecastCalcProcessLaucher.runPositionForecstCalculationProcess();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPositionForecastCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Runs the process for cost element assignments on a single Forecast position or multiple Forecast positions.
    /// </summary>
    protected void processPositionForecastCost()
    {
        this.processCostElementQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllCostElementsByPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all detail cost elements in the <c> HcmPositionForecastBudgetAcctLine</c> table for the forecast position.
    /// </summary>
    public void removeAllCostElementsByPosition()
    {
        HcmPositionForecastBudgetAcctLine hcmPositionForecastBudgetAcctLine;

        delete_from hcmPositionForecastBudgetAcctLine
            where hcmPositionForecastBudgetAcctLine.PositionForecastScenario == this.parmNewPositionForecastScenarioId()
                && hcmPositionForecastBudgetAcctLine.LegalEntity == this.parmCompanyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEarningCostByScenarioCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all exiting earning cost elements in the <c> HcmPositionForecastBudgetAcctLine</c> table for the forecast position.
    /// </summary>
    public void removeEarningCostByScenarioCompany()
    {
        HcmPositionForecastBudgetAcctLine hcmPositionForecastBudgetAcctLine;
        HcmBudgetPurposeType budgetCostElement;
        HcmBudgetPurposeTypeDetail budgetCostElementDetail;

        delete_from hcmPositionForecastBudgetAcctLine
            where hcmPositionForecastBudgetAcctLine.PositionForecastScenario == this.parmNewPositionForecastScenarioId()
                && hcmPositionForecastBudgetAcctLine.LegalEntity == this.parmCompanyId()
                && hcmPositionForecastBudgetAcctLine.IsSystemGenerated == true
                exists join budgetCostElementDetail
                    where budgetCostElementDetail.RecId == hcmPositionForecastBudgetAcctLine.BudgetPurposeTypeDetail
                exists join budgetCostElement
                    where (budgetCostElement.RecId == budgetCostElementDetail.BudgetPurposeType
                        && budgetCostElement.CostElementType == HcmBudgetCostElementType::Earning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForecastPositionCostAssignments</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Runs the process for cost element assignments on a single Forecast position or multiple Forecast positions.
    /// </summary>
    public void runForecastPositionCostAssignments()
    {
        if ( this.parmForecastCompGroupId() > 0
                || this.parmMassUpdateNeeded() == true)
        {
            this.processCostElementsByPosition();
        }
        else
        {
            this.processCostElementsPositions(this.parmBudgetPurposeType(),
                                                this.parmTmpPositionForecastAssignCost());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetCycleDatesFromForecastScenario</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets Budget cycle dates from Budget process plan based on Forecast position scenario.
    /// </summary>
    /// <param name="_hcmForecastScenarioRecId">
    /// The record ID of the <c>HcmForecastScenario</c> table.
    /// </param>
    private void setBudgetCycleDatesFromForecastScenario(HcmForecastScenarioRecId _hcmForecastScenarioRecId)
    {
        HcmForecastScenario hcmForecastScenario;
        Struct              budgetProcessDates;

        if (budgetProcessMap.exists( _hcmForecastScenarioRecId))
        {
            budgetProcessDates = budgetProcessMap.lookup(_hcmForecastScenarioRecId);
        }
        else
        {
            hcmForecastScenario = HcmForecastScenario::find(_hcmForecastScenarioRecId);

            budgetProcessDates = new Struct(Types::Date, #BudgetCycleStart, Types::Date, #BudgetCycleEnd);
            budgetProcessDates.value(#BudgetCycleStart, hcmForecastScenario.BudgetProcessStartDate);
            budgetProcessDates.value(#BudgetCycleEnd, hcmForecastScenario.BudgetProcessEndDate);

            budgetProcessMap.insert(hcmForecastScenario.RecId, budgetProcessDates);
        }

        this.parmBudgetCycleStartDate(budgetProcessDates.value(#BudgetCycleStart));
        this.parmBudgetCycleEndDate(budgetProcessDates.value(#BudgetCycleEnd));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPositionForecastBudgetAcctline</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns <c>HcmBudgetPurposeTypeDetail</c> table record to the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_positionForecastScenario">
    /// The record ID of the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <param name="_budgetPurposeTypeDetail">
    /// The <c>HcmBudgetPurposeTypeDetail</c> table record.
    /// </param>
    /// <param name="_positionForecastBudgetAcctLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table buffer.
    /// </param>
    /// <param name="_defaultValues">
    /// A Boolean optional value that sets the default date values to the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </param>
    public void setPositionForecastBudgetAcctline(
        HcmPositionForecastScenarioRecId        _positionForecastScenario,
        HcmBudgetPurposeTypeDetail              _budgetPurposeTypeDetail,
        HcmPositionForecastBudgetAcctLine       _positionForecastBudgetAcctLine,
        boolean                                 _defaultValues = true)
    {
        HcmPositionForecastScenario positionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenario);
        HcmPositionForecastCompensationGroup positionForecastCompensationGroup;
        HcmPositionAssignCostElement_Assign positionAssignCostElement_Assign;

        if (_positionForecastBudgetAcctLine.RecId != 0)
        {
            _positionForecastBudgetAcctLine.selectForUpdate(true);
            _defaultValues = this.allowBudgetCostElementDefaultDates();
        }

        if (!_positionForecastBudgetAcctLine.IsLineLockedForRecalculation)
        {
            if (_positionForecastBudgetAcctLine.IsSystemGenerated == true)
            {
                positionForecastCompensationGroup = HcmPositionForecastCompensationGroup::findByCompensationGrpIdDataAreaId(positionForecastScenario.CompensationGroupId,
                                                                                                                            positionForecastScenario.CompensationGroupDataAreaId);

                positionAssignCostElement_Assign = HcmPositionForecastAssignCostElement::newAssignCostFromCompByPosition(_positionForecastScenario,
                                                                                                                        positionForecastCompensationGroup.RecId);
                _positionForecastBudgetAcctLine.AmountCur = HcmPositionForecastCompensationGrid::annualizeCompensationAmount(positionForecastCompensationGroup.RecId,
                                                                                                            _positionForecastBudgetAcctLine.PositionForecastCompensationGrid);

                _positionForecastBudgetAcctLine.PercentageOfDefaultBasisAmount = 0;
            }
            else
            {
                _positionForecastBudgetAcctLine.PercentageOfDefaultBasisAmount = _budgetPurposeTypeDetail.Percent;
                _positionForecastBudgetAcctLine.AmountCur = _budgetPurposeTypeDetail.Amount;
            }
        }

        _positionForecastBudgetAcctLine.IsPercentageBased = _budgetPurposeTypeDetail.IsPercentageBased;
        _positionForecastBudgetAcctLine.LedgerDimension = _budgetPurposeTypeDetail.LedgerDimension;
        _positionForecastBudgetAcctLine.LegalEntity = this.parmCompanyId();
        _positionForecastBudgetAcctLine.BudgetPurposeTypeDetail = _budgetPurposeTypeDetail.RecId;
        _positionForecastBudgetAcctLine.PositionForecastScenario = _positionForecastScenario;

        if (_defaultValues)
        {
            _positionForecastBudgetAcctLine.EffectiveDate = max(this.parmValidDateRangeStart(), _budgetPurposeTypeDetail.EffectiveDate);
            _positionForecastBudgetAcctLine.ExpirationDate = min(this.parmValidDateRangeEnd(), _budgetPurposeTypeDetail.ExpirationDate);
            _positionForecastBudgetAcctLine.IsLineLockedForRecalculation = NoYes::No;
            _positionForecastBudgetAcctLine.CostLineSource = this.getBudgetAcctLineSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidDataRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the valid data ranges based on Forecast position scenario.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record ID of the forecast postion scenario in the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    public void setValidDataRange(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId)
    {
        HcmPositionForecastScenario hcmPositionForecastScenario;

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);

        // Set valid date ranges for all cost elements
        this.parmPositionForecastStart(hcmPositionForecastScenario.getUserTimeZoneActivationDate());
        this.parmPositionForecastEnd(hcmPositionForecastScenario.getUserTimeZoneRetirementDate());

        this.setBudgetCycleDatesFromForecastScenario(hcmPositionForecastScenario.ForecastScenario);

        this.parmValidDateRangeStart(max(this.parmPositionForecastStart(), this.parmBudgetCycleStartDate()));
        this.parmValidDateRangeEnd(min(this.parmPositionForecastEnd(), this.parmBudgetCycleEndDate()));

        // Set legal entity criteria for all cost elements
        this.parmCompanyId(hcmPositionForecastScenario.LegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showConfirmationMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Diplays the number of succssfull and unsuccessful forecast positions.
    /// </summary>
    public void showConfirmationMessages()
    {
        info(strFmt("@GLS190446", int2str(successfullyApplied.elements()), int642str(this.parmTotalForecastPosition())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastModifiedByPosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates the last modification info for the forecast position.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    ///  The record Id of forecast position in <c>HcmPositionForecast</c> table.
    /// </param>
    private void updateLastModifiedByPosition(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId)
    {
        HcmPositionForecastLastModified hcmPositionForecastLastModified;

        // Update the modification for this forecast position
        select firstonly forupdate hcmPositionForecastLastModified
            where hcmPositionForecastLastModified.PositionForecastScenario ==  _positionForecastScenarioRecId;

        if (hcmPositionForecastLastModified.RecId > 0)
        {
            ttsbegin;
            hcmPositionForecastLastModified.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultiplePositionsCostElementDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the start and end date of the budget cost element account lines in the <c>HcmPositionForecastBudgetAcctLine</c> table
    /// that are referenced by the record of <c>HcmBudgetPurposeTypeDetail</c> table .
    /// </summary>
    /// <param name="_budgetPurposeTypeDetailRecId">
    /// The record ID of the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <param name="_newCostElementStartDate">
    /// The new <c>EffectiveDate</c> date of the record <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <param name="_newCostElementEndDate">
    /// The <c>ExpirationDate</c> date of the record <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <param name="_oldCostElementStartDate">
    /// The old <c>EffectiveDate</c> date of the record <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <param name="_oldCostElementEndDate">
    /// The old <c>ExpirationDate</c> date of the record <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    public void updateMultiplePositionsCostElementDates(HcmBudgetPurposeTypeDetailRecId        _budgetPurposeTypeDetailRecId,
                                                               ValidFromDate                   _newCostElementStartDate,
                                                               ValidToDate                     _newCostElementEndDate,
							                                   ValidFromDate                   _oldCostElementStartDate,
							                                   ValidToDate                     _oldCostElementEndDate)
    {
        HcmPositionForecastCalcProcessLauncher positionForecastCalcProcessLaucher;
        HcmPositionForecastBudgetAcctLine positionForecastBudgetAcctLine;
        HcmPositionForecastScenario       positionForecastScenario;
        ValidToDate                            validFPBCEDateEnd;
        ValidFromDate                          validFPBCEDateStart;

        // Iterate all budget account lines that are referenced by the budget purpose type detail record.

        ttsbegin;

        while select forupdate BudgetPurposeTypeDetail, PositionForecastScenario, EffectiveDate, ExpirationDate
                from positionForecastBudgetAcctLine
                    where positionForecastBudgetAcctLine.BudgetPurposeTypeDetail == _budgetPurposeTypeDetailRecId
            join RecId, ActivationDateTime, RetirementDateTime, ForecastScenario  from  positionForecastScenario
                where positionForecastScenario.RecId == positionForecastBudgetAcctLine.PositionForecastScenario
        {
            validFPBCEDateStart = positionForecastScenario.getPositionForecastDateRangeStartDate();
            validFPBCEDateEnd = positionForecastScenario.getPositionForecastDateRangeEndDate();

            validFPBCEDateStart = max(validFPBCEDateStart, _newCostElementStartDate);
            validFPBCEDateEnd = min(validFPBCEDateEnd, _newCostElementEndDate);

            if (positionForecastBudgetAcctLine.ExpirationDate < validFPBCEDateStart
                || positionForecastBudgetAcctLine.EffectiveDate > validFPBCEDateEnd)
            {
                positionForecastBudgetAcctLine.delete();

                updatePositionSucessfullyApplied = true;
            }
            else
            {
                if (positionForecastBudgetAcctLine.EffectiveDate < validFPBCEDateStart ||
                    positionForecastBudgetAcctLine.EffectiveDate == _oldCostElementStartDate)
                {
                    positionForecastBudgetAcctLine.EffectiveDate = validFPBCEDateStart;
                    updatePositionSucessfullyApplied = true;
                }

                if (positionForecastBudgetAcctLine.ExpirationDate > validFPBCEDateEnd ||
                    positionForecastBudgetAcctLine.ExpirationDate == _oldCostElementEndDate)
                {
                    positionForecastBudgetAcctLine.ExpirationDate = validFPBCEDateEnd;
                    updatePositionSucessfullyApplied = true;
                }

                if (updatePositionSucessfullyApplied && positionForecastBudgetAcctLine.validateWrite())
                {
                    positionForecastBudgetAcctLine.update();
                }
            }

            if (updatePositionSucessfullyApplied)
            {
                this.addPositionSucessfullyApplied(positionForecastBudgetAcctLine.PositionForecastScenario);
            }
        }

        if (successfullyApplied)
        {
            positionForecastCalcProcessLaucher = HcmPositionForecastCalcProcessLauncher::newForecastCalcMultiplePositions(successfullyApplied);
            positionForecastCalcProcessLaucher.runPositionForecstCalculationProcess();
        }

        ttscommit;

        // Set the total number of selected Forecast positions
        this.parmTotalForecastPosition(successfullyApplied.elements());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an <c>HcmPositionForecastAssignCostElementForm</c> class instance.
    /// </summary>
    /// <param name="_menuItemName">
    /// Name of the MenuItem based on which child classes are initialised.
    /// </param>
    /// <returns>
    ///     A <c>HcmPositionForecastAssignCostElementForm</c> class instance.
    /// </returns>
    public static HcmPositionForecastAssignCostElement construct(MenuItemName _menuItemName)
    {
        HcmPositionForecastAssignCostElement positionForecastAssignCostElement;

        switch (_menuItemName)
        {
            case menuitemDisplayStr(HcmAssignToForecastPosition):
            case menuitemDisplayStr(HcmBudgetPurposeTypeDetailDateDialog):
            case menuitemDisplayStr(HcmPositionForecast):
                positionForecastAssignCostElement = new HcmPositionAssignCostElement_Assign();
                break;

            case menuitemDisplayStr(HcmUpdateToForecastPosition):
                positionForecastAssignCostElement = new HcmPositionAssignCostElement_Update();
                break;
        }

        return positionForecastAssignCostElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssignCostForMultiplePosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Constructs an <c>HcmPositionForecastAssignCostElement</c> class instance.
    /// </summary>
    /// <param name="_menuItemName">
    ///  The Name of the MenuItem based on which child classes are initialised.
    /// </param>
    /// <param name="_budgetPurposeType">
    ///  The <c>HcmBudgetPurposeType</c> table record.
    /// </param>
    /// <param name="_hcmTmpPositionForecastAssignCostElement">
    ///  The <c>HcmTmpPositionForecastAssignCostElement</c> table record.
    /// </param>
    /// <returns>
    ///  A <c>HcmPositionForecastAssignCostElement</c> class instance.
    /// </returns>
    public static HcmPositionForecastAssignCostElement newAssignCostForMultiplePosition(MenuItemName _menuItemName,
                                                                                            HcmBudgetPurposeType _budgetPurposeType,
                                                                                            HcmTmpPositionForecastAssignCostElement _hcmTmpPositionForecastAssignCostElement)

    {
        HcmPositionForecastAssignCostElement positionForecastAssignCostElement;

        positionForecastAssignCostElement = HcmPositionForecastAssignCostElement::construct(_menuItemName);

        positionForecastAssignCostElement.parmBudgetPurposeType( _budgetPurposeType);
        positionForecastAssignCostElement.parmTmpPositionForecastAssignCost(_hcmTmpPositionForecastAssignCostElement);

        // Set valid date ranges based on position forecast scenario
        positionForecastAssignCostElement.setValidDataRange(_hcmTmpPositionForecastAssignCostElement.HcmPositionForecastScenario);

        return positionForecastAssignCostElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssignCostFromCompByPosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Constructs an <c>HcmPositionForecastAssignCostElement</c> class instance.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record ID of the position forecast scenario in the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <param name="_compensationGroupId">
    /// The record ID of the Compensation group in the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </param>
    /// <returns>
    ///  A <c>HcmPositionForecastAssignCostElement</c> class instance.
    /// </returns>
    public static HcmPositionForecastAssignCostElement newAssignCostFromCompByPosition(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                                                                      HcmPositionForecastCompGroupRecId _compensationGroupId)
    {
        HcmPositionForecastAssignCostElement positionForecastAssignCostElement;
        HcmPositionForecastScenario hcmPositionForecastScenario;

        positionForecastAssignCostElement = new HcmPositionAssignCostElement_Assign();

        positionForecastAssignCostElement.parmNewPositionForecastScenarioId(_positionForecastScenarioRecId);
        positionForecastAssignCostElement.parmForecastCompGroupId(_compensationGroupId);

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);
        // Set valid date ranges based on position forecast scenario
        positionForecastAssignCostElement.setValidDataRange(_positionForecastScenarioRecId);

        return positionForecastAssignCostElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssignCostFromCompIncrease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>HcmPositionAssignCostElement_CompGrid</c> class instance.
    /// </summary>
    /// <param name="_positionForecastScenarioContainer">
    /// The container that contains all selected record Id of the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <returns>
    /// A <c>HcmPositionAssignCostElement_CompGrid</c> class instance.
    /// </returns>
    public static HcmPositionForecastAssignCostElement newAssignCostFromCompIncrease(container _positionForecastScenarioContainer)
    {
        HcmPositionAssignCostElement_CompGrid   positionForecastAssignCostElement = new HcmPositionAssignCostElement_CompGrid();

        positionForecastAssignCostElement.parmPositionForecastScenarioContainer(_positionForecastScenarioContainer);
        positionForecastAssignCostElement.parmIsCompensationIncrease(true);

        return positionForecastAssignCostElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssignCostFromLiveByPosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Constructs an <c>HcmPositionForecastAssignCostElement</c> class instance.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record ID of the position forecast scenario in the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <param name="_livePositionId">
    /// The record ID of the position in the <c>HcmPosition</c> table.
    /// </param>
    /// <returns>
    ///  A <c>HcmPositionForecastAssignCostElement</c> class instance.
    /// </returns>
    public static HcmPositionForecastAssignCostElement newAssignCostFromLiveByPosition(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                                                                      HcmPositionRecId _livePositionId)
    {
        HcmPositionForecastAssignCost_LivePos hcmPositionForecastAssignCost_LivePos;
        HcmPositionForecastScenario hcmPositionForecastScenario;

        hcmPositionForecastAssignCost_LivePos = new HcmPositionForecastAssignCost_LivePos();

        hcmPositionForecastAssignCost_LivePos.parmNewPositionForecastScenarioId(_positionForecastScenarioRecId);

        hcmPositionForecastAssignCost_LivePos.parmLivePositionId(_livePositionId);

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);

        // Set valid date ranges based on position forecast scenario

        hcmPositionForecastAssignCost_LivePos.setValidDataRange(_positionForecastScenarioRecId);

        return hcmPositionForecastAssignCost_LivePos;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssignEarningCostFromCompGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>HcmPositionForecastAssignCostElement</c> class instance.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record ID of the position forecast scenario in the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <param name="_compensationGroupId">
    /// The record ID of the Compensation group in the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </param>
    /// <returns>
    /// A <c>HcmPositionForecastAssignCostElement</c> class instance.
    /// </returns>
    public static HcmPositionForecastAssignCostElement newAssignEarningCostFromCompGroup(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                                                                      HcmPositionForecastCompGroupRecId _compensationGroupId)
    {
        HcmPositionAssignCostElement_CompGrid   positionForecastAssignCostElement;
        HcmPositionForecastScenario hcmPositionForecastScenario;

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);

        positionForecastAssignCostElement = new HcmPositionAssignCostElement_CompGrid();

        positionForecastAssignCostElement.parmNewPositionForecastScenarioId(_positionForecastScenarioRecId);
        positionForecastAssignCostElement.parmForecastCompGroupId(_compensationGroupId);
        positionForecastAssignCostElement.parmForecastCompGridId(hcmPositionForecastScenario.PositionForecastCompensationGrid);

        // Set valid date ranges based on position forecast scenario
        positionForecastAssignCostElement.setValidDataRange(_positionForecastScenarioRecId);

        return positionForecastAssignCostElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMassUpdateByPosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Constructs an <c>HcmPositionForecastAssignCostElement</c> class instance.
    /// </summary>
    /// <param name="_newForecastScenarioRecId">
    /// The record ID of the position forecast scenario in the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <param name="_tmpBudgetPurposeTypeContainer">
    /// The container for record IDs of the <c>HcmBudgetPurposeType</c> table.
    /// </param>
    /// <returns>
    ///  A <c>HcmPositionForecastAssignCostElement</c> class instance.
    /// </returns>
    ///
    public static HcmPositionForecastAssignCostElement newMassUpdateByPosition(HcmPositionForecastScenarioRecId _newForecastScenarioRecId,
                                                                                      container _tmpBudgetPurposeTypeContainer)
    {
        HcmPositionForecastAssignCostElement positionForecastAssignCostElement;
        HcmPositionForecastScenario hcmPositionForecastScenario;

        positionForecastAssignCostElement = new HcmPositionAssignCostElement_Assign();

        positionForecastAssignCostElement.parmNewPositionForecastScenarioId( _newForecastScenarioRecId);
        positionForecastAssignCostElement.parmMassUpdateNeeded(true);
        positionForecastAssignCostElement.parmTmpBudgetPurposeTypeContainer(_tmpBudgetPurposeTypeContainer);

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(_newForecastScenarioRecId);
        // Set valid date ranges based on position forecast scenario
        positionForecastAssignCostElement.setValidDataRange(_newForecastScenarioRecId);

        return positionForecastAssignCostElement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>