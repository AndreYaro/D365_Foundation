<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationPurchRFQCaseTableDataPersistence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationPurchRFQCaseTableDataPersistence</c> class persists data to <c>PurchRFQCaseTable</c>, etc.
/// </summary>
[TaxIntegrationDataPersistence(tableStr(PurchRFQCaseTable))]
public class TaxIntegrationPurchRFQCaseTableDataPersistence
    extends TaxIntegrationAbstractDataPersistenceTemplate
{
    protected PurchRFQCaseTable purchRFQCaseTable;
    protected PurchRFQCaseLine purchRFQCaseLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordPurchaseFlight::instance().isEnabled() && document.getLocalRecord())
        {
            purchRFQCaseTable = document.getLocalRecord();
            purchRFQCaseTable.selectForUpdate(true);
            return null;
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.purchRFQCaseTable)
                .forUpdate()
                .where(this.purchRFQCaseTable, fieldStr(PurchRFQCaseTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.purchRFQCaseLine)
            .forUpdate()
            .where(this.purchRFQCaseLine, fieldStr(PurchRFQCaseLine, RFQCaseId))
                .isEqualToLiteral(this.purchRFQCaseTable.RFQCaseId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .forUpdate()
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchRFQCaseTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchRFQCaseTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .forUpdate()
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchRFQCaseLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchRFQCaseLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line of the document.
    /// </summary>
    /// <returns>The current line of the document</returns>
    protected TaxIntegrationLineObject getLine()
    {
        TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.purchRFQCaseLine.TableId, this.purchRFQCaseLine.RecId);
        if (!document.checkLine(localId))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:LineOnDocumentNotFound", localId, document.getLocalId())));
            return null;
        }

        return document.getLine(localId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document.
    /// </summary>
    /// <returns>Always true.</returns>
    protected boolean saveDocument()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean saveLine(TaxIntegrationLineObject _line)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>