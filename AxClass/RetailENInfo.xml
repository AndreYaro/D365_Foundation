<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailENInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Retrieves the information about the retail event notification.
/// </summary>
abstract class RetailENInfo
{
    protected static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    RetailEventNotificationProfile      notificationProfile;
    RetailEventNotificationSetting      notificationSetting;

    // This map maps currency code to currency symbol and it is used as a cache.
    private static Map currencySymbolMap = new Map(Types::String, Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EventNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of event notification.
    /// </summary>
    /// <returns>
    /// Event notification type.
    /// </returns>
    public abstract RetailEventNotificationType EventNotificationType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a email with details.
    /// </summary>
    /// <returns>
    /// A container holding the email details which contains 5 elements: from address, to address, subject, email content and the sender name.
    /// </returns>
    [Replaceable]
    public container generateEmail()
    {
        return [this.getFromAddr(),
                this.getToAddr(),
                this.getMessageSubject(),
                this.parseEmailTemplate(),
                this.getSenderName()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emailid.
    /// </summary>
    /// <returns>
    /// Emailid of SysEmailId type.
    /// </returns>
    protected SysEmailId getEmailId()
    {
        return this.isNotificationEnabled() ? notificationSetting.EmailId : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromAddr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the from address.
    /// </summary>
    /// <returns>
    /// From address of SysEmailAddress type.
    /// </returns>
    private SysEmailAddress getFromAddr()
    {
        return SysEmailTable::find(this.getEmailId()).SenderAddr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSenderName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the email sender name
    /// </summary>
    /// <returns>
    /// Sender name of EmailProfileName type.
    /// </returns>
    private EmailProfileName getSenderName()
    {
        return SysEmailTable::find(this.getEmailId()).SenderName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message subject.
    /// </summary>
    /// <returns>
    /// String with the subject.
    /// </returns>
    protected abstract str getMessageSubject()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToAddr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the to address.
    /// </summary>
    /// <returns>
    /// To address of SysEmailAddress type.
    /// </returns>
    protected abstract SysEmailAddress getToAddr()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameterMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialses the parameter map.
    /// </summary>
    protected abstract void initParameterMap()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialses the notification settings.
    /// </summary>
    /// <param name="refRecId">
    /// Reference RecID.
    /// </param>
    public void initSetting(RefRecId refRecId)
    {
        RetailEventNotificationProfileId    profileId;

        profileId  = this.resolveENProfileId(refRecId);

        // No email notification profile found for profile id %1.
        var errorForInvalidProfileId = strFmt("@Retail:InvalidRetailEventNotificationProfileId", profileId);

        if (!profileId)
        {
            profileId = RetailParameters::find().EventNotificationProfileId;

            // No email notification profile found for profile id %1. To use this config, set a valid email notification profile in commerce parameters.
            errorForInvalidProfileId = strFmt("@Retail:InvalidRetailEventNotificationProfileIdInCommerceParameters", profileId);
        }

        notificationProfile = RetailEventNotificationProfile::find(profileId);

        if (!notificationProfile)
        {
            error(errorForInvalidProfileId);
        }

        select firstOnly notificationSetting
            where notificationSetting.EventNotificationType == this.EventNotificationType()
                && notificationSetting.EventNotificationProfile == notificationProfile.RecId;

        this.initParameterMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotificationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether notification is enabled.
    /// </summary>
    /// <returns>
    /// Boolean true if action is successful; else false.
    /// </returns>
    public boolean isNotificationEnabled()
    {
        return  notificationProfile &&
                notificationProfile.Active &&
                notificationSetting &&
                notificationSetting.Active;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsSalesOrderInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for sales order information.
    /// </summary>
    /// <returns>
    /// Boolean true if action is successful; else false.
    /// </returns>
    public boolean IsSalesOrderInfo()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
    public RefTableId parmRefTableId(RefTableId _refTableId)
    {
        return _refTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parse the email template.
    /// </summary>
    /// <returns>
    /// String value.
    /// </returns>
    protected abstract str parseEmailTemplate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveENProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the event notification profileId.
    /// </summary>
    /// <param name="refRecId">
    /// Reference RecID.
    /// </param>
    /// <returns>
    /// Retail event notification profileId.
    /// </returns>
    protected abstract RetailEventNotificationProfileId resolveENProfileId(RefRecId refRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructUninitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the new uninitialized instance of <c>RetailENInfo</c> class.
    /// </summary>
    /// <param name="_notificationType">
    /// Type of retail event notification.
    /// </param>
    /// <returns>
    /// Uninitialized instance of <c>RetailENInfo</c> class.
    /// </returns>
    protected static RetailENInfo constructUninitialized(RetailEventNotificationType _notificationType)
    {
        RetailENInfo      notificationInformation;

        switch (_notificationType)
        {
            case RetailEventNotificationType::OrderConfirmation:
                notificationInformation = new RetailOENInfo_OrderConfirm();
                break;
            case RetailEventNotificationType::OrderCreation:
                notificationInformation = new RetailOENInfo_OrderCreate();
                break;
            case RetailEventNotificationType::ReplacementOrderCreation:
                notificationInformation = new RetailOENinfo_ReplacementOrderCreate();
                break;
            case RetailEventNotificationType::PickingComplete:
                notificationInformation = new RetailOENInfo_PickingComplete();
                break;
            case RetailEventNotificationType::PackingComplete:
                notificationInformation = new RetailOENInfo_PackingComplete();
                break;
            case RetailEventNotificationType::PaymentFailed:
                notificationInformation = new RetailOENInfo_PaymentFailed();
                break;
            case RetailEventNotificationType::MCRIssueGiftCard:
                notificationInformation = new MCRRetailOENInfo_GiftCardIssue();
                break;
            case RetailEventNotificationType::MCRContinuityBill:
                notificationInformation = new MCRRetailOENInfo_ContinuityBill();
                break;
            case RetailEventNotificationType::MCRContinuityCharge:
                notificationInformation = new MCRRetailOENInfo_ContinuityCharge();
                break;
            case RetailEventNotificationType::MCRFTCCancellationNotice:
                notificationInformation = new MCRRetailOENInfo_FTCNotice(RetailEventNotificationType::MCRFTCCancellationNotice);
                break;
            case RetailEventNotificationType::MCRFTCFirstNotice:
                notificationInformation = new MCRRetailOENInfo_FTCNotice(RetailEventNotificationType::MCRFTCFirstNotice);
                break;
            case RetailEventNotificationType::MCRFTCSecondNotice:
                notificationInformation = new MCRRetailOENInfo_FTCNotice(RetailEventNotificationType::MCRFTCSecondNotice);
                break;
            case RetailEventNotificationType::MCRInstallmentBill:
                notificationInformation = new MCRRetailOENInfo_InstallmentBill();
                break;
            case RetailEventNotificationType::MCRInstallmentCharge:
                notificationInformation = new MCRRetailOENInfo_InstallmentCharge();
                break;
            case RetailEventNotificationType::MCRSalesOrderBill:
                notificationInformation = new MCRRetailOENInfo_SalesOrderBill();
                break;
            case RetailEventNotificationType::OrderReadyForPickup:
                notificationInformation = new RetailOENInfo_OrderReadyForPickup();
                break;
            case RetailEventNotificationType::Shipment:
                if (RetailOrdersFeatureControl::useOrderShippedEventNotification())
                {
                    notificationInformation = new RetailOENInfo_OrderShipped();
                }
                break;
            case RetailEventNotificationType::B2BProspectApproved:
                notificationInformation = new RetailB2BProspectENInfo_Approved();
                break;
            case RetailEventNotificationType::B2BProspectRejected:
                notificationInformation = new RetailB2BProspectENInfo_Rejected();
                break;
            case RetailEventNotificationType::OrderCancellation:
                notificationInformation = new RetailOENInfo_OrderCancel();
                break;
            case RetailEventNotificationType::OrderInvoiced:
                notificationInformation = new RetailOENInfo_OrderInvoiced();
                break;
            case RetailEventNotificationType::CustomerCreation:
                if (RetailCreateCustomerEmailNotificationCheckToggle::instance().isEnabled())
                {
                    notificationInformation = new RetailENInfo_CustomerCreated();
                }
                break;
            default:
                break;
        }

        return notificationInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialises the new instance of <c>RetailENInfo</c> class.
    /// </summary>
    /// <param name="_notificationType">
    /// Type of retail event notification.
    /// </param>
    /// <param name="_refRecId">
    /// Reference RecID.
    /// </param>
    /// <param name="_refTableId">
    /// Reference TableID.
    /// </param>
    /// <returns>
    /// Initialized instance of <c>RetailENInfo</c> class.
    /// </returns>
    /// <remarks>
    /// Use method <c>constructUninitialized</c> to handle extended enum values.
    /// </remarks>
    public static RetailENInfo construct(RetailEventNotificationType _notificationType, RefRecId _refRecId, RefTableId _refTableId = 0)
    {
        RetailENInfo notificationInformation = RetailEnInfo::constructUninitialized(_notificationType);

        if (notificationInformation)
        {
            notificationInformation.initSetting(_refRecId);
        }

        return notificationInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDatetimeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the format for data regarding date and time.
    /// </summary>
    /// <param name="transDate">
    /// Transdata value.
    /// </param>
    /// <param name="language">
    /// The languageId.
    /// </param>
    /// <returns>
    /// String conataing the format for date time.
    /// </returns>
    public static str formatDatetimeData(TransDate transDate, LanguageId language)
    {
        System.Globalization.CultureInfo    cultureInfo;
        System.DateTime                     o = transDate;
        str                                 result;

        try
        {
            try
            {
                cultureInfo = new System.Globalization.CultureInfo(language);
                result = o.ToString('d', cultureInfo);
            }
            catch
            {
                // Fall back to the company's LE language
                cultureInfo = new System.Globalization.CultureInfo(companyinfo::languageId());
                result = o.ToString('d', cultureInfo);
            }
        }
        catch
        {
            // Fall back to en-US if nothing else works
            cultureInfo = new System.Globalization.CultureInfo('en-US');
            result = o.ToString('d', cultureInfo);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatNumericData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the format for numeric data.
    /// </summary>
    /// <param name="amount">
    /// Current amount.
    /// </param>
    /// <param name="language">
    /// The languageId.
    /// </param>
    /// <returns>
    /// String containing the format for numeric data.
    /// </returns>
    public static str formatNumericData(AmountCur amount, LanguageId language)
    {
        return RetailENInfo::formatNumericDataV2(amount, language, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatNumericDataV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the format for numeric data.
    /// </summary>
    /// <param name="_amount">
    /// Current amount.
    /// </param>
    /// <param name="_language">
    /// The Language id of the specific culture info when it has otherwise, the company language id.
    /// </param>
    /// <param name="_currencySymbol">
    /// The Currency symbol of a country like $, € when it has, otherwise empty.
    /// </param>
    /// <returns>
    /// String containing the format for numeric data.
    /// </returns>
    internal static str formatNumericDataV2(AmountCur _amount, LanguageId _language, CurrencySymbol _currencySymbol)
    {
        System.Globalization.CultureInfo cultureInfo;
        System.Decimal amountAsDecimal = _amount;
        str result;

        try
        {
            try
            {
                if (_language != '')
                {
                    cultureInfo = new System.Globalization.CultureInfo(_language);
                }
                else
                {
                    cultureInfo = new System.Globalization.CultureInfo(CompanyInfo::languageId());
                }

                if (_currencySymbol)
                {
                    System.Globalization.NumberFormatInfo nfi = cultureInfo.NumberFormat;
                    nfi.CurrencySymbol = _currencySymbol;
                    result = amountAsDecimal.ToString('c', nfi);
                }
                else
                {
                    result = amountAsDecimal.ToString('c', cultureInfo);
                }
            }
            catch
            {
                // Fall back to the company's LE language.
                cultureInfo = new System.Globalization.CultureInfo(companyinfo::languageId());
                result = amountAsDecimal.ToString('c', cultureInfo);
            }
        }
        catch
        {
            // Fall back to en-US if nothing else works.
            cultureInfo = new System.Globalization.CultureInfo('en-US');
            result = amountAsDecimal.ToString('c', cultureInfo);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatQtyData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the format for quantity data.
    /// </summary>
    /// <param name="qty">
    /// Current quantity.
    /// </param>
    /// <param name="language">
    /// The languageId.
    /// </param>
    /// <param name = "unitId">
    /// The unit id.
    /// </param>
    /// <returns>
    /// String containing the format for quantity data.
    /// </returns>
    public static str formatQtyData(Qty qty, LanguageId language, UnitOfMeasureSymbol unitId)
    {
        System.Globalization.CultureInfo    cultureInfo;
        System.Decimal                      decimalQty = qty;
        str                                 result;

        try
        {
            try
            {
                cultureInfo = new System.Globalization.CultureInfo(language);
                result = strFmt("@Retail:RetailENInfoQtyAndUnit", decimalQty.ToString(cultureInfo), RetailENInfo::getUnitText(unitId, language));
            }
            catch
            {
                // Fall back to the company's LE language
                cultureInfo = new System.Globalization.CultureInfo(companyinfo::languageId());
                result = strFmt("@Retail:RetailENInfoQtyAndUnit", decimalQty.ToString(cultureInfo), RetailENInfo::getUnitText(unitId, companyinfo::languageId()));
            }
        }
        catch
        {
            // Fall back to en-US if nothing else works
            cultureInfo = new System.Globalization.CultureInfo('en-US');
            result = strFmt("@Retail:RetailENInfoQtyAndUnit", decimalQty.ToString(cultureInfo), RetailENInfo::getUnitText(unitId, 'en-US'));
        }

        return strRTrim(result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitText</Name>
				<Source><![CDATA[
    private static Description getUnitText(UnitOfMeasureSymbol unitId, LanguageId language)
    {
        UnitOfMeasure unitOfMeasure = UnitOfMeasure::findBySymbol(unitId);
        Description unitText = UnitOfMeasureTranslation::findByTranslation(unitOfMeasure.RecId, language).Description;

        if (unitText)
        {
            return unitText;
        }

        return unitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencySymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency symbol based on the currency code of sales order / Sales line.
    /// </summary>
    /// <param name = "_buffer">The buffer contains the currency code value.</param>
    /// <returns>Returns the currency symbol based on currency code.</returns>
    internal static CurrencySymbol getCurrencySymbol(Common _buffer)
    {
        CurrencySymbol currencySymbol;
        CurrencyCode currencyCode;
        RefRecId referenceId;
        Currency currency;

        switch (_buffer.TableId)
        {
            case tableNum(SalesTable):
                SalesTable salesTable = _buffer;
                currencyCode = salesTable.CurrencyCode;
                referenceId = salesTable.RecId;
                break;

            case tableNum(SalesLine):
                SalesLine salesLine = _buffer;
                currencyCode = salesLine.CurrencyCode;
                referenceId = salesLine.RecId;
                break;

            default:
                info(strFmt('Table id %1 not supported', _buffer.TableId));
                break;
        }

        if (currencySymbolMap.exists(currencyCode))
        {
            eventSource.EventWriteCurrencyCodeFound(referenceId, _buffer.TableId);
            return currencySymbolMap.lookup(currencyCode);
        }
        else
        {
            if (currencyCode != '')
            {
                System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                sw.Start();
                eventSource.EventWriteCurrencySymbolFindingStart(referenceId, _buffer.TableId);

                select firstOnly Symbol, RecId from currency
                    where currency.CurrencyCode == currencyCode;

                // Check if a record was found
                if (currency.RecId)
                {
                    // Retrieve the currency symbol from the currency table.
                    return currency.Symbol;
                }

                var cultureInfos = System.Globalization.CultureInfo::GetCultures(System.Globalization.CultureTypes::SpecificCultures);

                for (int i = 0; i < cultureInfos.Length; i++)
                {
                    System.Globalization.CultureInfo cultureInfo = cultureInfos.GetValue(i);

                    if (cultureInfo.Name.Length > 0)
                    {
                        System.Globalization.RegionInfo regionInfo = new System.Globalization.RegionInfo(cultureInfo.LCID);

                        if (regionInfo != null && (regionInfo.ISOCurrencySymbol == currencyCode))
                        {
                            currencySymbolMap.insert(currencyCode, regionInfo.CurrencySymbol);

                            return regionInfo.CurrencySymbol;
                        }
                    }
                }

                sw.Stop();
                eventSource.EventWriteCurrencySymbolFindingFinished(referenceId, _buffer.TableId, sw.ElapsedMilliseconds);
            }
            else
            {
                eventSource.EventWriteCurrencyCodeNotFound(referenceId, _buffer.TableId);
            }
        }

        return currencySymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatNumericDataInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency symbol based on the flight state.
    /// </summary>
    /// <param name = "_amount">Amount</param>
    /// <param name = "_language">The Language id of the specific culture info when it has otherwise the value initialized based on company language.</param>
    /// <param name = "_currencySymbol">The Currency symbol of a country like $, € and the default value is null or empty.</param>
    /// <returns>Returns the currency symbol.</returns>
    internal static CurrencySymbol formatNumericDataInternal(AmountCur _amount, LanguageId _language, CurrencySymbol _currencySymbol = '')
    {
        if (RetailENGetCurrencySymbolFromCultureToggle::instance().isEnabled())
        {
            return RetailENInfo::formatNumericDataV2(_amount, _language, _currencySymbol);
        }
        else
        {
            return RetailENInfo::formatNumericData(_amount, _language);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>