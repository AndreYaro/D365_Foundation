<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>pcProductModelDetailsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a controller class for the <c>PCProductModelDetails</c> form.
/// </summary>
public class pcProductModelDetailsController
{
    PCProductConfigurationModel productConfigurationModel;
    PCModifierFactory           modifierFactory;

    FormRun formRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        modifierFactory = PCModifierFactory::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openEditor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the editor
    /// </summary>
    /// <param name="_modal">
    /// Open the dialog in model mode or not
    /// </param>
    /// <returns>
    /// Returns the edited string.
    /// </returns>
    public str openEditor(boolean _modal = true)
    {
        Object formObject  = formRun as Object;
        formRun.run();
        if (_modal)
        {
            formRun.wait();
        }
        else
        {
            formRun.detach();
        }
        return formObject.parmEditableString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openEditorUsingFactoryData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open the editor with data found by PCModifierFactory
    /// </summary>
    /// <param name="_formStringControl">
    /// The FormStringContrl from which the editor is opened.
    /// </param>
    /// <param name="_selectedComponentXpath">
    /// The path to the component in scope
    /// </param>
    /// <param name="_constraintEditorOpenPurpose">
    /// The constraint mode in which the editor will work.
    /// </param>
    /// <param name="_priceMethod">
    /// The price method to use.
    /// </param>
    /// <param name="_selectedComponentPath">
    /// The path as a list of records from the model root to the component in scope.
    /// </param>
    public void openEditorUsingFactoryData(
        FormStringControl               _formStringControl,
        str                             _selectedComponentXpath,
        PCConstraintEditorOpenPurpose   _constraintEditorOpenPurpose,
        PCPriceMethod                   _priceMethod = PCPriceMethod::Cost,
        List                            _selectedComponentPath = null
        )
    {
        str                     result;
        PCExpressionConstraint  expression;
        Common                  record;
        boolean                 appendText;

        if (_formStringControl.dataSourceObject().leaveRecord(true))
        {
            record  = _formStringControl.dataSourceObject().cursor();
            expression = modifierFactory.findOrCreateModifierConstraint(record);
            this.setupEditor(expression.Expression, expression, fieldNum(PCExpressionConstraint, expression), _selectedComponentXpath, expression.RecId, _constraintEditorOpenPurpose, _priceMethod,  PCRuntimePriceModelInstance::construct(), _selectedComponentPath);
            result  = this.OpenEditor();
            expression.Expression = result;
            expression.update();

            // Get the string from editor into control without appending to what's already there
            appendText = false;
            _formStringControl.pasteText(result, appendText);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openEditorUsingStringControlData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open the editor with data associated with the FormStringControl.
    /// </summary>
    /// <param name="_formStringControl">
    /// The FormStringControl whose data the editor shall work on.
    /// </param>
    /// <param name="_selectedComponentXpath">
    /// The path to the component in scope
    /// </param>
    /// <param name="_constraintEditorOpenPurpose">
    /// The constraint mode in which the editor will work.
    /// </param>
    /// <param name="_priceMethod">
    /// The price method to use.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// Which of the price models for the constraint model should be used.
    /// </param>
    /// <param name="_selectedComponentPath">
    /// The path as a list of records from the model root to the component in scope.
    /// </param>
    public void openEditorUsingStringControlData(
        FormStringControl               _formStringControl,
        str                             _selectedComponentXpath,
        PCConstraintEditorOpenPurpose   _constraintEditorOpenPurpose,
        PCPriceMethod                   _priceMethod = PCPriceMethod::Cost,
        PCRuntimePriceModelInstance     _runtimePriceModelInstance  = PCRuntimePriceModelInstance::construct(),
        List                            _selectedComponentPath = null
        )
    {
        str             result;
        Common          record;
        Common          buffer;
        SysDictTable    dictTable;
        FieldId         targetFieldId = _formStringControl.dataField();
        RecId           recordId;

        if (_formStringControl.dataSourceObject().leaveRecord(true))
        {
            record    = _formStringControl.dataSourceObject().cursor();
            recordId  = record.RecId;
            result    = record.(targetFieldId);

            this.setupEditor(result, record, targetFieldId, _selectedComponentXpath, record.RecId, _constraintEditorOpenPurpose, _priceMethod, _runtimePriceModelInstance, _selectedComponentPath);
            result  = this.OpenEditor();

            if (formRun.closedOk())
            {
                ttsBegin;
                dictTable = new SysDictTable(record.TableId);
                buffer = dictTable.makeRecord();

                select firstOnly forupdate buffer where buffer.RecId == recordId;
                buffer.(targetFieldId) = result;

                buffer.update();
                _formStringControl.dataSourceObject().findRecord(buffer);
                _formStringControl.dataSourceObject().cursor().reread();
                _formStringControl.update();
                _formStringControl.dataSourceObject().reread();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductConfigurationModel</Name>
				<Source><![CDATA[
    public PCProductConfigurationModel parmProductConfigurationModel(PCProductConfigurationModel _productConfigurationModel = productConfigurationModel)
    {
        productConfigurationModel = _productConfigurationModel;

        return productConfigurationModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupEditor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set up the editor.
    /// </summary>
    /// <param name="_orginalExprStr">
    /// The original string values which the editor initially will display.
    /// </param>
    /// <param name="_record">
    /// The record that holds the string.
    /// </param>
    /// <param name="_targetFieldId">
    /// The original string values which the editor initially will display.
    /// </param>
    /// <param name="_selectedComponentXpath">
    /// The path to the component in scope.
    /// </param>
    /// <param name="_recId">
    /// The _recId of the record to be edited
    /// </param>
    /// <param name="_openPurpose">
    /// The constraint mode which the the editor will work.
    /// </param>
    /// <param name="_priceMethod">
    /// The price method which the the editor will use.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// Which of the price models for the constraint model should be used.
    /// </param>
    /// <param name="_selectedComponentPath">
    /// The path as a list of records from the model root to the component in scope.
    /// </param>
    public void setupEditor(
        str                             _orginalExprStr,
        Common                          _record,
        FieldId                         _targetFieldId,
        str                             _selectedComponentXpath,
        RefRecId                        _recId,
        PCConstraintEditorOpenPurpose   _openPurpose,
        PCPriceMethod                   _priceMethod = PCPriceMethod::Cost,
        PCRuntimePriceModelInstance     _runtimePriceModelInstance  = PCRuntimePriceModelInstance::construct(),
        List                            _selectedComponentPath = null
        )
    {
        Object formObject  ;
        PCClass pcClass = pcProductModelDetailsController::getCommonComponent(_selectedComponentPath);

        formRun     = PCModelingLibrary::loadForm(formStr(PCConstraintEditor), null, null, false);
        formObject  = formRun as Object;
        formObject.parmEditableString(_orginalExprStr);
        formObject.parmRecord(_record);
        formObject.parmTargetFieldId(_targetFieldId);
        formObject.parmModel(productConfigurationModel);
        formObject.parmSelectedComponent(pcClass);
        formObject.parmSelectedComponentXPath(this.getCommonComponentSelectedXPath(_selectedComponentPath, pcClass));
        formObject.parmRecId(_recId);
        formObject.parmOpenPurpose(_openPurpose);
        formObject.parmPriceMethod(_priceMethod);
        formObject.parmRuntimePriceModelInstance(_runtimePriceModelInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCProductModelDetailsController construct()
    {
        return new PCProductModelDetailsController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommonComponentSelectedXPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the path to the current selected Subcomponent from a component downwards into
    /// the tree structure. The component itself is not included in the path.
    /// </summary>
    /// <param name="_path">
    /// The path from the root of the model.
    /// </param>
    /// <param name="_currentTopComponent">
    /// The component from which the returned path should start.
    /// </param>
    /// <returns>
    /// A string containing the solver names of the path starting from but excluding _currentTopComponent.
    /// </returns>
    public str getCommonComponentSelectedXPath(List _path, PCClass _currentTopComponent)
    {
        str             XPath;
        ListEnumerator  le          = _path.getEnumerator();
        PCSubComponent  subComponent;
        boolean         goDeeper    = true;
        PCClass         pcClass;

        if (!_path || !_currentTopComponent)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        le.moveNext(); // root
        pcClass = le.current();
        if ( pcClass.RecId == _currentTopComponent.RecId )
        {
            // _currentTopComponent is top level
            goDeeper = false;
        }

        // Skip levels until _currentTopComponent
        while (goDeeper)
        {
            le.moveNext();
            subComponent = le.current();
            if ( PCSubComponent::find(subComponent.RecId).ChildComponentClass ==_currentTopComponent.RecId )
            {
                goDeeper = false;
            }
        }

        // Construct path below _currentTopComponent
        while (le.moveNext())
        {
            subComponent = le.current();
            if (xPath == '') // path starts without '/'
            {
                xPath =  subComponent.SolverName;
            }
            else
            {
                xPath +=  '/' + subComponent.SolverName;
            }
        }

        return xPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommonComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the component that needs to be used for the lowest level component to work
    /// </summary>
    /// <param name="_path">
    /// List of components from the model level to the subcomponent in question
    /// </param>
    /// <returns>
    /// The subcomponent that needs to be used for the lowest level component to work
    /// </returns>
    /// <remarks>
    /// When editing and validating constraints in a submodel the information from higher
    /// components is sometimes needed. This method returns the lowest possible component
    /// that must be used for all relevant information to be available.
    /// Specifically system table constraints defined in a higher component can determine the
    /// the possible values for attributes at the lower level. This is the case when the system
    /// table constraint maps to attributes in the lower level subcomponent.
    /// </remarks>
    public static PCClass getCommonComponent(List _path)
    {
        RecId                                       pcClassRecId;
        Common                                      pathNode;
        Common                                      nodeWithFocus;
        PCTableConstraint                           tableConstraint;
        PCComponentConstraint                       componentConstraint;
        PCDatabaseRelationConstraintDefinition      databaseRelationConstraintDefinition;
        PCTableConstraintColumnCategoryAttribute    tableConstraintColumnCategoryAttribute;
        EcoResCategoryAttribute                     categoryAttribute;
        PCSubComponentPath                          subComponentPath;
        PCSubComponentPathNode                      subComponentPathNode;
        ListEnumerator                              le;
        int                                         level;

        le  = _path.getEnumerator();
        while (le.moveNext())
        {
            nodeWithFocus = le.current();
        }

        if (_path.elements() == 1)
        {
            pcClassRecId = nodeWithFocus.RecId;
        }
        else
        {
            // Traverse components from path top and stop if a component has a system defined table constraint
            // that binds to an attribute in or below the last node
            level = 1;
            le  = _path.getEnumerator();
            while (le.moveNext())
            {
                pathNode = le.current();

                if (level == 1)
                {
                    pcClassRecId = pathNode.RecId;
                }
                else
                {
                    pcClassRecId = PCSubComponent::find(pathNode.RecId).ChildComponentClass;
                }

                if ( level >= _path.elements() )
                {
                    break;
                }

                // Find any system defined table constraints at the current level
                // that map to attributes in or below the nodeWithFocus
                select firstOnly RecId from tableConstraintColumnCategoryAttribute
                    exists join tableConstraint
                        where   tableConstraintColumnCategoryAttribute.TableConstraint == tableConstraint.RecId
                    exists join componentConstraint
                        where   tableConstraint.RecId == componentConstraint.Constraint &&
                                componentConstraint.ComponentClass == pcClassRecId  // Current level
                    exists join databaseRelationConstraintDefinition
                        where   tableConstraint.TableConstraintDefintion == databaseRelationConstraintDefinition.RecId // System defined table
                    exists join categoryAttribute
                        where   categoryAttribute.RecId == tableConstraintColumnCategoryAttribute.CategoryAttribute
                    exists join subComponentPath
                        where   subComponentPath.RecId == tableConstraintColumnCategoryAttribute.SubComponentPath
                    exists join subComponentPathNode
                        where   subComponentPathNode.SubComponentPath == subComponentPath.RecId &&
                                subComponentPathNode.SubComponent == nodeWithFocus.RecId;
                if (tableConstraintColumnCategoryAttribute.RecId != 0)
                {
                    // Break all the way out
                    return PCClass::find(pcClassRecId);
                }
                level++;
            }
        }

        return PCClass::find(pcClassRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>