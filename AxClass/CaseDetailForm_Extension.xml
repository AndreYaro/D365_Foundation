<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CaseDetailForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Code extensions for the <c>CaseDetailForm</c> class.
/// </summary>
[ExtensionOf(classStr(CaseDetailForm))]
public final class CaseDetailForm_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runEngChgCaseAssociateForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the <c>EngChgCaseAssociate</c> form providing a list of records to associate with the case that is picked.
    /// </summary>
    /// <param name="_records">
    /// The list of records to associate with the case.
    /// </param>
    /// <param name="_record">
    /// The selected record from the calling form.
    /// </param>
    public static void runEngChgCaseAssociateForm(List _records, Common _record)
    {
        xFormRun                formRun;
        IEngChgCaseAssociate    engChgCaseAssociate;
        Args            args = new Args();

        if (_records && _record)
        {
            args.name(formstr(EngChgCaseAssociate));
            args.record(_record);

            formRun = ClassFactory.formRunClass(args);
            formRun.init();

            engChgCaseAssociate = formRun as IEngChgCaseAssociate;

            if (engChgCaseAssociate)
            {
                // Provide the list of records that should be associated with the case.
                engChgCaseAssociate.parmCallerRecordsForAssociation(_records);
            }

            formRun.run();

            if (!formRun.closed())
            {
                formrun.wait();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpKATable</Name>
				<Source><![CDATA[
    /// <summary>
    /// A <c>CaseDetailBase</c> table buffer.
    /// </summary>
    /// <param name = "_caseDetail">A <c>CaseDetailBase</c> table buffer.</param>
    /// <returns>Populates records into the <c>TmpSmmKACaseRelation</c> temp table.</returns>
    public static TmpSmmKACaseRelation createTmpKATable(CaseDetailBase _caseDetail)
    {
        TmpSmmKACaseRelation    tmpSmmKACaseRelation;
        smmKACategoryRelation   smmKACategoryRelation;
        smmKACaseRelation       smmKACaseRelation;
        smmEncyclopediaItems    encyclopediaTable;
        smmKACaseActivity       caseActivity;
        Counter                 successSum, triedSum;
        smmKASuccessSum         successAdj, triedAdj;
        smmKASource             relationType;
        RefRecId                relationRecId;

        void updateValues()
        {
            caseActivity      = smmKACaseActivity::find(encyclopediaTable.ItemId,_caseDetail.RecId);
            successSum        = smmKACaseActivity::successSum(encyclopediaTable.ItemId, _caseDetail.CategoryRecId);
            triedSum          = smmKACaseActivity::triedSum(encyclopediaTable.ItemId, _caseDetail.CategoryRecId);

            tmpSmmKACaseRelation.clear();
            tmpSmmKACaseRelation.ItemId             = encyclopediaTable.ItemId;
            tmpSmmKACaseRelation.ItemName           = encyclopediaTable.ItemName;
            tmpSmmKACaseRelation.Type               = encyclopediaTable.Type;
            tmpSmmKACaseRelation.Tried              = caseActivity.Tried;
            tmpSmmKACaseRelation.Success            = caseActivity.Success;
            tmpSmmKACaseRelation.SumSuccess         = successSum;
            tmpSmmKACaseRelation.SumTried           = triedSum;
            tmpSmmKACaseRelation.AdjustmentTried    = triedAdj;
            tmpSmmKACaseRelation.AdjustmentSuccess  = successAdj;
            tmpSmmKACaseRelation.Relation           = relationType;
            tmpSmmKACaseRelation.RelationRecId      = relationRecId;

            if ((triedSum + triedAdj) != 0)
            {
                tmpSmmKACaseRelation.SuccessPercent = (successSum + successAdj) / (triedSum + triedAdj) * 100;
            }
            else
            {
                tmpSmmKACaseRelation.SuccessPercent = 0;
            }

            tmpSmmKACaseRelation.insert();
        }

        delete_from tmpSmmKACaseRelation;

        while select RecId, ItemId, AdjustmentSuccess, AdjustmentTried from smmKACategoryRelation
            where smmKACategoryRelation.CategoryRecId == _caseDetail.CategoryRecId
        {
            encyclopediaTable = smmEncyclopediaItems::find(smmKACategoryRelation.ItemId);
            successAdj        = smmKACategoryRelation.AdjustmentSuccess;
            triedAdj          = smmKACategoryRelation.AdjustmentTried;
            relationType      = smmKASource::Category;
            relationRecId     = smmKACategoryRelation.RecId;

            updateValues();
        }

        while select RecId, ItemId from smmKACaseRelation
            where smmKACaseRelation.CaseRecId == _caseDetail.RecId
        {
            encyclopediaTable = smmEncyclopediaItems::find(smmKACaseRelation.ItemId);
            successAdj        = 0;
            triedAdj          = 0;
            relationType      = smmKASource::Case;
            relationRecId     = smmKACaseRelation.RecId;

            updateValues();
        }

        if (!tmpSmmKACaseRelation)
        {
            select firstonly tmpSmmKACaseRelation;
        }

        return tmpSmmKACaseRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runEngChgCaseAddToLogForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the <c>EngChgCaseAddToLog</c> form providing
    /// a record to check association with the case that is picked.
    /// </summary>
    /// <param name="_record">
    /// The selected record from the calling form.
    /// </param>
    public static void runEngChgCaseAddToLogForm(Common _record)
    {
        xFormRun        formRun;
        Args            args = new Args();

        if (_record)
        {
            args.name(formstr(EngChgCaseAddToLog));
            args.record(_record);

            formRun = ClassFactory.formRunClass(args);
            formRun.init();
            formRun.run();

            if (!formRun.closed())
            {
                formrun.wait();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitResponsibilitiesEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>smmResponsibilitiesEmplTable</c> data source on the <c>CaseDetail</c> form.
    /// </summary>
    /// <param name = "_formDataSource">The <c>smmResponsibilitiesEmplTable</c> data source on the <c>CaseDetail</c> form.</param>
    /// <param name = "_caseDetail">A <c>CaseDetailBase</c> record buffer.</param>
    public void datasourceInitResponsibilitiesEmpl(FormDataSource _formDataSource, CaseDetailBase _caseDetail)
    {
        //
        // Cache the display methods
        //
        _formDataSource.cacheAddMethod(tableMethodStr(smmResponsibilitiesEmplTable, emplName));

        //
        // The query on any related datasource should only depend on the currently
        // active case. So, clear any automaticaly created dynalinks.
        //
        _formDataSource.query().dataSourceNo(1).clearDynalinks();

        //
        // Create a ranges for filtering on Case.
        //
        _formDataSource.query().dataSourceNo(1).addRange(fieldNum(smmResponsibilitiesEmplTable, RefTableId)).value(queryValue(tableNum(CaseDetailBase)));
        _formDataSource.query().dataSourceNo(1).addDynalink(fieldNum(smmResponsibilitiesEmplTable, RefRecId), _caseDetail, fieldNum(CaseDetailBase, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>engChgCaseAssociationCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if selected records and relations have any conflicting case association in the given case.
    /// </summary>
    /// <param name="_records">The list of selected records to check if associated in case.</param>
    /// <param name="_caseId">The case id to check associations for.</param>
    /// <returns>
    /// True if conflict in case association exist; otherwise false.
    /// </returns>
    public static boolean engChgCaseAssociationCheck(List _records, CaseRecId _caseId)
    {
        boolean             anyOfSelectedRecordsAssociated;
        boolean             anyOfSelectedRecordsNotAssociated;
        boolean             productFound;
        boolean             itemFound;
        Common              currentRecord;
        EcoResProduct       ecoResProduct;
        InventTable         inventTable;
        ListEnumerator      recordsEnumerator;

        if (_records && _caseId)
        {
            recordsEnumerator = _records.getEnumerator();
            while (recordsEnumerator.moveNext())
            {
                currentRecord = recordsEnumerator.current();

                // reading the Product / Item pair
                if (currentRecord.TableId == tableNum(EcoResProduct))
                {
                    ecoResProduct = currentRecord;
                    inventTable = InventTable::findByProduct(currentRecord.RecId);

                    productFound = caseAssociation::find(ecoResProduct, _caseId).RecId;
                    itemFound = caseAssociation::find(inventTable, _caseId).RecId;
                    // if either the product or the item or both is associated to case then save the result
                    if (productFound || itemFound)
                    {
                        anyOfSelectedRecordsAssociated = true;
                    }
                    else if (!productFound && !itemFound)
                    {
                        anyOfSelectedRecordsNotAssociated = true;
                    }
                }
                else if (currentRecord.TableId == tableNum(InventTable))
                {
                    inventTable = currentRecord;
                    ecoResProduct = EcoResProduct::find(inventTable.Product);
                    productFound = caseAssociation::find(ecoResProduct, _caseId).RecId;
                    itemFound = caseAssociation::find(inventTable, _caseId).RecId;
                    // if either the product or the item or both is associated to case then save the result
                    if (productFound || itemFound)
                    {
                        anyOfSelectedRecordsAssociated = true;
                    }
                    else if (!productFound && !itemFound)
                    {
                        anyOfSelectedRecordsNotAssociated = true;
                    }
                }
                // check if BOMTable or RouteTable and case association exists
                else if (currentRecord.TableId == tableNum(BOMTable)
                        || currentRecord.TableId == tableNum(RouteTable))
                {
                    if (caseAssociation::find(currentRecord, _caseId).RecId)
                    {
                        anyOfSelectedRecordsAssociated = true;
                    }
                    else
                    {
                        anyOfSelectedRecordsNotAssociated = true;
                    }
                }
                else
                {
                    break;
                }

                // if one record association is found and another record is not associated stop looping records and return true;
                if (anyOfSelectedRecordsAssociated && anyOfSelectedRecordsNotAssociated)
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEngineeringChangeCaseSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if selected CaseId exists and has a given category type and status.
    /// </summary>
    /// <param name="_caseId">
    /// The <c>CaseDetail</c> Id to be validated.
    /// </param>
    /// <param name="_callerRecordToCheckForAssociation">
    /// Caller record to check for association to a case.
    /// </param>
    /// <returns>
    /// True if CaseId meets requirements; otherwise, false.
    /// </returns>
    /// <remarks>
    /// - Case category type must be EngineeringChange
    /// - Case status must be InProcess or Planned
    /// </remarks>
    public static boolean validateEngineeringChangeCaseSelection(str _caseId, Common _callerRecordToCheckForAssociation = null)
    {
        CaseDetail      engChgCaseDetail = CaseDetail::find(_caseId);

        if (!engChgCaseDetail.RecId ||
           !CaseDetailForm::validateCaseSelection(engChgCaseDetail, CaseCategoryType::EngineeringChange,
                                                  [CaseStatus::InProcess, CaseStatus::Planned],
                                                  _callerRecordToCheckForAssociation))
        {
            return checkFailed("@SYS4009245");
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>