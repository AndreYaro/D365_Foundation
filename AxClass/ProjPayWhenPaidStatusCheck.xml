<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPayWhenPaidStatusCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjPayWhenPaidStatusCheck</c> is used for batch processing.
/// </summary>
class ProjPayWhenPaidStatusCheck
{
    private static ProjCustTransInvoiceTmpTable projCustTransInvoiceTmpTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateVendorPayablePayWhenPaidStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Asynchronous method to verify whether the transaction contains pay when paid status.
    /// </summary>
    /// <param name = "params">Container that contains the Guid for record id</param>
    public static void updateVendorPayablePayWhenPaidStatus(container params)
    {
        if (params == conNull())
        {
            return;
        }

        RecId recordId;
        boolean simulatePost;
        [recordId, simulatePost] = params;
        if (recordId)
        {
            boolean isContextRequired = simulatePost && ProjCustPaymentJournalSimulatePostingFlight::instance().isEnabled();

            using (ProjPayWhenPaidStatusContext context = isContextRequired ? ProjPayWhenPaidStatusContext::construct() : null)
            {
                if (context)
                {
                    context.parmSimulatePosting(simulatePost);
                }

                ProjPayWhenPaidStatusCheck::updatePayWhenPaidStatusBatch(recordId);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorPayablePayWhenPaidStatusV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Asynchronous method to verify whether the transaction contains pay when paid status.
    /// </summary>
    /// <param name = "_params">
    /// A container with the list of parameters used for updating pay when paid status.
    /// </param>
    public static void updateVendorPayablePayWhenPaidStatusV2(container _params)
    {
        if (_params == conNull())
        {
            return;
        }

        ttsbegin;
        int conIndex;
        for (conIndex = 1; conIndex <= conLen(_params); conIndex++)
        {
            container con = conPeek(_params, conIndex);
            RecId recId = conPeek(con, 1);
            boolean simulatePost = conPeek(con, 2);
            container packedProjCustTransInvoiceTmpTable = conPeek(con, 3);
            if (recId && packedProjCustTransInvoiceTmpTable)
            {
                delete_from projCustTransInvoiceTmpTable;

                SetIterator setRecordsIterator = new SetIterator(Set::create(packedProjCustTransInvoiceTmpTable));
                while (setRecordsIterator.more())
                {
                    projCustTransInvoiceTmpTable.data(setRecordsIterator.value());
                    projCustTransInvoiceTmpTable.insert();
                    setRecordsIterator.next();
                }

                ProjPayWhenPaidStatusCheck::updateVendorPayablePayWhenPaidStatus([recId, simulatePost]);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayWhenPaidStatusBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the pay when paid flag on vendor invoice or ledger journal transaction record
    /// associated to a project transaction posting record.
    /// </summary>
    /// <param name="_recId">
    /// A ProjTransPosting record Id.
    /// </param>
    public static void updatePayWhenPaidStatusBatch(RecId _recId)
    {
        LedgerJournalTrans_Project projLedgerJournalTrans;
        VendInvoiceTrans vendInvoiceTrans;
        ProjItemTrans projItemTrans;
        ProjEmplTrans projEmplTrans;
        ProjCostTrans projCostTrans;
        ProjTransPosting projTransPosting;

		if (_recId)
        {
            // Handle Pay when Paid
            ProjInvoiceStatus invoiceStatus = ProjInvoiceStatus::None;

            select firstonly projTransPosting where projTransPosting.RecId == _recId;
            if (projTransPosting)
            {
                switch (projTransPosting.ProjTransType)
                {
                    case ProjTransType::Item:
                        select vendInvoiceTrans where vendInvoiceTrans.IsPwp == NoYes::Yes &&
                                                    vendInvoiceTrans.ReadyForPayment == NoYesCombo::No
                            join projItemTrans where projItemTrans.VendInvoiceTransRecId == vendInvoiceTrans.RecId &&
                                                     projItemTrans.ProjTransId == projTransPosting.TransId;
                        if (vendInvoiceTrans)
                        {
                            invoiceStatus = projItemTrans.projInvoiceStatus();
                            if (invoiceStatus == ProjInvoiceStatus::FullyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::FullyInvoicedWithOnhold ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoicedWithOnhold)
                            {
                                boolean releaseForPayment = CustVoucher::isPWPReadyForPayment(projTransPosting.ProjTransType,
                                                                                      projTransPosting.TransId,
                                                                                      projTransPosting.ProjId,
                                                                                      vendInvoiceTrans.vendInvoiceJour().InvoiceAccount);
                                if (releaseForPayment)
                                {
                                    vendInvoiceTrans.selectForUpdate(true);
                                    vendInvoiceTrans.ReadyForPayment = NoYesCombo::Yes;
                                    vendInvoiceTrans.update();
                                }

                            }
                        }
                        break;

                    case ProjTransType::Hour:
                        select vendInvoiceTrans where vendInvoiceTrans.IsPwp == NoYes::Yes &&
                                                    vendInvoiceTrans.ReadyForPayment == NoYesCombo::No
                            join projEmplTrans where projEmplTrans.VendInvoiceTrans == vendInvoiceTrans.RecId &&
                                                     projEmplTrans.TransId == projTransPosting.TransId;
                        if (vendInvoiceTrans)
                        {
                            invoiceStatus = projEmplTrans.projInvoiceStatus();
                            if (invoiceStatus == ProjInvoiceStatus::FullyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::FullyInvoicedWithOnhold ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoicedWithOnhold)
                            {
                                boolean releaseForPayment = CustVoucher::isPWPReadyForPayment(projTransPosting.ProjTransType,
                                                                                      projTransPosting.TransId,
                                                                                      projTransPosting.ProjId,
                                                                                      vendInvoiceTrans.vendInvoiceJour().InvoiceAccount);
                                if (releaseForPayment)
                                {
                                    vendInvoiceTrans.selectForUpdate(true);
                                    vendInvoiceTrans.ReadyForPayment = NoYesCombo::Yes;
                                    vendInvoiceTrans.update();
                                }

                            }
                        }
                        break;

                    case ProjTransType::Cost:
                        // There are two sources of cost transactions from pay-when-paid perspective,
                        // invoice journal and purchase invoice.
                        select projLedgerJournalTrans where projLedgerJournalTrans.IsPwp == NoYes::Yes &&
                                                            projLedgerJournalTrans.ReadyForPayment == NoYesCombo::No
                            join projCostTrans where projCostTrans.TransId == projTransPosting.TransId &&
                                                     projCostTrans.LedgerJournalTrans == projLedgerJournalTrans.RefRecId;
                        if (projLedgerJournalTrans)
                        {
                            invoiceStatus = projCostTrans.projInvoiceStatus();
                            if (invoiceStatus == ProjInvoiceStatus::FullyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::FullyInvoicedWithOnhold ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoicedWithOnhold)
                            {
                                boolean releaseForPayment = CustVoucher::isPWPReadyForPayment(projTransPosting.ProjTransType,
                                                                                        projTransPosting.TransId,
                                                                                        projTransPosting.ProjId,
                                                                                        projLedgerJournalTrans.ledgerJournalTrans().findVendTable().AccountNum);
                                if (releaseForPayment)
                                {
                                    projLedgerJournalTrans.selectForUpdate(true);
                                    projLedgerJournalTrans.ReadyForPayment = NoYesCombo::Yes;
                                    projLedgerJournalTrans.update();
                                }
                            }
                        }
                        else
                        {
                            select vendInvoiceTrans where vendInvoiceTrans.IsPwp == NoYes::Yes &&
                                                      vendInvoiceTrans.ReadyForPayment == NoYesCombo::No
                                join projCostTrans where projCostTrans.VendInvoiceTrans == vendInvoiceTrans.RecId &&
                                                         projCostTrans.TransId == projTransPosting.TransId;
                    
                            if (vendInvoiceTrans)
                            {
                                invoiceStatus = projCostTrans.projInvoiceStatus();
                                if (invoiceStatus == ProjInvoiceStatus::FullyInvoiced ||
                                    invoiceStatus == ProjInvoiceStatus::FullyInvoicedWithOnhold ||
                                    invoiceStatus == ProjInvoiceStatus::PartiallyInvoiced ||
                                    invoiceStatus == ProjInvoiceStatus::PartiallyInvoicedWithOnhold)
                                {
                                    boolean releaseForPayment = CustVoucher::isPWPReadyForPayment(projTransPosting.ProjTransType,
                                                                                          projTransPosting.TransId,
                                                                                          projTransPosting.ProjId,
                                                                                          vendInvoiceTrans.vendInvoiceJour().InvoiceAccount);
                                    if (releaseForPayment)
                                    {
                                        vendInvoiceTrans.selectForUpdate(true);
                                        vendInvoiceTrans.ReadyForPayment = NoYesCombo::Yes;
                                        vendInvoiceTrans.update();
                                    }

                                }
                            }
                        }
                        break;

                    case ProjTransType::Revenue:
                        // This may be a retention release invoice, which may release the
                        // pwp-enabled transaction on the original invoice for payment.
                        // Since the same revenue trans contains the sum of the retained amount of multiple
                        // lines of the original invoice, we need to traverse each one of those lines

                        // Vendor Invoice - Item
                        while select vendInvoiceTrans where vendInvoiceTrans.IsPwp == NoYes::Yes &&
                                                            vendInvoiceTrans.ReadyForPayment == NoYesCombo::No
                            join projItemTrans where projItemTrans.VendInvoiceTransRecId == vendInvoiceTrans.RecId
                        {
                            invoiceStatus = projItemTrans.projInvoiceStatus();
                            if (invoiceStatus == ProjInvoiceStatus::FullyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::FullyInvoicedWithOnhold ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoicedWithOnhold)
                            {
                                boolean releaseForPayment = CustVoucher::isPWPReadyForPayment(projTransPosting.ProjTransType,
                                                                                      projTransPosting.TransId,
                                                                                      projTransPosting.ProjId,
                                                                                      vendInvoiceTrans.vendInvoiceJour().InvoiceAccount);
                                if (releaseForPayment)
                                {
                                    vendInvoiceTrans.selectForUpdate(true);
                                    vendInvoiceTrans.ReadyForPayment = NoYesCombo::Yes;
                                    vendInvoiceTrans.update();
                                }

                                }
                            }

                        // Vendor Invoice - Hours
                        while select vendInvoiceTrans where vendInvoiceTrans.IsPwp == NoYes::Yes &&
                                                            vendInvoiceTrans.ReadyForPayment == NoYesCombo::No
                            join projEmplTrans where projEmplTrans.VendInvoiceTrans == vendInvoiceTrans.RecId
                        {
                            invoiceStatus = projEmplTrans.projInvoiceStatus();
                            if (invoiceStatus == ProjInvoiceStatus::FullyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::FullyInvoicedWithOnhold ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoicedWithOnhold)
                            {
                                boolean releaseForPayment = CustVoucher::isPWPReadyForPayment(projTransPosting.ProjTransType,
                                                                                      projTransPosting.TransId,
                                                                                      projTransPosting.ProjId,
                                                                                      vendInvoiceTrans.vendInvoiceJour().InvoiceAccount);
                                if (releaseForPayment)
                                {
                                    vendInvoiceTrans.selectForUpdate(true);
                                    vendInvoiceTrans.ReadyForPayment = NoYesCombo::Yes;
                                    vendInvoiceTrans.update();
                                }

                            }
                        }
                
                        // Vendor Invoice - Expense
                        while select vendInvoiceTrans where vendInvoiceTrans.IsPwp == NoYes::Yes &&
                                                            vendInvoiceTrans.ReadyForPayment == NoYesCombo::No
                            join projCostTrans where projCostTrans.VendInvoiceTrans == vendInvoiceTrans.RecId
                        {
                            invoiceStatus = projCostTrans.projInvoiceStatus();
                            if (invoiceStatus == ProjInvoiceStatus::FullyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::FullyInvoicedWithOnhold ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoicedWithOnhold)
                            {
                                boolean releaseForPayment = CustVoucher::isPWPReadyForPayment(projTransPosting.ProjTransType,
                                                                                      projTransPosting.TransId,
                                                                                      projTransPosting.ProjId,
                                                                                      vendInvoiceTrans.vendInvoiceJour().InvoiceAccount);
                                if (releaseForPayment)
                                {
                                    vendInvoiceTrans.selectForUpdate(true);
                                    vendInvoiceTrans.ReadyForPayment = NoYesCombo::Yes;
                                    vendInvoiceTrans.update();
                                }

                                }
                            }

                        // Invoice Journal
                        while select projLedgerJournalTrans where projLedgerJournalTrans.IsPwp ==  NoYes::Yes &&
                                                                projLedgerJournalTrans.ReadyForPayment == NoYesCombo::No
                            join projCostTrans where projCostTrans.TransId == projTransPosting.TransId &&
                                                                projCostTrans.LedgerJournalTrans == projLedgerJournalTrans.RefRecId
                        {
                            invoiceStatus = projCostTrans.projInvoiceStatus();
                            if (invoiceStatus == ProjInvoiceStatus::FullyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::FullyInvoicedWithOnhold ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoiced ||
                                invoiceStatus == ProjInvoiceStatus::PartiallyInvoicedWithOnhold)
                            {
                                boolean releaseForPayment = CustVoucher::isPWPReadyForPayment(projTransPosting.ProjTransType,
                                                                                          projTransPosting.TransId,
                                                                                          projTransPosting.ProjId,
                                                                                          projLedgerJournalTrans.ledgerJournalTrans().findVendTable().AccountNum);
                                if (releaseForPayment)
                                {
                                    projLedgerJournalTrans.selectForUpdate(true);
                                    projLedgerJournalTrans.ReadyForPayment = NoYesCombo::Yes;
                                    projLedgerJournalTrans.update();
                                }
                            }
                        }
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPWPReadyForPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Pay when Paid threshold is met.
    /// </summary>
    /// <param name = "_TransType">
    /// Project transaction type.
    /// </param>
    /// <param name = "_projTransId">
    /// Project transaction ID.
    /// </param>
    /// <param name = "_projId">
    /// Project ID.
    /// </param>
    /// <param name = "_vendAccount">
    /// Vend account.
    /// </param>
    /// <returns>
    /// True if Pay when Paid threshold is met; otherwise false.
    /// </returns>
    public static boolean isPWPReadyForPayment(ProjTransType _TransType,
                                                ProjTransIdBase _projTransId,
                                                ProjId _projId,
                                                VendAccount _vendAccount)
    {
        boolean isPWPThresholdMet = false;
        PSAPercent pwpThreshold = ProjPWPVendorRetentionSetting::getPwpThresholdPercent(_projId,
                                                                                        true,
                                                                                        _vendAccount);
        Amountcur getSettledRetentionAmount(RefRecId _retentionReferenceId)
        {
            AmountCur settledRetentionAmount;

            if (_retentionReferenceId)
            {
                // If there's retention, we need to check if there's a retention release invoice
                // that has been posted and can have a settlement amount as well.
                CustTrans custTransRetRelease;
                ProjInvoiceRevenue projInvoiceRetRelease;
                ProjInvoiceJour projInvoiceJourRetRelease;
                ProjRevenueTransSale projRetentionTransSale;
                ProjRevenueTransSale projRetReleaseTransSale;

                select sum(SettleAmountCur) from custTransRetRelease
                exists join projInvoiceJourRetRelease where projInvoiceJourRetRelease.InvoiceAccount == custTransRetRelease.AccountNum &&
                                                            projInvoiceJourRetRelease.LedgerVoucher == custTransRetRelease.Voucher &&
                                                            projInvoiceJourRetRelease.InvoiceDate == custTransRetRelease.TransDate
                exists join projInvoiceRetRelease where projInvoiceRetRelease.ProjInvoiceId == projInvoiceJourRetRelease.ProjInvoiceId &&
                                                        projInvoiceRetRelease.InvoiceDate == projInvoiceJourRetRelease.InvoiceDate &&
                                                        projInvoiceRetRelease.IsReleased == true
                exists join projRetReleaseTransSale where projRetReleaseTransSale.TransId == projInvoiceRetRelease.TransId
                exists join projRetentionTransSale where projRetentionTransSale.RecId == _retentionReferenceId;

                settledRetentionAmount += custTransRetRelease.SettleAmountCur;
            }

            return settledRetentionAmount;
        }

        boolean unsettledDocumentExists = false;
        AmountCur totalSalesAmount;
        AmountCur totalPaidAmount;
        ProjInvoiceRevenue projInvoiceRetention;
        ProjInvoiceRevenueDetail  projInvoiceRetentionDetail;
        switch (_TransType)
        {
            case ProjTransType::Item:                
            case ProjTransType::Hour:
            case ProjTransType::Cost:
                while select projCustTransInvoiceTmpTable where projCustTransInvoiceTmpTable.ProjTransId == _projTransId
                {
                    totalSalesAmount += projCustTransInvoiceTmpTable.InvoiceAmount;
                    totalPaidAmount += projCustTransInvoiceTmpTable.SettleAmountCur;

                    // Test for documents which have not been settled
                    if (projCustTransInvoiceTmpTable.SettleAmountCur == 0)
                    {
                        unsettledDocumentExists = true;
                    }

                    // Retained amount
                    while select LineAmount, RefRecId from projInvoiceRetentionDetail
                            exists join projInvoiceRetention
                            where projInvoiceRetentionDetail.InvoiceRefRecId == projInvoiceRetention.RecId
                                && projInvoiceRetention.ProjInvoiceId == projCustTransInvoiceTmpTable.ProjInvoiceId
                                && projInvoiceRetention.InvoiceDate == projCustTransInvoiceTmpTable.TransDate
                                && projInvoiceRetention.IsRetained == NoYes::Yes
                    {
                        if (projInvoiceRetentionDetail.LineAmount != 0.00)
                        {
                            totalSalesAmount += projInvoiceRetentionDetail.LineAmount;

                            // If there's retention, we need to check if there's a retention release invoice
                            // that has been posted and can have a settlement amount as well.
                            totalPaidAmount += getSettledRetentionAmount(projInvoiceRetentionDetail.RefRecId);
                        }
                    }

                }
                break;
        }

        if (!unsettledDocumentExists && totalSalesAmount != 0.00 && (totalPaidAmount / totalSalesAmount * 100) >= pwpThreshold)
        {
            isPWPThresholdMet = true;
        }
        else
        {
            isPWPThresholdMet = false;
        }

        return isPWPThresholdMet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>