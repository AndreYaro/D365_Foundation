<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGECreateReportLines_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGECreateReportLines_W extends RunBase
{
    LedgerRRGEUpdateType_W     updateType;
    LedgerRRGRepCode_RU        reportId;
    LedgerRRGETemplateRecId_W  templateRecId;

    DialogField     dlgUpdateType;
    int             createdRecords;
    int             updatedRecords;

    private const int CurrentVersion  = 2;
    private const int Version1        = 1;
    private const int RetryNum        = 5;  //number of retries in catch(Exception::UpdateConflict) loop

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addFieldValue(extendedtypestr(LedgerRRGETemplateRecId_W), templateRecId).allowEdit(false);
        dialog.addFieldValue(extendedtypestr(LedgerRRGRepCode_RU), reportId).allowEdit(false);
        dialog.addFieldValue(extendedtypestr(Description), LedgerRRGReportTable_RU::findByRepCode(reportId).Description).allowEdit(false);
        dlgUpdateType = dialog.addFieldValue(enumstr(LedgerRRGEUpdateType_W), updateType);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        updateType = dlgUpdateType.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromArgs(Args _args)
    {
        LedgerRRGETemplates_W   template;
        LedgerRRGReportTable_RU reportTable;

        this.getLast();

        reportId      = '';
        templateRecId = 0;

        if (_args)
        {
            switch (_args.dataset())
            {
                case tablenum(LedgerRRGETemplates_W):
                    template      = _args.record();
                    reportId      = LedgerRRGReportTable_RU::find(template.LedgerRRGReportTable_RU).RepCode;
                    templateRecId = template.RecId;
                    break;

                case tablenum(LedgerRRGReportTable_RU):
                    reportTable   = _args.record();
                    reportId      = reportTable.RepCode;
                    templateRecId = reportTable.LedgerRRGETemplates_W;
                    break;

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, updateType, reportId, templateRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGRepCode_RU parmReportId(LedgerRRGRepCode_RU _reportId = reportId)
    {
        reportId = _reportId;
        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGETemplateRecId_W parmTemplateRecId(LedgerRRGETemplateRecId_W _templateRecId = templateRecId)
    {
        templateRecId = _templateRecId;

        return templateRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEUpdateType_W parmUpdateType(LedgerRRGEUpdateType_W _updateType = updateType)
    {
        updateType = _updateType;

        return updateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        setprefix(LedgerRRGECreateReportLines_W::description());

        if (! this.validate())
        {
            throw error("@SYS18738");
        }

        try
        {
            ttsbegin;

            this.updateReportLines();

            ttscommit;

            info(strfmt("@LedgerRRG:LedgerRRG_AddedAndUpdated", createdRecords, updatedRecords));
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, updateType, reportId, templateRecId] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportLines</Name>
				<Source><![CDATA[
    private void updateReportLines()
    {
        LedgerRRGESectionProperties_W   properties;
        LedgerRRGReportTable_RU         reportTable = LedgerRRGReportTable_RU::findByRepCode(reportId);
        LedgerRRGCellTable_RU           cellTable;

        while select properties
            where properties.LedgerRRGETemplates_W == templateRecId &&
                 !properties.Dynamic
        {
            select forupdate firstonly cellTable
                where cellTable.ReportRecId         == reportTable.RecId    &&
                      cellTable.PropertyRefRecId    == properties.RecId;

            cellTable.ReportRecId   = reportTable.RecId;
            cellTable.initFromSectionProperty(properties);

            if (cellTable)
            {
                if (updateType == LedgerRRGEUpdateType_W::Update)
                {
                    cellTable.updatePropertyOperation(true);
                    cellTable.update();
                    updatedRecords++;
                }
            }
            else
            {
                cellTable.insert();
                createdRecords++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        if (!LedgerRRGReportTable_RU::existRepCode(reportId))
        {
            ret = checkFailed(strfmt("@LedgerRRG:LedgerRRG_RepotNotExist", reportId));
        }

        if (!LedgerRRGETemplates_W::exist(templateRecId))
        {
            ret = checkFailed(strfmt("@LedgerRRG:LedgerRRG_NoDocumentTemplate", templateRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public server static LedgerRRGECreateReportLines_W construct()
    {
        return new LedgerRRGECreateReportLines_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@LedgerRRG:LedgerRRG_CreateLines";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerRRGECreateReportLines_W createReportLines = LedgerRRGECreateReportLines_W::construct();

        createReportLines.initFromArgs(_args);

        if (createReportLines.prompt())
        {
            createReportLines.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportCells</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static server void updateReportCells(LedgerRRGRepCode_RU _repCode)
    {
        LedgerRRGECreateReportLines_W updateReportCells = LedgerRRGECreateReportLines_W::construct();

        updateReportCells.parmReportId(_repCode);
        updateReportCells.parmTemplateRecId(LedgerRRGReportTable_RU::findByRepCode(_repCode).LedgerRRGETemplates_W);
        updateReportCells.parmUpdateType(LedgerRRGEUpdateType_W::Update);

        if(!updateReportCells.parmReportId() || !updateReportCells.parmTemplateRecId())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        updateReportCells.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>