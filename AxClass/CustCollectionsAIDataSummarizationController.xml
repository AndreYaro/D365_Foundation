<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsAIDataSummarizationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustCollectionsAIDataSummarizationController</c> class executes the collections AI data summarization tasks
/// </summary>
internal final class CustCollectionsAIDataSummarizationController extends SysOperationServiceController
{
    private ProcessExecutionSourceLink sourceLink;
    private ProcessScheduleWorkItem workItem;
    private const int MaximumRetries = 5;
    private const int backOffWaitMilliseconds = 500;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runDataSummarization</Name>
				<Source><![CDATA[
    internal void runDataSummarization(ProcessScheduleWorkItem _workItem)
    {
        workItem = _workItem;

        sourceLink = this.getSourceLink();

        if (CustAgingDetailSummary::hasCustAgingLegalEntityRecordsNotSummarized())
        {
            this.processCustAgingDetailSummary();
        }

        if (StatRepIntervalLineAsColumns::hasStatRepIntervalLineRecordsNotDefinedAsColumns())
        {
            this.processStatRepIntervalLineAsColumns();
        }

        this.updateSourceLinkForSuccess(literalStr('@AccountsReceivable:CustCollectionsAIDataSummarizationSuccess'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustAgingDetailSummary</Name>
				<Source><![CDATA[
    internal void processCustAgingDetailSummary()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;

        try
        {
            CustAgingDetailSummary::populateCustAgingDetailSummary();
        }
        catch (errorEx)
        {
            this.updateSourceLinkForFailure(literalStr('@AccountsReceivable:CustCollectionsAIDataDetailSummaryFailed'));

            throw;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStatRepIntervalLineAsColumns</Name>
				<Source><![CDATA[
    internal void processStatRepIntervalLineAsColumns()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;

        try
        {
            StatRepIntervalLineAsColumns::populateStatRepIntervalLineAsColumns();
        }
        catch (errorEx)
        {
            this.updateSourceLinkForFailure(literalStr('@AccountsReceivable:CustCollectionsAIStatRepIntervalLineSummarizationFailed'));

            throw;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceLink</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLink getSourceLink()
    {
        if (!sourceLink.RecId)
        {
            sourceLink = this.findOrCreateProcessExecutionSourceLink(this.createExecutionSourceLinkItem(ProcessExecutionSourceStatus::Warning));
        }

        return sourceLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateProcessExecutionSourceLink</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLink findOrCreateProcessExecutionSourceLink(ProcessExecutionSourceLinkItem _sourceLinkItem)
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;
                
        try
        {
            // First do a find to prevent an error on batch retries
            ProcessExecutionSourceLinkItem sourceLinkItem = ProcessExecutionSourceLink::findByExecutionIdAndSourceReference(_sourceLinkItem.parmExecutionId(), _sourceLinkItem.parmSourceTableId(), _sourceLinkItem.parmSourceRecId());

            if (sourceLinkItem == null)
            {
                sourceLink = ProcessExecutionSourceLink::writeSourceLinkItem(_sourceLinkItem);
            }
            else
            {
                sourceLink.selectForUpdate(true);

                // Find a source link record using data from the given source link item and the
                // source link table's natural key
                select firstonly sourceLink
                    where sourceLink.RefRecId == sourceLinkItem.parmSourceRecId()
                       && sourceLink.RefTableId == sourceLinkItem.parmSourceTableId()
                       && sourceLink.ExecutionId == sourceLinkItem.parmExecutionId()
                       && sourceLink.ProcessScheduleOccurrence == sourceLinkItem.parmProcessScheduleOccurrenceRecId()
                       && sourceLink.ProcessScheduleSeriesPattern == sourceLinkItem.parmProcessScheduleSeriesPatternRecId();
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (errorException)
        {
            throw;
        }
        
        return sourceLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExecutionSourceLinkItem</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLinkItem createExecutionSourceLinkItem(ProcessExecutionSourceStatus _status, RefTableID _sourceTableId = 0, RefRecId _sourceRecId = 0)
    {
        ProcessExecutionSourceLinkItem linkItem = ProcessExecutionSourceLinkItem::construct();

        linkItem.parmExecutionId(this.workItem.parmExecutionId());
        linkItem.parmExecutionSourceStatus(_status);
        linkItem.parmHeader("@AccountsReceivable:CustCollectionsAIDataSummarizationType");
        linkItem.parmMessage("@AccountsReceivable:CustCollectionsAIDataSummarizationExecuting");
        linkItem.parmProcessScheduleSeriesPatternRecId(this.workItem.parmProcessScheduleSeriesPatternRecId());
        linkItem.parmProcessScheduleOccurrenceRecId(this.workItem.parmProcessScheduleOccurrenceRecId());
        linkItem.parmSourceTableId(_sourceTableId);
        linkItem.parmSourceRecId(_sourceRecId);
        
        return linkItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLinkForFailure</Name>
				<Source><![CDATA[
    private void updateSourceLinkForFailure(LabelId _labelForErrorMessage)
    {
        this.updateSourceLink(_labelForErrorMessage, ProcessExecutionSourceStatus::Error, Exception::Error);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLinkForSuccess</Name>
				<Source><![CDATA[
    private void updateSourceLinkForSuccess(LabelId _labelForSuccessMessage)
    {
        this.updateSourceLink(_labelForSuccessMessage, ProcessExecutionSourceStatus::Success, Exception::Info);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLink</Name>
				<Source><![CDATA[
    private void updateSourceLink(LabelId _labelForMessage, ProcessExecutionSourceStatus _status, Exception _logLevel)
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        try
        {
            ProcessExecutionSourceLink::updateSourceLink(this.getSourceLink().RecId, this.createExecutionSourceLinkItem(_status, 0, 0));
            ProcessExecutionMessageLog::insertMessage(ProcessExecutionMessageLogItem::newFromProcessExecutionSourceLinkAndLabel(this.getSourceLink().RecId, _logLevel, _labelForMessage, conNull()));
        }
        catch (Exception::Deadlock)
        {
            int currentRetryCount = xSession::currentRetryCount();

            if (currentRetryCount <= CustCollectionsAIDataSummarizationController::MaximumRetries)
            {
                sleep(currentRetryCount * backOffWaitMilliseconds);

                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                int currentRetryCount = xSession::currentRetryCount();

                if (currentRetryCount <= CustCollectionsAIDataSummarizationController::MaximumRetries)
                {
                    sleep(currentRetryCount * backOffWaitMilliseconds);

                    retry;
                }
                else
                {
                    throw;
                }
            }
            else
            {
                throw;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (errorException)
        {
            throw;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@AccountsReceivable:CustCollectionsAIDataSummarizationType";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmShowDialog(boolean _showDialog = showDialog)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadFromSysLastValue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmLoadFromSysLastValue(boolean _loadFromSysLastValue = loadFromSysLastValue)
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>