<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeConfiguratorValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Responsible for validating product configuration models.
/// </summary>
class PCRuntimeConfiguratorValidate
{
    PCXmlSessionWriterModel xmlSessionWriterModel;

    PCProductConfigurationModel model;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public str name()
    {
        return classStr(PCRuntimeConfiguratorValidate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>PriceElement</c> for the price expression value with the given _recId
    /// </summary>
    /// <param name="_recId">
    /// recId of the record in <c>PCPriceExpressionValue</c> for which the <c>PriceElement</c> is returned
    /// </param>
    /// <returns>
    /// <c>PriceElement</c> value
    /// </returns>
    protected RefRecId findPriceElement(RefRecId _recId)
    {
        PCPriceExpressionValue  priceExpressionValue;

        select firstonly PriceElement from priceExpressionValue
                where   priceExpressionValue.RecId == _recId;

        return priceExpressionValue.PriceElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlForModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the runtime xml for the product configuration model passed as argument.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// A product configuration model.
    /// </param>
    /// <param name="_priceMethod">
    /// An enum telling what the price method is.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// Which of the price models for the constraint model should be used.
    /// </param>
    /// <returns>
    /// An xml representation of the runtime configuration model.
    /// </returns>
    protected str getXmlForModel(
        PCProductConfigurationModel _productConfigurationModel,
        PCPriceMethod               _priceMethod                = PCPriceMethod::Cost,
        PCRuntimePriceModelInstance _runtimePriceModelInstance  = PCRuntimePriceModelInstance::construct())
    {
        return PCRuntimeLibrary::getModelXML(_productConfigurationModel, null, _priceMethod, _runtimePriceModelInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        xmlSessionWriterModel = PCXmlSessionWriterModel::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXmlSessionWriter</Name>
				<Source><![CDATA[
    public PCXmlSessionWriterModel parmXmlSessionWriter(PCXmlSessionWriterModel _xmlSessionWriter = xmlSessionWriterModel)
    {
        xmlSessionWriterModel = _xmlSessionWriter;

        return xmlSessionWriterModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the field value.
    /// </summary>
    /// <param name="_record">
    /// A target record.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID of the expression.
    /// </param>
    /// <param name="_valueToRestore">
    /// The value to restore.
    /// </param>
    protected void restoreFieldValue(Common _record, FieldId _fieldId, str _valueToRestore)
    {
        _record.(_fieldId) = _valueToRestore;
        _record.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModelFromXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a product configuration model.
    /// </summary>
    /// <param name="_xmlModel">
    /// The xml model to be loaded into the configurator.
    /// </param>
    /// <param name="_xmlValidationFocus">
    /// An XML string containing information about the focus of the validation, if empty the whole model will be validated.
    /// </param>
    /// <remarks>
    /// Checks the correctness of the generated XML, the model structure, the default value assignments as well as if there exists a valid solution to the model.
    /// </remarks>
    public void validateModelFromXml(str _xmlModel, str _xmlValidationFocus = '')
    {
        Args    args = new Args();
        FormRun formRun;
        Object  formRunObject;

        args.record(model);
        args.caller(this);
        args.name(formStr(PCRuntimeConfiguratorValidate));

        formRun = classfactory.formRunClass(args);

        formRunObject = formRun;
        formRunObject.parmXmlModel(_xmlModel);
        formRunObject.parmXmlValidationFocus(_xmlValidationFocus);

        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validPrerequisitesForValidateModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the prerequisites for the validation is met.
    /// </summary>
    /// <param name="_subComponent">
    /// The product configuration subcomponent that will be used.
    /// </param>
    /// <param name="_refRecId">
    /// A record ID.
    /// </param>
    /// <returns>
    /// true if the prerequisites are met; false, otherwise.
    /// </returns>
    private boolean validPrerequisitesForValidateModified(PCClass _subComponent, RefRecId _refRecId)
    {
        boolean validPrerequisites = false;

        if (!_subComponent || !_refRecId )
        {
            validPrerequisites = false;
        }
        else
        {
            validPrerequisites = true;
        }
        return validPrerequisites;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCRuntimeConfiguratorValidate construct()
    {
        return new PCRuntimeConfiguratorValidate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlForSubModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the runtime xml for the product configuration model passed as argument.
    /// </summary>
    /// <param name="_subComponent">
    /// A product configuration submodel.
    /// </param>
    /// <param name="_priceMethod">
    /// An enum telling what the price method is.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// Which of the price models for the constraint model should be used.
    /// </param>
    /// <returns>
    /// An xml representation of the runtime configuration model.
    /// </returns>
    protected str getXmlForSubModel(
        PCClass                     _subComponent,
        PCPriceMethod               _priceMethod                = PCPriceMethod::Cost,
        PCRuntimePriceModelInstance _runtimePriceModelInstance  = PCRuntimePriceModelInstance::construct())
    {
        return PCRuntimeLibrary::getSubModelXML(_subComponent, _priceMethod, _runtimePriceModelInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCalculationInSub</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the calculation definition by using the solver and XML schema validations.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// The product configuration model that contains the constraint.
    /// </param>
    /// <param name="_subcomponent">
    /// The component in which to validate the calculation.
    /// </param>
    /// <param name="_calculation">
    /// The specified calculation to validate.
    /// </param>
    /// <remarks>
    /// Since the validation will focus on the specified calculation, validation will not fail because of
    /// other invalid calculations.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_productConfigurationModel" /> and <paramref name="_calculation" /> parameters are null or undefined.
    /// </exception>
    public void validateCalculationInSub(
        PCProductConfigurationModel _productConfigurationModel,
        PCClass                     _subcomponent,
        PCCalculation               _calculation
        )
    {
        #PC
        str focusOnThiscalculation;

        if (!_subcomponent || !_calculation)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        model = _productConfigurationModel;

        focusOnThiscalculation = strFmt(#calculationFocus, int642str(_calculation.RecId));

        this.validateModelFromXml(this.getXmlForSubModel(_subcomponent), focusOnThiscalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConstraintInSub</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the constraint definition by using the solver and XML schema validations.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// The product configuration model that contains the constraint.
    /// </param>
    /// <param name="_subComponent">
    /// The subcomponent that contains the constraint.
    /// </param>
    /// <param name="_constraint">
    /// The specified constraint to validate.
    /// </param>
    /// <remarks>
    /// Since the validation will focus on the specified constraint, validation will not fail because of
    /// other invalid constraints.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_productConfigurationModel" /> and <paramref name="_constraint" /> parameters are null or undefined.
    /// </exception>
    public void validateConstraintInSub(
        PCProductConfigurationModel _productConfigurationModel,
        PCClass                     _subComponent,
        PCConstraint                _constraint
        )
    {
        #PC
        str                         focusOnThisConstraint;

        if (!_productConfigurationModel || !_subComponent || !_constraint)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        model = _productConfigurationModel;

        focusOnThisConstraint = strFmt(#ConstraintFocus, int642str(_constraint.RecId));

        this.validateModelFromXml(this.getXmlForSubModel(_subComponent), focusOnThisConstraint);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExpressionModifiedSub</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a modified expression using the solver and XML schema validations.
    /// </summary>
    /// <param name="_subComponent">
    /// The product configuration subcomponent that contains the expression.
    /// </param>
    /// <param name="_record">
    /// The specified price calculation to validate.
    /// </param>
    /// <param name="_fieldId">
    /// The Id of the field in the record that contains the expression
    /// </param>
    /// <param name="_xmlId">
    /// The Id with which the expression is identified in the XML file
    /// </param>
    /// <param name="_expression">
    /// The new expression to validate
    /// </param>
    /// <param name="_expressionFocus">
    /// A string (format) that is used when telling the solver what expression in the complete model to validate
    /// </param>
    /// <param name="_priceMethod">
    /// The price calculation method to use
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// Which of the price models for the constraint model should be used.
    /// </param>
    /// <remarks>
    /// Since the validation will focus on the specified price condition, validation will not fail because of
    /// other invalid expressions or problems in the price expression.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_productConfigurationModel" /> and <paramref name="_priceCondition" /> parameters are null or undefined.
    /// </exception>
    private void validateExpressionModifiedSub(
        PCClass                         _subComponent,
        Common                          _record,
        FieldId                         _fieldId,
        refrecid                        _xmlId,
        PCConstraintExpression          _expression,
        str                             _expressionFocus,
        PCPriceMethod                   _priceMethod,
        PCRuntimePriceModelInstance     _runtimePriceModelInstance  = PCRuntimePriceModelInstance::construct()
        )
    {
        str                     expressionToFocusOn;
        str                     modifiedXmlModel;
        PCConstraintExpression  originalExpression;

        originalExpression = _record.(_fieldId);
        _record.(_fieldId) = _expression;
        _record.write();

        modifiedXmlModel = this.getXmlForSubModel(_subComponent, _priceMethod, _runtimePriceModelInstance);
        expressionToFocusOn = strFmt(_expressionFocus, int642str(_xmlId));
        this.validateModelFromXml(modifiedXmlModel, expressionToFocusOn);

        this.restoreFieldValue(_record, _fieldId, originalExpression);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifiedCalculationInSub</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the calculation definition by using the solver and XML schema validations.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// The product configuration model that contains the condition.
    /// </param>
    /// <param name="_subComponent">
    /// The product configuration submodel that contains the constraint.
    /// </param>
    /// <param name="_record">
    /// The specified calculation to validate.
    /// </param>
    /// <param name="_fieldId">
    /// The Id of the field in the record that contains the expression
    /// </param>
    /// <param name="_expression">
    /// The new expression to validate
    /// </param>
    /// <remarks>
    /// Since the validation will focus on the specified calculation, validation will not fail because of
    /// other invalid expressions.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_productConfigurationModel" /> and <paramref name="_record" />.RecId parameters are null or undefined.
    /// </exception>
    public void validateModifiedCalculationInSub(
        PCProductConfigurationModel _productConfigurationModel,
        PCClass                     _subComponent,
        Common                      _record,
        FieldId                     _fieldId,
        PCCalculationExpression     _expression
        )
    {
        #PC

        if (!this.validPrerequisitesForValidateModified(_subComponent, _record.RecId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        model = _productConfigurationModel;

        this.validateExpressionModifiedSub(
            _subcomponent,
            _record,
            _fieldId,
            _record.RecId,
            _expression,
            #CalculationFocus,
            PCPriceMethod::Cost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifiedExpressionConditionInSub</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the condition definition by using the solver and XML schema validations.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// The product configuration model that contains the condition.
    /// </param>
    /// <param name="_subComponent">
    /// The product configuration subcomponent that contains the expression.
    /// </param>
    /// <param name="_record">
    /// The specified condition to validate.
    /// </param>
    /// <param name="_fieldId">
    /// The Id of the field in the record that contains the expression.
    /// </param>
    /// <param name="_expression">
    /// The new expression to validate.
    /// </param>
    /// <remarks>
    /// Since the validation will focus on the specified condition, validation will not fail because of
    /// other invalid expressions.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_productConfigurationModel" />, <paramref name="_subComponent" />, and <paramref name="_record" />.
    /// RecId parameters are null or undefined.
    /// </exception>
    public void validateModifiedExpressionConditionInSub(
        PCProductConfigurationModel _productConfigurationModel,
        PCClass                     _subComponent,
        Common                      _record,
        FieldId                     _fieldId,
        PCConstraintExpression      _expression
        )
    {
        #PC

        if (!_productConfigurationModel || !this.validPrerequisitesForValidateModified(_subComponent, _record.RecId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        model = _productConfigurationModel;

        this.validateExpressionModifiedSub(
            _subcomponent,
            _record,
            _fieldId,
            _record.RecId,
            _expression,
            #ConstraintFocus,
            PCPriceMethod::Cost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifiedExpressionConstraintSub</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the constraint definition by using the solver and XML schema validations.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// The product configuration model that contains the constraint.
    /// </param>
    /// <param name="_subComponent">
    /// The product configuration submodel that contains the constraint.
    /// </param>
    /// <param name="_record">
    /// The specified constraint to validate.
    /// </param>
    /// <param name="_fieldId">
    /// The Id of the field in the record that contains the expression.
    /// </param>
    /// <param name="_expression">
    /// The new expression to validate.
    /// </param>
    /// <remarks>
    /// Since the validation will focus on the specified constraint, validation will not fail because of
    /// other invalid expressions.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_productConfigurationModel" /> and <paramref name="_record" />.RecId parameters are null or undefined.
    /// </exception>
    public void validateModifiedExpressionConstraintSub(
        PCProductConfigurationModel _productConfigurationModel,
        PCClass                     _subComponent,
        Common                      _record,
        FieldId                     _fieldId,
        PCConstraintExpression      _expression
        )
    {
        #PC

        if (!_productConfigurationModel || !this.validPrerequisitesForValidateModified(_subComponent, _record.RecId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        model = _productConfigurationModel;

        this.validateExpressionModifiedSub(
            _subcomponent,
            _record,
            _fieldId,
            _record.RecId,
            _expression,
            #ConstraintFocus,
            PCPriceMethod::Cost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifiedPriceConditionInSub</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the price condition definition by using the solver and XML schema validations.
    /// </summary>
    /// <param name="_subComponent">
    /// The product configuration submodel that contains the price condition.
    /// </param>
    /// <param name="_record">
    /// The specified price condition to validate.
    /// </param>
    /// <param name="_fieldId">
    /// The Id of the field in the record that contains the expression.
    /// </param>
    /// <param name="_expression">
    /// The new expression to validate
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// Which of the price models for the constraint model should be used.
    /// </param>
    /// <remarks>
    /// Since the validation will focus on the specified price condition, validation will not fail because of
    /// other invalid expressions or problems in the price expression.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_productConfigurationModel" /> and <paramref name="_record" />.RecId parameters are null or undefined.
    /// </exception>
    public void validateModifiedPriceConditionInSub(
        PCProductConfigurationModel     _productConfigurationModel,
        PCClass                         _subComponent,
        Common                          _record,
        FieldId                         _fieldId,
        PCPriceExpression               _expression,
        PCRuntimePriceModelInstance     _runtimePriceModelInstance  = PCRuntimePriceModelInstance::construct()
        )
    {
        #PC

        if (!this.validPrerequisitesForValidateModified(_subComponent,_record.RecId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        model = _productConfigurationModel;

        this.validateExpressionModifiedSub(
            _subcomponent,
            _record,
            _fieldId,
            _record.RecId,
            _expression,
            #PriceCalculationFocus,
            PCPriceMethod::Attribute,
            _runtimePriceModelInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModifiedPriceExpressionInSub</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the price expression definition by using the solver and XML schema validations.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// The product configuration model.
    /// </param>
    /// <param name="_subComponent">
    /// The product configuration submodel that contains the constraint.
    /// </param>
    /// <param name="_record">
    /// The specified price expression to validate.
    /// </param>
    /// <param name="_fieldId">
    /// The Id of the field in the record that contains the expression
    /// </param>
    /// <param name="_expression">
    /// The new expression to validate
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// Which of the price models for the constraint model should be used.
    /// </param>
    /// <remarks>
    /// Since the validation will focus on the specified price condition, validation will not fail because of
    /// other invalid expressions or problems in the price expression.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_productConfigurationModel" /> and <paramref name="_record" />.RecId parameters are null or undefined.
    /// </exception>
    public void validateModifiedPriceExpressionInSub(
        PCProductConfigurationModel     _productConfigurationModel,
        PCClass                         _subComponent,
        Common                          _record,
        FieldId                         _fieldId,
        PCPriceExpression               _expression,
        PCRuntimePriceModelInstance     _runtimePriceModelInstance  = PCRuntimePriceModelInstance::construct()
        )
    {
        #PC

        if (!this.validPrerequisitesForValidateModified(_subComponent,_record.RecId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        model = _productConfigurationModel;

        this.validateExpressionModifiedSub(
            _subcomponent,
            _record,
            _fieldId,
            this.findPriceElement(_record.RecId),
            _expression,
            #PriceCalculationFocus,
            PCPriceMethod::Attribute,
            _runtimePriceModelInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePriceCalculationInSub</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates one specific price expression.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// The product configuration model.
    /// </param>
    /// <param name="_subComponent">
    /// The product configuration submodel that contains the price expression.
    /// </param>
    /// <param name="_priceExpression">
    /// The price expression to validate
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// Which of the price models for the constraint model should be used.
    /// </param>
    /// <remarks>
    /// Since the validation will focus on the specified calculation, validation will not fail because of
    /// other invalid calculations.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_subComponent" /> and <paramref name="_priceExpression" />.RecId parameters are null or undefined.
    /// </exception>
    public void validatePriceCalculationInSub(
        PCProductConfigurationModel _productConfigurationModel,
        PCClass                     _subComponent,
        PCPriceExpressionRule       _priceExpression,
        PCRuntimePriceModelInstance _runtimePriceModelInstance  = PCRuntimePriceModelInstance::construct()
        )
    {
        #PC
        str focusOnThisPriceExpression;

        if (!_subComponent || !_priceExpression)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        model = _productConfigurationModel;

        focusOnThisPriceExpression = strFmt(#PriceCalculationFocus, int642str(_priceExpression.RecId));

        this.validateModelFromXml(this.getXmlForSubModel(_subcomponent, PCPriceMethod::Attribute, _runtimePriceModelInstance), focusOnThisPriceExpression);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a product configuration model or submodel.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// The product configuration model.
    /// </param>
    /// <param name="_subcomponent">
    /// The component in which to validate the calculation.
    /// </param>
    /// <param name="_priceMethod">
    /// An enum telling what the price method is.
    ///  - PCPriceMethod::Attribute means the price model is included in the validation.
    ///  - PCPriceMethod::Cost      means the price model is excluded from the validation.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// Which of the price models for the constraint model should be used.
    /// </param>
    /// <remarks>
    /// Checks the correctness of the generated XML, the model structure, the default value assignments as well as if there exists a valid solution to the model.
    /// </remarks>
    public void validateSubModel(
        PCProductConfigurationModel _productConfigurationModel,
        PCClass                     _subcomponent               = null,
        PCPriceMethod               _priceMethod                = PCPriceMethod::Cost,
        PCRuntimePriceModelInstance _runtimePriceModelInstance  = PCRuntimePriceModelInstance::construct())
    {
        PCContractNotNull::assertRecord(_productConfigurationModel, funcName());

        model = _productConfigurationModel;

        if ( ! _subcomponent )
        {
            this.validateModelFromXml(this.getXmlForModel(_productConfigurationModel, _priceMethod, _runtimePriceModelInstance));
        }
        else
        {
            this.validateModelFromXml(this.getXmlForSubModel(_subcomponent, _priceMethod, _runtimePriceModelInstance));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>