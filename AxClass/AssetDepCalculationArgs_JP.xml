<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepCalculationArgs_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to save a set of parameters that used to do Japan fixed asset depreciation calculation.
/// </summary>
class AssetDepCalculationArgs_JP
{
    AssetBookType assetBookType;
    AssetId assetId;
    AssetBookId assetBookId;
    AssetType assetType;
    AssetServiceLife assetServiceLife;
    AssetTransDate depreciationStartDate;  // Depreciation start date of the asset
    AssetTransDate startToDepreciateDate;  // Depreciation start date of current depreciation profile
    RoundOff roundOffDepreciation;
    RefRecId assetDepRateSet;
    AssetAccrualFiscal assetAccrualFiscal;
    AssetDepreciationYear assetDepreciationYear;

    AssetTableInterval assetTableInterval;
    AssetTransDate periodStart;
    AssetTransDate periodEnd;

    AssetAmount acquisitionPrice;
    AssetAmount amountToDepreciate;
    // Amount to depreciate summed up by trans, excluding scrap value
    AssetAmount assetAcquisitionValue;
    AssetAmount allowableLimitForAccumulatedDep;
    AssetAmount scrapValue;
    AssetAmount totalAmountToDepreciate;

    boolean                             useCatchUpMethod;
    AssetDepreciationCatchUpInterval_JP catchUpInterval;
    boolean                             isRecaptureDepreciation;

    // Cache of beginning balance of accumulated depreciation. It should not be directly used in sub classes.
    // The key must be the start day of period. The value is the beginning balance of the start day.
    // This cache is also used to aviod to access database for recatpure function.
    Map beginningBalanceOfAccumulatedDepCache;

    // Equally divided method related parameters
    AssetDepYearsEquallyDividedStartDate_JP equallyDividedStartDate;
    AssetDepYearsEquallyDividedStartDate_JP equallyDividedFormulaStartDate;
    AssetDepNumOfYearsEquallyDivided_JP numOfYearsEquallyDivided;
    AssetDepSmoothDepForTheYearOver95_JP smoothDepForTheYearOver95;

    boolean isCalculationStarted;
    boolean isDepreciationDone;
    boolean isNBVReachedZero;

    //For new declining balance method
    AssetAmount revisedAcquisitionCost;
    AssetTransDate revisedAcquisitionCostStartDate;

    //For old declining balance method
    AssetAmount netBookValueRest;

    //For special depreciation
    AssetSpecialDepAccountingMethod_JP specialDepAccountingMethod;
    AssetSpecialDepApplyNumOfPeriods_JP specialDepApplyNumOfPeriods;
    AssetSpecialDepBaseRatio_JP specialDepBaseRatio;
    AssetSpecialDepRate_JP specialDepRate;
    AssetSpecialDepAllocationUnit_JP specialDepAllocationUnit;
    AssetSpecialDepAllocationPeriods_JP specialDepAllocationPeriods;
    AssetTransDate specialDepReserveEndDate;
    AssetTransDate specialDepAllocationStartDate;
    boolean specialDepIsRecapture;
    RefTableId specialDepReserveTableId;
    RefRecId specialDepReserveRecId;
    AssetTransDate specialDepStartDate;
    AssetTransDate specialDepReserveDate;
    AssetTransDate specialDepLastAllocationDate;
    AssetTransDate specialDepAllocationEndDate;
    boolean isSpecialDepAllocation;

    // For depreciation profile change
    AssetDepreciationMethod prevDepMethod;
    AssetDepUseEquallyDividedFormula_JP isUseEquallyDividedFormula;
    boolean isDepProfileChanged;
    AssetTransDate profileChangeValidFrom;
    real percentageOfAssetValueAtProfileChange;

    // Asset document related
    AssetDocumentEntry_JP assetDocumentEntry;
    AssetDocumentType_JP assetDocumentType;
    AssetAmount documentAmountToDep;
    List assetAcceleratedDocumentEntries;

    // For reduction entry
    AssetDocumentReductionEntry_JP reductionEntryDocument;
    AssetReductionEntryProfile_JP reductionEntryProfile;
    boolean isReductionEntry;
    AssetReductionEntryMethod_JP reductionEntryMethod;
    AssetDepBookMap_JP reductionEntryDepBook;
    // List of reduction entry value of pre-adjustment and post adjustmenbt status.
    // Since the calculation is relied on accumulated depreciation, the value will be calculated when processing
    // the content is [ReductionEntryDate, Pre-adjustment Amount, Post-adjutsment Amount] which sort by ReductionEntryDate
    container reductionEntryContainer;
    Map reductionEntryBeginBalanceMap;

    // For accelerated depreciation
    AssetAmount totalCommonDepAmount;
    AssetAmount totalAcceleratedDepAmount;
    AssetAcceleratedDepGroupId_JP acceleratedDepGroupId;

    AssetAmount accumulatedExtraDepAmount;
    AssetAmount unPostedAccumulatedExtraDepAmount;
    AssetAmount unPostedAccumulatedSpecialDepAmount;
    int         assetIdlePeriods;
    boolean     isAssetIdlePeriodActive;
    private RefRecId fiscalCalendarRecId;

    //Variables to indicate whether affected by scrap value and net book value
    boolean isAffectedByScrapValue;
    boolean isAffectedByNetBookValue;

    // For over/under depreciation and pre-tax deduction
    // The owner of allowable limit cache
    anytype allowableLimitCacheOwner;
    boolean isForPreTaxDeduction;

    private TransDate startAdjustmentPeriodDate;
    private AssetServiceLife serviceLifeAfterAdjustment;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset document type for the current asset document.
    /// </summary>
    /// <returns>
    /// The asset document type.
    /// </returns>
    public AssetDocumentType_JP getAssetDocumentType()
    {
        return assetDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAcceleratedDepFromAssetDepCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the accelerated depreciation parameters from a instance of adapter class which implements <C>AssetDepTableMethodInterface_JP</C>.
    /// </summary>
    /// <param name="_assetDepTableMethodInterface">
    /// An instance of adapter class which implements <C>AssetDepTableMethodInterface_JP</C>.
    /// </param>
    public void initAcceleratedDepFromAssetDepCalc(AssetDepTableMethodInterface_JP _assetDepTableMethodInterface)
    {
        AssetBook assetBook;

        if (_assetDepTableMethodInterface.parmIsDepreciationAcceleratedProfile_JP())
        {
            assetBook.AssetId = assetId;
            assetBook.BookId = assetBookId;
            totalCommonDepAmount = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetBook, dateNull(), dateMax());
            totalAcceleratedDepAmount = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(assetBook, dateNull(), dateMax());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes asset document entry related attributes based on new asset document entry.
    /// </summary>
    protected void initAssetDocumentEntry()
    {
        AssetDocumentReductionEntry_JP reductionEntryDocumentLoc;
        if (assetDocumentEntry)
        {
            if (assetDocumentType == AssetDocumentType_JP::AssetReductionEntry_Reserve)
            {
                reductionEntryDocumentLoc =
                    AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(assetDocumentEntry.AssetId, assetDocumentEntry.BookId);
                revisedAcquisitionCost = 0;
                acquisitionPrice = reductionEntryDocumentLoc.parmReductionEntryPostAmount();
                depreciationStartDate = reductionEntryDepBook.AllocationStartDate;

                isReductionEntry = true;
                reductionEntryMethod  = AssetReductionEntryMethod_JP::Reserve;
                reductionEntryDocument = reductionEntryDocumentLoc;
                reductionEntryProfile = AssetReductionEntryProfile_JP::find(reductionEntryDocument.parmAssetDocumentTable().DocumentId);
            }
        }

        if (isReductionEntry)
        {
            isAffectedByScrapValue = false;
            isAffectedByNetBookValue = false;
        }
        if (assetDocumentType == AssetDocumentType_JP::AssetRetirementObligation)
        {
            isAffectedByNetBookValue = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initByCalculationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attributes by specific calculator and period
    /// </summary>
    /// <param name="calc">
    /// The japan depreciation calculation object
    /// </param>
    public void initByCalculationPeriod(AssetDepCalculation_JP  calc)
    {
        if (isReductionEntry)
        {
            this.initReductionEntryPeriod(calc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAssetDepBookMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters from a specified record of map <C>AssetDepBookMap_JP</C>.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A record of map <C>AssetDepBookMap_JP</C>.
    /// </param>
    /// <param name="_isDepreciationExtProfile">
    /// A Boolean value that indicates whether extraordinary depreciation profile is used, optional.
    /// </param>
    /// <param name="_isDepreciationAccProfile">
    /// A Boolean value that indicates whether accelerated depreciation profile is used, optional.
    /// </param>
    public void initFromAssetDepBookMap(
        AssetDepBookMap_JP  _assetDepBookMap,
        boolean _isDepreciationExtProfile = false,
        boolean _isDepreciationAccProfile = false)
    {
        AssetDepBookTableMap_JP assetDepBookTableMap;
        AssetDepreciationProfile assetDepreciationProfile;
        AssetTable assetTable;

        // Initialize the calculation is affected by netbookvalue andscrap value
        isAffectedByScrapValue = true;
        isAffectedByNetBookValue = true;

        // Init from AssetTable
        assetTable = AssetTable::find(_assetDepBookMap.AssetId);

        assetId = assetTable.AssetId;
        assetType = assetTable.AssetType;

        // Init from AssetBookTable / AssetDepBookTable
        assetDepBookTableMap = AssetDepBookTableMap_JP::find(
            AssetDepCalculationHelper_JP::determineAssetBookType(_assetDepBookMap.TableId),
            _assetDepBookMap.AssetBookId);

        assetBookId = assetDepBookTableMap.AssetBookId;
        roundOffDepreciation = assetDepBookTableMap.RoundOffDepreciation;
        netBookValueRest = assetDepBookTableMap.NetBookValueRest;
        this.parmFiscalCalendarRecId(assetDepBookTableMap.FiscalCalendar);

        // Init from AssetDepreciationProfile
        if (_isDepreciationAccProfile)
        {
            assetDepreciationProfile = _assetDepBookMap.AssetDepBookMap_JP::acceleratedDepreciationProfile();
        }
        else
        {
            assetDepreciationProfile = _assetDepBookMap.AssetGroupDepBookMap_JP::effectiveDepreciationProfile(_isDepreciationExtProfile);
        }
        numOfYearsEquallyDivided = assetDepreciationProfile.NumOfYearsEquallyDivided_JP;
        smoothDepForTheYearOver95 = assetDepreciationProfile.SmoothDepForTheYearOver95_JP;
        assetDepRateSet = assetDepreciationProfile.AssetDepRateSchedule_JP;
        assetDepreciationYear = assetDepreciationProfile.DepreciationYear;
        if (assetDepreciationYear == AssetDepreciationYear::Fiscal)
        {
            assetAccrualFiscal = assetDepreciationProfile.accrualFiscal(false, AssetAccrualFiscal::FiscalPeriod);
        }
        specialDepAccountingMethod = assetDepreciationProfile.SpecialDepAccountingMethod_JP;
        specialDepApplyNumOfPeriods = assetDepreciationProfile.SpecialDepApplyNumOfPeriods_JP;
        specialDepBaseRatio = assetDepreciationProfile.SpecialDepBaseRatio_JP;
        specialDepRate = assetDepreciationProfile.SpecialDepRate_JP;

        // Init from AssetBook / AssetDepBook
        assetBookType = AssetDepCalculationHelper_JP::determineAssetBookType(_assetDepBookMap.TableId);
        depreciationStartDate = _assetDepBookMap.DepreciationStartDate;
        startToDepreciateDate = _assetDepBookMap.DepreciationStartDate;
        assetServiceLife = _assetDepBookMap.ServiceLife;
        allowableLimitForAccumulatedDep = _assetDepBookMap.AssetDepBookMap_JP::calcAllowableLimitForAccumulatedDep_JP();
        equallyDividedStartDate = _assetDepBookMap.EquallyDividedStartDate;
        revisedAcquisitionCostStartDate = _assetDepBookMap.AssetRevisedAcquisitionCostStartDate;
        scrapValue = _assetDepBookMap.ScrapValue;

        if (_isDepreciationExtProfile || _isDepreciationAccProfile)
        {
            accumulatedExtraDepAmount = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(_assetDepBookMap, dateNull(), dateMax());
        }
        else
        {
            accumulatedExtraDepAmount = AssetDepTransMap_JP::calcAccumulatedExtraDepAmtMst(_assetDepBookMap, dateNull(), dateMax());
        }
        // Init special depreciation
        if (AssetDepreciationProfile::isSpecialDepMethod_JP(assetDepreciationProfile.Method)
            && assetDepreciationProfile.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::Reserve)
        {
            isAffectedByScrapValue = false;
            isAffectedByNetBookValue = false;
            specialDepAllocationUnit = _assetDepBookMap.SpecialDepAllocationUnit_JP;
            specialDepAllocationPeriods = _assetDepBookMap.SpecialDepAllocationPeriods_JP;
            [specialDepReserveEndDate, specialDepAllocationStartDate] = AssetSpecialDepHelper_JP::calcAllocationStartDate(_assetDepBookMap);
        }

        if (assetDepreciationProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP)
        {
            specialDepReserveEndDate = AssetSpecialDepHelper_JP::calcReserveEndDate(
            _assetDepBookMap,
            _assetDepBookMap.SpecialDepStartDate ? _assetDepBookMap.SpecialDepStartDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
        specialDepLastAllocationDate = _assetDepBookMap.SpecialDepLastAllocationDate;

        // Init special depreciation start date
        if (_assetDepBookMap.SpecialDepStartDate == dateNull())
        {
            specialDepStartDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            specialDepStartDate = _assetDepBookMap.SpecialDepStartDate;
        }

        totalAmountToDepreciate = AssetDepTransMap_JP::calcTotalAmountToDepreciate(_assetDepBookMap);
        // For ARO, the revised acquisition cost needs to be recalculated as the value saved in asset value model / depreciation book
        // is only for normal depreciation (The depreciation not include ARO)
        if (this.getAssetDocumentType() != AssetDocumentType_JP::AssetRetirementObligation)
        {
            revisedAcquisitionCost = _assetDepBookMap.AssetRevisedAcquisitionCost_JP;
        }
        acquisitionPrice = _assetDepBookMap.AcquisitionPrice;
        // Init reduction entry
        this.initReductionEntryFromAssetDepBookMap(_assetDepBookMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAssetDepCalculationInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters from a instance of adapter class which implements <C>AssetDepTableMethodInterface_JP</C>.
    /// </summary>
    /// <param name="_assetDepTableMethodInterface">
    /// A instance of adapter class which implements <C>AssetDepTableMethodInterface_JP</C>.
    /// </param>
    public void initFromAssetDepCalculationInterface(AssetDepTableMethodInterface_JP _assetDepTableMethodInterface)
    {
        if (_assetDepTableMethodInterface)
        {
            assetTableInterval = _assetDepTableMethodInterface.getAssetTableInterval();
            isRecaptureDepreciation = _assetDepTableMethodInterface.isRecaptureDepreciation();
            amountToDepreciate = _assetDepTableMethodInterface.getAmountToDepreciate();

            // Init for asset document related info
            assetDocumentEntry = _assetDepTableMethodInterface.getAssetDocumentEntry();
            assetDocumentType = assetDocumentEntry.type();

            this.initReductionEntryFromAssetDepCalc(_assetDepTableMethodInterface);

            // Init Acceleratde Depreciation
            this.initAcceleratedDepFromAssetDepCalc(_assetDepTableMethodInterface);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInterfaceByPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize arguments from <C>AssetDepTableMethodInterface_JP</C> per period
    /// </summary>
    /// <param name="_assetDepTableMethodInterface">
    /// Instance of <C>AssetDepTableMethodInterface_JP</C>
    /// </param>
    public void initFromInterfaceByPeriod(AssetDepTableMethodInterface_JP _assetDepTableMethodInterface)
    {
        AssetDepBookMap_JP      assetDepBookMap;
        container               acceleratedEntryContainer;
        AssetDocumentEntry_JP   acceleratedEntry;

        this.parmPeriodstart(_assetDepTableMethodInterface.parmPeriodStart_JP());
        this.parmPeriodEnd(_assetDepTableMethodInterface.parmPeriodEnd_JP());
        this.parmIsRecaptureDepreciation(_assetDepTableMethodInterface.isRecaptureDepreciation());
        this.parmAmountToDepreciate(_assetDepTableMethodInterface.getAmountToDepreciate());
        if (this.parmIsReductionEntry()
            && this.parmReductionEntryMethod() == AssetReductionEntryMethod_JP::Reserve)
        {
            assetDepBookMap = AssetDepBookMap_JP::findByAssetIdBookId(this.parmAssetId(), this.parmAssetBookId());
            this.parmAssetAcquisitionValue(AssetDepTransMap_JP::calcAmountToReserveAllocation(assetDepBookMap, this.parmPeriodEnd()));
        }
        else
        {
            // Calculation is done already in the call to getAmountToDepreciate() above.
            this.parmAssetAcquisitionValue(_assetDepTableMethodInterface.getAssetAcquisitionValue());
        }
        // For allocation of special depreciation reserve
        this.parmIsSpecialDepAllocation(_assetDepTableMethodInterface.isSpecialDepAllocationForReserve());
        if (this.parmIsSpecialDepAllocation())
        {
            this.parmSpecialDepAllocationStartDate(_assetDepTableMethodInterface.getSpecialDepAllocationStartDate());
            this.parmSpecialDepReserveRecId(_assetDepTableMethodInterface.parmSpecialDepReserveRecId());
            this.parmSpecialDepReserveTableId(_assetDepTableMethodInterface.parmSpecialDepReserveTableId());
            this.parmSpecialDepReserveDate(_assetDepTableMethodInterface.parmSpecialDepReserveDate());
        }

        // For accelerated depreciation
        if (_assetDepTableMethodInterface.parmIsDepreciationAcceleratedProfile_JP())
        {
            acceleratedEntryContainer   = _assetDepTableMethodInterface.parmAcceleratedEntryContainer_JP();

            if (FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
            {
                List assetDocumentEntries = AssetAcceleratedDepCalcManager_JP::getValidAcceleratedDocumentEntries(
                    acceleratedEntryContainer,
                    this.parmPeriodStart(),
                    this.parmPeriodEnd());

                if (assetDocumentEntries.elements() == 0)
                {
                    _assetDepTableMethodInterface.parmAssetDocumentEntry_JP(acceleratedEntry);
                    this.parmAssetDocumentEntry(acceleratedEntry);
                }
                else
                {
                    this.parmAssetAcceleratedDocumentEntries(assetDocumentEntries);
                    ListEnumerator le = assetDocumentEntries.getEnumerator();
                    while (le.moveNext())
                    {
                        AssetAcceleratedDocumentEntry_JP assetAcceleratedDocumentEntry = le.current();
                        assetAcceleratedDocumentEntry.parmIsInitialized(NoYes::Yes);

                        _assetDepTableMethodInterface.parmAssetDocumentEntry_JP(assetAcceleratedDocumentEntry.parmAssetDocumentEntry_JP());
                        this.parmAssetDocumentEntry(assetAcceleratedDocumentEntry.parmAssetDocumentEntry_JP());

                        AssetAcceleratedDepreciation_JPContext context = AssetAcceleratedDepreciation_JPContext::current();
                        if (context)
                        {
                            context.fromDate = assetAcceleratedDocumentEntry.parmValidFrom();
                            context.toDate = assetAcceleratedDocumentEntry.parmValidTo();
                        }

                        break;
                    }
                }
            }
            else
            {
                acceleratedEntry = AssetAcceleratedDepCalcManager_JP::GetValidAcceleratedDocumentEntry(
                    acceleratedEntryContainer,
                    _assetDepTableMethodInterface.parmPeriodEnd_JP());
                _assetDepTableMethodInterface.parmAssetDocumentEntry_JP(acceleratedEntry);
                this.parmAssetDocumentEntry(acceleratedEntry);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReductionEntryFromAssetDepBookMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the reduction entry parameters from a specified record of map <C>AssetDepBookMap_JP</C>.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A record of map <C>AssetDepBookMap_JP</C>.
    /// </param>
    /// <param name="_reserveInit">
    /// The reserve initialization flag from external.
    /// </param>
    public void initReductionEntryFromAssetDepBookMap(
        AssetDepBookMap_JP _assetDepBookMap,
        boolean _reserveInit         = false)
    {
        AssetDocumentReductionEntry_JP reductionEntryDocumentLoc =
            AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(_assetDepBookMap.AssetId, _assetDepBookMap.AssetBookId);

        reductionEntryDepBook = _assetDepBookMap;
        if (reductionEntryDocumentLoc != null
            && reductionEntryDocumentLoc.parmAssetDocumentTable().Type == AssetDocumentType_JP::AssetReductionEntry_DirectOff)
        {
            isReductionEntry = true;
            reductionEntryMethod   = AssetReductionEntryMethod_JP::DirectOff;
            reductionEntryDocument = reductionEntryDocumentLoc;
            reductionEntryProfile  = AssetReductionEntryProfile_JP::find(reductionEntryDocument.parmAssetDocumentTable().DocumentId);
        }
        else if (_reserveInit
            && reductionEntryDocumentLoc.parmAssetDocumentTable().Type == AssetDocumentType_JP::AssetReductionEntry_Reserve )
        {
            isReductionEntry = true;
            assetTableInterval = _assetDepBookMap.AssetDepBookMap_JP::assetTableInterval(_assetDepBookMap.DepreciationStartDate);
            TransDate firstDayOfAllocationYear = assetTableInterval.findFirstDayOfYear(_assetDepBookMap.AllocationStartDate);
            depreciationStartDate = max(firstDayOfAllocationYear, _assetDepBookMap.DepreciationStartDate);
            startToDepreciateDate = max(firstDayOfAllocationYear, _assetDepBookMap.DepreciationStartDate);
            reductionEntryMethod = AssetReductionEntryMethod_JP::Reserve;
            reductionEntryDocument = reductionEntryDocumentLoc;
            reductionEntryProfile = AssetReductionEntryProfile_JP::find(reductionEntryDocument.parmAssetDocumentTable().DocumentId);
            accumulatedExtraDepAmount = 0;
        }
        if (isReductionEntry)
        {
            isAffectedByScrapValue = false;
            isAffectedByNetBookValue = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReductionEntryFromAssetDepCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the reduction entry parameters from a instance of adapter class which implements <C>AssetDepTableMethodInterface_JP</C>.
    /// </summary>
    /// <param name="_assetDepTableMethodInterface">
    /// A instance of adapter class which implements <C>AssetDepTableMethodInterface_JP</C>.
    /// </param>
    public void initReductionEntryFromAssetDepCalc(AssetDepTableMethodInterface_JP _assetDepTableMethodInterface)
    {
        if ( isReductionEntry)
        {
            reductionEntryContainer = AssetReductionEntryManager_JP::getReductionEntryAcquisitionTransaction(reductionEntryDepBook,_assetDepTableMethodInterface.parmPeriodStart_JP()-1, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReductionEntryPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes reduction entry attributes by specific calculator and period
    /// </summary>
    /// <param name="calc">
    /// The japan depreciation calculation object
    /// </param>
    public void initReductionEntryPeriod(AssetDepCalculation_JP  calc)
    {
        AssetAmount yearBeginBalance;
        AssetAmount acqAmount;
        AssetAmount postReductionEntryAmount;
        AssetAmount preReductionEntryAmount;
        AssetAmount tmpReductionEntryAmount;
        AssetAmount adjustmentAmount;
        AssetTransDate transDate;
        container reductionEntryTransaction;

        Counter counter;
        Counter conLength;

        // update container
        acqAmount = reductionEntryDepBook.AcquisitionPrice;
        if (reductionEntryMethod == AssetReductionEntryMethod_JP::DirectOff)
        {
            acqAmount += reductionEntryDocument.parmReductionEntryPostAmount();
            yearBeginBalance = calc.getBeginningBalanceOfAccumulatedDep(calc.calcDepStartDateInCurYear());
        }
        else if (reductionEntryMethod == AssetReductionEntryMethod_JP::Reserve)
        {
            yearBeginBalance = calc.getReductionEntryOriginBeginningBalance(
                max(assetTableInterval.findFirstDayOfYear(periodStart),
                reductionEntryDepBook.DepreciationStartDate));
        }

        reductionEntryTransaction = AssetReductionEntryManager_JP::getReductionEntryTransactionByPeriod(reductionEntryDepBook, periodStart, periodEnd);
        conLength = conLen(reductionEntryTransaction);
        for (counter = 1; counter <= conLength; counter++)
        {
            [transDate, preReductionEntryAmount, postReductionEntryAmount] = conPeek(reductionEntryTransaction, counter);
            reductionEntryContainer += [[transDate, preReductionEntryAmount, postReductionEntryAmount]];
        }

        // update attributes
        [preReductionEntryAmount, postReductionEntryAmount] = calc.getReductionEntryAdjustmentAmounts(periodEnd);
        adjustmentAmount = preReductionEntryAmount - postReductionEntryAmount;

        if (reductionEntryMethod == AssetReductionEntryMethod_JP::DirectOff)
        {
            allowableLimitForAccumulatedDep = reductionEntryDepBook.AssetDepBookMap_JP::calcAllowableLimitForAccumulatedDep_JP(adjustmentAmount);
            if (reductionEntryDepBook.DepreciationConvention == AssetDepreciationConvention::None)
            {
                [tmpReductionEntryAmount, postReductionEntryAmount] = calc.getReductionEntryAdjustmentAmounts(periodStart - 1);
                amountToDepreciate -= (preReductionEntryAmount - postReductionEntryAmount);
            }
            else
            {
                amountToDepreciate -= adjustmentAmount;
            }
        }
        else if (reductionEntryMethod == AssetReductionEntryMethod_JP::Reserve)
        {
            acquisitionPrice = preReductionEntryAmount;
            allowableLimitForAccumulatedDep = reductionEntryDepBook.AssetDepBookMap_JP::calcAllowableLimitForAccuAllocation_JP(preReductionEntryAmount);
            amountToDepreciate += adjustmentAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForPreTaxDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if is for pre-tax deduction.
    /// </summary>
    /// <returns>
    /// Returns true if is, otherwise false
    /// </returns>
    public boolean isForPreTaxDeduction()
    {
        return isForPreTaxDeduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        beginningBalanceOfAccumulatedDepCache = new Map(Types::Date, Types::Real);
        reductionEntryBeginBalanceMap = new Map(Types::Date, Types::Real);
        assetAcceleratedDocumentEntries = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcceleratedDepGroupId</Name>
				<Source><![CDATA[
    public AssetAcceleratedDepGroupId_JP parmAcceleratedDepGroupId(AssetAcceleratedDepGroupId_JP _acceleratedDepGroupId = acceleratedDepGroupId)
    {
        acceleratedDepGroupId = _acceleratedDepGroupId;
        return acceleratedDepGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccumulatedExtraDepAmount</Name>
				<Source><![CDATA[
    public AssetAmount parmAccumulatedExtraDepAmount(AssetAmount _accumulatedExtraDepAmount = accumulatedExtraDepAmount)
    {
        accumulatedExtraDepAmount = _accumulatedExtraDepAmount;
        return accumulatedExtraDepAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnpostedAccumulatedExtraDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unposted amount for extra ordinary depreciation, it includes accelerated and special depreciation.
    /// </summary>
    /// <param name="_unPostedAccumulatedExtraDepAmount">
    /// Unposted amount for extra ordinary depreciation, it includes accelerated and special depreciation.
    /// </param>
    public AssetAmount parmUnpostedAccumulatedExtraDepAmount(AssetAmount _unPostedAccumulatedExtraDepAmount = unPostedAccumulatedExtraDepAmount)
    {
        unPostedAccumulatedExtraDepAmount = _unPostedAccumulatedExtraDepAmount;
        return unPostedAccumulatedExtraDepAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnpostedAccumulatedSpecialDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unposted amount for special depreciation.
    /// </summary>
    /// <param name="_unPostedAccumulatedSpecialDepAmount">
    /// Unposted amount for special depreciation.
    /// </param>
    public AssetAmount parmUnpostedAccumulatedSpecialDepAmount(AssetAmount _unPostedAccumulatedSpecialDepAmount = unPostedAccumulatedSpecialDepAmount)
    {
        unPostedAccumulatedSpecialDepAmount = _unPostedAccumulatedSpecialDepAmount;
        return unPostedAccumulatedSpecialDepAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcquisitionPrice</Name>
				<Source><![CDATA[
    public AssetAmount parmAcquisitionPrice(AssetAmount _acquisitionPrice = acquisitionPrice)
    {
        acquisitionPrice = _acquisitionPrice;
        return acquisitionPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowableLimitCacheOwner_JP</Name>
				<Source><![CDATA[
    public anytype parmAllowableLimitCacheOwner_JP(anytype _allowableLimitCacheOwner = allowableLimitCacheOwner)
    {
        allowableLimitCacheOwner = _allowableLimitCacheOwner;
        return allowableLimitCacheOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowableLimitForAccumulatedDep</Name>
				<Source><![CDATA[
    public AssetAmount parmAllowableLimitForAccumulatedDep(AssetAmount _allowableLimitForAccumulatedDep = allowableLimitForAccumulatedDep)
    {
        allowableLimitForAccumulatedDep = _allowableLimitForAccumulatedDep;
        return allowableLimitForAccumulatedDep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountToDepreciate</Name>
				<Source><![CDATA[
    public AssetAmount parmAmountToDepreciate(AssetAmount _amountToDepreciate = amountToDepreciate)
    {
        amountToDepreciate = _amountToDepreciate;
        return amountToDepreciate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetAccrualFiscal</Name>
				<Source><![CDATA[
    public AssetAccrualFiscal parmAssetAccrualFiscal(AssetAccrualFiscal _assetAccrualFiscal = assetAccrualFiscal)
    {
        assetAccrualFiscal = _assetAccrualFiscal;
        return assetAccrualFiscal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetAcquisitionValue</Name>
				<Source><![CDATA[
    public AssetAmount parmAssetAcquisitionValue(AssetAmount _assetAcquisitionValue = assetAcquisitionValue)
    {
        assetAcquisitionValue = _assetAcquisitionValue;
        return assetAcquisitionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBookId</Name>
				<Source><![CDATA[
    public AssetBookId parmAssetBookId(AssetBookId _assetBookId = assetBookId)
    {
        assetBookId = _assetBookId;
        return assetBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDepRateSet</Name>
				<Source><![CDATA[
    public RefRecId parmAssetDepRateSet(RefRecId _assetDepRateSet = assetDepRateSet)
    {
        assetDepRateSet = _assetDepRateSet;
        return assetDepRateSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDepreciationYear</Name>
				<Source><![CDATA[
    public AssetDepreciationYear parmAssetDepreciationYear(AssetDepreciationYear _assetDepreciationYear = assetDepreciationYear)
    {
        assetDepreciationYear = _assetDepreciationYear;
        return assetDepreciationYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetAcceleratedDocumentEntries</Name>
				<Source><![CDATA[
    public List parmAssetAcceleratedDocumentEntries(List _assetAcceleratedDocumentEntries = assetAcceleratedDocumentEntries)
    {
        assetAcceleratedDocumentEntries = _assetAcceleratedDocumentEntries;
        return assetAcceleratedDocumentEntries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentEntry</Name>
				<Source><![CDATA[
    public AssetDocumentEntry_JP parmAssetDocumentEntry(AssetDocumentEntry_JP _assetDocumentEntry = assetDocumentEntry)
    {
        boolean  needInit;

        if (_assetDocumentEntry.RecId != assetDocumentEntry.RecId)
        {
            assetDocumentType = _assetDocumentEntry.type();
            needInit = true;

            // For ARO, the revised acquisition cost needs to be recalculated as the value saved in asset value model / depreciation book
            // is only for normal depreciation (The depreciation not include ARO)
            if (assetDocumentType == AssetDocumentType_JP::AssetRetirementObligation)
            {
                revisedAcquisitionCost = 0;
            }

            if (assetDocumentType == AssetDocumentType_JP::AssetAcceleratedDepreciation)
            {
                acceleratedDepGroupId = _assetDocumentEntry.acceleratedDepGroup();
            }
        }

        assetDocumentEntry = _assetDocumentEntry;

        if (needInit)
        {
            this.initAssetDocumentEntry();
        }

        return assetDocumentEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    public AssetId parmAssetId(AssetId _assetId = assetId)
    {
        assetId = _assetId;
        return assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetServiceLife</Name>
				<Source><![CDATA[
    public AssetServiceLife parmAssetServiceLife(AssetServiceLife _assetServiceLife = assetServiceLife)
    {
        assetServiceLife = _assetServiceLife;
        return assetServiceLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTableInterval</Name>
				<Source><![CDATA[
    public AssetTableInterval parmAssetTableInterval(AssetTableInterval _assetTableInterval = assetTableInterval)
    {
        assetTableInterval = _assetTableInterval;
        return assetTableInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetType</Name>
				<Source><![CDATA[
    public AssetType parmAssetType(AssetType _assetType = assetType)
    {
        assetType = _assetType;
        return assetType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBeginningBalanceOfAccDepCache</Name>
				<Source><![CDATA[
    public Map parmBeginningBalanceOfAccDepCache(Map _beginningBalanceOfAccumulatedDepCache = beginningBalanceOfAccumulatedDepCache)
    {
        beginningBalanceOfAccumulatedDepCache = _beginningBalanceOfAccumulatedDepCache;
        return beginningBalanceOfAccumulatedDepCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDepreciationStartDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmDepreciationStartDate(AssetTransDate _depreciationStartDate = depreciationStartDate)
    {
        depreciationStartDate = _depreciationStartDate;
        return depreciationStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentAmountToDep</Name>
				<Source><![CDATA[
    public AssetAmount parmDocumentAmountToDep(AssetAmount _documentAmountToDep = documentAmountToDep)
    {
        documentAmountToDep = _documentAmountToDep;
        return documentAmountToDep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEquallyDividedFormulaStartDate</Name>
				<Source><![CDATA[
    public AssetDepYearsEquallyDividedStartDate_JP parmEquallyDividedFormulaStartDate(AssetDepYearsEquallyDividedStartDate_JP _equallyDividedFormulaStartDate = equallyDividedFormulaStartDate)
    {
        equallyDividedFormulaStartDate = _equallyDividedFormulaStartDate;
        return equallyDividedFormulaStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEquallyDividedStartDate</Name>
				<Source><![CDATA[
    public AssetDepYearsEquallyDividedStartDate_JP parmEquallyDividedStartDate(AssetDepYearsEquallyDividedStartDate_JP _equallyDividedStartDate = equallyDividedStartDate)
    {
        equallyDividedStartDate = _equallyDividedStartDate;
        return equallyDividedStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAffectedByNetBookValue</Name>
				<Source><![CDATA[
    public boolean parmIsAffectedByNetBookValue(boolean _isAffectedByNetBookValue = isAffectedByNetBookValue)
    {
        isAffectedByNetBookValue = _isAffectedByNetBookValue;

        return isAffectedByNetBookValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAffectedByScrapValue</Name>
				<Source><![CDATA[
    public boolean parmIsAffectedByScrapValue(boolean _isAffectedByScrapValue = isAffectedByScrapValue)
    {
        isAffectedByScrapValue = _isAffectedByScrapValue;

        return isAffectedByScrapValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCalculationStarted</Name>
				<Source><![CDATA[
    public boolean parmIsCalculationStarted(boolean _isCalculationStarted = isCalculationStarted)
    {
        isCalculationStarted = _isCalculationStarted;
        return isCalculationStarted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDepProfileChanged</Name>
				<Source><![CDATA[
    public boolean parmIsDepProfileChanged(boolean _isDepProfileChanged = isDepProfileChanged)
    {
        isDepProfileChanged = _isDepProfileChanged;
        return isDepProfileChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDepreciationDone</Name>
				<Source><![CDATA[
    public boolean parmIsDepreciationDone(boolean _isDepreciationDone = isDepreciationDone)
    {
        isDepreciationDone = _isDepreciationDone;
        return isDepreciationDone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsForPreTaxDeduction</Name>
				<Source><![CDATA[
    public boolean parmIsForPreTaxDeduction(boolean _isForPreTaxDeduction = isForPreTaxDeduction)
    {
        isForPreTaxDeduction = _isForPreTaxDeduction;
        return isForPreTaxDeduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsNBVReachedZero</Name>
				<Source><![CDATA[
    public boolean parmIsNBVReachedZero(boolean _isNBVReachedZero = isNBVReachedZero)
    {
        isNBVReachedZero = _isNBVReachedZero;

        return isNBVReachedZero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRecaptureDepreciation</Name>
				<Source><![CDATA[
    public boolean parmIsRecaptureDepreciation(boolean _isRecaptureDepreciation = isRecaptureDepreciation)
    {
        isRecaptureDepreciation = _isRecaptureDepreciation;

        return isRecaptureDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReductionEntry</Name>
				<Source><![CDATA[
    public boolean parmIsReductionEntry(boolean _isReductionEntry = isReductionEntry)
    {
        isReductionEntry = _isReductionEntry;
        return isReductionEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSpecialDepAllocation</Name>
				<Source><![CDATA[
    public boolean parmIsSpecialDepAllocation(boolean _isSpecialDepAllocation = isSpecialDepAllocation)
    {
        isSpecialDepAllocation = _isSpecialDepAllocation;
        return isSpecialDepAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsUseEquallyDividedFormula</Name>
				<Source><![CDATA[
    public AssetDepUseEquallyDividedFormula_JP parmIsUseEquallyDividedFormula(AssetDepUseEquallyDividedFormula_JP _isUseEquallyDividedFormula = isUseEquallyDividedFormula)
    {
        isUseEquallyDividedFormula = _isUseEquallyDividedFormula;
        return isUseEquallyDividedFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNetBookValueRest</Name>
				<Source><![CDATA[
    public AssetAmount parmNetBookValueRest(AssetAmount _netBookValueRest = netBookValueRest)
    {
        netBookValueRest = _netBookValueRest;

        return netBookValueRest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumOfYearsEquallyDivided</Name>
				<Source><![CDATA[
    public AssetDepNumOfYearsEquallyDivided_JP parmNumOfYearsEquallyDivided(AssetDepNumOfYearsEquallyDivided_JP _numOfYearsEquallyDivided = numOfYearsEquallyDivided)
    {
        numOfYearsEquallyDivided = _numOfYearsEquallyDivided;
        return numOfYearsEquallyDivided;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodEnd</Name>
				<Source><![CDATA[
    public AssetTransDate parmPeriodEnd(AssetTransDate _periodEnd = periodEnd)
    {
        periodEnd = _periodEnd;
        return periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodStart</Name>
				<Source><![CDATA[
    public AssetTransDate parmPeriodStart(AssetTransDate _periodStart = periodStart)
    {
        periodStart = _periodStart;
        return periodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevDepMethod</Name>
				<Source><![CDATA[
    public AssetDepreciationMethod parmPrevDepMethod(AssetDepreciationMethod _prevDepMethod = prevDepMethod)
    {
        prevDepMethod = _prevDepMethod;
        return prevDepMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReductionEntryBeginBalanceMap</Name>
				<Source><![CDATA[
    public Map parmReductionEntryBeginBalanceMap(Map _reductionEntryBeginBalanceMap = reductionEntryBeginBalanceMap)
    {
        reductionEntryBeginBalanceMap = _reductionEntryBeginBalanceMap;
        return reductionEntryBeginBalanceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReductionEntryContainer</Name>
				<Source><![CDATA[
    public container parmReductionEntryContainer(container _reductionEntryContainer = reductionEntryContainer)
    {
        reductionEntryContainer = _reductionEntryContainer;
        return reductionEntryContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReductionEntryDocument</Name>
				<Source><![CDATA[
    public AssetDocumentReductionEntry_JP parmReductionEntryDocument(AssetDocumentReductionEntry_JP _reductionEntryDocument = reductionEntryDocument)
    {
        reductionEntryDocument = _reductionEntryDocument;
        return reductionEntryDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReductionEntryMethod</Name>
				<Source><![CDATA[
    public AssetReductionEntryMethod_JP parmReductionEntryMethod(AssetReductionEntryMethod_JP _reductionEntryMethod = reductionEntryMethod)
    {
        reductionEntryMethod = _reductionEntryMethod;
        return reductionEntryMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReductionEntryProfile</Name>
				<Source><![CDATA[
    public AssetReductionEntryProfile_JP parmReductionEntryProfile(AssetReductionEntryProfile_JP _reductionEntryProfile = reductionEntryProfile)
    {
        reductionEntryProfile = _reductionEntryProfile;
        return reductionEntryProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRevisedAcquisitionCost</Name>
				<Source><![CDATA[
    public AssetAmount parmRevisedAcquisitionCost(AssetAmount _revisedAcquisitionCost = revisedAcquisitionCost)
    {
        revisedAcquisitionCost = _revisedAcquisitionCost;
        return revisedAcquisitionCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRevisedAcquisitionCostStartDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmRevisedAcquisitionCostStartDate(AssetTransDate _revisedAcquisitionCostStartDate = revisedAcquisitionCostStartDate)
    {
        revisedAcquisitionCostStartDate = _revisedAcquisitionCostStartDate;
        return revisedAcquisitionCostStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRoundOffDepreciation</Name>
				<Source><![CDATA[
    public RoundOff parmRoundOffDepreciation(RoundOff _roundOffDepreciation = roundOffDepreciation)
    {
        roundOffDepreciation = _roundOffDepreciation;
        return roundOffDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScrapValue</Name>
				<Source><![CDATA[
    public AssetAmount parmScrapValue(AssetAmount _scrapValue = scrapValue)
    {
        scrapValue = _scrapValue;

        return scrapValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSmoothDepForTheYearOver95_JP</Name>
				<Source><![CDATA[
    public AssetDepSmoothDepForTheYearOver95_JP parmSmoothDepForTheYearOver95_JP(AssetDepSmoothDepForTheYearOver95_JP _smoothDepForTheYearOver95 = smoothDepForTheYearOver95)
    {
        smoothDepForTheYearOver95 = _smoothDepForTheYearOver95;
        return smoothDepForTheYearOver95;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepAccountingMethod</Name>
				<Source><![CDATA[
    public AssetSpecialDepAccountingMethod_JP parmSpecialDepAccountingMethod(AssetSpecialDepAccountingMethod_JP _specialDepAccountingMethod = specialDepAccountingMethod)
    {
        specialDepAccountingMethod = _specialDepAccountingMethod;
        return specialDepAccountingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepAllocationEndDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmSpecialDepAllocationEndDate(AssetTransDate _specialDepAllocationEndDate = specialDepallocationEndDate)
    {
        specialDepallocationEndDate = _specialDepAllocationEndDate;
        return specialDepallocationEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepAllocationPeriods</Name>
				<Source><![CDATA[
    public AssetSpecialDepAllocationPeriods_JP parmSpecialDepAllocationPeriods(AssetSpecialDepAllocationPeriods_JP _specialDepAllocationPeriods = specialDepAllocationPeriods)
    {
        specialDepAllocationPeriods = _specialDepAllocationPeriods;
        return specialDepAllocationPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepAllocationStartDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmSpecialDepAllocationStartDate(AssetTransDate _specialDepAllocationStartDate = specialDepAllocationStartDate)
    {
        specialDepAllocationStartDate = _specialDepAllocationStartDate;
        return specialDepAllocationStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepAllocationUnit</Name>
				<Source><![CDATA[
    public AssetSpecialDepAllocationUnit_JP parmSpecialDepAllocationUnit(AssetSpecialDepAllocationUnit_JP _specialDepAllocationUnit = specialDepAllocationUnit)
    {
        specialDepAllocationUnit = _specialDepAllocationUnit;
        return specialDepAllocationUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepApplyNumOfPeriods</Name>
				<Source><![CDATA[
    public AssetSpecialDepApplyNumOfPeriods_JP parmSpecialDepApplyNumOfPeriods(AssetSpecialDepApplyNumOfPeriods_JP _specialDepApplyNumOfPeriods = specialDepApplyNumOfPeriods)
    {
        specialDepApplyNumOfPeriods = _specialDepApplyNumOfPeriods;
        return specialDepApplyNumOfPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepBaseRatio</Name>
				<Source><![CDATA[
    public AssetSpecialDepBaseRatio_JP parmSpecialDepBaseRatio(AssetSpecialDepBaseRatio_JP _specialDepBaseRatio = specialDepBaseRatio)
    {
        specialDepBaseRatio = _specialDepBaseRatio;
        return specialDepBaseRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepIsRecapture</Name>
				<Source><![CDATA[
    public boolean parmSpecialDepIsRecapture(boolean _isRecapture = specialDepIsRecapture)
    {
        specialDepIsRecapture = _isRecapture;
        return specialDepIsRecapture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepLastAllocationDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmSpecialDepLastAllocationDate(AssetTransDate _specialDepLastAllocationDate = specialDepLastAllocationDate)
    {
        specialDepLastAllocationDate = _specialDepLastAllocationDate;
        return specialDepLastAllocationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepRate</Name>
				<Source><![CDATA[
    public AssetSpecialDepRate_JP parmSpecialDepRate(AssetSpecialDepRate_JP _specialDepRate = specialDepRate)
    {
        specialDepRate = _specialDepRate;
        return specialDepRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmSpecialDepReserveDate(AssetTransDate _specialDepReservetDate = specialDepReserveDate)
    {
        specialDepReserveDate = _specialDepReservetDate;
        return specialDepReserveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveEndDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmSpecialDepReserveEndDate(AssetTransDate _specialDepReserveEndDate = specialDepReserveEndDate)
    {
        specialDepReserveEndDate = _specialDepReserveEndDate;
        return specialDepReserveEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveRecId</Name>
				<Source><![CDATA[
    public RefRecId parmSpecialDepReserveRecId(RefRecId _specialDepReserveRecId = specialDepReserveRecId)
    {
        specialDepReserveRecId = _specialDepReserveRecId;
        return specialDepReserveRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveTableId</Name>
				<Source><![CDATA[
    public RefTableId parmSpecialDepReserveTableId(RefTableId _specialDepReserveTableId = specialDepReserveTableId)
    {
        specialDepReserveTableId = _specialDepReserveTableId;
        return specialDepReserveTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepStartDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmSpecialDepStartDate(AssetTransDate _specialDepStartDate = specialDepStartDate)
    {
        specialDepStartDate = _specialDepStartDate;
        return specialDepStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartToDepreciateDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmStartToDepreciateDate(AssetTransDate _startToDepreciateDate = startToDepreciateDate)
    {
        startToDepreciateDate = _startToDepreciateDate;
        return startToDepreciateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalAcceleratedDepAmount</Name>
				<Source><![CDATA[
    public AssetAmount parmTotalAcceleratedDepAmount(AssetAmount _totalAcceleratedDepAmount = totalAcceleratedDepAmount)
    {
        totalAcceleratedDepAmount = _totalAcceleratedDepAmount;
        return totalAcceleratedDepAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalAmountToDepreciate</Name>
				<Source><![CDATA[
    public AssetAmount parmTotalAmountToDepreciate(AssetAmount _totalAmountToDepreciate = totalAmountToDepreciate)
    {
        totalAmountToDepreciate = _totalAmountToDepreciate;

        return totalAmountToDepreciate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalCommonDepAmount</Name>
				<Source><![CDATA[
    public AssetAmount parmTotalCommonDepAmount(AssetAmount _totalCommonDepAmount = totalCommonDepAmount)
    {
        totalCommonDepAmount = _totalCommonDepAmount;
        return totalCommonDepAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseCatchUpMethod</Name>
				<Source><![CDATA[
    public boolean parmUseCatchUpMethod(boolean _useCatchUpMethod = useCatchUpMethod)
    {
        useCatchUpMethod = _useCatchUpMethod;
        return useCatchUpMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatchUpInterval</Name>
				<Source><![CDATA[
    public AssetDepreciationCatchUpInterval_JP parmCatchUpInterval(AssetDepreciationCatchUpInterval_JP _catchUpInterval = catchUpInterval)
    {
        catchUpInterval = _catchUpInterval;
        return catchUpInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetIdlePeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Number of idle periods for an asset.
    /// </summary>
    /// <param name="_assetIdlePeriods">
    /// Number of idle periods for an asset.
    /// </param>
    public int parmAssetIdlePeriods(int _assetIdlePeriods = assetIdlePeriods)
    {
        assetIdlePeriods = _assetIdlePeriods;
        return assetIdlePeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAssetIdlePeriodActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Idle period active for an asset.
    /// </summary>
    /// <param name="_isAssetIdlePeriodActive">
    /// Idle period active for an asset.
    /// </param>
    public boolean parmIsAssetIdlePeriodActive(boolean _isAssetIdlePeriodActive = isAssetIdlePeriodActive)
    {
        isAssetIdlePeriodActive = _isAssetIdlePeriodActive;
        return isAssetIdlePeriodActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalCalendarRecId</Name>
				<Source><![CDATA[
    internal RefRecId parmFiscalCalendarRecId(RefRecId _fiscalCalendarRecId = fiscalCalendarRecId)
    {
        fiscalCalendarRecId = _fiscalCalendarRecId;
        return fiscalCalendarRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartAdjustmentPeriodDate</Name>
				<Source><![CDATA[
    internal TransDate parmStartAdjustmentPeriodDate(TransDate _startAdjustmentPeriodDate = startAdjustmentPeriodDate)
    {
        startAdjustmentPeriodDate = _startAdjustmentPeriodDate;
        return startAdjustmentPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceLifeAfterAdjustment</Name>
				<Source><![CDATA[
    internal AssetServiceLife parmServiceLifeAfterAdjustment(AssetServiceLife _serviceLifeAfterAdjustment = serviceLifeAfterAdjustment)
    {
        serviceLifeAfterAdjustment = _serviceLifeAfterAdjustment;
        return serviceLifeAfterAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProfileChangeValidFrom</Name>
				<Source><![CDATA[
    internal AssetTransDate parmProfileChangeValidFrom(AssetTransDate _profileChangeValidFrom = profileChangeValidFrom)
    {
        profileChangeValidFrom = _profileChangeValidFrom;
        return profileChangeValidFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPercentageOfAssetValueAtProfileChange</Name>
				<Source><![CDATA[
    internal real parmPercentageOfAssetValueAtProfileChange(real _percentageOfAssetValueAtProfileChange = percentageOfAssetValueAtProfileChange)
    {
        percentageOfAssetValueAtProfileChange = _percentageOfAssetValueAtProfileChange;
        return percentageOfAssetValueAtProfileChange;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>