<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUOMStructureCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSUOMStructureCreator</c> class is used to create UOM structure.
/// </summary>
public abstract class WHSUOMStructureCreator
{
    private boolean createContainerUOM = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSUOMStructureCreator</c> class.
    /// </summary>
    /// <param name = "_common">
    /// <c>Common</c> buffer used for this instance of the <c>WHSUOMStructureCreator</c> class.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSUOMStructureCreator</c> class.
    /// </returns>
    public static WHSUOMStructureCreator newFromBuffer(Common _common)
    {
        SysTableNameFactoryAttribute    attribute   = new SysTableNameFactoryAttribute(tableId2Name(_common.TableId));
        WHSUOMStructureCreator          instance    = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSUOMStructureCreator), attribute) as WHSUOMStructureCreator;

        if (!instance)
        {
            throw error(strFmt("@SYS23455",funcName()));
        }

        instance.initFromBuffer(_common);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of a table.
    /// </summary>
    /// <param name = "_common">
    /// <c>Common</c> buffer used for this instance of the table.
    /// </param>
    public abstract void initFromBuffer(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUOMStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates UOM structure.
    /// </summary>
    public abstract void createUOMStructure()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalPutLocationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets final put location type.
    /// </summary>
    /// <param name = "_workTable">
    /// <c>WHSWorkTable</c> buffer used for getting the final put location type.
    /// </param>
    /// <returns>
    /// Final put location type for the <c>WHSWorkTable</c> buffer
    /// </returns>
    protected WHSLocType finalPutLocationType(WHSWorkTable _workTable)
    {
        return WMSLocation::find(WHSWorkTable::getLastClosedPutWorkLine(_workTable.WorkId).WMSLocationId, _workTable.InventLocationId).whsLocationProfile().LocType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTransferModuleUOMStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates UOM structure.
    /// </summary>
    /// <param name = "_targetLicensePlateId">
    /// License plate to be used in UOM structure creation.
    /// </param>
    /// <param name = "_loadLine">
    /// <c>WHSLoadLine</c> record to be used in UOM structure creation.
    /// </param>
    /// <param name = "_qty">
    /// Quantity to be used in UOM structure creation.
    /// </param>
    protected void createOrUpdateTransferModuleUOMStructure(
        WHSASNLicensePlateId    _targetLicensePlateId, 
        WHSLoadLine             _loadLine, 
        ProductQuantity         _qty)
    {
        WHSModule       module      = WHSModule::Transfer;
        WHSUOMStructure structure   = WHSUOMStructure::find(_targetLicensePlateId, module, _loadLine.ShipmentId, true);

        if (!structure)
        {
            structure.LicensePlateId    = _targetLicensePlateId;
            structure.ItemId            = _loadLine.ItemId;
            structure.Qty               = _qty;
            structure.uomItem           = WHSCatchWeightHelper::inventHandlingUnitId(_loadLine.ItemId);
            structure.Module            = module;
            structure.ShipmentId        = _loadLine.ShipmentId;
            structure.LoadId            = _loadLine.LoadId;
            
            structure.insert();
        }
        else
        {
            if (structure.ItemId == _loadLine.ItemId)
            {
                structure.Qty += _qty;
                structure.write();
            }
            else
            {
                structure.ItemId    =  '';
                structure.uomItem   =  '';
                structure.Qty       += _qty;
                structure.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSShipmentASNCreator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new instance of the <c>WHSShipmentASNCreator</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>WHSShipmentASNCreator</c> class.
    /// </returns>
    protected WHSShipmentASNCreator WHSShipmentASNCreator()
    {
        return WHSShipmentASNCreator::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetLicensePlateAndCreateUOMCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets target license plate from work.
    /// </summary>
    /// <param name = "_workTable">
    /// <c>WHSWorkTable</c> record to be used in license plate generation.
    /// </param>
    /// <param name = "_workLine">
    /// <c>WHSWorkLine</c> record to be used in license plate generation.
    /// </param>
    /// <returns>
    /// Container that consists of two values:
    ///     1. createUOMCriteria: true, if final put location type is same as final ship location type; otherwise, false.
    ///     2. targetLicensePlateId: License plate on work or consolidated work.
    /// </returns>
    protected container getTargetLicensePlateAndCreateUOMCriteria(WHSWorkTable _workTable, WHSWorkLine _workLine)
    {
        boolean             createUOMCriteria;
        WHSLicensePlateId   targetLicensePlateId;
        WHSLocType          finalShiplocType = WHSParameters::find().ShipFinalLocType;

        if (this.finalPutLocationType(_workTable) == finalShiplocType)
        {
            createUOMCriteria       = true;
            targetLicensePlateId    = _workTable.TargetLicensePlateId;
        }
        // A work that was consolidated is completed on a different location than the final shipping location so it needs to be included.
        else if (_workTable.isOriginForConsolidatedWork())
        {
            WHSWorkTable consolidatedWork = WHSWorkTable::find(WHSConsolidatedWorkLine::findLastConsolidatedWorkLineByOriginWorkLine(
                                                        WHSConsolidatedWorkLine::findOriginWorkLineWithinWork(_workLine)).workId);

            if (this.finalPutLocationType(consolidatedWork) == finalShiplocType)
            {
                createUOMCriteria       = true;
                targetLicensePlateId    = consolidatedWork.TargetLicensePlateId;
            }
        }

        return [createUOMCriteria, targetLicensePlateId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateContainerUOM</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmCreateContainerUOM(boolean _createContainerUOM = createContainerUOM)
    {
        createContainerUOM = _createContainerUOM;
        return createContainerUOM;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>