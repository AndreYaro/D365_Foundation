<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxListEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayTaxListEngine
{
    RPayTaxListTable    rPayTaxListTable;
    RPayRateTable       nonResidentRateTable;
#AviFiles
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createList(boolean _promptQuery = true)
    {
        QueryRun                queryRun;
        RHRMEmplTable           emplTable;
        SysOperationProgress    operationProgress;
        int                     total,current;
        RPayTaxListTrans        rPayTaxListTrans;
        RPayCreateEmplTaxListTrans  createTaxListTrans;
        boolean                 calcByBranch = RPayTaxParameters::find().CalcByBranch &&
                                               rPayTaxListTable.Presentation != RPayTaxPresentation::ToPrimaryIFNS;
        boolean                 calcTaxPayment = RPayTaxParameters::find().CalcTaxPayment;

        if (! rPayTaxListTable.PayPeriod)
        {
            return;
        }

        queryRun = this.initQueryRun();

        if (_promptQuery && ! queryRun.prompt())
        {
            return;
        }

        operationProgress = SysOperationProgress::construct();
        operationProgress.setCaption("@RUP723");
        operationProgress.setAnimation(#AviFormLetter);

        while (queryRun.next())
        {
            total ++;
        }

        operationProgress.setTotal(total);
        queryRun.reset();

        ttsbegin;
        delete_from rPayTaxListTrans
            where rPayTaxListTrans.TableRecId == rPayTaxListTable.RecId;

        createTaxListTrans = RPayCreateEmplTaxListTrans::construct(rPayTaxListTable.PayPeriod,
                                                                   rPayTaxListTable.TransDate,
                                                                   rPayTaxListTable.SelectEmplType,
                                                                   rPayTaxListTable.ReportType,
                                                                   rPayTaxListTable.RecId,
                                                                   false,
                                                                   calcByBranch,
                                                                   this.getBranchesSetPack(calcByBranch, rPayTaxListTable.Presentation),
                                                                   calcTaxPayment);
        while (queryRun.next())
        {
            emplTable = queryRun.get(tableNum(RHRMEmplTable));

            operationProgress.setText("@RUP372" + emplTable.EmployeeId);
            operationProgress.setCount(current);

            createTaxListTrans.setEmpl(emplTable.EmployeeId);
            createTaxListTrans.create();
            current ++;
        }

        createTaxListTrans.writeListTrans();
        this.updateDocumentQty();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBranchesSetPack</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getBranchesSetPack(boolean _calcByBranch, RPayTaxPresentation _presentation)
    {
        container               ret = conNull();
        Set                     branchesSet;
        Branches_RU             branches;
        VendTable               vendTable;
        TaxAuthorityOKATO_RU    taxAuthorityOKATO;

        if (_calcByBranch)
        {
            branchesSet = new Set(Types::String);

            if (_presentation == RPayTaxPresentation::ToPrimaryIFNS)
            {
                branchesSet.add('');
                while select BranchId from branches
                {
                    branchesSet.add(branches.BranchId);
                }
            }
            else
            {
                if (rPayTaxListTable.EventualTaxAuthority == RPayTaxListTable::primaryTaxAuthority().TaxAuthority)
                {
                    branchesSet.add('');
                }

                while select BranchId from branches
                    join Party from vendTable
                        where vendTable.AccountNum == branches.VendAccount
                {
                    select firstonly RecId from taxAuthorityOKATO
                        where  taxAuthorityOKATO.okato          == vendTable.partyOKATOasOfDate_RU(rPayTaxListTable.PayPeriod)
                            && taxAuthorityOKATO.TaxAuthority   == rPayTaxListTable.EventualTaxAuthority;

                    if (taxAuthorityOKATO.RecId)
                    {
                        branchesSet.add(branches.BranchId);
                    }
                }
            }

            if (branchesSet.empty())
            {
                throw warning(strFmt("@RUP3505", rPayTaxListTable.EventualTaxAuthority));
            }

            ret = branchesSet.pack();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials</Name>
				<Source><![CDATA[
    private void initOfficials()
    {
        OfficialsServ_RU officialServ;

        officialServ = new OfficialsServ_RU();
        officialServ.initTableRPayTaxListTable();
        rPayTaxListTable.OffSessionId = officialServ.newId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun initQueryRun()
    {
        Query                   query    = new Query();
        QueryRun                queryRun;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource = query.addDataSource(tableNum(RHRMEmplTable));
        queryBuildDataSource.addSortField(fieldNum(RHRMEmplTable, EmployeeId));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(RHRMEmplTable, EmployeeId));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(RHRMEmplTable, PayMainEmplId));
        queryBuildRange.value(#RPayMainEmplId(queryBuildDataSource.name()));
        queryBuildRange.status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initValue()
    {
        FilePath filePath;

        filePath                  = xInfo::directory(DirectoryType::Temp);
        rPayTaxListTable.FilePath = subStr(filePath,1,strLen(filePath)-1);

        this.initOfficials();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeFileName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FilenameOpen makeFileName()
    {
        FilenameOpen filename;
        INN_RU       companyINN = CompanyInfoHelper::partyINN_RU(CompanyInfo::find());
        #File
        #define.S('S')
        #define.zero('0')

        if (companyINN && rPayTaxListTable.ListNumber)
        {
            filename = #S + subStr(companyINN, 5, 5) +
                       (rPayTaxListTable.ListNumber < 10 ? #zero :'')  +
                       int2str(rPayTaxListTable.ListNumber) + #txt;
        }
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(RPayTaxListTable _rPayTaxListTable)
    {
        ;
        rPayTaxListTable = _rPayTaxListTable;
        nonResidentRateTable = RPayRateTable::find(RPayTaxParameters::find().NonResidentRateCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayTaxListTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTaxListTable rPayTaxListTable(RPayTaxListTable _rPayTaxListTable = rPayTaxListTable)
    {
        ;
        rPayTaxListTable = _rPayTaxListTable;
        return rPayTaxListTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateDocumentQty()
    {
        Counter cnt;
        RPayTaxListTrans rPayTaxListTrans;
        ;
        while select RecId from rPayTaxListTrans
            group by ReferenceNumber
            where rPayTaxListTrans.TableRecId == rPayTaxListTable.RecId
        {
            ++cnt;
        }

        rPayTaxListTable.DocumentAmount = cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteLinkToFile</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validateDeleteLinkToFile()
    {
        boolean ret = true;
        str infoText;

        infoText = "@RUP3389" + ' ' + "@RUP3390";
        info(infoText);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>