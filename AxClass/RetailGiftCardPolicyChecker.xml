<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGiftCardPolicyChecker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Check ability to procees operation with a gift card according its policy.
/// </summary>
abstract class RetailGiftCardPolicyChecker
{
    RetailGiftCardTable giftCardTable;
    AmountCur transactionAmount;
    boolean showErrors;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether this gift card can be used for operation according to its policies.
    /// </summary>
    /// <returns>
    /// true if this gift card meets policies condition for an operation; otherwise, false.
    /// </returns>
    public abstract boolean check()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPolicyActive</Name>
				<Source><![CDATA[
    final protected boolean checkPolicyActive()
    {
        return this.checkPolicyIsStatusActive() &&
               this.checkPolicyActiveFrom() &&
               this.checkPolicyExpirationDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPolicyActiveFrom</Name>
				<Source><![CDATA[
    final protected boolean checkPolicyActiveFrom()
    {
        if (giftCardTable.ActiveFrom && giftCardTable.ActiveFrom > DateTimeUtil::utcNow())
        {
            if (showErrors)
            {
                error("@SYP4860492");
            }
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPolicyAllowReload</Name>
				<Source><![CDATA[
    final protected boolean checkPolicyAllowReload()
    {
        if (giftCardTable.NonReloadable == true)
        {
            if (showErrors)
            {
                error("@SYP4860493");
            }
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPolicyExpirationDate</Name>
				<Source><![CDATA[
    final protected boolean checkPolicyExpirationDate()
    {
        if (giftCardTable.ExpiryDate && giftCardTable.ExpiryDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
        {
            if (showErrors)
            {
                error("@SYP4860491");
            }
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPolicyIsStatusActive</Name>
				<Source><![CDATA[
    final protected boolean checkPolicyIsStatusActive()
    {
        if (giftCardTable.Status != RetailGiftCardStatus::Active)
        {
            if (showErrors)
            {
                error("@SYP4860491");
            }
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPolicyMaxBalance</Name>
				<Source><![CDATA[
    final protected boolean checkPolicyMaxBalance(AmountCur _transactionAmount)
    {
        boolean enabled;

        boolean doCheck()
        {
            if (giftCardTable.MaxBalanceMST && giftCardTable.maxBalanceCur() < _transactionAmount + giftCardTable.balance())
            {
                if (showErrors)
                {
                    error(strFmt("@SYP4860495", giftCardTable.maxBalanceCur()));
                }
                return false;
            }
            return true;
        }

        if (giftCardTable.company() == curext())
        {
            enabled = doCheck();
        }
        else
        {
            changeCompany(giftCardTable.company())
            {
                enabled = doCheck();
            }
        }
        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPolicyMinReload</Name>
				<Source><![CDATA[
    final protected boolean checkPolicyMinReload(AmountCur _transactionAmount)
    {
        boolean enabled;

        boolean doCheck()
        {
            if (giftCardTable.MinReloadMST && giftCardTable.minReloadCur() > _transactionAmount)
            {
                if (showErrors)
                {
                    error(strFmt("@SYP4860494", giftCardTable.minReloadCur()));
                }
                return false;
            }
            return true;
        }

        if (giftCardTable.company() == curext())
        {
            enabled = doCheck();
        }
        else
        {
            changeCompany(giftCardTable.company())
            {
                enabled = doCheck();
            }
        }
        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionAmountOptional</Name>
				<Source><![CDATA[
    protected abstract boolean isTransactionAmountOptional()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGiftCardTable</Name>
				<Source><![CDATA[
    public RetailGiftCardTable parmGiftCardTable(RetailGiftCardTable _giftCardTable = giftCardTable)
    {
        giftCardTable = _giftCardTable;

        return giftCardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowErrors</Name>
				<Source><![CDATA[
    public boolean parmShowErrors(boolean _showErrors = showErrors)
    {
        showErrors = _showErrors;

        return showErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionAmount</Name>
				<Source><![CDATA[
    public AmountCur parmTransactionAmount(AmountCur _transactionAmount = transactionAmount)
    {
        transactionAmount = _transactionAmount;

        return transactionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create instance of the class.
    /// </summary>
    /// <param name="_operation">
    /// Gift card operation for wich policies should be checked.
    /// </param>
    /// <param name="_giftCardTable">
    /// Buffer containing gift card record to check.
    /// </param>
    /// <param name="_transactionAmount">
    /// Amount that is used in verifying operation.
    /// </param>
    /// <returns>
    /// The instantiated object.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The checker was constructed with with an unsupported combination parameters.
    /// </exception>
    public static RetailGiftCardPolicyChecker construct(RetailGiftCardOperation _operation, RetailGiftCardTable _giftCardTable, AmountCur _transactionAmount = 0)
    {
        RetailGiftCardPolicyChecker checker;
        RetailGiftCardOperationAttribute giftCardOperationAttribute;

        if (!RetailParameters::find().UseGiftCardPolicies)
        {
            checker = new RetailGiftCardPolicyChecker_Default();
        }
        else
        {
            giftCardOperationAttribute = new RetailGiftCardOperationAttribute(_operation);

            checker = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(RetailGiftCardPolicyChecker), giftCardOperationAttribute);
        }

        if (!checker.isTransactionAmountOptional())
        {
            if (prmisDefault(_transactionAmount))
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
            else
            {
                checker.parmTransactionAmount(_transactionAmount);
            }
        }

        checker.parmGiftCardTable(_giftCardTable);
        checker.parmShowErrors(true);

        return checker;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>