<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalOrg</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>CustVendPaymProposalOrg</c> is a utility class to payment proposal responsible for organizing
/// and reorganizing the records in a payment proposal.
/// </summary>
public class CustVendPaymProposalOrg
{
    protected CustVendPaymProposal paymProposal;
    boolean isPaymentRequestEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers a <c>LedgerJournalTrans</c> record into a payment proposal for editing.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record to be transferred into a payment proposal.
    /// </param>
    public void addLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustVendTransOpen custVendTransOpen = paymProposal.custVendTransStatic().custVendTransOpen();
        CustVendPaymProposalCalcPaym custVendPaymProposalCalcPaym = paymProposal.parmPaymProposalCalcPaym();

        // Preset the CustVendTable record to be used as the customer or vendor of the payment proposal records that will be generated
        paymProposal.setPaymCustVendTableFromJournalTrans(_ledgerJournalTrans);
        
        // Set the default offset account type and num so these values are retained in the payment proposal lines being generated
        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            paymProposal.parmDefaultOffsetLedgerDimension(_ledgerJournalTrans.parmOffsetLedgerDimension());
        }
        else
        {
            paymProposal.parmDefaultOffsetAccount(_ledgerJournalTrans.parmOffsetAccount());
        }

        paymProposal.parmDefaultOffsetAccountType(_ledgerJournalTrans.OffsetAccountType);

        if (LedgerParameters::isChineseVoucher_CN())
        {
            paymProposal.parmVoucherType_CN(LedgerVoucherType_CN::find(_ledgerJournalTrans.LedgerVoucherType_CN).Id);
        }

        SpecTrans specTrans;
        // <GBR>
        TransDate transDate;
        // </GBR>
        while select CrossCompany Balance01, SpecRecId, CashDiscToTake from specTrans
            where specTrans.SpecCompany == _ledgerJournalTrans.DataAreaId
               && specTrans.SpecTableId == tableNum(LedgerJournalTrans)
               && specTrans.SpecRecId == _ledgerJournalTrans.RecId
        join custVendTransOpen
            where custVendTransOpen.DataAreaId == specTrans.RefCompany
                && custVendTransOpen.TableId == specTrans.RefTableId
                && custVendTransOpen.RecId == specTrans.RefRecId
        {
            if (isPaymentRequestEnabled)
            {
                RefRecId paymentRequestReqId = CFMPaymentRequestTable::findPaymentRequestOnCustVendTransOpen(custVendTransOpen).RecId;

                if (!CFMPaymentRequestTable::isAllowedToIncludeToPaymentJournal(paymentRequestReqId))
                {
                    continue;
                }
            }

            custVendPaymProposalCalcPaym.calc(custVendTransOpen);

            if (BrazilParameters::isEnabled() && _ledgerJournalTrans.TransDate)
            {
                transDate = _ledgerJournalTrans.TransDate;
            }
            else
            {
                transDate = custVendPaymProposalCalcPaym.paymDate();
            }

            paymProposal.addCustVendTransOpen(
                custVendTransOpen,
                transDate,
                _ledgerJournalTrans.CurrencyCode,
                specTrans.Balance01,
                specTrans.CashDiscToTake);
        }

        // Clear the preset CustVendTable that was used as the customer or vendor for the payment proposal records that were generated
        paymProposal.clearPaymCustVendTable();

        // Clear the default offset account type and num so payment offset account type and num may be reset as payments are modified
        paymProposal.parmDefaultOffsetAccountType(LedgerJournalACType::Ledger);
        paymProposal.parmDefaultOffsetAccount('');
        paymProposal.parmDefaultOffsetLedgerDimension(0);

        // Insert dummy line to track what journal lines we have loaded but not used
        CustVendPaymProposalLine custVendPaymProposalLine;
        custVendPaymProposalLine.JournalId = _ledgerJournalTrans.JournalNum;
        custVendPaymProposalLine.LedgerJournalTransRecId = _ledgerJournalTrans.RecId;
        custVendPaymProposalLine.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPaymProposalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>CustVendPaymProposalLine</c> record for a given open transaction.
    /// </summary>
    /// <param name = "_custVendTransOpen">Customer or vendor open transaction.</param>
    /// <param name = "_paymDate">Payment date.</param>
    /// <param name = "_paymCurrency">Payment currency.</param>
    /// <returns>The new <c>CustVendPaymProposalLine</c> record.</returns>
    public CustVendPaymProposalLine buildPaymProposalLine(
        CustVendTransOpen _custVendTransOpen,
        TransDate _paymDate,
        CurrencyCode _paymCurrency)
    {
        CustVendTransOpenData custVendTransOpenData = CustVendTransOpenData::construct(_custVendTransOpen);
        CustVendTrans custVendTrans = custVendTransOpenData.custVendTrans();

        VendTransPayment_BR vendTransPayment_BR;
        CustTransPayment_BR custTransPayment_BR;
        if (BrazilParameters::isEnabled())
        {
            if (_custVendTransOpen.TableId == tableNum(VendTransOpen))
            {
                vendTransPayment_BR = VendTransPayment_BR::find(_custVendTransOpen.RefRecId);
            }
            else if (_custVendTransOpen.TableId == tableNum(CustTransOpen))
            {
                custTransPayment_BR = CustTransPayment_BR::find(_custVendTransOpen.RefRecId);
            }
        }

        CFMPaymentRequestTable paymentRequest;
        if (isPaymentRequestEnabled)
        {
            paymentRequest = CFMPaymentRequestTable::findPaymentRequestOnCustVendTransOpen(_custVendTransOpen);
        }

        // Ensure the payment proposal line buffer is created in the same company as the ledger journal that will contain it
        CustVendPaymProposalLine paymProposalLine;
        boolean enableNorway;
        boolean copyDimension;
        changecompany(paymProposal.parmLedgerJournalTableCompany())
        {
            #ISOCountryRegionCodes
            enableNorway = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]);
            paymProposalLine.clear();
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                copyDimension =
                    (custVendTrans.TableId == tableNum(CustTrans)
                        && (CustParameters::find().CopyInvoiceDimension_RU
                            || CustParameters::find().DimSettlementCtrlType_RU != DimSettlementCtrlType_RU::None))
                    || (custVendTrans.TableId == tableNum(VendTrans)
                        && (VendParameters::find().CopyInvoiceDimension_RU
                            || VendParameters::find().DimSettlementCtrlType_RU != DimSettlementCtrlType_RU::None));
            }
            // </GEERU>
        }

        // The assignments are done in the transaction's company context since methods on transaction related classes
        // are intended to be invoked within the context of the transaction company.
        changecompany(_custVendTransOpen.company())
        {
            container custVendInfo = paymProposal.resolvePaymCustVend(custVendTrans);

            // If a cust/vend was found for which to create a payment that includes this transaction then create the proposal line
            if (conPeek(custVendInfo, 1) != '')
            {
                paymProposalLine.JournalId = paymProposal.ledgerJournalId();
                paymProposalLine.AccountType = paymProposal.custVendTransStatic().moduleCustVend();
                paymProposalLine.AccountNum = conpeek(custVendInfo, 1); // AccountNum;
                paymProposalLine.AccountNumCompany = conpeek(custVendInfo, 2); // CompanyId
                paymProposalLine.CurrencyCode = _paymCurrency;

                if (isPaymentRequestEnabled)
                {
                    paymProposalLine.PaymMode = paymentRequest.PaymMode;
                    paymProposalLine.PaymSpec = paymentRequest.PaymSpec;
                    paymProposalLine.cfmPrepayment = paymentRequest.Prepayment;

                    if (paymentRequest.Prepayment)
                    {
                        container custVendTaxInfoConMap = paymentRequest.custVendTaxGroupBaseAmountMap();

                        if (custVendTaxInfoConMap != conNull())
                        {
                            Map custVendTaxInfoMap = Map::create(custVendTaxInfoConMap);
                            MapEnumerator mapEnum = custVendTaxInfoMap.getEnumerator();

                            if (mapEnum.moveNext())
                            {
                                container custVendTaxInfoCon = mapEnum.currentKey();

                                paymProposalLine.cfmTaxGroup = conPeek(custVendTaxInfoCon, 1);
                                paymProposalLine.cfmTaxItemGroup = conPeek(custVendTaxInfoCon, 2);
                            }
                        }
                    }
                }
                else
                {
                    paymProposalLine.PaymMode = custVendTrans.PaymMode;
                    paymProposalLine.PaymSpec = custVendTrans.PaymSpec;
                }

                if (PublicSectorUtils::isFrenchRegulatoryEnabled())
                {
                    paymProposalLine.PSNVendRoutingSlipId = paymProposal.PSNParmVendRoutingSlip();
                }

                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    if (custVendTrans.TableId == tableNum(VendTrans))
                    {
                        paymProposalLine.EPPaymentType_BR = vendTransPayment_BR.EPPaymentType_BR;
                        paymProposalLine.EPPaymentWay_BR = vendTransPayment_BR.EPPaymentWay_BR;
                    }
                    else if (custVendTrans.TableId == tableNum(CustTrans))
                    {
                        paymProposalLine.EPPaymentType_BR = custTransPayment_BR.EPPaymentType_BR;
                        paymProposalLine.EPPaymentWay_BR = custTransPayment_BR.EPPaymentWay_BR;
                    }
                }
                // </GBR>

                if (isPaymentRequestEnabled)
                {
                    paymProposalLine.PostingProfile = paymentRequest.PostingProfile;
                    paymProposalLine.CFMPaymentOrderHash = CFMPaymentRequestPaymentOrder::findByRecId(paymentRequest.PaymentOrder).Hash;
                }
                else
                {
                    paymProposalLine.PostingProfile = custVendTrans.PostingProfile;
                }

                paymProposalLine.NegInstID = custVendTrans.NegInstId;
                paymProposalLine.NegInstSeqNum = custVendTrans.NegInstSeqNum;
                paymProposalLine.NegInstStatus = custVendTrans.NegInstStatus;

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    && _custVendTransOpen != null
                    && paymProposalLine.AccountType == ModuleCustVend::Vend)
                {
                    paymProposalLine.ThirdPartyBankAccountID = this.getPaymProposalLineThirdPartyBankIdFromVendTransOpen(
                        paymProposalLine,
                        custVendTrans,
                        _custVendTransOpen);
                }
                else
                {
                    paymProposalLine.ThirdPartyBankAccountID = this.getPaymProposalLineThirdPartyBankId(
                        paymProposalLine,
                        custVendTrans);
                }

                // Copy the vendPaymentGroup if and only if the custVendTrans map maps to a vendTrans table record.
                if (custVendTrans.TableId == tableNum(VendTrans))
                {
                    VendTrans vendTrans = custVendTrans;
                    paymProposalLine.VendPaymentGroup = vendTrans.VendPaymentGroup;
                    paymProposalLine.RemittanceLocation = LogisticsLocation::isLocationActive(vendTrans.RemittanceLocation) ?
                        vendTrans.RemittanceLocation :
                        VendTable::getDefaultRemittanceLocation(paymProposalLine.AccountNum, paymProposalLine.AccountNumCompany);
                }

                if (paymProposalLine.NegInstStatus == CustVendNegInstStatus::InvoiceRemitted)
                {
                    paymProposalLine.CompanyBankAccountIdNegInst = custVendTrans.CompanyBankAccountId;
                }
                else
                {
                    paymProposalLine.CompanyBankAccountIdNegInst = paymProposal.resolveCompanyBankAccountIdNegInst(paymProposalLine);
                }

                paymProposalLine.BankRemittanceType = paymProposal.resolveBankRemittanceType(paymProposalLine, custVendTransOpenData);
                paymProposalLine.PaymDate = _paymDate;

                if (enableNorway)
                {
                    DimensionDefault curDefaultDimension = CustVendPaymProposalKeepDefaultDimensionNOFlight::instance().isEnabled() ?
                        CustVendTable::getDefaultDimension(custVendTrans is VendTrans ? ModuleCustVend::Vend : ModuleCustVend::Cust, custVendTrans.AccountNum) :
                        0;

                    if (paymProposalLine.AccountType == ModuleCustVend::Vend)
                    {
                        paymProposalLine.DefaultDimension = VendPaymModeTable::setDefaultDimension(paymProposalLine.PaymMode, custVendTrans.DefaultDimension, curDefaultDimension);
                    }
                    else
                    {
                        paymProposalLine.DefaultDimension = CustPaymModeTable::setDefaultDimension(paymProposalLine.PaymMode, custVendTrans.DefaultDimension, curDefaultDimension);
                    }
                }

                if (TaxThaiGovCertificationFeatureChecker::isTaxBranchEnabled())
                {
                    DimensionDefault defaultDimensionCustVend = this.getCustVendDefaultDimension(paymProposalLine);

                    if (!DimensionDefaultFacade::areEqual(custVendTrans.DefaultDimension, defaultDimensionCustVend))
                    {
                        DimensionAttributeValueSetItemView valueSetItemViewLeft;
                        DimensionAttributeValueSetItemView valueSetItemViewRight;
                        DimensionAttributeValueSetTaxBranchView dimensionAttributeValueSetTaxBranchView;

                        select firstonly DimensionAttribute, DimensionAttributeValue from valueSetItemViewLeft
                            where CustVendTrans.DefaultDimension == valueSetItemViewLeft.DimensionAttributeValueSet
                        exists join dimensionAttributeValueSetTaxBranchView
                            where valueSetItemViewLeft.DimensionAttributeValue == dimensionAttributeValueSetTaxBranchView.DimensionAttributeValue;

                        select firstonly DimensionAttributeValue from valueSetItemViewRight
                            where defaultDimensionCustVend == valueSetItemViewRight.DimensionAttributeValueSet
                        exists join dimensionAttributeValueSetTaxBranchView
                            where valueSetItemViewRight.DimensionAttributeValue == dimensionAttributeValueSetTaxBranchView.DimensionAttributeValue;

                        if (valueSetItemViewLeft.DimensionAttribute
                            && valueSetItemViewLeft.DimensionAttributeValue != valueSetItemViewRight.DimensionAttributeValue)
                        {
                            paymProposalLine.DefaultDimension = LedgerDimensionDefaultFacade::serviceReplaceAttributeValue(
                                defaultDimensionCustVend,
                                custVendTrans.DefaultDimension,
                                valueSetItemViewLeft.DimensionAttribute);
                        }
                        else
                        {
                            paymProposalLine.DefaultDimension = defaultDimensionCustVend;
                        }
                    }
                    else
                    {
                        paymProposalLine.DefaultDimension = custVendTrans.DefaultDimension;
                    }
                }

                if (VendParameters::find().ConfirmingInvoices
                    && (paymProposal.ledgerJournalType() == LedgerJournalType::VendPaymRemittance
                    || paymProposal.ledgerJournalType() == LedgerJournalType::VendPromissoryNoteSettle))
                {
                    paymProposalLine.Invoice = custVendTrans.Invoice;
                }

                if (custVendTransOpenData.findPaymModeTable(false).PaymSumBy == PaymSumBy::Invoice)
                {
                    paymProposalLine.TransOpenRecId = _custVendTransOpen.RecId;
                }

                Set setPaymAttributes;
                if (isPaymentRequestEnabled)
                {
                    setPaymAttributes = CustVendPaymModeData::newCustVendPaymProposalLine(paymProposalLine).setOfPaymAttributes();
                }
                else
                {
                    setPaymAttributes = CustVendPaymModeData::newCustVendTrans(custVendTrans).setOfPaymAttributes();
                }

                SetEnumerator setPaymAttributesEnumerator = setPaymAttributes.getEnumerator();
                LedgerJournalAccountAndType ledgerJournalAccountAndType;
                while (setPaymAttributesEnumerator.moveNext())
                {
                    switch (setPaymAttributesEnumerator.current())
                    {
                        case PaymAttribute::PaymID:
                            paymProposalLine.PaymId = custVendTrans.PaymId;
                            break;

                        case PaymAttribute::PaymIDStructured_BE:
                            if (!setPaymAttributes.in(PaymAttribute::PaymID)
                                && Bank_BE::isPaymIdStructured(custVendTrans.PaymId))
                            {
                                paymProposalLine.PaymId = custVendTrans.PaymId;
                            }
                            break;

                        case PaymAttribute::ThirdPartyBank:
                            if (isPaymentRequestEnabled)
                            {
                                paymProposalLine.ThirdPartyBankAccountID = paymentRequest.RecepientBankAccountId;
                            }
                            else if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && custVendTrans.TableId == tableNum(VendTrans))
                            {
                                paymProposalLine.ThirdPartyBankAccountID = _custVendTransOpen.ThirdPartyBankAccountId;
                            }
                            else
                            {
                                paymProposalLine.ThirdPartyBankAccountID = this.getPaymProposalLineThirdPartyBankId(
                                    paymProposalLine,
                                    custVendTrans);
                            }
                            break;

                        case PaymAttribute::PaymentAccount:
                            if (isPaymentRequestEnabled)
                            {
                                ledgerJournalAccountAndType = paymProposalLine.resolvePaymAccountAndType(
                                    LedgerJournalACType::Bank,
                                    paymentRequest.PaymentAccountNum);
                            }
                            else
                            {
                                ledgerJournalAccountAndType = paymProposalLine.resolvePaymAccountAndType(
                                    LedgerJournalACType::Bank,
                                    custVendTrans.CompanyBankAccountId);
                            }

                            paymProposalLine.PaymAccountType = ledgerJournalAccountAndType.parmAccountType();

                            if (paymProposalLine.PaymAccountType == LedgerJournalACType::Ledger)
                            {
                                paymProposalLine.parmLedgerDimension(ledgerJournalAccountAndType.parmLedgerDimension());
                            }
                            else
                            {
                                paymProposalLine.parmPaymAccount(ledgerJournalAccountAndType.parmAccountNum(), ledgerJournalAccountAndType.parmAccountType());
                            }
                            break;

                        default:
                            EventHandlerResult eventResult = new EventHandlerResult();
                            this.initPaymProposalLineFromPaymAttributeDelegate(
                                setPaymAttributesEnumerator.current(),
                                setPaymAttributes,
                                paymProposalLine,
                                custVendTrans,
                                _custVendTransOpen,
                                eventResult);

                            if (!eventResult.hasResult())
                            {
                                throw error(Error::wrongUseOfFunction(funcname()));
                            }
                    }

                    if (paymProposalLine.PaymAccountType == LedgerJournalACType::Bank
                        && !BankAccountTable::isActive(paymProposalLine.parmPaymAccount(), paymProposalLine.PaymDate))
                    {
                        paymProposalLine.parmPaymAccount('', LedgerJournalACType::Bank);
                    }
                }

                if (enableNorway)
                {
                    if (!setPaymAttributes.in(PaymAttribute::PaymID) 
                        && !FeatureStateProvider::isFeatureEnabled(SkipOffsetLedgerDimensionInPaymenProposalFeature_NO::instance()))
                    {
                        paymProposalLine.OffsetLedgerDimension = this.proposalLineDimension(custVendTrans);
                    }

                    BankCustVendPaymModeBankAccounts bankCustVendPaymModeBankAccounts;
                    if (paymProposalLine.AccountType == ModuleCustVend::Cust)
                    {
                        bankCustVendPaymModeBankAccounts = BankCustPaymModeBankAccounts::findByPaymModeCurrency(
                            custVendTrans.PaymMode,
                            custVendTrans.DefaultDimension,
                            custVendTrans.CurrencyCode);

                        if (!bankCustVendPaymModeBankAccounts)
                        {
                            bankCustVendPaymModeBankAccounts = BankCustPaymModeBankAccounts::findByPaymModeCurrency(
                                custVendTrans.PaymMode,
                                0,
                                custVendTrans.CurrencyCode);
                        }
                    }
                    else
                    {
                        bankCustVendPaymModeBankAccounts = BankVendPaymModeBankAccounts::findByPaymModeDimCurrency(
                            custVendTrans.PaymMode,
                            custVendTrans.DefaultDimension,
                            custVendTrans.CurrencyCode);

                        if (!bankCustVendPaymModeBankAccounts)
                        {
                            bankCustVendPaymModeBankAccounts = BankVendPaymModeBankAccounts::findByPaymModeDimCurrency(
                                custVendTrans.PaymMode,
                                0,
                                custVendTrans.CurrencyCode);
                        }

                    }

                    if (bankCustVendPaymModeBankAccounts)
                    {
                        paymProposalLine.parmPaymAccount(bankCustVendPaymModeBankAccounts.BankAccountID, LedgerJournalACType::Bank);
                    }
                }

                if (!paymProposalLine.parmLedgerDimension())
                {
                    // CustVendPaymProposalLine table's LedgerDimension field needs to be resolved based on LedgerJournalTable's company.
                    changecompany(paymProposal.parmLedgerJournalTableCompany())
                    {
                        ledgerJournalAccountAndType = paymProposal.resolvePaymAccountAndType(paymProposalLine);

                        paymProposalLine.PaymAccountType = ledgerJournalAccountAndType.parmAccountType();

                        if (paymProposalLine.PaymAccountType == LedgerJournalACType::Ledger)
                        {
                            if (enableNorway && (this.dimensionControlEnabled(paymProposalLine) || !SkipLedgerDimensionInPaymentProposalNOFlight::instance().isEnabled()))
                            {
                                paymProposalLine.parmLedgerDimension(
                                    LedgerDimensionFacade::serviceCreateLedgerDimension(
                                        LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(ledgerJournalAccountAndType.parmLedgerDimension()),
                                        paymProposalLine.DefaultDimension));
                            }
                            else
                            {
                                paymProposalLine.parmLedgerDimension(ledgerJournalAccountAndType.parmLedgerDimension());
                            }
                        }
                        else
                        {
                            paymProposalLine.parmPaymAccount(ledgerJournalAccountAndType.parmAccountNum(), ledgerJournalAccountAndType.parmAccountType());
                        }

                        if (paymProposalLine.PaymAccountType == LedgerJournalACType::Bank
                            && !BankAccountTable::isActive(paymProposalLine.parmPaymAccount(), paymProposalLine.PaymDate))
                        {
                            paymProposalLine.parmPaymAccount('', LedgerJournalACType::Bank);
                        }

                        else if (paymProposalLine.PaymAccountType == LedgerJournalACType::Bank
                            && custVendTrans.CompanyBankAccountId && paymProposal.parmChangeCompanyBankAccount())
                        {
                            paymProposalLine.parmPaymAccount(custVendTrans.CompanyBankAccountId, LedgerJournalACType::Bank);
                        }
                    }

                }

                if (enableNorway
                    && (paymProposalLine.AccountType == ModuleCustVend::Cust
                        || paymProposalLine.AccountType == ModuleCustVend::Vend))
                {
                    paymProposalLine.BankCentralBankPurposeCode = custVendTrans.BankCentralBankPurposeCode;
                    paymProposalLine.BankCentralBankPurposeText = custVendTrans.BankCentralBankPurposeText;
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    if (copyDimension)
                    {
                        paymProposalLine.DefaultDimension = custVendTrans.DefaultDimension;
                    }
                    else
                    {
                        paymProposalLine.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(
                            AgreementHeaderExt_RU::findByDefaultDimension(custVendTrans.DefaultDimension).RecId,
                            paymProposalLine.DefaultDimension);
                    }
                }
            }
        }

        if (BrazilParameters::isEnabled())
        {
            if (paymProposalLine.AccountType == ModuleCustVend::Cust)
            {
                CustTransEPRemit_BR custTransEPRemit = CustTransEPRemit_BR::findByRefRecId(_custVendTransOpen.RecId);
                paymProposalLine.EPRemitOccCode_BR = custTransEPRemit.RemitOccCode;
                paymProposalLine.EPBankFolder_BR = custTransEPRemit.BankFolder;
                paymProposalLine.EPInstruction_1_BR = custTransEPRemit.Instruction_1;
                paymProposalLine.EPInstruction_2_BR = custTransEPRemit.Instruction_2;
                paymProposalLine.EPDocumentType_BR = custTransEPRemit.DocumentType;
            }
            else if (paymProposalLine.AccountType == ModuleCustVend::Vend)
            {
                VendTransEPRemit_BR vendTransEPRemit = VendTransEPRemit_BR::find(_custVendTransOpen.AccountNum, _custVendTransOpen.RecId);
                paymProposalLine.EPRemitOccCode_BR = vendTransEPRemit.RemitOccCode;
                paymProposalLine.EPTypedLine_BR = vendTransPayment_BR.TypedLine_BR;
                paymProposalLine.EPBarCodeInfo_BR = _custVendTransOpen.EPBarCodeInfo_BR;
            }
        }

        // Verify associations between the currencies involved
        if (!paymProposal.validatePaymentCurrency(paymProposalLine.CurrencyCode, paymProposalLine.AccountNumCompany, _custVendTransOpen.company()))
        {
            paymProposalLine.clear();
        }

        return paymProposalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionControlEnabled</Name>
				<Source><![CDATA[
    private boolean dimensionControlEnabled(CustVendPaymProposalLine _proposalLine)
    {
        if (_proposalLine.AccountType == ModuleCustVend::Vend)
        {
            VendPaymModeTable vendPaymModeTable = VendPaymModeTable::find(_proposalLine.PaymMode);
            return vendPaymModeTable.DimCtrl == NoYes::Yes;
        }
        else if (_proposalLine.AccountType == ModuleCustVend::Cust)
        {
            CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(_proposalLine.PaymMode);
            return custPaymModeTable.DimCtrl == NoYes::Yes;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymProposalLineFromPaymAttributeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to be called in the default case within the buildPaymProposalLine method for setting payment attribute related fields.
    /// </summary>
    /// <param name = "_paymAttribute">The payment attribute enum value.</param>
    /// <param name = "_paymAttributes">The set of payment attributes.</param>
    /// <param name = "_paymProposalLine">The payment proposal line.</param>
    /// <param name = "_custVendTrans">The customer or vendor transaction.</param>
    /// <param name = "_custVendTransOpen">The open customer or vendor transaction.</param>
    /// <param name = "_eventResult">The <c>EventHandlerResult</c> instance to be assigned before exiting the method.</param>
    delegate void initPaymProposalLineFromPaymAttributeDelegate(
        PaymAttribute _paymAttribute,
        Set _paymAttributes,
        CustVendPaymProposalLine _paymProposalLine,
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen,
        EventHandlerResult _eventResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProposalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified payment proposal line.
    /// </summary>
    /// <param name="_paymProposalLine">
    ///    A record in the <c>CustVendPaymProposalLine</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustVendPaymProposalLine</c> table.
    /// </returns>
    public CustVendPaymProposalLine findProposalLine(
        CustVendPaymProposalLine _paymProposalLine,
        boolean _forUpdate)
    {
        CustVendPaymProposalLine custVendPaymProposalLine;
        TableId taxBranchViewId;
        DimensionAttribute dimAttribute;
        DimensionAttributeValueSetItemView valueSetItemViewLeft;
        DimensionAttributeValueSetItemView valueSetItemViewRight;

        #ISOCountryRegionCodes
        #localMacro.CFMFields
            && (!isPaymentRequestEnabled
                || (custVendPaymProposalLine.CFMPaymentRequestRecId == _paymProposalLine.CFMPaymentRequestRecId
                    && custVendPaymProposalLine.CFMPrepayment == _paymProposalLine.CFMPrepayment
                    && custVendPaymProposalLine.CFMTaxGroup == _paymProposalLine.CFMTaxGroup
                    && custVendPaymProposalLine.CFMTaxItemGroup == _paymProposalLine.CFMTaxItemGroup
                    && custVendPaymProposalLine.CFMPaymentOrderHash == _paymProposalLine.CFMPaymentOrderHash))
        #endMacro

        changecompany(this.parmPaymProposal().parmLedgerJournalTableCompany())
        {
            custVendPaymProposalLine.selectForUpdate(_forUpdate);

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
            {
                boolean doNotUseOffsetLedgerDimension = FeatureStateProvider::isFeatureEnabled(SkipOffsetLedgerDimensionInPaymenProposalFeature_NO::instance());

                select firstonly custVendPaymProposalLine
                    where custVendPaymProposalLine.JournalId == _paymProposalLine.JournalId
                        && custVendPaymProposalLine.AccountNum == _paymProposalLine.AccountNum
                        && custVendPaymProposalLine.AccountNumCompany == _paymProposalLine.AccountNumCompany
                        && custVendPaymProposalLine.CurrencyCode == _paymProposalLine.CurrencyCode
                        && custVendPaymProposalLine.PaymMode == _paymProposalLine.PaymMode
                        && custVendPaymProposalLine.PaymSpec == _paymProposalLine.PaymSpec
                        && custVendPaymProposalLine.PaymId == _paymProposalLine.PaymId
                        && custVendPaymProposalLine.NegInstID == _paymProposalLine.NegInstID
                        && custVendPaymProposalLine.NegInstSeqNum == _paymProposalLine.NegInstSeqNum
                        && custVendPaymProposalLine.NegInstStatus == _paymProposalLine.NegInstStatus
                        && custVendPaymProposalLine.PaymDate == _paymProposalLine.PaymDate
                        && custVendPaymProposalLine.TransOpenRecId == _paymProposalLine.TransOpenRecId
                        && custVendPaymProposalLine.PaymAccountType == _paymProposalLine.PaymAccountType
                        && custVendPaymProposalLine.LedgerDimension == _paymProposalLine.LedgerDimension
                        && custVendPaymProposalLine.ThirdPartyBankAccountID == _paymProposalLine.ThirdPartyBankAccountID
                        && custVendPaymProposalLine.BankRemittanceType == _paymProposalLine.BankRemittanceType
                        && custVendPaymProposalLine.CompanyBankAccountIdNegInst == _paymProposalLine.CompanyBankAccountIdNegInst
                        && custVendPaymProposalLine.Invoice == _paymProposalLine.Invoice
                        && custVendPaymProposalLine.BankCentralBankPurposeCode == _paymProposalLine.BankCentralBankPurposeCode
                        && custVendPaymProposalLine.BankCentralBankPurposeText == _paymProposalLine.BankCentralBankPurposeText
                        && custVendPaymProposalLine.DefaultDimension == _paymProposalLine.DefaultDimension
                        && custVendPaymProposalLine.VendPaymentGroup == _paymProposalLine.VendPaymentGroup
                        && custVendPaymProposalLine.RemittanceLocation == _paymProposalLine.RemittanceLocation
                        #CFMFields
                        && (doNotUseOffsetLedgerDimension || custVendPaymProposalLine.OffsetLedgerDimension == _paymProposalLine.OffsetLedgerDimension);
            }
            else if (TaxThaiGovCertificationFeatureChecker::isTaxBranchEnabled())
            {
                taxBranchViewId = tableNum(DimAttributeTaxBranch);

                select firstonly custVendPaymProposalLine
                    where custVendPaymProposalLine.JournalId == _paymProposalLine.JournalId
                        && custVendPaymProposalLine.AccountNum == _paymProposalLine.AccountNum
                        && custVendPaymProposalLine.AccountNumCompany == _paymProposalLine.AccountNumCompany
                        && custVendPaymProposalLine.CurrencyCode == _paymProposalLine.CurrencyCode
                        && custVendPaymProposalLine.PaymMode == _paymProposalLine.PaymMode
                        && custVendPaymProposalLine.PaymSpec == _paymProposalLine.PaymSpec
                        && custVendPaymProposalLine.PaymId == _paymProposalLine.PaymId
                        && custVendPaymProposalLine.NegInstID == _paymProposalLine.NegInstID
                        && custVendPaymProposalLine.NegInstSeqNum == _paymProposalLine.NegInstSeqNum
                        && custVendPaymProposalLine.NegInstStatus == _paymProposalLine.NegInstStatus
                        && custVendPaymProposalLine.PaymDate == _paymProposalLine.PaymDate
                        && custVendPaymProposalLine.TransOpenRecId == _paymProposalLine.TransOpenRecId
                        && custVendPaymProposalLine.PaymAccountType == _paymProposalLine.PaymAccountType
                        && custVendPaymProposalLine.LedgerDimension == _paymProposalLine.LedgerDimension
                        && custVendPaymProposalLine.ThirdPartyBankAccountID == _paymProposalLine.ThirdPartyBankAccountID
                        && custVendPaymProposalLine.BankRemittanceType == _paymProposalLine.BankRemittanceType
                        && custVendPaymProposalLine.CompanyBankAccountIdNegInst == _paymProposalLine.CompanyBankAccountIdNegInst
                        && custVendPaymProposalLine.Invoice == _paymProposalLine.Invoice
                        && custVendPaymProposalLine.BankCentralBankPurposeCode == _paymProposalLine.BankCentralBankPurposeCode
                        && custVendPaymProposalLine.BankCentralBankPurposeText == _paymProposalLine.BankCentralBankPurposeText
                        && custVendPaymProposalLine.VendPaymentGroup == _paymProposalLine.VendPaymentGroup
                        && custVendPaymProposalLine.RemittanceLocation == _paymProposalLine.RemittanceLocation
                        && custVendPaymProposalLine.DefaultDimension == _paymProposalLine.DefaultDimension
                        #CFMFields
                join RecId from valueSetItemViewLeft
                    where  custVendPaymProposalLine.DefaultDimension == valueSetItemViewLeft.DimensionAttributeValueSet
                join RecId from valueSetItemViewRight
                    where  valueSetItemViewLeft.DimensionAttributeValueSet == valueSetItemViewRight.DimensionAttributeValueSet
                join RecId from dimAttribute
                    where  valueSetItemViewLeft.DimensionAttribute == dimAttribute.RecId
                        && dimAttribute.BackingEntityType == taxBranchViewId
                        && valueSetItemViewLeft.EntityInstance == valueSetItemViewRight.EntityInstance;
            }
            else
            {
                select firstonly custVendPaymProposalLine
                    where custVendPaymProposalLine.JournalId == _paymProposalLine.JournalId
                        && custVendPaymProposalLine.AccountNum == _paymProposalLine.AccountNum
                        && custVendPaymProposalLine.AccountNumCompany == _paymProposalLine.AccountNumCompany
                        && custVendPaymProposalLine.CurrencyCode == _paymProposalLine.CurrencyCode
                        && custVendPaymProposalLine.PaymMode == _paymProposalLine.PaymMode
                        && custVendPaymProposalLine.PaymSpec == _paymProposalLine.PaymSpec
                        && custVendPaymProposalLine.PaymId == _paymProposalLine.PaymId
                        && custVendPaymProposalLine.NegInstID == _paymProposalLine.NegInstID
                        && custVendPaymProposalLine.NegInstSeqNum == _paymProposalLine.NegInstSeqNum
                        && custVendPaymProposalLine.NegInstStatus == _paymProposalLine.NegInstStatus
                        && custVendPaymProposalLine.PaymDate == _paymProposalLine.PaymDate
                        && custVendPaymProposalLine.TransOpenRecId == _paymProposalLine.TransOpenRecId
                        && custVendPaymProposalLine.PaymAccountType == _paymProposalLine.PaymAccountType
                        && custVendPaymProposalLine.LedgerDimension == _paymProposalLine.LedgerDimension
                        && custVendPaymProposalLine.ThirdPartyBankAccountID == _paymProposalLine.ThirdPartyBankAccountID
                        && custVendPaymProposalLine.BankRemittanceType == _paymProposalLine.BankRemittanceType
                        && custVendPaymProposalLine.CompanyBankAccountIdNegInst  == _paymProposalLine.CompanyBankAccountIdNegInst
                        && custVendPaymProposalLine.Invoice == _paymProposalLine.Invoice
                        && (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                        || (custVendPaymProposalLine.InvoiceTaxCode_RU == _paymProposalLine.InvoiceTaxCode_RU
                            // Note that parameter validation is on buildPaymProposalLine() only
                            && custVendPaymProposalLine.DefaultDimension == _paymProposalLine.DefaultDimension))
                        && custVendPaymProposalLine.BankCentralBankPurposeCode == _paymProposalLine.BankCentralBankPurposeCode
                        && custVendPaymProposalLine.BankCentralBankPurposeText == _paymProposalLine.BankCentralBankPurposeText
                        && custVendPaymProposalLine.VendPaymentGroup == _paymProposalLine.VendPaymentGroup
                        #CFMFields
                        && custVendPaymProposalLine.RemittanceLocation == _paymProposalLine.RemittanceLocation;
            }
        }

        return custVendPaymProposalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension that is associated to the payment proposal line.
    /// </summary>
    /// <param name="_custVendPaymProposalLine">
    /// A <c>CustVendPaymProposalLine</c> record.
    /// </param>
    /// <returns>
    /// The ID of the <c>DimensionAttributeValueSet</c> record that represents the default dimension.
    /// </returns>
    public DimensionDefault getCustVendDefaultDimension(CustVendPaymProposalLine _custVendPaymProposalLine)
    {
        DimensionDefault defaultDimensionCustVend;

        if (_custVendPaymProposalLine.AccountType == ModuleCustVend::Cust)
        {
            CustTable custTable = CustTable::find(_custVendPaymProposalLine.AccountNum);
            defaultDimensionCustVend = custTable.DefaultDimension;
        }
        else
        {
            VendTable vendTable = VendTable::find(_custVendPaymProposalLine.AccountNum);
            defaultDimensionCustVend = vendTable.DefaultDimension;
        }

        return defaultDimensionCustVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymProposal</Name>
				<Source><![CDATA[
    public CustVendPaymProposal parmPaymProposal(CustVendPaymProposal _paymProposal = paymProposal)
    {
        paymProposal = _paymProposal;
        return paymProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorganize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reorganizes the transaction and matches it with a new payment if it is required.
    /// </summary>
    /// <param name = "_custVendPaymProposalCalcPaym"><c>CustVendPaymProposalCalcPaym</c> that determines how payment date is calculated.</param>
    public void reorganize(CustVendPaymProposalCalcPaym _custVendPaymProposalCalcPaym = null)
    {
        CustVendPaymProposalCalcPaym custVendPaymProposalCalcPaym = _custVendPaymProposalCalcPaym;
        if (!custVendPaymProposalCalcPaym)
        {
            custVendPaymProposalCalcPaym = CustVendPaymProposalCalcPaym::construct(paymProposal.ledgerJournalType());
        }

        container companies = CustVendOpenTransManager::findSharedServiceCompanies(this.parmPaymProposal().parmLedgerJournalTableCompany());

        CustVendPaymProposalLine custVendPaymProposalLine;
        SpecTrans specTrans;
        CustVendTransOpen custVendTransOpen = paymProposal.custVendTransStatic().custVendTransOpen();

        while select crosscompany:companies DataAreaId, RecId from custVendPaymProposalLine
            where custVendPaymProposalLine.JournalCompany == paymProposal.parmLedgerJournalTableCompany()
                && custVendPaymProposalLine.JournalId == paymProposal.ledgerJournalId()
        join RecId from specTrans
            where specTrans.SpecCompany == custVendPaymProposalLine.DataAreaId
                && specTrans.SpecTableId == tablenum(CustVendPaymProposalLine)
                && specTrans.SpecRecId == custVendPaymProposalLine.RecId
        join custVendTransOpen
            where custVendTransOpen.DataAreaId == specTrans.RefCompany
                && custVendTransOpen.TableId == specTrans.RefTableId
                && custVendTransOpen.RecId == specTrans.RefRecId
        {
            paymProposal.parmChangePaymentDistributionMode(true);
            custVendPaymProposalCalcPaym.calc(custVendTransOpen);
            paymProposal.reorgCustVendTransOpen(custVendTransOpen, custVendPaymProposalCalcPaym.paymDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendPaymProposalOrg construct()
    {
        return new CustVendPaymProposalOrg();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymProposalLineThirdPartyBankId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the assigned bank account for a customer or vendor.
    /// </summary>
    /// <param name="_paymProposalLine">
    /// The <c>CustVendPaymProposalLine</c> table record containing the account to restrict on.
    /// </param>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> map containing the active customer or vendor record.
    /// </param>
    /// <returns>
    /// The default bank account.
    /// </returns>
    protected BankAccountID getPaymProposalLineThirdPartyBankId(
        CustVendPaymProposalLine _paymProposalLine,
        CustVendTrans _custVendTrans)
    {
        BankAccountID bankAccountID = _custVendTrans.ThirdPartyBankAccountId;

        if (_custVendTrans.company() != _paymProposalLine.AccountNumCompany)
        {
            changeCompany(_paymProposalLine.AccountNumCompany)
            {
                switch (_paymProposalLine.AccountType)
                {
                    case ModuleCustVend::Cust:
                        if (CustPaymModeTable::find(_paymProposalLine.PaymMode).IsSEPA)
                        {
                            // Proposal line is in a different company than the transaction, but for SEPA we need to have the bank account
                            // of the payment match the bank account of the mandate, which is only in the company of the transaction.
                            // We switch to the company of the transaction to access the mandate's bank account ID, and attempt to find
                            // an account with the same ID in the proposal line's company.
                            changecompany(_custVendTrans.company())
                            {
                                CustDirectDebitMandate custDirectDebitMandate = CustDirectDebitMandate::find(_custVendTrans.Mandate);
                                bankAccountID = CustBankAccount::findByCompany(
                                    _paymProposalLine.AccountNumCompany,
                                    _paymProposalLine.AccountNum,
                                     custDirectDebitMandate.BankAccount).AccountID;
                            }
                        }
                        else if (_custVendTrans.ThirdPartyBankAccountId)
                        {
                            bankAccountID = _custVendTrans.ThirdPartyBankAccountId;
                        }
                        else
                        {
                            bankAccountID = CustTable::find(_paymProposalLine.AccountNum).BankAccount;
                        }
                        break;

                    case ModuleCustVend::Vend:
                        if (_custVendTrans.ThirdPartyBankAccountId)
                        {
                            bankAccountID = _custVendTrans.ThirdPartyBankAccountId;
                        }
                        else
                        {
                            bankAccountID = VendTable::find(_paymProposalLine.AccountNum).BankAccount;
                        }
                        break;
                }
            }
        }

        return bankAccountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymProposalLineThirdPartyBankIdFromVendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the assigned bank account using <c>CustVendTransOpen</c> if possible.
    /// </summary>
    /// <param name = "_paymProposalLine">
    /// The <c>CustVendPaymProposalLine</c> table record containing the account to restrict on.
    /// </param>
    /// <param name = "_custVendTrans">
    /// The <c>CustVendTrans</c> map containing the active customer or vendor record.
    /// </param>
    /// <param name = "_custVendTransOpen">
    /// The <c>CustVendTransOpen</c> map containing the active customer or vendor record.
    /// </param>
    /// <returns>
    /// The default bank account.
    /// </returns>
    protected BankAccountID getPaymProposalLineThirdPartyBankIdFromVendTransOpen(
        CustVendPaymProposalLine _paymProposalLine,
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen)
    {
        BankAccountID bankAccountID = _custVendTrans.ThirdPartyBankAccountId;
        BankAccountID vendTransOpenBankAccountID = _custVendTransOpen.ThirdPartyBankAccountId;
        if (vendTransOpenBankAccountID != null)
        {
            bankAccountID = vendTransOpenBankAccountID;
        }

        if (_custVendTrans.company() != _paymProposalLine.AccountNumCompany)
        {
            changeCompany(_paymProposalLine.AccountNumCompany)
            {
                if (_custVendTrans.ThirdPartyBankAccountId)
                {
                    bankAccountID = _custVendTrans.ThirdPartyBankAccountId;
                }
                else
                {
                    bankAccountID = VendTable::find(_paymProposalLine.AccountNum).BankAccount;
                }
            }
        }

        return bankAccountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        isPaymentRequestEnabled = CFMParameters::isPaymentRequestsEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalLineDimension</Name>
				<Source><![CDATA[
    private DimensionDefault proposalLineDimension(CustVendTrans _custVendTrans)
    {
        FieldId transFieldId;
        RefRecId dimAttrSet;
        NoYes dimCtrl;

        switch (_custVendTrans.TableId)
        {
            case tableNum(CustTrans):
                CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(_custVendTrans.PaymMode);
                dimAttrSet = custPaymModeTable.DimensionAttributeSet;
                dimCtrl = custPaymModeTable.DimCtrl;
                transFieldId = fieldNum(LedgerJournalTrans, CustTransId);
                break;

            case tableNum(VendTrans):
                VendPaymModeTable vendPaymModeTable = VendPaymModeTable::find(_custVendTrans.PaymMode);
                dimAttrSet = vendPaymModeTable.DimensionAttributeSet;
                dimCtrl = vendPaymModeTable.DimCtrl;
                transFieldId = fieldNum(LedgerJournalTrans, VendTransId);
                break;
        }

        DimensionDefault defaultDimension;
        if (dimCtrl)
        {
            defaultDimension = this.proposalLineDimensionDimCtrl(
                dimAttrSet,
                _custVendTrans,
                transFieldId);
        }
        else if (!SkipLedgerDimensionInPaymentProposalNOFlight::instance().isEnabled())
        {
            defaultDimension = this.proposalLineDimensionNoDimCtrl(_custVendTrans, transFieldId);
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalLineDimensionDimCtrl</Name>
				<Source><![CDATA[
    private DimensionDefault proposalLineDimensionDimCtrl(
        RefRecId _dimAttrSet,
        CustVendTrans _custVendTrans,
        FieldId _transFieldId)
    {
        DimensionAttributeValueCombination dimAttrValCombLoc;
        LedgerJournalTrans ledgerJournalTransLoc;
        DimensionDefault defaultDimension;

        if (!_transFieldId)
        {
            return defaultDimension;
        }

        select firstonly MainAccount from dimAttrValCombLoc
        exists join ledgerJournalTransLoc
            where ledgerJournalTransLoc.(_transFieldId) == _custVendTrans.RecId
                && ledgerJournalTransLoc.TransDate == _custVendTrans.TransDate
                && ledgerJournalTransLoc.OffsetLedgerDimension == dimAttrValCombLoc.RecId;

        if (dimAttrValCombLoc.MainAccount)
        {
            DimensionAttributeLevelValueView dimAttrLevelValueView;
            DimensionAttributeSetItem dimAttrSetItem;
            DimensionAttributeValue dimAttrValue;
            DimensionAttributeValueSetStorage valueSetStorage = new DimensionAttributeValueSetStorage();

            while select DimensionAttribute, AttributeValueRecId from dimAttrLevelValueView
                where dimAttrLevelValueView.ValueCombinationRecId == dimAttrValCombLoc.RecId
            join HashKey, EntityInstance from dimAttrValue
                where dimAttrValue.RecId == dimAttrLevelValueView.AttributeValueRecId
            exists join dimAttrSetItem
                where dimAttrSetItem.DimensionAttribute == dimAttrLevelValueView.DimensionAttribute
                    && dimAttrSetItem.DimensionAttributeSet == _dimAttrSet
                    && dimAttrSetItem.EnumerationValue == NoYes::Yes
            {
                valueSetStorage.addItemValues(
                    dimAttrLevelValueView.DimensionAttribute,
                    dimAttrLevelValueView.AttributeValueRecId,
                    dimAttrValue.HashKey,
                    dimAttrValue.EntityInstance);
            }

            List dimensionSources = new List(Types::Class);
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getValueSetStorageDimensionSpecifiers(valueSetStorage));
            LedgerDimensionDefaultingEngine defaultingEngine = LedgerDimensionDefaultingEngine::constructForMainAccountId(
                dimAttrValCombLoc.MainAccount,
                DimensionHierarchy::getAccountStructure(dimAttrValCombLoc.MainAccount));
            defaultingEngine.applyDimensionSources(dimensionSources);

            defaultDimension = defaultingEngine.getLedgerDimension();
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalLineDimensionNoDimCtrl</Name>
				<Source><![CDATA[
    private DimensionDefault proposalLineDimensionNoDimCtrl(CustVendTrans _custVendTrans, FieldId _transFieldId)
    {
        LedgerJournalTrans ledgerJournalTrans;

        if (_transFieldId)
        {
            select firstonly OffsetLedgerDimension from LedgerJournalTrans
                where LedgerJournalTrans.(_transFieldId) == _custVendTrans.RecId
                    && LedgerJournalTrans.TransDate == _custVendTrans.TransDate;
        }

        return LedgerJournalTrans.OffsetLedgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>