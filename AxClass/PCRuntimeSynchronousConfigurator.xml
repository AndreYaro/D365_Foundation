<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeSynchronousConfigurator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class wraps the .NET configurator exposing a synchronous API.
/// </summary>
public class PCRuntimeSynchronousConfigurator
{
    protected Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.IConfigurator configurator;
    protected Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.SolverStrategy solverStrategy = Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.SolverStrategy::Default;
    protected Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.CalculationSummaryEventArgs calculationSummaryEventArgs;
    protected System.String valuesByXPath;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCRuntimeSynchronousConfigurator construct()
    {
        return new PCRuntimeSynchronousConfigurator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSolverStrategy</Name>
				<Source><![CDATA[
    public Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.SolverStrategy parmSolverStrategy(Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.SolverStrategy _solverStrategy = solverStrategy)
    {
        solverStrategy = _solverStrategy;
 
        return solverStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculationSummaryEventArgs</Name>
				<Source><![CDATA[
    public Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.CalculationSummaryEventArgs getCalculationSummaryEventArgs()
    {
        return calculationSummaryEventArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the model passed as argument with the values passed as argument.
    /// </summary>
    /// <param name="_model">
    /// The model to be configured.
    /// </param>
    /// <param name="_valuesByXPath">
    /// The input values.
    /// </param>
    /// <param name="_timeoutInMilliseconds">
    /// Timeout limit in milliseconds.
    /// </param>
    /// <returns>
    /// A state of the configuration.
    /// </returns>
    /// <remarks>
    /// Returns incomplete if an exception is thrown.
    /// </remarks>
    public Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.IsConfigurationComplete configure(str _model, str _valuesByXPath, int _timeoutInMilliseconds = 120000)
    {
        Debug::assert(_model != '');
        Debug::assert(_valuesByXPath != '');
        
        try
        {
            Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.IsConfigurationComplete ret;
            
            valuesByXPath = _valuesByXPath;

            configurator = Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Configurator::Create(_model, true);
            
            this.setSolverStrategy();
            this.setConfiguratorParameters();
            this.loadAttributeValues();
            
            ret = configurator.StartSessionAndWaitForCompletion(_timeoutInMilliseconds);

            this.setCalculationSummaryEventArgs();

            return ret;
            
        }
        catch (Exception::CLRError)
        {
            error(this.getClrErrorMessage());
        }
        
        return Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.IsConfigurationComplete::Contradiction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllAssignedValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the assigned values.
    /// assignments.
    /// </summary>
    /// <returns>
    /// The assigned values.
    /// </returns>
    public str getAllAssignedValues()
    {
        str allAssignedValues;
        
        try
        {
            allAssignedValues = configurator.AllAssignedValues;
        }
        
        catch(Exception::CLRError)
        {
            error(this.getClrErrorMessage());
        }
        
        return allAssignedValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSolverStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the solver strategy.
    /// </summary>
    protected void setSolverStrategy()
    {
        configurator.SetSolverStrategy(solverStrategy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfiguratorParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets parameters for the configurator.
    /// </summary>
    protected void setConfiguratorParameters()
    {
        // values are in milliseconds
        configurator.SetEventBatchInterval(1000);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalculationSummaryEventArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the calculation result summary.
    /// </summary>
    protected void setCalculationSummaryEventArgs()
    {
        if (configurator is Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Configurator)
        {
            var productConfigurator = configurator as Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Configurator;

            calculationSummaryEventArgs = productConfigurator.GetCalculationResult();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads assignments and default values for attributes
    /// </summary>
    protected void loadAttributeValues()
    {
        try
        {
            configurator.LoadAttributeValuesByXPath(valuesByXPath);
        }

        catch (Exception::CLRError)
        {
            error(this.getClrErrorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClrErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest CLR exception error message.
    /// </summary>
    /// <returns>An error message.</returns>
    [Hookable(false)]
    protected str getClrErrorMessage()
    {
        const char delimiterSpace = ' ';
        str exceptionMessage;
        System.Exception exObject = CLRInterop::getLastException();
        
        if (exObject)
        {
            // Ignore the first message since it is always a fixed message of
            // "Exception has been thrown from target of invocation", this is from the reflection API being used
            // "ClrObject could not be created." - This is also of no use in most cases
            System.Exception innerException = exObject.get_InnerException();
            while (innerException)
            {
                exceptionMessage = exceptionMessage + delimiterSpace + CLRInterop::getAnyTypeForObject(innerException.get_Message());
                innerException = innerException.get_InnerException();
            }
        }

        return exceptionMessage;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>