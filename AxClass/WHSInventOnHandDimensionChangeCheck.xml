<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventOnHandDimensionChangeCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is used to check if a dimensions change will cause the on-hand to go negative.
/// </summary>
public class WHSInventOnHandDimensionChangeCheck
{
    private InventTable         inventTable;
    private InventDim           fromInventDim;
    private InventDim           toInventDim;
    private InventQty           inventQtyChanged;
    private PdsCWInventQty      cwQuantity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newCheckWithCatchWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// A new instance of the class that considers catch weight.
    /// </summary>
    /// <param name = "_inventTable">The item to check the on-hand for.</param>
    /// <param name = "_fromInventDim">The from-dimension.</param>
    /// <param name = "_toInventDim">The new dimension.</param>
    /// <param name = "_inventQtyChanged">The quantity being changed.</param>
    /// <param name = "_cwQuantity">The catch weight quantity being changed.</param>
    /// <returns>A new instance of the class.</returns>
    public static WHSInventOnHandDimensionChangeCheck newCheckWithCatchWeight(
        InventTable         _inventTable,
        InventDim           _fromInventDim,
        InventDim           _toInventDim,
        InventQty           _inventQtyChanged,
        PdsCWInventQty      _cwQuantity)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightQuantityLogic(funcName(), _inventTable.ItemId, _cwQuantity))
        {
            WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _inventTable.ItemId);
        }

        return WHSInventOnHandDimensionChangeCheck::createCheck(_inventTable, _fromInventDim, _toInventDim, _inventQtyChanged, _cwQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCheck</Name>
				<Source><![CDATA[
    private static WHSInventOnHandDimensionChangeCheck createCheck(
        InventTable         _inventTable,
        InventDim           _fromInventDim,
        InventDim           _toInventDim,
        InventQty           _inventQtyChanged,
        PdsCWInventQty      _cwQuantity)
    {
        WHSCatchWeightTelemetryLogger::logCatchWeightConflictingQuantities(funcName(), _inventTable.ItemId, _cwQuantity, _inventQtyChanged);
        
        WHSInventOnHandDimensionChangeCheck check = WHSInventOnHandDimensionChangeCheck::construct();

        check.initFromParameters(_inventTable, _fromInventDim, _toInventDim, _inventQtyChanged, _cwQuantity);

        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    private void initFromParameters(
        InventTable         _inventTable,
        InventDim           _fromInventDim,
        InventDim           _toInventDim,
        InventQty           _inventQtyChanged,
        PdsCWInventQty      _cwQuantity)
    {
        this.inventTable       = _inventTable;
        this.fromInventDim     = _fromInventDim;
        this.toInventDim       = _toInventDim;
        this.inventQtyChanged  = _inventQtyChanged;
        this.cwQuantity        = _cwQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSInventOnHandDimensionChangeCheck construct()
    {
        return new WHSInventOnHandDimensionChangeCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>hierarchyList</Name>
				<Source><![CDATA[
    private List hierarchyList()
    {
        return WHSReservationHierarchyProvider::construct()
            .getDimListAllFromInventTable(inventTable, WHSReservationHierarchySortOrder::BottomUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsId</Name>
				<Source><![CDATA[
    private CreatedTransactionId ttsId()
    {
        CreatedTransactionId ttsId;

        if (InventUpdateOnhandGlobal::mustAddInventSumDeltaOnhand(inventTable.ItemId))
        {
            ttsId = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();
        }

        return ttsId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the dimensions change can be done without causing negative inventory.
    /// </summary>
    /// <returns>true if the check passes; otherwise, false.</returns>
    public boolean check()
    {
        boolean checkPassed = true;

        CreatedTransactionId ttsId = this.ttsId();
        ListEnumerator le = this.hierarchyList().getEnumerator();
        
        InventDim inventDim;
        buf2Buf(toInventDim, inventDim);

        // Check each dimension combination to see if quantity is available
        // when new dim has a field filled and the old dim does not
        while (le.moveNext())
        {
            WHSReservationHierarchyElementData hierarchyElementData = le.current();

            FieldId fieldId = hierarchyElementData.parmDimensionFieldId();

            if (toInventDim.(fieldId)
                && (fromInventDim.(fieldId) != toInventDim.(fieldId)))
            {
                // check just the single row in WHSInventReserve for available qty
                inventDim = InventDim::findOrCreate(inventDim);

                WHSInventReserve inventReserve = WHSInventReserve::find(inventTable.ItemId, inventDim.InventDimId);

                if (ttsId)
                {
                    WHSInventReserveDeltaView   deltaView;
        
                    // Add Sum Delta in
                    select SumOfAvailPhysical, SumOfCWAvailPhysical from deltaView
                        where deltaView.ItemId          == inventTable.ItemId
                            && deltaView.ttsId          == ttsId
                            && deltaView.InventDimId    == inventDim.InventDimId;

                    if (inventReserve.IsItemCatchWeightEnabled)
                    {
                        inventReserve.CWAvailPhysical += deltaView.SumOfCWAvailPhysical;
                    }
                    else
                    {
                        inventReserve.AvailPhysical += deltaView.SumOfAvailPhysical;
                    }
                }

                if (inventReserve.IsItemCatchWeightEnabled)
                {
                    if (inventReserve.CWAvailPhysical < cwQuantity)
                    {
                        setPrefix(strFmt("@WAX2541", fromInventDim.InventDimId, toInventDim.InventDimId, inventTable.ItemId, inventDim.InventDimId));
                        checkPassed = checkFailed(strFmt("@SYS54812", cwQuantity, inventReserve.CWAvailPhysical));
                    }
                }
                else if (inventReserve.AvailPhysical < inventQtyChanged)
                {
                    setPrefix(strFmt("@WAX2541", fromInventDim.InventDimId, toInventDim.InventDimId, inventTable.ItemId, inventDim.InventDimId));
                    checkPassed = checkFailed(strFmt("@SYS54812", inventQtyChanged, inventReserve.AvailPhysical));
                }
            }

            inventDim.clearField(fieldId);
        }

        return checkPassed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>