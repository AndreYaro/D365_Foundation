<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingDimTracingInventTransOriginDTO</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Instances of the <c>InventTrackingDimTracingInventTransOriginDTO</c> class are used as data transportation objects
/// which carry the item tracing related information about an inventory transaction originator.
/// </summary>
public class InventTrackingDimTracingInventTransOriginDTO implements SysPackable
{
    RecId               recId;
    InventTransType     referenceCategory;
    InventTransRefId    referenceId;
    InventTransId       inventTransId;
    ItemId              itemId;
    DirPartyRecId       party;

    #LOCALMACRO.CurrentList
        recId,
        referenceCategory,
        referenceId,
        inventTransId,
        itemId,
        party
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventTrackingDimTracingInventTransOriginDTO construct()
    {
        return new InventTrackingDimTracingInventTransOriginDTO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTrackingDimTracingInventTransOriginDTO</c> class for the specified inventory transaction originator.
    /// </summary>
    /// <param name = "_inventTransOrigin">The inventory transaction originator.</param>
    /// <returns>A new instance of the <c>InventTrackingDimTracingInventTransOriginDTO</c> class.</returns>
    public static InventTrackingDimTracingInventTransOriginDTO newFromInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        var dto = InventTrackingDimTracingInventTransOriginDTO::construct();
        dto.initFromInventTransOrigin(_inventTransOrigin);
        return dto;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current object based on the specified inventory transaction originator.
    /// </summary>
    /// <param name = "_inventTransOrigin">The inventory transaction originator.</param>
    protected void initFromInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        recId = _inventTransOrigin.RecId;
        referenceCategory = _inventTransOrigin.ReferenceCategory;
        referenceId = _inventTransOrigin.ReferenceId;
        inventTransId = _inventTransOrigin.InventTransId;
        itemId = _inventTransOrigin.ItemId;
        party = _inventTransOrigin.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RecId of the inventory transaction originator.
    /// </summary>
    /// <returns>The RecId.</returns>
    public RecId recId()
    {
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the reference category of the inventory transaction originator.
    /// </summary>
    /// <returns>The reference category.</returns>
    public InventTransType referenceCategory()
    {
        return referenceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the reference number of the inventory transaction originator.
    /// </summary>
    /// <returns>The reference number.</returns>
    public InventTransRefId referenceId()
    {
        return referenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the lot ID of the inventory transaction originator.
    /// </summary>
    /// <returns>The lot ID.</returns>
    public InventTransId inventTransId()
    {
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item number of the inventory transaction originator.
    /// </summary>
    /// <returns>The item number.</returns>
    public ItemId itemId()
    {
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the object into a container.
    /// </summary>
    /// <returns>A container containing the packed object.</returns>
    public container pack()
    {
        return [#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the container into the current object.
    /// </summary>
    /// <param name = "_packed">The container containing a packed <c>InventTrackingDimTracingInventTransOriginDTO</c> object.</param>
    /// <returns>true, if unpacking succeeded; otherwise, false.</returns>
    public boolean unpack(container _packed)
    {
        [#CurrentList] = _packed;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTrackingDimTracingInventTransOriginDTO</c> class from a packed container.
    /// </summary>
    /// <param name = "_packed">The container containing a packed <c>InventTrackingDimTracingInventTransOriginDTO</c> object.</param>
    /// <returns>A new instance of the <c>InventTrackingDimTracingInventTransOriginDTO</c> class.</returns>
    public static InventTrackingDimTracingInventTransOriginDTO create(container _packed)
    {
        InventTrackingDimTracingInventTransOriginDTO inventTransOriginDTO = InventTrackingDimTracingInventTransOriginDTO::construct();
        inventTransOriginDTO.unpack(_packed);
        return inventTransOriginDTO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventTable</c> record for the current inventory transaction originator.
    /// </summary>
    /// <returns>The <c>InventTable</c> record.</returns>
    public InventTable inventTable()
    {
        return InventTable::find(ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the inventory unit symbol for the current inventory transaction originator.
    /// </summary>
    /// <returns>The inventory unit symbol.</returns>
    public UnitOfMeasureSymbol inventUnitId()
    {
        return InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the catch weight unit symbol for the current inventory transaction originator.
    /// </summary>
    /// <returns>The catch weight unit symbol.</returns>
    public UnitOfMeasureSymbol catchWeightUnitId()
    {
        return PdsCatchWeight::cwUnitId(itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the customer or vendor account number for the current inventory transaction originator when applicable.
    /// </summary>
    /// <returns>The customer or vendor account number, when applicable; otherwise, an empty string.</returns>
    public CustVendAC custVendAccountNumber()
    {
        return InventTransOrigin::custVendAccountNumberByPartyAndReferenceCategory(party, referenceCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assemblyInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the related assembly inventory transaction originator for the current inventory transaction originator.
    /// </summary>
    /// <returns>The related assembly inventory transaction originator for the current inventory transaction originator.</returns>
    public InventTransOrigin assemblyInventTransOrigin()
    {
        return InventTransOrigin::assemblyInventTransOriginByOriginRecId(recId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>