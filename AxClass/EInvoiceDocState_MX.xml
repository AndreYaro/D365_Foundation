<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceDocState_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceDocState_MX</c> class update the data after a electronic invoice is processed by a web service.
/// </summary>
class EInvoiceDocState_MX
{
    EInvoiceJour_MX eInvoiceJour;
    TransDate userManualInputCancelDate;
    EInvoiceCFDICancelKeyName_MX userManualInputCancelKeyName;
    protected const str MessageOk ='1';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel a electronic invoice.
    /// </summary>
    /// <param name="_manual">True if it is being manually cancelled and false if the the cancel will be processed by a web service.</param>
    /// <exception cref="Exception::Error">Only approved and cancelRejected invoices can be cancelled.</exception>
    public void cancelEInvoice(boolean _manual = false)
    {
        if (_manual)
        {
            this.cancelManually();
        }
        else
        {
            if (this.checkCancel())
            {
                switch (einvoiceJour.CFDIStatus)
                {
                    case EInvoiceCFDIStatus_MX::Approved:
                    case EInvoiceCFDIStatus_MX::CancelRejected:

                        if (eInvoiceJour.CFDICancelReason == EInvoiceCFDICancelReason_MX::Substitution
                            && eInvoiceJour.CancelSubstitution == '')
                        {
                            throw error("@MexicoCFDI:CFDICancelSubstitutionError_NoSubstitutor");
                        }

                        this.cancelSubmittedInvoice();
                        break;

                    default:
                        throw error(Error::wrongUseOfFunction(funcname()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelManually</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manually cancel a electronic invoice.
    /// </summary>
    protected void cancelManually()
    {
        EInvoiceHist_MX eInvoiceHist;

        const str ManualCancelXml = '<Resultado Descripcion="OK" IdRespuesta="1" />';

        if (this.askUser())
        {
            ttsbegin;
            eInvoiceJour.selectForUpdate(true);

            eInvoiceJour.CFDICancelDate     = DateTimeUtil::newDateTime(userManualInputCancelDate, 0, DateTimeUtil::getCompanyTimeZone());
            eInvoiceJour.CFDICancelKeyName  = userManualInputCancelKeyName;
            eInvoiceJour.CFDIMessageType    = EInvoiceCFDIMessageType_MX::Cancel;
            eInvoiceJour.CFDIMessageStatus  = EInvoiceCFDIMessageStatus_MX::Processed;
            eInvoiceJour.CFDIStatus         = EInvoiceCFDIStatus_MX::ManualCancel;
            eInvoiceJour.CFDIResponse       = ManualCancelXml;

            eInvoiceJour.update();
            ttscommit;

            eInvoiceHist.refRecId           = eInvoiceJour.RecId;
            eInvoiceHist.Environment        = EInvoiceCFDIParameters_MX::find().CFDIEnvironment;
            eInvoiceHist.PACAccount         = EInvoiceCFDIParameters_MX::find().PACAccount;
            eInvoiceHist.TransDateTime      = DateTimeUtil::utcNow();
            eInvoiceHist.Status             = eInvoiceJour.CFDIStatus;

            eInvoiceHist.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>askUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a dialog box to ask user for information required to cancel a CFDI manually.
    /// </summary>
    /// <returns>
    /// True if the user informed all data required and clicked OK.
    /// </returns>
    protected boolean askUser()
    {
        Dialog          dialog          = new Dialog("@SYS4081647");

        DialogField     cancelDate      = dialog.addField(extendedTypeStr(TransDate));
        DialogField     cancelKeyName   = dialog.addField(extendedTypeStr(EInvoiceCFDICancelKeyName_MX));

        dialog.run();

        if (dialog.closedOk() && cancelDate.value() && cancelKeyName.value())
        {
            userManualInputCancelDate        = cancelDate.value();
            userManualInputCancelKeyName     = cancelKeyName.value();

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelSubmittedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel a electronic invoice that has been send through a web service.
    /// </summary>
    protected void cancelSubmittedInvoice()
    {
        str xmlDoc;
        System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();

        try
        {
            xmlDoc = EInvoiceXMLFormat_MX::generateCancel(eInvoiceJour);
        }

        catch
        {
            stopwatch.Stop();
            this.updateTelemetry(false, stopwatch.ElapsedMilliseconds);
            throw Exception::Error;
        }

        finally
        {
            stopwatch.Stop();
            this.updateTelemetry(xmlDoc != '', stopwatch.ElapsedMilliseconds);

            ttsbegin;
            eInvoiceJour.selectForUpdate(true);
            eInvoiceJour.CFDIMessageType    = EInvoiceCFDIMessageType_MX::Cancel;
            eInvoiceJour.CFDIMessageStatus  = EInvoiceCFDIMessageStatus_MX::Waiting;
            eInvoiceJour.CFDIStatus         = EInvoiceCFDISTatus_MX::Blank;
            eInvoiceJour.XMLDoc = xmlDoc;
            eInvoiceJour.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if document can be canceled.
    /// </summary>
    /// <returns>
    /// True, if document can be canceled; overvise false.
    /// </returns>
    protected boolean checkCancel()
    {
        boolean ret = true;
        EInvoiceCFDIReference_MX eInvoiceCFDIReference;
        EInvoiceJour_MX eInvoiceJourLocal;

        if (eInvoiceJour.CFDICancelReason != EInvoiceCFDICancelReason_MX::Substitution)
        {
            if (isFlightEnabled(LocalizationFlights::eInvoiceCFDIUseReverseReferenceOrder))
            {
                select firstOnly RecId from eInvoiceCFDIReference
                    where eInvoiceCFDIReference.EInvoiceJour_MX == eInvoiceJour.RecId
                    exists join eInvoiceJourLocal
                        where eInvoiceJourLocal.CFDIUUID == eInvoiceCFDIReference.CFDIUUID
                            && eInvoiceJourLocal.CFDIStatus != EInvoiceCFDIStatus_MX::Canceled;
            }
            else
            {
                select firstOnly RecId from eInvoiceCFDIReference
                    where eInvoiceCFDIReference.CFDIUUID == eInvoiceJour.CFDIUUID
                    exists join eInvoiceJourLocal
                        where eInvoiceJourLocal.Recid == eInvoiceCFDIReference.EInvoiceJour_MX
                            && eInvoiceJourLocal.CFDIStatus != EInvoiceCFDIStatus_MX::Canceled;
            }
        }

        if (eInvoiceCFDIReference)
        {
            ret = checkFailed("@MexicoCFDI:CancelWarning");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>EInvoiceHist_MX</c> table after the electronic invoice has been processed.
    /// </summary>
    /// <param name="_xmlDocReader">A <c>EInvoiceCFDIXMLDocReader_MX</c> object with the web service response.</param>
    protected void createHist(EInvoiceXMLDocReader_MX _xmlDocReader)
    {
        EInvoiceHist_MX     eInvoiceHist;

        eInvoiceHist.RefRecId           = eInvoiceJour.RecId;
        eInvoiceHist.OutgoingMessage    = eInvoiceJour.XMLDoc;
        eInvoiceHist.IncomingMessage    = _xmlDocReader.toString();
        eInvoiceHist.Environment        = EInvoiceCFDIParameters_MX::find().CFDIEnvironment;
        eInvoiceHist.PACAccount         = EInvoiceCFDIParameters_MX::find().PACAccount;
        eInvoiceHist.TransDateTime      = DateTimeUtil::utcNow();
        eInvoiceHist.Status             = eInvoiceJour.CFDIStatus;
        eInvoiceHist.WebService         = this.getWebServiceType();

        eInvoiceHist.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWebServiceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets web service.
    /// </summary>
    /// <returns>
    /// Web service type.
    /// </returns>
    protected EInvoiceCFDIWebService_MX getWebServiceType()
    {
        EInvoiceCFDIWebService_MX ret;

        switch (eInvoiceJour.CFDIMessageType)
        {
            case EInvoiceCFDIMessageType_MX::Submit:
                ret = EInvoiceCFDIWebService_MX::Send;
                break;

            case EInvoiceCFDIMessageType_MX::Cancel:
                ret = EInvoiceCFDIWebService_MX::Cancel;
                break;

            case EInvoiceCFDIMessageType_MX::CancelRequest :
                ret = EInvoiceCFDIWebService_MX::CancelRequest;
                break;

            default:
                ret = EInvoiceCFDIWebService_MX::None;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the electronic invoice after the web service response.
    /// </summary>
    /// <param name="_response">A <c>EInvoiceMsgStringStream_MX</c> object with the web service response.</param>
    /// <exception cref="Exception::Error">The response of the web service must be a valid XML.</exception>
    public void messageSent(EInvoiceMsgStringStream_MX _response)
    {
        EInvoiceXMLDocReader_MX xmlDocReader;
        boolean isRetail = eInvoiceJour.isRetailCFDIEInvoice();

        try
        {
            xmlDocReader = EInvoiceXMLDocReader_MX::constructFromResponseMessage(eInvoiceJour.CFDIVersion, _response.toString());
        }
        catch
        {
            str outcome = "@SYS4081907";
            if (isRetail)
            {
                RetailCFDITelemetry_MX::submitCFDIResult(funcName(), eInvoiceJour, false, outcome);
            }
            throw error(outcome);
        }

        str responseID = xmlDocReader.getResponse();

        boolean isOK = responseID == MessageOk;

        if (isOK)
        {
            this.processMessageOk(xmlDocReader);
        }
        else
        {
            this.processMessageWithError(xmlDocReader);
        }

        if (isRetail)
        {
            RetailCFDITelemetry_MX::submitCFDIResult(funcName(), eInvoiceJour, isOK, responseID);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EInvoiceDocState_MX</c> class.
    /// </summary>
    /// <param name="_eInvoiceJour">A <c>EInvoiceJour_MX</c> record.</param>
    protected void new(EInvoiceJour_MX _eInvoiceJour)
    {
        eInvoiceJour = _eInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMessageCancel</Name>
				<Source><![CDATA[
    private void processMessageCancel(str _eStatus)
    {
        const str EStatusCancel = 'Cancelado';
        const str EStatusRejected = 'Rechazado';
        const str EStatusInProcess = 'EnProceso';
        
        switch (_eStatus)
        {
            case EStatusCancel:
                eInvoiceJour.CFDIStatus = EInvoiceCFDIStatus_MX::Canceled;
                eInvoiceJour.cfdiMessageStatus = EInvoiceCFDIMessageStatus_MX::Processed;
                break;
            case EStatusRejected:
                eInvoiceJour.CFDIStatus = EInvoiceCFDIStatus_MX::CancelRejected;
                eInvoiceJour.cfdiMessageStatus = EInvoiceCFDIMessageStatus_MX::Processed;
                break;
            case EStatusInProcess:
                eInvoiceJour.CFDIStatus = EInvoiceCFDIStatus_MX::InProcess;
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMessageOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process a aproved invoice.
    /// </summary>
    /// <param name="_xmlDocReader">A <c>EInvoiceCFDIXMLDocReader_MX</c> object with the web service response.</param>
    protected void processMessageOk(EInvoiceXMLDocReader_MX _xmlDocReader)
    {
        ttsBegin;
        eInvoiceJour.selectForUpdate(true);
        eInvoiceJour.CFDIResponse = _xmlDocReader.getResponseNode();

        switch (eInvoiceJour.CFDIMessageType)
        {
            case EInvoiceCFDIMessageType_MX::Submit :
                eInvoiceJour.CFDIUUID                   = _xmlDocReader.getResponseUUID();
                eInvoiceJour.CFDIDateTimeStamp          = EInvoiceDocState_MX::removeTimeZoneOffset(DateTimeUtil::parse(_xmlDocReader.getResponseFechaTimbrado()));
                eInvoiceJour.CFDIStamp                  = _xmlDocReader.getResponseselloCFD();
                eInvoiceJour.CFDISATStamp               = _xmlDocReader.getResponseSelloSAT();
                eInvoiceJour.CFDISATCertificateNumber   = _xmlDocReader.getResponseSATCertificateNumber();
                eInvoiceJour.CFDIStatus                 = EInvoiceCFDIStatus_MX::Approved;
                eInvoiceJour.cfdiMessageStatus          = EInvoiceCFDIMessageStatus_MX::Processed;

                this.createHist(_xmlDocReader);
                eInvoiceJour.XMLDoc                     = _xmlDocReader.getDeclaration() + _xmlDocReader.getResponseComprobanteNode();
                break;

            case EInvoiceCFDIMessageType_MX::Cancel:
                eInvoiceJour.CFDICancelationId = _xmlDocReader.getCancelationId();
                eInvoiceJour.CFDIStatus = EInvoiceCFDIStatus_MX::InProcess;

                this.createHist(_xmlDocReader);
                eInvoiceJour.XMLDoc = EInvoiceXMLFormat_MX::generateCancelRequest(eInvoiceJour);
                eInvoiceJour.CFDIMessageType = EInvoiceCFDIMessageType_MX::CancelRequest;
                break;

            case EInvoiceCFDIMessageType_MX::CancelRequest:
                this.processMessageCancel(_xmlDocReader.getEStatus());
            
                if (!this.updateHist(_xmlDocReader))
                {
                    this.createHist(_xmlDocReader);
                }
                break;

            default:
                break;
        }

        eInvoiceJour.update();
        ttscommit;

        if (eInvoiceJour.CFDIStatus == EInvoiceCFDIStatus_MX::Approved)
        {
            this.sendMail();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMessageWithError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process a rejected invoice.
    /// </summary>
    /// <param name="_xmlDocReader">A <c>EInvoiceCFDIXMLDocReader_MX</c> object with the web service response.</param>
    protected void processMessageWithError(EInvoiceXMLDocReader_MX _xmlDocReader)
    {
        #define.UnavailableService('601')

        ttsbegin;
        eInvoiceJour.selectForUpdate(true);
        eInvoiceJour.CFDIResponse = _xmlDocReader.toString();

        switch (eInvoiceJour.CFDIMessageType)
        {
            case EInvoiceCFDIMessageType_MX::Submit :
                eInvoiceJour.CFDIStatus = EInvoiceCFDIStatus_MX::Rejected;
                eInvoiceJour.CFDIMessageStatus = EInvoiceCFDIMessageStatus_MX::Processed;
                break;

            case EInvoiceCFDIMessageType_MX::Cancel :
            case EInvoiceCFDIMessageType_MX::CancelRequest :
                eInvoiceJour.CFDIStatus = EInvoiceCFDIStatus_MX::CancelRejected;

                if (_xmlDocReader.getResponse() == #UnavailableService)
                {
                    eInvoiceJour.CFDIMessageStatus = EInvoiceCFDIMessageStatus_MX::Waiting;
                }
                else
                {
                    eInvoiceJour.CFDIMessageStatus = EInvoiceCFDIMessageStatus_MX::Processed;
                }
                break;
        }

        eInvoiceJour.update();

        this.createHist(_xmlDocReader);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetEInvoiceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets EInvoice status.
    /// </summary>
    protected void resetEInvoiceStatus()
    {
        eInvoiceJour.cfdiMessageType = EInvoiceCFDIMessageType_MX::Submit;
        eInvoiceJour.cfdiMessageStatus = EInvoiceCFDIMessageStatus_MX::Waiting;
        eInvoiceJour.cfdiStatus = EInvoiceCFDIStatus_MX::Blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resubmitEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resubmits a electronic invoice
    /// </summary>
    public void resubmitEInvoice()
    {
        EInvoicePost_MX                 eInvoicePost;
        EPaymentPost_MX                 ePaymPost;
        EInvoiceXMLDocReader_MX         xmlEInvReader;
        CustTrans                       custTrans;
        CustSettlement                  custSettlement;

        switch (eInvoiceJour.RefTableId)
        {
            case tableNum(CustInvoiceJour) :
                eInvoicePost = EInvoicePost_MX::construct(CustInvoiceJour::findRecId(eInvoiceJour.RefRecId));
                break;

            case tableNum(ProjInvoiceJour) :
                eInvoicePost = EInvoicePost_MX::construct(ProjInvoiceJour::findRecId(eInvoiceJour.RefRecId));
                break;

            case tableNum(CustTrans) :
                ePaymPost = EPaymentPost_MX::construct();
                custTrans = CustTrans::find(eInvoiceJour.RefRecId);
                break;

            case tableNum(RetailStatementJour):
            case tableNum(RetailEInvoiceAggregatedStatement_MX):
                eInvoicePost = RetailEInvoicePost_MX::constructFromEInvoice(eInvoiceJour);
                break;

            case tableNum(CustSettlement) :
                select firstonly custSettlement
                    where custSettlement.RecId   == eInvoiceJour.RefRecId &&
                          custSettlement.TableId == eInvoiceJour.RefTableId;
                
                changeCompany (custSettlement.TransCompany)
                {
                    select firstonly custTrans
                        where custTrans.RecId == custSettlement.TransRecId
                          && custTrans.TransType == LedgerTransType::Payment;
                    ePaymPost = EPaymentPost_MX::construct();
                    
                }
                break;

            case tableNum(CustPackingSlipJour) :
                eInvoicePost = EInvoicePost_MX::construct(CustPackingSlipJour::findRecId(eInvoiceJour.RefRecId));
                break;
            
            case tableNum(InventTransferJour) :
                eInvoicePost = EInvoicePost_MX::construct(InventTransferJour::findRecId(eInvoiceJour.RefRecId));
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;
        eInvoiceJour.selectForUpdate(true);
        this.resetEInvoiceStatus();

        if (eInvoicePost)
        {
            eInvoiceJour.xmlDoc = eInvoicePost.createXMLDoc();
            xmlEInvReader = EInvoiceXMLDocReader_MX::construct(eInvoiceJour);
            eInvoiceJour.cfdiOriginalString = xmlEInvReader.getOriginalChain();
        }
        else if (ePaymPost)
        {
            [eInvoiceJour.xmlDoc, eInvoiceJour.cfdiOriginalString] = ePaymPost.getXMLDataCon(custTrans, eInvoiceJour.cfdiDocType, custSettlement);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        eInvoiceJour.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestMessageXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an EInvoicePost_MX given the source of the original invoice, and gets the xml of the request message.
    /// </summary>
    /// <returns>The request message formatted in xml.</returns>
    protected str getRequestMessageXml()
    {
        EInvoicePost_MX eInvoicePost;

        switch (eInvoiceJour.RefTableId)
        {
            case tableNum(CustInvoiceJour) :
                eInvoicePost = EInvoicePost_MX::construct(CustInvoiceJour::findRecId(eInvoiceJour.RefRecId));
                break;

            case tableNum(ProjInvoiceJour) :
                eInvoicePost = EInvoicePost_MX::construct(ProjInvoiceJour::findRecId(eInvoiceJour.RefRecId));
        }

        return eInvoicePost.createXMLDoc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send the approved invoice through eMail.
    /// </summary>
    protected void sendMail()
    {
        EInvoiceCFDIMailSender_MX   mailSender;

        if (eInvoiceJour.isRetailCFDIGlobalEInvoice())
        {
            return;
        }

        mailSender = EInvoiceCFDIMailSender_MX::construct(eInvoiceJour);
        mailSender.sendMail();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>EInvoiceHist_MX</c> table if electronic invoice has the same status.
    /// </summary>
    /// <param name="_xmlDocReader">
    /// A <c>EInvoiceCFDIXMLDocReader_MX</c> object with the web service response.
    /// </param>
    /// <returns>
    /// True, if table was updated; overvise false.
    /// </returns>
    protected boolean updateHist(EInvoiceXMLDocReader_MX _xmlDocReader)
    {
        EInvoiceHist_MX eInvoiceHist;
        boolean ret;
        
        select firstOnly forupdate eInvoiceHist
            order by TransDateTime desc
            where eInvoiceHist.RefRecId == eInvoiceJour.RecId;
        
        if (eInvoiceHist
            && eInvoiceHist.WebService == this.getWebServiceType()
            && eInvoiceHist.Status == eInvoiceJour.CFDIStatus)
        {
            eInvoiceHist.IncomingMessage = _xmlDocReader.toString();
            eInvoiceHist.TransDateTime = DateTimeUtil::utcNow();
            eInvoiceHist.update();
            
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EInvoiceDocState_MX construct(EInvoiceJour_MX _eInvoiceJour)
    {
        EInvoiceDocState_MX ret;
        switch (_eInvoiceJour.RefTableId)
        {
            case tableNum(CFDIWithholdingJour_MX) :
                ret = new CFDIWithholdingJournalDocState_MX(_eInvoiceJour);
                break;

            default:
                ret = new EInvoiceDocState_MX(_eInvoiceJour);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTelemetry</Name>
				<Source><![CDATA[
    private void updateTelemetry(boolean _result, int64 _elapsedTime)
    {
        GlobalizationInstrumentationHelper::featureRunWithPerformance(
                GlobalizationConstants::FeatureReferenceMX00012,
                funcName(),
                GlobalizationInstrumentationHelper::DefaultFeatureVersion,
                SysCountryRegionCode::countryInfo(),
                _elapsedTime,
                false,
                _result,
                _elapsedTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTimeZoneOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies Mexico central stardart time zone GMT-06:00 from specified datetime.
    /// </summary>
    /// <param name = "_dateTime">
    /// UTC date time value.
    /// </param>
    /// <returns>
    /// UTC date time with applied time zone.
    /// </returns>
    public static utcdatetime applyTimeZoneOffset(utcdatetime _dateTime)
    {
        return DateTimeUtil::applyTimeZoneOffset(_dateTime, TimeZone::GMTMINUS0600GUADALAJARA_MEXICOCITY);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTimeZoneOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes Mexico central stardart time zone GMT-06:00 from specified datetime.
    /// </summary>
    /// <param name = "_dateTime">
    /// UTC date time value.
    /// </param>
    /// <returns>
    /// UTC date time with removed time zone.
    /// </returns>
    public static utcdatetime removeTimeZoneOffset(utcdatetime _dateTime)
    {
        return DateTimeUtil::removeTimeZoneOffset(_dateTime, TimeZone::GMTMINUS0600GUADALAJARA_MEXICOCITY);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>