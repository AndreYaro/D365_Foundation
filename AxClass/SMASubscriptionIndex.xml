<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMASubscriptionIndex</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SMASubscriptionIndex extends SMASubscriptionBase implements BatchRetryable
{
    SMASubscriptionIndexChange      parmIndexChange;
    CurrencyCode                    parmCurrencycode;
    Amount                          parmChangeToAmount;
    Amount                          parmChangeToPct;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        parmIndexChange,
        parmCurrencycode,
        parmChangeToAmount,
        parmChangeToPct,
        showinfolog,
        showQtx
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>action</Name>
				<Source><![CDATA[
    public void action()
    {
        SMASubscriptionTable    subscriptionTable = SMASubscriptionTable::find(this.smaSubscriptionId(), true);

        subscriptionTable.indexSubscription(this.parmIndexChange(), this.parmChangeTo());
        subscriptionTable.update();

        // Subscription %1 action: %2 value: %3
        this.addToMessageList(strfmt("@SYS84261", this.smaSubscriptionId(),this.parmIndexChange(), this.parmChangeTo()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // Index Subscriptions
        return "@SYS84247";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(SMASubscriptionIndexDialog), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaults</Name>
				<Source><![CDATA[
    public void initDefaults(Args _args)
    {
        super(_args);

        this.parmIndexChange(SMASubscriptionIndexChange::None);
        this.parmChangeToAmount(0);
        this.parmChangeToPct(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args = this.parmArgs())
    {
        SMASubscriptionTable    subscriptionTable;
        ProjInvoiceTable        projInvoiceTable;
        ProjTable               projTable;
        FormDataSource          formDataSource;

        super(_args);

        if (_args.record() && FormDataUtil::getFormDataSource(_args.record()))
        {
            formDataSource = FormDataUtil::getFormDataSource(_args.record());

            if (!formDataSource.anyMarked())
            {
                switch (_args.dataset())
                {
                    case tablenum(SMASubscriptionTable) :
                        subscriptionTable = _args.record();
                        this.parmCurrencycode(subscriptionTable.CurrencyCode);

                        break;

                    case tablenum(ProjInvoiceTable) :
                        projInvoiceTable = _args.record();
                        this.parmCurrencycode(projInvoiceTable.CurrencyId);

                        break;

                    case tablenum(ProjTable) :
                        projTable = _args.record();
                        this.parmCurrencycode(ProjInvoiceTable::find(projTable.ProjInvoiceProjId).CurrencyId);

                        break;

                    default :
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeTo</Name>
				<Source><![CDATA[
    public Amount parmChangeTo()
    {
        Amount retAmount;

        switch (this.parmIndexChange())
        {
            case SMASubscriptionIndexChange::BasePriceByPct, SMASubscriptionIndexChange::IndexByPct :
                retAmount = this.parmChangeToPct();
                break;

            case SMASubscriptionIndexChange::BasePriceTo, SMASubscriptionIndexChange::IndexTo :
                retAmount = this.parmChangeToAmount();
                break;

            default :
                retAmount = 0;
                break;
        }

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeToAmount</Name>
				<Source><![CDATA[
    public Amount parmChangeToAmount(Amount _parmChangeToAmount = parmChangeToAmount)
    {
        parmChangeToAmount = _parmChangeToAmount;

        return parmChangeToAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeToPct</Name>
				<Source><![CDATA[
    public Amount parmChangeToPct(Amount _parmChangeToPct = parmChangeToPct)
    {
        parmChangeToPct = _parmChangeToPct;

        return parmChangeToPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencycode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencycode(CurrencyCode _parmCurrencycode = parmCurrencycode)
    {
        parmCurrencycode = _parmCurrencycode;

        return parmCurrencycode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIndexChange</Name>
				<Source><![CDATA[
    public SMASubscriptionIndexChange parmIndexChange(SMASubscriptionIndexChange _parmIndexChange = parmIndexChange)
    {
        parmIndexChange = _parmIndexChange;

        return parmIndexChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRangeFromCurrencyCode</Name>
				<Source><![CDATA[
    public void setQueryRangeFromCurrencyCode()
    {
        QueryBuildRange qBrCurrencyCode;

        qBrCurrencyCode = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).findRange(fieldnum(SMASubscriptionTable, CurrencyCode));

        if (!qBrCurrencyCode)
        {
            qBrCurrencyCode = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).addRange(fieldnum(SMASubscriptionTable, CurrencyCode));
        }

        qBrCurrencyCode.value(queryValue(this.parmCurrencycode()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = conpeek(_packedClass, 1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (this.parmIndexChange() == SMASubscriptionIndexChange::None)
        {
            // Invalid selection in field Change
            ret = checkFailed("@SYS84303");
        }

        if (!this.parmCurrencycode())
        {
            ret = checkFailed("@SYS76866");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SMASubscriptionIndex    subscriptionIndex = new SMASubscriptionIndex();

        subscriptionIndex.initDefaults(args);

        if (subscriptionIndex.prompt())
        {
            subscriptionIndex.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>