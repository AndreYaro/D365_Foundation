<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReportDestinationContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReportDestinationContract</c> class needed for passing destination action value to ER API
/// and contain destionation value setup logic for print and view actions.
/// </summary>
internal class ReportDestinationContract
{
    private ERDestinationAction destinationAction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDestinationAction</Name>
				<Source><![CDATA[
    public ERDestinationAction parmDestinationAction(ERDestinationAction _destinationAction = destinationAction)
    {
        destinationAction = _destinationAction;
        return destinationAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAsParmObjectFromPrintType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new contract object based on given enum value and sets it as parmObject of given controller's args.
    /// If the controller has no args object - it will be created.
    /// Any prevoius parmObject will be overwritten.
    /// </summary>
    /// <param name = "_controller">Controller to set parmObject into.</param>
    /// <param name = "_printType">Enum value destination action value will be set based on.</param>
    /// <param name = "_forcePrintJobSettings">Flag for using print management destinations. Set up by the user on form.</param>
    public static void setAsParmObjectFromPrintType(SrsReportRunController _controller, PrintCopyOriginal _printType, boolean _forcePrintJobSettings = false)
    {
        ERDestinationAction action;

        if (!_forcePrintJobSettings || !isFlightEnabled(LocalizationFlights::ForcePrintJobSettings))
        {
            action = ReportDestinationContract::getPrintDestinationAction(_printType);
        }
        else
        {
            action = ERDestinationAction::View;
        }

        if (action != ERDestinationAction::NoAction)
        {
            Args args = _controller.parmArgs();
            if (!args)
            {
                args = new Args();
                _controller.parmArgs(args);
            }

            ReportDestinationContract contract = new ReportDestinationContract();
            contract.parmDestinationAction(action);
            args.parmObject(contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAsParmObjectFromParmEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new contract object based of parmEnum value of given controller's args
    /// and sets it and the args' parmObject.
    /// If no parmEnum present or parmEnumType is not PrintCopyOriginal no new parmObject value will be set.
    /// Otherwise any previous parmObject will be overwritten.
    /// </summary>
    /// <param name = "_controller">Controller to set parmObject into.</param>
    /// <param name = "_forcePrintJobSettings">Flag for using print management destinations. Set up by the user on form.</param>
    public static void setAsParmObjectFromParmEnum(SrsReportRunController _controller, boolean _forcePrintJobSettings = false)
    {
        Args args = _controller.parmArgs();
        if (args && args.parmEnumType() == enumNum(PrintCopyOriginal))
        {
            ERDestinationAction action;

            if (!_forcePrintJobSettings || !isFlightEnabled(LocalizationFlights::ForcePrintJobSettings))
            {
                action = ReportDestinationContract::getPrintDestinationAction(args.parmEnum());
            }
            else
            {
                action = ERDestinationAction::View;
            }

            if (action != ERDestinationAction::NoAction)
            {
                ReportDestinationContract contract = new ReportDestinationContract();
                contract.parmDestinationAction(action);
                args.parmObject(contract);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ERDestinationAction value to pass to ER API for View and Print actions.
    /// Based on PrintCopyOriginal enum:
    /// for Original or Copy result value is View;
    /// for OriginalPrint it is Print.
    /// If corresponding feature is disabled NoAction result will be returned.
    /// </summary>
    /// <param name = "_printType">Enum value to switch between View and Print actions.</param>
    /// <returns>Destination action value.</returns>
    public static ERDestinationAction getPrintDestinationAction(PrintCopyOriginal _printType)
    {
        ERDestinationAction destinationAction = ERDestinationAction::NoAction;

        if (FeatureStateProvider::isFeatureEnabled(ReportDestinationContractWave1Feature::instance()))
        {
            switch (_printType)
            {
                case PrintCopyOriginal::Copy:
                case PrintCopyOriginal::Original:
                    destinationAction = ERDestinationAction::View;
                    break;
                case PrintCopyOriginal::OriginalPrint:
                    destinationAction = ERDestinationAction::Print;
                    break;
            }
        }

        return destinationAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendDestinationAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ERDestinationAction value to pass to ER API for Send actions.
    /// If corresponding feature is disabled NoAction result will be returned.
    /// </summary>
    /// <returns>Destination action value.</returns>
    public static ERDestinationAction getSendDestinationAction()
    {
        return FeatureStateProvider::isFeatureEnabled(ReportDestinationContractWave1Feature::instance())
            ? ERDestinationAction::Send
            : ERDestinationAction::NoAction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>