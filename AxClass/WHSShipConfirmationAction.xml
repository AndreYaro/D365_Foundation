<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConfirmationAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConfirmationAction</c> class is used to ship confirm a load or transport load.
/// </summary>
public abstract class WHSShipConfirmationAction
{
    #OCCRetryCount

    protected boolean skipLoadTender;
    protected boolean anyInvoicedLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSShipConfirmationAction</c> class.
    /// </summary>
    /// <param name = "_common">
    /// <c>Common</c> buffer used for this instance of the <c>WHSShipConfirmationAction</c> class.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSShipConfirmationAction</c> class.
    /// </returns>
    public static WHSShipConfirmationAction newFromBuffer(Common _common)
    {
        SysTableNameFactoryAttribute    attribute   = new SysTableNameFactoryAttribute(tableId2Name(_common.TableId));
        WHSShipConfirmationAction       instance    = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSShipConfirmationAction), attribute) as WHSShipConfirmationAction;

        if (!instance)
        {
            throw error(strFmt("@SYS23455",funcName()));
        }

        instance.initFromBuffer(_common);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of a table.
    /// </summary>
    /// <param name = "_common">
    /// <c>Common</c> buffer used for this instance of the table.
    /// </param>
    public abstract void initFromBuffer(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the load can be ship confirmed.
    /// </summary>
    /// <returns>
    /// true if load can be ship confirmed; otherwise, false
    /// </returns>
    public abstract boolean canShipConfirm()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableShipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if ship confirm button should be enabled.
    /// </summary>
    /// <returns>
    /// true if ship confirm button should be enabled; otherwise, false
    /// </returns>
    public abstract boolean canEnableShipConfirm()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the ship confirm process.
    /// </summary>
    /// <param name = "_shipDateTime">
    /// Actual ship date time of the load.
    /// </param>
    public abstract void shipConfirm(WHSLoadShipConfirmUTCDateTime _shipDateTime)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to create <c>InventTransferParmLine</c> record.
    /// </summary>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_inventTransferLine">
    /// A buffer of <c>InventTransferLine</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_workLine">
    /// A buffer of <c>WHSWorkLine</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_targetLicensePlateId">
    /// <c>WHSLicensePlateId</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_putWMSLocationId">
    /// <c>WMSlocationId</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_lineNum">
    /// <c>LineNum</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    protected void createInventTransParmLine(
        InventTransferParmTable _inventTransferParmTable,
        InventTransferLine      _inventTransferLine,
        WHSWorkLine             _workLine,
        WHSLicensePlateId       _targetLicensePlateId,
        WMSlocationId           _putWMSLocationId,
        LineNum                 _lineNum)
    {
        InventTransferParmLine inventTransferParmLine;
        this.initInventTransferParmLine(inventTransferParmLine,
                                        _inventTransferParmTable,
                                        _inventTransferLine,
                                        _workLine,
                                        _targetLicensePlateId,
                                        _putWMSLocationId, 
                                        _lineNum);

        inventTransferParmLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventTransferParmLine</c> record from the given arguments.
    /// </summary>
    /// <param name = "_inventTransferParmLine">
    /// The <c>InventTransferParmLine</c> record to be initialized.
    /// </param>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_inventTransferLine">
    /// A buffer of <c>InventTransferLine</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_workLine">
    /// A buffer of <c>WHSWorkLine</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_targetLicensePlateId">
    /// A <c>WHSLicensePlateId</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_putWMSLocationId">
    /// A <c>WMSlocationId</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_lineNum">
    /// The <c>LineNum</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    protected void initInventTransferParmLine(InventTransferParmLine _inventTransferParmLine,
                                              InventTransferParmTable _inventTransferParmTable,
                                              InventTransferLine _inventTransferLine,
                                              WHSWorkLine _workLine,
                                              WHSLicensePlateId _targetLicensePlateId,
                                              WMSlocationId _putWMSLocationId,
                                              LineNum _lineNum)
    {
        this.initInventTransferParmLineFromInventTransferLine(_inventTransferParmLine, _inventTransferLine);
        this.initInventTransferParmLineFromInventTransferParmTable(_inventTransferParmLine, _inventTransferParmTable);

        InventDim inventDim         = InventDim::find(_workLine.InventDimId);
        inventDim.wmsLocationId     = _putWMSLocationId;
        inventDim.LicensePlateId    = _targetLicensePlateId;
        inventDim                   = InventDim::findOrCreate(inventDim);

        _inventTransferParmLine.InventDimId  = inventDim.InventDimId;
        if (PdsGlobal::pdsIsCWItem(_inventTransferLine.ItemId))
        {
            _inventTransferParmLine.QtyShipNow = _workLine.CapturedWeight;
            _inventTransferParmLine.PdsCWQtyShipNow = _workLine.InventQtyWork;
        }
        else
        {
            _inventTransferParmLine.QtyShipNow   = _workLine.InventQtyWork;
        }
        _inventTransferParmLine.LineNum      = _lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferParmLineFromInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventTransferParmLine</c> record from the given <c>InventTransferLine</c> record.
    /// </summary>
    /// <param name = "_inventTransferParmLine">
    /// The <c>InventTransferParmLine</c> record to be initialized.
    /// </param>
    /// <param name = "_inventTransferLine">
    /// A buffer of <c>InventTransferLine</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    protected final void initInventTransferParmLineFromInventTransferLine(InventTransferParmLine _inventTransferParmLine, InventTransferLine _inventTransferLine)
    {
        _inventTransferParmLine.initFromInventTransferLine(_inventTransferLine);
        _inventTransferParmLine.InventTransId = _inventTransferLine.InventTransId;
        _inventTransferParmLine.InventTransIdTransit = _inventTransferLine.InventTransIdTransitTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferParmLineFromInventTransferParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventTransferParmLine</c> record from the given <c>InventTransferParmTable</c> record.
    /// </summary>
    /// <param name = "_inventTransferParmLine">
    /// The <c>InventTransferParmLine</c> record to be initialized.
    /// </param>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    protected final void initInventTransferParmLineFromInventTransferParmTable(InventTransferParmLine _inventTransferParmLine, InventTransferParmTable _inventTransferParmTable)
    {
        _inventTransferParmLine.TransferId = _inventTransferParmTable.TransferId;
        _inventTransferParmLine.ParmId = _inventTransferParmTable.ParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrderShipmentParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to create <c>InventTransferParmTable</c> record.
    /// </summary>
    /// <param name = "_transferId">
    /// <c>WHSOrderNum</c> used for creating the <c>InventTransferParmTable</c> record.
    /// </param>
    /// <param name = "_inventTransferMultiShip">
    /// <c>InventTransferMultiShip</c> instance used for creating the <c>InventTransferParmTable</c> record.
    /// </param>
    /// <param name = "_shipDateConfirmed">
    /// The confirmed ship date used for creating the <c>InventTransferParmTable</c> record.
    /// </param>
    /// <returns>
    /// Created <c>InventTransferParmTable</c> record
    /// </returns>
    protected InventTransferParmTable createTransferOrderShipmentParmTable(
        WHSOrderNum             _transferId,
        InventTransferMultiShip _inventTransferMultiShip,
        TMSApptUTCDateTime      _shipDateConfirmed)
    {
        InventTransferParmTable inventTransferParmTable = this.initTransferOrderShipmentParmTable(_transferId, _inventTransferMultiShip, _shipDateConfirmed);
        
        inventTransferParmTable.insert(false);

        return inventTransferParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransferOrderShipmentParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to initialize <c>InventTransferParmTable</c> record.
    /// </summary>
    /// <param name = "_transferId">
    /// <c>WHSOrderNum</c> used for initializing the <c>InventTransferParmTable</c> record.
    /// </param>
    /// <param name = "_inventTransferMultiShip">
    /// <c>InventTransferMultiShip</c> instance used for initializing the <c>InventTransferParmTable</c> record.
    /// </param>
    /// <param name = "_shipDateConfirmed">
    /// The confirmed ship date used for initializing the <c>InventTransferParmTable</c> record.
    /// </param>
    /// <returns>
    /// Initialized <c>InventTransferParmTable</c> record
    /// </returns>
    protected InventTransferParmTable initTransferOrderShipmentParmTable(
        WHSOrderNum             _transferId,
        InventTransferMultiShip _inventTransferMultiShip,
        TMSApptUTCDateTime      _shipDateConfirmed)
    {
        InventTransferParmTable inventTransferParmTable;
        inventTransferParmTable.initParmDefault();
        inventTransferParmTable.TransferId          = _transferId;
        inventTransferParmTable.UpdateType          = InventTransferUpdateType::Shipment;
        inventTransferParmTable.ShipUpdateQty       = InventTransferShipUpdateQty::PickedQty;
        inventTransferParmTable.ReceiveUpdateQty    = InventTransferReceiveUpdateQty::ReceiveNow;
        inventTransferParmTable.EditLines           = true;
        inventTransferParmTable.LineNum             = 1;
        inventTransferParmTable.JobStatus           = ParmJobStatus::Executed;
        inventTransferParmTable.ExecutedDateTime    = DateTimeUtil::utcNow();
        inventTransferParmTable.ExecutedDateTime    = _shipDateConfirmed;
        inventTransferParmTable.PickUpdateQty       = InventTransferPickUpdateQty::ShipNow;
        inventTransferParmTable.ExplodeLines        = true;

        inventTransferParmTable.ParmId = _inventTransferMultiShip.parmId();

        return inventTransferParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLinesFromTransferLinesShippedBySimpleLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record of <c>InventTransferParmLine</c> shipped by a load.
    /// </summary>
    /// <param name = "_inventTransferParmTable">
    /// <c>InventTransferParmTable</c> used to create the <c>InventTransferParmLine</c> record.
    /// </param>
    protected void createParmLinesFromTransferLinesShippedBySimpleLoad(InventTransferParmTable _inventTransferParmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferOrderShippedBySimpleLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transfer order is shipped by a load where each transfer line has exactly one
    /// corresponding load line which fully corresponds to the transfer lines demand.
    /// </summary>
    /// <param name="_transferId">
    /// A transfer ID.
    /// </param>
    /// <returns>
    /// true if the transfer order is shipped by a load where each transfer line has exactly one corresponding
    /// load line which fully corresponds to the transfer lines demand; otherwise, false
    /// </returns>
    protected boolean isTransferOrderShippedBySimpleLoad(InventTransferId _transferId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContainerUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates UOM Structures for outbound shipments from containers.
    /// </summary>
    /// <param name="_module">
    /// The <c>WHSModule</c> module used for building the UOM.
    /// </param>
    protected void createContainerUOM(WHSModule _module)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContainerASN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates ASN item records for outbound shipments from containers.
    /// </summary>
    /// <param name="_containerId">
    /// ContainerId to be used in ASN item creation as the license plate.
    /// </param>
    /// <param name="_whsModule">
    /// The <c>WHSModule</c>module used for the ASN item creation.
    /// </param>
    protected void createContainerASN(WHSContainerId _containerId, WHSModule _whsModule)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSLoadLine                         loadLine;
        WHSContainerLine                    containerLine;
        EcoResReleasedProductUnitConverter  releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        while select containerLine
            where containerLine.ContainerId == _containerId
            join RecId, ShipmentId, LoadId from loadLine
                where loadLine.RecId == containerLine.LoadLine
        {
            InventDim inventDim = containerLine.mergedClosedInventDim();

            WHSASNItem asnItem = WHSASNItem::findByLPModuleItemLineNum(_containerId,
                                                                    _whsModule,
                                                                    containerLine.ItemId,
                                                                    loadLine.RecId,
                                                                    inventDim.InventDimId,
                                                                    true);

            UnitIDInventory inventUnitId = WHSCatchWeightHelper::inventHandlingUnitId(containerLine.ItemId);
            ProductQuantity productQty   = releasedProductUnitConverter.convertGivenUnitSymbols(containerLine.Qty,
                                                                                                containerLine.UnitId,
                                                                                                inventUnitId,
                                                                                                NoYes::Yes,
                                                                                                containerLine.ItemId,
                                                                                                inventDim.InventDimId,
                                                                                                NoYes::Yes);

            if (asnItem.RecId != 0)
            {
                asnItem.Qty            += productQty;
                asnItem.CapturedWeight += containerLine.CapturedWeight;   
                asnItem.write();
            }
            else if (productQty > 0)
            {
                asnItem.LicensePlateId      = _containerId;
                asnItem.Module              = _whsModule;
                asnItem.LoadId              = loadLine.LoadId;
                asnItem.ShipmentId          = loadLine.ShipmentId;
                asnItem.LoadLineRefRecId    = loadLine.RecId;
                asnItem.ItemId              = containerLine.ItemId;
                asnItem.Description         = InventTable::find(asnItem.ItemId).itemName(inventDim);
                asnItem.Qty                 = productQty;
                asnItem.CapturedWeight      = containerLine.CapturedWeight;
                asnItem.UOM                 = inventUnitId;
                asnItem.InventDimId         = inventDim.InventDimId;

                if (inventDim.inventBatchId)
                {
                    asnItem.BatchExpirationDate = InventBatch::find(inventDim.inventBatchId, containerLine.ItemId).ExpDate;
                }

                asnItem.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTransferShip</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates the required <c>InventTransferParmTable</c> records related to the shipment of the Transfer Order,
    ///   the required <c>WHSASNItem</c> and <c>WHSUOMStructure</c> records.
    /// </summary>
    /// <param name="_shipDateConfirmed">
    ///   The confirmed ship date.
    /// </param>
    /// <param name="_overrideSplitTrans">
    /// true if ignoring parameter to split transfer ship; otherwise, false
    /// </param>
    public abstract void runTransferShip(
        TMSApptUTCDateTime _shipDateConfirmed,
        boolean            _overrideSplitTrans = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInventTransferMultiShip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs update process for <c>InventTransferParmTable</c> record.
    /// </summary>
    /// <param name = "_inventTransferMultiShip">
    /// <c>InventTransferMultiShip</c> instance used to select the <c>InventTransferParmTable</c> record.
    /// </param>
    protected void runInventTransferMultiShip(InventTransferMultiShip _inventTransferMultiShip)
    {
        InventTransferParmTable inventTransferParmTable;

        select inventTransferParmTable
            where inventTransferParmTable.ParmId == _inventTransferMultiShip.parmId();

        while (inventTransferParmTable)
        {
            try
            {
                _inventTransferMultiShip.runUpdate(inventTransferParmTable);
                _inventTransferMultiShip.addUpdateRec(InventTransferTable::find(inventTransferParmTable.TransferId));
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw error("@WAX:DeadlockExceptionMessage");
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
                {
                    retry;
                }
                else
                {
                    if (ReqTransientSqlConnectionErrorHandlingHelper::isReqTransientSqlConnectionErrorHandlingToggleEnabled())
                    {
                        throw error("@WAX:TransientSqlConnectionErrorExceptionMessage");
                    }
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw error("@WAX:UpdateConflictExceptionMessage");
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }

            next inventTransferParmTable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShipUpdateTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the process is split.
    /// </summary>
    /// <param name = "_overrideSplitTrans">
    /// Parameter to determine if split transfer ship should be ignored.
    /// </param>
    /// <returns>
    /// true if the process is not split; otherwise, false
    /// </returns>
    protected boolean canShipUpdateTransferOrder(boolean _overrideSplitTrans)
    {
        // SeparateShipConfirmationForMixedLoads is not replaced with isSplitOfTransferOrderShipConfirmationAndPostingTransferShipEnabled here,
        // because it must be handled in WHSShipConfirmationActionLoad.canShipUpdateTransferOrderForLoad as we need the warehouse ID from the load to make the correct decision.
        if (_overrideSplitTrans || !TMSParameters::find().SeparateShipConfirmationForMixedLoads)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferMultiShip</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to create <c>InventTransferMultiShip</c> class instance.
    /// </summary>
    /// <returns>
    /// Created <c>InventTransferParmLine</c> instance.
    /// </returns>
    protected InventTransferMultiShip createInventTransferMultiShip()
    {
        InventTransferMultiShip inventTransferMultiShip = InventTransferMultiShip::construct();
        inventTransferMultiShip.init();
        inventTransferMultiShip.parmCalledFromWMS(false);
        RunBaseMultiParm::initParm(inventTransferMultiShip);

        return inventTransferMultiShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferParmLineFromContainerTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to create <c>InventTransferParmLine</c> record.
    /// </summary>
    /// <param name = "_containerTable">
    /// A buffer of <c>WHSContainerTable</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_containerLine">
    /// A buffer of <c>WHSContainerLine</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_inventTransferLine">
    /// A buffer of <c>InventTransferLine</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_lineNum">
    /// <c>LineNum</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <returns>
    /// Created <c>InventTransferParmLine</c> record.
    /// </returns>
    protected InventTransferParmLine createInventTransferParmLineFromContainerTable(
        WHSContainerTable       _containerTable,
        InventTransferParmTable _inventTransferParmTable,
        WHSContainerLine        _containerLine,
        InventTransferLine      _inventTransferLine,
        LineNum                 _lineNum)
    {
        InventTransferParmLine inventTransferParmLine = this.initInventTransferParmLineFromContainerTable(_containerTable,
                                                                                                        _inventTransferParmTable,
                                                                                                        _containerLine,
                                                                                                        _inventTransferLine,
                                                                                                        _lineNum);

        inventTransferParmLine.insert();

        return inventTransferParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferParmLineFromContainerTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to initialize <c>InventTransferParmLine</c> record.
    /// </summary>
    /// <param name = "_containerTable">
    /// A buffer of <c>WHSContainerTable</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_containerLine">
    /// A buffer of <c>WHSContainerLine</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_inventTransferLine">
    /// A buffer of <c>InventTransferLine</c> used for initializing the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <param name = "_lineNum">
    /// <c>LineNum</c> used for creating the <c>InventTransferParmLine</c> record.
    /// </param>
    /// <returns>
    /// Initialized <c>InventTransferParmLine</c> record
    /// </returns>
    protected InventTransferParmLine initInventTransferParmLineFromContainerTable(
        WHSContainerTable       _containerTable,
        InventTransferParmTable _inventTransferParmTable,
        WHSContainerLine        _containerLine,
        InventTransferLine      _inventTransferLine,
        LineNum                 _lineNum)
    {
        InventTransferParmLine inventTransferParmLine;

        inventTransferParmLine.initFromInventTransferLine(_inventTransferLine);
        inventTransferParmLine.TransferId   = _inventTransferParmTable.TransferId;
        inventTransferParmLine.ParmId       = _inventTransferParmTable.ParmId;

        InventDim inventDim         = InventDim::find(inventTransferParmLine.InventDimId);
        inventDim.wMSLocationId     = InventDim::find(_containerTable.InventDimId).wMSLocationId;
        inventDim.LicensePlateId    = _containerTable.ContainerId;
        inventDim                   = InventDim::findOrCreate(inventDim);

        inventTransferParmLine.InventDimId          = inventDim.inventDimId;
        inventTransferParmLine.InventTransId        = _inventTransferLine.InventTransId;
        inventTransferParmLine.InventTransIdTransit = _inventTransferLine.InventTransIdTransitTo;

        EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        if (PdsGlobal::pdsIsCWItem(_containerLine.ItemId))
        {
            inventTransferParmLine.PdsCWQtyShipNow = releasedProductUnitConverter.convertGivenUnitSymbols(
                                                            _containerLine.Qty,
                                                            _containerLine.UnitId,
                                                            PdsCatchWeight::cwUnitId(_containerLine.ItemId),
                                                            NoYes::Yes,
                                                            _containerLine.ItemId,
                                                            inventDim.inventDimId,
                                                            NoYes::Yes);

            inventTransferParmLine.QtyShipNow = _containerLine.CapturedWeight;
        }
        else
        {
            inventTransferParmLine.QtyShipNow = releasedProductUnitConverter.convertGivenUnitSymbols(
                                                            _containerLine.Qty,
                                                            _containerLine.UnitId,
                                                            InventTableModule::find(_containerLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                            NoYes::Yes,
                                                            _containerLine.ItemId,
                                                            inventDim.inventDimId,
                                                            NoYes::Yes);
        }

        inventTransferParmLine.LineNum = _lineNum;

        return inventTransferParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipLoadTender</Name>
				<Source><![CDATA[
    public boolean parmSkipLoadTender(boolean _skipLoadTender = skipLoadTender)
    {
        if (_skipLoadTender)
        {
            skipLoadTender = _skipLoadTender;
        }

        return skipLoadTender;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAnyInvoicedLines</Name>
				<Source><![CDATA[
    public boolean parmAnyInvoicedLines()
    {
        return anyInvoicedLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAllAllowedOverOrUnderDeliveryWorkQtyIsPickedValidationForLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a load line should be skipped in the
    /// <c>validateAllAllowedForOverOrUnderDeliveryWorkQtyHasBeenPicked</c> method.
    /// </summary>
    /// <param name="_loadLine">
    /// The parameter of type <c>WHSLoadLine</c>.
    /// </param>
    /// <returns>
    /// true if a line should be skipped; otherwise, false
    /// </returns>
    protected boolean skipAllAllowedOverOrUnderDeliveryWorkQtyIsPickedValidationForLoadLine(WHSLoadLine _loadLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to create <c>InventTransferParmLine</c> records.
    /// </summary>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for creating <c>InventTransferParmLine</c> records.
    /// </param>
    protected void createInventTransferParmLine(InventTransferParmTable _inventTransferParmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomerIsNotOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the customer is blocked when confirming a shipment.
    /// </summary>
    /// <param name="_loadTable">
    /// The load to validate.
    /// </param>
    /// <returns>
    /// true if the customer is not on hold; otherwise, false.
    /// </returns>
    protected boolean checkCustomerIsNotOnHold(WHSLoadTable _loadTable)
    {
        boolean ret = true;
        Set salesIds = new Set(Types::String);

        WHSLoadLine loadLine;
        SalesTable salesTable;
        
        while select ShipmentId from loadLine
            where  loadLine.LoadId           == _loadTable.LoadId
                && loadLine.InventTransType  == InventTransType::Sales
                && loadLine.TransportRequest == NoYes::No
                join salesTable
                    where salesTable.SalesId == loadLine.OrderNum
        {
            if (!salesIds.in(salesTable.SalesId))
            {
                salesIds.add(salesTable.SalesId);

                if (!salesTable.canCustomerBeUpdated(DocumentStatus::PickingList))
                {
                    ret = checkFailed(strFmt("@WAX:CustomerOnHoldShipmentCannotBeConfirmed", loadLine.ShipmentId, CustTable::blocked(salesTable.CustAccount)));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>