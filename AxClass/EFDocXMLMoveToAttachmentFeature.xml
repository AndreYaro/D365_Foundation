<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocXMLMoveToAttachmentFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;

[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public class EFDocXMLMoveToAttachmentFeature implements IFeatureMetadata, IFeatureLifecycle
{
    private static EFDocXMLMoveToAttachmentFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    private static void typeNew()
    {
        instance = new EFDocXMLMoveToAttachmentFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>An <c>EFDocXMLZipExportFeature</c> instance.</returns>
    [Hookable(false)]
    public static EFDocXMLMoveToAttachmentFeature instance()
    {
        return EFDocXMLMoveToAttachmentFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@NFE:NFeXMLMoveToAttachment");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::AccountsReceivable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@NFE:NFeXMLMoveToAttachmentDesc");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://aka.ms/MoveNF-eXMLasattachment';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether feature is enabled.
    /// </summary>
    /// <returns>True, if feature is enabled; otherwise, false.</returns>
    public static boolean isEnabled()
    {
        #isoCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR])
            && Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureStateProvider::isFeatureEnabled(EFDocXMLMoveToAttachmentFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemFeatureExposureHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the Export XML as ZIP file and Export XML as ZIP file history menu items based on feature acceptance.
    /// </summary>
    /// <param name = "_rootMenu">Root menu.</param>
    /// <param name = "_subMenu">Sub menu.</param>
    /// <param name = "_visible">Whether or not the submenu should be visible.</param>
    [SubscribesTo(classstr(SysMenuNavigationObjectFactory), staticdelegatestr(SysMenuNavigationObjectFactory, checkAddSubMenuDelegate))]
    public static void menuItemFeatureExposureHandler(SysDictMenu _rootMenu, SysDictMenu _subMenu, SysBoxedBoolean _visible)
    {
        if (_subMenu.isMenuItem())
        {
            var metaElement = _subMenu.GetMenuItemMetaElement();

            if (metaElement != null
                && metaElement.Name == menuItemActionStr(EFDocXMLMoveToAttachment_BR))
            {
                _visible.value = EFDocXMLMoveToAttachmentFeature::isEnabled();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>