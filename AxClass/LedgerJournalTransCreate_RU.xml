<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalTransCreate_RU extends RunBase
{
    FormDataSource          table_ds;
    Common                  commonTable;

    Amount                  totalAmount;
    Counter                 counter;

    TransDate               transDate;
    DialogField             dialogTransDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoPosting</Name>
				<Source><![CDATA[
    protected void autoPosting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalAmount</Name>
				<Source><![CDATA[
    protected Amount calcTotalAmount()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    protected LedgerJournalTable createLedgerJournalTable(LedgerJournalTable    _journalTable,
                                                          JournalNameId         _journalName)
    {
        LedgerJournalTable  journalTable = _journalTable;
        CurrencyCode        currencyCode = _journalTable.CurrencyCode ? _journalTable.CurrencyCode : CompanyInfoHelper::standardCurrency();

        journalTable.JournalNum  = JournalTableData::newTable(_journalTable).nextJournalId();
        journalTable.JournalName = _journalName;
        journalTable.initFromLedgerJournalName();

        if (journalTable.CurrencyCode != currencyCode)
        {
            journalTable.CurrencyCode       = currencyCode;
            journalTable.ExchRate           = ExchangeRateHelper::exchRate(journalTable.CurrencyCode);
            journalTable.EUROTriangulation  = NoYes::No;
            journalTable.ExchrateSecondary  = ExchangeRateHelper::exchRateSecond(journalTable.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Currency::noYes2UnknownNoYes(NoYes::No));
        }
        journalTable.insert();

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected LedgerJournalTrans createLedgerJournalTrans(LedgerJournalTrans    _journalTrans,
                                                        LedgerJournalTable    _journalTable)
    {
        Voucher             voucher;
        LedgerJournalTrans  journalTrans = _journalTrans;
        JournalVoucherNum   journalVoucherNum;
        ;

        journalVoucherNum = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(_journalTable.JournalNum)));
        voucher = journalVoucherNum.getNew(true);

        _journalTrans.JournalNum  = _journalTable.JournalNum;

        if (! voucher)
        {
            info("@SYS26396");
        }
        else
        {
            _journalTrans.Voucher = voucher;
            _journalTrans.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (_journalTable.JournalType     == LedgerJournalType::Daily                    ||
            _journalTable.JournalType     == LedgerJournalType::Payment                  ||
            _journalTable.JournalType     == LedgerJournalType::CustPayment      )

        {
            journalTrans.Approved = NoYes::Yes;
            journalTrans.Approver = HcmWorker::userId2Worker(curUserId());
        }

        journalTrans.TaxItemGroup      = TaxParameters::find().TaxItemGroup;
        if (! journalTrans.parmOffsetAccount())
        {
            journalTrans.OffsetAccountType      = _journalTable.OffsetAccountType;
            journalTrans.OffsetLedgerDimension  = _journalTable.OffsetLedgerDimension;
        }

        if (! journalTrans.DefaultDimension)
        {
            if (journalTrans.AccountType == LedgerJournalACType::Ledger)
            {
                journalTrans.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(journalTrans.LedgerDimension, _journalTable.DefaultDimension);
            }
            else
            {
                journalTrans.DefaultDimension = _journalTable.DefaultDimension;
            }
        }

        journalTrans.DocumentNum       = _journalTable.DocumentNum;

        journalTrans.CurrencyCode      = _journalTable.CurrencyCode;
        journalTrans.ExchRate          = _journalTable.ExchRate;
        journalTrans.ExchRateSecond    = _journalTable.ExchrateSecondary;
        journalTrans.Triangulation     = _journalTable.EUROTriangulation;

        journalTrans.TransDate         = transDate;

        if (journalTrans.OffsetAccountType == LedgerJournalACType::Employee_RU)
        {
            journalTrans.RCashDocRepresPersonId = journalTrans.parmOffsetAccount();
            journalTrans.setRepresPersonValues_W();
        }

        journalTrans.insert();
        journalVoucherNum.used(voucher);

        return journalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrder</Name>
				<Source><![CDATA[
    public boolean createOrder()
    {
        boolean ret;

        totalAmount = this.calcTotalAmount();
        if (! totalAmount)
            throw error("@SYS25907");

        ret = this.createTable();
        ret = ret && this.createTrans();

        if (ret)
        {
            this.postUpdate();
            this.autoPosting();
            this.showInfo();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTable</Name>
				<Source><![CDATA[
    protected boolean createTable()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected boolean createTrans()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        ;

        dialogTransDate = dialog.addFieldValue(extendedtypestr(TransDate), transDate, "@GLS101398");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        transDate = dialogTransDate.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        ;
        super();
        transDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfDocuments</Name>
				<Source><![CDATA[
    public Counter numberOfDocuments()
    {
        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
    protected void postUpdate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadDatasource</Name>
				<Source><![CDATA[
    protected void rereadDatasource()
    {
        if (commonTable && table_ds)
        {
            if (this.numberOfDocuments() > 1)
            {
                table_ds.executeQuery();
            }
            else
            {
                table_ds.reread();
                table_ds.refresh();
                table_ds.active();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        ;
        if (! this.validate())
            throw error("");

        try
        {
            ttsbegin;

            if (! this.createOrder())
                throw error("@SYS18447");

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        this.rereadDatasource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataSource</Name>
				<Source><![CDATA[
    public void setDataSource(Common _table, FormDataSource _table_ds)
    {
        table_ds = _table_ds;
        commonTable = _table;

        if (! _table)
            throw error(strfmt("@SYS19324", funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfo</Name>
				<Source><![CDATA[
    protected void showInfo()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        return dialogTransDate.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>