<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmMarkScheduleTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmMarkScheduleTrans extends RunBaseBatch implements BatchRetryable
{
    RPayVacationTable     rPayVacationTable;
    SysQueryRun           queryRun;
    FormDataSource        parentForm_ds;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        Query                query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;
        ;

        qbds = query.addDataSource(tableNum(RPayVacationTable));
        qbr = qbds.addRange(fieldNum(RPayVacationTable, FormationYear));
        qbr.value(queryValue(rPayVacationTable.FormationYear));
        qbr.status(RangeStatus::Hidden);

        queryRun = new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    private void initValue(Args _args)
    {
        ;

        rPayVacationTable = _args.record();
        parentForm_ds     = FormDataUtil::getFormDataSource(_args.record());

        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryrun</Name>
				<Source><![CDATA[
    public QueryRun queryrun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RPayVacationTable rPayVacationTableLoop;
        ;

        parentForm_ds.research();

        while (queryRun.next())
        {
            rPayVacationTableLoop = queryRun.get(tableNum(RPayVacationTable));

            parentForm_ds.markRecord(rPayVacationTableLoop, 1);
        }
        parentForm_ds.refreshEx();
        parentForm_ds.positionToRecord(parentForm_ds.getFirst(true, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@RUP1894";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RHRMMarkScheduleTrans rhrmMarkScheduleTrans = new RHRMMarkScheduleTrans();
        ;

        rhrmMarkScheduleTrans.initValue(_args);

        if (rhrmMarkScheduleTrans.prompt())
            rhrmMarkScheduleTrans.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>