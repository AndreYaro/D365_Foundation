<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetInventoryIntangibleToExcel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetInventoryIntangibleToExcel extends RunBaseBatch implements BatchRetryable, ERIReportPostProcessingSupported
{
    protected XMLExcelDocument_RU document;
    protected RNumDateInWordConverter converter;

    protected RAssetInventoryTable assetInventoryTable;
    protected RAssetStandardId assetStandardId;
    protected DialogField dialogStandardId;
    protected DialogField dialogTransDate;
    protected RAssetTransDate assetTransDate;

    protected Counter transTotal;
    protected Amount totalFactAmount;
    protected Amount totalAccountingAmount;
    protected boolean createdOffsessionId;
    protected int pageNo;
    protected Filename newFileName;

    protected const int LinesPerPage = 15;
    protected const str Page2Template = 'page2template';
    private const Version CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean check()
    {
        RAssetInventoryTrans assetInventoryTrans;
        select firstonly RecId from assetInventoryTrans
            where assetInventoryTrans.InventoryTableRecId == assetInventoryTable.RecId &&
                  assetInventoryTrans.AssetStandardId     == assetStandardId;

        boolean ret = assetInventoryTrans.RecId ? true : false;

        if (!ret)
        {
            ret = checkFailed("@GLS101546");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearOffsession</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clearOffsession()
    {
        if (createdOffsessionId)
        {
            OfficialsTrans_RU::deleteWithoutUpdate(this.getOffSessionId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogStandardId = dialog.addFieldValue(extendedTypeStr(RAssetStandardId), assetStandardId);
        dialogTransDate = dialog.addFieldValue(extendedTypeStr(RAssetTransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS23896", "@GLS102130");
        dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(RAssetOfficials_RU), DialogMenuItemGroup::BottomGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
        assetStandardId = dialogStandardId.value();
        assetTransDate = dialogTransDate.value();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffSessionId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public OffSessionId_RU getOffSessionId()
    {
        return assetInventoryTable.OffSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public OffReportType_RU getReportType()
    {
        return OffReportType_RU::RAssetsINV1a;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initOfficials()
    {
        if (assetInventoryTable.OffSessionId)
        {
            OfficialsTrans_RU officialTrans;
            select firstonly RecId from officialTrans
                where officialTrans.OffSessionId == this.getOffSessionId() &&
                      officialTrans.ReportType   == this.getReportType();

            createdOffsessionId = !officialTrans.RecId;

            if (createdOffsessionId)
            {
                assetInventoryTable.initOfficialsDefault(this.getReportType());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initValue(Args _args)
    {
        if (! _args || _args.dataset() != tableNum(RAssetInventoryTable))
        {
            throw(error(strFmt("@SYS19306", funcName())));
        }

        assetInventoryTable = _args.record();
        this.initOfficials();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens an XMLExcelDocument to work with
    /// </summary>
    /// <returns>
    /// true, if document was opened
    /// </returns>
    /// <remarks>
    /// File first copied to subfolder of current user temp path, if subfolder doesn't exist, it's created
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean makeDocument()
    {
        boolean ret = true;

        try
        {
            newFileName = this.templateName();
            document = XMLExcelDocument_RU::newFromResource(newFileName, false);
        }
        catch
        {
            ret = checkFailed(strFmt("@SYS72245", newFileName));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, assetStandardId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    int pageNo(Counter _cnt)
    {
        return _cnt div LinesPerPage + (_cnt mod LinesPerPage ? 1 : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preparePages</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int preparePages(Counter _assetsCnt)
    {
        str sheetName;
        int r1, c1, r2, c2;

        Counter pagesCnt =  this.pageNo(_assetsCnt) - 1;
        [sheetName, r1, c1, r2, c2] = document.workbook().parseBookmark(Page2Template);
        if (pagesCnt)
        {
            document.insertRows(1, r2, 2, r2-r1+1, pagesCnt, 2);
        }
        return r2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>print1stPage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void print1stPage()
    {
        const str CompanyName = 'CompanyName';
        const str OKPO = 'OKPO';
        const str DocNumber = 'DocNumber';
        const str DocDate = 'DocDate';
        const str StartDate = 'StartDate';
        const str EndDate = 'EndDate';
        const str Resp1Title = 'BI29';
        const str Resp1Name = 'CZ29';
        const str Resp2Title = 'BI31';
        const str Resp2Name = 'CZ31';
        const str Location = 'W23';

        CompanyInfo companyInfo = CompanyInfo::find();

        document.insertValue(CompanyName, companyInfo.name());

        document.insertValue(OKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, assetInventoryTable.StartDate));
        document.insertValue(DocNumber, assetInventoryTable.InventoryOrder);
        document.insertValue(DocDate, date2str(assetTransDate, 123, 2,2,2,2,4,DateFlags::None));
        document.insertValue(StartDate, date2str(assetInventoryTable.StartDate, 123, 2,2,2,2,4,DateFlags::None));
        document.insertValue(EndDate, date2str(assetInventoryTable.EndDate, 123, 2,2,2,2,4,DateFlags::None));
        document.insertValue(Location, assetInventoryTable.Location + ' ' + RAssetLocation::find(assetInventoryTable.Location).Name);

        EmployeeTable_RU employee = EmployeeTable_RU::findByEmployeeId(assetInventoryTable.EmployeeTable1);
        HrmDescription hrmDescription = HcmPosition::findByPosition(employee.worker().primaryPositionId()).description();
        hrmDescription = hrmDescription ? hrmDescription : employee.worker().primaryPositionId();

        document.insertValue(Resp1Title, hrmDescription);
        document.insertValue(Resp1Name, employee.employeeName());

        employee = EmployeeTable_RU::findByEmployeeId(assetInventoryTable.EmployeeTable2);
        hrmDescription = HcmPosition::findByPosition(employee.worker().primaryPositionId()).description();
        hrmDescription = hrmDescription ? hrmDescription : employee.worker().primaryPositionId();

        document.insertValue(Resp2Title, hrmDescription);
        document.insertValue(Resp2Name, employee.employeeName());


    }

]]></Source>
			</Method>
			<Method>
				<Name>print2ndPage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void print2ndPage()
    {
        const str Assets = 'Assets';
        const str TotalFactAmountName = 'TotalFactAmount';
        const str TotalAccountingAmountName = 'TotalAccountingAmount';
        const str AssetCnt = 'AssetCnt';
        const str AmountFact = 'AmountFact';
        const str Cent = 'Cent';
        const container Columns = ['A', 'H', 'CD', 'CR', 'DL'];
        const int StartRow  = 6;
        const int page2 = 2;
        
        Amount totalFactPage;
        Amount totalAccountingPage;
        Counter rowCount;
        Counter assetPerPage;
        str headAssets;
        int currentRow;
        int templateHeight;
        boolean showLastTotals = true;

        str shiftRange(str _name)
        {
            str sheetName;
            int r1, c1, r2, c2;
            [sheetName, r1, c1, r2, c2] = document.workbook().parseBookmark(_name);
            r1 += (pageNo - 1) * templateHeight;
            return ComExcelDocument_RU::numToNameCell(c1, r1);
        }

        void pageFooter()
        {
            document.insertValue(shiftRange(TotalFactAmountName), totalFactPage, page2);
            document.insertValue(shiftRange(TotalAccountingAmountName), totalAccountingPage, page2);
            document.insertValue(shiftRange(AssetCnt), converter.numeralsToTxt(assetPerPage), page2);
            document.insertValue(shiftRange(AmountFact), converter.numeralsToTxt(totalFactPage), page2);
            document.insertValue(shiftRange(Cent), (frac(totalFactPage) * 100) div 1, page2);
        }

        void insertAssetValue(int _col, anytype _value)
        {
            document.insertValue(conPeek(Columns, _col) + int2str(currentRow),  _value, page2);
        }

        templateHeight = this.preparePages(transTotal);

        RAssetTable assetTable;
        RAssetInventoryTrans assetInventoryTrans;
        while select assetInventoryTrans
            where assetInventoryTrans.InventoryTableRecId == assetInventoryTable.RecId &&
                  assetInventoryTrans.AssetStandardId     == assetStandardId
            join assetTable
                where assetTable.AccountNum == assetInventoryTrans.AccountNum
        {
            showLastTotals = true;
            RAssetStandards assetStandards = RAssetStandards::find(assetTable.AccountNum, assetStandardId);
            ++rowCount;

            pageNo = this.pageNo(rowCount);
            currentRow = templateHeight * (pageNo - 1) + StartRow + assetPerPage;

            insertAssetValue(1, rowCount);
            insertAssetValue(2, assetTable.Name);
            insertAssetValue(3, date2str(assetStandards.puttingIntoOperationDate(), 123, 2,2,2,2,4,DateFlags::None));
            insertAssetValue(4, assetInventoryTrans.NetBookValue * assetInventoryTrans.FactQty);
            insertAssetValue(5, assetInventoryTrans.NetBookValue * assetInventoryTrans.AccountingQty);

            totalFactAmount += assetInventoryTrans.NetBookValue * assetInventoryTrans.FactQty;
            totalAccountingAmount += assetInventoryTrans.NetBookValue * assetInventoryTrans.AccountingQty;
            totalFactPage += assetInventoryTrans.NetBookValue * assetInventoryTrans.FactQty;
            totalAccountingPage += assetInventoryTrans.NetBookValue * assetInventoryTrans.AccountingQty;

            headAssets += ((headAssets ? ',' : '') + assetTable.Name);

            ++assetPerPage;
            if (rowCount mod LinesPerPage == 0)
            {
                document.insertPageBreak(templateHeight * pageNo, page2);
                pageFooter();

                totalFactPage       = 0;
                totalAccountingPage = 0;
                assetPerPage        = 0;
                showLastTotals = false;
            }

        }
        if (showLastTotals)
        {
            pageFooter();
        }
        document.insertValue(Assets,    headAssets, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>print3rdPage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void print3rdPage()
    {
        const str TotalCnt = 'AY3';
        const str TotalAmount = 'AO5';
        const str TotalCent = 'DI7';
        const str Chairman = 'Chairman';
        const str ChairmanName = 'ChairmanName';
        const str Member = 'AQ';
        const str CountFrom = 'CountFrom';
        const str CountTo = 'CountTo';
        const str Resp1Title   = 'AC25';
        const str Resp1Name = 'BQ25';
        const str Resp2Title = 'AC27';
        const str Resp2Name = 'BQ27';
        const int totalsSheet = 3;

        pageNo = totalsSheet;
        document.insertValue(TotalCnt, converter.numeralsToTxt(transTotal), pageNo);
        document.insertValue(TotalAmount,converter.numeralsToTxt(totalFactAmount), pageNo);
        document.insertValue(TotalCent, (frac(totalFactAmount) * 100) div 1., pageNo);
        document.insertValue(CountFrom,  1, pageNo);
        document.insertValue(CountTo, transTotal, pageNo);

        EmployeeTable_RU employee = EmployeeTable_RU::findByEmployeeId(assetInventoryTable.EmployeeTable1);
        HrmDescription hrmDescription = HcmPosition::findByPosition(employee.worker().primaryPositionId()).description();
        hrmDescription = hrmDescription ? hrmDescription : employee.worker().primaryPositionId();

        document.insertValue(Resp1Title, hrmDescription, pageNo);
        document.insertValue(Resp1Name,  employee.employeeName(), pageNo);

        employee = EmployeeTable_RU::findByEmployeeId(assetInventoryTable.EmployeeTable2);
        hrmDescription = HcmPosition::findByPosition(employee.worker().primaryPositionId()).description();
        hrmDescription = hrmDescription ? hrmDescription : employee.worker().primaryPositionId();

        document.insertValue(Resp2Title, hrmDescription, pageNo);
        document.insertValue(Resp2Name,  employee.employeeName(), pageNo);
        this.printOfficials();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOfficials</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void printOfficials()
    {
        const str Chairman = 'Chairman';
        const str ChairmanName = 'ChairmanName';
        const str Member = 'Member\%1';
        const str MemberName = 'MemberName\%1';
        const int MemberCnt = 3;

        int cnt;
        
        OfficialsTrans_RU offTrans = OfficialsTrans_RU::find(this.getOffSessionId(), this.getReportType(), OffPosition_RU::Chairman);

        document.insertValue(Chairman, offTrans.Title, pageNo);
        document.insertValue(ChairmanName, offTrans.Name, pageNo);

        while select offTrans
            where offTrans.OffSessionId == this.getOffSessionId() &&
                  offTrans.ReportType   == this.getReportType()   &&
                  offTrans.Position     == OffPosition_RU::Member
        {
            ++cnt;
            document.insertValue(strFmt(Member, cnt), offTrans.Title, pageNo);
            document.insertValue(strFmt(MemberName, cnt), offTrans.Name, pageNo);
            if (cnt == MemberCnt)
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetInventoryTrans assetInventoryTrans;
        select count(RecId) from  assetInventoryTrans
            where assetInventoryTrans.InventoryTableRecId == assetInventoryTable.RecId &&
                  assetInventoryTrans.AssetStandardId     == assetStandardId;

        transTotal = int642int(assetInventoryTrans.RecId);
        converter  = RNumDateInWordConverter::construct();

        if (this.makeDocument())
        {

            this.print1stPage();
            this.print2ndPage();
            this.print3rdPage();
            this.completeDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes excel document.
    /// </summary>
    protected void completeDocument()
    {
        const str fileExtension = '.xlsx';

        document.closeDocument(true);

        System.IO.Stream stream = document.parmStream();

        if (AccountingDocumentsERPostProcessingToggle::isEnabled())
        {
            ERBinaryContentService binaryContentService = new ERBinaryContentService();
            binaryContentService.parmERFormatMappingId(DocuParameters::find().AccountingDocumentsERFormatMapping);
            binaryContentService.initBinaryDataFromStream(stream);
            binaryContentService.processReportInER(this as ERIReportPostProcessingSupported);
        }
        else
        {
            var destination = ERObjectsFactory::createFileDestinationBrowser();
            destination.saveFile(stream, System.IO.Path::ChangeExtension(newFileName, fileExtension));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Filename templateName()
    {
        return resourceStr(RAssetInventoryINV1a);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return newFileName + "@SYS34952" + assetInventoryTable.InventoryOrder + "@SYS34953";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'INV1A';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean ret = true;

        switch (version)
        {
            case CurrentVersion:
                [version, assetStandardId] = _packedClass;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (ret)
        {
            if (!assetStandardId)
            {
                ret = checkFailed("@GLS116616");
            }

            if (assetTransDate == dateNull())
            {
                ret = checkFailed("@SYS24455");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RAssetInventoryIntangibleToExcel construct()
    {
        return new RAssetInventoryIntangibleToExcel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS113669";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {

        RAssetInventoryIntangibleToExcel rassetInventory = RAssetInventoryIntangibleToExcel::construct();
        rassetInventory.initValue(_args);

        if (rassetInventory.prompt())
        {
            if (rassetInventory.check())
            {
                rassetInventory.runOperation();
            }
        }
        else
        {
            rassetInventory.clearOffsession();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>