<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResReleasedProductInactivator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to change product lifecycle state on released distinct products and variants that are not in use anymore.  
/// </summary>
public class EcoResReleasedProductInactivator extends RunBaseBatch implements BatchRetryable
{
    const int DefaultMinNumberOfDaysSinceCreation = 120;
    const int DefaultMinNumberOfDaysSinceLastTransaction = 120;    

    int                             minNumberOfDaysSinceCreation;
    int                             minNumberOfDaysSinceLastTransaction;
    EcoResProductLifecycleStateId   newStateId;
    boolean                         previewOnly;
        
    EcoResReleasedProductInactivatorQueryGenerator queryGenerator;

    int foundProducts;
    
    QueryRun            queryRun;

    // Dialog
    Dialog              dialog;
    DialogField         fieldPreviewOnly;
    DialogField         fieldMinDaysCreation;
    DialogField         fieldMinDaysTransaction;
    DialogField         fieldNewStateId;
    
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        minNumberOfDaysSinceCreation,
        minNumberOfDaysSinceLastTransaction,
        newStateId,
        previewOnly
    #ENDMACRO
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        queryGenerator = EcoResReleasedProductInactivatorQueryGenerator::newParameters(this.queryRun().query().pack(), minNumberOfDaysSinceCreation, minNumberOfDaysSinceLastTransaction, newStateId);
        
        if (previewOnly)
        {
            EcoResReleasedProductLifecycleStateChanges::deleteAllSimulated();
        }

        this.executeForItem();
        this.executeForVariant();
        
        // Output the result to the infolog
        if (previewOnly)
        {
            info(strFmt("@SCM:EcoResReleasedProductInactivatorResultSummaryPreview", foundProducts));
        }
        else
        {
            info(strFmt("@SCM:EcoResReleasedProductInactivatorResultSummaryUpdate", foundProducts));
        }
        info(strfmt("@SCM:EcoResReleasedProductInactivatorResultInstructions", formCaption(formStr(EcoResReleasedProductLifecycleStateChanges)), SysInfoAction_MenuFunction::newMenuItem(menuItemDisplayStr(EcoResReleasedProductLifecycleStateChanges), MenuItemType::Display)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeForItem</Name>
				<Source><![CDATA[
    protected void executeForItem()
    {
        // Run and execute
        QueryRun queryRunItem = new QueryRun(queryGenerator.getQueryForItem());
        while (queryRunItem.next())
        {
            InventTable inventTable = queryRunItem.get(tableNum(InventTable));
            
            // Note: There is no need for a larger transaction scope, as the batch job can simply be re-executed to update any remaining items if something should fail
            ttsbegin;

            this.addProductToResult(inventTable.Product);

            if (!previewOnly)
            {
                InventTable inventTableUpdate;

                update_recordset inventTableUpdate
                    setting ProductLifecycleStateId = newStateId
                    where inventTableUpdate.ItemId == inventTable.ItemId;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeForVariant</Name>
				<Source><![CDATA[
    protected void executeForVariant()
    {
        // Run and execute
        QueryRun queryRunItem = new QueryRun(queryGenerator.getQueryForVariant());
        while (queryRunItem.next())
        {
            InventDimCombination inventDimCombination = queryRunItem.get(tableNum(inventDimCombination));
            
            // Note: There is no need for a larger transaction scope, as the batch job can simply be re-executed to update any remaining items if something should fail
            ttsbegin;

            this.addProductToResult(inventDimCombination.DistinctProductVariant);
            
            if (!previewOnly)
            {
                InventDimCombination inventDimCombinationUpdate;

                update_recordset inventDimCombinationUpdate
                    setting ProductLifecycleStateId = newStateId
                    where inventDimCombinationUpdate.ItemId == inventDimCombination.ItemId
                       && inventDimCombinationUpdate.InventDimId == inventDimCombination.InventDimId;
            }

            ttscommit;
        }  
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductToResult</Name>
				<Source><![CDATA[
    protected void addProductToResult(RefRecId _productRecId)
    {
        EcoResReleasedProductLifecycleStateChanges change;
        change.Product = _productRecId;
        change.IsSimulation = previewOnly;
        change.NewStateId = newStateId;
        change.insert();
        
        foundProducts++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        Object mainFormGroupOrig = dialog.mainFormGroup();
        
        fieldNewStateId = dialog.addFieldValue(extendedTypeStr(EcoResProductLifecycleStateId), newStateId, "@SCM:EcoResReleasedProductInactivatorNewState");
        fieldNewStateId.fieldControl().mandatory(true);

        fieldPreviewOnly = dialog.addFieldValue(enumStr(NoYes), previewOnly, "@SCM:EcoResReleasedProductInactivatorSimulation", "@SCM:EcoResReleasedProductInactivatorSimulationHelp");
        
        DialogGroup productSelctionGroup = dialog.addGroup("@SCM:EcoResReleasedProductInactivatorProductSelection");
        
        fieldMinDaysCreation = dialog.addFieldValue(extendedTypeStr(EcoResReleasedProductInactivatorMinCreationDays), minNumberOfDaysSinceCreation);
        productSelctionGroup.addFieldname(fieldMinDaysCreation.name());

        fieldMinDaysTransaction = dialog.addFieldValue(extendedTypeStr(EcoResReleasedProductInactivatorMinTransactionDays), minNumberOfDaysSinceLastTransaction);
        productSelctionGroup.addFieldname(fieldMinDaysTransaction.name());

        dialog.mainFormGroup(mainFormGroupOrig);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        previewOnly = fieldPreviewOnly.value();
        minNumberOfDaysSinceCreation = fieldMinDaysCreation.value();
        minNumberOfDaysSinceLastTransaction = fieldMinDaysTransaction.value();
        newStateId = fieldNewStateId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:EcoResReleasedProductInactivator";
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(int _minNumberOfDaysSinceCreation, 
                              int _minNumberOfDaysSinceLastTransaction,
                              EcoResProductLifecycleStateId _newStateId,
                              boolean _previewOnly)
    {
        minNumberOfDaysSinceCreation = _minNumberOfDaysSinceCreation;
        minNumberOfDaysSinceLastTransaction = _minNumberOfDaysSinceLastTransaction;
        newStateId = _newStateId;
        previewOnly = _previewOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResReleasedProductInactivator construct()
    {
        return new EcoResReleasedProductInactivator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EcoResReleasedProductInactivator inactivator = EcoResReleasedProductInactivator::construct();

        if (! inactivator.prompt())
        {
            return;
        }

        inactivator.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                container packedQuery;
                [version, #CurrentList, packedQuery] = _packedClass;
                queryRun = new QueryRun(packedQuery);
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        minNumberOfDaysSinceCreation = DefaultMinNumberOfDaysSinceCreation;
        minNumberOfDaysSinceLastTransaction = DefaultMinNumberOfDaysSinceLastTransaction;
                
        Query query = new Query();
                        
        QueryBuildDataSource queryBuildDataSource=query.addDataSource(tableNum(InventDistinctProduct));
        queryBuildDataSource.addRange(FieldNum(InventDistinctProduct, ItemId));
        queryrun = new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>