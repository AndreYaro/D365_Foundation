<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdStatusDecrease_CostEstimate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdUpdStatusDecrease_CostEstimate</c> class is used for changing production status from
/// Estimated to Created.
/// </summary>
/// <remarks>
/// An instance of this class will be created when production order has the Estimated status and the
/// decrease status is started.
/// </remarks>
[ProdStatusFactory(ProdStatus::CostEstimated)]
class ProdUpdStatusDecrease_CostEstimate extends ProdUpdStatusDecrease
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the results of estimation.
    /// </summary>
    /// <remarks>
    ///    The cleanup will have effect on bill of materials (BOM) components, route operations, and the price
    ///    calculation table.
    /// </remarks>
    void cleanUp()
    {
        ProdBOM          prodBOM;
        ProdRoute        prodRoute;
        ProdCalcTrans    prodCalcTrans;
        PmfProdCoBy             pmfProdCoByProduct;
        PmfCoByProdCalcTrans    pmfCoByProdCalcTrans;

        while select forupdate prodBOM
            index NumIdx
            where prodBOM.ProdId == prodTable.ProdId
        {
            setprefix(#PreFixField(prodBOM,ItemId));

            this.reverseProdBOM(prodBOM);
        }

        while select forupdate prodRoute
            index NumOprNumIdx
            where prodRoute.ProdId == prodTable.ProdId
        {
            setprefix(#PreFixField(prodRoute,OprNum));

            this.reverseProdRoute(prodRoute);
        }

        while select forupdate prodCalcTrans
            index ProdCollectIdx
            where prodCalcTrans.TransRefId   == prodTable.ProdId
               && prodCalcTrans.TransRefType == ProdTransRefType::Production
        {
            this.reversePriceCalc(prodCalcTrans);
        }

        if (prodTable.ProdType == ProdType::Process)
        {
            while select forupdate pmfProdCoByProduct
                where pmfProdCoByProduct.ProdId == prodTable.ProdId
            {
                ProdId derivedProdId = '';

                if (pmfProdCoByProduct.InventRefType == InventRefType::Production)
                {
                    derivedProdId = pmfProdCoByProduct.InventRefId;
                }

                pmfProdCoByProduct.status()
                    .runStatusDecrease(
                        this.parmParmBuffer());

                this.pmfReverseDerivedProdCoBy(pmfProdCoByProduct);
                this.pmfReverseDerivedPurchCoBy(pmfProdCoByProduct);

                if (derivedProdId)
                {
                    this.addUpdateRec(ProdTable::find(derivedProdId));
                }
            }

            while select forupdate pmfCoByProdCalcTrans
                where pmfCoByProdCalcTrans.TransRefId == prodTable.ProdId
                   && pmfCoByProdCalcTrans.TransRefType == ProdTransRefType::Production
            {
                this.pmfReverseCoByPriceCalc(pmfCoByProdCalcTrans);
            }
        }

        // Reread the prodTable record since it might have been updated by the previous cleanup calls
        prodTable.reread();

        prodTable.CalcDate       = dateNull();
        prodTable.QtyCalc        = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfReverseCoByPriceCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes related coby calculation record when decreasing order quantity.
    /// </summary>
    /// <param name="_pmfCoByProdCalcTrans">
    /// Coby calculation record.
    /// </param>
    public void pmfReverseCoByPriceCalc(PmfCoByProdCalcTrans _pmfCoByProdCalcTrans)
    {
        _pmfCoByProdCalcTrans.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfReverseDerivedProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates related production/batch order when decreasing order quantity.
    /// </summary>
    /// <param name="_pmfProdCoByProduct">
    /// Coby record.
    /// </param>
    public void pmfReverseDerivedProdCoBy(
        PmfProdCoBy _pmfProdCoByProduct)
    {
        ProdParmStatusDecrease  derivedProdParmStatusDecrease;

        if (prodParmStatusDecrease.DerivedProd
            && _pmfProdCoByProduct.InventRefType == InventRefType::Production)
        {
            ProdTable derivedProdTable = ProdTable::find(_pmfProdCoByProduct.InventRefId);

            if (derivedProdTable.RecId
                && derivedProdTable.InventRefType == InventRefType::ProdLine
                && derivedProdTable.InventRefTransId
                    == _pmfProdCoByProduct.InventTransId)
            {
                if (derivedProdTable.status().isAfterOrEqualTo(prodParmStatusDecrease.WantedStatus))
                {
                    if (derivedProdTable.status().isAfter(prodParmStatusDecrease.WantedStatus)
                        && !derivedProdTable.status()
                                .runStatusDecrease(null,true))
                    {
                        info(strfmt("@SYS25687",derivedProdTable.ProdId));
                    }
                    else
                    {
                        if (derivedProdTable.status().isAfter(prodParmStatusDecrease.WantedStatus))
                        {
                            derivedProdParmStatusDecrease.data(
                                prodParmStatusDecrease);
                            derivedProdParmStatusDecrease.ProdId
                                = derivedProdTable.ProdId;
                            derivedProdParmStatusDecrease.ParmId = '';
                            derivedProdParmStatusDecrease.RecId  = 0;

                            derivedProdTable.status()
                                .runStatusDecrease(
                                    derivedProdParmStatusDecrease);
                        }

                        if (prodParmStatusDecrease.CancelDerivedProd)
                        {
                            derivedProdTable = ProdTable::find(
                                                    derivedProdTable.ProdId,
                                                    true);

                            if (derivedProdTable.RecId)
                            {
                                derivedProdTable.delete(false);

                                this.addDeletedRec(derivedProdTable);
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfReverseDerivedPurchCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates related purchase order when decreasing order quantity.
    /// </summary>
    /// <param name="_pmfProdCoByProduct">
    /// Coby record.
    /// </param>
    public void pmfReverseDerivedPurchCoBy(
        PmfProdCoBy _pmfProdCoByProduct)
    {
        PurchLine               purchLine;

        if (prodParmStatusDecrease.CancelDerivedPurch == NoYes::Yes
            && _pmfProdCoByProduct.InventRefType == InventRefType::Purch
            && _pmfProdCoByProduct.InventRefTransId)
        {
            select firstonly forupdate purchLine
                index TransIdIdx
                where purchLine.InventTransId == _pmfProdCoByProduct.InventRefTransId;

            if (purchLine.ItemRefType == InventRefType::ProdLine
                && purchLine.InventRefTransId == _pmfProdCoByProduct.InventTransId)
            {
                PurchId rememberPurchNum = purchLine.PurchId;

                if (purchLine.validateDelete() && purchLine.receivedInTotal() == 0)
                {
                    purchLine.delete(false);
                    InventMovement inventMovement = InventMovement::constructNoThrow(_pmfProdCoByProduct);

                    if (inventMovement)
                    {
                        inventMovement.setInventRefFields(InventRefType::None, '', 0);
                        inventMovement.updateBuffer();
                    }
                }

                select firstonly forupdate RecId from purchLine
                    index PurchLineIdx
                    where purchLine.PurchId == rememberPurchNum;

                if (!purchLine.RecId)
                {
                    PurchTable purchTable = PurchTable::find(rememberPurchNum,true);

                    if (purchTable && purchTable.validateDelete())
                    {
                        purchTable.delete();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDerivedKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the related event kanbans, if possible.
    /// </summary>
    /// <param name="_prodBOM">
    ///    The <c>ProdBOM</c> table buffer that event kanbans will be related to.
    /// </param>
    public void reverseDerivedKanban(ProdBOM _prodBOM)
    {
        ReqEventProcessKanban   reqEventProcessKanban = ReqEventProcessKanban::newStandard(_prodBOM);

        reqEventProcessKanban.parmActionMode(ReqEventProcessAction::Delete);
        reqEventProcessKanban.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDerivedProd</Name>
				<Source><![CDATA[
    void reverseDerivedProd(ProdBOM  prodBOM)
    {
        ProdParmStatusDecrease  derivedProdParmStatusDecrease;

        if (prodParmStatusDecrease.DerivedProd && prodBOM.InventRefType == InventRefType::Production && prodBOM.ProdLineType == BOMType::PeggedSupply)
        {
            ProdTable derivedProdTable = ProdTable::find(prodBOM.InventRefId);

            if (derivedProdTable.RecId && derivedProdTable.InventRefType == InventRefType::ProdLine && derivedProdTable.InventRefTransId == prodBOM.InventTransId)
            {
                if (derivedProdTable.status().isAfterOrEqualTo(prodParmStatusDecrease.WantedStatus))
                {
                    if (derivedProdTable.status().isAfter(prodParmStatusDecrease.WantedStatus) 
                        && !derivedProdTable.status().runStatusDecrease(null,true))
                    {
                        throw error(strfmt("@SYS76498", strfmt("@SYS25687",derivedProdTable.ProdId), "@SYS134082"));
                    }
                    else
                    {
                        if (ProdStatusOrderedList::newFromOrder().isAfter(derivedProdTable.ProdStatus, prodParmStatusDecrease.WantedStatus))
                        {
                            derivedProdParmStatusDecrease.data(prodParmStatusDecrease);
                            derivedProdParmStatusDecrease.ProdId = derivedProdTable.ProdId;
                            derivedProdParmStatusDecrease.ParmId = '';
                            derivedProdParmStatusDecrease.RecId  = 0;

                            derivedProdTable.status().runStatusDecrease(derivedProdParmStatusDecrease,false,this);
                        }

                        if (prodParmStatusDecrease.CancelDerivedProd && prodBOM.ProdLineType != BOMType::Item)
                        {
                            derivedProdTable = ProdTable::find(derivedProdTable.ProdId,true);
                            if (derivedProdTable.RecId)
                            {
                                derivedProdTable.delete(false);

                                this.addDeletedRec(derivedProdTable);
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDerivedPurch</Name>
				<Source><![CDATA[
    void reverseDerivedPurch(ProdBOM  prodBOM)
    {
        PurchTable              purchTable;
        boolean needCancel = false;

        if (prodParmStatusDecrease.CancelDerivedPurch   == NoYes::Yes                   &&
            prodBOM.InventRefType                       == InventRefType::Purch         &&
            prodBOM.InventRefTransId                                                    &&
            prodBOM.ProdLineType                        != BOMType::Item
           )
        {
            PurchLine purchLine = PurchLine::findInventTransId(prodBOM.InventRefTransId, true);

            if (!purchLine.purchTable().canAutoUpdatePurchOrder())
            {
                purchTable = purchLine.purchTable(true);
                var versioningPurchaseOrder = VersioningPurchaseOrder::newPurchaseOrder(purchTable);
                needCancel = versioningPurchaseOrder.resetToDraft();
            }

            if (purchLine.ItemRefType == InventRefType::ProdLine && purchLine.InventRefTransId == prodBOM.InventTransId)
            {
                PurchId rememberPurchNum = purchLine.PurchId;

                if (purchLine.validateDelete() && purchLine.receivedInTotal() == 0)
                {
                    purchLine.delete(false);
                    prodBOM.reread();

                    InventMovement inventMovement = InventMovement::constructNoThrow(prodBOM);
                    if (inventMovement)
                    {
                        inventMovement.clearInventRefFields();
                    }
                }
                else
                {
                    throw error(strfmt("@SYS76498", "@SYS134081", "@SYS134082"));
                }

                select firstonly forupdate RecId from purchLine
                    index PurchLineIdx
                    where purchLine.PurchId == rememberPurchNum;

                if (!purchLine.RecId)
                {
                    purchTable= PurchTable::find(rememberPurchNum,true);

                    if (purchTable && purchTable.validateDelete())
                    {
                        purchTable.delete();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePriceCalc</Name>
				<Source><![CDATA[
    void reversePriceCalc(ProdCalcTrans prodCalcTrans)
    {
        prodCalcTrans.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseProdBOM</Name>
				<Source><![CDATA[
    void reverseProdBOM(ProdBOM _prodBOM)
    {
        ProdId  derivedProdId;

        if (_prodBOM.InventRefType == InventRefType::Production && _prodBOM.ProdLineType == BOMType::PeggedSupply)
        {
            derivedProdId = _prodBOM.InventRefId;
        }

        this.reverseDerivedPurch(_prodBOM);
        this.reverseDerivedProd(_prodBOM);
        this.reverseDerivedKanban(_prodBOM);

        // Refresh the buffer as some of the previous calls might have updated it
        _prodBOM.reread();

        _prodBOM.RemainInventPhysical    = 0;
        _prodBOM.RemainBOMPhysical       = 0;
        _prodBOM.QtyInventCalc           = 0;
        _prodBOM.QtyBOMCalc              = 0;
        _prodBOM.RawMaterialDate         = dateNull();
        _prodBOM.RawMaterialTime         = 0;
        _prodBOM.EndConsump              = NoYes::No;
        
        if (_prodBOM.prodTable().ProdType == ProdType::Process)
        {
            _prodBOM.pmfInitBomQty(_prodBOM.prodTable().PmfYieldPct);
        }

        if (#PdsCatchWeightEnabled)
        {
            _prodBOM.PdsCWRemainPhysical     = 0;
            _prodBOM.PdsCWInventCalc         = 0;
        }

        if (_prodBOM.isProjMethodConsumed())
        {
            ProjInventJournalTransMapForm::construct(_prodBOM).fieldModifiedQtyPost();
        }

        this.deleteOwnershipChangeJournalLineLinks(_prodBOM);

        _prodBOM.update();

        if (derivedProdId)
        {
            this.addUpdateRec(ProdTable::find(derivedProdId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOwnershipChangeJournalLineLinks</Name>
				<Source><![CDATA[
    private void deleteOwnershipChangeJournalLineLinks(ProdBOM _prodBOM)
    {
        InventMovement movement = InventMovement::construct(_prodBOM);
        if (movement.inventDimGroupSetup().isDimensionActive(fieldNum(InventDim, InventOwnerId_RU)))
        {
            InventTransOriginProdBomOwnershipChangeJournalTransLink link;
            delete_from link
                where link.ProductionBOMLine == movement.inventTransOriginId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseProdRoute</Name>
				<Source><![CDATA[
    void reverseProdRoute(ProdRoute prodRoute)
    {
        prodRoute.CalcQty     = 0;
        prodRoute.CalcSetUp   = 0;
        prodRoute.CalcProc    = 0;

        if (prodRoute.isProjMethodConsumed())
        {
            ProjJournalTransMapForm::construct(prodRoute.prodRouteProj(ItemCalcType::Setup), prodRoute).fieldModifiedQtyPost();
            ProjJournalTransMapForm::construct(prodRoute.prodRouteProj(ItemCalcType::Process), prodRoute).fieldModifiedQtyPost();
            ProjJournalTransMapForm::construct(prodRoute.prodRouteProj(ItemCalcType::Qty), prodRoute).fieldModifiedQtyPost();
        }

        prodRoute.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>