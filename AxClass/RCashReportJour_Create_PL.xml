<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RCashReportJour_Create_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>RCashReportJour_Create_PL</c> class creates the cash report journal with cash transactions for the specified period.
/// </summary>
public class RCashReportJour_Create_PL extends RunBaseBatch implements BatchRetryable
{
    TransDate               transDate;
    UserId                  user;
    DialogField             transDateField;
    DialogField             userField;
    QueryRun                queryRun;
    RCashTable              cashTable;
    // <GEEHU>
    HuDenominationSummary tmpDenominations;
    // </GEEHU>

    #ISOCountryRegionCodes
    private const int CurrentVersion = 1;

    #localmacro.CurrentList
        user
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumSeqCode</Name>
				<Source><![CDATA[
    protected NumberSeq allocateNumSeqCode(RCashAccount _accountNum)
    {
        NumberSequenceCode numSeqCode = RCashReportJour_PL::getNumberSeqCode(_accountNum);

        return NumberSeq::newGetNumFromCode(numSeqCode, NumberSeqScopeFactory::createDefaultScope(), true, false, null, false, UnknownNoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkData</Name>
				<Source><![CDATA[
    private boolean checkData(
        RCashAccount        _accountNum,
        CurrencyCode        _currencyCode,
        RCashReportNum_PL   _reportNum)
    {
        boolean ret = RCashReportJour_Create_PL::checkCashTransTobeReported(_accountNum, _currencyCode, transDate);

        RCashReportJour_PL reportJour = RCashReportJour_PL::findAfter(_accountNum, transDate, _currencyCode, _reportNum);
        if (reportJour)
        {
            ret = checkFailed(strfmt("@GLS110764",
                                     reportJour.TransDate,
                                     _accountNum,
                                     _currencyCode));
        }
        else if (ret)
        {
            info(strfmt("@GLS109950", _accountNum, _currencyCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;

        if (this.isDenominationFeatureEnabled () && this.parmRCashTable().Denomination_HU)
        {
            dialog = Dialog::newFormnameRunbase(formstr(HuDenominationSummary),this);
            dialog = this.dialogInternal(dialog);
        }
        else
        {
            dialog = super();
        }

        transDateField = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS36680");
        userField      = dialog.addFieldValue(extendedTypeStr(userId), user, "@SYS2192");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            transDate = transDateField.value();
            user      = userField.value();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query query = new Query("@GLS109831");
        QueryBuildDataSource qbds = query.addDataSource(tablenum(RCashTrans));

        qbds.addSortField(fieldnum(RCashTrans, AccountNum));
        qbds.addSortField(fieldnum(RCashTrans, CurrencyCode));

        qbds.orderMode(OrderMode::GroupBy);
        qbds.allowAdd(QueryAllowAdd::NoFields);

        QueryBuildRange qbr = findOrCreateRange_W(qbds, fieldnum(RCashTrans, AccountNum), cashTable.AccountNum);
        qbr.status(cashTable.AccountNum ? RangeStatus::Locked : RangeStatus::Open);

        qbr = findOrCreateRange_W(qbds, fieldnum(RCashTrans, CurrencyCode), cashTable.CurrencyCode);
        qbr.status(cashTable.CurrencyCode ? RangeStatus::Locked : RangeStatus::Open);

        if (this.isDenominationFeatureEnabled ())
        {
            qbds = qbds.addDataSource(tablenum(RCashTable));
            qbds.relations(true);
            qbds.clearRanges();

            qbr = findOrCreateRange_W(qbds, fieldnum(RCashTable, Denomination_HU), cashTable.Denomination_HU ? queryValue(NoYes::Yes): queryValue(NoYes::No));
            qbr.status(RangeStatus::Locked);
        }

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDenominationSummary</Name>
				<Source><![CDATA[
    public HuDenominationSummary parmDenominationSummary(HuDenominationSummary _tmpDenominations = tmpDenominations)
    {
        tmpDenominations = _tmpDenominations;
        return tmpDenominations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRCashTable</Name>
				<Source><![CDATA[
    public RCashTable parmRCashTable(RCashTable _cashTable = cashTable)
    {
        cashTable = _cashTable;
        return cashTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RCashTrans         cashTrans;
        RCashTrans         cashTransUpdate;
        RCashReportJour_PL reportJour;

        HuDenominationSummary denominationSummary;
        int journalCount = 0;
        RCashAccount denominationSummaryAccount = '';
        boolean isDenominationEnabled = this.isDenominationFeatureEnabled ();
        if (isDenominationEnabled)
        {
            while (queryRun.next())
            {
                cashTrans = queryRun.get(tablenum(RCashTrans));

                if (RCashTable::find(cashTrans.AccountNum).Denomination_HU)
                {
                    denominationSummaryAccount = cashTrans.AccountNum;
                }

                journalCount ++;
                if (journalCount > 1 && denominationSummaryAccount)
                {
                    throw error(strFmt("@GLS114430", denominationSummaryAccount));
                }
            }
            queryRun.reset();
        }

        ttsbegin;

        while (queryRun.next())
        {
            cashTrans = queryRun.get(tablenum(RCashTrans));

            NumberSeq numberSeq = this.allocateNumSeqCode(cashTrans.AccountNum);
            RCashReportNum_PL reportNum = numberSeq.num();

            boolean checked = this.checkData(cashTrans.AccountNum, cashTrans.CurrencyCode, reportNum);
            if (! checked)
            {
                numberSeq.abort();
                continue;
            }

            reportJour.clear();

            reportJour.AccountNum        = cashTrans.AccountNum;
            reportJour.ReportNum         = reportNum;
            reportJour.TransDate         = transDate;
            reportJour.PreparedBy        = UserInfoHelp::userName(user);
            reportJour.CurrencyCode      = cashTrans.CurrencyCode;
            if (isDenominationEnabled)
            {
                reportJour.ClosingBalance_HU = RCashReportJour_Create_PL::calcClosingBalance_HU(cashTrans.AccountNum, cashTrans.CurrencyCode, transDate);
            }

            reportJour.insert();

            RCashReportJour_Create_PL::setCashTransReportNum(reportJour, cashTransUpdate);

            numberSeq.used();

            if (isDenominationEnabled)
            {
                while select tmpDenominations
                {
                    denominationSummary.data(tmpDenominations);
                    denominationSummary.ReportNum = reportNum;
                    denominationSummary.insert();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer                 version = conpeek(_packedClass, 1);
        container               packedQuery;
        QueryBuildRange         queryBuildRangeDenominations;

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                    QueryBuildRange qbr = queryRun.query().dataSourceTable(tablenum(RCashTrans)).findRange(fieldnum(RCashTrans, AccountNum));
                    if (qbr)
                    {
                        if (cashTable.AccountNum)
                        {
                            qbr.value(cashTable.AccountNum);
                        }
                        qbr.status(cashTable.AccountNum ? RangeStatus::Locked : RangeStatus::Open);
                    }
                    QueryBuildRange qbrc = queryRun.query().dataSourceTable(tablenum(RCashTrans)).findRange(fieldnum(RCashTrans, CurrencyCode));
                    if (qbrc)
                    {
                        if (cashTable.CurrencyCode)
                        {
                            qbrc.value(cashTable.CurrencyCode);
                        }
                        qbrc.status(cashTable.CurrencyCode ? RangeStatus::Locked : RangeStatus::Open);
                    }

                    QueryBuildDataSource qbds = queryRun.query().dataSourceTable(tablenum(RCashTable));
                    if (qbds)
                    {
                        queryBuildRangeDenominations = qbds.findRange(fieldnum(RCashTable, Denomination_HU));
                    }

                    if (this.isDenominationFeatureEnabled ())
                    {
                        if (!qbds)
                        {
                            qbds = queryRun.query().addDataSource(tablenum(RCashTable));
                            qbds.relations(true);
                        }

                        queryBuildRangeDenominations = findOrCreateRange_W(queryRun.query().dataSourceTable(tablenum(RCashTable)), fieldnum(RCashTable, Denomination_HU), cashTable.Denomination_HU ? queryValue(NoYes::Yes): queryValue(NoYes::No));
                        queryBuildRangeDenominations.status(RangeStatus::Locked);
                        queryBuildRangeDenominations.enabled(true);
                    }
                    else if (queryBuildRangeDenominations)
                    {
                        queryBuildRangeDenominations.enabled(false);
                        queryBuildRangeDenominations.status(RangeStatus::Hidden);
                    }
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void updateQueryBuild()
    {
        findOrCreateRange_W(queryRun.query().dataSourceTable(tablenum(RCashTrans)),
                            fieldnum(RCashTrans, TransDate), SysQuery::range(dateNull(), transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super();

        if (ret)
        {
            if (! transDate || ! user)
            {
                ret = checkFailed("@GLS109699");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcClosingBalance_HU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the closing balance on a cash account for a specified date and currency.
    /// </summary>
    /// <param name="_accountNum">
    ///     The cash account for which the closing balance needs to be calculated.
    /// </param>
    /// <param name="_currencyCode">
    ///     The currency for which the closing balance needs to be calculated.
    /// </param>
    /// <param name="_transDate">
    ///     The date upto which the transactions need to be included for calculating the balance.
    /// </param>
    /// <returns>
    ///     The closing balance amount.
    /// </returns>
    public static AmountCur calcClosingBalance_HU(
        RCashAccount    _accountNum,
        CurrencyCode    _currencyCode,
        TransDate       _transDate)
    {
        RCashBalanceCur cashBalance = new RCashBalanceCur(_transDate);

        cashBalance.calc(_accountNum, _currencyCode);

        return cashBalance.amountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCashTransTobeReported</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if there are any cash transactions which have not been reported yet.
    /// </summary>
    /// <param name="_accountNum">
    ///     The cash account.
    /// </param>
    /// <param name="_currencyCode">
    ///     The curency code.
    /// </param>
    /// <param name="_transDate">
    ///     The transaction date.
    /// </param>
    /// <returns>
    ///     true if there are transactions to be reported; false, otherwise.
    /// </returns>
    public static boolean checkCashTransTobeReported(
        RCashAccount        _accountNum,
        CurrencyCode        _currencyCode,
        TransDate           _transDate)
    {
        RCashTrans          cashTrans;
        boolean             ret = true;

        select firstOnly RecId from cashTrans
            where cashTrans.AccountNum   == _accountNum
               && cashTrans.CurrencyCode == _currencyCode
               && cashTrans.TransDate    <= _transDate
               && !cashTrans.ReportNum_PL;

        if (!cashTrans.RecId)
        {
            ret = checkFailed(strfmt("@GLS109695", _accountNum, _transDate, _currencyCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS109831";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RCashReportJour_Create_PL reportJourCreate = new RCashReportJour_Create_PL();

        if (_args && _args.record() && _args.dataset() == tablenum(RCashTable))
        {
            RCashTable cashTable = _args.record();
            reportJourCreate.parmRCashTable(cashTable);
            reportJourCreate.initParmDefault();
        }

        if (reportJourCreate.prompt())
        {
            reportJourCreate.updateQueryBuild();
            reportJourCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashTransReportNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the report number value on the cash transactions with the value from cash report journal.
    /// </summary>
    /// <param name="_cashReportJour">
    ///     The <c>RCashReportJour_PL</c> table buffer.
    /// </param>
    /// <param name="_cashTrans">
    ///     The <c>RCashTrans</c> table buffer.
    /// </param>
    public static void setCashTransReportNum(
        RCashReportJour_PL    _cashReportJour,
        RCashTrans            _cashTrans)
    {
        ttsBegin;
        update_recordset _cashTrans
            setting ReportNum_PL = _cashReportJour.ReportNum
            where _cashTrans.AccountNum   == _cashReportJour.AccountNum
               && _cashTrans.TransDate    <= _cashReportJour.TransDate
               && _cashTrans.CurrencyCode == _cashReportJour.CurrencyCode
               && ! _cashTrans.ReportNum_PL;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDenominationFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the denomination is enabled or not.
    /// </summary>
    /// <returns>
    /// true if denomination is enabled; otherwise, false.
    /// </returns>
    protected boolean isDenominationFeatureEnabled () 
    { 
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]); 
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>