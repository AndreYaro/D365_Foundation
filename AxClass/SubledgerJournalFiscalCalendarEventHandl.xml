<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalFiscalCalendarEventHandl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalFiscalCalendarEventHandl</c> class implements an event handler for the
/// <c>fiscalPeriodStatusEvent</c> event.This event will be raised with the period status is changed.
/// </summary>
class SubledgerJournalFiscalCalendarEventHandl/*er*/
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAccDistWithNoAccEvent</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(FiscalCalendars), delegatestr(FiscalCalendars, fiscalPeriodStatusEvent))]
    /// <summary>
    /// Checks for the existence of accounting distributions that have no accounting events.
    /// </summary>
    /// <remarks>
    /// Excludes source documents that never requires financial accounting recognition ( ex. Earning Statement)
    /// </remarks>
    /// <param name="_fiscalCalendars">
    /// A <c>FiscalCalendars</c> record for which subledger journal entries are validated.
    /// </param>
    /// <param name="_currentPeriod">
    /// A <c>FiscalCalendarPeriod</c> record for which subledger journal entries are validated.
    /// </param>
    public static void checkAccDistWithNoAccEvent(FiscalCalendars _fiscalCalendars, FiscalCalendarPeriod _currentPeriod)
    {
        container               accountingNeverRequiredSourceDocTypes;
        int                     incompleteAccountingDocumentsCount;
        int                     currentElement;
        Query                   query;
        QueryBuildDataSource    accountingDistributionTable;
        QueryBuildDataSource    ledgerTable;
        QueryBuildDataSource    fiscalCalendarTable;
        QueryBuildDataSource    fiscalCalendarPeriodTable;
        QueryBuildDataSource    sourceDocumentHeaderTable;
        QueryBuildRange         accountingDateRange;
        QueryBuildRange         fiscalCalendarPeriodRecIdRange;
        QueryBuildRange         sourceDocumentTypeEnumNameRange;

        if (_currentPeriod)
        {
            accountingNeverRequiredSourceDocTypes = SourceDocumentAccountingPolicy::getNonAccountingSourceDocumentTypes();

            query = new query();

            accountingDistributionTable = query.addDataSource(tableNum(AccountingDistribution));
            accountingDistributionTable.firstOnly(true);
            accountingDistributionTable.addSelectionField(fieldNum(AccountingDistribution, RecId));
            accountingDateRange = accountingDistributionTable.addRange(fieldNum(AccountingDistribution, AccountingDate));
            accountingDateRange.value(SysQuery::range(_currentPeriod.StartDate, _currentPeriod.EndDate));
            accountingDistributionTable.addRange(fieldNum(AccountingDistribution, AccountingEvent)).value(SysQuery::value(0));

            ledgerTable = accountingDistributionTable.addDataSource(tableNum(Ledger));
            ledgerTable.joinMode(JoinMode::ExistsJoin);
            ledgerTable.relations(false);
            ledgerTable.addLink(fieldNum(AccountingDistribution, AccountingLegalEntity), fieldNum(Ledger, PrimaryForLegalEntity));
            ledgerTable.addRange(fieldNum(Ledger, RecId)).value(queryValue(Ledger::current()));

            fiscalCalendarTable = ledgerTable.addDataSource(tableNum(FiscalCalendar));
            fiscalCalendarTable.joinMode(JoinMode::ExistsJoin);
            fiscalCalendarTable.relations(false);
            fiscalCalendarTable.addLink(fieldNum(Ledger, FiscalCalendar), fieldNum(FiscalCalendar, RecId));

            fiscalCalendarPeriodTable = fiscalCalendarTable.addDataSource(tableNum(FiscalCalendarPeriod));
            fiscalCalendarPeriodTable.joinMode(JoinMode::ExistsJoin);
            fiscalCalendarPeriodTable.relations(false);
            fiscalCalendarPeriodTable.addLink(fieldNum(FiscalCalendar, RecId), fieldNum(FiscalCalendarPeriod, FiscalCalendar));
            fiscalCalendarPeriodRecIdRange = fiscalCalendarPeriodTable.addRange(fieldNum(FiscalCalendarPeriod, RecId));
            fiscalCalendarPeriodRecIdRange.value(SysQuery::value(_currentPeriod.RecId));

            sourceDocumentHeaderTable = accountingDistributionTable.addDataSource(tableNum(SourceDocumentHeader));
            sourceDocumentHeaderTable.joinMode(JoinMode::NoExistsJoin);
            sourceDocumentHeaderTable.addLink(fieldNum(AccountingDistribution, SourceDocumentHeader), fieldNum(SourceDocumentHeader, RecId));

            if (accountingNeverRequiredSourceDocTypes != conNull())
            {
                for (currentElement = 1; currentElement <= conLen(accountingNeverRequiredSourceDocTypes); currentElement++)
                {
                    sourceDocumentTypeEnumNameRange = sourceDocumentHeaderTable.addRange(fieldNum(SourceDocumentHeader, TypeEnumName));
                    sourceDocumentTypeEnumNameRange.value(SysQuery::value(conPeek(accountingNeverRequiredSourceDocTypes, currentElement)));
                }
            }

            incompleteAccountingDocumentsCount = QueryRun::getQueryRowCount(query, 1);

            if (incompleteAccountingDocumentsCount)
            {
                _fiscalCalendars.addWarning(strFmt("@SourceDocumentAccountingFramework:SourceDocumentFrameworkFiscalCalendarValidation", _currentPeriod.Name));
                _fiscalCalendars.addWarning("@SourceDocumentAccountingFramework:SourceDocumentFrameworkFiscalCalendarValidationConsiderConsistencyCheckRun");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForNotJournalizedSourceDocuments</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(FiscalCalendars), delegatestr(FiscalCalendars, fiscalPeriodStatusEvent))]
    /// <summary>
    /// Checks for source documents that have not been journalized with accounting dates in a fiscal
    /// calendar period and adds a warning if any exist.
    /// </summary>
    /// <param name="_fiscalCalendars">
    /// A <c>FiscalCalendars</c> record for which subledger journal entries are validated.
    /// </param>
    /// <param name="_currentPeriod">
    /// A <c>FiscalCalendarPeriod</c> record for which subledger journal entries are validated.
    /// </param>
    public static void checkForNotJournalizedSourceDocuments(FiscalCalendars _fiscalCalendars, FiscalCalendarPeriod _currentPeriod)
    {
        AccountingEvent         accountingEvent;
        AccountingDistribution  accountingDistribution;
        FiscalCalendar          fiscalCalendar;
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        Ledger                  ledger;

        // check for accounting events that are associated with the fiscal period being closed
        // that are not yet journalized
        select firstonly RecId from accountingEvent
            where accountingEvent.AccountingDate >= _currentPeriod.StartDate &&
                accountingEvent.AccountingDate <= _currentPeriod.EndDate &&
                accountingEvent.State == AccountingEventState::Started
            exists join accountingDistribution
                where accountingDistribution.AccountingEvent == accountingEvent.RecId
            exists join ledger
                where ledger.PrimaryForLegalEntity == accountingDistribution.AccountingLegalEntity &&
                      ledger.RecId == Ledger::current()
            exists join fiscalCalendar
                where fiscalCalendar.RecId == ledger.FiscalCalendar
            exists join fiscalCalendarPeriod
                where fiscalCalendarPeriod.FiscalCalendar == fiscalCalendar.RecId &&
                    fiscalCalendarPeriod.RecId == _currentPeriod.RecId;

        if (accountingEvent)
        {
            //Cannot close period %1 when there are untransferred subledger journal accounting entries.
            _fiscalCalendars.addWarning(strFmt("@SYS344293",_currentPeriod.Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoExistUnpostedTransInJournals</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(FiscalCalendars), delegatestr(FiscalCalendars, fiscalPeriodStatusEvent))]
    /// <summary>
    /// Checks for un-transferred subledger journal entries that are present in a fiscal calendar period
    /// for the current Legal entity and adds a warning when any entries are present.
    /// </summary>
    /// <param name="_fiscalCalendars">
    /// A <c>FiscalCalendars</c> record for which subledger journal entries are validated.
    /// </param>
    /// <param name="_currentPeriod">
    /// A <c>FiscalCalendarPeriod</c> record for which subledger journal entries are validated.
    /// </param>
    public static void checkNoExistUnpostedTransInJournals(FiscalCalendars _fiscalCalendars, FiscalCalendarPeriod _currentPeriod)
    {
        SubledgerJournalEntry subledgerJournalEntry;

        if (_currentPeriod)
        {
            select firstonly subledgerJournalEntry
                    where subledgerJournalEntry.FiscalCalendarPeriod == _currentPeriod.RecId &&
                          subledgerJournalEntry.Status != SubledgerJournalEntryStatus::Transferred &&
                          subledgerJournalEntry.Ledger == Ledger::current();

            if (subledgerJournalEntry)
            {
                //Cannot close period %1 when there are untransferred subledger journal accounting entries.
                _fiscalCalendars.addWarning(strFmt("@SYS317503",_currentPeriod.Name));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>