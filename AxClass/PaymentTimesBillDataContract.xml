<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymentTimesBillDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PaymentTimesBillDataContract</c> class is a data contract for processing of payment times bill.
/// </summary>
[DataContract]
[SysOperationContractProcessing(classStr(PaymentTimesBillUIBuilder))]
public class PaymentTimesBillDataContract extends SysOperationDataContractBase implements SysOperationValidatable
{
    private FromDate dateFrom;
    private ToDate dateTo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDateFrom</Name>
				<Source><![CDATA[
    [DataMember]
    public FromDate parmDateFrom(FromDate _dateFrom = dateFrom)
    {
        dateFrom = _dateFrom;
        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo</Name>
				<Source><![CDATA[
    [DataMember]
    public ToDate parmDateTo(ToDate _dateTo = dateTo)
    {
        dateTo = _dateTo;
        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true if the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (!dateFrom)
        {
            isValid = checkFailed("@PaymentTimesBill:PeriodDatesValidationMandatoryDateFrom");
        }

        if (!dateTo)
        {
            isValid = checkFailed("@PaymentTimesBill:PeriodDatesValidationMandatoryDateTo");
        }

        if (dateFrom && dateTo && dateFrom > dateTo)
        {
            isValid = checkFailed("@PaymentTimesBill:PeriodDatesValidationDateFromTo");
        }

        PaymentTimesBill paymentTimesBill;
        select firstonly RecId from paymentTimesBill
            where !(dateFrom == paymentTimesBill.DateFrom && dateTo == paymentTimesBill.DateTo)
                && ((dateFrom >= paymentTimesBill.DateFrom && dateFrom <= paymentTimesBill.DateTo)
                    || (dateTo >= paymentTimesBill.DateFrom && dateTo <= paymentTimesBill.DateTo)
                    || (dateFrom <= paymentTimesBill.DateFrom && dateTo >= paymentTimesBill.DateTo));
        if (paymentTimesBill)
        {
            isValid = checkFailed("@Tax:DateIntervalOverlap");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>