<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TsWorkflowEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TSWorkflowEventHandler</c> class implements the <c>WorkflowEvent</c> interfaces.
/// </summary>
public class TsWorkflowEventHandler implements WorkflowStartedEventHandler,
                                               WorkflowCompletedEventHandler,
                                               WorkflowCanceledEventHandler,
                                               WorkflowElementReturnedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a cancel action event that is applied to a workflow item.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// A value that identifies the workflow context of the workflow item that fired the event.
    /// </param>
    public void canceled(WorkflowEventArgs _workflowEventArgs)
    {
        if (_workflowEventArgs.parmWorkflowContext().parmTableId() == tableNum(TSTimesheetTable))
        {
            this.updateTSTimesheetTable(_workflowEventArgs.parmWorkflowContext(), TSAppStatus::Create);
        }
        else if (_workflowEventArgs.parmWorkflowContext().parmTableId() == tableNum(TSTimesheetLine))
        {
            this.updateTSTimesheetLine(_workflowEventArgs.parmWorkflowContext(), TSAppStatus::Create);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles an approve action event that is applied to a workflow item.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// A value that identifies the workflow context of the workflow item that fired the event.
    /// </param>
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        if (_workflowEventArgs.parmWorkflowContext().parmTableId() == tableNum(TSTimesheetTable))
        {
            TSTimesheetTable tsTimesheetTable;
            select firstonly * from tsTimesheetTable where tsTimesheetTable.RecId == _workflowEventArgs.parmWorkflowContext().parmRecId();
            tsTimesheetTable.validateBudget();
            this.updateTSTimesheetTable(_workflowEventArgs.parmWorkflowContext(), TSAppStatus::Approved);
        }
        else if (_workflowEventArgs.parmWorkflowContext().parmTableId() == tableNum(TSTimesheetLine))
        {
            TSTimesheetLine tsTimesheetLine;
            select firstonly * from tsTimesheetLine where tsTimesheetLine.RecId == _workflowEventArgs.parmWorkflowContext().parmRecId();
            tsTimesheetLine.validateBudget();
            this.updateTSTimesheetLine(_workflowEventArgs.parmWorkflowContext(), TSAppStatus::Approved);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the rejection action that is applied to a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A value that identifies the workflow context of the workflow item that fired the event.
    /// </param>
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        if (_workflowElementEventArgs.parmWorkflowContext().parmTableId() == tableNum(TSTimesheetTable))
        {
            this.updateTSTimesheetTable(_workflowElementEventArgs.parmWorkflowContext(), TSAppStatus::Returned);
        }
        else if (_workflowElementEventArgs.parmWorkflowContext().parmTableId() == tableNum(TSTimesheetLine))
        {
            this.updateTSTimesheetLine(_workflowElementEventArgs.parmWorkflowContext(), TSAppStatus::Returned);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a start event that is applied a workflow item
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// A value that identifies the workflow context of the workflow item that fired the event.
    /// </param>
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        if (_workflowEventArgs.parmWorkflowContext().parmTableId() == tableNum(TSTimesheetTable))
        {
            this.updateTSTimesheetTable(_workflowEventArgs.parmWorkflowContext(), TSAppStatus::Pending);
        }
        else if (_workflowEventArgs.parmWorkflowContext().parmTableId() == tableNum(TSTimesheetLine))
        {
            this.updateTSTimesheetLine(_workflowEventArgs.parmWorkflowContext(), TSAppStatus::Pending);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTSTimesheetLine</Name>
				<Source><![CDATA[
    private void updateTSTimesheetLine(WorkflowContext workflowContext, TSAppStatus newStatus)
    {
        TSTimesheetLine tsTimesheetLine;
        TSTimesheetLineWeek tsLineWeek;
        TSTimesheetTrans tsTrans;

        select firstonly forupdate RecId,ApprovalStatus from tsTimesheetLine where tsTimesheetLine.RecId == workflowContext.parmRecId();

        Debug::assert(tsTimesheetLine.RecId != 0);

        if (tsTimesheetLine.ApprovalStatus != newStatus)
        {
            if (!TSStateChangeManager::validateStatusChange(tsTimesheetLine.ApprovalStatus, newStatus, true))
            {
                throw error(strFmt("@SYS108515",tsTimesheetLine.ApprovalStatus, newStatus));
            }

            tsTimesheetLine.ApprovalStatus = newStatus;
            tsTimesheetLine.doUpdate();

            tsTrans.skipDataMethods(true);

            update_recordset tsTrans setting ApprovalStatus = newStatus
                join tsLineWeek where tsTrans.tsTimesheetLineWeek == tsLineWeek.RecId && tsLineWeek.tsTimesheetLine == tsTimesheetLine.RecId;

            if (newStatus == TSAppStatus::Approved)
            {
                this.updateTsTransPriceAndDistributionsWhenBlank(tsTimesheetLine.RecId);
            }
        }

        if (tsTimesheetLine.ApprovalStatus == TSAppStatus::Returned ||
            tsTimesheetLine.ApprovalStatus == TSAppStatus::Pending ||
            tsTimesheetLine.ApprovalStatus == TSAppStatus::Create)
        {
            while select * from tsTrans
                exists join tsLineWeek where tsTrans.TSTimesheetLineWeek == tsLineWeek.RecId && tsLineWeek.TSTimesheetLine == tsTimesheetLine.RecId
            {
                if (tsTimesheetLine.ApprovalStatus == TSAppStatus::Pending)
                {
                    tsTrans.createCommitmentCostRecords();
                }
                else if (tsTimesheetLine.ApprovalStatus  == TSAppStatus::Create ||
                        tsTimesheetLine.ApprovalStatus   == TSAppStatus::Returned)
                {
                    tsTrans.deleteCommitmentCostRecords();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTsTransPriceAndDistributionsWhenBlank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales price and cost price of TsTimesheetTrans records related with the given TsTimesheetLine if those fields are blank.
    /// If sales price or cost price is blank, then, the account distributions will also be generated.
    /// </summary>
    /// <param name = "_timesheetLineRecId">RecId of the TsTimesheetLine.</param>
    /// <remarks>
    /// While resubmitting a timesheet line that has been recalled, hours for dates that were initially blank may have been entered.
    /// In that scenario, the TsWorkflowActionManager is not invoked, so, the code that would set sales price, cost price and that would generate the distributions is skipped.
    /// </remarks>
    private void updateTsTransPriceAndDistributionsWhenBlank(RecId _timesheetLineRecId)
    {
        TSTimesheetTrans tsTrans;
        TSTimesheetLineWeek tsLineWeek;
        var timesheetLine = TSTimesheetLine::findRecId(_timesheetLineRecId);

        var projParameters = ProjParameters::find();

        while select forupdate tsTrans
        where (tsTrans.SalesPrice == 0 || tsTrans.CostPrice == 0)
            exists join tsLineWeek
                where tsTrans.TSTimesheetLineWeek == tsLineWeek.RecId &&
                        tsLineWeek.TSTimesheetLine == _timesheetLineRecId
        {
            if (tsTrans.CostPrice == 0)
            {
                tsTrans.setCostPrice(timesheetLine);
            }

            if (tsTrans.SalesPrice == 0)
            {
                tsTrans.setSalesPrice(timesheetLine);
            }

            tsTrans.doUpdate();

            if (projParameters.TrackCommittedCostTimesheets)
            {
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(tsTrans, false, SourceDocumentLineAccountingStatus::FullyDistributed);
            }
            else
            {
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(tsTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTSTimesheetTable</Name>
				<Source><![CDATA[
    private void updateTSTimesheetTable(WorkflowContext workflowContext, TSAppStatus newStatus)
    {
        TSTimesheetTable    tsTimesheetTable;
        TSTimesheetLine     tsTimesheetLine;
        TSTimesheetLineWeek tsTimesheetLineWeek;
        TSTimesheetLine     tsTimesheetLineNum;
        TSTimesheetLine     tsTimesheetCancelledLine;
        TSTimesheetLineWeek tsLineWeekCancelled;
        TSTimesheetTrans    tsTrans;
        WorkflowTrackingStatusTable trackingStatusTable;
        boolean isLineItemApprovalConfigured = false;

        select firstonly forupdate RecId,ApprovalStatus from tsTimesheetTable where tsTimesheetTable.RecId == workflowContext.parmRecId();

        Debug::assert(tsTimesheetTable.RecId != 0);

        isLineItemApprovalConfigured = TSWorkflowActionManager::isLineItemApprovalConfigured(workflowContext.parmRootCorrelationId());

        if (tsTimesheetTable.ApprovalStatus != newStatus)
        {
            if (!TSStateChangeManager::validateStatusChange(tsTimesheetTable.ApprovalStatus, newStatus))
            {
                throw error(strFmt("@SYS108515",tsTimesheetTable.ApprovalStatus, newStatus));
            }

            tsTimesheetTable.ApprovalStatus = newStatus;
            tsTimesheetTable.doUpdate();

            if (!isLineItemApprovalConfigured || newStatus == TSAppStatus::Approved)
            {
                // Timesheet line/trans status will be moved to approved only if the lines are in review state
                if (newStatus == TSAppStatus::Approved)
                {
                    tsTimesheetLine.skipDataMethods(true);
                    tsTrans.skipDataMethods(true);

                    update_recordset tsTrans setting ApprovalStatus = newStatus where
                        tsTrans.TimesheetNbr == tsTimesheetTable.TimesheetNbr
                        exists join tsTimesheetLineWeek where
                            tsTimesheetLineWeek.RecId == tsTrans.TSTimesheetLineWeek
                            exists join tsTimesheetLineNum where
                                tsTimesheetLineNum.TimesheetNbr   == tsTimesheetLineWeek.TimesheetNbr   &&
                                tsTimesheetLineNum.LineNum        == tsTimesheetLineWeek.LineNum        &&
                                tsTimesheetLineNum.ApprovalStatus == TsAppStatus::Pending;

                    update_recordset tsTimesheetLine setting ApprovalStatus = newStatus
                        where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr
                           && tsTimesheetLine.ApprovalStatus == TsAppStatus::Pending;

                    // Zero out the entries from timesheet line if it is in draft state and line workflow is cancelled
                    delete_from tsLineWeekCancelled
                        where tsLineWeekCancelled.TimesheetNbr == tsTimesheetTable.TimesheetNbr
                            exists join tsTimesheetCancelledLine
                                where tsTimesheetCancelledLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr
                                   && tsTimesheetCancelledLine.ApprovalStatus == TSAppStatus::Create
                                   && tsTimesheetCancelledLine.RecId == tsLineWeekCancelled.TSTimesheetLine
                            exists join trackingStatusTable
                                where trackingStatusTable.ContextRecId == tsTimesheetCancelledLine.RecId
                                   && trackingStatusTable.ContextTableId == tsTimesheetCancelledLine.TableId
                                   && trackingStatusTable.ParentCorrelationId != nullValueBaseType(Types::Guid)
                                   && trackingStatusTable.TrackingStatus == WorkflowTrackingStatus::Cancelled;

                    select firstonly RecId from tsLineWeekCancelled
                        where tsLineWeekCancelled.TimesheetNbr == tsTimesheetTable.TimesheetNbr;

                    if (!tsLineWeekCancelled.RecId)
                    {
                        tsTimesheetTable.ApprovalStatus = TsAppStatus::Create;
                        tsTimesheetTable.doUpdate();
                    }
                }
                else
                {
                    tsTimesheetLine.skipDataMethods(true);
                    tsTrans.skipDataMethods(true);
                    update_recordset tsTimesheetLine setting ApprovalStatus = newStatus where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr;
                    update_recordset tsTrans setting ApprovalStatus = newStatus where tsTrans.TimesheetNbr == tsTimesheetTable.TimesheetNbr;
                }
            }

            // Timesheet Recalled, update trans and line records as well to Create
            if (isLineItemApprovalConfigured && newStatus == TSAppStatus::Create)
            {
                tsTimesheetLine.skipDataMethods(true);
                tsTrans.skipDataMethods(true);
                update_recordset tsTimesheetLine setting ApprovalStatus = newStatus where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr;
                update_recordset tsTrans setting ApprovalStatus = newStatus where tsTrans.TimesheetNbr == tsTimesheetTable.TimesheetNbr;
            }
        }

        TSTimesheetTrans::setPSAIndirectComponentGroup(tsTimesheetTable);

        if (tsTimesheetTable.ApprovalStatus == TSAppStatus::Approved)
        {
            if (tsTimesheetTable.validateBudget())
            {
                tsTimesheetTable.createCommitmentCostRecords();
            }

            if (ProjParameters::find().ManualAutomatic == TSManualAutomatic::Automatic)
            {
                TSTimesheetsPostOperation::runAsync(tsTimesheetTable);
            }
        }

        if (!isLineItemApprovalConfigured)
        {
            if (tsTimesheetTable.ApprovalStatus== TSAppStatus::Pending)
            {
                tsTimesheetTable.createCommitmentCostRecords();
            }
            else if (tsTimesheetTable.ApprovalStatus == TSAppStatus::Create ||
                     tsTimesheetTable.ApprovalStatus == TSAppStatus::Returned)
            {
                tsTimesheetTable.deleteCommitmentCostRecords();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>