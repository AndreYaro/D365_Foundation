<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportPopulateResource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventValueReportPopulateResource</c> class represents logic that is common for classes that
/// generate report data for material, labor, and indirect cost resources.
/// </summary>
abstract class InventValueReportPopulateResource extends InventValueReportBase
{
    InventValueResourceId   resourceId;
    RecordSortedList        reportLines;
    InventValueReport       inventValueReport;
    InventParameters        inventParameters;
    Query                   inventSiteQuery;
    int                     insertReportLineCount;

    #DEFINE.InsertReportLineCount(50000)
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        resourceId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTransactionsWithDynamicQuery</Name>
				<Source><![CDATA[
    abstract protected void buildTransactionsWithDynamicQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRangesFromContractQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds ranges from <c>InventValueReportTmpLine</c> in the contract query to a data sources.
    /// </summary>
    /// <param name="_map">
    ///    A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in the data source.
    /// </param>
    /// <param name="_qbds">
    ///    A <c>QueryBuildDatasource</c> object.
    /// </param>
    /// <remarks>
    ///    API changed. Method is now common for all subclasses.
    /// </remarks>
    protected void copyRangesFromContractQuery(
        Map                     _map,
        QueryBuildDataSource    _qbds /*in-out*/)
    {
        if (inventValueReportContract.parmQuery())
        {
            QueryBuildDataSource qbdsInventValueReportTmpLine = inventValueReportContract.parmQuery().dataSourceTable(tableNum(InventValueReportTmpLine));

            if (_map)
            {
                MapEnumerator me = _map.getEnumerator();

                while (me.moveNext())
                {
                    QueryBuildRange queryBuildRange = qbdsInventValueReportTmpLine.findRange(me.currentKey());
                    if (queryBuildRange != null)
                    {
                        SysQuery::findOrCreateRange(_qbds, me.currentValue()).value(queryBuildRange.value());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventValueReportParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the record with the parameters that were used by the <c>View</c> objects.
    /// </summary>
    protected void deleteInventValueReportParm()
    {
        InventValueReportParm inventValueReportParm;

        delete_from inventValueReportParm
            where inventValueReportParm.SessionId == sessionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the invent site ID that is based on the default dimension.
    /// </summary>
    /// <param name="_defaultDimension">
    ///    The default dimension record ID for which the invent site ID is fetched.
    /// </param>
    /// <returns>
    ///    The site ID that corresponds to the default dimension.
    /// </returns>
    protected InventSiteId getInventSiteId(RecId _defaultDimension)
    {
        InventSiteId            retVal = '';

        if (_defaultDimension != 0)
        {
            if (!inventSiteQuery)
            {
                inventSiteQuery = new Query();
                QueryBuildDataSource qbdsDimAttrValueSetItem1 = inventSiteQuery.addDataSource(tableNum(DimensionAttributeValueSetItem));
                qbdsDimAttrValueSetItem1.joinMode(JoinMode::InnerJoin);
                QueryBuildDataSource qbdsDimAttrValueSetItem2 = qbdsDimAttrValueSetItem1.addDataSource(tableNum(DimensionAttributeValueSetItem));
                qbdsDimAttrValueSetItem2.addLink(fieldNum(DimensionAttributeValueSetItem, DimensionAttributeValue), fieldNum(DimensionAttributeValueSetItem, DimensionAttributeValue));
                qbdsDimAttrValueSetItem2.joinMode(JoinMode::InnerJoin);
                qbdsDimAttrValueSetItem2.fetchMode(QueryFetchMode::One2One);
                QueryBuildDataSource qbdsInventSite = qbdsDimAttrValueSetItem2.addDataSource(tableNum(InventSite));
                qbdsInventSite.addLink(fieldNum(DimensionAttributeValueSetItem, DimensionAttributeValueSet), fieldNum(InventSite, DefaultDimension));
                qbdsInventSite.joinMode(JoinMode::InnerJoin);
                qbdsInventSite.fetchMode(QueryFetchMode::One2One);
                qbdsInventSite.addSelectionField(fieldNum(InventSite, SiteId));
                str siteIdRangeValue = this.getSiteIdRangeValue();
                if (siteIdRangeValue)
                {
                    SysQuery::findOrCreateRange(qbdsInventSite, fieldNum(InventSite, SiteId)).value(siteIdRangeValue);
                }
            }

            SysQuery::findOrCreateRange(inventSiteQuery.dataSourceNo(1), (fieldNum(DimensionAttributeValueSetItem, DimensionAttributeValueSet))).value(queryValue(_defaultDimension));

            QueryRun queryRun = new QueryRun(inventSiteQuery);
            queryRun.next();
            InventSite inventSite = queryRun.get(tableNum(InventSite));
            retVal = inventSite.SiteId;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSiteIdRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the site id range from the input query.
    /// </summary>
    /// <returns>
    /// The value for the site id range.
    /// </returns>
    protected str getSiteIdRangeValue()
    {
        str             retVal = '';

        if (inventValueReportContract.parmQuery())
        {
            QueryBuildRange queryBuildRange = inventValueReportContract.parmQuery().dataSourceTable(tableNum(InventValueReportTmpLine)).findRange(fieldNum(InventValueReportTmpLine, InventSiteId));
            if (queryBuildRange)
            {
                retVal = queryBuildRange.value();
            }
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the <c>RecordSortedList</c> with report lines.
    /// </summary>
    protected void initReportLines()
    {
        reportLines = new RecordSortedList(tableNum(InventValueReportTmpLine));

        reportLines.sortOrderFromContainer(this.reportLinesSortOrderContainer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportLinesSortOrderContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container with the sort order of the fields for the report.
    /// </summary>
    /// <returns>
    /// A container with the sort order of the fields in the report.
    /// </returns>
    protected container reportLinesSortOrderContainer()
    {
        #InventDimDevelop

        return [fieldNum(InventValueReportTmpLine, LineType),
                fieldNum(InventValueReportTmpLine, ResourceGroupId),
                fieldNum(InventValueReportTmpLine, ResourceId),
                fieldNum(InventValueReportTmpLine, ConfigId),
                fieldNum(InventValueReportTmpLine, InventSizeId),
                fieldNum(InventValueReportTmpLine, InventColorId),
                fieldNum(InventValueReportTmpLine, InventStyleId),
                fieldNum(InventValueReportTmpLine, InventVersionId),
                fieldNum(InventValueReportTmpLine, InventSiteId),
                fieldNum(InventValueReportTmpLine, InventLocationId),
                fieldNum(InventValueReportTmpLine, wmsLocationId),
                fieldNum(InventValueReportTmpLine, InventBatchId),
                fieldNum(InventValueReportTmpLine, InventSerialId),
                fieldNum(InventValueReportTmpLine, InventGtdId_RU),
                fieldNum(InventValueReportTmpLine, InventOwnerId_RU),
                fieldNum(InventValueReportTmpLine, InventProfileId_RU),
                fieldNum(InventValueReportTmpLine, InventDimension1),
                fieldNum(InventValueReportTmpLine, InventDimension2),
                fieldNum(InventValueReportTmpLine, InventDimension3),
                fieldNum(InventValueReportTmpLine, InventDimension4),
                fieldNum(InventValueReportTmpLine, InventDimension5),
                fieldNum(InventValueReportTmpLine, InventDimension6),
                fieldNum(InventValueReportTmpLine, InventDimension7),
                fieldNum(InventValueReportTmpLine, InventDimension8),
                fieldNum(InventValueReportTmpLine, InventDimension9),
                fieldNum(InventValueReportTmpLine, InventDimension10),
                fieldNum(InventValueReportTmpLine, InventDimension11),
                fieldNum(InventValueReportTmpLine, InventDimension12),
                fieldNum(InventValueReportTmpLine, Voucher),
                fieldNum(InventValueReportTmpLine, TransDate),
                fieldNum(InventValueReportTmpLine, InventTransId),
                fieldNum(InventValueReportTmpLine, TransBeginTime),
                fieldNum(InventValueReportTmpLine, Reference),
                fieldNum(InventValueReportTmpLine, ReferenceCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventValueReportParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record with parameters that will be used by <c>View</c> objects when they collect data
    /// for the report.
    /// </summary>
    protected void insertInventValueReportParm()
    {
        InventValueReportParm inventValueReportParm;

        inventValueReportParm.SessionId = sessionId();
        inventValueReportParm.FromDate  = this.getActualFromDate();
        inventValueReportParm.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReportLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the report lines to the database, when the number of lines reaches a predefined a threshold.
    /// </summary>
    /// <remarks>
    /// The method must be called when a logical unit of work is completed.
    /// </remarks>
    protected void insertReportLines()
    {
        if (reportLines.len() >= insertReportLineCount)
        {
            reportLines.insertDatabase();
            this.initReportLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionLinkLocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the dimension link is locked.
    /// </summary>
    /// <returns>
    ///    true if the dimension link is locked; otherwise, false.
    /// </returns>
    protected boolean isDimensionLinkLocked()
    {
        if (!inventParameters)
        {
            inventParameters = InventParameters::find();
        }

        return inventParameters.MultiSiteDimensionLink == InventMultiSiteDimensionLink::Locked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRangesSetOnReportLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a range is set on the <c>InventValueReportTmpLine</c> in the contract query.
    /// </summary>
    /// <param name="_map">
    ///     A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in the data source.
    /// </param>
    /// <param name="_inventDimParmFilter">
    ///     A <c>InventDimParm</c> object that reprents the filter fields.
    /// </param>
    /// <returns>
    ///     true if a range is set; otherwise, false
    /// </returns>
    protected boolean isRangesSetOnReportLine(Map _map, InventDimParm _inventDimParmFilter = null)
    {
        boolean         ret;

        if (inventValueReportContract.parmQuery())
        {
            if (_map)
            {
                MapEnumerator me = _map.getEnumerator();

                while (!ret && me.moveNext())
                {
                    QueryBuildRange queryBuildRange = inventValueReportContract.parmQuery().dataSourceTable(tableNum(InventValueReportTmpLine)).findRange(me.currentKey());
                    ret = queryBuildRange != null && queryBuildRange.value() != '';
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        insertReportLineCount = #InsertReportLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceId</Name>
				<Source><![CDATA[
    public InventValueResourceId parmResourceId(InventValueResourceId _resourceId = resourceId)
    {
        resourceId = _resourceId;

        return resourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceType</Name>
				<Source><![CDATA[
    abstract protected InventValueReportResourceType resourceType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates beginning or ending balances based on the data that is generated by the
    ///    <c>buildTransactionsWithDynamicQuery</c> method.
    /// </summary>
    public void run()
    {
        inventValueReport = InventValueReport::findByReportId(inventValueReportContract.parmReportId());

        InventValueExecutionHistory executionHistory = InventValueExecutionHistory::find(inventValueReportContract.parmTransactionId());

        if (InventValueReportStorageBundleFeature::isEnabled() && executionHistory && executionHistory.RunInBundle)
        {
            ttsbegin;
            this.insertInventValueReportParm();
            ttscommit;

            try
            {
                this.buildTransactionsWithDynamicQuery();
            }
            catch
            {
                if (appl.ttsLevel() > 0)
                {
                    ttsabort;
                }

                ttsbegin;
                this.deleteInventValueReportParm();
                ttscommit;

                InventValueBundleList::updateInventValueBundleStatus(inventValueReportContract.parmTransactionId());

                throw error("@SCM:ExceptionWhenGeneratingReport");
            }

            ttsbegin;
            this.deleteInventValueReportParm();
            ttscommit;
        }
        else
        {
            ttsbegin;

            this.insertInventValueReportParm();

            this.initReportLines();
            this.buildTransactionsWithDynamicQuery();
            reportLines.insertDatabase();

            this.deleteInventValueReportParm();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the range for dimension on a data source.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> for the dimension field.
    /// </param>
    /// <param name="_qbds">
    /// The data source.
    /// </param>
    protected void setDimensionRange(
        FieldId                 _fieldId,
        QueryBuildDataSource    _qbds)
    {
        if (this.isDimensionLinkLocked() && this.getSiteIdRangeValue() != '')
        {
            // If a site range is given, only select transaction with default dimension.
            SysQuery::findOrCreateRange(_qbds, _fieldId).value(SysQuery::valueNot(0));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container base;
        boolean ok;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                ok = super(base);
                break;

            default:
                ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a report line.
    /// </summary>
    /// <param name="_tmpReportLine">
    /// The report line to update.
    /// </param>
    protected void updateReportLine(
        InventValueReportTmpLine    _tmpReportLine)
    {
        _tmpReportLine.TransactionId = inventValueReportContract.parmTransactionId();
        if (_tmpReportLine.LineType == InventValueReportLineType::Transaction &&
            _tmpReportLine.COGSFinancialAmount == 0.0 &&
            _tmpReportLine.COGSFinancialQty == 0.0 &&
            _tmpReportLine.DeferredCOGSPhysicalNonPostedAmount == 0.0 &&
            _tmpReportLine.DeferredCOGSPhysicalNonPostedQty == 0.0 &&
            _tmpReportLine.DeferredCOGSPhysicalPostedAmount == 0.0 &&
            _tmpReportLine.DeferredCOGSPhysicalPostedQty == 0.0 &&
            _tmpReportLine.InventoryFinancialAmount == 0.0 &&
            _tmpReportLine.InventoryFinancialQty == 0.0 &&
            _tmpReportLine.InventoryPhysicalNonPostedAmount == 0.0 &&
            _tmpReportLine.InventoryPhysicalNonPostedQty == 0.0 &&
            _tmpReportLine.InventoryPhysicalPostedAmount == 0.0 &&
            _tmpReportLine.InventoryPhysicalPostedQty == 0.0 &&
            _tmpReportLine.PLFinancialAmount == 0.0 &&
            _tmpReportLine.PLFinancialQty == 0.0 &&
            _tmpReportLine.WIPPhysicalNonPostedAmount == 0.0 &&
            _tmpReportLine.WIPPhysicalNonPostedQty == 0.0 &&
            _tmpReportLine.WIPPhysicalPostedAmount == 0.0 &&
            _tmpReportLine.WIPPhysicalPostedQty == 0.0)
        {
            reportLines.del(_tmpReportLine);
        }
        else
        {
            reportLines.ins(_tmpReportLine, true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>