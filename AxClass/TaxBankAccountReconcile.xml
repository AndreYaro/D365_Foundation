<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxBankAccountReconcile</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxBankAccountReconcile</c> class is used to calculate and post sales tax in bank reconciliation.
/// </summary>
final class TaxBankAccountReconcile extends Tax
{
    BankAccountTrans    bankAccountTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and posts tax, depending on how the object is instantiated.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <returns>
    ///    The calculated tax amount.
    /// </returns>
    public TaxAmount calcAndPost(LedgerPostingController _ledgerPostingController)
    {
        AmountCur                amountCur;
        TaxAmount                taxAmount;
        TaxAmount                taxAmountNoRoundOff;
        TaxBase                  taxBase;
        TaxAmount                amountDiff;
        TaxCalculationAdjustment taxCalculationAdjustment;
        LedgerDimensionAccount   ledgerDimensionMerged;

        this.initLedgerPosting(_ledgerPostingController);

        temporaryLedgerPostingJournal = _ledgerPostingController.getJournal();

        taxAmount = 0;

        amountCur = -bankAccountTrans.AmountCur;

        // we need to calculate taxes using a base amount that has not been rounded
        taxBase = this.amountExclTax(amountCur, false, false, 0, '', '', this.sourceRecId(), this.sourceTableId());

        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(bankAccountTrans.LedgerDimension, bankAccountTrans.DefaultDimension);
        this.insertLineInInternal(taxBase,
                                    0,
                                    '',
                                    '',
                                    0,
                                    bankAccountTrans.DefaultDimension,
                                    ledgerDimensionMerged);

        if (! this.checkTaxCodesInTotal())
        {
            throw error("@SYS22772");
        }

        if (taxCalculateLine)
        {
            taxAmount = this.calcTax();
            this.saveInProcessTransaction();
        }

        if (taxCalculateTotal)
        {
            this.insertTotalInInternal(0);
            taxAmount = this.calcTax();
            this.saveTotalInProcessTransaction();
        }

        taxAmount = this.taxAmountCalculated();

        //now that taxes are calculated, we need to round this.
        taxBase = CurrencyExchangeHelper::amount(taxBase, sourceCurrencyCode);

        // we need the tax amount which doesn't have round off rules applied
        // If round off rules have been applied to the tax amount, then taxBase +
        // localCashDiscount + taxAmount will not equal journalAmount but we don't want
        // to adjust because the difference is intentional.  (due to round off rules)
        taxAmountNoRoundOff = CurrencyExchangeHelper::amount(this.taxAmountCalculatedRaw(), sourceCurrencyCode);
        if (taxBase + taxAmountNoRoundOff != amountCur)
        {
            amountDiff = taxBase + taxAmountNoRoundOff - amountCur;
            this.adjustPennyDiff(amountDiff, this.sourceTableId(), this.sourceRecId());
        }

        this.roundTaxOnTaxGroup();

        taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
        if (taxCalculationAdjustment)
        {
            taxCalculationAdjustment.loadTaxAdjustments();
        }

        if (post)
        {
            this.saveAndPost(_ledgerPostingController);
        }

        taxAmount = this.taxAmountCalculated();

        return -taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    public boolean checkParameters()
    {
        boolean ok = true;

        if (post && (! bankAccountTrans))
        {
            throw error(strFmt("@SYS22533",funcName(),tableNum(BankAccountTrans)));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDirection</Name>
				<Source><![CDATA[
    protected TaxDirection determineDirection(TaxGroupData _taxGroupData)
    {
        TaxDirection taxDirection;

        if (bankAccountTrans.AmountCur <= 0 && bankAccountTrans.LedgerTransType == LedgerTransType::Bank)
        {
            if (_taxGroupData.UseTax == NoYes::Yes)
            {
                taxDirection = TaxDirection::UseTax;
            }
            else if (_taxGroupData.ExemptTax    == NoYes::No)
            {
                taxDirection = TaxDirection::IncomingTax;
            }
            else
            {
                taxDirection = TaxDirection::TaxExemptPurchase;
            }
        }
        else if (bankAccountTrans.AmountCur > 0 && bankAccountTrans.LedgerTransType == LedgerTransType::Bank)
        {
            if (_taxGroupData.ExemptTax    == NoYes::No)
            {
                taxDirection = TaxDirection::OutgoingTax;
            }
            else
            {
                taxDirection = TaxDirection::TaxExemptSales;
            }
        }
        else
        {
            if (_taxGroupData.ExemptTax    == NoYes::No)
            {
                taxDirection = TaxDirection::IncomingTax;
            }
            else
            {
                taxDirection = TaxDirection::TaxExemptPurchase;
            }
        }

        return taxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TaxBankAccountReconcile</c> class.
    /// </summary>
    /// <param name="_post">
    ///    The post transaction.
    /// </param>
    /// <param name="_bankAccountTrans">
    ///    The bank account transaction from which the sales tax is calculated.
    /// </param>
    public void new(NoYes       _post,
             BankAccountTrans   _bankAccountTrans)
    {
        taxIncludedInItemPrice = true;
        super();

        post                = _post;
        bankAccountTrans    = _bankAccountTrans;
        taxModuleType       = TaxModuleType::BankAccountReconcile;
        headingTableId      = bankAccountTrans.TableId;
        headingRecId        = bankAccountTrans.RecId;
        this.setExchRates(_bankAccountTrans.CurrencyCode, 0, 0, UnknownNoYes::Unknown);

        if (! this.checkParameters())
        {
            throw error("@SYS18447");
        }

        taxDate = bankAccountTrans.TransDate;

        this.insertIntersection(bankAccountTrans.TaxGroup,
                                bankAccountTrans.TaxItemGroup,
                                '',
                                bankAccountTrans.Txt,
                                taxDate);

        if (! this.checkTaxCodesByLine())
        {
            throw error("@SYS22772");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the transaction line to calculate.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line to calculate.
    /// </returns>
    public recId sourceRecId()
    {
        return bankAccountTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to tax.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return bankAccountTrans.TableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>