<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DeliverySlipCalcTax__DeliverySlip_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class intialize the DeliverySlipCalcTax__DeliverySlip_BR for calculating delivery slip taxes.
/// </summary>
abstract class       DeliverySlipCalcTax__DeliverySlip_BR
extends     DeliverySlipCalcTax_BR
{
    TradeTotalsIQueryRun    lineQueryRun;
    SalesTable      salesTable;
    SalesUpdate     specQty;
    boolean         lineExist;
    SalesLine       prevSalesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the tax amount.
    /// </summary>
    /// <param name="_deliverySlipTotals">
    /// TradeTotalsBase is set.
    /// </param>
    /// <returns>
    /// The tax amount.
    /// </returns>
    [Replaceable]
    TaxAmountCur calcTax(TradeTotalsBase _deliverySlipTotals)
    {
        TaxDeliverySlip_BR        taxDeliverySlip;

        TaxAmountCur    amountCur;

        deliverySlipTotals = _deliverySlipTotals as DeliverySlipTotals_BR;

        taxDeliverySlip    = TaxDeliverySlip_BR::construct(this);

        amountCur   = taxDeliverySlip.calc();

        this.tax(taxDeliverySlip);

        return -amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for current order line.
    /// </summary>
    /// <returns>
    /// The query for current order line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TradeTotalsIQueryRun createLineQueryRun()
    {
        return TradeTotalsCommonEnumerator::newFromCommonEnumerator(
                this.parmEnumerableFactory().createLineEnumerableProvider().lineEnumerable(this.parmContract()).getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines currency code in sales record.
    /// </summary>
    /// <returns>
    /// Currency code.
    /// </returns>
    CurrencyCode currencyCode()
    {
        return salesTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines document date for the sales document based on invoice date.
    /// </summary>
    /// <returns>
    /// Returns document date of the sales document based on invoice date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    DlvDate deliveryDate()
    {
        return salesLine.deliveryDate(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines document date for the sales document.
    /// </summary>
    /// <returns>
    /// Returns document date of the sales document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DocumentDate documentDate()
    {
        return deliverySlipTotals.documentDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the discount percent of the order line.
    /// </summary>
    /// <returns>
    /// The discount percent of the order line.
    /// </returns>
    DiscPct   endDisc()
    {
        if (salesLine.endDisc())
        {
            return salesLine.salesTable().DiscPercent;
        }

        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines exchange rate date based on type of exchange rate date in sales record.
    /// </summary>
    /// <param name="_date">
    /// Date value is set.
    /// </param>
    /// <returns>
    /// Exchange rate date.
    /// </returns>
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(salesTable.exchRate(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines exchange rate date based on type of exchange rate date in sales record.
    /// </summary>
    /// <param name="_date">
    /// Date value is set.
    /// </param>
    /// <returns>
    /// Exchange rate date.
    /// </returns>
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(salesTable.exchRateSecondary(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query order line.
    /// </summary>
    void  initCursor()
    {
        lineQueryRun = this.createLineQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the line is new for the sales document.
    /// </summary>
    /// <returns>
    /// true if the line is new for the sales document.
    /// </returns>
    /// <remarks>
    /// Returns always true.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isNewLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax is included in the item price for the sales document.
    /// </summary>
    /// <returns>
    /// true if tax is included in the item price; otherwise false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        return salesTable.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the order line exist or not.
    /// </summary>
    /// <returns>
    /// True if exists else false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean lineExist()
    {
        return lineExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the query for current order line.
    /// </summary>
    /// <param name="_lineQueryRun">
    /// TradeTotalsIQueryRun is set.
    /// </param>
    /// <returns>
    /// The query for current order line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsCommonEnumerator commonEnumerator = _lineQueryRun as TradeTotalsCommonEnumerator;
        return commonEnumerator.parmCommonEnumerator().current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the query for next order line.
    /// </summary>
    /// <param name="_lineQueryRun">
    /// TradeTotalsIQueryRun is set.
    /// </param>
    /// <returns>
    /// The query for next order line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean lineQueryRunNext(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsCommonEnumerator commonEnumerator = _lineQueryRun as TradeTotalsCommonEnumerator;
        return commonEnumerator.parmCommonEnumerator().moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intialize the instance of <c>DeliverySlipCalcTax_DeliverySlip_BR</c> object based on table id.
    /// </summary>
    /// <param name="_source">
    /// Common is set.
    /// </param>
    /// <param name="_specQty">
    /// SalesUpdate quantity is set.
    /// </param>
    /// <remarks>
    /// Sets the records based on source.
    /// </remarks>
    void  new(Common        _source,
              SalesUpdate   _specQty)
    {
        super(_source);

        if (_source.TableId == tableNum(SalesTable))
            salesTable      = _source;

        specQty         = _specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the next order line.
    /// </summary>
    /// <returns>
    /// The next order line.
    /// </returns>
    Common nextLine()
    {
        prevSalesLine = salesLine.data();
        salesLine = null;
        lineExist = false;

        while (this.lineQueryRunNext(lineQueryRun))
        {
            salesLine = this.lineQueryRunGet(lineQueryRun);

            if (salesLine)
            {
                lineExist = true;
                break;
            }
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the operation account value of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the operation account of the current order line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LedgerDimensionDefaultAccount operationAccount()
    {
        return salesLine.accountSalesLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the posting sales value of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the posting sales of the current order line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LedgerPostingType operationPosting()
    {
        return salesLine.postingSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines related sales order document for the order line.
    /// </summary>
    /// <returns>
    /// Returns related sales order document for the order line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Common orderLine_orderTable()
    {
        return salesLine.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    abstract protected TradeTotalsIContract parmContract()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>RecId</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>RecId</c> field of the current order line.
    /// </returns>
    RecId  salesTableRecID()
    {
        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxation origin to be used for the order. If certain criteria meets, the taxation origin configured on the Imported Content Per Item table is retured.
    /// Otherwise, the taxation origin from the Invent Table is returned
    /// </summary>
    /// <returns>
    /// The taxation origin of the item in the order line
    /// </returns>
    public FITaxationOrigin_BR taxationOrigin()
    {
        ImportedContentPerItem_BR   importedContentPerItem;
        FiscalDocumentType_BR       fiscalDocumentType;

        fiscalDocumentType = FiscalDocumentType_BR::findRecId(salesLine.salesLine_BR().FiscalDocumentType_BR);

        importedContentPerItem = FciIdentifier_BR::getFciAndTaxationOrigin(fiscalDocumentType.fiscalEstablishment().FiscalEstablishmentId,
                                                                           fiscalDocumentType.FiscalDocumentModel,
                                                                           FiscalDocumentIssuer_BR::OwnEstablishment,
                                                                           FiscalDocDirection_BR::Outgoing,
                                                                           this.invoiceDate(),
                                                                           CFOPTable_BR::find(salesLine.salesLine_BR().CFOPTable_BR).CFOPId,
                                                                           salesLine.ItemId);

        if (importedContentPerItem)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00045, funcName());

            return importedContentPerItem.TaxationOrigin;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCashDiscPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines discount percentage in sales record.
    /// </summary>
    /// <returns>
    /// Discount percentage.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    DiscPct taxCashDiscPercent()
    {
        if (TaxParameters::find().CashDiscOnInvoice)
            return salesTable.CashDiscPercent;
        else
            return deliverySlipTotals.taxCashDiscPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line ampount of the current order line based on quantity.
    /// </summary>
    /// <returns>
    /// The line ampount of the current order line based on quantity.
    /// </returns>
    AmountCur  transLineAmount()
    {
        AmountCur   transLineAmount;

        transLineAmount = salesLine.calcLineAmount(this.transQty());

        return transLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line ampount of the current order line based on quantity.
    /// </summary>
    /// <returns>
    /// The line ampount of the current order line based on quantity.
    /// </returns>
    AmountCur  transLineAmountInclTax()
    {
        return salesLine.calcLineAmount(this.transQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value tax price of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the tax price of the current order line.
    /// </returns>
    PriceCur transPcsPrice()
    {
        return salesLine.taxPcsPrice(this.invoiceDate(), tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>SalesQty</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>SalesQty</c> field of the current order line.
    /// </returns>
    SalesQty  transQty()
    {
        if (salesLine.RecId == 0)
            return salesLine.SalesQty;

        if (salesLine.SalesStatus != SalesStatus::Invoiced)
        {
            return SalesQuantity::construct(DocumentStatus::Invoice).calcSalesQty(salesLine, specQty);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>DeliveryTaxGroup_BR</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>DeliveryTaxGroup_BR</c> field of the current order line.
    /// </returns>
    TaxGroup    transTaxGroup()
    {
        return salesLine.DeliveryTaxGroup_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>DeliveryTaxItemGroup_BR</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>DeliveryTaxItemGroup_BR</c> field of the current order line.
    /// </returns>
    TaxItemGroup    transTaxItemGroup()
    {
        return salesLine.DeliveryTaxItemGroup_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>InventTransId</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>InventTransId</c> field of the current order line.
    /// </returns>
    TradeInventTransId  transTransId()
    {
        return salesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines euro triangulation date in sales record.
    /// </summary>
    /// <param name="_date">
    /// Date is set.
    /// </param>
    /// <returns>
    /// Euro triangulation date.
    /// </returns>
    EUROTriangulation  triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return salesTable.euroTriangulation(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the sales is for use and consumption
    /// </summary>
    /// <returns>Returns false as default</returns>
    /// <remarks>This method is implemented in it sub classes</remarks>
    public boolean useAndConsumption_BR()
    {
        return salesTable.salesTable_BR().CustFinalUser_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>DeliveryCalcTax_Parm_BR</c> class.
    /// </summary>
    /// <param name="_source">
    /// Common is set.
    /// </param>
    /// <param name="_specQty">
    /// Quantity value is set.
    /// </param>
    /// <param name="_sumBy">
    /// AccountOrder value is set.
    /// </param>
    /// <param name="_parmId">
    /// ParmId value is set.
    /// </param>
    /// <param name="_sumSalesId">
    /// SalesId value is set.
    /// </param>
    /// <param name="_documentStatus">
    /// DocumentStatus value is set.
    /// </param>
    /// <returns>
    /// An instance of the <c>DeliveryCalcTax_Parm_BR</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static DeliverySlipCalcTax__DeliverySlip_BR construct(Common            _source,
                                                          SalesUpdate       _specQty,
                                                          AccountOrder      _sumBy          = AccountOrder::None,
                                                          ParmId            _parmId         = '',
                                                          SalesId           _sumSalesId     = '',
                                                          DocumentStatus    _documentStatus = DocumentStatus::None)
    {
        return new DeliveryCalcTax_Parm_BR(_source, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>