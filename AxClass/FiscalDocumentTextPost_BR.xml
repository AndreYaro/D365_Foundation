<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentTextPost_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is reponsible for posting the fiscal document texts.
/// </summary>
class FiscalDocumentTextPost_BR
{
    Map lineTextMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>FiscalDocumentTextPost_BR</c>.
    /// </summary>
    /// <returns>
    /// A new instance of <c>FiscalDocumentTextPost_BR</c>.
    /// </returns>
    public static FiscalDocumentTextPost_BR construct()
    {
        return new FiscalDocumentTextPost_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all given Fiscal document texts to a record.
    /// </summary>
    /// <param name="_listOfTexts">
    /// An instance of <c>FiscalDocumentTextListParmData_BR</c> containing all Fiscal document texts already processed.
    /// </param>
    /// <param name="_targetRecord">
    /// A <c>Common</c> record where the Fiscal document texts will be attached to.
    /// </param>
    /// <remarks>
    /// This method creates <c>DocuRef</c> and <c>DocuRefExt_BR</c> records given a list of <c>FiscalDocumentTextParmData_BR</c> objects.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if any of the parameters is null.
    /// </exception>
    public static void copy(FiscalDocumentTextListParmData_BR _listOfTexts, common _targetRecord)
    {
        DocuRef                             docuRef;
        DocuRefExt_BR                       docuRefExt;
        FiscalDocumentTextParmData_BR       textParmData;
        DocuTypeId                          docuTypeId;
        FiscalDocumentReferencedProcess_BR  fiscalDocumentReferencedProcess;
        ListEnumerator                      le;
        FiscalDocumentRefProcessParmData_BR fiscalDocumentRefProcessParmData;

        docuTypeId = BrazilParameters::find().FiscalDocumentTextDocuTypeId;

        if (docuTypeId)
        {
            if (!_listOfTexts || !_targetRecord)
            {
                // Unable to perform the operation due to missing class initialization.
                throw error("@SYS84231");
            }

            _listOfTexts.reset();
            while (_listOfTexts.moveNext())
            {
                textParmData                    = _listOfTexts.getCurrent();

                docuRef.clear();
                docuRef.RefCompanyId            = _targetRecord.dataAreaId;
                docuRef.RefTableId              = _targetRecord.TableId;
                docuRef.RefRecId                = _targetRecord.RecId;
                docuRef.Name                    = textParmData.parmName();
                docuRef.TypeId                  = docuTypeId;
                docuRef.Notes                   = textParmData.parmNotes();
                docuRef.Restriction             = textParmData.parmRestriction();
                docuRef.insert();

                docuRefExt.FiscalInformation    = textParmData.parmFiscalInformation();
                docuRefExt.TextID               = textParmData.parmTextID();
                docuRefExt.Type                 = textParmData.parmType();
                docuRefExt.DocuRef              = docuRef.RecId;
                docuRefExt.insert();

                le = textParmData.parmFiscalRefProcessList().getEnumerator();

                while (le.moveNext())
                {
                    fiscalDocumentRefProcessParmData = le.current();

                    fiscalDocumentReferencedProcess.Agency = fiscalDocumentRefProcessParmData.parmAgency();
                    fiscalDocumentReferencedProcess.ProcessNumber = fiscalDocumentRefProcessParmData.parmProcessNumber();
                    fiscalDocumentReferencedProcess.ConcessionaryActType = fiscalDocumentRefProcessParmData.parmConcessionaryActType();
                    fiscalDocumentReferencedProcess.DocuRefExt_BR = docuRefExt.RecId;

                    fiscalDocumentReferencedProcess.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the Fiscal document text to be posted by removing all duplicates.
    /// </summary>
    /// <param name="_headerParmData">The Fiscal document.</param>
    /// <exception cref="Exception::Error">
    /// Thrown if the given <c>FiscalDocumentParmData_BR</c> object is null.
    /// </exception>
    public static void prepare(FiscalDocumentParmData_BR _headerParmData)
    {
        FiscalDocumentTextListParmData_BR   headerTextList;
        FiscalDocumentTextListParmData_BR   lineTextList;
        FiscalDocumentLineParmData_BR       fiscalDocumentLine;
        ListEnumerator                      lineEnumerator;

        if (!_headerParmData)
        {
            // Unable to perform the operation due to missing class initialization.
            throw error("@SYS84231");
        }

        headerTextList = _headerParmData.parmListOfTextsParmData();

        lineEnumerator = _headerParmData.parmLines().getEnumerator();
        while (lineEnumerator.moveNext())
        {
            fiscalDocumentLine = lineEnumerator.current();

            lineTextList = fiscalDocumentLine.parmListOfTextsParmData();
            lineTextList.removeDuplicates();
        }

        headerTextList.removeDuplicates();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>