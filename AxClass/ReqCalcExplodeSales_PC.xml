<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcExplodeSales_PC</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>reqCalcExplodeSales_PC</c> class is an extended class of <c>ReqCalc</c> that makes use of
///    this engine to calculate delivery dates for sales lines with items of the product builder.
/// </summary>
/// <remarks>
///    This class is used from the approve forms of the product builder items after selecting the delivery
///    date calculation.
/// </remarks>
class reqCalcExplodeSales_PC  extends ReqCalcExplodeSales implements BatchRetryable
{
    #PC
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>forecastDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the expected delivery date of the sales line that contains Product Builder Items.
    /// </summary>
    /// <param name="_argSalesline">
    ///    The base sales data used for calculation.
    /// </param>
    /// <returns>
    ///    The delivery date obtained for the sales order line.
    /// </returns>
    /// <remarks>
    ///    This method does not process on the sales line directly. A temporary set of simulation data is
    ///    created specifically for the forecasting. The <c>forecastDeliveryDate</c> method is called from the
    ///    <c>Main</c> method.
    /// </remarks>
    public TransDate forecastDeliveryDate(SalesLine _argSalesline)
    {
        TransDate                   calcDeliveryDate;
        TransDate                   ddcDeliveryDate;
        SalesLine                   tmpSalesLine;
        SalesCalcAvailableDlvDates  salesCalcAvailableDlvDates;
        PCDeliveryDateHelper        deliveryDateHelper = PCDeliveryDateHelper::construct();

        try
        {
            this.recalculateBOMLevels();

            //initiating the transaction
            ttsbegin;

            //Creating temporary simulation data and running scheduling
            tmpSalesLine = this.setupTmpData(_argSalesline);

            // run scheduling on the created sales line
            this.runScheduling(tmpSalesLine);

            //Getting the result from calculation from the database
            deliveryDateHelper.parmActiveDynamicPlan(ReqPlanVersion::findActiveReqPlanIdDynamic().RecId);
            calcDeliveryDate = deliveryDateHelper.deliveryDate(tmpSalesLine.SalesId, tmpSalesLine.InventTransId);

            if (_argSalesline.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                //if reqCalc didn't calculate a date, initialize the value
                if (calcDeliveryDate == dateNull())
                {
                    calcDeliveryDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                }

                //validate the date by using DeliveryDateControl
                _argSalesline.ShippingDateConfirmed = calcDeliveryDate;
                salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(_argSalesline, fieldNum(SalesLine, ShippingDateConfirmed));
                salesCalcAvailableDlvDates.parmReturnConfirmedDates(NoYes::Yes);
                salesCalcAvailableDlvDates.validateWritePrompt(_argSalesline,
                    false,  //Show dialog
                    true,   //Force validation
                    false,  //Show warnings
                    false); //Force recalculation

                //calculate the suggestion from dlv date
                salesCalcAvailableDlvDates.calcReceiptDate(true);
                ddcDeliveryDate = salesCalcAvailableDlvDates.parmSalesAvailableDlvDatesTmpBestGuess().AvailableShippingDate;
                if (ddcDeliveryDate > calcDeliveryDate)
                {
                    calcDeliveryDate = ddcDeliveryDate;
                }
            }

            //rolling back the changes to the database
            ttsabort;
        }
        catch
        {
            ttsabort;
        }

        return calcDeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs the class.
    /// </summary>
    /// <param name="_args">
    ///    The arguments of the main method.
    /// </param>
    protected void new(Args _args)
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run scheduling on the temporary sales line.
    /// </summary>
    /// <param name="_salesLine">A sales line record.</param>
    protected void runScheduling(SalesLine _salesLine)
    {
        Debug::assert(_salesLine.Reservation == ItemReservation::Explosion);
        // inserting the sales line will automatically run scheduling
        _salesLine.insert();

        if (_salesLine.isDeliveryDateControlTypeClassicCTP())
        {
            //using ReqCalc engine to run the dynamic forecast request
            reqCalcExplodeSales_PC::newSalesIdPrompt(_salesLine.SalesId, _salesLine.InventTransId).runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates temporary simulation data for the delivery date calculation.
    /// </summary>
    /// <param name="existSalesLine">
    ///    The base sales data that is used for calculation.
    /// </param>
    /// <returns>
    ///    The simulation sales line data to run with the <c>ReqCalc</c> engine.
    /// </returns>
    private SalesLine setupTmpData(SalesLine existSalesLine)
    {
        ForecastSales       tmpForecast;
        SalesTable          newSalesTable;
        SalesLine           newSalesLine;
        SalesIdBase         salesId;

        //Setting up required temporary data
        tmpForecast.ItemId      = existSalesLine.ItemId;
        tmpForecast.SalesQty    = existSalesLine.SalesQty;
        tmpForecast.InventQty   = existSalesLine.SalesQty;
        tmpForecast.ItemBOMId   = existSalesLine.ItemBOMId;
        tmpForecast.ItemRouteId = existSalesLine.ItemRouteId;
        tmpForecast.StartDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        tmpForecast.ModelId     = ReqPlan::findReqPlanId(ReqParameters::find().CurrentReqPlanIdForecast).ForecastModelId;
        tmpForecast.Active      = NoYes::Yes;
        tmpForecast.SalesUnitId = InventTableModule::find(existSalesLine.ItemId,ModuleInventPurchSales::Sales).UnitId;
        tmpForecast.Currency    = Ledger::accountingCurrency(CompanyInfo::current());

        tmpForecast.setInventDimId(existSalesLine.InventDimId);

        tmpForecast.insert();

        //creating a new simulation sales order
        newSalesTable.initValue();
        salesId = existSalesLine.ItemBOMId;
        newSalesTable.SalesId       = #defaultSalesId;
        newSalesTable.CustAccount   = existSalesLine.CustAccount;
        newSalesTable.CurrencyCode  = Ledger::accountingCurrency(CompanyInfo::current());
        newSalesTable.insert();

        //creating a new simulation sales order line
        newSalesLine.initFromSalesTable(newSalesTable);
        newSalesLine.initFromSalesLine(existSalesLine);
        newSalesLine.ItemBOMId      = existSalesLine.ItemBOMId;
        newSalesLine.ItemRouteId    = existSalesLine.ItemRouteId;
        newSalesLine.LineNum        = 1;
        newSalesLine.CustAccount    = newSalesTable.CustAccount;
        newSalesLine.QtyOrdered     = existSalesLine.SalesQty;
        newSalesLine.InventDimId    = existSalesLine.InventDimId;
        newSalesLine.Reservation    = ItemReservation::Explosion;

        newSalesLine.RemainInventPhysical       = existSalesLine.SalesQty;
        newSalesLine.RemainSalesPhysical        = existSalesLine.SalesQty;
        newSalesLine.DeliveryDateControlType    = existSalesLine.DeliveryDateControlType;

        return newSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static reqCalcExplodeSales_PC construct(Args _args)
    {
        return new reqCalcExplodeSales_PC(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesIdPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a requirement calculation explosion.
    /// </summary>
    /// <param name="_salesId">
    /// A sales ID.
    /// </param>
    /// <param name="_inventTransId">
    /// An inventory transaction ID.
    /// </param>
    /// <returns>
    /// A <c>reqCalcExplodeSales_PC</c> instance.
    /// </returns>
    public static reqCalcExplodeSales_PC newSalesIdPrompt(SalesId _salesId, InventTransId _inventTransId)
    {
        Args                    args                    = new Args();
        reqCalcExplodeSales_PC reqCalcExplodeSales_PC = new reqCalcExplodeSales_PC(args);

        reqCalcExplodeSales_PC.getLast();

        //setting up the ReqCalc parameters
        reqCalcExplodeSales_PC.parmMovement(null);
        reqCalcExplodeSales_PC.parmRefType(ReqRefType::Sales);
        reqCalcExplodeSales_PC.parmRefId(_salesId);
        reqCalcExplodeSales_PC.parmInventTransOriginId(InventTransOrigin::findByInventTransId(_inventTransId).RecId);
        reqCalcExplodeSales_PC.parmReqPlanId(ReqPlanSched::defaultDynamicId());
        reqCalcExplodeSales_PC.parmReqCalcUpdate(ReqCalcUpdate::Regeneration);
        reqCalcExplodeSales_PC.parmReqPlanData(null);
        reqCalcExplodeSales_PC.parmReservationExplosion(true);

        return reqCalcExplodeSales_PC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>