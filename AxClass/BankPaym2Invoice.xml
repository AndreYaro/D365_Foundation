<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaym2Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankPaym2Invoice
{
    TmpBankPaym2Invoice paym2Inv;
    Voucher voucher;
    TransDate transDate;
    AmountCur amountCur;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankPaym2Invoice construct(
        Voucher _voucher,
        TransDate _transDate,
        AmountCur _amountCur)
    {
        BankPaym2Invoice bankPaym2Invoice = new BankPaym2Invoice(
            _voucher,
            _transDate,
            _amountCur);

        return bankPaym2Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        Voucher _voucher,
        TransDate _transDate,
        AmountCur _amountCur)
    {
        voucher = _voucher;
        transDate = _transDate;
        amountCur = _amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paym2InvInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts invoice details for a given payment.
    /// </summary>
    /// <param name="_custVendTransInvoice">
    /// The invoice transaction.
    /// </param>
    /// <param name="_custVendSettlement">
    /// The payment settlement transaction.
    /// </param>
    /// <param name="_acType">
    /// The account type that defines the payment receipient.
    /// </param>
    /// <param name="_sign">
    /// An integer value to indicate a postive or negative invoice amount.
    /// </param>
    /// <param name="_useInvoiceSettleAmount">
    /// A boolean value to indicate the useage of the invoice settlement amount.
    /// </param>
    private void paym2InvInsert(
        CustVendTrans _custVendTransInvoice,
        CustVendSettlement _custVendSettlement,
        LedgerJournalACType _acType,
        int _sign = 1,
        boolean _useInvoiceSettleAmount = NoYes::Yes)
    {
        paym2Inv.InvoiceId = _custVendTransInvoice.Invoice;
        paym2Inv.InvoiceCompany = _custVendSettlement.company();
        paym2Inv.InvoiceTransDate = _custVendTransInvoice.TransDate;
        paym2Inv.InvoiceVoucher = _custVendTransInvoice.Voucher;
        paym2Inv.InvoiceCurrencyCode = _custVendTransInvoice.CurrencyCode;
        paym2Inv.InvoiceAmountCur = -_custVendTransInvoice.AmountCur * _sign;

        if (_sign == -1 && !_useInvoiceSettleAmount)
        {
            paym2Inv.PaymAmountCur = -(_custVendSettlement.SettleAmountCur - _custVendSettlement.UtilizedCashDisc) * _sign;
        }
        else
        {
            paym2Inv.PaymAmountCur = -(_custVendTransInvoice.SettleAmountCur - _custVendSettlement.UtilizedCashDisc) * _sign;
        }

        paym2Inv.InvoiceCashDisc = _custVendSettlement.UtilizedCashDisc;
        paym2Inv.InvoiceLedgerJournalACType = _acType;
        paym2Inv.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpBankPaym2Invoice</Name>
				<Source><![CDATA[
    [SysObsolete('This method is obsolete. Use BankPaym2Invoice.createDataForBankAccountTrans() instead.', false, 30\6\2020)]
    public TmpBankPaym2Invoice tmpBankPaym2Invoice()
    {
        return this.createDataForBankAccountTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataForBankAccountTrans</Name>
				<Source><![CDATA[
    public TmpBankPaym2Invoice createDataForBankAccountTrans()
    {
        CustTrans custTransPaym;
        CustTrans custTransInvoice;
        CustTrans custTransInvoiceCancel;
        CustSettlement custSettlement;
        CustSettlement custSettlementCancel;
        BankDeposit bankDeposit;
        BankChequeTable bankChequeTable;

        VendTrans vendTransPaym;
        VendTrans vendTransInvoice;
        VendSettlement vendSettlement;
        Voucher transVoucher;
        container transCompany;
        container refCompany;

        boolean recordFound = false;
        Counter bestGuess;
        InvoiceId invoiceId;

        while (voucher && !recordFound && bestGuess < 2)
        {
            if ((amountCur > 0.0 && bestGuess == 0)
                || (AmountCur <= 0.0 && bestGuess == 1))
            {
                select firstonly RefCompany, RefRecId, Canceled from bankDeposit
                    where bankDeposit.Voucher == voucher
                        && bankDeposit.TransDate == transDate;

                if (bankDeposit.RefCompany != '')
                {
                    refCompany += [bankDeposit.RefCompany];

                    select firstonly crosscompany:refCompany custTransPaym
                        where custTransPaym.RecId == bankDeposit.RefRecId;
                }
                else
                {
                    refCompany += [curext()];

                    select firstonly crosscompany:refCompany custTransPaym
                        where custTransPaym.Voucher == voucher
                            && custTransPaym.TransDate == transDate;
                }

                if (bankDeposit.Canceled == NoYes::No)
                {
                    // The custSettlement and custTransPaym could be cross company, so
                    // need the crosscompany in select statement. Since the custSettlement and
                    // custTransInvoice will be in the same company they can be joined
                    // in a single statement.
                    while select crosscompany custSettlement
                        where custSettlement.OffsetCompany == custTransPaym.DataAreaId
                            && custSettlement.OffsetRecid == custTransPaym.RecId
                            && custSettlement.CanBeReversed
                        join custTransInvoice
                            where custTransInvoice.RecId == custSettlement.TransRecId
                                && custTransInvoice.DataAreaId == custSettlement.TransCompany
                    {
                        this.paym2InvInsert(custTransInvoice, custSettlement, LedgerJournalACType::Cust, -1, NoYes::No);
                        recordFound = true;
                    }
                }
                else
                {
                    // The custSettlement and custTransInvoice could be cross company, so
                    // account for it by using crosscompany select statements. Since these
                    // tables are joined by a ref company field they can't be joined in a
                    // single statement and need to be broken in multiple statements.

                    //Select original invoice
                    select firstonly crosscompany custSettlement
                        where custSettlement.TransCompany == custTransPaym.company()
                            && custSettlement.TransRecId == custTransPaym.RecId
                            && custSettlement.CanBeReversed == NoYes::No;
                    select firstonly crosscompany custTransInvoice
                        where custTransInvoice.RecId == custSettlement.OffsetRecid
                            && custTransInvoice.DataAreaId == custSettlement.OffsetCompany;

                    invoiceId = custTransInvoice.Invoice;

                    // The custSettlement and custTransInvoice could be cross company, so
                    // account for it by using crosscompany select statements. Since these
                    // tables are joined by a ref company field they can't be joined in a
                    // single statement and need to be broken in multiple statements.

                    //Select Payment
                    select firstonly crosscompany custSettlement
                        where custSettlement.TransCompany == custTransPaym.company()
                            && custSettlement.TransRecId == custTransPaym.RecId
                            && custSettlement.CanBeReversed;
                    select firstonly crosscompany custTransInvoice
                            where custTransInvoice.RecId == custSettlement.OffsetRecid
                                && custTransInvoice.DataAreaId == custSettlement.OffsetCompany;

                    custTransInvoice.Invoice = invoiceId;

                    this.paym2InvInsert(custTransInvoice, custSettlement, LedgerJournalACType::Cust);

                    recordFound = true;

                    // The custSettlementCancel and custTransPaym could be cross company, so
                    // need the crosscompany in select statement. Since the custSettlementCancel and
                    // custTransInvoiceCancel will be in the same company they can be joined
                    // in a single statement.

                    //Select Cancel-payment
                    select firstonly crosscompany custSettlementCancel
                        where custSettlementCancel.TransCompany == custTransPaym.company()
                            && custSettlementCancel.TransRecId == custTransPaym.RecId
                            && custSettlementCancel.CanBeReversed
                        join custTransInvoiceCancel
                            where custTransInvoiceCancel.RecId == custSettlement.TransRecId;

                    custTransInvoiceCancel.Invoice = invoiceId;

                    this.paym2InvInsert(custTransInvoiceCancel, custSettlementCancel, LedgerJournalACType::Cust);

                    recordFound = true;
                }
            }
            else
            {
                select firstonly RecId, RecipientCompany, RecipientTransVoucher from bankChequeTable
                    where bankChequeTable.Voucher == voucher
                        && bankChequeTable.TransDate == transDate;

                if (bankChequeTable)
                {
                    transCompany += [bankChequeTable.RecipientCompany];
                    transVoucher = bankChequeTable.RecipientTransVoucher;
                }
                else
                {
                    transCompany += [curext()];
                    transVoucher = voucher;
                }

                if (BrazilParameters::isEnabled())
                {
                    // It is possible to have more than one VendTrans per bank transaction
                    while select crosscompany:transCompany vendTransPaym
                        where vendTransPaym.Voucher == transVoucher
                            && vendTransPaym.TransDate == transDate
                    {
                        while select crosscompany vendSettlement
                            where vendSettlement.TransCompany == vendTransPaym.company()
                                && vendSettlement.TransRecId == vendTransPaym.RecId
                                && vendSettlement.CanBeReversed
                        {
                            select firstonly crosscompany vendTransInvoice
                                where vendTransInvoice.DataAreaId == vendSettlement.OffsetCompany
                                    && vendTransInvoice.RecId == vendSettlement.OffsetRecid;

                            this.paym2InvInsert(vendTransInvoice, vendSettlement, LedgerJournalACType::Vend);

                            recordFound = true;
                        }
                    }
                }
                else
                {
                    select firstonly crosscompany:transCompany vendTransPaym
                        where vendTransPaym.Voucher == transVoucher
                            && vendTransPaym.TransDate == transDate;

                    // The custSettlement and custTransInvoice could be cross company, so
                    // account for it by using crosscompany select statements. Since these
                    // tables are joined by a ref company field they can't be joined in a
                    // single statement and need to be broken in multiple statements.
                    while select crosscompany vendSettlement
                        where vendSettlement.TransCompany == vendTransPaym.company()
                            && vendSettlement.TransRecId == vendTransPaym.RecId
                            && vendSettlement.CanBeReversed
                    {
                        select firstonly crosscompany vendTransInvoice
                            where vendTransInvoice.DataAreaId == vendSettlement.OffsetCompany
                                && vendTransInvoice.RecId == vendSettlement.OffsetRecid;

                        this.paym2InvInsert(vendTransInvoice, vendSettlement, LedgerJournalACType::Vend);

                        recordFound = true;
                    }
                }
            }

            bestGuess++;
        }

        return paym2Inv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataForSummarization</Name>
				<Source><![CDATA[
    public TmpBankPaym2Invoice createDataForSummarization(BankTransSummarizationLine _bankTransSummarizationLine)
    {
        if (_bankTransSummarizationLine.CustVendAccountType == CustVendACType::Cust)
        {
            CustTrans custTransInvoice;
            CustSettlement custSettlement;

            CustTrans custTransPaym = CustTrans::findByCompany(_bankTransSummarizationLine.PaymCompany, _bankTransSummarizationLine.CustVendTransRecId);

            while select crosscompany custSettlement
                where custSettlement.OffsetCompany == custTransPaym.DataAreaId
                    && custSettlement.OffsetRecid == custTransPaym.RecId
                    && custSettlement.CanBeReversed
                join custTransInvoice
                    where custTransInvoice.RecId == custSettlement.TransRecId
                        && custTransInvoice.DataAreaId == custSettlement.TransCompany
            {
                this.paym2InvInsert(custTransInvoice, custSettlement, LedgerJournalACType::Cust, -1, NoYes::No);
            }
        }
        else
        {
            VendTrans vendTransInvoice;
            VendSettlement vendSettlement;

            VendTrans vendTransPaym = VendTrans::findByCompany(_bankTransSummarizationLine.PaymCompany, _bankTransSummarizationLine.CustVendTransRecId);

            while select crosscompany vendSettlement
                where vendSettlement.OffsetCompany == vendTransPaym.DataAreaId
                    && vendSettlement.OffsetRecid == vendTransPaym.RecId
                    && vendSettlement.CanBeReversed
                join vendTransInvoice
                   where vendTransInvoice.RecId == vendSettlement.TransRecId
                       && vendTransInvoice.DataAreaId == vendSettlement.TransCompany
            {
                this.paym2InvInsert(vendTransInvoice, vendSettlement, LedgerJournalACType::Vend, 1, NoYes::No);
            }
        }
        return paym2Inv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataForBankDeposit</Name>
				<Source><![CDATA[
    public TmpBankPaym2Invoice createDataForBankDeposit(BankDeposit _bankDeposit)
    {
        CustTrans custTransInvoice;
        CustSettlement custSettlement;

        CustTrans custTransPaym = CustTrans::findByCompany(_bankDeposit.RefCompany, _bankDeposit.RefRecId);

        if (_bankDeposit.Canceled == NoYes::No)
        {
            // The custSettlement and custTransPaym could be cross company, so
            // need the crosscompany in select statement. Since the custSettlement and
            // custTransInvoice will be in the same company they can be joined
            // in a single statement.
            while select crosscompany custSettlement
                where custSettlement.OffsetCompany == custTransPaym.DataAreaId
                    && custSettlement.OffsetRecid == custTransPaym.RecId
                    && custSettlement.CanBeReversed
                join custTransInvoice
                    where custTransInvoice.RecId == custSettlement.TransRecId
                        && custTransInvoice.DataAreaId == custSettlement.TransCompany
            {
                this.paym2InvInsert(custTransInvoice, custSettlement, LedgerJournalACType::Cust, -1, NoYes::No);
            }
        }
        else
        {
            // The custSettlement and custTransInvoice could be cross company, so
            // account for it by using crosscompany select statements. Since these
            // tables are joined by a ref company field they can't be joined in a
            // single statement and need to be broken in multiple statements.

            //Select original invoice
            select firstonly crosscompany custSettlement
                where custSettlement.TransCompany == custTransPaym.company()
                    && custSettlement.TransRecId == custTransPaym.RecId
                    && custSettlement.CanBeReversed == NoYes::No;
            select firstonly crosscompany custTransInvoice
                where custTransInvoice.RecId == custSettlement.OffsetRecid
                    && custTransInvoice.DataAreaId == custSettlement.OffsetCompany;

            InvoiceId invoiceId = custTransInvoice.Invoice;

            // The custSettlement and custTransInvoice could be cross company, so
            // account for it by using crosscompany select statements. Since these
            // tables are joined by a ref company field they can't be joined in a
            // single statement and need to be broken in multiple statements.

            //Select Payment
            select firstonly crosscompany custSettlement
                where custSettlement.TransCompany == custTransPaym.company()
                    && custSettlement.TransRecId == custTransPaym.RecId
                    && custSettlement.CanBeReversed;
            select firstonly crosscompany custTransInvoice
                    where custTransInvoice.RecId == custSettlement.OffsetRecid
                        && custTransInvoice.DataAreaId == custSettlement.OffsetCompany;

            custTransInvoice.Invoice = invoiceId;

            this.paym2InvInsert(custTransInvoice, custSettlement, LedgerJournalACType::Cust);

            // The custSettlementCancel and custTransPaym could be cross company, so
            // need the crosscompany in select statement. Since the custSettlementCancel and
            // custTransInvoiceCancel will be in the same company they can be joined
            // in a single statement.

            //Select Cancel-payment
            CustTrans custTransInvoiceCancel;
            CustSettlement custSettlementCancel;

            select firstonly crosscompany custSettlementCancel
                where custSettlementCancel.TransCompany == custTransPaym.company()
                    && custSettlementCancel.TransRecId == custTransPaym.RecId
                    && custSettlementCancel.CanBeReversed
                join custTransInvoiceCancel
                    where custTransInvoiceCancel.RecId == custSettlement.TransRecId;

            custTransInvoiceCancel.Invoice = invoiceId;

            this.paym2InvInsert(custTransInvoiceCancel, custSettlementCancel, LedgerJournalACType::Cust);
        }

        return paym2Inv;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>