<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysListPanelSet_AssetTransTypeJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SysListPanelSet_AssetTransTypeJour</c> class initializes and sets up the <c>SysListPanel</c>
///    control on the general ledger setup parameters form.
/// </summary>
/// <remarks>
///    Certain methods of this class are set to public, because they must be called from the form on which
///    the control is drawn.
/// </remarks>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class SysListPanelSet_AssetTransTypeJour extends SysListPanelSet
{
    const int NumberOfColumns = 1;

    container selectedData, availableData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a field to the container that contains modified asset attributes.
    /// </summary>
    /// <param name="dictField">
    ///    The field to add to the container.
    /// </param>
    private void addToContainer(SysDictField dictField)
    {
        if (isConfigurationkeyEnabled(dictField.configurationKeyId()))
        {
            if (inSet.in(dictField.id()))
            {
                selectedData += [[dictField.id(),dictField.label(), dictField.help()]];
            }
            else
            {
                availableData += [[dictField.id(),dictField.label(), dictField.help()]];
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the state of each transaction type to the database before finishing the object.
    /// </summary>
    /// <remarks>
    ///    This method saves the current state of all transaction types to the database as the control is
    ///    finished.
    /// </remarks>
    public void finalize()
    {
        ttsbegin;
        //Populate the table buffer
        AssetParameters assetParameters = AssetParameters::find(true);

        assetParameters.Acquisition               = inSet.in(fieldnum(AssetParameters, Acquisition));
        assetParameters.AcquisitionAdj            = inSet.in(fieldnum(AssetParameters, AcquisitionAdj));
        assetParameters.Depreciation              = inSet.in(fieldnum(AssetParameters, Depreciation));
        assetParameters.DepreciationAdj           = inSet.in(fieldnum(AssetParameters, DepreciationAdj));
        assetParameters.CapitalReserve            = inSet.in(fieldnum(AssetParameters, CapitalReserve));
        assetParameters.CapitalReserveTransfer    = inSet.in(fieldnum(AssetParameters, CapitalReserveTransfer));
        assetParameters.Revaluation               = inSet.in(fieldnum(AssetParameters, Revaluation));
        assetParameters.DisposalSale              = inSet.in(fieldnum(AssetParameters, DisposalSale));
        assetParameters.DisposalScrap             = inSet.in(fieldnum(AssetParameters, DisposalScrap));
        assetParameters.DerogatoryDecrease        = inSet.in(fieldnum(AssetParameters, DerogatoryDecrease));
        assetParameters.DerogatoryIncrease        = inSet.in(fieldnum(AssetParameters, DerogatoryIncrease));
        assetParameters.ExtraOrdinaryDepreciation = inSet.in(fieldnum(AssetParameters, ExtraOrdinaryDepreciation));
        assetParameters.WriteUpAdj                = inSet.in(fieldnum(AssetParameters, WriteUpAdj));
        assetParameters.WriteDownAdj              = inSet.in(fieldnum(AssetParameters, WriteDownAdj));
        assetParameters.update();
        ttscommit;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads data for each transaction type from the <c>AssetParameters</c> table.
    /// </summary>
    /// <returns>
    ///    A container that contains the last saved state of all asset transaction types.
    /// </returns>
    public container getData()
    {
        this.addDictField(fieldnum(AssetParameters, Acquisition));
        this.addDictField(fieldnum(AssetParameters, AcquisitionAdj));
        this.addDictField(fieldnum(AssetParameters, Depreciation));
        this.addDictField(fieldnum(AssetParameters, DepreciationAdj));
        this.addDictField(fieldnum(AssetParameters, Revaluation));
        this.addDictField(fieldnum(AssetParameters, WriteUpAdj));
        this.addDictField(fieldnum(AssetParameters, DisposalSale));
        this.addDictField(fieldnum(AssetParameters, CapitalReserve));
        this.addDictField(fieldnum(AssetParameters, DerogatoryDecrease));
        this.addDictField(fieldnum(AssetParameters, DerogatoryIncrease));
        this.addDictField(fieldnum(AssetParameters, ExtraOrdinaryDepreciation));
        this.addDictField(fieldnum(AssetParameters, CapitalReserveTransfer));
        this.addDictField(fieldnum(AssetParameters, DisposalScrap));
        this.addDictField(fieldnum(AssetParameters, WriteDownAdj));
        return [availableData,selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDictField</Name>
				<Source><![CDATA[
    private void addDictField(FieldId _fieldId)
    {
        SysDictField dictField = new SysDictField(tablenum(AssetParameters), _fieldId);
        this.addToContainer(dictField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the list panel control with the values present in the database.
    /// </summary>
    /// <remarks>
    /// Checks all transaction types in the database and adds the required ones to the set.
    /// </remarks>
    public void init()
    {
        super();

        AssetParameters assetParameters = AssetParameters::find();

        //Instantiate a new integer set object to store required transaction type numbers
        inSet = new Set(Types::Integer);

        //Check each trans type, and to set if required
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, Acquisition));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, Depreciation));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, DepreciationAdj));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, Revaluation));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, WriteUpAdj));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, DisposalSale));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, CapitalReserve));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, DerogatoryDecrease));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, DerogatoryIncrease));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, ExtraOrdinaryDepreciation));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, CapitalReserveTransfer));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, AcquisitionAdj));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, WriteDownAdj));
        this.checkAndAddToSet(assetParameters, fieldnum(AssetParameters, DisposalScrap));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndAddToSet</Name>
				<Source><![CDATA[
    private void checkAndAddToSet(AssetParameters _assetParameters, FieldId _fieldId)
    {
        if (_assetParameters.(_fieldId))
        {
            inSet.add(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of columns for the list panel.
    /// </summary>
    /// <returns>
    /// The number of columns to display in the list panel.
    /// </returns>
    public int numOfColumns()
    {
        return NumberOfColumns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfColumnsLeft</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    int numOfColumnsLeft()
    {
        return this.numOfColumns();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfColumnsRight</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    int numOfColumnsRight()
    {
        return this.numOfColumns();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaptionSelected</Name>
				<Source><![CDATA[
    public str parmCaptionSelected(str _captionSelected = captionSelected)
    {
        return "@SYS101971";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaptionAvailable</Name>
				<Source><![CDATA[
    public str parmCaptionAvailable(str _captionAvailable = captionAvailable)
    {
        return "@SYS115755";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasAddAllButton</Name>
				<Source><![CDATA[
    public boolean parmHasAddAllButton(boolean _hasAddAllButton = hasAddAllButton)
    {
        hasAddAllButton = _hasAddAllButton;
        return hasAddAllButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasRemoveAllButton</Name>
				<Source><![CDATA[
    public boolean parmHasRemoveAllButton(boolean _hasRemoveAllButton = hasRemoveAllButton)
    {
        hasRemoveAllButton = _hasRemoveAllButton;
        return hasRemoveAllButton && this.parmItemsNeeded() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasUpDownButton</Name>
				<Source><![CDATA[
    boolean parmHasUpDownButton(boolean _has = hasUpDownButton)
    {
        hasUpDownButton = _has;
        return hasUpDownButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemsNeeded</Name>
				<Source><![CDATA[
    int parmItemsNeeded(int _itemsNeeded = itemsNeeded)
    {
        itemsNeeded = _itemsNeeded;

        return itemsNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static SysListPanelSet_AssetTransTypeJour construct()
    {
        return new SysListPanelSet_AssetTransTypeJour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>SysListPanel</c> class given the form reference.
    /// </summary>
    /// <param name="formRun">
    ///    The reference of the form that would display the list panel.
    /// </param>
    /// <param name="parentId">
    ///    The ID of the control that would contain the list panel.
    /// </param>
    /// <param name="hasAddAllButton">
    ///    A Boolean value indicating whether to display the Add-All button; optional.
    /// </param>
    /// <param name="hasRemoveAllButton">
    ///    A Boolean value indicating whether to display the Remove-All button; optional.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>SysListPanel</c> class.
    /// </returns>
    /// <remarks>
    ///    This static method is called from the form on which the list panel control is displayed. The
    ///    <c>formRun</c> reference and the parent control ID are from where the control is initialized.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static SysListPanel newForm(FormRun     formRun,
                                int         parentId,
                                boolean     hasAddAllButton     = true,
                                boolean     hasRemoveAllButton  = true)
    {
        SysListPanelSet_AssetTransTypeJour sysListPanel = SysListPanelSet_AssetTransTypeJour::construct();

        sysListPanel.parmFormRun(formRun);
        sysListPanel.parmParentId(parentId);
        sysListPanel.parmHasAddAllButton(hasAddAllButton);
        sysListPanel.parmHasRemoveAllButton(hasRemoveAllButton);

        sysListPanel.build();
        return sysListPanel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>