<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchQuantity_BillOfEntry_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchQuantity_BillOfEntry_IN</c> class calculates quantity of bill of entry lines.
/// </summary>
[DocumentStatusFactory(DocumentStatus::BillOfEntry_IN)]
public  class       PurchQuantity_BillOfEntry_IN
        extends     PurchQuantity
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        if (!TaxParameters::isCustomsEnable_IN())
        {
            throw error(strfmt("@SYS19306",funcname()));        
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculats the invent quantity.
    /// </summary>
    /// <param name="_purchLine">
    /// The purch line information.
    /// </param>
    /// <param name="_specQty">
    /// The purch update quantity.
    /// </param>
    /// <param name="_qty">
    /// The invent quantity.
    /// </param>
    /// <param name="_creditRemaining">
    /// True if the credit have remaining.
    /// </param>
    /// <param name="_calcRemaining">
    /// True if the remaining will be calculate.
    /// </param>
    /// <returns>
    /// The invent quantity.
    /// </returns>
    protected container calcQtyInvent(
        PurchLine     _purchLine,
        PurchUpdate   _specQty             = PurchUpdate::All,
        InventQty     _qty                 = naReal(),
        boolean       _creditRemaining     = false,
        boolean       _calcRemaining       = true)
    {
        InventQty       qtyUpdate;
        InventQty       numOfRemainOri;
        InventQty       qtyRemainNew;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            qtyUpdate       = _purchLine.RemainInventPhysical;
        }
        if (_calcRemaining)
        {
            numOfRemainOri  = _purchLine.RemainInventPhysical;
            if (qtyUpdate
                && _qty != naReal()
                && _purchLine.inventTable().inventUnitId() != _purchLine.PurchUnit)
            {
                qtyRemainNew    = _purchLine.RemainInventPhysical - qtyUpdate;
            }
            else
            {
                qtyRemainNew    = _purchLine.RemainInventPhysical;
            }
        }
        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the purch quantity.
    /// </summary>
    /// <param name="_purchLine">
    /// The purch line.
    /// </param>
    /// <param name="_specQty">
    /// The purch update quantity.
    /// </param>
    /// <param name="_qty">
    /// The purch quantity.
    /// </param>
    /// <param name="_creditRemaining">
    /// True if the credit have remaining.
    /// </param>
    /// <param name="_calcRemaining">
    /// True if the remaining will be calculated.
    /// </param>
    /// <returns>
    /// The purch quantity.
    /// </returns>
    protected container calcQtyPurch(
        PurchLine      _purchLine,
        PurchUpdate    _specQty             = PurchUpdate::All,
        PurchQty       _qty                 = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
        PurchQty            qtyUpdate;
        PurchQty            numOfRemainOri;
        PurchQty            qtyRemainNew;

        CustomsInvoiceRegnTrans_IN          customsInvoiceRegnTrans;
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLine;
        CustomsInvoiceRegnJournalTable_IN   customsInvoiceRegnJournalTable;

        CustomsVendBOETrans_IN      customsVendBOETrans;
        CustomsQty_IN recievedInvRegn;
        CustomsQty_IN recievedBOE;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            qtyUpdate = _purchLine.RemainPurchPhysical;
        }

        if (_calcRemaining)
        {
            //Remaining qty yet to be BOE updated
            select sum(Receive) from customsInvoiceRegnTrans
                join RecId from customsInvoiceRegnJournalLine
                where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == customsInvoiceRegnJournalLine.RecId
                   && customsInvoiceRegnJournalLine.PurchLineRecId == _purchLine.RecId
                    join RecId from customsInvoiceRegnJournalTable
                where customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == customsInvoiceRegnJournalTable.RecId
                   && customsInvoiceRegnJournalTable.OrderId         == _purchLine.PurchId
                   && customsInvoiceRegnJournalTable.CustomsImportInvoiceNumberTable == customsImporterInvoiceNumber;

            recievedInvRegn = customsInvoiceRegnTrans.Receive;

            //Qty which is BOE updated
            select sum(BillOfEntryQty) from customsVendBOETrans
                where   customsVendBOETrans.PurchId                 == _purchLine.PurchId
                    &&  customsVendBOETrans.CustomsImportInvoiceNumberTable   == customsImporterInvoiceNumber
                    &&  customsVendBOETrans.PurchLineRecId          == _purchLine.RecId
                    &&  customsVendBOETrans.Status                  != CustomsVendBOEStatus_IN::Canceled;
            recievedBOE = customsVendBOETrans.BillOfEntryQty;

            //Qty shown on BOE update field
            numOfRemainOri = qtyUpdate;
            qtyUpdate = (_purchLine.PurchQty < 0) ? (recievedInvRegn - recievedBOE) : (recievedInvRegn - abs(recievedBOE));
            qtyRemainNew = numOfRemainOri - qtyUpdate;
        }
        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurchOnModification_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates purchase on modification quantity.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase line.
    /// </param>
    /// <param name="_purchQtyModified">
    /// The modified purchase quantity.
    /// </param>
    /// <param name="_specQty">
    /// The specified quantity.
    /// </param>
    /// <param name="_qty">
    /// The quantity.
    /// </param>
    /// <param name="_creditRemaining">
    /// The remaining credit.
    /// </param>
    /// <param name="_calcRemaining">
    /// The remaining calculation.
    /// </param>
    /// <returns>
    /// The quantity.
    /// </returns>
    public container calcQtyPurchOnModification_IN(
        PurchLine      _purchLine,
        PurchQty       _purchQtyModified,
        PurchUpdate    _specQty             = PurchUpdate::All,
        PurchQty       _qty                 = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
        PurchQty                            qtyUpdate;
        PurchQty                            numOfRemainOri;
        PurchQty                            qtyRemainNew;
        CustomsInvoiceRegnTrans_IN          customsInvoiceRegnTrans;
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLine;
        CustomsInvoiceRegnJournalTable_IN   customsInvoiceRegnJournalTable;
        CustomsVendBOETrans_IN              customsVendBOETrans;
        CustomsQty_IN                       recievedInvRegn;
        CustomsQty_IN                       recievedBOE;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        if (_calcRemaining)
        {
            //Remaining qty yet to be BOE updated
            select sum(Receive) from customsInvoiceRegnTrans
                join RecId from customsInvoiceRegnJournalLine
                where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == customsInvoiceRegnJournalLine.RecId
                    && customsInvoiceRegnJournalLine.PurchLineRecId == _purchLine.RecId
                    join RecId from customsInvoiceRegnJournalTable
                where customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == customsInvoiceRegnJournalTable.RecId
                       && customsInvoiceRegnJournalTable.OrderId         == _purchLine.PurchId
                       && customsInvoiceRegnJournalTable.CustomsImportInvoiceNumberTable == customsImporterInvoiceNumber;

            recievedInvRegn = customsInvoiceRegnTrans.Receive;
            //Qty which is BOE updated
            select sum(BillOfEntryQty) from customsVendBOETrans
                where   customsVendBOETrans.PurchId                 == _purchLine.PurchId
                    &&  customsVendBOETrans.CustomsImportInvoiceNumberTable   == customsImporterInvoiceNumber
                    &&  customsVendBOETrans.PurchLineRecId          == _purchLine.RecId
                    &&  customsVendBOETrans.Status                  != CustomsVendBOEStatus_IN::Canceled;
            recievedBOE = customsVendBOETrans.BillOfEntryQty;
            //Qty shown on BOE update field
            numOfRemainOri = _purchLine.RemainPurchPhysical;
            qtyUpdate = (recievedInvRegn - recievedBOE);

            if (abs(_purchQtyModified) > 0 && qtyUpdate)
                {
                if (abs(_purchQtyModified) <= abs(qtyUpdate))
                {
                    qtyUpdate = _purchQtyModified;
                }
            }
            qtyRemainNew = numOfRemainOri - qtyUpdate;
        }
        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
        protected container pdsCWCalcQtyInvent(
        PurchLine      _purchLine,
        PurchUpdate    _specQty             = PurchUpdate::All,
        PdsCWInventQty _qty                 = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
        PdsCWInventQty  cwQtyUpdate;
        PdsCWInventQty  cwNumOfRemainOri;
        PdsCWInventQty  cwQtyRemainNew;

        if (_qty != naReal())
        {
            cwQtyUpdate = _qty;
        }
        else
        {
            cwQtyUpdate       = _purchLine.PdsCWRemainInventPhysical;
        }
        if (_calcRemaining)
        {
            cwNumOfRemainOri  = _purchLine.PdsCWRemainInventPhysical;
            cwQtyRemainNew    = _purchLine.PdsCWRemainInventPhysical;
        }
        return [cwQtyUpdate, cwNumOfRemainOri, cwQtyRemainNew];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
