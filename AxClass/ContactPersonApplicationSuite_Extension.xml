<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ContactPersonApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ContactPersonApplicationSuite_Extension</c> contains the ApplicationSuite extending logic for the <c>ContactPerson</c> table.
/// </summary>
[ExtensionOf(tableStr(ContactPerson))]
public final class ContactPersonApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>contactPersonTitle_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns title ID of contact person for current party
    /// </summary>
    /// <returns>
    /// Title ID of first contact person for current party
    /// </returns>
    public TitleId contactPersonTitle_RU()
    {
        return this.Title;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecpGetLanguage</Name>
				<Source><![CDATA[
    public LanguageId ecpGetLanguage()
    {
        return DirPartyTable::findRec(this.ContactForParty).LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the customer account of the customer for which this contact is a contact.
    /// </summary>
    /// <returns>
    /// The customer account of the customer for which this contact is a contact.
    /// </returns>
    public CustAccount getCustAccount()
    {
        return CustTable::findByPartyRecId(this.ContactForParty).AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCitizenship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the citizenship of the party of the contact.
    /// </summary>
    /// <returns>
    /// The citizenship of the party of the contact.
    /// </returns>
    public HcmPersonPrivateCitizenshipRegions getCitizenship()
    {
        return HcmPersonPrivateCitizenshipDetails::getPersonCitizenships(this.Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the vendor account of the vendor for which this contact is a contact.
    /// </summary>
    /// <returns>
    /// The vendor account of the vendor for which this contact is a contact.
    /// </returns>
    public VendAccount getVendAccount()
    {
        return VendTable::findByPartyRecId(this.ContactForParty).AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBusRel</Name>
				<Source><![CDATA[
    public void initFromBusRel(smmBusRelTable _smmBusRelTable)
    {
        this.TimeAvailableFrom          = _smmBusRelTable.OpenFromTime;
        this.TimeAvailableTo            = _smmBusRelTable.OpenToTime;
        this.ContactForParty            = _smmBusRelTable.Party;
        this.MainResponsibleWorker      = _smmBusRelTable.MainContactWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCompetitorTable</Name>
				<Source><![CDATA[
    public void initFromCompetitorTable(smmQuotationCompetitorGroup _competitorTable)
    {
        this.ContactForParty  = _competitorTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    public void initFromCustTable(CustTable _custTable)
    {
        this.ContactForParty            = _custTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLeadTable</Name>
				<Source><![CDATA[
    public void initFromLeadTable(smmLeadTable _leadTable)
    {
        this.ContactForParty  = _leadTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOpportunityTable</Name>
				<Source><![CDATA[
    public void initFromOpportunityTable(smmOpportunityTable _opportunityTable)
    {
        this.ContactForParty  = _opportunityTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    public void initFromVendTable(VendTable _vendTable)
    {
        this.ContactForParty                 = _vendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProspectiveVendorRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ContactPerson</c> table record from a <c>VendProspectiveVendorRegistration</c> table record.
    /// </summary>
    /// <param name = "_vendorRegistration">
    /// The <c>VendProspectiveVendorRegistration</c> table record from which to Initialize the <c>ContactPerson</c> record.
    /// </param>
    public void initFromProspectiveVendorRegistration(VendProspectiveVendorRegistration _vendorRegistration)
    {
        this.initValue();
        this.Party = _vendorRegistration.ContactParty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markContactAsDeleted</Name>
				<Source><![CDATA[
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
    public void markContactAsDeleted()
    {
        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
            return;
        }

        smmOutlookSyncDeprecationHandler::showDeprecationMessage();

        smmOutlookContactDeleteAction   outlookContactDeleteAction = OutlookSyncParameters::find().OutlookContactDeleteAction;
        smmContactPersonSynchronize     smmContactPersonSynchronize;

        // Traverse all Outlook synchronization entries for the contact person
        while select forupdate smmContactPersonSynchronize where smmContactPersonSynchronize.ContactPersonId == this.ContactPersonId
        {
            if (outlookContactDeleteAction == smmOutlookContactDeleteAction::Clear)
            {
                // Delete the contact entries in the synchronization table
                smmContactPersonSynchronize.delete();
            }
            else
            if (outlookContactDeleteAction == smmOutlookContactDeleteAction::Delete)
            {
                // Mark the contact as deleted in the Outlook synchronization table
                smmContactPersonSynchronize.Deleted = NoYes::Yes;
                smmContactPersonSynchronize.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindOrCreateEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the email of the <c>ContactPerson</c>.
    /// </summary>
    /// <param name="_emailToCreate">
    /// The email address to assign to the <c>ContactPerson</c> if one does not already exist.
    /// </param>
    /// <returns>
    /// The email address of the <c>ContactPerson</c>.
    /// </returns>
    public Email mcrFindOrCreateEmail(Email _emailToCreate)
    {
        LogisticsLocationEntity         location;
        Email                           foundEmail;

        location = DirParty::primaryElectronicAddressLocation(this.Party, LogisticsElectronicAddressMethodType::Email);

        // If an email already exists for this location, find and return it
        foundEmail = location.getEmail();
        if (foundEmail)
        {
            return foundEmail;
        }

        // Otherwise, we'll create the email passed in as a parameter
        location.setElectronicAddressOn(LogisticsElectronicAddressMethodType::Email, _emailToCreate);

        return _emailToCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCitizenship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the citizenship for the party of the contact person.
    /// </summary>
    /// <param name="citizenship">
    /// An <c>HcmPersonPrivateCitizenshipRegions</c> value that defines the new citizenship of the party of the contact
    /// person.
    /// </param>
    public void setCitizenship(HcmPersonPrivateCitizenshipRegions citizenship)
    {
        HcmPersonPrivateCitizenshipDetails::setPersonCitizenships(this.Party, citizenship);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustVendLink</Name>
				<Source><![CDATA[
    // Add customer/vendor link associated to already existing contacts
    public static void addCustVendLink(TableId _custVendTableId,DirPartyRecId _orgParty,CustVendAC _custVendAccount)
    {
        ContactPerson contactPerson;

        smmBusRelTableConvert2CustomerContext convert2CustomerContext = smmBusRelTableConvert2CustomerContext::current();

        if (!_custVendTableId || !_orgParty || !_custVendAccount || (convert2CustomerContext && convert2CustomerContext.parmSkipAddCustVendLink()))
        {
            return;
        }

        ttsbegin;

        if (_custVendTableId == tableNum(CustTable))
        {
            // Update customer account on all contact persons
            update_recordset contactPerson setting CustAccount = _custVendAccount where contactPerson.ContactForParty == _orgParty;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressTypeToSelectedMailing</Name>
				<Source><![CDATA[
    // Get outlook selected mailing address type from AddressType
    public static smmSelectedMailingAddress addressTypeToSelectedMailing(LogisticsLocationRoleType _roleType)
    {
        smmSelectedMailingAddress selectedMailingAddress;
        switch (_roleType)
        {
            case LogisticsLocationRoleType::Business :
                selectedMailingAddress = smmSelectedMailingAddress::Business;
                break;

            case LogisticsLocationRoleType::Home:
                selectedMailingAddress = smmSelectedMailingAddress::Home;
                break;

            case LogisticsLocationRoleType::Other :
                selectedMailingAddress = smmSelectedMailingAddress::Other;
                break;
        }

        return selectedMailingAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContactPerson</Name>
				<Source><![CDATA[
    public static boolean checkContactPerson(CustAccount _custAccount, ContactPersonId _contactPersonId = '', ContactPersonName _contactPersonName = '')
    {
        ContactPerson   contactPerson;
        if (_contactPersonId || _contactPersonName)
        {
            contactPerson = ContactPerson::find(_contactPersonId);

            if (!contactPerson)
            {
                contactPerson = ContactPerson::findName(_custAccount,'', _contactPersonName);
            }

            if (contactPerson.getCustAccount() != _custAccount)
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactFieldToSelectedMailing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the outlook selected mailing address type from the <c>smmOutlookContactFields</c> enumeration
    /// type.
    /// </summary>
    /// <param name="_contactField">
    /// The <c>smmOutlookContactFields</c> enumeration value to map.
    /// </param>
    /// <returns>
    /// The outlook selected mailing address type that maps to the passed <c>smmOutlookContactFields</c>
    /// enumeration value.
    /// </returns>
    public static smmSelectedMailingAddress contactFieldToSelectedMailing(smmOutlookContactFields _contactField)
    {
        smmSelectedMailingAddress selectedMailingAddress;

        switch (_contactField)
        {
            case smmOutlookContactFields::BusinessAddress :
                selectedMailingAddress = smmSelectedMailingAddress::Business;
                break;

            case smmOutlookContactFields::HomeAddress:
                selectedMailingAddress = smmSelectedMailingAddress::Home;
                break;

            case smmOutlookContactFields::OtherAddress :
                selectedMailingAddress = smmSelectedMailingAddress::Other;
                break;
        }

        return selectedMailingAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findName</Name>
				<Source><![CDATA[
    public static ContactPerson findName(CustAccount       _custAccount,
                                          VendAccount       _vendAccount,
                                          ContactPersonName _contactPersonName,
                                          boolean           _update = false)
    {
        ContactPerson   contactPerson = null;
        DirPartyTable   partyTable;
        VendTable       vendTable;
        CustTable       custTable;

        if ((_custAccount || _vendAccount) && _contactPersonName)
        {
            contactPerson.selectForUpdate(_update);

            if (_custAccount)
            {
                select firstonly contactPerson join AccountNum, Party from custTable
                        where contactPerson.ContactForParty == custTable.Party
                        && custTable.AccountNum == _custAccount
                    join RecId from partyTable
                         where partyTable.RecId == contactPerson.Party &&
                               partyTable.Name  == _contactPersonName;
            }
            else
            {
                select firstonly contactPerson join AccountNum, Party from vendTable
                        where contactPerson.ContactForParty == vendTable.Party
                        && vendTable.AccountNum == _vendAccount
                    join RecId from partyTable
                         where partyTable.RecId == contactPerson.Party &&
                               partyTable.Name  == _contactPersonName;
            }
        }

        return contactPerson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustContactPerson</Name>
				<Source><![CDATA[
    public static void lookupCustContactPerson(FormStringControl    _ctrl,
                                               CustAccount          _custAccount,
                                               FormStringControl    nameControl               = null,
                                               ContactPersonId      currentContactPersonId    = '')
    {
        ContactPerson::lookupDirContactPerson(_ctrl, CustTable::find(_custAccount).Party, nameControl, currentContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendContactPerson</Name>
				<Source><![CDATA[
    public static void lookupVendContactPerson(FormStringControl    _ctrl,
                                               VendAccount          _vendAccount,
                                               FormStringControl    nameControl               = null,
                                               ContactPersonId      currentContactPersonId    = '')
    {
        ContactPerson::lookupDirContactPerson(_ctrl, VendTable::find(_vendAccount).Party, nameControl, currentContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCustVendLink</Name>
				<Source><![CDATA[
    // Remove customer/vendor link associated to contacts in case they are deleted
    public static void removeCustVendLink(TableId _custVendTableId,CustVendAC _custVendAccount)
    {
        ContactPerson contactPerson;

        smmBusRelTableConvert2CustomerContext convert2CustomerContext = smmBusRelTableConvert2CustomerContext::current();

        if (!_custVendTableId || !_custVendAccount || (convert2CustomerContext && convert2CustomerContext.parmSkipAddCustVendLink()))
        {
            return;
        }

        ttsbegin;

        if (_custVendTableId == tableNum(CustTable))
        {
            // Update customer account on all contact persons
            update_recordset contactPerson setting CustAccount = '' where contactPerson.ContactForParty == CustTable::find(_custVendAccount).Party;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedMailingAddressToAddressType</Name>
				<Source><![CDATA[
    public static LogisticsLocationRoleType selectedMailingAddressToAddressType(smmSelectedMailingAddress _selectedAddress)
    {
        LogisticsLocationRoleType addressType;
        switch (_selectedAddress)
        {
            case smmSelectedMailingAddress::Business :
                addressType = LogisticsLocationRoleType::Business;
                break;

            case smmSelectedMailingAddress::Home :
                addressType = LogisticsLocationRoleType::Home;
                break;

            case smmSelectedMailingAddress::Other :
                addressType = LogisticsLocationRoleType::Other;
                break;
        }

        return addressType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedMailingToAddressType</Name>
				<Source><![CDATA[
    // Get LogisticsLocationRoleType from outlook selected mailing address type
    public static LogisticsLocationRoleType selectedMailingToAddressType(smmSelectedMailingAddress _selectedMailingAddress)
    {
        LogisticsLocationRoleType addressType;
        switch (_selectedMailingAddress)
        {
            case smmSelectedMailingAddress::Business :
                addressType = LogisticsLocationRoleType::Business;
                break;

            case smmSelectedMailingAddress::Home:
                addressType = LogisticsLocationRoleType::Home;
                break;

            case smmSelectedMailingAddress::Other :
                addressType = LogisticsLocationRoleType::Other;
                break;
        }

        return addressType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>touchContactPersons</Name>
				<Source><![CDATA[
    // To add time stamp to contact persons to force synchronization
    public static void touchContactPersons(CrmWorkerRecId _worker)
    {
        ContactPerson   contactPerson;
        smmContactPersonSynchronize smmContactPersonSynchronize;

        ttsbegin;

        // Update all contactPersons for a selected worker with current date and time
        while select forupdate contactPerson exists join smmContactPersonSynchronize where contactPerson.ContactPersonId == smmContactPersonSynchronize.ContactPersonId &&
        smmContactPersonSynchronize.Worker == _worker
        {
            contactPerson.LastEditAxDateTime = DateTimeUtil::getSystemDateTime();
            contactPerson.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecpLastLoginDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the last login date of the client self service.
    /// </summary>
    /// <param name = "_contactPerson">The <c>ContactPerson</c> record to retrieve data from.</param>
    /// <returns>
    /// The last login date of the client self service
    /// </returns>
    public static display LoginDate ecpLastLoginDate(ContactPerson _contactPerson)
    {
        SalesBasket salesBasket;

        select firstonly ModifiedDateTime from salesBasket where
            salesBasket.CustAccount     == _contactPerson.getCustAccount() &&
            salesBasket.ContactPersonId == _contactPerson.ContactPersonId;

        return DateTimeUtil::date(salesBasket.ModifiedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecpLastLoginTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the last login time of the client self service.
    /// </summary>
    /// <param name = "_contactPerson">The <c>ContactPerson</c> record to retrieve data from.</param>
    /// <returns>
    /// The last login time of the client self service.
    /// </returns>
    public static display TimeOfDay ecpLastLoginTime(ContactPerson _contactPerson)
    {
        SalesBasket salesBasket;

        select firstonly ModifiedDateTime from salesBasket where
            salesBasket.CustAccount     == _contactPerson.getCustAccount() &&
            salesBasket.ContactPersonId == _contactPerson.ContactPersonId;

        return DateTimeUtil::time(salesBasket.ModifiedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there is at least one document attached to the contact person record.
    /// </summary>
    /// <param name = "_contactPerson">The <c>ContactPerson</c> record to retrieve data from.</param>
    /// <returns>
    /// true if the contact person has documents; otherwise, false.
    /// </returns>
    public static display VendProfileHasDocuments hasDocuments(ContactPerson _contactPerson)
    {
        boolean     contactHasDocuments = false;

        contactHasDocuments = DocuRef::exist(_contactPerson.DataAreaId, _contactPerson.TableId, _contactPerson.RecId);

        return contactHasDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocHanIcon</Name>
				<Source><![CDATA[
    public static display smmDocIconNum showDocHanIcon(ContactPerson _contactPerson)
    {
        #macrolib.resource

        if (_contactPerson.ContactPersonId &&
            _contactPerson.DataAreaId &&
            (select docuRef where docuRef.RefCompanyId      == _contactPerson.DataAreaId &&
                                  docuRef.ContactPersonId   == _contactPerson.ContactPersonId).RecId)
        {
            return #RES_NODE_DOC;
        }

        return #RES_AM_NEW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorUserAlias</Name>
				<Source><![CDATA[
    public static display ContactPersonUserAlias vendorUserAlias(ContactPerson _contactPerson)
    {
        return ContactPerson::vendorUser(_contactPerson).NetworkAlias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorUser</Name>
				<Source><![CDATA[
    public static UserInfo vendorUser(ContactPerson _contactPerson)
    {
        DirPersonUser       personUser;
        UserExternalParty   userExternalParty;
        UserInfo            user;

        select firstonly user
            exists join RecId from personUser
            exists join RecId from userExternalParty
            where personUser.PersonParty            == _contactPerson.Party
            && user.Id                              == personUser.User
            && userExternalParty.User               == personUser.User
            && userExternalParty.LegalEntity        == _contactPerson.companyInfo().RecId
            && userExternalParty.ExternalParty      == _contactPerson.ContactForParty
            && userExternalParty.ExternalEntityType == UserExternalPartyEntityType::Vendor;

        return user;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendorPortalAccess</Name>
				<Source><![CDATA[
    public boolean setVendorPortalAccess(VendVendorPortalAccessAllowed _allowed)
    {
        boolean result = false;
        if (this.VendorPortalAccessAllowed != _allowed)
        {
            ttsbegin;
            changecompany(this.DataAreaId)
            {
                this.selectForUpdate(true);
                this.VendorPortalAccessAllowed = _allowed;
                this.update();

                if (!this.VendorPortalAccessAllowed)
                {
                    VendVendorContactPersonMakeInactiveEventHandlers::terminateOnlineSessionForInactivatedContactPerson(this);
                }

                result = true;
            }
            ttscommit;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendorContactPersonCanBeDeletedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the vendor portal contact person can be deleted by the user.
    /// </summary>
    /// <param name="_userId">
    /// The <c>UserId</c> doing the deletion.
    /// </param>
    /// <returns>
    /// true if the contact person can be deleted by the user, false otherwise.
    /// </returns>
    public boolean checkVendorContactPersonCanBeDeletedByUser(UserId _userId = curUserId())
    {
        boolean ret = true;
        NetworkAlias userAlias = ContactPersonUserRelation::findUserAlias(this);
        if (userAlias != xUserInfo::find(false, _userId).networkAlias)
        {
            ret = checkFailed(strFmt(("@SCM:VendorPortalContactPersonRelationCreatedByAnotherUser"), VendTable::findByPartyRecId(this.ContactForParty).name(), this.displayCompanyName()));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteVendorContactPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates deletion of the vendor contact person and deletes it.
    /// </summary>
    /// <returns>
    /// true if the contact person deletion succeeded, false otherwise.
    /// </returns>
    public boolean deleteVendorContactPerson()
    {
        boolean ret;

        if (this.checkVendorContactPersonCanBeDeletedByUser() && this.validateDelete())
        {
            changecompany(this.DataAreaId)
            {
                ContactPerson contactPerson;
                delete_from contactPerson where contactPerson.RecId == this.RecId;
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountOfContactsForParty</Name>
				<Source><![CDATA[
	/// <summary>
    /// Get count of contacts for the contact person party.
    /// </summary>
    /// <returns>Count of contacts for the Contact Person party.</returns>
    public int getCountOfContactsForParty()
    {
        ContactPerson contactPerson;
        select crosscompany count(RecId) from contactPerson
            where contactPerson.Party == this.Party;

        return int642int(contactPerson.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyOfVendorContactPersonHasVendorContactRelationToOtherVendors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the party of the vendor contact person has vendor contact relations to other vendors not exposed to the user.
    /// </summary>
    /// <param name="_userId">
    /// The <c>UserId</c> to check upon, defaulted to current user id.
    /// </param>
    /// <returns>
    /// true if the contact person party has relation to other vendors, false otherwise.
    /// </returns>
    public boolean partyOfVendorContactPersonHasVendorContactRelationToOtherVendors(UserId _userId = curUserId())
    {
        boolean result;

        ContactPerson userContactPerson, vendorPortalContactPerson;
        VendTable userContactPersonVendTableRelation, vendorPortalContactPersonVendTableRelation;

        Unchecked(Uncheck::XDS)
        {
            select firstonly crosscompany RecId from vendorPortalContactPersonVendTableRelation
                exists join vendorPortalContactPerson
                    where vendorPortalContactPerson.Party == this.Party
                        && vendorPortalContactPerson.ContactForParty == vendorPortalContactPersonVendTableRelation.Party
                        && vendorPortalContactPerson.DataAreaId == vendorPortalContactPersonVendTableRelation.DataAreaId
                notexists join  userContactPersonVendTableRelation
                    exists join userContactPerson
                    where userContactPerson.Party == DirPersonUser::find(_userId).PersonParty
                        && userContactPerson.ContactForParty == userContactPersonVendTableRelation.Party
                        && userContactPerson.DataAreaId == userContactPersonVendTableRelation.DataAreaId
                        && vendorPortalContactPersonVendTableRelation.RecId == userContactPersonVendTableRelation.RecId
                        && vendorPortalContactPersonVendTableRelation.DataAreaId == userContactPersonVendTableRelation.DataAreaId;

            result = vendorPortalContactPersonVendTableRelation.RecId != 0;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>