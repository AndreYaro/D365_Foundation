<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpd_ChangeDimension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventUpd_ChangeDimension</c> class is used to change inventory dimensions on inventory
///    transactions.
/// </summary>
/// <remarks>
///    This class requires the following parameters: <paramref name="inventMovement" />, <paramref
///    name="fromInventDim" />, <paramref name="fromInventDimParm" />, <paramref name="toInventDim" />,
///    and <paramref name="changeQty" />.
/// </remarks>
public class InventUpd_ChangeDimension extends InventUpdate
{
    // new parameters

    InventQty               changeQty;

    InventDim               frominventDimCriteria;
    InventDimParm           frominventDimParm;

    InventDim               toInventDimCriteria;

    TransDate               dateChange;

    // update result

    InventQty               updChangeQty;

    PdsCWInventQty          cwChangeQty;
    PdsCWInventQty          cwUpdChangeQty;
    boolean                 onlySelectOnOrder; //If this parameter is set to true, only inventory transactions with StatusIssue::OnOrder will be selected when updating issue transactions.
    boolean                 onlySelectReserved; //If this parameter is set to true, only inventory transactions with StatusIssue::ReservPhysical || StatusIssue::ReservOrdered will be selected when updating issue transactions.
    boolean                 onlySelectReservPhysical; //If this parameter is set to true, only inventory transactions with StatusIssue::ReservPhysical will be selected when updating issue transactions.

    InventUpd_ChangeDimensionIssueQueryStrategy issueQueryStrategy; // This field controls how the issues will be selected when none of the "onlySelect" parameters above are set

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdateMovement</Name>
				<Source><![CDATA[
    protected boolean checkUpdateMovement(TransDate transDate)
    {
        boolean ok = true;

        if (! toInventDimCriteria.RecId)
            ok = checkFailed("@SYS59434");

        if (! movement.checkUpdateStandard(transDate))
            ok = false;

        if (! movement.checkDimFieldsValid(toInventDimCriteria,null))
            return false;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeQty</Name>
				<Source><![CDATA[
    public InventQty parmChangeQty(InventQty _changeQty = changeQty)
    {
        changeQty = _changeQty;
        return changeQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateChange</Name>
				<Source><![CDATA[
    public TransDate parmDateChange(TransDate _dateChange = dateChange)
    {
        dateChange = _dateChange;
        return dateChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmFromInventDimCriteria(InventDim _inventDimCriteria  = frominventDimCriteria)
    {
        frominventDimCriteria = _inventDimCriteria;
        return frominventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmFromInventDimParm(InventDimParm _inventDimParm = frominventDimParm)
    {
        frominventDimParm = _inventDimParm;
        return frominventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlySelectOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the onlySelectOnOrder parameter.
    /// </summary>
    /// <param name="_onlySelectOnOrder">
    /// The value to set; Optional.
    /// </param>
    /// <returns>
    /// The value of the onlySelectOnOrder parameter.
    /// </returns>
    /// <remarks>
    /// If this parameter is set to true, only inventory transactions with StatusIssue::OnOrder will be selected when updating issue transactions.
    /// </remarks>
    public boolean parmOnlySelectOnOrder(boolean _onlySelectOnOrder = onlySelectOnOrder)
    {
        onlySelectOnOrder = _onlySelectOnOrder;

        return onlySelectOnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlySelectReserved</Name>
				<Source><![CDATA[
    public boolean parmOnlySelectReserved(boolean _onlySelectReserved = onlySelectReserved)
    {
        onlySelectReserved = _onlySelectReserved;
        return _onlySelectReserved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlySelectReservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the onlySelectReservPhysical parameter.
    /// </summary>
    /// <param name="_onlySelectReservPhysical">
    /// The value to set; optional.
    /// </param>
    /// <returns>
    /// The value of the onlySelectReservPhysical parameter.
    /// </returns>
    /// <remarks>
    /// If this parameter is set to true, only inventory transactions with StatusIssue::ReservPhysical will be selected when updating issue transactions.
    /// </remarks>
    public boolean parmOnlySelectReservPhysical(boolean _onlySelectReservPhysical = onlySelectReservPhysical)
    {
        onlySelectReservPhysical = _onlySelectReservPhysical;

        return onlySelectReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWChangeQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the cwChangeQty parameter.
    /// </summary>
    /// <param name="_cwChangeQty">
    /// Value to be set.
    /// </param>
    /// <returns>
    /// The cwChangeQty parameter.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public PdsCWInventQty parmpdsCWChangeQty(PdsCWInventQty _cwChangeQty)
    /// </syntax>
    /// </remarks>
    public PdsCWInventQty parmPdsCWChangeQty(
        PdsCWInventQty _cwChangeQty = cwChangeQty)
    {
        cwChangeQty = _cwChangeQty;

        return cwChangeQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmToInventDimCriteria(InventDim _inventDimCriteria  = toInventDimCriteria)
    {
        toInventDimCriteria = _inventDimCriteria;
        return toInventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChangeIssue</Name>
				<Source><![CDATA[
    protected void updateChangeIssue()
    {
        const int       MaxTry = 2;
        InventTrans     inventTrans;
        InventDim       inventDim;
        InventQty       addChangeQty = changeQty;
        InventQty       qty;
        PdsCWInventQty  cwAddChangeQty = cwChangeQty;
        PdsCWInventQty  cwQty;
        int             queryTryCnt = 0;
        boolean         isSearchReservePhysicalOrOrder = false;

        if ((onlySelectReserved && onlySelectOnOrder)
            ||  (onlySelectReserved && onlySelectReservPhysical)
            ||  (onlySelectOnOrder  && onlySelectReservPhysical))
        {
            // We should only allow one parameter to be active at a time
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        StatusIssue status;
        if (onlySelectOnOrder)
        {
            status = StatusIssue::OnOrder;
        }
        else if (onlySelectReservPhysical || onlySelectReserved)
        {
            status = StatusIssue::ReservPhysical;
        }

        if (status != StatusIssue::ReservPhysical
            && onlySelectOnOrder == true
            && movement.transChildType() != InventTransChildType::None
            && movement.transChildRefId() != ''
            && movement.isItemWHSEnabled()
            && InventUpd_ChangeDimensionIssueForWHSitemFlight::instance().isEnabled())
        {
            isSearchReservePhysicalOrOrder = true;
        }

        while (addChangeQty && queryTryCnt < MaxTry)
        {
            if (status)
            {
                queryTryCnt++;
                if (queryTryCnt == 1)
                {
                    select forupdate inventTrans
                        where inventTrans.InventTransOrigin == movement.inventTransOriginId()
                            && inventTrans.TransChildType   == movement.transChildType()
                            && inventTrans.TransChildRefId  == movement.transChildRefId()
                            && ((!onlySelectReserved && inventTrans.StatusIssue    == status)
                                || (onlySelectReserved && (inventTrans.StatusIssue == status
                                || inventTrans.StatusIssue     == StatusIssue::ReservOrdered)))
                        #inventDimExistsJoin(inventTrans.inventDimId, inventDim, FromInventDimCriteria, FromInventDimParm);
                }
                else
                {
                    if (isSearchReservePhysicalOrOrder)
                    {
                        if  ((fromInventDimParm.InventSerialIdFlag && fromInventDimCriteria.inventSerialId == '') ||
                            (fromInventDimParm.InventBatchIdFlag && fromInventDimCriteria.inventBatchId == '') ||
                            (fromInventDimParm.LicensePlateFlag && fromInventDimCriteria.LicensePlateId == '') ||
                            (fromInventDimParm.WMSLocationIdFlag && fromInventDimCriteria.wMSLocationId == ''))
                        {
                            if (fromInventDimCriteria.inventSerialId == '')
                            {
                                fromInventDimParm.InventSerialIdFlag = NoYes::No;
                            }
                            if (fromInventDimCriteria.inventBatchId == '')
                            {
                                fromInventDimParm.InventBatchIdFlag = NoYes::No;
                            }
                            if (fromInventDimCriteria.LicensePlateId == '')
                            {
                                fromInventDimParm.LicensePlateFlag = NoYes::No;
                            }
                            if (fromInventDimCriteria.wMSLocationId == '')
                            {
                                fromInventDimParm.WMSLocationIdFlag = NoYes::No;
                            }
                        
                            select forupdate inventTrans
                                where inventTrans.InventTransOrigin == movement.inventTransOriginId()
                                    && inventTrans.TransChildType   == movement.transChildType()
                                    && inventTrans.TransChildRefId  == movement.transChildRefId()
                                    && ( inventTrans.StatusIssue == StatusIssue::ReservPhysical || inventTrans.StatusIssue == StatusIssue::ReservOrdered)
                                #inventDimExistsJoin(inventTrans.inventDimId, inventDim, FromInventDimCriteria, FromInventDimParm);
                        }
                        else
                        {
                            break; //No use trying - conditions are not valid
                        }     
                    }
                    else
                    {
                        if  ((fromInventDimParm.InventSerialIdFlag && fromInventDimCriteria.inventSerialId == '') ||
                              (fromInventDimParm.InventBatchIdFlag && fromInventDimCriteria.inventBatchId == '') )
                        {
                            if (fromInventDimCriteria.inventSerialId == '')
                            {
                                fromInventDimParm.InventSerialIdFlag = NoYes::No;
                            }
                            if (fromInventDimCriteria.inventBatchId == '')
                            {
                                fromInventDimParm.InventBatchIdFlag = NoYes::No;
                            }

                            select forupdate inventTrans
                                where inventTrans.InventTransOrigin == movement.inventTransOriginId()
                                    && inventTrans.TransChildType   == movement.transChildType()
                                    && inventTrans.TransChildRefId  == movement.transChildRefId()
                                    && inventTrans.StatusIssue      == StatusIssue::ReservOrdered
                                #inventDimExistsJoin(inventTrans.inventDimId, inventDim, FromInventDimCriteria, FromInventDimParm);
                        }
                        else
                        {
                            break; //No use trying - conditions are not valid
                        }
                    }
                }
            }
            else
            {
                queryTryCnt = MaxTry; //Only one try
                if (!issueQueryStrategy)
                {
                    issueQueryStrategy = InventUpd_ChangeDimensionIssueQueryStrategyDefault::newFromInventUpd_ChangeDimension(this);
                }
                inventTrans = issueQueryStrategy.getIssueInventTransactionsToUpdate();
            }

            while (inventTrans)
            {
                [qty,cwQty] = this.updateTransDimIssue(inventTrans, inventTrans.inventDim(), toInventDimCriteria, addChangeQty, false, cwAddChangeQty);

                addChangeQty -= qty;
                updChangeQty += qty;
                cwAddChangeQty -= cwQty;
                cwUpdChangeQty += cwQty;

                if (! addChangeQty)
                {
                    break;
                }

                next InventTrans;
            }
        }

        if (addChangeQty)
        {
            throw error(strfmt("@SYS54471", -addChangeQty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChangeReceipt</Name>
				<Source><![CDATA[
    protected void updateChangeReceipt()
    {
        InventTrans     inventTrans;
        InventDim       inventDim;
        InventQty       addChangeQty = changeQty;
        InventQty       qty;
        PdsCWInventQty  cwAddChangeQty = cwChangeQty;
        PdsCWInventQty  cwQty;

        while select forupdate inventTrans
            where inventTrans.InventTransOrigin == movement.inventTransOriginId()
               && inventTrans.TransChildType    == movement.transChildType()
               && inventTrans.TransChildRefId   == movement.transChildRefId()
               &&(inventTrans.StatusReceipt     == StatusReceipt::Ordered
               || inventTrans.StatusReceipt     == StatusReceipt::Arrived)
               && inventTrans.StatusIssue       == StatusIssue::None
        #inventDimExistsJoin(inventTrans.inventDimId,inventDim,FromInventDimCriteria,FromInventDimParm)
        {
            [qty,cwQty] =
           this.updateTransDimReceipt(inventTrans,inventTrans.inventDim(),toInventDimCriteria,addChangeQty, false, false, cwAddChangeQty);

            addChangeQty -= qty;
            updChangeQty += qty;
            cwAddChangeQty -= cwQty;
            cwUpdChangeQty += cwQty;

            if (! addChangeQty)
                break;
        }

        if (addChangeQty)
            throw error(strfmt("@SYS54471",addChangeQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow()
    {
        using (var telemetryTask = new InventUpdateInstrumentationTask(this))
        {
			ttsbegin;

			if (changeQty)
			{
				if (! this.checkUpdateMovement(dateChange))
					throw error("@SYS18447");

				if (changeQty > 0)
					this.updateChangeReceipt();
				else
					this.updateChangeIssue();
			}

			ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventUpd_ChangeDimension</c> class.
    /// </summary>
    /// <param name = "_movement">The inventory movement whose transactions need to be updated.</param>
    /// <param name = "_frominventDimCriteria">The inventory dimension criteria for finding the transactions to update.</param>
    /// <param name = "_frominventDimParm">The flags for the inventory dimension criteria values.</param>
    /// <param name = "_toinventDimCriteria">The new inventory dimensions.</param>
    /// <param name = "_changeQty">The quantity that needs to be updated.</param>
    /// <param name = "_cwChangeQty">The catch-weight quantity that needs to be updated; optional.</param>
    /// <returns>An instance of the <c>InventUpd_ChangeDimension</c> class.</returns>
    public static InventUpd_ChangeDimension newParameters(
                InventMovement        _movement,
                InventDim             _frominventDimCriteria,
                InventDimParm         _frominventDimParm,
                InventDim             _toinventDimCriteria,
                InventQtyArrived      _changeQty,
                pdsCWInventQty        _cwChangeQty = 0
              )
    {
        InventUpd_ChangeDimension inventUpd_ChangeDimension = new InventUpd_ChangeDimension(_movement);

        inventUpd_ChangeDimension.setParmAllowDefault();
        inventUpd_ChangeDimension.parmFromInventDimCriteria(_frominventDimCriteria);
        inventUpd_ChangeDimension.parmFromInventDimParm(_frominventDimParm);
        inventUpd_ChangeDimension.parmToInventDimCriteria(_toinventDimCriteria);
        inventUpd_ChangeDimension.parmChangeQty(_changeQty);
        inventUpd_ChangeDimension.parmDateChange(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        inventUpd_ChangeDimension.parmPdsCWChangeQty(_cwChangeQty);

        inventUpd_ChangeDimension.initUpdate();

        return inventUpd_ChangeDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParametersIssuesOrderedByStatusIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventUpd_ChangeDimension</c> class where issues to be updated will be ordered by issue status.
    /// </summary>
    /// <param name = "_movement">The inventory movement whose transactions need to be updated.</param>
    /// <param name = "_frominventDimCriteria">The inventory dimension criteria for finding the transactions to update.</param>
    /// <param name = "_frominventDimParm">The flags for the inventory dimension criteria values.</param>
    /// <param name = "_toinventDimCriteria">The new inventory dimensions.</param>
    /// <param name = "_changeQty">The quantity that needs to be updated.</param>
    /// <param name = "_cwChangeQty">The catch-weight quantity that needs to be updated; optional.</param>
    /// <returns>An instance of the <c>InventUpd_ChangeDimension</c> class.</returns>
    /// <remarks>The issue transactions will only be ordered by issue status if the update is not set up to look for specific issue statuses, e.g., by calling <c>parmOnlySelectOnOrder(true)</c>.</remarks>
    public static InventUpd_ChangeDimension newParametersIssuesOrderedByStatusIssue(
        InventMovement        _movement,
        InventDim             _frominventDimCriteria,
        InventDimParm         _frominventDimParm,
        InventDim             _toinventDimCriteria,
        InventQtyArrived      _changeQty,
        PdsCWInventQty        _cwChangeQty = 0)
    {
        var inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(
            _movement,
            _frominventDimCriteria,
            _frominventDimParm,
            _toinventDimCriteria,
            _changeQty,
            _cwChangeQty);

        var orderedStrategy = InventUpd_ChangeDimensionIssueQueryStrategyOrderedByStatusIssue::newFromInventUpd_ChangeDimension(inventUpd_ChangeDimension);
        inventUpd_ChangeDimension.issueQueryStrategy = orderedStrategy;

        return inventUpd_ChangeDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForceDimInventTrans</Name>
				<Source><![CDATA[
    public static void updateForceDimInventTrans(
        InventMovement  _movement,
        InventQty       qty,
        InventDim       fromInventDim,
        InventDim       _toinventDimCriteria,
        boolean         _merge,
        boolean         _allowReserveReduction,
        boolean         _wmsReserved = false,
        PdsCWInventQty  _cwQty = 0
        )
    {
        InventTrans                 inventTrans;
        InventDim                   toInventDim;
        InventQty                   qtyRemain = qty;
        PdsCWInventQty              cwQtyRemain = _cwQty;

        ttsbegin;

        InventUpd_ChangeDimension changeDimension = new InventUpd_ChangeDimension(_movement);

        changeDimension.setParmAllowDefault();
        changeDimension.parmAllowReserveReduction(_allowReserveReduction);

        while select forupdate inventTrans
            where inventTrans.InventTransOrigin == _movement.inventTransOriginId()
               && inventTrans.TransChildType    == _movement.transChildType()
               && inventTrans.TransChildRefId   == _movement.transChildRefId()
               && inventTrans.InventDimId       ==  fromInventDim.InventDimId
               && ((inventTrans.StatusIssue  == StatusIssue::None 
               && (inventTrans.StatusReceipt == StatusReceipt::Ordered
               || inventTrans.StatusReceipt  == StatusReceipt::QuotationReceipt))
               || (inventTrans.StatusReceipt == StatusReceipt::None 
               && (inventTrans.StatusIssue   == StatusIssue::OnOrder
               || inventTrans.StatusIssue    == StatusIssue::ReservPhysical
               || inventTrans.StatusIssue    == StatusIssue::ReservOrdered
               || inventTrans.StatusIssue    == StatusIssue::QuotationIssue)))
        {
            if ((qtyRemain > 0 && inventTrans.Qty > qtyRemain) ||
                (qtyRemain < 0 && inventTrans.Qty < qtyRemain))
            {
                inventTrans.updateSplit(qtyRemain, cwQtyRemain);
            }

            if (_merge)
            {
                toInventDim.data(fromInventDim);

                toInventDim.mergeUsedDim(_movement.inventDimGroupSetup(),_toinventDimCriteria);

                toInventDim = InventDim::findOrCreate(toInventDim);
            }
            else
            {
                toInventDim = InventDim::findOrCreate(_toinventDimCriteria);
            }

            if (inventTrans.Qty > 0)
            {
                changeDimension.updateTransDimReceipt(inventTrans, fromInventDim, toInventDim, inventTrans.Qty, false, false, inventTrans.PdsCWQty);
            }
            else
            {
                changeDimension.updateTransDimIssue(inventTrans, fromInventDim, toInventDim, inventTrans.Qty, false, inventTrans.PdsCWQty);
            }

            qtyRemain   -= inventTrans.Qty;
            cwQtyRemain -= inventTrans.PdsCWQty;

            if (qtyRemain == 0)
            {
                break;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateForceInventTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for forcing the update of inventory transaction dimensions.
    /// </summary>
    /// <returns>The query</returns>
    protected Query buildUpdateForceInventTransQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(InventTrans));
        qbds.update(true);

        qbds.addRange(fieldNum(InventTrans, InventTransOrigin)).value(queryValue(movement.inventTransOriginId()));
        qbds.addRange(fieldNum(InventTrans, TransChildType)).value(queryValue(movement.transChildType()));
        qbds.addRange(fieldNum(InventTrans, TransChildRefId)).value(queryValue(movement.transChildRefId()));

        qbds.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::None));
        qbds.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::Ordered));
        qbds.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(StatusReceipt::QuotationReceipt));

        qbds.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::None));
        qbds.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::OnOrder));
        qbds.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::ReservPhysical));
        qbds.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::ReservOrdered));
        qbds.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(StatusIssue::QuotationIssue));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the dimensions on an inventory transaction.
    /// </summary>
    /// <param name = "_inventTrans">
    /// The inventory transaction to update.
    /// </param>
    /// <param name = "_fromInventDim">
    /// The from inventory dimension.
    /// </param>
    /// <param name = "_toInventDim">
    /// The to inventory dimension.
    /// </param>    
    protected void updateTransDim(InventTrans _inventTrans, InventDim _fromInventDim, InventDim _toInventDim)
    {
        if (_inventTrans.Qty > 0)
        {
            this.updateTransDimReceipt(_inventTrans, _fromInventDim, _toInventDim, _inventTrans.Qty, false, false, _inventTrans.PdsCWQty);
        }
        else
        {
            this.updateTransDimIssue(_inventTrans, _fromInventDim, _toInventDim, _inventTrans.Qty, false, _inventTrans.PdsCWQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForceInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Force to update the inventory transaction dimensions.
    /// </summary>
    /// <param name = "_movement">
    ///  The movement of the transactions.
    /// </param>
    /// <param name = "_toinventDimCriteria">
    ///  The to inventory dimension criteria.
    /// </param>
    /// <param name = "_merge">
    ///  A flag to identity if the transaction dimensions should be merged.
    /// </param>
    /// <param name = "_allowReserveReduction">
    ///  A flag to identity if it allows reservation deduction.
    /// </param>
    /// <param name = "_origFromInventDim">
    ///  The original dimensions of transaction.
    /// </param>
    /// <param name = "_mergePhysicalReservedDim">
    ///  A flag to identity if the physical reserved transaction dimensions should be merged.
    /// </param>
    public static void updateForceInventTrans(
        InventMovement  _movement,
        InventDim       _toinventDimCriteria,
        boolean         _merge,
        boolean         _allowReserveReduction,
        InventDim       _origFromInventDim = _toinventDimCriteria,
        boolean         _mergePhysicalReservedDim = false)
    {
        ttsbegin;

        InventUpd_ChangeDimension changeDimension = new InventUpd_ChangeDimension(_movement);

        changeDimension.setParmAllowDefault();
        changeDimension.parmAllowReserveReduction(_allowReserveReduction);
        Query query = changeDimension.buildUpdateForceInventTransQuery();
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            InventTrans inventTrans = queryRun.get(tableNum(InventTrans));

            InventDim fromInventDim = InventDim::find(inventTrans.InventDimId);
            InventDim toInventDim;

            // If the physical reserved dimensions come from WHS process, merge them instead of removing.
            if (_merge || (_mergePhysicalReservedDim && inventTrans.StatusIssue == StatusIssue::ReservPhysical))
            {
                toInventDim.data(fromInventDim);
                toInventDim.mergeUsedDim(_movement.inventDimGroupSetup(), _toinventDimCriteria, _origFromInventDim);

                toInventDim = InventDim::findOrCreate(toInventDim);
            }
            else
            {
                toInventDim = InventDim::findOrCreate(_toinventDimCriteria);
            }

            changeDimension.updateTransDim(inventTrans, fromInventDim, toInventDim);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTransSwitchDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an inventory transaction must be updated when switching dimension.
    /// </summary>
    /// <param name = "_inventTrans">The inventory transaction.</param>
    /// <param name = "_fromInventDim">The from dimension.</param>
    /// <param name = "_toInventDim">The to dimension.</param>
    /// <returns>true if the inventory transaction must be updated.</returns>
    protected static boolean mustUpdateInventTransSwitchDimension(
        InventTrans         _inventTrans,
        InventDim           _fromInventDim,
        InventDim           _toInventDim)
    {
        if (_inventTrans.inventDimFixed == 0                             &&
            (_inventTrans.StatusIssue == StatusIssue::ReservOrdered ||
             _inventTrans.StatusIssue == StatusIssue::ReservPhysical  ))
        {
            return false;
        }

        if (InventDimFixedClass::inventDimFieldsDifferent(_toInventDim,_fromInventDim) & _inventTrans.InventDimFixed != 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransSwitchDim</Name>
				<Source><![CDATA[
    public static boolean updateTransSwitchDim(
        InventTrans         _inventTrans,
        InventDim           _fromInventDim,
        InventDim           _toInventDim
        )
    {
        InventTrans         inventTransSwitch;
        SysRecordSortedList inventTransList;

        InventQty           qtyTotal;

        PdsCWInventQty      cwQtyTotal;

        InventDimId         fromInventDimId;
        InventDim           fromInventDim;

        if (_fromInventDim.InventDimId)
        {
            fromInventDimId = _fromInventDim.InventDimId;
            fromInventDim   = _fromInventDim;
        }
        else
        {
            fromInventDim   = InventDim::findOrCreate(_fromInventDim);
            fromInventDimId = fromInventDim.InventDimId;
        }

        InventDimId toInventDimId = _toInventDim.InventDimId      ? _toInventDim.InventDimId   : InventDim::findOrCreate(_toInventDim).InventDimId;

        // calculate max switch quantity and select the transactions that can be used for switching
        while select forupdate inventTransSwitch
            where inventTransSwitch.InventTransOrigin   != _inventTrans.InventTransOrigin//don't try to switch with transactions within the same origin
               && inventTransSwitch.StatusIssue         == _inventTrans.StatusIssue
               && inventTransSwitch.StatusReceipt       == _inventTrans.StatusReceipt
               && inventTransSwitch.ItemId              == _inventTrans.ItemId
               && inventTransSwitch.ValueOpen           == InventTransOpen::Yes
               && inventTransSwitch.InventDimId         == toInventDimId
        {
            if (InventUpd_ChangeDimension::mustUpdateInventTransSwitchDimension(inventTransSwitch, _fromInventDim, _toInventDim))
            {
                qtyTotal += inventTransSwitch.Qty;
                cwQtyTotal += inventTransSwitch.PdsCWQty;

                if (! inventTransList)
                {
                    inventTransList = new SysRecordSortedList(tablenum(InventTrans));
                    inventTransList.sortOrder(fieldnum(InventTrans, RecId));
                }

                inventTransList.ins(inventTransSwitch);

                if (abs(qtyTotal) >= abs(_inventTrans.Qty))
                {
                    break;
                }
            }
        }

        if (abs(qtyTotal) < abs(_inventTrans.Qty))
        {
            return false;
        }

        InventQty qtyRemain = _inventTrans.Qty;
        PdsCWInventQty cwRemain = _inventTrans.PdsCWQty;

        if (inventTransList.first(inventTransSwitch))
        do
        {
            if (inventTransSwitch.Qty < qtyRemain)
            {
                inventTransSwitch.updateSplit(qtyRemain, cwRemain);
            }

            inventTransSwitch.InventDimId = fromInventDimId;

            //make sure that related transactions are updated if this is a transfer
            InventUpdate::updateTransDimTransferReceipt(inventTransSwitch.inventMovement(),inventTransSwitch,fromInventDim);

            inventTransSwitch.update();

            qtyRemain -= inventTransSwitch.Qty;
            cwRemain -= inventTransSwitch.PdsCWQty;

            if (! qtyRemain)
            {
                break;
            }
        } 
        while (inventTransList.next(inventTransSwitch));

        if (qtyRemain)
        {
            throw error("@SYS21628");
        }

        _inventTrans.InventDimId = toInventDimId;
        InventUpdate::updateTransDimTransferReceipt(_inventTrans.inventMovement(), _inventTrans, InventDim::find(toInventDimId));
        _inventTrans.update();
        _inventTrans.updateSumUp();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSwitchDimForWhsItemNeeded</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    protected boolean isSwitchDimForWhsItemNeeded(InventTable _inventTable, InventDim _fromInventDim, InventDim _toInventDim)
    {
        InventDimParm inventDimParmFrom, inventDimParmTo;
        InventDimParm allInventDimParm;
        InventDimParm belowLocationInventDimParm;

        inventDimParmFrom.initFromInventDim(_fromInventDim);
        inventDimParmTo.initFromInventDim(_toInventDim);

        allInventDimParm = InventDimParm::orParms(inventDimParmFrom, inventDimParmTo);

        belowLocationInventDimParm = WhsReservationHierarchyInventDimUtil::initInventDimParmBelowLocation(_inventTable);

        FieldId         dimFieldId;
        FieldId         dimParmFieldId;
        ListEnumerator  enumerator = allInventDimParm.selectedDimFields().getEnumerator();

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId = InventDim::dim2dimParm(dimFieldId);

            if (!belowLocationInventDimParm.(dimParmFieldId))
            {
                if (_fromInventDim.(dimParmFieldId) != _toInventDim.(dimParmFieldId))
                {
                    return true;
                }
            }
            else
            {
                if (_fromInventDim.(dimParmFieldId) && _toInventDim.(dimParmFieldId) && _fromInventDim.(dimParmFieldId) != _toInventDim.(dimParmFieldId))
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>