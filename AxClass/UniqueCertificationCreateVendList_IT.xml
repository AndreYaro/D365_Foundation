<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UniqueCertificationCreateVendList_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains the logic of vendor list creation for Unique certification report.
/// </summary>
public class UniqueCertificationCreateVendList_IT extends RunBase
{
    public UniqueCertificationHeader_IT uniqueCertificationHeader;
    public RecordsortedList recordSortedList;
    public boolean skipAddresses;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts vendor details and withhold tax records that are related
    /// to the assigned <c>UniqueCertificationVendorList</c> record.
    /// </summary>
    public void createDetail()
    {
        UniqueCertificationVendorList_IT vendorList;
        select firstonly vendorlist
            where vendorList.RefRecId == this.parmUniqueCertificationHeader().RecId;

        UniqueCertificationCreateVendDetail_IT createVendDetail = UniqueCertificationCreateVendDetail_IT::construct();
        createVendDetail.parmVendorList(vendorList);
        createVendDetail.parmFetchAllVendor(true);
        createVendDetail.parmSkipAddresses(skipAddresses);
        createVendDetail.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the <c>recordSortedList</c> object.
    /// </summary>
    protected void initialize()
    {
        recordSortedList = new RecordSortedList(tablenum(UniqueCertificationVendorList_IT));
        recordSortedList.sortOrder(
            fieldnum(UniqueCertificationVendorList_IT, refRecId),
            fieldnum(UniqueCertificationVendorList_IT, VendAccount),
            fieldnum(UniqueCertificationVendorList_IT, TaxWithholdCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUniqueCertificationHeader</Name>
				<Source><![CDATA[
    public UniqueCertificationHeader_IT parmUniqueCertificationHeader(UniqueCertificationHeader_IT _uniqueCertificationHeader = uniqueCertificationHeader)
    {
        uniqueCertificationHeader = _uniqueCertificationHeader;
        return uniqueCertificationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>UniqueCertificationVendorList</c> records related to
    /// vendors having withhold tax transaction within the given year.
    /// </summary>
    public void populateVendList()
    {
        UniqueCertificationVendorList_IT vendorList;
        TaxWithholdTrans taxWithholdTrans;
        Yr yr = this.parmUniqueCertificationHeader().uniqueCertificationExtraction().Year;
        Fromdate fromDate = Mkdate(01, 01, yr);
        ToDate toDate = Mkdate(31, 12, yr);

        while select taxWithholdTrans
            group by taxWithholdTrans.VendAccount, taxWithholdTrans.TaxWithholdCode
            where taxWithholdTrans.TransDate >= fromDate
               && taxWithholdTrans.TransDate <= toDate
               && !taxWithholdTrans.HideInReport_IT
        {
            vendorList.clear();
            vendorList.initValue();
            vendorList.initFromVendAccount(taxWithholdTrans.VendAccount);
            vendorList.initFromTaxWithholdtrans(taxWithholdTrans);
            vendorList.RefRecId = this.parmUniqueCertificationHeader().RecId;
            recordSortedList.ins(vendorList);
        }

        recordSortedList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>UniqueCertificationVendorList</c> records.
    /// </summary>
    public void run()
    {
        ttsBegin;

        this.initialize();
        this.populateVendList();
        this.createDetail();

        ttsCommit;
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00050, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static UniqueCertificationCreateVendList_IT construct()
    {
        return new UniqueCertificationCreateVendList_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipAddresses</Name>
				<Source><![CDATA[
    public boolean parmSkipAddresses(boolean _skipAddresses = skipAddresses)
    {
        skipAddresses = _skipAddresses;
        return skipAddresses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        UniqueCertificationCreateVendList_IT uniqueCertificationCreateVendList = UniqueCertificationCreateVendList_IT::construct();

        if (_args && _args.record().TableId == tablenum(UniqueCertificationHeader_IT))
        {
            uniqueCertificationCreateVendList.parmUniqueCertificationHeader(_args.record());
        }
        else
        {
            throw error("@SYS80663");
        }

        DialogButton dialogButton = Box::YesNo("@ExtendedItallianLocalization:SetVendorHomeAddresses", DialogButton::Yes);

        if (dialogButton == DialogButton::No)
        {
            uniqueCertificationCreateVendList.parmSkipAddresses(true);
        }

        uniqueCertificationCreateVendList.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>