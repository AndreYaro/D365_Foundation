<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_SLP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetTableMethod_SLP_IN</c> class calculates depreciation for a specific period using the
/// straight line percentage method.
/// </summary>
public class AssetTableMethod_SLP_IN extends AssetTableMethod
{
    AssetDepreciationTime               periods;
    AssetAmount                         assetAmount;
    AssetTransDate                      previousDepreciationDate;
    boolean                             theEnd;
//  Properties required for the depreciation conventions
    AssetTableDepConv                   deprConv;
    AssetAmount                         prevDepAmountPriorYears;
    AssetAmount                         prevDepAmountThisYear;
    boolean                             firstYear;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the amount to depreciate for this interval.
    /// </summary>
    /// <returns>
    /// Returns the amount to depreciate for this interval.
    /// </returns>
    public AssetAmount calc()
    {
        AssetTransDate          startOfPeriod;
        AssetAmount             extraordinaryDepAmount;
        AssetTransDate          orgPeriodEnd;
        AssetAmount             basisForDepreciation,amountToCalc;     // Value used for depreciation convention calculation.
        container               percentages;

        // Adjusts the start date to match the period start.
        if (firstYear)
        {
            startOfPeriod = periodstart;
            firstYear = false;
        }
        else
        {
            startOfPeriod = deprInterval.startOfPeriod(periodstart);
        }
        orgPeriodEnd  = periodEnd;
        percentages   = [singleShift,doubleShift,tripleShift];

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();
            this.setAmountToDepreciate();
            extraordinaryDepAmount = - AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, periodEnd, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation);
            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }
            if (previousDepreciationDate &&
                deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                prevDepAmount   = this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal;
                prevPeriods     = 0;
                if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
                {
                    prevDepAmountPriorYears += prevDepAmountThisYear;
                    prevDepAmountPriorYears += prevDepAmountExternal;
                    prevDepAmountExternal   = 0;
                    prevDepAmountThisYear   = 0;
                }
            }
            if (AssetParameters::find().MaxAcquisitionValue_IN >= amountToDepreciate)
            {
                assetAmount = amountToDepreciate;
            }
            else
            {
                if (deprInterval.assetDepreciationTime(depreciationDate))
                {
                //  This code branch ensures the accuracy of the original calculated amount.
                    if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                    {
                        if (shiftDepreciation)
                        {
                            amountToCalc = amountToDepreciate-extraordinaryDepAmount;
                            assetAmount  = this.calcAmountForShiftDepreciation_IN(
                                                assetBook,
                                                amountToCalc,
                                                startOfPeriod,
                                                orgPeriodEnd,
                                                percentages);
                        }
                        else
                        {
                            assetAmount = ((amountToDepreciate-extraordinaryDepAmount) *
                                            this.percentage() / 100) /
                                            deprInterval.assetDepreciationTime(depreciationDate);
                        }
                    }
                    else
                    {
                    //  Depreciation conventions require an assetBook.serviceLife value.
                        if (assetBook.ServiceLife)
                        {
                            basisForDepreciation = amountToDepreciate - extraordinaryDepAmount;

                            if (shiftDepreciation)
                            {
                                assetAmount = deprConv.calc_SLP_IN((this.calcAmountForShiftDepreciation_IN(assetBook,
                                                                                                basisForDepreciation,
                                                                                                startOfPeriod,
                                                                                                orgPeriodEnd,
                                                                                                percentages)),
                                                                                                prevDepAmountThisYear,
                                                                                                periodEnd,
                                                                                                round(periods + prevPeriods,0));
                            }
                            else
                            {
                                assetAmount = deprConv.calc_SLP_IN((basisForDepreciation * this.percentage() / 100),
                                                                    prevDepAmountThisYear,
                                                                    periodEnd,
                                                                    round(periods + prevPeriods,0));
                            }
                        }
                        else
                        {
                            assetAmount = 0;
                            if (!dualDepreciation)
                            {
                                theEnd = true;
                            }
                        }
                    }
                }
                else
                {
                    assetAmount = 0;
                }
            }
            this.calcRestPeriod(startOfPeriod);
            //  Code added because RB was not updating the assetBook.lifeTimeRest property.
            periods -= restPeriod;
            assetAmount = CurrencyExchangeHelper::amount(assetAmount * this.revaluationFactor());
            //Check for eligibility of 100% depreciation should happen here
            // Correction for minimal depreciation
            if (assetAmount < AssetParameters::find().DepreciationMin)
            {
                if (days && shift)
                {
                    //  This code branch ensures the accuracy of the original calculated amount.
                    if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                    {
                        assetAmount = min(AssetParameters::find().DepreciationMin,amountToDepreciate-prevDepAmount-extraordinaryDepAmount);
                    }
                    else
                    {
                        assetAmount = min(AssetParameters::find().DepreciationMin,amountToDepreciate-prevDepAmountPriorYears-prevDepAmountThisYear-extraordinaryDepAmount);
                    }
                }
            }
            periodEnd++;
            periodstart              = periodEnd;
            periodEnd                = deprInterval.endPeriod(periodstart);
            previousDepreciationDate = depreciationDate;
            if (!prevPeriods)
            {
                assetAmount = assetBook.roundOffDepreciation(assetAmount);
            }
            depreciationThisRun += assetAmount;
            if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
            {
                prevDepAmountThisYear += assetAmount;
            }
        }
        //  This code branch ensures the accuracy of the original calculated amount.
        if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
        {
            if (!prevPeriods &&
                this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount >= amountToDepreciate)
            {
                assetAmount -= this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                prevDepAmount = amountToDepreciate - extraordinaryDepAmount;
                depreciationThisRun = amountToDepreciate - this.prvDepreciationAmount(periodstart) - prevDepAmountExternal - extraordinaryDepAmount;
                theEnd = true;
            }
            else
            {
                if ((assetDepreciationProfile.AssetEndDependOnServiceLife == true) && (periods < 1))
                {
                    if (orgPeriodEnd <= parmRunDate)
                    {
                        assetAmount -= this.prvDepreciationAmount(parmRunDate,true) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                        theEnd = true;
                    }
                }
            }
        }
        else
        {
            if (!prevPeriods &&
                prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount >= amountToDepreciate)
            {
                assetAmount -= prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                theEnd = true;
            }
            else
            {
                if ((assetDepreciationProfile.AssetEndDependOnServiceLife == true) && (periods < 1))
                {
                    if (orgPeriodEnd <= parmRunDate)
                    {
                        assetAmount -= prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                        theEnd = true;
                    }
                }
            }
        }

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the amount to depreciate for this interval.
    /// </summary>
    /// <param name="_amountToDepreciate">
    /// The amount to depreciate.
    /// </param>
    /// <returns>
    /// Returns the amount to depreciate for this interval.
    /// </returns>
    public AssetAmount calc_IN(AssetAmount    _amountToDepreciate = 0)
    {
        AssetTransDate          startOfPeriod;
        AssetAmount             extraordinaryDepAmount;
        AssetTransDate          orgPeriodEnd;
        AssetAmount             basisForDepreciation; // Value used for depreciation convention calculation.

        startOfPeriod = deprInterval.startOfPeriod(periodstart);
        orgPeriodEnd  = periodEnd;
        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();
            this.setAmountToDepreciate();
            extraordinaryDepAmount = - AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, periodEnd, assetBook.BookId, AssetTransType::ExtraordinaryDepreciation);
            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }
            if (previousDepreciationDate &&
                deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                prevDepAmount = this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal;
                prevPeriods = 0;
                if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
                {
                    prevDepAmountPriorYears += prevDepAmountThisYear;
                    prevDepAmountPriorYears += prevDepAmountExternal;
                    prevDepAmountExternal = 0;
                    prevDepAmountThisYear = 0;
                }
            }
            if (deprInterval.assetDepreciationTime(depreciationDate))
            {
                //  This code branch ensures the accuracy of the original calculated amount.
                if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                {
                    if (AssetParameters::find().DepreciationThreshold_IN < (orgPeriodEnd - assetBook.DepreciationStartDate + 1))
                    {
                        if (_amountToDepreciate)
                        {
                            assetAmount = ((_amountToDepreciate - extraordinaryDepAmount) *
                                           this.percentage() / 100) /
                                           deprInterval.assetDepreciationTime(depreciationDate);
                        }
                        else
                        {
                            assetAmount = ((amountToDepreciate - extraordinaryDepAmount) *
                                           this.percentage() / 100) /
                                           deprInterval.assetDepreciationTime(depreciationDate);
                        }
                    }
                    else
                    {
                        if (_amountToDepreciate)
                        {
                            assetAmount = ((_amountToDepreciate - extraordinaryDepAmount) *
                                            (this.percentage() / 100) *
                                            (AssetParameters::find().ThresholdPercentage_IN / 100));
                        }
                        else
                        {
                            assetAmount = ((amountToDepreciate - extraordinaryDepAmount) *
                                            (this.percentage() / 100) *
                                            (AssetParameters::find().ThresholdPercentage_IN / 100));
                        }
                    }
                }
                else
                {
                    //  Depreciation conventions require an assetBook.serviceLife value.
                    if (assetBook.ServiceLife)
                    {
                            basisForDepreciation = amountToDepreciate -
                                                   prevDepAmountPriorYears -
                                                   extraordinaryDepAmount;

                            assetAmount = deprConv.calc_RB((basisForDepreciation * this.percentage() / 100),
                                                           prevDepAmountThisYear,
                                                           periodEnd,
                                                           round(periods + prevPeriods,0));
                    }
                    else
                    {
                        assetAmount = 0;
                        if (! dualDepreciation)
                        {
                            theEnd = true;
                        }
                    }
                }
            }
            else
            {
                assetAmount = 0;
            }
            this.calcRestPeriod(startOfPeriod);
            //  Code added because RB was not updating the assetBook.lifeTimeRest property.
            periods -= restPeriod;
            assetAmount = CurrencyExchangeHelper::amount(assetAmount * this.revaluationFactor());
            // Correction for minimal depreciation
            if (assetAmount < AssetParameters::find().DepreciationMin)
            {
                //  This code branch ensures the accuracy of the original calculated amount.
                if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                {
                    assetAmount = min(AssetParameters::find().DepreciationMin,amountToDepreciate-prevDepAmount-extraordinaryDepAmount);
                }
                else
                {
                    assetAmount = min(AssetParameters::find().DepreciationMin,amountToDepreciate-prevDepAmountPriorYears-prevDepAmountThisYear-extraordinaryDepAmount);
                }
            }
            periodEnd++;
            periodstart = periodEnd;
            periodEnd   = deprInterval.endPeriod(periodstart);
            previousDepreciationDate = depreciationDate;
            if (! prevPeriods)
            {
                assetAmount = assetBook.roundOffDepreciation(assetAmount);
            }
            depreciationThisRun += assetAmount;
            if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
            {
                prevDepAmountThisYear += assetAmount;
            }
        }
        //  This code branch ensures the accuracy of the original calculated amount.
        if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
        {
            if (! prevPeriods &&
                this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount >= amountToDepreciate)
            {
                assetAmount -= this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                prevDepAmount = amountToDepreciate - extraordinaryDepAmount;
                depreciationThisRun = amountToDepreciate - this.prvDepreciationAmount(periodstart) - prevDepAmountExternal - extraordinaryDepAmount;
                theEnd = true;
            }
            else
            {
                if ((assetDepreciationProfile.AssetEndDependOnServiceLife == true) && (periods < 1))
                {
                    if (orgPeriodEnd <= parmRunDate)
                    {
                        assetAmount -= this.prvDepreciationAmount(parmRunDate,true) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                        theEnd = true;
                    }
                }
            }
        }
        else
        {
            if (! prevPeriods &&
                prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount >= amountToDepreciate)
            {
                assetAmount -= prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                theEnd = true;
            }
            else
            {
                if ((assetDepreciationProfile.AssetEndDependOnServiceLife == true) && (periods < 1))
                {
                    if (orgPeriodEnd <= parmRunDate)
                    {
                        assetAmount -= prevDepAmountPriorYears + prevDepAmountThisYear + prevDepAmountExternal + extraordinaryDepAmount - amountToDepreciate;
                        theEnd = true;
                    }
                }
            }
        }

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the amount for the period of inactivity.
    /// </summary>
    /// <param name="_startOfPeriod">
    /// The period start date.
    /// </param>
    protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        super(_startOfPeriod);
        if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            //  The restPeriod may be updated based on the assets depreciation convention or
            //  will be returned unchanged.
            restPeriod = deprConv.calcRestPeriod(restPeriod, periodstart, periods);
        }
        if (calculatePrevPeriods && ! amountToDepreciate)
        {
            prevPeriods += restPeriod;
        }
        else
        {
            calculatePrevPeriods = false;
            //  This code branch ensures the accuracy of the original calculated amount.
            if (!shiftDepreciation)
            {
                if (assetBook.AssetGroupDepreciation_IN == NoYes::No)
                {
                    if (assetBook.DepreciationConvention == AssetDepreciationConvention::None)
                    {
                        assetAmount = CurrencyExchangeHelper::amount(assetAmount * (restPeriod + prevPeriods));
                    }
                    else
                    {
                        assetAmount = deprConv.calcCurrencyAmount(assetAmount, (restPeriod + prevPeriods));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        firstYear = true;
    //  This property is required to get the asset completely depreciatiate based on service life
    //  and must be initialized from the assetBook.LifeTimeRest property and updated based on the
    //  restPeriod value.
        periods  = assetBook.LifeTimeRest;
        prevDepAmount = this.prvDepreciationAmount(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);
        if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            // Construct an asset depreciation convention class.
            deprConv = AssetTableDepConv::newCalcAssetAmount(assetBook, deprInterval, assetDepreciationProfile);
            //  Calculate any depreciations taken the previous years.
            prevDepAmountPriorYears = this.prevDepAmountPriorYears(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);
            if (assetBook.RevaluationGroupId)
            {
                prevDepAmountPriorYears -= assetSumCalc_Trans.depreciationRevaluationValue();
            }
            //  Calculate any depreciations taken this year.
            prevDepAmountThisYear = this.prevDepAmountThisYear(assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if further depreciation has to be done.
    /// </summary>
    /// <returns>
    /// Returns true if further depreciation has to be done.
    /// </returns>
    public boolean next()
    {
        if (theEnd)
        {
            return false;
        }
        if (parmRunDate <= baseDate)
        {
            return false;
        }

        // this is for FA pro-rata
        if (parmRunDate >= periodstart
            && parmRunDate <= periodEnd)
        {
            periodEnd = parmRunDate;
        }

        this.setDepDate();
        //  This prevents depreciations with invalid dates from
        //  being handled.
        if (!depreciationDate
            || depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDepAmountPriorYears</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method caculates the assets total amount of depreciation for all years prior to the current year.
    /// </summary>
    /// <param name="_assetTransDate">
    /// Transaction date
    /// </param>
    /// <returns>
    /// total amount of depreciation for all years prior to the current year.
    /// </returns>
    private AssetAmount prevDepAmountPriorYears(AssetTransDate _assetTransDate)
    {
        AssetSumCalc_Trans  assetSumCalc_Trans_PriorYears;
        AssetTransDate      toDate;
        AssetAmount         retValue;

        //  The depreciation year used for the asset is "Calendar"
        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
        {
            //  Set the to date to the date prior to the begining
            //  of the year for the passed in date.
            //  This date is the last day of the previous year.
            toDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate) - 1;
        }
        else
        {
            //  The depreciation year is either Fiscal-GL Periods or Fiscal-Asset Calendar
            //  Set the to date to the date prior to the begining
            //  of the year for the passed in date.
            //  This date is the last day of the previous year.
            toDate = deprInterval.openingPeriodDate(_assetTransDate) - 1;
        }

        //  Create a period based AssetSumCalc_Trans for the current asset
        //  using the lowest date value dateNull() (01/01/1900) and the
        //  to date as the date range.
        //  This date range represents the earliest transaction date possible to the
        //  last day of the previous year.
        assetSumCalc_Trans_PriorYears = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, dateNull(), toDate);
        //  Create a total for all the asset depreciations and
        //  depreciation adjustments between (including) the two (2) dates.
        retValue = -(assetSumCalc_Trans_PriorYears.depreciationValue()  +
                     assetSumCalc_Trans_PriorYears.depreciationAdjValue());

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevDepAmountThisYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method caculates the assets total amount of depreciation for the current year.
    /// </summary>
    /// <param name="_assetTransDate">
    /// transaction date
    /// </param>
    /// <returns>
    /// total amount of depreciation for the current year.
    /// </returns>
    private AssetAmount prevDepAmountThisYear(AssetTransDate _assetTransDate)
    {
        AssetSumCalc_Trans  assetSumCalc_Trans_ThisYear;
        AssetTransDate      fromDate,
                            toDate;
        AssetAmount         retValue;

        //  The depreciation year used for the asset is "Calendar"
        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
        {
            //  Set the from date to the begining of the year for the passed in date.
            fromDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate);
        }
        else
        {
            //  The depreciation year is either Fiscal-GL Periods or Fiscal-Asset Calendar
            //  Set the from date to the begining of the fiscal year for the passed in date.
            fromDate = deprInterval.openingPeriodDate(_assetTransDate);
        }
        //  Set the to date to the end of the depreciation period for the passed in date.
            toDate = deprInterval.endPeriod(_assetTransDate);
        //  Create a period based AssetSumCalc_Trans for the current asset
        //  using the from date and the to date as the date range.
        //  This date range represents the beginning of this year to the
        //  date the of the next depreciation.
        assetSumCalc_Trans_ThisYear = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, fromDate, toDate);
        //  Create a total for all the asset depreciations and
        //  depreciation adjustments between (including) the two (2) dates.
        retValue = -(assetSumCalc_Trans_ThisYear.depreciationValue() +
                     assetSumCalc_Trans_ThisYear.depreciationAdjValue());

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method caculates the assets total amount of depreciation for the previous year.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The transaction date.
    /// </param>
    /// <param name="_fixedDate">
    /// A boolean value whether depreciation calendar follows the standard asset calendar.
    /// </param>
    /// <returns>
    /// Returns the total amount of depreciation for the previous year.
    /// </returns>
    private AssetAmount prvDepreciationAmount(AssetTransDate _assetTransDate, boolean _fixedDate = false)
    {
        AssetTransDate  depYearStart,
                        depPeriodEnd;
        AssetAmount     prvDepreciationAmount,
                        totalAcqAmount,
                        tmpDepAmount;
        AssetTrans      assetTrans;

        if (! _fixedDate)
        {
            if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
            {
                depYearStart = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate);
                depPeriodEnd = DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _assetTransDate);
            }
            else
            {
                depYearStart = deprInterval.openingPeriodDate(_assetTransDate);
                depPeriodEnd = deprInterval.endingPeriodDate(_assetTransDate);
            }
        }
        else
        {
            depYearStart = _assetTransDate;
        }

        if (assetBook.AssetGroupDepreciation_IN == NoYes::Yes && assetBook.LastDepreciationDate > assetBook.DepreciationStartDate)
        {
            prvDepreciationAmount = -(AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBook.AssetGroup, depYearStart - 1, assetBook.BookId, AssetTransType::Depreciation, assetBook.AssetId) +
                                      AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBook.AssetGroup, depYearStart - 1, assetBook.BookId, AssetTransType::DepreciationAdj, assetBook.AssetId));
            if (prvDepreciationAmount > 0)
            {
                while select AssetGroup, BookId, TransDate, TransType from assetTrans
                    where assetTrans.AssetGroup == assetBook.AssetGroup
                       && assetTrans.BookId == assetBook.BookId
                       && assetTrans.TransDate   < depYearStart - 1
                       && (assetTrans.TransType   == AssetTransType::Acquisition
                       || assetTrans.TransType   == AssetTransType::AcquisitionAdj)
                {
                    if (AssetBook::find(assetTrans.AssetId,assetTrans.BookId).DepreciationStartDate < AssetBook::find(assetTrans.AssetId,assetTrans.BookId).LastDepreciationDate)
                    {
                        totalAcqAmount += AssetGroupTrans_IN::acquisitionAmount(assetTrans.AssetId,depYearStart - 1,assetTrans.BookId);
                    }
                }
                tmpDepAmount = totalAcqAmount * assetBook.depreciationPercentage() / 100;
                if (prvDepreciationAmount != tmpDepAmount)
                {
                    if ((assetBook.LastDepreciationDate - assetBook.DepreciationStartDate + 1) < 180)
                    {
                        if (totalAcqAmount)
                        {
                            prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(assetBook.AssetId,depYearStart - 1,assetBook.BookId))/ totalAcqAmount) *
                                                   tmpDepAmount * (AssetParameters::find().ThresholdPercentage_IN / 100) ;
                        }
                    }
                    else
                    {
                        if (totalAcqAmount)
                        {
                            prvDepreciationAmount = ((AssetGroupTrans_IN::acquisitionAmount(assetBook.AssetId,depYearStart - 1,assetBook.BookId))/ totalAcqAmount) *
                                                       tmpDepAmount;
                        }
                    }
                }
                else
                {
                    if (totalAcqAmount)
                    {
                        prvDepreciationAmount = round(((AssetGroupTrans_IN::acquisitionAmount(assetBook.AssetId,depYearStart - 1,assetBook.BookId))/ totalAcqAmount) * abs(prvDepreciationAmount),1.0);
                    }
                }
            }
        }
        else
        {
            prvDepreciationAmount = -(AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, depPeriodEnd, assetBook.BookId, AssetTransType::Depreciation) +
                                      AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, depPeriodEnd, assetBook.BookId, AssetTransType::DepreciationAdj));
        }

        return prvDepreciationAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>