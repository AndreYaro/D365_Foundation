<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyPostalAddressFormHandlerExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DirPartyPostalAddressFormHandlerExt
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>onCanEditCountryRegionId_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DirPartyPostalAddressFormHandler), delegatestr(DirPartyPostalAddressFormHandler, canEditCountryRegionId_delegate))]
    public static void onCanEditCountryRegionId_delegate(RecId _companyInfoRecId, LogisticsLocationRecId _locationRecId, EventHandlerResult _res)
    {
        if (!_res.hasResult())
        {
            CompanyInfo companyInfo;

            select firstonly RecId, DataArea from companyInfo where companyInfo.RecId == _companyInfoRecId;

            // If party is legal entity and country/region is already filled
            if (companyInfo && LogisticsPostalAddress::findByLocation(_locationRecId).CountryRegionId)
            {
                //Check if posted financial transaction exist
                _res.result(!GeneralJournalEntry::existForLedger(Ledger::primaryLedger(companyInfo.RecId)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onGetEntity_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DirPartyPostalAddressFormHandler), delegatestr(DirPartyPostalAddressFormHandler, getEntity_delegate))]
    public static void onGetEntity_delegate(TableId _callerTableId, Common _callerRecord, EventHandlerResult _res)
    {
        if (!_res.hasResult())
        {
            // A non-null result is expected to be returned by the caller.
            _res.result(0);

            // <GEERU>
            if (tableNum(InventLocation) == _callerRecord.TableId)
            {
                InventLocation inventLocation = _callerRecord;
                _res.result(inventLocation.RecId);
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDefaultLocationRoles_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DirPartyPostalAddressFormHandler), delegatestr(DirPartyPostalAddressFormHandler, defaultLocationRoles_delegate))]
    public static void onDefaultLocationRoles_delegate(TableId _callerTableId, EventHandlerResult _res)
    {
        if (!_res.hasResult())
        {
            // A non-null result is expected to be returned by the caller.
            Map ret = new Map(Types::Int64, Types::String);

            LogisticsLocationRole role = LogisticsLocationRole::findBytype(LogisticsLocationEntityAppUtil::transactionNewAddressDefaultRole(_callerTableId));

            ret.insert(role.RecId, role.Name);
            _res.result(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUpdateTransactionCaller_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DirPartyPostalAddressFormHandler), delegatestr(DirPartyPostalAddressFormHandler, updateTransactionCaller_delegate))]
    public static void onUpdateTransactionCaller_delegate(Common _transaction, LogisticsPostalAddressRecId _postalAddressRecId, Common _transactions, Args _args, EventHandlerResult _res)
    {
        FormDataSource  formDataSource;
        FieldId         postalAddressFieldId;

        postalAddressFieldId = DirPartyPostalAddressFormHandlerExt::initializePostalAddressOnTransaction(_transaction, _args, _postalAddressRecId, _transactions);

        _transaction.modifiedField(postalAddressFieldId);

        if (FormDataUtil::getFormDataSource(_transaction))
        {
            formDataSource = FormDataUtil::getFormDataSource(_transaction);
            formDataSource.rereadReferenceDataSources();
            formDataSource.refresh();
            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                switch (_transaction.TableId)
                {
                    case tableNum(PurchTable):
                        formDataSource.cacheCalculateMethod(tableMethodStr(PurchTable, deliveryCNPJCPFNUM_BR));
                        formDataSource.cacheCalculateMethod(tableMethodStr(PurchTable, deliveryIENum_BR));
                        break;
                }
            }
            // </GBR>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePostalAddressOnTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the postal address on the given source record.
    /// </summary>
    /// <param name = "_transaction">A <c>Common</c> table buffer that contains the current transaction record.</param>
    /// <param name = "_args">The arguments passed by the event handler with the caller information to drive which fields needs to be initialized.</param>
    /// <param name = "_postalAddressRecId">The new value for the postal address field.</param>
    /// <param name = "_transactions">The transaction from the arguments passed by the calling menu item.</param>
    /// <returns>Returns the ID of the initialized field.</returns>
    protected static FieldId initializePostalAddressOnTransaction(Common _transaction, Args _args, LogisticsPostalAddressRecId _postalAddressRecId, Common _transactions)
    {
        FieldId postalAddressFieldId;

        // <GBR>
        LogisticsPostalAddressRecId prevAddressRecId;

        if (BrazilParameters::isEnabled())
        {
            prevAddressRecId = _transaction.(LogisticsLocationEntityAppUtil::transactionPostalAddressFieldId(_transaction.TableId));
        }
        // </GBR>

        //<GEEU>
        if (_args && _args.parmEnumType() == enumNum(LogisticsLocationRoleType))
        {
            postalAddressFieldId = LogisticsLocationEntityAppUtil::transactionPostalAddressFieldId(_transaction.TableId, _args.parmEnum());
            _transaction.(postalAddressFieldId) = _postalAddressRecId;
        }
        else
        {
            //</GEEU>
            postalAddressFieldId = LogisticsLocationEntityAppUtil::transactionPostalAddressFieldId(_transaction.TableId);
            _transaction.(postalAddressFieldId) = _postalAddressRecId;

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                switch (_transaction.TableId)
                {
                    case tableNum(SalesTable):
                    case tableNum(SalesQuotationTable):
                    case tableNum(CustInvoiceTable):
                    case tableNum(PurchTable):
                    case tableNum(PurchReqLine):
                    case tableNum(PurchRFQCaseTable):
                    case tableNum(PurchRFQCaseLine):
                    case tableNum(PurchRFQTable):
                    case tableNum(PurchRFQLine):
                        DirPartyPostalAddressFormHandlerExt::validatePostalAddress_BR(_transaction, prevAddressRecId, _transactions);
                        break;
                }
            }
            // </GBR>
            //<GEEU>
        }
        //</GEEU>

        return postalAddressFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostalAddress_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls Brazilian specific validations for the postal address.
    /// </summary>
    /// <param name="_transaction">
    /// A <c>Common</c> table buffer that contains the current transaction record.
    /// </param>
    /// <param name="_prevAddressRecId">
    /// The <c>LogisticsPostalAddressRecId</c> of the previous addresss.
    /// </param>
    /// <param name="transactions">
    /// The transaction from the arguments passed by the calling menu item.
    /// </param>
    public static void validatePostalAddress_BR(Common _transaction, LogisticsPostalAddressRecId _prevAddressRecId, Common transactions)
    {
        FieldId             transactionAddressFieldId;
        PurchReqLine        purchReqLine;
        PurchRFQCaseTable   purchRFQCaseTable;
        PurchRFQCaseLine    purchRFQCaseLine;
        PurchRFQTable       purchRFQTable;
        PurchRFQLine        purchRFQLine;
        boolean             check = true;

        switch (_transaction.TableId)
        {
            case tableNum(PurchReqLine):
                purchReqLine = transactions;
                check = CFOPValidation_BR::validateDeliveryAddress(purchReqLine.inventDim().inventSite().fiscalEstablishment(), purchReqLine.DeliveryPostalAddress);
                break;

            case tableNum(PurchRFQCaseTable):
                purchRFQCaseTable = transactions;
                check = CFOPValidation_BR::validateDeliveryAddress(InventSite::find(purchRFQCaseTable.InventSiteId).fiscalEstablishment(), purchRFQCaseTable.DeliveryPostalAddress);
                break;

            case tableNum(PurchRFQCaseLine):
                purchRFQCaseLine = transactions;
                check = CFOPValidation_BR::validateDeliveryAddress(purchRFQCaseLine.inventDim().inventSite().fiscalEstablishment(), purchRFQCaseLine.DeliveryPostalAddress);
                break;

            case tableNum(PurchRFQTable):
                purchRFQTable = transactions;
                check = CFOPValidation_BR::validateDeliveryAddress(InventSite::find(purchRFQTable.InventSiteId).fiscalEstablishment(), purchRFQTable.DeliveryPostalAddress);
                break;

            case tableNum(PurchRFQLine):
                purchRFQLine = transactions;
                check = CFOPValidation_BR::validateDeliveryAddress(purchRFQLine.inventDim().inventSite().fiscalEstablishment(), purchRFQLine.DeliveryPostalAddress);
                break;
        }

        transactionAddressFieldId = LogisticsLocationEntityAppUtil::transactionPostalAddressFieldId(_transaction.TableId);

        if (_transaction.validateField(transactionAddressFieldId) && check)
        {
            _transaction.modifiedField(transactionAddressFieldId);
        }
        else
        {
            _transaction.(transactionAddressFieldId) = _prevAddressRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onIsTransactionCommon_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DirPartyPostalAddressFormHandler), delegatestr(DirPartyPostalAddressFormHandler, isTransactionCommon_delegate))]
    public static void onIsTransactionCommon_delegate(TableId _tableId, EventHandlerResult _res)
    {
        switch (_tableId)
        {
            case tableNum(SalesTable):
            case tableNum(SalesLine):
            case tableNum(SalesQuotationTable):
            case tableNum(SalesQuotationLine):
            case tableNum(PurchRFQCaseTable):
            case tableNum(PurchRFQCaseLine):
            case tableNum(PurchRFQTable):
            case tableNum(PurchRFQLine):
            case tableNum(PurchTable):
            case tableNum(PurchLine):
            case tableNum(PurchReqLine):
            case tableNum(ConsignmentReplenishmentOrderHeader):
            case tableNum(ConsignmentReplenishmentOrderLine):
            case tableNum(LedgerJournalTrans):
            case tableNum(VendTrans):
            case tableNum(VendInvoiceInfoTable):
            case tableNum(VendInvoiceInfoLine):
            case tableNum(AgreementHeaderDefault):
            case tableNum(SalesCreateReleaseOrderTableTmp):
            case tableNum(TmpPurchTable):
            case tableNum(CustInvoiceTable):
            case tableNum(SMAServiceOrderTable):
                // <GEEU>
            case tableNum(TransportationDocument):
                // </GEEU>
                // <GEERU>
            case tableNum(SalesParmTable):
            case tableNum(InventTransferTable):
            case tableNum(WMSBillOfLading):
                // </GEERU>
            case tableNum(SMAServiceOrderTable):

            // <GEEU>
            case tableNum(CzCustAdvanceInvoiceTable):
            case tableNum(CzVendAdvanceInvoiceTable):
            case tableNum(RAssetTable):
                _res.result(true);
            // </GEEU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onIsCallerIsLookup_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DirPartyPostalAddressFormHandler), delegatestr(DirPartyPostalAddressFormHandler, isCallerIsLookup_delegate))]
    public static void onIsCallerIsLookup_delegate(str _callerName, EventHandlerResult _res)
    {
        if (_callerName == classStr(LogisticsLocationSelectionLookup))
        {
            _res.result(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onNewWithCallerRecord_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DirPartyPostalAddressFormHandler), delegatestr(DirPartyPostalAddressFormHandler, newWithCallerRecord_delegate))]
    public static void onNewWithCallerRecord_delegate(TableId _tableId, EventHandlerResult _res)
    {
        if (!_res.hasResult())
        {
            DirPartyPostalAddressFormHandler postalAddressForm;

            switch (_tableId)
            {
                case tableNum(SalesTable):
                    postalAddressForm = new DirPartyPostalAddressFormHnd_SalesTable();
                    break;

                case tableNum(SalesLine):
                    postalAddressForm = new DirPartyPostalAddressFormHnd_SalesLine();
                    break;

                case tableNum(CompanyInfo):
                    postalAddressForm = new DirPartyPostalAddressFormHnd_CompanyInfo();
                    break;
            }

            if (postalAddressForm)
            {
                _res.result(postalAddressForm);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValidatePostalAddressHandler_BR</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(DirPartyPostalAddressFormHandler), methodStr(DirPartyPostalAddressFormHandler, validatePostalAddress))]
    /// <summary>
    /// Calls the method <c>DirPartyPostalAddressFormHandler.postValidatePostalAddress_BR</c> and uses its return value
    /// to set the <c>DirPartyPostalAddressFormHandler.validatePostalAddress</c> return value, if Brazilian context is enabled.
    /// </summary>
    /// <param name="_args">
    /// The arguments passed by the event hanlder.
    /// </param>
    public static void postValidatePostalAddressHandler_BR(XppPrePostArgs _args)
    {
        #ISOCountryRegionCodes

        boolean retVal;
        retVal = _args.getReturnValue();

        LogisticsPostalAddress postalAddress = _args.getArg('_postalAddress');

        if (LogisticsAddressCountryRegion::find(postalAddress.CountryRegionId).ISOcode == #isoBR
            && !postalAddress.City)
        {
            retVal = checkFailed("@GlobalAddressBook:CityIsMandatoryForTransactionsInABrazilianLegalEntity");
        }

        _args.setReturnValue(retVal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onGetTransactionEntity</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DirPartyPostalAddressFormHandler), delegatestr(DirPartyPostalAddressFormHandler, getTransactionEntity_Delegate))]
    public static void onGetTransactionEntity(EventHandlerResult _res, Common _common, LogisticsLocationRoleType _roleType = LogisticsLocationRoleType::None)
    {
        SalesTable              salesTable;
        SalesLine               salesLine;
        PurchTable              purchTable;
        SalesQuotationTable     salesQuotationTable;
        SalesQuotationLine      salesQuotationLine;
        LedgerJournalTrans      ledgerJournalTrans;
        VendTrans               vendTrans;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        SalesAgreementHeader    salesAgreementHeader;
        PurchAgreementHeader    purchAgreementHeader;
        SalesCreateReleaseOrderTableTmp salesCreateReleaseOrderTableTmp;
        TmpPurchTable           tmpPurchTable;
        CustInvoiceTable        custInvoiceTable;
        SMAServiceOrderTable    smaServiceOrderTable;
        PurchReqLine            purchReqLine;
        SMAAgreementTable       smaAgreementTable;
        ProjTable               projTable;
        SalesBasket             salesBasket;
        AgreementHeaderDefault  agreementHeaderDefault;
        AgreementHeader         agreementHeader;
        // <GEEU>
        TransportationDocument      transportationDocument;
        CzCustAdvanceInvoiceTable   custAdvanceInvoiceTable;
        CzVendAdvanceInvoiceTable   vendAdvanceInvoiceTable;
        // </GEEU>
        // <GEERU>
        InventTransferTable     inventTransferTable;
        SalesParmTable          salesParmTable;
        WMSBillOfLading         wmsBillOfLading;
        // </GEERU>

        if (!_res.hasResult())
        {
            switch (_common.TableId)
            {
                case tableNum(SalesBasket) :
                    salesBasket = _common;
                    _res.result(CustTable::find(salesBasket.CustAccount));
                    break;

                case tableNum(SalesTable) :
                    salesTable = _common;
                    // <GEERU>
                    switch (_roleType)
                    {
                        case LogisticsLocationRoleType::Lading_W :
                            if (salesTable.salesTable_RU().ConsignorAccount_RU)
                            {
                                _res.result(VendTable::find(salesTable.salesTable_RU().ConsignorAccount_RU));
                            }
                            else
                            {
                                _res.result(CompanyInfo::find());
                            }
                    }
                    // </GEERU>
                    if (!_res.result() && salesTable.ReturnStatus != ReturnStatusHeader::None
                       && !salesTable.returnExistReturnToCustLines())
                    {
                        _res.result(CompanyInfo::find());
                    }
                    else if (!_res.result())
                    {
                        _res.result(CustTable::find(salesTable.CustAccount));
                    }
                    break;

                case tableNum(SalesLine) :
                    salesLine = _common;
                    _res.result(CustTable::find(salesLine.CustAccount));
                    break;

                case tableNum(SalesQuotationTable) :
                    salesQuotationTable = _common;
                    if (salesQuotationTable.CustAccount)
                    {
                        _res.result(CustTable::find(salesQuotationTable.CustAccount));
                    }
                    else
                    {
                        _res.result(smmBusRelTable::find(salesQuotationTable.BusRelAccount));
                    }
                    break;

                case tableNum(SalesQuotationLine) :
                    salesQuotationLine = _common;
                    if (salesQuotationLine.CustAccount)
                    {
                        _res.result(CustTable::find(salesQuotationLine.CustAccount));
                    }
                    else
                    {
                        _res.result(smmBusRelTable::find(salesQuotationLine.salesQuotationTable().BusRelAccount));
                    }
                    break;

                case tableNum(LedgerJournalTrans) :
                    ledgerJournalTrans = _common;
                    if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                    {
                        changecompany(ledgerJournalTrans.Company)
                        {
                            _res.result(VendTable::findByLedgerDimension(ledgerJournalTrans.LedgerDimension));
                        }
                    }
                    break;

                case tableNum(VendTrans) :
                    vendTrans = _common;
                    _res.result(VendTable::find(vendTrans.AccountNum));
                    break;

                case tableNum(SalesAgreementHeader) :
              	    salesAgreementHeader = _common;
                    _res.result(CustTable::findByCompany(CompanyInfo::findRecId(salesAgreementHeader.SellingLegalEntity).DataArea, salesAgreementHeader.CustAccount));
                    break;

                case tableNum(PurchAgreementHeader) :
                    purchAgreementHeader = _common;
                    _res.result(VendTable::findByCompany(CompanyInfo::findRecId(purchAgreementHeader.BuyingLegalEntity).DataArea, purchAgreementHeader.VendAccount));
                    break;

                case tableNum(SalesCreateReleaseOrderTableTmp) :
                    salesCreateReleaseOrderTableTmp = _common;
                    salesAgreementHeader = SalesAgreementHeader::find(salesCreateReleaseOrderTableTmp.AgreementHeader);
                    _res.result((salesAgreementHeader.SellingLegalEntity) ?
                                CustTable::findByCompany(CompanyInfo::findRecId(salesAgreementHeader.SellingLegalEntity).DataArea, salesAgreementHeader.CustAccount)
                              : CustTable::find(salesCreateReleaseOrderTableTmp.CustAccount));
                    break;

                case tableNum(TmpPurchTable) :
                    tmpPurchTable = _common;
                    purchAgreementHeader = PurchAgreementHeader::find(tmpPurchTable.PurchAgreementHeader);
                    _res.result((purchAgreementHeader.BuyingLegalEntity) ?
                                VendTable::findByCompany(CompanyInfo::findRecId(purchAgreementHeader.BuyingLegalEntity).DataArea, purchAgreementHeader.VendAccount)
                              : VendTable::find(tmpPurchTable.OrderAccount));
                    break;

                case tableNum(CustInvoiceTable) :
                    custInvoiceTable = _common;
                    switch (_roleType)
                    {
                        case LogisticsLocationRoleType::Delivery :
                            _res.result(CustTable::find(custInvoiceTable.OrderAccount));
                            break;
                        default :
                            _res.result(CustTable::find(custInvoiceTable.InvoiceAccount));
                            break;
                    }
                    break;

                // <GEEU>
                case tableNum(CzCustAdvanceInvoiceTable) :
                    custAdvanceInvoiceTable = _common;
                    _res.result(CustTable::find(custAdvanceInvoiceTable.InvoiceAccount));
                    break;

                case tableNum(CzVendAdvanceInvoiceTable) :
                    vendAdvanceInvoiceTable = _common;
                    _res.result(VendTable::find(vendAdvanceInvoiceTable.InvoiceAccount));
                    break;
                // </GEEU>

                case tableNum(SMAServiceOrderTable) :
                    smaServiceOrderTable = _common;
                    _res.result(CustTable::find(smaServiceOrderTable.CustAccount));
                    break;

                // Used for service orders from EP during create
                // We retrieve the customer record from this
                case tableNum(SMAAgreementTable):
                    smaAgreementTable = _common;
                    // Get the project id
                    projTable = ProjTable::find(smaAgreementTable.ProjId, false);
                    // Get the customer from project
                    _res.result(CustTable::find(projTable.CustAccount, false));
                    break;

                case tableNum(PurchTable) :
                    purchTable = _common;
                    if (purchTable.PurchaseType == PurchaseType::ReturnItem)
                    {
                        _res.result(VendTable::find(purchTable.OrderAccount));
                    }
                    else
                    {
                        _res.result(CompanyInfo::find());
                    }
                    break;
                // <GEEU>
                case tableNum(TransportationDocument) :
                    transportationDocument = _common;
                    _res.result(transportationDocument.getLoadedPostalAddressLookupRecord());
                    break;
                // </GEEU>

                case tableNum(PurchRFQCaseTable) :
                case tableNum(PurchRFQCaseLine) :
                case tableNum(PurchRFQTable) :
                case tableNum(PurchRFQLine) :
                case tableNum(PurchLine) :
                case tableNum(ConsignmentReplenishmentOrderHeader) :
                case tableNum(ConsignmentReplenishmentOrderLine) :
                case tableNum(VendInvoiceInfoTable) :
                case tableNum(VendInvoiceInfoLine) :
                case tableNum(RAssetTable) :
                    _res.result(CompanyInfo::find());
                    break;

                case tableNum(PurchReqLine) :
                    purchReqLine = _common;
                    _res.result(HcmWorker::find(purchReqLine.Requisitioner));
                    break;

                case tableNum(AgreementHeaderDefault) :
                    agreementHeaderDefault = _common;

                    select RecId from agreementHeader
                                where agreementHeader.RecId == agreementHeaderDefault.AgreementHeader
                            outer join VendAccount, BuyingLegalEntity, PurchNumberSequence from purchAgreementHeader
                                where purchAgreementHeader.RecId == agreementHeader.RecId
                            outer join CustAccount, SellingLegalEntity from salesAgreementHeader
                                where salesAgreementHeader.RecId == agreementHeader.RecId;

                    if (!agreementHeader.RecId && FormDataUtil::getFormDataSource(agreementHeaderDefault))
                    {
                        FormDataSource agreementHeaderDefault_ds = FormDataUtil::getFormDataSource(agreementHeaderDefault);
                        if (!agreementHeader.RecId && agreementHeaderDefault_ds)
                        {
                            AgreementCreateIForm formRunObject = agreementHeaderDefault_ds.formRun() as AgreementCreateIForm;
                            if (formRunObject)
                            {
                                AgreementCreateResult result = formRunObject.getResult();
                                switch (result.parmAgreementHeader().moduleType())
                                {
                                    case ModuleSalesPurch::Purch :
                                        purchAgreementHeader = result.parmAgreementHeader();
                                        break;

                                    case ModuleSalesPurch::Sales :
                                        salesAgreementHeader = result.parmAgreementHeader();
                                        break;
                                }
                            }
                        }
                    }

                    if (purchAgreementHeader.PurchNumberSequence)
                    {
                        _res.result(CompanyInfo::find());
                    }
                    else if (salesAgreementHeader.CustAccount)
                    {
                        _res.result(CustTable::findByCompany(CompanyInfo::findRecId(salesAgreementHeader.SellingLegalEntity).DataArea,
                                                        salesAgreementHeader.CustAccount));
                    }
                    break;

                // <GEERU>
                case tableNum(InventTransferTable) :
                    inventTransferTable = _common;
                    _res.result(inventTransferTable.getTransationEntity_RU(_roleType));
                    break;

                case tableNum(SalesParmTable) :
                    salesParmTable = _common;
                    _res.result(salesParmTable.getTransationEntity_RU(_roleType));
                    break;

                case tableNum(WMSBillOfLading) :
                    wmsBillOfLading = _common;
                    _res.result(wmsBillOfLading.getTransationEntity_RU(_roleType));
                    break;
                // </GEERU>

                default :
                    // Not a transaction that DirPartyPostalAddressForm can handle.
                    _res.result(_common);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>