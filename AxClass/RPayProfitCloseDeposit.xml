<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayProfitCloseDeposit</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayProfitCloseDeposit extends RunBaseBatch implements BatchRetryable
{
    RPayDepositTable        rPayDepositTable;
    FormDataSource          rPayDepositTable_ds;
    int                     numberOfTrans;
    NumberSeq               numberSeq;
    NumberSequenceCode      numberSequenceCode;
    Voucher                 voucherNum;
    LedgerVoucher           ledgerVoucher;
    TransactionTxt          transactionTxt;
    RPayPaymentParameters   rPayPaymentParameters;
    RPayAmount              profitAmount;
    DialogField             payPeriod;
    ReportPeriod_RU         rPayPeriod;
    DialogField             allFor;
    ReportPeriod_RU         allForPeriod;
    DialogField             alarm;
    ReportPeriod_RU         createAlarm;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        rPayPeriod
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBeforPosting</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkBeforPosting()
    {
        if (!rPayPaymentParameters.DepositLedgerDimension)
        {
           throw error("@RUP694");
        }

        if (!rPayPaymentParameters.DepositClosedLedgerDimension)
        {
           throw error("@GLS105945");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMain</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createMain(RPayDepositTable _rPayDepositTable)
    {
        RPayDepositTable rPayDepositTableUpdated;
        ttsbegin;

        rPayDepositTableUpdated = RPayDepositTable::find(_rPayDepositTable.RecId,true);

        if (! rPayDepositTableUpdated || ! rPayDepositTableUpdated.DepositSum)
        {
            throw error("@SYS25907");
        }
        profitAmount = rPayDepositTableUpdated.DepositSum;

        this.newVoucher();

        this.initTransactionTxt(LedgerTransTxt::PayProfitDepositClose_RU);

        this.createTrans();

        rPayDepositTableUpdated.ClosedDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        rPayDepositTableUpdated.PayDepositType     = RPayDepositType::Profit;
        rPayDepositTableUpdated.ProfitVoucher      = voucherNum;
        rPayDepositTableUpdated.ProfitVoucherDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        rPayDepositTableUpdated.update();

        ttscommit;

        info(strfmt("@GLS102573", "@SYS14403", _rPayDepositTable.DepositSum, _rPayDepositTable.getFullEmplName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProfitTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createProfitTrans()
    {
        RPayDepositTable rPayDepositTableLocal, rPayDepositTableCheck;
        int              counter, errorCounter;
        rPayPaymentParameters   = RPayPaymentParameters::find();

        this.checkBeforPosting();
        setprefix("@GLS105946");

        for (rPayDepositTableLocal = rPayDepositTable_ds.getFirst(true) ? rPayDepositTable_ds.getFirst(true) : rPayDepositTable_ds.cursor(); rPayDepositTableLocal; rPayDepositTableLocal = rPayDepositTable_ds.getNext())
        {
            profitAmount = 0;
            counter ++;

            rPayDepositTableCheck = RPayDepositTable::find(rPayDepositTableLocal.RecId);

            if (! rPayDepositTableCheck.Voucher || rPayDepositTableCheck.ClosedDate)
            {
                errorCounter ++;
                continue;
            }
            if (nextyr(nextyr(nextyr(rPayDepositTableLocal.PayPeriod))) > endmth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
            {
                if (Box::yesNo(strfmt("@GLS105948" +'\n'+"@GLS105949"+'\n'+"@GLS105950",
                                     rPayDepositTableLocal.getShortEmplName(),
                                     rPayDepositTableLocal.PayPeriod),
                                     DialogButton::Yes, "@GLS105946", "@GLS105947") == DialogButton::No)
                {
                    continue;
                }
            }
            numberOfTrans++;

            this.createMain(rPayDepositTableLocal);
        }

        if (errorCounter == counter)
        {
            error("@RUP1262");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTrans()
    {
        LedgerBondClient_RU         ledgerBondClient;
        LedgerVoucherObject         ledgerVoucherObject;
        LedgerVoucherTransObject    ledgerVoucherTransObject;

        this.newVoucher();

        this.initTransactionTxt(LedgerTransTxt::PayProfitDepositClose_RU);

        if ( this.initLedgerVoucher())
        {
            ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherNum,
                                                                  DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                  SysModule::Payroll,
                                                                  LedgerTransType::Sales);

            ledgerVoucherObject.parmDocument(rPayDepositTable.PayPeriod, rPayDepositTable.PayDepositNum);
            ledgerVoucher.addVoucher(ledgerVoucherObject);
            ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();

            if (ledgerBondClient)
            {
                ledgerBondClient.addNewLogObject();
            }

            ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(ledgerVoucherObject,
                                                                                LedgerPostingType::PayrollDebitAccount,
                                                                                rPayPaymentParameters.DepositLedgerDimension,
                                                                                CompanyInfoHelper::standardCurrency(),
                                                                                profitAmount,
                                                                                profitAmount,
                                                                                profitAmount);
            ledgerVoucherTransObject.parmSourceTableId(rPayDepositTable.TableId);
            ledgerVoucherTransObject.parmSourceRecId(rPayDepositTable.RecId);
            ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
            ledgerVoucher.addTrans(ledgerVoucherTransObject);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(ledgerVoucherObject,
                                                                                LedgerPostingType::PayrollCreditAccount,
                                                                                rPayPaymentParameters.DepositClosedLedgerDimension,
                                                                                CompanyInfoHelper::standardCurrency(),
                                                                                -profitAmount,
                                                                                -profitAmount,
                                                                                -profitAmount);
            ledgerVoucherTransObject.parmSourceTableId(rPayDepositTable.TableId);
            ledgerVoucherTransObject.parmSourceRecId(rPayDepositTable.RecId);
            ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
            ledgerVoucher.addTrans(ledgerVoucherTransObject);

            if (ledgerBondClient)
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
                ledgerBondClient.removeCurrentLogObject();
            }
        }

        ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();

        payPeriod   = dialog.addField(extendedTypeStr(ReportPeriod_RU),"@GLS105981");
        payPeriod.value(rPayPeriod);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        rPayPeriod = endmth(payPeriod.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean  initLedgerVoucher()
    {
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     SysModule::Payroll,
                                                     numberSeq.parmNumberSequenceCode());
        if (!ledgerVoucher)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionTxt</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void  initTransactionTxt(LedgerTransTxt  ledgerTransTxt)
    {
        transactionTxt = TransactionTxt::construct(ledgerTransTxt);
        transactionTxt.setType(ledgerTransTxt);
        transactionTxt.setLanguage(CompanyInfo::languageId());
        transactionTxt.setVoucher(voucherNum);
        transactionTxt.setFormLetter(rPayDepositTable.getShortEmplName());
        transactionTxt.setKey1(rPayDepositTable.PayDepositNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(RPayDepositTable _rPayDepositTable = null,FormDataSource _rPayDepositTable_ds = null )
    {
        super();

        rPayDepositTable    = _rPayDepositTable;
        rPayDepositTable_ds = _rPayDepositTable_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void  newVoucher()
    {
        numberSeq = NumberSeq::newGetVoucher(RPayParameters::numRefDepositVoucher(),true);
        if (numberSeq)
        {
            voucherNum = numberSeq.voucher();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int numberOfTrans()
    {
        return numberOfTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version        = conpeek(packedClass,1);
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS105946";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayDepositTable        rPayDepositTable;
        Object                  rPayDepositTable_ds;
        RPayProfitCloseDeposit  rPayProfitCloseDeposit;
        if (args.dataset() == tablenum(RPayDepositTable))
        {
            rPayDepositTable    = args.record();
            rPayDepositTable_ds = FormDataUtil::getFormDataSource(rPayDepositTable);

            rPayProfitCloseDeposit = new RPayProfitCloseDeposit(args.record(),FormDataUtil::getFormDataSource(args.record()));
            rPayProfitCloseDeposit.createProfitTrans();

            if (rPayDepositTable && rPayDepositTable_ds)
            {
                if (rPayProfitCloseDeposit.numberOfTrans()>1)
                {
                    rPayDepositTable_ds.executeQuery();
                }
                else
                {
                    rPayDepositTable_ds.active();
                }
            }
        }
        else
        {
            rPayProfitCloseDeposit = new RPayProfitCloseDeposit_Group();
            if (rPayProfitCloseDeposit.prompt())
            {
                rPayProfitCloseDeposit.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>