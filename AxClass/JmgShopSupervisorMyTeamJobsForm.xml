<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgShopSupervisorMyTeamJobsForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that implements the logic for manipulation of jobs in the <c>JmgShopSupervisorMyTeamJobs</c> form
/// </summary>
public class JmgShopSupervisorMyTeamJobsForm
{
    private boolean initialized;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initialized = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>JmgShopSupervisorMyTeamJobsForm</c> class
    /// </summary>
    /// <returns>
    /// The initialized instance
    /// </returns>
    public static JmgShopSupervisorMyTeamJobsForm construct()
    {
        JmgShopSupervisorMyTeamJobsForm shopSupervisorMyTeamJobsForm = new JmgShopSupervisorMyTeamJobsForm();
        return shopSupervisorMyTeamJobsForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves up a selected set of jobs in the list
    /// </summary>
    /// <param name = "_jobQuery">
    /// Query representing the entire set of jobs
    /// </param>
    /// <param name = "_selectedJobs">
    /// The selected jobs to be moved up
    /// </param>
    /// <param name = "_jobInTargetPosition">
    /// The job currently in the position where the first of the selected jobs should be placed
    /// </param>
    public void moveUp(Query _jobQuery, Set _selectedJobs, JmgProdJobListView _jobInTargetPosition)
    {
        int targetPosition = this.initializeJobSequence(_jobQuery, _jobInTargetPosition);

        this.moveUpJobs(_jobQuery, _selectedJobs, targetPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUpJobs</Name>
				<Source><![CDATA[
    private void moveUpJobs(Query _jobQuery, Set _selectedJobs, int _targetPos, boolean _setHighPriority = false)
    {
        int numJobsToMove = _selectedJobs.elements();

        if (numJobsToMove > 0)
        {
            int moveUpBucketPos   = _targetPos;
            int moveDownBucketPos = _targetPos + numJobsToMove;

            JmgTmpJobTable moveUpBucket, moveDownBucket;

            Query q = new Query(_jobQuery);
            QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(q, tableNum(JmgProdJobListView));
            QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(JmgProdJobListView, PriorityResource));
            qbr.value((strFmt('(%1>=%2)',fieldStr(JmgProdJobListView, PriorityResource),SysQuery::value(_targetPos))));
            QueryRun qr = new QueryRun(q);

            while (qr.next())
            {
                JmgProdJobListView job = qr.get(tableNum(JmgProdJobListView));
                if (_selectedJobs.in(job.JobId))
                {
                    moveUpBucket.JobId = job.JobId;
                    moveUpBucket.PriorityResource = moveUpBucketPos;
                    moveUpBucket.doInsert();
                    moveUpBucketPos++;
                    numJobsToMove--;

                    if (numJobsToMove <= 0)
                    {
                        break;
                    }
                }
                else
                {
                    moveDownBucket.JobId = job.JobId;
                    moveDownBucket.PriorityResource = moveDownBucketPos;
                    moveDownBucket.doInsert();
                    moveDownBucketPos++;
                }
            }

            if (numJobsToMove > 0)
            {
                Box::stop("@SCM:JmgCannotMoveJob");
                return;
            }

            JmgJobTable jobTable;

            this.updateSequence(moveDownBucket, jobTable);
            if (_setHighPriority)
            {
                this.updateSequenceAndSetPriority(moveUpBucket, jobTable);
                WrkCtrCapRes capacityReservation;
                update_recordset capacityReservation
                    setting Locked = NoYes::Yes
                        join moveUpBucket
                        where capacityReservation.JobId == moveUpBucket.JobId
                        && capacityReservation.Locked   == NoYes::No;
            }
            else
            {
                this.updateSequence(moveUpBucket, jobTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves down a selected set of jobs in the list
    /// </summary>
    /// <param name = "_jobQuery">
    /// Query representing the entire set of jobs
    /// </param>
    /// <param name = "_selectedJobs">
    /// The selected jobs to be moved down
    /// </param>
    /// <param name = "_jobInTargetPosition">
    /// The job currently in the position where the first of the selected jobs should be placed
    /// </param>
    public void moveDown(Query _jobQuery, Set _selectedJobs, JmgProdJobListView _jobInTargetPosition)
    {
        int targetPosition = this.initializeJobSequence(_jobQuery, _jobInTargetPosition);

        int numJobsToMove = _selectedJobs.elements();
        if (numJobsToMove > 0)
        {
            int moveDownBucketPos = targetPosition;
            int moveUpBucketPos = targetPosition - numJobsToMove;

            JmgTmpJobTable moveUpBucket, moveDownBucket;

            Query q = new Query(_jobQuery);
            QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(q, tableNum(JmgProdJobListView));
            QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(JmgProdJobListView, PriorityResource));
            qbr.value((strFmt('(%1<=%2)',fieldStr(JmgProdJobListView, PriorityResource),SysQuery::value(targetPosition))));
            qbds.sortDirection(SysQuery::findSortingNo_W(qbds, fieldNum(JmgProdJobListView, PriorityResource)), SortOrder::Descending);
            qbds.sortDirection(SysQuery::findSortingNo_W(qbds, fieldNum(JmgProdJobListView, FromDateTime)), SortOrder::Descending);

            QueryRun qr = new QueryRun(q);

            while (qr.next())
            {
                JmgProdJobListView job = qr.get(tableNum(JmgProdJobListView));

                if (_selectedJobs.in(job.JobId))
                {
                    moveDownBucket.JobId = job.JobId;
                    moveDownBucket.PriorityResource = moveDownBucketPos;
                    moveDownBucket.doInsert();
                    moveDownBucketPos--;
                    numJobsToMove--;

                    if (numJobsToMove <= 0)
                    {
                        break;
                    }
                }
                else
                {
                    moveUpBucket.JobId = job.JobId;
                    moveUpBucket.PriorityResource = moveUpBucketPos;
                    moveUpBucket.doInsert();
                    moveUpBucketPos--;
                }
            }

            if (numJobsToMove > 0)
            {
                Box::stop("@SCM:JmgCannotMoveJob");
                return;
            }

            JmgJobTable jobTable;
            this.updateSequence(moveUpBucket,   jobTable);
            this.updateSequence(moveDownBucket, jobTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHighPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the high priority flag on a selected set of jobs and puts them on top of the list
    /// </summary>
    /// <param name = "_jobQuery">
    /// Query representing the entire set of jobs
    /// </param>
    /// <param name = "_selectedJobs">
    /// The selected jobs to be marked as high priority
    /// </param>
    public void setHighPriority(Query _jobQuery, Set _selectedJobs)
    {
        this.initializeJobSequence(_jobQuery);

        QueryRun qr = new QueryRun(_jobQuery);
        qr.next();
        JmgProdJobListView firstJob = qr.get(tableNum(JmgProdJobListView));

        this.moveUpJobs(_jobQuery, _selectedJobs, firstJob.PriorityResource, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeHighPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the high priority flag from a selected set of jobs
    /// </summary>
    /// <param name = "_jobQuery">
    /// Query representing the entire set of jobs
    /// </param>
    /// <param name = "_selectedJobs">
    /// The selected jobs from which high priority flag should be removed
    /// </param>
    public void removeHighPriority(Query _jobQuery, Set _selectedJobs)
    {
        this.initializeJobSequence(_jobQuery);

        int numJobsToMove = _selectedJobs.elements();
        if (numJobsToMove > 0)
        {
            JmgTmpJobTable priorityJobTable;
            SetEnumerator selectedJobEnumerator = _selectedJobs.getEnumerator();

            while (selectedJobEnumerator.moveNext())
            {
                priorityJobTable.JobId = selectedJobEnumerator.current();
                priorityJobTable.doInsert();
                numJobsToMove--;
            }

            if (numJobsToMove > 0)
            {
                Box::stop("@SCM:JmgCannotMoveJob");
                return;
            }

            JmgJobTable jobTable;

            ttsbegin;
            jobTable.skipDataMethods(true);
            update_recordset jobTable
                setting Locked = NoYes::No
                join priorityJobTable
                where jobTable.JobId == priorityJobTable.JobId;
            jobTable.skipDataMethods(false);

            WrkCtrCapRes capacityReservation;
            update_recordset capacityReservation
                setting Locked = NoYes::No
                join priorityJobTable
                where capacityReservation.JobId == priorityJobTable.JobId
                && capacityReservation.Locked   == NoYes::Yes;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reassigns selected set of jobs to another resource
    /// </summary>
    /// <param name = "_jobQuery">
    /// Query representing the entire set of jobs
    /// </param>
    /// <param name = "_selectedJobs">
    /// The selected jobs that should be reassigned
    /// </param>
    /// <param name = "_moveToResource">
    /// The resource that the job should be reassigned to
    /// </param>
    public void assignResource(Query _jobQuery, Set _selectedJobs, WrkCtrId _moveToResource)
    {
        this.initializeJobSequence(_jobQuery);

        SetEnumerator jobEnumerator = _selectedJobs.getEnumerator();
        int numJobsToMove = _selectedJobs.elements();

        JmgProdJobListView lastJobForResource;

        select PriorityResource from lastJobForResource
            order by PriorityResource desc
            where lastJobForResource.WrkCtrId == _moveToResource
               && lastJobForResource.JobStatus != JmgJobStatus::Completed;

        int maxPriority = lastJobForResource.PriorityResource;

        JmgTmpJobTable jobTmpBuffer;

        while (jobEnumerator.moveNext())
        {
            JmgProdJobListView job = jobEnumerator.current();
            jobTmpBuffer.JobId = job.JobId;
            jobTmpBuffer.ModuleRefId = job.ModuleRefId;
            jobTmpBuffer.OprNum = job.OprNum;
            jobTmpBuffer.Priority = job.Priority;
            jobTmpBuffer.WrkCtrId = _moveToResource;
            jobTmpBuffer.PriorityResource = maxPriority;
            jobTmpBuffer.doInsert();

            maxPriority++;
            numJobsToMove--;
        }

        if (numJobsToMove > 0)
        {
            Box::stop("@SCM:JmgCannotMoveSingleJob");
            return;
        }

        JmgJobTable jobsInSameOperation;

        while select jobsInSameOperation
            join jobTmpBuffer
            where jobsInSameOperation.ModuleRefId == jobTmpBuffer.ModuleRefId
               && jobsInSameOperation.OprNum      == jobTmpBuffer.OprNum
               && jobsInSameOperation.Priority    == jobTmpBuffer.Priority
               && jobsInSameOperation.JobId       != jobTmpBuffer.JobId
        {
            jobTmpBuffer.JobId = jobsInSameOperation.JobId;
            jobTmpBuffer.WrkCtrId = _moveToResource;
            jobTmpBuffer.PriorityResource = maxPriority;
            jobTmpBuffer.doInsert();

            maxPriority++;
        }

        JmgJobTable jobTable;
        update_recordset jobTable
            setting WrkCtrId         = _moveToResource,
                    PriorityResource = jobTmpBuffer.PriorityResource
            join jobTmpBuffer
            where jobTmpBuffer.JobId == jobTable.JobId;

        WrkCtrCapRes capacityReservation;
        update_recordset capacityReservation
            setting WrkCtrId = _moveToResource
            join jobTmpBuffer
            where capacityReservation.JobId    == jobTmpBuffer.JobId
               && capacityReservation.WrkCtrId != _moveToResource;

        ProdRouteJob prodRouteJob;
        update_recordset prodRouteJob
            setting WrkCtrId = _moveToResource
            join jobTmpBuffer
            where prodRouteJob.JobId    == jobTmpBuffer.JobId
               && prodRouteJob.WrkCtrId != _moveToResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJobSequence</Name>
				<Source><![CDATA[
    private int initializeJobSequence(Query _jobListQuery, JmgProdJobListView _jobInTargetPosition = null)
    {
        int newTargetPosition;

        if (this.initialized)
        {
            return _jobInTargetPosition.PriorityResource;
        }

        QueryRun jobListQueryRun = new QueryRun(_jobListQuery);
        int jobSequence = 1;

        JmgTmpJobTable jobTmpBuffer;
        RecordInsertList jobBufferImportList = new RecordInsertList(tablenum(JmgTmpJobTable), true, true, true, true, true, jobTmpBuffer);

        while (jobListQueryRun.next())
        {
            JmgProdJobListView jobListView = jobListQueryRun.get(tableNum(JmgProdJobListView));

            if (jobListView.JobId == _jobInTargetPosition.JobId)
            {
                newTargetPosition = jobSequence;
            }
            jobTmpBuffer.JobId = jobListView.JobId;
            jobTmpBuffer.PriorityResource = jobSequence;
            jobBufferImportList.add(jobTmpBuffer);

            jobSequence++;
        }
        jobBufferImportList.insertDatabase();

        JmgJobTable jobTable;
        ttsbegin;
        jobTable.skipDataMethods(true);
        update_recordset jobTable
            setting PriorityResource = jobTmpBuffer.PriorityResource
            join jobTmpBuffer
            where jobTmpBuffer.JobId == jobTable.JobId;
        jobTable.skipDataMethods(false);
        ttscommit;

        this.initialized = true;

        return newTargetPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSequence</Name>
				<Source><![CDATA[
    private void updateSequence(JmgTmpJobTable _fromBuffer, JmgJobTable _toBuffer)
    {
        ttsbegin;

        _toBuffer.skipDataMethods(true);
        update_recordset _toBuffer
            setting PriorityResource = _fromBuffer.PriorityResource
            join _fromBuffer
            where _toBuffer.JobId == _fromBuffer.JobId;
        _toBuffer.skipDataMethods(false);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSequenceAndSetPriority</Name>
				<Source><![CDATA[
    private void updateSequenceAndSetPriority(JmgTmpJobTable _fromBuffer, JmgJobTable _toBuffer)
    {
        ttsbegin;

        _toBuffer.skipDataMethods(true);
        update_recordset _toBuffer
            setting PriorityResource = _fromBuffer.PriorityResource,
                    Locked           = NoYes::Yes
            join _fromBuffer
            where _toBuffer.JobId == _fromBuffer.JobId;
        _toBuffer.skipDataMethods(false);

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>