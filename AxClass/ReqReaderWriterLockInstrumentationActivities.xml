<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqReaderWriterLockInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// ReqReaderWriterLock instrumentation activities.
/// </summary>
internal final class ReqReaderWriterLockInstrumentationActivities
{
    public const str ReqReaderWriterLockprefix = 'ReqReaderWriterLock.';

    public const str EnterInternal = 'EnterInternal';
    public const str ExitLock = 'ExitLock';
    public const str ReleaseAllLocks = 'ReleaseAllLocks';
    public const str GetLockStatusUserConnection = 'GetLockStatusUserConnection';
    private const str SetOwner = 'SetOwner';
    private const str ReacquireLock = 'ReacquireLock';
    private const str CheckIfConnectionStillAlive = 'CheckIfConnectionStillAlive';
    private const str EnsureStillHasUpdateLock = 'EnsureStillHasUpdateLock';

    private const str CustomPropertyHashedLockName = 'hashedLockName';
    private const str CustomPropertyLockMode = 'lockMode';
    private const str CustomPropertyTimeout = 'timeOut';
    private const str CustomPropertyUseUserConnection = 'useUserConnection';
    private const str CustomPropertyRemoveConnection = 'removeConnection';
    private const str CustomPropertyLockAcquired = 'lockAcquired';
    private const str CustomPropertyOwnerId = 'ownerId';

    private ReqInstrumentationLogger logger;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(ReqInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    public static ReqReaderWriterLockInstrumentationActivities newFromLogger(ReqInstrumentationLogger _logger)
    {
        return new ReqReaderWriterLockInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterInternal</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext enterInternal(str _lockName, ReqAppLockMode _lockMode, int _timeOut, boolean _useUserConnection, ReqReaderWriterLockOwnerId _ownerId)
    {
        SysInstrumentationActivity activity = logger.activity(ReqReaderWriterLockprefix + EnterInternal);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        // _lockName must be hashed because it can contain customer content, which is not allowed in telemetry
        activityContext.addCustomProperty(CustomPropertyHashedLockName, this.hashString(_lockName));
        activityContext.addCustomProperty(CustomPropertyLockMode, this.lockModeToStr(_lockMode));
        activityContext.addCustomProperty(CustomPropertyTimeout, int2str(_timeOut));
        activityContext.addCustomProperty(CustomPropertyUseUserConnection, any2Str(_useUserConnection));
        activityContext.addCustomProperty(CustomPropertyOwnerId, guid2Str(_ownerId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exit</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext exit(str _lockName, ReqReaderWriterLockOwnerId _ownerId)
    {
        SysInstrumentationActivity activity = logger.activity(ReqReaderWriterLockprefix + ExitLock);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        // _lockName must be hashed because it can contain customer content, which is not allowed in telemetry
        activityContext.addCustomProperty(CustomPropertyHashedLockName, this.hashString(_lockName));
        activityContext.addCustomProperty(CustomPropertyOwnerId, guid2Str(_ownerId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseAllLocks</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext releaseAllLocks(ReqReaderWriterLockOwnerId _ownerId)
    {
        SysInstrumentationActivity activity = logger.activity(ReqReaderWriterLockprefix + ReleaseAllLocks);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        activityContext.addCustomProperty(CustomPropertyOwnerId, guid2Str(_ownerId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enteredInternal</Name>
				<Source><![CDATA[
    public void enteredInternal(SysInstrumentationActivityContext _activityContext, boolean _lockAcquired)
    {
        _activityContext.addCustomProperty(CustomPropertyLockAcquired, int2Str(_lockAcquired));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOwner</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext setOwner(str _lockName, ReqAppLockMode _lockMode, ReqReaderWriterLockOwnerId _ownerId)
    {
        SysInstrumentationActivity activity = logger.activity(ReqReaderWriterLockprefix + SetOwner);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        // _lockName must be hashed because it can contain customer content, which is not allowed in telemetry
        activityContext.addCustomProperty(CustomPropertyHashedLockName, this.hashString(_lockName));
        activityContext.addCustomProperty(CustomPropertyLockMode, this.lockModeToStr(_lockMode));
        activityContext.addCustomProperty(CustomPropertyOwnerId, guid2Str(_ownerId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reacquireLock</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext reacquireLock(str _lockName, ReqAppLockMode _lockMode, ReqReaderWriterLockOwnerId _ownerId)
    {
        SysInstrumentationActivity activity = logger.activity(ReqReaderWriterLockprefix + ReacquireLock);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        // _lockName must be hashed because it can contain customer content, which is not allowed in telemetry
        activityContext.addCustomProperty(CustomPropertyHashedLockName, this.hashString(_lockName));
        activityContext.addCustomProperty(CustomPropertyLockMode, this.lockModeToStr(_lockMode));
        activityContext.addCustomProperty(CustomPropertyOwnerId, guid2Str(_ownerId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureStillHasUpdateLock</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext ensureStillHasUpdateLock(str _lockName)
    {
        SysInstrumentationActivity activity = logger.activity(ReqReaderWriterLockprefix + EnsureStillHasUpdateLock);
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);

        // _lockName must be hashed because it can contain customer content, which is not allowed in telemetry
        activityContext.addCustomProperty(CustomPropertyHashedLockName, this.hashString(_lockName));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfConnectionStillAlive</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext checkIfConnectionStillAlive()
    {
        SysInstrumentationActivity activity = logger.activity(ReqReaderWriterLockprefix + CheckIfConnectionStillAlive);
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashString</Name>
				<Source><![CDATA[
    private str hashString(str _input)
    {
        System.String systemStringInput = _input;
        str hashedInput = systemStringInput.GetHashCode().ToString();
        return hashedInput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockModeToStr</Name>
				<Source><![CDATA[
    private str lockModeToStr(ReqAppLockMode _lockMode)
    {
        return enum2Symbol(enumNum(ReqAppLockMode), _lockMode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>