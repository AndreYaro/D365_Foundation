<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryOnhandReportService</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInventoryOnhandReportService extends SysOperationServiceBase
{
    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    internal WHSInventoryOnhandReport createReport(WHSInventoryOnhandReportContract _contract)
    {
        #OCCRetryCount

        if (!_contract)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        BatchHeader batchHeader = this.getCurrentBatchHeader();
        if (batchHeader)
        {
            SysRecurrenceData recurrenceData = batchHeader.parmRecurrenceData();
            if (SysRecurrence::getRecurrenceUnit(recurrenceData) == SysRecurrenceUnit::Day)
            {
                _contract.parmAsOfDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - 1);
            }
        }

        WHSInstrumentationLogger instrumentationLogger = this.instrumentationLogger();
        WHSInventoryOnhandReport report;
        int infologLine = infologLine();

        try
        {
            using (var activityContext = instrumentationLogger.inventoryOnhandReportServiceActivities().createReport())
            {
                ttsbegin;
                report = WHSInventoryOnhandReport::create(_contract);
                WHSInventoryOnHandReportViewMetadata onHandReportViewMetadata = WHSInventoryOnHandReportViewMetadataFactory::createWHSInventoryOnHandReportViewMetadataInstance(_contract);

                Query insertQuery = this.buildFullQuery(report, _contract, onHandReportViewMetadata);
                WHSInventoryOnhandReportLine reportLine;
                Query::insert_recordset(reportLine, this.buildTargetToSourceMap(insertQuery, _contract, onHandReportViewMetadata), insertQuery);

                this.postProcessReport(_contract, report);

                instrumentationLogger.inventoryOnhandReportServiceActivities().logCreateReportMetadata(
                    activityContext,
                    report.RecId,
                    reportLine.RowCount());

                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::Error)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::isExceptionErrorCausedBySQLError(infologLine)
                && ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        this.onReportCreated(report);
        
        return report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessReport</Name>
				<Source><![CDATA[
    internal void postProcessReport(WHSInventoryOnhandReportContract _contract, WHSInventoryOnhandReport _report)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReportCreated</Name>
				<Source><![CDATA[
    public void onReportCreated(WHSInventoryOnhandReport _report)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFullQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private Query buildFullQuery(WHSInventoryOnhandReport _report, WHSInventoryOnhandReportContract _contract, WHSInventoryOnHandReportViewMetadata _onHandReportViewMetadata)
    {
        Query query = this.buildQuery(_report, _contract, _onHandReportViewMetadata);

        query.clearAllFields();

        QueryBuildDataSource qbdsReport = query.dataSourceTable(tableNum(WHSInventoryOnhandReport));
        qbdsReport.addGroupByAndSelectionField(fieldNum(WHSInventoryOnhandReport, ReportId));

        QueryBuildDataSource qbdsOnHand = query.dataSourceTable(_onHandReportViewMetadata.tableNumber());
        qbdsOnHand.addSelectionField(_onHandReportViewMetadata.qtyFieldNum(), SelectionField::Sum);
        qbdsOnHand.addGroupByAndSelectionField(_onHandReportViewMetadata.itemIdFieldNum());

        this.addOptionalDimensionsToDataSource(qbdsOnHand, _contract, _onHandReportViewMetadata);

        qbdsOnHand.addRange(_onHandReportViewMetadata.transDateFieldNum()).value(queryRange(_contract.parmAsOfDate() + 1, dateMax()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query buildQuery(WHSInventoryOnhandReport _report, WHSInventoryOnhandReportContract _contract, WHSInventoryOnHandReportViewMetadata _onHandReportViewMetadata)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsReport = query.addDataSource(tableNum(WHSInventoryOnhandReport));
        qbdsReport.addRange(fieldNum(WHSInventoryOnhandReport, RecId)).value(queryValue(_report.RecId));

        QueryBuildDataSource qbdsOnHand = qbdsReport.addDataSource(_onHandReportViewMetadata.tableNumber());
        qbdsOnHand.joinMode(JoinMode::InnerJoin);

        QueryBuildDataSource qbdsInventTable = qbdsOnHand.addDataSource(tableNum(InventTable));
        qbdsInventTable.addLink(_onHandReportViewMetadata.itemIdFieldNum(), fieldNum(InventTable, ItemId));

        Query contractQuery = _contract.parmQuery();
        SysQuery::copyDataSource(contractQuery.dataSourceTable(tableNum(InventTable)), qbdsInventTable);

        int numberOfFilters = contractQuery.queryFilterCount();
        for (int i = 1; i <= numberOfFilters; i++)
        {
            QueryFilter queryFilter = contractQuery.queryFilter(i);

            QueryBuildDataSource qbds = query.dataSourceTable(queryFilter.dataSource().table());
            if (qbds)
            {
                qbds.addRange(fieldName2Id(queryFilter.dataSource().table(), queryFilter.field())).value(queryFilter.value());
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOptionalDimensionsToDataSource</Name>
				<Source><![CDATA[
    private void addOptionalDimensionsToDataSource(QueryBuildDataSource _qbds, WHSInventoryOnhandReportContract _contract, WHSInventoryOnHandReportViewMetadata _onHandReportViewMetadata)
    {
        if (_contract.parmIncludeConfigId())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.configIdFieldNum());
        }
        if (_contract.parmIncludeInventSizeId())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.inventSizeIdFieldNum());
        }
        if (_contract.parmIncludeInventColorId())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.inventColorIdFieldNum());
        }
        if (_contract.parmIncludeInventStyleId())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.inventStyleIdFieldNum());
        }
        if (_contract.parmIncludeInventVersionId())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.inventVersionIdFieldNum());
        }

        if (_contract.parmIncludeInventLocationId())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.inventLocationIdFieldNum());
        }
        if (_contract.parmIncludeLocationId())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.wMSLocationIdFieldNum());
        }
        if (_contract.parmIncludeInventStatusId())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.inventStatusIdFieldNum());
        }
        if (_contract.parmIncludeInventBatchId())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.inventBatchIdFieldNum());
        }
        if (_contract.parmIncludeInventSerialId())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.inventSerialIdFieldNum());
        }
        if (_contract.parmIncludeInventGTDId_RU())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.inventGtdId_RUFieldNum());
        }
        if (_contract.parmIncludeInventOwnerId())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.inventOwnerId_RUFieldNum());
        }
        if (_contract.parmIncludeInventProfileId_RU())
        {
            _qbds.addGroupByAndSelectionField(_onHandReportViewMetadata.inventProfileId_RUFieldNum());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTargetToSourceMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private Map buildTargetToSourceMap(Query _query, WHSInventoryOnhandReportContract _contract, WHSInventoryOnHandReportViewMetadata _onHandReportViewMetadata)
    {
        Map map = new Map(Types::String, Types::Container);

        int uniqueId = _query.dataSourceTable(tableNum(WHSInventoryOnhandReport)).uniqueId();
        map.insert(fieldStr(WHSInventoryOnhandReportLine, ReportId), [uniqueId, fieldStr(WHSInventoryOnhandReport, ReportId)]);

        uniqueId = _query.dataSourceTable(_onHandReportViewMetadata.tableNumber()).uniqueId();
        map.insert(fieldStr(WHSInventoryOnhandReportLine, OnHandQuantity), [uniqueId, 'SUM(' + _onHandReportViewMetadata.qtyFieldName() + ')']);

        map.insert(fieldStr(WHSInventoryOnhandReportLine, ItemId), [uniqueId, _onHandReportViewMetadata.itemIdFieldName()]);

        this.addOptionalDimensionsToMap(map, uniqueId, _contract, _onHandReportViewMetadata);

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOptionalDimensionsToMap</Name>
				<Source><![CDATA[
    private void addOptionalDimensionsToMap(Map _map, int _uniqueId, WHSInventoryOnhandReportContract _contract, WHSInventoryOnHandReportViewMetadata _onHandReportViewMetadata)
    {
        if (_contract.parmIncludeConfigId())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, ProductConfigurationId), [_uniqueId, _onHandReportViewMetadata.configIdFieldName()]);
        }
        if (_contract.parmIncludeInventSizeId())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, ProductSizeId), [_uniqueId,  _onHandReportViewMetadata.inventSizeIdFieldName()]);
        }
        if (_contract.parmIncludeInventColorId())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, ProductColorId), [_uniqueId,  _onHandReportViewMetadata.inventColorIdFieldName()]);
        }
        if (_contract.parmIncludeInventStyleId())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, ProductStyleId), [_uniqueId,  _onHandReportViewMetadata.inventStyleIdFieldName()]);
        }
        if (_contract.parmIncludeInventVersionId())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, ProductVersionId), [_uniqueId,  _onHandReportViewMetadata.inventVersionIdFieldName()]);
        }

        if (_contract.parmIncludeInventLocationId())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, WarehouseId), [_uniqueId,  _onHandReportViewMetadata.inventLocationIdFieldName()]);
        }
        if (_contract.parmIncludeLocationId())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, WarehouseLocationId), [_uniqueId, _onHandReportViewMetadata.wMSLocationIdFieldName()]);
        }

        if (_contract.parmIncludeInventStatusId())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, InventoryStatusId), [_uniqueId, _onHandReportViewMetadata.inventStatusIdFieldName()]);
        }
        if (_contract.parmIncludeInventBatchId())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, ItemBatchNumber), [_uniqueId,  _onHandReportViewMetadata.inventBatchIdFieldName()]);
        }
        if (_contract.parmIncludeInventSerialId())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, ItemSerialNumber), [_uniqueId, _onHandReportViewMetadata.inventSerialIdFieldName()]);
        }
        if (_contract.parmIncludeInventGTDId_RU())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, InventoryGtdId), [_uniqueId, _onHandReportViewMetadata.inventGtdId_RUFieldName()]);
        }
        if (_contract.parmIncludeInventOwnerId())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, InventoryOwnerId), [_uniqueId, _onHandReportViewMetadata.inventOwnerId_RUFieldName()]);
        }
        if (_contract.parmIncludeInventProfileId_RU())
        {
            _map.insert(fieldStr(WHSInventoryOnhandReportLine, InventoryProfileId), [_uniqueId, _onHandReportViewMetadata.inventProfileId_RUFieldName()]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSInventoryOnhandReportService construct()
    {
        return new WHSInventoryOnhandReportService();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>