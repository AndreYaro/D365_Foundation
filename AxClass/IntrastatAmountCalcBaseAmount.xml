<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatAmountCalcBaseAmount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates Intrastat amounts using <c>IntrastatAmountCalcMethod::BaseAmount</c> calculation method.
/// </summary>
[IntrastatAmountCalcAttribute(IntrastatAmountCalcMethod::BaseAmount)]
class IntrastatAmountCalcBaseAmount extends IntrastatAmountCalc
{
    boolean isTransactionCurrencyAmountCalculated;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcInvoiceAccountingAmount</Name>
				<Source><![CDATA[
    protected AmountMST calcInvoiceAccountingAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
        AmountCur transactionAmount;
        AmountMST amount;

        if (isTransactionCurrencyAmountCalculated)
        {
            transactionAmount = this.parmTransactionCurrencyAmount();
            isTransactionCurrencyAmountCalculated = false;
        }
        else
        {
            transactionAmount = this.calcInvoiceTransactionAmount(_headerSource, _lineSource);
        }

        if (calcByExchType)
        {
            amount = this.calcByExchType(transactionAmount, _lineSource);
        }
        else
        {
            amount = CurrencyExchangeHelper::mstAmount(transactionAmount,
                                                      _headerSource.CurrencyCode,
                                                      _headerSource.InvoiceDate,
                                                      Currency::noYes2UnknownNoYes(_headerSource.Triangulation),
                                                      _headerSource.ExchRate,
                                                      _headerSource.ExchRateSecondary);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceTransactionAmount</Name>
				<Source><![CDATA[
    protected AmountCur calcInvoiceTransactionAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
        Percent                 cashDiscPercent;
        ProjInvoiceItem         projInvoiceItem;
        ProjInvoiceItemDetail   projInvoiceItemDetail;
        Price                   price;
        AmountCur               amount;

        if (_lineSource.TableId == tableNum(ProjInvoiceItem))
        {
            projInvoiceItem = _lineSource;

            select SalesPrice from projInvoiceItemDetail
                where projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItem.RecId;

            if (projInvoiceItemDetail.SalesPrice)
            {
                price = projInvoiceItemDetail.SalesPrice;
            }
            else
            {
                price = projInvoiceItem.salesPrice();
            }
        }
        else
        {
            price = _lineSource.Price;
        }

        amount = PriceDisc::price2Amount(price,
                                     _lineSource.PriceUnit,
                                     0,
                                     _lineSource.Qty,
                                     _lineSource.Qty,
                                     0,
                                     0,
                                     _lineSource.CurrencyCode,
                                     _lineSource.LineAmount);

        if (_headerSource.TableId != tableNum(ProjInvoiceJour) && _headerSource.InclTax)
        {
            if (TaxParameters::find().TaxLessCashDisc)
            {
                cashDiscPercent = CashDisc::find(_headerSource.CashDiscCode).Percent;
            }

            amount = Tax::baseAmountExclTax(_lineSource.TaxGroup,
                                        _lineSource.TaxItemGroup,
                                        _lineSource.InvoiceDate,
                                        _lineSource.CurrencyCode,
                                        amount,
                                        _headerSource.TableId == tableNum(VendInvoiceJour) ? TaxModuleType::Purch : TaxModuleType::Sales,
                                        _lineSource.Qty,
                                        _lineSource.Unit,
                                        _lineSource.ItemId,
                                        TaxDirection::OutgoingTax,
                                        cashDiscPercent);
        }

        isTransactionCurrencyAmountCalculated = true;

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingSlipAccountingAmount</Name>
				<Source><![CDATA[
    protected AmountMST calcPackingSlipAccountingAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
        AmountCur transactionAmount;
        AmountMST amount;

        if (isTransactionCurrencyAmountCalculated)
        {
            transactionAmount = this.parmTransactionCurrencyAmount();
            isTransactionCurrencyAmountCalculated = false;
        }
        else
        {
            transactionAmount = this.calcPackingSlipTransactionAmount(_headerSource, _lineSource);
        }

        if (calcByExchType)
        {
            amount = this.calcByExchType(transactionAmount, _lineSource);
        }
        else if (transactionCurrency)
        {
            amount = CurrencyExchangeHelper::mstAmount(transactionAmount, transactionCurrency, _headerSource.InvoiceDate);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPackingSlipTransactionAmount</Name>
				<Source><![CDATA[
    protected AmountCur calcPackingSlipTransactionAmount(CustVendInvoiceJour _headerSource, CustVendInvoiceTrans _lineSource)
    {
        SalesPurchLine salesPurchLine;
        AmountCur amount;

        if (_lineSource.TableId == tableNum(CustPackingSlipTrans))
        {
            salesPurchLine = SalesLine::findInventTransId(_lineSource.InventTransId);
        }
        else
        {
            salesPurchLine = PurchLine::findInventTransId(_lineSource.InventTransId);
        }

        if (salesPurchLine)
        {
            SalesPurchLineInterface salesPurchLineInterface = salesPurchLine.salesPurchLineInterface();

            amount = PriceDisc::price2Amount(salesPurchLineInterface.parmPrice(),
                                         _lineSource.PriceUnit,
                                         0,
                                         _lineSource.Qty,
                                         _lineSource.Qty,
                                         0,
                                         0,
                                         salesPurchLineInterface.parmCurrencyCode(),
                                         _lineSource.LineAmount);

            if (salesPurchLineInterface.inclTax())
            {
                amount = salesPurchLineInterface.amountExclTax(amount, _lineSource.Qty, _lineSource.InvoiceDate);
            }
        }

        isTransactionCurrencyAmountCalculated = true;

        return amount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>