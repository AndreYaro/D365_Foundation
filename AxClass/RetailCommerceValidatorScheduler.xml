<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorScheduler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorScheduler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelAllBatchJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel all validation batch jobs in "Executing" status.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <returns>True if a job was canceled, falso otherwise.</returns>
    public static boolean cancelAllBatchJobs(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorBatchJobs retailCommerceValidatorBatchJobs;
        boolean result = false;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;
        // Cancel Batch job.
        BatchJob batchJob;
        RefRecId failedBatchJob = 0;

        try
        {
            ttsbegin;
            while select forupdate retailCommerceValidatorBatchJobs
                where retailCommerceValidatorBatchJobs.ValidationId == _validationId
                   && retailCommerceValidatorBatchJobs.Status == RetailCommerceValidatorExecutionStatus::InProgress
            {
                failedBatchJob = 0;
                batchJob = RetailCommerceValidatorBatchJobs::findBatchJobByRecId(retailCommerceValidatorBatchJobs.BatchJobId, true);

                if (batchJob)
                {
                    switch (batchJob.Status)
                    {
                        case BatchStatus::Executing:
                            batchJob.Status = BatchStatus::Cancelling;
                            ttsbegin;
                            batchJob.update();
                            ttscommit;
                            result = true;
                            break;
                        case BatchStatus::Cancelling:
                            result = true;
                            break;
                    }
                }

                // Update validation batch job status
                retailCommerceValidatorBatchJobs.Status = RetailCommerceValidatorExecutionStatus::Finished;
                retailCommerceValidatorBatchJobs.update();
            }
            ttscommit;
        }
        catch (exception)
        {
            RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorSchedulerCancelBatchJob", retailCommerceValidatorBatchJobs.BatchJobId), xSession::currentRetryCount(), false, exception);
            // save failed batch Job Id
            failedBatchJob = retailCommerceValidatorBatchJobs.BatchJobId;
        }

        // Change status of the eventual failed batch job to not try to cancel it again
        if (failedBatchJob != 0)
        {
            ttsbegin;
            update_recordset retailCommerceValidatorBatchJobs setting Status = RetailCommerceValidatorExecutionStatus::Finished where retailCommerceValidatorBatchJobs.BatchJobId == failedBatchJob;
            ttscommit;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Validation Batch job
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <returns>The batch header instance.</returns>
    public static BatchHeader createBatchJob(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;
        BatchHeader batchHeader;

        try
        {
            ttsbegin;
            // Find validation
            RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId);

            // Create a Batch job for the validation execution.
            batchHeader = BatchHeader::construct();
            batchHeader.parmCaption(strFmt("@Retail:RetailCommerceValidatorBatchheaderCaption" , retailCommerceValidator.ValidationId, retailCommerceValidator.ChannelId));
            batchHeader.saveHeader();

            // Link batch job to Validation
            RetailCommerceValidatorBatchJobs retailCommerceValidatorBatchJobs;
            retailCommerceValidatorBatchJobs.ValidationId = retailCommerceValidator.ValidationId;
            retailCommerceValidatorBatchJobs.BatchJobId = batchHeader.parmBatchHeaderId();
            retailCommerceValidatorBatchJobs.Status = RetailCommerceValidatorExecutionStatus::InProgress;
            retailCommerceValidatorBatchJobs.insert();
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorSchedulerCreateBatchJob", batchHeader.parmBatchHeaderId()), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorSchedulerCreateBatchJob", batchHeader.parmBatchHeaderId()), xSession::currentRetryCount(), true, exception);
                retry;
            }
        }

        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleSetupTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedule all setup tasks for a given validation.
    /// </summary>
    /// <param name = "_validationId">The validationId.</param>
    /// <param name = "_batchHeader">The batch header instance.</param>
    public static void scheduleSetupTasks(RetailCommerceValidatorId _validationId, BatchHeader _batchHeader)
    {
        RetailCommerceValidatorScheduler::scheduleSetupTasksWithAutomatedRun(_validationId, _batchHeader, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleSetupTasksWithAutomatedRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedule all setup tasks for a given validation.
    /// </summary>
    /// <param name = "_validationId">The validationId.</param>
    /// <param name = "_batchHeader">The batch header instance.</param>
    /// <param name = "_isAutomatedRun">A boolean value indicating whether this is automated run.</param>
    public static void scheduleSetupTasksWithAutomatedRun(RetailCommerceValidatorId _validationId, BatchHeader _batchHeader, NoYes _isAutomatedRun = NoYes::No)
    {
        RetailCommerceValidatorParameters retailCommerceValidatorParameters = RetailCommerceValidatorParameters::find();
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorTests retailCommerceValidatorTests;

        boolean isFirstTask = true;
        int64 totalSetupTasks = 0;
        RetailCommerceValidatorBatchTaskRunner previousTask;

        // Create setup tests
        RetailCommerceValidatorTests::createSetupTestsWithAutomatedRun(_validationId, _isAutomatedRun);

        //*************************************************************************************
        //  Telemetry : Validation scheduler start event
        //*************************************************************************************
        if (retailCommerceValidatorParameters.TelemetryLevel == RetailCommerceValidatorTelemetryLevel::Diagnostic)
        {
            RetailCommerceValidatorTelemetry::addValidationSchedulerTelemetry(true, retailCommerceValidator, 0);
        }
        //*************************************************************************************

        // Select all Setup tests from current validation
        while select retailCommerceValidatorTests 
            order by retailCommerceValidatorTests.ValidationId, retailCommerceValidatorTests.Sequence
            where retailCommerceValidatorTests.ValidationId == _validationId
               && retailCommerceValidatorTests.EntityFunction == RetailCommerceValidatorEntityFunction::Setup
               && retailCommerceValidatorTests.ExecutionStatus == RetailCommerceValidatorExecutionStatus::NotStarted
        {
            // Schedule Setup Task
            RetailCommerceValidatorBatchTaskRunner setupRunner = new RetailCommerceValidatorBatchTaskRunner();
            setupRunner.parmValidationId(_validationId);
            setupRunner.parmTestId(retailCommerceValidatorTests.TestId);
            setupRunner.pack();
            BatchInfo batchInfo = setupRunner.batchInfo();
            batchInfo.parmBatchExecute(NoYes::Yes);
            batchInfo.parmGroupId('');
            batchInfo.parmCaption(strFmt('@Retail:RetailCommerceValidatorBatchTaskDynamicDescription', _validationId, retailCommerceValidatorTests.TestId));
            _batchHeader.addTask(setupRunner);

            if (!isfirstTask)
            {
                _batchHeader.addDependency(setupRunner, previousTask, BatchDependencyStatus::Finished);
            }

            // Update loop variables
            previousTask = setupRunner;
            isfirstTask = false;
            totalSetupTasks++;
        }
        
        // Add Test generation Task as a dependency to the last scheduled setup task
        RetailCommerceValidatorBatchTaskScheduler functionalTaskScheduler = new RetailCommerceValidatorBatchTaskScheduler();
        functionalTaskScheduler.parmValidationId(_validationId);
        functionalTaskScheduler.parmIsAutomatedRun(_isAutomatedRun);
        functionalTaskScheduler.pack();
        BatchInfo batchInfo = functionalTaskScheduler.batchInfo();
        batchInfo.parmBatchExecute(NoYes::Yes);
        batchInfo.parmGroupId('');
        batchInfo.parmCaption(strFmt('@Retail:RetailCommerceValidatorFunctionalTaskSchedulerTaskCaption', _validationId));
        _batchHeader.addTask(functionalTaskScheduler);
        _batchHeader.addDependency(functionalTaskScheduler, previousTask, BatchDependencyStatus::Finished);

        // Run batch job
        _batchHeader.save();

        //*************************************************************************************
        //  Telemetry : Validation scheduler stop event
        //*************************************************************************************
        if (retailCommerceValidatorParameters.TelemetryLevel == RetailCommerceValidatorTelemetryLevel::Diagnostic)
        {
            RetailCommerceValidatorTelemetry::addValidationSchedulerTelemetry(false, retailCommerceValidator, totalSetupTasks);
        }
        //*************************************************************************************
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleFunctionalTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedule all functional tasks for a given validation.
    /// </summary>
    /// <param name = "_validationId">The validationId.</param>
    /// <param name = "_batchHeader">The batch header instance.</param>
    public static void scheduleFunctionalTasks(RetailCommerceValidatorId _validationId, BatchHeader _batchHeader)
    {
        RetailCommerceValidatorParameters retailCommerceValidatorParameters = RetailCommerceValidatorParameters::find();
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorTests retailCommerceValidatorTests;
        int64 totalFunctionalTasks = 0;
        RetailCommerceValidatorBatchTaskRunner previousTask;

        // Calculate 'Number of Entity/rules combinations per validation' counter
        int64 entityCombinations = RetailCommerceValidatorEntityTypes::getEntitiesPerRuleCombinationCount(_validationId);
        RetailCommerceValidatorCounters::setCounter("@Retail:RetailCommerceValidatorNumberOfEntityRulesCombinationPerValidation", entityCombinations, retailCommerceValidator.CurrentBatchJobId, retailCommerceValidator.ValidationId, '', '', RetailCommerceValidatorLogType::Total);
        RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfEntityRulesCombination", entityCombinations, 0, '', '', '', RetailCommerceValidatorLogType::Total);

        //*************************************************************************************
        //  Telemetry : Validation scheduler start event
        //*************************************************************************************
        if (retailCommerceValidatorParameters.TelemetryLevel == RetailCommerceValidatorTelemetryLevel::Diagnostic)
        {
            RetailCommerceValidatorTelemetry::addValidationSchedulerTelemetry(true, retailCommerceValidator, 0);
        }
        //*************************************************************************************

        // Create the Validation Finalizer Task
        RetailCommerceValidatorBatchTaskFinalizer BatchTaskFinalizer = new RetailCommerceValidatorBatchTaskFinalizer();
        BatchTaskFinalizer.parmValidationId(_validationId);
        BatchTaskFinalizer.pack();
        BatchInfo batchInfoFinalizer = BatchTaskFinalizer.batchInfo();
        batchInfoFinalizer.parmBatchExecute(NoYes::Yes);
        batchInfoFinalizer.parmGroupId('');
        batchInfoFinalizer.parmCaption(strFmt('@Retail:RetailCommerceValidatorBatchTaskFinalizerDescription', _validationId, retailCommerceValidatorTests.TestId));
        _batchHeader.addTask(BatchTaskFinalizer);

        // Select all Functional tests from current validation
        while select retailCommerceValidatorTests
            order by retailCommerceValidatorTests.ValidationId
            where retailCommerceValidatorTests.ValidationId == _validationId
            && retailCommerceValidatorTests.EntityFunction == RetailCommerceValidatorEntityFunction::Functional
               && retailCommerceValidatorTests.ExecutionStatus == RetailCommerceValidatorExecutionStatus::NotStarted
        {
            // Schedule Functional Tasks
            RetailCommerceValidatorBatchTaskRunner functionalRunner = new RetailCommerceValidatorBatchTaskRunner();
            functionalRunner.parmValidationId(_validationId);
            functionalRunner.parmTestId(retailCommerceValidatorTests.TestId);
            functionalRunner.pack();
            BatchInfo batchInfoLocal = functionalRunner.batchInfo();
            batchInfoLocal.parmBatchExecute(NoYes::Yes);
            batchInfoLocal.parmGroupId('');
            batchInfoLocal.parmCaption(strFmt('@Retail:RetailCommerceValidatorBatchTaskDynamicDescription', _validationId, retailCommerceValidatorTests.TestId));
            _batchHeader.addTask(functionalRunner);
            _batchHeader.addDependency(BatchTaskFinalizer, functionalRunner, BatchDependencyStatus::FinishedOrError);

            // Update loop variables
            previousTask = functionalRunner;
            totalFunctionalTasks++;
        }

        // Run batch job
        _batchHeader.save();

        //*************************************************************************************
        //  Telemetry : Validation scheduler stop event
        //*************************************************************************************
        if (retailCommerceValidatorParameters.TelemetryLevel == RetailCommerceValidatorTelemetryLevel::Diagnostic)
        {
            RetailCommerceValidatorTelemetry::addValidationSchedulerTelemetry(false, retailCommerceValidator, totalFunctionalTasks);
        }
        //*************************************************************************************
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>