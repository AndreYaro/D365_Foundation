<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateMovementValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkCreateMovementValidator</c> class is responsible for validation of warehouse inventory movememnt work creation.
/// </summary>
internal static class WHSWorkCreateMovementValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateNotMovingContainerThatIsPartOfContainerGroup</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void validateNotMovingContainerThatIsPartOfContainerGroup(WHSLicensePlateId _licensePlateId)
    {
        if (   WHSContainerTable::isLicensePlateIdAssociatedToContainer(_licensePlateId)
            && WHSContainerTable::findByContainerId(_licensePlateId).ContainerGroupingLicensePlateId)
        {
            throw error("@WAX:ErrorContainersThatArePartOfContainerGroupCannotBeMovedSeparately");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNotMovingContainerGroupWithOpenContainers</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void validateNotMovingContainerGroupWithOpenContainers(WHSLicensePlateId _licensePlateId)
    {
        if (   WHSContainerTable::isLicensePlateIdUsedForContainerGrouping(_licensePlateId)
            && WHSContainerTable::isThereAnOpenContainerRelatedToContainerGroup(_licensePlateId))
        {
            throw error("@WAX:ErrorContainerGroupWithOpenContainersCannotBeMoved");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateToLicensePlateId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void validateToLicensePlateId(
        InventLocationId _inventLocationId,
        WHSLicensePlateId _toLicensePlateId,
        boolean _isLocationAndLicensePlateConfirmed)
    {
        if (   !_isLocationAndLicensePlateConfirmed
            && WMSLocation::exist(_toLicensePlateId, _inventLocationId))
        {
            throw error(strFmt("@WAX:Error_LicensePlateIdCannotBeSameAsExistingLocationId", _toLicensePlateId));
        }

        if (WHSLicensePlate::isParentLicensePlate(_toLicensePlateId))
        {
            throw error(strFmt("@WAX:Error_LicensePlateIsParent", _toLicensePlateId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateOnMultipleLocations</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void validateLicensePlateOnMultipleLocations(
        InventDim           _fromInventDim,
        WHSLicensePlateId   _toLicensePlateId,
        WMSLocationId       _toLocationId,
        ItemId              _itemId,
        InventQty           _qty,
        UnitOfMeasureSymbol _selectedValueUOM,
        boolean             _isMoveLP)
    {
        if (   _toLicensePlateId
            && _fromInventDim.LicensePlateId
            && _itemId
            && !_isMoveLP
            && _toLicensePlateId == _fromInventDim.LicensePlateId)
        {
            InventHandlingQty totalLicensePlateHandlingQty = WHSLicensePlate::getTotalHandlingQtyOnLicensePlateWithDelta(_fromInventDim.LicensePlateId);

            InventHandlingQty moveQty = WHSCatchWeightHelper::convertInventQuantity(
                _itemId,
                _selectedValueUOM,
                _qty,
                _fromInventDim.InventDimId);

            if (totalLicensePlateHandlingQty > moveQty)
            {
                throw error("@WAX2027");
            }
        }

        if (   _fromInventDim.LicensePlateId
            && _toLicensePlateId
            && _fromInventDim.LicensePlateId !=_toLicensePlateId 
            && !WHSInvent::canPutLicensePlateOnLocation(
                    _toLicensePlateId,
                    _toLocationId,
                    _fromInventDim.InventLocationId,
                    false))
        {
            throw error("@WAX2027");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateToLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void validateToLocation(
        InventLocationId _inventLocationId,
        WMSLocationId _toLocationId,
        WHSLicensePlateId _licensePlateId,
        boolean _isNestedLPMove)
    {
        WMSLocation toLocation = WMSLocation::find(_toLocationId, _inventLocationId);

        if (!WMSLocation::whsGetLocationId(_toLocationId, _inventLocationId))
        {
            throw error("@WAX755");
        }
        else if (toLocation && toLocation.LocProfileId == WHSParameters::find().UserLocType)
        {
            throw error("@WAX3130");
        }

        if (_isNestedLPMove)
        {
            if (WHSContainerTable::isLicensePlateIdUsedForContainerGrouping(_licensePlateId))
            {
                if (!toLocation.whsLocationIsLPControlled())
                {
                    throw error("@WAX:CannotMoveContainerGroupToNonLPControlledLocation");
                }

                WHSWorkCreateMovementValidator::validateNotMovingGroupedContainersToDifferentPackingStation(toLocation, _licensePlateId);
            }
        }
        else
        {
            WHSWorkCreateMovementValidator::validateNotMovingContainerToDifferentPackingStation(toLocation, _licensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusChangeAllowedForCatchWeightItemOrLP</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void validateStatusChangeAllowedForCatchWeightItemOrLP(WHSInventoryMovementOperationParameters _movementParameters)
    {
        if (_movementParameters.IsMoveLP)
        {
            InventSum inventSum;
            InventDim inventDim;

            if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
            {
                WHSInventTable whsInventTable;
                WHSCatchWeightItemHandlingPolicy policy;
                
                if (InventUseDimOfInventSumToggle::instance().isEnabled())
                {
                    select firstonly ItemId from inventSum
                    where inventSum.ClosedQty == NoYes::No
                        && inventSum.PhysicalInvent > 0
                        && inventSum.InventLocationId    == _movementParameters.FromInventDim.InventLocationId
                        && inventSum.wmsLocationId       == _movementParameters.FromInventDim.wmsLocationId
                        && inventSum.LicensePlateId      == _movementParameters.FromInventDim.LicensePlateId
                    exists join whsInventTable
                        where whsInventTable.ItemId         == inventSum.ItemId
                    join policy
                        where policy.PolicyName                 == whsInventTable.CatchWeightItemHandlingPolicyName
                            && policy.CatchWeightTagTracking    == NoYes::Yes
                            && policy.CatchWeightTagDimensionTrackingMethod == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndInventoryStatus;
                }
                else
                {
                    select firstonly ItemId from inventSum
                    where inventSum.ClosedQty == NoYes::No
                       && inventSum.PhysicalInvent > 0
                    exists join inventDim
                        where inventDim.InventDimId         == inventSum.InventDimId
                        &&    inventDim.InventLocationId    == _movementParameters.FromInventDim.InventLocationId
                        &&    inventDim.wmsLocationId       == _movementParameters.FromInventDim.wmsLocationId
                        &&    inventDim.LicensePlateId      == _movementParameters.FromInventDim.LicensePlateId
                    exists join whsInventTable
                        where whsInventTable.ItemId         == inventSum.ItemId
                    join policy
                        where policy.PolicyName                 == whsInventTable.CatchWeightItemHandlingPolicyName
                            && policy.CatchWeightTagTracking    == NoYes::Yes
                            && policy.CatchWeightTagDimensionTrackingMethod == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndInventoryStatus;
                }

                if (inventSum.ItemId)
                {
                    throw error("@WAX:Error_CannotChangeInventoryStatusForCWTagItems");
                }
            }
            else
            {
                PdsCatchWeightItem catchWeight;
                
                if (InventUseDimOfInventSumToggle::instance().isEnabled())
                {
                    select firstonly ItemId from inventSum
                    where inventSum.ClosedQty == NoYes::No
                        && inventSum.PhysicalInvent > 0
                        && inventSum.InventLocationId    == _movementParameters.FromInventDim.InventLocationId
                        && inventSum.wmsLocationId       == _movementParameters.FromInventDim.wmsLocationId
                        && inventSum.LicensePlateId      == _movementParameters.FromInventDim.LicensePlateId
                    exists join catchWeight
                        where catchWeight.ItemId            == inventSum.ItemId;

                    if (inventSum.ItemId)
                    {
                        throw error("@WAX:Error_CannotChangeInventoryStatusForCWItems");
                    }
                }
                else
                {
                    select firstonly ItemId from inventSum
                    where inventSum.ClosedQty == NoYes::No
                       && inventSum.PhysicalInvent > 0
                    exists join inventDim
                        where inventDim.InventDimId         == inventSum.InventDimId
                        &&    inventDim.InventLocationId    == _movementParameters.FromInventDim.InventLocationId
                        &&    inventDim.wmsLocationId       == _movementParameters.FromInventDim.wmsLocationId
                        &&    inventDim.LicensePlateId      == _movementParameters.FromInventDim.LicensePlateId
                    exists join catchWeight
                        where catchWeight.ItemId            == inventSum.ItemId;

                    if (inventSum.ItemId)
                    {
                        throw error("@WAX:Error_CannotChangeInventoryStatusForCWItems");
                    }
                }
            }
        }
        else 
        {
            WHSInventTable::ensureInventoryStatusChangedAllowedForItem(_movementParameters.ItemId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAnyInventoryOnParentLicensePlate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void validateAnyInventoryOnParentLicensePlate(InventLocationId _inventLocationId, wmsLocationId _wmsLocationId, WHSLicensePlateId _licensePlateId)
    {
        if (!WHSWorkCreateMovementValidator::anyInventoryOnLicensePlateOrChildLicensePlates(_inventLocationId, _wmsLocationId, _licensePlateId))
        {
            throw error(strFmt("@WAX:InventoryMovementNestedLPNoOnHand_Error", _licensePlateId, _wmsLocationId, _inventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyInventoryOnLicensePlateOrChildLicensePlates</Name>
				<Source><![CDATA[
    private static boolean anyInventoryOnLicensePlateOrChildLicensePlates(InventLocationId _inventLocationId, wmsLocationId _wmsLocationId, WHSLicensePlateId _licensePlateId)
    {
        if (!WHSLicensePlate::isLicensePlateEmptyOnLocation(_licensePlateId, _wmsLocationId, _inventLocationId))
        {
            return true;
        }

        WHSLicensePlate childLicensePlate;

        while select LicensePlateId from childLicensePlate
            where childLicensePlate.LicensePlateParent == _licensePlateId
        {
            if (WHSWorkCreateMovementValidator::anyInventoryOnLicensePlateOrChildLicensePlates(_inventLocationId, _wmsLocationId, childLicensePlate.LicensePlateId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNotMovingGroupedContainersToDifferentPackingStation</Name>
				<Source><![CDATA[
    private static void validateNotMovingGroupedContainersToDifferentPackingStation(WMSLocation _toLocation, WHSLicensePlateId _licensePlateId)
    {
        WHSLicensePlate firstChildLicensePlate;

        select firstonly LicensePlateId from firstChildLicensePlate
            where firstChildLicensePlate.LicensePlateParent == _licensePlateId;

        WHSWorkCreateMovementValidator::validateNotMovingContainerToDifferentPackingStation(_toLocation, firstChildLicensePlate.LicensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNotMovingContainerToDifferentPackingStation</Name>
				<Source><![CDATA[
    private static void validateNotMovingContainerToDifferentPackingStation(WMSLocation _toLocation, WHSLicensePlateId _licensePlateId)
    {
        WHSContainerTable containerTable = WHSContainerTable::findByContainerId(_licensePlateId);

        if (containerTable && !containerTable.isOriginalPackingStation(_toLocation) && _toLocation.isPackingLocation())
        {
            throw error("@WAX:ErrorContainerCannotBeMovedToDifferentPackingStation");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>