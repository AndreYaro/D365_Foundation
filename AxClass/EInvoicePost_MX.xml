<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoicePost_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
/// <summary>
/// The <c>EInvoicePost_MX</c> class handles the posting of electronic invoices (eInvoices).
/// </summary>
public abstract class EInvoicePost_MX
{
    EInvoiceJour_MX                eInvoiceJour;
    EInvoiceTrans_MX               eInvoiceTrans;
    EInvoiceJourBaseMap_MX         invoiceJourMapping;
    SATAuthorizationNumber_MX      satAuthorizationNum;
    EInvoiceXMLFormat_MX           xmlDocument;
    EInvoiceSchemaValidation_MX    validateSchema;
    RefRecId                       numberSequence;
    Common                         parmTable;
    NoYes                          isReturn;

    private const str TransActorDriverRole = '01';
    private const str TransActorOtherRoleCode02 = '02';
    private const str TransActorOtherRoleCode03 = '03';
    private const str TransActorOtherRoleCode04 = '04';
    private const real MinimumPermissibleGrossVehicleWeight = 0.01;
    private const str IdCCPInitials = 'CCC';

    #File

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCFDIReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reference to the original electronic invoice.
    /// </summary>
    protected void createCFDIReference()
    {
        EInvoiceCFDIReferenceParm_MX    eInvoiceCFDIReferenceParm;
        EInvoiceCFDIReference_MX        eInvoiceCFDIReference;

        if (parmTable)
        {
            while select eInvoiceCFDIReferenceParm
            where eInvoiceCFDIReferenceParm.RefTableId  == parmTable.TableId
               && eInvoiceCFDIReferenceParm.RefRecId    == parmTable.RecId
               && eInvoiceCFDIReferenceParm.CFDIUUID    != ''
            {
                eInvoiceCFDIReference.clear();
                eInvoiceCFDIReference.initValue();
                eInvoiceCFDIReference.cfdiuuid          = eInvoiceCFDIReferenceParm.cfdiuuid;
                eInvoiceCFDIReference.ReferenceType     = eInvoiceCFDIReferenceParm.ReferenceType;
                eInvoiceCFDIReference.eInvoiceJour_MX   = eInvoiceJour.RecId;
                eInvoiceCFDIReference.insert();
            }

            delete_from eInvoiceCFDIReferenceParm
            where eInvoiceCFDIReferenceParm.RefTableId  == parmTable.TableId
               && eInvoiceCFDIReferenceParm.RefRecId    == parmTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createElectronicInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the electronic invoice record that is based on the original invoice.
    /// </summary>
    public void createElectronicInvoiceJour()
    {
        ttsbegin;

        this.initFromElectronicInvoiceParameters();

        this.initFromSATAuthorizationNumber(numberSequence, this.getInvoiceId());

        this.initFromInvoiceJour();

        eInvoiceJour.insert();

        this.createCFDIReference();

        this.createElectronicInvoiceTrans();

        eInvoiceJour.XMLDoc = this.createXMLDoc();

        eInvoiceJour.CFDIOriginalString = this.getCFDIOriginalString(eInvoiceJour);

        eInvoiceJour.update();

        if (!this.validate())
        {
            throw error("@SYS319214");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createElectronicInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the electronic invoice lines that are related to the posted document.
    /// </summary>
    /// <remarks>
    /// Depending on the origin of posted document, it may be necessary to search for lines to get the
    /// following information: customName, customDocNumber, customDocDate, and PropertyNumber.
    /// </remarks>
    protected abstract void createElectronicInvoiceTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSATAuthorizationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the electronic invoice fields based on the <c>SATAuthorizationNumber_MX</c> table.
    /// </summary>
    /// <param name="_numberSequence">
    /// The <c>NumberSequenceTable</c> record ID that is used for the invoice document.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice ID of the posted document.
    /// </param>
    protected void initFromSATAuthorizationNumber(
        RefRecId _numberSequence,
        InvoiceId _invoiceId)
    {
        satAuthorizationNum = SATAuthorizationNumber_MX::findByNumberSequenceInvoiceId(_numberSequence, _invoiceId);

        eInvoiceJour.AuthorizationCode = satAuthorizationNum.AuthorizationCode;
        eInvoiceJour.AuthorizationYear = satAuthorizationNum.AuthorizationYear;
        eInvoiceJour.Series = satAuthorizationNum.Series;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the original invoice journal.
    /// </summary>
    /// <returns>Returns the original invoice journal.</returns>
    protected abstract Common invoiceJour()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJourMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the electronic invoice mapping that is based on the original invoice.
    /// </summary>
    /// <returns>
    /// The <c>ElectronicInvoiceJourBaseMap_MX</c> map that is based on the original document.
    /// </returns>
    protected EInvoiceJourBaseMap_MX createInvoiceJourMapping()
    {
        return EInvoiceJourBaseMap_MX::construct(this.invoiceJour());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoicingServiceIntegrationEnabled</Name>
				<Source><![CDATA[
    private boolean isInvoicingServiceIntegrationEnabled()
    {
        return (this is EInvoicePost_CustInvoiceJour_MX || this is EInvoicePost_ProjInvoiceJour_MX)
            && BusinessDocumentParameters::isFeatureEnabled([EInvoicingFeaturesForService::MX00010]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXMLDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string that represents the XML document created that is based on the posted document.
    /// </summary>
    /// <returns>A string that represents the created XML document that is based on the posted document.</returns>
    public str createXMLDoc()
    {
        str xmlDoc;
        invoiceJourMapping = this.createInvoiceJourMapping();

        if (!this.isInvoicingServiceIntegrationEnabled())
        {
            xmlDocument = EInvoiceXMLFormat_MX::construct();

            int64 linesCount = invoiceJourMapping.getLinesCount();
            boolean isForeignTrade = invoiceJourMapping.isForeignTrade();
            System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();

            try
            {
                xmlDoc = this.getXMLDocumentString();

                if (EInvoiceCFDIParameters_MX::find().EnabledXsdValidation)
                {
                    this.schemaValidation_MX(xmlDoc);
                }
            }
            catch
            {
                stopwatch.Stop();
                this.updateGlobalTelemetry(
                    false,
                    isForeignTrade,
                    linesCount,
                    stopwatch.ElapsedMilliseconds);

                throw Exception::Error;
            }
            finally
            {
                stopwatch.Stop();
                boolean result = (xmlDoc != '');
                this.updateGlobalTelemetry(
                    result,
                    isForeignTrade,
                    linesCount,
                    stopwatch.ElapsedMilliseconds);
            }
        }

        return xmlDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXMLFileAndPopulateSysMailTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the XML file and the e-mail that will be sent by the job.
    /// </summary>
    public void createXMLFileAndPopulateSysMailTable()
    {
        const str TmpFilePrefixName = 'XmlEinvoice_';

        if (!this.isInvoicingServiceIntegrationEnabled())
        {
            invoiceJourMapping  = this.createInvoiceJourMapping();
            SysEmailParameters emailParameters     = SysEmailParameters::find();

            Email email = this.getPartyEmail();

            if (email)
            {
                str fileName = TmpFilePrefixName + invoiceJourMapping.invoiceId() + '.xml';
                str eMailDescription    = TmpFilePrefixName + invoiceJourMapping.invoiceId();

                Email emailAddress        = email;

                BinData xmlBinData = new BinData();
                xmlBinData.setAsciiData(einvoiceJour.XMLDoc);

                EInvoiceCFDIMail_MX eInvoiceMail = EInvoiceCFDIMail_MX::construct(fileName, xmlBinData, email, eMailDescription);

                eInvoiceMail.addInvoiceNumberToMailSubject(invoiceJourMapping.invoiceId());

                eInvoiceMail.sendMail();
            }
            else
            {
                warning (strfmt("@SYS341172", invoiceJourMapping.getCustTable().AccountNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFDIOriginalString</Name>
				<Source><![CDATA[
    protected str getCFDIOriginalString(EInvoiceJour_MX _eInvoiceJour)
    {
        str originalString;

        if (!this.isInvoicingServiceIntegrationEnabled())
        {
            EInvoiceXMLDocReader_MX xmlEInvReader = EInvoiceXMLDocReader_MX::construct(_eInvoiceJour);

            originalString = xmlEInvReader.getOriginalChain();
        }

        return originalString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoiceXsdFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the schema file of the electronic invoice
    /// </summary>
    /// <returns>
    /// Returns the schema file of the electronic invoice
    /// </returns>
    /// <remarks>
    /// return the schema for the right electronic invoice version
    /// </remarks>
    private str eInvoiceXsdFile()
    {
        str xsdFile;

        if (EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            xsdFile = EInvoiceCFDIParameters_MX::find().CFDIXsdFile;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return xsdFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the certificate number.
    /// </summary>
    /// <returns>
    /// The certificate number.
    /// </returns>
    protected abstract CertificateNumber_MX getCertificateNumber()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfirmNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a confirmation number returned by the PAC when the amount of CFDI exceeds the max limit.
    /// </summary>
    /// <returns>
    /// The confirmation number returned by the PAC when the amount of CFDI exceeds the max limit.
    /// </returns>
    protected abstract EInvoiceCFDIConfirmNumber_MX getConfirmNumber()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if the e-invoice is for foreign trade.
    /// </summary>
    /// <returns>
    /// True if the e-invoice is for foreign trade; otherwise false.
    /// </returns>
    protected abstract ForeignTrade_MX getForeignTrade()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemporaryExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if the e-invoice is for temporary export.
    /// </summary>
    /// <returns>
    /// true if the e-invoice is for temporary export; otherwise, false.
    /// </returns>
    protected CFDITemporaryExport_MX getTemporaryExport()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCartaPorte</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if the document has a transportation note.
    /// </summary>
    /// <returns>
    /// true if the document has a transportation note; otherwise, false.
    /// </returns>
    [Hookable(false)]
    protected boolean getCartaPorte()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncotermCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Incoterm code.
    /// </summary>
    /// <returns>
    /// The Incoterm code for the invoice.
    /// </returns>
    protected abstract EInvoiceExtCodeId_MX getIncotermCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumRegIdTrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Registration number.
    /// </summary>
    /// <returns>
    /// The Registration number.
    /// </returns>
    protected abstract NumRegIdTrib_MX getNumRegIdTrib()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoice currency code.
    /// </summary>
    /// <returns>
    /// The invoice currency code.
    /// </returns>
    protected abstract CurrencyCode getCurrencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets exchange rate of invoice currency.
    /// </summary>
    /// <returns>
    /// The exchange rate of invoice currency.
    /// </returns>
    protected abstract ExchRate getExchRate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoicePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets electronic invoice period according to invoice setup.
    /// </summary>
    /// <returns>The electronic invoice period.</returns>
    protected RetailEInvoicePeriod_MX getEInvoicePeriod()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal address.
    /// </summary>
    /// <returns>
    /// The fiscal address region id.
    /// </returns>
    protected LogisticsAddressCountryRegionId getFiscalAddress()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the foreign tax regostration number.
    /// </summary>
    /// <returns>
    /// The foreign tax registration number.
    /// </returns>
    protected numRegIdTrib_MX getForeignTaxRegistration()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets SAT code for the invoice payment method.
    /// </summary>
    /// <returns>
    /// The SAT code for the invoice payment method.
    /// </returns>
    protected abstract EInvoiceExtCodeId_MX getPaymMethod()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets SAT code for the invoice purpose.
    /// </summary>
    /// <returns>
    /// The SAT code for the invoice purpose.
    /// </returns>
    protected abstract EInvoiceExtCodeId_MX getPurpose()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source certificate.
    /// </summary>
    /// <returns>
    /// The source certificate.
    /// </returns>
    protected abstract SourceCertificate_MX getSourceCertificate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShippingReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the shipping reason code.
    /// </summary>
    /// <returns>
    /// The shipping reason for the invoice.
    /// </returns>
    protected EInvoiceExtCodeId_MX getShippingReason()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of the posted document.
    /// </summary>
    /// <returns>
    /// The total amount
    /// of the posted document.
    /// </returns>
    protected abstract InvoiceAmountMST getTotalAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice date of the invoice.
    /// </summary>
    /// <returns>
    /// The invoice date of the invoice.
    /// </returns>
    protected abstract Date getInvoiceDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice ID of the posted document.
    /// </summary>
    /// <returns>
    /// The invoice ID of the posted document.
    /// </returns>
    protected abstract InvoiceId getInvoiceId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the invoice document.
    /// </summary>
    /// <returns>
    /// The record ID of the invoice document.
    /// </returns>
    /// <remarks>
    /// An eInvoice <c>ElectronicInvoiceJour_MX</c> always originates from another document, such as sales
    /// invoices from the <c>CustInvoiceJour</c> table.In order to keep track of the original document, the
    /// table ID and the record ID of the document are persevered.
    /// </remarks>
    protected abstract RefRecId getInvoiceJourRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the invoice document.
    /// </summary>
    /// <returns>
    /// The table ID of the invoice document.
    /// </returns>
    /// <remarks>
    /// An eInvoice <c>ElectronicInvoiceJour_MX</c> always originates from another document, such as sales
    /// invoices from the <c>CustInvoiceJour</c> class.In order to keep track of the original document, the
    /// table ID and the record ID of the document are persevered.
    /// </remarks>
    protected abstract RefTableId getInvoiceJourTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyEmail</Name>
				<Source><![CDATA[
    protected Email getPartyEmail()
    {
        LogisticsElectronicAddress electronicAddress;

        electronicAddress = DirParty::primaryElectronicAddress(invoiceJourMapping.getCustTable().Party, LogisticsElectronicAddressMethodType::Email);
        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment mode of the invoice document.
    /// </summary>
    /// <returns>
    /// The payment mode of the invoice document.
    /// </returns>
    protected abstract CustPaymMode getPaymMode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXMLDocumentString</Name>
				<Source><![CDATA[
    protected str getXMLDocumentString()
    {
        return  xmlDocument.create(invoiceJourMapping).toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromElectronicInvoiceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the class variables based on Electronic Invoice Parameters
    /// </summary>
    protected void initFromElectronicInvoiceParameters()
    {
        eInvoiceJour.initFromElectronicInvoiceParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the electronic invoice fields based on posted document.
    /// </summary>
    protected void initFromInvoiceJour()
    {
        InvoiceDate         invoiceDate = this.getInvoiceDate();
        Timezone            invoiceTimezone = EInvoicePost_MX::getPostingTimezone();
        TimeOfDay           invoiceTime = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), invoiceTimezone));
        InvoiceDateTime_MX  invoiceDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(invoiceDate, invoiceTime), invoiceTimezone);

        eInvoiceJour.RefTableId         = this.getInvoiceJourTableId();
        eInvoiceJour.RefRecId           = this.getInvoiceJourRecId();
        eInvoiceJour.InvoiceDateTime    = invoiceDateTime;
        eInvoiceJour.PaymMode           = this.getPaymMode();
        eInvoiceJour.cfdiPurpose        = this.getPurpose();
        eInvoiceJour.PaymMethod         = this.getPaymMethod();
        eInvoiceJour.cfdiConfirmNumber  = this.getConfirmNumber();
        eInvoiceJour.CFDIMessageType    = EInvoiceCFDIMessageType_MX::Submit;
        eInvoiceJour.CFDIMessageStatus  = EInvoiceCFDIMessageStatus_MX::Waiting;
        eInvoiceJour.CFDIStatus         = EInvoiceCFDIStatus_MX::Blank;
        eInvoiceJour.CFDI               = NoYes::Yes;
        eInvoiceJour.CFDIForeignTrade          = this.getForeignTrade();
        eInvoiceJour.CFDITemporaryExport       = this.getTemporaryExport();
        eInvoiceJour.CFDIIncotermCode          = this.getIncotermCode();
        eInvoiceJour.CFDICertificateNumber     = this.getCertificateNumber();
        eInvoiceJour.CFDISourceCertificate_MX  = this.getSourceCertificate();
        eInvoiceJour.CFDINumRegIdTrib          = this.getNumRegIdTrib();
        eInvoiceJour.CFDIShippingReason        = this.getShippingReason();
        eInvoiceJour.ForeignTaxRegistration    = this.getForeignTaxRegistration();
        eInvoiceJour.FiscalAddress             = this.getFiscalAddress();
        eInvoiceJour.CFDIEInvoicePeriod_MX = this.getEInvoicePeriod();
        eInvoiceJour.InvoicingName = this.getInvoicingName();

        this.initFromIvoiceJour_InvoiceSeriesFolio();
    }

]]></Source>
			</Method>
			<Method>
				<Name>schemaValidation_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Responsible for validating the Schema file against the created XML document
    /// </summary>
    /// <param name="_xmlDoc">XML document that should be verified against the Schema</param>
    /// <remarks>
    /// All the Errors are listed and the posting is cancelled
    /// </remarks>
    protected void schemaValidation_MX(str _xmlDoc)
    {
        XMLSchemaValidator_W validator = XMLSchemaValidator_W::construct();
        EInvoiceCFDIParameters_MX parameters = EInvoiceCFDIParameters_MX::find();
        boolean schemasAdded = validator.tryAddSchemaFromStream(EInvoiceCFDIParameters_MX::getSchemaStream(parameters.DocuRefCFDI));

        if (schemasAdded && this.getForeignTrade())
        {
            schemasAdded = validator.tryAddSchemaFromStream(EInvoiceCFDIParameters_MX::getSchemaStream(parameters.DocuRefForeignTrade));
        }

        if (schemasAdded && this.getCartaPorte())
        {
            schemasAdded = validator.tryAddSchemaFromStream(EInvoiceCFDIParameters_MX::getSchemaStream(parameters.DocuRefTransNote));
        }

        if (!schemasAdded)
        {
            throw error("@MexicoCFDI:XSDSchemaLoadingError");
        }

        validator.validateXMLString(_xmlDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = parmTable)
    {
        parmTable = _parmTable;
        return parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSequence</Name>
				<Source><![CDATA[
    public RefRecId parmNumberSequence(RefRecId _numberSequence = numberSequence)
    {
        numberSequence = _numberSequence;

        if (!numberSequence && this.parmParmTable().RecId)
        {
            numberSequence = this.getInvoiceNumberSeq();
        }

        return numberSequence;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNumberSeq</Name>
				<Source><![CDATA[
    abstract protected RefRecId getInvoiceNumberSeq()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicingName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customer's RFC registration name.
    /// </summary>
    /// <returns>Customer's SAT registration name if one is set for customer, otherwise invoicing name.</returns>
    protected SATRegistrationName_MX getInvoicingName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromIvoiceJour_InvoiceSeriesFolio</Name>
				<Source><![CDATA[
    protected void initFromIvoiceJour_InvoiceSeriesFolio()
    {
        str voucher = this.getInvoiceId();
        str serie = voucher;
        str folio = '';

        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(this.parmNumberSequence());
        NumberSequenceFormat numberSeqFormat = numberSequenceTable.Format;
        [serie, folio] = EInvoiceCFDIJournalHelper::parseinvoiceSerieAndFolio(numberSeqFormat, voucher);

        eInvoiceJour.InvoiceSeries = serie;
        eInvoiceJour.InvoiceFolio = folio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        EInvoiceJour_MX eInvoiceJourLocal;
        boolean ret = true;
        InvoiceAmountMST totalAmount = this.getTotalAmount();
        Currency invoiceCurrency = Currency::find(this.getCurrencyCode());
        ExchRate exchRateOfficial;
        Percent exchRateDeviation;

        ret = this.validateDeferredPaymentMethod() && ret;

        if (EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            ret = ret && this.validateConfirmNumber(totalAmount, eInvoiceJour.CFDIConfirmNumber);

            ret = ret && this.validateForeignTrade(totalAmount);

            if (invoiceCurrency.CurrencyCode != Ledger::accountingCurrency() && invoiceCurrency.ExchRateMaxVariationPercent_MX)
            {
                exchRateOfficial = ExchangeRatehelper::exchRate(invoiceCurrency.CurrencyCode, this.getInvoiceDate());
                exchRateDeviation = exchRateOfficial ? abs(100.00 * (this.getExchRate() - exchRateOfficial) / exchRateOfficial) : 0;

                if (exchRateDeviation > invoiceCurrency.ExchRateMaxVariationPercent_MX && !eInvoiceJour.cfdiConfirmNumber)
                {
                    ret = checkFailed("@MexicoCFDIWithholding:ConfirmationNumberIsNotSpecified_error");
                }
            }

            if (eInvoiceJour.cfdiConfirmNumber)
            {
                select firstOnly RecId from eInvoiceJourLocal
                where eInvoiceJourLocal.cfdiConfirmNumber == eInvoiceJour.cfdiConfirmNumber
                   && eInvoiceJourLocal.RecId             != eInvoiceJour.RecId;

                if (eInvoiceJourLocal)
                {
                    ret = checkFailed(strFmt("@MexicoCFDI:SetTheConfirmationNumber_CheckFailed", "@SYS183847"));
                }
            }
            if (this.getForeignTrade())
            {
                while select ProductCode from eInvoiceTrans
                    where eInvoiceTrans.RefEInvoiceJourRecId == eInvoiceJour.RecId
                          && !eInvoiceTrans.CustomsQty
                {
                    ret = checkFailed(strFmt("@MexicoCFDI:SATCustomsQtyError", eInvoiceTrans.ProductCode));
                }
            }

            if (eInvoiceJour.TransCardIncluded)
            {
                ret = ret && this.validateCartaPorte();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>EInvoicePost_MX</c> class.
    /// </summary>
    /// <param name="_invoiceJour">
    /// The invoice record.
    /// </param>
    /// <param name="_numberSequence">
    /// A number sequence table id associated with CFDI references.
    /// </param>
    /// <param name="_parmTable">
    /// A parameter table associated with CFDI references.
    /// </param>
    /// <returns>
    /// A new instance of the <c>EInvoicePost_MX</c> class.
    /// </returns>
    /// <remarks>
    ///  Use the following procedure to customize or extend the
    ///  <c>
    ///  EInvoicePost_MX
    ///  </c>
    ///   class.
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    Create a new class that derives from the <c>EInvoicePost_MX</c> class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Overlayer the construct method on the <c>EInvoicePost_MX</c> class so that it returns an instance
    ///    of the derived class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Override the methods from the <c>EInvoicePost_MX</c> class that you want to customize or extend in
    ///    your derived class.
    ///    </description>
    ///   </item>
    ///  </list>
    ///   This procedure helps make sure that that your customizations are maintained if the base version of
    ///  the
    ///  <c>
    ///  EInvoicePost_MX
    ///  </c>
    ///   class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for Static Construct Methods" />
    ///  .
    /// </remarks>
    public static EInvoicePost_MX construct(
        Common      _invoiceJour,
        RefRecId    _numberSequence = 0,
        Common      _parmTable = null)
    {
        EInvoicePost_MX    electronicInvoicePost;
        CustInvoiceJour    localCustInvoiceJour;
        ProjInvoiceJour    localProjInvoiceJour;
        
        switch (_invoiceJour.TableId)
        {
            case TableNum(CustInvoiceJour):
                localCustInvoiceJour = _invoiceJour;
                if (EInvoicePost_MX::checkSourceIsRetail(localCustInvoiceJour))
                {
                    electronicInvoicePost = new EInvoicePost_RetailCustInvoiceJour_MX(localCustInvoiceJour);
                }
                else
                {
                    electronicInvoicePost = new EInvoicePost_CustInvoiceJour_MX(localCustInvoiceJour);
                }
                break;

            case TableNum(ProjInvoiceJour):
                localProjInvoiceJour = _invoiceJour;
                electronicInvoicePost = new EInvoicePost_ProjInvoiceJour_MX(localProjInvoiceJour);
                break;

            case tableNum(RetailStatementJour):
                electronicInvoicePost = new RetailEInvoicePost_MX(_invoiceJour as RetailStatementJour);
                break;

            case tableNum(RetailEInvoiceAggregatedStatement_MX):
                electronicInvoicePost = RetailEInvoicePost_MX::constructFromAggregatedStatement(_invoiceJour as RetailEInvoiceAggregatedStatement_MX);
                break;

            case tableNum(CustPackingSlipJour):
                electronicInvoicePost = new EInvoicePost_CustPackingSlip_MX(_invoiceJour);
                break;

            case tableNum(InventTransferJour):
                electronicInvoicePost = new EInvoicePost_InventTransferJour_MX(_invoiceJour);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        electronicInvoicePost.parmNumberSequence(_numberSequence);
        electronicInvoicePost.parmParmTable(_parmTable);

        return electronicInvoicePost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCartaPorte</Name>
				<Source><![CDATA[
    protected boolean validateCartaPorte()
    {
        boolean ret = true;

        if (!this.validateCartaPorteTransPermission())
        {
            ret = checkFailed("@MexicoCFDI:TransportationPermissionError");
        }

        if (!this.validateTransportation())
        {
            ret = checkFailed("@MexicoCFDI:TransportationSpotError");
        }

        if (!this.validateDriverInfo())
        {
            ret = checkFailed("@MexicoCFDI:DriverIdentificationError");
        }

        if (!this.validateInsurance())
        {
            ret = checkFailed("@MexicoCFDI:InsuranceError");
        }

        if (!this.validateVehicle())
        {
            ret = checkFailed("@MexicoCFDI:VehicleIdentificationError");
        }

        if (!this.validateWeightUnit())
        {
            ret = checkFailed("@MexicoCFDI:WeightUnitNotSetError");
        }

        if (!this.validateDriverName())
        {
            ret = checkFailed("@MexicoCFDI:DriverNameNotSetError");
        }

        if (!this.validateAdditionalDriverName())
        {
            ret = checkFailed("@MexicoCFDI:AdditionalDriverNameNotSetError");
        }

        if (!this.validateTransportationActorsNameForDriverCode() || !this.validateTransportationActorsNameForOtherCode())
        {
            ret = checkFailed("@MexicoCFDI:TransportationActorsNameNotSetError");
        }

        if (!this.validateEnvDamageInsuranceAttributes())
        {
            ret = checkFailed("@MexicoCFDI:EnvDamageInsuranceAttributesNotSetError");
        }

        if (!this.validateGrossVehicleWeight())
        {
            ret = checkFailed("@MexicoCFDI:GrossVehicleWeightTransportError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCartaPorteTransPermission</Name>
				<Source><![CDATA[
    private boolean validateCartaPorteTransPermission()
    {
        return eInvoiceJour.PermissionID != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransportation</Name>
				<Source><![CDATA[
    private boolean validateTransportation()
    {
        return eInvoiceJour.TravelDistance != 0.0 && eInvoiceJour.TravelTime != 0.0
            && eInvoiceJour.PickUpSpot != '' && eInvoiceJour.DropOffSpot != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDriverInfo</Name>
				<Source><![CDATA[
    private boolean validateDriverInfo()
    {
        boolean ret = true;
        TransportationDocument transDoc;
        EInvoiceTransportationActors_MX transActors;

        if (eInvoiceJour.Worker1NationalId == '' && eInvoiceJour.Worker1ForeignId =='')
        {
            select firstonly RecId from transActors
                where transActors.Role == '01'
                    && transActors.TransportationDocument == eInvoiceJour.TransportationDocument;

            ret = transActors.RecId != 0;
        }

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWeightUnit</Name>
				<Source><![CDATA[
    private boolean validateWeightUnit()
    {
        return eInvoiceJour.WeightUnit != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInsurance</Name>
				<Source><![CDATA[
    private boolean validateInsurance()
    {
        return einvoiceJour.InsuranceVendor != '' && eInvoiceJour.InsurancePolicyNumber != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVehicle</Name>
				<Source><![CDATA[
    private boolean validateVehicle()
    {
        return eInvoiceJour.TruckConfig != '' && eInvoiceJour.TruckSerialNum != '' && eInvoiceJour.TruckYear != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceDateForCFDI_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the invoiceDate of an electronic invoice CFDI posting.
    /// </summary>
    /// <param name="_invoiceDate">
    /// The invoice date.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The invoice date is not valid. The invoice date falls on a date that is earlier that 01.01.2011.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The invoice date exceeds the 72 hours.
    /// </exception>
    public static void validateInvoiceDateForCFDI_MX(TransDate _invoiceDate)
    {
        utcDateTime invoiceDateTime;
        utcdatetime pastLimitDate;
        utcdatetime companyCurrentDateTime;

        if (_invoiceDate < 01\01\2011)
        {
            throw error("@SYS4081683");
        }

        companyCurrentDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), EInvoicePost_MX::getPostingTimezone());

        invoiceDateTime = DateTimeUtil::newDateTime(_invoiceDate, DateTimeUtil::time(companyCurrentDateTime));

        pastLimitDate = DateTimeUtil::addDays(companyCurrentDateTime, -3);

        if (invoiceDateTime < pastLimitDate)
        {
            throw error("@SYS4081684");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingTimezone</Name>
				<Source><![CDATA[
    private static Timezone getPostingTimezone()
    {
        return DateTimeUtil::getCompanyTimeZone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Voucher getVoucher()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfirmNumber</Name>
				<Source><![CDATA[
    private boolean validateConfirmNumber(InvoiceAmountMST _totalAmount, EInvoiceCFDIConfirmNumber_MX  _confirmNumber)
    {
        EInvoiceJour_MX  eInvoiceJourLocal;
        boolean          ret             = true;
        boolean          isAmountInRange = EInvoiceCFDIParameters_MX::checkAmountInRange(_totalAmount);

        if (isAmountInRange && _confirmNumber != '')
        {
            ret = checkFailed("@MexicoCFDI:ExtraConfirmationNumber_Error");
        }

        if (!isAmountInRange && !_confirmNumber)
        {
            ret = checkFailed("@MexicoCFDI:ConfirmationNumberIsNotSpecified_Error");
        }

        if (_confirmNumber)
        {
            select firstOnly RecId from eInvoiceJourLocal
                where eInvoiceJourLocal.cfdiConfirmNumber == _confirmNumber
                   && eInvoiceJourLocal.RecId             != eInvoiceJour.RecId;

            if (eInvoiceJourLocal)
            {
                ret = checkFailed(strFmt("@MexicoCFDI:SetTheConfirmationNumber_CheckFailed", "@SYS183847"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeferredPaymentMethod</Name>
				<Source><![CDATA[
    protected boolean validateDeferredPaymentMethod()
    {
        boolean ret = true;
        const str notDefinedPaymType = '99';
        const str deferredPaymMethod = 'PPD';

        if (invoiceJourMapping.orderOfPayment() == deferredPaymMethod && invoiceJourMapping.methodOfPayment() != notDefinedPaymType)
        {
            ret = checkFailed("@MexicoCFDI:TypeOfDeferredPayment_Error");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that payment method corresponds to the payment type
    /// </summary>
    /// <returns>
    /// True if payment method corresponds to the payment type; otherwise, false
    /// </returns>
    protected boolean validatePaymentMethod()
    {
        return this.validateDeferredPaymentMethod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExemptTax</Name>
				<Source><![CDATA[
    protected boolean validateExemptTax()
    {
        TaxTrans  taxTrans;
        TaxTable  taxTable;
        boolean   ret = true;

        select firstOnly RecId from taxTrans
            where taxTrans.Voucher == this.getVoucher()
               && taxTrans.TransDate == this.getInvoiceDate()
               && taxTrans.ExemptTax
                 exists join taxTable
                     where taxTable.TaxCode == taxTrans.TaxCode
                        && taxTable.NegativeTax;
                
        if (taxTrans)
        {
            ret = checkFailed("@MexicoCFDI:ExemptOnWithholding_Error");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that there are no exempt withholding taxes
    /// </summary>
    /// <returns>
    /// True if there are no exempt withholding taxes; otherwise, false
    /// </returns>
    protected boolean validateTaxTransactions()
    {
        return this.validateExemptTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfSrcInvoiceContainDataForEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if source invoice contains data for electronic invoice.
    /// </summary>
    /// <returns>
    /// True if source invoice contains data for electronic invoice; otherwise, false.
    /// </returns>
    public boolean checkIfSrcInvoiceContainDataForEInvoice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReturn</Name>
				<Source><![CDATA[
    public NoYes parmIsReturn(NoYes _isReturn = _isReturn)
    {
        isReturn = _isReturn;
        return isReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEInvoicePrerequisites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if prerequisites are met for inserting EInvoice.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// CustInvoiceJour record needed for check.
    /// </param>
    /// <returns>
    /// True if EInvoice can be inserted; otherwise, false.
    /// </returns>
    public static boolean checkEInvoicePrerequisites(CustInvoiceJour _custInvoiceJour)
    {
        return (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
            && !EInvoicePost_MX::checkSourceIsRetailCFDIGlobal(_custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSourceIsRetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if invoice originated from retail sale (cash and carry or customer order).
    /// </summary>
    /// <param name = "_custInvoiceJour">
    /// Invoice journal for checking.
    /// </param>
    /// <returns>
    /// True, if this invoice originated from retail; otherwise, false.
    /// </returns>
    public static boolean checkSourceIsRetail(CustInvoiceJour _custInvoiceJour)
    {
        boolean isRetailOrder;

        if (!isConfigurationKeyEnabled(configurationKeyNum(Retail)))
        {
            return false;
        }

        isRetailOrder = (RetailSalesTable::find(_custInvoiceJour.SalesId).RetailOrder == NoYes::Yes);

        if (isRetailOrder)
        {
            // Shipping should not be processed as Retail order
            if (_custInvoiceJour.DlvMode &&
                !RetailDlvMode::isPickupDeliveryMode(_custInvoiceJour.DlvMode) &&
                _custInvoiceJour.DlvMode != RetailParameters::find().CarryOutDeliveryModeCode)
            {
                isRetailOrder = false;
            }
        }

        return isRetailOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSourceIsRetailCFDIGlobal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if invoice originated from retail sale (cash and carry or customer order).
    /// </summary>
    /// <param name = "_custInvoiceJour">
    /// Invoice journal for checking.
    /// </param>
    /// <returns>
    /// true, if this invoice originated from retail; otherwise, false.
    /// </returns>
    public static boolean checkSourceIsRetailCFDIGlobal(CustInvoiceJour _custInvoiceJour)
    {
        boolean isRetailCFDIGlobal = eInvoicePost_MX::checkSourceIsRetail(_custInvoiceJour);
        
        if (isRetailCFDIGlobal)
        {
            CustInvoiceSalesLink custInvoiceSalesLink;
            SalesTable salesTable;
            RetailSalesTable retailSalesTable;

            select RecId from retailSalesTable 
                where retailSalesTable.RetailCFDIDocumentType_MX == RetailCFDIDocumentType_MX::CFDINormal
                exists join salesTable
                    where salesTable.RecId == retailSalesTable.SalesTable
                exists join custInvoiceSalesLink
                    where custInvoiceSalesLink.origSalesId == salesTable.SalesId
                        && custInvoiceSalesLink.salesId == _custInvoiceJour.SalesId
                        && custInvoiceSalesLink.InvoiceId == _custInvoiceJour.InvoiceId
                        && custInvoiceSalesLink.invoiceDate == _custInvoiceJour.InvoiceDate;
            
            if (retailSalesTable.RecId)
            {
                isRetailCFDIGlobal = false;
            }
        }
        return isRetailCFDIGlobal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForeignTrade</Name>
				<Source><![CDATA[
    protected boolean validateForeignTrade(InvoiceAmountMST _totalAmount)
    {
        boolean ret = true;
        if (!FeatureStateProvider::isFeatureEnabled(EInvoiceZeroAmountAllowedFeature_MX::instance())
            && !_totalAmount && !this.getForeignTrade())
        {
            ret = checkFailed(strFmt("@SYS78463", "@SYS79829"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGlobalTelemetry</Name>
				<Source><![CDATA[
    private void updateGlobalTelemetry(
        boolean _result,
        boolean _isForeignTrade = false,
        int64 _linesCount = 0,
        int64 _runTime = 0)
    {
        str featureReference;

        str caller = funcName();

        if (_isForeignTrade)
        {
            featureReference = GlobalizationConstants::FeatureReferenceMX00013;
        }
        else if (this is EInvoicePost_RetailCustInvoiceJour_MX)
        {
            featureReference = GlobalizationConstants::FeatureReferenceMXRET00001;

            caller = RetailLocalizationInstrumentationConstants::CFDINormalXMLCreation;
        }
        else if (this is EInvoicePost_CustInvoiceJour_MX || this is EInvoicePost_ProjInvoiceJour_MX)
        {
            featureReference = GlobalizationConstants::FeatureReferenceMX00010;
        }
        else if (this is EInvoicePost_CustPackingSlip_MX || this is EInvoicePost_InventTransferJour_MX)
        {
            featureReference = GlobalizationConstants::FeatureReferenceMX00014;
        }
        else if (this is RetailEInvoicePost_MX)
        {
            featureReference = GlobalizationConstants::FeatureReferenceMXRET00001;

            caller = RetailLocalizationInstrumentationConstants::CFDIGlobalXMLCreation;
        }

        real elapsedTimePerLine = _linesCount ? _runTime / _linesCount : 0;

        GlobalizationInstrumentationHelper::featureRunWithPerformance(
            featureReference,
            caller,
            GlobalizationInstrumentationHelper::DefaultFeatureVersion,
            SysCountryRegionCode::countryInfo(),
            _runTime,
            false,
            _result,
            elapsedTimePerLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEInvoiceJourFromTransDocument_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>EInvoiceJour</c> record with values obtained from vehicle record.
    /// </summary>
    /// <param name = "_transDocument">
    /// Transportation document for the e-invoice.
    /// </param>
    protected void initEInvoiceJourFromTransDocument_MX(TransportationDocument _transDocument)
    {
        eInvoiceJour.PermissionType = _transDocument.SATPermissionType_MX;
        eInvoiceJour.PermissionID = _transDocument.SATPermissionID_MX;
        eInvoiceJour.PickUpSpot = _transDocument.PickUpSpot_MX;
        eInvoiceJour.DropOffSpot = _transDocument.DropOffSpot_MX;
        eInvoiceJour.PickUpMode = _transDocument.PickUpMode_MX;
        eInvoiceJour.DropOffMode = _transDocument.DropOffMode_MX;
        eInvoiceJour.TravelDistance = _transDocument.TravelDistance_MX;
        eInvoiceJour.TravelTime = _transDocument.TravelTime_MX;
        eInvoiceJour.TransportationDocument = _transDocument.RecId;
        eInvoiceJour.WeightUnit = _transDocument.WeightUnit_MX;
        eInvoiceJour.EnvironmentalDamageInsuranceVendor = VendTable::find(_transDocument.EnvironmentalDamageInsuranceVendor_MX).vendorName();
        eInvoiceJour.EnvironmentalDamageInsurancePolicyNum = _transDocument.EnvironmentalDamageInsurancePolicyNum_MX;

        TransportationVehicle transVehicle = TransportationVehicle::findByTransportationDocument(_transDocument.RecId);
        eInvoiceJour.Worker1 = transVehicle.Driver;
        eInvoiceJour.Worker1Name = HcmWorker::find(transVehicle.Driver).name();
        einvoiceJour.Worker1NationalId = transVehicle.DriverNationalId_MX;
        eInvoiceJour.Worker1DriverLicense = transVehicle.DriverLicense_MX;
        eInvoiceJour.Worker1ForeignId = transVehicle.DriverForeignId_MX;
        eInvoiceJour.Worker1CountryRegion = transVehicle.DriverCountryRegion_MX;
        einvoiceJour.Worker2NationalId = transVehicle.Driver2NationalId_MX;
        eInvoiceJour.Worker2Name = HcmWorker::find(transVehicle.Driver2_MX).name();
        eInvoiceJour.Worker2DriverLicense = transVehicle.Driver2License_MX;
        eInvoiceJour.Worker2ForeignId = transVehicle.Driver2ForeignId_MX;
        eInvoiceJour.Worker2CountryRegion = transVehicle.Driver2CountryRegion_MX;
        eInvoiceJour.TruckConfig = transVehicle.TransConf_MX;
        eInvoiceJour.TruckSerialNum = transVehicle.PlateNumber;
        eInvoiceJour.TruckYear = transVehicle.ModelYear_MX;
        eInvoiceJour.InsuranceVendor = VendTable::find(transVehicle.InsuranceVendor_MX).vendorName();
        eInvoiceJour.InsurancePolicyNumber = transVehicle.InsurancePolicyNum_MX;

        if (transVehicle.TrailerNumber)
        {
            eInvoiceJour.TrailerNumber = transVehicle.TrailerNumber;
            eInvoiceJour.TrailerType = transVehicle.TrailerType_MX;
        }

        if (transVehicle.AdditionalTrailerNumber_MX)
        {
            eInvoiceJour.AdditionalTrailerNumber = transVehicle.AdditionalTrailerNumber_MX;
            eInvoiceJour.AdditionalTrailerType = transVehicle.TrailerType_MX;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>travelDistance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves transportation engine for a given document.
    /// </summary>
    /// <param name = "_transDoc">Transportation document.</param>
    /// <returns>Transportation engine.</returns>
    protected EInvoiceTransTimeEngine_MX travelDistance(TransportationDocument _transDoc)
    {
        EInvoiceTransTimeEngine_MX transTimeEngine;

        select firstonly transTimeEngine
            where transTimeEngine.PickUpID == _transDoc.PickUpSpot_MX
                && transTimeEngine.DropOffID == _transDoc.DropOffSpot_MX;

        if (!transTimeEngine)
        {
            select firstonly transTimeEngine
                where transTimeEngine.PickUpID == _transDoc.DropOffSpot_MX
                    && transTimeEngine.DropOffID == _transDoc.PickUpSpot_MX;
        }

        return transTimeEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIdCCPForCartaPorteV3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates IDCCP Identifier for Carta Porte Transportation note
    /// </summary>
    /// <returns>IdCCP Value</returns>
    protected IdCCP_MX getIdCCPForCartaPorteV3()
    {
        str uuid  = System.Guid::NewGuid().ToString();
        str ccpId = strPoke(uuid, IdCCPInitials, 1);
        return ccpId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDriverName</Name>
				<Source><![CDATA[
    private boolean validateDriverName()
    {
        boolean ret = true;
        
        if (eInvoiceJour.Worker1DriverLicense != '' && eInvoiceJour.Worker1Name == '')
        {
            ret = false;
        }

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAdditionalDriverName</Name>
				<Source><![CDATA[
    private boolean validateAdditionalDriverName()
    {
        boolean ret = true;

        if (eInvoiceJour.Worker1DriverLicense != '' && eInvoiceJour.Worker2DriverLicense != ''
           && eInvoiceJour.Worker2Name == '')
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransportationActorsNameForDriverCode</Name>
				<Source><![CDATA[
    private boolean validateTransportationActorsNameForDriverCode()
    {
        boolean ret = true;
        EInvoiceTransportationActors_MX transActors;

        if (eInvoiceJour.Worker1DriverLicense == '')
        {
            select firstonly Name from transActors
                where transActors.TransportationDocument == eInvoiceJour.TransportationDocument
                    && transActors.Role == TransActorDriverRole
                    && transActors.Name == '';
            
            if (transActors.RecId != 0)
            {
                ret = false;
            }  
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransportationActorsNameForOtherCode</Name>
				<Source><![CDATA[
    private boolean validateTransportationActorsNameForOtherCode()
    {
        boolean ret = true;
        EInvoiceTransportationActors_MX transActors;

        select firstonly Name from transActors
            where transActors.TransportationDocument == eInvoiceJour.TransportationDocument
                && transActors.Name == ''
                && (transActors.Role == TransActorOtherRoleCode02
                || transActors.Role == TransActorOtherRoleCode03
                || transActors.Role == TransActorOtherRoleCode04);
            
        if (transActors.RecId != 0)
        {
            ret = false;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEnvDamageInsuranceAttributes</Name>
				<Source><![CDATA[
    private boolean validateEnvDamageInsuranceAttributes()
    {
        boolean ret = true;

        if (this.hasHazardousProduct() && 
            (eInvoiceJour.EnvironmentalDamageInsuranceVendor == ''
             || eInvoiceJour.EnvironmentalDamageInsurancePolicyNum == ''))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasHazardousProduct</Name>
				<Source><![CDATA[
    private boolean hasHazardousProduct()
    {
        EInvoiceTransBaseMap_MX eInvoiceTransMap;
        boolean isHazardous = false;

        if (invoiceJourMapping)
        {
            invoiceJourMapping.resetLines();

            while (invoiceJourMapping.nextLine())
            {
                eInvoiceTransMap = invoiceJourMapping.currentLine();

                if (eInvoiceTransMap.isHazardous())
                {
                    isHazardous = true;
                    break;
                }
            }
        }

        return isHazardous;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGrossVehicleWeight</Name>
				<Source><![CDATA[
    private boolean validateGrossVehicleWeight()
    {
        VehicleGrossWeight_MX vehicleGrossWeight;
        boolean ret = true;

        if (invoiceJourMapping)
        {
            vehicleGrossWeight = invoiceJourMapping.grossVehicleWeight();

            if (vehicleGrossWeight < MinimumPermissibleGrossVehicleWeight)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>