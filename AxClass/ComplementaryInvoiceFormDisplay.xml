<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ComplementaryInvoiceFormDisplay</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates and displays the complementary invoice form.
/// </summary>
class ComplementaryInvoiceFormDisplay
{
    FiscalDocument_BR fiscalDocToBeComplemented;
    InvoiceComplementaryType_BR complementaryType;
    str               menuItemName;
    MenuItemType      menuItemType;
    Object            caller;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getComplementaryCreator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the constructor of the complementary invoice creator.
    /// </summary>
    /// <returns>
    /// An instance of a complementary invoice creator.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ComplementaryInvoiceCreator getComplementaryCreator()
    {
        return ComplementaryInvoiceCreator::construct(fiscalDocToBeComplemented, complementaryType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values for the complementary invoice form creation.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the creation of the form.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initialize(Args _args)
    {
        fiscalDocToBeComplemented = _args.record();
        menuItemName = _args.menuItemName();
        menuItemType = _args.menuItemType();
        caller = _args.caller();
        complementaryType = _args.parmEnum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the complementary invoice and its form.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        Form form;
        Args args;
        ComplementaryInvoiceCreator creator;
        Common complementaryInvoice;

        creator = this.getComplementaryCreator();
        complementaryInvoice = creator.run();

        form = new Form(creator.getFormName());

        args = new Args();
        args.object(form);
        args.lookupRecord(complementaryInvoice);
        args.menuItemName(menuItemName);
        args.menuItemType(menuItemType);
        args.caller(caller);
        args.parmEnum(complementaryType);
        args.parmEnumType(enumNum(InvoiceComplementaryType_BR));

        this.runForm(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the complementary invoice form.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the execution of the form.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runForm(Args _args)
    {
        FormRun formRun;

        formRun = classfactory.formRunClass(_args);
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>ComplementaryInvoiceFormDisplay</c> class.
    /// </summary>
    /// <param name="_args">
    /// The arguments to be used on the class construction.
    /// </param>
    /// <returns>
    /// A new instance of the <c>ComplementaryInvoiceFormDisplay</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ComplementaryInvoiceFormDisplay construct(Args _args)
    {
        ComplementaryInvoiceFormDisplay formDisplay;

        formDisplay = new ComplementaryInvoiceFormDisplay();
        formDisplay.initialize(_args);

        return formDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ComplementaryInvoiceFormDisplay formDisplay;

        formDisplay = ComplementaryInvoiceFormDisplay::construct(_args);
        formDisplay.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>