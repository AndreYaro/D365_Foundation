<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlMaintenanceProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlMaintenanceProcessor</c> is responsible for providing the ability to budget check data that typically is prevented from
/// being budget checked through normal processes.
/// </summary>
/// <remarks>
/// BUDGET CONTROL TEAM INTERNAL USAGE ONLY.
/// This class is not supported and is only used for fixing corrupted data.
/// Do not utilize this class. Follow the standard API for submitting budget check requests.
/// </remarks>
internal final class BudgetControlMaintenanceProcessor extends BudgetControlProcessor
{
    internal static BudgetControlMaintenanceProcessor instance;
    internal BudgetSourceTmp budgetCheckResults;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static BudgetControlMaintenanceProcessor construct()
    {
        BudgetControlMaintenanceProcessor processor = new BudgetControlMaintenanceProcessor();

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    internal static BudgetControlMaintenanceProcessor instance()
    {
        BudgetControlMaintenanceProcessor processor;

        str cacheScope = classstr(BudgetControlMaintenanceProcessor);
        str cacheKey = funcname();
        SysTransactionScope transactionScope;

        if (SysTransactionScopeCache::isSet(cacheScope, cacheKey))
        {
            processor = SysTransactionScopeCache::get(cacheScope, cacheKey);
        }
        else if (appl.ttsLevel() > 0)
        {
            // This process is is also created on a per transaction basis, but does not subscribe to all transaction events.
            transactionScope = appl.transactionScope();
            processor = new BudgetControlMaintenanceProcessor();

            // Since we can't catch any exceptions until after the last ttscommit,
            // subscribe to abort so we can get the right budget check errors and results.
            transactionScope.ttsAborted += eventhandler(processor.ttsNotifyAbort);

            // Cache for future use in this transaction scope
            SysTransactionScopeCache::set(cacheScope, cacheKey, processor);
        }
        else
        {
            // TTS level should always be greater than zero when the budget control processor is used
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBudgetCheck</Name>
				<Source><![CDATA[
    internal void runBudgetCheck()
    {
        this.ttsNotifyPreCommit();
        this.ttsNotifyCommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTtsNotifyCommitValid</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isTtsNotifyCommitValid()
    {
        return isProcessingNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTtsNotifyPreCommitValid</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isTtsNotifyPreCommitValid()
    {
        return isProcessingNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetCheckResultsTmp</Name>
				<Source><![CDATA[
    internal static void setBudgetCheckResultsTmp(BudgetSourceTmp _budgetCheckResults)
    {
        BudgetSourceTmp localBudgetCheckResults = BudgetControlMaintenanceProcessor::instance().budgetCheckResults;
        localBudgetCheckResults.linkPhysicalTableInstance(_budgetCheckResults);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateForOpenFiscalPeriod</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean validateDateForOpenFiscalPeriod(LegalEntityRecId _legalEntityId, Date _budgetDate)
    {
        // Since no data is going to GL, we don't need to verify that the period is open.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetCheckResultErrorWarningDetails</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void saveBudgetCheckResultErrorWarningDetails()
    {
        BudgetSource budgetSource;
        UserConnection userConnection;

        if (budgetControlResultCollection != null &&
            budgetControlResultCollection.elements() > 0)
        {
            // Must use a user connection to prevent resetting the data that occurs in the ttsbegin.
            userConnection = new UserConnection();

            try
            {
                budgetSource.setConnection(userConnection);
                budgetCheckResults.setConnection(userConnection);

                userConnection.ttsbegin();

                budgetControlResultCollection.initializeEnumerator();

                while (budgetControlResultCollection.moveNext())
                {
                    budgetSource = BudgetSource::find(
                                    budgetControlResultCollection.currentBudgetSourceId(),
                                    true,
                                    ConcurrencyModel::Auto,
                                    userConnection);

                    if (!budgetSource &&
                        budgetSourcesWithResultsBySource &&
                        budgetSourcesWithResultsBySource.exists(budgetControlResultCollection.currentBudgetSourceId()))
                    {
                        budgetSource = budgetSourcesWithResultsBySource.lookup(budgetControlResultCollection.currentBudgetSourceId());

                        if (budgetSource.existSourceIntegratorReference())
                        {
                            // The budget source was not committed, but the source integrator reference exists
                            // Create the budget source to save the check result error warning details
                            budgetSource.setConnection(userConnection);

                            // Clear any check result values since we don't want them persisted.
                            budgetSource.CheckResult = 0;
                            budgetSource.CheckResultErrorWarning = 0;
                            budgetSource.CheckResultErrorWarningType = 0;
                            budgetSource.insert();
                        }
                        else
                        {
                            // Clear the buffer to prevent further processing
                            budgetSource.clear();
                        }
                    }

                    if (budgetSource)
                    {
                        currentControlResult = budgetControlResultCollection.currentBudgetControlResult();

                        // Store the result into the temp table so it can be used by data maintenance tracking.
                        budgetCheckResults.clear();
                        budgetCheckResults.BudgetSourceRecId = budgetSource.RecId;
                        budgetCheckResults.CheckResult = currentControlResult.budgetSourceAvailableCheckResult();
                        budgetCheckResults.insert();
                    }
                }

                userConnection.ttscommit();
            }
            finally
            {
                userConnection.finalize();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>