<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxValidateForExportJournal_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxValidateForExportJournal_CN</c> class is used validate tax for export journal.
/// </summary>
class TaxValidateForExportJournal_CN extends TaxValidateForTaxIntegration_CN
{
    CustInvoiceJour     custInvoiceJour;
    CustBankAccount     custBankAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existCustBankAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the cust bank account name exist.
    /// </summary>
    /// <returns>
    /// Returns true if the cust bank account name exist.
    /// </returns>
    protected boolean existCustBankAccountName()
    {
        boolean ret = true;

        if (!custBankAccount.Name)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustBankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the cust bank account number exist.
    /// </summary>
    /// <returns>
    /// Returns true if the cust bank account number exist.
    /// </returns>
    protected boolean existCustBankAccountNum()
    {
        boolean ret = true;

        unchecked (Uncheck::TableSecurityPermission)
        {
            if (!custBankAccount.AccountNum)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTaxRegistrationNumberFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tax registration number from cust exist.
    /// </summary>
    /// <param name="_companyInfoExtension">
    /// The company info extension.
    /// </param>
    /// <returns>
    /// Returns true if the tax registration number from cust exist.
    /// </returns>
    Protected boolean existTaxRegistrationNumberFromCust(CompanyInfoExtension_CN _companyInfoExtension)
    {
        boolean ret = false;

        if (TaxRegistration::getTaxRegistrationNumberFromCust(custInvoiceJour.InvoiceAccount, custInvoiceJour.InvoiceDate, _companyInfoExtension.TaxRegistrationType))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVATInvoiceDescTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the VAT invoice desc table exist.
    /// </summary>
    /// <returns>
    /// Returns true if the VAT invoice desc table exist.
    /// </returns>
    Protected boolean existVATInvoiceDescTable()
    {
        boolean ret = false;

        if (CustInvoiceJourExtension_CN::findByCustInvoiceJour(custInvoiceJour.RecId).VATInvoiceDescTable)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmountAndNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoice amount and number of lines.
    /// </summary>
    protected void getInvoiceAmountAndNumOfLines()
    {
        CustInvoiceTrans    localCustInvoiceTrans;
        AmountCur           netAmount;
        AmountCur           TaxAmount = 0;

        select sum(LineAmount), count(RecId)
            from localCustInvoiceTrans
            where localCustInvoiceTrans.SalesId              == custInvoiceJour.SalesId
                && localCustInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
                && localCustInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate
                && localCustInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup;

        netAmount = localCustInvoiceTrans.LineAmount;
        numOfLines = int642int(localCustInvoiceTrans.RecId);

        if (taxProfileTable.IncludeTax)
        {
            taxAmount = custInvoiceJour.SumTax;
        }

        invoiceAmount = netAmount + TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueDefault</Name>
				<Source><![CDATA[
        public void initValueDefault()
    {
        super();
        custInvoiceJour = common;

        custBankAccount     = CustBankAccount::find(this.parmInvoiceAccount(), this.parmCustBankAccountId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
        protected CurrencyCode parmCurrencyCode()
    {
        CurrencyCode localCurrencyCode;;

        localCurrencyCode = custInvoiceJour.CurrencyCode;

        return localCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustBankAccountId</Name>
				<Source><![CDATA[
        protected CustBankAccountId parmCustBankAccountId()
    {
        CustBankAccountId custBankAccountIdLocal;

        custBankAccountIdLocal = CustTrans::findFromInvoice(this.parmInvoiceId(), this.parmInvoiceAccount()).ThirdPartyBankAccountId;

        return custBankAccountIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
        protected CustInvoiceAccount parmInvoiceAccount()
    {
        CustInvoiceAccount invoiceAccountLocal;

        invoiceAccountLocal = custInvoiceJour.InvoiceAccount;

        return invoiceAccountLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
        protected InvoiceId parmInvoiceId()
    {
        invoiceId       invoiceIdLocal;

        invoiceIdLocal = custInvoiceJour.InvoiceId;

        return  invoiceIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
        protected SalesId parmSalesId()
    {
        salesId     salesIdLocal;

        salesIdLocal = custInvoiceJour.SalesId;

        return salesIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxCode</Name>
				<Source><![CDATA[
        public boolean validateTaxCode()
    {
        CustInvoiceTrans    localCustInvoiceTrans;
        boolean             ret = true;

        while select localCustInvoiceTrans
            group by TaxGroup, TaxItemGroup
            where localCustInvoiceTrans.SalesId              == custInvoiceJour.SalesId
                && localCustInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
                && localCustInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate
                && localCustInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup
            {
                numOfTaxCode ++;
                this.validatePostTaxCode(localCustInvoiceTrans.TaxGroup, localCustInvoiceTrans.TaxItemGroup);
            }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new cust invoice journal.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The cust invoice journal.
    /// </param>
    /// <param name="_taxProfileTable">
    /// The tax profile table.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxValidateForExportJournal_CN</c> class.
    /// </returns>
    Static public TaxValidateForExportJournal_CN newCustInvoiceJour(CustInvoiceJour  _custInvoiceJour, TaxProfileTable_CN _taxProfileTable)
    {
        TaxValidateForExportJournal_CN taxValidateForExportJournal = new TaxValidateForExportJournal_CN(_custInvoiceJour, _taxProfileTable);

        taxValidateForExportJournal.initValueDefault();

        return taxValidateForExportJournal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>