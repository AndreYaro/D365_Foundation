<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayPOItemReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to handle received purchase order item.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::PurchaseOrderItemReceiving)]
[WHSWorkExecuteMode(WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate)]
class WhsWorkExecuteDisplayPOItemReceiving extends WHSWorkExecuteDisplayPOReceiving
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrderProvider</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkExecuteDisplayReceivingOrderProvider createOrderProvider(boolean _throwOnNonReceiving)
    {
        return new WHSWorkExecuteDisplayReceivingPurchOrderProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        switch (true)
        {
            case _control is WhsControlItemId:
                return this.processItemIdForPurchaseOrderItemReceiving(_control);
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildVendorControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the vendor control.
    /// </summary>
    /// <returns>The container with the vendor control.</returns>
    protected container buildVendorControl()
    {
        VendAccount vendorAccount = this.receivingOrderProvider().vendAccount(pass);
        RefRecId    party         = VendTable::find(vendorAccount).Party;
        Name        vendorName    = DirPartyTable::findRec(party).Name;

        return [this.buildControl(#RFText, #VendorName, "@SYS323200", 1, vendorName, extendedTypeNum(Name), '', 0, false)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPurchIdControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the purchase order number control.
    /// </summary>
    /// <returns>The container with the purchase order number control.</returns>
    protected container buildPurchIdControl()
    {
        var orderProvider = this.receivingOrderProvider();
        return [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, orderProvider.orderNum(pass), orderProvider.orderTypeId(), '', 0, false)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowVendorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the vendor control should be displayed.
    /// </summary>
    /// <returns>true, if the vendor control should be displayed; otherwise, false.</returns>
    protected boolean mustShowVendorName()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultQuantity</Name>
				<Source><![CDATA[
    protected WHSProdQty defaultQuantity()
    {
        return this.defaultReceivingQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPOReceiving</Name>
				<Source><![CDATA[
    container buildPOReceiving(container _con, str _extratext = '')
    {
        container       ret = _con;
        boolean         showExceptionButton;
        InventTable     inventTable;
        InventDim       inventDim;
        TradeLineNumber poLineNum;

        var orderProvider = this.receivingOrderProvider();

        ret += [this.buildControl(#RFLabel, 'POItemReceiving', pass.exists(#MenuItem) ? WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += this.buildLocationControl();

        if (orderProvider.orderNum(pass) != '')
        {
            ret += this.buildPurchIdControl();
            if (this.mustShowVendorName())
            {
                ret += this.buildVendorControl();
            }

            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.parmItemId(), extendedTypeNum(InventInventItemSearchItem), '', 0)];

            if (pass.parmItemId())
            {
                WHSInventTable whsInventTable = WHSInventTable::find(pass.parmItemId());
                
                if (whsInventTable.rfDescription1)
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
                }
                else
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", InventTable::find(whsInventTable.ItemId).productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
                }

                if (whsInventTable.rfDescription2)
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
                }

                if (orderProvider.lineNum(pass) != 0)
                {
                    ret += [this.buildControl(#RFText, orderProvider.lineKey(), orderProvider.lineFieldLabel(), 1, orderProvider.lineNumStr(pass), extendedTypeNum(LineNum), '', 0, false)];
                }
                else
                {
                    WHSDeferredReceivingPolicyId deferredReceivingPolicyId =  pass.exists(#MenuItem) ? WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).DeferredReceivingPolicyId : '';
                    boolean useDeferredReceivingContext = deferredReceivingPolicyId
                        && (WHSDeferredReceivingPolicy::find(deferredReceivingPolicyId).DeferredReceivingPolicySelection != WHSDeferredReceivingPolicySelectionEnum::Never);

                    using (var context = useDeferredReceivingContext ? WHSDeferredReceivingContext::construct() : null)
                    {
                        poLineNum = this.getLineNumByDimCompare();
                    }

                    if (poLineNum)
                    {
                        ret += [this.buildControl(#RFText, orderProvider.lineKey(), orderProvider.lineFieldLabel(), 1, int642str(poLineNum), extendedTypeNum(LineNum), '', 0, false)];
                        orderProvider.setLineNum(pass, poLineNum);
                    }
                    else
                    {
                        inventTable = InventTable::find(pass.parmItemId());
                        ret = this.buildProductDimensionsFromInventTable(ret, inventTable);
                    }
                }
                showExceptionButton = true;
            }
            else
            {
                if (!pass.exists(#Initiation))
                {
                    pass.insert(#Initiation, '1');
                }

                if (this.showLoadIdForOrder())
                {
                    // The 2nd screen (item) is where the flow loops back to after an item has been received,
                    // so it's the logical place for a load receiving complete detour.
                    ret += this.buildLoadIdForOrder();
                }
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, '', orderProvider.orderTypeId(), '', 0)];
        }

        // If purchase order line is already identified, display the product dimensions as read-only
        if (pass.parmItemId() && orderProvider.lineNum(pass) != 0)
        {
            inventTable = InventTable::find(pass.parmItemId());
            WHSReceiptOrderLine inboundOrderLine = orderProvider.orderLine(pass);
            inventDim.InventDimId = inboundOrderLine.InventDimId;
            inventDim = InventDim::find(inboundOrderLine.InventDimId);

            // Product variant could be uniquely identified, do not allow product dimensions to be changed
            ret = this.buildProductDimensionsFromInventDim(ret, inventTable.ItemId, inventDim, false);
        }

        WHSProdQty defaultQty = this.defaultQuantity();

        if (defaultQty && !pass.parmQty())
        {
            pass.parmQty(defaultQty);
        }
        if (!pass.parmSelectedValueUOM())
        {
            pass.parmSelectedValueUOM(WHSUOMSeqGroupTable::getDefaultPurchUOM(inventTable.ItemId));
        }

        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0)];
        ret = this.buildUOM(ret, '', false, false, false, pass.parmSelectedValueUOM());
        
        if (!inventTable.ItemId && pass.parmItemId())
        {
            inventTable = InventTable::find(pass.parmItemId());
        }

        boolean isCWItem = (inventTable.ItemId && PdsGlobal::pdsIsCWItem(inventTable.ItemId));
        InventHandlingUnitId handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId);

        if (isCWItem && WHSInventTable::shouldCaptureAggregateWeight(inventTable.ItemId))
        {
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight), extendedTypeNum(Weight), '', 0)];
        }

        if (pass.parmSelectedValueUOM()
        &&  pass.parmSelectedValueUOM() != handlingUnitId)
        {
            if (!pass.exists(#CurrentUOM) || pass.lookup(#CurrentUOM) != pass.parmSelectedValueUOM())
            {
                pass.insert(#CurrentUOM, pass.parmSelectedValueUOM());
            }
            else if (!pass.exists(#Initiation))
            {
                if (!pass.exists(#SkipASNItemValidation))
                {
                    pass.remove(#CurrentUOM);
                }
            }

            if (orderProvider.lineNum(pass) != 0)
            {
                WHSReceiptOrderLine inboundOrderLine = orderProvider.orderLine(pass);

                if (isCWItem)
                {
                    ret += [this.buildControl(#RFLabel,
                                          'Invent Conversion',
                                          strFmt("1 %1 = %2 %3",
                                                 pass.parmSelectedValueUOM(),
                                                EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                                (inboundOrderLine) ? inboundOrderLine.InventDimId : '',
                                                                                                1,
                                                                                                pass.parmSelectedValueUOM(),
                                                                                                handlingUnitId,
                                                                                                NoYes::No,
                                                                                                NoYes::Yes),
                                                handlingUnitId),
                                          1, '', #WHSRFUndefinedDataType, '', 0)];
                }
                else
                {
                    ret += [this.buildControl(#RFLabel, 'Invent Conversion', strFmt("1 %1 = %2 %3", pass.parmSelectedValueUOM(),
                                                                            InventTableModule::unitConvert(inventTable.ItemId,
                                                                            ModuleInventPurchSales::Invent, pass.parmSelectedValueUOM(), 1, inboundOrderLine.InventDimId),
                                                                            inventTable.inventUnitId()), 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(WHSRFQuantityAndUOM))];
                }
            }
        }
        else
        {
            if (pass.exists(#CurrentUOM))
            {
                pass.remove(#CurrentUOM);
            }
        }

        if (this.displayDispositionCodeControl())
        {
            ret = this.buildDispositon(ret, pass.lookupStr(#Disposition), true, true);
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        if (showExceptionButton)
        {
            ret = this.addCancelButton(ret, 1, true);
            ret = this.addExceptionButton(ret);
            pass.insert(#NoCancelButton, '1');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNumByDimCompare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Purchase Line Number if possible based on Purch Id and Item.
    /// </summary>
    /// <returns>
    /// The Line Number of the purchase order.
    /// </returns>
    public TradeLineNumber getLineNumByDimCompare()
    {
        InventDim           inventDimCriteria;
        InventDimParm       inventDimParm;

        inventDimParm.setAllProductDimensions();
        inventDimParm.InventLocationIdFlag = NoYes::Yes;
        pass.initInventDimFromPassParm(inventDimCriteria, inventDimParm);

        var orderProvider = this.receivingOrderProvider();

        Num orderId = orderProvider.orderNum(pass);
        ItemId  itemId = pass.lookup(#ItemId);

        WHSRFControlData controlData = new WHSRFControlData();
        controlData.parmPass(pass);
            
        InventSite::setReceivingWarehouseCriteria(inventDimCriteria, inventDimParm);

        TradeLineNumber lineNum = controlData.getInboundOrderLineNumByItemInventDimParm(orderId, itemId, inventDimCriteria, orderProvider.inventTransType(), inventDimParm);

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNumByItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the line number tied to a purchase order line depending on ordered or registered qty
    /// </summary>
    /// <param name="_purchId">
    ///    Purchase order number used to return line number
    /// </param>
    /// <param name="_itemId">
    ///    Item id used to return line number
    /// </param>
    /// <returns>
    ///    Purchase order line number
    /// </returns>
    [SysObsolete('Please use WhsrfControlData::getLineNumByItem instead', false, 22\04\2020)]
    public TradeLineNumber getLineNumByItem(PurchId    _purchId,
                                            ItemId     _itemId)
    {
        PurchLine           purchLine;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventQty           purchaseQty;
        TradeLineNumber     ret;
        EcoResReleasedProductUnitConverter  releasedProductUnitConverter;

        select firstonly purchLine
            where purchLine.PurchId                 == _purchId
                && purchLine.ItemId                 == _itemId
            exists join inventTransOrigin
            where inventTransOrigin.InventTransId   == purchLine.InventTransId
            exists join inventTrans
            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                && inventTrans.StatusReceipt        == StatusReceipt::Ordered
                && inventTrans.StatusIssue          == StatusIssue::None
                && inventTrans.Qty                  >  0;

        ret = purchLine.LineNumber;

        if (!ret)
        {
            
            boolean isCWItem = PdsGlobal::pdsIsCWItem(_itemId);
            UnitOfMeasure inventoryHandlingUnit = UnitOfMeasure::findBySymbol(WHSCatchWeightHelper::inventHandlingUnitId(_itemId));
            UnitOfMeasure purchUnit;
            if (isCWItem)
            {
                purchUnit = UnitOfMeasure::findBySymbol(purchLine.pdsCWUnitId());
            }
            else
            {
                purchUnit = UnitOfMeasure::findBySymbol(purchLine.PurchUnit);
            }  
            
            releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

            WHSWorkTable        whsWorkTable;
            WHSWorkLine         whsWorkLine;
            while select LineNumber, PurchQty, PdsCWQty, OverDeliveryPct, PurchUnit from purchLine
                group by LineNumber, PurchQty, PdsCWQty, OverDeliveryPct, PurchUnit
                where purchLine.PurchId                 == _purchId
                    && purchLine.ItemId                 == _itemId
                join inventTransOrigin
                    where inventTransOrigin.InventTransId   == purchLine.InventTransId
                join InventTransOrigin, ItemId, InventDimId, sum(Qty), sum(PdsCWQty) from inventTrans
                    group by InventTransOrigin, ItemId, InventDimId
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                        && inventTrans.StatusReceipt        == StatusReceipt::Registered
                        && inventTrans.StatusIssue          == StatusIssue::None
                        && inventTrans.Qty                  >  0
                exists join whsWorkTable
                    where whsWorkTable.WorkTransType    == WHSWorkTransType::Purch
                        && whsWorkTable.OrderNum        == purchLine.PurchId
                        && whsWorkTable.WorkStatus      == WHSWorkStatus::Cancelled
                exists join whsWorkLine
                    where whsWorkLine.WorkId            == whsWorkTable.WorkId
                        && whsWorkLine.InventTransId    == purchLine.InventTransId
                        && whsWorkLine.ItemId           == _itemId
            {
                InventHandlingQty handlingQty;
                ProductQuantity orderLineQty;

                if (isCWItem)
                {
                    handlingQty = inventTrans.PdsCWQty;
                    orderLineQty = purchLine.PdsCWQty;
                }
                else
                {
                    handlingQty = inventTrans.Qty;
                    orderLineQty = purchLine.PurchQty;
                }
                
                purchaseQty = releasedProductUnitConverter.convert(handlingQty,
                                                inventoryHandlingUnit.RecId,
                                                purchUnit.RecId,
                                                NoYes::No,
                                                inventTrans.ItemId,
                                                inventTrans.InventDimId,
                                                NoYes::No);

                if (purchaseQty <= (orderLineQty * purchLine.OverDeliveryPct / 100 + orderLineQty))
                {
                    ret = purchLine.LineNumber;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchLine</Name>
				<Source><![CDATA[
    [SysObsolete('Logic has been moved to getOrderLine/receivingOrderLine', false, 13\02\2023)]
    protected PurchLine getPurchLine(WHSRFPassthrough _pass)
    {
        return this.receivingOrderLine(_pass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPOReceivingAndPutawayExecuteMode</Name>
				<Source><![CDATA[
    protected WHSWorkExecuteMode getPOReceivingAndPutawayExecuteMode()
    {
        return WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the work process enum value of the current process.
    /// </summary>
    /// <returns>
    /// The work process enum value.
    /// </returns>
    [Hookable(false)]
    protected WhsWorkProcess workProcess()
    {
        return WhsWorkProcess::PurchaseItemReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
	/// <summary>
	/// Constructor method for class instance.
	/// </summary>
	/// <returns>
	/// A newly created instance of <c>WHSWorkExecuteDisplayPOItemReceiving</c> class.
	/// </returns>
    static WHSWorkExecuteDisplayPOItemReceiving construct()
    {
        WHSWorkExecuteDisplayPOItemReceiving   workExecuteDisplayPOItemReceiving;

        workExecuteDisplayPOItemReceiving = new WHSWorkExecuteDisplayPOItemReceiving();

        return workExecuteDisplayPOItemReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProductDimensionsFromInventTable</Name>
				<Source><![CDATA[
    private container buildProductDimensionsFromInventTable(container _con, InventTable _inventTable)
    {
        container   ret = _con;

        var orderProvider = this.receivingOrderProvider();
        InventDim inventDim = WhsWorkExecuteInboundOrderItemReceivingDimensionFinder::getSingleUniqueInventDimForReceipt(
            _inventTable, orderProvider.inventTransType(), orderProvider.orderNum(pass));
      
        if (inventDim)
        {
            ret = this.buildProductDimensionsFromInventDim(ret, _inventTable.ItemId, inventDim, false);
        }
        else
        {
            ret = this.buildProductDimensionsFromInventDim(ret, _inventTable.ItemId, null);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>