<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsFormCtrl_PurchEditLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class works with PurchEditLines form to control disposition status and code
/// </summary>
class PdsFormCtrl_PurchEditLines extends PmfFormCtrl
{
    PurchFormLetter     formLetter;
    PurchEditLinesForm  purchEditLinesForm;
    DocumentStatus      documentStatus;
    boolean             allowFromSpec;
    boolean             hasWhsItem;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSetVendBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the vendor batch info fields can be set on the current <c>PurchParmLine</c> record.
    /// </summary>
    /// <returns>
    ///    true if the fields can be set; otherwise, false.
    /// </returns>
    protected boolean canSetVendBatchInfo()
    {
        PurchParmLine   purchParmLine = buffer as PurchParmLine;

        return purchParmLine.pdsCanSetVendBatchInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called after the form has been initialized
    /// </summary>
    public void initPost()
    {
        boolean enable = (documentStatus == DocumentStatus::PackingSlip);

        if (#PdsShelfEnabled)
        {
            this.visibleFormControl(formControlStr(PurchEditLines,PdsDispositionCode), enable);
            this.visibleFormControl(formControlStr(PurchEditLines,PdsDispositionStatus), enable);
            this.visibleFormControl(formControlStr(PurchEditLines,PdsResetDispositionStatus), enable);
        }
        if (#PdsBatchAttribEnabled)
        {
            this.visibleFormControl(formControlStr(PurchEditLines,PdsBatchAttributesInput), enable);
        }

        if (#PdsVendBatchEnabled)
        {
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(PurchEditLines,PdsVendBatch_PdsCountryOfOrigin1)),
                methodStr(PdsFormCtrl_PurchEditLines,canSetVendBatchInfo),
                ButtonRuleEffectType::AllowEdit);
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(PurchEditLines,PdsVendBatch_PdsCountryOfOrigin2)),
                methodStr(PdsFormCtrl_PurchEditLines,canSetVendBatchInfo),
                ButtonRuleEffectType::AllowEdit);
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(PurchEditLines,PdsVendBatch_PdsVendBatchId)),
                methodStr(PdsFormCtrl_PurchEditLines,canSetVendBatchInfo),
                ButtonRuleEffectType::AllowEdit);
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(PurchEditLines,PurchParmLine_PdsVendBatchDate)),
                methodStr(PdsFormCtrl_PurchEditLines,canSetVendBatchInfo),
                ButtonRuleEffectType::AllowEdit);
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(PurchEditLines,PurchParmLine_PdsVendExpiryDate)),
                methodStr(PdsFormCtrl_PurchEditLines,canSetVendBatchInfo),
                ButtonRuleEffectType::AllowEdit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
/// <summary>
    ///    Instantiates the object.
    /// </summary>
    protected void new()
    {
        hasWhsItem = false;

        super();
        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets purchFormletter class
    /// </summary>
    /// <param name="_formLetter">
    /// PurchFormletter object
    /// </param>
    /// <returns>
    /// returns purchFormLetter object
    /// </returns>
    public PurchFormLetter parmFormLetter(PurchFormLetter _formLetter = null)
    {
        if (!prmisDefault(_formLetter))
        {
            formLetter = _formLetter;
            if (formLetter)
            {
                documentStatus = formLetter.documentStatus();
            }
        }

        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchEditLinesForm</Name>
				<Source><![CDATA[
    public PurchEditLinesForm parmPurchEditLinesForm(PurchEditLinesForm _purchEditLinesForm = purchEditLinesForm)
    {
        purchEditLinesForm = _purchEditLinesForm;

        return purchEditLinesForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQtyChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// method called, when the user changes the value of the 'SpecQty' dropdown
    /// </summary>
    /// <param name="_allowFromSpec">
    /// indicator, if the current setting of the field allows for editing
    /// the quantity fields
    /// </param>
    /// <remarks>
    /// The passed indicator needs to be kept as other update triggers might
    /// occur and the value is required to determine the new state of the controls
    /// </remarks>
    public void specQtyChanged(boolean _allowFromSpec)
    {
        allowFromSpec = _allowFromSpec;
        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
/// <summary>
    /// updates the design of the form
    /// </summary>
    public void updateDesign()
    {
        boolean         isCWItem;
        boolean         attributesInputVisible = false;
        boolean         attributesVisible = false;
        boolean         editReceiveNow;
        boolean         editRemainAfter;
        boolean         isCorrectionOrCancel;
        boolean         enableCWFields;
        boolean         enableNonCWFields;
        PurchParmLine   parmLine = buffer;

        super();

        if (#PdsCatchWeightEnabled)
        {
            if (!purchEditLinesForm)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            isCWItem = PdsGlobal::pdsIsCWItem(parmLine.ItemId);

            editReceiveNow  =    purchEditLinesForm.editReceiveNow()
                              && parmLine.purchLine().isStocked();
            editRemainAfter = purchEditLinesForm.editRemainAfter();
            isCorrectionOrCancel = formLetter.isVersioningCorrectionOrCancel();

            enableCWFields      = isCWItem  && allowFromSpec;
            enableNonCWFields   = !isCWItem && allowFromSpec && !this.parmHasWhsItem();

            // Note that this class extends the field enabling set by PurchEditLines form PurchParmLine.active.
            // Changes other than to catch weight fields might need to be ported to it as well.
            this.enableDSField(fieldNum(PurchParmLine,PdsCWReceiveNow), enableCWFields && !isCorrectionOrCancel);
            this.enableDSField(fieldNum(PurchParmLine,PdsCWRemainBeforeInvent), enableCWFields && !isCorrectionOrCancel);
            this.enableDSField(fieldNum(PurchParmLine,PdsCWRemainAfterInvent), enableCWFields && !isCorrectionOrCancel);

            this.enableDSField(fieldNum(PurchParmLine,ReceiveNow), enableNonCWFields);
            this.enableDSField(fieldNum(PurchParmLine,RemainBefore), enableNonCWFields);
            this.enableDSField(fieldNum(PurchParmLine,RemainAfter), enableNonCWFields && editRemainAfter);
            this.enableDSField(fieldNum(PurchParmLine,InventNow), enableNonCWFields && editReceiveNow);
            this.enableDSField(fieldNum(PurchParmLine,RemainBeforeInvent), enableNonCWFields && editReceiveNow);
            this.enableDSField(fieldNum(PurchParmLine,RemainAfterInvent), enableNonCWFields && editReceiveNow);
        }
        if (#PdsBatchAttribEnabled)
        {
            if (documentStatus == DocumentStatus::PackingSlip)
            {
                if (parmLine.inventDim().InventBatchId)
                {
                    attributesVisible = true;
                }
                else
                {
                    attributesInputVisible = true;
                }
            }

            this.visibleFormControl(formControlStr(PurchEditLines, PdsBatchAttributesInput), attributesInputVisible);
            this.visibleFormControl(formControlStr(PurchEditLines, PdsBatchAttributes), attributesVisible);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PdsFormCtrl_PurchEditLines construct()
    {
        return new PdsFormCtrl_PurchEditLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control from a formrun object
    /// </summary>
    /// <param name="_fr">
    /// the form run object to be controled by the new form control
    /// </param>
    /// <returns>
    /// the new form control object
    /// </returns>
    public static PdsFormCtrl_PurchEditLines newFromForm(FormRun _fr)
    {
        PdsFormCtrl_PurchEditLines  formCtrl;

        formCtrl = PdsFormCtrl_PurchEditLines::construct();
        formCtrl.parmFormRun(_fr);

        return formCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasWhsItem</Name>
				<Source><![CDATA[
    public boolean parmHasWhsItem(boolean _hasWhsItem = hasWhsItem)
    {
        hasWhsItem = _hasWhsItem;
        return hasWhsItem;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>