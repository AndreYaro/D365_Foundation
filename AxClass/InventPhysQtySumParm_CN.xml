<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPhysQtySumParm_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This <c>InventPhysQtySumParm_CN</c> class is used as paremters for the inventory summary.
/// </summary>

class InventPhysQtySumParm_CN
{
    TransDate                   fromDate;
    TransDate                   toDate;
    str                         itemParm;
    str                         itemGroupParm;
    InventDimParm               inventDimParm;
    Query                       conditionQuery;
    boolean                     showEmptyLine;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        fromDate,
        toDate,
        itemParm,
        itemGroupParm,
        inventDimParm,
        showEmptyLine
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDateParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the date parameters.
    /// </summary>

    public void checkDateParm()
    {
        if (toDate == dateNull())
        {
            //current date
            toDate = InventPhysQtySumParm_CN::defaultToDate();
        }

        if (fromDate == dateNull())
        {
            //begin of this month
            fromDate = InventPhysQtySumParm_CN::defaultFromDate();
        }

        if (fromDate > toDate)
        {
            throw error("@GLS63223");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares parameters.
    /// </summary>
    /// <param name="_compareParm">
    /// An instance to be compared.
    /// </param>
    /// <returns>
    /// A container of which the first lement is whether rane parameter is equalling;
    /// the second element is whetehr the inventDimParm is equalling.
    /// </returns>

    public container compareParameter(InventPhysQtySumParm_CN _compareParm)
    {
        InventPhysQtySumParm_CN compare;
        container               result;

        compare = _compareParm;

        if (compare.parmFromDate()      == this.parmFromDate()
            && compare.parmToDate()     == this.parmToDate()
            && compare.parmItem()       == this.parmItem()
            && compare.parmItemGroup()  == this.parmItemGroup())
        {
            result += false;
        }
        else
        {
            result += true;
        }

        if (compare.parmInventDimParm().equal(this.parmInventDimParm()))
        {
            result += false;
        }
        else
        {
            result += true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        conditionQuery = new Query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [conditionQuery.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConditionQuery</Name>
				<Source><![CDATA[
    public Query parmConditionQuery(Query _conditionQuery = conditionQuery)
    {
        conditionQuery = _conditionQuery;

        return conditionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItem</Name>
				<Source><![CDATA[
    public str parmItem(str _itemParm = itemParm)
    {
        itemParm = _itemParm;

        return itemParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemGroup</Name>
				<Source><![CDATA[
    public str parmItemGroup(str _itemGroupParm = itemGroupParm)
    {
        itemGroupParm = _itemGroupParm;

        return itemGroupParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowEmptyLine</Name>
				<Source><![CDATA[
    public Boolean parmShowEmptyLine(Boolean _showEmptyLine = showEmptyLine)
    {
        showEmptyLine = _showEmptyLine;

        return showEmptyLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean     ret;
        Integer     version    = RunBase::getVersion(packedClass);
        container   queryCon;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, queryCon] = packedClass;
                conditionQuery = new Query(queryCon);
                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventPhysQtySumParm_CN construct()
    {
        return new InventPhysQtySumParm_CN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default from date.
    /// </summary>
    /// <returns>
    /// The default from date.
    /// </returns>

    public static TransDate defaultFromDate()
    {
        return LedgerFiscalCalendar::findFirstDayofPeriod(CompanyInfoHelper::fiscalCalendarRecId(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default to date.
    /// </summary>
    /// <returns>
    /// The default to date.
    /// </returns>

    public static TransDate defaultToDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
