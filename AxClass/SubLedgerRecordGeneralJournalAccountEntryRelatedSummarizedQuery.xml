<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubLedgerRecordGeneralJournalAccountEntryRelatedSummarizedQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubLedgerRecordGeneralJournalAccountEntryRelatedSummarizedQuery</c> class creates queries related to the
/// <c>SubledgerJournalTransferCommand</c> class.
/// </summary>
public final class SubLedgerRecordGeneralJournalAccountEntryRelatedSummarizedQuery
{
    private NoYes isCreditValue;
    private TransTxt transactionText;
    private GeneralJournalAccountEntry generalJournalAccountEntry;
    private GeneralJournalEntry generalJournalEntry;
    private SubLedgerJournalAccountEntryView subLedgerJournalAccountEntryView;
    private RefRecId transferIdVal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts summarized records into the <c>GeneralJournalAccountEntry</c> table.
    /// <param name = "_isCreditValue">
    /// Specifies if there is credit value.
    /// </param>
    /// <param name = "_transactionText">
    /// The transaction text.
    /// </param>
    /// <param name = "_transferIdVal">
    /// The reference transfer Id.
    /// </param>
    static internal void insert(
        NoYes _isCreditValue,
        TransTxt _transactionText,
        RefRecId _transferIdVal)
    {
        var subLedgerRecordGeneralJournalAccountEntryRelatedSummarizedQuery = new SubLedgerRecordGeneralJournalAccountEntryRelatedSummarizedQuery();
        subLedgerRecordGeneralJournalAccountEntryRelatedSummarizedQuery.initialize(
            _isCreditValue,
            _transactionText,
            _transferIdVal);

        var generalJournalAccountEntryQueryObject = subLedgerRecordGeneralJournalAccountEntryRelatedSummarizedQuery.getGeneralJournalAccountEntryQueryObject();
        var generalJournalAccountEntryInsertObject = subLedgerRecordGeneralJournalAccountEntryRelatedSummarizedQuery.getGeneralJournalAccountEntryInsertObject();
        generalJournalAccountEntryInsertObject.query(generalJournalAccountEntryQueryObject);
        
        var generalJournalAccountEntryInsertStatement = new SysDaInsertStatement();

        generalJournalAccountEntryInsertStatement.insert(generalJournalAccountEntryInsertObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(
        NoYes _isCreditValue,
        TransTxt _transactionText,
        RefRecId _transferIdVal)
    {
        isCreditValue = _isCreditValue;
        transactionText = _transactionText;
        transferIdVal = _transferIdVal;

        generalJournalAccountEntry.skipDataMethods(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalAccountEntryInsertObject</Name>
				<Source><![CDATA[
    private SysDaInsertObject getGeneralJournalAccountEntryInsertObject()
    {
        var generalJournalAccountEntryInsertObject = new SysDaInsertObject(generalJournalAccountEntry);

        this.addSubLedgerJournalAccountEntryViewFieldsToInsertObject(generalJournalAccountEntryInsertObject);
        this.addLiteralFieldsToInsertObject(generalJournalAccountEntryInsertObject);
        this.addGeneralJournalEntryFieldsToInsertObject(generalJournalAccountEntryInsertObject);

        return generalJournalAccountEntryInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSubLedgerJournalAccountEntryViewFieldsToInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>SubLedgerJournalAccountEntryViewFields</c> table fields to an insert object.
    /// </summary>
    /// <param name = "_generalJournalAccountEntryInsertObject">
    /// The insert object to add the fields to.
    /// </param>
    protected void addSubLedgerJournalAccountEntryViewFieldsToInsertObject(SysDaInsertObject _generalJournalAccountEntryInsertObject)
    {
        _generalJournalAccountEntryInsertObject.fields()
            .add(fieldStr(GeneralJournalAccountEntry, LedgerDimension))
            .add(fieldStr(GeneralJournalAccountEntry, FinTag))
            .add(fieldStr(GeneralJournalAccountEntry, LedgerAccount))
            .add(fieldStr(GeneralJournalAccountEntry, MainAccount))
            .add(fieldStr(GeneralJournalAccountEntry, TransactionCurrencyCode))
            .add(fieldStr(GeneralJournalAccountEntry, IsCorrection))
            .add(fieldStr(GeneralJournalAccountEntry, PostingType))
            .add(fieldStr(GeneralJournalAccountEntry, HistoricalExchangeRateDate))
            .add(fieldStr(GeneralJournalAccountEntry, TransactionCurrencyAmount))
            .add(fieldStr(GeneralJournalAccountEntry, AccountingCurrencyAmount))
            .add(fieldStr(GeneralJournalAccountEntry, ReportingCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLiteralFieldsToInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds literal table fields to an insert object.
    /// </summary>
    /// <param name = "_generalJournalAccountEntryInsertObject">
    /// The insert object to add the fields to.
    /// </param>
    protected void addLiteralFieldsToInsertObject(SysDaInsertObject _generalJournalAccountEntryInsertObject)
    {
        _generalJournalAccountEntryInsertObject.fields()
            .add(fieldStr(GeneralJournalAccountEntry, IsCredit))
            .add(fieldStr(GeneralJournalAccountEntry, Text));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralJournalEntryFieldsToInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>GeneralJournalEntry</c> table fields to an insert object.
    /// </summary>
    /// <param name = "_generalJournalAccountEntryInsertObject">
    /// The insert object to add the fields to.
    /// </param>
    protected void addGeneralJournalEntryFieldsToInsertObject(SysDaInsertObject _generalJournalAccountEntryInsertObject)
    {
        _generalJournalAccountEntryInsertObject.fields().add(fieldStr(GeneralJournalAccountEntry, GeneralJournalEntry));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalAccountEntryQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getGeneralJournalAccountEntryQueryObject()
    {
        var generalJournalAccountEntryQueryObject = this.getSubLedgerJournalAccountEntryViewQueryObject();
        generalJournalAccountEntryQueryObject = this.addLiteralFieldsToQueryObjectProjection(generalJournalAccountEntryQueryObject);

        var generalJournalEntryQueryObject = this.getGeneralJournalEntryQueryObject();

        // join SubLedgerJournalAccountEntryView and GeneralJournalEntry
        var generalJournalEntryWhereClause = new SysDaAndExpression(
        new SysDaEqualsExpression(new SysDaFieldExpression(generalJournalEntry, fieldStr(GeneralJournalEntry, PostingLayer)),
            new SysDaFieldExpression(subLedgerJournalAccountEntryView, fieldStr(SubLedgerJournalAccountEntryView, PostingLayer))),
        new SysDaEqualsExpression(new SysDaFieldExpression(generalJournalEntry, fieldStr(GeneralJournalEntry, AccountingDate)),
            new SysDaFieldExpression(subLedgerJournalAccountEntryView, fieldStr(SubLedgerJournalAccountEntryView, AccountingDate))));
        generalJournalEntryWhereClause = new SysDaAndExpression(generalJournalEntryWhereClause,
            new SysDaEqualsExpression(new SysDaFieldExpression(generalJournalEntry, fieldStr(GeneralJournalEntry, Ledger)),
            new SysDaFieldExpression(subLedgerJournalAccountEntryView, fieldStr(SubLedgerJournalAccountEntryView, Ledger))));
        generalJournalEntryWhereClause = new SysDaAndExpression(generalJournalEntryWhereClause,
        new SysDaEqualsExpression(new SysDaFieldExpression(generalJournalEntry, fieldStr(GeneralJournalEntry, TransferId)),
            new SysDaValueExpression(transferIdVal)));

        generalJournalEntryQueryObject.whereClause(generalJournalEntryWhereClause);
        generalJournalAccountEntryQueryObject.joinClause(SysDaJoinKind::InnerJoin, generalJournalEntryQueryObject);

        return generalJournalAccountEntryQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubLedgerJournalAccountEntryViewQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getSubLedgerJournalAccountEntryViewQueryObject()
    {
        SysDaQueryObject subLedgerJournalAccountEntryViewQueryObject = new SysDaQueryObject(subLedgerJournalAccountEntryView);

        this.addSubLedgerJournalAccountEntryViewFieldsToQueryObjectGroupClause(subLedgerJournalAccountEntryViewQueryObject);
        this.addSubLedgerJournalAccountEntryViewFieldsToQueryObjectProjection(subLedgerJournalAccountEntryViewQueryObject);
        this.addSubLedgerJournalAccountEntryViewFieldsToQueryObjectWhereClause(subLedgerJournalAccountEntryViewQueryObject);

        return subLedgerJournalAccountEntryViewQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLiteralFieldsToQueryObjectProjection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds literal fields to the projection of a query object.
    /// </summary>
    /// <param name = "_literalsQueryObject">
    /// The query object to add the fields to.
    /// </param>
    /// <returns>
    /// The passed in query object with the fields added.
    /// </returns>
    protected SysDaQueryObject addLiteralFieldsToQueryObjectProjection(SysDaQueryObject _literalsQueryObject)
    {
        _literalsQueryObject.Projection().AddValue(isCreditValue);
        _literalsQueryObject.Projection().AddValue(transactionText);

        return _literalsQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSubLedgerJournalAccountEntryViewFieldsToQueryObjectGroupClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>SubledgerJournalAccountEntryTmpDetail</c> group by expression to a query object.
    /// </summary>
    /// <param name = "_subLedgerJournalAccountEntryViewQueryObject">
    /// The query object to add the group by to.
    /// </param>
    protected void addSubLedgerJournalAccountEntryViewFieldsToQueryObjectGroupClause(SysDaQueryObject _subLedgerJournalAccountEntryViewQueryObject)
    {
        _subLedgerJournalAccountEntryViewQueryObject.groupByClause()
            .add(fieldStr(SubLedgerJournalAccountEntryView, LedgerDimension))
            .add(fieldStr(SubLedgerJournalAccountEntryView, FinTag))
            .add(fieldStr(SubLedgerJournalAccountEntryView, LedgerAccount))
            .add(fieldStr(SubLedgerJournalAccountEntryView, MainAccount))
            .add(fieldStr(SubLedgerJournalAccountEntryView, TransactionCurrencyCode))
            .add(fieldStr(SubLedgerJournalAccountEntryView, IsCorrection))
            .add(fieldStr(SubLedgerJournalAccountEntryView, AccountingDate))
            .add(fieldStr(SubLedgerJournalAccountEntryView, PostingLayer))
            .add(fieldStr(SubLedgerJournalAccountEntryView, Ledger))
            .add(fieldStr(SubLedgerJournalAccountEntryView, PostingType))
            .add(fieldStr(SubLedgerJournalAccountEntryView, HistoricalExchangeRateDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSubLedgerJournalAccountEntryViewFieldsToQueryObjectProjection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>SubLedgerJournalAccountEntryViewFields</c> fields to the projection of a query object.
    /// </summary>
    /// <param name = "_subLedgerJournalAccountEntryViewQueryObject">
    /// The query object to add the fields to.
    /// </param>
    protected void addSubLedgerJournalAccountEntryViewFieldsToQueryObjectProjection(SysDaQueryObject _subLedgerJournalAccountEntryViewQueryObject)
    {
        _subLedgerJournalAccountEntryViewQueryObject.projection()
            .add(fieldStr(SubLedgerJournalAccountEntryView, LedgerDimension))
            .add(fieldStr(SubLedgerJournalAccountEntryView, FinTag))
            .add(fieldStr(SubLedgerJournalAccountEntryView, LedgerAccount))
            .add(fieldStr(SubLedgerJournalAccountEntryView, MainAccount))
            .add(fieldStr(SubLedgerJournalAccountEntryView, TransactionCurrencyCode))
            .add(fieldStr(SubLedgerJournalAccountEntryView, IsCorrection))
            .add(fieldStr(SubLedgerJournalAccountEntryView, PostingType))
            .add(fieldStr(SubLedgerJournalAccountEntryView, HistoricalExchangeRateDate))
            .addSum(fieldStr(SubLedgerJournalAccountEntryView, TransactionCurrencyAmount))
            .addSum(fieldStr(SubLedgerJournalAccountEntryView, AccountingCurrencyAmount))
            .addSum(fieldStr(SubLedgerJournalAccountEntryView, SecondaryCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSubLedgerJournalAccountEntryViewFieldsToQueryObjectWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>SubLedgerJournalAccountEntryView</c> where clause expression to a query object.
    /// </summary>
    /// <param name = "_subLedgerJournalAccountEntryViewQueryObject">
    /// The query object to add the where clauses to.
    /// </param>
    protected void addSubLedgerJournalAccountEntryViewFieldsToQueryObjectWhereClause(SysDaQueryObject _subLedgerJournalAccountEntryViewQueryObject)
    {
        _subLedgerJournalAccountEntryViewQueryObject.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(subLedgerJournalAccountEntryView, fieldStr(SubLedgerJournalAccountEntryView, IsTransferredInDetail)),
                new SysDaValueExpression(TransferPolicy::Summarize)),
            new SysDaEqualsExpression(new SysDaFieldExpression(subLedgerJournalAccountEntryView, fieldStr(SubLedgerJournalAccountEntryView, TransferId)),
                new SysDaValueExpression(transferIdVal))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalEntryQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getGeneralJournalEntryQueryObject()
    {
        var generalJournalEntryQueryObject = new SysDaQueryObject(generalJournalEntry);
        this.addGeneralJournalEntryQueryObjectFieldsToQueryObjectProjection(generalJournalEntryQueryObject);

        return generalJournalEntryQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralJournalEntryQueryObjectFieldsToQueryObjectProjection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>GeneralJournalEntry</c> fields to the projection of a query object.
    /// </summary>
    /// <param name = "_generalJournalEntryQueryObject">
    /// The query object to add the fields to.
    /// </param>
    protected void addGeneralJournalEntryQueryObjectFieldsToQueryObjectProjection(SysDaQueryObject _generalJournalEntryQueryObject)
    {
        _generalJournalEntryQueryObject.projection().addMax(fieldStr(GeneralJournalEntry, RecId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>