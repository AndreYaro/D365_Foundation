<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentExternalAgentsPresenterV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A presenter for business document channels.
/// </summary>
internal final class BusinessDocumentExternalAgentsPresenterV2
{
    private BusinessDocumentSubmissionExternal defaultSubmission;    
    private BusinessDocument defaultDocument;
    private BusinessDocument defaultParentDocument;
    private BusinessDocumentExternalAgents defaultAgent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(xArgs _formArgs)
    {
        if (_formArgs != null
            && _formArgs.dataset() == tableNum(BusinessDocumentSubmissionExternal)
            && _formArgs.record()
            && _formArgs.menuItemName() == menuItemDisplayStr(BusinessDocumentExternalAgentExecutionDetailsV2))
        {
            defaultSubmission = _formArgs.record();

            if (defaultSubmission)
            {
                defaultDocument = BusinessDocument::findByUID(defaultSubmission.UID);
                defaultParentDocument = BusinessDocument::find(defaultDocument.ParentBusinessDocument);
                defaultAgent = BusinessDocumentExternalAgents::findByAgentId(defaultDocument.Channel);
            }

            if (!defaultDocument || !defaultParentDocument)
            {
                throw Error(strFmt("@BusinessDocumentSubmissionService:BusDocNotFound", defaultSubmission.UID));
            }

            if (!defaultAgent)
            {
                throw Error(strFmt("@BusinessDocumentSubmissionService:ExternalAgentsDoesntExist" , defaultDocument.Channel));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateData</Name>
				<Source><![CDATA[
    public void updateData()
    {
        BusinessDocumentVendorImportService::importAndUpdateDocuments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExternalAgentsDataSource</Name>
				<Source><![CDATA[
    public void initExternalAgentsDataSource(FormDataSource _externalAgentsDataSource)
    {
        QueryBuildRange typeRange = findOrCreateRange_W(
                _externalAgentsDataSource.queryBuildDataSource(),
                fieldNum(BusinessDocumentExternalAgents, ChannelType));
        typeRange.value(queryValue(BusinessDocumentChannelType::Import));

        if (defaultAgent.RecId != 0)
        {
            QueryBuildRange range = findOrCreateRange_W(
                _externalAgentsDataSource.queryBuildDataSource(),
                fieldNum(BusinessDocumentExternalAgents, RecId));
            range.value(queryValue(defaultAgent.RecId));
            range.status(RangeStatus::Locked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBusinessDocumentChannelExecutionDataSource</Name>
				<Source><![CDATA[
    public void initBusinessDocumentChannelExecutionDataSource(FormDataSource _parentDocumentDataSource)
    {
        QueryBuildRange rangeDirection = findOrCreateRange_W(
                _parentDocumentDataSource.queryBuildDataSource(),
                fieldNum(BusinessDocument, Direction));
        rangeDirection.value(queryValue(BusinessDocumentDirection::Internal));

        if (defaultParentDocument.RecId != 0)
        {
            QueryBuildRange range = findOrCreateRange_W(
                _parentDocumentDataSource.queryBuildDataSource(),
                fieldNum(BusinessDocument, RecId));
            range.value(queryValue(defaultParentDocument.RecId));
            range.status(RangeStatus::Locked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBusinessDocumentIncomingDataSource</Name>
				<Source><![CDATA[
    public void initBusinessDocumentIncomingDataSource(FormDataSource _childDocumentDataSource)
    {
        QueryBuildRange rangeDirection = findOrCreateRange_W(
                _childDocumentDataSource.queryBuildDataSource(),
                fieldNum(BusinessDocument, Direction));
        rangeDirection.value(queryValue(BusinessDocumentDirection::Incoming));

        if (defaultDocument.RecId != 0)
        {
            QueryBuildRange range = findOrCreateRange_W(
                _childDocumentDataSource.queryBuildDataSource(),
                fieldNum(BusinessDocument, RecId));
            range.value(queryValue(defaultDocument.RecId));
            range.status(RangeStatus::Locked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLog</Name>
				<Source><![CDATA[
    public void displayLog(BusinessDocumentSubmissionExternal _submissionExternal)
    {
        if (_submissionExternal)
        {
            for (int i = 1; i <= conLen(_submissionExternal.Log); i++)
            {
                setPrefix("@BusinessDocumentSubmissionService:ElectronicDocumentLog" + ':');
                warning(conPeek(_submissionExternal.Log, i));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>