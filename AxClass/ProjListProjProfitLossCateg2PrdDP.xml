<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjProfitLossCateg2PrdDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjProfitLossCateg3PrdDP</c> class provides data for the
///    <c>ProjListProjProfitLossCategory2ColPeriod</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjStatementCategory)),
    SRSReportParameterAttribute(classstr(ProjListProjProfitLossProjContract))
]
class ProjListProjProfitLossCateg2PrdDP extends SrsReportDataProviderPreProcessTempDB
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    ProjOptionRevenue       revenue;
    ProjOptionOnAcc         onAcc;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    TransDate               ledgerFromDate1;
    TransDate               ledgerToDate1;
    ProjListColumnData      actualVsBudget;
    ForecastModelId         forecastModelId;
    boolean                 skipBlankId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;

    ProjListProjTrans_ProfitLoss    listProjTrans;
    projListProjTrans2Period        listProjTrans2Period;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjProfitLossTmp       projListProjProfitLossTmp;
    projStatement                   period1ProjStatement;
    projStatement                   period2ProjStatement;

    ProjCategoryId          id;
    ProjCategoryName        name;

    QueryRun                queryRun;

    int                     showQtyHour, showTotalCost, showRevenue, showContributionMargin,
                            hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;
    str                     totalCostLabel, period1Label, period2Label, headerLabel;
    AmountMST               period1TotalCost, period2TotalCost, period1Revenue, period2Revenue,
                            period1HourQty, period2HourQty, period1Margin, period2Margin;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amounts that are needed for the report.
    /// </summary>
    void calculate()
    {
        period1ProjStatement.parmCategoryId(id);
        period2ProjStatement.parmCategoryId(id);

        if (amountQty ==ProjAmountQty::Qty ||
            amountQty ==ProjAmountQty::AmountQty)
        {
            period1HourQty     = period1ProjStatement.a310_Cost_Hour_Qty(false,ProjListStateType::ProfitLoss);
            period2HourQty     = period2ProjStatement.a310_Cost_Hour_Qty(false,ProjListStateType::ProfitLoss);
        }

        period1TotalCost   = period1ProjStatement.a300_Total_Cost(false,ProjListStateType::ProfitLoss);
        period1Revenue     = period1ProjStatement.a100_Total_Revenue();
        period1Margin      = period1ProjStatement.a500_Gross_Margin();

        period2TotalCost   = period2ProjStatement.a300_Total_Cost(false,ProjListStateType::ProfitLoss);
        period2Revenue     = period2ProjStatement.a100_Total_Revenue();
        period2Margin      = period2ProjStatement.a500_Gross_Margin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNoId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amounts for the blank IDs.
    /// </summary>
    void calculateNoId()
    {
        period1ProjStatement.parmCategoryId(SysQuery::valueEmptyString());
        period2ProjStatement.parmCategoryId(SysQuery::valueEmptyString());

        period1Revenue     = period1ProjStatement.a100_Total_Revenue();
        period1Margin      = period1ProjStatement.a500_Gross_Margin();
        period1TotalCost   = period1ProjStatement.a305_Cost();

        period2Revenue     = period2ProjStatement.a100_Total_Revenue();
        period2Margin      = period2ProjStatement.a500_Gross_Margin();
        period2TotalCost   = period2ProjStatement.a305_Cost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjProfitLossTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>projListProjProfitLossTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>projListProjProfitLossTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjListProjProfitLossTmp')]
    public ProjListProjProfitLossTmp getProjListProjProfitLossTmp()
    {
        select * from projListProjProfitLossTmp;
        return projListProjProfitLossTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProjListProjTrans</c> class by using the parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans2Period = projListProjTrans2Period::construct(ProjListStateType::ProfitLoss, ProjListStateId::Category);
        listProjTrans = listProjTrans2Period.getProjListProjTrans1();
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans2Period.getProjListProjTrans1());

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);
        listProjTrans.parmTime(time);

        listProjTrans.parmHour(hour);
        listProjTrans.parmExpenses(expenses);
        listProjTrans.parmItem(item);
        listProjTrans.parmRevenue(revenue);
        listProjTrans.parmOnAcc(onAcc);

        listProjTrans2Period.parmPeriod1FromDate(ledgerFromDate);
        listProjTrans2Period.parmPeriod1ToDate(ledgerToDate);
        listProjTrans2Period.parmPeriod2FromDate(ledgerFromDate1);
        listProjTrans2Period.parmPeriod2ToDate(ledgerToDate1);
        listProjTrans2Period.parmColumnData(actualVsBudget);
        listProjTrans2Period.parmForecastModelId(forecastModelId);

        listProjTrans.parmColumnData(actualVsBudget);
        listProjTrans.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmSkipBlank(skipBlankId);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjProfitLossTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListProjProfitLossTmp()
    {
        projListProjProfitLossTmp.clear();

        projListProjProfitLossTmp.Id            = id;
        projListProjProfitLossTmp.IdLabel       = "@SYS69410";
        projListProjProfitLossTmp.Name          = name;

        projListProjProfitLossTmp.QtyHour       = period1HourQty;
        projListProjProfitLossTmp.QtyHour1      = period2HourQty;

        projListProjProfitLossTmp.TotalCost     = listProjTransLayout.showAmountReport(period1TotalCost, showAmount);
        projListProjProfitLossTmp.TotalCost1    = listProjTransLayout.showAmountReport(period2TotalCost, showAmount);

        projListProjProfitLossTmp.Revenue       = listProjTransLayout.showAmountReport(period1Revenue, showAmount);
        projListProjProfitLossTmp.Revenue1      = listProjTransLayout.showAmountReport(period2Revenue, showAmount);

        projListProjProfitLossTmp.ContributionMargin = listProjTransLayout.showAmountReport(period1Margin, showAmount);
        projListProjProfitLossTmp.ContributionMargin1= listProjTransLayout.showAmountReport(period2Margin, showAmount);

        // set labels
        projListProjProfitLossTmp.HeaderLabel     = headerLabel;
        projListProjProfitLossTmp.PeriodLabel     = period1Label;
        projListProjProfitLossTmp.PeriodLabel1    = period2Label;
        projListProjProfitLossTmp.TotalCostLabel  = totalCostLabel;

        // set decimal values
        projListProjProfitLossTmp.DecimalHourQty     = hourQtyDecimals;
        projListProjProfitLossTmp.DecimalValueAdded  = valueAddedDecimals;
        projListProjProfitLossTmp.DecimalGrossMargin = grossMarginDecimals;
        projListProjProfitLossTmp.DecimalAmount      = amountDecimals;

        // set field visibility
        projListProjProfitLossTmp.ShowContributionMargin = showContributionMargin;
        projListProjProfitLossTmp.ShowQtyHour            = showQtyHour;
        projListProjProfitLossTmp.ShowRevenue            = showRevenue;
        projListProjProfitLossTmp.ShowTotalCost          = showTotalCost;

        projListProjProfitLossTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the amounts are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if the values are not zero; otherwise false.
    /// </returns>
    boolean lineValue()
    {
        return  (period1TotalCost != 0) ||
                (period2TotalCost != 0) ||
                (period1Revenue   != 0) ||
                (period2Revenue   != 0) ||
                (period1Margin    != 0) ||
                (period2Margin    != 0) ||
                (period1HourQty   != 0) ||
                (period2HourQty   != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource    queryDataSource;
        QueryBuildRange         rangeHide, rangeDummy;

        queryDataSource     = queryRun.query().dataSourceTable(tablenum(ProjCategory));

        queryDataSource.addSortField(fieldnum(ProjCategory,CategoryId));
        rangeHide           = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
        rangeHide.status(RangeStatus::Hidden);

        if (listProjTrans.parmHour())
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Hour));
        }

        if (listProjTrans.parmExpenses())
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Cost));
        }

        if (listProjTrans.parmItem())
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Item));
        }

        if (listProjTrans.parmRevenue())
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Revenue));
        }

        if (! (listProjTrans.parmHour() || listProjTrans.parmExpenses() || listProjTrans.parmItem() || listProjTrans.parmRevenue()))
        {
            rangeDummy            = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
            rangeDummy.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the category record and calls the <c>calculate</c> method.
    /// </summary>
    void printCategory()
    {
        ProjCategory       projCategoryLocal;

        projCategoryLocal   = queryRun.get(tablenum(ProjCategory));

        id                  = projCategoryLocal.CategoryId;
        name                = projCategoryLocal.Name;

        this.calculate();

        if (! skipZero || (this.lineValue()))
        {
            this.insertProjListProjProfitLossTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. This method will be called by
    ///    SQL Server Reporting Services (SSRS) at run time. This method should compute the data and populate
    ///    the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjProfitLossProjContract contract = this.parmDataContract() as ProjListProjProfitLossProjContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();
        time = contract.parmTime();

        hour = contract.parmHour();
        expenses = contract.parmExpenses();
        item = contract.parmItem();
        revenue = contract.parmRevenue();
        onAcc = contract.parmOnAcc();

        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();
        ledgerFromDate1 = contract.parmLedgerFromDate1();
        ledgerToDate1 = contract.parmLedgerToDate1();

        actualVsBudget = contract.parmActualVsBudget();
        forecastModelId = contract.parmForecastModelIdV2();

        skipBlankId = contract.parmSkipBlankId();
        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();

        this.initProjListTrans();

        totalCostLabel = listProjTrans.setDisplayLabel2PeriodColumn(hour, expenses, item);
        [showQtyHour, showTotalCost, showRevenue, showContributionMargin] = listProjTrans.setDisplayFlags2PeriodColumn(hour, expenses, item, revenue, onAcc, amountQty);

        [hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        period1Label = listProjTrans2Period.formatPeriodLabel("@SYS9308",1,DateFlags::None);
        period2Label = listProjTrans2Period.formatPeriodLabel("@SYS13183",2,DateFlags::None);
        headerLabel = listProjTrans2Period.formatSelection(showAmount);

        period1ProjStatement = projStatement::newProjListProfitLoss(
                                    listProjTrans2Period.getProjListProjTrans1(),
                                    ProjListStateProjType::Project,
                                    projListProjTrans2Period::columnData2ActualBudget(actualVsBudget),
                                    amountQty,
                                    forecastModelId);

        period2ProjStatement = projStatement::newProjListProfitLoss(
                                    listProjTrans2Period.getProjListProjTrans2(),
                                    ProjListStateProjType::Project,
                                    projListProjTrans2Period::columnData2ActualBudget(actualVsBudget),
                                    amountQty,
                                    forecastModelId);

        queryRun = new SysQueryRun(this.parmQuery());

        this.modifyQuery();

        //  print lines with no Id eg. cost and revenue with no Employee
        if (! skipBlankId)
        {
            this.calculateNoId();
            if (this.lineValue())
            {
                this.insertProjListProjProfitLossTmp();
            }
        }
        while (queryRun.next())
        {
            this.printCategory();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>