<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholJournalCalc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AlcoholJournalCalc_RU</c> class performs some calculations and writes trans info
/// </summary>
class AlcoholJournalCalc_RU extends RunBaseBatch implements BatchRetryable
{
    private AlcoholJournalId_RU     journalId;
    private Query                   query;
    private RecordInsertList        recordInsertList;
    private UnitOfMeasureSymbol     unitIdLiter, unitIdDal;
    private InventParameters        inventParameters;
    private AlcoholJournalTable_RU  alcoholJournalTable;

    protected const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    protected void initData()
    {
        QueryBuildRange         qbr;

        inventParameters    = InventParameters::find();
        unitIdLiter         = inventParameters.AlcoholUnitIdDaily_RU;   // liter
        unitIdDal           = inventParameters.AlcoholUnitId_RU;        // dal

        if (! unitIdLiter || ! unitIdDal)
        {
            throw error("@ApplicationSuite_Localization:AlcoholBothUnitDeclaration", '', new SysInfoAction_MenuItemRun_RU(MenuItemType::Display, menuitemDisplayStr(InventParameters)));
        }

        query = AlcoholDeclarationCalc_RU::getDefaultQuery(true);

        qbr = query.dataSourceTable(tableNum(InventTrans)).addRange(fieldNum(InventTrans, DataAreaId));

        qbr.value(strfmt('(((Qty > %1) && (StatusReceipt == %2)) || ((Qty < %3) && (StatusIssue == %4)))',
                         queryValue(0),
                         any2int(StatusReceipt::Purchased),
                         queryValue(0),
                         any2int(StatusIssue::Sold)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, this.parmJournalId()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public AlcoholJournalId_RU parmJournalId(AlcoholJournalId_RU _journalId = journalId)
    {
        journalId = _journalId;
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Add new AlcoholJournalTrans_RU records to recordInsertList
    /// </summary>
    /// <param name="_inventTransOrigin">
    ///    The inventTransOrigin record for find ReferenceCategory
    /// </param>
    /// <param name="_inventTrans">
    ///    Need for calculating quantities
    /// </param>
    /// <param name="_inventTable">
    ///    To find AlcoholProductionTypeId_RU.
    /// </param>
    protected void processInventTrans(InventTransOrigin     _inventTransOrigin,
                                      InventTrans           _inventTrans,
                                      InventTable           _inventTable)
    {
        Branches_RU     branch2;
        boolean         isTransfer = false; // either between branches, or between different types of profile

        if (_inventTrans.isTransfer())
        {
            InventTrans inventTrans2;
            InventDim   inventDim2;

            select firstOnly RecId from inventTrans2
                where inventTrans2.InventTransOrigin == _inventTrans.transferInventTransOrigin().RecId &&
                (   (_inventTrans.Qty > 0 && inventTrans2.Qty < 0)
                 || (_inventTrans.Qty < 0 && inventTrans2.Qty > 0))
            join inventDim2
                where inventDim2.inventDimId == inventTrans2.inventDimId;

            if (inventDim2)
            {
                select firstonly branchId from branch2
                    where branch2.VendAccount == inventDim2.inventLocation().VendAccount
                       && branch2.BranchId != AlcoholJournalTable.BranchId;

                if (branch2)
                {
                    isTransfer = true;
                }

                if (   ! isTransfer
                    && InventProfile_RU::find(_inventTrans.inventDim().InventProfileId_RU).AlcoholActivityType != InventProfile_RU::find(inventDim2.InventProfileId_RU).AlcoholActivityType)
                {
                    isTransfer = true;
                }
            }

            if (! isTransfer)
            {
                return;
            }
        }

        Qty containerCapacity = EcoResProductUnitConverter::convertForReleasedProduct(_inventTable.ItemId,
                                    "",
                                    1,
                                    UnitOfMeasure::unitOfMeasureIdBySymbol(InventTransReference::newFromInventTrans(_inventTrans).unitId()),
                                    UnitOfMeasure::unitOfMeasureIdBySymbol(unitIdLiter),
                                    NoYes::Yes);

        if (inventParameters.AlcoholConsiderStrength_RU)
        {
            containerCapacity = containerCapacity * _inventTable.AlcoholStrength_RU / 100;
        }

        AlcoholJournalTrans_RU alcoholJournalTrans;

        alcoholJournalTrans.clear();
        alcoholJournalTrans.initValue();
        alcoholJournalTrans.JournalId               = this.parmJournalId();
        alcoholJournalTrans.TransDate               = _inventTrans.DateFinancial;
        alcoholJournalTrans.ItemId                  = _inventTrans.ItemId;
        alcoholJournalTrans.AlcoholProductionTypeId = _inventTable.AlcoholProductionTypeId_RU;
        alcoholJournalTrans.ContainerCapacity       = containerCapacity;
        alcoholJournalTrans.ContainerCapacityUnitId = unitIdLiter;
        alcoholJournalTrans.ContainerQty            = abs(_inventTrans.qtyUnit());
        alcoholJournalTrans.TotalQty                = UnitOfMeasureConverter::convert(alcoholJournalTrans.ContainerCapacity * alcoholJournalTrans.ContainerQty,
                                                                                      UnitOfMeasure::unitOfMeasureIdBySymbol(unitIdLiter),
                                                                                      UnitOfMeasure::unitOfMeasureIdBySymbol(unitIdDal),
                                                                                      NoYes::Yes);
        alcoholJournalTrans.TotalQtyUnitId          = unitIdDal;
        alcoholJournalTrans.Direction               = _inventTrans.Qty > 0 ? InventDirection::Receipt : InventDirection::Issue;

        if (alcoholJournalTrans.Direction == InventDirection::Receipt)
        {
            if (_inventTransOrigin.ReferenceCategory == InventTransType::Sales)
            {
                alcoholJournalTrans.CounteragentType = AlcoholJournalCounteragentType_RU::Cust;
                alcoholJournalTrans.CounteragentId   = _inventTransOrigin.custVendAC();
                alcoholJournalTrans.InvoiceDate      = _inventTrans.DateFinancial;
                alcoholJournalTrans.InvoiceId        = _inventTrans.InvoiceId;
            }
            else if (_inventTransOrigin.ReferenceCategory == InventTransType::Purch)
            {
                alcoholJournalTrans.CounteragentType = AlcoholJournalCounteragentType_RU::Vend;
                alcoholJournalTrans.CounteragentId   = _inventTransOrigin.custVendAC();
                alcoholJournalTrans.InvoiceDate      = _inventTrans.DateFinancial;
                alcoholJournalTrans.InvoiceId        = _inventTrans.InvoiceId;
            }
            else if (isTransfer && branch2)
            {
                alcoholJournalTrans.CounteragentType = AlcoholJournalCounteragentType_RU::SeparateDivision;
                alcoholJournalTrans.CounteragentId   = branch2.BranchId;
            }
        }
        else
        {
            switch (_inventTransOrigin.ReferenceCategory)
            {
                case InventTransType::Purch:
                    alcoholJournalTrans.RecordContent = "@ApplicationSuite_Localization:AlcoholReturnToVendor";
                    break;

                case InventTransType::Sales:
                    alcoholJournalTrans.RecordContent = "@ApplicationSuite_Localization:AlcoholReturnSales";
                    break;

                case InventTransType::InventCounting:
                    alcoholJournalTrans.RecordContent = "@SYS2828";
                    break;

                default:
                    alcoholJournalTrans.RecordContent = isTransfer ? "@ApplicationSuite_Localization:AlcoholTransfer" :
                                                        ReturnActionDefaults::find(ModuleInventPurchSales::Purch, _inventTrans.inventJournalTrans().ScrapTypeId_RU).Txt;
            }
        }

        recordInsertList.add(alcoholJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTable</Name>
				<Source><![CDATA[
    protected void processTable()
    {
        QueryRun                queryRun;
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        InventTable             inventTable;
        AlcoholJournalTrans_RU  alcoholJournalTrans;

        delete_from alcoholJournalTrans
            where alcoholJournalTrans.JournalId == this.parmJournalId();

        findOrCreateRange_W(query.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, DateFinancial), queryRange(alcoholJournalTable.fromDate(), alcoholJournalTable.toDate()));
        findOrCreateRange_W(query.dataSourceTable(tableNum(Branches_RU)), fieldNum(Branches_RU, BranchId), queryValue(alcoholJournalTable.BranchId));
        findOrCreateRange_W(query.dataSourceTable(tableNum(InventProfile_RU)), fieldNum(InventProfile_RU, AlcoholActivityType), queryValue(AlcoholActivityType_RU::Retail));

        queryRun = new queryRun(query);

        while (queryRun.next())
        {
            inventTransOrigin   = queryRun.get(tableNum(InventTransOrigin));
            inventTrans         = queryRun.get(tableNum(InventTrans));
            inventTable         = queryRun.get(tableNum(InventTable));

            this.processInventTrans(inventTransOrigin, inventTrans, inventTable);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the main logic of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        #xppTexts

        setprefix(AlcoholJournalCalc_RU::description());

        try
        {
            this.initData();

            ttsbegin;

            setPrefix("@SYS8993" + #space + this.parmJournalId());
            alcoholJournalTable = AlcoholJournalTable_RU::find(this.parmJournalId(), true);
            if (alcoholJournalTable)
            {
                recordInsertList = new RecordInsertList(tableNum(AlcoholJournalTrans_RU));
                this.processTable();
                alcoholJournalTable.Status = AlcoholDeclarationStatus_RU::Calculated;
                alcoholJournalTable.update();
                info("@GLS103738");
            }
            else
            {
                throw error(strfmt("@GLS104417", this.parmJournalId()));
            }

            ttscommit;

        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = conpeek(packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, journalId] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AlcoholJournalCalc_RU construct()
    {
        return new AlcoholJournalCalc_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Text description of the class which is shown in the dialog.
    /// </summary>
    /// <returns>
    ///   Text description of the class.
    /// </returns>
    public static Name description()
    {
        return '@ApplicationSuite_Localization:AlcoholCalculationJournal';
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args   _args)
    {
        AlcoholJournalCalc_RU   runClass = AlcoholJournalCalc_RU::construct();
        AlcoholJournalTable_RU  alcoholJournalTableCaller;
        FormDataSource          formDataSource;

        if (   ! _args
            || !_args.record()
            ||  _args.dataset() != tablenum(AlcoholJournalTable_RU))
        {
            throw error("@GLS104275");
        }

        alcoholJournalTableCaller = _args.record();

        runClass.getLast();
        runClass.parmJournalId(alcoholJournalTableCaller.JournalId);
        runClass.saveLast();

        if (runClass.prompt())
        {
            runClass.runOperation();

            formDataSource =_args.record().dataSource();

            if (formDataSource)
            {
                formDataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>