<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalEntryTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalEntryTransferController</c> class is used to transfer a single <c>SubledgerJournalEntry</c> record.
/// </summary>
class SubledgerJournalEntryTransfer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SubledgerJournalEntryTransfer::executeTransfer(args.record());
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a transfer of a journal entry.
    /// </summary>
    /// <param name = "_subledgerJournalEntryNotTransferred">
    /// The journal entry to be transferred.
    /// </param>
    public static void executeTransfer(SubledgerJournalEntryNotTransferred _subledgerJournalEntryNotTransferred)
    {
        SubledgerJournalTransferOperation   subledgerJournalTransferOperation;
        SubledgerJournalTransferRequest     subledgerJournalTransferRequest;
        AccountingEvent                     accountingEvent;
        SourceDocument                      sourceDocument;
        Object                              object;
        SourceDocumentClassId               sourceDocumentClassId;
        
        accountingEvent = AccountingEvent::find(_subledgerJournalEntryNotTransferred.AccountingEvent);
        sourceDocument = SourceDocument::newFromSourceDocumentHeader(SourceDocumentHeader::find(accountingEvent.SourceDocumentHeader));
        object = sourceDocument as Object;
        sourceDocumentClassId = classIdGet(object);

        subledgerJournalTransferRequest = new SubledgerJournalTransferRequest();
        subledgerJournalTransferOperation = new SubledgerJournalTransferOperation();

        subledgerJournalTransferRequest.parmledgerId(_subledgerJournalEntryNotTransferred.Ledger);
        subledgerJournalTransferRequest.parmAccountingEventId(_subledgerJournalEntryNotTransferred.AccountingEvent);
        subledgerJournalTransferRequest.parmDoSummarization(NoYes::No);
        subledgerJournalTransferRequest.parmFiscalCalendarPeriod(_subledgerJournalEntryNotTransferred.FiscalCalendarPeriod);
        subledgerJournalTransferRequest.parmSourceDocumentType(sourceDocumentClassId);
        subledgerJournalTransferRequest.parmSourceDocumentRelationType(_subledgerJournalEntryNotTransferred.SourceRelationType);
        subledgerJournalTransferRequest.parmSubledgerJournalTransferMode(SubledgerJournalTransferMode::Synchronous);

        subledgerJournalTransferOperation.executeTransfer(subledgerJournalTransferRequest);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>