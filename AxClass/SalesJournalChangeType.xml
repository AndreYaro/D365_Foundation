<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesJournalChangeType</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       SalesJournalChangeType
extends     RunBaseBatch implements BatchRetryable
{
    SalesType           salesType;
    QueryRun            journal;
    Query               query;

    DialogField         fieldContinue;
    SalesTable          salesTable;
    DialogRunbase       dialog;

    #define.CurrentVersion(1)
    #LOCALMACRO.ParmList
        SalesType
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private void buildQuery()
    {
        query = new Query();

        query.addDataSource(tableNum(SalesTable));
        QueryBuildDataSource queryData = query.dataSourceTable(tableNum(SalesTable));
        QueryBuildRange queryRange = queryData.addRange(fieldNum(SalesTable, SalesType));
        queryRange.value(queryValue(SalesType::Journal));
        queryRange.status(RangeStatus::Locked);

        queryData.addRange(fieldNum(SalesTable, SalesId));
        queryData.addRange(fieldNum(SalesTable, CreatedDateTime));

        journal = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class two times with the
    /// same parameters is not always possible. If the <c>RunBaseBatch.canGoBatch</c> method returns false,
    /// this method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        FormRun formRun = classfactory.createQueryForm(this);

        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.getLast();
        this.buildQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#ParmList,journal.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesType</Name>
				<Source><![CDATA[
    public SalesType parmSalesType(SalesType _salesType = salesType)
    {
        salesType = _salesType;
        return salesType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void  run()
    {
        #OCCRetryCount

        journal.query().dataSourceTable(tableNum(SalesTable)).update(true);
        journal.query().dataSourceTable(tableNum(SalesTable)).concurrencyModel(ConcurrencyModel::Optimistic);

        while (journal.next())
        {
            salesTable = journal.get(tableNum(SalesTable));

            setPrefix(#PreFixField(SalesTable, SalesId));

            try
            {
                ttsbegin;

                salesTable.SalesType = salesType;

                if (!salesTable.validateWrite())
                {
                    throw Exception::Error;
                }

                salesTable.write();
                ttscommit;
            }

            catch (Exception::Deadlock)
            {
                salesTable = SalesTable::find(salesTable.SalesId, true, ConcurrencyModel::Optimistic);
                retry;
            }

            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        salesTable = SalesTable::find(salesTable.SalesId, true, ConcurrencyModel::Optimistic);
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }

            catch (Exception::Error)
            {
                checkFailed("@SYS25904");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version = conPeek(_packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#ParmList,packedQuery] = _packedClass;
                if (packedQuery)
                {
                    journal = new QueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesJournalChangeType  construct()
    {
        return new SalesJournalChangeType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS6146";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  _args)
    {
        if (!_args)
        {
            throw error("@SYS25407");
        }

        SalesJournalChangeType salesJournalChangeType = SalesJournalChangeType::newSalesJournalChangeType(_args.parmEnum());

        if (salesJournalChangeType.prompt())
        {
            salesJournalChangeType.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesJournalChangeType</Name>
				<Source><![CDATA[
    static SalesJournalChangeType newSalesJournalChangeType(SalesType _salesType)
    {
        SalesJournalChangeType salesJournalChangeType = SalesJournalChangeType::construct();

        salesJournalChangeType.parmSalesType(_salesType);
        return salesJournalChangeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>