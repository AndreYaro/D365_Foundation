<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransLinkCorrectionDeferrals_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TransLinkCorrectionDeferrals_RU extends TransLinkCorrection_RU
{
    RDeferralsTrans rDeferralsTransSource, rDeferralsTransStorno, rDeferralsTransCorrective;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    public void createTransLink(TransDate _accountingDate)
    {
        TransLink_RU            transLink;
        FromDate                fromDate;
        ToDate                  toDate;
        ;

        super(_accountingDate);

        if (rDeferralsTransCorrective.TransDate > _accountingDate)
        {
            setprefix("@GLS104327" + "@GLS111192" + "@GLS102908" + rDeferralsTransCorrective.DeferralsBookId);
            throw error(strfmt("@SYS91558", "@SYS67", "@GLS111794"));
        }

        switch (transLinkType)
        {
            case TransLinkType_RU::Storno:
                TransLink_RU::createReversal(rDeferralsTransCorrective.TableId, rDeferralsTransCorrective.StornoRecId, rDeferralsTransCorrective.RecId);
                rDeferralsTransSource = RDeferralsTrans::find(rDeferralsTransCorrective.StornoRecId);
                break;

            case TransLinkType_RU::Correction:

                fromDate    = LedgerFiscalCalendar::findPeriodStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(), rDeferralsTransCorrective.TransDate);
                toDate      = rDeferralsTransCorrective.TransDate;

                select firstonly rDeferralsTransStorno
                    order by TransDate desc, RecId desc
                    where rDeferralsTransStorno.DeferralsId      == rDeferralsTransCorrective.DeferralsId           &&
                          rDeferralsTransStorno.DeferralsBookId  == rDeferralsTransCorrective.DeferralsBookId       &&
                          rDeferralsTransStorno.TransDate        >= fromDate                                        &&
                          rDeferralsTransStorno.TransDate        <= toDate                                          &&
                          rDeferralsTransStorno.TransType        == rDeferralsTransCorrective.TransType             &&
                          rDeferralsTransStorno.StornoRecId      != 0
                join rDeferralsTransSource
                    where rDeferralsTransSource.RecId            == rDeferralsTransStorno.StornoRecId               &&
                          rDeferralsTransSource.StornoRecId      == rDeferralsTransStorno.RecId;

                if (rDeferralsTransStorno)
                {
                    transLink = TransLink_RU::findSec(rDeferralsTransSource.TableId, rDeferralsTransSource.RecId);
                    if (!transLink)
                    {
                        rDeferralsTransStorno = null;
                        rDeferralsTransSource = null;
                    }
                }
                else
                {
                    select firstonly rDeferralsTransSource
                        order by TransDate desc, RecId desc
                        where rDeferralsTransSource.DeferralsId      == rDeferralsTransCorrective.DeferralsId           &&
                              rDeferralsTransSource.DeferralsBookId  == rDeferralsTransCorrective.DeferralsBookId       &&
                              rDeferralsTransSource.TransDate        >= fromDate                                        &&
                              rDeferralsTransSource.TransDate        <= toDate                                          &&
                              rDeferralsTransSource.TransType        == rDeferralsTransCorrective.TransType             &&
                              rDeferralsTransSource.StornoRecId      == 0                                               &&
                              rDeferralsTransSource.RecId            != rDeferralsTransCorrective.RecId;

                    if (rDeferralsTransSource)
                    {
                        transLink = TransLink_RU::findSec(rDeferralsTransSource.TableId, rDeferralsTransSource.RecId);
                        if (!transLink)
                        {
                            TransLink_RU::create(rDeferralsTransSource.TableId, rDeferralsTransSource.RecId, rDeferralsTransSource.RecId);
                        }
                    }
                }

                TransLink_RU::create(rDeferralsTransCorrective.TableId,
                                     rDeferralsTransSource.RecId != 0 ? rDeferralsTransSource.RecId : rDeferralsTransCorrective.RecId,
                                     rDeferralsTransCorrective.RecId,
                                     TransLinkType_RU::Correction);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcname()));
        }

        sourceTrans = rDeferralsTransSource;
        stornoTrans = rDeferralsTransStorno;
        this.updateTransLinkAccountingDate(rDeferralsTransSource.getAccountingDate(), rDeferralsTransStorno.getAccountingDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    protected void initValue(Common _correctiveTrans)
    {
        super(_correctiveTrans);
        rDeferralsTransCorrective  = _correctiveTrans;
        transLinkType = rDeferralsTransCorrective.StornoRecId != 0 ? TransLinkType_RU::Storno : transLinkType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerCorrection</Name>
				<Source><![CDATA[
    protected void postLedgerCorrection(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalTrans              journalTrans;
        LedgerJournalTrans_RDeferrals   journalTrans_RDeferrals;

        while select journalTrans group by Voucher, TransDate
            where journalTrans.JournalNum == _ledgerJournalTable.JournalNum
        join CorrectedPeriod from journalTrans_RDeferrals group by CorrectedPeriod
            where journalTrans_RDeferrals.RefRecId == journalTrans.RecId
               && (journalTrans_RDeferrals.CorrectedPeriod || (journalTrans_RDeferrals.ToFromRecId && journalTrans_RDeferrals.TransType == RDeferralsTransType::WritingOff))
        {
            while select rDeferralsTransCorrective
                where rDeferralsTransCorrective.Voucher   == journalTrans.Voucher
                   && ((rDeferralsTransCorrective.TransDate == journalTrans.TransDate                 && !journalTrans_RDeferrals.CorrectedPeriod) ||
                       (rDeferralsTransCorrective.TransDate == journalTrans_RDeferrals.CorrectedPeriod    && journalTrans_RDeferrals.CorrectedPeriod))
            {
                setprefix("@GLS104327" + "@GLS111192" + "@GLS102908" + rDeferralsTransCorrective.DeferralsBookId);
                this.initValue(rDeferralsTransCorrective);
                this.createLedgerTransLink();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
