<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjActivitySchedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Description : Used to schedule new created or modified project activity
class PSAProjActivitySchedule
{
    container           m_cnDateTimeScope, m_cnDateTimeScopeDefault, m_cnDateTimeScopeEx;
    PSAActivitySetup    m_tActivity, //the activity processed by tha class
                        m_tActivityModified; //the acitivity  modified by the user which causes this shcedule.
    #TimeConstants
    #define.sequence1(1)
    #define.sequence2(2)
    #define.sequence3(3)
    #define.sequence4(4)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDate</Name>
				<Source><![CDATA[
    // Description    : schedule the activity if its constraint type is FNET(finish no earlier than).
    public boolean calcDate(date _startDate, date _endDate)
    {
        container cnDateTime,cnDateTime1,cnDateTimeFrom;
        timeOfDay tmTime,tmTimeFrom,tmTimeTo;
        date      dDate,dDateFrom,dDateTo;
        boolean   ret = true;

        if (_startDate || _endDate)
        {
            if (_startDate)
            {
                cnDateTime1 = PSAProjActivitySchedule::borderDay(SchedDirection::Forward,
                                                                 m_tActivity.CalendarId, _startDate);
                if (!cnDateTime1)
                {
                    return false;
                }
                tmTimeFrom = conpeek(cnDateTime1,#sequence2);
                dDateFrom  = conpeek(cnDateTime1,#sequence1);
            }
            else
            {
                cnDateTime = PSAProjActivitySchedule::borderDay(SchedDirection::Backward,
                                                                m_tActivity.CalendarId, _endDate);
                if (!cnDateTime)
                {
                    return false;
                }
                tmTime = conpeek(cnDateTime,#sequence2);
                dDate  = conpeek(cnDateTime,#sequence1);

                cnDateTimeFrom = PSAProjActivitySchedule::calculateDate(SchedDirection::Backward,
                                                                        m_tActivity.CalendarId, dDate, m_tActivity.ActivityDuration - 1, tmTime);
                if (!cnDateTimeFrom)
                {
                    return false;
                }
                tmTimeFrom = conpeek(cnDateTimeFrom,#sequence3);
                dDateFrom  = conpeek(cnDateTimeFrom,#sequence2);
            }
            tmTimeTo = maxInt();
            dDateTo  = maxDate();
            m_cnDateTimeScopeDefault =[dDateFrom,tmTimeFrom];
            ret = this.calculateIntersection(this.parmDateTimeScope(),[dDateFrom, tmTimeFrom, dDateTo, tmTimeTo]);
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateIntersection</Name>
				<Source><![CDATA[
    // Description    : calcualte the 2 container's intersection ,the intersection will be stored in the activity datetime scope
    private boolean calculateIntersection(container _c1,container _c2)
    {
        container cnIntersection,cnDatetime;
        boolean   ret =true;

        if (PSAProjActivitySchedule::compareDateTime(conpeek(_c1,#sequence1),conpeek(_c1,#sequence2),conpeek(_c2,#sequence1),conpeek(_c2,#sequence2)))
        {
            cnIntersection = cnIntersection + [conpeek(_c1,#sequence1),conpeek(_c1,#sequence2)];
        }
        else
        {
            cnIntersection = cnIntersection + [conpeek(_c2,#sequence1),conpeek(_c2,#sequence2)];
        }

        if (!PSAProjActivitySchedule::compareDateTime(conpeek(_c1,#sequence3),conpeek(_c1,#sequence4),conpeek(_c2,#sequence3),conpeek(_c2,#sequence4)))
        {
            cnIntersection = cnIntersection + [conpeek(_c1,#sequence3),conpeek(_c1,#sequence4)];
        }
        else
        {
            cnIntersection = cnIntersection + [conpeek(_c2,#sequence3),conpeek(_c2,#sequence4)];
        }

        //avoid the end of the day and the start of the next day are intersected.
        if ((!WorkCalendarDate::calcDefinedSeconds(m_tActivity.CalendarId,
                                                 conpeek(cnIntersection,#sequence3),
                                                 conpeek(cnIntersection,#sequence4),
                                                 #secondsPerDay,
        true,false)/#secondsPerHour) &&
           ((conpeek(cnIntersection,#sequence3)!= datenull()) && (conpeek(cnIntersection,#sequence3)!= datemax())))
        {
            cnDateTime = PSAProjActivitySchedule::borderDay(SchedDirection::Forward,m_tActivity.CalendarId,conpeek(cnIntersection,#sequence3) + 1);
            if ((conpeek(cnIntersection,#sequence1) == conpeek(cnDateTime,#sequence1)) &&
                (conpeek(cnIntersection,#sequence2) == conpeek(cnDateTime,#sequence2)))
            {
                cnIntersection = [conpeek(cnDateTime,#sequence1),conpeek(cnDateTime,#sequence2),conpeek(cnDateTime,#sequence1),conpeek(cnDateTime,#sequence2)];
            }
        }

        if (!PSAProjActivitySchedule::compareDateTime(conpeek(cnIntersection,#sequence3),conpeek(cnIntersection,#sequence4),conpeek(cnIntersection,#sequence1),conpeek(cnIntersection,#sequence2)))
        {
            ret =  checkFailed(strfmt("@PSA2590",m_tActivity.ActivityNumber));
        }
        else
        {
            this.parmDateTimeScope(cnIntersection);
            if (PSAProjActivitySchedule::compareDateTime(conPeek(m_cnDateTimeScopeDefault,#sequence1),conPeek(m_cnDateTimeScopeDefault,#sequence2),
                conPeek(m_cnDateTimeScope,#sequence3),conPeek(m_cnDateTimeScope,#sequence4)))
            {
                m_cnDateTimeScopeDefault =[conPeek(m_cnDateTimeScope,#sequence3),conPeek(m_cnDateTimeScope,#sequence4)];
            }
            else
            {
                if (!PSAProjActivitySchedule::compareDateTime(conPeek(m_cnDateTimeScopeDefault,#sequence1),conPeek(m_cnDateTimeScopeDefault,#sequence2),
                conPeek(m_cnDateTimeScope,#sequence1),conPeek(m_cnDateTimeScope,#sequence2)))
                {
                    m_cnDateTimeScopeDefault =[conPeek(m_cnDateTimeScope,#sequence1),conPeek(m_cnDateTimeScope,2)];
                }
                else
                {
                    if (conPeek(m_cnDateTimeScope,#sequence1) == datenull())
                    {
                        return ret;
                    }
                    m_cnDateTimeScopeDefault =[conPeek(m_cnDateTimeScope,#sequence1),conPeek(m_cnDateTimeScope,2)];
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTimeScope</Name>
				<Source><![CDATA[
    public container parmDateTimeScope(container  _dateTimeScope = m_cnDateTimeScope)
    {
        m_cnDateTimeScope = _dateTimeScope;

        return m_cnDateTimeScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTimeScopeEx</Name>
				<Source><![CDATA[
    public container parmDateTimeScopeEx(container  _dateTimeScope = m_cnDateTimeScopeEx)
    {
        m_cnDateTimeScopeEx = _dateTimeScope;

        return m_cnDateTimeScopeEx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleProjActivity</Name>
				<Source><![CDATA[
    // Description    : the main procedure for scheduling the activity
    public  boolean scheduleProjActivity(PSAActivitySetup _psaActivitySetup, Date _startDate, date _endDate = dateNull())
    {
        boolean     ret = true;
        container   dateTimeScopeEx = [DateNull(),0,MaxDate(),MaxInt()];

        m_tActivity = _psaActivitySetup;
        m_tActivityModified = m_tActivity.data();

        this.parmDateTimeScope(dateTimeScopeEx);

        ret = this.calcDate(_startDate, _endDate);

        if (ret)
        {
            this.setDateTime();
        }
        else
        {
            _psaActivitySetup.ActivityDuration = 1;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateTime</Name>
				<Source><![CDATA[
    // Description    : determine the activity date,time according to the time scope.
    private boolean setDateTime()
    {
        container   cnDateTime,cnDateTime1;
        timeOfDay   tmTimeFrom,tmTimeTo;
        date        dDateFrom,dDateTo;
        boolean     ret = true;

        dDateFrom  = conPeek(m_cnDateTimeScope,#sequence1);
        tmTimeFrom = conPeek(m_cnDateTimeScope,#sequence2);

        //avoid to set the end of a day as the  start time
        if ((!WorkCalendarDate::calcDefinedSeconds(m_tActivity.CalendarId,
                                                  dDateFrom,
                                                  tmTimeFrom,
                                                  #secondsPerDay,
        true,false)/#secondsPerHour) &&
            (m_tActivity.ActivityDuration))
        {
            cnDateTime1 = PSAProjActivitySchedule::borderDay(SchedDirection::Forward,m_tActivity.CalendarId, dDateFrom + 1);
            tmTimeFrom  = conpeek(cnDateTime1,#sequence2);
            dDateFrom   = conpeek(cnDateTime1,#sequence1);
        }

        cnDateTime = PSAProjActivitySchedule::calculateDate(SchedDirection::Forward,
                                                            m_tActivity.CalendarId, dDateFrom, m_tActivity.ActivityDuration - 1, tmTimeFrom);

        if (!cnDateTime)
        {
            return false;
        }
        tmTimeTo = conpeek(cnDateTime,#sequence3);
        dDateTo  = conpeek(cnDateTime,#sequence2);

        tmTimeFrom = PSAProjActivitySchedule::schedTime(SchedDirection::Backward, m_tActivity.CalendarId, dDateFrom,0);
        if (m_tActivity.ActivityDuration)
        {
            tmTimeTo = PSAProjActivitySchedule::schedTime(SchedDirection::Forward, m_tActivity.CalendarId, dDateTo,0);
        }
        else
        {
            tmTimeTo = tmTimeFrom;
        }
        m_tActivity.PSASchedStart       = dDateFrom;
        m_tActivity.PSASchedFromTime    = tmTimeFrom;
        m_tActivity.PSASchedEnd         = dDateTo;
        m_tActivity.PSASchedToTime      = tmTimeTo;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>borderDay</Name>
				<Source><![CDATA[
    // Description    : calculate the border working  time of a day
    public static container borderDay(SchedDirection    _schedDirection,
                                      CalendarId        _calendarId,
                                      TransDate         _transDate,
                                      timeOfDay         _startTime = 0
                                     )
    {
        #define.loopBreak(365)

        integer         iLoopCounter;
        SchedFromDate   dSchedStartDate;
        SchedFromTime   tmSchedStartTime;
        Hours           rWorkHours = 0;

        dSchedStartDate = _transDate;

        if (_transDate == dateMax())
        {
            return [maxDate(),maxInt(),rWorkHours];
        }

        if (_startTime == 0)
        {
            do
            {
                if (!_calendarId || !WorkCalendarDate::checkExist(_calendarId, dSchedStartDate))
                {
                    return connull();
                }

                if (WorkCalendarDate::isDateOpen(_calendarId, dSchedStartDate))
                {
                    if (WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                            dSchedStartDate,
                                                            0,
                                                            #secondsPerDay,
                    true,false)/#secondsPerHour)
                    {
                        break;
                    }
                }
                iLoopCounter++;

                if (_schedDirection == SchedDirection::Forward)
                {
                    dSchedStartDate++;
                }
                else
                {
                    dSchedStartDate--;
                }
            }
            while (iLoopCounter < #loopBreak);

            rWorkHours = WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                              dSchedStartDate,
                                                              0,
                                                              #secondsPerDay,
            true,false)/#secondsPerHour;

            tmSchedStartTime = PSAProjActivitySchedule::schedTime(_schedDirection,_calendarId, dSchedStartDate, rWorkHours);
        }
        else
        {
            do
            {
                if (!_calendarId || !WorkCalendarDate::checkExist(_calendarId, dSchedStartDate))
                {
                    return connull();
                }

                if (WorkCalendarDate::isDateOpen(_calendarId, dSchedStartDate))
                {
                    break;
                }

                iLoopCounter++;

                if (_schedDirection == SchedDirection::Forward)
                {
                    dSchedStartDate++;
                }
                else
                {
                    dSchedStartDate--;
                }
            }
            while (iLoopCounter < #loopBreak);

            if (_schedDirection == SchedDirection::Backward)
            {
                rWorkHours = WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                                  dSchedStartDate,
                                                                  0,
                                                                  #secondsPerDay,
                true,false)/#secondsPerHour
                            - WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                                   dSchedStartDate,
                                                                   _startTime,
                                                                   #secondsPerDay,
                true,false)/#secondsPerHour;
            }
            else
            {
                rWorkHours = WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                                  dSchedStartDate,
                                                                  _startTime,
                                                                  #secondsPerDay,
                true,false)/#secondsPerHour;
            }
            tmSchedStartTime = _startTime;
        }

        return [dSchedStartDate, 0, rWorkHours];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDate</Name>
				<Source><![CDATA[
    // Description    : calculate the date according the border day ,time,the duration.
    public static container calculateDate(SchedDirection _schedDirection,
                                   CalendarId     _calendarId,
                                   date           _startDate,
                                   Real          _duration,
                                   timeOfDay      _startTime = 0
                                  )
    {
        date                    dStartDate,dEndDate;
        timeOfDay               tmStartTime;
        timeOfDay               tmEndTime;
        Hours                   rRemaHours;
        container               cnBorderDay,cnScheDate;

        if (_startDate != maxDate() && _startDate != DateNull() )
        {
            cnBorderDay = PSAProjActivitySchedule::borderDay(_schedDirection,_calendarId,_startDate,_startTime);

            if (!cnBorderDay)
            {
                return connull();
            }

            [dStartDate,tmStartTime,rRemaHours]= cnBorderDay;

            if (!_duration)
            {
                return [0,dStartDate,0];
            }

            cnScheDate = PSAProjActivitySchedule::schedDate(_schedDirection, dStartDate, rRemaHours, _duration, _calendarId);

            if (!cnScheDate)
            {
                return connull();
            }

            [dEndDate, tmEndTime,rRemaHours] = cnScheDate;

            return [0,dEndDate,0];
        }
        else
        {
            return [0,_startDate,0];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareDateTime</Name>
				<Source><![CDATA[
    // Description    : compare two sets of day and time
    public static Noyes compareDateTime(date _date,timeOfDay _time,date _date1,timeOfDay _time1)
    {
        if (_date != _date1)
        {
            return(_date > _date1);
        }
        else
        {
            return(_time >= _time1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSchedule</Name>
				<Source><![CDATA[
    // Description    :  create a new instance of the class PSAProjActivitySchedule
    public static PSAProjActivitySchedule  newSchedule()
    {
        return new PSAProjActivitySchedule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedDate</Name>
				<Source><![CDATA[
    // Description    : calculate the date according the from day ,the remaining time of the day,the duration.
    public static container schedDate(SchedDirection      _schedDirection,
                               SchedFromDate       _schedDateFrom,
                               Hours               _remaHoursOnEndDate,
                               Real               _task,
                               CalendarId          _calendarId)
    {
        #TimeConstants
        SchedDate     dSchedEndDate;
        Hours         rRemainHours = 0;
        Hours         rRemaHoursOnEndDate;
        Real          rTask;

        dSchedEndDate       = _schedDateFrom;
        rRemaHoursOnEndDate = _remaHoursOnEndDate;
        rTask               = _task ;
        if (rRemaHoursOnEndDate == 0)
        {
            if (_schedDirection == SchedDirection::Forward)
            {
                dSchedEndDate++;
            }
            else
            {
                dSchedEndDate--;
            }
        }
        while (rtask > 0)
        {
            if (_schedDirection == SchedDirection::Forward)
            {
                dSchedEndDate++;
            }
            else
            {
                dSchedEndDate--;
            }
            if (WorkCalendarDate::isDateOpen(_calendarId,dSchedEndDate))
            {
                rtask--;
            }
        }
        return  [dSchedEndDate, 0, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedTime</Name>
				<Source><![CDATA[
    // Description    : calculate the end time according the working day ,the remaining time of the day.
    public static timeOfDay schedTime(SchedDirection    _schedDirection,
                                      CalendarId        _calendarId,
                                      TransDate         _transDate,
                                      Hours             _remaHours)
    {
        #TimeConstants
        WorkCalendarDateLine    tWorkCalendarDateLine;
        Hours                   rHoursPerDay, rOccuHours;
        timeOfDay               tmToTime;

        rHoursPerDay = WorkCalendarDate::calcDefinedSeconds(_calendarId,
                                                            _transDate,
                                                            0,
                                                            #secondsPerDay,
        true,false)/#secondsPerHour;
        rOccuHours = rHoursPerDay - _remaHours;

        if (_schedDirection == SchedDirection::Forward)
        {
            while select tWorkCalendarDateLine
                index CalendarDateFromIdx
                where tWorkCalendarDateLine.CalendarId       == _calendarId   &&
                      tWorkCalendarDateLine.TransDate        == _transDate
            {
                if ((tWorkCalendarDateLine.toTime - tWorkCalendarDateLine.FromTime)/#secondsPerHour >= rOccuHours)
                {
                    tmToTime = real2int(tWorkCalendarDateLine.FromTime + rOccuHours * #secondsPerHour);
                    break;
                }
                else
                {
                    rOccuHours = rOccuHours - (tWorkCalendarDateLine.toTime - tWorkCalendarDateLine.FromTime)/#secondsPerHour;
                }
            }
        }
        else
        {
            while select toTime,FromTime from tWorkCalendarDateLine
                order by FromTime desc
                where tWorkCalendarDateLine.CalendarId       == _calendarId   &&
                      tWorkCalendarDateLine.TransDate        == _transDate
            {
                if ((tWorkCalendarDateLine.toTime - tWorkCalendarDateLine.FromTime)/#secondsPerHour >= rOccuHours)
                {
                    tmToTime = real2int(tWorkCalendarDateLine.toTime - rOccuHours * #secondsPerHour);
                    break;
                }
                else
                {
                    rOccuHours = rOccuHours - (tWorkCalendarDateLine.toTime - tWorkCalendarDateLine.FromTime)/#secondsPerHour;
                }
            }
        }
        return tmToTime;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>