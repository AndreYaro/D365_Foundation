<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPaymentAdjustments_Charge</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRPaymentAdjustments</c> class is used to adjust payment records if there is an extra charge.
/// </summary>
class McrPaymentAdjustments_Charge extends MCRPaymentAdjustments
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAmtToCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts payments on refund checks and refund electronic checks.
    /// </summary>
    /// <param name="_amtChanged">
    /// The amount to charge.
    /// </param>
    /// <param name="_mcrCustPaymTable">
    /// The payment transaction reord.
    /// </param>
    /// <returns>
    /// The amount to be charged.
    /// </returns>
    /// <remarks>
    /// The amount that the payment can be adjusted by is only the amount that has not
    /// been posted.
    /// </remarks>
    AmountCur getAmtToCharge(AmountCur _amtChanged, MCRCustPaymTable _mcrCustPaymTable)
    {
        AmountCur amtToCharge = 0;

        amtToCharge = abs(_mcrCustPaymTable.getUnpostedAmount());

        if (amtToCharge > _amtChanged)
        {
            amtToCharge = _amtChanged;
        }

        return amtToCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variable with the passed in information.
    /// </summary>
    /// <param name="_beforePaymAmount">
    /// The payment amount prior to the change.
    /// </param>
    /// <param name="_salesTable">
    /// The sales transaction on which the change occurred.
    /// </param>
    /// <param name="_mcrSalesOrderTotals">
    /// The totals of the transaction.
    /// </param>
    /// <param name="_currentOrderAmt">
    /// The current order amount.
    /// </param>
    /// <param name="_amtChanged">
    /// The changed amount.
    /// </param>
    /// <remarks>
    /// If a valid sales buffer is not passed or the class is not instantiated and an error will be issued.
    /// </remarks>
    void new(AmountCur              _beforePaymAmount,
             SalesTable             _salesTable,
             MCRSalesOrderTotals    _mcrSalesOrderTotals,
             AmountCur              _currentOrderAmt,
             AmountCur              _amtChanged)
    {
        super(_beforePaymAmount, _salesTable, _mcrSalesOrderTotals, _currentOrderAmt, _amtChanged);
        paymAdjustmentType = MCRPaymAdjustmentType::Charge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCCAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts any credit card payment on
    /// the order to account for the amount that chaned.
    /// </summary>
    /// <param name="_amtChanged">
    /// Amount left to be charged.
    /// </param>
    /// <returns>
    /// The amount left to be charged.
    /// </returns>
    public AmountCur processCCAdjustments(AmountCur _amtChanged)
    {
        boolean                  hasSettled = true;
        MCRCustPaymTable         mcrCustPaymTable;
        AmountCur                amtToCharge = 0;
        Amount                   amtChangedLocal = _amtChanged;

        while select forupdate mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == salesTable.TableId
               && mcrCustPaymTable.RefRecId == salesTable.RecId
               && mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard
        {
            if (amtChangedLocal)
            {
                if (mcrCustPaymTable.Amount < 0)
                {
                    amtToCharge = this.getAmtToCharge(amtChangedLocal, mcrCustPaymTable);
                }
                if (salesTable.mcrIsOrderInFuture())
                {
                    // The payment was not submitted due to the future order status
                    // adjust the cust payment record
                    ttsbegin;
                        mcrCustPaymTable.Amount += amtChangedLocal;
                        mcrCustPaymTable.update();
                    ttscommit;

                    amtChangedLocal = 0;
                }
                else
                {
                    MCRCustPaymTable::writePaymentAdjustmentSales(mcrCustPaymTable,
                                                                amtChangedLocal,
                                                                paymAdjustmentType);
                    amtChangedLocal = 0;
                }
            }
        }

        return amtChangedLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCheckCashAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an on account payment to cover the amount changed.
    /// </summary>
    /// <param name="_amtChanged">
    /// The amount changed.
    /// </param>
    /// <returns>
    /// A zero is returned.
    /// </returns>
    public AmountCur processCheckCashAdjustments(AmountCur _amtChanged)
    {
        CustTable custTable = CustTable::find(salesTable.InvoiceAccount);

        if (_amtChanged
            && custTable.mcrCustTable().AllowOnAccount)
        {
           MCRCustPaymTable::createPrepayAdjustments(salesTable, _amtChanged, paymAdjustmentType);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGiftCardPaymAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the gift card amount.
    /// </summary>
    /// <param name="_amtChanged">
    /// The amount changed on the transaction.
    /// </param>
    /// <returns>
    /// The adjusted amount.
    /// </returns>
    /// <remarks>
    /// If gift card has enough amount to take the
    /// additional charge, then add on to the gift card.
    /// </remarks>
    public AmountCur processGiftCardPaymAdjustments(AmountCur _amtChanged)
    {
        AmountCur           giftCardBalance;
        AmountCur           amtToCharge = 0;
        AmountCur           amtChangedLocal = _amtChanged;
        MCRCustPaymTable    mcrCustPaymTable;
        RetailGiftCardTable retailGiftCardTable;

        // Add gift cert to the gift card check
        while select forupdate Amount from mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == salesTable.TableId
               && mcrCustPaymTable.RefRecId == salesTable.RecId
               && mcrCustPaymTable.CustPaymType == MCRCustPaymType::GiftCard
            join RecId from retailGiftCardTable
                where retailGiftCardTable.RecId == mcrCustPaymTable.PaymInfoRecId
                   && retailGiftCardTable.TableId == mcrCustPaymTable.PaymInfoTableId
        {
            if (amtChangedLocal)
            {
                // Change the MCRGiftCert find to take a decrypted serial number
                giftCardBalance = mcrCustPaymTable.getGiftCardAvailableBalance();

                // If the amount changed is less than the remaining balance
                // then change the payment by the amount changed, otherwise
                // set it to the gift card balance.
                if (amtChangedLocal <= giftCardBalance)
                {
                    amtToCharge = amtChangedLocal;
                }
                else
                {
                    amtToCharge = giftCardBalance;
                }

                mcrCustPaymTable.Amount += amtToCharge;
                amtChangedLocal -= amtToCharge;

                ttsbegin;
                mcrCustPaymTable.update();
                ttscommit;
            }
        }

        return amtChangedLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMultipleAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for prepays before adjusting a transaction with multiple payments.
    /// </summary>
    /// <remarks>
    ///  For a given sales order if multiple payments exist, we need to
    ///  examine the payment records to see if there are prepays. If prepays
    ///  exist and an on account record exists, refunds or charges can be
    ///  adjsuted to this "on_account" record. If there are no prepay and no
    ///  on accounts, then if the payments have credit cards, then the
    ///  charges or refunds need to happen agains the right credit card,
    ///  proper authorization records need to be created in order to have
    ///  the order be submittable.
    /// </remarks>
    public void processMultipleAdjustments()
    {
        AmountCur       amountToCharge;
        CustTable       custTable = CustTable::find(salesTable.InvoiceAccount);

        amountToCharge = amtChanged;

        // Return merge - adjust on acct as a last result
        // for returns - a charge equates to a reduction in
        // the return credit and therefore the first thing we
        // should do is reduce transfer of any cash back to the
        // customer.
        if (salesTable.SalesType == SalesType::ReturnItem)
        {
            amountToCharge = this.processRefundCheckAdjustments(amountToCharge);
            amountToCharge = this.processGiftCardPaymAdjustments(amountToCharge);
            amountToCharge = this.processCCAdjustments(amountToCharge);
            amountToCharge = this.processOnAcctAdjustments(amountToCharge);
        }
        else
        {
            amountToCharge = this.processGiftCardPaymAdjustments(amountToCharge);
            amountToCharge = this.processCCAdjustments(amountToCharge);
            amountToCharge = this.processOnAcctAdjustments(amountToCharge);
            amountToCharge = this.processRefundCheckAdjustments(amountToCharge);
        }

        if (amountToCharge
            && custTable.mcrCustTable().AllowOnAccount)
        {
            MCRCustPaymTable::createPrepayAdjustments(salesTable, amountToCharge, paymAdjustmentType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOnAcctAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts any on account payment on
    /// the order to account for the amount that chaned.
    /// </summary>
    /// <param name="_amtChanged">
    /// Amount left to be charged.
    /// </param>
    /// <returns>
    /// The amount left to be charged.
    /// </returns>
    public AmountCur processOnAcctAdjustments(AmountCur _amtChanged)
    {
        MCRCustPaymTable mcrCustPaymTable;
        AmountCur        amtChangedLocal = _amtChanged;

        select firstonly forupdate Amount from  mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == salesTable.TableId
               && mcrCustPaymTable.RefRecId == salesTable.RecId
               && mcrCustPaymTable.CustPaymType == MCRCustPaymType::OnAccount;

        if (mcrCustPaymTable)
        {
            ttsbegin;
            mcrCustPaymTable.Amount += amtChangedLocal;
            mcrCustPaymTable.update();
            ttscommit;

            amtChangedLocal = 0;
        }

        return amtChangedLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPaymentAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the payments with changes if any.
    /// </summary>
    /// <remarks>
    ///  This method is the driver for adjusting the payments. First
    ///  we figure out if the payment on the sales order is a single payment
    ///  or if it is a multiple payment. Once this decision is made
    ///  appropriate methods are called to either charge the customer for
    ///  the additional amounts or refund the customer.
    ///  Transactions should be settled once the payments are adjusted.
    ///  Check the overallPaymStatus using the cust paymen totals
    ///  If the overall payment status is pending - set the sales order
    ///  status to Pending.
    /// </remarks>
    public void processPaymentAdjustments()
    {
        MCRCustPaymTable    mcrCustPaymTable;
        MCRCustPaymTotals   mcrCustPaymTotals;
        boolean             callSetTransStatus = true;

        super();

        mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(salesTable.RecId, salesTable.TableId, true);

        // Only call payment adjustments if payments exist.
        if (mcrCustPaymTable)
        {
            // check if the change in amount is under the max, if it is skip this all together
            // While testing this issue found that we were using the over under
            // payment instead of the penny difference parameter. Only if the difference
            // is below the penny limit we should not adjust the payments otherwise we should.
            if (abs(amtChanged) > CustParameters::find().MaxMSTDiff)
            {
                // Check here to make sure that the custPaymRecord has not been adjusted and is
                // equal to the previous payment amount.
                if (this.hasMultiplePayments())
                {
                    this.processMultipleAdjustments();
                }
                else
                {
                    this.processSinglePaymAdjustments(mcrCustPaymTable.CustPaymType, mcrCustPaymTable);
                }
            }

            // Return Call Center Sales Order that pay with Gift Card
            // will refund the amount after posted invoice
            // unless AdvanceCredit is checked in sales head.
            if (salesTable.SalesType != SalesType::ReturnItem
                || salesTable.SalesStatus == SalesStatus::Invoiced
                || mcrCustPaymTable.CustPaymType != MCRCustPaymType::GiftCard
                || salesTable.isAdvanceCreditOnReturn())
            {
                mcrCustPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId, salesTable.RecId);
                mcrCustPaymTotals.processPayments(MCRProcessPaymAction::PostOnlyPrepays);
            }
            callSetTransStatus = false;
        }

        // If no payments exist still set the status of the related order
        if (callSetTransStatus)
        {
            mcrCustPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId, salesTable.RecId);
            mcrCustPaymTotals.setTransStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRefundCheckAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts any on refund check payment on
    /// the order to account for the amount that chaned.
    /// </summary>
    /// <param name="_amtChanged">
    /// Amount left to be charged.
    /// </param>
    /// <returns>
    /// The amount left to be charged.
    /// </returns>
    public AmountCur processRefundCheckAdjustments(AmountCur _amtChanged)
    {
        AmountCur            amtToCharge = 0;
        MCRCustPaymTable     mcrCustPaymTable;
        MCRRCSettlementTable mcrrcSettlementTable;
        MCRRCAuthTable       mcrrcAuthTable;

        while select forupdate mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == salesTable.TableId
               && mcrCustPaymTable.RefRecId == salesTable.RecId
               && mcrCustPaymTable.CustPaymType == MCRCustPaymType::RefundCheck
               && mcrCustPaymTable.Status != MCRCustPaymStatus::Paid
        {
            if (_amtChanged && mcrCustPaymTable.Amount < 0)
            {
                amtToCharge = this.getAmtToCharge(_amtChanged, mcrCustPaymTable);

                if (amtToCharge)
                {
                    ttsbegin;
                    mcrrcSettlementTable = MCRRCSettlementTable::findByCustPaymRecID(mcrCustPaymTable.RecId, true);
                    // Changed to avoid to allow the if to be true if the status is approved or pending
                    if (mcrrcSettlementTable
                        && mcrrcSettlementTable.mcrrcSettlementStatus == MCRRCSettlementStatus::PendingApproval
                        || mcrrcSettlementTable.mcrrcSettlementStatus == MCRRCSettlementStatus::Approved)
                    {
                        // If the refund has already been approved and the refund amount is increasing, set it back
                        // to pending approval so it goes back to the workbench
                        if (mcrrcSettlementTable.mcrrcSettlementStatus == MCRRCSettlementStatus::Approved
                            && amtToCharge < 0)
                        {
                            // Auth record are created upon approval (or decline) of the refund to keep a history.
                            // In the case of an adjustment we need to delete the auth and reset the record
                            //      back to pending approval (a new auth record will be created upon approval)
                            mcrrcSettlementTable.mcrrcSettlementStatus = MCRRCSettlementStatus::PendingApproval;
                            mcrrcAuthTable = MCRRCAuthTable::findByCustPaymRecId(mcrCustPaymTable.RecId, true);
                            if (mcrrcAuthTable)
                            {
                                mcrrcAuthTable.delete();
                            }
                        }

                        mcrrcSettlementTable.mcrSettlementAmount -= amtToCharge;
                        if (mcrrcSettlementTable.mcrSettlementAmount != 0)
                        {
                            mcrrcSettlementTable.update();
                        }
                        else
                        {
                            mcrrcSettlementTable.delete();
                        }
                    }
                    mcrCustPaymTable.Amount += amtToCharge;
                    mcrCustPaymTable.update();
                    ttscommit;
                }
            }
        }

        return _amtChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSinglePaymAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes sales orders for adjustments if a single payment exists.
    /// </summary>
    /// <param name="_mcrCustPaymType">
    /// The payment type on the transaction.
    /// </param>
    /// <param name="_mcrCustPaymTable">
    /// The payment record on the transaction.
    /// </param>
    /// <remarks>
    ///  Both charges and refunds are processed.The logic is as follows:
    ///     If the adjustment is a charge
    ///     - Check if payment type is not on account, if not on account
    ///     but has a prepay record, then insert a record against the
    ///     default adjustment record specified by the user in the AR parameters
    ///     This will be most likely an "On_Acct" record type.
    ///     - If single payment is "On_Acct" then just adjust the amount accordingly
    ///     The same logic applies for refunds.
    /// </remarks>
    public void processSinglePaymAdjustments(MCRCustPaymType _mcrCustPaymType,
                                        MCRCustPaymTable _mcrCustPaymTable)
    {
        switch (_mcrCustPaymType)
        {
            case MCRCustPaymType::OnAccount:
                // Call the on account processing routine
                this.processOnAcctAdjustments(amtChanged);
                break;
            case MCRCustPaymType::CreditCard:
                this.processCCAdjustments(amtChanged);
                break;
            case MCRCustPaymType::GiftCard:
                this.processGiftCardPaymAdjustments(amtChanged);
                break;
            case MCRCustPaymType::RefundCheck:
                this.processRefundCheckAdjustments(amtChanged);
                break;
            case MCRCustPaymType::Cash:
            case MCRCustPaymType::Check:
                this.processCheckCashAdjustments(amtChanged);
                break;
            default:
                this.processSinglePaymAdjustmentsDefault(_mcrCustPaymType, _mcrCustPaymTable);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSinglePaymAdjustmentsDefault</Name>
				<Source><![CDATA[
   /// <summary>
   /// Processes sales orders for adjustments if additional element value specified for <c>MCRCustPaymType</c> enum.
   /// </summary>
   /// <param name = "_mcrCustPaymType">
   /// The payment type on the transaction.
   /// </param>
   /// <param name = "_mcrCustPaymTable">
   /// The payment record on the transaction.
   /// </param>
    [Replaceable]
    protected  void processSinglePaymAdjustmentsDefault(MCRCustPaymType _mcrCustPaymType, MCRCustPaymTable _mcrCustPaymTable)
    {
        error("@MCR28859");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>