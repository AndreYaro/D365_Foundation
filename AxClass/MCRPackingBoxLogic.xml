<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPackingBoxLogic</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRPackingBoxLogic</c> class handles logic related to boxing.
/// </summary>
abstract class MCRPackingBoxLogic
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBoxes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates <c>MCRPackingBoxTransRecords</c> containing how to box the specified <paramref name="_parmId" />.
    /// </summary>
    /// <param name="_parmId">
    ///     The <c>ParmId</c> from the <c>SalesParmTable</c>.
    /// </param>
    /// <param name="_tableRefId">
    ///     The <c>TradeLineRefId</c> to use in the packing logic.
    /// </param>
    /// <param name="_showOversizeItems">
    ///     Indicates whether to show oversized items.
    /// </param>
    public abstract void createBoxes(ParmId _parmId, TradeLineRefId _tableRefId, boolean _showOversizeItems = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>warnOversizeItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Warns the user for each unboxable item in the specified <c>TmpMCRPackingBoxStage</c> buffer.
    /// </summary>
    /// <param name="_packingBoxStageUnboxable">
    ///     The <c>TmpMCRPackingBoxStage</c> buffer to warn the user about.
    /// </param>
    public void warnOversizeItems(TmpMCRPackingBoxStage _packingBoxStageUnboxable)
    {
        setPrefix("@MCR23392");
        setPrefix("@MCR23340");

        while select _packingBoxStageUnboxable
        {
            warning(_packingBoxStageUnboxable.caption());
            info(strFmt("@MCR23450", _packingBoxStageUnboxable.InventQty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of the <c>MCRPackingBoxLogic</c>.
    /// </summary>
    /// <returns>
    ///     An instance of the <c>MCRPackingBoxLogic</c> class to use for packing logic.
    /// </returns>
    public static MCRPackingBoxLogic construct()
    {
        return new MCRPackingBoxLogic_Simple();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxLength</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the longest length of the three input parameters.
    /// </summary>
    /// <param name="_length1">
    ///     The first length to check.
    /// </param>
    /// <param name="_length2">
    ///     The second length to check.
    /// </param>
    /// <param name="_length3">
    ///     The third length to check.
    /// </param>
    /// <returns>
    ///     The maximum of the three input lengths.
    /// </returns>
    public static real getMaxLength(real _length1, real _length2, real _length3)
    {
        return max(_length1,
                   max(_length2, _length3));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackingBoxLogicEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a <c>boolean</c> value indicating if the packing box logic is enabled.
    /// </summary>
    /// <returns>
    ///     true if packing box logic is enabled; otherwise, false.
    /// </returns>
    public static boolean isPackingBoxLogicEnabled()
    {
        InventParameters inventParameters;

        inventParameters = InventParameters::find();

        if (inventParameters.MCRUseBoxingLogic)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForBoxName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prompts the user for a box name.
    /// </summary>
    /// <param name="_caller">
    ///     The caller of the prompt for box name form.
    /// </param>
    /// <param name="_defaultBoxName">
    ///     The default box name to display.
    /// </param>
    /// <returns>
    ///     An <c>Args</c> object containing the results of the form.
    /// </returns>
    public static Args promptForBoxName(Object _caller, MCRPackingBoxName _defaultBoxName = '')
    {
        Dialog dialog;
        DialogField boxName;
        Args args = new Args();

        dialog = new Dialog("@MCR23171", _caller);

        boxName = dialog.addField(extendedTypeStr(MCRPackingBoxName));
        boxName.value(_defaultBoxName);

        dialog.run();

        args.parmEnumType(enumNum(NoYes));
        // Return whether the user clicked Cancel (false) or OK (true).
        args.parmEnum(dialog.closedOk());
        args.parm(boxName.value());

        return args;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>