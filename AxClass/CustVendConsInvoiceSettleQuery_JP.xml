<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendConsInvoiceSettleQuery_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class delegates the actions on Consolidation Invoice settle query.
/// </summary>
class CustVendConsInvoiceSettleQuery_JP extends RunBase
{
    FromDate                fromDate;
    ToDate                  toDate;
    CustVendConsId_JP       consId;
    CustVendConsDay_JP      consDay;

    DialogRunbase           dialog;

    DialogField             dialogFrom;
    DialogField             dialogTo;
    DialogField             dialogConsId;
    DialogField             dialogConsDay;

    Args                    args;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        fromDate,
        toDate,
        consId,
        consDay
    #endmacro
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00011] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        dialog = Dialog::newFormnameRunbase(formstr(CustVendConsInvoiceSettleQuery_JP), this);
        dialog = this.dialogInternal(dialog);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>CustVendConsInvoiceSettleQuery_JP</c> class fields with the values passed in.
    /// </summary>
    /// <param name="_fromDate">
    /// The beginning of invoice date.
    /// </param>
    /// <param name="_toDate">
    /// The end of invoice date.
    /// </param>
    /// <param name="_consId">
    /// The specified consolidated invoice.
    /// </param>
    /// <param name="_consDay">
    /// The specified consolidation day.
    /// </param>
    public void initParameters(
        FromDate            _fromDate,
        ToDate              _toDate,
        CustVendConsId_JP   _consId,
        CustVendConsDay_JP  _consDay)
    {
        this.parmFromDate(_fromDate);
        this.parmToDate(_toDate);
        this.parmConsId(_consId);
        this.parmConsDay(_consDay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args  _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsDay</Name>
				<Source><![CDATA[
    public CustVendConsDay_JP parmConsDay(CustVendConsDay_JP  _consDay = consDay)
    {
        consDay = _consDay;
        return consDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsId</Name>
				<Source><![CDATA[
    public CustConsId_JP parmConsId(CustConsId_JP  _consId = consId)
    {
        consId = _consId;
        return consId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate  _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate  _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Version         version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustVendConsInvoiceSettleQuery_JP   consInvoiceSettleQuery = new CustVendConsInvoiceSettleQuery_JP();
        FormDataSource                      formDataSource;
        Query                               query;

        if (args
            && args.caller())
        {
            consInvoiceSettleQuery.parmArgs(args);
            if (consInvoiceSettleQuery.prompt())
            {
                formDataSource = FormDataUtil::getFormDataSource(args.record());
                query          = formDataSource.query();
                switch (args.caller().name())
                {
                    case formstr(CustOpenTrans)         :
                        query = CustVendConsInvoiceSettleQuery_JP::updateQuery(
                            query,
                            tablenum(CustTrans),
                            tablenum(CustInvoiceJour),
                            tablenum(CustTable),
                            tablenum(CustConsInvoice_JP),
                            consInvoiceSettleQuery.parmFromDate(),
                            consInvoiceSettleQuery.parmToDate(),
                            consInvoiceSettleQuery.parmConsId(),
                            consInvoiceSettleQuery.parmConsDay());
                        break;

                    case formstr(VendOpenTrans)         :
                        query = CustVendConsInvoiceSettleQuery_JP::updateQuery(
                            query,
                            tablenum(VendTrans),
                            tablenum(VendInvoiceJour),
                            tablenum(VendTable),
                            tablenum(VendConsInvoice_JP),
                            consInvoiceSettleQuery.parmFromDate(),
                            consInvoiceSettleQuery.parmToDate(),
                            consInvoiceSettleQuery.parmConsId(),
                            consInvoiceSettleQuery.parmConsDay());
                        break;

                    default              :
                        throw error(Error::wrongUseOfFunction(funcname()));
                }
                formDataSource.query(query);
                formDataSource.executeQuery();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates query for filetering open transactions with consolidated invoice.
    /// </summary>
    /// <param name="_query">
    /// Original query which to be updated.
    /// </param>
    /// <param name="_custVendTrans">
    /// The table id for <c>CustTrans</c> or <c>VendTrans</c>.
    /// </param>
    /// <param name="_custVendInvoiceJour">
    /// The table id for <c>CustInvoiceJour</c> or <c>VendInvoiceJour</c>.
    /// </param>
    /// <param name="_custVendTable">
    /// The table id for <c>CustTable</c> or <c>VendTable</c>.
    /// </param>
    /// <param name="_custVendConsInvoice">
    /// The table id for <c>CustConsInvoice_JP</c> or <c>VendConsInvoice_JP</c>.
    /// </param>
    /// <param name="_fromDate">
    /// The beginning of invoice date.
    /// </param>
    /// <param name="_toDate">
    /// The end of invoice date.
    /// </param>
    /// <param name="_consId">
    /// The specified consolidated invoice.
    /// </param>
    /// <param name="_consDay">
    /// The specified consolidation day.
    /// </param>
    /// <returns>
    /// Updated Query for filtering open transactions with consolidated invoice.
    /// </returns>
    public static Query updateQuery(
        Query               _query,
        tableId             _custVendTrans,
        tableId             _custVendInvoiceJour,
        tableId             _custVendTable,
        tableId             _custVendConsInvoice,
        FromDate            _fromDate,
        ToDate              _toDate,
        CustVendConsId_JP   _consId,
        CustVendConsDay_JP  _consDay)
    {
        QueryBuildDataSource    qbdsCustVendTrans;
        QueryBuildDataSource    qbdsCustVendInvoiceJour;
        QueryBuildDataSource    qbdsCustVendTable;
        QueryBuildDataSource    qbdsCustVendConsInvoice;
        QueryBuildDataSource    qbdsCustInvoiceJour_W;

        QueryBuildRange         qbrTransDate;
        QueryBuildRange         qbrConsRefRecId;
        QueryBuildRange         qbrConsDay;
        QueryBuildRange         qbrConsStatus;

        fieldid                 fidTransDate;
        fieldid                 fidConsRefRecId;
        fieldid                 fidConsDay;
        fieldid                 fidConsStatus;

        Query                   query = _query;
        FieldId                 fidReadyForPayment;
        FieldId                 fidIsPwp;
        QueryBuildDataSource    qbdsVendInvoiceTrans;

        #define.Zero(0)

        if (_custVendTrans == tablenum(CustTrans))
        {
            fidTransDate    = fieldnum(CustTrans, TransDate);
            fidConsRefRecId = fieldnum(CustInvoiceJour_W, CustConsInvoice_JP);
            fidConsDay      = fieldnum(CustTable, consDay_JP);
            fidConsStatus   = fieldnum(CustConsInvoice_JP, Status);
        }
        else
        {
            fidTransDate    = fieldnum(VendTrans, TransDate);
            fidConsRefRecId = fieldnum(VendInvoiceJour, VendConsInvoice_JP);
            fidConsDay      = fieldnum(VendTable, consDay_JP);
            fidConsStatus   = fieldnum(VendConsInvoice_JP, Status);
        }

        qbdsCustVendTrans = query.dataSourceTable(_custVendTrans);

        if (_fromDate
            && _toDate)
        {
            qbrTransDate = SysQuery::findOrCreateRange(qbdsCustVendTrans, fidTransDate);
            qbrTransDate.value(queryRange(_fromDate, _toDate));
        }

        if (TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(false))
        {
            qbdsCustVendConsInvoice = SysQuery::findOrCreateDataSource(query, _custVendConsInvoice, _custVendTrans);
            qbdsCustVendConsInvoice.joinMode(JoinMode::ExistsJoin);

            qbrConsStatus = SysQuery::findOrCreateRange(qbdsCustVendConsInvoice, fidConsStatus);
            qbrConsStatus.value(queryRange(CustVendConsInvoiceStatus_JP::Confirmed, CustVendConsInvoiceStatus_JP::PartiallySettled));

            qbdsCustVendInvoiceJour = SysQuery::findOrCreateDataSource(query, _custVendInvoiceJour, _custVendConsInvoice);
            qbdsCustVendInvoiceJour.joinMode(JoinMode::InnerJoin);

            QueryBuildRange qbrConsInvoiceRecId, qbrConsInvoicePosted;

            if (_custVendInvoiceJour == tableNum(CustInvoiceJour))
            {
                qbdsCustVendInvoiceJour.addLink(fieldNum(CustInvoiceJour, InvoiceAccount), fieldNum(CustConsInvoice_JP, CustTable));

                qbdsCustInvoiceJour_W = SysQuery::findOrCreateDataSource(query, tableNum(CustInvoiceJour_W), _custVendInvoiceJour);
                qbdsCustInvoiceJour_W.relations(true);
                qbdsCustInvoiceJour_W.joinMode(JoinMode::InnerJoin);

                qbrConsInvoiceRecId = SysQuery::findOrCreateRange(qbdsCustVendConsInvoice, fieldNum(CustConsInvoice_JP, RecId));

                // exists join CustConsInvoice_JP outer join CustInvoiceJour inner join CustInvoiceJour_W
                // where CustInvoiceJour.RecId == CustInvoiceJour_W.CustInvoiceJour
                //   && ((CustTrans.Voucher == CustInvoiceJour.LedgerVoucher
                //          && CustTrans.TransDate == CustInvoiceJour.InvoiceDate
                //          && CustInvoiceJour_W.CustConsInvoice_JP == CustConsInvoiceJP.RecId)
                //      || CustTrans.RecId == CustConsInvoice_JP.PostedCustTrans)
                qbrConsInvoicePosted = SysQuery::findOrCreateRange(qbdsCustVendConsInvoice, fieldNum(CustConsInvoice_JP, PostedCustTrans));
                qbrConsInvoicePosted.value(strFmt(
                    "((((%1.%5 == %2.%6) && (%1.%7 == %2.%8)) && (%3.%9 == %4.%10)) || (%1.%11 == %4.%12))",
                    qbdsCustVendTrans.name(),
                    qbdsCustVendInvoiceJour.name(),
                    qbdsCustInvoiceJour_W.name(),
                    qbdsCustVendConsInvoice.name(),
                    fieldStr(CustTrans, Voucher),
                    fieldStr(CustInvoiceJour, LedgerVoucher),
                    fieldStr(CustTrans, TransDate),
                    fieldStr(CustInvoiceJour, InvoiceDate),
                    fieldStr(CustInvoiceJour_W, CustConsInvoice_JP),
                    fieldStr(CustConsInvoice_JP, RecId),
                    fieldStr(CustTrans, RecId),
                    fieldStr(CustConsInvoice_JP, PostedCustTrans)));
            }
            else
            {
                qbdsCustVendInvoiceJour.addLink(fieldNum(VendInvoiceJour, InvoiceAccount), fieldNum(VendConsInvoice_JP, VendTable));

                qbrConsInvoiceRecId = SysQuery::findOrCreateRange(qbdsCustVendConsInvoice, fieldNum(VendConsInvoice_JP, RecId));

                // exists join VendConsInvoice_JP outer join VendInvoiceJour
                // where (VendTrans.Voucher == VendInvoiceJour.LedgerVoucher
                //          && VendTrans.TransDate == VendInvoiceJour.InvoiceDate
                //          && VendInvoiceJour_W.VendConsInvoice_JP == VendConsInvoiceJP.RecId)
                //      || VendTrans.RecId == VendConsInvoice_JP.PostedVendTrans
                qbrConsInvoicePosted = SysQuery::findOrCreateRange(qbdsCustVendConsInvoice, fieldNum(VendConsInvoice_JP, PostedVendTrans));
                qbrConsInvoicePosted.value(strFmt(
                    "((((%1.%4 == %2.%5) && (%1.%6 == %2.%7)) && (%2.%8 == %3.%9)) || (%1.%10 == %3.%11))",
                    qbdsCustVendTrans.name(),
                    qbdsCustVendInvoiceJour.name(),
                    qbdsCustVendConsInvoice.name(),
                    fieldStr(VendTrans, Voucher),
                    fieldStr(VendInvoiceJour, LedgerVoucher),
                    fieldStr(VendTrans, TransDate),
                    fieldStr(VendInvoiceJour, InvoiceDate),
                    fieldStr(VendInvoiceJour, VendConsInvoice_JP),
                    fieldStr(VendConsInvoice_JP, RecId),
                    fieldStr(VendTrans, RecId),
                    fieldStr(VendConsInvoice_JP, PostedVendTrans)));
            }
            qbrConsInvoicePosted.status(RangeStatus::Hidden);

            CustVendConsInvoiceSettleQuery_JP::updateConsRecIdRange(qbrConsInvoiceRecId, _consId, _custVendInvoiceJour == tablenum(CustInvoiceJour));

            qbdsCustVendTable = SysQuery::findOrCreateDataSource(query, _custVendTable, _custVendTrans);
            qbdsCustVendTable.relations(true);
            qbdsCustVendTable.joinMode(JoinMode::ExistsJoin);
            if (_consDay != #Zero)
            {
                qbrConsDay = SysQuery::findOrCreateRange(qbdsCustVendTable, fidConsDay);
                qbrConsDay.value(queryValue(_consDay));
            }
        }
        else
        {
            qbdsCustVendInvoiceJour = SysQuery::findOrCreateDataSource(query, _custVendInvoiceJour, _custVendTrans);
            qbdsCustVendInvoiceJour.relations(true);
            qbdsCustVendInvoiceJour.joinMode(JoinMode::ExistsJoin);

            if (_custVendInvoiceJour == tableNum(CustInvoiceJour))
            {
                qbdsCustInvoiceJour_W = CustInvoiceJour_W::addDataSource(qbdsCustVendInvoiceJour, JoinMode::ExistsJoin);
                qbrConsRefRecId = SysQuery::findOrCreateRange(qbdsCustInvoiceJour_W, fidConsRefRecId);
            }
            else
            {
                qbrConsRefRecId = SysQuery::findOrCreateRange(qbdsCustVendInvoiceJour, fidConsRefRecId);
            }

            CustVendConsInvoiceSettleQuery_JP::updateConsRecIdRange(qbrConsRefRecId, _consId, _custVendInvoiceJour == tablenum(CustInvoiceJour));

            qbdsCustVendTable = SysQuery::findOrCreateDataSource(query, _custVendTable, _custVendInvoiceJour);
            qbdsCustVendTable.relations(true);
            qbdsCustVendTable.joinMode(JoinMode::ExistsJoin);
            if (_consDay != #Zero)
            {
                qbrConsDay = SysQuery::findOrCreateRange(qbdsCustVendTable, fidConsDay);
                qbrConsDay.value(queryValue(_consDay));
            }

            qbdsCustVendConsInvoice = SysQuery::findOrCreateDataSource(query, _custVendConsInvoice, _custVendInvoiceJour);
            qbdsCustVendConsInvoice.relations(true);
            qbdsCustVendConsInvoice.joinMode(JoinMode::ExistsJoin);

            qbrConsStatus = SysQuery::findOrCreateRange(qbdsCustVendConsInvoice, fidConsStatus);
            qbrConsStatus.value(queryRange(CustVendConsInvoiceStatus_JP::Confirmed, CustVendConsInvoiceStatus_JP::PartiallySettled));
        }

        if (Project::Enabled())
        {
            if (_custVendTrans == tablenum(VendTrans))
            {
                fidIsPwp = fieldNum(VendInvoiceTrans, IsPwp);
                fidReadyForPayment = fieldNum(VendInvoiceTrans, ReadyForPayment);

                qbdsVendInvoiceTrans = query.dataSourceTable(tableNum(VendInvoiceTrans));
                if (qbdsVendInvoiceTrans)
                {
                    SysQuery::findOrCreateRange(qbdsVendInvoiceTrans, fidIsPwp).value(queryValue(NoYes::No));
                    SysQuery::findOrCreateRange(qbdsVendInvoiceTrans, fidReadyForPayment).value(queryValue(NoYes::Yes));
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConsRecIdRange</Name>
				<Source><![CDATA[
    private static void updateConsRecIdRange(QueryBuildRange _range, CustVendConsId_JP _consId, boolean _isCust)
    {
        CustVendConsRefRecId_JP consRecId;

        if (_consId)
        {
            if (_isCust)
            {
                consRecId = CustConsInvoice_JP::findByNaturalKey(_consId).RecId;
            }
            else
            {
                consRecId = VendConsInvoice_JP::findByNaturalKey(_consId).RecId;
            }

            if (consRecId == 0)
            {
                // No open trans is fetched if the specified consolidated invoice is not found.
                _range.value(SysQuery::valueEmptyString());
            }
            else
            {
                _range.value(queryValue(consRecId));
            }
        }
        else
        {
            _range.value(SysQuery::valueNot(0));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>