<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendProspectiveVendorSearchRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendProspectiveVendorSearchRequest extends VendSearchRequest
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAddressDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the address data source tables to the vendor search query.
    /// </summary>
    /// <param name="_selectedCities">
    /// The name of the city.
    /// </param>
    /// <param name="_selectedStates">
    /// The name of the state.
    /// </param>
    /// <param name="_selectedCountryRegions">
    /// The name of the country or region.
    /// </param>
    private void addAddressDataSource(str _selectedCities, str _selectedStates, str _selectedCountryRegions)
    {
        QueryBuildDataSource qbdsDirPartyTable;
        QueryBuildDataSource qbdsDirPartyLocation;
        QueryBuildDataSource qbdsLogisticsLocation;
        QueryBuildDataSource qbdsLogisticsPostalAddress;
        JoinMode             joinModeForAddress;

        joinModeForAddress = (Global::strLRTrim(_selectedCities) == strMin() && Global::strLRTrim(_selectedStates) == strMin() && Global::strLRTrim(_selectedCountryRegions) == strMin()) ?
                JoinMode::OuterJoin : JoinMode::InnerJoin;

        qbdsDirPartyTable = query.dataSourceTable(tablenum(DirPartyTable));
        qbdsDirPartyLocation = this.addAttributeDataSouce(qbdsDirPartyTable, tablenum(DirPartyLocation), joinModeForAddress);
        qbdsLogisticsLocation = this.addAttributeDataSouce(qbdsDirPartyLocation, tablenum(LogisticsLocation), joinModeForAddress);
        qbdsLogisticsPostalAddress = this.addAttributeDataSouce(qbdsLogisticsLocation, tablenum(LogisticsPostalAddress), joinModeForAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProcurementCategoryDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the procurement category data source to the vendor search query.
    /// </summary>
    private void addProcurementCategoryDataSource()
    {
        QueryBuildDataSource qbdsVendRequest;
        QueryBuildDataSource qbdsVendRequestCategory;
        QueryBuildDataSource qbdsEcoResCategory;
        List                 list;
        ListEnumerator       items;
        str                  currentItem;

        qbdsVendRequest = query.dataSourceTable(tablenum(VendRequest));
        qbdsVendRequestCategory = this.addAttributeDataSouce(qbdsVendRequest, tablenum(VendRequestCategory), JoinMode::ExistsJoin);
        qbdsEcoResCategory = this.addAttributeDataSouce(qbdsVendRequestCategory, tablenum(EcoResCategory), JoinMode::ExistsJoin);

        str selectedCategories = this.parmProcurementCategory();
        list = new List(Types::String);

        if (selectedCategories != strMin())
        {
            list = strSplit(selectedCategories, ValueDelimiter);
            items = list.getEnumerator();
            while (items.moveNext())
            {
                currentItem = items.current();
                if (currentItem != strMin())
                {
                    this.addSearchCriteriaString(tablenum(EcoResCategory), fieldnum(EcoResCategory, Name), currentItem);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProspectiveProfileDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds prospective profile data source to the vendor search query.
    /// </summary>
    /// <param name="_minorityOwned">
    /// The value selected for minority owned attribute by user.
    /// </param>
    /// <param name="_femaleOwned">
    /// The value selected for female owned attribute by user.
    /// </param>
    /// <param name="_smallBusiness">
    /// The value selected for small business attribute by user.
    /// </param>
    /// <param name="_locallyOwned">
    /// The value selected for locally owned attribute by user.
    /// </param>
    private void addProspectiveProfileDataSource(VendIgnoreNoYes _minorityOwned, VendIgnoreNoYes _femaleOwned, VendIgnoreNoYes _smallBusiness, VendIgnoreNoYes _locallyOwned)
    {
        QueryBuildDataSource    qbdsVendRequest;
        QueryBuildDataSource    qbdsVendRequestProspectiveProfile;
        JoinMode                joinModeForProspectiveProfile;

        joinModeForProspectiveProfile = (_minorityOwned == VendIgnoreNoYes::Ignore && _femaleOwned == VendIgnoreNoYes::Ignore &&
                                            _smallBusiness == VendIgnoreNoYes::Ignore && _locallyOwned == VendIgnoreNoYes::Ignore) ?
                                            JoinMode::OuterJoin : JoinMode::InnerJoin;

        qbdsVendRequest = query.dataSourceTable(tablenum(VendRequest));
        qbdsVendRequestProspectiveProfile = this.addAttributeDataSouce(qbdsVendRequest, tablenum(VendRequestProspectiveProfile), joinModeForProspectiveProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query for the search on prospective vendor using attributes to create ranges.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    public Query buildQuery()
    {
        query = new Query(querystr(VendSearchProspectiveVendor));

        this.addProspectiveProfileDataSource(this.parmMinorityOwned(), this.parmFemaleOwned(), this.parmSmallBusiness(), this.parmLocallyOwned());

        if (!(Global::strLRTrim(this.parmName()) == strMin()))
        {
            this.addPartyNameSearchCriteria(tablenum(VendRequestProspectiveProfile), this.parmName());
        }

        this.addAddressDataSource(this.parmAddressCity(), this.parmAddressState(), this.parmAddressCountry());
        this.addRangeMultipleValue(tablenum(LogisticsPostalAddress), fieldnum(LogisticsPostalAddress, City), this.parmAddressCity());
        this.addRangeMultipleValue(tablenum(LogisticsPostalAddress), fieldnum(LogisticsPostalAddress, State), this.parmAddressState());
        this.addRangeMultipleValue(tablenum(LogisticsPostalAddress), fieldnum(LogisticsPostalAddress, CountryRegionId), this.parmAddressCountry());

        if (Global::strLRTrim(this.parmProcurementCategory()) != strMin())
        {
            this.addProcurementCategoryDataSource();
        }

        this.addSearchCriteriaNoYes(tablenum(VendRequestProspectiveProfile), fieldnum(VendRequestProspectiveProfile, FemaleOwned), this.parmFemaleOwned());
        this.addSearchCriteriaNoYes(tablenum(VendRequestProspectiveProfile), fieldnum(VendRequestProspectiveProfile, MinorityOwned), this.parmMinorityOwned());
        this.addSearchCriteriaNoYes(tablenum(VendRequestProspectiveProfile), fieldnum(VendRequestProspectiveProfile, SmallBusiness), this.parmSmallBusiness());
        this.addSearchCriteriaNoYes(tablenum(VendRequestProspectiveProfile), fieldnum(VendRequestProspectiveProfile, LocallyOwned), this.parmLocallyOwned());

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSearchExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the vendor search expression for prospective vendors.
    /// </summary>
    /// <returns>
    /// The search expression.
    /// </returns>
    public str buildSearchExpression()
    {
        TextBuffer expression = new TextBuffer();

        if (this.parmVendorGroup() != strMin()) // VendorGroup
        {
            expression.appendText(this.labelVendorGroup() + pairDelimiter + strReplace(this.parmVendorGroup(), ExpressionDelimiter, ValueDelimiter) + ExpressionDelimiter);
        }

        return expression.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record count for the respective vendors on selection of a refresh button.
    /// </summary>
    /// <param name="_isAllLEIncluded">
    /// A Boolean value that indicates whether a vendor will be considered for a search.
    /// </param>
    /// <returns>
    /// The record count.
    /// </returns>
    public int getResultCount(boolean _isAllLEIncluded)
    {
        TableId vendRequestTableId  = tablenum(VendRequest);
        FieldId recIdFieldId        = fieldnum(VendRequest, RecId);

        int ret = this.calculateResultCount(vendRequestTableId, recIdFieldId, _isAllLEIncluded);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorGroup</Name>
				<Source><![CDATA[
    public str parmVendorGroup(str _vendorGroup = vendorGroup)
    {
        if (_vendorGroup != strMin() && _vendorGroup != vendorGroup)
        {
            vendorGroup = strReplace(_vendorGroup, ValueDelimiter, ExpressionDelimiter);
        }

        return vendorGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the specified string pair.
    /// </summary>
    /// <param name="_searchString">
    /// The key and comma separated values.
    /// </param>
    /// <returns>
    /// The unparsed value.
    /// </returns>
    public str parse(str _searchString)
    {
        int             positionMaxPair = strlen(_searchString);
        int             positionPair    = 0;
        str             singleAttribute = strMin();
        str             singlevalue     = strMin();
        str             returnString    = strMin();
        VendIgnoreNoYes vendIgnoreNoYes = VendIgnoreNoYes::Ignore;

        if (_searchString != strMin())
        {
            positionPair = strfind(_searchString, pairDelimiter, 1, positionMaxPair);
            if (positionPair)
            {
                singleAttribute = substr(_searchString, 1, positionPair -1);
                singlevalue = substr(_searchString, positionPair + 1, positionMaxPair - positionPair);
                if (singleAttribute != strMin() && singlevalue != strMin())
                {
                    switch (singleAttribute)
                    {
                        case this.labelName():
                            this.parmName(singlevalue);
                            break;

                        case this.labelCity():
                            this.parmAddressCity(singlevalue);
                            break;

                        case this.labelState():
                            this.parmAddressState(singlevalue);
                            break;

                        case this.labelCountry():
                            this.parmAddressCountry(singlevalue);
                            break;

                        case this.labelMinorityOwner():
                            this.parmMinorityOwned(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelFemaleOwned():
                            this.parmFemaleOwned(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelSmallBusiness():
                            this.parmSmallBusiness(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelLocallyOwned():
                            this.parmLocallyOwned(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelVendorGroup():
                            this.parmVendorGroup(singlevalue);
                            break;

                        default:
                            returnString = _searchString;
                            break;
                    }
                }
            }
        }

        return returnString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets all the parameters of the specified form.
    /// </summary>
    /// <param name="_form">
    /// An instance of the <c>VendSearchCriteria</c> form.
    /// </param>
    public void setFormParameters(FormRun _form)
    {
        Object formObject = _form;

        // setting prospective vendor specific attributes
        formObject.parmVendorGroup(this.parmVendorGroup());
        formObject.parmProcurementCategory(this.parmProcurementCategory());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>