<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAddressValidationBatchController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationAddressValidationBatchController</c> class acts as a controller for the
/// <c>TaxIntegrationAddressValidationBatchService</c> service.
/// </summary>
internal final class TaxIntegrationAddressValidationBatchController extends SysOperationServiceController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SysOperationController construct(Args _args)
    {
        SysOperationController controller;

        controller = new TaxIntegrationAddressValidationBatchController(
            classStr(TaxIntegrationAddressValidationBatchService),
            methodStr(TaxIntegrationAddressValidationBatchService, execute),
            SysOperationExecutionMode::Synchronous);

        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxIntegrationAddressValidationBatchController addressValidationController = TaxIntegrationAddressValidationBatchController::construct(_args);
        addressValidationController.parmLoadFromSysLastValue(false);

        TaxIntegrationAddressValidationBatchContract addressValidationContract = addressValidationController.getDataContractObject();
        container dirPartyTableRecordsContainer = addressValidationController.getSelectedRecords(_args);
        if (addressValidationContract is TaxIntegrationAddressValidationBatchContract)
        {
            addressValidationContract.parmDirPartyTableRecordsContainer(dirPartyTableRecordsContainer);
        }

        addressValidationController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedRecords</Name>
				<Source><![CDATA[
    private container getSelectedRecords(Args _args)
    {
        container dirPartyTableRecordsContainer;

        if (_args.record().TableId == tablenum(DirPartyTable))
        {
            MultiSelectionHelper helper = MultiSelectionHelper::createFromCaller(_args.caller());
            DirPartyTable dirPartyTable = helper.getFirst();

            while (dirPartyTable)
            {
                dirPartyTableRecordsContainer = conIns(dirPartyTableRecordsContainer, 1, dirPartyTable.RecId);
                dirPartyTable = helper.getNext();
            }
        }

        return dirPartyTableRecordsContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        return "@TaxIntegration:AddressValidation";
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallingForm</Name>
				<Source><![CDATA[
    private void refreshCallingForm(args _args)
    {
        FormDataSource formDataSource;

        if(_args && _args.record() && _args.record().isFormDataSource())
        {
            formDataSource = _args.record().dataSource();
            formDataSource.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh calling form.
    /// </summary>
    /// <param name = "_executionMode">Execution mode.</param>
    /// <param name = "_asyncResult">Async result.</param>
    protected void afterOperation(SysOperationExecutionMode _executionMode, AifAsyncResult _asyncResult)
    {
        super(_executionMode, _asyncResult);

        this.refreshCallingForm(this.parmArgs());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>