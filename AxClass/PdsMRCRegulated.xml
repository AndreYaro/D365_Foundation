<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsMRCRegulated</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The abstract class for the MRC Regulated for sales/purch
/// </summary>
abstract class PdsMRCRegulated
{
    PdsMRCParameters        parameters;
    AddressCountryRegionId  addrCountryRegId;
    AddressStateId          addrStateId;
    TransDate               effectiveDate;
    PdsMRCDocumentStatus    documentStatus;
    PdsMRCEventTracker      tracker;
    TransDate               lastSent;
    PdsMRCDocument          activeDocument;
    boolean                 printDoc;
    ItemId                  itemId;
    LanguageId              languageId;
    BOMId                   bomId;
    List                    docuRefRecIdList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>alertOnAdvise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwritten by derived classes.  Used to determine if an alert should be sent on advise.
    /// </summary>
    protected abstract void alertOnAdvise()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>alertOnExpiry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwritten by derived classes.  Used to determine if an alert should be sent on expiry.
    /// </summary>
    protected abstract void alertOnExpiry()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>alertOnNoDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwritten by derived classes.  Used to determine if an alert should be sent on no document.
    /// </summary>
    protected abstract void alertOnNoDoc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemRegulatedExtended</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current item is regulated for the delivery country/region.
    /// </summary>
    /// <returns>
    /// The boolean is true if the item being shipped is regulated in the country/region of delivery.
    /// </returns>
    public boolean checkItemRegulatedExtended()
    {
        boolean     docSent;
        boolean     expired     = false;
        boolean     willExpire  = false;
        date        dateNow;
        int         validityIntervalDays;
        int         adviseIntervalDays;
        PdsMRCValidityIntervalByCountry validityIntervalByCountry;
        boolean     itemIsRegulated = false;

        //Check if the current item is regulated for the delivery country/region.
        if (PdsMRCRegulatedCountry::isRegulated(itemId, addrCountryRegId, addrStateId))
        {
            if (parameters.EffectiveDayType == PdsMRCEffectiveDateBasis::PlannedDeliveryDate)
            {
                dateNow = effectiveDate;
            }
            else
            {
                dateNow = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }

            activeDocument = PdsMRCDocument::findActiveDoc(itemId,
                effectiveDate,
                addrCountryRegId,
                languageId,
                bomId);

            validityIntervalByCountry = PdsMRCValidityIntervalByCountry::find(addrCountryRegId);

            if (!activeDocument)
            {
                docSent = false;
            }
            else
            {
                docSent = this.wasDocumentSent(activeDocument.DocumentId);

                if (!docSent)
                {
                    this.updateHistory();
                    docSent = this.wasDocumentSent(activeDocument.DocumentId);
                }
            }

            if (!docSent && activeDocument)
            {
                //default is to mark it as sent if the minor revision is sent, but not the major one
                if (!validityIntervalByCountry || !validityIntervalByCountry.EnforceMinorRevision)
                {
                    docSent = this.wasMinorDocumentSent(activeDocument.DocumentId);
                }
            }
            //get the effective dates to use, from parameters or from specific settings
            if (validityIntervalByCountry)
            {
                //specific parameters specified
                validityIntervalDays = validityIntervalByCountry.ValidityInterval;
                adviseIntervalDays   = validityIntervalByCountry.AdviseInterval;
            }
            else
            {
                //use the global settings
                validityIntervalDays = parameters.MSDSInterval;
                adviseIntervalDays   = parameters.MSDSAdviseInterval;
            }

            if (docSent && ((lastSent + validityIntervalDays) < dateNow))
            {
                expired = true;
            }

            if (!activeDocument && PdsMRCDocument::findActiveDocNoDate(
                    itemId,
                    addrCountryRegId,
                    languageId,
                    bomId))
            {
                docSent = false;
            }

            if (activeDocument.ExpiryDate && (datenow +  adviseIntervalDays)  > activeDocument.ExpiryDate)
            {
                willExpire = true;
            }

            if (!docSent)
            {
                this.alertOnExpiry();
                this.warningOnExpiry(true);
            }
            else if (expired || willExpire)
            {
                this.alertOnExpiry();
                this.warningOnExpiry();
            }
            else if (!docSent && !activeDocument)
            {
                this.alertOnNoDoc();
            }
            
            if (printDoc && lastSent)
            {
                this.parmDocuRefRecIdList(this.printDocHandling());
            }

            activeDocument = PdsMRCDocument::findActiveDoc(itemId,
                dateNow,
                addrCountryRegId,
                languageId,
                bomId);
            if (activeDocument.ExpiryDate && (datenow + adviseIntervalDays)  > activeDocument.ExpiryDate)
            {
                this.alertOnAdvise();
            }
            itemIsRegulated = activeDocument ? true : false;
        }
        else
        {
            itemIsRegulated = true;
        }

        return itemIsRegulated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default values for global variables and initializes the global parameters table.
    /// </summary>
    protected void new()
    {
        printDoc    = false;
        parameters  = PdsMRCParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the global printDoc variable to parm _printDoc;
    /// </summary>
    /// <param name="_printDoc">Value to be used by global variable printDoc.</param>
    public void parmPrintDoc(boolean _printDoc = printDoc)
    {
        printDoc = _printDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocHandling</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds the RecId list that identifies the PSDS document in DocuRef.
    /// </summary>
    /// <returns>
    /// The recId list of the DocuRef document to print
    /// </returns>
    private List printDocHandling()
    {
        DocuRef     docuRef;
        DocuType    docuType;
        List        docuRefRecIdListCurrent = new List(typeName2Type(extendedTypeStr(recId)));

        while select RecId from docuRef
            where  docuRef.RefTableId   == tablenum(PdsMRCDocument)
                && docuRef.RefRecId     == activeDocument.RecId
                && docuRef.Restriction  == DocuRestriction::External
            join RecId
            from docuType
            where  docuRef.TypeId       == docuType.TypeId
            && docuType.TypeGroup   == DocuTypeGroup::File
        {
            docuRefRecIdListCurrent.addEnd(docuRef.RecId);
        }

        return docuRefRecIdListCurrent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwritten by derived classes.  Used to send and event of type _eventType.
    /// </summary>
    /// <param name="_eventType">Type of event to be sent.</param>
    protected abstract void sendEvent(PdsMRCEventType _eventType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwritten by derived classes.  Used to set global variable to the values from the common parameter.
    /// </summary>
    /// <param name="_common">Common record used to set global values .</param>
    public abstract void setBuffer(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwritten by derived classes.  Used to update the necessary history table with burrent document info.
    /// </summary>
    /// <returns>true, if the update was successful; false otherwise</returns>
    protected abstract boolean updateHistory()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningOnExpiry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwritten by derived classes.  Used to warn user upon document expiry.
    /// </summary>
    /// <param name="_ignoreParameters">Should the MRC parameters to issue warning be ignored?</param>
    protected  abstract void warningOnExpiry(boolean _ignoreParameters = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasDocumentSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwritten by derived classes.  Used to determine if the given document (MRCDocumentId was sent.
    /// </summary>
    /// <param name="_docId">DocumentId of the document to check if it was sent.</param>
    /// <returns>true, if a document has been sent</returns>
    protected abstract boolean wasDocumentSent(PdsMRCDocumentId _docId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasMinorDocumentSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwritten by derived classes.  Used to determine if the given document (MRCDocumentId) had a minor version sent.
    /// </summary>
    /// <param name="_docId">DocumentId of the document to check if it was sent.</param>
    /// <returns>true, if a document with a minor revision has been sent</returns>
    protected boolean wasMinorDocumentSent(PdsMRCDocumentId _docId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegulatedFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the item on the common record is regulated.
    /// </summary>
    /// <param name="_common">Common record to check if and regulated documents are associated with it.</param>
    /// <param name="_printDoc">Should document be printed?</param>
    /// <returns>Result of regulation check.  True if is regulated.</returns>
    static public boolean checkRegulatedFromBuffer(
        Common  _common,
        boolean _printDoc = false)
    {
        PdsMRCRegulated mrcRegulated = PdsMRCRegulated::construct(_common);
        mrcRegulated.setBuffer(_common);
        mrcRegulated.parmPrintDoc(_printDoc);

        return mrcRegulated.checkItemRegulatedExtended();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructingPdsMRCRegulatedFromTableIdEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for creating a new instances of a <c>PdsMRCRegulated</c> class based on the <c>TableId</c>.
    /// </summary>
    /// <param name = "_tableId">The Table Id.</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> containing the instantiated class.</param>
    [SubscribesTo(classStr(PdsMRCRegulated), staticDelegateStr(PdsMRCRegulated, constructingPdsMRCRegulatedFromTableId))]
    public static void constructingPdsMRCRegulatedFromTableIdEventHandler(TableId _tableId, EventHandlerResult _result)
    {
        switch (_tableId)
        {
            case tableNum(SalesLine):
                _result.result(PdsMRCRegulated_Sales::construct());
                break;
            case tableNum(PurchLine):
                _result.result(PdsMRCRegulated_Purch::construct());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructingPdsMRCRegulatedFromTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for creating a new instances of a <c>PdsMRCRegulated</c> class based on the <c>TableId</c>.
    /// </summary>
    /// <param name = "_tableId">The Table Id.</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> containing the instantiated class.</param>
    static delegate void constructingPdsMRCRegulatedFromTableId(TableId _tableId, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instatntiates a new instance of the MRCRegulated class.
    /// </summary>
    /// <param name="_common">Common record used to determin which
    /// derived class to use.</param>
    /// <returns>New instance of MRCRegulated class.</returns>
    /// <remarks>
    /// Returns a derived MRCRegulated class.  If common is a salesLine record,
    /// MRCRegulated_sales is returned, if purchline,
    /// MRCRegulated_Purch is returned.
    /// </remarks>
    public static PdsMRCRegulated construct(Common _common)
    {
        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        PdsMRCRegulated::constructingPdsMRCRegulatedFromTableId(_common.TableId, result);

        if (!result.hasResult())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        PdsMRCRegulated pdsMRCRegulated = result.result() as PdsMRCRegulated;
        if (!pdsMRCRegulated)
        {
            throw error("@PDS912");
        }

        return pdsMRCRegulated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPSDS</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Prints all product safety data sheets (PSDS) listed in _recIdList. 
    /// </summary>
    /// <param name="_recIdList">
    ///     List of DocuRef recIds for PSDS documents.
    /// </param>
    public static void printPSDS(List _recIdList)
    {
        if (hasGUI())
        {
            PdsMRCDocument::printProductSafetyDataSheets(_recIdList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesLineAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to use the delivery address from sales header or sales lines,
    /// when checking regulated items.
    /// </summary>
    /// <returns>
    /// True if the sales line delivery address should be used; otherwise, false.
    /// </returns>
    public static boolean useSalesLineAddress()
    {
        if (isConfigurationkeyEnabled(configurationkeynum(TradeMultiShipTo)))
        {
            return SalesParameters::find().SplitDeliveryPackingSlip;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuRefRecIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the global docuRefRecIdList variable to parm _docuRefRecIdList;
    /// </summary>
    /// <param name="_docuRefRecIdList">Value to be used by global variable docuRefRecIdList.</param
    /// <returns>
    /// Gets the global docuRefRecIdList variable.
    /// </returns>
    public List parmDocuRefRecIdList(List _docuRefRecIdList = docuRefRecIdList)
    {
        docuRefRecIdList = _docuRefRecIdList;
        return docuRefRecIdList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>