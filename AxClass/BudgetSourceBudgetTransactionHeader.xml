<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetSourceBudgetTransactionHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetSourceBudgetTransactionHeader</c> class is responsible for data management for a
///    collection of <c>BudgetSource</c> records that are related to the <c>BudgetTransactionLine</c>
///    records that belong to the specified <c>BudgetTransactionHeader</c> record.
/// </summary>
public class BudgetSourceBudgetTransactionHeader extends BudgetSourceCollectionIntegrator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findBudgetSourceIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a set of <c>BudgetSource</c> records that are associated with the
    ///    <c>BudgetTransactionLine</c> records that belong to the same specified
    ///    <c>BudgetTransactionHeader</c> record.
    /// </summary>
    /// <returns>
    ///    A set of IDs for the <c>BudgetSource</c> records that are associated with
    ///    <c>BudgetTransactionLine</c> records that belong to the same specified
    ///    <c>BudgetTransactionHeader</c> record.
    /// </returns>
    public Set findBudgetSourceIds()
    {
        BudgetTransactionLine   budgetTransactionLine;
        BudgetTransactionHeader budgetTransactionHeader;
        BudgetSource            budgetSource;
        Set                     budgetSourceIds;

        budgetSourceIds = new Set(typeName2Type(extendedTypeStr(BudgetSourceRecId)));

        // Adding ranges for all the alternate key fields of budget source table
        // in a specified order for performance reason.
        while select RecId from budgetTransactionHeader
            where (budgetTransactionHeader.RecId == commonId)
            join RecId from budgetTransactionLine
            where (budgetTransactionLine.BudgetTransactionHeader == budgetTransactionHeader.RecId)
            join RecId from budgetSource
            where (budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine &&
                    budgetSource.BudgetTransactionLine == budgetTransactionLine.RecId &&
                    budgetSource.SourceDocumentLine == 0 &&
                    budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                    budgetSource.LedgerEntryJournalNumber == '' &&
                    budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                    budgetSource.LedgerEntryJournalLegalEntity == 0)
        {
            budgetSourceIds.add(budgetSource.RecId);
        }

        return budgetSourceIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetCheckResult</c> value that is associated with the specified <c>Common</c> record.
    /// </summary>
    /// <param name="_doCheckLedgerBudgetControlEnabled">
    /// A Boolean value that indicates whether to check that budget control is enabled on the primary
    /// ledger of the current legal entity before trying to get the <c>BudgetCheckResult</c> value;
    /// optional.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value of the <c>BudgetSource</c> record that is associated with the
    /// <c>Common</c> record.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult(boolean _doCheckLedgerBudgetControlEnabled = true)
    {
        BudgetCheckResult budgetCheckResult;

        budgetCheckResult = BudgetSourceBudgetTransactionHeader::findBudgetCheckResult(this.parmCommonId(), _doCheckLedgerBudgetControlEnabled);

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>BudgetCheckResult</c> value with the greatest severity from the
    /// <c>BudgetTransactionLine</c> records that are associated to the <c>BudgetTransactionHeader</c>
    /// record.
    /// </summary>
    /// <param name="_budgetTransactionHeaderId">
    /// The record ID of the <c>BudgetTransactionHeader</c> record.
    /// </param>
    /// <param name="_doCheckLedgerBudgetControlEnabled">
    /// A Boolean value that indicates whether to check if budget control is enabled on the primary ledger
    /// of the current legal entity before trying to find the <c>BudgetCheckResult</c> value; optional.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value with the greatest severity from the <c>BudgetTransactionLine</c>
    /// records that is associated to the <c>BudgetTransactionHeader</c> record.
    /// </returns>
    public static BudgetCheckResult findBudgetCheckResult(RecId _budgetTransactionHeaderId, boolean _doCheckLedgerBudgetControlEnabled = true)
    {
        BudgetCheckResult       budgetCheckResult;
        BudgetSource            budgetSource;
        BudgetTransactionLine   budgetTransactionLine;

        budgetCheckResult = budgetCheckResult::NoCheck;

        if (_budgetTransactionHeaderId)
        {
            if (BudgetControlConfiguration::isControlConfigured() &&
                hasTableAccess(tableNum(BudgetSource)) &&
                hasTableAccess(tableNum(BudgetTransactionLine)) &&
                hasTableAccess(tableNum(BudgetTransactionHeader)))
            {
                if (!_doCheckLedgerBudgetControlEnabled ||
                    Ledger::isLedgerBudgetControlEnabled())
                {
                    // Adding ranges for all the alternate key fields of budget source table
                    // for performance reason.
                    select firstonly CheckResult from budgetSource
                        order by CheckResult desc
                        where  (budgetSource.BudgetSourceType == BudgetSourceType::BudgetTransactionLine &&
                                budgetSource.SourceDocumentLine == 0 &&
                                budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                                budgetSource.LedgerEntryJournalNumber == '' &&
                                budgetSource.LedgerEntryJournalReferenceNumber == '' &&
                                budgetSource.LedgerEntryJournalLegalEntity == 0)
                        exists join budgetTransactionLine
                            where budgetTransactionLine.BudgetTransactionHeader == _budgetTransactionHeaderId &&
                                budgetTransactionLine.RecId == budgetSource.BudgetTransactionLine;

                    if (budgetSource.CheckResult)
                    {
                        budgetCheckResult = budgetSource.CheckResult;
                    }
                }
            }
        }

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBudgetSourceBudgetTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>BudgetSourceBudgetTransactionHeader</c> class by using the
    ///    specified <c>BudgetTransactionHeader</c> record.
    /// </summary>
    /// <param name="_budgetTransactionHeaderId">
    ///    The ID of a <c>BudgetTransactionHeader</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetSourceBudgetTransactionHeader</c> class.
    /// </returns>
    public static BudgetSourceBudgetTransactionHeader newBudgetSourceBudgetTransactionHeader(RecId _budgetTransactionHeaderId)
    {
        BudgetSourceBudgetTransactionHeader budgetSourceBudgetTransactionHeader;

        budgetSourceBudgetTransactionHeader = new BudgetSourceBudgetTransactionHeader();
        budgetSourceBudgetTransactionHeader.parmCommonId(_budgetTransactionHeaderId);

        return budgetSourceBudgetTransactionHeader;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>