<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_PackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchCalcTax_PackingSlip</c> class creates <c>TaxUncommitted</c> records and the related
///    <c>SourceDocumentLine</c> records for the packing slip line taxes during packing slip posting.
/// </summary>
class PurchCalcTax_PackingSlip extends PurchCalcTax_ParmTrans
{
    VendPackingSlipJour     vendPackingSlipJour;
    VendPackingSlipTrans    vendPackingSlipTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>headingRecID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the heading record ID that is associated to the packing slip line.
    /// </summary>
    /// <returns>
    ///    The ID of the heading record for a packing slip line.
    /// </returns>
    public recId headingRecID()
    {
        if (!vendPackingSlipJour)
        {
            return super();
        }
        else
        {
            return vendPackingSlipJour.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingTableID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table ID of the heading record that is associated to a packing slip line.
    /// </summary>
    /// <returns>
    ///    The table ID of the heading record for a packing slip line.
    /// </returns>
    public tableId headingTableID()
    {
        if (!vendPackingSlipJour)
        {
            return super();
        }
        else
        {
            return vendPackingSlipJour.TableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the source record.
    /// </summary>
    /// <returns>
    /// A source record.
    /// </returns>
    internal Common getSource()
    {
        if (!vendPackingSlipJour)
        {
            return super();
        }
        else
        {
            return vendPackingSlipJour;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether existing <c>TaxUncommitted</c> records must be updated.
    /// </summary>
    /// <returns>
    /// true if the existing <c>TaxUncommitted</c> records must be updated; otherwise, false.
    /// </returns>
    protected boolean maintainTaxUncommitted()
    {
        return VendPackingSlipVersion::numberOfPackingSlipVersions(vendPackingSlipJour.RecId) > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        VendDocumentTableMap _parmTable,
        ParmId _parmId,
        PurchId _sumPurchId,
        DocumentStatus _documentStatus)
    {
        super(_parmTable, _parmId, _sumPurchId, _documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the associated <c>vendPackingSlipTrans</c> record for the packing slip line.
    /// </summary>
    /// <returns>
    /// A <c>PurchLine</c> record.
    /// </returns>
    public Common nextLine()
    {
        PurchLine purchaseLine;

        purchaseLine = super();

        if (vendPackingSlipJour)
        {
            vendPackingSlipTrans = null;

            JournalLineInformation journalLineInformation = RelationshipBetweenJournalLineAndParmLineSingleton::instance().findJournalLineInfo(parmLine.RecId);

            if (journalLineInformation.parmJournalHeaderRecId() == vendPackingSlipJour.RecId 
                && journalLineInformation.parmInventTransId() == purchaseLine.InventTransId)
            {
                select firstonly vendPackingSlipTrans
                    where vendPackingSlipTrans.InventTransId        == purchaseLine.InventTransId
                        && vendPackingSlipTrans.VendPackingSlipJour  == vendPackingSlipJour.RecId
                        && vendPackingSlipTrans.LineNum              == journalLineInformation.parmLineNum();
            }
            
            if (!vendPackingSlipTrans)
            {
                //purchLine.inventtransId should equal vendPackingSlipTrans.inventTransId;
                select vendPackingSlipTrans
                    where vendPackingSlipTrans.InventTransId == purchaseLine.InventTransId
                       && vendPackingSlipTrans.VendPackingSlipJour == vendPackingSlipJour.RecId;
            }
        }

        return purchaseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextMarkupLine</Name>
				<Source><![CDATA[
    public MarkupTrans nextMarkupLine()
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return super();
        }
        // </GEERU>

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendPackingSlipJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>vendPackingSlipJour</c> variable.
    /// </summary>
    /// <param name="_vendPackingSlipJour">
    ///    A <c>vendPackingSlipJour</c> record; optional.
    /// </param>
    public void setVendPackingSlipJour(VendPackingSlipJour _vendPackingSlipJour = vendPackingSlipJour)
    {
        vendPackingSlipJour = _vendPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur  transLineAmount()
    {
        AmountCur   transLineAmount;
        Factor      factor;

        if (vendPackingSlipJour)
        {
            factor = purchLine.PurchQty ? (vendPackingSlipTrans.Qty / purchLine.PurchQty) : 1;
            transLineAmount = CurrencyExchangeHelper::amount(factor * purchLine.lineAmountExclTax(vendPackingSlipJour.DeliveryDate), purchLine.CurrencyCode);
        }
        else
        {
            transLineAmount = super();
        }

        return transLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction record ID that is associated to a packing slip line.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction record for a packing slip line.
    /// </returns>
    public recId transRecId()
    {
        if (vendPackingSlipTrans)
        {
            return vendPackingSlipTrans.RecId;
        }
        else if (parmLine)
        {
            return parmLine.RecId;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table ID of the transaction record that is associated to a packing slip line.
    /// </summary>
    /// <returns>
    ///    The table ID of the transaction record that is associated to a packing slip line.
    /// </returns>
    public tableId transTableId()
    {
        if (vendPackingSlipTrans)
        {
            return vendPackingSlipTrans.TableId;
        }
        else if (parmLine)
        {
            return parmLine.TableId;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether subledger journal lines should be generated.
    /// </summary>
    /// <returns>
    ///    true if the subledger journal lines should be generated; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        if (vendPackingSlipJour)
        {
            return true;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        if (vendPackingSlipJour)
        {
            return true;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Indicates whether the line amount has included tax.
    /// </summary>
    /// <returns>true if line amount has included tax; otherwise, false.</returns>
    public boolean isTaxIncluded()
    {
        boolean ret = super();

        if (vendPackingSlipJour)
        {
            SalesPurchLineInterface purchLineInterface = purchLine.salesPurchLineInterface();
            if (purchLineInterface.inclTax() ||
                (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                 && FormulaDesigner_IN::isPriceInclTaxOnLineAmount(purchLineInterface.parmTaxItemGroup())))
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>