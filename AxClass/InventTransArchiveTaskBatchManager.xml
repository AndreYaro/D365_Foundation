<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchiveTaskBatchManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class InventTransArchiveTaskBatchManager
{
    BatchHeader batchHeader;
    Batch       currentBatch;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBatchHeader</Name>
				<Source><![CDATA[
    public BatchHeader parmBatchHeader(BatchHeader _batchHeader = batchHeader)
    {
        batchHeader = _batchHeader;

        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentBatch</Name>
				<Source><![CDATA[
    public Batch parmCurrentBatch(Batch _currentBatch = currentBatch)
    {
        currentBatch = _currentBatch;

        return currentBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTransArchiveTaskBatchManager construct()
    {
        return new InventTransArchiveTaskBatchManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBatchParameters</Name>
				<Source><![CDATA[
    public static InventTransArchiveTaskBatchManager newFromBatchParameters(
        BatchHeader _batchHeader,
        Batch       _currentBatch)
    {
        if (!_batchHeader)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        InventTransArchiveTaskBatchManager inventTransArchiveTaskBatchManager = InventTransArchiveTaskBatchManager::construct();
        inventTransArchiveTaskBatchManager.parmBatchHeader(_batchHeader);
        inventTransArchiveTaskBatchManager.parmCurrentBatch(_currentBatch);

        return inventTransArchiveTaskBatchManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createArchiveBatchTasks</Name>
				<Source><![CDATA[
    public void createArchiveBatchTasks(SysGuidString _sessionId)
    {
        // Create batch tasks that will do the actual inventory transactions archiving
        RunBaseBatch runBaseBatchTask = InventTransArchiveProcessTask::newFromParameters(_sessionId);
        this.addTask(null, runBaseBatchTask);
        List currentTaskList = new List(Types::Class);
        currentTaskList.addEnd(runBaseBatchTask);

        RunBaseBatch updateProcessHistoryTableTask = this.createUpdateInventTransArchiveProcessHistoryTableTask(_sessionId);
        
        // Allow inventory transactions archiving task can be resumed and stopped, so batch job can be finished with ended status 
        // even dependency job finished with error status.
        this.addTask(currentTaskList, updateProcessHistoryTableTask, BatchDependencyStatus::FinishedOrError);
        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseArchivingBatchTasks</Name>
				<Source><![CDATA[
    public void createReverseArchivingBatchTasks(RecId _reverseInventTransArchivingRecId, RecId _inventTransArchivingRecId)
    {
        // Create batch tasks that will do the actual inventory transactions archiving reverse
        InventTransArchivingReverse_Restore inventTransArchivingReverse_Restore = InventTransArchivingReverse_Restore::construct();
        inventTransArchivingReverse_Restore.getLast();
        inventTransArchivingReverse_Restore.parmReverseInventTransArchivingRecId(_reverseInventTransArchivingRecId);
        inventTransArchivingReverse_Restore.parmInventTransArchivingRecId(_inventTransArchivingRecId);
        this.addTask(null, inventTransArchivingReverse_Restore);
        List  currentTaskList = new List(Types::Class);
        currentTaskList.addEnd(inventTransArchivingReverse_Restore); 

        InventTransArchivingReverse_End inventTransArchivingReverse_End = InventTransArchivingReverse_End::construct();
        inventTransArchivingReverse_End.getLast();
        inventTransArchivingReverse_End.parmReverseInventTransArchivingRecId(_reverseInventTransArchivingRecId);
        inventTransArchivingReverse_End.parmInventTransArchivingRecId(_inventTransArchivingRecId);

        this.addTask(currentTaskList, inventTransArchivingReverse_End, BatchDependencyStatus::Finished);
        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTask</Name>
				<Source><![CDATA[
    private void addTask(
        List                    _dependentTaskList,
        RunBaseBatch            _runBaseBatchtask,
        BatchDependencyStatus   _batchDependencyStatus = BatchDependencyStatus::Finished)
    {
        RunBaseBatch   dependentTask;
        ListEnumerator depTaskEnumerator;

        _runBaseBatchtask.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);

        batchHeader.addRuntimeTask(_runBaseBatchtask, this.parmCurrentBatch().BatchJobId);

        if (_dependentTaskList)
        {
            depTaskEnumerator = _dependentTaskList.getEnumerator();

            while (depTaskEnumerator.moveNext())
            {
                dependentTask = depTaskEnumerator.current();
                batchHeader.addDependency(_runBaseBatchtask, dependentTask, _batchDependencyStatus);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdateInventTransArchiveProcessHistoryTableTask</Name>
				<Source><![CDATA[
    private InventTransArchiveUpdateProcessHistoryTableTask createUpdateInventTransArchiveProcessHistoryTableTask(SysGuidString _sessionId)
    {
        return InventTransArchiveUpdateProcessHistoryTableTask::newFromParameters(_sessionId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>