<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCopyReplyData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQCopyReplyData
{
    PurchRFQId  purchRFQId;
    str         callerMenuItemName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerMenuItem</Name>
				<Source><![CDATA[
    public str parmCallerMenuItem(str _callerMenuItemName = callerMenuItemName)
    {
        callerMenuItemName = _callerMenuItemName;
        return callerMenuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQId</Name>
				<Source><![CDATA[
    public PurchRFQId parmPurchRFQId(PurchRFQId   _purchRFQId = purchRFQId)
    {
        purchRFQId = _purchRFQId;
        return purchRFQId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies suggested RFQ information from the RFQ tables to the reply tables.
    /// </summary>
    /// <param name="_updateStatus">
    /// A Boolean value that indicates whether to update the RFQ status.
    /// </param>
    public void run(boolean _updateStatus=true)
    {
        PurchRFQLine        purchRFQLine;
        PurchRFQLine        purchRFQLineAlternateParent;
        PurchRFQTable       purchRFQTable = PurchRFQTable::find(purchRFQId, true);
        PurchRFQReplyTable  purchRFQReplyTable;
        PurchRFQReplyLine   purchRFQReplyLine;
        boolean             rfqIsSealed = purchRFQCaseTable::find(purchRFQTable.RFQCaseId).IsSealed == NoYes::Yes;
        boolean             updated = false;

        ttsbegin;
        //Copy data to Reply must update the header reply fields only when all lines are in Sent status only for Vendor portal
        if (_updateStatus || purchRFQTable.StatusHigh == PurchRFQStatus::Sent)
        {
            purchRFQReplyTable = PurchRFQReplyTable::find(purchRFQId, true);
            purchRFQReplyTable.initFromPurchRFQTable(purchRFQTable);

            switch (this.parmCallerMenuItem())
            {
                case menuItemActionStr(PurchRFQReplyReset):
                    purchRFQReplyTable.ReplyProgressStatus = PurchRFQReplyProgressStatus::VendorEditing;
                    break;

                case menuItemActionStr(PurchRFQCopyReplyData):
                    purchRFQReplyTable.ReplyProgressStatus = PurchRFQReplyProgressStatus::ProcurementAgentEditing;
                    break;
            }

            purchRFQTable.PaymentSched = PaymTerm::find(PurchRFQReplyTable.Payment).PaymSched;
            purchRFQTable.update();

            if (rfqIsSealed)
            {
                purchRFQReplyTable.DoSeal = NoYes::Yes;
            }

            purchRFQReplyTable.write();
        }

        delete_from purchRFQLine
            where purchRFQLine.RFQId == purchRFQId
            && purchRFQLine.IsAlternate == NoYes::Yes;
        
        while select forupdate purchRFQReplyLine
            join forupdate purchRFQLine
                where purchRFQReplyLine.rfqId     == purchRFQId
                && purchRFQReplyLine.rfqLineRecId == purchRFQLine.RecId
        {
            //Copy data to Reply must update the reply fields only for lines that are in Sent status only for Vendor portal
            if ((_updateStatus && purchRFQLine.Status <= PurchRFQStatus::Received) ||
                (!_updateStatus && purchRFQLine.Status == PurchRFQStatus::Sent))
            {
                updated = true;
            }

            if (updated)
            {
                if (rfqIsSealed)
                {
                    purchRFQReplyLine.DoSeal = NoYes::Yes;
                }

                if (!purchRFQLine.IsAlternate)
                {
                    purchRFQReplyLine.initFromPurchRFQLine(purchRFQLine, true, this.parmCallerMenuItem());
                }
                else
                {
                    purchRFQLineAlternateParent = purchRFQLine.findParentForAlternate();

                    purchRFQReplyLine.initFromPurchRFQLine(purchRFQLineAlternateParent, false, this.parmCallerMenuItem());
                    purchRFQReplyLine.RFQLineRecId = purchRFQLine.RecId;
                }

                purchRFQReplyLine.update();
                if  (_updateStatus)
                {
                    purchRFQLine.updateStatus();
                }
                purchRFQLine.doUpdate();
            }
        }

        if (updated && _updateStatus)
        {
            purchRFQTable = PurchRFQTable::find(purchRFQId, true);
            purchRFQTable.updateStatus();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQCopyReplyData construct()
    {
        return new PurchRFQCopyReplyData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLineData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies data from a <c>PurchRFQLine</c> record buffer to a <c>PurchRFQReplyLine</c> record buffer.
    /// </summary>
    /// <param name="_fromPurchRFQLine">
    /// The <c>PurchRFQLine</c> record buffer from which to copy.
    /// </param>
    /// <param name="_toPurchRFQReplyLine">
    /// The <c>PurchRFQReplyLine</c> record buffer to which to copy.
    /// </param>
    /// <param name="_changeStatus">
    /// A Boolean value that indicates whether to update the status of the line item.
    /// </param>
    public static void copyLineData(PurchRFQLine _fromPurchRFQLine, PurchRFQReplyLine _toPurchRFQReplyLine, boolean _changeStatus)
    {
        PurchRFQTable purchRFQTable;

        _toPurchRFQReplyLine.initFromPurchRFQLine(_fromPurchRFQLine);
        _toPurchRFQReplyLine.update();

        if (_changeStatus)
        {
            _fromPurchRFQLine.updateStatus();
            _fromPurchRFQLine.doUpdate();
            purchRFQTable = PurchRFQTable::find(_fromPurchRFQLine.rfqId, true);
            purchRFQTable.updateStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PurchRFQCopyReplyData           replyCopy = PurchRFQCopyReplyData::construct();
        PurchRFQReceiveJournalCreate    purchRFQReceiveJournalCreate = PurchRFQReceiveJournalCreate::construct();
        PurchRFQTable                   purchRFQTable;

        if (_args.dataset() == tableNum(PurchRFQTable))
        {
            purchRFQTable = _args.record();
            replyCopy.parmPurchRFQId(purchRFQTable.rfqId);
            replyCopy.parmCallerMenuItem(_args.menuItemName());
        }

        replyCopy.run();

        purchRFQReceiveJournalCreate.parmPurchRFQTable(purchRFQTable);
        purchRFQReceiveJournalCreate.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>