<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBAAssemblyHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ProjBAAssemblyHelper</c> provides helper methods to access methods of a .Net assembly using reflection.
/// </summary>
class ProjBAAssemblyHelper
{
    System.Reflection.Assembly assembly;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a .Net class using reflection.
    /// </summary>
    /// <param name="_className">
    /// The name of the class to instantiate.
    /// </param>
    /// <param name="_parameter1">
    /// First parameter of the method.
    /// </param>
    /// <param name="_parameter2">
    /// Second parameter of the method.
    /// </param>
    /// <param name="_parameter3">
    /// Third parameter of the method.
    /// </param>
    /// <returns>
    /// The class object.
    /// </returns>
    public System.Object createObject(
        str             _className,
        System.Object   _parameter1 = null,
        System.Object   _parameter2 = null,
        System.Object   _parameter3 = null)
    {
        System.Object      classObject;
        System.Type        classType;
        System.Object[]    parameters;

        if (assembly)
        {
            try
            {
                parameters  = this.getParametersArray(_parameter1, _parameter2, _parameter3);
                classType   = assembly.GetType(_className);
                classObject = System.Activator::CreateInstance(classType);
            }
            catch (Exception::CLRError)
            {
                throw error(AifUtil::getClrErrorMessage());
            }
        }

        return classObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the string representation of the name of an enumerated constant to an equivalent enumerated object.
    /// </summary>
    /// <param name="_enumName">
    /// Name of the enumeration.
    /// </param>
    /// <param name="_enumElementName">
    /// Name of the enumerted constant.
    /// </param>
    /// <returns>
    /// An enumerated object.
    /// </returns>
    public System.Object getEnumType(str _enumName, str _enumElementName)
    {
        System.Object   enumObject;
        System.Type     type;

        type        = assembly.GetType(_enumName);
        enumObject  = System.Enum::Parse(type, _enumElementName);

        return enumObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMethodInfo</Name>
				<Source><![CDATA[
    private System.Reflection.MethodInfo getMethodInfo(
        System.Type         _classType,
        System.Object[]     _parameters,
        str                 _methodName)
    {
        System.Reflection.MethodInfo    methodInfo;
        System.Type[]                   parameterTypes;

        try
        {
            if (_parameters)
            {
                parameterTypes = System.Type::GetTypeArray(_parameters);
                methodInfo     = _classType.GetMethod(_methodName, parameterTypes);
            }
            else
            {
                methodInfo = _classType.GetMethod(_methodName);
            }
        }
        catch (Exception::CLRError)
        {
            throw error(AifUtil::getClrErrorMessage());
        }

        return methodInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParametersArray</Name>
				<Source><![CDATA[
    private System.Object[] getParametersArray(
        System.Object   _parameter1 = null,
        System.Object   _parameter2 = null,
        System.Object   _parameter3 = null)
    {
        System.Object[]                 parameters;
        System.Collections.ArrayList    parameterList;

        if (_parameter1 != null)
        {
            parameterList = new System.Collections.ArrayList();
            parameterList.Add(_parameter1);

            if (_parameter2 != null)
            {
                parameterList.Add(_parameter2);

                if (_parameter3 != null)
                {
                    parameterList.Add(_parameter3);
                }
            }
            parameters = parameterList.ToArray();
        }

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_assemblyName">
    /// Full name of the assembly.
    /// </param>
    public void initialize(str _assemblyName)
    {
        try
        {
            this.parmAssembly(System.Reflection.Assembly::Load(_assemblyName));
        }

        catch(Exception::CLRError)
        {
            throw error(strFmt("@SYS303997", _assemblyName, AifUtil::getClrErrorMessage()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes a method on an instance of a .Net class using reflection.
    /// </summary>
    /// <param name="_classObject">
    /// The instance of the class.
    /// </param>
    /// <param name="_methodName">
    /// The name of the method to invoke.
    /// </param>
    /// <param name="_parameter1">
    /// First parameter of the method.
    /// </param>
    /// <param name="_parameter2">
    /// Second parameter of the method.
    /// </param>
    /// <param name="_parameter3">
    /// Third parameter of the method.
    /// </param>
    /// <returns>
    /// Return value from the invoked method.
    /// </returns>
    public System.Object invokeMethod(
        System.Object   _classObject,
        str             _methodName,
        anytype         _parameter1 = null,
        anytype         _parameter2 = null,
        anytype         _parameter3 = null)
    {
        System.Object                   returnObject;
        System.Object[]                 parameters;
        System.Type                     classType;
        System.Reflection.MethodInfo    methodInfo;
        System.Object                   parameter1 = _parameter1;
        System.Object                   parameter2 = _parameter2;
        System.Object                   parameter3 = _parameter3;

        if (_classObject)
        {
            try
            {
                parameters   = this.getParametersArray(parameter1, parameter2, parameter3);
                classType    = _classObject.GetType();

                if (classType)
                {
                    methodInfo   = this.getMethodInfo(classType, parameters, _methodName);
                }

                if (methodInfo)
                {
                    if (parameters == null)
                    {
                        parameters = new System.Object[0]();
                    }
                    returnObject = methodInfo.Invoke(_classObject, parameters);
                }
            }
            catch (Exception::CLRError)
            {
                throw error(AifUtil::getClrErrorMessage());
            }
        }

        return returnObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeStaticMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes a static method of a .Net class using reflection.
    /// </summary>
    /// <param name="_className">
    /// The name of the class.
    /// </param>
    /// <param name="_methodName">
    /// The name of the method to invoke.
    /// </param>
    /// <param name="_parameter1">
    /// First parameter of the method.
    /// </param>
    /// <param name="_parameter2">
    /// Second parameter of the method.
    /// </param>
    /// <param name="_parameter3">
    /// Third parameter of the emthod.
    /// </param>
    /// <returns>
    /// Return value from the invoked method.
    /// </returns>
    public System.Object invokeStaticMethod(
        str             _className,
        str             _methodName,
        System.Object   _parameter1 = null,
        System.Object   _parameter2 = null,
        System.Object   _parameter3 = null)
    {
        System.Object                   returnObject;
        System.Object[]                 parameters;
        System.Type                     classType;
        System.Reflection.MethodInfo    methodInfo;

        if (_className)
        {
            try
            {
                parameters    = this.getParametersArray(_parameter1, _parameter2, _parameter3);
                classType     = assembly.GetType(_className);

                if (classType)
                {
                    methodInfo   = this.getMethodInfo(classType, parameters, _methodName);
                }

                if (methodInfo)
                {
                    if (parameters == null)
                    {
                        parameters = new System.Object[0]();
                    }
                    returnObject  = methodInfo.Invoke(null, parameters);
                }
            }
            catch (Exception::CLRError)
            {
                throw error(AifUtil::getClrErrorMessage());
            }
        }

        return returnObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssembly</Name>
				<Source><![CDATA[
    public System.Reflection.Assembly parmAssembly(System.Reflection.Assembly _assembly = assembly)
    {
        assembly = _assembly;
        return assembly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceAssemblyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the qualified assembly name for use in reflection.
    /// </summary>
    /// <returns>
    /// Business Anlayzer service assembly name.
    /// </returns>

    public static str getServiceAssemblyName()
    {
        return strFmt('Microsoft.Dynamics.AX.Framework.Services.BusinessAnalyzer, Version=%1, Culture=neutral, PublicKeyToken=31bf3856ad364e35', xInfo::releaseVersion());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAssembly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjBAAssemblyHelper</c> class and initializes the instance variables based on the assembly name.
    /// </summary>
    /// <param name="_assemblyName">
    /// Full name of the assembly.
    /// </param>
    /// <returns>
    /// An object of type <c>ProjBAAssemblyHelper</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error occurred while loading the assembly.
    /// </exception>
    public static ProjBAAssemblyHelper newFromAssembly(str _assemblyName)
    {
        ProjBAAssemblyHelper helper = new ProjBAAssemblyHelper();
        helper.initialize(_assemblyName);

        return helper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>