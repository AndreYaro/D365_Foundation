<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResInstrumentationLoggerProductAttribute_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResInstrumentationLoggerProductAttribute_Extension</c> class adds activities for product attribute related tasks to the product instrumentation logging.
/// </summary>
[ExtensionOf(classStr(EcoResInstrumentationLogger))]
internal final class EcoResInstrumentationLoggerProductAttribute_Extension
{
    private EcoResProductAttributeInstrumentationActivities  productAttributeActivities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>productAttributeActivities</Name>
				<Source><![CDATA[
    internal EcoResProductAttributeInstrumentationActivities productAttributeActivities()
    {
        if (!productAttributeActivities)
        {
            productAttributeActivities = EcoResProductAttributeInstrumentationActivities::newFromLogger(this);
        }
        return productAttributeActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProductAttributeInformation</Name>
				<Source><![CDATA[
    internal void logProductAttributeInformation(EcoResProductRecId _productRecId, EcoResAttributeRecId _attributeRecId)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        var properties = EcoResInstrumentationLoggerProperties::construct();

        serializer
            .setNameAndValue(properties.propertyByTableRecordId(tableNum(EcoResAttribute), _attributeRecId))
            .setNameAndValue(properties.propertyByTableRecordId(tableNum(EcoResProduct), _productRecId));

        logger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>