<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppAttachedImageDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppAttachedImageDetails</c> class serialize and deserialize the image info for the warehouse mobile app.
/// </summary>
public class WHSMobileAppAttachedImageDetails
{
    #WHSRF

    private WHSMobileAppImageType   imageType;
    private str                     imageIdentifier;
    private SelectableDataArea      dataAreaId;
    private const char Separator                = '|';
    public static const str InventDimSeparator  = '<InvDimSeparator>';

    private const char DimKeyValueSeparator     = ':';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(WHSMobileAppImageType _imageType = WHSMobileAppImageType::CompanyLogo, str _imageIdentifier = '', SelectableDataArea _dataAreaId = curExt())
    {
        this.imageType          = _imageType;
        this.imageIdentifier    = _imageIdentifier;
        this.dataAreaId         = _dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParams</Name>
				<Source><![CDATA[
    public static WHSMobileAppAttachedImageDetails newFromParams(WHSMobileAppImageType _imageType = WHSMobileAppImageType::CompanyLogo, str _imageIdentifier = '', SelectableDataArea _dataAreaId = curExt())
    {
        return new WHSMobileAppAttachedImageDetails(_imageType, _imageIdentifier, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the serialized string of <c>WHSMobileAppAttachedImageDetails</c> class that contains the required information to request the image.
    /// </summary>
    /// <returns>
    /// The serialized string of <c>WHSMobileAppAttachedImageDetails</c> class.
    /// </returns>
    public str serialize()
    {
        return dataAreaId + Separator + this.getImageTypeSymbol(imageType) + Separator +  imageIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes a <c>WHSMobileAppAttachedImageDetails</c> class to use it in provide the image.
    /// </summary>
    /// <param name="_serializedObject">
    /// The serialized string of <c>WHSMobileAppAttachedImageDetails</c> class.
    /// </param>
    public void deserialize(str _serializedObject)
    {
        ListEnumerator le = this.splitString(_serializedObject, Separator);
        le.moveNext();
        this.dataAreaId = le.current();
        le.moveNext();
        this.imageType = this.getImageTypeFromSymbol(le.current());
        le.moveNext();
        this.imageIdentifier = le.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitString</Name>
				<Source><![CDATA[
    private ListEnumerator splitString(str _targetString, char _separator)
    {
        List strlist = strSplit(_targetString, _separator);
        return strlist.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageTypeFromSymbol</Name>
				<Source><![CDATA[
    private WHSMobileAppImageType getImageTypeFromSymbol(str _imageTypeSymbol)
    {
        DictEnum dictEnum = DictEnum::newFromName(enumStr(WHSMobileAppImageType));
        WHSMobileAppImageType imageTypeValue = dictEnum.symbol2Value(_imageTypeSymbol);
        
        // Validate the provided symbol is valid
        if (dictEnum.value2Symbol(imageTypeValue) == _imageTypeSymbol)
        {
            return imageTypeValue;
        }

        // If not valid; default to company logo.
        return WHSMobileAppImageType::CompanyLogo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageTypeSymbol</Name>
				<Source><![CDATA[
    private str getImageTypeSymbol(WHSMobileAppImageType _imageType)
    {
        return enum2Symbol(enumNum(WHSMobileAppImageType), enum2int(_imageType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIdentifierFromMap</Name>
				<Source><![CDATA[
    public void setIdentifierFromMap(Map _productDimMap)
    {
        MapEnumerator mapEnumerator = _productDimMap.getEnumerator();
        str identifier;
        while (mapEnumerator.moveNext())
        {
            str mapKey = mapEnumerator.currentKey();
            str mapValue = mapEnumerator.currentValue();

            if (mapValue != '')
            {
                mapValue = this.removeLabelFromDimValue(mapKey, mapValue);
                str currentDim = strFmt("@WAX:ProductDim", mapKey, mapValue);
                identifier += (identifier ? InventDimSeparator : '') + currentDim;
            }
        }
        this.imageIdentifier = identifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataAreaId</Name>
				<Source><![CDATA[
    public SelectableDataArea parmDataAreaId(SelectableDataArea _dataAreaId = dataAreaId)
    {
        dataAreaId = _dataAreaId;
        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImageType</Name>
				<Source><![CDATA[
    public WHSMobileAppImageType parmImageType(WHSMobileAppImageType _imageType = imageType)
    {
        imageType = _imageType;
        return imageType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImageIdentifier</Name>
				<Source><![CDATA[
    public str parmImageIdentifier(str _imageIdentifier = imageIdentifier)
    {
        imageIdentifier = _imageIdentifier;
        return imageIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLabelFromDimValue</Name>
				<Source><![CDATA[
    private str removeLabelFromDimValue(str _name, str _value)
    {
        SysDictField dimField = SysDictField::newName(tableStr(InventDim), _name, 0);

        if (dimField && InventDim::isFieldIdProductDimension(dimField.id()))
        {
            str label = dimField.label() + ': ';

            if (label != '' && strScan(_value, label, 1, 1) == 1)
            {
                return strDel(_value, 1, strLen(label));
            }
        }

        return _value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>