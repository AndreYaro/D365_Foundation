<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmSourceType</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmSourceType
{
    smmSourceTypeTable  smmSourceTypeTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDefaultData</Name>
				<Source><![CDATA[
    protected void createDefaultData()
    {
        DictEnum dictEnum = DictEnum::newFromName(enumStr(SmmSourceTypeList));
        Enumerator enum = dictEnum.getEnumerator();

        while (enum.moveNext())
        {
            SmmSourceTypeList value = enum.current();
            if (value != SmmSourceTypeList::UserDefined)
            {
                smmSourceTypeTable.clear();
                smmSourceTypeTable.TypeId       = dictEnum.value2Name(enum2int(value));
                smmSourceTypeTable.Type         = value;
                smmSourceTypeTable.Description  = smmSourceTypeTable.TypeId;
                smmSourceTypeTable.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowedSourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the source type has correct permissions.
    /// </summary>
    /// <param name="_currentSourceType">
    /// The source type.
    /// </param>
    /// <returns>
    /// true if the source type has the appropriate permissions; otherwise, false.
    /// </returns>
    static boolean allowedSourceType(SmmSourceTypeList _currentSourceType)
    {
        DictEnum dictEnum = DictEnum::newFromName(enumStr(SmmSourceTypeList));

        if (dictEnum.isValueEnabled(_currentSourceType))
        {
            TableId tableId = smmSourceType::type2TableId(_currentSourceType);

            if (!tableId)
            {
                return true;
            }

            SysDictTable dictTable = new SysDictTable(tableId);

            if (dictTable && dictTable.rights() >= AccessType::View)
            {
                FieldId fieldId = smmSourceType::tableId2FieldId(smmSourceType::type2TableId(_currentSourceType));
                SysDictField dictField = new SysDictField(tableId,fieldId);
                if (dictField && dictField.rights() >= AccessType::View)
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>CaseLog.editDescriptionDelegate()</c> event.
    /// </summary>
    /// <param name="_set">
    /// true if the value has been set by the user, false if the value is being read.
    /// </param>
    /// <param name = "_log">
    /// The <c>CaseLog</c> record.
    /// </param>
    [SubscribesTo(tableStr(CaseLog), delegatestr(CaseLog, editDescriptionEvent))]
    public static void editDescription(boolean _set, CaseLog _log)
    {
        smmActivities       activities;
        SmmSourceTypeList   sourceType;

        sourceType = smmSourceTypeTable::find(_log.SourceTypeId).Type;

        // Check the source type
        if (sourceType == SmmSourceTypeList::Activity)
        {
            // Get the activity id
            activities = smmActivities::findWithRecId(_log.SourceRefRecId, true);

            if (activities.RecId)
            {
                // Set
                if (_set)
                {
                    // Update activities
                    if (!activities.Closed)
                    {
                        activities.Purpose = _log.Description;
                        activities.update();
                    }
                }
                // Get the description from different tables
                else
                {
                    if (!_log.Description)
                    {
                        _log.Description = activities.Purpose;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>CaseLog.editNotesDelegate()</c> event.
    /// </summary>
    /// <param name="_set">
    /// true if the value has been set by the user, false if the value is being read.
    /// </param>
    /// <param name = "_log">
    /// The <c>CaseLog</c> record.
    /// </param>
    [SubscribesTo(tableStr(CaseLog), delegatestr(CaseLog, editNotesEvent))]
    public static void editNotes(boolean _set, CaseLog _log)
    {
        smmActivities       activities;
        SmmSourceTypeList   sourceType;

        sourceType = smmSourceTypeTable::find(_log.SourceTypeId).Type;

        // Check the source type
        if (sourceType == SmmSourceTypeList::Activity)
        {
            // Get the activity id
            activities = smmActivities::findWithRecId(_log.SourceRefRecId, true);

            if (activities.RecId)
            {
                if (_set)
                {
                    if (!activities.Closed)
                    {
                        // Update activities
                        activities.UserMemo = _log.Notes;
                        activities.update();
                    }
                }
                // Get the notes from different tables
                else
                {
                    _log.Notes = activities.UserMemo;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default data.
    /// </summary>
    public void initDefaultData()
    {
        if (!smmSourceTypeTable::existType(SmmSourceTypeList::Campaign))
        {
            this.createDefaultData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The constructor.
    /// </summary>
    /// <returns>
    /// The instance of the <c>smmSourceType</c> class.
    /// </returns>
    public static smmSourceType construct()
    {
        return  new smmSourceType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string for the source type.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table ID.
    /// </param>
    /// <returns>
    /// The string of the type of the source table record.
    /// </returns>
    public static str displayTypeId(TableId _sourceTableId)
    {
        switch (_sourceTableId)
        {
            case tableNum(smmCampaignTable)     :
                return enum2str(SmmSourceTypeList::Campaign);

            case tableNum(CustTable)            :
                return enum2str(SmmSourceTypeList::Customer);

            case tableNum(HcmWorker)            :
                return enum2str(SmmSourceTypeList::Employee);

            case tableNum(VendTable)            :
                return enum2str(SmmSourceTypeList::Vendor);

            case tableNum(smmBusRelTable)       :
                return enum2str(SmmSourceTypeList::Prospect);

            case tableNum(smmActivities)       :
                return enum2str(SmmSourceTypeList::Activity);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLookupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the lookup fields from the source table.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table ID.
    /// </param>
    /// <returns>
    /// The container of the lookup fields.
    /// </returns>
    public static container getLookupFields(TableId _sourceTableId)
    {
        container fields = conNull();
        SysDictField    dictField;
        if (smmSourceType::allowedSourceType(smmSourceType::tableId2Type(_sourceTableId)))
        {
            dictField = new SysDictField(_sourceTableId, smmSourceType::tableId2FieldId(_sourceTableId));

            // Get the main ID field as the select Field and the corresponding EDT
            fields += [dictField.name(), extendedTypeId2name(dictField.typeId())];
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the source type.
    /// </summary>
    /// <param name="_ctrl">
    /// The form control.
    /// </param>
    /// <param name="_sourceTypeId">
    /// The source type.
    /// </param>
    public static void lookupSourceId(FormStringControl _ctrl, SmmSourceTypeId _sourceTypeId)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(smmSourceTypeOptions), _ctrl);
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange      queryBuildRange;
        Query                query;
        FieldId              fieldId;
        TableId              tableId;

        if (_sourceTypeId)
        {
            tableId = smmSourceType::type2TableId(smmSourceTypeTable::find(_sourceTypeId).Type);
            fieldId = smmSourceType::tableId2FieldId(tableId);

            if (tableId == tableNum(HcmWorker))
            {
                // Lookup for Type Option HCMWorker

                query = new Query();
                sysTableLookup = SysTableLookup::newParameters(tableNum(HcmWorker), _ctrl);
                queryBuildDataSource = query.addDataSource(tableNum(HcmWorker));

                sysTableLookup.addLookupfield(fieldNum(HcmWorker, PersonnelNumber),true);
                sysTableLookup.addLookupfield(fieldNum(HcmWorker, Person));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
            }
            else
            {
                if (tableId != tableNum(smmSourceTypeOptions))
                {
                    _ctrl.performTypeLookup((new SysDictField(tableId,
                                            fieldId).typeId()));
                }
                else
                {
                    // Lookup for Type Options or User-Defined Types

                    sysTableLookup.addLookupfield(fieldNum(smmSourceTypeOptions, Name),true);
                    sysTableLookup.addLookupfield(fieldNum(smmSourceTypeOptions, Description));

                    query = new Query();
                    queryBuildDataSource = query.addDataSource(tableNum(smmSourceTypeOptions));
                    queryBuildRange = queryBuildDataSource.addRange(fieldNum(smmSourceTypeOptions,TypeId));
                    queryBuildRange.value(queryValue(_sourceTypeId));

                    sysTableLookup.parmQuery(query);
                    sysTableLookup.performFormLookup();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preDefinedType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the source type is predefined.
    /// </summary>
    /// <param name="_sourceType">
    /// The source type.
    /// </param>
    /// <returns>
    /// true if the source type is predefined; otherwise, false.
    /// </returns>
    public static boolean preDefinedType(str _sourceType)
    {
        SysDictEnum sysDictEnum = new SysDictEnum(enumNum(SmmSourceTypeList));
        int i;

        for (i = 0; i < sysDictEnum.values(); i++)
        {
            if (sysDictEnum.index2Value(i)  != enum2int(SmmSourceTypeList::UserDefined) &&
                sysDictEnum.index2Name(i)   == _sourceType)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId2FieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the table ID.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID.
    /// </param>
    /// <returns>
    /// The field ID for the table.
    /// </returns>
    public static FieldId tableId2FieldId(TableId _sourceTableId)
    {
        switch (_sourceTableId)
        {
            case tableNum(smmCampaignTable)     :
                return fieldNum(smmCampaignTable, CampaignId);

            case tableNum(CustTable)            :
                return fieldNum(CustTable, AccountNum);

            case tableNum(HcmWorker)            :
                return fieldNum(HcmWorker, PersonnelNumber);

            case tableNum(VendTable)            :
                return fieldNum(VendTable, AccountNum);

            case tableNum(smmBusRelTable)       :
                return fieldNum(smmBusRelTable, BusRelAccount);

            case tableNum(smmSourceTypeOptions) :
                return fieldNum(smmSourceTypeOptions, Name);

            case tableNum(smmActivities)        :
                return fieldNum(smmActivities, ActivityNumber);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId2Type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type based on the specified table.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID passed.
    /// </param>
    /// <returns>
    /// The source type.
    /// </returns>
    public static SmmSourceTypeList tableId2Type(TableId _tableId)
    {
        switch (_tableId)
        {
            case tableNum(smmCampaignTable) :
                return SmmSourceTypeList::Campaign;

            case tableNum(CustTable) :
                return SmmSourceTypeList::Customer;

            case tableNum(HcmWorker) :
                return SmmSourceTypeList::Employee;

            case tableNum(VendTable) :
                return SmmSourceTypeList::Vendor;

            case tableNum(smmBusRelTable) :
                return SmmSourceTypeList::Prospect;

            case tableNum(smmSourceTypeOptions) :
                return SmmSourceTypeList::UserDefined;

            case tableNum(smmActivities) :
                return SmmSourceTypeList::Activity;

            default :
                return SmmSourceTypeList::UserDefined;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>type2TableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table ID that matches the type.
    /// </summary>
    /// <param name="_sourceTypeList">
    /// The source type.
    /// </param>
    /// <returns>
    /// The table ID.
    /// </returns>
    public static TableId type2TableId(SmmSourceTypeList _sourceTypeList)
    {
        switch (_sourceTypeList)
        {
            case SmmSourceTypeList::Campaign    :
                return tableNum(smmCampaignTable);

            case SmmSourceTypeList::Customer    :
                return tableNum(CustTable);

            case SmmSourceTypeList::Employee    :
                return tableNum(HcmWorker);

            case SmmSourceTypeList::Vendor      :
                return tableNum(VendTable);

            case SmmSourceTypeList::Prospect    :
                return tableNum(smmBusRelTable);

            case SmmSourceTypeList::UserDefined :
                return tableNum(smmSourceTypeOptions);

            case SmmSourceTypeList::Activity :
                return tableNum(smmActivities);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type2typeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type ID for the type.
    /// </summary>
    /// <param name="type">
    /// The source type.
    /// </param>
    /// <returns>
    /// The type ID.
    /// </returns>
    public static SmmSourceTypeId type2typeId(SmmSourceTypeList type)
    {
        smmSourceTypeTable  smmSourceTypeTable;

        smmSourceTypeTable.selectForUpdate(false);

        // Select the type for the type id
        select firstonly @TypeId from smmSourceTypeTable
            where smmSourceTypeTable.Type == type;

        return smmSourceTypeTable.TypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source types that reference the prospect who is now converted to customer.
    /// </summary>
    /// <param name="_custVendId">
    /// The table ID for a <c>CustVend</c> record.
    /// </param>
    /// <param name="_prospectRecId">
    /// A prospect record ID.
    /// </param>
    /// <param name="_custVendRecId">
    /// A <c>CustVend</c> record ID.
    /// </param>
    public static void updateSourceType(TableId _custVendId, RecId _prospectRecId, RecId _custVendRecId)
    {
        smmLeadTable        smmLeadTable;
        smmOpportunityTable smmOpportunityTable;

        // Update Lead table referencing to the prospect who is now converted to customer
        update_recordset smmLeadTable
            setting SourceRefTableId = _custVendId,
                    SourceRefRecId   = _custVendRecId
            where   smmLeadTable.SourceRefTableId == tableNum(smmBusRelTable)
                 && smmLeadTable.SourceRefRecId   == _prospectRecId;

        // Update Opportunity table referencing to the prospect who is now converted to customer
        update_recordset smmOpportunityTable
            setting SourceRefTableId = _custVendId,
                    SourceRefRecId   = _custVendRecId
            where   smmOpportunityTable.SourceRefTableId == tableNum(smmBusRelTable)
                 && smmOpportunityTable.SourceRefRecId   == _prospectRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId2FieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field name for the table ID.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID.
    /// </param>
    /// <returns>
    /// The natural key field name for the table.
    /// </returns>
    public static FieldName tableId2FieldName(TableId _sourceTableId)
    {
        FieldName ret;
        FieldId fieldId = smmSourceType::tableId2FieldId(_sourceTableId);

        if (fieldId != 0)
        {
            ret = fieldId2Name(_sourceTableId, fieldId);
        }
        else
        {
            ret = '';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndCreateCaseLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a case log if it doesn't exist.
    /// </summary>
    /// <param name = "caseRecId">
    /// The case.
    /// </param>
    /// <param name = "sourceType">
    /// The <c>smmSourceTypeId</c>.
    /// </param>
    /// <param name = "sourceRecId">
    /// The <c>smmSourceRecId</c>.
    /// </param>
    public static void checkAndCreateCaseLog(RefRecId caseRecId, SmmSourceTypeId sourceType, smmSourceRecId sourceRecId)
    {
        CaseLog     caseLog;

        caseLog.selectForUpdate(false);

        // Check the case
        select firstonly caseLog
            where caseLog.CaseRecId == caseRecId &&
                caseLog.SourceTypeId == sourceType &&
                    caseLog.SourceRefRecId == sourceRecId;

        // Check if case log exists
        if (caseLog.RecId == 0)
        {
            caseLog.CaseRecId = caseRecId;
            caseLog.SourceTypeId = sourceType;
            caseLog.SourceRefRecId = sourceRecId;
            caseLog.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndCreateCaseLogForSourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a case log for an activity if the case log does not exist.
    /// </summary>
    /// <paramName = "_activities">The <c>smmActivities</c> record.</paramName>
    /// <param name = "_smmActivityParentLinkTable">A <c>smmActivityParentLinkTable</c> record; optional.</param>
    public static void checkAndCreateCaseLogForSourceType(smmActivities _activities, smmActivityParentLinkTable _smmActivityParentLinkTable = null)
    {
        RecId linkTableRecId = _smmActivityParentLinkTable.RefRecId;

        if (linkTableRecId == 0)
        {
            smmActivityParentLinkTable linkTable = smmActivityParentLinkTable::findParentLink(_activities.ActivityNumber, smmActivityParentType::Case, false);
            linkTableRecId = linkTable.RefRecId;
        }

        if (linkTableRecId != 0)
        {
            // Check if there is a case log assigned
            smmSourceType::checkAndCreateCaseLog(linkTableRecId,
                smmSourceType::type2typeId(SmmSourceTypeList::Activity), _activities.RecId);
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>