<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSDeferredPOReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSDeferredPOReceiving extends WHSDeferredReceiving
{
    #WHSRF

    private WHSReceiptOrderLine receiptOrderLine;
    private WHSWorkTransType workTransType = WHSWorkTransType::Purch;
    private WHSRFPassthrough pass;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    internal static WHSDeferredPOReceiving newFromParameters(
        WHSRFPassthrough _pass,
        WHSReceiptOrderLine _orderLine,
        WHSRFMenuItemTable _menuItemTable,
        WHSDefaultContainerTypeCode _defaultContainerCode,
        WHSWorkTransType _workTransType)
    {
        WHSDeferredPOReceiving deferredReceiving = new WHSDeferredPOReceiving();

        deferredReceiving.initFromParameters(_pass, _menuItemTable, _defaultContainerCode);

        deferredReceiving.parmReceiptOrderLine(_orderLine);
        deferredReceiving.parmWorkTransType(_workTransType);

        if (WHSDeferredPOReceivingHandleCatchWeightFlight::instance().isEnabled())
        {
            deferredReceiving.parmPass(_pass);
        }

        return deferredReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    protected internal void initFromParameters(WHSRFPassthrough _pass, WHSRFMenuItemTable _menuItemTable, WHSDefaultContainerTypeCode _defaultContainerCode)
    {
        super(_pass, _menuItemTable, _defaultContainerCode);

        this.parmLoadId(_pass.parmLoadId());
        this.parmShipmentId(_pass.lookupStr(#ShipmentId));
        this.parmInventLocationId(_pass.parmInventLocationId());
        this.parmCurrentUOM(_pass.parmCurrentUOM());
        this.parmCurrentQty(_pass.parmCurrentQty());
        if (WHSDeferredReceivingDispositionCodeAndUnitizedQtyFlight::instance().isEnabled())
        {
            this.parmTotalQty(_pass.parmQty());
            this.parmItemId(_pass.parmItemId());
            this.parmUOM(_pass.parmUOM());
            this.parmDispositionCode(_pass.parmDispositionCode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPass</Name>
				<Source><![CDATA[
    internal WHSRFPassthrough parmPass(WHSRFPassthrough _pass = pass)
    {
        pass = _pass;
        return pass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptOrderLine</Name>
				<Source><![CDATA[
    internal WHSReceiptOrderLine parmReceiptOrderLine(WHSReceiptOrderLine _receiptOrderLine = receiptOrderLine)
    {
        receiptOrderLine = _receiptOrderLine;
        return receiptOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTransType</Name>
				<Source><![CDATA[
    internal WHSWorkTransType parmWorkTransType(WHSWorkTransType _workTransType = workTransType)
    {
        workTransType = _workTransType;
        return workTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMixedLPData</Name>
				<Source><![CDATA[
    private void createMixedLPData(InventDimId _inventDimId, InventQty _qty, InventHandlingQty _totalReceiptQty, WHSCapturedWeight _capturedWeight = 0)
    {
        WHSMixedLicensePlateReceiptLine line = WHSMixedLicensePlateReceiptLine::mixedLPReceiveLineForDeferredReceiving(_inventDimId,
            receiptOrderLine.InventTransId,
            _qty,
            _capturedWeight,
            receiptId,
            userId,
            menuItemName,
            loadId,
            shipmentId,
            containerTypeCode,
            this.parmWorkTransType(),
            receiptOrderLine.ItemId,
            _totalReceiptQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeferBasedOnPolicy</Name>
				<Source><![CDATA[
    private boolean shouldDeferBasedOnPolicy()
    {
        WHSDeferredReceivingPolicy deferPolicy = WHSDeferredReceivingPolicy::find(deferredReceivingPolicyId);

        if (deferPolicy.DeferredReceivingPolicySelection == WHSDeferredReceivingPolicySelectionEnum::Never ||
            (deferPolicy.DeferredReceivingPolicySelection == WHSDeferredReceivingPolicySelectionEnum::PerSelection && deferPolicy.OnSerialTrackedItems == NoYes::No))
        {
            return false;
        }

        // If policy is selected then for PO Item receiving the only option to defer is to have a serial controlled item
        if (deferPolicy.DeferredReceivingPolicySelection == WHSDeferredReceivingPolicySelectionEnum::PerSelection
            && !receiptOrderLine.inventTable().isItemSerialNumberActivated())
        {
            return false;
        }

        // Deferred receiving is not supported for catch weight tag tracked items
        if (WHSInventTable::isCatchWeightTagTracked(receiptOrderLine.ItemId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimFromPass</Name>
				<Source><![CDATA[
    private InventDimId createInventDimFromPass()
    {
        if (!passthroughInventDim.InventStatusId)
        {
            passthroughInventDim.InventStatusId = receiptOrderLine.inventDim().InventStatusId;
        }
        passthroughInventDim.wMSLocationId = InventLocation::find(passthroughInventDim.InventLocationId).wmsLocationIdDefaultReceipt;
        passthroughInventDim = InventDim::findOrCreate(passthroughInventDim);

        return passthroughInventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryToDeferPurchaseOrderReceiving</Name>
				<Source><![CDATA[
    internal boolean tryToDeferPurchaseOrderReceiving()
    {
        if (!this.shouldDeferBasedOnPolicy())
        {
            return false;
        }

        InventHandlingQty totalReceiptQty = WHSDeferredReceivingDispositionCodeAndUnitizedQtyFlight::instance().isEnabled() ?
            WHSCatchWeightHelper::convertInventQuantity(this.parmItemId(), this.parmUOM(), this.parmTotalQty(), receiptOrderLine.InventDimId) :
            0;

        WHSCapturedWeight calcCatchWeight = 0;
        if (PdsGlobal::pdsIsCWItem(receiptOrderLine.ItemId) && WHSDeferredPOReceivingHandleCatchWeightFlight::instance().isEnabled())
        {
            calcCatchWeight = WHSCatchWeightHelper::calculateCatchWeightAndUpdatePass(receiptOrderLine.ItemId, receiptOrderLine.InventQty, totalReceiptQty, pass);
        }

        if (WHSReceiptDetails::existByReceiptIdLicensePlate(receiptId, licensePlateId))
        {
            WHSReceiptDetails receiptDetails;
            InventDim receiptDetailsInventDim;

            while select receiptDetails
                where receiptDetails.ReceiptId == receiptId
                join receiptDetailsInventDim
                    where receiptDetailsInventDim.InventDimId     == receiptDetails.InventDimId
                    &&    receiptDetailsInventDim.LicensePlateId  == licensePlateId
            {
                this.createMixedLPData(receiptDetails.InventDimId, receiptDetails.InventQty, totalReceiptQty, receiptDetails.CapturedWeight);
            }
        }
        else
        {
            this.createMixedLPData(
                this.createInventDimFromPass(),
                WHSCatchWeightHelper::convertInventQuantity(receiptOrderLine.ItemId, currentUOM, currentQty, receiptOrderLine.InventDimId),
                totalReceiptQty,
                calcCatchWeight);
        }

        if (this.parmDispositionCode() && WHSDeferredReceivingDispositionCodeAndUnitizedQtyFlight::instance().isEnabled())
        {
            WHSMixedLicensePlateReceipt receipt = WHSMixedLicensePlateReceipt::find(receiptId, true);
            if (receipt && receipt.DispositionCode != this.parmDispositionCode())
            {
                receipt.DispositionCode = this.parmDispositionCode();
                receipt.update();
            }
        }

        if (WHSDeferredReceivingBatchTaskBundleCreationContext::isInContext() && WHSDeferredReceivingBatchTaskBundleCreationFlight::instance().isEnabled())
        {
            WHSDeferredReceivingBatchTaskBundleCreationContext::getContext().addReceiptIdToProcess(receiptId);
        }
        else
        {
            WHSDeferredReceiving::createBatchTaskToProcessDeferredReceiving(WHSMixedLicensePlateReceipt::find(receiptId, true));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>