<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportController_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportController_NL</c> class is the controller class for the <c>TaxReport_NL</c> report.
/// </summary>
[SysObsolete('This class is no longer used.', true, 01\12\2022)]
public class TaxReportController_NL extends SrsReportRunController implements BatchRetryable
{
    LabelType               displayLabel;
    TaxBase                 displayBaseAmount;
    TaxAmount               displayAmount;
    
    TaxReportAmounts_NL     amounts;

    TaxReport               taxReport;
    TaxReportVoucher        taxReportVoucher;
    TransDate               fromDate;
    TransDate               toDate;
    TaxPeriod               taxPeriod;
    TaxRepVersion           taxRepVersion;
    TaxVersion              taxRepCounter;
    TaxReportTmp_NL         taxReportTmp_NL;
    TmpTaxReportById        tmpTaxReportById;
    recId                   tmpDataRecId;
    SRSReportRunPermission  permission;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNL00007, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        recId  tmpDataRecId;
        TaxReportTmp_NL         taxReportTmp_NL;
        SrsReportRunController  controller = new TaxReportController_NL();
        controller.parmReportName(ssrsReportStr(TaxReport_NL, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <returns>
    ///    The record ID of the temporary table.
    /// </returns>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    [SysObsoleteAttribute('This method has been moved to TaxReportDP_NL', true, 13\6\2019)]
    public recId fetch()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes all the required objects.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>TaxReport_NL</c> class.
    /// </param>
    public void init(Args _args)
    {
        this.initFromArgs(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amount values.
    /// </summary>
    [SysObsoleteAttribute('This method has been moved to TaxReportDP_NL', true, 13\6\2019)]
    public void initAmounts()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns values for the fields in the temporary table, depending on the <c>args</c> value.
    /// </summary>
    /// <param name="_args">
    ///    The caller arguments.
    /// </param>
    void initFromArgs(Args _args)
    {
        TaxReportContract_NL contract = this.parmReportContract().parmRdpContract() as TaxReportContract_NL;

        if (_args)
        {
            switch (_args.dataset())
            {
                case tablenum(TaxReportVoucher):
                    taxReportVoucher    = _args.record();
                    contract.parmTaxRepVerisonContract(taxReportVoucher.TaxRepVersion);
                    contract.parmTaxPeriodContract(taxReportVoucher.TaxPeriod);
                    contract.parmTaxFromDateContract(taxReportVoucher.FromDate);
                    contract.parmTaxToDateContract(taxReportVoucher.ToDate);
                    contract.parmTaxRepCounterContract(taxReportVoucher.TaxRepCounter);

                    break;
                default:
                    if (_args.parmObject() is TaxReport)
                    {
                        taxReport       = _args.parmObject();
                        contract.parmTaxRepVerisonContract(taxReport.taxRepVersion());
                        contract.parmTaxPeriodContract(taxReport.taxPeriod());
                        contract.parmTaxFromDateContract(taxReport.fromDate());
                        contract.parmTaxToDateContract(taxReport.toDate());
                        contract.parmUpdateNow(taxReport.update());
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        this.init(this.parmArgs());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the data into instance of the temporary table.
    /// </summary>
    [SysObsoleteAttribute('This method has been moved to TaxReportDP_NL', true, 13\6\2019)]
    private void insertIntoTempTable(Integer _taxId, str _text, AmountMST _baseAmount = 0, AmountMST _amount = 0)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores the temporary table by using the <c>SRSTmpTblMarshaller</c> class.
    /// </summary>
    /// <returns>
    ///    The record ID of the temporary table after storing it in the container.
    /// </returns>
    [SysObsoleteAttribute('This method should not be used', true, 13\6\2019)]
    private recId storeTmpTable()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>