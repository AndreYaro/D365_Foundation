<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomCalcCheck extends BOMCalcCheckBase
{
    str                 txtNoBOM;
    str                 txtNoRoute;
    str                 txtNoConsumption;
    str                 txtNoCostPrice;
    str                 txtZeroCostPrice;
    str                 txtAgeCostPrice;
    str                 txtMinContribution;
    str                 txtMissingUpdates;
    str                 txtUseFallBack;
    str                 txtUseBasePrice;
    str                 txtSubBomWarnings;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAgeCostPrice</Name>
				<Source><![CDATA[
    void addAgeCostPrice(int       _costPriceAgeInDays,
                         int       _limitInDays,
                         str       _strText        = txtAgeCostPrice,
                         Exception _exceptionType  = exceptionType)
    {
        BOMCalcCheckBase::infologMsgAdd(exceptionType, strfmt(_strText, _costPriceAgeInDays, _limitInDays));

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMinContribution</Name>
				<Source><![CDATA[
    void addMinContribution(real        _contribRatioInPercent,
                            real        _limitInPercent,
                            str         _strText        = txtMinContribution,
                            Exception   _exceptionType  = exceptionType)
    {
        BOMCalcCheckBase::infologMsgAdd(exceptionType, strfmt(_strText, _contribRatioInPercent, _limitInPercent));

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMissingUpdates</Name>
				<Source><![CDATA[
    void addMissingUpdates(
        str                     _itemExtendedName,
        CostingVersionPriceType _priceType,
        str                     _strText        = txtMissingUpdates,
        Exception               _exceptionType  = exceptionType
        )
    {
        str priceType = strlwr(strfmt("%1",_priceType));

        BOMCalcCheckBase::infologMsgAdd(exceptionType, strfmt(_strText, _itemExtendedName, priceType));

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNoBOM</Name>
				<Source><![CDATA[
    void addNoBOM(str _strText = txtNoBOM, Exception _exceptionType = exceptionType)
    {
        BOMCalcCheckBase::infologMsgAdd(exceptionType, _strText);

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNoConsumption</Name>
				<Source><![CDATA[
    void addNoConsumption(str _strText = txtNoConsumption, Exception _exceptionType = exceptionType)
    {
        BOMCalcCheckBase::infologMsgAdd(exceptionType, _strText);

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNoCostPrice</Name>
				<Source><![CDATA[
    void addNoCostPrice(str _strText = txtNoCostPrice, Exception _exceptionType = exceptionType)
    {
        BOMCalcCheckBase::infologMsgAdd(exceptionType, _strText);

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNoRoute</Name>
				<Source><![CDATA[
    void addNoRoute(str _strText = txtNoRoute, Exception _exceptionType = exceptionType)
    {
        BOMCalcCheckBase::infologMsgAdd(exceptionType, _strText);

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSubBomWarnings</Name>
				<Source><![CDATA[
    void addSubBomWarnings(PriceCalcId _warningLink, str _strText = txtSubBomWarnings, Exception _exceptionType = exceptionType)
    {
        BOMCalcInfoAction   bomCalcInfoAction;
        BOMCalcTable        bomCalcTable;

        select firstonly bomCalcTable
            where bomCalcTable.PriceCalcId == _warningLink;

        bomCalcInfoAction = BOMCalcInfoAction::newFormnameRecord(formstr(BOMCalcTrans), bomCalcTable);
        bomCalcInfoAction.parmCallerBuffer(bomCalcTable);

        BOMCalcCheckBase::infologMsgAdd(exceptionType, _strText, '', bomCalcInfoAction);

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUseFallBack</Name>
				<Source><![CDATA[
    void addUseFallBack(
        CostingVersionId        _costingVersionId,
        CostingVersionPriceType _priceType,
        str                     _strText            = txtUseFallBack,
        Exception               _exceptionType      = exceptionType
        )
    {
        switch (_costingVersionId)
        {
            case ' ':
                BOMCalcCheckBase::infologMsgAdd(exceptionType, strfmt(txtUseBasePrice, _priceType));
                break;

            default:
                BOMCalcCheckBase::infologMsgAdd(exceptionType, strfmt(_strText, _costingVersionId, _priceType));
        }

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addZeroCostPrice</Name>
				<Source><![CDATA[
    void addZeroCostPrice(str _strText = txtZeroCostPrice, Exception _exceptionType = exceptionType)
    {
        BOMCalcCheckBase::infologMsgAdd(exceptionType, _strText);

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgeCostPrice</Name>
				<Source><![CDATA[
    void checkAgeCostPrice(TransDate        _costPriceDate,
                           BOMCalcCostPrice _costPriceModel,
                           str              _strText        = txtAgeCostPrice,
                           Exception        _exceptionType  = exceptionType)
    {
        int     costPriceAgeInDays;

        if (!checkAgeCostPrice                                   ||
            _costPriceDate == dateNull()                        ||
           _costPriceModel == BOMCalcCostPrice::OnhandPrice)
        {
            return;
        }

        costPriceAgeInDays = calcDate - _costPriceDate;

        if (costPriceAgeInDays > checkAgeCostPrice)
        {
            this.addAgeCostPrice(costPriceAgeInDays, checkAgeCostPrice, _strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMinContribution</Name>
				<Source><![CDATA[
    void checkMinContribution(real          _contribRatioInPercent,
                              str           _strText        = txtMinContribution,
                              Exception     _exceptionType  = exceptionType)
    {
        if (!checkMinContribution)
        {
            return;
        }

        if (_contribRatioInPercent < checkMinContribution)
        {
            this.addMinContribution(_contribRatioInPercent, checkMinContribution, _strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMissingUpdates</Name>
				<Source><![CDATA[
    void checkMissingUpdates(
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        TransDate                   _calcDate,
        CostingVersionId            _costingVersionId,
        InventSiteId                _newSiteId,
        BOMCalcCostingVersionUpdate _calcCostingVersionUpdate,
        NoYes                       _salesPriceTransfer,
        NoYes                       _costPriceTransfer,
        str                         _strText                    = txtMissingUpdates,
        Exception                   _exceptionType              = exceptionType
        )
    {
        str itemExtendedName;

        if (!checkMissingUpdates)
        {
            return;
        }

        if (_calcCostingVersionUpdate == BOMCalcCostingVersionUpdate::MissingOnly)
        {
            itemExtendedName = InventTable::showItemSiteAndProductDim(_itemId, InventDim::find(_inventDimId), _newSiteId);

            if (_costPriceTransfer)
            {
                if (InventItemPriceSim::find(_itemId, _costingVersionId, _calcDate, CostingVersionPriceType::Cost, _inventDimId, _newSiteId).RecId)
                {
                    this.addMissingUpdates(itemExtendedName, CostingVersionPriceType::Cost, _strText, _exceptionType);
                }
            }

            if (_salesPriceTransfer)
            {
                if (InventItemPriceSim::find(_itemId, _costingVersionId, _calcDate, CostingVersionPriceType::Sales, _inventDimId, _newSiteId).RecId)
                {
                    this.addMissingUpdates(itemExtendedName, CostingVersionPriceType::Sales, _strText, _exceptionType);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoBOM</Name>
				<Source><![CDATA[
    void checkNoBOM(BOMId       _bomId,
                    str         _strText        = txtNoBOM,
                    Exception   _exceptionType  = exceptionType)
    {
        if (!checkNoBOM)
        {
            return;
        }

        if (!_bomId)
        {
            this.addNoBOM(_strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoConsumption</Name>
				<Source><![CDATA[
    void checkNoConsumption(real        _consumption,
                            str         _strText        = txtNoConsumption,
                            Exception   _exceptionType  = exceptionType)
    {
        if (!checkNoConsump)
        {
            return;
        }

        if (_consumption == 0)
        {
            this.addNoConsumption(_strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoCostPrice</Name>
				<Source><![CDATA[
    void checkNoCostPrice(boolean       _costPricePresent,
                          str           _strText        = txtNoCostPrice,
                          Exception     _exceptionType  = exceptionType)
    {
        if (!checkNoCostPrice)
        {
            return;
        }

        if (!_costPricePresent)
        {
            this.addNoCostPrice(_strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoRoute</Name>
				<Source><![CDATA[
    void checkNoRoute(RouteId       _routeId,
                      str           _strText        = txtNoRoute,
                      Exception     _exceptionType  = exceptionType)
    {
        if (!checkNoRoute)
        {
            return;
        }

        if (!_routeId)
        {
            this.addNoRoute(_strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSubBomWarnings</Name>
				<Source><![CDATA[
    void checkSubBomWarnings(PriceCalcId    _subBomWarningLink,
                             str            _strText              = txtSubBomWarnings,
                             Exception      _exceptionType        = exceptionType)
    {
        if (_subBomWarningLink != '')
        {
            this.addSubBomWarnings(_subBomWarningLink, _strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUseFallBack</Name>
				<Source><![CDATA[
    void checkUseFallBack(
        CostingVersionId            _costCostingFallBackVersion,
        CostingVersionId            _salesCostingFallBackVersion,
        str                         _strText                    = txtUseFallBack,
        Exception                   _exceptionType              = exceptionType
        )
    {
        if (!checkUseFallBack)
        {
            return;
        }

        if (_costCostingFallBackVersion)
        {
            this.addUseFallBack(_costCostingFallBackVersion, CostingVersionPriceType::Cost, _strText, _exceptionType);
        }

        if (_salesCostingFallBackVersion)
        {
            this.addUseFallBack(_salesCostingFallBackVersion, CostingVersionPriceType::Sales, _strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkZeroCostPrice</Name>
				<Source><![CDATA[
    void checkZeroCostPrice(CostPrice     _costPrice,
                            boolean         _costPricePresent   = true,
                            str           _strText              = txtZeroCostPrice,
                            Exception     _exceptionType        = exceptionType)
    {
        if (!checkNoCostPrice)
        {
            return;
        }

        if (_costPricePresent && _costPrice == 0)
        {
            this.addZeroCostPrice(_strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        txtNoBOM                = "@SYS67672";
        txtNoRoute              = "@SYS67317";
        txtNoConsumption        = "@SYS97514";
        txtNoCostPrice          = "@SYS127860";
        txtZeroCostPrice        = "@SYS97515";
        txtAgeCostPrice         = "@SYS97516";
        txtMinContribution      = "@SYS97517";
        txtMissingUpdates       = "@SYS106147";
        txtUseFallBack          = "@SYS106146";
        txtUseBasePrice         = "@SYS121298";
        txtSubBomWarnings       = "@SYS127861";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExceptionType</Name>
				<Source><![CDATA[
    Exception parmExceptionType(Exception _exceptionType = exceptionType)
    {
        exceptionType = _exceptionType;
        return exceptionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMCalcCheck construct()
    {
        return new BOMCalcCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCalcBase</Name>
				<Source><![CDATA[
    static BOMCalcCheck newBOMCalcBase(BOMCalcBase _bomCalcBase)
    {
        BOMCalcCheck    bomCalcCheck = BOMCalcCheck::construct();

        bomCalcCheck.initBOMCalcBase(_bomCalcBase);

        return bomCalcCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCalcItemLine</Name>
				<Source><![CDATA[
    static BOMCalcCheck newBOMCalcItemLine(BOMCalcItemLine _bomCalcItemLine)
    {
        BOMCalcCheck    bomCalcCheck = BOMCalcCheck::construct();

        bomCalcCheck.initBOMCalcBase(_bomCalcItemLine.parmParentBOMCalc());

        return bomCalcCheck;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>