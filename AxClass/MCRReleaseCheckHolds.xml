<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRReleaseCheckHolds</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRReleaseCheckHolds</c> class that extends the <c>RunBaseBatch</c> class. implements BatchRetryable
/// </summary>
/// <remarks>
///     Release all check holds that have been held for a specified length of time.
///     Running this will release all check holds that have been on hold long enough.
///     An order with a check payment on hold is processed when the customers specified wait period has passed.
///     If that value is 0, then it releases the order based on the wait period set in AR parametrs.
///     If accounts receivable parameters value is 0, then this batch does nothing.
/// </remarks>
class MCRReleaseCheckHolds extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dialog of release check holds.
    /// </summary>
    /// <returns>The dialog object.</returns>
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = new DialogRunbase("@MCR25017", this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the job to release check holds.
    /// </summary>
    public void run()
    {
        MCROrderEventTable      mcrOrderEventTable;
        MCRSalesOrderTotals     mcrSalesOrderTotals;
        SalesTable              salesTable;
        MCRCustPaymTable        mcrCustPaymTable;
        CustInvoiceTable        custInvoiceTable;
        //  Stores the number of days specified in AR parameters.
        Integer                 paramNumOfDays  = 0;
        Integer                 custNumOfDays   = 0;
        real                    daysOnHold;
        boolean                 releasePayment  = false;
        MCRCustPaymTotals       mcrCustPaymTotals;

        paramNumOfDays = SalesParameters::find().MCRCheckHoldNumberOfDays;

        //  Only release payments that are on check hold where the related sales order is either open,
        //  pending payments, or on hold. Only release orders that are either pending payments or open
        while select forupdate mcrCustPaymTable
            order by Status
            where mcrCustPaymTable.Status   == MCRCustPaymStatus::Posted
            join forupdate salesTable
            where salesTable.RecId          == mcrCustPaymTable.RefRecId
               && salesTable.TableId        == mcrCustPaymTable.RefTableId
               && salesTable.SalesStatus    == SalesStatus::Backorder
        {
            daysOnHold      = MCRCustPaymTable::getDaysSinceCreation(mcrCustPaymTable.RecId);
            custNumOfDays   = MCRCustTable::findByCustAccount(mcrCustPaymTable.CustAccount).CheckHoldNumberOfDays;
            if (custNumOfDays > 0)
            {
                if (custNumOfDays <= daysOnHold)
                {
                    releasePayment = true;
                }
            }
            else if (paramNumOfDays > 0)
            {
                if (paramNumOfDays <= daysOnHold)
                {
                    releasePayment = true;
                }
            }
            if (releasePayment)
            {
                mcrSalesOrderTotals                 = new mcrSalesOrderTotals(salesTable);

                mcrCustPaymTable.Status             = MCRCustPaymStatus::Paid;
                mcrCustPaymTable.CheckAuthorized    = NoYes::Yes;

                mcrCustPaymTotals = MCRCustPaymTotals::construct(tableNum(SalesTable), salesTable.RecId);

                if (!mcrCustPaymTotals.allPaymentsApproved())
                {
                    ttsBegin;
                    if (salesTable.validateWrite())
                    {
                        salesTable.update();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }

                    if (mcrCustPaymTable.validateWrite())
                    {
                        mcrCustPaymTable.update();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }
                    ttsCommit;

                    MCREndOrder::endOrder(salesTable.SalesId, false, mcrSalesOrderTotals);
                    info(strFmt("@MCR25179", salesTable.SalesId));
                }
                else
                {
                    // If end order isn't called, we still need to update the payment table.
                    // Update on a table must be called within a transaction.
                    ttsBegin;

                    if (mcrCustPaymTable.validateWrite())
                    {
                        mcrCustPaymTable.update();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }

                    ttsCommit;
                }

                // Write an event recording who did the release.
                mcrOrderEventTable.insertPaymentEvent(MCROrderEventType::CheckHoldRelease, mcrCustPaymTable,
                    strFmt("@MCR25014", mcrCustPaymTable.Amount, mcrCustPaymTable.CurrencyCode));

                releasePayment = false;
            }
        }

        releasePayment = false;

        while select forupdate mcrCustPaymTable
            order by Status
            join custInvoiceTable
            where mcrCustPaymTable.Status   == MCRCustPaymStatus::Posted
               && mcrCustPaymTable.RefRecId == custInvoiceTable.RecId
        {
                daysOnHold      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - DateTimeUtil::date(mcrCustPaymTable.CreatedDateTime);
                custNumOfDays   = MCRCustTable::findByCustAccount(mcrCustPaymTable.CustAccount).CheckHoldNumberOfDays;
                if (custNumOfDays > 0)
                {
                    if (custNumOfDays <= daysOnHold)
                    {
                        releasePayment = true;
                    }
                }
                else if (paramNumOfDays > 0)
                {
                    if (paramNumOfDays <= daysOnHold)
                    {
                        releasePayment = true;
                    }
                }
                if (releasePayment)
                {
                    ttsBegin;

                    mcrCustPaymTable.Status             = MCRCustPaymStatus::NotSubmitted;
                    mcrCustPaymTable.CheckAuthorized    = NoYes::Yes;
                    if (mcrCustPaymTable.validateWrite())
                    {
                        mcrCustPaymTable.update();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }

                    ttsCommit;

                    info(strFmt("@MCR25180", custInvoiceTable.InvoiceId));
                }

                releasePayment = false;
        }

        info("@MCR25015");
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void  main(Args  args)
    {
        MCRReleasECheckHolds    mcrReleasECheckHolds;

        mcrReleasECheckHolds    = new mcrReleasECheckHolds();

        if (mcrReleasECheckHolds.prompt())
        {
            mcrReleasECheckHolds.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>MCRReleaseCheckHolds</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>MCRReleaseCheckHolds</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// This batch job is not retryable because run() is not wrapped with a transaction.
    /// </summary>
    /// <returns>An instance of BatchInfo with the configuration for retryable and retries.</returns>
    public BatchInfo batchInfo()
    {
        BatchInfo info = super();

        info.parmRetryable(false);
        info.parmRetriesOnFailure(0);

        return info;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>