<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCombination_DataSharingTableEvents</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>InventDimCombination_DataSharingTableEvents</c> class processes data sharing table event operations cross company.
/// </summary>
internal class InventDimCombination_DataSharingTableEvents implements SysDataSharingApplicationSuiteITableEventsProcessor
{
    private SysDataSharingApplicationSuiteTableEventsProcessorParameters dataSharingTableEventParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static InventDimCombination_DataSharingTableEvents construct()
    {
        return new InventDimCombination_DataSharingTableEvents();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSharingParameters</Name>
				<Source><![CDATA[
    public SysDataSharingApplicationSuiteTableEventsProcessorParameters dataSharingParameters()
    {
        return this.dataSharingTableEventParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProcessor</Name>
				<Source><![CDATA[
    public void initializeProcessor(Common _dataSharingRecord)
    {
        this.dataSharingTableEventParameters = InventDimCombination_DataSharingTableEvents::createParameters(_dataSharingRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataSharingCompany</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final void insertDataSharingCompany(DataAreaId _dataSharingCompany)
    {
        var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(InventDimCombination), DataEventType::Inserted);
        
        if (context && this.dataSharingTableEventParameters && this.dataSharingTableEventParameters.OrigDataSharingRecord.RecId)
        {
            Set companyList = context.parmProcessedCompanies();
            if (!companyList.in(_dataSharingCompany))
            {
                companyList.add(_dataSharingCompany);

                InventDimCombination origInventDimCombination = this.dataSharingTableEventParameters.OrigDataSharingRecord;

                InventDimCombination inventDimCombination;
                buf2Buf(origInventDimCombination, inventDimCombination);
            
                inventDimCombination.InventDimId = this.retrieveProductInventDimIdCurrentCompany(origInventDimCombination.DistinctProductVariant);

                if (!inventDimCombination.validateWrite())
                {
                    throw error(strFmt("@SCM:SysDataSharingCannotInsertRecordInTable", tablePName(InventDimCombination), _dataSharingCompany));
                }

                var contextSkipDistinctProductVariantValidation = InventDimCombinationInsertSkipDistinctProductVariantValidationContext::current();
                inventDimCombination.insert(contextSkipDistinctProductVariantValidation && contextSkipDistinctProductVariantValidation.parmSkipDistinctProductVariantValidation());
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDataSharingCompany</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final void deleteDataSharingCompany(DataAreaId _dataSharingCompany)
    {
        var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(InventDimCombination), DataEventType::Deleted);

        if (context && this.dataSharingTableEventParameters && this.dataSharingTableEventParameters.OrigDataSharingRecord.RecId)
        {
            Set companyList = context.parmProcessedCompanies();
            if (!companyList.in(_dataSharingCompany))
            {
                companyList.add(_dataSharingCompany);
                
                InventDimCombination origInventDimCombination = this.dataSharingTableEventParameters.OrigDataSharingRecord;

                InventDimId inventDimId = this.retrieveProductInventDimIdCurrentCompany(origInventDimCombination.DistinctProductVariant);
                if (inventDimId)
                {
                    InventDimCombination inventDimCombination = InventDimCombination::find(origInventDimCombination.ItemId, inventDimId, true);
                    if (inventDimCombination.RecId)
                    {
                        if (!inventDimCombination.validateDelete())
                        {
                            throw error(strFmt("@SCM:SysDataSharingCannotDeleteRecordInTable", tablePName(InventDimCombination), _dataSharingCompany));
                        }
                        inventDimCombination.delete();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataSharingCompany</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final void updateDataSharingCompany(DataAreaId _dataSharingCompany)
    {
        var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(InventDimCombination), DataEventType::Updated);
        
        if (context && this.dataSharingTableEventParameters && this.dataSharingTableEventParameters.OrigDataSharingRecord.RecId)
        {
            Set companyList = context.parmProcessedCompanies();
            if (!companyList.in(_dataSharingCompany))
            {
                companyList.add(_dataSharingCompany);

                InventDimCombination origInventDimCombination = this.dataSharingTableEventParameters.OrigDataSharingRecord;

                InventDimId inventDimId = this.retrieveProductInventDimIdCurrentCompany(origInventDimCombination.DistinctProductVariant);
                if (inventDimId)
                {
                    ttsbegin;
                    InventDimCombination inventDimCombination = InventDimCombination::find(origInventDimCombination.ItemId, inventDimId, true);
                    if (inventDimCombination.RecId && inventDimCombination.ProductLifecycleStateId != origInventDimCombination.ProductLifecycleStateId)
                    {
                        inventDimCombination.ProductLifecycleStateId = origInventDimCombination.ProductLifecycleStateId;
                        if (!inventDimCombination.validateWrite())
                        {
                            throw error(strFmt("@SCM:SysDataSharingCannotUpdateRecordInTable", tablePName(InventItemGroupItem), _dataSharingCompany));
                        }
                        inventDimCombination.update();
                    }
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveProductInventDimIdCurrentCompany</Name>
				<Source><![CDATA[
    private InventDimId retrieveProductInventDimIdCurrentCompany(RefRecId _product)
    {
        InventDim  inventDim;
        Enumerator productDimensionsEnumerator = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (productDimensionsEnumerator.moveNext())
        {
            InventProductDimension productDimension = productDimensionsEnumerator.current();
            inventDim.(productDimension.parmInventDimFieldId()) = productDimension.retrieveDimensionNaturalKeyByProductId(_product);
        }

        return InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParameters</Name>
				<Source><![CDATA[
    private static SysDataSharingApplicationSuiteTableEventsProcessorParameters createParameters(Common _dataSharingRecord)
    {
        SysDataSharingApplicationSuiteTableEventsProcessorParameters tableEventsProcessorParameters = SysDataSharingApplicationSuiteTableEventsProcessorParameters::construct();
        tableEventsProcessorParameters.CurrentCompany = curExt();
        tableEventsProcessorParameters.DataSharingPolicyTableNames = [tableStr(InventTable)];
        tableEventsProcessorParameters.OrigDataSharingRecord = _dataSharingRecord;
        return tableEventsProcessorParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDimCombination_onInserted</Name>
				<Source><![CDATA[
    // Post Events for Data sharing of InventDimCombination table 
    [DataEventHandler(tableStr(InventDimCombination), DataEventType::Inserted)]
    public static void InventDimCombination_onInserted(Common _dataSharingRecord, DataEventArgs e)
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(InventDimCombination), DataEventType::Inserted);
            if (!context && SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(curExt(), tableStr(InventTable)))
            {
                SysDataSharingApplicationSuiteITableEventsProcessor tableEventsProcessorInventDimCombination = InventDimCombination_DataSharingTableEvents::construct();
                tableEventsProcessorInventDimCombination.initializeProcessor(_dataSharingRecord);

                SysDataSharingApplicationSuiteTableEventsProcessor processor = SysDataSharingApplicationSuiteTableEventsProcessor::newTableEventProcessor(tableEventsProcessorInventDimCombination);
                using (var contextInsertCompany = SysDataSharingApplicationSuiteTableDataEventContext::newTableEvent(tableStr(InventDimCombination), DataEventType::Inserted))
                {
                    processor.insertCrossCompany();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDimCombination_onDeleted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventDimCombination), DataEventType::Deleted)]
    public static void InventDimCombination_onDeleted(Common _dataSharingRecord, DataEventArgs e)
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(InventDimCombination), DataEventType::Deleted);
            if (!context && SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(curExt(), tableStr(InventTable)))
            {
                SysDataSharingApplicationSuiteITableEventsProcessor tableEventsProcessorInventDimCombination = new InventDimCombination_DataSharingTableEvents();
                tableEventsProcessorInventDimCombination.initializeProcessor(_dataSharingRecord);

                SysDataSharingApplicationSuiteTableEventsProcessor processor = SysDataSharingApplicationSuiteTableEventsProcessor::newTableEventProcessor(tableEventsProcessorInventDimCombination);
                using (var contextDeleteCompany = SysDataSharingApplicationSuiteTableDataEventContext::newTableEvent(tableStr(InventDimCombination), DataEventType::Deleted))
                {
                    processor.deleteCrossCompany();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDimCombination_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventDimCombination), DataEventType::Updated)]
    public static void InventDimCombination_onUpdated(Common _dataSharingRecord, DataEventArgs e)
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(InventDimCombination), DataEventType::Updated);
            if (!context && SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(curExt(), tableStr(InventTable)))
            {
                SysDataSharingApplicationSuiteITableEventsProcessor tableEventsProcessorInventDimCombination = new InventDimCombination_DataSharingTableEvents();
                tableEventsProcessorInventDimCombination.initializeProcessor(_dataSharingRecord);

                SysDataSharingApplicationSuiteTableEventsProcessor processor = SysDataSharingApplicationSuiteTableEventsProcessor::newTableEventProcessor(tableEventsProcessorInventDimCombination);
                using (var contextUpdateCompany = SysDataSharingApplicationSuiteTableDataEventContext::newTableEvent(tableStr(InventDimCombination), DataEventType::Updated))
                {
                    processor.updateCrossCompany();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>