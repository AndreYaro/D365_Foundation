<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureEditLinesEngineEmpl_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureEditLinesEngineEmpl_RU extends FactureEditLinesEngine_RU
{
    QueryBuildRange emplRange;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressDefaultSec</Name>
				<Source><![CDATA[
    protected LogisticsPostalAddress addressDefaultSec()
    {
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJour</Name>
				<Source><![CDATA[
    protected boolean checkJour(CustVendInvoiceJour _jour,
                                boolean             _proforma = false)
    {
        EmplAdvTable_RU localEmplAdvTable = _jour;
        boolean         ret;

        ret = super(localEmplAdvTable, _proforma) && localEmplAdvTable.Status == EmplAdvStatus_RU::Posted;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans(CustVendInvoiceTrans _trans)
    {
        EmplAdvLine_RU localEmplAdvLine = _trans;
        boolean        ret;

        ret = super(localEmplAdvLine)                                  &&
              (localEmplAdvLine.LineType == EmplAdvLineType_RU::Expend ||
               localEmplAdvLine.LineType == EmplAdvLineType_RU::None);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentControlOK</Name>
				<Source><![CDATA[
    protected boolean contragentControlOK()
    {
        return employeeControl.text() ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInit</Name>
				<Source><![CDATA[
    public void contragentInit()
    {
        if (sourceRecord && sourceRecord.TableId == tablenum(EmplAdvTable_RU))
        {
            this.contragent(sourceRecord.(fieldnum(EmplAdvTable_RU, EmplAccount)));
        }
        else
        {
            this.contragent((select firstonly EmployeeId from employeeTable_RU
                                 order by EmployeeId
                                 where employeeTable_RU.AdvHolder == NoYes::Yes).EmployeeId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInitDefault</Name>
				<Source><![CDATA[
    public void contragentInitDefault()
    {
        employeeControl.text(contragent);
        currencyControl.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaChanged</Name>
				<Source><![CDATA[
    public void criteriaChanged(boolean _clear = true)
    {
        super(_clear);

        this.contragent(employeeControl.text());

        emplAdvTableDS.executeQuery();
        emplAdvLineDS.executeQuery();
        this.buildTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveAdvLine</Name>
				<Source><![CDATA[
    public void dsActiveAdvLine()
    {
        EmplAdvLine_RU  line  = emplAdvLineDS.cursor();
        EmplAdvTable_RU table = emplAdvTableDS.cursor();

        emplAdvLineDS.allowEdit(! line.FacturedFully_RU &&
                                  table.TransDate <= factureDateControl.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsActiveAdvTable</Name>
				<Source><![CDATA[
    public void dsActiveAdvTable()
    {
        EmplAdvTable_RU table = emplAdvTableDS.cursor();

        emplAdvTableDS.allowEdit(! table.FacturedFully_RU                      &&
                                   table.Status    == EmplAdvStatus_RU::Posted &&
                                   table.TransDate <= factureDateControl.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteAdvTable</Name>
				<Source><![CDATA[
    public boolean dsExecuteAdvTable()
    {
        emplRange.value(employeeControl.text());
        factureDateRange.value(this.valueBeforeFactureDate());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitAdvLine</Name>
				<Source><![CDATA[
    public void dsInitAdvLine()
    {
        QueryBuildDataSource tmpDS = emplAdvLineDS.query().dataSourceTable(tablenum(EmplAdvLine_RU));

        tmpDS.addRange(fieldnum(EmplAdvLine_RU, LineType)).value(int2str(EmplAdvLineType_RU::Expend) +
                                                                 comma                               +
        int2str(EmplAdvLineType_RU::None));
        tmpDS.findRange(fieldnum(EmplAdvLine_RU, LineType)).status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitAdvTable</Name>
				<Source><![CDATA[
    public void dsInitAdvTable()
    {
        QueryBuildDataSource tmpDS = emplAdvTableDS.query().dataSourceTable(tablenum(EmplAdvTable_RU));

        tmpDS.clearDynalinks();
        tmpDS.clearRanges();
        tmpDS.addSortField(fieldnum(EmplAdvTable_RU, TransDate), SortOrder::Ascending);
        tmpDS.addSortField(fieldnum(EmplAdvTable_RU, AdvanceId), SortOrder::Ascending);

        emplRange        = tmpDS.addRange(fieldnum(EmplAdvTable_RU, EmplAccount));
        factureDateRange = tmpDS.addRange(fieldnum(EmplAdvTable_RU, TransDate));

        emplRange.status(RangeStatus::Hidden);
        factureDateRange.status(RangeStatus::Hidden);

        tmpDS.addRange(fieldnum(EmplAdvTable_RU, Status)).value(int2str(EmplAdvStatus_RU::Posted));
        tmpDS.addRange(fieldnum(EmplAdvTable_RU, FacturedFully_RU)).value(int2str(NoYes::No));
        tmpDS.addRange(fieldnum(EmplAdvTable_RU, AdvanceId)).value(SysQuery::valueNotEmptyString());

        tmpDS.findRange(fieldnum(EmplAdvTable_RU, Status)).status(RangeStatus::Hidden);
        tmpDS.findRange(fieldnum(EmplAdvTable_RU, FacturedFully_RU)).status(RangeStatus::Hidden);
        tmpDS.findRange(fieldnum(EmplAdvTable_RU, AdvanceId)).status(RangeStatus::Hidden);

        tmpDS = tmpDS.addDataSource(tablenum(EmplAdvLine_RU));
        tmpDS.addRange(fieldnum(EmplAdvLine_RU, LineType)).value(int2str(EmplAdvLineType_RU::Expend) +
                                                                 comma                               +
        int2str(EmplAdvLineType_RU::None));
        tmpDS.findRange(fieldnum(EmplAdvLine_RU, LineType)).status(RangeStatus::Hidden);

        tmpDS.relations(true);
        tmpDS.joinMode(JoinMode::ExistsJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>extFactureIdNumSeqCode</Name>
				<Source><![CDATA[
    public NumberSequenceCode extFactureIdNumSeqCode()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureType</Name>
				<Source><![CDATA[
    public FactureType_RU factureType()
    {
        return FactureType_RU::AdvanceReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJourByTrans</Name>
				<Source><![CDATA[
    protected void findJourByTrans(Common _trans) // _trans is EmplAdvLine_Ru
    {
        CustVendInvoiceTrans localCustVendInvoiceTrans = _trans;
        ;

        tmpJour = EmplAdvTable_RU::find(localCustVendInvoiceTrans.InvoiceNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransByJour</Name>
				<Source><![CDATA[
    protected void findTransByJour(Common _jour) // _jour is EmplAdvTable_Ru
    {
        EmplAdvTable_RU localEmplAdvTable = _jour as EmplAdvTable_RU;
        ;

        select tmpTrans
            where  tmpTrans.InvoiceNum  == localEmplAdvTable.AdvanceId    &&
                  (tmpTrans.EmplLineType_RU == EmplAdvLineType_RU::Expend ||
                   tmpTrans.EmplLineType_RU == EmplAdvLineType_RU::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeliveryAddress</Name>
				<Source><![CDATA[
    public void initDeliveryAddress()
    {
        // do nothing for employee
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainDataSource</Name>
				<Source><![CDATA[
    protected FormDataSource mainDataSource()
    {
        return emplAdvTableDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun mainQueryRun()
    {
        return emplAdvTableDS.queryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU _factureCreate)
    {
        super(_factureCreate);

        tmpJour   = new DictTable(tablenum(EmplAdvTable_RU)).makeRecord();
        localJour = new DictTable(tablenum(EmplAdvTable_RU)).makeRecord();
        tmpTrans  = new DictTable(tablenum(EmplAdvLine_RU)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offAccount</Name>
				<Source><![CDATA[
    protected CustVendAC offAccount()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
    protected OffReportType_RU offReportType()
    {
        return OffReportType_RU::EmplAdvanceReportFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirstSourceId</Name>
				<Source><![CDATA[
    public str parmFirstSourceId(str _new = firstSourceId)
    {
        firstSourceId = _new;
        return firstSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFactureExternalIdControl</Name>
				<Source><![CDATA[
    #JmgConstants
    public void refreshFactureExternalIdControl()
    {
        if (  factureExternalIdControl           &&
              factureExternalIdControl.enabled() &&
            ! factureExternalIdControl.text())
        {
            factureExternalIdControl.lookupButton(#LOOKUP_NEVER);
            factureExternalIdControl.text(this.parmFirstSourceId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchDS</Name>
				<Source><![CDATA[
    protected void researchDS()
    {
        ;
        FactureEditLinesEngine_RU::dsResearch(emplAdvLineDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleContragents</Name>
				<Source><![CDATA[
    public void setVisibleContragents()
    {
        customerControl.visible(false);
        vendorControl.visible(false);
        employeeControl.visible(true);
        factureCustomerControl.visible(false);
        factureCustomerControl.mandatory(false);
        factureVendorControl.visible(false);
        factureVendorControl.mandatory(false);

        taxCorrectionContragentTypeControl.visible(false);
        taxCorrectionContragentTypeControl.selection(FactureTaxCorrectionContragentType_RU::Customer); //dummy
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    public void setVisibleControls()
    {
        creditNoteControl.visible(false);
        positiveControl.visible(false);
        showJournalsControl.visible(false);
        externalDateGroupControl.visible(true);
        factureExtIdNumSegGroupIdControl.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleTabs</Name>
				<Source><![CDATA[
    public void setVisibleTabs()
    {
        custTabControl.visible(false);
        vendTabControl.visible(false);
        emplTabControl.visible(true);
        ledgTabControl.visible(false);
        addrTabPageControl.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transHeaderName</Name>
				<Source><![CDATA[
    protected str transHeaderName()
    {
        return "@GLS104521";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transName</Name>
				<Source><![CDATA[
    protected str transName(CustVendInvoiceTrans _trans)
    {
        EmplAdvLine_RU localEmplAdvLine = _trans;

        return factureCreate                                                   ?
               strfmt("@GLS104976",
                      localEmplAdvLine.AdvanceId,
                      localEmplAdvLine.LineNum,
                      localEmplAdvLine.DocumentNum,
                      localEmplAdvLine.DocumentName,
                      (isInsertAllJours ?
                       this.lookupTrans([ localEmplAdvLine.TableId, localEmplAdvLine.RecId ]) :
                       factureCreate.lookupTrans([ localEmplAdvLine.TableId, localEmplAdvLine.RecId ]))) :
               "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeControl</Name>
				<Source><![CDATA[
    protected FormTreeControl treeControl()
    {
        return emplTreeControl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>