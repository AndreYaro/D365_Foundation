<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuantity_ShippingBill_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the sales quantity for India shipping bill.
/// </summary>
[DocumentStatusFactory(DocumentStatus::ShippingBill_IN)]
public  class   SalesQuantity_ShippingBill_IN
        extends SalesQuantity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateQtyUpdateInventDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for inventory.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the invent quantity of the shipping bill.
    /// </summary>
    /// <param name="_common">
    /// The instance of the <c>Common</c> class.
    /// </param>
    /// <param name="_specQty">
    /// The sales update information.
    /// </param>
    /// <param name="_qty">
    /// The invent quantity amount.
    /// </param>
    /// <param name="_creditRemaining">
    /// True if there is any credit remaining.
    /// </param>
    /// <param name="_calcRemaining">
    /// True if the remaining will be calculate.
    /// </param>
    /// <param name="_packingSlips">
    /// The packing slip id for update.
    /// </param>
    /// <returns>
    /// The invent quantity of the sales quantity shipping bill.
    /// </returns>
    //protected container calcQtyInvent(SalesLine     _salesLine,
    protected container calcQtyInvent(Common        _common,
                                      SalesUpdate   _specQty             = SalesUpdate::All,
                                      InventQty     _qty                 = naReal(),
                                      boolean       _creditRemaining     = false,
                                      boolean        _calcRemaining       = true,
                                      PackingSlipIdForUpdate_W _packingSlips   = '')
    {
        InventQty           qtyUpdate;
        InventQty           numOfRemainOri;
        InventQty           qtyRemainNew;
        NoYes               remainOk            = NoYes::No;
        NoYes               remainCalculated    = NoYes::No;
        SalesLine           salesLine = _common;

        #ISOCountryRegionCodes

        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId));

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = this.inventDeliverNow(salesLine);
                    break;

                case SalesUpdate::All:
                    if (salesLine.DeliveryType == TradeLineDlvType::DropShip && _calcRemaining)
                    {
                        if (this.inventDeliverNow(salesLine))
                        {
                            qtyUpdate = this.inventDeliverNow(salesLine);
                        }
                        else
                        {
                            qtyUpdate = -inventTransIdSum.physical();
                        }
                    }
                    else
                    {
                        if (salesLine.RemainInventPhysical * -inventTransIdSum.physical() < 0)
                        {
                            qtyUpdate = -inventTransIdSum.physical();
                        }
                        else
                        {
                            qtyUpdate = salesLine.RemainInventPhysical - inventTransIdSum.physical();
                        }
                    }
                    break;

                case SalesUpdate::PackingSlip: 
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
                    {
                        qtyUpdate = -(inventTransIdSum.physical() - inventTransIdSum.physicalAfterDate(this.parmTransDate()));
                    }
                    else
                    {
                        qtyUpdate = -inventTransIdSum.physical();
                    }
                    break;

                case SalesUpdate::PickingList: 
                    qtyUpdate = -inventTransIdSum.picked();
                    break;

                default: 
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventDelegate(salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            numOfRemainOri = salesLine.RemainInventPhysical - inventTransIdSum.physical();
            remainOk = salesLine.type().setInvoiceRemainOk(qtyUpdate, _creditRemaining, numOfRemainOri);
            if (remainOk)
                qtyRemainNew = salesLine.RemainInventPhysical;
            else
            {
                if (qtyUpdate > 0)
                {
                    if (salesLine.QtyOrdered < 0)
                    {
                        qtyRemainNew = salesLine.RemainInventPhysical;

                        if ((_specQty == SalesUpdate::DeliverNow || _specQty == SalesUpdate::All || _specQty == SalesUpdate::PackingSlip) && _creditRemaining)
                        {
                            if (salesLine.RemainSalesFinancial < qtyUpdate)
                            {
                                qtyRemainNew = qtyRemainNew - (qtyUpdate - salesLine.RemainSalesFinancial);
                            }
                        }
                        remainCalculated = NoYes::Yes;
                    }
                    else
                        qtyRemainNew = max(qtyUpdate + inventTransIdSum.physical(),0);
                }
                else if (qtyUpdate < 0)
                {
                    if (salesLine.QtyOrdered > 0)
                    {
                        qtyRemainNew = salesLine.RemainInventPhysical;

                        if ((_specQty == SalesUpdate::DeliverNow || _specQty == SalesUpdate::All || _specQty == SalesUpdate::PackingSlip) && _creditRemaining)
                        {
                            if (salesLine.RemainSalesFinancial > qtyUpdate)
                            {
                                qtyRemainNew = qtyRemainNew - (qtyUpdate - salesLine.RemainSalesFinancial);
                            }
                        }
                        remainCalculated = NoYes::Yes;
                    }
                    else
                        qtyRemainNew = min(qtyUpdate + inventTransIdSum.physical(),0);
                }
                else
                    qtyRemainNew = 0;
                if (!remainCalculated)
                {
                    qtyRemainNew = numOfRemainOri + inventTransIdSum.physical() - qtyRemainNew;
                }
                if (qtyRemainNew * salesLine.SalesQty <= 0)
                    qtyRemainNew = 0;
                else
                {
                    if (qtyUpdate * salesLine.SalesQty < 0)
                    {
                        if (qtyRemainNew > 0)
                            qtyRemainNew = min(qtyRemainNew,salesLine.QtyOrdered);
                        else
                            qtyRemainNew = max(qtyRemainNew,salesLine.QtyOrdered);
                    }
                }
            }
        }
        return [qtyUpdate,numOfRemainOri,qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtySales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sales quantity.
    /// </summary>
    /// <param name="_common">
    /// The instance of the <c>Common</c> class.
    /// </param>
    /// <param name="_specQty">
    /// The sales update information.
    /// </param>
    /// <param name="_qty">
    /// The sales quantity information.
    /// </param>
    /// <param name="_creditRemaining">
    /// True if there is any credit remaining.
    /// </param>
    /// <param name="_calcRemaining">
    /// True if the remaining should be calculate.
    /// </param>
    /// <param name="_packingSlips">
    /// The packing slip id for update.
    /// </param>
    /// <returns>
    /// The sales quantity of the shipping bill.
    /// </returns>
    container calcQtySales          (Common         _common,
                                     SalesUpdate    _specQty             = SalesUpdate::All,
                                     SalesQty       _qty                 = naReal(),
                                     boolean        _creditRemaining     = false,
                                     boolean        _calcRemaining       = true,
                                     PackingSlipIdForUpdate_W _packingSlips   = '')
    {
        SalesQty                    qtyUpdate, qtyUpdateOrigValue;
        SalesQty                    qtyRemainNew        = 0;
        CustInvoiceTrans            custInvoiceTrans;
        CustomsExportOrderLine_IN   customsExportOrderLine;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            qtyUpdate = 0;
        }
        qtyUpdateOrigValue = qtyUpdate;
        switch (_common.TableId)
        {
            case tablenum(CustomsExportOrderLine_IN):
                customsExportOrderLine = _common;
                break;
            case tablenum(SalesLine):
                SalesLine salesLine = _common;
                if (salesLine.RecId)
                {
                    customsExportOrderLine = CustomsExportOrderLine_IN::findBySalesInvoiceIdTrans(salesLine.SalesId, CustInvoiceTrans::findInventTransid(salesLine.InventTransId).InvoiceId, salesLine.InventTransId);
                }
                break;

            default:
                break;
        }

        CustomsQty_IN originalQtyAvailableForShipbillUpdate;

        if (SalesTable::find(customsExportOrderLine.SalesId).DocumentStatus == DocumentStatus::ProjectInvoice)
        {
            ProjItemTrans prjItemTrans;

            select firstonly Qty from prjItemTrans
                        where prjItemTrans.RecId == customsExportOrderLine.CustInvoiceTransRecId;

            originalQtyAvailableForShipbillUpdate = prjItemTrans.Qty;
        }
        else
        {
            select sum(Qty) from custInvoiceTrans
                group by InvoiceId
                where custInvoiceTrans.SalesId      ==  customsExportOrderLine.SalesId    &&
                      custInvoiceTrans.InvoiceId    ==  customsExportOrderLine.InvoiceId  &&
                      custInvoiceTrans.RecId        ==  customsExportOrderLine.CustInvoiceTransRecId;

            originalQtyAvailableForShipbillUpdate = custInvoiceTrans.Qty;
        }
        CustomsQty_IN totalQtyShipBillUpdated = CustomsShippingBillTrans_IN::getShipBillQtyExhausted(customsExportOrderLine.SalesId, customsExportOrderLine.InvoiceId, customsExportOrderLine.InventTransId);
        CustomsQty_IN currentAvailableQtyForShipbillUpdate = (originalQtyAvailableForShipbillUpdate - totalQtyShipBillUpdated);
        SalesQty numOfRemainOri = currentAvailableQtyForShipbillUpdate;
        if (abs(qtyUpdate) && (abs(qtyUpdate) <= originalQtyAvailableForShipbillUpdate))
        {
            if (qtyUpdate < 0 && (abs(currentAvailableQtyForShipbillUpdate) == abs(originalQtyAvailableForShipbillUpdate)))
            {
                qtyUpdate = qtyUpdateOrigValue;
            }
            else
            {
                if (abs(currentAvailableQtyForShipbillUpdate) < abs(originalQtyAvailableForShipbillUpdate))
                {
                    qtyUpdate = min(currentAvailableQtyForShipbillUpdate, qtyUpdate);
                }
                else
                {
                    if (abs(originalQtyAvailableForShipbillUpdate) > abs(currentAvailableQtyForShipbillUpdate))
                    {
                        qtyUpdate = originalQtyAvailableForShipbillUpdate;
                        if (qtyUpdateOrigValue && (qtyUpdate != qtyUpdateOrigValue) && (abs(qtyUpdate) > abs(qtyUpdateOrigValue)))
                        {
                            qtyUpdate = qtyUpdateOrigValue;
                        }
                    }
                    else
                    {
                        qtyUpdate = currentAvailableQtyForShipbillUpdate;
                        if (qtyUpdateOrigValue && (qtyUpdate != qtyUpdateOrigValue) && (abs(qtyUpdate) > abs(qtyUpdateOrigValue)))
                        {
                            qtyUpdate = qtyUpdateOrigValue;
                        }
                    }
                }
            }
        }
        else
        {
            if (abs(currentAvailableQtyForShipbillUpdate) == abs(originalQtyAvailableForShipbillUpdate))
            {
                qtyUpdate = originalQtyAvailableForShipbillUpdate;
                if (qtyUpdateOrigValue && (qtyUpdate != qtyUpdateOrigValue) && (abs(qtyUpdate) > abs(qtyUpdateOrigValue)))
                {
                    qtyUpdate = qtyUpdateOrigValue;
                }
            }
            else
            {
                qtyUpdate = currentAvailableQtyForShipbillUpdate;
                if (qtyUpdateOrigValue && (qtyUpdate != qtyUpdateOrigValue)&& (abs(qtyUpdate) > abs(qtyUpdateOrigValue)))
                {
                    qtyUpdate = qtyUpdateOrigValue;
                }
            }
        }
        //Handles user change of quantity sign from +ve to -ve by resetting back to available quantity for shipping bill.
        if (qtyUpdateOrigValue > 0 && customsExportOrderLine.ExportQty < 0)
        {
            if (abs(currentAvailableQtyForShipbillUpdate) > 0)
            {
                qtyUpdate = currentAvailableQtyForShipbillUpdate;
            }
            else
            {
                qtyUpdate = customsExportOrderLine.ExportQty;
            }
        }
        //Handles user change of quantity sign from -ve to +ve by resetting back to available quantity for shipping bill.
        if (qtyUpdateOrigValue < 0 && customsExportOrderLine.ExportQty > 0)
        {
            if (abs(currentAvailableQtyForShipbillUpdate) > 0)
            {
                qtyUpdate = currentAvailableQtyForShipbillUpdate;
            }
            else
            {
                qtyUpdate = customsExportOrderLine.ExportQty;
            }
        }
        qtyRemainNew = numOfRemainOri - qtyUpdate;
        return [qtyUpdate,numOfRemainOri,qtyRemainNew];//'qtyUpdate' is what is shown in the update [DeliverNow] field of Shipping bill form.
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// The deliver now invent quantity.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line information.
    /// </param>
    /// <returns>
    /// The instance of the <c>InventQty</c> class.
    /// </returns>
    protected InventQty  inventDeliverNow(SalesLine _salesLine)
    {
        return _salesLine.InventDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    protected container pdsCWCalcQtyInvent(
        Common         _common,
        SalesUpdate    _specQty             = SalesUpdate::All,
        PdsCWInventQty _qty                 = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainInventPhysical</Name>
				<Source><![CDATA[
    InventQty qtyRemainInventPhysical(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        InventQty remainInvent = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
																									   _salesLine.InventDimId,
																									   _salesLine.RemainSalesFinancial,
																									   _salesLine.SalesUnit,
																									   _salesLine.inventTable().inventUnitId(),
																									   NoYes::Yes);

        if (_salesParmLine.InventNow - remainInvent > 0)
        {
            return _salesParmLine.InventNow - remainInvent;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// The deliver now invent quantity.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line information.
    /// </param>
    /// <returns>
    /// The instance of the <c>SalesQty</c> class.
    /// </returns>
    protected SalesQty  salesDeliverNow(SalesLine _salesLine)
    {
        return _salesLine.SalesDeliverNow;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>