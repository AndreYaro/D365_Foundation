<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqProcessBatchCleanup_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(BatchRun))]
/// <summary>
/// Extends the batch framework's dead tasks cleanup to ensure that master planning processes are properly cleaned up and restarted.
/// </summary>
final internal class ReqProcessBatchCleanup_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanupFailedPlanningProcesses</Name>
				<Source><![CDATA[
    private static void cleanupFailedPlanningProcesses()
    {
        Batch helperBatch;
        Batch mainThreadBatch;
        SysClientSessions clientSessions;

        Map affectedProcesses = new Map(Types::String, Types::Container);
        Map batchesPerProcess = new Map(Types::String, Types::Class);
        
        void addFailedProcess(Batch _helperBatch, Batch _terminatedBatch)
        {
            ReqProcessExternThread unpackedThread = ReqProcessExternThread::construct();
            unpackedThread.unpack(_helperBatch.Parameters);
            ReqProcessId processId = unpackedThread.parmProcessId();
                        
            str processKey = processId + '#' + _helperBatch.Company;

            affectedProcesses.insert(processKey, [processId, _helperBatch.BatchJobId, _helperBatch.Company]);

            List batchList;
            if (batchesPerProcess.exists(processKey))
            {
                batchList = batchesPerProcess.lookup(processKey);
            }
            else
            {
                batchList = new List(Types::Record);
            }
            batchList.addEnd(_terminatedBatch);
            batchesPerProcess.insert(processKey, batchList);
        }

        try
        {
            // All processes where a helper got terminated.
            while select helperBatch
                where helperBatch.Status == BatchStatus::Executing
                   && helperBatch.ClassNumber == classNum(ReqProcessExternThread)
                notexists join clientSessions
                    where helperBatch.SessionIdx == clientSessions.SessionId
                       && helperBatch.SessionLoginDateTime == clientSessions.LoginDateTime
                       && clientSessions.Status != 0
            {
                addFailedProcess(helperBatch, helperBatch);
            }

            // If only the main thread was terminated, we need to get the process id from its helper.
            while select helperBatch
                where helperBatch.ClassNumber == classNum(ReqProcessExternThread)
                join mainThreadBatch
                    where mainThreadBatch.Status == BatchStatus::Executing
                       && mainThreadBatch.ClassNumber != classNum(ReqProcessExternThread)
                       && helperBatch.BatchJobId == mainThreadBatch.BatchJobId
                notexists join clientSessions
                    where mainThreadBatch.SessionIdx == clientSessions.SessionId
                       && mainThreadBatch.SessionLoginDateTime == clientSessions.LoginDateTime
                       && clientSessions.Status != 0
            {
                addFailedProcess(helperBatch, mainThreadBatch);
            }

            MapEnumerator enum = affectedProcesses.getEnumerator();
            while(enum.moveNext())
            {
                ReqProcessId    processId;
                RefRecId        batchJobRecId;
                DataAreaId      dataAreaId;

                [processId, batchJobRecId, DataAreaId] = enum.currentValue();
            
                ReqCalcRestartResume::construct(processId, batchJobRecId, dataAreaId, batchesPerProcess.lookup(enum.currentKey())).run();
            }
        }
        catch
        {
            // Silently catch any error from resume/restart logic to make sure batch server does not get affected and log to telemetry
            using(var instr = ReqInstrumentationSegmentFactory::create(ReqInstrumentationActivities::ResumeRestartException))
            {
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupFailedPlanningProcessesForServer</Name>
				<Source><![CDATA[
    private static void cleanupFailedPlanningProcessesForServer(ServerId _serverId)
    {
        Batch helperBatch;
        Batch mainThreadBatch;
        SysClientSessions clientSessions;

        Map affectedProcesses = new Map(Types::String, Types::Container);
        Map batchesPerProcess = new Map(Types::String, Types::Class);
        
        var logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(ReqProcessBatchCleanup_Extension));

        void addFailedProcess(Batch _helperBatch, Batch _terminatedBatch)
        {
            ReqProcessExternThread unpackedThread = ReqProcessExternThread::construct();
            unpackedThread.unpack(_helperBatch.Parameters);
            ReqProcessId processId = unpackedThread.parmProcessId();
                        
            str processKey = processId + '#' + _helperBatch.Company;

            affectedProcesses.insert(processKey, [processId, _helperBatch.BatchJobId, _helperBatch.Company]);

            List batchList;
            if (batchesPerProcess.exists(processKey))
            {
                batchList = batchesPerProcess.lookup(processKey);
            }
            else
            {
                batchList = new List(Types::Record);
            }
            batchList.addEnd(_terminatedBatch);
            batchesPerProcess.insert(processKey, batchList);
        }

        try
        {
            // All processes where a helper got terminated.
            while select helperBatch
                where helperBatch.Status == BatchStatus::Executing
                   && helperBatch.ServerId == _serverId
                   && helperBatch.ClassNumber == classNum(ReqProcessExternThread)
            {
                addFailedProcess(helperBatch, helperBatch);
            }

            // If only the main thread was terminated, we need to get the process id from its helper.
            while select helperBatch
                where helperBatch.ClassNumber == classNum(ReqProcessExternThread)
                join mainThreadBatch
                    where mainThreadBatch.Status == BatchStatus::Executing
                       && mainThreadBatch.ClassNumber != classNum(ReqProcessExternThread)
                       && mainThreadBatch.ServerId == _serverId
                       && helperBatch.BatchJobId == mainThreadBatch.BatchJobId
            {
                addFailedProcess(helperBatch, mainThreadBatch);
            }

            MapEnumerator enum = affectedProcesses.getEnumerator();
            while(enum.moveNext())
            {
                ReqProcessId    processId;            
                RefRecId        batchJobRecId;
                DataAreaId      dataAreaId;

                [processId, batchJobRecId, DataAreaId] = enum.currentValue();
                
                logger.logInformation(strFmt('Running RestartResume for ReqCalc with BatchJobId: %1', batchJobRecId));
                ReqCalcRestartResume::construct(processId, batchJobRecId, dataAreaId, batchesPerProcess.lookup(enum.currentKey())).run();
            }
        }
        catch
        {
            // Silently catch any error from resume/restart logic to make sure batch server does not get affected and log to telemetry
            logger.logError('An error occured while trying to recover \'stuck\' batch jobs.');
            using(var instr = ReqInstrumentationSegmentFactory::create(ReqInstrumentationActivities::ResumeRestartException))
            {}
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>serverCleanUpTasksOnServerStartup</Name>
				<Source><![CDATA[
    static server void serverCleanUpTasksOnServerStartup(ServerId _serverId)
    {
        if (!ReqCalcRestartResumeNativeToggle::isEnabled())
        {
            BatchRun::cleanupFailedPlanningProcessesForServer(_serverId);
        }
        next serverCleanUpTasksOnServerStartup(_serverId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>