<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormletterServiceBatchTaskManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchFormletterServiceBatchTaskManager extends FormletterServiceBatchTaskManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static PurchFormletterServiceBatchTaskManager construct()
    {
        return new PurchFormletterServiceBatchTaskManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParm</Name>
				<Source><![CDATA[
    public static PurchFormletterServiceBatchTaskManager newFromParm(
        DocumentStatus _documentStatus,
        FormletterType _formletterType)
    {
        if (_formletterType == FormletterType::Purchase
            && (_documentStatus == DocumentStatus::PurchaseOrder
                || _documentStatus == DocumentStatus::PackingSlip))
        {
            return PurchFormletterServiceBatchTaskManager::construct();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSumUpLines</Name>
				<Source><![CDATA[
    internal boolean canSumUpLines(QueryRun _lateSelectionQueryRun)
    {
        return _lateSelectionQueryRun.query().dataSourceTable(tablenum(PurchTable))
            && _lateSelectionQueryRun.query().dataSourceTable(tablenum(PurchLine))
            && _lateSelectionQueryRun.query().dataSourceTable(tablenum(PurchLine)).joinMode() == JoinMode::InnerJoin
            && _lateSelectionQueryRun.query().dataSourceTable(tablenum(PurchLine)).parentDataSource() == _lateSelectionQueryRun.query().dataSourceTable(tablenum(PurchTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectParmTableRecordAndParmLineCountMaps</Name>
				<Source><![CDATA[
    internal Map collectParmTableRecordAndParmLineCountMaps(ParmId _parmId)
    {
        Map parmTableRecordMap = new Map(Types::Int64, Types::Record);
        Map parmLineRecordCountMap = new Map(Types::Int64, Types::Integer);
        PurchParmTable purchParmTable;
        PurchParmTable previousPurchParmTable;
        PurchParmLine  purchParmLine;
        Counter purchParmLineCount;
        boolean firstIteration = true;

        while select purchParmTable
            order by purchParmTable.PurchId
            where purchParmTable.ParmId == _parmId
               && purchParmTable.ParmJobStatus == ParmJobStatus::Waiting
        join RecId from purchParmLine
            where purchParmLine.ParmId == purchParmTable.ParmId
               && purchParmLine.TableRefId == purchParmTable.tableRefId
        {
            if (firstIteration)
            {
                previousPurchParmTable.data(purchParmTable);
                firstIteration = false;
            }
            
            if (previousPurchParmTable.RecId != purchParmTable.RecId)
            {
                parmTableRecordMap.insert(parmTableRecordMap.elements(), previousPurchParmTable);
                parmLineRecordCountMap.insert(previousPurchParmTable.RecId, purchParmLineCount);
                previousPurchParmTable.data(purchParmTable);
                purchParmLineCount = 0;
            }
            
            purchParmLineCount++;
        }

        parmTableRecordMap.insert(parmTableRecordMap.elements(), previousPurchParmTable);
        parmLineRecordCountMap.insert(previousPurchParmTable.RecId, purchParmLineCount);

        Map tablesMap = new Map(Types::String, Types::Class);
        tablesMap.insert(tableStr(FormletterParmTable), parmTableRecordMap);
        tablesMap.insert(tableStr(FormletterParmLine), parmLineRecordCountMap);
        return tablesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLateSelectionQuery</Name>
				<Source><![CDATA[
    protected QueryRun getLateSelectionQuery()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxNumberOfRecordLinesInListToPost</Name>
				<Source><![CDATA[
    protected FormletterBatchTaskSizeLines maxNumberOfRecordLinesInListToPost()
    {
        if (this.parmDocumentStatus() == DocumentStatus::PurchaseOrder &&
            PurchMultithreadedPurchConfirmationFlight::instance().IsEnabled())
        {
            // Fallback to 'Orders per task' mode since we do not create PurchParmLines for confirmation. 
            return 0;
        }
        else 
        {
            return super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>