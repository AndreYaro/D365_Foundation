<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionReversal_BankSeparateVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TransactionReversal_BankSeparateVoucher</c> class reverses the bank acount trans with correction amount in separate voucher.
/// </summary>
internal final class TransactionReversal_BankSeparateVoucher extends TransactionReversal_Bank
{
    private Voucher voucherToReverse;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static TransactionReversal_BankSeparateVoucher construct()
    {
        return new TransactionReversal_BankSeparateVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherToReverse</Name>
				<Source><![CDATA[
    internal void findVoucherToReverse()
    {
        if (bankAccountTransToReverse.Manual == NoYes::Yes)
        {
            voucherToReverse = bankAccountTransToReverse.Voucher;
        }
        else
        {
            voucherToReverse = BankTransCorrectionVoucherHistory::findMostRecentCorrectionAmountVoucher(bankAccountTransToReverse.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseReconciliationAccounting</Name>
				<Source><![CDATA[
    internal void reverseReconciliationAccounting()
    {
        this.reverseGeneralJournal();
        this.createReversedBankAccountTrans();
        this.updateBankTransCorrectionVoucherHistory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseGeneralJournal</Name>
				<Source><![CDATA[
    private void reverseGeneralJournal()
    {
        this.initLedgerVoucher();

        TransactionReversal_Ledger transactionReversal_Ledger = TransactionReversal_Ledger::construct();

        this.initializeTransactionReversal_Ledger(transactionReversal_Ledger);

        transactionReversal_Ledger.createGeneralJournal(
            voucherToReverse,
            bankAccountTransToReverse.transDate,
            ledgerVoucher,
            true,
            false,
            reversalVoucher,
            0);

        reversalTraceNum = transactionReversal_Ledger.parmReversalTraceNum();
        reversalVoucher = transactionReversal_Ledger.parmReversalVoucher();

        ledgerVoucher.end();
        transactionReversal_Ledger.postReversal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankTransCorrectionVoucherHistory</Name>
				<Source><![CDATA[
    private void updateBankTransCorrectionVoucherHistory()
    {
        if (bankAccountTransToReverse.Manual == NoYes::No)
        {
            BankTransCorrectionVoucherHistory::updateMostRecentCorretionAmountVoucher(bankAccountTransToReverse.RecId, voucherToReverse);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTransactionReversal_Ledger</Name>
				<Source><![CDATA[
    private void initializeTransactionReversal_Ledger(TransactionReversal_Ledger _transactionReversal_Ledger)
    {
        _transactionReversal_Ledger.parmReversalDate(reversalDate);
        _transactionReversal_Ledger.parmReasonRefRecId(reasonRefRecID);
        _transactionReversal_Ledger.parmSysModule(SysModule::Bank);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversedBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a reversed bank account trans for manual transaction.
    /// </summary>
    private void createReversedBankAccountTrans()
    { 
        if (bankAccountTransToReverse.Manual == NoYes::Yes)
        {
            BankAccountTrans reversedBankAccountTrans = bankAccountTransToReverse.data();

            reversedBankAccountTrans.Voucher = reversalVoucher;
            reversedBankAccountTrans.TransDate = reversalDate;
            reversedBankAccountTrans.Included = NoYes::No;
            reversedBankAccountTrans.Reconciled = NoYes::Yes;
            reversedBankAccountTrans.AmountCur = -bankAccountTransToReverse.AmountCur;
            reversedBankAccountTrans.AmountMST = -bankAccountTransToReverse.AmountMST;
            reversedBankAccountTrans.AmountReportingCurrency = -bankAccountTransToReverse.AmountReportingCurrency;
            reversedBankAccountTrans.BankTransAmountCur = -bankAccountTransToReverse.BankTransAmountCur;
            reversedBankAccountTrans.insert();
        }   
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>