<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollPayStatementPost</c> is used to handle the posting logic for
/// pay statements.
/// </summary>
class PayrollPayStatementPost extends PayrollPayStatementJournalizeBase implements BatchRetryable
{
    boolean                         generateVendorInvoices;
    BatchHeader                     batchHeader;
    Counter                         payStatementCount;

    #DEFINE.CurrentVersion(11)

    #LOCALMACRO.CurrentList
        calledWithRecord,
        toDate,
        payCycleRecId,
        callingObject
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogInit</Name>
				<Source><![CDATA[
    public DialogRunbase dialogInit(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        DialogRunbase   dialogRunBase;

        dialogRunBase = super(dialog, forceOnClient);
        dialogRunBase.caption("@SYS4000678");

        payCycleBuildReferenceControl.helpText("@Payroll:ThePayCycleOfThePayStatementsToPost");
        toDateBuildComboBox.helpText("@Payroll:ThePayPeriodOfThePayStatementsToPost");

        return dialogRunBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs additional actions to the dialog after the run event.
    /// </summary>
    /// <param name="_dialog">
    ///     The dialog object created by the class.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        FormRun formRun;

        super(_dialog);

        formRun = _dialog.dialogForm().formRun();
        formRun.design().caption("@Payroll:PostPayStatements");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Payroll:PostPayStatements";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        //
        // If the query has yet to be initialized at this point, we need to do so
        // so that the pack won't fail.
        //
        if (queryRun == null)
        {
            this.initQuery();
        }

        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPostedStatus</Name>
				<Source><![CDATA[
    private void resetPostedStatus(RecordLinkList _recordLinkList)
    {
        PayrollPayStatement payStatement;
        boolean recordFound;

        ttsBegin;
        recordFound = _recordLinkList.first(payStatement);

        while (recordFound)
        {
            if (payStatement.PostedStatus != PayrollPayStatementPostedStatus::None)
            {
                payStatement.reread();
                payStatement.PostedStatus = PayrollPayStatementPostedStatus::None;
                payStatement.update();
            }

            recordFound = _recordLinkList.next(payStatement);
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        #AviFiles
        PayrollPayStatement         payStatement;
        PayrollParameters           parameters;
        container                   batchTaskGroupList;
        int                         payStatementTaskGroupingCount,
                                    batchTaskGroupListLength;

        // Set the pay period range
        this.initPeriodCriteria();

        if (SysQuery::countTotal(queryRun) == 0)
        {
            info("@Payroll:TheSelectionCriteriaDidNotReturnAnyResults");
            return;
        }

        payStatementCount = 0;

        // Determine how many payments to process within a single task
        parameters = PayrollParameters::find();
        if (parameters.PaymentTaskGroupingCount)
        {
            payStatementTaskGroupingCount = parameters.PaymentTaskGroupingCount;
        }
        else
        {
            // Default to a single payment per batch job task
            payStatementTaskGroupingCount = 1;
        }

        batchTaskGroupList = connull();

        while (queryRun.next())
        {
            payStatement = queryRun.get(tableNum(PayrollPayStatement));

            // Skip pay statements where posting is not allowed or is already being posted
            if (!payStatement.allowPosting() || payStatement.PostedStatus == PayrollPayStatementPostedStatus::InProcess)
            {
                continue;
            }

            // Update the posted status to In Process so that another user won't attempt to post the same one at the same time
            ttsBegin;
            payStatement.selectForUpdate();
            payStatement.PostedStatus = PayrollPayStatementPostedStatus::InProcess;
            payStatement.update();
            ttsCommit;

            // Add the current paystatement to the list of paystatements to process in the next task
            batchTaskGroupList += [payStatement.RecId];

            batchTaskGroupListLength = conlen(batchTaskGroupList);

            // If the threshold for grouping paystatements into a task has been reached, schedule the task
            if (batchTaskGroupListLength == payStatementTaskGroupingCount)
            {
                // Run or schedule the task
                this.runScheduleJob(batchTaskGroupList, batchTaskGroupListLength);

                // Reinitialize the container & length variables for the next group of payments to schedule
                batchTaskGroupList = connull();
                batchTaskGroupListLength = conlen(batchTaskGroupList);
            }
        }

        // Schedule any remaining paystatements in the last task
        if (batchTaskGroupListLength > 0)
        {
            this.runScheduleJob(batchTaskGroupList, batchTaskGroupListLength);
        }

        // Since batch subtask processing results aren't available to the batch, only report number posted if not running batch
        if (!this.isInBatch())
        {
            if (payStatementCount > 0)
            {
                info(strFmt("@Payroll:Num_1PayStatementsWerePosted", payStatementCount));
            }
            else
            {
                info("@Payroll:NoPayStatementsWerePostedTheSelectedPayStatementsHaveAlready");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduleJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the task if running in the context of a batch job.
    /// </summary>
    /// <param name="_batchTaskGroupList">
    /// A container listing the employees for the task to process.
    /// </param>
    /// <param name="_batchTaskGroupListLength">
    /// The number of payments being processed by the task.
    /// </param>
    /// <remarks>
    /// If not running under a batch job the pay statement posting task
    /// will be run immediately.
    /// </remarks>
    void runScheduleJob(container _batchTaskGroupList, int _batchTaskGroupListLength)
    {
        PayrollPayStatementRecId    firstPayStatementRecId,
                                    lastPayStatementRecId;
        str                         taskPayStatementRange;

        PayrollPayStatementPostTask postingTask;

        // Create the task instance to post the container of pay statements
        postingTask = new PayrollPayStatementPostTask();
        postingTask.parmBatchTaskGroupList(_batchTaskGroupList);

        if (this.isInBatch())
        {
            // Get the first (and possibly only) pay statement from the container
            firstPayStatementRecId = conPeek(_batchTaskGroupList, 1);
            taskPayStatementRange = PayrollPayStatement::find(firstPayStatementRecId).DocumentNumber;

            // Determine the proper task description for > 1 pay statement per task
            if (conLen(_batchTaskGroupList) > 1)
            {
                // Get the last worker in the _batchTaskGroupList & build the range of pay statements for the task description
                lastPayStatementRecId = conPeek(_batchTaskGroupList, conLen(_batchTaskGroupList));
                taskPayStatementRange = strFmt("@Payroll:Num_1To2", taskPayStatementRange, PayrollPayStatement::find(lastPayStatementRecId).DocumentNumber);
            }

            // Use the pay statement document number for the subtask description
            postingTask.batchInfo().parmCaption(taskPayStatementRange);

            // Schedule for later run
            if (!batchHeader)
            {
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            // Add the subtask to the batch job
            batchHeader.addRuntimeTask(postingTask, this.parmCurrentBatch().RecId);
            batchHeader.save();
        }
        else
        {
            // Run right away
            postingTask.runOperation();

            payStatementCount += postingTask.getStatementsPostedCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer                         version = RunBase::getVersion(packedClass);
        container                       packedQuery;
        boolean                         calledWithRecordLast;
        str                             callingObjectLast;
        PayrollPayCycleRecId            payCycleRecIdLast;
        TransDate                       toDateLast;

        #LOCALMACRO.SaveLastList
            calledWithRecordLast,
            toDateLast,
            payCycleRecIdLast,
            callingObjectLast
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion:
                if (this.inGetSaveLast())
                {
                    // Only want the query from the save last values.
                    [version, #SaveLastList, packedQuery] = packedClass;
                }
                else
                {
                    [version, #CurrentList, packedQuery] = packedClass;
                }

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        PayrollParameters payrollParameters = PayrollParameters::find();
        PayrollPayStatementPost payStatementPost = new PayrollPayStatementPost();

        if (payrollParameters.SalaryClearingAccountLedgerDimension == 0)
        {
            throw warning("@Payroll:ThePayrollClearingAccountIsRequiredToPostPayStatementsAssign");
        }

        if (payStatementPost.prompt())
        {
            // Run from menu item and may be schedulable as a batch, so don't wait for results
            payStatementPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>