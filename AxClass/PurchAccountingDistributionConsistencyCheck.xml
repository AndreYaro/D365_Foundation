<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAccountingDistributionConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchAccountingDistributionConsistencyCheck</c> class is a consistency check that verifies if the purchase order 
/// doesn't have corrupted accounting distribution records.
/// </summary>
public class PurchAccountingDistributionConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 30;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPurchaseOrdersQuery</Name>
				<Source><![CDATA[
    private Query buildPurchaseOrdersQuery()
    {
        FromDate fromDate = consistencyCheckJob.parmFromDate();

        if (!fromDate)
        {
            throw warning("@ProcurementAndSourcing:PurchAccountingDistributionConsistencyCheck_FromDateNotSet");
        }

        Query query = new Query();

        QueryBuildDataSource purchTableQueryBuildDS = query.addDataSource(tableNum(PurchTable));
        purchTableQueryBuildDS.update(true);

        TradeConsistencyCheckHelper::addFromDateFieldRange(query, fromDate, fieldNum(PurchTable, CreatedDateTime));

        QueryBuildDataSource accountingDistributionQueryBuildDS = purchTableQueryBuildDS.addDataSource(tableNum(AccountingDistribution));
        accountingDistributionQueryBuildDS.joinMode(JoinMode::ExistsJoin);
        accountingDistributionQueryBuildDS.relations(false);
        accountingDistributionQueryBuildDS.addLink(fieldNum(PurchTable, SourceDocumentHeader), fieldNum(AccountingDistribution, SourceDocumentHeader));
        accountingDistributionQueryBuildDS.addRange(fieldNum(AccountingDistribution, AccountingEvent)).value(queryValue(0));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        if (PurchAccountingDistributionConsistencyCheckFlight::instance().isEnabled())
        {

            Query    purchaseOrderQuery = this.buildPurchaseOrdersQuery();
            QueryRun purchaseOrderQueryRun = new QueryRun(purchaseOrderQuery);

            CheckFix checkFix = this.checkFix();

            progress.setTotal(QueryRun::getQueryRowCount(purchaseOrderQuery, maxInt()));
        
            //clean up all those PO accounting disttributions for where accounting event is zero
            try
            {
                while (purchaseOrderQueryRun.next())
                {
                    PurchTable purchTable = purchaseOrderQueryRun.get(tableNum(PurchTable));

                    setPrefix(strFmt("@ProcurementAndSourcing:PurchDocumentStatusConsistencyCheck_PurchOrderLogSectionTitle", purchTable.PurchId));

                    progress.incCount();
                
                    if (checkFix == CheckFix::Fix)
                    {
                        AccountingDistribution accountingDistribution;

                        delete_from accountingDistribution
                        where !accountingDistribution.AccountingEvent
                            && accountingDistribution.SourceDocumentHeader == purchTable.SourceDocumentHeader;

                        warning("@ProcurementAndSourcing:PurchAccountingDistributionConsistencyCheck_AccDistRemoved");
                    
                        this.updateCorrected();
                    }
                    else
                    {
                        warning("@ProcurementAndSourcing:PurchAccountingDistributionConsistencyCheck_InvalidAccDistDetected");
                    }
                }

                // While one might think that the updateNotCorrected method updates the number of not corrected records
                // it actually populates the number of found errors based on the number of warnings in the infolog.
                this.updateNotCorrected();
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@ProcurementAndSourcing:PurchAccountingDistributionConsistencyCheck_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@ProcurementAndSourcing:PurchAccountingDistributionConsistencyCheck_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(PurchRootConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>