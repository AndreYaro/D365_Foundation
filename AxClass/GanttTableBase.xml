<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttTableBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;

abstract class GanttTableBase
{
    GanttTableBase              ganttTableBaseData;

    RecordSortedList            recordSortedList;
    boolean                     keepBaseData;

    Map                         mapCurrentRecId2Orig;
    Map                         mapOrigRecId2Current;
    Map                         mapOrigRecId2RecVersion;

    boolean                     allowUserModification;

    Set                         setUserModifiedRecIds;
    private Map                 mapHashValue2RecId;
    protected internal boolean  improvedPerformanceDuplicateSearchFeatureEnabled;
    protected internal boolean  showInUserTZ;

    GanttTableFieldCollection   fieldCollection;

    #define.RecIdFieldName('recId')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canLoadRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tests whether the currently selected record can be loaded in the Gantt chart.
    /// </summary>
    /// <returns>
    ///    true if the current record should be loaded in the Gantt chart; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method always returns true and should be overridden in the derived classes if it is needed.
    /// </remarks>
    public boolean canLoadRecord()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFailedOrigRecordDeleted</Name>
				<Source><![CDATA[
    protected boolean checkFailedOrigRecordDeleted(Common _origRecord)
    {
        return checkFailed(strfmt("@SYS113558", tableid2name(_origRecord.TableId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFailedOrigRecordUpdated</Name>
				<Source><![CDATA[
    protected boolean checkFailedOrigRecordUpdated(Common _origRecord)
    {
        return checkFailed(strfmt("@SYS113557", tableid2name(_origRecord.TableId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrigRecordStatus</Name>
				<Source><![CDATA[
    public boolean checkOrigRecordStatus(Common _origRecord = null) // set this parameter for better performance
    {
        GanttRecordStatus   recordStatus;
        if (prmisdefault(_origRecord))
        {
            _origRecord = this.getOrigRecord();
        }

        recordStatus    = this.getOrigRecordStatus(_origRecord);

        switch (recordStatus)
        {
            case GanttRecordStatus::Deleted :

                return this.checkFailedOrigRecordDeleted(_origRecord);

            case GanttRecordStatus::Updated :

                return this.checkFailedOrigRecordUpdated(_origRecord);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanTableBuffer</Name>
				<Source><![CDATA[
    public void cleanTableBuffer()
    {
        this.parmTableBuffer().clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    public int count()
    {
        if (recordSortedList)
        {
            return recordSortedList.len();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createModificationByFieldNames</Name>
				<Source><![CDATA[
    public GanttDataModification createModificationByFieldNames(Set                     _setModifiedFieldNames      = null, // if null, all fields to be included
                                                                GanttModificationAction _ganttModificationAction    = GanttModificationAction::Update)
    {
        GanttDataModification   ganttDataModification;
        ganttDataModification = GanttDataModification::newModificationAction(_ganttModificationAction);

        ganttDataModification.parmModifiedTableName(this.tableName());
        ganttDataModification.parmModifiedRecId(this.parmTableBuffer().RecId);

        ganttDataModification.parmMapModifiedFields(this.getModifiedFieldsByFieldNames(_setModifiedFieldNames));

        return ganttDataModification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldCollection</Name>
				<Source><![CDATA[
    public GanttTableFieldCollection fieldCollection()
    {
        return fieldCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdRecId</Name>
				<Source><![CDATA[
    public fieldId fieldIdRecId()
    {
        return fieldname2id(this.tableId(), #RecIdFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    public Common findFirst()
    {
        if (recordSortedList.first(this.parmTableBuffer()))
        {
            return this.parmTableBuffer();
        }

        this.cleanTableBuffer();

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNext</Name>
				<Source><![CDATA[
    public Common findNext()
    {
        if (recordSortedList.next(this.parmTableBuffer()))
        {
            return this.parmTableBuffer();
        }

        this.cleanTableBuffer();

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrigRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the cached data of the table that is based on the original record ID of the table.
    /// </summary>
    /// <param name="_origRecId">
    ///    The record ID of the record in the original table.
    /// </param>
    /// <param name="_throwErrorIfNotFound">
    ///    true if an exception is caused if the record is not found; otherwise, false; optional.
    /// </param>
    /// <returns>
    ///    true if the record was found; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    As an example, a record loaded from the <c>ProdRouteJob</c> table might have a record ID of 10,000.
    ///    When the record is inserted in the temporary table data, it could be given a record ID of 1000. The
    ///    method takes the record ID in the <c>ProdRouteJob</c> table, in this case, 10,000, and it finds the
    ///    Gantt temporary table record ID that corresponds, which is 1000. Then, it finds the record with the
    ///    Gantt temporary table in the data that is already cached in the associated record sorted list.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The record with the specified record ID is not found.
    /// </exception>
    public boolean findOrigRecId(RecId      _origRecId,
                                 boolean    _throwErrorIfNotFound = false)
    {
        // find the recId for this origRecId
        if (mapOrigRecId2Current.exists(_origRecId))
        {
            return this.findRecId(mapOrigRecId2Current.lookup(_origRecId));
        }

        this.cleanTableBuffer();

        if (_throwErrorIfNotFound)
        {
            throw error("@SYS35042");
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public boolean findRecId(RecId      _recId,
                             boolean    _throwErrorIfNotFound = false)
    {
        Common common = this.parmTableBuffer();
        common.RecId = _recId;

        if (recordSortedList.find(common))
        {
            return true;
        }

        this.cleanTableBuffer();

        if (_throwErrorIfNotFound)
        {
            throw error("@SYS35042");
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ganttTableBaseData</Name>
				<Source><![CDATA[
    public GanttTableBase ganttTableBaseData()
    {
        return ganttTableBaseData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModifiedFieldsByFieldNames</Name>
				<Source><![CDATA[
    public Map getModifiedFieldsByFieldNames(Set _setModifiedFieldNames = null) // if null, all fields to be included
    {
        int             i;
        DictTable       dictTable           = new DictTable(this.tableId());
        GanttTableField ganttTableField;
        Map             mapModifiedFields   = new Map(Types::String, Types::String);
        if (!dictTable)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (_setModifiedFieldNames && !_setModifiedFieldNames.elements())
        {
            return mapModifiedFields;
        }

        // create map of field values
        for (i=1; i<=dictTable.fieldCnt(); i++)
        {
            ganttTableField = GanttTableField::newFieldData(dictTable.id(), dictTable.fieldCnt2Id(i));

            if (_setModifiedFieldNames && !_setModifiedFieldNames.in(ganttTableField.name()))
            {
                continue;
            }

            if (!ganttTableField.isSystem())
            {
                mapModifiedFields.insert(ganttTableField.name(),
                                         ganttTableField.getFieldValueStr(this.parmTableBuffer()));
            }
        }

        return mapModifiedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigRecord</Name>
				<Source><![CDATA[
    public Common getOrigRecord(boolean _forUpdate              = false,
                                boolean _throwErrorIfNotFound   = false)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigRecordStatus</Name>
				<Source><![CDATA[
    public GanttRecordStatus getOrigRecordStatus(Common _origRecord = null) // set this parameter for better performance
    {
        if (prmisdefault(_origRecord))
        {
            _origRecord = this.getOrigRecord();
        }

        if (!_origRecord.RecId)
        {
            return GanttRecordStatus::Deleted;
        }

        if (_origRecord.RecVersion != this.origRecVersion())
        {
            return GanttRecordStatus::Updated;
        }

        return GanttRecordStatus::NoChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        this.initTableBuffer();

        this.initRecordSortedList();

        this.initFieldCollection();

        this.initBaseData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBaseData</Name>
				<Source><![CDATA[
    protected void initBaseData()
    {
        if (keepBaseData)
        {
            this.initGanttTableBaseData();

            if (!this.ganttTableBaseData())
            {
                throw error("@SYS6144");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultFieldCollection</Name>
				<Source><![CDATA[
    public void initDefaultFieldCollection()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldCollection</Name>
				<Source><![CDATA[
    protected void initFieldCollection()
    {
        fieldCollection = GanttTableFieldCollection::construct(this.tableId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGanttTableBaseData</Name>
				<Source><![CDATA[
    // Must be overridden
    // Create and initialize ganttTableBaseData object
    protected void initGanttTableBaseData()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMaps</Name>
				<Source><![CDATA[
    protected void initMaps()
    {
        mapCurrentRecId2Orig    = new Map(Types::Int64,  Types::Int64);
        mapOrigRecId2Current    = new Map(Types::Int64,  Types::Int64);
        mapOrigRecId2RecVersion = new Map(Types::Int64,  Types::Int64);
        mapHashValue2RecId      = new Map(Types::String, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedList</Name>
				<Source><![CDATA[
    protected void initRecordSortedList()
    {
        recordSortedList = new RecordSortedList(this.tableId());
        recordSortedList.sortOrder(this.fieldIdRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableBuffer</Name>
				<Source><![CDATA[
    protected void initTableBuffer()
    {
        this.parmTableBuffer().setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUserChanges</Name>
				<Source><![CDATA[
    protected void initUserChanges()
    {
        setUserModifiedRecIds   = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(RecId        _origRecId      = 0,
                       recVersion   _origRecVersion = 0)
    {
        this.parmTableBuffer().doInsert();

        if (_origRecId)
        {
            mapCurrentRecId2Orig.insert(this.parmTableBuffer().RecId, _origRecId);

            mapOrigRecId2Current.insert(_origRecId, this.parmTableBuffer().RecId);
            mapOrigRecId2RecVersion.insert(_origRecId, _origRecVersion);

            if (keepBaseData)
            {
                ganttTableBaseData.cleanTableBuffer();
                ganttTableBaseData.parmTableBuffer(this.parmTableBuffer());
                ganttTableBaseData.insert(_origRecId, _origRecVersion);
            }
        }

        recordSortedList.ins(this.parmTableBuffer());

        this.insertIntoMapHashValue2RecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initMaps();

        allowUserModification   = true;

        this.initUserChanges();

        keepBaseData            = true;

        improvedPerformanceDuplicateSearchFeatureEnabled = GanttTableImprovedPerformanceDuplicateSearchFeatureToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>origRecId</Name>
				<Source><![CDATA[
    public RecId origRecId()
    {
        if (!this.parmTableBuffer().RecId)
        {
            throw error(strfmt("@SYS19324", funcname()));
        }

        if (mapCurrentRecId2Orig.exists(this.parmTableBuffer().RecId))
        {
            return mapCurrentRecId2Orig.lookup(this.parmTableBuffer().RecId);
        }
        else
        {
            throw error("@SYS35042");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>origRecVersion</Name>
				<Source><![CDATA[
    public recVersion origRecVersion()
    {
        if (!this.parmTableBuffer().RecId)
        {
            throw error(strfmt("@SYS19324", funcname()));
        }

        if (mapOrigRecId2RecVersion.exists(this.origRecId()))
        {
            return mapOrigRecId2RecVersion.lookup(this.origRecId());
        }
        else
        {
            throw error("@SYS108471");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowUserModification</Name>
				<Source><![CDATA[
    public boolean parmAllowUserModification(boolean _allowUserModification = allowUserModification)
    {
        allowUserModification = _allowUserModification;
        return allowUserModification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeepBaseData</Name>
				<Source><![CDATA[
    public boolean parmKeepBaseData(boolean _keepBaseData =  keepBaseData)
    {
        keepBaseData = _keepBaseData;
        return keepBaseData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetUserModifiedRecIds</Name>
				<Source><![CDATA[
    public Set parmSetUserModifiedRecIds(Set _setUserModifiedRecIds = setUserModifiedRecIds)
    {
        setUserModifiedRecIds = _setUserModifiedRecIds;
        return setUserModifiedRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableBuffer</Name>
				<Source><![CDATA[
    // Must be overridden
    // Returns/sets temporary table buffer
    public Common parmTableBuffer(Common _tableBuffer = null)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInUserTZ</Name>
				<Source><![CDATA[
    internal boolean parmShowInUserTZ(boolean _showInUserTZ = showInUserTZ)
    {
        showInUserTZ = _showInUserTZ;
        return showInUserTZ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recVersionForOrigRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the record version stored in the internal table map for an original record identified by its
    ///    <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>RecId</c> of the original record.
    /// </param>
    /// <returns>
    ///    The record version that contains the record version if the record was loaded from the table into
    ///    the <see cref="T:GanttTableBase" />; 0 if the record was not loaded.
    /// </returns>
    public recVersion recVersionForOrigRecId(RecId _recId)
    {
        if (mapOrigRecId2RecVersion.exists(_recId))
        {
            return mapOrigRecId2RecVersion.lookup(_recId);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeUserModifiedRecId</Name>
				<Source><![CDATA[
    public void removeUserModifiedRecId(RecId _recId)
    {
        if (setUserModifiedRecIds.in(_recId))
        {
            setUserModifiedRecIds.remove(_recId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAllData</Name>
				<Source><![CDATA[
    public void resetAllData()
    {
        this.resetRecordSortedList();

        this.resetTableBuffer();

        this.resetUserChanges();

        this.resetMaps();

        if (keepBaseData && ganttTableBaseData)
        {
            ganttTableBaseData.resetAllData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetMaps</Name>
				<Source><![CDATA[
    protected void resetMaps()
    {
        mapCurrentRecId2Orig       = new Map(Types::Int64,  Types::Int64);
        mapOrigRecId2Current       = new Map(Types::Int64,  Types::Int64);
        mapOrigRecId2RecVersion    = new Map(Types::Int64,  Types::Int64);
        mapHashValue2RecId         = new Map(Types::String, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRecordSortedList</Name>
				<Source><![CDATA[
    protected void resetRecordSortedList()
    {
        recordSortedList = new RecordSortedList(this.tableId());
        recordSortedList.sortOrder(this.fieldIdRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTableBuffer</Name>
				<Source><![CDATA[
    // Must be overridden
    protected void resetTableBuffer()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUserChanges</Name>
				<Source><![CDATA[
    public void resetUserChanges()
    {
        setUserModifiedRecIds = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValuesFromMap</Name>
				<Source><![CDATA[
    public void setFieldValuesFromMap(Map    _mapModifiedFields)
    {
        MapEnumerator   mapEnumerator;

        FieldName       fieldName;
        GanttTableField ganttTableField;

        str             strFieldValue;
        if (_mapModifiedFields == null || !_mapModifiedFields.elements())
        {
            return;
        }

        mapEnumerator = _mapModifiedFields.getEnumerator();

        while (mapEnumerator && mapEnumerator.moveNext())
        {
            fieldName = mapEnumerator.current();

            // get field
            ganttTableField = GanttTableField::newFieldData(this.tableId(), fieldname2id(this.tableId(), fieldName));

            if (ganttTableField == null)
            {
                throw error(GanttTableField::txtNotExist(this.tableName(), fieldName));
            }

            // get field value
            strFieldValue = _mapModifiedFields.lookup(fieldName);

            // set field value to the record
            ganttTableField.setFieldValueStr(this.parmTableBuffer(), strFieldValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    public tableId tableId()
    {
        return this.parmTableBuffer().TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableName</Name>
				<Source><![CDATA[
    public TableName tableName()
    {
        return tableid2name(this.tableId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBaseDataAfterSaving</Name>
				<Source><![CDATA[
    public void updateBaseDataAfterSaving()
    {
        Common                  record;
        GanttDataModification   ganttDataModification;
        if (!this.parmAllowUserModification() || !this.parmKeepBaseData())
        {
            return;
        }

        record = this.findFirst();

        while (record.RecId)
        {
            // make modified data to be the base data
            if (this.parmSetUserModifiedRecIds().in(record.RecId))
            {
                ganttDataModification = GanttDataModification::newRecord(record);

                // convert the current recId to the base data recId
                this.ganttTableBaseData().findOrigRecId(this.origRecId(), true);

                ganttDataModification.parmModifiedRecId(this.ganttTableBaseData().parmTableBuffer().RecId);

                this.ganttTableBaseData().updateModification(ganttDataModification);

                this.updateLatestRecVersion();
            }

            record = this.findNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a field on a table buffer stored in the <c>GanttTableBase</c> class record sorted list
    /// </summary>
    /// <param name="_recId">
    ///    The record ID that identifies the record to update
    /// </param>
    /// <param name="_fieldName">
    ///    The value that identifies the field name to update.
    /// </param>
    /// <param name="_fieldValue">
    ///    The value to set the updated field to.
    /// </param>
    /// <returns>
    ///    A table buffer with the modified record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The record specified by the record ID cannot be found.
    /// </exception>
    public Common updateField(RecId _recId, FieldName _fieldName, anytype _fieldValue)
    {
        Common  record;
        Map     mapModifiedFields = new Map(Types::String, Types::String);

        // no field to update
        if (!_recId            ||
           !_fieldName)
        {
            return null;
        }

        mapModifiedFields.insert(_fieldName, strfmt("%1",_fieldValue));

        // find record for update
        if (this.findRecId(_recId))
        {
            record = this.parmTableBuffer();
        }

        if (!record.RecId)
        {
            throw error(strfmt("@SYS102169", _recId));
        }

        this.setFieldValuesFromMap(mapModifiedFields);

        // do not call this.validateWrite() here, do it before this method is called

        // update record
        record.doUpdate();

        recordSortedList.ins(record, true);

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLatestRecVersion</Name>
				<Source><![CDATA[
    protected void updateLatestRecVersion()
    {
        Common  origRecord = this.getOrigRecord(false, true);
        if (!mapOrigRecId2RecVersion                         ||
           !mapOrigRecId2RecVersion.exists(origRecord.RecId))
        {
            throw error("@SYS6144");
        }

        mapOrigRecId2RecVersion.insert(origRecord.RecId, origRecord.RecVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateModification</Name>
				<Source><![CDATA[
    public Common updateModification(GanttDataModification _ganttDataModification)
    {
        Common  record;

        // no fields for update
        if (!_ganttDataModification                                  ||
           !_ganttDataModification.parmMapModifiedFields()          ||
           !_ganttDataModification.parmMapModifiedFields().elements())
        {
            return null;
        }

        // find record for update
        if (this.findRecId(_ganttDataModification.parmModifiedRecId()))
        {
            record = this.parmTableBuffer();
        }

        if (!record.RecId)
        {
            throw error(strfmt("@SYS102169", _ganttDataModification.parmModifiedRecId()));
        }

        this.setFieldValuesFromMap(_ganttDataModification.parmMapModifiedFields());

        // do not call this.validateWrite() here, do it before this method is called

        // update record
        record.doUpdate();

        recordSortedList.ins(record, true);

        // update set of modified by user recIds only for the actual temp table, not for the table with base data
        if (keepBaseData)
        {
            setUserModifiedRecIds.add(record.RecId);
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotFound</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotFound(TableName _tableName)
    {
        return strfmt("@SYS108469", _tableName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// The hash key from which the hash value is generated.
    /// </summary>
    /// <returns>A hash key string.</returns>
    protected str hashKey()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the hashed value for the gantt table values composed by the hashKey method.
    /// </summary>
    /// <returns>
    /// A hashed value.
    /// </returns>
    protected str hashValue()
    {
        str hashKey = this.hashKey();

        if (!hashKey)
        {
            return '';
        }

        str hexString;
        using (MemoryStream keyStream = new MemoryStream())
        {
            new BinaryFormatter().Serialize(keyStream, hashKey);
            keyStream.Seek(0, SeekOrigin::Begin);

            using (var algorithm = new SHA1CryptoServiceProvider())
            {
                using (MemoryStream hashStream = new MemoryStream(algorithm.ComputeHash(keyStream)))
                {
                    hexString = StrRem(System.BitConverter::ToString(hashStream.ToArray()), '-');
                }
            }
        }

        return hexString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDuplicateInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a duplicate of a specified record based on an in-memory map containing pairs of hash values calculated
    /// from key fields and RecId values. Found duplicate data then set to the passed <paramref name="_searchRecord"/>.
    /// </summary>
    /// <param name = "_searchRecord">A record to search a duplicate of.</param>
    /// <returns>true in case a duplicate is found; false otherwise.</returns>
    protected internal boolean findDuplicateInternal(Common _searchRecord)
    {
        str hashValue = this.hashValue();

        if (mapHashValue2RecId.exists(hashValue))
        {
            RecId duplicateRecId = mapHashValue2RecId.lookup(hashValue);

            if (duplicateRecId)
            {
                _searchRecord.RecId = duplicateRecId;
                return recordSortedList.find(_searchRecord);
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoMapHashValue2RecId</Name>
				<Source><![CDATA[
    private void insertIntoMapHashValue2RecId()
    {
        if (!improvedPerformanceDuplicateSearchFeatureEnabled)
        {
            return;
        }

        var hashValue = this.hashValue();

        if (hashValue)
        {
            mapHashValue2RecId.insert(hashValue, this.parmTableBuffer().RecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>