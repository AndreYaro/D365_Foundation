<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgErrorSpecificationForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgErrorSpecificationForm</c> class supports the error specification form.
/// </summary>
/// <remarks>
/// The error specification form is used to encode and decode the multiple error registrations, noted
/// on registrations made by the employee. This class offers methods to show the error specification
/// form, and to encode and decode the <c>JmgErrorSpecification</c> extended data type.
/// </remarks>
class JmgErrorSpecificationForm
{
    private const str errorSpecificationListSeparator = "#";
    private const str errorSpecificationSeparator = ";";

    JmgStampJournalTrans jmgStampJournalTrans;
    JmgStampTrans jmgStampTrans;
    JmgTermReg jmgTermReg;
    JmgTmpJobBundleProdFeedback jobBundleProdFeedback;
    JmgRegistrationSetup    registrationSetup;

    recId dataRecordId;
    boolean editable;
    FormRun caller;
    ProdReportedError reportedError;

    PdsCWBatchErr   pdsCWReportedError;
    ItemId          itemId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>JmgErrorSpecificationForm</c> should be opened in read write mode, or read
    /// only mode.
    /// </summary>
    /// <returns>
    /// true if the user should be able to modify data in the <c>JmgErrorSpecificationForm</c>; otherwise,
    /// false.
    /// </returns>
    public boolean allowEdit()
    {
        return editable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>data</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decodes the input error specification and returns a temporary <c>JmgTmpJobBundleProdFeedback</c>
    /// record that has a line for every reported error quantity.
    /// </summary>
    /// <returns>
    /// A <c>JmgTmpJobBundleProdFeedback</c> record for every reported cause and error.
    /// </returns>
    /// <remarks>
    /// The temporary buffer is constructed by using the <see
    /// cref="M:JmgErrorSpecificationForm::decodeErrorSpecification" /> method.
    /// </remarks>
    public JmgTmpErrorSpecification data()
    {
        // If a new error value was supplied, then create a default error specification.
        if (reportedError)
        {
            return JmgErrorSpecificationForm::decodeErrorSpecification(JmgErrorSpecificationForm::encodeValue(ProdErrorCause::Material, reportedError
                    , pdsCWReportedError
                    ));
        }
        if (jmgStampJournalTrans)
        {
            return JmgErrorSpecificationForm::decodeErrorSpecification(jmgStampJournalTrans.ErrorSpecification);
        }
        else if (jmgStampTrans)
        {
            return JmgErrorSpecificationForm::decodeErrorSpecification(jmgStampTrans.ErrorSpecification);
        }
        else if (jmgTermReg)
        {
            return JmgErrorSpecificationForm::decodeErrorSpecification(jmgTermReg.ErrorSpecification);
        }
        else if (jobBundleProdFeedback)
        {
            return JmgErrorSpecificationForm::decodeErrorSpecification(jobBundleProdFeedback.ErrorSpecification);
        }
        return JmgErrorSpecificationForm::decodeErrorSpecification('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item for which the error is being reported.
    /// </summary>
    /// <returns>
    /// The item for which the error is being reported.
    /// </returns>
    public ItemId itemId()
    {
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>JmgErrorSpecificationForm</c> class.
    /// </summary>
    /// <param name="dataSource">
    /// The data record that contains the error specification field to display or edit.
    /// </param>
    /// <param name="_caller">
    /// A reference to the calling form; optional.
    /// </param>
    /// <param name="_editable">
    /// A Boolean value that indicates whether the user can change the error specification; optional.
    /// </param>
    /// <param name="errorValue">
    /// The initial error quantity, which should be displayed in the error specification form; optional.
    /// </param>
    /// <param name="_cwErrorValue">
    /// The initial catch weight error quantity; optional.
    /// </param>
    void new(Common dataSource, FormRun _caller, boolean _editable, ProdReportedError errorValue = 0.0
        , PdsCWBatchErr _cwErrorValue = 0.0
        )
    {
        caller = _caller;
        editable = _editable;
        reportedError = errorValue;

        pdsCWReportedError = _cwErrorValue;

        // Init the data.
        if (dataSource.TableId == tablenum(JmgStampJournalTrans))
        {
            jmgStampJournalTrans = dataSource;
            itemId = JmgJobTable::find(jmgStampJournalTrans.JobId).ItemId;
        }
        else if (dataSource.TableId == tablenum(JmgStampTrans))
        {
            jmgStampTrans = dataSource;
            itemId = JmgJobTable::find(jmgStampTrans.JobId).ItemId;
        }
        else if (dataSource.TableId == tablenum(JmgTermReg))
        {
            jmgTermReg = dataSource;
            itemId = JmgJobTable::find(jmgTermReg.JobId).ItemId;
        }
        else if (dataSource.TableId == tablenum(JmgTmpJobBundleProdFeedback))
        {
            jobBundleProdFeedback = dataSource;
            itemId = JmgJobTable::find(jobBundleProdFeedback.JobId).ItemId;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegSetup</Name>
				<Source><![CDATA[
    JmgRegistrationSetup parmRegSetup(JmgRegistrationSetup _regSetup = null)
    {
        if (_regSetup)
        {
            registrationSetup = _regSetup;
        }
        return registrationSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveErrorSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the error specification from the temporary buffer to the record, specified as parameter to
    /// the <c>JmgErrorSpecificationForm.new</c> method.
    /// </summary>
    /// <param name="errorSpecification">
    /// A record buffer that contains the error causes and quantities that are reported by the user.
    /// </param>
    /// <remarks>
    /// The <c>ErrorSpecification</c> is encoded by using the method
    /// <c>JmgErrorSpecificationForm::encodeErrorSpecification</c> method.
    /// </remarks>
    public void saveErrorSpecification(JmgTmpErrorSpecification errorSpecification)
    {
        JmgTmpErrorSpecification sumError;
        if (editable)
        {
            ttsbegin;
            sumError.setTmpData(errorSpecification);
            select sum(QtyError)
                 , sum(PdsCWQtyError)
            from sumError;

            // Only check data in stampJournaltrans and termreg. We cannot change data in stampTrans.
            if (jmgStampJournalTrans)
            {
                jmgStampJournalTrans.ErrorSpecification = JmgErrorSpecificationForm::encodeErrorSpecification(errorSpecification);
            }
            else if (jmgTermReg)
            {
                jmgTermReg.ErrorSpecification = JmgErrorSpecificationForm::encodeErrorSpecification(errorSpecification);
            }
            else if (jobBundleProdFeedback)
            {
                jobBundleProdFeedback.ErrorSpecification = JmgErrorSpecificationForm::encodeErrorSpecification(errorSpecification);
            }
            ttscommit;

            // Refresh the caller, as its data might have changed.
            if (caller)
            {
                caller.dataSource().refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showErrorSpecificationForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the error specification form, based on the input to the <c>JmgErrorSpecificationForm</c>
    /// class.
    /// </summary>
    /// <remarks>
    /// The error specification form should be opened by using this method.
    /// </remarks>
    public void showErrorSpecificationForm()
    {
        Args args;
        FormRun formRun;

        // Check that the data is a process registration. If not, then the form should not be shown.
        if (jmgStampJournalTrans)
        {
            if (!(jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::MrpProcess))
            {
                return;
            }
        }
        else if (jmgStampTrans)
        {
            if (!(jmgStampTrans.JourRegType == JmgJourRegTypeEnum::MrpProcess))
            {
                return;
            }
        }
        else if (jmgTermReg)
        {
            if (!(jmgTermReg.RegType == JmgTermRegType::JobStart ||
                  jmgTermReg.RegType == JmgTermRegType::JobStop))
            {
                return;
            }
        }

        args = new Args(formstr(JmgErrorSpecification));
        args.caller(this);

        if (caller && caller.args())
        {
            args.parm(caller.args().parm());
        }

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeErrorSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decodes an error specification encoded by the
    /// <c>JmgErrorSpecificationForm::encodeErrorSpecification</c> method from a string to a record.
    /// </summary>
    /// <param name="jmgErrorSpecification">
    /// A string following the format described in the help text for the
    /// <c>JmgErrorSpecificationForm::encodeErrorSpecification</c> method.
    /// </param>
    /// <returns>
    /// A record buffer that contains a line for every error cause and error quantity that is reported by
    /// the user.
    /// </returns>
    public static JmgTmpErrorSpecification decodeErrorSpecification(JmgErrorSpecification jmgErrorSpecification)
    {
        JmgTmpErrorSpecification result;
        
        // Split it by the #
        ListEnumerator jmgErrorSpecificationEnumerator = strSplit(jmgErrorSpecification, errorSpecificationListSeparator).getEnumerator();

        while (jmgErrorSpecificationEnumerator.moveNext())
        {
            str errorSpecification = jmgErrorSpecificationEnumerator.current();

            if (errorSpecification != '')
            {
                // Split it by the ;
                container errorSpecificationContainer = str2con(errorSpecification, errorSpecificationSeparator);
            
                result.clear();
                result.ErrorCause = any2Enum(str2int(conPeek(errorSpecificationContainer, 1)));
                result.QtyError = str2num(conPeek(errorSpecificationContainer, 2));

                if (conLen(errorSpecificationContainer) == 3)
                {
                    result.PdsCWQtyError = str2Num(conPeek(errorSpecificationContainer, 3));
                }
                else
                {
                    result.PdsCWQtyError = 0;
                }

                result.insert();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodeErrorSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a <c>JmgTmpErrorSpecification</c> record with reported error causes and quantities to a
    /// string value.
    /// </summary>
    /// <param name="jmgTmpErrorSpecification">
    /// A record with error causes and error quantities.
    /// </param>
    /// <returns>
    /// The encoded value.
    /// </returns>
    public static JmgErrorSpecification encodeErrorSpecification(JmgTmpErrorSpecification jmgTmpErrorSpecification)
    {
        JmgErrorSpecification result = "";

        while select jmgTmpErrorSpecification
        {
            result += JmgErrorSpecificationForm::encodeValue(jmgTmpErrorSpecification.ErrorCause, jmgTmpErrorSpecification.QtyError, jmgTmpErrorSpecification.PdsCWQtyError);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encodes one pair that displays the error cause and error quantity to a string.
    /// </summary>
    /// <param name="_errorCause">
    /// The error cause to encode.
    /// </param>
    /// <param name="_value">
    /// The error quantity to report.
    /// </param>
    /// <param name="_cwValue">
    /// The catch weight error quantity to report.
    /// </param>
    /// <returns>
    /// An encoded error cause and error quantity pair.
    /// </returns>
    /// <remarks>
    /// The encoded value looks as follows: <c>_errorCause;_value#</c>
    /// </remarks>
    public static JmgErrorSpecification encodeValue(
        ProdErrorCause _errorCause,
        Qty _value, 
        PdsCWInventQty _cwValue)
    {
        return int2str(enum2int(_errorCause)) + errorSpecificationSeparator + num2str(_value, 1, 10, 1, 0) + errorSpecificationSeparator + num2str(_cwValue, 1, 10, 1, 0) + errorSpecificationListSeparator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the difference between two error specifications.
    /// </summary>
    /// <param name="_spec1">
    /// The error specification from which to deduct.
    /// </param>
    /// <param name="_spec2">
    /// The error specification that is deducted.
    /// </param>
    /// <returns>
    /// An error specification that contains the difference between the two specified error specifications.
    /// </returns>
    public static JmgErrorSpecification getDifference(JmgErrorSpecification _spec1, JmgErrorSpecification _spec2)
    {
        JmgTmpErrorSpecification    errorSpec1;
        JmgTmpErrorSpecification    errorSpec2;
        JmgTmpErrorSpecification    diffSpec;
        errorSpec1  = JmgErrorSpecificationForm::decodeErrorSpecification(_spec1);
        errorSpec2  = JmgErrorSpecificationForm::decodeErrorSpecification(_spec2);

        while select errorSpec2
        {
            errorSpec1.ErrorCause   = errorSpec2.ErrorCause;
            errorSpec1.QtyError     = - errorSpec2.QtyError;
            errorSpec1.PdsCWQtyError = - errorSpec2.PdsCWQtyError;
            errorSpec1.insert();
        }

        while select sum(QtyError), ErrorCause
            , sum(PdsCWQtyError)
            from errorSpec1
            group by ErrorCause
        {
            diffSpec.ErrorCause = errorSpec1.ErrorCause;
            diffSpec.QtyError   = errorSpec1.QtyError;
            diffSpec.PdsCWQtyError = errorSpec1.PdsCWQtyError;
            diffSpec.insert();
        }
        return JmgErrorSpecificationForm::encodeErrorSpecification(diffSpec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalErrorQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total quantity error that is contained in the error specification.
    /// </summary>
    /// <param name="_errorSpecification">
    ///    The error specification from which to calculate the sum.
    /// </param>
    /// <returns>
    ///    The total quantity error that is contained in the error specification.
    /// </returns>
    public static ProdReportedError getTotalErrorQuantity(JmgErrorSpecification _errorSpecification)
    {
        JmgTmpErrorSpecification tmpErrorSpecification;
        tmpErrorSpecification = JmgErrorSpecificationForm::decodeErrorSpecification(_errorSpecification);

        select sum(QtyError) from tmpErrorSpecification;

        return tmpErrorSpecification.QtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalPdsCWErrorQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total catch weight quantity error that are contained in the error specification.
    /// </summary>
    /// <param name="_errorSpecification">
    /// The error specification to calculate the sum from.
    /// </param>
    /// <returns>
    /// The total catch weight quantity error that is contained in the error specification.
    /// </returns>
    public static PdsCWBatchErr getTotalPdsCWErrorQuantity(JmgErrorSpecification _errorSpecification)
    {
        JmgTmpErrorSpecification tmpErrorSpecification = JmgErrorSpecificationForm::decodeErrorSpecification(_errorSpecification);

        select sum(PdsCWQtyError) from tmpErrorSpecification;

        return tmpErrorSpecification.PdsCWQtyError;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>