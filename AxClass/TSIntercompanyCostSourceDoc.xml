<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TsIntercompanyCostSourceDoc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TsIntercompanyCostSourceDoc</c> class handles the distribution and subledger journal lines
/// of a <c>TSIntercompanyCost</c> table record.
/// </summary>
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_TimesheetsIntercompany), SourceDocument_TimesheetsIntercompany::IntercompanyCost, tableStr(TSIntercompanyCost))]
public class TsIntercompanyCostSourceDoc extends SourceDocument
{
    TSIntercompanyCost tsIntercompanyCost;
    TSTimesheetTable tsTimesheetTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the business event information that corresponds to the source document.
    /// </summary>
    /// <returns>
    /// A <c>BusinessEvent</c> object.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent           businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_ProjectTimesheets), BusinessEvent_ProjectTimesheets::TimesheetsIntercompanyRevenue);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables of the class.
    /// </summary>
    /// <param name="_sourceDocumentImplementation">
    /// A <c>SourceDocumentHeaderImplementation</c> record.
    /// </param>
    protected void initializeImplementation(SourceDocumentHeaderImplementation _sourceDocumentImplementation)
    {
        tsIntercompanyCost = _sourceDocumentImplementation;
        tsTimesheetTable = TSTimesheetTable::findRecId(tsIntercompanyCost.tsTimesheetTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        AccountingDate accountingDate;

        accountingDate = super();

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        DocumentDate documentDate;

        documentDate = super();

        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentVoucher</Name>
				<Source><![CDATA[
    public Voucher parmCurrentVoucher(DataAreaId _dataAreaId)
    {
        TSTimesheetTrans tsTimesheetTrans;
        TSIntercompanyCostDetails tsIntercompanyCostDetails;

        select firstonly Voucher from tsTimesheetTrans
            join RecId from tsIntercompanyCostDetails
                 where tsTimesheetTrans.RecId == tsIntercompanyCostDetails.tsTimesheetTrans &&
                       tsIntercompanyCostDetails.tsIntercompanyCost == tsIntercompanyCost.RecId;

        return tsTimesheetTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNumber</Name>
				<Source><![CDATA[
    public DocumentNum parmDocumentNumber()
    {
        return tsTimesheetTable.TimesheetNbr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>