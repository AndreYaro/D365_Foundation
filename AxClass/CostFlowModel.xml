<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostFlowModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostFlowModel</c> class is the base model class for the cost flow charts.
/// </summary>
public abstract class CostFlowModel
{
    Query               query;
    CostFlowTmp         endingBalanceLines;
    CostFlowTmp         periodChangeLines;

    date                toDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a date range for the statement.
    /// </summary>
    /// <param name = "_toDate">
    /// The to date.
    /// </param>
    public void setToDate(date _toDate)
    {
        toDate = _toDate;

        this.create();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a map query command for the specified query run.
    /// </summary>
    /// <param name = "_queryRun">The query run for which to get the map query command.</param>
    /// <returns></returns>
    protected abstract InventAgingICommand getMapQuery(QueryRun _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCmdAggregate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a statement data aggregator for the specified map query command.
    /// </summary>
    /// <param name = "_mapQuery">The map query command for which to get the data aggregator.</param>
    /// <param name = "_period">The period that should be aggregated by the aggregator.</param>
    /// <returns>The <c>CostStatementCmdAggregate</c> class instance.</returns>
    protected abstract CostStatementCmdAggregate getCmdAggregate(InventAgingICommand _mapQuery, CostSelectPeriodState _period)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected abstract Query buildQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the data.
    /// </summary>
    protected void create()
    {
        delete_from endingBalanceLines;
        delete_from periodChangeLines;

        this.buildQuery();
        var queryRun = new QueryRun(query);

        var mapQuery = this.getMapQuery(queryRun);
        var commandList = InventAgingCmdList::construct().add(mapQuery);

        var aggregators = this.getAggregatorsForPeriods(mapQuery);
        var aggregatorsEnumerator = aggregators.getEnumerator();

        while (aggregatorsEnumerator.moveNext())
        {
            CostStatementCmdAggregate aggregator = aggregatorsEnumerator.current();
            commandList.add(aggregator);
        }

        InventAgingQueryProcessor::newFromParameters(queryRun, commandList).execute();

        aggregatorsEnumerator.reset();

        while (aggregatorsEnumerator.moveNext())
        {
            CostStatementCmdAggregate aggregator = aggregatorsEnumerator.current();

            this.addBalances(aggregator);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAggregatorsForPeriods</Name>
				<Source><![CDATA[
    protected List getAggregatorsForPeriods(InventAgingICommand _mapQuery)
    {
        List aggregators = new List(Types::Class);

        var periodsProvider = this.parmPeriodsProvider();

        List periods = periodsProvider.providePeriods();
        ListEnumerator listEnumerator = periods.getEnumerator();

        while (listEnumerator.moveNext())
        {
            CostSelectPeriodState   period = listEnumerator.current();

            CostStatementCmdAggregate aggregator = this.getCmdAggregate(_mapQuery, period);

            aggregators.addEnd(aggregator);
        }

        return aggregators;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipLastAggregatorInOutput</Name>
				<Source><![CDATA[
    protected boolean parmSkipLastAggregatorInOutput()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the cost balances to the temporary data source used in the flow chart.
    /// </summary>
    /// <param name = "_aggregator">The statement data aggregator used by the flow chart.</param>
    protected abstract void addBalances(CostStatementCmdAggregate _aggregator)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a line to the balance chart data source.
    /// </summary>
    /// <param name = "_name">
    /// Name on the line.
    /// </param>
    /// <param name = "_costFlowTmp">
    /// Buffer to insert the line to.
    /// </param>
    /// <param name = "_monthName">
    /// Name of the month.
    /// </param>
    /// <param name = "_amount">
    /// Amount on the line.
    /// </param>
    protected void addBalance(
        Name           _name,
        CostFlowTmp    _costFlowTmp,
        Name           _monthName,
        CostAmount     _amount)
    {
        _costFlowTmp.Name = _name;
        _costFlowTmp.Month = _monthName;
        _costFlowTmp.Amount = _amount;
        _costFlowTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndingBalanceLines</Name>
				<Source><![CDATA[
    public CostFlowTmp parmEndingBalanceLines()
    {
        return endingBalanceLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodChangeLines</Name>
				<Source><![CDATA[
    public CostFlowTmp parmPeriodChangeLines()
    {
        return periodChangeLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a label for a given date range.
    /// </summary>
    /// <param name = "_fromDate">
    /// The beginning date of the date range.
    /// </param>
    /// <param name = "_toDate">
    /// The ending date of the date range.
    /// </param>
    /// <returns>
    /// The label for a given date range.
    /// </returns>
    protected Name getLabelForDateRange(date _fromDate, date _toDate)
    {
        if (_toDate == endmth(_toDate) && (_fromDate == dateStartMth(_toDate) || !_fromDate))
        {
            return strFmt('%1 %2', mthName(mthOfYr(_toDate)), year(_toDate));
        }
        else
        {
            return strFmt('%1 %2', dayOfMth(_toDate), mthName(mthOfYr(_toDate)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodsProvider</Name>
				<Source><![CDATA[
    protected abstract CostFlowChartAggregationPeriodsProvider parmPeriodsProvider()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>