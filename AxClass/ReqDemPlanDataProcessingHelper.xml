<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanDataProcessingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using AppLogging = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

/// <summary>
///     This class is generated as a utility class for the methods shared between multiple other table populating classes.
/// </summary>
class ReqDemPlanDataProcessingHelper
{
    ReqDemPlanTaskLoggerInterface       logger;
    Set                                 companiesToProcess;
    boolean                             reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled;

    #ReqDemPlanForecastAlgorithmParameters
    #ReqDemPlanTask
    #ReqDemPlan

    System.Globalization.CultureInfo    invariantCulture;
    System.Globalization.NumberStyles   decimalStyle;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAlgorithmParameterValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the corresponding algorithm parameter value based on the hierarchy of defaulting between
    ///     the default parameters, global parameters and item allocation key parameters.
    /// </summary>
    /// <param name="_itemAllocationParameters">
    ///     The item allocation key parameters record to be used.
    /// </param>
    /// <param name="_paramName">
    ///     The parameter name to be used for getting the value.
    /// </param>
    /// <returns>
    ///     The value of the parameter.
    /// </returns>
    public ReqDemPlanAzureMlParameterValue getAlgorithmParameterValue(ReqDemplanForecastIAKParameters _itemAllocationParameters, ReqDemPlanAzureMlParameterName _paramName)
    {
        ReqDemPlanForecastAzureMlParameters     algorithmParameters;
        ReqDemPlanDefaultAlgorithmParameters    defaultAlgorithmParameters;
        ReqDemPlanAzureMlParameterValue         retValue;

        select Value from algorithmParameters
            where algorithmParameters.ForecastIAKParameters == _itemAllocationParameters.RecId
            join RealName from defaultAlgorithmParameters
                where defaultAlgorithmParameters.RecId == algorithmParameters.DefaultAlgorithmParameter
                && defaultAlgorithmParameters.RealName == _paramName;

        if (algorithmParameters)
        {
            retValue = algorithmParameters.Value;
        }
        else
        {
            select Value from defaultAlgorithmParameters
                where defaultAlgorithmParameters.RealName == _paramName;

            retValue = defaultAlgorithmParameters.Value;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        logger = ReqDemPlanDummyTaskLogger::construct();

        invariantCulture = System.Globalization.CultureInfo::get_InvariantCulture();
        decimalStyle = System.Globalization.NumberStyles::Float;
        reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled = ReqDemPlanCreateForecastService::isTransientSqlConnectionErrorRetryEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLogger</Name>
				<Source><![CDATA[
    public ReqDemPlanTaskLoggerInterface parmLogger(ReqDemPlanTaskLoggerInterface _logger = logger)
    {
        if (!prmisDefault(_logger))
        {
            logger = _logger;

            if (logger == null)
            {
                // ensure logger instance is never null
                logger = ReqDemPlanDummyTaskLogger::construct();
            }
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareAllocationKeyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prepares the data in the temporary table which serves as a filter on the item allocation key.
    /// </summary>
    /// <param name="_dataQuery">
    ///     The query to be used for creating the allocation key filter table.
    /// </param>
    /// <param name="_allocationKeyFilterTable">
    ///     The instance of the temporary filter table.
    /// </param>
    /// <returns>
    ///     The set of companies that need to be processed.
    /// </returns>
    public Set prepareAllocationKeyFilter(Query _dataQuery, ReqDemPlanAllocationKeyFilterTmp _allocationKeyFilterTable)
    {
        QueryRun                            queryRun;
        ReqDemPlanPlanningGroupAllocKeys    allocationKey;
        ReqDemPlanForecastParameters        forecastParameters;
        ReqDemPlanForecastIAKMap            itemAllocationMap;
        ReqDemplanForecastIAKParameters     itemAllocationParameters;
        ReqDemplanForecastIAKParameters     globalParameters;

        int infologLineTry;

        boolean isReqDemPlanClearAllocationKeyFilterTmpFlightEnabled = ReqDemPlanClearAllocationKeyFilterTmpFlight::instance().isEnabled();

        try
        {
            if (isReqDemPlanClearAllocationKeyFilterTmpFlightEnabled)
            {
                _allocationKeyFilterTable.company(curExt2dataareaid(tableNum(ReqDemPlanAllocationKeyFilterTmp)));

                var reqDemPlanAllocationKeyFilterTmpCount = this.countReqDemPlanAllocationKeyFilterTmp(_allocationKeyFilterTable);
                AppLogging::EventWriteSelfServiceInformation(strfmt('ReqDemPlanAllocationKeyFilterTmp count is %1', reqDemPlanAllocationKeyFilterTmpCount));

                this.clearReqDemPlanAllocationKeyFilterTmp(_allocationKeyFilterTable);
            }

            infologLineTry = infologLine();

            companiesToProcess = new Set(Types::String);
            forecastParameters = ReqDemPlanForecastParameters::find();
            globalParameters = forecastParameters.allocationKeyParameters();

            queryRun = new QueryRun(_dataQuery);

            while (queryRun.next())
            {
                allocationKey = queryRun.get(tableNum(ReqDemPlanPlanningGroupAllocKeys));
                changeCompany(allocationKey.dataAreaId)
                {
                    _allocationKeyFilterTable.clear();
                    _allocationKeyFilterTable.AllocateId = allocationKey.AllocateId;
                    _allocationKeyFilterTable.AllocationKeyRecId = allocationKey.AllocationKeyRecId;
                    itemAllocationMap = ReqDemPlanForecastIAKMap::find(allocationKey.dataAreaId, allocationKey.AllocateId);
                    if (itemAllocationMap)
                    {
                        itemAllocationParameters = itemAllocationMap.allocationKeyParameters();
                    }
                    else
                    {
                        itemAllocationParameters = globalParameters;
                    }
                    _allocationKeyFilterTable.SalesOrder = itemAllocationParameters.SalesOrders;
                    _allocationKeyFilterTable.ProductionLine = itemAllocationParameters.ProductionLine;
                    _allocationKeyFilterTable.SalesQuotation = itemAllocationParameters.SalesQuotation;
                    _allocationKeyFilterTable.InventTransaction = itemAllocationParameters.InventTransaction;
                    _allocationKeyFilterTable.Project = itemAllocationParameters.Project;
                    _allocationKeyFilterTable.InventTransfer = itemAllocationParameters.Transfer;
                    _allocationKeyFilterTable.KanbanJobPickingList = itemAllocationParameters.KanbanJobPickingList;
                    _allocationKeyFilterTable.KanbanJobTransferIssue = itemAllocationParameters.KanbanJobTransfer;
                    _allocationKeyFilterTable.ForecastingStrategy = itemAllocationParameters.ForecastingStrategy;
                    this.setNormalizedMinMaxQuantity(_allocationKeyFilterTable, itemAllocationParameters, ReqDemPlanDataProcessingHelper::getMinMaxDBValueReal());
                    _allocationKeyFilterTable.insert();

                    companiesToProcess.add(allocationKey.dataAreaId);
                }
            }
        }
        #ReqDemPlanCatchRetryWithoutPrepareTransientSqlConnectionError(reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled, infologLineTry)

        return companiesToProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNormalizedMinMaxQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the normalized minimum and maximum values defined by the user against the minimum and maximum values of the system.
    /// </summary>
    /// <param name="_allocationKeyFilterTable">
    ///     Temporary table instance to be used.
    /// </param>
    /// <param name="_itemAllocationParameters">
    ///     The record used for retriving user set values for minimum and maximum.
    /// </param>
    /// <param name="_maxValue">
    ///     The minimum and maximum value ceiling to be normalized against.
    /// </param>
    private void setNormalizedMinMaxQuantity(ReqDemPlanAllocationKeyFilterTmp _allocationKeyFilterTable, ReqDemplanForecastIAKParameters _itemAllocationParameters, real _maxValue)
    {
        System.String           minString = this.getAlgorithmParameterValue(_itemAllocationParameters, #MinimumSeriesValueName);
        System.String           maxString = this.getAlgorithmParameterValue(_itemAllocationParameters, #MaximumSeriesValueName);
        System.Decimal          minDecimal;
        System.Decimal          maxDecimal;

        _allocationKeyFilterTable.MinValue = -_maxValue;
        _allocationKeyFilterTable.MaxValue =  _maxValue;

        if (System.Decimal::TryParse(minString, decimalStyle, invariantCulture, byRef minDecimal))
        {
            _allocationKeyFilterTable.MinValue = this.normalizeQty(minDecimal, '', false, _allocationKeyFilterTable);
        }

        if (System.Decimal::TryParse(maxString, decimalStyle, invariantCulture, byRef maxDecimal))
        {
            _allocationKeyFilterTable.MaxValue = this.normalizeQty(maxDecimal, '', false, _allocationKeyFilterTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Disables various validation methods on the table buffer to speed up set-based operations.
    /// </summary>
    /// <param name="_common">
    ///     The table buffer.
    /// </param>
    public void skipAll(Common _common)
    {
        new SkipAOSValidationPermission().assert();

        _common.skipAosValidation(true);
        _common.skipDeleteActions(true);
        _common.skipDeleteMethod(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>stripWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Strips warehouse location from the historical data.
    /// </summary>
    /// <param name="_historical">
    ///     The parameter showing whether the table being used is historical transactional data or historical forecast data.
    /// </param>
    /// <param name="_version">
    ///     The version of the forecast.
    /// </param>
    /// <returns>
    ///     The number of records processed.
    /// </returns>
    public int64 stripWarehouse(boolean _historical = true, RefRecId _version = ReqDemPlanForecastVersion::Forecasted)
    {
        ReqDemPlanCubeStagingTable          historicalData;
        ReqDemPlanForecast                  adjustedForecast;
        EcoResStorageDimensionGroupItem     storageDimItems;
        EcoResStorageDimensionGroupFldSetup storageDimSetup;
        EcoResStorageDimensionGroup         storageDim;
        int64                               recordsProcessed = 0;

        #localmacro.stripWarehouse
        this.skipAll(%1);

        update_recordSet %1
            setting Warehouse = ''
            where %1.Version == _version
            exists join storageDimItems
                where storageDimItems.ItemId == %1.itemId
                && storageDimItems.ItemDataAreaId == %1.dataAreaId
            exists join storageDimSetup
                where  storageDimSetup.StorageDimensionGroup == storageDimItems.StorageDimensionGroup
                    && storageDimSetup.DimensionFieldId == fieldNum(InventDim,InventLocationId)
                    && storageDimSetup.IsCoveragePlanByDimensionEnabled == NoYes::No
            exists join storageDim
                where storageDim.recId == storageDimSetup.StorageDimensionGroup
                    && storageDim.IsWarehouseMandatoryEnabled == NoYes::No;

        recordsProcessed = recordsProcessed + %1.RowCount();
        #endmacro

        ttsBegin;
        if (_historical)
        {
            #stripWarehouse(historicalData)
        }
        else
        {
            #stripWarehouse(adjustedForecast)
        }
        ttsCommit;

        return recordsProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQtyWithUOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the quantity on the table according to the unit of measure conversion needed.
    /// </summary>
    /// <param name="_isHistoricalDemand">
    ///     A boolean value indicating whether the data is historical demand data or historical forecast data.
    /// </param>
    /// <param name="_version">
    ///     The version of the forecast.
    /// </param>
    /// <returns>
    ///     The number of records processed.
    /// </returns>
    public int64 updateQtyWithUOM(boolean _isHistoricalDemand = true, RefRecId _version = ReqDemPlanForecastVersion::Forecasted)
    {
        ReqDemPlanForecast                      forecastedData;
        ReqDemPlanCubeStagingTable              historicalData;
        InventTable                             inventTable;
        ReqProductForecastingUomConversionCache productUomConversionCache;
        UnitOfMeasureConversionCache            uomConversionCache;
        int64                                   recordsProcessed = 0;

        #localmacro.uomConversionUpdate
        this.skipAll(%1);

        update_recordSet %1
            setting %2 = (uomConversionCache.Factor * uomConversionCache.Numerator / uomConversionCache.Denominator * (%3 + uomConversionCache.InnerOffset) / uomConversionCache.FactorDenominator + uomConversionCache.OuterOffset)
            where %1.Version == _version
            join inventTable
                where inventTable.ItemId == %1.itemId
            join productUomConversionCache
                where  productUomConversionCache.Product == inventTable.Product
            join uomConversionCache
                where uomConversionCache.recId == productUomConversionCache.UnitOfMeasureConversionCache
                    && uomConversionCache.Denominator != 0
                    && (%3 + uomConversionCache.InnerOffset != 0)
                    && uomConversionCache.FactorDenominator != 0;

        recordsProcessed += %1.RowCount();

        //server crashes when multiplying quantity by -1 in the UOM expression, therefore updating with a separate statement
        update_recordSet %1
            setting %2 = -1 * %1.%2
        where %1.Version == _version;

        recordsProcessed += %1.RowCount();
        #endmacro

        if (_isHistoricalDemand)
        {
            #uomConversionUpdate(historicalData, TransactionQty, historicalData.TransactionQty);
        }
        else
        {
            #uomConversionUpdate(forecastedData, Qty, forecastedData.Qty);
        }

        return recordsProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyItemUomConversionsAndInitCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the unit of measure conversion caches.
    /// </summary>
    /// <param name="_parameters">
    ///     The table buffer with parameters.
    /// </param>
    /// <param name="_allocKeyFilter">
    ///     A temporary table holding filter values for the items to be used.
    /// </param>
    public void verifyItemUomConversionsAndInitCache(ReqDemPlanForecastParameters _parameters, ReqDemPlanAllocationKeyFilterTmp _allocKeyFilter)
    {
        logger.startMonitoredTask(ReqDemPlanTaskCodes::VerifyAndCacheUnitOfMeasureConversions, "@DMP1133", curext());
        logger.setTaskRank(#DefaultTaskRank + 2);

        UnitOfMeasure forecastingUnitOfMeasure = UnitOfMeasure::findBySymbol(_parameters.ForecastingUnitOfMeasure);
        if (!forecastingUnitOfMeasure)
        {
            logger.taskFailed(strFmt("@DMP1023", "@DMP1036"));

            throw error(
                strFmt("@DMP1023", "@DMP1036"),
                '',
                SysInfoAction_Formrun::newFormnameDesc(formStr(ReqDemPlanForecastParameters), "@DMP1036"));
        }

        this.initializeAndValidateProductUoMConversionCache(_allocKeyFilter, forecastingUnitOfMeasure);

        logger.finishTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanItemUomConversionCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans <c>ReqProductForecastingUomConversionCache</c> table.
    /// </summary>
    public void cleanItemUomConversionCache()
    {
        ReqProductForecastingUomConversionCache cache;

        this.skipAll(cache);
        delete_from cache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqDemPlanDataProcessingHelper construct()
    {
        return new ReqDemPlanDataProcessingHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dbFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the field name in the database.
    /// </summary>
    /// <param name="_tableId">
    ///     The table ID.
    /// </param>
    /// <param name="_fieldId">
    ///     The field ID.
    /// </param>
    /// <returns>
    ///     The field name in the database.
    /// </returns>
    public static str dbFieldName(TableId _tableId, FieldId _fieldId)
    {
        DictField field = SysDictField::findFieldById(_tableId, _fieldId);

        if (!field)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return field.name(DbBackend::Sql);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dbTableName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the table name in the database.
    /// </summary>
    /// <param name="_tableId">
    ///     The table ID.
    /// </param>
    /// <returns>
    ///     The table name in the database.
    /// </returns>
    public static str dbTableName(TableId _tableId)
    {
        SysDictTable tbl = SysDictTable::newTableId(_tableId);

        if (!tbl)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return tbl.name(DbBackend::Sql);
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizeQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Normalizes given value to be within the user defined boundaries.
    /// </summary>
    /// <param name="qtyDecimal">
    ///     Input quantity.
    /// </param>
    /// <param name="currValue">
    ///     Key (e.g. date).
    /// </param>
    /// <param name="log">
    ///     The use logger flag.
    /// </param>
    /// <param name="_allocationKeyFilterTable">
    ///     An instance of the <c>ReqDemPlanAllocationKeyFilterTmp</c> table which holds the allocation key specific data.
    /// </param>
    /// <returns>
    ///     Normalized value.
    /// </returns>
    public real normalizeQty(System.Decimal qtyDecimal, str currValue, boolean log = false, ReqDemPlanAllocationKeyFilterTmp _allocationKeyFilterTable = null)
    {
        real    ret;
        boolean isAdjusted = false;

        //Real is implemented as decimal .Net type
        real qtyReal = qtyDecimal;

        if (qtyReal <= _allocationKeyFilterTable.MinValue)
        {
            isAdjusted = true;
            ret = _allocationKeyFilterTable.MinValue;
        }
        else if (qtyReal >= _allocationKeyFilterTable.MaxValue)
        {
            isAdjusted = true;
            ret = _allocationKeyFilterTable.MaxValue;
        }

        if (!isAdjusted)
        {
            return qtyReal;
        }
        else // the value had been outside of the boundaries and was adjusted
        {
            if (log)
            {
                logger.appendTaskDetailLog(strFmt("@DMP1204", currValue, ret));
            }

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinMaxDBValueReal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum allowed value (quantity) in DB
    /// </summary>
    /// <returns>
    /// The max allowed value
    /// </returns>
    /// <remarks>
    /// Min = -Max
    /// </remarks>
    public static real getMinMaxDBValueReal()
    {
        return power(10, 16) - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMinMaxField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the user entered min/max value is of correct type and format.
    /// </summary>
    /// <param name="_realName">
    ///     The real name of the algorithm parameter.
    /// </param>
    /// <param name="_parameterValue">
    ///     The value of the passed parameter.
    /// </param>
    /// <returns>
    ///     true if the field is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     To be called from validatefield methods on the corresponding tables.
    /// </remarks>
    public static boolean validateMinMaxField(ReqDemPlanAzureMlParameterName _realName, ReqDemPlanAzureMlParameterValue _parameterValue)
    {
        boolean ret = true;
        real    result;
        boolean validFormat = true;

        System.Globalization.CultureInfo invariantCulture = System.Globalization.CultureInfo::get_InvariantCulture();
        System.Globalization.NumberStyles decimalStyle = System.Globalization.NumberStyles::Float;
        #ReqDemPlanForecastAlgorithmParameters

        if (_realName == #MinimumSeriesValueName || _realName == #MaximumSeriesValueName)
        {
            validFormat = System.Decimal::TryParse(_parameterValue, decimalStyle, invariantCulture, byref result);
            if (!validFormat || result > ReqDemPlanDataProcessingHelper::getMinMaxDBValueReal() || result < -ReqDemPlanDataProcessingHelper::getMinMaxDBValueReal())
            {
                ret = checkFailed("@DMP1504");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAndValidateProductUoMConversionCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the unit of measure conversion caches for items with product level unit conversions.
    /// </summary>
    /// <param name="_allocKeyFilter">
    ///     A temporary table holding filter values for the items to be used.
    /// </param>
    /// <param name="_forecastingUnitOfMeasure">
    ///     The unit of measure used to forecast.
    /// </param>
    private void initializeAndValidateProductUoMConversionCache(
        ReqDemPlanAllocationKeyFilterTmp    _allocKeyFilter,
        UnitOfMeasure                       _forecastingUnitOfMeasure)
    {
        InventTable                             inventTable;
        InventTableModule                       inventTableModuleInvent;

        UnitOfMeasure                           itemInventoryUnitOfMeasure;

        UnitOfMeasureConversionCache            uomConversionCache;
        UnitOfMeasureConversionCache            uomProductConversionCache;
        UnitOfMeasureConversionCache            uomGenericConversionCache;
        ForecastItemAllocationLine              itemAllocationLine;

        boolean insertCacheRecord;

        ReqProductForecastingUomConversionCache cache;

        new SkipAOSValidationPermission().assert();

        RecordInsertList cacheInsertList = new RecordInsertList(tableNum(ReqProductForecastingUomConversionCache), true, true, true, true);
        this.skipAll(cache);

        // set current company on the temp table buffer, otherwise it uses the one that's last set on it
        // which is different than the current company
        _allocKeyFilter.company(curExt2dataareaid(tableNum(ReqDemPlanAllocationKeyFilterTmp)));

        while select ItemId, Product
            from inventTable
            // condition: item to be included in the forecast
            join UnitId from inventTableModuleInvent
                where  inventTableModuleInvent.ItemId       == inventTable.ItemId
                    && inventTableModuleInvent.ModuleType   == ModuleInventPurchSales::Invent
            join RecId, Symbol from itemInventoryUnitOfMeasure
                where  itemInventoryUnitOfMeasure.Symbol    == inventTableModuleInvent.UnitId
            outer join uomProductConversionCache
                where  uomProductConversionCache.Product            == inventTable.Product
                    && uomProductConversionCache.FromUnitOfMeasure  == itemInventoryUnitOfMeasure.RecId
                    && uomProductConversionCache.ToUnitOfMeasure    == _forecastingUnitOfMeasure.RecId
                    && uomProductConversionCache.ConversionExists   == NoYes::Yes
            outer join uomGenericConversionCache
                where  uomGenericConversionCache.Product            == 0
                    && uomGenericConversionCache.FromUnitOfMeasure  == itemInventoryUnitOfMeasure.RecId
                    && uomGenericConversionCache.ToUnitOfMeasure    == _forecastingUnitOfMeasure.RecId
                    && uomGenericConversionCache.ConversionExists   == NoYes::Yes
            exists join itemAllocationLine
                where itemAllocationLine.ItemId == inventTable.ItemId
            exists join firstOnly _allocKeyFilter
                where _allocKeyFilter.AllocateId == itemAllocationLine.AllocationId
            notexists join cache
                where cache.Product == inventTable.Product
        {
            insertCacheRecord = false;
            logger.incrementTaskRecordsProcessed();

            if (itemInventoryUnitOfMeasure.RecId == _forecastingUnitOfMeasure.RecId)
            {
                // no conversion needed
                uomConversionCache.RecId = 0;
                insertCacheRecord = true;
            }
            if (uomProductConversionCache)
            {
                uomConversionCache = uomProductConversionCache;
                insertCacheRecord = true;
            }
            else if (uomGenericConversionCache)
            {
                uomConversionCache = uomGenericConversionCache;
                insertCacheRecord = true;
            }
            else
            {
                UnitOfMeasureConverter uomConverter = UnitOfMeasureConverter::newFromConversionParameters(
                    itemInventoryUnitOfMeasure.RecId,
                    _forecastingUnitOfMeasure.RecId,
                    false,
                    inventTable.Product,
                    false);
                if (uomConverter.canValueBeConverted())
                {
                    uomConversionCache = uomConverter.cachedConversion();
                    insertCacheRecord = true;
                }
            }

            if (insertCacheRecord)
            {
                cache.Product = inventTable.Product;
                cache.UnitOfMeasureConversionCache = uomConversionCache.RecId;
                cacheInsertList.add(cache);
            }
            else
            {
                warning(strFmt("@DMP1042", _forecastingUnitOfMeasure.Symbol, itemInventoryUnitOfMeasure.Symbol, inventTable.ItemId, inventTable.company()));
            }

            cacheInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanVersionPlanForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cleans up the data for the particular version in the ReqDemPlanForecast table.
    /// </summary>
    /// <param name="_parameters">
    ///     The container with parameters - [version to clean, current company, cross company flag]
    internal static void cleanVersionPlanForecast(container _parameters)
    {
        RefRecId version = conPeek(_parameters, 1);
        str company = conPeek(_parameters, 2);
        boolean crossCompanyFlag = conPeek(_parameters, 3);        
        int infologLineTry = infologLine();

        try
        {                    
            if (crossCompanyFlag)
            {
                ReqDemPlanForecast::cleanVersionSync(version, true);
            }
            else
            {
                changecompany(company)
                {
                    ReqDemPlanForecast::cleanVersionSync(version, false);
                }
            }
        }
        #ReqDemPlanCatchRetryWithoutPrepareTransientSqlConnectionError(ReqDemPlanCreateForecastService::isTransientSqlConnectionErrorRetryEnabled(), infologLineTry);            
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanVersionPlanAggregatedForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cleans up the data for the particular version in the ReqDemPlanAggregatedForecast table.
    /// </summary>
    /// <param name="_parameters">
    ///     The container with parameters - [version to clean, current company, cross company flag]
    internal static void cleanVersionPlanAggregatedForecast(container _parameters)
    {
        RefRecId version = conPeek(_parameters, 1);
        str company = conPeek(_parameters, 2);
        boolean crossCompanyFlag = conPeek(_parameters, 3);
        int infologLineTry = infologLine();

        try
        {                    
            if (crossCompanyFlag)
            {
                ReqDemPlanAggregatedForecast::cleanVersion(version, true);
            }
            else
            {
                changecompany(company)
                {
                    ReqDemPlanAggregatedForecast::cleanVersion(version, false);
                }
            }
        }
        #ReqDemPlanCatchRetryWithoutPrepareTransientSqlConnectionError(ReqDemPlanCreateForecastService::isTransientSqlConnectionErrorRetryEnabled(), infologLineTry);            
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldConcat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the set expression which concatenates a list of fields.
    /// </summary>
    /// <param name = "_tableId">The table id which fields needs to concatenate.</param>
    /// <param name = "_sourceFields">The list of fields to concatenate.</param>
    /// <param name = "_separator">The separator to use between values.</param>
    /// <param name = "_emptyValueReplacement">The text used as a replacement for empty field value.</param>
    /// <returns>The set expression.</returns>
    internal static str addFieldConcat(TableId _tableId, List _sourceFields, str _separator = '', str _emptyValueReplacement = '')
    {
        SqlSystem sqlSystem = new SqlSystem();
        str expression = '';

        ListEnumerator enumerator = _sourceFields.getEnumerator();

        while (enumerator.moveNext())
        {
            if (expression)
            {
                // (CASE when AllocationKey = '' then '--' else AllocationKey end)
                expression += ' + ' + sqlSystem.sqlLiteral(_separator) + ' + ';
            }
            expression += strFmt('(CASE WHEN %1 = \'\' THEN %2 ELSE %1 END)',
                ReqDemPlanDataProcessingHelper::dbFieldName(_tableId, enumerator.current()),
                sqlSystem.sqlLiteral(_emptyValueReplacement));
        }

        return expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearReqDemPlanAllocationKeyFilterTmp</Name>
				<Source><![CDATA[
    private void clearReqDemPlanAllocationKeyFilterTmp(ReqDemPlanAllocationKeyFilterTmp _allocationKeyFilterTable)
    {
        ttsbegin;
        delete_from _allocationKeyFilterTable;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countReqDemPlanAllocationKeyFilterTmp</Name>
				<Source><![CDATA[
    private int64 countReqDemPlanAllocationKeyFilterTmp(ReqDemPlanAllocationKeyFilterTmp _allocationKeyFilterTable)
    {
        select count(RecId) from _allocationKeyFilterTable;
        return _allocationKeyFilterTable.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>