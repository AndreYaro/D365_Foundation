<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UserRequestWorkflowApproval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>UserRequestWorkflowApproval</c> class handles the event for the user request approval
/// workflow element.
/// </summary>
/// <remarks>
/// Inherits from the <c>WorkflowCancelManager</c> class to support reject/deny. This causes the
/// workflow to cancel so that the user management task is not created.
/// </remarks>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
[SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflowApproval instead.', false, 30\06\2020)]
class UserRequestWorkflowApproval extends WorkflowCancelManager implements
    WorkflowElementStartedEventHandler,
    WorkflowElementCanceledEventHandler,
    WorkflowElementDeniedEventHandler,
    WorkflowElementCompletedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Cancels a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    A value that obtains the workflow context of the workflow item that fired the event.
    /// </param>
    [SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflowApproval instead.', false, 30\11\2017)]
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        UserRequest request = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        request.workflowCanceled();
        request.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    [SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflowApproval instead.', false, 30\11\2017)]
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        UserRequest request = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        request.workflowApprovalApproved();
        request.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when a request is denied.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// The workflow context of the workflow item that fired the event.
    /// </param>
    [SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflowApproval instead.', false, 30\11\2017)]
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        UserRequest request = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        request.workflowApprovalDenied();
        request.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the started event for the workflow approval.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    A value that obtains the workflow context of the workflow item that fired the event.
    /// </param>
    [SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflowApproval instead.', false, 30\11\2017)]
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        UserRequest request = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        request.workflowApprovalPending();
        request.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the user request document for the workflow reject event.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the workflow reject event.
    /// </param>
    [SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflowApproval instead.', false, 30\11\2017)]
    public void updateDocument(Args _args)
    {
        UserRequest request;

        if (_args.record() is UserRequest)
        {
            request = UserRequest::find(_args.record().RecId, true);

            ttsbegin;
            request.workflowApprovalDenied();
            request.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [SysObsolete('This class will be deleted in a future release. Use SysUserRequestWorkflowApproval instead.', false, 30\11\2017)]
    public static void main(Args _args)
    {
        UserRequestWorkflowApproval workflowApprovalDeny = new UserRequestWorkflowApproval();

        workflowApprovalDeny.run(_args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<IsObsolete>Yes</IsObsolete>
</AxClass>