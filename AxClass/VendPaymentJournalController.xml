<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPaymentJournalController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendPaymentJournalController</c> class is a controller class for the Microsoft SQL Server
/// Reporting Services reporting.
/// </summary>
class VendPaymentJournalController extends SrsReportRunController implements BatchRetryable
{
    private LedgerJournalTrans ledgerJournalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        VendPaymentJournalContract vendPaymentJournalContract;
        vendPaymentJournalContract = this.parmReportContract().parmRdpContract();
        this.setRange(vendPaymentJournalContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes the report contract class as an argument to pass the record ID.
    /// </summary>
    /// <param name="_vendPaymentJournalContract">
    /// The <c>_vendPaymentJournalContract</c> object to pass as an argument.
    /// </param>
    public void setRange(VendPaymentJournalContract _vendPaymentJournalContract)
    {
        Query query;
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange queryBuildRange;

        if (this.parmArgs() == null)
        {
            return;
        }

        if (this.parmArgs().record() && (this.parmArgs().record().TableId == tableNum(LedgerJournalTrans)))
        {
            ledgerJournalTrans = this.parmArgs().record();
        }

        if (_vendPaymentJournalContract)
        {
            _vendPaymentJournalContract.parmLedgerJournalTransRecId(ledgerJournalTrans.RecId);
        }

        query = this.getFirstQuery();

        queryBuildDataSource = query.dataSourceTable(tableNum(LedgerJournalTrans));

        // If the LedgerJournalTrans datasource does not exist on the report, create it.
        if (!queryBuildDataSource)
        {
            queryBuildDataSource = query.addDataSource(tableNum(LedgerJournalTrans));
        }

        queryBuildRange = queryBuildDataSource.findRange(fieldNum(LedgerJournalTrans, Invoice));
        if (!queryBuildRange)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(LedgerJournalTrans, Invoice));
        }
        queryBuildRange.status(RangeStatus::Hidden);

        queryBuildRange = queryBuildDataSource.findRange(fieldNum(LedgerJournalTrans, MarkedInvoice));
        if (!queryBuildRange)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(LedgerJournalTrans, MarkedInvoice));
        }
        queryBuildRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendPaymentJournalController controller = new VendPaymentJournalController();
        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(VendPaymentJournal, Report));
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>