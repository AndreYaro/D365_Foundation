<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPackingSlipController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesPackingSlipController</c> class is the helper class for the associated Microsoft SQL
/// Server Reporting Services report.
/// </summary>
public class SalesPackingSlipController extends TradeDocumentReportController implements BatchRetryable
{
    SalesPackingSlipJournalPrint        salesPackingSlipJournalPrint;
    CustPackingSlipVersion              custPackingSlipVersion;
    CustPackingSlipJour                 custPackingSlipJour;
    // <GTH>
    boolean                             runOnBlockMode_TH;
    // </GTH>
    // <GBR>
    #NFPrinting_BR
    FiscalDocumentContract_BR       fiscalDocumentContract;
    FiscalDocument_BR               fiscalDocument;
    Map                             custPackingSlipVersionMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertToLatestVersionJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the list of journals to the list of latest versions.
    /// </summary>
    /// <param name="_sourceJournalList">
    /// The <c>RecordSortedList</c> object to convert.
    /// </param>
    /// <remarks>
    /// If report data already exist for a journal record then the jornal will be added to dataReadyJournalList record list.
    /// </remarks>
    protected void convertToLatestVersionJournalList(RecordSortedList _sourceJournalList)
    {
        CustPackingSlipJour     localCustPackingSlipJour;

        if (_sourceJournalList && _sourceJournalList.first(localCustPackingSlipJour))
        {
            if (SalesPackingSlipPrintOrderFlight::instance().isEnabled())
            {
                custPackingSlipVersionMap = new Map(Types::Int64, Types::Record);
            }

            do
            {
                if (SalesPackingSlipPrintOrderFlight::instance().isEnabled())
                {
                    
                    if (localCustPackingSlipJour.isProforma() && SalesPackingSlipHeaderTmp::existJourRecId(localCustPackingSlipJour.RecId))
                    {
                        if (!dataReadyJournalList)
                        {
                            dataReadyJournalList = new RecordSortedList(tableNum(CustPackingSlipJour));
                            dataReadyJournalList.sortOrderFromContainer(FormLetterSortingParameters::formLetterSorting(tableNum(CustPackingSlipJour), fieldNum(CustPackingSlipJour, RecId)));                          
                        }
                        dataReadyJournalList.ins(localCustPackingSlipJour);
                    }
                    else
                    {
                        CustPackingSlipVersion localCustPackingSlipVersion = CustPackingSlipVersion::findLatest(localCustPackingSlipJour.RecId);
                        if (localCustPackingSlipVersion)
                        {
                            if (!journalList)
                            {
                                journalList = new RecordSortedList(tableNum(CustPackingSlipJour));
                                journalList.sortOrderFromContainer(FormLetterSortingParameters::formLetterSorting(tableNum(CustPackingSlipJour), fieldNum(CustPackingSlipJour, RecId)));                                
                            }
                            journalList.ins(localCustPackingSlipJour);

                            custPackingSlipVersionMap.add(localCustPackingSlipJour.RecId, localCustPackingSlipVersion);
                        }
                    }
                }
                else
                {
                    if (localCustPackingSlipJour.isProforma() && SalesPackingSlipHeaderTmp::existJourRecId(localCustPackingSlipJour.RecId))
                    {
                        if (!dataReadyJournalList)
                        {
                            dataReadyJournalList = new RecordSortedList(tableNum(CustPackingSlipJour));
                            dataReadyJournalList.sortOrder(fieldNum(CustPackingSlipJour, RecId));
                        }
                        dataReadyJournalList.ins(localCustPackingSlipJour);
                    }
                    else
                    {
                        CustPackingSlipVersion localCustPackingSlipVersion = CustPackingSlipVersion::findLatest(localCustPackingSlipJour.RecId);
                        if (localCustPackingSlipVersion)
                        {
                            if (!journalList)
                            {
                                journalList = new RecordSortedList(tableNum(CustPackingSlipVersion));
                                journalList.sortOrder(fieldNum(CustPackingSlipVersion, RecId));
                            }
                            journalList.ins(localCustPackingSlipVersion);
                        }
                    }
                }
            }
            while (_sourceJournalList.next(localCustPackingSlipJour));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogShow</Name>
				<Source><![CDATA[
    protected void dialogShow()
    {
        if (useReportViewerForm && runOnBlockMode_TH)
        {
            if (dialog is SysOperationDialog)
            {
                SysOperationDialog sysOperationDialog = dialog as SysOperationDialog;
                sysOperationDialog.run();
            }
            else
            {
                FormRun formRun = dialog as formRun;
                formRun.run();
            }
            this.dialogPostRun();
            dialog.wait();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report header title.
    /// </summary>
    /// <returns>
    /// The report header title.
    /// </returns>
    public str  documentTitle()
    {
        str documentTitle;

        if (printCopyOriginal ==  PrintCopyOriginal::Copy)
        {
            if (custPackingSlipJour.isProforma())
            {
                documentTitle = literalStr("@SYS70796");
            }
            else
            {
                documentTitle = literalStr("@SYS24430");
            }
        }
        else
        {
            if (custPackingSlipJour.isProforma())
            {
                documentTitle = literalStr("@SYS12874");
            }
            else
            {
                documentTitle = literalStr("@SYS11549");
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentIdentifier</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected str documentIdentifier()
    {
        return custPackingSlipJour.PackingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReportExceptions</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean handleReportExceptions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextTableId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected TableId reportExceptionContextTableId()
    {
        return custPackingSlipJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextRecordId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected RecId reportExceptionContextRecordId()
    {
        return custPackingSlipJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDataReadyJournal</Name>
				<Source><![CDATA[
    protected boolean getFirstDataReadyJournal()
    {
        return dataReadyJournalList.first(custPackingSlipJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstJournal</Name>
				<Source><![CDATA[
    protected boolean getFirstJournal()
    {
        if (SalesPackingSlipPrintOrderFlight::instance().isEnabled())
        {
            if (journalList.first(custPackingSlipJour))
            {
                custPackingSlipVersion = custPackingSlipVersionMap.lookup(custPackingSlipJour.RecId);
                return true;
            }
        }
        else
        {
            if (journalList.first(custPackingSlipVersion))
            {
                custPackingSlipJour = CustPackingSlipJour::findRecId(custPackingSlipVersion.CustPackingSlipJour);
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextDataReadyJournal</Name>
				<Source><![CDATA[
    protected boolean getNextDataReadyJournal()
    {
        return dataReadyJournalList.next(custPackingSlipJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextJournal</Name>
				<Source><![CDATA[
    protected boolean getNextJournal()
    {
        if (SalesPackingSlipPrintOrderFlight::instance().isEnabled())
        {
            if (journalList.next(custPackingSlipJour))
            {
                custPackingSlipVersion = custPackingSlipVersionMap.lookup(custPackingSlipJour.RecId);
                return true;
            }
        }
        else
        {
            if (journalList.next(custPackingSlipVersion))
            {
                custPackingSlipJour = CustPackingSlipJour::findRecId(custPackingSlipVersion.CustPackingSlipJour);
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the journal record that is be passed to the contract.
    /// </summary>
    /// <returns>
    /// The record ID of the journal record.
    /// </returns>
    protected RecId getRecordId()
    {
        // <GBR>
        if (BrazilParameters::isEnabled() && fiscalDocument)
        {
            return fiscalDocument.RecId;
        }
        // </GBR>

        if (dataReady)
        {
            return custPackingSlipJour.RecId;
        }
        else
        {
            return custPackingSlipVersion.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record table ID of the journal record that is to be passed to the contract.
    /// </summary>
    /// <returns>
    /// The table ID of the journal record.
    /// </returns>
    protected TableId getTableId()
    {
        // <GBR>
        if(BrazilParameters::isEnabled() && fiscalDocument)
        {
            return tableNum(FiscalDocument_BR);
        }
        // </GBR>

        if (dataReady)
        {
            return tableNum(CustPackingSlipJour);
        }
        else
        {
            return tableNum(CustPackingSlipVersion);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (  classIdGet(this.parmArgs().caller()) == classNum(SalesPackingSlipJournalPrint))
        {
            // Initiate from caller.
            salesPackingSlipJournalPrint = this.parmArgs().caller();
        }

        this.initializeJournalLists(this.parmArgs());

        formLetterReport = FormLetterReport::construct(this.printMgmtDocumentType());

        formLetterReport.parmPrintType(printCopyOriginal);

        if (salesPackingSlipJournalPrint)
        {
            // Initialize form letter print settings.
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesPackingSlipJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesPackingSlipJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(salesPackingSlipJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PrintMgmtDocumentType</c>.
    /// </summary>
    /// <returns>
    /// The <c>PrintMgmtDocumentType</c> instance.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::SalesOrderPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes journal list.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> Object.
    /// </param>
    /// <remarks>
    /// The report can be opened from multiple sources. This will result in either a <c>CustPackingSlipJour</c>, <c>CustPackingSlipVersion</c> buffer, or a <c>RecordSortedList</c> of <c>CustPackingSlipJour</c> buffers.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// An invalid buffer was parsed as argument.
    /// </exception>
    public void initializeJournalLists(Args _args)
    {
        Common              common = _args.record();

        if (common)
        {

            switch (common.TableId)
            {
                case tableNum(CustPackingSlipVersion):
                    if (SalesPackingSlipPrintOrderFlight::instance().isEnabled())
                    {
                        CustPackingSlipVersion  localCustPackingSlipVersion = _args.record();
                        CustPackingSlipJour     localCustPackingSlipJour = CustPackingSlipJour::findRecId(localCustPackingSlipVersion.CustPackingSlipJour);

                        custPackingSlipVersionMap = new Map(Types::Int64, Types::Record);
                        custPackingSlipVersionMap.add(localCustPackingSlipJour.RecId, localCustPackingSlipVersion);
                        journalList = FormLetter::createJournalListCopy(localCustPackingSlipJour);
                    }
                    else
                    {
                        RecordSortedList argJourList = FormLetter::createJournalListCopy(common);

                        journalList = argJourList;
                    }
                    break;
                case tableNum(CustPackingSlipJour):
                    RecordSortedList argJourList = FormLetter::createJournalListCopy(common);

                    this.convertToLatestVersionJournalList(argJourList);
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            this.convertToLatestVersionJournalList(_args.object());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    protected void output()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().documentReport().output(this.reportExceptionContextTableId(), this.reportExceptionContextRecordId()))
        {
            if (custPackingSlipJour.isProforma() || custPackingSlipVersion.isArchived() || !custPackingSlipJour.isCanceled())  //only print not cancelled reports
            {
                formLetterReport.loadPrintSettings(custPackingSlipJour, custPackingSlipJour.salesTable(), custPackingSlipJour.LanguageId);
                this.parmReportContract().parmRdlContract().parmLanguageId(custPackingSlipJour.LanguageId);
                this.parmReportContract().parmRdlContract().parmLabelLanguageId(custPackingSlipJour.LanguageId);
                
                PrintMgmtPrintSettingDetail printSettingDetail = this.printSettingDetail();

                if (printSettingDetail)
                {
                    formLetterReport.parmReportRun().loadSettingDetail(printSettingDetail);
                }

                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSettingDetail</Name>
				<Source><![CDATA[
    protected PrintMgmtPrintSettingDetail printSettingDetail()
    {
        PrintMgmtPrintSettingDetail printSettingDetail;

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            select fiscalDocument
                where fiscalDocument.RefRecId == custPackingSlipJour.RecId
                    && fiscalDocument.RefTableId == custPackingSlipJour.TableId;

            if (fiscalDocument)
            {
                if (formLetterReport.moveNextPrintSetting())
                {
                    printSettingDetail = formLetterReport.getCurrentPrintSetting();

                    if (printSettingDetail.parmReportFormatName() == PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesOrderPackingSlip).getDefaultReportFormat())
                    {
                        // Retrieves the appropiate SSRS Report name to show an invoice (FiscalDocument_BR, EFDocDANFE_BR, RPS_BR)
                        this.parmReportName(fiscalDocument.getReportName());

                        // Change the default report to Brazilian Format
                        printSettingDetail.parmReportFormatName(this.parmReportName());
                    }
                    else
                    {
                        // Uses the SSRS Report name configured by user on Print Management
                        this.parmReportName(printSettingDetail.parmReportFormatName());
                    }

                    this.resetReportDataContract();
                }
            }
        }
        // </GBR>

        return printSettingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunOnBlockMode_TH</Name>
				<Source><![CDATA[
    protected boolean parmRunOnBlockMode_TH(boolean _runOnBlockMode_TH = runOnBlockMode_TH)
    {
        runOnBlockMode_TH = _runOnBlockMode_TH;
        return runOnBlockMode_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        // <GBR>
        FiscalEstablishment_BR fiscalEstablishment;
        // </GBR>
        // <GTH>
        // </GTH>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            select RecId from fiscalDocument
                where fiscalDocument.RefRecId == custPackingSlipJour.RecId
                && fiscalDocument.RefTableId == custPackingSlipJour.TableId;

            if (fiscalDocument)
            {
                fiscalDocumentContract = this.parmReportContract().parmRdpContract();

                select firstonly fiscalDocument
                    where fiscalDocument.RefRecId   == custPackingSlipJour.RecId
                       && fiscalDocument.RefTableId == custPackingSlipJour.TableId
                    join efDocPrePrintedSecurityForm, efDocEnvironment from fiscalEstablishment
                    where fiscalEstablishment.FiscalEstablishmentId == fiscalDocument.FiscalEstablishment;

                fiscalDocumentContract.parmRecordId(fiscalDocument.RecId);
                fiscalDocumentContract.parmPrePrintedSecurityForm(fiscalEstablishment.efDocPrePrintedSecurityForm);
                fiscalDocumentContract.parmMaxDescSizeAdditionaInfFirstPage(#MaxDescSizeAdditionaInfFirstPage);
                fiscalDocumentContract.parmProForma(custPackingSlipJour.isProforma());

                if (fiscalEstablishment.efDocEnvironment == EFDocEnvironment_BR::Testing)
                {
                    fiscalDocumentContract.parmEFDocEnvironment(true);
                }
                else
                {
                    fiscalDocumentContract.parmEFDocEnvironment(false);
                }

                if (fiscalDocument.isElectronic())
                {
                    fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxDescSizeAdditionalInformation);
                }
                else
                {
                    fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxNFMemoLines * #MaxNFMemoDescriptionSize);
                }
            }
        }
        // </GBR>
        super();

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled()
            && salesPackingSlipJournalPrint
            && salesPackingSlipJournalPrint.parmDocuSetCode())
        {
            SalesPackingSlipContract salesPackingSlipContract = contract;

            salesPackingSlipContract.parmPrintHeader(salesPackingSlipJournalPrint.parmPrintHeader());
            salesPackingSlipContract.parmProdType(salesPackingSlipJournalPrint.parmProdType());
            salesPackingSlipContract.parmLocation(salesPackingSlipJournalPrint.parmLocation());
            salesPackingSlipContract.parmMiscText(salesPackingSlipJournalPrint.parmMiscText());
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetReportDataContract</Name>
				<Source><![CDATA[
    private void resetReportDataContract()
    {
        contractsInitialized = false;
        this.parmReportRun(null);
        this.parmReportContract(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataContractRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>CustPackingSlipVersion</c> record that is based on a <c>CustPackingSlipJour</c> table
    /// buffer.
    /// </summary>
    /// <param name="_common">
    /// A record in the <c>CustPackingSlipJour</c> table.
    /// </param>
    protected void setDataContractRecord(Common _common)
    {
        custPackingSlipVersion = CustPackingSlipVersion::findLatest(_common.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesPackingSlipController construct()
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes(
                    [ [#isoIT, GlobalizationConstants::FeatureReferenceIT00020] ],
                    funcName()
                );

        return new SalesPackingSlipController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        // <GTH>
        // print document set
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            SalesPackingSlipController::printDocumentSet(_args);
        }
        else
        {
        // </GTH>
            SalesPackingSlipController::doMainJob(_args);
        // <GTH>
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>doMainJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// General method to initailze the controller, set the print management, assign parameter values and run the SRS report.
    /// </summary>
    /// <param name = "_args">The <c>Args</c> object.</param>
    protected static void doMainJob(Args _args)
    {
        SrsReportRunController formLetterController = SalesPackingSlipController::construct();

        SalesPackingSlipController controller = formLetterController;
        controller.initArgs(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesOrderPackingSlip).getDefaultReportFormat());

        if (classIdGet(_args.caller()) == classNum(SalesPackingSlipJournalPrint))
        {
            SalesPackingSlipController::subscribeToRenderingCompleted(formLetterController);
        }

        formLetterController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribeToRenderingCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes a method to handle the <c> SrsReportRunController </c> renderingCompleted.
    /// </summary>
    /// <param name = "_formLetterController">The <c>SrsReportRunController </c> instance.</param>
    protected static void subscribeToRenderingCompleted(SrsReportRunController _formLetterController)
    {
        _formLetterController.renderingCompleted += eventhandler(SalesPackingSlipJournalPrint::renderingCompleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDataContract</Name>
				<Source><![CDATA[
    public static SrsReportDataContract newDataContract(Args _args)
    {
        SalesPackingSlipController formLetterController = SalesPackingSlipController::construct();

        if (_args.dataset() != tableNum(CustPackingSlipJour))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            formLetterController.initDataContract(_args, ssrsReportStr(FiscalDocument_BR, Report));
        }
        else
        {
        // </GBR>
        formLetterController.initDataContract(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesOrderPackingSlip).getDefaultReportFormat());
        // <GBR>
        }
        // </GBR>
        return formLetterController.parmReportContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints document set.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void printDocumentSet(Args _args)
    {
        // <GTH>
        SalesPackingSlipController          formLetterController = SalesPackingSlipController::construct();
        SalesPackingSlipJournalPrint        salesPackingSlipJournalPrintLocal;
        TaxUnrealizedDocuSetLine            docuSetLineLocal;
        TaxUnrealizedDocuSetTable           docuSetTableLocal;
        boolean                             firstSet = true;
        TaxUnrealizedDocuId                 docuCode;
        boolean                             printDocuSet = true;
        boolean                             printViaPackingSlipJournalForm = classIdGet(_args.caller()) == classNum(SalesPackingSlipJournalPrint);
        boolean                             usePrintManagement = _args.parmEnum() == PrintCopyOriginal::OriginalPrint;

        // true if print report in packing slip posting, false if print report via packing slip journal form.
        if (printViaPackingSlipJournalForm)
        {
            salesPackingSlipJournalPrintLocal = _args.caller();
            docuCode = salesPackingSlipJournalPrintLocal.parmDocuSetCode();
        }
        else
        {
            SalesDocumentSetSelector docuSetSelector = new SalesDocumentSetSelector();
            printDocuSet = docuSetSelector.run();

            if (usePrintManagement)
            {
                printDocuSet = docuSetSelector.getPrintDocu();
            }

            if (printDocuSet
                && (docuSetSelector.getDocuCode()))
            {
                docuCode = docuSetSelector.getDocuCode();
                salesPackingSlipJournalPrintLocal = SalesPackingSlipJournalPrint::construct();
                salesPackingSlipJournalPrintLocal.parmDocuSetCode(docuCode);
            }
        }

        if (usePrintManagement &&
            !printViaPackingSlipJournalForm && 
            !printDocuSet )
        {
            SalesPackingSlipController::doMainJob(_args);
        }
        else
        {
            if (printDocuSet)
            {
                formLetterController.initArgs(_args, ssrsReportStr(SalesPackingSlip, ReportTH));
                formLetterController.parmShowDialog(false);
                formLetterController.parmRunOnBlockMode_TH(true);
                formLetterController.startOperation();
            }
        
            // true to print document set.
            if (docuCode)
            {
                while select PrintHeader from docuSetLineLocal
                    order by docuSetLineLocal.RecId
                    join ProdType, Location, MiscText from docuSetTableLocal
                        where docuSetLineLocal.TaxUnrealizedDocuSetTable    == docuSetTableLocal.RecId
                            && docuSetTableLocal.Code                       == docuCode
                {
                    if (firstSet)
                    {
                        salesPackingSlipJournalPrintLocal.parmProdType(docuSetTableLocal.ProdType);
                        salesPackingSlipJournalPrintLocal.parmLocation(docuSetTableLocal.Location);
                        salesPackingSlipJournalPrintLocal.parmMiscText(docuSetTableLocal.MiscText);
                        firstSet = false;
                    }
                    salesPackingSlipJournalPrintLocal.parmPrintHeader(docuSetLineLocal.PrintHeader);
                    _args.caller(salesPackingSlipJournalPrintLocal);

                    formLetterController = SalesPackingSlipController::construct();
                    formLetterController.initArgs(_args, ssrsReportStr(SalesPackingSlip, ReportTH));
                    formLetterController.parmShowDialog(false);
                    formLetterController.startOperation();
                }
            }
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>