<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventConsistencyCheckInventDimHash</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventConsistencyCheckInventDimHash</c> class is identifying and correcting records that have reference to <c>InventDim</c> records that are incorrectly hashed.
/// </summary>
public class InventConsistencyCheckInventDimHash extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(LedgerBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDimIdFieldReferenceProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>InventDimIdFieldReferenceProvider</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>InventDimIdFieldReferenceProvider</c> class.
    /// </returns>
    protected InventDimIdFieldReferenceProvider InventDimIdFieldReferenceProvider()
    {
        return InventDimIdFieldReferenceProvider::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies and potentially updates record that are referencing the incorrect hashed <c>InventDim</c> records.
    /// </summary>
    public void run()
    {
        Counter     numberOfIncorrectDuplicateHashedDims, correctedRecords;

        CheckFix checkFix = this.checkFix();

        [numberOfIncorrectDuplicateHashedDims, correctedRecords] = InventInventDimWrongHashDupCleanUp::newFromParameters(checkFix, this.InventDimIdFieldReferenceProvider()).run();

        if (checkFix == CheckFix::Fix)
        {
            this.updateCorrected(correctedRecords);
        }

        if (numberOfIncorrectDuplicateHashedDims)
        {
            info(strFmt("@SYP5070058"
                    , SysDictMenu::newMenuItem(menuitemActionStr(InventUnusedDimCleanUp), MenuItemType::Action).label()));
        }

        if (InventDim::useHash3())
        {
            info(strFmt("@SYP5070059"
                    , classStr(InventDimUniquenessEnabling)
                    , fieldId2pname(tableNum(InventDim), fieldNum(InventDim,SHA3HashHex))));
        }
        else
        {
            info(strFmt("@SYP5070059"
                        , classStr(InventDimUniquenessEnabling)
                        , fieldId2pname(tableNum(InventDim), fieldNum(InventDim,SHA1HashHex))));
        }

        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(InventConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventConsistencyCheckInventDimHash construct()
    {
        return new InventConsistencyCheckInventDimHash();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS53630";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@SYP5070060";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>