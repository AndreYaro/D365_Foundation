<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RunBaseMultiParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>RunBaseMultiParm</c> class enables the use of fields in a parameter table as variables
///    instead of as packed variables, as with a <see cref="T:RunBase" />.
/// </summary>
/// <remarks>
///    By inheriting this class, it is possible to use fields in a parameter table as variables instead of
///    as packed variables, as with a <c>RunBase</c> class. Instead of variables, a <c>parmId</c> is
///    packed, which is a unique reference to a record in a parameter table. The dialog of the class will
///    then be a record in a form that is created in the Application Object Tree (AOT). The <c>run</c>
///    method of this class should normally update inheritances of the <see cref="T:UpdateBase" />. The
///    class contains variables in which information about what is created, updated, and deleted can be
///    stored.
/// </remarks>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
abstract class RunBaseMultiParm extends RunBaseBatch implements RunbaseRecsMapable
{
    ParmId                  parmId;

    Map                     updatedRecs;
    Map                     createdRecs;
    Map                     deletedRecs;

    boolean                 useAllUsersSysLastValue;
    boolean                 usedAllUsersSysLastValue;

    #if.never
    common standarParmxxx
        #endif

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        ParmId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addUpdateRec</Name>
				<Source><![CDATA[
    void addUpdateRec(Common buffer)
    {
        if (!updatedRecs)
        {
            updatedRecs = new Map(typeName2Type(extendedTypeStr(recId)),Types::Record);
        }

        updatedRecs.insert(buffer.RecId,buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    void apply(ParmBuffer parmBuffer)
    {
        ParmBuffer selectParmBuffer = this.applyInternal(parmBuffer);

        FormDataUtil::getFormDataSource(parmBuffer).research();
        FormDataUtil::getFormDataSource(parmBuffer).findRecord(selectParmBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyInternal</Name>
				<Source><![CDATA[
    private ParmBuffer applyInternal(ParmBuffer _parmBuffer)
    {
        ParmBuffer  selectParmBuffer = this.defaultParmBuffer();

        ttsbegin;

        select forupdate selectParmBuffer where
                                selectParmBuffer.RecId == _parmBuffer.RecId;

        if (selectParmBuffer)
        {
            selectParmBuffer.delete();

            this.initParmBuffer(selectParmBuffer);
            selectParmBuffer.insert();
        }

        ttscommit;

        return selectParmBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    boolean checkBuffer(Common common)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLateSelection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if <c>LateSelection</c> parameters are correct
    /// </summary>
    /// <param name="_parmUpdate">
    ///    The <c>parmUpdate</c> that should be validated. By default the <c>parmUpdate</c> method is used to
    ///    get the <c>parmUpdate</c>; optional.
    /// </param>
    /// <returns>
    ///    true if validation is ok or if <c>LateSelection</c> is not used; otherwise, false.
    /// </returns>
    protected boolean checkLateSelection(ParmUpdate _parmUpdate = this.parmUpdate())
    {
        boolean ret = true;

        if (_parmUpdate.RecId && _parmUpdate.LateSelection && !_parmUpdate.LateSelectionQuery)
        {
            ret = checkFailed("@SYS72782");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTableWithQueryResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new Parm buffer records based on the selection from the query.
    /// </summary>
    /// <param name = "_parmBuffer">Table buffer to apply changes to.</param>
    /// <param name = "_runBaseMultiParm">An instance of the <c>RunBaseMultiParm</c> class.</param>
    /// <param name = "_parmId">The parameter ID.</param>
    /// <param name = "_queryRun">Query to get results from.</param>
    protected void populateTableWithQueryResults(ParmBuffer _parmBuffer, RunBaseMultiParm _runBaseMultiParm, ParmId _parmId, QueryRun _queryRun)
    {
        while (_queryRun.next())
        {
            try
            {
                if (this.checkBuffer(_queryRun.getNo(1)))
                {
                    ttsbegin;
                    _parmBuffer.Linenum++;
                    this.insert(_queryRun.getNo(1), _parmBuffer);
                    this.pmfInsertPost(_queryRun.getNo(1), _parmBuffer);
                    ttscommit;
                }
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>choose</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects and inserts records based on the query returned by the query method.
    /// </summary>
    /// <remarks>
    ///    If late selection is used, the query is packed and stored in the <c>ParmUpdate</c> table and no
    ///    records are created.
    /// </remarks>
    protected void choose()
    {
        SysQueryRun        qr;
        ParmBuffer      parmBuffer = this.defaultParmBuffer();
        ParmUpdate      parmUpdate = this.parmUpdate();
        
        if (ProdMultiReportFinishedLateSelectionQueryBeUsedFlight::instance().isEnabled())
        {
            qr = this.chooseUsedQueryRun();
        }
        else
        {
            qr = new SysQueryRun(this.query());        
        }

        if (! qr.prompt())
            return;

        //if lateselection is used then store the query so parmTables can be created later
        if (this.shouldLateSelectionBePerformed())
        {
            ttsbegin;
            parmUpdate = this.parmUpdate(true);
            parmUpdate.LateSelectionQuery = qr.query().pack();
            parmUpdate.update();
            ttscommit;
        }

        if (this.shouldTableBePopulated())
        {
            parmBuffer.Linenum = this.nextLineNum();
            this.populateTableWithQueryResults(parmBuffer, this, parmId, qr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseFromQueryAndInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects and inserts records based on the <paramref name="_query" />.
    /// </summary>
    /// <param name="_query">
    ///    The query that is used for record selection.
    /// </param>
    protected void chooseFromQueryAndInsert(Query _query)
    {
        QueryRun        qr;
        ParmBuffer      parmBuffer = this.defaultParmBuffer();

        qr = new QueryRun(_query);

        parmBuffer.Linenum = this.nextLineNum();

        while (qr.next())
        {
            try
            {
                ttsbegin;
                if (this.checkBuffer(qr.getNo(1)))
                {
                    parmBuffer.Linenum++;
                    this.insert(qr.getNo(1),parmBuffer);
                }

                ttscommit;
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a way to clean up after a dialog box has been canceled.
    /// </summary>
    protected void cleanupDialog()
    {
        super();

        #if.never
        parmxxx::deleteParameters(this.parmId());
        #endif
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    abstract ParmBuffer defaultParmBuffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the default <c>ParmUpdate</c>.
    /// </summary>
    /// <returns>
    ///    The default <c>parmUpdate</c>. The default value is null, so subclasses need to override this
    ///    method if <c>ParmUpdates</c> should be used.
    /// </returns>
    /// <remarks>
    ///    The <c>ParmUpdate</c> is used to hold parameter values that are common for all updates, for
    ///    example, <c>LateSelection</c>.
    /// </remarks>
    public ParmUpdate defaultParmUpdate()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        Args         args;
        FormRun      formRun;

        if (this.mustUseDialog())
        {
            return this.dialogInternal(Dialog::newFormnameRunbase(this.formName(),this));
        }
        else
        {
            args = new Args();
            args.name(this.formName());
            args.caller(this);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            return formRun;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    abstract formName formName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFormInternal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>RunBaseMultiParm</c> class by using a list of packed records.
    /// </summary>
    /// <param name="_includeRecords">
    ///    A Boolean parameter that indicates whether records are included.
    /// </param>
    /// <param name="_packedRecords">
    ///    A list of packed records.
    /// </param>
    private void initFromFormInternal(boolean _includeRecords, List _packedRecords)
    {
        Common      common;
        ParmBuffer  parmBuffer;

        //sets the parm id
        RunBaseMultiParm::initParm(this);

        //init and insert update parameters that goes for all updates.
        this.insertParmUpdate(this.defaultParmUpdate());

        if (_includeRecords && _packedRecords)
        {
            parmBuffer          = this.defaultParmBuffer();
            parmBuffer.Linenum  = 0;

            Enumerator enumerator = _packedRecords.getEnumerator();
            while (enumerator.moveNext())
            {
                parmBuffer.Linenum++;
                common  = enumerator.current();
                this.insert(common,parmBuffer);

                this.pmfInsertPost(common,parmBuffer);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer parmBuffer)
    {
        throw error(Error::missingOverload(funcName()));

        #if.never
        parmxxx saveParmxxx;

        saveParmxxx.data(common);
        parmxxx.data(standardParmxxx);

        parmxxx.parmId      = saveParmxxx.parmId;
        parmxxx.lineNum     = saveParmxxx.lineNum;
        #endif
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    // Initializes standard parm buffer
    public void initParmDefault()
    {
        useAllUsersSysLastValue = true;

        // retrieve 'all users' last value if it exists
        if (   this.allowSaveLast()
            && xSysLastValue::existLast(this))
        {
            xSysLastValue::getLast(this);
            usedAllUsersSysLastValue = true;
        }
        else
        {
            this.parmStandardParm().initParmDefault();
        }

        useAllUsersSysLastValue = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmId</Name>
				<Source><![CDATA[
    protected void initParmId()
    {
        parmId = RunBaseMultiParm::getSysParmId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes values in the <paramref name="_parmUpdate" />.
    /// </summary>
    /// <param name="_parmUpdate">
    ///    The <c>ParmUpdate</c> that should be initialized.
    /// </param>
    public void initParmUpdate(ParmUpdate _parmUpdate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    // Remember to insert the parmBuffer record in the overloaded method.</remarks>
    void insert(
        Common      common,
        ParmBuffer  parmBuffer)
    {
        parmBuffer.initValue();
        this.initParmBuffer(parmBuffer);
        parmBuffer.ParmId     = parmId;

        if (!parmBuffer.Linenum)
        {
            parmBuffer.Linenum = this.nextLineNum();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts all parameter records.
    /// </summary>
    public void insertAll()
    {
        ParmBuffer                  parmBuffer;
        List                        insertList;
        ListEnumerator              insertListEnumerator;
        RecordInsertList            recordInsertList;

        parmBuffer = this.defaultParmBuffer();

        ttsbegin;

        insertList = new List(Types::Record);

        while select parmBuffer
                where parmBuffer.ParmId == parmId
        {
            insertList.addEnd(parmBuffer);
        }

        delete_from parmBuffer
                where parmBuffer.ParmId == parmId;

        recordInsertList = new RecordInsertList(parmBuffer.TableId);

        insertListEnumerator = insertList.getEnumerator();
        while (insertListEnumerator.moveNext())
        {
            parmBuffer = insertListEnumerator.current();

            this.initParmBuffer(parmBuffer);

            recordInsertList.add(parmBuffer);
        }

        recordInsertList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts and initializes the <paramref name="_parmUpdate" />.
    /// </summary>
    /// <param name="_parmUpdate">
    ///    The <c>ParmUpdate</c> that should be initialized.
    /// </param>
    /// <remarks>
    ///    Overriden methods must call the insert method on <c>parmUpdate</c>.
    /// </remarks>
    void insertParmUpdate(ParmUpdate _parmUpdate)
    {
        _parmUpdate.initValue();
        _parmUpdate.ParmId = parmId;
        this.initParmUpdate(_parmUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    abstract LineNum lastLineNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public userId lastValueUserId()
    {
        userId result;

        if (!useAllUsersSysLastValue)
        {
            result = super();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeCreatedRecs</Name>
				<Source><![CDATA[
    void mergeCreatedRecs(Map _from)
    {
        if (!_from)
        {
            return;
        }

        if (!_from.elements())
        {
            return;
        }

        if (!createdRecs)
        {
            createdRecs = new Map(typeName2Type(extendedTypeStr(recId)),Types::Record);
        }

        RunBaseMultiParm::mergeRecsPrim(_from,createdRecs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDeletedRecs</Name>
				<Source><![CDATA[
    void mergeDeletedRecs(Map _from)
    {
        if (!_from)
        {
            return;
        }

        if (!_from.elements())
        {
            return;
        }

        if (!deletedRecs)
        {
            deletedRecs = new Map(typeName2Type(extendedTypeStr(recId)),Types::Record);
        }

        RunBaseMultiParm::mergeRecsPrim(_from,deletedRecs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeRecs</Name>
				<Source><![CDATA[
    void mergeRecs(UpdateBase _upd)
    {
        if (_upd.createdRecs())
        {
            this.mergeCreatedRecs(_upd.createdRecs());
        }

        if (_upd.updatedRecs())
        {
            this.mergeUpdateRecs(_upd.updatedRecs());
        }

        if (_upd.deletedRecs())
        {
            this.mergeDeletedRecs(_upd.deletedRecs());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeUpdateRecs</Name>
				<Source><![CDATA[
    void mergeUpdateRecs(Map _from)
    {
        if (!_from)
        {
            return;
        }

        if (!_from.elements())
        {
            return;
        }

        if (!updatedRecs)
        {
            updatedRecs = new Map(typeName2Type(extendedTypeStr(recId)),Types::Record);
        }

        RunBaseMultiParm::mergeRecsPrim(_from,updatedRecs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls whether the dialog system should be used for dialogs or if the system should be the form that is created in <c>dialog()</c>.
    /// </summary>
    /// <returns>
    ///    true if the dialog system should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    By using the dialog system, a Batch tab page is added to the form.
    /// </remarks>
    boolean mustUseDialog()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    LineNum nextLineNum()
    {
        return this.lastLineNum() + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packClientServerTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>RunBaseMultiParm</c> class so that it can be transferred
    ///    between client and server.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>RunBaseMultiParm</c> class.
    /// </returns>
    protected container packClientServerTransfer()
    {
        return [this.pack(), getLastCalled, this.batchInfo().pack(), this.packRecs()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCreatedRecs</Name>
				<Source><![CDATA[
    container packCreatedRecs()
    {
        return createdRecs ? createdRecs.pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packDeletedRecs</Name>
				<Source><![CDATA[
    container packDeletedRecs()
    {
        return deletedRecs ? deletedRecs.pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packRecs</Name>
				<Source><![CDATA[
    container packRecs()
    {
        return [this.packUpdatedRecs(),this.packCreatedRecs(),this.packDeletedRecs()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packUpdatedRecs</Name>
				<Source><![CDATA[
    container packUpdatedRecs()
    {
        return updatedRecs ? updatedRecs.pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    public ParmId parmId(ParmId _parmId = parmId)
    {
        parmId = _parmId;

        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer _parm = null)
    {
        throw error(Error::missingOverload(funcName()));

        #if.never
        standardParmxxx = parm

            return standardParmxxx;
        #endif
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>ParmUpdate</c> that is common for all updates.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///    The <c>ParmUpdate</c> used for this update. By default this value is null.
    /// </returns>
    public ParmUpdate parmUpdate(boolean _forUpdate = false)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfInsertPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the <c>insert</c> operation has been processed :
    /// Should be overridden on child classes
    /// </summary>
    /// <param name="_common">Transaction buffer.</param>
    /// <param name="_parmBuffer">Parameter buffer.</param>
    /// <param name="_initFromParmBuffer">Indicates if the new buffer should be initialized from the main buffer; optional</param>
    public void pmfInsertPost(
        Common      _common,
            ParmBuffer  _parmBuffer,
                boolean     _initFromParmBuffer = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    abstract void run()
    {
        #if.never
        parmxxx parmxxx;

        if (!this.validate())
            throw error("@SYS18447");

        select parmxxx
            index NumLineNumIdx
                where parmx.parmId  == parmId;

        while (parmxxx)
        {
            try
        {
            x
                    x
    }
        catch (EXCEPTION::DeadLock)
        {
            retry;
    }
        catch (EXCEPTION::Error)
        {
    }
        next parmxxx;
    }
        #endif
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Delegates the execution of the <c>run</c> method to the server.
    /// </summary>
    public final void runOnServer()
    {
        this.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserDefault</Name>
				<Source><![CDATA[
    public void setUserDefault()
    {
        xSysLastValue::deleteAllUsers(this);

        useAllUsersSysLastValue = true;
        xSysLastValue::saveLast(this);
        useAllUsersSysLastValue = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLateSelectionBePerformed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if query should be saved to the <c>ParmUpdate</c> map.
    /// </summary>
    /// <returns>
    ///   true if query should be saved; otherwise, false.
    /// </returns>
    public boolean shouldLateSelectionBePerformed()
    {
        ParmUpdate      parmUpdate = this.parmUpdate();
        return (parmUpdate && parmUpdate.LateSelection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldTableBePopulated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if tables should be populated with prompted query
    /// </summary>
    /// <returns>
    ///   true if tables should be populated; otherwise, false.
    /// </returns>
    public boolean shouldTableBePopulated()
    {
        ParmUpdate      parmUpdate = this.parmUpdate();
        return !(parmUpdate && parmUpdate.LateSelection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     packedVersion     = conPeek(packedClass,1);

        switch (packedVersion)
        {
            case #CurrentVersion:
                [packedVersion,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackClientServerTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="packedClass" /> parameter value to the current instance of the
    ///    <c>RunBaseMultiParm</c> class after it is transferred between the client and server.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The class instance cannot be deserialized from the container.
    /// </exception>
    protected void unpackClientServerTransfer(container _packedClass)
    {
        if (this.unpack(conPeek(_packedClass, 1)))
        {
            getLastCalled   = conPeek(_packedClass, 2);
            this.batchInfo().unpack(conPeek(_packedClass, 3));
            this.unpackRecs(conPeek(_packedClass, 4));
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackRecs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates maps of the affected records by using a container with a packed set of records.
    /// </summary>
    /// <param name="_packedRecs">
    ///    A container with a packed set of records.
    /// </param>
    private void unpackRecs(container _packedRecs)
    {
        container packedUpdatedRecs;
        container packedCreatedRecs;
        container packedDeletedRecs;

        packedUpdatedRecs   = conPeek(_packedRecs, 1);
        if (packedUpdatedRecs != conNull())
        {
            updatedRecs = Map::create(packedUpdatedRecs);
        }

        packedCreatedRecs   = conPeek(_packedRecs, 2);
        if (packedCreatedRecs != conNull())
        {
            createdRecs = Map::create(packedCreatedRecs);
        }

        packedDeletedRecs   = conPeek(_packedRecs, 3);
        if (packedDeletedRecs != conNull())
        {
            deletedRecs = Map::create(packedDeletedRecs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyOnServer</Name>
				<Source><![CDATA[
    private static ParmBuffer applyOnServer(
        classId    _classId,
            container  _packedClass,
                ParmBuffer _parmBuffer)
    {
        RunBaseMultiParm runBaseMultiParm;

        runBaseMultiParm = classfactory.createClass(_classId) as RunBaseMultiParm;

        if (runBaseMultiParm == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        runBaseMultiParm.unpackClientServerTransfer(_packedClass);

        return runBaseMultiParm.applyInternal(_parmBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysParmId</Name>
				<Source><![CDATA[
    static ParmId getSysParmId()
    {
        return NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>RunBaseMultiParm</c> class by using a calling form.
    /// </summary>
    /// <param name="_runBaseMultiParm">
    ///    An instance of the <c>RunBaseMultiParm</c> class.
    /// </param>
    /// <param name="_args">
    ///    An argument that represent the calling form.
    /// </param>
    /// <param name="_includeRecords">
    ///    A Boolean parameter that indicates whether the selected records on the calling form are included.
    /// </param>
    public static void initFromForm(
        RunBaseMultiParm    _runBaseMultiParm,
        Args                _args,
        boolean             _includeRecords = true)
    {
        List            packedRecords;
        boolean         includeRecords  = _includeRecords;
        ParmUpdate      parmUpdate      = _runBaseMultiParm.defaultParmUpdate();

        //don't insert any lines if lateselection is used
        includeRecords = includeRecords && (!parmUpdate || !parmUpdate.LateSelection);

        if (includeRecords  && _args && _args.dataset())
        {
            packedRecords = _runBaseMultiParm.packRecords(_args.record());
        }

        _runBaseMultiParm.initFromFormInternal(includeRecords, packedRecords);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Packs the records of the form datasource to a list.
    /// </summary>
    /// <param name = "_common">
    ///     The record of the calling form datasource.
    /// </param>
    /// <returns>
    ///     A container with a packed set of records.
    /// </returns>
    protected List packRecords(Common _common)
    {
        List            packedRecords = new List(Types::Record);

        if (FormDataUtil::getFormDataSource(_common))
        {
            //init specific update tables
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(_common);
            for (Common common = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : _common;
            common;
            common = formDataSource.getNext())
            {
                Common record;
                if (common is ProdSupervisorScheduledOrders)
                {
                    ProdTable prodTable;
                    select firstonly prodTable where prodTable.RecId == common.RecId;
                    record = prodTable;
                }
                else
                {
                    record = common;
                }
                packedRecords.addEnd(record);
            }
        }

        return packedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParm</Name>
				<Source><![CDATA[
    static void initParm(
        RunBaseMultiParm    runBaseMultiParm)
    {
        runBaseMultiParm.getLast();
        runBaseMultiParm.initParmId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAllOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts all parameter records on the server tier in order to minimize RPC calls.
    /// </summary>
    /// <param name="_classId">
    /// The class ID of the class that needs to be instantiated on the server tier.
    /// </param>
    /// <param name="_container">
    /// A container with all the parameter records that need to be inserted.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown in case that the class cannot be instantiated on the server tier.
    /// </exception>
    public static void insertAllOnServer(classId    _classId, container  _container)
    {
        RunBaseMultiParm            runBaseMultiParm;

        runBaseMultiParm    = classfactory.createClass(_classId) as RunBaseMultiParm;

        if (runBaseMultiParm == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        runBaseMultiParm.unpack(_container);
        runBaseMultiParm.insertAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        switch (args.parmEnum())
        {
            case RunChoose::UserDefault:
                RunBaseMultiParm::runSpecial(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeRecsPrim</Name>
				<Source><![CDATA[
    static void mergeRecsPrim(
        Map _from,
            Map _to)
    {
        MapEnumerator   me;

        if (!_from)
        {
            return;
        }

        if (!_from.elements())
        {
            return;
        }

        me = _from.getEnumerator();
        while (me.moveNext())
        {
            _to.insert(me.currentKey(),me.currentValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServerInternal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the <c>run</c> method on the server.
    /// </summary>
    /// <param name="_classId">
    ///    An ID of the class to be initialized.
    /// </param>
    /// <param name="_packedClass">
    ///    A container from which to deserialize a class instance.
    /// </param>
    /// <returns>
    ///    A container that contains the serialized current instance of the <c>RunBaseMultiParm</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    An instance of a class that has an ID that is equal to the <c>_classId</c> cannot be initialized or
    ///    it does not belong to the <c>RunBaseMultiParm</c> class hierarchy.
    /// </exception>
    private static container runOnServerInternal(
        classId   _classId,
            container _packedClass)
    {
        RunBaseMultiParm    runBaseMultiParm;

        runBaseMultiParm    = classfactory.createClass(_classId) as RunBaseMultiParm;

        if (runBaseMultiParm == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        runBaseMultiParm.unpackClientServerTransfer(_packedClass);
        runBaseMultiParm.runOperation();

        return runBaseMultiParm.packClientServerTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSpecial</Name>
				<Source><![CDATA[
    static void runSpecial(Args args)
    {
        RunBaseMultiParm            runBaseMultiParm;
        Object dialogMulti;
        Object dialogSetup;

        if (!args.caller())
        {
            throw error(strFmt("@SYS53926",classId2Name(classIdGet(runBaseMultiParm))));
        }

        runBaseMultiParm = args.caller().runbase();

        switch (args.parmEnum())
        {
            case RunChoose::Choose:
                dialogMulti = args.caller();
                runBaseMultiParm.choose();
                dialogMulti.doReselect();
                break;
            case RunChoose::InsertAll:
                dialogSetup = args.caller();
                dialogSetup.save();
                runBaseMultiParm.insertAll();
                dialogSetup.doReselect();
                break;
            case RunChoose::UserDefault:
                dialogSetup = args.caller();
                dialogSetup.save();
                runBaseMultiParm.setUserDefault();
                dialogSetup.doReselect();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParmIdSubscriber</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(ParmBuffer), delegatestr(ParmBuffer, getParmIdDelegate))]
    public static void getParmIdSubscriber(EventHandlerResult eventHandlerResult)
    {
        eventHandlerResult.result(RunBaseMultiParm::getSysParmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseUsedQueryRun</Name>
				<Source><![CDATA[
    internal SysQueryRun chooseUsedQueryRun()
    {
        return new SysQueryRun(this.query());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>