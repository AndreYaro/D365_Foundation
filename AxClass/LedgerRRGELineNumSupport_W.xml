<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGELineNumSupport_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGELineNumSupport_W
{
    List            idFieldList;
    fieldId         lineNumField;
    FormDataSource  table_DS;
    Common          table;
    Query           upQuery;
    Query           downQuery;
    Common          cur;
    FormRun         formRun;
    str             lineNumName;

    private const str OpenBracket       = '( ';
    private const str More              = ' > ';
    private const str Less              = ' < ';
    private const str CloseBracket      = ' )';
    private const str IdLineNumGroup	= 'IdLineNumGroup';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>down</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void down()
    {
        Common  after;
        Common  save;
        LineNum num;
        LineNum newNum;

        if (table.RecId)
        {
            ttsbegin;
            after = this.findNextLineNum(false);
            if (after.RecId && after.(lineNumField) > table.(lineNumField))
            {
                num                     = table.(lineNumField);
                table.(lineNumField)    = after.(lineNumField);

                newNum                  = num + (after.(lineNumField) - num) / 2;
                if (!newNum)
                {
                    newNum = num + (after.(lineNumField) - num) / 4;
                }

                after.(lineNumField) = newNum;
                after.update();
                table.update();
                save = table.data();
            }

            ttscommit;

            this.updateDatasources(save);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextLineNum</Name>
				<Source><![CDATA[
    private Common findNextLineNum(boolean _up, Common _table = table)
    {
        Query                   query   = _up?upQuery:downQuery;
        QueryRun                queryRun;
        Common                  result  = this.initTable();
        QueryBuildDataSource    qbds    = query.dataSourceTable(_table.TableId);
        ListEnumerator          le;
   
        if (qbds)
        {
            if (idFieldList)
            {
                le = idFieldList.getEnumerator();
                while (le.moveNext())
                {
                    findOrCreateRange_W(qbds, le.current(), SysQuery::value(_table.(le.current())));
                }
            }

            findOrCreateRange_W(qbds, lineNumField, OpenBracket + lineNumName + ' ' + (_up?Less:More) + SysQuery::value(_table.(lineNumField)) + CloseBracket);

            queryRun = new QueryRun(query);
            if (queryRun.next())
            {
                result = queryRun.get(_table.TableId);
                result.selectForUpdate(true);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFormDataSource</Name>
				<Source><![CDATA[
    private void initFromFormDataSource(FormDataSource _formDataSource)
    {
        int                 fieldGroupNo, fieldNo;
        SysDictTable        dictTable;
        SysDictFieldGroup   fieldGroup;
        SysDictField        dictField;

        idFieldList = null;
        table_DS    = _formDataSource;
        if (table_DS)
        {
            table       = table_DS.cursor();
            dictTable   = SysDictTable::newTableId(table.TableId);
            if (dictTable)
            {
                for (fieldGroupNo = 1; fieldGroupNo <= dictTable.fieldGroupCnt(); fieldGroupNo++)
                {
                    if (dictTable.fieldGroup(fieldGroupNo) == IdLineNumGroup)
                    {
                        fieldGroup = new SysDictFieldGroup(table.TableId, IdLineNumGroup);
                        for(fieldNo = 1; fieldNo <= fieldGroup.numberOfFields(); fieldNo++)
                        {
                            dictField = new SysDictField(table.TableId, fieldGroup.field(fieldNo));

                            if (isType(dictField.typeId(), extendedtypenum(LineNum)))
                            {
                                lineNumField = dictField.id();
                                lineNumName  = dictField.name();
                            }
                            else
                            {
                                if (!idFieldList)
                                {
                                    idFieldList = new List(Types::Integer);
                                }

                                idFieldList.addEnd(dictField.id());
                            }
                        }

                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFormRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromFormRun(FormRun _formRun, FormDataSource _formDataSource = null)
    {
        int                     dataSourceNo;
        QueryBuildDataSource    qbds;
   
        formRun = _formRun;

        this.initFromFormDataSource(_formDataSource);

        if ((!table.TableId || !idFieldList || !lineNumField || !table_DS) && _formRun && _formRun.handle() == classnum(FormRun))
        {
            for (dataSourceNo = 1; dataSourceNo <= _formRun.dataSourceCount(); dataSourceNo++)
            {
                idFieldList  = null;
                lineNumField = 0;

                this.initFromFormDataSource(_formRun.dataSource(dataSourceNo));

                if (idFieldList && lineNumField)
                {
                    break;
                }
            }
        }

        if(!table.TableId || !idFieldList || !lineNumField || !table_DS || !lineNumName)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        upQuery = new Query();
        qbds = upQuery.addDataSource(table.TableId);
        qbds.addSortField(lineNumField);
        qbds.sortDirection(1, SortOrder::Descending);

        downQuery = new Query();
        qbds = downQuery.addDataSource(table.TableId);
        qbds.addSortField(lineNumField);
        qbds.sortDirection(1, SortOrder::Ascending);

        cur = this.initTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTable</Name>
				<Source><![CDATA[
    private Common initTable()
    {
        Common result = table.data();
        result.clear();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>up</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void up()
    {
        Common  before;
        Common  save;
        LineNum num;
        LineNum newNum;

        if (table.RecId)
        {
            ttsbegin;

            before = this.findNextLineNum(true);
            if (before.RecId && before.(lineNumField) < table.(lineNumField))
            {
                num                     = table.(lineNumField);
                table.(lineNumField)    = before.(lineNumField);
                newNum                  = before.(lineNumField) + (num - before.(lineNumField)) / 2;
                if (!newNum)
                {
                    newNum = before.(lineNumField) + (num - before.(lineNumField)) / 4;
                }

                before.(lineNumField) = newNum;

                before.update();
                table.update();
                save = table.data();
            }

            ttscommit;

            this.updateDatasources(save);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDatasources</Name>
				<Source><![CDATA[
    private void updateDatasources(Common _save)
    {
        if (table_DS && _save)
        {
            table_DS.research();
            table_DS.positionToRecord(_save);
        }

        this.updateMasterDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMasterDataSource</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateMasterDataSource()
    {
        Object formRunObject;

        if (formHasMethod(formRun, identifierstr(updateMasterDataSource)))
        {
            formRunObject = formRun;
            formRunObject.updateMasterDataSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static LedgerRRGELineNumSupport_W construct()
    {
        return new LedgerRRGELineNumSupport_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGELineNumSupport_W newFromFormRun(FormRun _formRun, FormDataSource _formDataSource = null)
    {
        LedgerRRGELineNumSupport_W lineNumSupport = LedgerRRGELineNumSupport_W::construct();
   
        lineNumSupport.initFromFormRun(_formRun, _formDataSource);
        return lineNumSupport;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>