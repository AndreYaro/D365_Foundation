<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesListMark</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EUSalesListMark extends RunBase
{
    QueryRun        qEUSalesList;
    EUSalesList     EUSalesList;
    ListStatus      listStatus;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        listStatus
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        FormRun         formRun = classFactory.createQueryForm(this);

        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        str             statusValue;
        QueryBuildRange queryBuildRange;
        boolean         ret = super();

        switch (listStatus)
        {
            case ListStatus::Include    : statusValue = queryRange(ListStatus::Reported, ListStatus::Closed);
                                          break;
            case ListStatus::Reported   : statusValue = queryValue(ListStatus::Include);
                                          break;
            case ListStatus::Closed     : statusValue = queryValue(ListStatus::Reported);
                                          break;
        }

        queryBuildRange = SysQuery::findOrCreateRange(qEUSalesList.query().dataSourceTable(tableNum(EUSalesList)), fieldnum(EUSalesList, status));
        queryBuildRange.value(statusValue);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    identifiername lastValueDesignName()
    {
        return new SysDictEnum(enumnum(ListStatus)).value2Symbol(listStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        qEUSalesList   = new QueryRun(querystr(EUsalesList));

        qEUSalesList.query().dataSourceTable(tableNum(EUSalesList)).addRange(fieldnum(EUSalesList, transDate));

        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForEUSalesList())
        {
            QueryBuildDataSource qbds = qEUSalesList.query().dataSourceTable(tableNum(EUSalesList));

            QueryBuildDataSource taxRegistrationDataSource = qbds.addDataSource(tableNum(TaxRegistration));
            taxRegistrationDataSource.relations(false);
            taxRegistrationDataSource.joinMode(JoinMode::ExistsJoin);
            taxRegistrationDataSource.addLink(fieldnum(EUSalesList, TaxId), fieldNum(TaxRegistration, RecId));

            findOrCreateRange_W(taxRegistrationDataSource, fieldNum(TaxRegistration, RegistrationNumber));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,qEUSalesList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmListStatus</Name>
				<Source><![CDATA[
    ListStatus parmListStatus(ListStatus _listStatus = listStatus)
    {
        listStatus = _listStatus;

        return listStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return  qEUSalesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        // <GEELV>
        #ISOCountryRegionCodes
        // </GEELV>
        ttsbegin;

        while (qEUSalesList.next())
        {
            EUSalesList = qEUSalesList.get(tablenum(EUSalesList));

            switch (listStatus)
            {
                case ListStatus::Include    : EUSalesList.status = ListStatus::Include;
                                              break;
                case ListStatus::Reported   : EUSalesList.status = ListStatus::Reported;
                                              break;
                case ListStatus::Closed     : EUSalesList.status = ListStatus::Closed;
                                                // <GEELV>
                                                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
                                                {
                                                    EUSalesList.ClosingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                                                }
                                                // </GEELV>

                                              break;
            }

            EUSalesList.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer          version         = conpeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery]      = packedClass;
                if (packedQuery)
                    qEUSalesList   = new QueryRun(packedQuery);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        EUSalesListMark   listMark;
        FormDataSource    eUSalesList_ds;

        eUSalesList_ds   = FormDataUtil::getFormDataSource(args.record());
        listMark         = new EUSalesListMark();
        listMark.parmListStatus(args.parmEnum());
        listMark.init();

        if (listMark.prompt())
            listMark.runOperation();

        eUSalesList_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>