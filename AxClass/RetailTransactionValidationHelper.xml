<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

public class RetailTransactionValidationHelper
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getValidations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a map related to the classes and methods to validate a Retail transaction.
    /// The key is the class id and the value is a container with the validation methods associated to a class.
    /// </summary>
    /// <returns>A map that contains the classes and methods to validate a Retail transaction.</returns>
    [SysObsolete('Not used anymore, replaced by RetailTransactionValidationRuleMetadataLoader', false, 30\06\2020)]
    public static Map getValidations()
    {
        SysGlobalObjectCache validationCache = new SysGlobalObjectCache();
        container validationContainer = validationCache.find('RetailTransactionValidationHelper_getValidations', ['validationList']);

        if (validationContainer != conNull())
        {
            return Map::create(validationContainer);            
        }
        
        Map backwardsCompatValidationMap = new Map(Types::Integer, Types::Container);

        Map rulesMap = RetailTransactionValidationRuleMetadataLoader::getRulesMapNoCache();
        MapEnumerator rulesMapEnumerator = rulesMap.getEnumerator();

        while (rulesMapEnumerator.moveNext())
        {
            ClassId     childClass      = rulesMapEnumerator.currentKey();

            List ruleMetadataList = rulesMapEnumerator.currentValue();
            ListEnumerator ruleMetadataEnumerator = ruleMetadataList.getEnumerator();

            container childMethods = conNull();

            while (ruleMetadataEnumerator.moveNext())
            {
                RetailTransactionValidationRuleMetadata metadata = ruleMetadataEnumerator.current();

                if (metadata.getRuleType() == RetailTransactionValidationRuleType::TransactionLevel && metadata.isEnabled())
                {
                    childMethods += metadata.getMethodName();
                }
            }

            if (conLen(childMethods) != 0)
            {
                backwardsCompatValidationMap.insert(childClass, childMethods);
            }
        }

        validationCache.insert('RetailTransactionValidationHelper_getValidations', ['validationList'], backwardsCompatValidationMap.pack());

        return backwardsCompatValidationMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionPropertyFromCustomerOrderInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers an extension property from customer order info object.
    /// </summary>
    /// <param name = "_customerOrderInfo">Customer order info.</param>
    /// <param name = "_property">Property name.</param>
    /// <returns>Value related to the property, if the property exists; otherwise, null.</returns>
    public static CLRObject getExtensionPropertyFromCustomerOrderInfo(CustomerOrderInfo _customerOrderInfo, str _property)
    {
        CLRObject extensionPropertyCollection = _customerOrderInfo.ExtensionProperties;

        for (int i = 0; i < extensionPropertyCollection.get_Count(); i++)
        {
            CLRObject commerceProperty =  extensionPropertyCollection.get_Item(i);
            
            if (commerceProperty.get_Key() == _property)
            {
                return commerceProperty.get_value();
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionPropertyFromExtensionPropertyCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers an extension property from the ExtensionProperties CLRObject 
    /// </summary>
    /// <param name = "_extensionPropertyCollection">Extension properties collection.</param>
    /// <param name = "_property">Property name.</param>
    /// <returns>Value related to the property, if the property exists; otherwise, null.</returns>
    public static CLRObject getExtensionPropertyFromExtensionPropertyCollection(CLRObject _extensionPropertyCollection, str _property)
    {
        for (int i = 0; i < _extensionPropertyCollection.get_Count(); i++)
        {
            CLRObject commerceProperty =  _extensionPropertyCollection.get_Item(i);
            
            if (commerceProperty.get_Key() == _property)
            {
                return commerceProperty.get_value();
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreFailedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restore transactions from a given store that have failed in validation previously to pending validation status.
    /// </summary>
    /// <param name = "_storeTable">Store number.</param>
    internal static void restoreFailedTransactions(RetailTransactionConsistencyCheckerTaskParameters _params)
    {
        RetailTransactionTable transactionTable;

        ttsbegin;

        update_recordset transactionTable
            setting ValidationStatus = RetailTransactionValidationStatus::Pending
            where   transactionTable.store == _params.getStoreId()
                &&  transactionTable.statementId == _params.getStatementId()
                &&  transactionTable.type == RetailTransactionType::Sales
                &&  transactionTable.entryStatus == RetailEntryStatus::None
                &&  (	transactionTable.ValidationStatus == RetailTransactionValidationStatus::Failed
                        // In case of batch failure, we need to recover transactions that were being validated.
                        ||	transactionTable.ValidationStatus == RetailTransactionValidationStatus::InProgress);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureStatementHasNoPendingTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that all the cash and carry transactions inside the statement are validated.
    /// </summary>
    /// <param name = "_statementTable">The <c>RetailStatementTable</c> record.</param>
    internal static void ensureStatementHasNoPendingTransaction(RetailStatementTable _statementTable)
    {
        RetailTransactionConsistencyCheckerStatus consistencyCheckerEnabled = !RetailParameters::find().DisableTransactionConsistencyChecker;

        if (consistencyCheckerEnabled)
        {
            RetailTransactionTable transactionTable;
            transactionTable.allowIndexHint(true);

            select count(RecId) from transactionTable
            index hint invoiceIdSOIdStmtIdx
            where   transactionTable.store == _statementTable.storeId
                &&  transactionTable.statementId == _statementTable.statementId
                &&  transactionTable.type == RetailTransactionType::Sales
                &&  transactionTable.entryStatus == RetailEntryStatus::None
                &&  transactionTable.ValidationStatus != RetailTransactionValidationStatus::Ok;

            if (transactionTable.RecId != 0)
            {
                eventSource.EventWriteTransactionValidationMarkedTransactionsInErrorState(_statementTable.statementId, enum2Symbol(enumNum(RetailEodTransactionPostingStatus), _statementTable.PostingStatus));

                throw error("@Retail:RetailTransactionConsistencyInvalidMarkedTransactions");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumRoundingDifferenceAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of maximum allowed rounding difference.
    /// </summary>
    /// <returns>The value of maximum allowed rounding difference.</returns>
    public static AmountMST getMaximumRoundingDifferenceAllowed()
    {
        LedgerParameters ledgerParams = LedgerParameters::find();
        return ledgerParams.MaxRoundingDifferenceMST;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>