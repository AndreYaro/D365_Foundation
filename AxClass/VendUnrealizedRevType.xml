<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendUnrealizedRevType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class <c>VendUnrealizedRevType</c> is the type class for vendor reversal journal.
/// </summary>
class VendUnrealizedRevType extends CustVendUnrealizedRevType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildConstructQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query for creating vendor reversal journal.
    /// </summary>
    /// <returns>
    ///     The constructed query.
    /// </returns>
    public Query buildConstructQuery()
    {
        Query           query;
        QueryBuildRange qbr;

        query   = new Query(queryStr(VendUnrealizedRevConstruction));
        qbr     = query.dataSourceName(queryDataSourceStr(VendUnrealizedRevConstruction, TaxTransExtensionTHUnrealized)).addRange(fieldNum(TaxTransExtensionTH, TaxInvoiceId));
        qbr.status(RangeStatus::Hidden);
        qbr.value(SysQuery::valueEmptyString());

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query for updating vendor reversal journal.
    /// </summary>
    /// <returns>
    ///     The updated query.
    /// </returns>
    public Query buildUpdateQuery()
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        Query                   query;

        query = this.buildConstructQuery();
        // Update reversal journal
        query.title("@SYS4082869");

        qbds = query.dataSourceTable(tableNum(VendSettlement));
        qbr  = qbds.findRange(fieldNum(VendSettlement, AccountNum));
        qbr.value(queryValue(unrealizedRev.AccountNum));
        qbr.status(RangeStatus::Hidden);

        qbds = query.dataSourceTable(tableNum(VendTrans));
        qbr  = qbds.findRange(fieldNum(VendTrans, CurrencyCode));
        qbr.value(queryValue(unrealizedRev.CurrencyCode));
        qbr.status(RangeStatus::Hidden);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        if (this.isDataLoaded())
        {
            this.doPost();
        }
        else
        {
            VendUnrealizedRevType::postOnServer(this.parmCustVendUnrealizedRevRefRecId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs the instance of <c>VendUnrealizedRevType</c> based on a given
    ///     <c>VendUnrealizedRev</c> record buffer.
    /// </summary>
    /// <param name="_unrealizedRev">
    ///     The given <c>VendUnrealizedRev</c>
    /// </param>
    /// <returns>
    ///     The constructed <c>VendUnrealizedRevType</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendUnrealizedRevType construct(VendUnrealizedRev _unrealizedRev)
    {
        VendUnrealizedRevType  vendUnrealizedRev;

        vendUnrealizedRev = new VendUnrealizedRevType();
        vendUnrealizedRev.parmCustVendUnrealizedRev(_unrealizedRev);

        return  vendUnrealizedRev;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByUnrealizedRevRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs the instance of <c>VendUnrealizedRevType</c> based on a given
    ///     <c>VendUnreazliedRev</c> record id.
    /// </summary>
    /// <param name="_unrealizedRevRecId">
    ///     Record Id for reverse unrealized VAT.
    /// </param>
    /// <param name="_loadData">
    ///     Indicates whether data is loaded.
    /// </param>
    /// <param name="_forUpdate">
    ///     Indicates whether record is for update.
    /// </param>
    /// <returns>
    ///     The constructed <c>VendUnrealizedRevType</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendUnrealizedRevType constructByUnrealizedRevRecId(
        CustVendUnrealizedRevRefRecId       _unrealizedRevRecId,
        boolean                             _loadData  = false,
        boolean                             _forUpdate = false)
    {
        VendUnrealizedRevType    vendUnrealizedRevType;
        VendUnrealizedRev        vendUnrealizedRev;

        if (_loadData)
        {
            vendUnrealizedRev = VendUnrealizedRev::find(_unrealizedRevRecId, _forUpdate);
            vendUnrealizedRevType = VendUnrealizedRevType::construct(vendUnrealizedRev);
        }
        else
        {
            vendUnrealizedRevType = new VendUnrealizedRevType();
            vendUnrealizedRevType.parmCustVendUnrealizedRevRefRecId(_unrealizedRevRecId);
        }

        return  vendUnrealizedRevType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates vendor reversal journal per vendor account and currency code based on given query.
    /// </summary>
    /// <param name="_query">
    ///     The given query
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void create(Query _query)
    {
        QueryRun                queryRun = new QueryRun(_query);
        VendSettlement          settlement;
        VendTrans               trans;
        VendUnrealizedRev       unrealizedRev;
        CustVendAC              account;
        CurrencyCode            currency;

        ttsbegin;
        while (queryRun.next())
        {
            settlement = queryRun.get(tableNum(VendSettlement));

            if (queryRun.changed(tableNum(VendSettlement)))
            {
                trans = queryRun.get(tableNum(VendTrans));

                if (account != settlement.AccountNum || currency != trans.CurrencyCode)
                {
                    account = settlement.AccountNum;
                    currency = trans.CurrencyCode;
                    unrealizedRev = VendUnrealizedRevType::insertUnrealizedRev(account, currency);
                }

                if (unrealizedRev)
                {
                    VendUnrealizedRevType::updateSettlement(settlement.RecId, unrealizedRev.RecId);
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertUnrealizedRev</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts new reversal journal.
    /// </summary>
    /// <param name="_account">
    ///     The given vendor account.
    /// </param>
    /// <param name="_currency">
    ///     The given currency code.
    /// </param>
    /// <returns>
    ///     The new inserted reversal journal.
    /// </returns>
    private static VendUnrealizedRev insertUnrealizedRev(
        VendAccount     _account,
        CurrencyCode    _currency)
    {
        VendUnrealizedRev    unrealizedRevLocal;

        unrealizedRevLocal.VendTable = _account;
        unrealizedRevLocal.CurrencyCode = _currency;
        unrealizedRevLocal.initValue();
        unrealizedRevLocal.insert();

        return unrealizedRevLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Forces the posting to be done on server.
    /// </summary>
    /// <param name="_unrealizedRevRecId">
    ///     Record ID for reverse unrealized VAT.
    /// </param>
    private static void postOnServer(CustVendUnrealizedRevRefRecId _unrealizedRevRecId)
    {
        VendUnrealizedRevType::constructByUnrealizedRevRecId(_unrealizedRevRecId, true, true).doPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates vendor reversal journal within the same vendor account and currency code
    ///     as given reversal journal based on given query.
    /// </summary>
    /// <param name="_vendUnrealizedRevRecId">
    ///     A given reversal journal record buffer.
    /// </param>
    /// <param name="_query">
    ///     The given query
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void update(
        CustVendUnrealizedRevRefRecId       _vendUnrealizedRevRecId,
        Query                               _query)
    {
        QueryRun        queryRun = new QueryRun(_query);
        VendSettlement  settlement;

        ttsbegin;
        while (queryRun.next())
        {
            settlement = queryRun.get(tableNum(VendSettlement));

            if (queryRun.changed(tableNum(VendSettlement)))
            {
                VendUnrealizedRevType::updateSettlement(settlement.RecId, _vendUnrealizedRevRecId);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Link vendor settlement transaction with specified reversal journal.
    /// </summary>
    /// <param name="_settlementRecId">
    ///     The record Id of vendor settlement transaction.
    /// </param>
    /// <param name="_vendUnrealizedRevRecId">
    ///     The record Id of vendor reverse unrealized VAT.
    /// </param>
    private static void updateSettlement(
        RecId                               _settlementRecId,
        CustVendUnrealizedRevRefRecId       _vendUnrealizedRevRecId)
    {
        VendSettlementExtensionTH  settlementExtTHUpdate;

        ttsbegin;
        settlementExtTHUpdate.SysExtensionSerializerExtensionMap::LoadByBase(_settlementRecId, true);
        settlementExtTHUpdate.VendUnrealizedRev = _vendUnrealizedRevRecId;
        settlementExtTHUpdate.VendSettlement    = _settlementRecId;
        settlementExtTHUpdate.write();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>