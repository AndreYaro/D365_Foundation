<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupUpdateStatusTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimLPCleanupUpdateStatusTask</c> class is used to update processing status of
///  inventory dimensions cleanup process history table by using multiple batch tasks.
/// </summary>
[SysObsolete('Should be deprecated after flight InventDimLPCleanupBatchTaskMergeFlight is removed', false, 28\06\2024)]
internal class InventDimLPCleanupUpdateStatusTask extends RunBaseBatch implements BatchRetryable
{
    private SysGuidString  sessionId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        sessionId
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return InventDimLPCleanupUpdateStatusTask::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionGuid</Name>
				<Source><![CDATA[
    public SysGuidString parmSessionGuid(SysGuidString _sessionId = sessionId)
    {
        sessionId = _sessionId;
        return sessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            InventDimLPCleanupTask inventDimLPCleanupTask;
            delete_from inventDimLPCleanupTask
                where inventDimLPCleanupTask.SessionId     == sessionId
                   && inventDimLPCleanupTask.CleanupStatus == InventDimLPCleanupStatus::Complete;

            InventDimLPCleanupJob cleanupJob = InventDimLPCleanupJob::findBySessionId(sessionId, true);

            if (cleanupJob)
            {
                inventDimLPCleanupTask.clear();
                select firstonly RecId from inventDimLPCleanupTask
                    where inventDimLPCleanupTask.SessionId == sessionId;

                if (inventDimLPCleanupTask.RecId != 0)
                {
                    cleanupJob.StopRunning = NoYes::Yes;
                }
                else
                {
                    cleanupJob.StopRunning = NoYes::No;
                    cleanupJob.Status = InventDimLPCleanupStatus::Complete;
                }

                cleanupJob.update();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventDimLPCleanupUpdateStatusTask construct()
    {
        return new InventDimLPCleanupUpdateStatusTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:InventDimLPCleanupUpdateProcessStatus";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    public static InventDimLPCleanupUpdateStatusTask newFromParameters(SysGuidString _sessionId)
    {
        if (!_sessionId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        InventDimLPCleanupUpdateStatusTask inventDimLPCleanupUpdateStatusTask = InventDimLPCleanupUpdateStatusTask::construct();
        inventDimLPCleanupUpdateStatusTask.getLast();
        inventDimLPCleanupUpdateStatusTask.parmSessionGuid(_sessionId);

        return inventDimLPCleanupUpdateStatusTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>