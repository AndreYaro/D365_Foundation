<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountMainAccount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAccountMainAccount</c> class provides information about the relationship of a bank account and its main account.
/// </summary>
public class BankAccountMainAccount
{
    private Map mainAccountBankAccountCurrencyCode;
    private Map mainAccountBankAccountMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankAccountMainAccount construct()
    {
        BankAccountMainAccount bankAccountMainAccount = new BankAccountMainAccount();
        bankAccountMainAccount.initMainAccountBankAccountMaps();

        return bankAccountMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMainAccountBankAccountMaps</Name>
				<Source><![CDATA[
    private  void initMainAccountBankAccountMaps()
    {
        mainAccountBankAccountCurrencyCode = new Map(Types::Int64, Types::String);
        mainAccountBankAccountMap = new Map(Types::Int64, Types::String);

        // Performance
        // The BankAccountMainAccountView can produce bad query plans that are difficult to tune.  Therefore, we are performing a 
        // while select against the BankAccountTable and then selecting one row from the BankAccountMainAccountView.
        // The BankAccountTable typically has few rows, the query will be much faster starting from the BankAccountTable side, 
        // so this is a reasonable trade off.
        // Performance
        BankAccountTable bankAccountTable;
        while select AccountId from bankAccountTable
        {
            BankAccountMainAccountView bankAccountMainAccount;
            select firstonly bankAccountMainAccount
                where bankAccountMainAccount.BankAccount == bankAccountTable.AccountId
                    && bankAccountMainAccount.BankAccountCompany == curExt();

            if (!mainAccountBankAccountCurrencyCode.exists(bankAccountMainAccount.MainAccountRecId))
            {
                mainAccountBankAccountCurrencyCode.insert(bankAccountMainAccount.MainAccountRecId, bankAccountMainAccount.BankAccountCurrencyCode);
                mainAccountBankAccountMap.insert(bankAccountMainAccount.MainAccountRecId, bankAccountMainAccount.BankAccount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesMainAccountHaveBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does a main account have a bank account.
    /// </summary>
    /// <param name = "_mainAccount">The main account RecId.</param>
    /// <returns>
    /// true if the main account has a related bank account; otherwise, false.
    /// </returns>
    public boolean doesMainAccountHaveBankAccount(RefRecId _mainAccount)
    {
        return mainAccountBankAccountCurrencyCode.exists(_mainAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBankAccountCurrencyCodeForMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the bank account currency code for a given main account.
    /// </summary>
    /// <param name = "_mainAccount">The main account RecId.</param>
    /// <returns>
    /// The bank account currency code.
    /// </returns>
    public CurrencyCode findBankAccountCurrencyCodeForMainAccount(RefRecId _mainAccount)
    {
        CurrencyCode currencyCode = mainAccountBankAccountCurrencyCode.lookup(_mainAccount);

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBankAccountForMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the bank account for a given main account.
    /// </summary>
    /// <param name = "_mainAccount">The main account RecId.</param>
    /// <returns>
    /// The bank account.
    /// </returns>
    public CompanyBankAccountId findBankAccountForMainAccount(RefRecId _mainAccount)
    {
        CompanyBankAccountId bankAccount = strRep(' ', 10);

        if (mainAccountBankAccountMap.exists(_mainAccount))
        {
            bankAccount = mainAccountBankAccountMap.lookup(_mainAccount);
        }

        return bankAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>