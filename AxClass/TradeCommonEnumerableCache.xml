<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeCommonEnumerableCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TradeCommonEnumerableCache</c> class contains <c>Common</c> buffers that are initialized
/// from a <c>TradeCommonIEnumerable</c> object where the retrieved buffers are cached as the buffers
/// are traversed.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class TradeCommonEnumerableCache implements TradeCommonIEnumerable
{
    TradeCommonIEnumerable  tradeCommonIEnumerable;
    TradeCommonIEnumerator  tradeCommonIEnumerator;
    List                    cacheList;
    ListEnumerator          cacheListEnumerator;
    boolean                 isEnumeratingCache;
    boolean                 isTradeCommonIEnumerableFinished;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeReset</Name>
				<Source><![CDATA[
        public boolean canBeReset()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
        public Common current()
    {
        if (isEnumeratingCache)
        {
            return this.currentCache();
        }

        return this.currentEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentCache</Name>
				<Source><![CDATA[
        private Common currentCache()
    {
        return cacheListEnumerator.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentEnumerator</Name>
				<Source><![CDATA[
        private Common currentEnumerator()
    {
        return tradeCommonIEnumerator.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
        public TradeCommonIEnumerator getEnumerator()
    {
        return TradeCommonEnumerator::newFromTradeCommonIEnumerable(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateCacheEnumeration</Name>
				<Source><![CDATA[
        private void initiateCacheEnumeration()
    {
        cacheListEnumerator = cacheList.getEnumerator();
        isEnumeratingCache = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateCaching</Name>
				<Source><![CDATA[
        private void initiateCaching()
    {
        cacheList = new List(Types::Record);
        isEnumeratingCache = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateEnumeration</Name>
				<Source><![CDATA[
        public void initiateEnumeration()
    {
        if (this.mustEnumerateIEnumerable())
        {
            this.initiateIEnumerableEnumeration();
        }
        else
        {
            this.initiateCacheEnumeration();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateIEnumerableEnumeration</Name>
				<Source><![CDATA[
        private void initiateIEnumerableEnumeration()
    {
        tradeCommonIEnumerator = tradeCommonIEnumerable.getEnumerator();

        isTradeCommonIEnumerableFinished = false;

        this.initiateCaching();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
        public boolean moveNext()
    {
        boolean foundNext = false;

        if (isEnumeratingCache)
        {
            foundNext = this.moveNextCache();
        }
        if (!foundNext && !isTradeCommonIEnumerableFinished)
        {
            foundNext = this.moveNextIEnumerable();
        }

        return foundNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextCache</Name>
				<Source><![CDATA[
        private boolean moveNextCache()
    {
        boolean moveNext;
        moveNext = cacheListEnumerator.moveNext();
        if (!moveNext)
        {
            isEnumeratingCache = false;
        }
        return moveNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextIEnumerable</Name>
				<Source><![CDATA[
        private boolean moveNextIEnumerable()
    {
        boolean moveNext;

        moveNext = tradeCommonIEnumerator.moveNext();

        if (moveNext)
        {
            cacheList.addEnd(tradeCommonIEnumerator.current());
        }
        else
        {
            isTradeCommonIEnumerableFinished = true;
        }
        return moveNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnumerateIEnumerable</Name>
				<Source><![CDATA[
        private boolean mustEnumerateIEnumerable()
    {
        return !cacheList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeCommonIEnumerable</Name>
				<Source><![CDATA[
        protected TradeCommonIEnumerable parmTradeCommonIEnumerable(TradeCommonIEnumerable _tradeCommonIEnumerable = tradeCommonIEnumerable)
    {
        tradeCommonIEnumerable = _tradeCommonIEnumerable;

        return tradeCommonIEnumerable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievedElements</Name>
				<Source><![CDATA[
        public int retrievedElements()
    {
        return max(tradeCommonIEnumerable.retrievedElements(), cacheList.elements());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static protected TradeCommonEnumerableCache construct()
    {
        return new TradeCommonEnumerableCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTradeCommonIEnumerable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>TradeCommonEnumerableCache</c> class.
    /// </summary>
    /// <param name="_tradeCommonIEnumerable">
    /// The <c>TradeCommonIEnumerable</c> object for which content should be cached.
    /// </param>
    /// <returns>
    /// An instance of the <c>TradeCommonEnumerableCache</c> class.
    /// </returns>
    static TradeCommonEnumerableCache newFromTradeCommonIEnumerable(TradeCommonIEnumerable _tradeCommonIEnumerable)
    {
        TradeCommonEnumerableCache  tradeCommonEnumerableCache;

        tradeCommonEnumerableCache = TradeCommonEnumerableCache::construct();

        tradeCommonEnumerableCache.parmTradeCommonIEnumerable(_tradeCommonIEnumerable);

        return tradeCommonEnumerableCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>