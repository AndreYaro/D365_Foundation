<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutAttNote_BillRemittController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustOutAttNote_BillRemittController</c> class is the controller class for the
/// <c>CustOutAttendNote_BillRemittance</c> report.
/// </summary>
public class CustOutAttNote_BillRemittController extends SrsReportRunController implements BatchRetryable
{
    private int currentSessionId;
    private int localNumOfSum;
    private int total;
    private str queryKey;
    private container recordContainer[];
    private container sumContainer[];
    private Counter numOfRecord;
    private CustTable custTable;
    private CompanyInfo companyInfo;
    private BankRemittanceFilesCust bankRemittanceFilesCust;
    private LedgerJournalTrans ledgerJournalTrans;
    private BankAccountTable bankAccountTable;
    private BankRemittanceType bankRemittanceType;
    private CustTrans custTrans;
    private TransDate duedate;
    private CurrencyCode sumCurrencyCode;
    private Amount sumAmount;
    private CustOutAttendingNote_BillRemittanceTmp custOutAttendingNote_BillRemittanceTmp;

    private const Timezone GMT = Timezone::GMT_DUBLIN_EDINBURGH_LISBON_LONDON;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankRemittanceFileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the BankRemittanceFileId.
    /// </summary>
    /// <returns>
    /// String type of <c>BankRemittanceFileId</c>.
    /// </returns>
    /// <remarks>
    /// The BankRemittanceFileId.
    /// </remarks>
    private BankRemittanceFileId bankRemittanceFileId()
    {
        return bankRemittanceFilesCust.JournalId ?
            bankRemittanceFilesCust.JournalId :
            ledgerJournalTrans.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the data records for the remittances.
    /// </summary>
    /// <param name="_arg">
    /// The arguments to use to initialize.
    /// </param>
    private void buildRecords(Args _arg)
    {
        ListEnumerator le;
        CustOutPaymRecord custOutPaymRecord;
        CustVendOutPaym custVendOutPaym;
        CustVendPaym custVendPaym;

        custVendOutPaym = _arg.caller();

        le = custVendOutPaym.getOutPaymRecords().getEnumerator();

        while (le.moveNext())
        {
            custOutPaymRecord = le.current();
            custVendPaym = custOutPaymRecord.parmCustVendPaym();
            this.fillReport([custVendPaym.ledgerJournalTrans(), custVendPaym.bankAccountTable()]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total of amount and the currency code.
    /// </summary>
    /// <param name="_currencyCode">
    /// The field on which the sum has to be calculated is defined.
    /// </param>
    /// <param name="_amountCur">
    /// The field on which the sum has to be calculated is defined.
    /// </param>
    private void calcSum(CurrencyCode _currencyCode, AmountCur _amountCur)
    {
        int counter;

        for (counter = 1; counter <= localNumOfSum + 1; counter++)
        {
            if (sumContainer[counter])
            {
                if (conPeek(sumContainer[counter], 1) == _currencyCode)
                {
                    sumContainer[counter] = conPoke(sumContainer[counter], 2, _amountCur + conPeek(sumContainer[counter], 2));
                    break;
                }
            }
            else
            {
                localNumOfSum++;
                sumContainer[counter] = [_currencyCode, _amountCur];
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the value of the city.
    /// </summary>
    /// <returns>
    /// The city.
    /// </returns>
    private AddressCity custCity()
    {
        return (select City from logisticsaddressZipCode
            where logisticsaddressZipCode.ZipCode == custTable.postalAddress().ZipCode).City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes the record into a container.
    /// </summary>
    /// <param name="_recordContainer">
    /// The container arg.
    /// </param>
    private void fillReport(container _recordContainer)
    {
        // Container is extpected to contain:
        // Pos 1: LedgerJournalTrans
        // Pos 2: CustBankAccount
        numOfRecord++;
        recordContainer[numOfRecord] = _recordContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustOutAttend_BillRemittanceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>custOutAttendingNote_BillRemittanceTmp</c> temporary table.
    /// </summary>
    private void insertCustOutAttend_BillRemittanceTmp()
    {
        custOutAttendingNote_BillRemittanceTmp.BankAccountName = bankAccountTable.Name;
        custOutAttendingNote_BillRemittanceTmp.BankAccountAddress = bankAccountTable.postalAddress().Address;
        custOutAttendingNote_BillRemittanceTmp.CompanyName = CompanyInfo::find().name();
        custOutAttendingNote_BillRemittanceTmp.CompanyAddress = companyInfo.postalAddress().Address;
        custOutAttendingNote_BillRemittanceTmp.CompanyPhone = companyInfo.phone();
        custOutAttendingNote_BillRemittanceTmp.CompanyTelefax = companyInfo.teleFax();
        custOutAttendingNote_BillRemittanceTmp.CompanyCoRegNum = companyInfo.CoRegNum;
        custOutAttendingNote_BillRemittanceTmp.AccountNum = custTrans.AccountNum;
        custOutAttendingNote_BillRemittanceTmp.CustName = custTable.name();
        custOutAttendingNote_BillRemittanceTmp.AmountCur = custTrans.AmountCur;
        custOutAttendingNote_BillRemittanceTmp.CurrencyCode = custTrans.CurrencyCode;
        custOutAttendingNote_BillRemittanceTmp.CustCounty = custTable.postalAddress().County;
        custOutAttendingNote_BillRemittanceTmp.CustCity = this.custCity();
        custOutAttendingNote_BillRemittanceTmp.BankRemittanceFileId = this.bankRemittanceFileId();
        custOutAttendingNote_BillRemittanceTmp.BankRemittanceType = bankRemittanceType;
        custOutAttendingNote_BillRemittanceTmp.DueDate = duedate;
        custOutAttendingNote_BillRemittanceTmp.Sessionid = currentSessionId;
        custOutAttendingNote_BillRemittanceTmp.Total = total;
        custOutAttendingNote_BillRemittanceTmp.SumAmount = sumAmount;
        custOutAttendingNote_BillRemittanceTmp.SumCurrencyCode = sumCurrencyCode;
        custOutAttendingNote_BillRemittanceTmp.BillOfExchangeID = custTrans.BillOfExchangeID;
        custOutAttendingNote_BillRemittanceTmp.DateOfCreation = DateTimeUtil::getToday(GMT);
        custOutAttendingNote_BillRemittanceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first one from the container.
    /// </summary>
    /// <param name="_counter">
    /// The element from which the value has to be taken is defined.
    /// </param>
    /// <returns>
    /// The container.
    /// </returns>
    private LedgerJournalTrans ledgerJournalTrans(Counter _counter)
    {
        return conPeek(recordContainer[_counter], 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides this method to change the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        Query reportQuery;

        this.processReport(this.parmArgs());
        reportQuery = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());

        SrsReportHelper::addParameterValueRangeToQuery(
            reportQuery,
            tableNum(CustOutAttendingNote_BillRemittanceTmp),
            fieldNum(CustOutAttendingNote_BillRemittanceTmp, Sessionid),
            int2str(currentSessionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <param name="_paramArg">
    /// The parameter is passed from the <c>main</c> method.
    /// </param>
    /// <remarks>
    /// Processes the business logic that is used by the <c>CustOutAttendingNote_PNRemittance</c> report.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void processReport(Args _paramArg)
    {
        LedgerJournalTrans ledgerJournalTransFieldList;
        LedgerJournalTrans ledgerJournalTransLocal;
        Counter numOfSum;
        int curRecord;
        NoYes ledgerJournalPosted;
        CustBillOfExchangeInvoice custBillOfExchangeInvoice;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        SpecTrans specTrans;
        CustTransOpen custTransOpen;
        args = _paramArg;

        currentSessionId = new xSession().sessionId();

        //Delete the previous records if there are existing record corresponding
        //to the current session or there are existing records
        //more than two days old.
        delete_from custOutAttendingNote_BillRemittanceTmp
            where((custOutAttendingNote_BillRemittanceTmp.Sessionid == currentSessionId)
                || (custOutAttendingNote_BillRemittanceTmp.DateOfCreation < DateTimeUtil::getToday(GMT) - 2));

        companyInfo = CompanyInfo::find();

        if (args.dataset() == tableNum(BankRemittanceFilesCust))
        {
            bankRemittanceFilesCust = args.record();

            select firstonly ledgerJournalTransLocal
                where ledgerJournalTransLocal.JournalNum == bankRemittanceFilesCust.JournalId;

            ledgerJournalPosted = ledgerJournalTransLocal.ledgerJournalTable().Posted;

            if (!ledgerJournalPosted)
            {
                numOfRecord = 0;
                ledgerJournalTrans = ledgerJournalTransLocal;
                bankAccountTable = BankAccountTable::find(ledgerJournalTransLocal.BankAccountId);
            }
        }

        if (args.dataset() == tableNum(LedgerJournalTrans))
        {
            numOfRecord = 0;
            ledgerJournalTrans = args.record();
            bankAccountTable = BankAccountTable::find(ledgerJournalTrans.BankAccountId);
        }
        else
        {
            if (args.dataset() == tableNum(BankRemittanceFilesCust))
            {
                if (ledgerJournalPosted)
                {
                    numOfRecord = 0;
                    bankRemittanceFilesCust = args.record();
                    bankAccountTable = BankAccountTable::find(bankRemittanceFilesCust.BankAccountId);
                }
            }
            else
            {
                if (numOfRecord >= 1)
                {
                    bankRemittanceFilesCust = BankRemittanceFilesCust::find((ledgerJournalTrans.BankRemittanceFileId));
                    bankAccountTable = BankAccountTable::find(bankRemittanceFilesCust.BankAccountId);
                }
            }
        }

        this.buildRecords(args);

        if (args.dataset() == tableNum(LedgerJournalTrans)
            || (args.dataset() == tableNum(BankRemittanceFilesCust)
                && !ledgerJournalPosted))
        {
            bankRemittanceType = ledgerJournalTrans.ledgerJournalTable().BankRemittanceType;

            while select TableId, RecId, Due from ledgerJournalTransFieldList
                    where ledgerJournalTransFieldList.JournalNum == ledgerJournalTrans.JournalNum
            {
                while select crossCompany RecId from specTrans
                    where specTrans.SpecCompany == ledgerJournalTransFieldList.DataAreaId
                        && specTrans.SpecTableId == ledgerJournalTransFieldList.TableId
                        && specTrans.SpecRecId == ledgerJournalTransFieldList.RecId
                    join RecId from custTransOpen
                        where custTransOpen.DataAreaId == specTrans.RefCompany
                            && custTransOpen.TableId == specTrans.RefTableId
                            && custTransOpen.RecId == specTrans.RefRecId
                        join custTrans
                            where custTrans.RecId == custTransOpen.RefRecId
                {
                    changecompany(custTrans.company())
                    {
                        custTable = CustTable::find(custTrans.AccountNum);
                    }

                    duedate = ledgerJournalTransFieldList.Due;

                    if (custTrans)
                    {
                        this.insertCustOutAttend_BillRemittanceTmp();
                    }
                }
            }
        }
        else
        {
            if (args.dataset() == tableNum(BankRemittanceFilesCust))
            {
                while select crossCompany custTrans
                    where custTrans.BankRemittanceFileId == bankRemittanceFilesCust.FileId
                        && custTrans.AmountCur > 0
                {
                    changecompany(custTrans.company())
                    {
                        custTable = CustTable::find(custTrans.AccountNum);

                        select maxof(DueDate) from custBillOfExchangeInvoice
                            where custBillOfExchangeInvoice.BillOfExchangeId == custTrans.BillOfExchangeID;

                        duedate = custBillOfExchangeInvoice.DueDate;

                        select firstonly BankRemittanceType from custBillOfExchangeTrans
                            where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID
                                  && custBillOfExchangeTrans.CustAccount == custTrans.AccountNum
                                  && custBillOfExchangeTrans.RemittedToBankAccountId == bankRemittanceFilesCust.BankAccountId
                                  && custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum;

                        bankRemittanceType = custBillOfExchangeTrans.BankRemittanceType;
                    }

                    this.calcSum(custTrans.CurrencyCode, custTrans.AmountCur);

                    if (custTrans)
                    {
                        this.insertCustOutAttend_BillRemittanceTmp();
                    }
                }
            }
            else
            {
                for (curRecord = 1; curRecord <= numOfRecord; curRecord++)
                {
                    if (conLen(recordContainer[curRecord]) > 0)
                    {
                        ledgerJournalTrans = this.ledgerJournalTrans(curRecord);
                        bankRemittanceFilesCust = BankRemittanceFilesCust::find(ledgerJournalTrans.BankRemittanceFileId);
                        bankAccountTable = BankAccountTable::find(bankRemittanceFilesCust.BankAccountId);

                        while select crossCompany RecId from specTrans
                            where specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
                                  && specTrans.SpecTableId == ledgerJournalTrans.TableId
                                  && specTrans.SpecRecId == ledgerJournalTrans.RecId
                            join RecId from custTransOpen
                            where custTransOpen.DataAreaId == specTrans.RefCompany
                                  && custTransOpen.TableId == specTrans.RefTableId
                                  && custTransOpen.RecId == specTrans.RefRecId
                            join custTrans
                            where custTrans.RecId == custTransOpen.RefRecId
                        {
                            changecompany(custTrans.company())
                            {
                                custTable = CustTable::find(custTrans.AccountNum);

                                select maxof(DueDate) from custBillOfExchangeInvoice
                                    where custBillOfExchangeInvoice.BillOfExchangeId == custTrans.BillOfExchangeID;

                                duedate = custBillOfExchangeInvoice.DueDate;
                                bankRemittanceType = ledgerJournalTrans.ledgerJournalTable().BankRemittanceType;
                            }

                            if (custTrans)
                            {
                                this.insertCustOutAttend_BillRemittanceTmp();
                            }
                        }
                    }
                }
            }
        }

        for (numOfSum = 1; numOfSum <= localNumOfSum; numOfSum++)
        {
            [sumCurrencyCode, sumAmount] = sumContainer[numOfSum];
            total = 1;
            this.insertCustOutAttend_BillRemittanceTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController controller = new CustOutAttNote_BillRemittController();
        controller.parmReportName(ssrsReportStr(CustOutAttendingNote_BillRemittance, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>