<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpAccountingDistributionEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes events raised by <c>AccountingDistribution</c>
/// </summary>
public class TrvExpAccountingDistributionEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializingSourceDocumentLineItemLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// An event handler delegate for initalizing <c>AccountingDistribution</c> based on a <c>SourceDocumentLineItem</c>.
    /// </summary>
    /// <param name="_eventArgs">
    /// Event arguments for <c>AccountingDistribution</c> events. Contains a <c>SourceDocumentLineItem</c> reference.
    /// </param>
    [SubscribesTo(tablestr(AccountingDistribution), staticdelegatestr(AccountingDistribution, initializingSourceDocumentLineItemLegalEntity))]
    public static void initializingSourceDocumentLineItemLegalEntity(AccountingDistributionEventArgs _eventArgs)
    {      
        TrvExpTrans trvExpTrans;
        
        SourceDocumentLineItem sourceDocumentLineItem = _eventArgs.sourceDocumentLineItem;
       
        if (sourceDocumentLineItem is SourceDocumentLineItemITax)
        {
            SourceDocumentLineItemITax iTax = sourceDocumentLineItem as SourceDocumentLineItemITax;
            RefRecId sourceDocumentLineExpense = sourceDocumentLineItem.parmParentSourceDocumentLine().RecId;
            
            trvExpTrans = TrvExpTrans::findBySourceDocumentLine(sourceDocumentLineExpense);
           
            if (trvExpTrans && TrvExpAccountingDistributionEventHandler::doRetrieveInterCompanyLegalEntity(trvExpTrans))
            {
                _eventArgs.legalEntityRecId = CompanyInfo::findDataArea(trvExpTrans.InterCompanyLE).RecId;
            }
        }
        else if (sourceDocumentLineItem is SourceDocumentLineItemIExpenseReport)
        {
            SourceDocumentLineItemIExpenseReport sourceDocumentLineItemIExpenseReport = sourceDocumentLineItem as SourceDocumentLineItemIExpenseReport;

            trvExpTrans = sourceDocumentLineItemIExpenseReport.parmExpenseLine() as TrvExpTrans;

            if (TrvExpAccountingDistributionEventHandler::doRetrieveInterCompanyLegalEntity(trvExpTrans))
            {
                _eventArgs.legalEntityRecId = CompanyInfo::findDataArea(trvExpTrans.InterCompanyLE).RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRetrieveInterCompanyLegalEntity</Name>
				<Source><![CDATA[
    private static boolean doRetrieveInterCompanyLegalEntity(TrvExpTrans _trvExpTrans)
    {
        boolean doRetrieveInterCompanyLegalEntity;

        if (_trvExpTrans)
        {
            if (_trvExpTrans.InterCompanyLE &&
                _trvExpTrans.InterCompanyLE != _trvExpTrans.ReferenceDataAreaId &&
                _trvExpTrans.ProjId == '' &&
                !( _trvExpTrans.ExpType == TrvExpType::Personal && _trvExpTrans.doesSplitLineHasParentExpWithProj(_trvExpTrans)) &&
                TrvParameters::find().UseInterCompanyExpense)
            {
                doRetrieveInterCompanyLegalEntity = true;
            }
        }

        return doRetrieveInterCompanyLegalEntity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>