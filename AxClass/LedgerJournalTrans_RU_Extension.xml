<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_RU_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension methods for the <c>LedgerJournalTrans</c> class.
/// </summary>
public static class LedgerJournalTrans_RU_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankPaymentOrderJour_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank payment order journal for a given journal line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>The bank payment ourder journal.</returns>
    public static BankPaymentOrderJour_RU bankPaymentOrderJour_RU(LedgerJournalTrans _ledgerJournalTrans, boolean _forUpdate = false)
    {
        return BankPaymentOrderJour_RU::find(_ledgerJournalTrans.JournalNum,
                                             _ledgerJournalTrans.Voucher,
                                             _ledgerJournalTrans.LineNum,
                                             _ledgerJournalTrans.AccountType,
                                             _ledgerJournalTrans.TransDate,
                                             _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFacture_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a journal line for a given fracture line.
    /// </summary>
    /// <param name = "_trans">The fracture line.</param>
    /// <returns>The journal line.</returns>
    public static LedgerJournalTrans findFacture_RU(FactureTrans_RU _trans)
    {
        LedgerJournalTrans ledgerJournalTrans;

        if (_trans                                                               &&
            (_trans.Module         == FactureModule_RU::TaxCorrectionPurch       ||
             _trans.Module         == FactureModule_RU::TaxCorrectionSales       ||
             _trans.Module         == FactureModule_RU::TaxCorrectionPurch_Cust  ||
             _trans.Module         == FactureModule_RU::TaxCorrectionSales_Vend) &&
            _trans.FactureLineType == FactureLineType_RU::TaxCorrection)
        {
            select firstonly ledgerJournalTrans
                where ledgerJournalTrans.LineNum    == _trans.InvoiceLineNum &&
                      ledgerJournalTrans.JournalNum == _trans.InvoiceId      &&
                      ledgerJournalTrans.RecId      == _trans.MarkupRefRecId;
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBankAmount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the bank amount.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name = "_currencyCode">The currency code.</param>
    /// <returns>The bank amount.</returns>
    public static AmountCur calcBankAmount_RU(LedgerJournalTrans _ledgerJournalTrans, CurrencyCode _currencyCode)
    {
        return CurrencyExchangeHelper::curAmount(_ledgerJournalTrans.calcAmountMST(), _currencyCode, _ledgerJournalTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountExclTax_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the line amoutn excluding tax.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name = "_taxInCostPrice">A Boolean value that indicates whether tax is included in the cost price; optional.</param>
    /// <returns>The amount.</returns>
    public static Amount calcLineAmountExclTax_RU(LedgerJournalTrans _ledgerJournalTrans, boolean _taxInCostPrice = true)
    {
        TaxCalculation      taxCalculation;
        Amount              lineAmount;
        Amount              taxAmount;
        LedgerJournalTable  ledgerJournalTable;

        taxCalculation = LedgerJournalTrans::getTaxInstance(_ledgerJournalTrans.JournalNum, _ledgerJournalTrans.Voucher, _ledgerJournalTrans.Invoice, false, _ledgerJournalTrans);
        taxAmount      = taxCalculation.totalTaxAmountSingleLine(_ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId, false, false);

        lineAmount     = abs(_ledgerJournalTrans.amount());
        lineAmount    -= abs(taxAmount);

        if (! _taxInCostPrice)
        {
            return lineAmount;
        }

        ledgerJournalTable = _ledgerJournalTrans.ledgerJournalTable();

        if (TaxUncommitted::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, _ledgerJournalTrans.Voucher, _ledgerJournalTrans.Invoice))
        {
            taxAmount = TaxUncommitted::getActualTaxInCostPriceForSourceLine(_ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId);
        }
        else
        {
            taxCalculation = LedgerJournalTrans::getTaxInstance(_ledgerJournalTrans.JournalNum, _ledgerJournalTrans.Voucher, _ledgerJournalTrans.Invoice, false, _ledgerJournalTrans);
            taxAmount = taxCalculation.totalTaxInCostPrice(_ledgerJournalTrans.RecId);
        }

        lineAmount += abs(taxAmount);
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks agreement of the current <c>LedgerJournalTrans</c> record depending on account type.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name="_accountOffsetaccount">
    ///     Account type, account or offset account; optional.
    /// </param>
    /// <returns>
    ///     true if check is passed ok; otherwise, false.
    /// </returns>
    public static boolean checkAgreement_RU(LedgerJournalTrans _ledgerJournalTrans, AccountOffsetaccount _accountOffsetaccount = AccountOffsetaccount::Account)
    {
        SalesAgreementHeader salesAgreementHeader;
        PurchAgreementHeader purchAgreementHeader;
        AgreementId_RU       agreementId;
        LedgerJournalACType  accountType;
        CustVendAC           custVendAC;
        CompanyId            companyId;
        boolean ok = true;

        if (_accountOffsetaccount == AccountOffsetaccount::Account)
        {
            accountType = _ledgerJournalTrans.AccountType;
            custVendAC  = _ledgerJournalTrans.parmAccount();
            agreementId = _ledgerJournalTrans.AccountAgreementId_RU;

            companyId = _ledgerJournalTrans.AgreementCompany_RU ? _ledgerJournalTrans.AgreementCompany_RU : curext();
        }
        else if (_accountOffsetaccount == AccountOffsetaccount::OffsetAccount)
        {
            accountType = _ledgerJournalTrans.OffsetAccountType;
            custVendAC  = _ledgerJournalTrans.parmOffsetAccount();
            agreementId = _ledgerJournalTrans.OffsetAccountAgreementId_RU;

            companyId = _ledgerJournalTrans.OffsetAgreementCompany_RU ? _ledgerJournalTrans.OffsetAgreementCompany_RU : curext();
        }

        if (agreementId)
        {
            if (!xDataArea::exist(companyId))
            {
                throw error(strFmt("@SYS10666", companyId));
            }

            changecompany(companyId)
            {
                if (accountType == LedgerJournalACType::Cust)
                {
                    salesAgreementHeader = SalesAgreementHeader::findAgreementId(agreementId);

                    if (!salesAgreementHeader.canReleaseAgreement(_ledgerJournalTrans.TransDate))
                    {
                        ok = checkFailed("@SYS103075");
                    }

                    if (salesAgreementHeader.CustAccount != custVendAC)
                    {
                        ok = checkFailed(strFmt("@SYS112224",
                            salesAgreementHeader.SalesNumberSequence, "@SYS309959", tableId2pname(tableNum(SalesAgreementHeader))));
                    }
                }
                else if (accountType == LedgerJournalACType::Vend)
                {
                    purchAgreementHeader = PurchAgreementHeader::findAgreementId(agreementId);

                    if (!purchAgreementHeader.canReleaseAgreement(_ledgerJournalTrans.TransDate))
                    {
                        ok = checkFailed("@SYS103075");
                    }

                    if (purchAgreementHeader.VendAccount != custVendAC)
                    {
                        ok = checkFailed(strFmt("@SYS112224",
                            purchAgreementHeader.PurchNumberSequence, "@SYS309960", tableId2pname(tableNum(PurchAgreementHeader))));
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowEditPaymentOrder_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if payment order field allows edit.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name = "_orig">A Boolean value that indicates if its the original payment order; optional.</param>
    /// <returns>true if it allows edit; otherwise, false.</returns>
    public static boolean checkAllowEditPaymentOrder_RU(LedgerJournalTrans _ledgerJournalTrans, boolean _orig)
    {
        LedgerJournalTrans          ledgerJournalTrans_orig, ledgerJournalTransLocal;
        BankPaymentOrderJour_RU     bankPaymentOrderJour;
        CustVendPaymJournalFee      journalFee;

        ledgerJournalTrans_orig.selectLocked(false);

        select firstonly ledgerJournalTrans_orig
            index hint NumVoucherIdx
            where ledgerJournalTrans_orig.JournalNum    == _ledgerJournalTrans.JournalNum          &&
                  ledgerJournalTrans_orig.Voucher       == _ledgerJournalTrans.Voucher             &&
                  ledgerJournalTrans_orig.PaymentStatus != CustVendPaymStatus::None &&
                  ledgerJournalTrans_orig.BankChequeNum;

        if (ledgerJournalTrans_orig)
        {
            bankPaymentOrderJour = _orig ? ledgerJournalTrans_orig.bankPaymentOrderJour_RU() :
                                           _ledgerJournalTrans.bankPaymentOrderJour_RU();

            if (! bankPaymentOrderJour) // it's not russian payment order
            {
                return false;
            }
            else
            {
                select count(RecId) from ledgerJournalTransLocal
                    index hint NumVoucherIdx
                    where ledgerJournalTransLocal.JournalNum == _ledgerJournalTrans.JournalNum &&
                          ledgerJournalTransLocal.Voucher    == _ledgerJournalTrans.Voucher
                notexists join journalFee
                    where journalFee.FeeTransRecId == ledgerJournalTransLocal.RecId;

                if (ledgerJournalTransLocal.RecId > 1)
                {
                    return false;
                }
                if (ledgerJournalTrans_orig.TransDate != _ledgerJournalTrans.TransDate &&
                    ledgerJournalTrans_orig.SettleVoucher == SettlementType::SelectedTransact)
                {
                    return false;
                }
                if (_ledgerJournalTrans.TransDate < bankPaymentOrderJour.PaymentTransDate)
                {
                    return checkFailed("@GLS108857");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRDefferalsClosingDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the <c>RDefferals</c> closing date.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    public static boolean checkRDefferalsClosingDate_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean                             allOk = true;
        LedgerJournalTrans_RDeferrals       ledgerJournalTrans_RDeferrals;
        PurchBookVATProcessLogTransOper_RU  processLogTransOper;
        FromDate                            bookFromDate;
        ToDate                              bookToDate;

        if (_ledgerJournalTrans.TransactionType == LedgerTransType::RDeferrals)
        {
            ledgerJournalTrans_RDeferrals = LedgerJournalTrans_RDeferrals::find(_ledgerJournalTrans.RecId);

            if (RDeferralsTable::find(ledgerJournalTrans_RDeferrals.DeferralsId).vatRefundingMethod == RDeferralsVATRefundingMethod::Proportional)
            {
                if (! PurchBookTable_RU::canProcessDate(_ledgerJournalTrans.TransDate))
                {
                    allOk = checkFailed(strFmt("@GLS101156", _ledgerJournalTrans.TransDate));
                }

                if (allOk && ledgerJournalTrans_RDeferrals.ToFromRecId)
                {
                    [bookFromDate, bookToDate] = BookDataCalc_RU::datePeriodBook(_ledgerJournalTrans.TransDate);

                    select firstonly RecId, rDeferralsClosedAmount from processLogTransOper
                        where processLogTransOper.rDeferralsTransRecId  == ledgerJournalTrans_RDeferrals.ToFromRecId &&
                              processLogTransOper.CanceledRefRecId      == 0                                         &&
                              processLogTransOper.TransDate             >= bookFromDate                              &&
                              processLogTransOper.TransDate             <= bookToDate;

                    if (allOk && processLogTransOper.rDeferralsClosedAmount)
                    {
                        allOk = checkFailed("@GLS114352");
                    }
                }
            }
        }
        return allOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAgreementDimension_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears agreement dimension of the current <c>LedgerJournalTrans</c> record depending on account type.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name = "_accountOffsetaccount">
    ///     Account type, account or offset account; optional.
    /// </param>
    public static void clearAgreementDimension_RU(LedgerJournalTrans _ledgerJournalTrans, AccountOffsetaccount _accountOffsetaccount = AccountOffsetaccount::Account)
    {
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        DimensionDefault defaultDimension;
        RecId dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();

        void clearDefaultDimension(AccountOffsetaccount _accountOffsetaccountLocal)
        {
            if (_accountOffsetaccountLocal == AccountOffsetaccount::Account)
            {
                if (_ledgerJournalTrans.DefaultDimension)
                {
                    dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(_ledgerJournalTrans.DefaultDimension);
                    dimAttrValueSetStorage.removeDimensionAttribute(dimAttrRecId);
                    _ledgerJournalTrans.DefaultDimension = dimAttrValueSetStorage.save();
                }
            }
            else
            if (_accountOffsetaccountLocal == AccountOffsetaccount::OffsetAccount)
            {
                if (_ledgerJournalTrans.OffsetDefaultDimension)
                {
                    dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(_ledgerJournalTrans.OffsetDefaultDimension);
                    dimAttrValueSetStorage.removeDimensionAttribute(dimAttrRecId);
                    _ledgerJournalTrans.OffsetDefaultDimension = dimAttrValueSetStorage.save();
                }
            }
        }

        void clearOffsetLedgerDimension()
        {
            defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension);
            if (defaultDimension)
            {
                dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(defaultDimension);
                dimAttrValueSetStorage.removeDimensionAttribute(dimAttrRecId);
                defaultDimension = dimAttrValueSetStorage.save();

                _ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension), defaultDimension);
            }
        }

        if (dimAttrRecId)
        {
            clearDefaultDimension(_accountOffsetaccount);

            if (_accountOffsetaccount == AccountOffsetaccount::Account)
            {
                if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    clearOffsetLedgerDimension();
                }
                else
                if (_ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Cust
                && _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Vend
                && _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Project)
                {
                    clearDefaultDimension(AccountOffsetaccount::OffsetAccount);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimensionDisplay_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays dimensions of the current <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    ///     <c>DimensionDisplayValue</c> filled with dimensions of the current <c>LedgerJournalTrans</c> record.
    /// </returns>
    public static DimensionDisplayValue defaultDimensionDisplay_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        DimensionDisplayValue           ret;
        DimensionAttributeValueSetItem  dimensionAttrValueSetItem;
        str                             accountDelimiter = DimensionParameters::getDimensionSegmentDelimiter();

        switch (_ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Ledger:
                ret = LedgerDimensionFacade::getDisplayValueForLedgerDimension(_ledgerJournalTrans.LedgerDimension);
                break;
            default:
                while select DisplayValue from dimensionAttrValueSetItem
                    where dimensionAttrValueSetItem.DimensionAttributeValueSet == _ledgerJournalTrans.DefaultDimension
                {
                    ret += (ret ? accountDelimiter : '') + dimensionAttrValueSetItem.DisplayValue;
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBankPaymentOrderJour_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the bank payment order journal exists.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if the payment order exists; otherwise, false.</returns>
    public static boolean existBankPaymentOrderJour_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        return (_ledgerJournalTrans.bankPaymentOrderJour_RU().RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureModule_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fracture module for the journal line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The fracture module.</returns>
    public static FactureModule_RU factureModule_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        return FactureTrans_RU::findLedgerJournalTrans(_ledgerJournalTrans.JournalNum,
                                                       _ledgerJournalTrans.LineNum,
                                                       _ledgerJournalTrans.RecId,
                                                       false).Module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullyFactured_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the journal line is fully fractured.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name = "_skipTaxCorrectionCheck">A boolean indicating if a correction check should be skipped; optional.</param>
    /// <returns>true if fully fractured; otherwise, false.</returns>
    public static boolean fullyFactured_RU(LedgerJournalTrans _ledgerJournalTrans, boolean _skipTaxCorrectionCheck = false, FactureBook_RU _book = FactureBook_RU::Any)
    {
        boolean ret = _skipTaxCorrectionCheck || _ledgerJournalTrans.isTaxCorrection_RU(false, _book);

        return  ret && FactureTrans_RU::findLedgerJournalTrans(_ledgerJournalTrans.JournalNum,
                                                               _ledgerJournalTrans.LineNum,
                                                               _ledgerJournalTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset Id for the journal line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The asset Id.</returns>
    public static RAssetId getAssetId_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        RAssetId rAssetId;

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::FixedAssets_RU)
        {
            rAssetId = _ledgerJournalTrans.parmAccount();
        }
        else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::FixedAssets_RU)
        {
            rAssetId = _ledgerJournalTrans.parmOffsetAccount();
        }

        return rAssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDocId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cash document Id for the journal line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The cash document id.</returns>
    public static RCashDocId getCashDocId_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        RCashDocId rCashDocId;

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::RCash)
        {
            rCashDocId = _ledgerJournalTrans.parmAccount();
        }
        else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::RCash)
        {
            rCashDocId = _ledgerJournalTrans.parmOffsetAccount();
        }

        return rCashDocId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeferralsId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the deferrals Id for the given journal.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The Deferrals Id.</returns>
    public static RDeferralsId getDeferralsId_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        RDeferralsId rDeferralsId;

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::RDeferrals)
        {
            rDeferralsId = _ledgerJournalTrans.parmAccount();
        }
        else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::RDeferrals)
        {
            rDeferralsId = _ledgerJournalTrans.parmOffsetAccount();
        }

        return rDeferralsId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAgreementDimension_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inits agreement dimension of the current <c>LedgerJournalTrans</c> record from <c>AgreementHeaderExt_RU</c> record depending on account type.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name="_agreementHeaderExt">
    ///     The <c>AgreementHeaderExt_RU</c> record.
    /// </param>
    /// <param name="_accountOffsetaccount">
    ///     Account type, account or offset account; optional.
    /// </param>
    /// <param name="_onlyAgreementDimension">
    ///     Init only agreement dimension.
    /// </param>
    public static void initAgreementDimension_RU(LedgerJournalTrans _ledgerJournalTrans,
        AgreementHeaderExt_RU _agreementHeaderExt,
        AccountOffsetaccount _accountOffsetaccount = AccountOffsetaccount::Account,
        boolean _onlyAgreementDimension = false)
    {
        void initDefaultDimension(AccountOffsetaccount _accountOffsetAccountLocal)
        {
            if (_accountOffsetAccountLocal == AccountOffsetaccount::Account)
            {
                if (_onlyAgreementDimension)
                {
                    _ledgerJournalTrans.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(_agreementHeaderExt.RecId, _ledgerJournalTrans.DefaultDimension);
                }
                else
                {
                    _ledgerJournalTrans.DefaultDimension = AgreementHeaderExt_RU::agreementHeader(_agreementHeaderExt.RecId).DefaultDimension;
                }
            }
            else
            if (_accountOffsetAccountLocal == AccountOffsetaccount::OffsetAccount)
            {
                if (_onlyAgreementDimension)
                {
                    _ledgerJournalTrans.OffsetDefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(_agreementHeaderExt.RecId, _ledgerJournalTrans.OffsetDefaultDimension);
                }
                else
                {
                    _ledgerJournalTrans.OffsetDefaultDimension = AgreementHeaderExt_RU::agreementHeader(_agreementHeaderExt.RecId).DefaultDimension;
                }
            }
        }

        void initOffsetLedgerDimension()
        {
            _ledgerJournalTrans.OffsetDefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(_agreementHeaderExt.RecId,
                LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension));

            _ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension), _ledgerJournalTrans.OffsetDefaultDimension);
        }

        if (_agreementHeaderExt)
        {
            initDefaultDimension(_accountOffsetaccount);

            if (_accountOffsetaccount == AccountOffsetaccount::Account)
            {
                if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    initOffsetLedgerDimension();
                }
                else
                if (_ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Cust
                && _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Vend
                && _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Project)
                {
                    initDefaultDimension(AccountOffsetaccount::OffsetAccount);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBankClientPayment_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inititialize from bank client payments.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name = "_paymentTable">The payment header.</param>
    public static void initFromBankClientPayment_RU(LedgerJournalTrans _ledgerJournalTrans, BankClientPayment_RU _paymentTable)
    {
        _ledgerJournalTrans.parmAccount(_paymentTable.CustVendAC, _paymentTable.ledgerJournalACType());
        _ledgerJournalTrans.TransDate                    = _paymentTable.TransDate;
        _ledgerJournalTrans.Txt                          = _paymentTable.PaymentPurpose;
        _ledgerJournalTrans.PaymentNotes                 = _paymentTable.PaymentPurpose;
        if (_paymentTable.PaymentDirection == BankClientPaymentDirection_RU::Incoming)
        {
            _ledgerJournalTrans.AmountCurCredit          = _paymentTable.AmountCur;
        }
        else
        {
            _ledgerJournalTrans.AmountCurDebit           = _paymentTable.AmountCur;
        }
        _ledgerJournalTrans.parmOffsetAccount(_paymentTable.AccountID, LedgerJournalACType::Bank);
        _ledgerJournalTrans.DefaultDimension             = _paymentTable.DefaultDimension;
        _ledgerJournalTrans.CurrencyCode                 = _paymentTable.CurrencyCode;
        _ledgerJournalTrans.BankCurrencyDealCourse_RU    = _paymentTable.BankCurrencyDealCourse;
        _ledgerJournalTrans.TransactionType              = LedgerTransType::Payment;
        _ledgerJournalTrans.BankTransType                = _paymentTable.BankTransactionType;
        _ledgerJournalTrans.TransferCurrency_RU          = _paymentTable.TransferCurrencyCode;
        _ledgerJournalTrans.Prepayment                   = _paymentTable.Prepayment;

        if (_ledgerJournalTrans.Prepayment)
        {
            _ledgerJournalTrans.TaxGroup                     = _paymentTable.TaxGroup;
            _ledgerJournalTrans.TaxItemGroup                 = _paymentTable.TaxItemGroup;

            if (_paymentTable.ledgerJournalACType() == LedgerJournalACType::Cust)
            {
                _ledgerJournalTrans.CustFactureAutoCreate_RU = CustParameters::find().PrepaymentFactureAutoCreate_RU;
                _ledgerJournalTrans.UseOriginalDocumentAsFacture_RU = CustTable::find(_paymentTable.CustVendAC).UseOriginalDocumentAsFacture_RU;
            }
        }

        if (_paymentTable.ExchRate == 0.0)
        {
            _ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(_paymentTable.CurrencyCode);
        }
        else
        {
            _ledgerJournalTrans.ExchRate        = _paymentTable.ExchRate;
        }

        _ledgerJournalTrans.PaymentStatus       = CustVendPaymStatus::Confirmed;

        if (_paymentTable.PostingProfile)
        {
            _ledgerJournalTrans.PostingProfile      = _paymentTable.PostingProfile;
        }

        _ledgerJournalTrans.AccountAgreementId_RU = AgreementHeaderExt_RU::find(_paymentTable.AgreementHeaderExt).AgreementId;
        _ledgerJournalTrans.DocumentDate          = _paymentTable.DocumentDate;
        _ledgerJournalTrans.DocumentNum           = _paymentTable.DocumentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invent profile type.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>Invent profile type</returns>
    public static InventProfileType_RU inventProfileType_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        return CustVendTrans::inventProfileType_RU(_ledgerJournalTrans.CommProfileType_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashTransaction_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the journal is a cash transaction.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if is a cash transaction; otherwise, false.</returns>
    public static boolean isCashTransaction_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::RCash ||
            _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::RCash)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeferralsTransaction_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the journal line is a deferral transaction.
    /// </summary>
    /// <returns>true if a deferral transaction; otherwise, false.</returns>
    public static boolean isDeferralsTransaction_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::RDeferrals ||
            _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::RDeferrals)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedAssetsTransaction_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if journal line is a fixed asset transaction.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if fixed asset transaction; otherwise, false.</returns>
    public static boolean isFixedAssetsTransaction_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::FixedAssets_RU ||
            _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::FixedAssets_RU)
        {
            return true;
        }
          
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonTaxablePrepayment_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if prepayment is nontaxable.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if prepayment is nontaxable; otherwise, false.</returns>
    public static boolean isNonTaxablePrepayment_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        return _ledgerJournalTrans.Prepayment &&
              (_ledgerJournalTrans.CommProfileType_RU == CommProfileType_RU::CommissionAgent ||
               _ledgerJournalTrans.CommProfileType_RU == CommProfileType_RU::CommissionPrincipalAgent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxCorrection_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if journal line is a tax correction fracture.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name = "_withInfo">A boolean indicating if a error message should be thrown; optional.</param>
    /// <returns>true if tax correction; otherwise, false.</returns>
    public static boolean isTaxCorrection_RU(LedgerJournalTrans _ledgerJournalTrans, boolean _withInfo = true, FactureBook_RU _book = FactureBook_RU::Any)
    {
        TaxTable                        taxTable;
        TaxLedgerAccountGroup           ledgerGroup;
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount, offsetLedgerDimensionDefaultAccount;

        boolean     ret = true;

        if (_ledgerJournalTrans.AccountType != LedgerJournalACType::Ledger)
        {
            ret = _withInfo ? checkFailed(strFmt("@GLS104454", LedgerJournalACType::Ledger)) : false;
        }

        if (! _ledgerJournalTrans.TaxCode || ! TaxTable::exist(_ledgerJournalTrans.TaxCode))
        {
            ret = _withInfo ? checkFailed("@GLS102565") : false;
        }

        if (ret)
        {
            taxTable = TaxTable::find(_ledgerJournalTrans.TaxCode);

            switch (taxTable.TaxType_W)
            {
                case TaxType_W::VAT, TaxType_W::VATReduced, TaxType_W::VATZero :
                    break;

                default                     :
                    ret = _withInfo ? checkFailed("@GLS102568") : false;
            }
        }

        if (ret)
        {
            ledgerGroup = TaxLedgerAccountGroup::find(taxTable.TaxAccountGroup);

            ledgerDimensionDefaultAccount       = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_ledgerJournalTrans.LedgerDimension);
            offsetLedgerDimensionDefaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension);

            switch (ledgerDimensionDefaultAccount)
            {
                case ledgerGroup.TaxOutgoingLedgerDimension           :
                case ledgerGroup.TaxIncomingLedgerDimension           :
                case ledgerGroup.TaxIncomingPaymentLedgerDimension_RU :
                    break;
                case ledgerGroup.TaxOutgoingOffsetLedgerDimension_RU :
                    if (offsetLedgerDimensionDefaultAccount == ledgerGroup.TaxOutgoingLedgerDimension)
                    {
                        break;
                    }
                default                                :
                    ret = _withInfo ? checkFailed("@GLS102567") : false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVatTaxAgentAuthorityPayment_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if journal line has a VAT tax agent payment.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if payment; otherwise, false.</returns>
    public static boolean isVatTaxAgentAuthorityPayment_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        return (_ledgerJournalTrans.vatTaxAgentVendAccount_RU && _ledgerJournalTrans.TaxCode &&
                _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVATTaxAgentPaymentFromVendorFunds_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if journal line has VAT tax agent payment from vendor funds.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if payment; otherwise, false.</returns>
    public static boolean isVATTaxAgentPaymentFromVendorFunds_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxCode taxCode;

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend &&
            _ledgerJournalTrans.isVatTaxAgentPrepayment_RU()             &&
            _ledgerJournalTrans.TaxGroup                                 &&
            _ledgerJournalTrans.TaxItemGroup)
        {
            taxCode = TaxTable::vatCode_RU(_ledgerJournalTrans.TaxGroup, _ledgerJournalTrans.TaxItemGroup);

            if (taxCode && TaxTable::find(taxCode).vatChargeSource_RU == VATChargeSource_RU::VendorFunds)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVatTaxAgentPrepayment_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if journal line has VAT tax agent payment.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if payment; otherwise, false.</returns>
    public static boolean isVatTaxAgentPrepayment_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        return _ledgerJournalTrans.Prepayment && VendTable::find(_ledgerJournalTrans.parmAccount()).vatTaxAgent_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationTax_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal lines posting layer.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The posting layer.</returns>
    public static CurrentOperationsTax operationTax_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (LedgerJournalTrans_RAsset::find(_ledgerJournalTrans.RecId).StandardId)
        {
            return RAssetStandardTable::find(LedgerJournalTrans_RAsset::find(_ledgerJournalTrans.RecId).StandardId).CurrentOperationsTax;
        }
        else if (LedgerJournalTrans_RDeferrals::find(_ledgerJournalTrans.RecId).BookId)
        {
            return RDeferralsBookTable::find(LedgerJournalTrans_RDeferrals::find(_ledgerJournalTrans.RecId).BookId).CurrentOperationsTax;
        }

        return _ledgerJournalTrans.ledgerJournalTable().CurrentOperationsTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentOrderBudgetTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment order budget lines for the journal line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name = "_forUpdate">A boolean indicating if this record will be updated; optional.</param>
    /// <returns>The payment order budget lines.</returns>
    public static PaymentOrderBudgetTrans_RU paymentOrderBudgetTrans_RU(LedgerJournalTrans _ledgerJournalTrans, boolean _forUpdate = false)
    {
        return PaymentOrderBudgetTrans_RU::find(_ledgerJournalTrans.JournalNum,
                                                _ledgerJournalTrans.LineNum,
                                                _ledgerJournalTrans.Voucher,
                                                _ledgerJournalTrans.AccountType,
                                                _ledgerJournalTrans.TransDate,
                                                _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetTransDeleteLink_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// The pay sheet delete link.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    public static void paySheetTransDeleteLink_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        RPaySheetTrans    paySheetTrans;

        if (_ledgerJournalTrans.ledgerJournalTable().Posted)
        {
            return;
        }

        switch (_ledgerJournalTrans.rCashPayTransType)
        {
            case RCashPayLedgerTransType::Bank :
                while select forupdate paySheetTrans
                    where paySheetTrans.JournalNum == _ledgerJournalTrans.JournalNum
                {
                    paySheetTrans.JournalNum        = '';
                    paySheetTrans.PayVoucherBank    = '';
                    paySheetTrans.PayDateBank       = dateNull();
                    paySheetTrans.update();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>represPersonCard_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Repress the person card.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The payee document.</returns>
    public static PayeeDocument_RU represPersonCard_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        return conPeek(RCashTransType::represPersonNameCard(_ledgerJournalTrans.rCashDocRepresPersonId,
                                                            _ledgerJournalTrans.AccountType == LedgerJournalACType::RCash ? _ledgerJournalTrans.OffsetAccountType : _ledgerJournalTrans.AccountType,
                                                            _ledgerJournalTrans.AccountType == LedgerJournalACType::RCash ? _ledgerJournalTrans.parmOffsetAccount() : _ledgerJournalTrans.parmAccount(),
                                                            _ledgerJournalTrans.rCashDocRepresType),
                       2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>represPersonName_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Repress the person name.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The employee name.</returns>
    public static EmplName represPersonName_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalAC offsetAccount;

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::RCash && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            offsetAccount = MainAccount::findByLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension).MainAccountId;
        }
        else
        {
            offsetAccount = _ledgerJournalTrans.parmOffsetAccount();
        }

        return conPeek(RCashTransType::represPersonNameCard(_ledgerJournalTrans.rCashDocRepresPersonId,
                                                            _ledgerJournalTrans.AccountType == LedgerJournalACType::RCash ? _ledgerJournalTrans.OffsetAccountType : _ledgerJournalTrans.AccountType,
                                                            _ledgerJournalTrans.AccountType == LedgerJournalACType::RCash ? offsetAccount : _ledgerJournalTrans.parmAccount(),
                                                            _ledgerJournalTrans.rCashDocRepresType),
                       1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementEmptyValues_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears agreement or ofsset agreement of the current <c>LedgerJournalTrans</c> record depending on account type.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <param name="_accountOffsetaccount">
    ///     Account type, account or offset account; optional.
    /// </param>
    public static void setAgreementEmptyValues_RU(LedgerJournalTrans _ledgerJournalTrans, AccountOffsetaccount _accountOffsetaccount = AccountOffsetaccount::Account)
    {
        if (_accountOffsetaccount == AccountOffsetaccount::Account)
        {
            if (_ledgerJournalTrans.AccountAgreementId_RU)
            {
                _ledgerJournalTrans.AccountAgreementId_RU = '';
                _ledgerJournalTrans.clearAgreementDimension_RU(_accountOffsetaccount);
            }
        }
        else if (_accountOffsetaccount == AccountOffsetaccount::OffsetAccount)
        {
            if (_ledgerJournalTrans.OffsetAccountAgreementId_RU)
            {
                _ledgerJournalTrans.OffsetAccountAgreementId_RU = '';
                _ledgerJournalTrans.clearAgreementDimension_RU(_accountOffsetaccount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankPaymentOrderJour_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the bank payment order journal.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    public static void updateBankPaymentOrderJour_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankPaymentOrderJour_RU     bankPaymentOrderJour;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            if (_ledgerJournalTrans.BankChequeNum                                   &&
                ((_ledgerJournalTrans.AccountType   == LedgerJournalACType::Cust)  ||
                 (_ledgerJournalTrans.AccountType   == LedgerJournalACType::Vend)) &&
                ((_ledgerJournalTrans.TransDate     != _ledgerJournalTrans.orig().TransDate)      ||
                 (_ledgerJournalTrans.LineNum       != _ledgerJournalTrans.orig().LineNum)        ||
                 (_ledgerJournalTrans.AccountType   != _ledgerJournalTrans.orig().AccountType)    ||
                 (_ledgerJournalTrans.JournalNum    != _ledgerJournalTrans.orig().JournalNum)     ||
                 (_ledgerJournalTrans.Voucher       != _ledgerJournalTrans.orig().Voucher)))
            {
                bankPaymentOrderJour = _ledgerJournalTrans.orig().bankPaymentOrderJour_RU(true);

                if (bankPaymentOrderJour)
                {
                    bankPaymentOrderJour.initFromLedgerJournalTrans(_ledgerJournalTrans);
                    bankPaymentOrderJour.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentOrderBudgetTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the payment order budget lines.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    public static void updatePaymentOrderBudgetTrans_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        PaymentOrderBudgetTrans_RU paymentOrderBudgetTrans;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            if ((_ledgerJournalTrans.orig().JournalNum != _ledgerJournalTrans.JournalNum) ||
                (_ledgerJournalTrans.orig().LineNum    != _ledgerJournalTrans.LineNum)    ||
                (_ledgerJournalTrans.orig().Voucher    != _ledgerJournalTrans.Voucher)    ||
                (_ledgerJournalTrans.orig().TransDate  != _ledgerJournalTrans.TransDate)  ||
                (_ledgerJournalTrans.orig().LedgerDimension != _ledgerJournalTrans.LedgerDimension))
            {
                paymentOrderBudgetTrans = PaymentOrderBudgetTrans_RU::find(_ledgerJournalTrans.orig().JournalNum,
                                                                           _ledgerJournalTrans.orig().LineNum,
                                                                           _ledgerJournalTrans.orig().Voucher,
                                                                           _ledgerJournalTrans.orig().AccountType,
                                                                           _ledgerJournalTrans.orig().TransDate,
                                                                           true);

                if (paymentOrderBudgetTrans)
                {
                    paymentOrderBudgetTrans.initFromLedgerJournalTrans(_ledgerJournalTrans);
                    paymentOrderBudgetTrans.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaySheetTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the pay sheet lines.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    public static void updatePaySheetTrans_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        RPaySheetTrans  paySheetTrans;

        if (_ledgerJournalTrans.rCashPayTransType != RCashPayLedgerTransType::Bank)
        {
            return;
        }

        if (_ledgerJournalTrans.Voucher   != _ledgerJournalTrans.orig().Voucher ||
            _ledgerJournalTrans.TransDate != _ledgerJournalTrans.orig().TransDate)
        {
            while select forupdate paySheetTrans
                where paySheetTrans.PayVoucherBank  == _ledgerJournalTrans.orig().Voucher &&
                      paySheetTrans.PayDateBank     == _ledgerJournalTrans.orig().TransDate
            {
                paySheetTrans.PayVoucherBank = _ledgerJournalTrans.Voucher;
                paySheetTrans.PayDateBank    = _ledgerJournalTrans.TransDate;
                paySheetTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCorrectiveTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current journal line can be posted as corrective operation.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// True if the record is valid; otherwise, false.
    /// </returns>
    public static boolean validateCorrectiveTrans_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;

        if (_ledgerJournalTrans.ledgerJournalTable().ledgerJournalTable_W().ReportingDate_RU)
        {
            if ((_ledgerJournalTrans.LedgerDimension    &&
                 _ledgerJournalTrans.AccountType != LedgerJournalACType::Ledger) ||
                    (_ledgerJournalTrans.OffsetLedgerDimension &&
                    _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Ledger))
            {
                ret = checkFailed(strfmt("@SYP4860748", "@SYS13356"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyConvBankTransAccount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the currency conversion bank account.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    public static boolean validateCurrencyConvBankTransAccount_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankAccountTable    bankSpecAccount;
        boolean             ret = true;

        if (_ledgerJournalTrans.BankSpecAccountId_RU &&
            _ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::RCash)
        {
            bankSpecAccount = BankAccountTable::find(_ledgerJournalTrans.BankSpecAccountId_RU);

            if (bankSpecAccount &&
               bankSpecAccount.CurrencyCode != _ledgerJournalTrans.TransferCurrency_RU)
            {
                ret = checkFailed(strFmt("@GLS114421", bankSpecAccount.CurrencyCode, _ledgerJournalTrans.TransferCurrency_RU));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSpecBankAccountId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the spec bank account.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    public static boolean validateSpecBankAccountId_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankAccountTable  specBankAccountTable, offsetBankAccountTable;
        LedgerJournalType ledgerJournalType = _ledgerJournalTrans.ledgerJournalTable().JournalType;
        BankTransType     bankTransType     = BankTransType::find(_ledgerJournalTrans.BankTransType);

        boolean ret = true;

        if (ledgerJournalType == LedgerJournalType::Payment                     ||
            (ledgerJournalType == LedgerJournalType::Daily  && !_ledgerJournalTrans.Invoice)   &&
            _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend                       &&
            _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank                 &&
            _ledgerJournalTrans.LedgerDimension                                                &&
            _ledgerJournalTrans.OffsetLedgerDimension                                          &&
            _ledgerJournalTrans.BankSpecAccountId_RU)
        {
            if (!BankAccountTable::checkIsActive(_ledgerJournalTrans.BankSpecAccountId_RU, _ledgerJournalTrans.TransDate))
            {
                ret = checkFailed(strFmt("@GLS115323", _ledgerJournalTrans.BankSpecAccountId_RU));
            }

            specBankAccountTable   = BankAccountTable::find(_ledgerJournalTrans.BankSpecAccountId_RU);
            offsetBankAccountTable = BankAccountTable::find(_ledgerJournalTrans.parmOffsetAccount());

            if (bankTransType.BankAdvancedTransType_RU == BankAdvancedTransType_RU::CurrBuy ||
                bankTransType.BankAdvancedTransType_RU == BankAdvancedTransType_RU::CurrSell  )
            {
                if (specBankAccountTable.BankGroupId != offsetBankAccountTable.BankGroupId)
                {
                    ret = checkFailed("@GLS115325");
                }
            }
            else if (bankTransType.BankAdvancedTransType_RU == BankAdvancedTransType_RU::CurrTransfer)
            {
                if (! specBankAccountTable.vendAccount_RU())
                {
                    ret = checkFailed("@GLS114411");
                }
            }

            if (_ledgerJournalTrans.BankSpecAccountId_RU && _ledgerJournalTrans.BankSpecAccountId_RU == _ledgerJournalTrans.parmOffsetAccount())
            {
                ret = checkFailed("@GLS115326");
            }
        }
        else if (ledgerJournalType == LedgerJournalType::RCash      &&
            LedgerJournalTrans_RCash::isCashCollAllowEdit_RU(_ledgerJournalTrans)  &&
            _ledgerJournalTrans.LedgerDimension                                    &&
            _ledgerJournalTrans.OffsetLedgerDimension                              &&
            _ledgerJournalTrans.BankSpecAccountId_RU)
        {
            if (!BankAccountTable::checkIsActive(_ledgerJournalTrans.BankSpecAccountId_RU, _ledgerJournalTrans.TransDate))
            {
                ret = checkFailed(strFmt("@GLS115323", _ledgerJournalTrans.BankSpecAccountId_RU));
            }

            specBankAccountTable = BankAccountTable::find(_ledgerJournalTrans.BankSpecAccountId_RU);

            if (!specBankAccountTable.vendAccount_RU() || specBankAccountTable.vendAccount_RU() != _ledgerJournalTrans.parmOffsetAccount())
            {
                ret = checkFailed("@GLS114411");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatInPayment_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT payment string.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The VAT payment string.</returns>
    public static TempStr vatInPayment_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        CurrencyNameDeclension_RU   currencyNameDeclension;
        CalcTaxes_RU                calcTaxes;
        TaxAmountCur                amountVAT;
        TaxValue                    valueVAT;
        int                         amountVATPenny;

        TaxCalculationJournal       taxCalculationJournal;

        TmpTaxWorkTrans             tmpTaxWorkTrans;
        TempStr                     text;

        str endDot(str _str)
        {
            str ret = strRTrim(_str);
            if (! strEndsWith(ret, '.'))
            {
                ret += '.';
            }
            return ret;
        }

        taxCalculationJournal = LedgerJournalTrans::getTaxInstance(_ledgerJournalTrans.JournalNum, _ledgerJournalTrans.Voucher, _ledgerJournalTrans.Invoice, false, _ledgerJournalTrans, true);

        tmpTaxWorkTrans.setTmpData(taxCalculationJournal.tmpTaxWorkTrans());

        select firstonly * from tmpTaxWorkTrans;

        calcTaxes = CalcTaxes_RU::construct(tmpTaxWorkTrans);
        calcTaxes.calc();

        amountVAT   = CurrencyExchangeHelper::amount(calcTaxes.taxAmountCur_VAT() + calcTaxes.taxAmountCur_VATReduced() + calcTaxes.taxAmountCur_VATZero(), _ledgerJournalTrans.CurrencyCode);

        valueVAT    = calcTaxes.taxValue_VAT();

        if (valueVAT && amountVAT)
        {
            currencyNameDeclension  = CurrencyNameDeclension_RU::find(_ledgerJournalTrans.CurrencyCode, CompanyInfo::languageId());

            if (currencyNameDeclension.ShortNamePenny)
            {
                amountVATPenny          = (real2int(CurrencyExchange::round(frac(amountVAT), _ledgerJournalTrans.CurrencyCode)) * 100);
                amountVAT               = trunc(amountVAT);

                text = endDot(strFmt("@GLS111818" , valueVAT, num2str(amountVAT, 0, 0, 0, 0), strLwr(endDot(currencyNameDeclension.ShortName))) + ' ' + num2Str0(amountVATPenny, 2) + ' ' + strLwr(currencyNameDeclension.ShortNamePenny));
            }
            else
            {
                text = endDot(strFmt("@GLS111818", valueVAT, amountVAT, strLwr(currencyNameDeclension.ShortName)));
            }
        }
        else
        {
            text = "@GLS111819";
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rCashTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RCashTable</c> record corresponding to the account.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// A record from the <c>RCashTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RCashTable rCashTable(LedgerJournalTrans _ledgerJournalTrans)
    {
        RCashTable      cashTable;
        RCashAccount    cashAccount = _ledgerJournalTrans.parmAccount();

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::RCash)
        {
            cashTable = RCashTable::find(cashAccount);
        }

        return cashTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatTaxAgentAmountPayable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for VAT tax agent amount payable.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The amount payable.</returns>
    public static display AmountCurDebit vatTaxAgentAmountPayable_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>