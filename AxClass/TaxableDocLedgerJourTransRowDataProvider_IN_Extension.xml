<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocLedgerJourTransRowDataProvider_IN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(TaxableDocLedgerJourTransRowDataProvider))]
final class TaxableDocLedgerJourTransRowDataProvider_IN_Extension
{
    private TaxModelDocLineJournalImpl_IN   taxModelDocLineJournalImplIN;
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillInFields</Name>
				<Source><![CDATA[
    public void fillInFields(TaxableDocumentLineObject _lineObj)
    {
        next fillInFields(_lineObj);

        if (taxModelTaxable is TaxModelDocLineJournalImpl_IN)
        {
            taxModelDocLineJournalImplIN = taxModelTaxable as TaxModelDocLineJournalImpl_IN;
            this.addFieldValue(_lineObj, TaxEngineModelFields::ShouldSkip, taxModelDocLineJournalImplIN.shouldSkipForTaxDocumentRow());
            this.addFieldValue(_lineObj, TaxEngineModelFields::Prepayment, taxModelDocLineJournalImplIN.getPrepayment());
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.addFieldValue(_lineObj, TaxEngineModelFields::ServiceCategory, gstTaxable.getGSTServiceCategory());
            this.addFieldValue(_lineObj, TaxEngineModelFields::NonBusinessUsagePercent, gstTaxable.getGSTNonBusinessUsagePercent() / 100);
            this.addFieldValue(_lineObj, TaxEngineModelFields::ApplyGSTTDS, this.getApplyGSTTDS());
            this.addFieldValue(_lineObj, TaxEngineModelFields::ApplyGSTTCS, this.getApplyGSTTCS());
            this.addFieldValue(_lineObj, TaxEngineModelFields::GSTTDSTaxableAmount, this.getTaxableAmountGSTTDS());
            this.addFieldValue(_lineObj, TaxEngineModelFields::GSTTDSCalculateWithTaxableAmount, this.getCalculateWithTaxableAmountGSTTDS());

            if (gstTaxable is TaxModelDocLineJournalImpl_IN)
            {
                taxModelDocLineJournalImplIN = gstTaxable as TaxModelDocLineJournalImpl_IN;

                this.addFieldValue(_lineObj, TaxEngineModelFields::SEZParty, taxModelDocLineJournalImplIN.getIsSEZParty());
                this.addFieldValue(_lineObj, TaxEngineModelFields::DeemedExport, taxModelDocLineJournalImplIN.getIsDeemedExport());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValidFields</Name>
				<Source><![CDATA[
    protected void initValidFields()
    {
        next initValidFields();

        validFields.add(TaxEngineModelFields::ServiceCategory, Types::Enum, enumNum(ServiceCategory_IN));
        validFields.add(TaxEngineModelFields::NonBusinessUsagePercent, Types::Real);
        validFields.add(TaxEngineModelFields::GSTTDSTaxableAmount, Types::Real);
        validFields.add(TaxEngineModelFields::GSTTDSCalculateWithTaxableAmount, Types::Enum, enumNum(NoYes));

    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplyGSTTDS</Name>
				<Source><![CDATA[
    private NoYes getApplyGSTTDS()
    {
        if (LedgerJournalTrans::isVendorPayment(ledgerJournalTrans) || LedgerJournalTrans::isCustomerPayment(ledgerJournalTrans))
        {
            TransTaxInformation partyTransTaxInformation = taxModelDocLineJournalImplIN.getPartyTransTaxInforamtion();
            return partyTransTaxInformation.ApplyGSTTDS;
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplyGSTTCS</Name>
				<Source><![CDATA[
    private NoYes getApplyGSTTCS()
    {
        if (LedgerJournalTrans::isVendorPayment(ledgerJournalTrans) || LedgerJournalTrans::isCustomerPayment(ledgerJournalTrans))
        {
            TransTaxInformation partyTransTaxInformation = taxModelDocLineJournalImplIN.getPartyTransTaxInforamtion();
            return partyTransTaxInformation.ApplyGSTTCS;
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableAmountGSTTDS</Name>
				<Source><![CDATA[
    private Amount getTaxableAmountGSTTDS()
    {
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTax = ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();
        return ledgerJournalTransTax.TaxableAmountGSTTDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculateWithTaxableAmountGSTTDS</Name>
				<Source><![CDATA[
    private Amount getCalculateWithTaxableAmountGSTTDS()
    {
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTax = ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();
        return ledgerJournalTransTax.CalculateWithTaxableAmountGSTTDS;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>