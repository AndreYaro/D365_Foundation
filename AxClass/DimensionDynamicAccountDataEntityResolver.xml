<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionDynamicAccountDataEntityResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionDynamicAccountDataEntityResolver</c> class resolves data entity dynamic account values.
/// </summary>
[
    System.ComponentModel.Composition.ExportMetadataAttribute("DimensionSFKType", extendedtypestr(DimensionDynamicAccount)),
    System.ComponentModel.Composition.ExportAttribute("Microsoft.Dynamics.AX.DimensionDataEntitySFKFieldResolver")
]
class DimensionDynamicAccountDataEntityResolver extends DimensionDataEntitySFKFieldResolver
{
    private boolean isEnumValueSet;
    private LedgerJournalACType enumValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DimensionDynamicAccountDataEntityResolver construct()
    {
        return new DimensionDynamicAccountDataEntityResolver();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(Common _entity)
    {
        isEnumValueSet = false;
        super(_entity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerJournalACType</c> enumeration associated with the dynamic account.
    /// </summary>
    /// <returns>The value of the enumeration.</returns>
    private LedgerJournalACType getEnumValue()
    {
 	    // This code cannot short-circuit based on whether or not enumValue is zero since
        // the most common case is LedgerJournalACType::Account, which has value zero. If
        // the separate bool is not used for tracking whether or not the enum value is set,
        // then when the type is account it will not short-circuit and every call will
        // re-lookup the value leading to performance degradation.
        if (!isEnumValueSet)
        {
            TableName dimensionEntityName = tableid2name(dimensionBuffer.TableId);
            FieldId fieldId = fieldname2id(dimensionBuffer.TableId, this.parmSFKFieldName());

            if (fieldId != 0)
            {
                DictDataEntityField dataEntityFieldEDT = new DictDataEntityField(dimensionBuffer.TableId, fieldId);
                FieldName enumFieldName = dataEntityFieldEDT.dynamicDimensionEnumerationField();
                enumValue = dimensionBuffer.getFieldValue(enumFieldName);
                isEnumValueSet = true;
            }
        }

        return enumValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResolver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>DimensionDynamicAccountResolver</c> class.
    /// </summary>
    /// <returns>The new instance of the <c>DimensionDynamicAccountResolver</c> class.</returns>
    public DimensionResolver getResolver()
    {
        DimensionDynamicAccountResolver dimensionDynamicAccountResolver =
            DimensionDynamicAccountResolver::newResolver(
                this.displayValue,
                this.getEnumValue(),
                this.getCompanyValue());
        return dimensionDynamicAccountResolver;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>