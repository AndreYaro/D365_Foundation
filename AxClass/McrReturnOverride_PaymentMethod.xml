<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrReturnOverride_PaymentMethod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRReturnOverride_PaymentMethod</c> is a child of the <c>MCRReturnOverride</c> class
/// and handles the payment method functionality for return overrides.
/// </summary>
class McrReturnOverride_PaymentMethod extends MCRReturnOverride
{
    #Retail
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRoleAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the passed group has permissions to
    ///     override payment methods on a return.
    /// </summary>
    /// <param name="_roleRefRecId">
    /// The authorization group to be evaluated if they have permissions to override the payment method.
    /// </param>
    /// <returns>
    /// true if the group has permissions to
    ///     override payment methods on a return; otherwise, false.
    /// </returns>
    boolean isRoleAllowed(SysSecurityRoleRecId _roleRefRecId)
    {
        MCRPriceOverrideMarkUpGroup priceOverrideMarkupGroups;

        select firstonly RoleRefRecID from priceOverrideMarkupGroups
                    where priceOverrideMarkupGroups.RoleRefRecID == _roleRefRecId
                join RecId from returnOverrideGroups
                    where returnOverrideGroups.PriceOverrideRefRecID == priceOverrideMarkupGroups.RecId
                        && returnOverrideGroups.mcrAllowAlternatePayment;

        return (returnOverrideGroups.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserRoleAuthorizedToOverrideReturnPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the user is allowed to override payment methods on a return.
    /// </summary>
    /// <param name="_userId">
    /// The user ID of the user to determine if they are allowed to override payment methods on a return.
    /// </param>
    /// <returns>
    /// true if the user is allowed to override payment methods on a return; otherwise, false.
    /// </returns>
    public boolean isUserRoleAuthorizedToOverrideReturnPayments(UserId _userId)
    {
        container                   authorizationGroups;
        int                         idx;
        boolean                     authGroupValid = false;
            
        authorizationGroups = MCRAssistantUserRole::getRolesForUser(_userId);
        if (conPeek(authorizationGroups, 1))
        {
            for (idx = 1;  idx <= conLen(authorizationGroups);  idx++)
            {
                // Validate the user's group is allowed to create misc charges for
                // the amount on the return.
                authGroupValid = this.isRoleAllowed(conPeek(authorizationGroups, idx));

                if (authGroupValid)
                {
                    break;
                }
            }
        }
  
        return authGroupValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMCRPriceOverrideEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allow override for testing #MCRPriceOverrideEnabled
    /// </summary>
    /// <returns>#MCRPriceOverrideEnabled</returns>
    public static int getMCRPriceOverrideEnabled() 
    {
        return #MCRPriceOverrideEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAllowReturnWithAlternatePayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if payment method can be overridden on a return sales order.
    /// </summary>
    /// <returns>
    /// True if the payment methods can be overridden; otherwise, false.
    /// </returns>
    public static boolean mcrAllowReturnWithAlternatePayments(SalesTable _salesTable)
    {
        if (_salesTable.mcrIsCallCenter())
        {
            if (MCROrderParameters::find().MCRAllowReturnPaymentOverride)
            {
                if (MCROrderParameters::alternatePaymentsAllowedForUserRole())
                {
                    return true;
                }
                else
                {
                    FormRun             formRun;
                    Args                formArgs = new Args();
                    str                 formArgsFormStr;

                    // Pop up form for user to enter a security override code
                    // to allow return to different payment method.
                    formArgsFormStr = formStr(MCRSecurityOverrideCodeDialog);
                    formArgs.name(formArgsFormStr);
                    formArgs.record(_salesTable);
                    formRun = classfactory.formRunClass(formArgs);
                    formRun.init();
                    formRun.run();
                    formRun.wait();

                    str securityCode = formArgs.parm();

                    if (McrReturnOverride_PaymentMethod::isSecurityOverrideAllowed(true, securityCode))
                    {
                        // Payment override is allowed.
                        return true;
                    }
                    else
                    {
                        throw error("@Ret_HF_3920417:InvalidSecurityCode");
                    }
                }
            }
            else
            {
                throw error("@Retail:MCRAllowReturnPaymentOverrideError");
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the user is allowed to override payment methods on a return.
    /// </summary>
    /// <param name="_userId">
    /// The user ID of the user to determine if they are allowed to override payment methods on a return.
    /// </param>
    /// <param name="_salesTableReturn">
    /// The sales order return that is being changed.
    /// </param>
    /// <returns>
    /// true if the user is allowed to override payment methods on a return; otherwise, false.
    /// </returns>
    public boolean isUserAllowed(UserId _userId, SalesTable _salesTableReturn)
    {
        if (McrReturnOverride_PaymentMethod::getMCRPriceOverrideEnabled())
        {
            container                   authorizationGroups;
            container                   allowablePaymMethodTypes;
            int                         idx;
            boolean                     authGroupValid = false;
            SalesTable                  salesTableOriginal;
            MCRReturnSalesOrderRefund   salesOrderRefund;
            str                         validPaymMethTypes;

            salesTableOriginal = _salesTableReturn.mcrSalesTableOriginal();

            // If there is no original any payment type is valid
            if (salesTableOriginal)
            {
                // Determine if the return consist of payment methods that require permissions.
                salesOrderRefund = new MCRReturnSalesOrderRefund(salesTableOriginal, _salesTableReturn);

                allowablePaymMethodTypes = salesOrderRefund.allowablePaymentMethodTypes();
                if (!salesOrderRefund.hasInvalidPaymentMethods(allowablePaymMethodTypes))
                {
                    authGroupValid = true;
                    return authGroupValid;
                }

                authorizationGroups = MCRAssistantUserRole::getRolesForUser(_userId);
                if (conPeek(authorizationGroups, 1))
                {
                    for (idx = 1;  idx <= conLen(authorizationGroups);  idx++)
                    {
                        // Validate the user's group is allowed to create misc charges for
                        // the amount on the return.
                        authGroupValid = this.isRoleAllowed(conPeek(authorizationGroups, idx));

                        if (authGroupValid)
                        {
                            break;
                        }
                    }
                }

                if (!authGroupValid && !suppressError)
                {
                    validPaymMethTypes = enum2str(MCRCustPaymType::OnAccount);

                    for (idx = 1;   idx <= conLen(allowablePaymMethodTypes);   idx++)
                    {
                        switch (conPeek(allowablePaymMethodTypes, idx))
                        {
                            case MCRCustPaymType::CreditCard:
                                validPaymMethTypes += ' , ' + enum2str(MCRCustPaymType::CreditCard);
                                break;
                            case MCRCustPaymType::RefundCheck:
                                validPaymMethTypes += ' , ' + enum2str(MCRCustPaymType::RefundCheck);
                                break;
                        }
                    }

                    error(strFmt("@MCR23115", validPaymMethTypes));
                }
            }
            else
            {
                authGroupValid = true;
            }

            return authGroupValid;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSecurityOverrideAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allow payment override when security override code in call center parameters is blank or match with security code in the dialog.
    /// </summary>
    /// <returns>Returns true when security override code in call center parameters is blank or matched with the dialog, Otherwise false.</returns>
    internal static boolean isSecurityOverrideAllowed(boolean _isMcrAllowReturnPaymentOverride, str _securityCode)
    {
        return ((_isMcrAllowReturnPaymentOverride && MCROrderParameters::find().SecurityOverrideCode == '') || MCROrderParameters::isMatchSecurityOverrideCode(_securityCode));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>