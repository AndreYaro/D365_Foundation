<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RunBaseMultiParmApplication</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RunBaseMultiParmApplication
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formCacheAll</Name>
				<Source><![CDATA[
    static void formCacheAll(
        container       _packRecs,          // packed containers from runBaseMultiParm.packRecs()
        FormRun         _formRun,           // form
        Common          _common,            // current record
        boolean         _updateInventDim    = false,
        InventDim       _inventDim          = null  // current inventDim record
        )
    {
        container updatedRecsCon = conPeek(_packRecs,1);
        container createdRecsCon = conPeek(_packRecs,2);
        container deletedRecsCon = conPeek(_packRecs,3);

        if (createdRecsCon)
        {
            RunBaseMultiParmApplication::formCacheInsert(_formRun,_common,createdRecsCon,_updateInventDim,_inventDim);
        }

        if (deletedRecsCon)
        {
            RunBaseMultiParmApplication::formCacheDelete(_formRun,_common,deletedRecsCon);
        }

        if (updatedRecsCon)
        {
            RunBaseMultiParmApplication::formCacheUpdate(_formRun,_common,updatedRecsCon);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formCacheDelete</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPDeprecatedDataSourceMethod', 'RunBase kernel class.')]
    static void formCacheDelete(
        FormRun         _formRun,           // form
        Common          _common,            // current record
        container       _con                // packed map with delete recs
        )
    {
        Map             deletedRecs   = Map::create(_con);
        MapIterator     mi;

        Common          commonCache;
        FormDataSource  common_ds = FormDataUtil::getFormDataSource(_common);

        mi = new MapIterator(deletedRecs);
        mi.begin();
        while (mi.more())
        {
            commonCache = deletedRecs.lookup(mi.key());
            common_ds.cacheRemoveRecord(commonCache);

            mi.next();
        }

        if (!common_ds.getFirst(0,false) && ! common_ds.getFirst(1,false))
        {
            common_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formCacheInsert</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPDeprecatedDataSourceMethod', 'RunBase kernel class.')]
    static void formCacheInsert(
        FormRun         _formRun,           // form
        Common          _common,            // current record
        container       _con,               // packed map with created recs
        boolean         _updateInventDim    = false,
        InventDim       _inventDim          = null  // current inventDim record
        )
    {
        Map             createdRecs = Map::create(_con);
        MapIterator     mi;

        boolean         flipInsertAtEnd;

        Common          commonCurrent;
        Common          commonCache;
        FormDataSource  common_ds = FormDataUtil::getFormDataSource(_common);
        Object          object_ds =  common_ds;

        fieldId         fieldIdDim;

        commonCurrent.RecId   = _common.RecId;

        if (!common_ds.insertAtEnd())
        {
            flipInsertAtEnd = common_ds.insertAtEnd(true);
        }

        fieldIdDim = fieldName2id(_common.TableId,fieldStr(InventDim,InventDimId));

        mi = new MapIterator(createdRecs);
        mi.begin();
        while (mi.more())
        {
            commonCache = createdRecs.lookup(mi.key());

            object_ds.create(true,true);

            _common.data(commonCache);

            if (_updateInventDim && fieldIdDim)
            {
                _inventDim.data(InventDim::find(_common.(fieldIdDim)));
            }

            object_ds.write(true);

            mi.next();
        }

        common_ds.findRecord(commonCurrent);

        if (flipInsertAtEnd)
        {
            common_ds.insertAtEnd(! common_ds.insertAtEnd());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formCacheUpdate</Name>
				<Source><![CDATA[
    static void formCacheUpdate(
        FormRun         _formRun,           // form
        Common          _common,            // current record
        container       _con                // packed map with updated recs
        )
    {
        Map             updatedRecs  = Map::create(_con);

        Integer         formMarked;

        Common          commonCache;
        Common          commonMap;
        FormDataSource  common_ds = FormDataUtil::getFormDataSource(_common);

        boolean         doRedraw;

        while (formMarked <= 1)
        {
            commonCache = common_ds.getFirst(formMarked,false);
            while (commonCache)
            {
                if (updatedRecs.exists(commonCache.RecId))
                {
                    commonMap = updatedRecs.lookup(commonCache.RecId);
                    commonCache.data(commonMap);
                    if (commonMap.RecId == _common.RecId)
                    {
                        _common.data(commonMap);
                        common_ds.setCurrent();
                    }
                    else
                    {
                        doRedraw = true;
                    }
                }
                commonCache = common_ds.getNext();
            }
            formMarked++;
        }

        common_ds.refresh();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>