<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentPresumedTaxCalcAverage_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the presumed tax information on fiscal document by average value.
/// </summary>
[PresumedTaxAlgorithmCalcFactoryAttribute_BR(PresumedTaxAlgorithm_BR::Average)]
public class FiscalDocumentPresumedTaxCalcAverage_BR extends FiscalDocumentPresumedTaxCalc_BR
{
    FiscalDocumentTaxTransPresumedTemp_BR presumedTemp;
    InventDim                             curInventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPresumedTax</Name>
				<Source><![CDATA[
    public void createPresumedTax()
    {
        if (fdTaxTransICMSST)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10010, funcName());

            ItemId itemId = fdLine.ItemId;
            UnitOfMeasureSymbol salesUnit = fdLine.Unit;
            UnitOfMeasureSymbol invUnit = InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
            real invQtyFromSalesQty = this.convertQty(itemId, salesUnit, invUnit, fdLine.Quantity);
            InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(fdLine.InventTransId);
            curInventDim = InventTrans::findByInventTransOrigin(inventTransOrigin.RecId).inventDim();

            FiscalDocumentTaxTransPresumedTemp_BR result;

            switch (fdPresumedSourceDocumentType)
            {
                case FDPresumedSourceDocumentType_BR::SalesComplement:
                    [result] = this.getPresumedTaxFromSale();
                    break;

                case FDPresumedSourceDocumentType_BR::PurchOrderReturn:
                    [result] = this.getPresumedTaxFromPurchReturn();
                    break;

                default:
                    [result] = this.getPresumedTaxFromPurch();
                    break;
            }

            if (result.TaxAmountICMS || result.TaxAmountICMSST)
            {
                this.updatePresumedTaxForSPED(fdTaxTransICMS.RecId, fdTaxTransICMSST.RecId, result, invQtyFromSalesQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPresumedTaxForLine</Name>
				<Source><![CDATA[
    public void createPresumedTaxForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrigPurchFiscalDocumentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets original fiscal document RecId.
    /// </summary>
    /// <returns>
    /// RecId of fiscal document.
    /// </returns>
    protected RecId findOrigPurchFiscalDocumentId()
    {
        FiscalDocument_BR fiscalDocument;

        Query query = this.initQueryOrigFiscalDocument();
        QueryBuildDataSource qbdsVendInvoiceTrans = query.dataSourceTable(tableNum(VendInvoiceTrans));
        qbdsVendInvoiceTrans.addRange(fieldNum(VendInvoiceTrans, RecId)).value(queryValue(fdLine.RefRecId));
        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            fiscalDocument = queryRun.get(tableNum(FiscalDocument_BR));
        }

        return fiscalDocument.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemQuantityByDate</Name>
				<Source><![CDATA[
    private real getItemQuantityByDate(ItemId _itemId, InventDim _inventDim, TransDate _transDate)
    {
        InventDimParm inventDimParm;

        inventDimParm.initFromInventDim(_inventDim);

        InventSumDateDim inventSumDateDim = InventSumDateDim::newParameters(_transDate,
            _itemId,
            _inventDim,
            inventDimParm);

        return inventSumDateDim.receivedQty() - inventSumDateDim.deductedQty() + inventSumDateDim.postedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromInc</Name>
				<Source><![CDATA[
    private void getPresumedTaxFromInc(InventDim _inventDim, Query _query = null)
    {
        Query  query;
        Amount taxBaseAmountTotalICMSST, taxAmountTotalICMS, taxAmountTotalICMSST, fcpAmountTotalICMSST;
        real   quantity;
        int    taxCountICMS, taxCountICMSST;

        RecordInsertList incDocumentsList = new RecordInsertList(tableNum(FBBookingPeriodPresumedIncDocuments_BR));
        UnitOfMeasureSymbol invUnit = InventTableModule::find(fdLine.ItemId, ModuleInventPurchSales::Invent).UnitId;

        KeySum sumOfSalesInventory;
        if (stateId == FiscalBooksConstants_BR::StateSC)
        {
            sumOfSalesInventory = this.getCountItemsOutgoing();
        }

        if (_query)
        {
            query = _query;
        }
        else
        {
            query = new Query(this.initQueryLines());
        }

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(InventTransOrigin));
        findOrCreateRange_W(qbds, fieldNum(InventTransOrigin, ItemId), queryValue(fdLine.ItemId));
        qbds = query.dataSourceTable(tableNum(FiscalDocument_BR));

        this.addRangesToInventDim(query, fdLine.InventTransId);

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            FiscalDocument_BR fiscalDocument = queryRun.get(tableNum(FiscalDocument_BR));
            FiscalDocumentLine_BR fiscalDocumentLine = queryRun.get(tableNum(FiscalDocumentLine_BR));
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMS = queryRun.get(tableNum(FiscalDocumentTaxTrans_BR));
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS = queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR));
            FiscalDocumentTaxTrans_BR fiscalDocumentTaxTransICMSST = queryRun.get(tableNum(FiscalDocumentTaxTrans_BR), 2);
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMSST = queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR), 2);
            FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundICMSST = queryRun.get(tableNum(FiscalDocumentTaxTransPovertyFund_BR), 2);

            if (stateId == FiscalBooksConstants_BR::StateSC && this.isIncomingDocumentCollected(sumOfSalesInventory, fdLine.ItemId, fiscalDocumentLine.FiscalDocument))
            {
                continue;
            }

            real quantityConverted = this.convertQty(fdLine.ItemId, fiscalDocumentLine.Unit, invUnit, fiscalDocumentLine.Quantity);
            quantity += quantityConverted;

            Amount taxAmountICMSST;
            Amount taxBaseAmountICMSST;
            Amount taxAmountICMS = fiscalDocumentTaxTransPresumedICMS ? fiscalDocumentTaxTransPresumedICMS.PresumedvICMSSubstituto : fiscalDocumentTaxTransICMS.TaxAmountOther;
            Amount fcpAmountICMSST;

            if (fiscalDocumentTaxTransPresumedICMSST)
            {
                taxAmountICMSST = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxAmount + fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxAmount;
                taxBaseAmountICMSST = fiscalDocumentTaxTransPresumedICMSST.PresumedTaxBaseAmount;
                fcpAmountICMSST = fiscalDocumentTaxTransPresumedICMSST.PresumedFCPTaxAmount;
            }
            else if (fiscalDocumentTaxTransICMSST)
            {
                taxAmountICMSST = fiscalDocumentTaxTransICMSST.TaxAmountOther;
                taxBaseAmountICMSST = fiscalDocumentTaxTransICMSST.TaxBaseAmountOther;
                fcpAmountICMSST = fiscalDocumentTaxTransPovertyFundICMSST.TaxPovertyFundAmount;
            }
            else if (fiscalDocumentTaxTransPresumedICMS)
            {
                taxAmountICMSST = fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmount + fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmount;
                taxBaseAmountICMSST = fiscalDocumentTaxTransPresumedICMS.PresumedTaxBaseAmount;
                fcpAmountICMSST = fiscalDocumentTaxTransPresumedICMS.PresumedFCPTaxAmount;
            }

            taxCountICMS++;

            if (taxAmountICMSST)
            {
                taxCountICMSST++;
            }

            FiscalDocumentTaxTrans_BR            fiscalDocumentTaxTransComlpement;
            FiscalDocumentTaxTransPovertyFund_BR fiscalDocumentTaxTransPovertyFundComlpement;

            [fiscalDocumentTaxTransComlpement, fiscalDocumentTaxTransPovertyFundComlpement] = this.getPresumedTaxFromPurchComplementForLine(fiscalDocumentLine.RecId, TaxType_BR::ICMS);
            taxAmountICMS += fiscalDocumentTaxTransComlpement.TaxAmountOther;
            if (taxAmountICMSST)
            {
                [fiscalDocumentTaxTransComlpement, fiscalDocumentTaxTransPovertyFundComlpement] = this.getPresumedTaxFromPurchComplementForLine(fiscalDocumentLine.RecId, TaxType_BR::ICMSST);
                taxAmountICMSST += fiscalDocumentTaxTransComlpement.TaxAmountOther;
                taxBaseAmountICMSST += fiscalDocumentTaxTransComlpement.TaxBaseAmountOther;
                fcpAmountICMSST += fiscalDocumentTaxTransPovertyFundComlpement.TaxPovertyFundAmount;
            }

            taxAmountTotalICMS += taxAmountICMS;
            taxAmountTotalICMSST += taxAmountICMSST;
            taxBaseAmountTotalICMSST += taxBaseAmountICMSST;
            fcpAmountTotalICMSST += fcpAmountICMSST;

            FBBookingPeriodPresumedIncDocuments_BR fbBookingPeriodPresumedIncDocuments = FBBookingPeriodPresumedIncDocuments_BR::find(fbBookingPeriod.RecId, fiscalDocumentLine.RecId);
            
            if (!fbBookingPeriodPresumedIncDocuments)
            {
                fbBookingPeriodPresumedIncDocuments.FBBookingPeriod_BR = fbBookingPeriod.RecId;
                fbBookingPeriodPresumedIncDocuments.FiscalDocument_BR = fiscalDocument.RecId;
                fbBookingPeriodPresumedIncDocuments.FiscalDocumentLine_BR = fiscalDocumentLine.RecId;
                fbBookingPeriodPresumedIncDocuments.ItemId = fdLine.ItemId;
                fbBookingPeriodPresumedIncDocuments.ProductName = this.getProductName(fdLine.ItemId, _inventDim);
                fbBookingPeriodPresumedIncDocuments.TaxAmountICMS = taxAmountICMS;
                fbBookingPeriodPresumedIncDocuments.TaxBaseAmountICMSST = taxBaseAmountICMSST;
                fbBookingPeriodPresumedIncDocuments.TaxRateICMSST = fiscalDocumentTaxTransICMSST.TaxValue;
                fbBookingPeriodPresumedIncDocuments.TaxAmountICMSST = taxAmountICMSST;

                if (stateId == FiscalBooksConstants_BR::StateSC)
                {
                    fbBookingPeriodPresumedIncDocuments.Unit = invUnit;
                    fbBookingPeriodPresumedIncDocuments.Quantity = quantityConverted;

                    sumOfSalesInventory.updateNow(fdLine.ItemId, -quantityConverted);
                }
                else
                {
                    fbBookingPeriodPresumedIncDocuments.Unit = fiscalDocumentLine.Unit;
                    fbBookingPeriodPresumedIncDocuments.Quantity = fiscalDocumentLine.Quantity;
                }

                fbBookingPeriodPresumedIncDocuments.IsReturn = !(
                        (fiscalDocument.RefTableId == tableNum(PurchComplementaryInvoiceHeader)
                        || fiscalDocument.RefTableId == tableNum(VendInvoiceJour)
                        || fiscalDocument.RefTableId == tableNum(VendPackingSlipJour)));

                if (fdPresumedSourceDocumentType == FDPresumedSourceDocumentType_BR::PurchOrderReturn)
                {
                    if (!FBBookingPeriodPresumedIncDocuments_BR::find(fbBookingPeriod.RecId, fiscalDocumentLine.RecId))
                    {
                        fbBookingPeriodPresumedIncDocuments.insert();
                    }
                }
                else
                {
                    incDocumentsList.add(fbBookingPeriodPresumedIncDocuments);
                }
            }
        }

        presumedTemp.Unit = invUnit;
        presumedTemp.Quantity = 1;
        presumedTemp.ItemId = fdLine.ItemId;
        presumedTemp.InventDimId = _inventDim.inventDimId;

        if (quantity)
        {
            presumedTemp.TaxAmountICMS = CurrencyExchangeHelper::amount(taxAmountTotalICMS / quantity);
            presumedTemp.TaxBaseAmountICMSST = CurrencyExchangeHelper::amount(taxBaseAmountTotalICMSST / quantity);
            presumedTemp.TaxAmountICMSST = CurrencyExchangeHelper::amount(taxAmountTotalICMSST / quantity);
            presumedTemp.FCPTaxAmountICMSST = CurrencyExchangeHelper::amount(fcpAmountTotalICMSST / quantity);
        }
        else
        {
            FBICMSSTInventoryBalance_BR fbICMSSTInventoryBalance = FBICMSSTInventoryBalance_BR::find(fbBookingPeriod.RecId, fdLine.ItemId, _inventDim.inventDimId);
            presumedTemp.TaxAmountICMS = fbICMSSTInventoryBalance.ICMSTaxAmountPerUnit;
            presumedTemp.TaxBaseAmountICMSST = fbICMSSTInventoryBalance.ICMSSTTaxBaseAmountPerUnit;
            presumedTemp.TaxAmountICMSST = fbICMSSTInventoryBalance.ICMSSTTaxAmountPerUnit;
            presumedTemp.FCPTaxAmountICMSST = fbICMSSTInventoryBalance.ICMSSTFCPTaxAmountPerUnit;
        }

        if (fdPresumedSourceDocumentType != FDPresumedSourceDocumentType_BR::PurchOrderReturn)
        {
            presumedTemp.insert();
        }

        incDocumentsList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromMiscCharges</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromMiscCharges()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromMiscChargesForLine</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromMiscChargesForLine(RefRecId _fiscalDocumentLineRef, TaxType_BR _taxType)
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurch</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromPurch()
    {
        select firstonly presumedTemp
        where presumedTemp.ItemId      == fdLine.ItemId
           && presumedTemp.InventDimId == curInventDim.inventDimId;

        if (!presumedTemp)
        {
            this.getPresumedTaxFromInc(curInventDim);
        }

        return [presumedTemp];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurchComplement</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromPurchComplement()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurchComplementForLine</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromPurchComplementForLine(RefRecId _fiscalDocumentLineRef, TaxType_BR _taxType)
    {
        Query query = this.initQueryPurchComplement();
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(PurchComplementaryInvoiceLine));
        findOrCreateRange_W(qbds, fieldNum(PurchComplementaryInvoiceLine, ComplementedFiscalDocumentLine), queryValue(_fiscalDocumentLineRef));
        qbds = query.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
        findOrCreateRange_W(qbds, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(_taxType));
        QueryRun queryRun = new QueryRun(query);

        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTransComlpement;
        FiscalDocumentTaxTransPovertyFund_BR    fiscalDocumentTaxTransPovertyFundComlpement;

        if (queryRun.next())
        {
            fiscalDocumentTaxTransComlpement = queryRun.get(tableNum(FiscalDocumentTaxTrans_BR));
            fiscalDocumentTaxTransPovertyFundComlpement = queryRun.get(tableNum(FiscalDocumentTaxTransPovertyFund_BR));
        }

        return [fiscalDocumentTaxTransComlpement, fiscalDocumentTaxTransPovertyFundComlpement];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurchForLine</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromPurchForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, TaxType_BR _taxType)
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromPurchReturn</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromPurchReturn()
    {
        RecId origId = this.findOrigPurchFiscalDocumentId();

        Query query = new Query(this.initQueryLines());
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(FiscalDocument_BR));
        qbds.clearRanges();
        findOrCreateRange_W(qbds, fieldNum(FiscalDocument_BR, RecId), queryValue(origId));

        qbds = query.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
        qbds.firstOnly(true);

        this.getPresumedTaxFromInc(curInventDim, query);

        if (!presumedTemp.TaxAmountICMSST)
        {
            this.getPresumedTaxFromInc(curInventDim);
        }

        return [presumedTemp];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromSale</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromSale()
    {
        Query query = new Query(this.initQuerySalesComplement());
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(SalesComplementaryInvoiceLine));
        qbds.firstOnly(true);
        findOrCreateRange_W(qbds, fieldNum(SalesComplementaryInvoiceLine, RecId), queryValue(fdLine.RefRecId));

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS = queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR));
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMSST = queryRun.get(tableNum(FiscalDocumentTaxTransPresumed_BR), 2);
            presumedTemp.clear();
            presumedTemp.TaxAmountICMS = fiscalDocumentTaxTransPresumedICMS.SPEDPresumedTaxAmountPerInvUnit;
            presumedTemp.TaxAmountICMSST = fiscalDocumentTaxTransPresumedICMSST.SPEDPresumedTaxAmountPerInvUnit;
            presumedTemp.TaxBaseAmountICMSST = fiscalDocumentTaxTransPresumedICMSST.SPEDPresumedTaxBaseAmountPerInvUnit;
            presumedTemp.TaxPercentageICMSST = fiscalDocumentTaxTransPresumedICMSST.SPEDPresumedTaxPercentage;
            presumedTemp.FCPTaxAmountICMSST = fiscalDocumentTaxTransPresumedICMSST.SPEDPresumedFCPTaxAmountPerInvUnit;
        }

        if (!presumedTemp.TaxAmountICMSST)
        {
            this.getPresumedTaxFromInc(curInventDim);
        }

        return [presumedTemp];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresumedTaxFromSaleForLine</Name>
				<Source><![CDATA[
    protected container getPresumedTaxFromSaleForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, TaxType_BR _taxType)
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if (!FBICMSSTInventoryBalance_BR::existsForPeriod(fbBookingPeriod.RecId))
        {
            warning("@FiscalBooks_SpedFiscal:AverageWarning");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryLines</Name>
				<Source><![CDATA[
    protected Query initQueryLines()
    {
        if (!queryTaxLines)
        {
            super();

            QueryBuildDataSource qbds = queryTaxLines.dataSourceTable(tableNum(FiscalDocumentTaxTransPovertyFund_BR));
            qbds.enabled(true);

            qbds = queryTaxLines.dataSourceTable(tableNum(FiscalDocumentTaxTransPovertyFund_BR), 2);
            qbds.enabled(true);

            qbds = queryTaxLines.dataSourceTable(tableNum(FiscalDocument_BR));
            qbds.addRange(fieldNum(FiscalDocument_BR, RefTableId)).value(queryValue(tableNum(CustInvoiceJour)));

            if (stateId == FiscalBooksConstants_BR::StateSC)
            {
                qbds.addRange(fieldNum(FiscalDocument_BR, Model)).value(queryValue(FiscalBooksConstants_BR::FiscalDocModel_55));
                qbds.addRange(fieldNum(FiscalDocument_BR, Model)).value(queryValue(FiscalBooksConstants_BR::FiscalDocModel_65));

                qbds.addOrderByField(fieldNum(FiscalDocument_BR, FiscalDocumentDateTime), SortOrder::Descending);
            }
            else
            {
                qbds = queryTaxLines.dataSourceTable(tableNum(FBBookingPeriodFiscalDocument_BR));
                findOrCreateRange_W(qbds, fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR), queryValue(fbBookingPeriod.RecId));
                queryTaxLines.clearOrderBy();
            }
        }

        return queryTaxLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuerySalesComplement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query for sale complement lines.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    protected Query initQuerySalesComplement()
    {
        if (!querySalesComplement)
        {
            super();

            QueryBuildDataSource qbdsFiscalDocumentLine = querySalesComplement.dataSourceTable(tableNum(FiscalDocumentLine_BR));

            if (stateId == FiscalBooksConstants_BR::StateSC)
            {
                qbdsFiscalDocumentLine.addRange(fieldNum(FiscalDocumentLine_BR, CFOP)).value(
                    FBSpedFileCreator_DRCST_BR::getRangeWithUnsupportedCFOPNumbers(qbdsFiscalDocumentLine.name()));

                QueryBuildDataSource qbdsFiscalDocument = querySalesComplement.dataSourceTable(tableNum(FiscalDocument_BR));
                qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Model)).value(queryValue(FiscalBooksConstants_BR::FiscalDocModel_55));
                qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Model)).value(queryValue(FiscalBooksConstants_BR::FiscalDocModel_65));

                qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, RecId)).value(
                    FBSpedFileCreator_DRCST_BR::getFiscalDocumentRange(
                        qbdsFiscalDocument.name(),
                        qbdsFiscalDocumentLine.name()));
            }

            QueryBuildDataSource qbdsFiscalDocumentTaxTransICMS = querySalesComplement.dataSourceTable(tableNum(FiscalDocumentTaxTrans_BR));
            findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMS, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(TaxType_BR::ICMS));

            QueryBuildDataSource qbdsFiscalDocumentTaxTransICMSST = qbdsFiscalDocumentLine.addDataSource(tableNum(FiscalDocumentTaxTrans_BR));
            qbdsFiscalDocumentTaxTransICMSST.relations(true);
            qbdsFiscalDocumentTaxTransICMSST.joinMode(JoinMode::InnerJoin);
            qbdsFiscalDocumentTaxTransICMSST.fetchMode(QueryFetchMode::One2One);
            findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMSST, fieldNum(FiscalDocumentTaxTrans_BR, TaxationCode), queryValue(FiscalBooksConstants_BR::TaxationCode60));
            findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMSST, fieldNum(FiscalDocumentTaxTrans_BR, TaxAmountOther), SysQuery::valueNot(0.00));
            findOrCreateRange_W(qbdsFiscalDocumentTaxTransICMSST, fieldNum(FiscalDocumentTaxTrans_BR, Type), queryValue(TaxType_BR::ICMSST));

            QueryBuildDataSource qbdsPresumedICMSST = qbdsFiscalDocumentTaxTransICMSST.addDataSource(tableNum(FiscalDocumentTaxTransPresumed_BR));
            qbdsPresumedICMSST.relations(true);
            qbdsPresumedICMSST.joinMode(JoinMode::InnerJoin);
            qbdsPresumedICMSST.fetchMode(QueryFetchMode::One2One);
        }

        return querySalesComplement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePresumedTaxForSPED</Name>
				<Source><![CDATA[
    private void updatePresumedTaxForSPED(
        RecId _taxTransICMSRecId,
        RecId _taxTransICMSSTRecId,
        FiscalDocumentTaxTransPresumedTemp_BR _fiscalDocumentTaxTransPresumedTemp,
        UnitQty _qty)
    {
        FiscalDocumentTaxTransPresumed_BR fdTaxTransPresumedICMS = FiscalDocumentTaxTransPresumed_BR::findByTaxTrans(_taxTransICMSRecId, true);
        fdTaxTransPresumedICMS.SPEDPresumedTaxAmountPerInvUnit = _fiscalDocumentTaxTransPresumedTemp.TaxAmountICMS;
        fdTaxTransPresumedICMS.SPEDPresumedTaxAmount = _fiscalDocumentTaxTransPresumedTemp.TaxAmountICMS * _qty;
        fdTaxTransPresumedICMS.FiscalDocumentTaxTrans_BR = _taxTransICMSRecId;
        fdTaxTransPresumedICMS.write();

        FiscalDocumentTaxTransPresumed_BR fdTaxTransPresumedICMSST = FiscalDocumentTaxTransPresumed_BR::findByTaxTrans(_taxTransICMSSTRecId, true);
        fdTaxTransPresumedICMSST.SPEDPresumedTaxAmountPerInvUnit = _fiscalDocumentTaxTransPresumedTemp.TaxAmountICMSST;
        fdTaxTransPresumedICMSST.SPEDPresumedTaxBaseAmountPerInvUnit = _fiscalDocumentTaxTransPresumedTemp.TaxBaseAmountICMSST;
        fdTaxTransPresumedICMSST.SPEDPresumedFCPTaxAmountPerInvUnit = _fiscalDocumentTaxTransPresumedTemp.FCPTaxAmountICMSST;
        fdTaxTransPresumedICMSST.SPEDPresumedTaxAmount = _fiscalDocumentTaxTransPresumedTemp.TaxAmountICMSST * _qty;
        fdTaxTransPresumedICMSST.SPEDPresumedTaxBaseAmount = _fiscalDocumentTaxTransPresumedTemp.TaxBaseAmountICMSST * _qty;
        fdTaxTransPresumedICMSST.SPEDPresumedFCPTaxAmount = _fiscalDocumentTaxTransPresumedTemp.FCPTaxAmountICMSST * _qty;
        fdTaxTransPresumedICMSST.FiscalDocumentTaxTrans_BR = _taxTransICMSSTRecId;
        fdTaxTransPresumedICMSST.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIncomingDocumentCollected</Name>
				<Source><![CDATA[
    private boolean isIncomingDocumentCollected(KeySum _sumOfSalesInventory, ItemId _itemId, RecId _recIdFiscalDocument)
    {
        real itemsRemainder = 0;
        if (_sumOfSalesInventory.key2Index_W(_itemId))
        {
            itemsRemainder = _sumOfSalesInventory.index2Data(_sumOfSalesInventory.key2Index_W(_itemId));
        }

        FBBookingPeriodFiscalDocument_BR bookingPeriodFiscalDocument;
        select firstOnly RecId from bookingPeriodFiscalDocument
            where bookingPeriodFiscalDocument.FiscalDocument_BR == _recIdFiscalDocument
                && bookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId;

        return ((itemsRemainder <= 0) && !(bookingPeriodFiscalDocument.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountItemsOutgoing</Name>
				<Source><![CDATA[
    private KeySum getCountItemsOutgoing()
    {
        KeySum keySum = KeySum::construct(1, 1);
        FBICMSSTInventoryBalance_BR fbICMSSTInventoryBalance;

        while select sum(QuantitySales) from fbICMSSTInventoryBalance
            group by fbICMSSTInventoryBalance.ItemId
            where fbICMSSTInventoryBalance.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            keySum.updateNow(fbICMSSTInventoryBalance.ItemId, fbICMSSTInventoryBalance.QuantitySales);
        }

        return keySum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>