<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsInventDimCtrlFormBestBefore</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsIventDimCtrlFormBestBefore</c> class handles the controls on a dimension grid
/// on shelf life inquriy forms.
/// </summary>
public class PdsInventDimCtrlFormBestBefore extends InventDimCtrl_Frm_OnHand
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initlizes the class from the callers selected record.
    /// </summary>
    public void initFromCaller()
    {
        InventSum               inventSum;
        Common                  common;
        InventDimParm           localDimParmVisibleGrid;
        InventTable             inventTable;

        localDimParmVisibleGrid.ItemIdFlag = NoYes::Yes;

        switch (callingElement.args().dataset())
        {
            case tableNum(InventSum):
                localDimParmVisibleGrid.ItemIdFlag = false;
                inventSum = callingElement.args().record();
                this.setUnits(inventSum.ItemId);
                common = inventSum.joinChild();

                if (common.TableId == tableNum(InventDim))
                {
                    localDimParmVisibleGrid.initFromInventDim(common);
                }

                break;

            case tableNum(InventTable):
                localDimParmVisibleGrid.ItemIdFlag = false;
                inventTable = callingElement.args().record();
                this.setUnits(inventTable.ItemId);

                if (callingElement.name() == formStr(PmfMultiDimProcessInventory))
                {
                    localDimParmVisibleGrid.initFromInventDimParm(inventTable.inventDimParmPrimaryDimensions());
                }

                break;
        }

        localDimParmVisibleGrid.InventBatchIdFlag = NoYes::Yes;

        dimParmLockedRightClick.InventBatchIdFlag = NoYes::Yes;

        this.parmDimParmVisibleGrid(localDimParmVisibleGrid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query from an <c>InventTable</c> form data source.
    /// </summary>
    /// <param name="_inventTable_DS">
    /// An <c>InventTable</c> form data source.
    /// </param>
    public void initQueryInventTable(FormDataSource _inventTable_DS)
    {
        Query                   query        = _inventTable_DS.query();
        QueryBuildDataSource    qbsItem;

        qbsItem = query.dataSourceName(_inventTable_DS.name());

        qbsItem.addSelectionField(fieldNum(InventTable, PdsShelfAdvice), SelectionField::Max);
        qbsItem.addSelectionField(fieldNum(InventTable, PdsBestBefore), SelectionField::Max);
        qbsItem.addSelectionField(fieldNum(InventTable, PdsShelfLife), SelectionField::Max);
        qbsItem.addSelectionField(fieldNum(InventTable, pdsTargetFactor), SelectionField::Max);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryWithBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds grouping and summing fields for the data sources specified.
    /// </summary>
    /// <param name="_inventSum_DS">
    /// The data source for the <c>InventSum</c> table.
    /// </param>
    /// <param name="_inventDim_DS">
    /// The data source for the <c>InventDim</c> table.
    /// </param>
    /// <param name="_inventBatch_DS">
    /// The data source for the <c>InventBatch</c> table.
    /// </param>
    public void modifyQueryWithBatch(
        FormDataSource _inventSum_DS,
        FormDataSource _inventDim_DS,
        FormDataSource _inventBatch_DS)
    {
        Query                   query        = _inventDim_DS.query();
        QueryBuildDataSource    qbsBatch;
        QueryBuildRange         criteriaItemId;

        if (!callingElement || !callingElement.args())
        {
            return;
        }

        this.modifyQuery(_inventSum_DS, _inventDim_DS);

        qbsBatch = query.dataSourceName(_inventBatch_DS.name());

        qbsBatch.addGroupByField(fieldNum(InventBatch, ItemId));
        qbsBatch.addGroupByField(fieldNum(InventBatch, InventBatchId));
        qbsBatch.addGroupByField(fieldNum(InventBatch, ProdDate));

        qbsBatch.addGroupByField(fieldNum(InventBatch, PdsBestBeforeDate));
        qbsBatch.addGroupByField(fieldNum(InventBatch, PdsShelfAdviceDate));
        qbsBatch.addGroupByField(fieldNum(InventBatch, ExpDate));

        qbsBatch.addGroupByField(fieldNum(InventBatch, PdsDispositionCode));

        if (query.orderByFieldCount() == 0)
        {
            criteriaItemId = qbsBatch.findRange(fieldNum(InventBatch, ItemId));
            if (!criteriaItemId || criteriaItemId.value() == '')
            {
                // If no other sorting then add some default sorting
                qbsBatch.addOrderByField(fieldNum(InventBatch,ItemId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(FormRun _formRun)
    {
        super();

        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);
        this.parmCallingElement(adapter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PdsInventDimCtrlBestBefore</c> class.
    /// </summary>
    /// <param name="_fr">
    /// The calling form object.
    /// </param>
    /// <returns>
    /// An instance of the <c>PdsInventDimCtrlBestBefore</c> class.
    /// </returns>
    public static PdsInventDimCtrlFormBestBefore construct(Object _fr)
    {
        return new PdsInventDimCtrlFormBestBefore(_fr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>PdsInventDimCtrlBestBefore</c> class.
    /// </summary>
    /// <param name="_formRun">
    /// The calling form.
    /// </param>
    /// <returns>
    /// An initialized instance of the <c>PdsInventDimCtrlBestBefore</c> class.
    /// </returns>
    public static PdsInventDimCtrlFormBestBefore newFromForm(FormRun _formRun)
    {
        PdsInventDimCtrlFormBestBefore  inventDimCtrl   = PdsInventDimCtrlFormBestBefore::construct(_formRun);
        InventDimAxFormAdapter          adapter         = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>