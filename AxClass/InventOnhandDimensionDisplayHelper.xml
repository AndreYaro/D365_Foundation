<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnhandDimensionDisplayHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventOnhandDimensionDisplayHelper
{
    #FormRunConfigurationCommands

}

]]></Declaration>
		<Methods>
			<Method>
				<Name>shouldDisplayExplanationOfNonzeroPhysicalValueWithZeroInvent</Name>
				<Source><![CDATA[
    public boolean shouldDisplayExplanationOfNonzeroPhysicalValueWithZeroInvent(InventSum _inventSum, InventDimCtrl_Frm_OnHand _inventDimCtrl_Frm_OnHand)
    {
        return _inventSum.physicalInventCalculated() == 0 && _inventSum.PhysicalValue != 0 && !this.isDisplayedDimensionsAllFinanciallyActive(_inventSum.ItemId, _inventDimCtrl_Frm_OnHand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructExplanationOfNonzeroPhysicalValueWithZeroInventMessage</Name>
				<Source><![CDATA[
    public str constructExplanationOfNonzeroPhysicalValueWithZeroInventMessage(InventSum _inventSum, InventDimCtrl_Frm_OnHand _inventDimCtrl_Frm_OnHand)
    {
        ItemId itemId = _inventSum.ItemId;
        InventDimParm financialActiveinventDimParm;
        InventDimGroupSetup::newItemId(itemId).inventDimParmActiveFinancialInventory(financialActiveinventDimParm);

        InventDimParm checkedInventDimParm = _inventDimCtrl_Frm_OnHand.parmDimParmVisibleGrid();

        return strFmt("@SCM:InventOnHandNonzeroPhysicalCostWithZeroQuantityExplanation", financialActiveinventDimParm.toString(), checkedInventDimParm.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisplayedDimensionsAllFinanciallyActive</Name>
				<Source><![CDATA[
    private boolean isDisplayedDimensionsAllFinanciallyActive(ItemId _itemId, InventDimCtrl_Frm_OnHand _inventDimCtrl_Frm_OnHand)
    {
        List fieldIdsActive = InventDimGroupSetup::newItemId(_itemId).activeFinancialInventoryFields();
        Set activeFieldIds = new Set(Types::Integer);
        ListIterator listIterator = new ListIterator(fieldIdsActive);
        while (listIterator.more())
        {
            activeFieldIds.add(listIterator.value());
            listIterator.next();
        }

        InventDimParm inventDimParm = _inventDimCtrl_Frm_OnHand.parmDimParmVisibleGrid();
        List fieldIdsChecked = inventDimParm.selectedDimFields();

        ListIterator fieldIdsCheckedIterator = new ListIterator(fieldIdsChecked);
        while (fieldIdsCheckedIterator.more())
        {
            if (!activeFieldIds.in(fieldIdsCheckedIterator.value()))
            {
                return false;
            }
            fieldIdsCheckedIterator.next();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPhysicalCostAmountFieldAndFinancialCostAmountFieldAddedByPersonalization</Name>
				<Source><![CDATA[
    private boolean isPhysicalCostAmountFieldAndFinancialCostAmountFieldAddedByPersonalization(FormRunConfigurationHelper _configurationHelper, str _controlName)
    {
        FormRunConfigurationProperty configurationProperty = FormRunConfigurationProperty::Find(_configurationHelper.calculateOwnerName(), _controlName, #AddFields);
        if (configurationProperty && configurationProperty.Value)
        {
            Set addedFieldsByPersonalization = new Set(Types::String);
            container configurationValue = str2con(configurationProperty.Value);
            for (int i = 2; i <= conLen(configurationValue); i++)
            {
                container fieldInfo = str2con(conPeek(configurationValue, i), '%');
                str fieldName = conPeek(fieldInfo, 1);
                addedFieldsByPersonalization.add(fieldName);
            }
            if (addedFieldsByPersonalization.in(fieldStr(InventSum, PostedValue)) && addedFieldsByPersonalization.in(fieldStr(InventSum, PhysicalValue)))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDisplayInfoMessage</Name>
				<Source><![CDATA[
    public boolean shouldDisplayInfoMessage(FormRunConfigurationHelper _configurationHelper, InventDimCtrl_Frm_OnHand _inventDimCtrl_Frm_OnHand, str _controlName)
    {
        if (!this.isPhysicalCostAmountFieldAndFinancialCostAmountFieldAddedByPersonalization(_configurationHelper, _controlName))
        {
            return false;
        }

        ItemId callerItemId = _inventDimCtrl_Frm_OnHand.parmCallerItemId();
        if (callerItemId == '')
        {
            return true;
        }

        if (!this.isDisplayedDimensionsAllFinanciallyActive(callerItemId, _inventDimCtrl_Frm_OnHand))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>