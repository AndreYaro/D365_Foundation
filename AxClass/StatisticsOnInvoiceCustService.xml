<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StatisticsOnInvoiceCustService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>StatisticsOnInvoiceCustService</c> class calculates the statistics on invoices from customers.
/// </summary>
public class StatisticsOnInvoiceCustService extends SysOperationServiceBase
{
    protected const LedgerJournalACType CustType = LedgerJournalACType::Cust;
    protected const LedgerJournalACType ProjType = LedgerJournalACType::Project;
    protected const TableId CustTransTableId = tableNum(CustTrans);
    protected const TableId CustInvoiceJourTableId = tableNum(CustInvoiceJour);
    protected const TableId ProjInvoiceJourTableId = tableNum(ProjInvoiceJour);

    protected RefRecId currentSession;
    protected StatisticsOnInvoiceJour jour;
    protected StatisticsOnInvoicePaymentSchedule paymentSchedule;

    protected CustSettlement custSettlement;
    protected CustSettlement custSettlementPayment;
    protected CustTrans custTransInvoice, custTransPayment;
    protected CustTransOpen custTransOpenInvoice;
    protected CustInvoiceJour custInvoiceJour;
    protected ProjInvoiceJour projInvoiceJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the statistics.
    /// </summary>
    /// <param name = "_contract">
    /// The parameters for the calculation.
    /// </param>
    public void calc(StatisticsOnInvoiceCustDataContract _contract)
    {
        ttsbegin;

        this.cleanupStatistics(_contract);

        this.insertStatisticsOnInvoiceSession(_contract);
        this.insertStatisticsOnInvoiceJour(_contract);
        this.insertStatisticsOnInvoicePaymentSchedule(_contract);
        this.insertStatisticsOnInvoicePaymentScheduleBalanceOnDueDate();

        ttscommit;

        this.postValidate();
        this.outputResults();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows information about the updated statistics.
    /// </summary>
    protected void outputResults()
    {
        select count(RecId) from jour
            where jour.Session == currentSession;
        info(strFmt("@StatisticsOnInvoice:StatisticsUpdated", jour.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up the statistics for the given parameters.
    /// </summary>
    /// <param name = "_contract">The parameters for the cleanup.</param>
    [Replaceable(true)]
    protected void cleanupStatistics(StatisticsOnInvoiceCustDataContract _contract)
    {
        CustTable custTable;
        TransDate dateFrom = _contract.parmDateFrom();
        TransDate dateTo = _contract.parmDateTo();
        container postingProfiles = this.postingProfiles(_contract);
        container custGroupIds = this.custGroupIds(_contract);

        for (int profileIdx = 1; profileIdx <= conLen(postingProfiles); profileIdx++)
        {
            PostingProfile profile = conPeek(postingProfiles, profileIdx);

            for (int groupIdsIdx = 1; groupIdsIdx <= conLen(custGroupIds); groupIdsIdx++)
            {
                CustGroupId custGroupId = conPeek(custGroupIds, groupIdsIdx);

                // intentionally no custSettlement.CanBeReversed
                delete_from jour
                    where jour.TransTableId == CustTransTableId
                exists join custTransInvoice
                    where custTransInvoice.RecId == jour.TransRecId
                        && (custTransInvoice.TransType == LedgerTransType::Cust
                            || custTransInvoice.TransType == LedgerTransType::Sales
                            || custTransInvoice.TransType == LedgerTransType::GeneralJournal
                            || custTransInvoice.TransType == LedgerTransType::Project)
                        && (!profile || custTransInvoice.PostingProfile == profile)
                exists join custTable
                    where custTable.AccountNum == jour.InvoiceAccount
                        && (!custGroupId || custTable.CustGroup == custGroupId)
                exists join custSettlement
                    where custSettlement.TransRecId == custTransInvoice.RecId
                        && ((custSettlement.TransDate >= dateFrom && custSettlement.TransDate <= dateTo)
                            || (custSettlement.DueDate >= dateFrom && custSettlement.DueDate <= dateTo))
                exists join custTransPayment
                    where custTransPayment.RecId == custSettlement.OffsetRecid
                        && (custTransPayment.TransType == LedgerTransType::Payment
                            // Compensation
                            || custTransPayment.TransType == LedgerTransType::None);
            }
        }

        delete_from paymentSchedule
        notexists join jour
            where jour.RecId == paymentSchedule.InvoiceJour;

        StatisticsOnInvoicePaymentScheduleInvoiceAmount invoiceAmount;
        delete_from invoiceAmount
        notexists join paymentSchedule
            where paymentSchedule.RecId == invoiceAmount.PaymentSchedule;

        StatisticsOnInvoicePaymentScheduleBalanceOnDueDate balanceOnDueDate;
        delete_from balanceOnDueDate
        notexists join paymentSchedule
            where paymentSchedule.RecId == balanceOnDueDate.PaymentSchedule;

        StatisticsOnInvoicePaymentAccountEntry paymentAccountEntry;
        delete_from paymentAccountEntry
        notexists join paymentSchedule
            where paymentSchedule.RecId == paymentAccountEntry.PaymentSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <c>PostingProfileMultiSelection</c> of selected posting profiles to the container.
    /// </summary>
    /// <param name = "_contract">The parameters with selected posting profiles.</param>
    /// <returns>A container with selected posting profiles.</returns>
    protected container postingProfiles(StatisticsOnInvoiceCustDataContract _contract)
    {
        PostingProfileMultiSelection postingProfilesStr = _contract.parmPostingProfiles();
        return postingProfilesStr ? str2con(postingProfilesStr, ';') : [''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>custGroupIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <c>CustGroupIdMultiSelection</c> of selected customer groups to the container.
    /// </summary>
    /// <param name = "_contract">The parameters with selected customer groups.</param>
    /// <returns>A container with selected customer groups.</returns>
    protected container custGroupIds(StatisticsOnInvoiceCustDataContract _contract)
    {
        CustGroupIdMultiSelection custGroupIdsStr = _contract.parmCustGroupIds();
        return custGroupIdsStr ? str2con(custGroupIdsStr, ';') : [''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoiceSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>StatisticsOnInvoiceSession</c> record for the current session.
    /// </summary>
    /// <param name = "_contract">The parameters for the calculation.</param>
    [Replaceable(true)]
    protected void insertStatisticsOnInvoiceSession(StatisticsOnInvoiceCustDataContract _contract)
    {
        StatisticsOnInvoiceSession statisticsOnInvoiceSession;
        statisticsOnInvoiceSession.DateFrom = _contract.parmDateFrom();
        statisticsOnInvoiceSession.DateTo = _contract.parmDateTo();
        statisticsOnInvoiceSession.insert();

        currentSession = statisticsOnInvoiceSession.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>StatisticsOnInvoiceJour</c> records.
    /// </summary>
    /// <param name = "_contract">The parameters for the calculation.</param>
    [Replaceable(true)]
    protected void insertStatisticsOnInvoiceJour(StatisticsOnInvoiceCustDataContract _contract)
    {
        TransDate dateFrom = _contract.parmDateFrom();
        TransDate dateTo = _contract.parmDateTo();
        container postingProfiles = this.postingProfiles(_contract);
        container custGroupIds = this.custGroupIds(_contract);

        for (int profileIdx = 1; profileIdx <= conLen(postingProfiles); profileIdx++)
        {
            PostingProfile profile = conPeek(postingProfiles, profileIdx);

            for (int groupIdsIdx = 1; groupIdsIdx <= conLen(custGroupIds); groupIdsIdx++)
            {
                CustGroupId custGroupId = conPeek(custGroupIds, groupIdsIdx);

                this.insertStatisticsOnInvoiceJour_Cust(dateFrom, dateTo, profile, custGroupId);
                this.insertStatisticsOnInvoiceJour_Proj(dateFrom, dateTo, profile, custGroupId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoiceJour_Cust</Name>
				<Source><![CDATA[
    private void insertStatisticsOnInvoiceJour_Cust(
        TransDate _dateFrom,
        TransDate _dateTo,
        PostingProfile _profile,
        CustGroupId _custGroupId)
    {
        CustTable custTable;

        insert_recordset jour
        (
        Session
        , Type
        , TransTableId
        , TransRecId
        , AmountTransactional
        , AmountAccounting
        , CurrencyCode
        , SettlementAmountTransactional
        , SettlementAmountAccounting
        , PostingProfile
        , DocumentDate
        , ExchAdjustment
        , InvoiceJourTableId
        , InvoiceJourRecId
        , InvoiceAccount
        , InvoiceId
        , InvoiceVoucher
        , InvoiceDate
        , CustGroupId
        )
        select
            currentSession
            , CustType
            , CustTransTableId
            , RecId
            , AmountCur
            , AmountMST
            , CurrencyCode
            , SettleAmountCur
            , SettleAmountMST
            , PostingProfile
            , DocumentDate
            , ExchAdjustment
            from custTransInvoice
            where (custTransInvoice.TransType == LedgerTransType::Cust
                    || custTransInvoice.TransType == LedgerTransType::Sales
                    || custTransInvoice.TransType == LedgerTransType::GeneralJournal)
                && (!_profile || custTransInvoice.PostingProfile == _profile)
        join
            CustInvoiceJourTableId
            , RecId
            , InvoiceAccount
            , InvoiceId
            , LedgerVoucher
            , InvoiceDate
            from custInvoiceJour
            where ((custInvoiceJour.LedgerVoucher == custTransInvoice.Voucher
                && custInvoiceJour.InvoiceDate == custTransInvoice.TransDate))
        join
            CustGroup
            from custTable
            where custTable.AccountNum == custInvoiceJour.InvoiceAccount
                && (!_custGroupId || custTable.CustGroup == _custGroupId)
        exists join custSettlement
            where custSettlement.TransRecId == custTransInvoice.RecId
                && ((custSettlement.TransDate >= _dateFrom && custSettlement.TransDate <= _dateTo)
                    || (custSettlement.DueDate >= _dateFrom && custSettlement.DueDate <= _dateTo))
                && custSettlement.CanBeReversed
        exists join custTransPayment
            where custTransPayment.RecId == custSettlement.OffsetRecid
                && (custTransPayment.TransType == LedgerTransType::Payment
                    // Compensation
                    || custTransPayment.TransType == LedgerTransType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoiceJour_Proj</Name>
				<Source><![CDATA[
    private void insertStatisticsOnInvoiceJour_Proj(
        TransDate _dateFrom,
        TransDate _dateTo,
        PostingProfile _profile,
        CustGroupId _custGroupId)
    {
        CustTable custTable;

        insert_recordset jour
        (
        Session
        , Type
        , TransTableId
        , TransRecId
        , AmountTransactional
        , AmountAccounting
        , CurrencyCode
        , SettlementAmountTransactional
        , SettlementAmountAccounting
        , PostingProfile
        , DocumentDate
        , ExchAdjustment
        , InvoiceJourTableId
        , InvoiceJourRecId
        , InvoiceAccount
        , InvoiceId
        , InvoiceVoucher
        , InvoiceDate
        , CustGroupId
        )
        select
            currentSession
            , ProjType
            , CustTransTableId
            , RecId
            , AmountCur
            , AmountMST
            , CurrencyCode
            , SettleAmountCur
            , SettleAmountMST
            , PostingProfile
            , DocumentDate
            , ExchAdjustment
            from custTransInvoice
            where (custTransInvoice.TransType == LedgerTransType::Project)
                && (!_profile || custTransInvoice.PostingProfile == _profile)
        join
            ProjInvoiceJourTableId
            , RecId
            , InvoiceAccount
            , ProjInvoiceId
            , LedgerVoucher
            , InvoiceDate
            from projInvoiceJour
            where ((projInvoiceJour.LedgerVoucher == custTransInvoice.Voucher
                && projInvoiceJour.InvoiceDate == custTransInvoice.TransDate))
        join
            CustGroup
            from custTable
            where custTable.AccountNum == projInvoiceJour.InvoiceAccount
                && (!_custGroupId || custTable.CustGroup == _custGroupId)
        exists join custSettlement
            where custSettlement.TransRecId == custTransInvoice.RecId
                && ((custSettlement.TransDate >= _dateFrom && custSettlement.TransDate <= _dateTo)
                    || (custSettlement.DueDate >= _dateFrom && custSettlement.DueDate <= _dateTo))
                && custSettlement.CanBeReversed
        exists join custTransPayment
            where custTransPayment.RecId == custSettlement.OffsetRecid
                && (custTransPayment.TransType == LedgerTransType::Payment
                    // Compensation
                    || custTransPayment.TransType == LedgerTransType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoicePaymentSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>StatisticsOnInvoicePaymentSchedule</c> records.
    /// </summary>
    /// <param name = "_contract">The parameters for the calculation.</param>
    [Replaceable(true)]
    protected void insertStatisticsOnInvoicePaymentSchedule(StatisticsOnInvoiceCustDataContract _contract)
    {
        TransDate dateFrom = _contract.parmDateFrom();
        TransDate dateTo = _contract.parmDateTo();

        insert_recordset paymentSchedule
            (
            Session
            , InvoiceJour
            , DueDate
            , TransDate
            , PaymentAmountTransactional
            , PaymentAmountAccounting
            )
        select
            currentSession
            , RecId
            from jour
            where jour.Session == currentSession
        join
            DueDate
            , TransDate
            , sum(SettleAmountCur)
            , sum(SettleAmountMST)
            from custSettlement
            group by jour.RecId, custSettlement.DueDate, custSettlement.TransDate
            where custSettlement.TransRecId == jour.TransRecId
                && ((custSettlement.TransDate >= dateFrom && custSettlement.TransDate <= dateTo)
                    || (custSettlement.DueDate >= dateFrom && custSettlement.DueDate <= dateTo))
                && custSettlement.CanBeReversed
            exists join custTransPayment
                where custTransPayment.RecId == custSettlement.OffsetRecid
                    && (custTransPayment.TransType == LedgerTransType::Payment
                        // Compensation
                        || custTransPayment.TransType == LedgerTransType::None);

        // add Due date(s) that reside in open transactions
        StatisticsOnInvoicePaymentSchedule paymentScheduleExisting;

        insert_recordset paymentSchedule
            (
            Session
            , InvoiceJour
            , DueDate
            )
        select
            currentSession
            , RecId
            from jour
            where jour.Session == currentSession
        join
            DueDate
            from custTransOpenInvoice
            group by jour.RecId, custTransOpenInvoice.DueDate
            where custTransOpenInvoice.RefRecId == jour.TransRecId
        notexists join paymentScheduleExisting
            where paymentScheduleExisting.InvoiceJour == jour.RecId
                && paymentScheduleExisting.DueDate == custTransOpenInvoice.DueDate;

        StatisticsOnInvoicePaymentScheduleInvoiceAmount invoiceAmount;

        insert_recordset invoiceAmount
            (
            PaymentSchedule
            , AmountTransactional
            , AmountAccounting
            )
        select RecId
            from paymentSchedule
            where paymentSchedule.Session == currentSession
        join
            sum(AmountCur)
            , sum(AmountMST)
            from custTransOpenInvoice
            group by paymentSchedule.RecId
            where custTransOpenInvoice.DueDate == paymentSchedule.DueDate
        exists join jour
            where jour.Session == currentSession
                && jour.RecId == paymentSchedule.InvoiceJour
                && jour.TransRecId == custTransOpenInvoice.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoicePaymentScheduleBalanceOnDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>StatisticsOnInvoicePaymentScheduleBalanceOnDueDate</c> records.
    /// </summary>
    [Replaceable(true)]
    protected void insertStatisticsOnInvoicePaymentScheduleBalanceOnDueDate()
    {
        RecordInsertList balanceOnDueDateInsertList = new RecordInsertList(tableNum(StatisticsOnInvoicePaymentScheduleBalanceOnDueDate));

        RefRecId invoiceJour;
        StatisticsOnInvoicePaymentScheduleBalanceOnDueDate balanceOnDueDate;
        StatisticsOnInvoicePaymentScheduleInvoiceAmount invoiceAmount;

        while select paymentSchedule
            order by InvoiceJour, DueDate asc
            where paymentSchedule.Session == currentSession
        join jour
            where jour.RecId == paymentSchedule.InvoiceJour
        outer join invoiceAmount
            where invoiceAmount.PaymentSchedule == paymentSchedule.RecId
        {
            if (invoiceJour != paymentSchedule.InvoiceJour)
            {
                invoiceJour = paymentSchedule.InvoiceJour;
                balanceOnDueDate.AmountAccounting = jour.AmountAccounting + jour.ExchAdjustment;
                balanceOnDueDate.AmountTransactional = jour.AmountTransactional;
            }

            balanceOnDueDate.PaymentSchedule = paymentSchedule.RecId;
            balanceOnDueDate.AmountAccounting -= paymentSchedule.PaymentAmountAccounting;
            balanceOnDueDate.AmountTransactional -= paymentSchedule.PaymentAmountTransactional;

            balanceOnDueDateInsertList.add(balanceOnDueDate);
        }

        balanceOnDueDateInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the statistics after the calculation.
    /// </summary>
    protected void postValidate()
    {
        StatisticsOnInvoicePaymentAccountEntry paymentAccountEntry;
        while select sum(AmountAccounting), sum(AmountTransactional) from paymentAccountEntry
            group by paymentAccountEntry.PaymentSchedule, jour.InvoiceId, paymentSchedule.TransDate, paymentSchedule.DueDate
        join TransDate, DueDate from paymentSchedule
            where paymentSchedule.RecId == paymentAccountEntry.PaymentSchedule
                && paymentSchedule.Session == currentSession
        join InvoiceId from jour
            where jour.RecId == paymentSchedule.InvoiceJour
        {
            if (paymentAccountEntry.AmountAccounting != 0 || paymentAccountEntry.AmountTransactional != 0)
            {
                warning(strFmt("@StatisticsOnInvoice:PostValidateRoundingIssues", jour.InvoiceId, paymentSchedule.TransDate, paymentSchedule.DueDate));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>