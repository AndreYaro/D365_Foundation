<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsDocumentRouting</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Framework.DocumentContract;
/// <summary>
/// The <c>WhsDocumentRouting</c> class is used to print documents using a pre-defined route.
/// </summary>
public class WhsDocumentRouting
{
    RecordSortedList list;
    WHSUserId        userId;

    private WHSMobileAppDeviceId deviceId;
    private WhsDocumentRoutingTranslator licensePlateLabelTranslator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets field list.
    /// </summary>
    /// <returns>
    /// The field list stored in the current instance.
    /// </returns>
    public RecordSortedList getFieldList()
    {        
        this.ensureFieldList();

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureFieldList</Name>
				<Source><![CDATA[
    private void ensureFieldList()
    {
        if (list)
        {
            return;
        }
        
        list = new RecordSortedList(tableNum(TmpSysTableField));
        list.sortOrder(fieldNum(TmpSysTableField, FieldLabel));

        this.initMenuFields();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the document route to print a license plate label.
    /// </summary>
    /// <param name="_workTransType">
    /// Work transaction type of the document route.
    /// </param>
    /// <param name="_label">
    /// Label record that contains label info.
    /// </param>
    /// <returns>
    /// The document route record id.
    /// </returns>
    [Hookable(false)]
    protected final RefRecId findRoute(WHSWorkTransType _workTransType, WHSLicensePlateLabel _label)
    {
        WHSDocumentRoutingTable routingTable;
        WHSWorkerRecId worker;                

        worker = HcmWorkerLookup::currentWorker();

        while select routingTable
            where routingTable.InventLocationId == _label.InventLocationId
                && routingTable.WorkTransType == _workTransType
                && (!routingTable.Worker || routingTable.Worker == worker)
                && (!routingTable.UserId || (userId && routingTable.UserId == userId) || (!userId && routingTable.UserId  == _label.UserId))
                && (!routingTable.AccountNum || routingTable.AccountNum == _label.AccountNum)
                && (!routingTable.CarrierCode || routingTable.CarrierCode == _label.CarrierCode)
                && (!routingTable.ZoneIdFrom || routingTable.ZoneIdFrom == _label.ZoneIdFrom)
                && (!routingTable.ZoneIdTo || routingTable.ZoneIdTo == _label.ZoneIdTo)
                && (!routingTable.WorkTemplateCode || routingTable.WorkTemplateCode == _label.WorkTemplateCode)
        {
            if (this.isRouteApplicable(_label, routingTable))
            {
                break;
            }
        }

        return routingTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRouteApplicable</Name>
				<Source><![CDATA[
    protected boolean isRouteApplicable(WHSLicensePlateLabel _label, WHSDocumentRoutingTable _routingTable)
    {
        // If we don't need to run the query, we found a route.
        if (!_routingTable.RunQuery)
        {
            return true;
        }

        QueryRun qr = new QueryRun(_routingTable.Query);
        SysQuery::findOrCreateRange(qr.query().dataSourceTable(tableNum(WHSLicensePlateLabel)), fieldNum(WHSLicensePlateLabel, LabelId)).value(_label.LabelId);

        // If the query returns a record, we found a route.
        if (qr.next())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    public WHSUserId parmUserId(WHSUserId _userId)
    {
        userId = _userId;

        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeviceId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSMobileAppDeviceId parmDeviceId(WHSMobileAppDeviceId _deviceId = deviceId)
    {
        deviceId = _deviceId;

        return deviceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMenuFields</Name>
				<Source><![CDATA[
    private void initMenuFields()
    {        
        DictTable dictTable = new DictTable(tableNum(WHSLicensePlateLabel));
        int length = dictTable.fieldCnt();      

        for (int i = 1; i <= length; ++i)
        {
            DictField dictField = new DictField(tableNum(WHSLicensePlateLabel), dictTable.fieldCnt2Id(i));

            if (!dictField.isSystem() && dictField.visible())
            {
                TmpSysTableField tmpField;
                tmpField.FieldId = dictField.id();
                tmpField.FieldName = dictField.name();
                tmpField.FieldLabel = dictField.label();
                list.ins(tmpField);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Print the provided label to all relevant printers.
    /// </summary>
    /// <param name = "_workTransType">Work transaction type context.</param>
    /// <param name = "_label">The label being printed represented as a <c>WHSLicensePlateLabel</c> record.</param>
    public void printDocument(WHSWorkTransType _workTransType, WHSLicensePlateLabel _label)
    {
        RefRecId routeRecId = this.findRoute(_workTransType, _label);        

        if (WHSParameters::find().UseWHSLabelLayoutForDocumentRoutingLine)
        {
            this.printDocumentWithDocumentRoutingLabelLayoutLine(routeRecId, _label);
        }
        else
        {
            this.printDocumentWithDocumentRoutingLine(routeRecId, _label);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentWithDocumentRoutingLabelLayoutLine</Name>
				<Source><![CDATA[
    private void printDocumentWithDocumentRoutingLabelLayoutLine(RefRecId _routeRecId, WHSLicensePlateLabel _label)
    {
        WHSDocumentRoutingLabelLayoutLine routingLine;
        WHSUserId currentUserId = userId ? userId : _label.UserId;

        WHSLabelPrinterSelector labelPrinterSelector = WHSLabelPrinterSelector::construct();
        labelPrinterSelector.withUserId(currentUserId)
                            .withDeviceId(deviceId)
                            .withWarehouseId(_label.InventLocationId);

        while select routingLine
            where routingLine.DocumentRoutingTable == _routeRecId
        {
            if (this.mustPrintLabelLayout(routingLine))
            {
                WhsLicensePlateLabelPrintCommandGenerator::printLabelsForLicensePlate(routingLine, _label, labelPrinterSelector);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentWithDocumentRoutingLine</Name>
				<Source><![CDATA[
    private void printDocumentWithDocumentRoutingLine(RefRecId _routeRecId, WHSLicensePlateLabel _label)
    {
        WHSDocumentRoutingLine	routingLine;
        WHSUserId currentUserId = userId ? userId : _label.UserId;

        WHSLabelPrinterSelector labelPrinterSelector = WHSLabelPrinterSelector::construct();
        labelPrinterSelector.withUserId(currentUserId)
                            .withDeviceId(deviceId)
                            .withWarehouseId(_label.InventLocationId);

        while select routingLine
            where routingLine.DocumentRoutingTable == _routeRecId
        {
            if (this.mustPrintLabel(routingLine))
            {
                this.instantiateTranslatorWithRoutingLine(routingLine);

                WHSDocumentRoutingLayout layout = WHSDocumentRoutingLayout::find(routingLine.LayoutId);

                str finalStr = this.translate(layout.zpl, _label);

                labelPrinterSelector.withForceUseOfFallbackPrinter(routingLine.UseSpecifiedPrinter == WHSDocumentRoutingUseSpecifiedPrinter::Always);
                labelPrinterSelector.withFallbackPrinter(routingLine.PrinterName);
                WHSPrinterName printerName = labelPrinterSelector.selectPrinterForPrinterStockType(layout.PrinterStockTypeName);
                
                WhsDocumentRouting::printLabelToPrinter(printerName, finalStr);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateTranslatorWithRoutingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates instance of <c>WhsDocumentRoutingTranslator</c>.
    /// </summary>
    /// <param name = "_routingLine">An instance of <c>WHSDocumentRoutingLine</c>.</param>
    [Hookable(false)]
    public void instantiateTranslatorWithRoutingLine(WHSDocumentRoutingLine _routingLine)
    {
        licensePlateLabelTranslator = WhsDocumentRoutingTranslator::construct();
        licensePlateLabelTranslator.withRecord(_routingLine, 'routingLine');
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintLabel</Name>
				<Source><![CDATA[
	/// <summary>
    /// Determines if the label must be printed.
    /// </summary>
    /// <param name = "_routingLine">An instance of the <c>WHSDocumentRoutingLine</c> records.</param>
    /// <returns>true if label should be printed; otherwise, false.</returns>
    protected boolean mustPrintLabel(WHSDocumentRoutingLine _routingLine)
    {
        return true;
	}

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintLabelLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the label must be printed.
    /// </summary>
    /// <param name = "_labelLayoutRoutingLine">An instance of the <c>WHSDocumentRoutingLabelLayoutLine</c> records.</param>
    /// <returns>true if label should be printed; otherwise, false.</returns>
    protected boolean mustPrintLabelLayout(WHSDocumentRoutingLabelLayoutLine _labelLayoutRoutingLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelToPrinter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send the specified label to the specified printer.
    /// </summary>
    /// <param name = "_printerName">Name of the printer to print to.</param>
    /// <param name = "_label">ZPL commands that comprise the label.</param>
    [SysObsolete('WhsLabelPrintCommand was introduced to replace the plain string ZPL label. Callers should begin using printLabelPrintCommandToPrinter or printZPLLabelToPrinter instead', false, 11\2\2023)]
    public static void printLabelToPrinter(Name _printerName, str _label)
    {
        if (WhsBatchedDocumentRoutingContext::instance()
            && WHSSysCorpNetPrinters::find(_printerName).IsBatchPrintEnabled)
        {
            WHSBatchedDocumentRoutingContext batchedLabelPrint = WHSBatchedDocumentRoutingContext::instance();

            batchedLabelPrint.batchLabel(_printerName, _label);
            return;
        }

        WhsDocumentRouting::printLabelPrintCommandToPrinterWithEncoding(_printerName, new WhsLabelPrintCommand(WhsLabelPrintCommandType::ZPL, _label), System.Text.Encoding::UTF8);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printZPLLabelToPrinter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void printZPLLabelToPrinter(Name _printerName, str _label)
    {
        WhsDocumentRouting::printLabelPrintCommandToPrinter(_printerName, new WhsLabelPrintCommand(WhsLabelPrintCommandType::ZPL, _label));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelPrintCommandToPrinter</Name>
				<Source><![CDATA[
    public static void printLabelPrintCommandToPrinter(Name _printerName, WhsLabelPrintCommand _labelPrintCommand)
    {
        if (!_labelPrintCommand || 
            !_labelPrintCommand.parmLabelString())
        {
            return;
        }

        switch (_labelPrintCommand.parmLabelType())
        {
            case WhsLabelPrintCommandType::ZPL:
                // Maintain compatibility by calling the old method
                WhsDocumentRouting::printLabelToPrinter(_printerName, _labelPrintCommand.parmLabelString());
                break;

            case WhsLabelPrintCommandType::ExternalLabelPrintServiceCommand:
                WhsDocumentRouting::printLabelPrintCommandToPrinterWithEncoding(_printerName, _labelPrintCommand, System.Text.Encoding::UTF8);        
                break;
        }            
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelPrintCommandToPrinterWithEncoding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send the specified label to the specified printer using a given encoding.
    /// </summary>
    /// <param name = "_printerName">Name of the printer to print to.</param>
    /// <param name = "_labelPrintCommand">An instance of <c>WhsLabelPrintCommand</c> to print.</param>
    /// <param name = "_encoding">Encoding to use when converting the text.</param>    
    public static void printLabelPrintCommandToPrinterWithEncoding(Name _printerName, WhsLabelPrintCommand _labelPrintCommand, System.Text.Encoding _encoding)
    {
        if (_labelPrintCommand)
        {
            WHSSysCorpNetPrinters whsPrinter = WHSSysCorpNetPrinters::find(_printerName);                        

            if (whsPrinter.LabelPrintServiceInstance)
            {
                if (WhsDocumentRouting::printLabelPrintCommandToLabelPrintService(whsPrinter, _labelPrintCommand))
                {
                    return;
                }
            }

            SrsReportPrinterContract activePrinterContract = SrsReportRunUtil::getActivePrinter(_printerName);

            if (WhsDocumentRouting::canSendLabelToPrinter(activePrinterContract.parmPrinterName(), _labelPrintCommand.parmLabelString()))
            {
                DocumentContractFactory factory = DocumentContractFactory::Instance;
                DocumentContract documentContract = factory.Create(DocumentContractType::Zebra);

                documentContract.Name = activePrinterContract.parmPrinterName();
                documentContract.Contents = SerializationHelper::ConvertStringToByteArray(_labelPrintCommand.parmLabelString(), _encoding);
                documentContract.Settings = activePrinterContract.parmPrinterPath();

                SrsReportRunPrinter::sendDocumentContractToDocumentRouter(documentContract);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSendLabelToPrinter</Name>
				<Source><![CDATA[
    private static boolean canSendLabelToPrinter(str _printerName, str _labelString)
    {
        return _labelString != '' && _printerName != '';       
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelPrintCommandToLabelPrintService</Name>
				<Source><![CDATA[
    private static boolean printLabelPrintCommandToLabelPrintService(WHSSysCorpNetPrinters _printer, WhsLabelPrintCommand _labelPrintCommand)
    {
        WhsExternalLabelService labelService = WhsExternalLabelService::newWithPrinterAndLabel(_printer, _labelPrintCommand);

        boolean labelServiceSuccess = labelService.invoke();

        return labelServiceSuccess || _printer.LabelPrintServiceExecutionPolicy == WhsLabelPrintServiceExecutionPolicy::LPSOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelPrintCommandsToPrinter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void printLabelPrintCommandsToPrinter(str _printerName, List _labelsList)
    {
        if (!_labelsList || _labelsList.elements() == 0 || !_printerName)
        {
            return;
        }

        ListEnumerator labelsListEnumerator = _labelsList.getEnumerator();
        while (labelsListEnumerator.moveNext())
        {
            WhsLabelPrintCommand currentLabel = labelsListEnumerator.current();
            if (currentLabel)
            {
                WHSDocumentRouting::printLabelPrintCommandToPrinter(_printerName, currentLabel);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceFieldNameWithValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces the field name with the field value.
    /// </summary>
    /// <param name = "_labelStr">The string to perform the replace operation on.</param>
    /// <param name="_label">Label that contains values to be inserted to the input string.</param>
    /// <param name = "_tmpField">The field to replace.</param>
    /// <returns>The string label to replace.</returns>
    protected str replaceFieldNameWithValue(str _labelStr, WHSLicensePlateLabel _label, TmpSysTableField _tmpField)
    {
        return strReplace(_labelStr, strFmt('$%1$', _tmpField.FieldName), strFmt('%1', _label.(_tmpField.FieldId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>translate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the label by replacing the fields with values.
    /// </summary>
    /// <param name="_inputStr">
    /// Input string to be replaced.
    /// </param>
    /// <param name="_label">
    /// Label that contains values to be inserted to the input string.
    /// </param>
    /// <returns>
    /// The generated string that contains the representation of a license plate.
    /// </returns>
    protected str translate(str _inputStr, WHSLicensePlateLabel _label)
    {
        return licensePlateLabelTranslator.withRecord(_label).translate(_inputStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WhsDocumentRouting construct()
    {
        var documentRouting = new WhsDocumentRouting();

        var documentRoutingContext = WhsDocumentRoutingContext::current();
        if (documentRoutingContext != null && WHSLabelPrinterSelector::IsWHSLabelPrintSelectorDeviceSupportFlightEnabled)
        {
            documentRouting.parmDeviceId(documentRoutingContext.parmMobileDeviceId());
        }

        return documentRouting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>