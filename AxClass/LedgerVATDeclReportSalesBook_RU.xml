<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVATDeclReportSalesBook_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerVATDeclReportSalesBook_RU extends LedgerVATDeclReportSalesPurchBook_RU
{
    boolean             isOldBook;
    AmountMST           totalSalesAmountExclVAT20;
    AmountMST           totalSalesAmountExclVAT18;
    AmountMST           totalSalesAmountExclVAT10;
    AmountMST           totalSumSalesAmountVAT0;
    AmountMST           totalTaxAmountVAT20;
    AmountMST           totalTaxAmountVAT18;
    AmountMST           totalTaxAmountVAT10;
    AmountMST           totalSumAmountWithOutTaxes;

    QueryRun                salesBookQueryRun;
    SalesPurchBookRecId_RU  bookRecId;
    Map fEACCIdMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fEACCIdKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the key for FEACCId.
    /// </summary>
    /// <param name="_factureTrans">
    /// <c>FactureTrans_RU</c> record being processed.
    /// </param>
    /// <param name="_transDate">
    /// The date to which the FEACCId should relate.
    /// </param>
    /// <returns>The string with key.</returns>
    protected str fEACCIdKey(FactureTrans_RU _factureTrans, TransDate _transDate)
    {
        return strFmt("%1#%2#%3", _factureTrans.ItemId, _transDate, _factureTrans.InventGTDId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureConRevision</Name>
				<Source><![CDATA[
    protected container getFactureConRevision(SalesBookTrans_RU _salesBookTrans)
    {
        container               result;

        if (_salesBookTrans.RevisionSeqNumber > 0)
        {
            result = [_salesBookTrans.RevisionSeqNumber, _salesBookTrans.FactureDate_External];

        }
        else
        {
            result = [0, datenull()];
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFEACCInventTableSearchParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the search parameters for finding the <c>FEACCInventTable_RU</c> table.
    /// </summary>
    /// <param name="_factureTrans">
    /// <c>FactureTrans_RU</c> record being processed.
    /// </param>
    /// <param name="_date">
    /// The date to which the FEACCId should relate.
    /// </param>
    /// <returns>The search parameters.</returns>
    protected FEACCInventTable_RU initializeFEACCInventTableSearchParameters(FactureTrans_RU _factureTrans, TransDate _date)
    {
        FEACCInventTable_RU searchParameters;
        searchParameters.initValue();

        searchParameters.ItemId = _factureTrans.ItemId;
        searchParameters.ActivationDate = _date;

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFEACCId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds FEACCId from facture trans and date.
    /// </summary>
    /// <param name="_factureTrans">
    /// <c>FactureTrans_RU</c> record being processed.
    /// </param>
    /// <param name="_transDate">
    /// The date to which the FEACCId should relate.
    /// </param>
    /// <returns>The FEACCId found based on provided parameters.</returns>
    protected FEACCId_RU getFEACCId(FactureTrans_RU _factureTrans, TransDate _transDate)
    {
        str fEACCIdKey = this.fEACCIdKey(_factureTrans, _transDate);
        FEACCId_RU fEACCId_RU;

        if (fEACCIdMap.exists(fEACCIdKey))
        {
            fEACCId_RU = fEACCIdMap.lookup(fEACCIdKey);
        }
        else
        {
            fEACCId_RU = FEACCInventTable_RU::findFEACCIdByNaturalKeyAndInventGTD(this.initializeFEACCInventTableSearchParameters(_factureTrans, _transDate), _factureTrans.inventGTDId);
            fEACCIdMap.insert(fEACCIdKey, fEACCId_RU);
        }
        return fEACCId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFEACCString</Name>
				<Source><![CDATA[
    private str getFEACCString(Set _fEACCIdSet)
    {
        SetEnumerator se  = _fEACCIdSet.getEnumerator();
        str fEACCStr;

        while (se.moveNext())
        {
            if (se.current())
            {
                fEACCStr += se.current() + '; ';
            }
        }

        if (fEACCStr)
        {
            fEACCStr = subStr(fEACCStr, 1, strLen(fEACCStr) - 2);
        }

        return fEACCStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevisionFactureDate</Name>
				<Source><![CDATA[
    protected FactureDate_External_RU getRevisionFactureDate(FactureJour_RU _factureJour_RU, RevisionNum_RU _revisionNum)
    {
        FactureJour_RU                  factureJour;

        select firstonly FactureDate_External from factureJour
        where  factureJour.RefRevisedFacture    == _factureJour_RU.RecId
            && factureJour.RevisionNum          == _revisionNum;

        return factureJour.FactureDate_External;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun initQueryRun(boolean _isOldBook)
    {
        QueryRun    queryRun;

        queryRun = new QueryRun(SalesBookTable_RU::createQuery(
        bookRecId,
        salesBookQueryRun ? salesBookQueryRun.query() : SalesBookTable_RU::createDefaultQuery(0, null, fromDate, toDate),
        fromDate,
        toDate,
        true));

        if (!_isOldBook)
        {
            queryRun = SalesBookTable_RU::initQueryRunOnTmp(queryRun, 0, groupCorrect);
        }

        SalesBookTable_RU::updateQuery(queryRun, groupByFactures);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
    protected void insertHeader()
    {
        header.TotalAmountExclVAT20 = totalSalesAmountExclVAT20;
        header.TotalAmountExclVAT18 = totalSalesAmountExclVAT18;
        header.TotalAmountExclVAT10 = totalSalesAmountExclVAT10;
        header.TotalAmountExclVAT0 = totalSumSalesAmountVAT0;
        header.TotalTaxAmountVAT20 = totalTaxAmountVAT20;
        header.TotalTaxAmountVAT18 = totalTaxAmountVAT18;
        header.TotalTaxAmountVAT10 = totalTaxAmountVAT10;
        header.TotalAmountWOTax = totalSumAmountWithOutTaxes;

        header.ReportingYear = reportingYear;
        header.ReportingPeriodNum = reportingPeriodNum;

        header.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLine</Name>
				<Source><![CDATA[
    protected TmpLedgerVATDeclaratoinLine_RU insertLine(
        SalesBookTrans_RU    _salesBookTrans,
        int                  _row,
        PurchBookTrans_RU    _purchBookTrans)
    {
        container   factureDateNumCon, paymDateNumCon;
        boolean     isStandardCurrency;
        INN_RU      inn;
        KPPU_RU     kpp;
        Name        name;
        container   conINNKPP;
        str         innKpp;
        FactureJour_RU  factureJour;
        DirPartyRecId   party;
        FactureTrans_RU factureTrans;
        container gtd;
        boolean isCustomUnionSale;
        Set fEACIdSet = new Set(Types::String);
        TransDate fEACCIdDate;


        if (_salesBookTrans.FactureJour_RU)
        {
            factureJour = FactureJour_RU::findRecId(_salesBookTrans.FactureJour_RU);
        }
        else
        {
            factureJour = FactureJour_RU::find(_salesBookTrans.FactureId, _salesBookTrans.factureModule());
        }

        isStandardCurrency = _salesBookTrans.CurrencyCode == CompanyInfoHelper::standardCurrency() || factureJour.PrintInMST;

        line.clear();
        line.LineNumber = _row;

        factureDateNumCon = this.getFactureCon(_salesBookTrans);
        line.FactureNum = conpeek(factureDateNumCon, 1);
        line.FactureDate = any2Date(conpeek(factureDateNumCon, 2));

        if (_salesBookTrans.CorrectedFactureExternalId)
        {
            switch (_salesBookTrans.CorrectionType)
            {
                case FactureCorrectionType_RU::Revision:
                    switch (_salesBookTrans.RevisionType)
                    {
                        case FactureRevisionType_RU::RevisionOriginal:
                            factureDateNumCon = this.getFactureConRevision(_salesBookTrans);
                            line.FactureCorrRevision = conpeek(factureDateNumCon, 1);
                            line.FactureCorrDate = any2Date(conpeek(factureDateNumCon, 2));
                            break;

                        default:
                            factureDateNumCon = this.getFactureConCorrRevision(_salesBookTrans);
                            line.FactureCorrRevision = conpeek(factureDateNumCon, 1);
                            line.FactureCorrDate = any2Date(conpeek(factureDateNumCon, 2));

                            factureDateNumCon = this.getFactureConCorr(_salesBookTrans);
                            line.CorrFactureNum = conpeek(factureDateNumCon, 1);
                            line.CorrFactureDate = any2Date(conpeek(factureDateNumCon, 2));

                            factureDateNumCon = this.getFactureConRevision(_salesBookTrans);
                            line.CorrFactureCorrRevision = conpeek(factureDateNumCon, 1);
                            line.CorrFactureCorrDate = any2Date(conpeek(factureDateNumCon, 2));
                            break;
                    }
                    break;

                default:
                    if (_salesBookTrans.FactureJour_RU)
                    {
                        factureDateNumCon = this.getFactureConRevisionCorr(_salesBookTrans);
                        line.FactureCorrRevision = conpeek(factureDateNumCon, 1);
                        line.FactureCorrDate = any2Date(conpeek(factureDateNumCon, 2));
                    }

                    factureDateNumCon = this.getFactureConCorr(_salesBookTrans);
                    line.CorrFactureNum = conpeek(factureDateNumCon, 1);
                    line.CorrFactureDate = any2Date(conpeek(factureDateNumCon, 2));

                    if (factureJour.JointCorrection && line.CorrFactureNum)
                    {
                        line.FactureNum = line.CorrFactureNum;
                        line.FactureDate = line.CorrFactureDate;
                    }

                    break;
            }
        }

        isCustomUnionSale = factureJour.isCustomUnionSale(factureJour);
        fEACCIdDate = max(line.FactureDate, line.FactureCorrDate, line.CorrFactureDate, line.CorrFactureCorrDate);

        while select InventGTDId, ItemId
            from factureTrans
            group by InventGTDId, ItemId
                where factureTrans.FactureId == factureJour.FactureId
                   && factureTrans.Module == factureJour.Module
        {
            gtd += factureTrans.InventGTDId;
            if (isCustomUnionSale)
            {
                fEACIdSet.add(this.getFEACCId(factureTrans, fEACCIdDate));
            }
        }

        line.CountryGTD = con2Str(gtd, ', ');
        line.FEACCIds = this.getFEACCString(fEACIdSet);

        if (isStandardCurrency)
        {
            line.CurrencyCode       = CompanyInfoHelper::standardCurrency();
            line.AmountCurInclVAT   = 0;
        }
        else
        {
            line.CurrencyCode       = _salesBookTrans.CurrencyCode;
            line.AmountCurInclVAT   = _salesBookTrans.AmountCurInclVAT;
        }

        line.CurrencyCodeOKV = this.currencyCode(line.CurrencyCode);
        line.AmountInclVAT = _salesBookTrans.AmountInclVAT;

        AmountMST amountLiableToVAT20, taxAmountVAT20,
            amountLiableToVAT18, taxAmountVAT18;
        [ amountLiableToVAT20, taxAmountVAT20,
            amountLiableToVAT18, taxAmountVAT18 ] = SalesBookTable_RU::isCreditNote(_salesBookTrans, isOldBook) ? 
            _purchBookTrans.amountsVATStandard() :
            _salesBookTrans.amountsVATStandard();

        if (_salesBookTrans.TransType != SalesPurchBookTransType_RU::Prepayment &&
            _salesBookTrans.TransType != SalesPurchBookTransType_RU::PrepaymentStorno &&
            factureJour.PrepaymTaxCorrection == NoYes::No)
        {
            line.AmountExclVAT18 = amountLiableToVAT18;
            line.AmountExclVAT20 = amountLiableToVAT20;
            line.AmountExclVAT10 = _salesBookTrans.AmountLiableToVAT10;
            line.AmountExclVAT0 = _salesBookTrans.AmountLiableToVAT0;

            line.AmountWOTax = _salesBookTrans.AmountNotLiableToVAT;

            header.NotOnlyPrepaymentTrans = NoYes::Yes;
        }

        line.TaxAmountVAT18 = taxAmountVAT18;
        line.TaxAmountVAT20 = taxAmountVAT20;
        line.TaxAmountVAT10 = _salesBookTrans.TaxAmountVAT10;

        line.OperationTypeCodes =_salesBookTrans.OperationTypeCodes;

        paymDateNumCon = this.paymNumDateCon(_salesBookTrans);
        line.PaymDocumentNum = conpeek(paymDateNumCon, 1);
        line.PaymentDate = any2date(conpeek(paymDateNumCon, 2));

        [name, inn, kpp] = BookTransCalc_RU::getContragentData(FactureJour_RU::findRecId(_salesBookTrans.FactureJour_RU));

        if (kpp)
        {
            line.CompanyINN = inn;
            line.CompanyKPP = kpp;
        }
        else
        {
            line.PersonINN = inn;
        }

        line.SellerBuyerName = name;
        conINNKPP = str2con(_salesBookTrans.SalesPurchBookDataMap_RU::partyINNKPP(_salesBookTrans.FactureDate_External), '/');
        line.SellerBuyerINN = conLen(conINNKPP) >= 1 ? strFmt("@SYS82282", conPeek(conINNKPP, 1)) : '';
        line.SellerBuyerKPP = conLen(conINNKPP) >= 2 ? strFmt("@SYS82282", conPeek(conINNKPP, 2)) : '';

        if (_salesBookTrans.CommissionAgent)
        {
            [name, innKpp, party] = _salesBookTrans.SalesPurchBookDataMap_RU::commissionAgentData(_salesBookTrans.FactureDate_External);
            conINNKPP = str2con(innKpp, '/');

            if (conLen(conINNKPP) >= 2)
            {
                line.AgentCompanyINN = conPeek(conINNKPP, 1);
                line.AgentCompanyKPP = conPeek(conINNKPP, 2);
            }
            else
            {
                line.AgentPersonINN = conPeek(conINNKPP, 1);
            }

            line.AgentName = name;
            line.AgentParty = party;
        }

        line.insert();

        return line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        fEACCIdMap = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymNumDateCon</Name>
				<Source><![CDATA[
    protected container paymNumDateCon(SalesBookTrans_RU _salesBookTrans)
    {
        container ret = ['', datenull()];
        FactureJour_RU factureJour;
        boolean        printDocNum;

        if (_salesBookTrans.PaymDocumentNum && _salesBookTrans.PaymentDate)
        {
            switch (_salesBookTrans.TransType)
            {
                case SalesPurchBookTransType_RU::TaxCorrection:
                    factureJour = FactureJour_RU::find(_salesBookTrans.FactureId, _salesBookTrans.factureModule());

                    if (factureJour.Module == FactureModule_RU::TaxCorrectionSales_Vend 
                        && (factureJour.VATTaxAgent || factureJour.PrepaymTaxCorrection == NoYes::Yes))
                    {
                        printDocNum = true;
                    }
                    break;
                case SalesPurchBookTransType_RU::Prepayment:
                case SalesPurchBookTransType_RU::PrepaymentStorno:
                    printDocNum = true;
                    break;
            }

            if (printDocNum)
            {
                ret = [_salesBookTrans.PaymDocumentNum, _salesBookTrans.PaymentDate];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    #VATTransitionPeriod_RU
    protected void prepareData()
    {
        QueryRun            queryRun;
        PurchBookTrans_RU   purchBookTrans;
        SalesBookTrans_RU   salesBookTrans;
        int                 cx;

        isOldBook = toDate < #BookCorrectionDate ? true : false;

        queryRun = this.initQueryRun(isOldBook);

        if (queryRun)
        {
            while (queryRun.next())
            {
                salesBookTrans = queryRun.get(tablenum(SalesBookTrans_RU));

                cx++;

                purchBookTrans = SalesBookTable_RU::salesBookTrans2PurchBookTrans(salesBookTrans, isOldBook);

                line = this.insertLine(salesBookTrans, cx, purchBookTrans);

                FactureJour_RU factureJour = salesBookTrans.FactureJour_RU
                    ? FactureJour_RU::findRecId(salesBookTrans.FactureJour_RU)
                    : FactureJour_RU::find(salesBookTrans.FactureId, salesBookTrans.factureModule());
                SalesPurchBookTransType_RU transType = factureJour.PrepaymTaxCorrection == NoYes::No
                    ? salesBookTrans.TransType
                    : SalesPurchBookTransType_RU::PrepaymentStorno;

                this.updateTotals(line, transType);
            }
        }

        this.insertHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContract</Name>
				<Source><![CDATA[
    public void setContract(container _contractPack)
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();

        super(_contractPack);

        contract.unpack(_contractPack);

        if (isCalledFromXMLExcelReport && contract.parmSalesPurchBookQueryRun() != conNull())
        {
            salesBookQueryRun = new queryRun(contract.parmSalesPurchBookQueryRun());
        }

        bookRecId = contract.parmBookRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    protected void updateTotals(TmpLedgerVATDeclaratoinLine_RU _line, SalesPurchBookTransType_RU _transType)
    {
        totalTaxAmountVAT20 += _line.TaxAmountVAT20;
        totalTaxAmountVAT18 += _line.TaxAmountVAT18;        
        totalTaxAmountVAT10 += _line.TaxAmountVAT10;

        if (_transType != SalesPurchBookTransType_RU::Prepayment &&
            _transType != SalesPurchBookTransType_RU::PrepaymentStorno)
        {
            totalSalesAmountExclVAT20    += _line.AmountExclVAT20;
            totalSalesAmountExclVAT18    += _line.AmountExclVAT18;
            totalSalesAmountExclVAT10    += _line.AmountExclVAT10;
            totalSumSalesAmountVAT0      += _line.AmountExclVAT0;
            totalSumAmountWithOutTaxes   += _line.AmountWOTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerVATDeclReportSalesBook_RU construct()
    {
        return new LedgerVATDeclReportSalesBook_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>