<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFundingLimitSpentAmountCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjFundingLimitSpentAmountCleanUp</c> class evaluates and updates LimitSpent 
/// amounts in the <c>ProjFundingLimit</c> table.
/// </summary>
internal final class ProjFundingLimitSpentAmountCleanUp extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates LimitSpent amounts in the <c>ProjFundingLimit</c> table.
    /// </summary>
    /// <param name = "_contract"><c>ProjFundingLimitSpentAmountCleanupContract</c>Data contract used to pass RecIds to update</param>
    internal void updateRecords(ProjFundingLimitSpentAmountCleanupContract _contract)
    {
        if (ProjFundingLimitSpentAmountCleanUpFlight::instance().isEnabled())
        {
            if (!this.validate(_contract))
            {
                return;
            }
        
            container records = _contract.parmProjFundingLimitRecIds();

            for (int i = 1; i <= conLen(records); i++)
            {
                RecId projFundingLimitRecId = conPeek(records, i);

                ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjFundingLimitSpentAmountCleanUp));
                using (var activityContext = logger.projOpsFinActivity().ProjFundingLimitSpentAmountCleanUp())
                {
                    ttsbegin;
                    ProjFundingLimit projFundingLimit = ProjFundingLimit::find(projFundingLimitRecId, true);
                    ProjComputeFundingLimitActualAmount projComputeFundingLimitActualAmount = ProjComputeFundingLimitActualAmount::construct(projFundingLimit);
                    AmountCur actualsAmount = ProjComputeFundingLimitActualAmount.run();

                    if (actualsAmount != projFundingLimit.LimitSpent && actualsAmount <= projFundingLimit.AmountMst)
                    {
                        logger.logInformation(strFmt(ProjOpsFinancialsInstrumentationActivites::ProjFundingLimitSpentAmountCleanUpLogMessageFmt,
                            projFundingLimitRecId, projFundingLimit.LimitSpent, actualsAmount));

                        projFundingLimit.LimitSpent = actualsAmount;
                        projFundingLimit.write();
                    }
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate(ProjFundingLimitSpentAmountCleanupContract _contract)
    {
        boolean ret = true;

        if (!_contract.parmProjFundingLimitRecIds())
        {
            ret = checkFailed("@Proj:ProjFundingLimitNotSpecified");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>