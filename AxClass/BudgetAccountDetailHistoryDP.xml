<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAccountDetailHistoryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used as the data provider for the <c>BudgetAccountDetailHistory</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(BudgetAccountDetailHistoryContract)),
    SRSReportQueryAttribute('BudgetAccountDetailHistory')
]
class BudgetAccountDetailHistoryDP extends SRSReportDataProviderBase
{
    BudgetAccountDetailTmpHistory       budgetAccountDetailTmpHistory;
    BudgetModelId                       budgetModelId;
    FiscalPeriodStart                   fiscalPeriodStartDate;
    FiscalPeriodEnd                     fiscalPeriodEndDate;
    boolean                             includeCarryForward;
    MainAccountNum                      toAccount;
    MainAccountNum                      fromAccount;
    BudgetCycleName                     budgetCycleName;
    RefRecId                            budgetCycleTimeSpanRecId;
    DimensionDisplayValue               dimensionFocusName;
    BudgetControlStatisticsPeriodOption budgetPeriodType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getbudgetAccountDetailTmpHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns temporary table budgetAccountDetailTmpHistory data.
    /// </summary>
    /// <returns>
    /// Temporary table budgetAccountDetailTmpHistory table.
    /// </returns>
    [
        SRSReportDataSetAttribute('BudgetAccountDetailTmpHistory')
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BudgetAccountDetailTmpHistory getbudgetAccountDetailTmpHistory()
    {
        select budgetAccountDetailTmpHistory;
        return budgetAccountDetailTmpHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the FiscalPeriodStartDate and FiscalPeriodEndDate date used for filtering the data.
    /// </summary>
    private void getDates()
    {
        BudgetCycle         budgetCycle;

        if (budgetPeriodType == BudgetControlStatisticsPeriodOption::BudgetCycle)
        {
            if (budgetCycleName != '')
            {
                select StartFiscalCalendarPeriod from budgetCycle
                    where budgetCycle.BudgetCycleTimeSpan == budgetCycleTimeSpanRecId
                       && budgetCycle.Name == budgetCycleName;

                fiscalPeriodStartDate = FiscalCalendarPeriod::find(budgetCycle.StartFiscalCalendarPeriod).StartDate;
                fiscalPeriodEndDate   = BudgetCycle::findBudgetCycleEndDate(budgetCycleTimeSpanRecId, fiscalPeriodStartDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionText</Name>
				<Source><![CDATA[
    private Description getTransactionText(RefRecId _budgetSourceTrackingBudgetSource)
    {
        BudgetSource                budgetSource;
        GeneralJournalEntry         generalJournalEntry;
        GeneralJournalAccountEntry  generalJournalAccountEntry;

        select Text from generalJournalAccountEntry
            join RecId from generalJournalEntry
            join RecId from budgetSource
                where budgetSource.RecId == _budgetSourceTrackingBudgetSource
                   && generalJournalEntry.BudgetSourceLedgerEntryPosted == budgetSource.RecId
                   && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId;

        return  generalJournalAccountEntry.Text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// prepare the data for the report.
    /// </summary>
    private void prepareReportData()
    {
        Query                               query;
        QueryRun                            queryRun;
        BudgetSourceTracking                budgetSourceTracking,
                                            budgetSourceTrackingRelieving;
        BudgetSourceTracking                budgetSourceRelieveTracking,
                                            budgetSourceTrackingAccount;
        BudgetSourceTrackingDetail          budgetSourceTrackingDetail,
                                            budgetSourceTrackingDetailRelieving;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail,
                                            budgetSourceTrackingRelievingDetailAccount;
        VendInvoiceInfoLine                 vendInvoiceInfoLine;
        PurchLine                           purchLine;
        BudgetSource                        budgetSource;
        AccountingDistribution              accountingDistribution;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        DimensionAttributeLevelValueAllView levelValueAcct;
        DimensionHierarchy                  dimensionHierarachy;
        DimensionHierarchyLevel             dimensionHierarachyLevel;
        DimensionAttribute                  mainAccount;
        DimensionDisplayValue               dimensionValue;
        DimensionDisplayValue               dimensionName;
        AmountCur                           amountCur, currentAmount;
        AmountCur                           totalRelievedAmount = 0;
        Map                                 yearToDateAmountMap;
        String255                           rangeCriteria;
        String255                           transTypeAccount;
        QueryBuildDataSource                qbdsBudgetSourceTrackingRelievingDetail, qbdsBudgetSourceRelieveTracking;
        PurchReqLine                        purchReqLine;
    
        #define.MainAccount("MainAccount")

        mainAccount         = DimensionAttribute::findByName(#MainAccount);
        yearToDateAmountMap = new Map(Types::String ,Types::Real);
        query = this.parmQuery();

        // Query to get the transaction in the data range or Budger cycle name specified by the user.
        query.dataSourceTable(tableNum(BudgetSourceTrackingDetail), 1).addSortField(fieldNum(BudgetSourceTrackingDetail, BudgetSourceLedgerDimension));
        query.dataSourceTable(tableNum(BudgetSourceTracking), 1).addSortField(fieldNum(BudgetSourceTracking, TrackingDate));
        query.dataSourceTable(tableNum(BudgetSourceTracking), 1).addSortField(fieldNum(BudgetSourceTracking, Category));

        query.dataSourceTable(tableNum(BudgetSourceTracking), 1).addRange(fieldNum(BudgetSourceTracking, BudgetModelId)).value(budgetModelId);
        query.dataSourceTable(tableNum(BudgetSourceTracking), 1).addRange(fieldNum(BudgetSourceTracking, BudgetModelId)).value(SysQuery::value(''));
        query.dataSourceTable(tableNum(BudgetSourceTracking), 1).addRange(fieldNum(BudgetSourceTracking, TrackingDate)).value(queryRange(fiscalPeriodStartDate, fiscalPeriodEndDate));

        // Add datasources to the query to support relieving transactions when the ledger dimension was changed
        qbdsBudgetSourceTrackingRelievingDetail = query.dataSourceTable(tableNum(BudgetSourceTrackingDetail), 1).addDataSource(tableNum(BudgetSourceTrackingRelievingDetail));
        qbdsBudgetSourceTrackingRelievingDetail.addSelectionField(fieldNum(BudgetSourceTrackingRelievingDetail, AccountingCurrencyAmount));
        qbdsBudgetSourceTrackingRelievingDetail.addLink(fieldNum(BudgetSourceTrackingDetail, RecId), fieldNum(BudgetSourceTrackingRelievingDetail, RelievedBudgetSourceTrackingDetail));
        qbdsBudgetSourceTrackingRelievingDetail.joinMode(JoinMode::OuterJoin);
        qbdsBudgetSourceTrackingRelievingDetail.fetchMode(QueryFetchMode::One2One);

        qbdsBudgetSourceRelieveTracking = qbdsBudgetSourceTrackingRelievingDetail.addDataSource(tableNum(BudgetSourceTracking));
        qbdsBudgetSourceRelieveTracking.addSelectionField(fieldNum(BudgetSourceTracking, TrackingDate));
        qbdsBudgetSourceRelieveTracking.addLink(fieldNum(BudgetSourceTrackingRelievingDetail, RelievingBudgetSourceTracking), fieldNum(BudgetSourceTracking, RecId));
        qbdsBudgetSourceRelieveTracking.joinMode(JoinMode::OuterJoin);
        qbdsBudgetSourceRelieveTracking.fetchMode(QueryFetchMode::One2One);

        rangeCriteria = strFmt('(%1.%2 != %3.%4)',
                            qbdsBudgetSourceTrackingRelievingDetail.name(),
                            fieldStr(BudgetSourceTrackingRelievingDetail, RelievingBudgetSourceLedgerDimension),
                            query.dataSourceTable(tableNum(BudgetSourceTrackingDetail), 1).name(),
                            fieldStr(BudgetSourceTrackingDetail, BudgetSourceLedgerDimension));

        qbdsBudgetSourceTrackingRelievingDetail.addRange(fieldNum(BudgetSourceTrackingRelievingDetail, RelievingBudgetSourceLedgerDimension)).value(rangeCriteria);

        if (!includeCarryForward)
        {
            query.dataSourceTable(tableNum(BudgetSourceTrackingDetail), 1).addRange(fieldNum(BudgetSourceTrackingDetail, IsCarryForward)).value(queryValue('0'));
        }

        rangeCriteria = strFmt('((((%1.%2 == %3) || ((%1.%2 == %4) && %7)) && (%1.%5 == %6)) || ((%1.%2 != %3) && (%1.%2 != %4)))',
                            query.dataSourceTable(tableNum(BudgetSourceTracking)).name(),
                            fieldStr(BudgetSourceTracking,Category),
                            any2int(BudgetControlCategory::Original),
                            any2int(BudgetControlCategory::CarryForwardBudget),
                            fieldStr(BudgetSourceTracking,Status),
                            any2int(BudgetSourceTrackingStatus::Confirmed),
                            any2int(includeCarryForward));

        query.dataSourceTable(tableNum(BudgetSourceTracking), 1).addRange(fieldNum(BudgetSourceTracking, Category)).value(rangeCriteria);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            budgetSourceTracking       = queryRun.get(tableNum(BudgetSourceTracking));
            budgetSourceTrackingDetail = queryRun.get(tableNum(BudgetSourceTrackingDetail));
            budgetSourceTrackingRelievingDetail = queryRun.get(tableNum(BudgetSourceTrackingRelievingDetail));
            budgetSourceRelieveTracking         = queryRun.get(tableNum(BudgetSourceTracking), 2);

            if (budgetSourceTracking.Category != BudgetControlCategory::Apportionment)
            {
                select DisplayValue from dimensionAttributeValueCombination
                     join levelValueAcct
                        where  levelValueAcct.ValueCombinationRecId     == budgetSourceTrackingDetail.BudgetSourceLedgerDimension
                            && levelValueAcct.DimensionAttribute        == mainAccount.RecId
                            && levelValueAcct.DisplayValue              >= fromAccount
                            && levelValueAcct.DisplayValue              <= toAccount
                            && dimensionAttributeValueCombination.RecId == levelValueAcct.ValueCombinationRecId;

                if (dimensionAttributeValueCombination.DisplayValue)
                {
                    budgetAccountDetailTmpHistory.TransDate         = budgetSourceTracking.TrackingDate;
                    budgetAccountDetailTmpHistory.Category          = budgetSourceTracking.Category;
                    budgetAccountDetailTmpHistory.DimensionFocus    = BudgetControlStatisticsManager::getDimensionFocus(budgetSourceTrackingDetail.BudgetSourceLedgerDimension, dimensionFocusName);
                    budgetAccountDetailTmpHistory.TransactionText   = enum2str(budgetSourceTracking.Category);
                    dimensionValue                                  = "";
                    dimensionName                                   = "";

                    while select DimensionAttribute, DisplayValue from levelValueAcct
                        order by levelValueAcct.ValueOrdinal asc
                        where levelValueAcct.ValueCombinationRecId == budgetSourceTrackingDetail.BudgetSourceLedgerDimension
                            exists join dimensionHierarachyLevel
                            where dimensionHierarachyLevel.DimensionAttribute == levelValueAcct.DimensionAttribute
                              && dimensionHierarachyLevel.Level == levelValueAcct.ValueOrdinal
                                exists join dimensionHierarachy
                                where dimensionHierarachy.RecId == dimensionHierarachyLevel.DimensionHierarchy
                                    && dimensionHierarachy.RecId == DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, dimensionFocusName).RecId
                    {
                        if (strLen(dimensionValue) == 0)
                        {
                            dimensionValue = levelValueAcct.DisplayValue;
                        }
                        else
                        {
                            dimensionValue += strFmt(" - %1", levelValueAcct.DisplayValue);
                        }

                        if (strLen(dimensionName) == 0)
                        {
                            dimensionName = DimensionAttributeValue::findByDimensionAttributeAndValue(DimensionAttribute::find(levelValueAcct.DimensionAttribute),
                                levelValueAcct.DisplayValue).getName();
                        }
                        else
                        {
                            dimensionName += strFmt(" - %1", DimensionAttributeValue::findByDimensionAttributeAndValue(DimensionAttribute::find(levelValueAcct.DimensionAttribute),
                                levelValueAcct.DisplayValue).getName());
                        }
                    }

                    budgetAccountDetailTmpHistory.DimensionDisplayValue = dimensionAttributeValueCombination.DisplayValue;
                    budgetAccountDetailTmpHistory.DimensionValue = dimensionValue;
                    budgetAccountDetailTmpHistory.DimensionName  = dimensionName;

                    this.updateYTDValues(yearToDateAmountMap);

                    if (budgetSourceTracking.Category     == BudgetControlCategory::Original
                        || budgetSourceTracking.Category  == BudgetControlCategory::Amendment
                        || budgetSourceTracking.Category  == BudgetControlCategory::TransferIn
                        || budgetSourceTracking.Category  == BudgetControlCategory::TransferOut
                        || budgetSourceTracking.Category  == BudgetControlCategory::CarryForwardBudget
                        || budgetSourceTracking.Category  == BudgetControlCategory::PreliminaryBudget)
                    {
                        transTypeAccount = strFmt("%1:%2", BudgetControlCategory::Original, budgetAccountDetailTmpHistory.DimensionValue);
                        if (yearToDateAmountMap.exists(transTypeAccount))
                        {
                            amountCur = any2real(yearToDateAmountMap.lookup(transTypeAccount)) + budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }
                        else
                        {
                            amountCur = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }

                        budgetAccountDetailTmpHistory.RevisedBudget           = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        budgetAccountDetailTmpHistory.YearToDateRevisedBudget = amountCur;
                        yearToDateAmountMap.insert(transTypeAccount, amountCur);

                        budgetAccountDetailTmpHistory.insert();
                    }

                    if (budgetSourceTracking.Category == BudgetControlCategory::ActualExpenditure)
                    {
                        transTypeAccount = strFmt("%1:%2", BudgetControlCategory::ActualExpenditure, budgetAccountDetailTmpHistory.DimensionValue);
                        if (yearToDateAmountMap.exists(transTypeAccount))
                        {
                            amountCur = any2real(yearToDateAmountMap.lookup(transTypeAccount)) + budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }
                        else
                        {
                            amountCur = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }
                        yearToDateAmountMap.insert(transTypeAccount,amountCur);

                        budgetAccountDetailTmpHistory.Expenditure           = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        budgetAccountDetailTmpHistory.YearToDateExpenditure = amountCur;

                        select OrigPurchId from vendInvoiceInfoLine
                        join SourceDocumentLine from budgetSource
                            where budgetSource.RecId == budgetSourceTracking.BudgetSource &&
                                    vendInvoiceInfoLine.SourceDocumentLine == budgetSource.SourceDocumentLine;

                        if (vendInvoiceInfoLine.OrigPurchId)
                        {
                            transTypeAccount = strFmt("%1:%2", BudgetControlCategory::Encumbrance, budgetAccountDetailTmpHistory.DimensionValue);
                            if (yearToDateAmountMap.exists(transTypeAccount))
                            {
                                amountCur =  any2real(yearToDateAmountMap.lookup(transTypeAccount))
                                                        - budgetSourceTrackingDetail.AccountingCurrencyAmount
                                                        + totalRelievedAmount;
                                yearToDateAmountMap.insert(transTypeAccount, amountCur);
                                budgetAccountDetailTmpHistory.YearToDateEncumbrance = amountCur;
                            }
                            else
                            {
                                yearToDateAmountMap.insert(transTypeAccount, (-1 * amountCur) + (-1 * totalRelievedAmount));
                                budgetAccountDetailTmpHistory.YearToDateEncumbrance = (-1 * amountCur) + (-1 * totalRelievedAmount);
                            }
                        }

                        if (totalRelievedAmount != 0)
                        {
                            budgetAccountDetailTmpHistory.ytdEncumbranceUpdated = NoYes::No;
                            totalRelievedAmount = 0;
                        }
                        else
                        {
                            //For Invoices which are not tied to PO, Encumbrances doesn't come into the picture and ytdEncumbranceUpdated should be set to No then. 
                            if (BudgetAccountDetailHistoryCalcNonPOInvoiceFlight::instance().isEnabled() && !vendInvoiceInfoLine.OrigPurchId)
                            {
                                budgetAccountDetailTmpHistory.ytdEncumbranceUpdated = NoYes::No;
                            }
                            else
                            {
                                budgetAccountDetailTmpHistory.ytdEncumbranceUpdated = NoYes::Yes;
                            }
                        }

                        budgetAccountDetailTmpHistory.insert();
                    }

                    if (budgetSourceTracking.Category     == BudgetControlCategory::Encumbrance
                        || budgetSourceTracking.Category  == BudgetControlCategory::EncumbranceReduction)
                    {
                        transTypeAccount = strFmt("%1:%2", BudgetControlCategory::Encumbrance, budgetAccountDetailTmpHistory.DimensionValue);
                        if (yearToDateAmountMap.exists(transTypeAccount))
                        {
                            amountCur = any2real(yearToDateAmountMap.lookup(transTypeAccount)) + budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }
                        else
                        {
                            amountCur = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }

                        budgetAccountDetailTmpHistory.Encumbrance           = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        budgetAccountDetailTmpHistory.YearToDateEncumbrance = amountCur;
                        yearToDateAmountMap.insert(transTypeAccount, amountCur);

                        //
                        // The following query determines if any of the lines came from a requisition.
                        // If so, we need to relieve all lines of the requisition.
                        //
                        select RecId from budgetSourceTrackingRelieving
                            where budgetSourceTrackingRelieving.TrackingNumber   == budgetSourceTracking.TrackingNumber
                            exists join budgetSourceTrackingAccount
                                where budgetSourceTrackingAccount.TrackingNumber == budgetSourceTrackingRelieving.TrackingNumber
                            exists join budgetSource
                                where budgetSource.RecId                         == budgetSourceTrackingAccount.BudgetSource
                            exists join purchLine
                                where purchLine.SourceDocumentLine               == budgetSource.SourceDocumentLine
                                && purchLine.PurchReqId != '';

                        if (budgetSourceTrackingRelieving.RecId)
                        {
                            amountCur = 0;

                            // retrieves all the relieving entries
                            while select budgetSourceTrackingRelieving
                                where budgetSourceTrackingRelieving.BudgetSource                                            == budgetSourceTracking.BudgetSource
                                join budgetSourceTrackingDetailRelieving
                                    where budgetSourceTrackingDetailRelieving.BudgetSourceTracking                          == budgetSourceTrackingRelieving.RecId
                                        && budgetSourceTrackingDetailRelieving.BudgetControlLedgerDimension                 == budgetSourceTrackingDetail.BudgetControlLedgerDimension
                                join budgetSourceTrackingRelievingDetailAccount
                                    where budgetSourceTrackingRelievingDetailAccount.RelievingBudgetSourceTracking          == budgetSourceTrackingRelieving.RecId
                                        && budgetSourceTrackingRelievingDetailAccount.RelievingBudgetSourceLedgerDimension  == budgetSourceTrackingDetailRelieving.BudgetSourceLedgerDimension
                            {
                                // find the account and process it
                                select RecId from budgetSourceTrackingAccount
                                    join RecId from budgetSource
                                        where budgetSource.RecId                        == budgetSourceTrackingAccount.BudgetSource
                                    join RecId from purchLine
                                        where purchLine.SourceDocumentLine              == budgetSource.SourceDocumentLine
                                    join SourceDocumentLine from purchReqLine
                                        where purchReqLine.LineRefId                    == purchLine.PurchReqLineRefId
                                    join LedgerDimension from accountingDistribution
                                        where accountingDistribution.SourceDocumentLine == purchReqLine.SourceDocumentLine
                                            && accountingDistribution.LedgerDimension   == budgetSourceTrackingRelievingDetailAccount.RelievingBudgetSourceLedgerDimension;

                                if (!accountingDistribution.LedgerDimension)
                                {
                                    continue;
                                }

                                transTypeAccount = strFmt("%1:%2", BudgetControlCategory::PreEncumbrance, budgetAccountDetailTmpHistory.DimensionValue);

                                // Add our values to the map for year to date summaries
                                if (yearToDateAmountMap.exists(transTypeAccount))
                                {
                                    amountCur =  any2real(yearToDateAmountMap.lookup(transTypeAccount))
                                               + budgetSourceTrackingRelievingDetailAccount.AccountingCurrencyAmount;

                                    yearToDateAmountMap.insert(transTypeAccount, amountCur);
                                    budgetAccountDetailTmpHistory.YearToDatePreEncumbrance = amountCur;
                                }
                                else
                                {
                                    amountCur = budgetSourceTrackingRelievingDetailAccount.AccountingCurrencyAmount;
                                    yearToDateAmountMap.insert(transTypeAccount, (-1 * amountCur) + (-1 *  budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount));
                                    budgetAccountDetailTmpHistory.YearToDatePreEncumbrance = (-1 * amountCur) + (-1 *  budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount);
                                }

                                yearToDateAmountMap.insert(transTypeAccount, amountCur);
                                budgetAccountDetailTmpHistory.YearToDatePreEncumbrance = amountCur;
                                budgetAccountDetailTmpHistory.ytdPreEncumbranceUpdated = NoYes::Yes;
                            }
                        }

                        budgetAccountDetailTmpHistory.insert();

                        if (budgetSourceTrackingRelievingDetail)
                        {
                            budgetAccountDetailTmpHistory.TransDate = budgetSourceRelieveTracking.TrackingDate;
                            budgetAccountDetailTmpHistory.Encumbrance = budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount;
                            budgetAccountDetailTmpHistory.YearToDateEncumbrance = budgetAccountDetailTmpHistory.YearToDateEncumbrance
                                                                                + budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount;

                            budgetAccountDetailTmpHistory.insert();
                            totalRelievedAmount = totalRelievedAmount + budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount;
                        }
                        else
                        {
                            totalRelievedAmount = 0;
                        }

                        currentAmount = budgetAccountDetailTmpHistory.YearToDatePreEncumbrance;
                    }

                    if (budgetSourceTracking.Category == BudgetControlCategory::PreEncumbrance)
                    {
                        transTypeAccount = strFmt("%1:%2", BudgetControlCategory::PreEncumbrance, budgetAccountDetailTmpHistory.DimensionValue);

                        if (yearToDateAmountMap.exists(transTypeAccount))
                        {
                            amountCur = any2real(yearToDateAmountMap.lookup(transTypeAccount)) + budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }
                        else
                        {
                            amountCur = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        }

                        budgetAccountDetailTmpHistory.PreEncumbrance           = budgetSourceTrackingDetail.AccountingCurrencyAmount;
                        budgetAccountDetailTmpHistory.YearToDatePreEncumbrance = amountCur;
                        yearToDateAmountMap.insert(transTypeAccount, amountCur);

                        budgetAccountDetailTmpHistory.insert();

                        if (budgetSourceTrackingRelievingDetail)
                        {
                            budgetAccountDetailTmpHistory.TransDate = budgetSourceRelieveTracking.TrackingDate;
                            budgetAccountDetailTmpHistory.PreEncumbrance = budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount;
                            budgetAccountDetailTmpHistory.YearToDatePreEncumbrance  = budgetAccountDetailTmpHistory.YearToDatePreEncumbrance
                                                                                    + budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount;
                            yearToDateAmountMap.insert(transTypeAccount, budgetAccountDetailTmpHistory.YearToDatePreEncumbrance);
                            budgetAccountDetailTmpHistory.insert();
                            totalRelievedAmount = totalRelievedAmount + budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount;
                        }
                        else
                        {
                            totalRelievedAmount = 0;
                        }

                        currentAmount = budgetAccountDetailTmpHistory.YearToDatePreEncumbrance;
                    }

                    budgetAccountDetailTmpHistory.clear();
                }
            }
        }

        this.updatePreEncumbranceTotals(yearToDateAmountMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///  process budgetAccountDetailHistoryReport data.
    /// </summary>
    public void processReport()
    {
        BudgetAccountDetailHistoryContract  contract;

        contract = this.parmDataContract();

        if (contract)
        {
            budgetModelId            = contract.parmBudgetModel();
            fiscalPeriodStartDate    = contract.parmBudgetFiscalPeriodStart();
            fiscalPeriodEndDate      = contract.parmBudgetFiscalPeriodEnd();
            includeCarryForward      = contract.parmIncludeCarryForward();
            fromAccount              = contract.parmFromAccount();
            toAccount                = contract.parmToAccount();
            budgetCycleName          = contract.parmBudgetCycleName();
            budgetCycleTimeSpanRecId = contract.parmBudgetCycleTimeSpanRecId();
            budgetPeriodType         = contract.parmBudgetPeriodType();
            dimensionFocusName       = contract.parmBudgetDimensionFocus();
        }

        this.getDates();
        this.prepareReportData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePreEncumbranceTotals</Name>
				<Source><![CDATA[
    private void updatePreEncumbranceTotals(Map _yearToDateAmountMap)
    {
        MapEnumerator                   yearToDateAmountMapEnumerator;
        str                             mapKey;
        boolean                         stringFound;
        DimensionDisplayValue           dimensionValue;
        int                             colonIndex;
        int                             valueLength;

        yearToDateAmountMapEnumerator = _yearToDateAmountMap.getEnumerator();

        while (yearToDateAmountMapEnumerator.moveNext())
        {
            mapKey = yearToDateAmountMapEnumerator.currentKey();
            stringFound = (strStartsWith(mapKey, enum2Str(BudgetControlCategory::PreEncumbrance)));

            if (stringFound)
            {
                valueLength = strLen(mapKey);
                colonIndex = strFind(mapKey, ":", 1, valueLength);
                dimensionValue = subStr(mapKey, colonIndex + 1, valueLength - colonIndex);
                //
                // Order doesn't matter since we are storing a denormalized totals field that is summed
                // in the report to get the totals for the pre-encumbrances
                //
                select firstonly forupdate budgetAccountDetailTmpHistory
                    where budgetAccountDetailTmpHistory.Category    == BudgetControlCategory::PreEncumbrance
                    && budgetAccountDetailTmpHistory.DimensionValue == dimensionValue;
                //
                // This field represents the pre-encumbrance total of the year-to-date totals and individual
                // account totals selected for the report.
                //
                budgetAccountDetailTmpHistory.BudgetPreEncumbranceBalance = yearToDateAmountMapEnumerator.currentValue();
                budgetAccountDetailTmpHistory.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateYTDValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets year to date values.
    /// </summary>
    /// <param name="_yearToDateAmountMap">
    /// Map of year to date values.
    /// </param>
    private void updateYTDValues(Map _yearToDateAmountMap)
    {
        String255   transTypeAccount;

        transTypeAccount = strFmt("%1:%2", BudgetControlCategory::Original, budgetAccountDetailTmpHistory.DimensionValue);
        if (_yearToDateAmountMap.exists(transTypeAccount))
        {
            budgetAccountDetailTmpHistory.YearToDateRevisedBudget = any2real(_yearToDateAmountMap.lookup(transTypeAccount));
        }

        transTypeAccount = strFmt("%1:%2", BudgetControlCategory::ActualExpenditure, budgetAccountDetailTmpHistory.DimensionValue);
        if (_yearToDateAmountMap.exists(transTypeAccount))
        {
            budgetAccountDetailTmpHistory.YearToDateExpenditure = any2real(_yearToDateAmountMap.lookup(transTypeAccount));
        }

        transTypeAccount = strFmt("%1:%2", BudgetControlCategory::Encumbrance, budgetAccountDetailTmpHistory.DimensionValue);
        if (_yearToDateAmountMap.exists(transTypeAccount))
        {
            budgetAccountDetailTmpHistory.YearToDateEncumbrance = any2real(_yearToDateAmountMap.lookup(transTypeAccount)) ;
        }

        transTypeAccount = strFmt("%1:%2", BudgetControlCategory::PreEncumbrance, budgetAccountDetailTmpHistory.DimensionValue);
        if (_yearToDateAmountMap.exists(transTypeAccount))
        {
            budgetAccountDetailTmpHistory.YearToDatePreEncumbrance = any2real(_yearToDateAmountMap.lookup(transTypeAccount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BudgetAccountDetailHistoryDP construct()
    {
        return new BudgetAccountDetailHistoryDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>