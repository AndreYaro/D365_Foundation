<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostMovement_Prod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>inventCostMovement_Prod</c> class is the interface to the <c>prodStandardVarianceCache</c>
///    class, which provides the broken down production variances.
/// </summary>
/// <remarks>
///    The method <c>inventCostMovement_Prod.costTransVarianceList</c> is overwritten to retrieve the
///    broken down variance from the <c>prodStandardVarianceCache</c> class.
/// </remarks>

class InventCostMovement_Prod extends InventCostMovement
{
    InventCostTransVarianceList     prodVarianceList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initActCostListFinancial</Name>
				<Source><![CDATA[
    protected void initActCostListFinancial()
    {
        actCostList = InventCostTransCostList::construct();
        actCostList.addFromVarianceList(prodVarianceList, inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventMovement</Name>
				<Source><![CDATA[
    protected void initFromInventMovement(InventMovement _inventMovement)
    {
        super(_inventMovement);

        // In case of production I will get my variance list from the movement
        prodVarianceList = _inventMovement.parmInventCostTransVarianceList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostMovement_Prod construct(InventMovement _inventMovement)
    {
        return new InventCostMovement_Prod(_inventMovement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>