<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlPeriodRevEstimate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjControlPeriodRevEstimate extends ProjControlPeriod implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>action</Name>
				<Source><![CDATA[
    protected void action()
    {
        ProjControlPostingReverse  reverseposting;
        ProjControlPeriodTable  projControlPeriodTable;
        int i;

        // We Should NOT call super.
        if (queryRun.changed(tablenum(ProjWIPTable)))
        {
            i++;
            projWIPTable  = queryRun.get(tablenum(ProjWIPTable));
            this.progressSet(i);

            if (projWIPTable.PeriodId == this.parmProjPeriodId() && this.checkReversePeriod(projWIPTable.ProjId))
            {
                if (! this.validate())
                {
                    throw error("@SYS21628");
                }

                this.parmProjId(projWIPTable.ProjId);
                this.parmProjWIPProjId(projWIPTable.ProjId);

                while select forupdate projControlPeriodTable order by RecId desc
                    where   projControlPeriodTable.ProjId       == projWIPTable.ProjId
                    &&      projControlPeriodTable.ControlId    == projWIPTable.ControlId
                    &&      projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Posted
                    &&      projControlPeriodTable.PeriodFrom   == this.parmProjPeriodFrom()
                {
                    this.parmForecastModelId(projControlPeriodTable.ModelId);
                    this.parmProjWIPProjId(projWIPTable.ProjId);
                    this.parmIsContractLineUsed(projWIPTable.IsContractLineUsed);
                    this.parmBeginningBalance(projControlPeriodTable.BeginningBalance);

                    // Reverse...
                    reverseposting = ProjControlPosting::new_ControlPosting(ProjControlType::Reversal,projControlPeriodTable);
                    reverseposting.parmPeriodic(false);
                    reverseposting.parmPeriodFrom(this.parmProjPeriodFrom());
                    reverseposting.parmPeriodTo(this.parmProjPeriodTo());
                    reverseposting.parmProjId(this.parmProjId());
                    reverseposting.parmProjPeriodId(this.parmProjPeriodId());
                    reverseposting.parmTransDate(this.parmProjTransDate());
                    reverseposting.parmIsContractLineUsed(this.parmIsContractLineUsed());
                    reverseposting.parmShowInfoLog(false);

                    ExchrateSecondary exchRate;
                    GeneralJournalEntry generalJournalEntry;
                    GeneralJournalAccountEntry generalJournalAccountEntry;

                    // Fetching the <c>generalJournalAccountEntry</c> record which is created at the time of posting estimate,to get same exchange rate
                    // while posting the reverse estimate.
                    select firstonly ReportingCurrencyAmount, TransactionCurrencyAmount, RecId from generalJournalAccountEntry
                        join generalJournalEntry
                            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                                && generalJournalEntry.SubledgerVoucherDataAreaId == projControlPeriodTable.DataAreaId
                                && generalJournalEntry.SubledgerVoucher == projControlPeriodTable.VoucherPosted
                                && generalJournalEntry.Ledger == Ledger::current();

                    if (generalJournalAccountEntry.RecId)
                    {
                        exchRate = generalJournalAccountEntry.getReportingExchangeRate();
                    }

                    using (ProjExchangeRateParameters projExchangerateParameters = ProjExchangeRateParameters::parmReportingExchangeRate(exchRate))
                    {
                        reverseposting.parmProjControlId(this.parmProjControlId());
                        reverseposting.parmVersion(projControlPeriodTable.Version);
                        reverseposting.setQueryValues();
                        reverseposting.parmAcknowledgementDate(this.parmAcknowledgementDate());
                        reverseposting.parmBeginningBalance(projControlPeriodTable.BeginningBalance);
                        reverseposting.runOperation();
                    }

                    if (this.parmShowInfoLog())
                    {
                        info(strfmt("@SYS76449",projControlPeriodTable.ProjId,projControlPeriodTable.PeriodTo,projControlPeriodTable.Version));
                    }

                    this.clearWIPPeriod();
                    if (this.parmDeleteForecast() && !this.isForecastModelStopped())
                    {
                        if (this.parmShowInfoLog())
                        {
                            info("@SYS73671");
                        }

                        this.deleteForecast();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canOutput</Name>
				<Source><![CDATA[
    boolean canOutput()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReversePeriod</Name>
				<Source><![CDATA[
    boolean checkReversePeriod(ProjId _projId)
    {
        boolean                 ret = true;
        ProjControlPeriodTable  nextProjControlPeriodTable;

        // Is there any records at all ??
        if ((select firstonly reverse projControlPeriodTable
                    where   projControlPeriodTable.ProjId       == _projId
                    &&      projControlPeriodTable.PeriodStatus != ProjControlPeriodStatus::Reversal).RecId)
        {
            select firstonly RecId from nextProjControlPeriodTable
                where   nextProjControlPeriodTable.ProjId       == _projId
                &&      nextProjControlPeriodTable.PeriodFrom   > this.parmProjPeriodFrom()
                &&      nextProjControlPeriodTable.PeriodStatus != ProjControlPeriodStatus::Reversal
                &&      nextProjControlPeriodTable.PeriodStatus != ProjControlPeriodStatus::Created;

            if (nextProjControlPeriodTable.RecId)
            {
                    ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        Dialog   d = Dialog::newFormnameRunbase(formstr(projControlPeriod_RevEstimate),this);

        return this.dialogInternal(d);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputIncludeReversed</Name>
				<Source><![CDATA[
    NoYes outputIncludeReversed()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription description()
    {
        return "@SYS73673";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>