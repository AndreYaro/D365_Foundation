<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleProjectRevenueExtendedPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjectRevenue), BusinessEvent_ProjectRevenue::RevenueForProjectServices, MonetaryAmount::ExtendedPrice)]
public class AccJourRuleProjectRevenueExtendedPrice extends AccountingJournalizingRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        return ProjectPosting::accruedRevenueOffsetPostingType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        if (this.parmAccountingdistribution().TransactionCurrencyAmount < 0)
        {
            return DebitCredit::Credit;
        }
        return DebitCredit::Debit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalAccountEntryLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger account to use to enter a subledger journal entry.
    /// </summary>
    /// <param name="_defaultLedgerDimension">
    /// The default ledger dimension.
    /// </param>
    /// <param name="_accountingDistributionLedgerDimension">
    /// The accounting distribution ledger dimension.
    /// </param>
    /// <returns>
    /// A <c>LedgerDimensionAccount</c> object.
    /// </returns>
    public LedgerDimensionAccount getJournalAccountEntryLedgerDimension(LedgerDimensionDefaultAccount _defaultLedgerDimension, LedgerDimensionAccount _accountingDistributionLedgerDimension)
    {
        RefRecId                sourceDocLineTSTrans;
        TSTimesheetLineWeek     tsTimesheetLineWeek;
        TSTimesheetLine         tsTimesheetLine;
        TSTimesheetTrans        tsTimesheetTrans;
        AccountingDistribution  accDistribution;
        DimensionDefault        lineDefaultDimension;
        LedgerDimensionAccount  ledgerAccount;
        DimensionDefault        defaultDimension;
        LedgerDimensionAccount  ledgerDefaultAccount;
     
        select firstonly accDistribution
            where accDistribution.RecId == this.parmAccountingdistribution().ReferenceDistribution;
       
        this.parmAccountingdistribution(accDistribution);
        sourceDocLineTSTrans    = this.parmAccountingdistribution().SourceDocumentLine;

        select firstonly Defaultdimension from tsTimesheetLine
            join tsTimesheetLine from tsTimesheetLineWeek
                join tsTimesheetLineWeek from tsTimesheetTrans
                    where tsTimesheetTrans.SourceDocumentLine == sourceDocLineTSTrans
                        && tsTimesheetLineWeek.RecId == tsTimesheetTrans.TSTimesheetLineWeek
                            && tsTimesheetLine.RecId == tsTimesheetLineWeek.tsTimesheetLine;

        if(tsTimesheetLine)
        {
            lineDefaultDimension = tsTimesheetLine.DefaultDimension;
        }
        else
        {
            lineDefaultDimension = sourceDocumentLineItem.parmDefaultDimension();
        }

        // create/use DefaultDimension from the provided _accountingDistributionLedgerDimension
        defaultDimension = ledgerDimensionProvider.getDefaultDimensionFromLedgerDimension(_accountingDistributionLedgerDimension);

        // Gets the main account from the provided _defaultLedgerDimension
        ledgerDefaultAccount = ledgerDimensionProvider.getDefaultAccountFromLedgerDimension(_defaultLedgerDimension);

        // build ledgerDimension from all the default parts
        ledgerAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDefaultAccount, defaultDimension, lineDefaultDimension);

        return ledgerAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>