<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsShelfLifeUpdateReservationManagerBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsShelfLifeUpdateReservationManagerBase</c> class is the base for a class to handle the
/// update of reservation for shelf-life.
/// </summary>
public abstract class PdsShelfLifeUpdateReservationManagerBase implements PdsShelfLifeIUpdateReservationManager
{
    Common          orderLineBuffer;
    InventTable     orderLineItem;
    boolean         reservationDetectionDone;

    boolean         hasInventoryReservation;
    InventQty       reservedInventQty;
    PdsCWInventQty  reservedCWQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateInventoryReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the reservation amounts associated with the stored order line.
    /// </summary>
    protected void calculateInventoryReservation()
    {
        boolean useInventSumDeltaReservation = this.useInventSumDeltaReservation();

        [hasInventoryReservation, reservedInventQty, reservedCWQty] = PdsShelfLifeUpdateReservationManagerBase::calculateInventoryReservationOnServer(
            orderLineBuffer,
            orderLineItem,
            useInventSumDeltaReservation);

        reservationDetectionDone = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelInventoryReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cancels the reservation of inventory which triggers an automatic re-reservation, if the order line has automatic reservation settings.
    /// </summary>
    public void cancelInventoryReservation()
    {
        if (!reservationDetectionDone)
        {
            this.calculateInventoryReservation();
        }

        PdsShelfLifeUpdateReservationManagerBase::resetInventoryReservationOnServer(
            reservedInventQty,
            reservedCWQty,
            orderLineBuffer);

        // reservation is unknown after the call above
        reservationDetectionDone = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHasCalculatedInventoryReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets whether the class has calculated the reservation amounts.
    /// </summary>
    /// <returns>
    ///     true if the calculation of reservation amounts has been done; otherwise false.
    /// </returns>
    protected boolean getHasCalculatedInventoryReservation()
    {
        return reservationDetectionDone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHasInventoryReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether inventory reservation exists for the current movement.
    /// </summary>
    /// <returns>
    /// true if the associated order line has inventory reservation; otherwise, false.
    /// </returns>
    public boolean getHasInventoryReservation()
    {
        if (!this.getHasCalculatedInventoryReservation())
        {
            this.calculateInventoryReservation();
        }
        return hasInventoryReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets whether the specified order line has automatic reservation.
    /// </summary>
    /// <returns>
    ///     true if the line has automatic reservation; otherwise false.
    /// </returns>
    protected abstract boolean isAutoReservationLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of the class.
    /// </summary>
    /// <param name="_orderLine">
    ///     The order line to be associated with the current instance.
    /// </param>
    /// <param name="_orderLineItem">
    ///     The item associated with the order line.
    /// </param>
    protected void new(Common _orderLine, InventTable _orderLineItem)
    {
        orderLineBuffer = _orderLine;
        orderLineItem   = _orderLineItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useInventSumDeltaReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets whether to consider floating reservations on the calculation of reservation amounts.
    /// </summary>
    /// <returns>
    ///     true if the values of the <c>InventSumDelta</c> table are also to be considered on the calculation of reservation amounts; otherwise false.
    /// </returns>
    protected boolean useInventSumDeltaReservation()
    {
        return !this.isAutoReservationLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventoryReservationOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the reservation amounts associated with the specified order line.
    /// </summary>
    /// <param name="_orderLineBuffer">
    ///     The order line used to calculate the reservation amounts.
    /// </param>
    /// <param name="_orderLineItem">
    ///     The item associated with the order line.
    /// </param>
    /// <param name="_useDeltaReservation">
    ///     A Boolean value indicating whether to consider the floating reservations during the calculation.
    /// </param>
    /// <returns>
    ///    A
    ///    <c>
    ///       container
    ///    </c>
    ///     with:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>A Boolean value indicating whether there is any reservation.</description>
    ///       </item>
    ///       <item>
    ///          <description>The reserved quantity.</description>
    ///       </item>
    ///       <item>
    ///          <description>The reserved catch-weight quantity.</description>
    ///       </item>
    ///    </list>
    /// </returns>
    protected static container calculateInventoryReservationOnServer(
        Common       _orderLineBuffer,
        InventTable  _orderLineItem,
        boolean      _useDeltaReservation)
    {
        boolean         hasReservedAmount   = false;
        InventQty       reservedInventQty   = 0;
        PdsCWInventQty  reservedCWQty       = 0;
        InventMovement  movement;
        boolean         isShelfLifeItem     = _orderLineItem.isShelfLifeItem();
        boolean         isCWItem            = PdsGlobal::pdsIsCWItem(_orderLineItem.ItemId);

        if (isShelfLifeItem)
        {
            movement  = InventMovement::constructNoThrow(_orderLineBuffer);
            if (movement.canBeReserved())
            {
                //invent transfers  have special logic extended for the method reserveQty
                if (_useDeltaReservation)
                {
                    reservedInventQty = movement.reserveQty() - movement.transIdSum().reserved();
                }
                else
                {
                    reservedInventQty = - movement.transIdSum().reserved();
                }

                if (reservedInventQty)
                {
                    reservedCWQty = movement.pdsCWReserveQty() - movement.transIdSum().pdsCWReserved();
                }

                if ((!isCWItem && reservedInventQty) || (isCWItem && reservedCWQty))
                {
                    hasReservedAmount = true;
                }
            }
        }

        return [hasReservedAmount, reservedInventQty, reservedCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInventoryReservationOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Resets the specified reservation amounts for the specified order line.
    /// </summary>
    /// <param name="_reservedAmount">
    ///     The reservation quantity to cancel.
    /// </param>
    /// <param name="_reservedCWAmount">
    ///     The reservation catch-weight quantity to cancel.
    /// </param>
    /// <param name="_orderLineBuffer">
    ///     The buffer of the order line associated with the reservations.
    /// </param>
    protected static void resetInventoryReservationOnServer(
        InventQty       _reservedAmount,
        PdsCWInventQty  _reservedCWAmount,
        Common          _orderLineBuffer)
    {
        InventUpd_Reservation   reservation;

        reservation = InventUpd_Reservation::newMovement(
            InventMovement::constructNoThrow(_orderLineBuffer),
            _reservedAmount,
            true,
            false,
            true,
            _reservedCWAmount);
        reservation.updateNow();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>