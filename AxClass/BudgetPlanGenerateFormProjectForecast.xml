<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateFormProjectForecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateFormProjectForecast</c> class supports the business logic of the <c>BudgetPlanGenerate</c> form for project forecasts.
/// </summary>
public class BudgetPlanGenerateFormProjectForecast extends BudgetPlanGenerateForm
{
    FormGroupControl    sourceProjectForecastGroup;
    FormGroupControl    sourceProjectForecastIncludeStatementGroup;
    FormCheckBoxControl sourceProjectForecastProfitAndLoss;
    FormCheckBoxControl sourceProjectForecastWIP;
    FormCheckBoxControl sourceProjectForecastPayrollAllocation;
    FormGroupControl    sourceProjectForecastProjectDateGroup;
    FormDateControl     sourceProjectForecastProjectFromDate;
    FormDateControl     sourceProjectForecastProjectToDate;
    FormGroupControl    sourceProjectForecastLedgerDateGroup;
    FormDateControl     sourceProjectForecastLedgerFromDate;
    FormDateControl     sourceProjectForecastLedgerToDate;
    FormStringControl   sourceProjectForecastForecastModel;
    FormGroupControl    sourceBudgetPlanTransferTotalGroup;
    FormComboBoxControl sourceBudgetPlanTransferTotal;
    FormComboBoxControl targetGenJourHistorical;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetPlanGenerateFormProjectForecast</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetPlanGenerateFormProjectForecast</c> class.
    /// </returns>
    public static BudgetPlanGenerateFormProjectForecast construct()
    {
        return new BudgetPlanGenerateFormProjectForecast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstructionText</Name>
				<Source><![CDATA[
    protected void setInstructionText()
    {
        instruction.text("@Budget:BudgetPlanning_GenerateFromProjectForecastsSupplemental_InstructionText");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMandatoryControls</Name>
				<Source><![CDATA[
    protected void setMandatoryControls()
    {
        targetBudgetPlanScenario.mandatory(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    protected void setVisibleControls()
    {
        super();

        sourceProjectForecastGroup.visible(true);
        targetBudgetClass.visible(false);
        targetMinimum.visible(false);
        targetGenJourHistorical.visible(true);
        sourceBudgetPlanTransferTotalGroup.visible(true);

        targetBudgetPlanScenarioQuantity.label("@Budget:BudgetPlanning_GenerateFromProjectForecasts_QuantityScenario");
        targetBudgetPlanScenarioQuantity.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControlSet</Name>
				<Source><![CDATA[
    protected void initControlSet()
    {
        super();

        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastIncludeStatementGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastProfitAndLoss));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastWIP));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastPayrollAllocation));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastProjectDateGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastProjectFromDate));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastProjectToDate));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastLedgerDateGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastLedgerFromDate));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastLedgerToDate));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceProjectForecastForecastModel));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotalGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetGenJourHistorical));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormControl</Name>
				<Source><![CDATA[
    protected void setFormControl(FormControl _formControl)
    {
        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, SourceProjectForecastGroup) :
                sourceProjectForecastGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastIncludeStatementGroup) :
                sourceProjectForecastIncludeStatementGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastProfitAndLoss) :
                sourceProjectForecastProfitAndLoss = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastWIP) :
                sourceProjectForecastWIP = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastPayrollAllocation) :
                sourceProjectForecastPayrollAllocation = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastProjectDateGroup) :
                sourceProjectForecastProjectDateGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastProjectFromDate) :
                sourceProjectForecastProjectFromDate = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastProjectToDate) :
                sourceProjectForecastProjectToDate = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastLedgerDateGroup) :
                sourceProjectForecastLedgerDateGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastLedgerFromDate) :
                sourceProjectForecastLedgerFromDate = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastLedgerToDate) :
                sourceProjectForecastLedgerToDate = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastForecastModel) :
                sourceProjectForecastForecastModel = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotalGroup) :
                sourceBudgetPlanTransferTotalGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal) :
                sourceBudgetPlanTransferTotal = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetGenJourHistorical) :
                targetGenJourHistorical = _formControl;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveControlValue</Name>
				<Source><![CDATA[
    public void saveControlValue(FormControl _formControl)
    {
        BudgetPlanGenerateContractProjectForecast budgetPlanGenerateContractProjectForecast = budgetPlanGenerateContract as BudgetPlanGenerateContractProjectForecast;

        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, SourceProjectForecastProfitAndLoss) :
                budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastProfitAndLoss(sourceProjectForecastProfitAndLoss.checked());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastWIP) :
                budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastWIP(sourceProjectForecastWIP.checked());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastPayrollAllocation) :
                budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastPayrollAllocation(sourceProjectForecastPayrollAllocation.checked());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastProjectFromDate) :
                budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastProjectFromDate(sourceProjectForecastProjectFromDate.dateValue());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastProjectToDate) :
                budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastProjectToDate(sourceProjectForecastProjectToDate.dateValue());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastLedgerFromDate) :
                budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastLedgerFromDate(sourceProjectForecastLedgerFromDate.dateValue());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastLedgerToDate) :
                budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastLedgerToDate(sourceProjectForecastLedgerToDate.dateValue());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastForecastModel) :
                budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastForecastModel(sourceProjectForecastForecastModel.valueStr());
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal) :
                budgetPlanGenerateContract.parmTargetBudgetPlanGenerateAggregateBy(sourceBudgetPlanTransferTotal.selection());
                break;

            case formControlStr(BudgetPlanGenerate, TargetGenJourHistorical) :
                budgetPlanGenerateContractProjectForecast.parmTargetIsHistorical(targetGenJourHistorical.selection());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValue</Name>
				<Source><![CDATA[
    public void setControlValue(FormControl _formControl)
    {
        BudgetPlanGenerateContractProjectForecast budgetPlanGenerateContractProjectForecast = budgetPlanGenerateContract as BudgetPlanGenerateContractProjectForecast;

        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, SourceProjectForecastProfitAndLoss) :
                sourceProjectForecastProfitAndLoss.checked(budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastProfitAndLoss());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastWIP) :
                sourceProjectForecastWIP.checked(budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastWIP());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastPayrollAllocation) :
                sourceProjectForecastPayrollAllocation.checked(budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastPayrollAllocation());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastProjectFromDate) :
                sourceProjectForecastProjectFromDate.dateValue(budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastProjectFromDate());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastProjectToDate) :
                sourceProjectForecastProjectToDate.dateValue(budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastProjectToDate());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastLedgerFromDate) :
                sourceProjectForecastLedgerFromDate.dateValue(budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastLedgerFromDate());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastLedgerToDate) :
                sourceProjectForecastLedgerToDate.dateValue(budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastLedgerToDate());
                break;

            case formControlStr(BudgetPlanGenerate, SourceProjectForecastForecastModel) :
                sourceProjectForecastForecastModel.text(budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastForecastModel());
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal) :
                sourceBudgetPlanTransferTotal.selection(budgetPlanGenerateContract.parmTargetBudgetPlanGenerateAggregateBy());
                break;

            case formControlStr(BudgetPlanGenerate, TargetGenJourHistorical) :
                targetGenJourHistorical.selection(budgetPlanGenerateContract.parmTargetIsHistorical());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanClose</Name>
				<Source><![CDATA[
    public boolean validateCanClose()
    {
        boolean                                    canClose;
        BudgetPlanGenerateContractProjectForecast  budgetPlanGenerateContractProjectForecast;

        canClose = super();

        canClose = canClose && this.validateHistoricalControl();

        budgetPlanGenerateContractProjectForecast = this.parmBudgetPlanGenerateContract() as BudgetPlanGenerateContractProjectForecast;

        if (canClose && !(budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastProfitAndLoss()
            || budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastWIP()
            || budgetPlanGenerateContractProjectForecast.parmSourceProjectForecastPayrollAllocation()))
        {
            error("@SYS91231");
            canClose = false;
        }

        if (canClose && !(targetBudgetPlanScenario.text() || targetBudgetPlanScenarioQuantity.text()))
        {
            error("@Budget:BudgetPlanning_GenerateFromProjectForecasts_Validation_AtLeastOneScenarioMustBeSelected");
            canClose = false;
        }

        canClose = canClose && this.validateTargetBudgetPlanScenarioQuantity();

        return canClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the monetary budget plan scenario control.
    /// </summary>
    /// <returns>
    /// true if the control value is valid; otherwise, false.
    /// </returns>
    public boolean validateTargetBudgetPlanScenario()
    {
        boolean isValid = true;

        if (targetBudgetPlanScenario.text())
        {
            if (targetGenJourHistorical.selection() == NoYes::No)
            {
                isValid = super();
            }
            else
            {
                BudgetPlanningStageRecId lastPlanningStageRecId = BudgetPlanningWorkflowSetup::getLastPlanningStage(
                                                                    targetBudgetPlanningProcess.value(),
                                                                    targetResponsibilityCenter.value()).RecId;

                BudgetPlanLayoutRecId budgetPlanLayoutRecId = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                                    targetBudgetPlanningProcess.value(),
                                                                    targetResponsibilityCenter.value(),
                                                                    lastPlanningStageRecId).Layout;

                isValid = BudgetPlanLayoutHelper::validateScenarioExistsInLayout(budgetPlanLayoutRecId, targetBudgetPlanScenario.text());
            }

            isValid = isValid && BudgetPlanScenario::verifyIsMonetaryUnitOfMeasureClass(BudgetPlanScenario::findByLocalizedName(targetBudgetPlanScenario.text()).RecId);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetBudgetPlanScenarioQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the quantity budget plan scenario control.
    /// </summary>
    /// <returns>
    /// true if the control value is valid; otherwise, false.
    /// </returns>
    public boolean validateTargetBudgetPlanScenarioQuantity()
    {
        BudgetPlanScenario budgetPlanScenario;

        boolean isValid = true;

        if (targetBudgetPlanScenarioQuantity.text())
        {
            if (targetGenJourHistorical.selection() == NoYes::No)
            {
                isValid = super();
            }
            else
            {
                budgetPlanScenario = BudgetPlanScenario::findByLocalizedName(targetBudgetPlanScenarioQuantity.text());

                BudgetPlanningStageRecId lastPlanningStageRecId = BudgetPlanningWorkflowSetup::getLastPlanningStage(
                                                                    targetBudgetPlanningProcess.value(),
                                                                    targetResponsibilityCenter.value()).RecId;

                BudgetPlanLayoutRecId budgetPlanLayoutRecId = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                                    targetBudgetPlanningProcess.value(),
                                                                    targetResponsibilityCenter.value(),
                                                                    lastPlanningStageRecId).Layout;

                isValid = BudgetPlanLayoutHelper::validateScenarioExistsInLayout(budgetPlanLayoutRecId, budgetPlanScenario.Name);

                if (isValid && budgetPlanScenario.UnitOfMeasureClass != UnitOfMeasureClass::Quantity)
                {
                    isValid = checkFailed(strFmt("@Budget:BudgetPlanning_GenerateFromProjectForecasts_Validation_UnitOfMeasureClassMustBeQuantity", targetBudgetPlanScenarioQuantity.label()));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTargetBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanScenario</c> records of <c>UnitOfMeasureClass</c> type monetary.
    /// </summary>
    public void lookupTargetBudgetPlanScenario()
    {
        if (targetGenJourHistorical.selection() == NoYes::No)
        {
            this.lookupTargetScenario(targetBudgetPlanScenario, UnitOfMeasureClass::Monetary);
        }
        else
        {
            BudgetPlanFormHelper::validateLookupControlFilledIn(targetBudgetPlanningProcess);
            BudgetPlanFormHelper::validateLookupControlFilledIn(targetResponsibilityCenter);

            BudgetPlanLookupHelper::lookupBudgetPlanScenario(
                targetBudgetPlanScenario,
                targetBudgetPlanningProcess.value(),
                0,
                targetResponsibilityCenter.value(),
                NoYes::Yes,
                false,
                0,
                UnitOfMeasureClass::Monetary);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTargetBudgetPlanScenarioQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanScenario</c> records of <c>UnitOfMeasureClass</c> type quantity.
    /// </summary>
    /// <returns>
    /// The <c>BudgetPlanScenario</c> record selected by the lookup.
    /// </returns>
    public void lookupTargetBudgetPlanScenarioQuantity()
    {
        if (targetGenJourHistorical.selection() == NoYes::No)
        {
            super();
        }
        else
        {
            BudgetPlanFormHelper::validateLookupControlFilledIn(targetBudgetPlanningProcess);
            BudgetPlanFormHelper::validateLookupControlFilledIn(targetResponsibilityCenter);

            BudgetPlanLookupHelper::lookupBudgetPlanScenario(
                targetBudgetPlanScenarioQuantity,
                targetBudgetPlanningProcess.value(),
                0,
                targetResponsibilityCenter.value(),
                NoYes::Yes,
                false,
                0,
                UnitOfMeasureClass::Quantity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedIsHistoricalControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of target budget plan scenario on the modification of historical control.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean modifiedIsHistoricalControl()
    {
        targetBudgetPlanScenario.text(BudgetPlanningConstants::emptyString);
        targetBudgetPlanScenarioQuantity.text(BudgetPlanningConstants::emptyString);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHistoricalControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the historical control.
    /// </summary>
    /// <returns>
    /// true if the value of the historical control is valid; otherwise, false.
    /// </returns>
    protected boolean validateHistoricalControl()
    {
        boolean isValid = true;

        if (targetGenJourHistorical.selection() == NoYes::No && sourceBudgetPlanTransferTotal.selection() != BudgetPlanGenerateAggregateBy::FiscalYear)
        {
            if (Box::yesNo("@Budget:BudgetPlanning_GenerateProcesses_AggregateTotalMustBeFiscalYear", DialogButton::No) == DialogButton::Yes)
            {
                sourceBudgetPlanTransferTotal.selection(BudgetPlanGenerateAggregateBy::FiscalYear);
                budgetPlanGenerateContract.parmTargetBudgetPlanGenerateAggregateBy(sourceBudgetPlanTransferTotal.selection());
            }
            else
            {
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>