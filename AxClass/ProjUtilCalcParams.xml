<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjUtilCalcParams</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjUtilCalcParams
{
    boolean                 isBudget;
    ProjForecastModelId     forecastModel;
    boolean                 isEfficiency;
    ProjPeriodId            periodId;
    TransDate               fromDate;
    TransDate               toDate;
    ProjUtilCalcFilterType  filterType;
    str                     filterValue;
    ResourceRecId           resourceRecId;
    ResourceCategoryRecId   resourceCategoryRecId;
    boolean                 isExcelExport;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
    isBudget,
    forecastModel,
    isEfficiency,
    periodId,
    fromDate,
    toDate,
    filterType,
    filterValue,
    resourceRecId,
    resourceCategoryRecId,
    isExcelExport
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramFilterType</Name>
				<Source><![CDATA[
    public ProjUtilCalcFilterType paramFilterType(ProjUtilCalcFilterType _filterType = filterType)
    {
        filterType = _filterType;

        return filterType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramFilterValue</Name>
				<Source><![CDATA[
    public str paramFilterValue(str _filterValue = filterValue)
    {
        filterValue = _filterValue;

        return filterValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramForecastModelId</Name>
				<Source><![CDATA[
    public ProjForecastModelId paramForecastModelId(ProjForecastModelId _forecastModel = forecastModel)
    {
        forecastModel = _forecastModel;

        return forecastModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramFromDate</Name>
				<Source><![CDATA[
    public TransDate paramFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        if (fromDate)
        {
            return fromDate;
        }
        else
        {
            return dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramIsBudget</Name>
				<Source><![CDATA[
    public boolean paramIsBudget(boolean _isBudget = isBudget)
    {
        isBudget = _isBudget;

        return isBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramIsEfficiency</Name>
				<Source><![CDATA[
    public boolean paramIsEfficiency(boolean _isEfficiency = isEfficiency)
    {
        isEfficiency = _isEfficiency;

        return isEfficiency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramIsExcelExport</Name>
				<Source><![CDATA[
    public boolean paramIsExcelExport(boolean _isExcelExport = isExcelExport)
    {
        isExcelExport = _isExcelExport;

        return isExcelExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramPeriodId</Name>
				<Source><![CDATA[
    public ProjPeriodId paramPeriodId(ProjPeriodId _periodId = periodId)
    {
        periodId = _periodId;

        return periodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramResource</Name>
				<Source><![CDATA[
    public ResourceRecId paramResource(ResourceRecId _resourceRecId = resourceRecId)
    {
        resourceRecId = _resourceRecId;

        return resourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramResourceCategory</Name>
				<Source><![CDATA[
    public ResourceCategoryRecId paramResourceCategory(ResourceCategoryRecId _resourceCategoryRecId = resourceCategoryRecId)
    {
        resourceCategoryRecId = _resourceCategoryRecId;

        return resourceCategoryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramToDate</Name>
				<Source><![CDATA[
    public TransDate paramToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        if (toDate)
        {
            return toDate;
        }
        else
        {
            return dateMax();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    //checks all the input parameters and ensures
    //the calculation can proceed
    public boolean validate()
    {
        boolean ret = true;
        ProjPeriodLine projPeriodLineFrom;
        ProjPeriodLine projPeriodLineTo;

        if (this.paramIsBudget() && !this.paramForecastModelId())
        {
            //the forecast model must be set for budget calculations
            checkFailed("@SYS102649");
            ret = false;
        }

        if (this.paramFromDate() && this.paramToDate() && (this.paramFromDate() > this.paramToDate()))
        {
            //the to date must be after the from date
            checkFailed("@SYS102648");
            ret = false;
        }

        if (this.paramPeriodId())
        {
            projPeriodLineFrom = ProjPeriodLine::findFromPeriodFrom(this.paramPeriodId(), this.paramFromDate());
            projPeriodLineTo = ProjPeriodLine::findFromPeriodTo(this.paramPeriodId(), this.paramToDate());

            if (!projPeriodLineFrom || !projPeriodLineTo)
            {
                // The entered date must follow the Period code.
                checkFailed("@SYS84221");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    //builds the parameter class for Utilization calculation
    public static ProjUtilCalcParams construct(boolean _isBudget = false, //is the calculation for budget or actual
                                    ProjForecastModelId _forecastModel = '', //forecast model id - only used for budget
                                    boolean _isEfficiency = true, //efficiency or billable utilization
                                    ProjPeriodId _periodId = '', //period we're calculating for - ignored if null
                                    TransDate _fromDate = dateNull(),  //starting date of calculation
                                    TransDate _toDate = dateNull(),  //ending date of calculation - only transactions started between these dates counted
                                    ProjUtilCalcFilterType _filterType = ProjUtilCalcFilterType::Category,  //the kind of entity we are doing the calculation for
                                    str _filterValue = '', //the id of the entity from above
                                    boolean _isExcelExport = false, //true to save detailed transaction to temp table for exporting to Excel
                                    ResourceRecId _resourceRecId = 0, //RecId of resource
                                    ResourceCategoryRecId _resourceCategoryRecId = 0) //RecId of resource category
    {
        ProjUtilCalcParams result;

        result = new ProjUtilCalcParams();

        result.paramIsBudget(_isBudget);
        result.paramForecastModelId(_forecastModel);
        result.paramIsEfficiency(_isEfficiency);
        result.paramPeriodId(_periodId);
        result.paramFromDate(_fromDate);
        result.paramToDate(_toDate);
        result.paramFilterType(_filterType);
        result.paramFilterValue(_filterValue);
        result.paramIsExcelExport(_isExcelExport);
        result.paramResource(_resourceRecId);
        result.paramResourceCategory(_resourceCategoryRecId);

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>