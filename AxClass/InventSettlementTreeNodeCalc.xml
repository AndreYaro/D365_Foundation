<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSettlementTreeNodeCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventSettlementTreeNodeCalc
{
    InventTransOrigin   inventTransOriginCaller;
    InventTrans         inventTransCaller;

    InventQty           qtySettled;
    CostAmount          valueSettled;

    List                listInventSettlementTreeNode;  //list of inventSettlementTreeNode objects
    InventTransCurrency_RU inventTransCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addIssue</Name>
				<Source><![CDATA[
    protected void addIssue(
        InventTrans     _inventTrans,
        real            _qtyRatio)
    {
        // <GEERU>
        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
        // </GEERU>
            if (_inventTrans.openQty())
                listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newInventTrans(_inventTrans,
                                                                            _inventTrans.financialOpenQty() * _qtyRatio,
                                                                            _inventTrans.financialOpenValue() * _qtyRatio,
                                                                            UnknownNoYes::No));
            if (_inventTrans.QtySettled)
                listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newInventTrans(_inventTrans,
                                                                            _inventTrans.QtySettled * _qtyRatio,
                                                                            _inventTrans.CostAmountSettled * _qtyRatio,
                                                                            UnknownNoYes::Yes));
        // <GEERU>
        }
        else
        {
            if (_inventTrans.openQtySecCur_RU())
            {
                listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newInventTrans(_inventTrans,
                                                                            _inventTrans.financialOpenQtySecCur_RU() * _qtyRatio,
                                                                            _inventTrans.financialOpenValueSecCur_RU() * _qtyRatio,
                                                                            UnknownNoYes::No));
            }

            if (_inventTrans.QtySettledSecCur_RU)
            {
                listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newInventTrans(_inventTrans,
                                                                             _inventTrans.QtySettledSecCur_RU * _qtyRatio,
                                                                             _inventTrans.CostAmountSettledSecCur_RU * _qtyRatio,
                                                                             UnknownNoYes::Yes));
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProdRouteConsumption</Name>
				<Source><![CDATA[
    protected void addProdRouteConsumption(
        InventTransOrigin  _inventTransOrigin,
        real               _qtyRatio)
    {
        ProdTableJour       prodTableJour;
        // <GEERU>
        CostAmount         costAmountSecCur;
        // </GEERU>

        if (_inventTransOrigin.ReferenceCategory == InventTransType::Production)
        {
            // <GEERU>
            if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
            {
            // </GEERU>
                select sum(AmountPhysical) from prodTableJour
                    where prodTableJour.ProdId      == _inventTransOrigin.ReferenceId
                       && prodTableJour.JournalType == ProdJourType::RouteCard;

                if (prodTableJour.AmountPhysical)
                {
                    listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newParameters(prodTableJour,
                                                                                "@SYS5304",
                                                                                -qtySettled,
                                                                                -prodTableJour.AmountPhysical * _qtyRatio,
                                                                                false));
                }
            // <GEERU>
            }
            else
            {
                while select sum(AmountPhysical) from prodTableJour
                     group by TransDate
                     where prodTableJour.ProdId      == _inventTransOrigin.ReferenceId
                        && prodTableJour.JournalType == ProdJourType::RouteCard
                {
                    costAmountSecCur += CurrencyExchangeHelper::amountMST2MSTSecond_RU(prodTableJour.AmountPhysical, prodTableJour.TransDate);
                }

                if (costAmountSecCur)
                {
                    listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newParameters(prodTableJour,
                                                                                "@SYS5304",
                                                                                -qtySettled,
                                                                                -costAmountSecCur * _qtyRatio,
                                                                                false));
                }
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustment</Name>
				<Source><![CDATA[
    protected void calcAdjustment()
    {
        real                factor;
        // <GEERU>
        date                lastClosingDate = InventClosing::inventClosingLast(InventAdjustmentType::Closing, inventTransCurrency).TransDate;
        // </GEERU>

        if (inventTransCaller.Qty <= 0)
        {
            return ;
        }

        InventQty qtyRatio = this.ratio(qtySettled,inventTransCaller.Qty);

        // <GEERU>
        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
        // </GEERU>
            if (CurrencyExchangeHelper::amount(inventTransCaller.CostAmountPosted * qtyRatio - valueSettled) == 0)
            {
                return;
            }
        // <GEERU>
        }
        else
        {
            if (CurrencyExchangeHelper::amount(inventTransCaller.CostAmountSecCurPosted_RU * qtyRatio - valueSettled) == 0)
                return;
        }
        // </GEERU>

        if (this.hasDerivedTransaction(inventTransOriginCaller))
        {
            factor = -1; // Adjustments are shown as part of the matching issue transactions and must have same sign as those.
        }
        else
        {
            factor = 1;
        }

        this.calcAdjustmentOnhandTransaction(lastClosingDate,qtyRatio,factor);

        this.calcAdjustmentMisc(lastClosingDate,qtyRatio,factor);

        this.calcAdjustmentSystem(lastClosingDate,qtyRatio,factor);

        // if adjusted then add the origin receipt.
        if (listInventSettlementTreeNode.elements() && ! this.hasDerivedTransaction(inventTransOriginCaller))
        {
            // <GEERU>
            if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
            {
            // </GEERU>
                listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newInventTrans(inventTransCaller,
                                                                            inventTransCaller.Qty * qtyRatio,
                                                                            inventTransCaller.CostAmountPosted * qtyRatio,
                                                                            UnknownNoYes::No));
            // <GEERU>
            }
            else
            {
                 listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newInventTrans(inventTransCaller,
                                                                             inventTransCaller.Qty * qtyRatio,
                                                                             inventTransCaller.CostAmountSecCurPosted_RU * qtyRatio,
                                                                             UnknownNoYes::No));
            }
             // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustmentMisc</Name>
				<Source><![CDATA[
    protected void calcAdjustmentMisc(
        TransDate       _lastClosingDate,
        InventQty       _qtyRatio,
        real            _factor)
    {
        InventSettlement    inventSettlement;
        InventClosing       inventClosing;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        while select inventSettlement
            where inventSettlement.TransRecId   == inventTransCaller.RecId              &&
                  inventSettlement.Cancelled    == NoYes::No                            &&
                  inventSettlement.SettleType   == InventSettleType::CompleteAdjustment &&
                  inventSettlement.TransDate    <= _lastClosingDate                     &&
                  // <GEERU>
                  inventSettlement.InventTransCurrency_RU == inventTransCurrency        &&
                  // </GEERU>
                  inventSettlement.CostAmountAdjustment
           notexists join inventClosing
                where   inventClosing.Voucher           == inventSettlement.Voucher     &&
                        inventClosing.TransDate         == inventSettlement.TransDate
        {
            if (inventSettlement.OperationsPosting    == LedgerPostingType::InventStdLoss       ||
                inventSettlement.OperationsPosting    == LedgerPostingType::InventStdProfit     ||
                inventSettlement.OperationsPosting    == LedgerPostingType::PurchStdLoss        ||
                inventSettlement.OperationsPosting    == LedgerPostingType::PurchStdProfit)
            {
                listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newParameters(inventSettlement,
                                                                        "@SYS58832",
                                                                        qtySettled,
                                                                        inventSettlement.CostAmountAdjustment * _qtyRatio * _factor,
                                                                        false));
            }
            else
            {
                // markup
                // <GEEU>
                if (inventSettlement.CostAmountAdjustment > 0 && !inventSettlement.VendInvoiceIdMarkup_RU && !inventSettlement.VendAccountMarkup_RU)
                // </GEEU>
                {
                    select firstonly GeneralJournalEntry, PostingType from generalJournalAccountEntry
                        where generalJournalAccountEntry.IsCredit == NoYes::Yes
                        exists join subledgerVoucherGeneralJournalEntry
                        where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry
                           && subledgerVoucherGeneralJournalEntry.AccountingDate      == inventSettlement.TransDate
                           && subledgerVoucherGeneralJournalEntry.Voucher             == inventSettlement.Voucher;

                    listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newParameters(inventSettlement,
                                                                            enum2str(generalJournalAccountEntry.PostingType),
                                                                            qtySettled,
                                                                            inventSettlement.CostAmountAdjustment * _qtyRatio * _factor,
                                                                            false));
                }
                else
                {
                    listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newParameters(inventSettlement,
                                                                            "@SYS596",
                                                                            qtySettled,
                                                                            inventSettlement.CostAmountAdjustment * _qtyRatio * _factor,
                                                                            false));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustmentOnhandTransaction</Name>
				<Source><![CDATA[
    protected void calcAdjustmentOnhandTransaction(
        TransDate       _lastClosingDate,
        InventQty       _qtyRatio,
        real            _factor)
    {
        InventSettlement    inventSettlement;
        InventClosing       inventClosing;

        while select inventSettlement
            where inventSettlement.TransRecId   == inventTransCaller.RecId  &&
                  inventSettlement.Cancelled    == NoYes::No                &&
                  inventSettlement.TransDate    <= _lastClosingDate         &&
                  // <GEERU>
                  inventSettlement.InventTransCurrency_RU == inventTransCurrency &&
                  // </GEERU>
                  inventSettlement.CostAmountAdjustment
            join AdjustmentType from inventClosing
                where   inventClosing.Voucher           == inventSettlement.Voucher             &&
                        inventClosing.TransDate         == inventSettlement.TransDate           &&
                        (inventClosing.AdjustmentType   == InventAdjustmentType::InventOnHand   ||
                         inventClosing.AdjustmentType   == InventAdjustmentType::Transaction)
        {
            listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newParameters(inventSettlement,
                                                                    inventClosing.AdjustmentType == InventAdjustmentType::InventOnHand ? "@SYS97724" : "@SYS15191",
                                                                    qtySettled,
                                                                    inventSettlement.CostAmountAdjustment * _qtyRatio * _factor,
                                                                    false));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustmentSystem</Name>
				<Source><![CDATA[
    protected void calcAdjustmentSystem(
        TransDate       _lastClosingDate,
        InventQty       _qtyRatio,
        real            _factor)
    {
        InventSettlement    inventSettlement;
        InventClosing       inventClosing;
        CostAmount          roundingDiff;

        select sum(CostAmountAdjustment) from inventSettlement
            where inventSettlement.TransRecId           == inventTransCaller.RecId         &&
                  inventSettlement.Cancelled            == NoYes::No                        &&
                  inventSettlement.CostAmountAdjustment                                     &&
                  inventSettlement.TransDate            <= _lastClosingDate                  &&
                  (inventSettlement.OperationsPosting   == LedgerPostingType::InventLoss ||
                  // <GEERU>
                  inventSettlement.OperationsPosting    == LedgerPostingType::InventProfit                     ||
                  inventSettlement.OperationsPosting    == LedgerPostingType::InventRoundingLoss_RU            ||
                  inventSettlement.OperationsPosting    == LedgerPostingType::InventRoundingProfit_RU)         &&
                  inventSettlement.InventTransCurrency_RU == inventTransCurrency
                  // </GEERU>
            exists join inventClosing
                where   inventClosing.Voucher           == inventSettlement.Voucher         &&
                        inventClosing.TransDate         == inventSettlement.TransDate       &&
                        (inventClosing.AdjustmentType   == InventAdjustmentType::Closing    ||
                         inventClosing.AdjustmentType   == InventAdjustmentType::Recalculation);

        if (inventSettlement.CostAmountAdjustment)
        {
            CostAmount systemAdjustment = inventSettlement.CostAmountAdjustment * _qtyRatio * _factor;
            // <GEERU>
            if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
            {
            // </GEERU>
                if (valueSettled && qtySettled && inventTransCaller.QtySettled)
                    roundingDiff = ((inventTransCaller.CostAmountSettled/inventTransCaller.QtySettled) * qtySettled) - valueSettled;
            // <GEERU>
            }
            else
            {
                if (valueSettled && qtySettled && inventTransCaller.QtySettledSecCur_RU)
                {
                    roundingDiff = ((inventTransCaller.CostAmountSettledSecCur_RU / inventTransCaller.QtySettledSecCur_RU) * qtySettled) - valueSettled;
                }
            }
            // </GEERU>

            if (roundingDiff && sign(systemAdjustment) == sign(systemAdjustment+roundingDiff))
                systemAdjustment += roundingDiff;

            if (CurrencyExchangeHelper::amount(systemAdjustment))
                listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newParameters(inventSettlement,
                                                                        "@SYS4278",
                                                                        qtySettled,
                                                                        systemAdjustment,
                                                                        false));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNodes</Name>
				<Source><![CDATA[
    public void calcNodes()
    {
        if (inventTransCaller.Qty > 0)
        {
            this.calcAdjustment();
            this.expandInventTransReceipt();
        }
        else
        {
            this.expandInventTransIssue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandInventTransIssue</Name>
				<Source><![CDATA[
    protected void expandInventTransIssue()
    {
        InventSettlement    inventSettlement;
        InventSettlement    inventSettlementReceipt;
        InventSettlement    inventSettlementReceiptSum;

        if (inventTransCaller.Qty > 0)
        {
            return ;
        }

        real ratioCaller = this.ratio(qtySettled, inventTransCaller.QtySettled);

        while select sum(QtySettled) from inventSettlement
            group by SettleTransId
            where inventSettlement.TransRecId           == inventTransCaller.RecId
              &&  inventSettlement.SettleType           == InventSettleType::Issue
              &&  inventSettlement.InventTransId        == inventTransCaller.inventTransOrigin().InventTransId
              &&  inventSettlement.QtySettled           <  0
              &&  inventSettlement.Cancelled            == NoYes::No
              // <GEERU>
              && inventSettlement.InventTransCurrency_RU == inventTransCurrency
              // </GEERU>
        {
            InventQty qtyToExplain = inventSettlement.QtySettled * ratioCaller;

            select sum(QtySettled) from inventSettlementReceiptSum
                where inventSettlementReceiptSum.SettleTransId  == inventSettlement.SettleTransId
                  &&  inventSettlementReceiptSum.SettleType     == InventSettleType::Receipt
                  &&  inventSettlementReceiptSum.Cancelled      == NoYes::No;

            while select sum(QtySettled),sum(CostAmountSettled) from inventSettlementReceipt
                group by TransRecId
                where inventSettlementReceipt.SettleTransId  == inventSettlement.SettleTransId
                  &&  inventSettlementReceipt.SettleType     == InventSettleType::Receipt
                  &&  inventSettlementReceipt.QtySettled     >= 0
                  &&  inventSettlementReceipt.Cancelled      == NoYes::No
            {
                InventTrans inventTransReceipt = inventSettlementReceipt.inventTrans();

                real ratio = this.ratio(qtyToExplain, inventSettlementReceiptSum.QtySettled);
                listInventSettlementTreeNode.addEnd(InventSettlementTreeNode::newInventTrans(inventTransReceipt,inventSettlementReceipt.QtySettled * ratio,inventSettlementReceipt.CostAmountSettled * ratio,UnknownNoYes::Unknown));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandInventTransReceipt</Name>
				<Source><![CDATA[
    protected void expandInventTransReceipt()
    {
        InventTrans                         childInventTrans;
        InventTransPosting                  inventTransPosting;
        InventTransOriginAssemblyComponent  inventTransOriginAssemblyComponent;

        if (inventTransCaller.Qty <= 0)
        {
            return;
        }

        switch (inventTransOriginCaller.ReferenceCategory)
        {
            case InventTransType::WMSTransport:
            case InventTransType::QuarantineOrder:
            case InventTransType::InventTransfer:
            case InventTransType::TransferOrderShip:
            case InventTransType::TransferOrderReceive:
            case InventTransType::SummedUp:
                InventTransOriginId issueInventTransOriginId = inventTransCaller.transferInventTransOrigin().RecId;

                select sum(Qty) from childInventTrans
                    where childInventTrans.InventTransOrigin    == issueInventTransOriginId
                       && childInventTrans.VoucherPhysical      == inventTransCaller.VoucherPhysical
                       && childInventTrans.DateFinancial        == inventTransCaller.DateFinancial
                       && childInventTrans.StatusReceipt        == StatusReceipt::None
                       && childInventTrans.StatusIssue          == StatusIssue::Sold;

                    InventQty qtyRatio = this.ratio(qtySettled,childInventTrans.Qty);

                    while select childInventTrans
                        where childInventTrans.InventTransOrigin    == issueInventTransOriginId
                           && childInventTrans.VoucherPhysical      == inventTransCaller.VoucherPhysical
                           && childInventTrans.DateFinancial        == inventTransCaller.DateFinancial
                           && childInventTrans.StatusReceipt        == StatusReceipt::None
                           && childInventTrans.StatusIssue          == StatusIssue::Sold
                    {
                        this.addIssue(childInventTrans,qtyRatio);
                    }
                break;

            case InventTransType::Production:
            case InventTransType::BOMMain:

                select sum(Qty) from childInventTrans
                    where childInventTrans.InventTransOrigin    == inventTransCaller.InventTransOrigin
                       && childInventTrans.StatusIssue          == StatusIssue::None
                       && childInventTrans.StatusReceipt        == StatusReceipt::Purchased
                       && childInventTrans.InvoiceReturned      == NoYes::No
                       && childInventTrans.PackingSlipReturned == NoYes::No;

                   qtyRatio = this.ratio(qtySettled,childInventTrans.Qty);

                this.addProdRouteConsumption(inventTransOriginCaller,qtyRatio);

                // find bom items - inventTransPosting is used as no good index exists on inventTrans
                while select forceplaceholders forceselectorder TableId from inventTransPosting
                    where inventTransPosting.Voucher                == inventTransCaller.Voucher
                       && inventTransPosting.TransDate              == inventTransCaller.DateFinancial
                       && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
                join childInventTrans
                    where childInventTrans.Voucher                  == inventTransCaller.Voucher
                       && childInventTrans.DateFinancial            == inventTransCaller.DateFinancial
                       && childInventTrans.InventTransOrigin        == inventTransPosting.InventTransOrigin
                       && childInventTrans.StatusReceipt            == StatusReceipt::None
                       && childInventTrans.StatusIssue              == StatusIssue::Sold
                exists join inventTransOriginAssemblyComponent
                    where inventTransOriginAssemblyComponent.ComponentInventTransOrigin == childInventTrans.InventTransOrigin
                       && inventTransOriginAssemblyComponent.AssemblyInventTransOrigin  == inventTransCaller.InventTransOrigin
                {
                    this.addIssue(childInventTrans,qtyRatio);
                }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDerivedTransaction</Name>
				<Source><![CDATA[
    protected boolean hasDerivedTransaction(InventTransOrigin   _inventTransOrigin)
    {
        if ( _inventTransOrigin.ReferenceCategory == InventTransType::Production     ||
             _inventTransOrigin.ReferenceCategory == InventTransType::BOMMain        ||
             _inventTransOrigin.isTransfer())
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        listInventSettlementTreeNode    = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCaller</Name>
				<Source><![CDATA[
    public InventTrans parmInventTransCaller(InventTrans _inventTransCaller = inventTransCaller)
    {
        inventTransCaller = _inventTransCaller;

        return inventTransCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency_RU</Name>
				<Source><![CDATA[
    public InventTransCurrency_RU parmInventTransCurrency_RU(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;
        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOriginCaller</Name>
				<Source><![CDATA[
    public InventTransOrigin parmInventTransOriginCaller(InventTransOrigin _inventTransOriginCaller = inventTransOriginCaller)
    {
        inventTransOriginCaller = _inventTransOriginCaller;

        return inventTransOriginCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmListInventSettlementTreeNode</Name>
				<Source><![CDATA[
    public List parmListInventSettlementTreeNode(List _listInventSettlementTreeNode = listInventSettlementTreeNode)
    {
        listInventSettlementTreeNode = _listInventSettlementTreeNode;

        return listInventSettlementTreeNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtySettled</Name>
				<Source><![CDATA[
    public InventQty parmQtySettled(InventQty _qtySettled = qtySettled)
    {
        qtySettled = _qtySettled;

        return qtySettled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValueSettled</Name>
				<Source><![CDATA[
    public CostAmount parmValueSettled(CostAmount _valueSettled = valueSettled)
    {
        valueSettled = _valueSettled;

        return valueSettled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ratio</Name>
				<Source><![CDATA[
    protected real ratio(
        InventQty       _qtySettled,
        InventQty       _qtyTotal)
    {
        real    qtyRatio;

        if (_qtySettled && _qtyTotal && abs(_qtySettled) < abs(_qtyTotal))
            qtyRatio = abs(_qtySettled/_qtyTotal);

        if (qtyRatio > 1 || qtyRatio <= 0)
            qtyRatio = 1;

        return qtyRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNodesServer</Name>
				<Source><![CDATA[
    static container calcNodesServer(
         RecId         _inventTransRecId,
         InventQty     _qtySettled,
         CostAmount    _valueSettled
         , InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur
         )
    {
        InventSettlementTreeNodeCalc inventSettlementTreeNodeCalc = InventSettlementTreeNodeCalc::newParameters(_inventTransRecId,
             _qtySettled,
             _valueSettled
             // <GEERU>
             , _inventTransCurrency
             // </GEERU>
             );
        inventSettlementTreeNodeCalc.calcNodes();

        return inventSettlementTreeNodeCalc.parmListInventSettlementTreeNode().pack();  // returning a packed list of inventSettlementTreeNode objects
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventSettlementTreeNodeCalc construct()
    {
        return new InventSettlementTreeNodeCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    static InventSettlementTreeNodeCalc newParameters(RecId         _inventTransRecId,
                                                      InventQty     _qtySettled,
                                                      CostAmount    _valueSettled
                                                      , InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur
                                                      )
    {
        InventTrans                     inventTransCaller = InventTrans::findRecId(_inventTransRecId);

        InventSettlementTreeNodeCalc inventSettlementTreeNodeCalc = InventSettlementTreeNodeCalc::construct();

        inventSettlementTreeNodeCalc.parmInventTransCaller(inventTransCaller);
        inventSettlementTreeNodeCalc.parmInventTransOriginCaller(inventTransCaller.inventTransOrigin());
        inventSettlementTreeNodeCalc.parmQtySettled(_qtySettled);
        inventSettlementTreeNodeCalc.parmValueSettled(_valueSettled);
        // <GEERU>
        inventSettlementTreeNodeCalc.parmInventTransCurrency_RU(_inventTransCurrency);
        // </GEERU>

        return inventSettlementTreeNodeCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>