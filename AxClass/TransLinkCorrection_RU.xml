<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransLinkCorrection_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates link between original operation and correction.
/// </summary>
class TransLinkCorrection_RU
{
    Common              sourceTrans, stornoTrans, correctiveTrans;
    TransDate           accountingDate;
    TransLinkType_RU    transLinkType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates link between ledger transactions.
    /// </summary>
    protected void createLedgerTransLink()
    {
        TransLink_RU    transLink;
        boolean         isOk;
    
        transLink = TransLink_RU::findSec(correctiveTrans.TableId, correctiveTrans.RecId);
    
        if (transLink)
        {
            sourceTrans = new DictTable(correctiveTrans.TableId).makeRecord();
    
            select firstonly sourceTrans
                where sourceTrans.RecId == transLink.RefPri;
    
            if (sourceTrans)
            {
                switch (transLink.TransLinkType)
                {
                    case TransLinkType_RU::Correction:
                        TransLink_RU::postLedgerCorrection(sourceTrans);
                        if (correctiveTrans != sourceTrans)
                        {
                            TransLink_RU::postLedgerCorrection(correctiveTrans, sourceTrans);
                        }
                        break;
    
                    case TransLinkType_RU::Storno:
                        TransLink_RU::postLedgerReverse(correctiveTrans, sourceTrans);
                        break;
                }
    
                isOk = true;
            }
        }
    
        if (!isOk)
        {
            error("@SYP4860730");
            throw error("@GLS101992");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates link between original operation and correction.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    public void createTransLink(TransDate _accountingDate)
    {
        if (!_accountingDate)
        {
            throw error(error::wrongUseOfFunction(funcname()));
        }
    
        accountingDate = _accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes corrective operation.
    /// </summary>
    /// <param name="_correctiveTrans">
    /// The corrective transaction.
    /// </param>
    protected void initValue(Common _correctiveTrans)
    {
        correctiveTrans = _correctiveTrans;
        transLinkType = TransLinkType_RU::Correction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates link between ledger transactions.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The <c>LedgerJournalTable</c> record.
    /// </param>
    protected void postLedgerCorrection(LedgerJournalTable _ledgerJournalTable)
    {
        throw error(error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransLinkAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates accounting date in transaction links.
    /// </summary>
    /// <param name="_sourceAccountingDate">
    /// The source transaction accounting date.
    /// </param>
    /// <param name="_stornoAccountingDate">
    /// The storno transaction accounting date.
    /// </param>
    protected void updateTransLinkAccountingDate(TransDate _sourceAccountingDate, TransDate _stornoAccountingDate)
    {
        TransLink_RU transLink;
    
        if (sourceTrans)
        {
            transLink = TransLink_RU::findSec(sourceTrans.TableId, sourceTrans.RecId, true);
            if (transLink)
            {
                if (!transLink.AccountingDate)
                {
                    transLink.AccountingDate = _sourceAccountingDate;
                    transLink.update();
                }
            }
            else
            {
                throw error(error::missingRecord(funcname()));
            }
        }
    
        if (stornoTrans)
        {
            transLink = TransLink_RU::findSec(stornoTrans.TableId, stornoTrans.RecId, true);
            if (transLink)
            {
                if (!transLink.AccountingDate)
                {
                    transLink.AccountingDate = _stornoAccountingDate;
                    transLink.update();
                }
            }
            else
            {
                throw error(error::missingRecord(funcname()));
            }
        }
    
        transLink = TransLink_RU::findSec(correctiveTrans.TableId, correctiveTrans.RecId, true);
        if (transLink)
        {
            transLink.AccountingDate = accountingDate;
            transLink.update();
        }
        else
        {
            throw error(error::missingRecord(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs instance of the <c>TransLinkCorrection_RU</c> class.
    /// </summary>
    /// <param name="_correctiveTrans">
    /// The corrective transaction.
    /// </param>
    /// <returns>
    /// The instance of the <c>TransLinkCorrection_RU</c> class.
    /// </returns>
    public static TransLinkCorrection_RU construct(Common _correctiveTrans)
    {
        TransLinkCorrection_RU transLinkCorrection;
    
        switch (_correctiveTrans.TableId)
        {
            case tablenum (RAssetTrans):
                transLinkCorrection = new TransLinkCorrectionAsset_RU();
                break;
    
            case tablenum (RDeferralsTrans):
                transLinkCorrection = new TransLinkCorrectionDeferrals_RU();
                break;
    
            default:
                throw error(error::wrongUseOfFunction(funcname()));
        }
    
        transLinkCorrection.initValue(_correctiveTrans);
    
        return transLinkCorrection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates link between ledger transactions.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The <c>LedgerJournalTable</c> record.
    /// </param>
    public static void postLedgerJournal(LedgerJournalTable _ledgerJournalTable)
    {
        TransLinkCorrection_RU transLinkCorrection;
    
        switch (_ledgerJournalTable.JournalType)
        {
            case LedgerJournalType::Assets_RU:
                transLinkCorrection = new TransLinkCorrectionAsset_RU();
                break;
    
            case LedgerJournalType::RDeferrals:
                transLinkCorrection = new TransLinkCorrectionDeferrals_RU();
                break;
    
            default:
                throw error(error::wrongUseOfFunction(funcname()));
        }
    
        transLinkCorrection.postLedgerCorrection(_ledgerJournalTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>