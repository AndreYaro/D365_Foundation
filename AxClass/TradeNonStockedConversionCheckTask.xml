<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionCheckTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TradeNonStockedConversionCheckTask</c> class executes the readiness check task.
/// </summary>
class TradeNonStockedConversionCheckTask
extends TradeNonStockedConversionTask implements BatchRetryable
{
    #Define.CurrentVersion(1)
    #Localmacro.CurrentList
        tradeNonStockedConversion,
        tradeNonStockedConversionItem
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes the check task.
    /// </summary>
    public void run()
    {
        boolean ok = TradeNonStockedConversionCheck::checkAll(this.parmTradeNonStockedConversion(), this.parmTradeNonStockedConversionItem());

        if (this.isSingleItem())
        {
            this.updateStatus(TradeNonStockedConversionStatus::Draft, ok ? TradeNonStockedConversionStatus::Checked : TradeNonStockedConversionStatus::CheckedIssues);
        }
        else
        {
            this.updateStatusAllItems(ok);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatusAllItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the status for each <c>TradeNonStockedConversionItem</c> record that is included in the
    ///    check.
    /// </summary>
    /// <param name="_checkStatus">
    ///    A Boolean value that specifies whether all the checks passed.
    /// </param>
    private void updateStatusAllItems(boolean _checkStatus)
    {
        TradeNonStockedConversionItem updateStatusConversionItem;
        TradeNonStockedConversionCheckLog tradeNonStockedConversionCheckLog;

        if (_checkStatus)
        {
            ttsbegin;
            this.updateStatus(TradeNonStockedConversionStatus::Draft, TradeNonStockedConversionStatus::Checked);
            ttscommit;
        }
        else
        {
            ttsbegin;
            update_recordset updateStatusConversionItem
                setting Status = TradeNonStockedConversionStatus::Checked
                where updateStatusConversionItem.NonStockedConversion == this.parmTradeNonStockedConversion().RecId
                &&    updateStatusConversionItem.Status == TradeNonStockedConversionStatus::Draft
                notexists join tradeNonStockedConversionCheckLog
                    where tradeNonStockedConversionCheckLog.NonStockedConversionItem == updateStatusConversionItem.RecId;

            update_recordset updateStatusConversionItem
                setting Status = TradeNonStockedConversionStatus::CheckedIssues
                where updateStatusConversionItem.NonStockedConversion == this.parmTradeNonStockedConversion().RecId
                &&    updateStatusConversionItem.Status == TradeNonStockedConversionStatus::Draft
                exists join tradeNonStockedConversionCheckLog
                    where tradeNonStockedConversionCheckLog.NonStockedConversionItem == updateStatusConversionItem.RecId;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static TradeNonStockedConversionCheckTask construct()
    {
        return new TradeNonStockedConversionCheckTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS323652";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionCheckTask newTask(
        TradeNonStockedConversion _tradeNonStockedConversion,
        TradeNonStockedConversionItem _tradeNonStockedConversionItem = null)
    {
        TradeNonStockedConversionCheckTask tradeNonStockedConversionCheckTask = TradeNonStockedConversionCheckTask::construct();

        tradeNonStockedConversionCheckTask.parmTradeNonStockedConversion(_tradeNonStockedConversion);
        tradeNonStockedConversionCheckTask.parmTradeNonStockedConversionItem(_tradeNonStockedConversionItem);

        return tradeNonStockedConversionCheckTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>