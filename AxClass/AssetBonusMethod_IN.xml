<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBonusMethod_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Indian customized special depreciation method, applicable to both value model and depreciation book
/// </summary>
class AssetBonusMethod_IN extends AssetBonusMethod
{
    AssetDepBookMap_IN  depBookMap;
    TransDate           depreciationStartDate;
    TransDate           firstPeriodStart;
    TransDate           firstPeriodEnd;
    TransDate           secondPeriodEnd;
    AssetTableInterval  assetTableInterval;
    Array               bonusDateList;
    boolean             isUseSpecialDepBalance;
    boolean             isSpecialDep_IN;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bonusCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of bonus records that exist for the Asset Id and Dep Book Id.
    /// </summary>
    /// <returns>
    /// The number of bonus records.
    /// </returns>
    protected Counter bonusCount()
    {
        return depBookMap.AssetDepBookMap_IN::bonusCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bonusDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bonus date.
    /// </summary>
    /// <returns>The bonus date.</returns>
    public TransDate bonusDate()
    {
        return bonusDateList.value(currentCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAcquistionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the acquistion amount to be used for special depreciation.
    /// </summary>
    /// <returns>
    /// Acquistion amount to be used for special depreciation.
    /// </returns>
    protected AssetAmount calcAcquistionAmount()
    {
        AssetAmount             acquistionAmount;
        AssetAmount             groupProfit;
        AssetAmount             profit;
        AssetDepBookMap_IN      depBookMapLocal;

        acquistionAmount  = depBookMap.AssetDepBookMap_IN::acquisitionAmount(dateMax());
        depBookMapLocal = AssetDepBookMap_IN::getEmptyTableBuffer(depBookMap.AssetDepBookMap_IN::AssetBookType());

        // Calculates the profits gained in the same year in the same group
        while select depBookMapLocal
            order by depBookMapLocal.AcquisitionDate desc
            where depBookMapLocal.AssetBookId   == depBookMap.AssetBookId
                && depBookMapLocal.AssetGroup   == depBookMap.AssetGroup
                && (depBookMapLocal.AssetStatus  == AssetStatus::Sold
                    || depBookMapLocal.AssetStatus  == AssetStatus::Scrapped)
                && depBookMapLocal.DisposalDate >= firstPeriodStart
                && depBookMapLocal.DisposalDate <= firstPeriodEnd
        {
            profit = - AssetDepTransMap_IN::amountMSTPerDateTransTypes(depBookMapLocal, [AssetTransType::DisposalSale, AssetTransType::DisposalScrap], dateNull(), dateMax())
                    - depBookMapLocal.AssetDepBookMap_IN::acquisitionAmount(dateMax());
            if (profit > 0)
            {
                groupProfit += profit;
            }
        }
        if (groupProfit == 0)
        {
            return acquistionAmount;
        }

        // The profit made in the same year on other books will be applied on the adjustment of the acquisition
        // amount of the latest asset books acquired in the same year in the same group
        while select depBookMapLocal
            order by depBookMapLocal.AcquisitionDate desc
            where depBookMapLocal.AssetBookId   == depBookMap.AssetBookId
                && depBookMapLocal.AssetGroup   == depBookMap.AssetGroup
                && depBookMapLocal.AssetStatus  == AssetStatus::Open
                && depBookMapLocal.AcquisitionDate >= firstPeriodStart
                && depBookMapLocal.AcquisitionDate <= firstPeriodEnd
        {
            if (groupProfit <= 0 || depBookMapLocal.AssetId == depBookMap.AssetId)
            {
                break;
            }
            else
            {
                groupProfit -= depBookMapLocal.AcquisitionPrice;
            }
        }

        if (groupProfit > 0 && depBookMapLocal.AssetId == depBookMap.AssetId)
        {
            acquistionAmount -= groupProfit;
            if (acquistionAmount < 0)
            {
                acquistionAmount = 0;
            }
        }

        return acquistionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBonusAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calcuates the bonus amounts for a asset id and dep book id.
    /// </summary>
    protected void calcBonusAmount()
    {
        AssetDepBookBonusMap_IN assetDepBookBonusMap;
        AssetAmount             remainingAvailableForBonusAmount;
        AssetAmount             acquistionAmount;
        AssetAmount             postedBonusAmount;
        AssetAmount             currentBonusAmount;
        Counter                 arrayCount = 1;
        boolean                 isDepBook;
        int                     assetWorkingDays;
        TransDate               transDate;
        TransDate               bounsEndDate;
        AssetAmount             accumulatedBonusAmount;
        AssetAmount             currentBonusAmountTotal;
        AssetAmount             remainingAvailableForBonusBaseAmount;
        AssetAmount             remainingAvailableForDepAmount;
        Percent                 depreciationPercentage;

        totalBonusAmount = 0;

        acquistionAmount  = depBookMap.AssetDepBookMap_IN::acquisitionAmount(dateMax());
        postedBonusAmount = depBookMap.AssetDepBookMap_IN::postedBonusAmount(dateMax());

        remainingAvailableForBonusAmount = acquistionAmount + postedBonusAmount;
        if (remainingAvailableForBonusAmount <= 0)
        {
            return;
        }

        isDepBook = (depBookMap.AssetDepBookMap_IN::assetBookType() == AssetBookType::DepreciationBook);

        // Calc remaining amount for depreciaiton, so that the group net book value will be no less than zero
        remainingAvailableForDepAmount = AssetGroupDepTransMap_IN::netBookValue(depBookMap, dateMax());

        assetWorkingDays = firstPeriodEnd - depBookMap.DepreciationStartDate + 1;
        if (assetWorkingDays > 0)
        {
            if (assetWorkingDays < AssetParameters::find().DepreciationThreshold_IN)
            {
                depreciationPercentage  = AssetParameters::find().ThresholdPercentage_IN / 100;
                if (isUseSpecialDepBalance && secondPeriodEnd)
                {
                    bounsEndDate        = secondPeriodEnd;
                }
                else
                {
                    bounsEndDate        = firstPeriodEnd;
                }
            }
            else
            {
                depreciationPercentage  = 1;
                bounsEndDate            = firstPeriodEnd;
            }
        }

        transDate = bonusTransDate;

        while (transDate <= bounsEndDate)
        {
            // calculate the bonus amount
            remainingAvailableForBonusBaseAmount    = acquistionAmount;
            assetDepBookBonusMap = AssetDepBookBonusMap_IN::getEmptyTableBuffer(depBookMap.AssetDepBookMap_IN::assetBookType());
            while select Amount, Percentage, BonusId from assetDepBookBonusMap
            order by Priority
            where assetDepBookBonusMap.AssetBookId == depBookMap.AssetBookId
                    && ((isDepBook && assetDepBookBonusMap.AssetId == depBookMap.AssetId)
                    || (!isDepBook && assetDepBookBonusMap.AssetGroup == depBookMap.AssetGroup))
            {
                // when remaining reaches zero no additional bonus trans will be generated
                if (remainingAvailableForBonusAmount == 0)
                {
                    break;
                }

                currentBonusAmount = 0.0;

                // check if have and amount of percent
                if (assetDepBookBonusMap.Amount)
                {
                    currentBonusAmount = assetDepBookBonusMap.Amount;
                }
                else if (assetDepBookBonusMap.Percentage)
                {
                    currentBonusAmount = remainingAvailableForBonusBaseAmount * assetDepBookBonusMap.Percentage / 100;
                }

                currentBonusAmountTotal = currentBonusAmount;
                // Post the remaining part if it is in the second year
                if (transDate == secondPeriodEnd)
                {
                    currentBonusAmount  = currentBonusAmountTotal * (1- depreciationPercentage);
                }
                else
                {
                    currentBonusAmount  = currentBonusAmountTotal * depreciationPercentage;
                }

                // take into account current precision and the roundOffDepreciation field
                currentBonusAmount = CurrencyExchangeHelper::amount(currentBonusAmount);
                currentBonusAmount = AssetBookTable::find(assetBook.BookId).roundOffDepreciation(currentBonusAmount);

                if (currentBonusAmount > remainingAvailableForDepAmount - accumulatedBonusAmount)
                {
                    currentBonusAmount = remainingAvailableForDepAmount - accumulatedBonusAmount;
                }

                // bonus can't be greater than remaining acquistion cost
                if (currentBonusAmount > remainingAvailableForBonusAmount
                    && remainingAvailableForBonusAmount > 0)
                {
                    currentBonusAmount = remainingAvailableForBonusAmount;
                }
                if (currentBonusAmount > 0)
                {
                    bonusDateList.value(arrayCount, transDate);
                    accumulatedBonusAmount  += currentBonusAmount;
                    remainingAvailableForBonusBaseAmount -= currentBonusAmountTotal;
                    bonusAmountList.value(arrayCount, currentBonusAmount);
                    bonusNameList.value(arrayCount, assetDepBookBonusMap.BonusId);
                    remainingAvailableForBonusAmount -= currentBonusAmount;
                    totalBonusAmount += currentBonusAmount;
                    arrayCount++;
                }
            }
            // It has to execute the loop for 1st year and it has to break if "isUseSpecialDepreciationBalance" is not marked.
            //And also makes the "transdate"would become empty if no period defined for next fiscal year and outer loop will become infinite.
            if (!isUseSpecialDepBalance)
            {
                break;
            }
            transDate = assetTableInterval.endPeriod(transDate+1);
            if (!transDate)
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBonusTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates special depreciation date in current status.
    /// </summary>
    protected void calcBonusTransDate()
    {
        AssetTransDate      lastBounsDepDate;

        lastBounsDepDate = AssetGroupDepTransMap_IN::findLast(depBookMap, AssetTransType::BonusDepreciation).AssetGroupDepTransMap_IN::assetGroupInformation().TransDate;
        if (lastBounsDepDate != dateNull())
        {
            lastBounsDepDate = assetTableInterval.endPeriod(lastBounsDepDate);
        }

        bonusTransDate = assetTableInterval.endPeriod(max(depreciationStartDate, lastBounsDepDate+1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciationStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates depreciation satrt date.
    /// </summary>
    protected void calcDepreciationStartDate()
    {
        // calculate the transaction date using the depreciationStartDate,
        // if depreciation start date is blank use usedFromDate,
        // if both are blank use the system date
        if (depBookMap.DepreciationStartDate)
        {
            depreciationStartDate = depBookMap.DepreciationStartDate;
        }
        else
        {
            if (depBookMap.UsedFromDate)
            {
                depreciationStartDate = depBookMap.UsedFromDate;
            }
            else
            {
                depreciationStartDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBonusRecord</Name>
				<Source><![CDATA[
    protected boolean checkBonusRecord()
    {
        boolean                     ret = false;
        date                        currentPeriodEnd;
        RefRecId                    fiscalCalendarYearRecId;
        FiscalCalendarYear          fiscalCalendarYear;
        AssetTransDate              sessionDate;

        if (!isSpecialDep_IN
            || depBookMap.AssetStatus != AssetStatus::Open)
        {
            return false;
        }

        sessionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        fiscalCalendarYearRecId = AssetBookTable::find(depBookMap.AssetBookId).getFiscalCalendar();

        fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarYearRecId, sessionDate);

        //If fiscal calendar is not defined, check for previous calendar year.
        if (fiscalCalendarYear.RecId == 0)
        {
            sessionDate  = mkDate(dayOfMth(sessionDate), mthOfYr(sessionDate), year(sessionDate) - 1);
        }

        currentPeriodEnd    = assetTableInterval.endPeriod(sessionDate);

        if (depreciationStartDate > currentPeriodEnd
            || ((firstPeriodEnd != currentPeriodEnd) && ((!secondPeriodEnd) || (secondPeriodEnd && SecondPeriodEnd != currentPeriodEnd)))
            )
        {
            return false;
        }

        // check if the asset bonus records for the asset dep book
        if (this.bonusCount())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object that is used on the special depreciation calculation.
    /// </summary>
    protected void init()
    {
        isUseSpecialDepBalance  = AssetParameters::isUseSpecialDepBalanceEnabled_IN() && depBookMap.AssetGroupDepreciation_IN;
        isSpecialDep_IN         = AssetParameters::isDepreciationIncomeTaxActEnable_IN() && depBookMap.AssetGroupDepreciation_IN;

        assetTableInterval  = AssetTableInterval::construct(depBookMap.depreciationProfile(),
                                                            depBookMap.AssetDepBookMap_IN::calendarRecId());

        this.calcDepreciationStartDate();
        firstPeriodStart    = assetTableInterval.startOfPeriod(depreciationStartDate);
        firstPeriodEnd      = assetTableInterval.endPeriod(depreciationStartDate);
        if (isUseSpecialDepBalance)
        {
            secondPeriodEnd     = assetTableInterval.endPeriod(firstPeriodEnd + 1);
        }

        if (this.checkBonusRecord())
        {
            this.calcBonusTransDate();
            if (bonusTransDate)
            {
                this.calcBonusAmount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the special depreciation is available for the asset book currently.
    /// </summary>
    /// <returns>
    /// True if there is available special depreciation amount to be posted; otherwise false.
    /// </returns>
    public boolean isAvailable()
    {
        return bonusAmountList.lastIndex() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(AssetDepBookMap_IN _depBookMap)
    {
        super();

        depBookMap      = _depBookMap;
        bonusAmountList = new Array(Types::Real);
        bonusNameList   = new Array(Types::String);
        bonusDateList   = new Array(Types::Date);

        this.init();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>