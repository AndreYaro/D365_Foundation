<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOneTimeImportValidation_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Validates each row of the import file.
/// </summary>
public class VendOneTimeImportValidation_PSN
{
    #VendOneTimeVendorDataLabel_PSN

    #DEFINE.ErrMessageRequiredType('@SYP4950208')
    #DEFINE.ErrMessageTooLongString('@SYP4950213')
    #DEFINE.ErrMessageInvalidValue('@SYS137754')
    #DEFINE.OrganizationTypeIdentifer('Org')
    #DEFINE.PersonTypeIdentifier('Person')

    const str ErrMessageInvalidBudgetReservation = '@Budgeting_BudgetReservationPS:VendOneTimeImportValidationClassFileReferencesGBRError';

    int firstNameLength;
    int lastNameLength;
    int middleNameLength;
    int organizationNameLength;
    int groupIdLength;
    int countryRegionIDLength;
    int zipCodeLength;
    int streetLength;
    int cityLength;
    int federalTaxIdLength;
    int vendBankAccountLength;
    int vendBankRoutingNumberLength;
    int vendBankAccountNumberLength;
    int vendBankSWIFTCodeLength;
    int vendBankIBANLength;
    int vendInvoiceNumberLength;
    int vendInvoiceDescriptionLength;
    int vendItemNumberLength;
    int vendItemNameLength;
    int procurementCategoryLength;
    int unitLength;
    int budgetReservationDocumentNumberLength;

    Map  errorMessages;
    Map  validatePercent;
    Map  contractNumberForInvoiceLine;
    List validRecordList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dateTypeValidation</Name>
				<Source><![CDATA[
    private boolean dateTypeValidation(str _dateToConvert)
    {
        return str2date(_dateToConvert, 213) != Global::DateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLengthValidation</Name>
				<Source><![CDATA[
    private boolean fieldLengthValidation(str _fieldValue, int _fieldLength )
    {
        return strLen(_fieldValue) <= _fieldLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountStructureRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets account structure <c>RecId</c>.
    /// </summary>
    /// <param name="_accountStructureName">
    /// Selected account structure name for ledger account.
    /// </param>
    /// <returns>
    /// Returns account structure Id.
    /// </returns>
    private DimensionHierarchyId getAccountStructureRecId(Name _accountStructureName)
    {
        DimensionHierarchy dimensionHierarchy;

        select firstonly RecId from dimensionHierarchy
            where dimensionHierarchy.Name == _accountStructureName;

        return dimensionHierarchy.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>DimensionAttributeValue</c> of the dimension hierarchy.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// RecId for the selected dimension hierarchy.
    /// </param>
    /// <param name="level">
    /// Segment value for the dimension hierarchy.
    /// </param>
    /// <returns>
    /// Gets <c>DimensionAttributeValue</c> of the dimension hierarchy.
    /// </returns>
    private RecId getDimensionAttribute(RecId _dimensionHierarchy, int level)
    {
        DimensionHierarchyLevel dimensionHierarchyLevel;

        select firstOnly DimensionAttribute from dimensionHierarchyLevel
            where dimensionHierarchyLevel.DimensionHierarchy == _dimensionHierarchy
                && dimensionHierarchyLevel.Level == level;

        return dimensionHierarchyLevel.DimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits string into list.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// String <c>DimensionDisplayValue</c> to be splitted.
    /// </param>
    /// <returns>
    /// List of split stirngs.
    /// </returns>
    private List getSplitList(DimensionDisplayValue _ledgerDimension)
    {
        List ledgerDimensionList;
        ledgerDimensionList = new List(Types::String);

        if (strContains(_ledgerDimension, '-'))
        {
            ledgerDimensionList = strSplit(_ledgerDimension, '-');
        }
        else
        {
            ledgerDimensionList = strSplit(_ledgerDimension, '.');
        }

        return ledgerDimensionList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStringLength</Name>
				<Source><![CDATA[
    private int getStringLength(str _extendedDataTypeName)
    {
        #AOT
        #Properties
        #VendOneTimeVendorInvoiceFileColumns_PSN

        return TreeNode::findNode(#ExtendedDataTypesPath + #AOTDelimiter + _extendedDataTypeName).AOTgetProperty(#PropertyStringSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidatedLedgerDimensionAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates <c>LedgerDimension</c> account.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// Record buffer for <c>DimensionHierarchy</c>.
    /// </param>
    /// <param name="_ledgerDimension">
    /// Record buffer for <c>DimensionDisplayValue</c>.
    /// </param>
    /// <returns>
    /// Returns recid of <c>DimensionAttributeValueCombination</c>.
    /// </returns>
    private LedgerDimensionAccount getValidatedLedgerDimensionAccount(DimensionHierarchyId _dimensionHierarchy, Map _dimensionMap)
    {
        boolean                         isValidated;
        MapIterator                     mapIterator = new MapIterator(_dimensionMap);
        RecId                           ledgerDimensionRecId;
        DimensionAttribute              dimensionAttribute;
        DimensionAttributeValue         dimensionAttributeValue;
        LedgerAccountContract           ledgerAccountContract;
        DimensionAttributeValueContract dimensionAttributeValueContract;
        List                            dimensionNameValues;
        DimensionStorage                dimensionStorage;
        DimensionValidationStatus       dimensionValidationStatus;

        dimensionNameValues   = new List(Types::Class);
        ledgerAccountContract = new LedgerAccountContract();
        ledgerAccountContract.parmValues(dimensionNameValues);

        isValidated = true;

        while (mapIterator.more())
        {
            if (mapIterator.value())
            {
                dimensionAttribute      = dimensionAttribute::find(mapIterator.key());
                dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute, mapIterator.value(), false, false);

                if (dimensionAttributeValue)
                {
                    if (dimensionAttribute.Type == DimensionAttributeType::MainAccount)
                    {
                        ledgerAccountContract.parmMainAccount(mapIterator.value());
                    }

                    dimensionAttributeValueContract = new DimensionAttributeValueContract();
                    dimensionAttributeValueContract.parmName(dimensionAttribute.Name);
                    dimensionAttributeValueContract.parmValue(mapIterator.value());
                    dimensionNameValues.addEnd(dimensionAttributeValueContract);

                    mapIterator.next();
                }
                else
                {
                    isValidated = false;
                    break;
                }
            }
            else
            {
                mapIterator.next();
            }
        }

        if (isValidated && ledgerAccountContract.parmMainAccount())
        {
            dimensionStorage = DimensionServiceProvider::buildDimensionStorageForLedgerAccount(ledgerAccountContract);

            if (dimensionStorage.getHierarchyId(1) == _dimensionHierarchy)
            {
                DimensionValidationRequest        dimensionValidationRequest;
                DimensionValidationStatusContract dimensionValidationStatusContract;

                dimensionValidationRequest        = DimensionValidationRequest::newForDimensionStorage(dimensionStorage);
                dimensionValidationStatusContract = DimensionValidation::getStatus(dimensionValidationRequest);

                if (dimensionValidationStatusContract.isValid())
                {
                    ledgerDimensionRecId = dimensionStorage.save();
                }
            }
        }

        return ledgerDimensionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidImportData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List getValidImportData()
    {
        return validRecordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeColumnNameLengthLimit</Name>
				<Source><![CDATA[
    private void initializeColumnNameLengthLimit()
    {
        #VendOneTimeVendorInvoiceFileColumns_PSN

        firstNameLength              = this.getStringLength(#FirstName);
        lastNameLength               = this.getStringLength(#LastName);
        middleNameLength             = this.getStringLength(#MiddleName);
        organizationNameLength       = this.getStringLength(#OrganizationName);
        groupIdLength                = this.getStringLength(#VendGroupId);
        countryRegionIDLength        = this.getStringLength(#CountryRegion);
        zipCodeLength                = this.getStringLength(#ZipCode);
        streetLength                 = this.getStringLength(#Street);
        cityLength                   = this.getStringLength(#City);
        federalTaxIdLength           = this.getStringLength(#FederalTaxId);
        vendBankAccountLength        = this.getStringLength(#BankAccount);
        vendBankRoutingNumberLength  = this.getStringLength(#RoutingNumber);
        vendBankAccountNumberLength  = this.getStringLength(#BankAccountNumber);
        vendBankSWIFTCodeLength      = this.getStringLength(#SWIFTNumber);
        vendBankIBANLength           = this.getStringLength(#BankIBAN);
        vendInvoiceNumberLength      = this.getStringLength(#InvoiceNumber);
        vendInvoiceDescriptionLength = this.getStringLength(#InvoiceDescription);
        vendItemNumberLength         = this.getStringLength(#ItemNumber);
        vendItemNameLength           = this.getStringLength(#ItemName);
        procurementCategoryLength    = this.getStringLength(#ProcurementCategory);
        unitLength                   = this.getStringLength(#Unit);
        budgetReservationDocumentNumberLength = this.getStringLength(#BudgetReservationDocumentNumber);

    }

]]></Source>
			</Method>
			<Method>
				<Name>int64TypeValidation</Name>
				<Source><![CDATA[
    private boolean int64TypeValidation(str _intToConvert)
    {
        int64   bigInt;
        boolean isValid = false;

        if (str2IntOk(_intToConvert))
        {
            bigInt = str2int64(_intToConvert);

            if (_intToConvert == int642str(bigInt))
            {
                isValid = true;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>realTypeValidation</Name>
				<Source><![CDATA[
    private boolean realTypeValidation(str _realToConvert)
    {
        real realNumber;
        boolean isValid = false;

        if (str2NumOk(_realToConvert))
        {
            realNumber = str2num(_realToConvert);

            if (realNumber <= RealMax() && realNumber >= realMin())
            {
                isValid = true;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateColumn</Name>
				<Source><![CDATA[
    private boolean validateDateColumn(int _rowNumber, str _validateThis, str _columnName)
    {
        boolean isValid = True;

        if (_validateThis && !this.dateTypeValidation(_validateThis))
        {
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageInvalidValue, _columnName));
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDistributionSection</Name>
				<Source><![CDATA[
    private boolean validateDistributionSection(VendOneTimeVendStagingDataContract_PSN _oneTimeVendImportRecords, int _rowNumber, Name _accountStructure)
    {
        boolean                isValid = true;
        str                    keyForValidatePercent;
        real                   newPercent;
        container              contractRows;
        str                    recordType;
        str                    firstName;
        str                    middleName;
        str                    lastName;
        str                    organizationName;
        str                    invoiceNumber;
        str                    lineNumber;
        str                    accountingDistributionLineNumber;
        str                    distributionPercent;
        DimensionHierarchyId   dimensionHierarchyId;
        LedgerDimensionAccount ledgerDimensionAccount;
        Map                    dimensionAttributeValuePair;

        recordType                       = _oneTimeVendImportRecords.parmVendRecordType();
        firstName                        = _oneTimeVendImportRecords.parmPersonFirstName();
        MiddleName                       = _oneTimeVendImportRecords.parmPersonMiddleName();
        lastName                         = _oneTimeVendImportRecords.parmPersonLastName();
        organizationName                 = _oneTimeVendImportRecords.parmOrganizationName();
        invoiceNumber                    = _oneTimeVendImportRecords.parmInvoiceNumber();
        lineNumber                       = _oneTimeVendImportRecords.parmLineNumber();
        accountingDistributionLineNumber = _oneTimeVendImportRecords.parmAccountingDistributionLineNumber();
        distributionPercent              = _oneTimeVendImportRecords.parmPercent();
        dimensionHierarchyId             = this.getAccountStructureRecId(_accountStructure);
        dimensionAttributeValuePair      = Map::create(_oneTimeVendImportRecords.parmDimensionAttributeValuePair());

        if (!_oneTimeVendImportRecords.parmBudgetReservationLineNumber() || !PublicSectorUtils::isBudgetReservationEnabled())
        {
            // Validate LedgerDimension
            if (!dimensionAttributeValuePair.elements())
            {
                // vendor record type is invalid
                errorMessages.insert(_rowNumber, strFmt(#ErrMessageInvalidValue, #LedgerAccount));
                isValid = false;
            }
            else
            {
                ledgerDimensionAccount = this.getValidatedLedgerDimensionAccount(dimensionHierarchyId, dimensionAttributeValuePair);

                if (!ledgerDimensionAccount)
                {
                    // vendor record type is invalid
                    errorMessages.insert(_rowNumber, strFmt(#ErrMessageInvalidValue, #LedgerAccount));
                    isValid = false;
                }
                else
                {
                    _oneTimeVendImportRecords.parmLedgerDimensionAccount(ledgerDimensionAccount);
                }
            }

            // Validate Accounting distribution line number
            if (isValid && (!this.validateRequiredRealColumn(_rowNumber, accountingDistributionLineNumber, #AccountingDistributionLineNumber)))
            {
                isValid = false;
            }
            else if (distributionPercent)
            {
                if (!this.realTypeValidation(distributionPercent))
                {
                    errorMessages.insert(_rowNumber, strFmt(#ErrMessageInvalidValue, #Percent));
                    isValid = false;
                }
                else
                {
                    if (recordType == enum2str(DirPartyBaseType::Organization))
                    {
                        keyForValidatePercent = #OrganizationTypeIdentifer + organizationName + invoiceNumber + lineNumber;
                    }
                    else
                    {
                        keyForValidatePercent = #PersonTypeIdentifier + firstName + middleName + lastName + invoiceNumber + lineNumber;
                    }

                    if (validatePercent.exists(keyForValidatePercent))
                    {
                        newPercent = validatePercent.lookup(keyForValidatePercent) + str2num(distributionPercent);
                        validatePercent.insert(keyForValidatePercent, newPercent);
                    }
                    else
                    {
                        validatePercent.insert(keyForValidatePercent, str2num(distributionPercent));
                    }

                    if (contractNumberForInvoiceLine.exists(keyForValidatePercent))
                    {
                        contractRows = contractNumberForInvoiceLine.lookup(keyForValidatePercent);
                        contractRows += [_rowNumber];
                        contractNumberForInvoiceLine.insert(keyForValidatePercent, contractRows);
                    }
                    else
                    {
                        contractRows = [_rowNumber];
                        contractNumberForInvoiceLine.insert(keyForValidatePercent, contractRows);
                    }
                }
            }
            else
            {
                // percent is required
                errorMessages.insert(_rowNumber, strFmt(#ErrMessageRequiredType, #Percent));
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateImportFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates each row of the imported file.
    /// </summary>
    /// <param name="_oneTimeVendImportRecordsList">
    /// List of <c>VendOneTimeVendStagingDataContract_PSN</c>.
    /// </param>
    /// <param name="_accountStructure">
    /// Account structure.
    /// </param>
    /// <returns>
    /// Returns each row which error messages.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map validateImportFields(List _oneTimeVendImportRecordsList, Name _accountStructure)
    {
        VendOneTimeVendStagingDataContract_PSN oneTimeVendImportRecords;

        container              errorRows;
        ListEnumerator         recordsEnumerator;
        MapEnumerator          percentEnumerator;

        int rowNumber;
        int indexOfContainerForErrors;

        errorMessages                    = new Map(Types::Integer, Types::String);
        validatePercent                  = new Map(Types::String, Types::Real);
        contractNumberForInvoiceLine     = new Map(Types::String, Types::Container);
        rowNumber                        = 0;
        indexOfContainerForErrors        = 1;

        this.initializeColumnNameLengthLimit();
        recordsEnumerator    = _oneTimeVendImportRecordsList.getEnumerator();
        validRecordList      = new List(Types::Class);
        recordsEnumerator.reset();

        while (recordsEnumerator.moveNext())
        {
            rowNumber++;
            oneTimeVendImportRecords = recordsEnumerator.current();

            if (!this.validateVendorSection(oneTimeVendImportRecords, rowNumber))
            {
                continue;
            }

            if (!this.validateInvoiceSection(oneTimeVendImportRecords, rowNumber))
            {
                continue;
            }

            if (!this.validateDistributionSection(oneTimeVendImportRecords, rowNumber, _accountStructure))
            {
                continue;
            }

            validRecordList.addEnd(oneTimeVendImportRecords);
        }

        percentEnumerator = validatePercent.getEnumerator();

        while (percentEnumerator.moveNext())
        {
            if (percentEnumerator.currentValue() != 100)
            {
                errorRows = contractNumberForInvoiceLine.lookup(percentEnumerator.currentKey());

                while (indexOfContainerForErrors <= conLen(errorRows))
                {
                    errorMessages.insert(conpeek(errorRows, indexOfContainerForErrors), strFmt(#ErrMessageInvalidValue, #Percent));
                    indexOfContainerForErrors = indexOfContainerForErrors + 1;
                }
            }
        }

        return errorMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInt64Column</Name>
				<Source><![CDATA[
    private boolean validateInt64Column(int _rowNumber, str _validateThis, str _columnName)
    {
        boolean isValid = True;

        if (_validateThis && !this.int64TypeValidation(_validateThis))
        {
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageInvalidValue, _columnName));
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceSection</Name>
				<Source><![CDATA[
    private boolean validateInvoiceSection(VendOneTimeVendStagingDataContract_PSN _oneTimeVendImportRecords, int _rowNumber)
    {
        boolean isValid = true;

        str invoiceNumber;
        str invoiceDescription;
        str postingDate;
        str invoiceDate;
        str dueDate;
        str lineNumber;
        str itemNumber;
        str itemName;
        str procurementCategory;
        str procurementCategoryHierarchy;
        str quantity;
        str unit;
        str unitPrice;
        str lineNetAmount;

        invoiceNumber                = _oneTimeVendImportRecords.parmInvoiceNumber();
        invoiceDescription           = _oneTimeVendImportRecords.parmInvoiceDescription();
        postingDate                  = _oneTimeVendImportRecords.parmPostingDate();
        invoiceDate                  = _oneTimeVendImportRecords.parmInvoiceDate();
        dueDate                      = _oneTimeVendImportRecords.parmDueDate();
        lineNumber                   = _oneTimeVendImportRecords.parmLineNumber();
        itemNumber                   = _oneTimeVendImportRecords.parmItemNumber();
        itemName                     = _oneTimeVendImportRecords.parmItemName();
        procurementCategory          = _oneTimeVendImportRecords.parmProcurementCategory();
        quantity                     = _oneTimeVendImportRecords.parmQuantity();
        unit                         = _oneTimeVendImportRecords.parmUnit();
        unitPrice                    = _oneTimeVendImportRecords.parmUnitPrice();
        lineNetAmount                = _oneTimeVendImportRecords.parmLineAmount();
        procurementCategoryHierarchy = _oneTimeVendImportRecords.parmProcurementCategoryHierarchy();
        str budgetReservationLineNumber  = _oneTimeVendImportRecords.parmBudgetReservationLineNumber();
        str budgetReservationDocumentNumber = _oneTimeVendImportRecords.parmBudgetReservationDocumentNumber();

        // Require unit price and quanity but no net amount
        if (!lineNetAmount && (!this.validateRequiredRealColumn(_rowNumber, unitPrice, #UnitPrice, false)
            || !this.validateRequiredRealColumn(_rowNumber, quantity, #Quantity)))
        {
            isValid = false;
        }
        // Require net amount if unit price or quanity are not set
        else if (!(unitPrice && quantity) && !this.validateRequiredRealColumn(_rowNumber, lineNetAmount, #LineAmount))
        {
            isValid = false;
        }

        if (!this.validateRequiredStringColumn(_rowNumber, invoiceNumber, #InvoiceNumber, vendInvoiceNumberLength)
            || !this.validateStringColumn(_rowNumber, invoiceDescription, #InvoiceDescription, vendInvoiceDescriptionLength)
            || !this.validateDateColumn(_rowNumber, postingDate, #PostingDate)
            || !this.validateRequiredDateColumn(_rowNumber, invoiceDate, #InvoiceDate)
            || !this.validateDateColumn(_rowNumber, dueDate, #DueDate)
            || !this.validateRequiredRealColumn(_rowNumber, lineNumber, #LineNumber)
            || !this.validateStringColumn(_rowNumber, itemName, #ItemName, vendItemNameLength)
            || !this.validateRealColumn(_rowNumber, quantity, #Quantity)
            || !this.validateStringColumn(_rowNumber, unit, #Unit, unitLength)
            || !this.validateRealColumn(_rowNumber, unitPrice, #UnitPrice)
            || ((budgetReservationDocumentNumber != '') && !this.validateStringColumn(_rowNumber, budgetReservationDocumentNumber, #BudgetReservationDocumentNumber, budgetReservationDocumentNumberLength))
            || ((budgetReservationLineNumber != '') && !this.validateInt64Column(_rowNumber, budgetReservationLineNumber, #BudgetReservationLineNumber))
            || !this.validateRealColumn(_rowNumber, lineNetAmount, #LineAmount))
        {
            isValid = false;
        }
        else if (budgetReservationDocumentNumber || budgetReservationLineNumber && !PublicSectorUtils::isBudgetReservationEnabled())
        {
            // If budget reservation is not enabled, budget reservation data cannot be present.
            errorMessages.insert(_rowNumber, ErrMessageInvalidBudgetReservation);
            isValid = false;
        }
        else if (budgetReservationDocumentNumber && !budgetReservationLineNumber)
        {
            // If budget reservation document number is present, line number is required.
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageRequiredType, #BudgetReservationLineNumber));
            isValid = false;
        }
        else if (!budgetReservationDocumentNumber && budgetReservationLineNumber)
        {
            // If budget reservation line number is present, document number is required.
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageRequiredType, #BudgetReservationDocumentNumber));
            isValid = false;
        }
        else if (!procurementCategory && !itemNumber)
        {
            // Either procurement category or item number is required.
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageRequiredType, #ItemNumber));
            isValid = false;
        }
        else if (procurementCategory && !itemNumber && !procurementCategoryHierarchy)
        {
            // Procurement category hierarchy is required if item number is not present.
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageRequiredType, #ProcurmentCategoryHierarchy));
            isValid = false;
        }
        else if ((procurementCategory && !itemNumber && procurementCategoryHierarchy) && !this.validateProcurementCategory(procurementCategoryHierarchy, procurementCategory))
        {
            // Validate procurement category exits for the procurement category hierarchy.
            errorMessages.insert(_rowNumber, strFmt("@SYP4860866", procurementCategory, procurementCategoryHierarchy));
            isValid = false;
        }
        else if (!this.validateStringColumn(_rowNumber, itemNumber, #ItemNumber, vendItemNumberLength)
            || !this.validateStringColumn(_rowNumber, procurementCategory, #ProcurementCategory, procurementCategoryLength))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcurementCategory</Name>
				<Source><![CDATA[
    private boolean validateProcurementCategory(EcoResCategoryHierarchyName _ecoResCategoryHierarchyName, EcoResCategoryName _ecoResCategoryName)
    {
        boolean isValid;

        isValid = EcoResCategory::existByName(_ecoResCategoryName, EcoResCategoryHierarchy::findByName(_ecoResCategoryHierarchyName).RecId);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRealColumn</Name>
				<Source><![CDATA[
    private boolean validateRealColumn(int _rowNumber, str _validateThis, str _columnName)
    {
        boolean isValid = True;

        if (_validateThis && !this.realTypeValidation(_validateThis))
        {
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageInvalidValue, _columnName));
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequiredDateColumn</Name>
				<Source><![CDATA[
    private boolean validateRequiredDateColumn(int _rowNumber, str _validateThis, str _columnName)
    {
        boolean isValid = true;

        if (_validateThis)
        {
            if (!this.dateTypeValidation(_validateThis))
            {
                errorMessages.insert(_rowNumber, strFmt(#ErrMessageInvalidValue, _columnName));
                isValid = false;
            }
        }
        else
        {
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageRequiredType, _columnName));
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequiredRealColumn</Name>
				<Source><![CDATA[
    private boolean validateRequiredRealColumn(int _rowNumber, str _validateThis, str _columnName, boolean _allowZero = true)
    {
        boolean isValid = true;

        if (_validateThis)
        {
            if (!this.realTypeValidation(_validateThis) || (!_allowZero && str2num(_validateThis) == 0))
            {
                errorMessages.insert(_rowNumber, strFmt(#ErrMessageInvalidValue, _columnName));
                isValid = false;
            }
        }
        else
        {
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageRequiredType, _columnName));
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequiredStringColumn</Name>
				<Source><![CDATA[
    private boolean validateRequiredStringColumn(int _rowNumber, str _validateThis, str _columnName, int _maxAllowedLength)
    {
        boolean isValid = true;;

        if (_validateThis)
        {
            if (!this.fieldLengthValidation(_validateThis, _maxAllowedLength))
            {
                errorMessages.insert(_rowNumber, strFmt(#ErrMessageTooLongString, _columnName));
                isValid = false;
            }
        }
        else
        {
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageRequiredType, _columnName));
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStringColumn</Name>
				<Source><![CDATA[
    private boolean validateStringColumn(int _rowNumber, str _validateThis, str _columnName, int _maxAllowedLength)
    {
        boolean isValid = True;

        if (_validateThis && !this.fieldLengthValidation(_validateThis, _maxAllowedLength))
        {
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageTooLongString, _columnName));
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendorSection</Name>
				<Source><![CDATA[
    private boolean validateVendorSection(VendOneTimeVendStagingDataContract_PSN _oneTimeVendImportRecords, int _rowNumber)
    {
        boolean isValid = true;

        str recordType;
        str firstName;
        str middleName;
        str lastName;
        str organizationName;
        str groupId;
        str countryRegion;
        str zipCode;
        str street;
        str city;
        str federalTaxId;
        str taxIdType;
        str bankAccount;
        str routingNumber;
        str bankAccountNumber;
        str swiftCode;
        str iban;

        recordType        = _oneTimeVendImportRecords.parmVendRecordType();
        firstName         = _oneTimeVendImportRecords.parmPersonFirstName();
        MiddleName        = _oneTimeVendImportRecords.parmPersonMiddleName();
        lastName          = _oneTimeVendImportRecords.parmPersonLastName();
        organizationName  = _oneTimeVendImportRecords.parmOrganizationName();
        groupId           = _oneTimeVendImportRecords.parmVendGroupId();
        countryRegion     = _oneTimeVendImportRecords.parmCountryRegionId();
        zipCode           = _oneTimeVendImportRecords.parmZipCode();
        street            = _oneTimeVendImportRecords.parmStreet();
        city              = _oneTimeVendImportRecords.parmCity();
        federalTaxId      = _oneTimeVendImportRecords.parmTax1099RegNum();
        taxIdType         = _oneTimeVendImportRecords.parmTaxIDType();
        bankAccount       = _oneTimeVendImportRecords.parmBankAccountId();
        routingNumber     = _oneTimeVendImportRecords.parmBankRoutingNumber();
        bankAccountNumber = _oneTimeVendImportRecords.parmBankAccountNumber();
        swiftCode         = _oneTimeVendImportRecords.parmBankSWIFTNumber();
        iban              = _oneTimeVendImportRecords.parmBankIBAN();

        if (!recordType || ((recordType != enum2str(DirPartyBaseType::Organization)
                && recordType != enum2str(DirPartyBaseType::Person))))
        {
            // vendor record type is invalid
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageInvalidValue, #RecordType));
            isValid = false;
        }
        else if (recordType == enum2str(DirPartyBaseType::Person))
        {
            if (!firstName && !middleName && !lastName)
            {
                // name is required
                errorMessages.insert(_rowNumber, strFmt(#ErrMessageRequiredType, #Firstname));
                isValid = false;
            }
            else if (!this.validateStringColumn(_rowNumber, firstName, #Firstname, firstNameLength))
            {
                // First name exceeds length
                isValid = false;
            }
            else if (!this.validateStringColumn(_rowNumber, middleName, #middleName, middleNameLength))
            {
                // Middle name exceeds length
                isValid = false;
            }
            else if (!this.validateStringColumn(_rowNumber, lastName, #lastName, lastNameLength))
            {
                // Last name exceeds length
                isValid = false;
            }
        }

        if (isValid && (recordType == enum2str(DirPartyBaseType::Organization)))
        {
            if (!this.validateRequiredStringColumn(_rowNumber, organizationName, #organizationName, organizationNameLength))
            {
                isValid = false;
            }
        }

        if (isValid && (!this.validateStringColumn(_rowNumber, groupId, #VendorGroup, groupIdLength)
            || !this.validateRequiredStringColumn(_rowNumber, countryRegion, #CountryRegion, countryRegionIDLength)
            || !this.validateRequiredStringColumn(_rowNumber, zipCode, #ZipCode, zipCodeLength)
            || !this.validateRequiredStringColumn(_rowNumber, street, #Street, streetLength)
            || !this.validateRequiredStringColumn(_rowNumber, city, #City, cityLength)
            || !this.validateStringColumn(_rowNumber, federalTaxId, #FederalTaxID, federalTaxIdLength)
            || !this.validateStringColumn(_rowNumber, bankAccount, #BankAccount, vendBankAccountLength)
            || !this.validateStringColumn(_rowNumber, routingNumber, #RoutingNumber, vendBankRoutingNumberLength)
            || !this.validateStringColumn(_rowNumber, bankAccountNumber, #BankAccountNumber, vendBankAccountNumberLength)
            || !this.validateStringColumn(_rowNumber, swiftCode, #SWIFTCode, vendBankSWIFTCodeLength)
            || !this.validateStringColumn(_rowNumber, iban, #IBAN, vendBankIBANLength)))
        {
            isValid = false;
        }

        // Validate Federal taxIdType
        if (isValid && taxIdType != enum2str(TaxIDType::Unknown)
            && taxIdType != enum2str(TaxIDType::ATIN)
            && taxIdType != enum2str(TaxIDType::EIN)
            && taxIdType != enum2str(TaxIDType::ITIN)
            && taxIdType != enum2str(TaxIDType::SSN))
        {
            // error vendor Tax id type is invalid
            errorMessages.insert(_rowNumber, strFmt(#ErrMessageInvalidValue, #FederalTaxIDType));
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>