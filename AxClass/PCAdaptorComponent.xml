<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcAdaptorComponent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Adaptor for the component concept.
/// </summary>
class PcAdaptorComponent
{
    PCClass             component;
    PCComponentInstance componentInstance;

    Map                 attributeMap;
    Map                 routeOperationMap;
    Map                 bomLineMap;
    Map                 subComponentMap;

    PCConfigurationReuseCodeBuilder     reuseCodeBuilder;
    PCConfigurationReuseManager         configurationReuseManager;
    InventDim                           reusableInventDim;
    boolean                             isConfigurationResuable;
    boolean                             createNewReuseEntry;

    PCVariantConfiguration variantConfiguration;
    InventDim              supplyInventDim;
    InventDim              demandInventDim;

    private LanguageId     languageId;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign value to attribute.
    /// </summary>
    /// <param name = "_componentPath">Component path.</param>
    /// <param name = "_attributeName">Attribute solver name.</param>
    /// <param name = "_value">String value.</param>
    public void assignAttribute(container _componentPath, PCSolverName _attributeName, str _value)
    {
        PCAdaptorComponent adaptorComponent = this;

        for (var i = 1; i <= conLen(_componentPath); i++)
        {
            str componentName = conPeek(_componentPath, i);
            if (componentName != '')
            {
                adaptorComponent = adaptorComponent.getSubComponent(componentName);
            }
        }

        adaptorComponent.getAttribute(_attributeName).assignValue(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a <c>PCAdaptorVisitor</c> class and passes it on to its sub-elements.
    /// </summary>
    /// <param name="_visitor">
    /// An instance of the <c>PCAdaptorVisitor</c> class.
    /// </param>
    public void accept(PCAdaptorVisitor _visitor)
    {
        _visitor.visitComponentStart(this);

        this.acceptAttributes(_visitor);

        this.acceptSubComponents(_visitor);

        _visitor.visitComponentEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts the attributes defined on the component.
    /// </summary>
    /// <param name = "_visitor">A visitor.</param>
    protected void acceptAttributes(PCAdaptorVisitor _visitor)
    {
        if (_visitor.parmVisitAttributes())
        {
            MapEnumerator meAttributes = this.getAttributeEnumerator();
            while (meAttributes.moveNext())
            {
                PCAdaptorAttribute attribute = meAttributes.currentValue();
                attribute.accept(_visitor);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptSubComponents</Name>
				<Source><![CDATA[
    protected void acceptSubComponents(PCAdaptorVisitor _visitor)
    {
        MapEnumerator           meSubComponents = this.getSubComponentEnumerator();
        PCAdaptorSubComponent   subComponent;

        // visit sub components
        while (meSubComponents.moveNext())
        {
            subComponent = meSubComponents.currentValue();
            subComponent.accept(_visitor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an attribute to the component.
    /// </summary>
    /// <param name="_categoryAttribute">
    /// A category attribute.
    /// </param>
    /// <returns>
    /// An instance of the <c>PCAdaptorAttribute</c> class.
    /// </returns>
    public PCAdaptorAttribute addAttribute(EcoResCategoryAttribute _categoryAttribute)
    {
        PCAdaptorAttribute adaptorAttribute = PCAdaptorAttribute::construct(_categoryAttribute);

        attributeMap.insert(adaptorAttribute.getName(), adaptorAttribute);

        return adaptorAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBOMLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a bom line to the component.
    /// </summary>
    /// <param name="_adaptorBOMLine">
    /// An instance of the <c>PCAdaptorTemplateComponent</c> class.
    /// </param>
    public void addBOMLine(PCAdaptorBOMLine _adaptorBOMLine)
    {
        bomLineMap.insert(_adaptorBOMLine.getName(), _adaptorBOMLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRouteOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a route operation to the component.
    /// </summary>
    /// <param name="_adaptorRouteOperation">
    /// An instance of the <c>PCAdaptorTemplateComponent</c> class.
    /// </param>
    public void addRouteOperation(PCAdaptorRouteOperation _adaptorRouteOperation)
    {
        routeOperationMap.insert(_adaptorRouteOperation.getName(), _adaptorRouteOperation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSubComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a sub-component to the component.
    /// </summary>
    /// <param name="_adaptorSubComponent">
    /// An instance of the <c>PCAdaptorSubComponent</c> class.
    /// </param>
    public void addSubComponent(PCAdaptorSubComponent _adaptorSubComponent)
    {
        subComponentMap.insert(_adaptorSubComponent.getName(), _adaptorSubComponent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReuseConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates configuration reuse data.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID associated with the component.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension ID associated with the component.
    /// </param>
    public void createReuseConfiguration(ItemId _itemId, InventDimId _inventDimId)
    {
        if (this.parmCreateNewReuseEntry())
        {
            configurationReuseManager.createReusableConfiguration(_itemId, _inventDimId, component.RecId, reuseCodeBuilder.getHashValue(), reuseCodeBuilder.getValueString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an attribute given the name of the attribute.
    /// </summary>
    /// <param name="_solverVariableName">
    /// An attribute solver name.
    /// </param>
    /// <returns>
    /// An attribute that has the specified name.
    /// </returns>
    public PCAdaptorAttribute getAttribute(PCSolverName _solverVariableName)
    {
        PCAdaptorAttribute ret;

        ret = attributeMap.lookup(_solverVariableName);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enumerator for the attributes.
    /// </summary>
    /// <returns>
    /// A map enumerator.
    /// </returns>
    public MapEnumerator getAttributeEnumerator()
    {
        return attributeMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLanguageId</Name>
				<Source><![CDATA[
    internal void setLanguageId(LanguageId _languageId)
    {
        languageId = _languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a bill of material adapter instance given its name.
    /// </summary>
    /// <param name="_bomLineName">
    /// The name of the bill of material.
    /// </param>
    /// <returns>
    /// An instance of the <c>PCAdaptorBOMLine</c> class.
    /// </returns>
    public PCAdaptorBOMLine getBOMLine(Name _bomLineName)
    {
        PCAdaptorBOMLine ret;

        ret = bomLineMap.lookup(_bomLineName);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMLineEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enumerator for the BOM lines.
    /// </summary>
    /// <returns>
    /// A map enumerator.
    /// </returns>
    public MapEnumerator getBOMLineEnumerator()
    {
        return bomLineMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a component record.
    /// </summary>
    /// <returns>
    /// A component record.
    /// </returns>
    public PCClass getComponent()
    {
        return component;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComponentInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a component instance.
    /// </summary>
    /// <returns>
    /// A component instance.
    /// </returns>
    public PCComponentInstance getComponentInstance()
    {
        return componentInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the adapter component.
    /// </summary>
    /// <returns>
    /// The ID of an adapter component.
    /// </returns>
    public int64 getID()
    {
        return this.getComponent().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizedName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized name of a component.
    /// </summary>
    /// <returns>
    /// A component name that is localized.
    /// </returns>
    public PCName getLocalizedName()
    {
        LanguageId nameLanguageId = languageId ? languageId : LanguageTable::defaultLanguage();

        PCName localizedName = EcoResCategoryTranslation::findByCategoryAndLanguage(component.RecId, nameLanguageId).FriendlyName;

        return localizedName == '' ? this.getName() : localizedName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of a component.
    /// </summary>
    /// <returns>
    /// The component name.
    /// </returns>
    public PCName getName()
    {
        return component.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReusableInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets inventory dimension for configuration reuse.
    /// </summary>
    /// <returns>
    /// An inventory dimension.
    /// </returns>
    public InventDimId getReusableInventDimId()
    {
        return reusableInventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReuseCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the configuration reuse code for the component.
    /// </summary>
    /// <returns>
    /// The configuration reuse code for the component.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///  The component is not enabled for configuration reuse.
    /// </exception>
    public PCConfigurationReuseCode getReuseCode()
    {
        PCConfigurationReuseCode configurationReuseCode;

        if (component.ReuseEnabled)
        {
            configurationReuseCode = reuseCodeBuilder.getHashValue();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        return configurationReuseCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReuseValuesAsString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the configuration reuse vales as a string for the component.
    /// </summary>
    /// <returns>
    /// The configuration reuse values as a string.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// Throws an error if the component is not enabled for configuration reuse.
    /// </exception>
    public str getReuseValuesAsString()
    {
        str reuseValuesAsString;

        if (component.ReuseEnabled)
        {
            reuseValuesAsString = reuseCodeBuilder.getValueString();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        return reuseValuesAsString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRouteOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a route operation given its name.
    /// </summary>
    /// <param name="_routeOperationName">
    /// The name of a route operation.
    /// </param>
    /// <returns>
    /// An instance of the <c>PCAdaptorComponent</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// Throws an error if the given name does not match any of the route operations that belong to the
    /// component.
    /// </exception>
    public PCAdaptorRouteOperation getRouteOperation(PCTemplateComponentName _routeOperationName)
    {
        PCAdaptorRouteOperation ret;

        ret = routeOperationMap.lookup(_routeOperationName);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRouteOperationEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enumerator for the route operations.
    /// </summary>
    /// <returns>
    /// The map enumerator.
    /// </returns>
    public MapEnumerator getRouteOperationEnumerator()
    {
        return routeOperationMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a sub-component given its solver name.
    /// </summary>
    /// <param name="_subComponentName">
    /// The sub-component solver name.
    /// </param>
    /// <returns>
    /// A sub component.
    /// </returns>
    public PCAdaptorComponent getSubComponent(PCSolverName _subComponentName)
    {
        PCAdaptorSubComponent subComponent;

        subComponent = subComponentMap.lookup(_subComponentName);

        return subComponent.getComponent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubComponentEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enumerator for the sub-components.
    /// </summary>
    /// <returns>
    /// The map enumerator.
    /// </returns>
    public MapEnumerator getSubComponentEnumerator()
    {
        return subComponentMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBOMLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the components have any BOM lines.
    /// </summary>
    /// <returns>
    /// true if the component has BOM lines; otherwise; false.
    /// </returns>
    public boolean hasBOMLines()
    {
        MapEnumerator           me;
        PCAdaptorSubComponent   subComponent;
        PCAdaptorBOMLine        bomLine;

        me = this.getBOMLineEnumerator();
        while ( me.moveNext() )
        {
            bomLine = me.currentValue();

            if (bomLine.parmCondition())
            {
                return true;
            }
        }
        // check recursively
        me = this.getSubComponentEnumerator();

        while ( me.moveNext() )
        {
            subComponent = me.currentValue();

            if (subComponent.getComponent().hasBOMLines())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRouteOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the components have any route operations.
    /// </summary>
    /// <param name="_checkSubComponents">
    /// A Boolean value that indicates whether the sub components will also be checked for route operations.
    /// </param>
    /// <returns>
    /// true if the component has route operations; otherwise, false.
    /// </returns>
    public boolean hasRouteOperations(boolean _checkSubComponents = true)
    {
        MapEnumerator me;
        PCAdaptorSubComponent   subComponent;
        PCAdaptorRouteOperation routeOperation;

        me = this.getRouteOperationEnumerator();
        while ( me.moveNext() )
        {
            routeOperation = me.currentValue();

            if (routeOperation.parmCondition())
            {
                return true;
            }
        }

        if (_checkSubComponents)
        {
            me = this.getSubComponentEnumerator();

            while ( me.moveNext() )
            {
                subComponent = me.currentValue();

                if (subComponent.getComponent().hasRouteOperations())
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReuseEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a boolean value indicating if the component has been enabled for configuration reuse.
    /// </summary>
    /// <returns>
    /// true if the component is enabled for configuration reuse; otherwise, false.
    /// </returns>
    public PCComponentConfigurationReuseOption isReuseEnabled()
    {
        return component.ReuseEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        attributeMap        = new Map(Types::String, Types::Class);
        routeOperationMap   = new Map(Types::String, Types::Class);
        bomLineMap          = new Map(Types::String, Types::Class);
        subComponentMap     = new Map(Types::String, Types::Class);

        reuseCodeBuilder            = PCConfigurationReuseCodeBuilder::construct();
        configurationReuseManager   = PCConfigurationReuseManager::construct();
        isConfigurationResuable     = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfigurationReuseCodeBuilder</Name>
				<Source><![CDATA[
    public PCConfigurationReuseCodeBuilder parmConfigurationReuseCodeBuilder(PCConfigurationReuseCodeBuilder _configurationReuseCodeBuilder = reuseCodeBuilder)
    {
        reuseCodeBuilder = _configurationReuseCodeBuilder;

        return reuseCodeBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfigurationReuseManager</Name>
				<Source><![CDATA[
    public PCConfigurationReuseManager parmConfigurationReuseManager(PCConfigurationReuseManager _configurationReuseManager = configurationReuseManager)
    {
        configurationReuseManager = _configurationReuseManager;

        return configurationReuseManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateNewReuseEntry</Name>
				<Source><![CDATA[
    public boolean parmCreateNewReuseEntry(boolean _createNewReuseEntry = createNewReuseEntry)
    {
        createNewReuseEntry = _createNewReuseEntry;

        return createNewReuseEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsConfigurationReusable</Name>
				<Source><![CDATA[
    public boolean parmIsConfigurationReusable(boolean _isConfigurationReusable = isConfigurationResuable)
    {
        isConfigurationResuable = _isConfigurationReusable;

        return isConfigurationResuable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reuseConfigurationExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a reuse configuration exists for the component.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_inventSiteId">
    /// An inventory site ID.
    /// </param>
    /// <returns>
    /// true if a reuse configuration exists; false, otherwise.
    /// </returns>
    public boolean reuseConfigurationExists(ItemId _itemId, InventSiteId _inventSiteId)
    {
        boolean ret = false;

        if (this.isReuseEnabled())
        {
            RecId componentRecId = this.getComponent().RecId;
            PCConfigurationReuseCode reuseCode = this.getReuseCode();

            ret = configurationReuseManager.existsReusableConfiguration(_itemId, componentRecId, reuseCode, _inventSiteId);

            if (ret)
            {
                reusableInventDim = configurationReuseManager.findReusableConfiguration(_itemId, componentRecId, reuseCode, _inventSiteId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponent</Name>
				<Source><![CDATA[
    protected void setComponent(PCClass _component)
    {
        component.data(_component);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponentInstance</Name>
				<Source><![CDATA[
    protected void setComponentInstance(PCComponentInstance _componentInstance)
    {
        componentInstance.data(_componentInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigurationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the configuration name.
    /// </summary>
    /// <returns>The configuration name.</returns>
    public PCConstraintBasedConfigurationName getConfigurationName()
    {
        EcoResNomenclatureInput nomenclatureInput;

        PCComponentConfigurationNomenclature nomenclatureAssociation = PCComponentConfigurationNomenclature::findByPCClass(component.RecId, EcoResNomenclatureRole::Id);
        if (nomenclatureAssociation.PCConfigurationNomenclature && nomenclatureAssociation.IsActive)
        {
            nomenclatureInput = EcoResNomenclatureInput::construct();
            nomenclatureInput.parmNomenclatureRecId(nomenclatureAssociation.PCConfigurationNomenclature);
            nomenclatureInput.parmAttributeMap(attributeMap);

            return EcoResNomenclature::buildFromNomenclatureInput(nomenclatureInput);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVariantConfiguration</Name>
				<Source><![CDATA[
    public PCVariantConfiguration parmVariantConfiguration(PCVariantConfiguration _variantConfiguration = variantConfiguration)
    {
        variantConfiguration = _variantConfiguration;

        return variantConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSupplyInventDim</Name>
				<Source><![CDATA[
    public InventDim parmSupplyInventDim(InventDim _supplyInventDim = supplyInventDim)
    {
        supplyInventDim = _supplyInventDim;

        return supplyInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDemandInventDim</Name>
				<Source><![CDATA[
    public InventDim parmDemandInventDim(InventDim _demandInventDim = demandInventDim)
    {
        demandInventDim = _demandInventDim;

        return demandInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCAdaptorComponent construct(
        PCClass             _component,
        PCComponentInstance _componentInstance
        )
    {
        PCAdaptorComponent adaptorComponent = new PCAdaptorComponent();

        adaptorComponent.setComponent(_component);
        adaptorComponent.setComponentInstance(_componentInstance);

        return adaptorComponent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>