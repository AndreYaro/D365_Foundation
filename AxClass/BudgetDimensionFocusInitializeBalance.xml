<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetDimensionFocusInitializeBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a derived class that is responsible for creating dimension reference records for the first time for budget source tracking and budget transaction data.
/// </summary>
public class BudgetDimensionFocusInitializeBalance extends DimensionFocusInitializeBalance implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        BudgetDimensionFocusInitializeBalance::saveBatchDetails(this.parmCurrentBatch().BatchJobId, "@SYS83243");
        BudgetDimensionFocusInitializeBalance::runOnServer(this.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBudgetProcess</Name>
				<Source><![CDATA[
    protected void runBudgetProcess()
    {
        BudgetDimensionFocusProcessBalance budgetDimensionFocusProcessBalance = BudgetDimensionFocusProcessBalance::construct(DimensionHierarchy::find(dimensionFocusRecId));
    
        budgetDimensionFocusProcessBalance.createBudgetDimensionReference();
    
        budgetDimensionFocusProcessBalance.createMissingLedgerDimensionReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    protected void runServer()
    {
        super();
    
        this.runBudgetProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetDimensionFocusInitializeBalance construct(DimensionHierarchy _dimensionHierarchy)
    {
        BudgetDimensionFocusInitializeBalance updateBalance;
    
        updateBalance = new BudgetDimensionFocusInitializeBalance();
        updateBalance.setDimensionHierarchy(_dimensionHierarchy);
    
        return updateBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    private server static void runOnServer(container _packedClass)
    {
        BudgetDimensionFocusInitializeBalance serverBalance;
    
        serverBalance = BudgetDimensionFocusInitializeBalance::construct(null);
    
        serverBalance.unpack(_packedClass);
        serverBalance.runServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBatchDetails</Name>
				<Source><![CDATA[
    public static void saveBatchDetails(RecId _batchJobId, ClassDescription _sourceProcessDescription)
    {
        batchJobId = _batchJobId;
        sourceProcessDescription = _sourceProcessDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>