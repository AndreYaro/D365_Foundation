<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayEmplTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayEmplTax
{
    RPayEmplTaxStatus       taxStatus;
    RHRMPayMainEmplId       mainEmplId;
    ReportPeriod_RU         payPeriod, startPeriod;
    BranchId_RU             branchId;
    RHRMPersonnelNumberId   personId;

    StartDate           startDateTax, sessionStartDateTax;
    Counter             childCount;
    boolean             branchEnq;
    boolean             employed;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcServiceDaysQty</Name>
				<Source><![CDATA[
        //calculates count of days at company as resident
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Days calcServiceDaysQty()
    {
        RPayTaxEmplResidencePeriod   residencePeriod;
        RPayHistory         payHistory;
        RHRMEmplTable       emplTable;
        StartDate           residenceStartDate, tmpStartDate;
        EndDate             residenceEndDate, tmpEndDate;
        Days                days, residentDays;
        RHRMJournalType     state;

        void init(RHRMEmplId _emplId)
        {
            //define initial state
            select firstonly * from payHistory
                order by StartDate desc
                where payHistory.Number     == _emplId &&
                       payHistory.StartDate <= residenceStartDate;

            state = payHistory.OperationType;

            if (state != RHRMJournalType::Dismiss)
            {
                tmpStartDate = max(payHistory.StartDate, residenceStartDate);
                tmpEndDate   = residenceEndDate;
            }
        }

        residenceEndDate   = payPeriod;
        residenceStartDate = dateStartYr(payPeriod);

        while select EmployeeId from emplTable
            where emplTable.PayMainEmplId == mainEmplId
        {
            init(emplTable.EmployeeId);
            while select * from payHistory
                order by StartDate
                where payHistory.Number        == emplTable.EmployeeId     &&
                      payHistory.StartDate     >  tmpStartDate             &&
                     (payHistory.OperationType == RHRMJournalType::Dismiss ||
                      payHistory.OperationType == RHRMJournalType::Receive)
            {
                switch (payHistory.OperationType)
                {
                    case RHRMJournalType::Dismiss:
                        if (state != payHistory.OperationType)
                        {
                            tmpEndDate = min(residenceEndDate, payHistory.StartDate);
                            days += tmpEndDate - tmpStartDate + 1;
                            tmpStartDate = payHistory.StartDate + 1;
                        }
                        break;

                    case RHRMJournalType::Receive:
                         tmpStartDate = max(payHistory.StartDate, residenceStartDate);
                         tmpEndDate   = residenceEndDate;
                        break;
                }

                state = payHistory.OperationType;
                if (payHistory.StartDate >= residenceEndDate)
                {
                    break;
                }
            }
        }

        if (state != RHRMJournalType::Dismiss)
        {
            days += tmpEndDate - tmpStartDate + 1;
        }

        select firstonly RecId from residencePeriod
            where residencePeriod.PersonnelNumber == personId;

        if (residencePeriod)
        {
            residentDays = RPayTaxEmplResidencePeriod::residenseDays(personId, residenceStartDate, residenceEndDate);
        }

        return min (days, residentDays);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatusCompensation</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean checkStatusCompensation(Map _statusPeriodsMap)
    {
        RPayTaxEmplResidencePeriod   residencePeriod;
        RPayTaxParameters   taxParameters = RPayTaxParameters::find();
        Days                serviceDays, taxApplyDays;
        boolean             applyClaim, statusChanged, ret;
        RPayRateCallContext rateContext;

        statusChanged = (_statusPeriodsMap.exists(RPayEmplTaxStatus::Nonresident) || _statusPeriodsMap.exists(RPayEmplTaxStatus::HighPaid)) &&
                        this.taxStatus() == RPayEmplTaxStatus::Resident && taxParameters.TaxStatusRefund == NoYesCombo::Yes;

        if (taxParameters.TaxStatusRefund && taxParameters.TaxStatusRefundDaysRate && statusChanged && taxParameters.TaxStatusRefundClaimRate)
        {
            rateContext = RPayRateCallContext::construct(payPeriod);
            rateContext.parmPersonId(personId);
            rateContext.parmEmployeeId(mainEmplId);
            applyClaim = RPayRateTable::find(taxParameters.TaxStatusRefundClaimRate).getValue(rateContext) == 1;

            select firstonly RecId from residencePeriod
                where residencePeriod.PersonnelNumber == personId;

            if (residencePeriod.RecId && applyClaim)
            {
                rateContext  = RPayRateCallContext::construct(payPeriod);
                serviceDays  = this.calcServiceDaysQty();
                taxApplyDays = any2int(RPayRateTable::find(taxParameters.TaxStatusRefundDaysRate).getValue(rateContext));
                ret          = (serviceDays > taxApplyDays);
            }
            else
            {
                ret = applyClaim;
            }
        }
        else
        {
            ret = statusChanged;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBranchId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void findBranchId()
    {
        RpayHRMOrganizationId    organizationId;
        container                con;

        con = RPayHistory::getOrganizationByDateInterval(mainEmplId, payPeriod, payPeriod);
        if (con != conNull())
        {
            organizationId  = conPeek(conPeek(con, 1), 1);
            branchId        = RPayHRMOrgBranches::findBranch(organizationId, payPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>identifyTaxStatus</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected RPayEmplTaxStatus identifyTaxStatus()
    {
        RPayTaxParameters rPayTaxParameters = RPayTaxParameters::find();
        RPayEmplTaxStatus taxStatusLocal;
        RPayRateCallContext rateContext;

        boolean rateValue(RPayRateCode _rateCode)
        {
            //identify on end pay period always
            return RPayRateTable::find(_rateCode).getValue(rateContext) ? true : false;
        }

        rateContext = RPayRateCallContext::construct(endmth(payPeriod));
        rateContext.parmPersonId(personId);
        rateContext.parmEmployeeId(mainEmplId);

        if (rateValue(rPayTaxParameters.NonResidentRateCode))
        {
            if (rateValue(rPayTaxParameters.HighPaidNonResident))
            {
                taxStatusLocal = RPayEmplTaxStatus::HighPaid;
            }
            else
            {
                taxStatusLocal = RPayEmplTaxStatus::Nonresident;
            }
        }
        else
        {
            taxStatusLocal = RPayEmplTaxStatus::Resident;
        }

        return taxStatusLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>incomeTaxGroupTable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RPayTaxIncomeGroupTable incomeTaxGroupTable(RpayTaxIncomeCode _taxIncomeCode)
    {
        RPayTaxIncomeGroupTable incomeGroupTable;
        RPayTable               payTable;
        RPayCounterTable        fundTable;
        RPayFundMember          fundMember;

        select firstonly incomeGroupTable
            where incomeGroupTable.EmplTaxStatus == this.taxStatus()
            exists join fundTable
                where fundTable.CounterUnit      == incomeGroupTable.Fund
            exists join fundMember
                where fundMember.CounterUnit     == fundTable.CounterUnit
            exists join payTable
                    where payTable.PayCtype          == fundMember.PayCostType &&
                          payTable.RpayTaxIncomeCode == _taxIncomeCode;

        return incomeGroupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void init(RHRMPayMainEmplId _mainEmplId,  ReportPeriod_RU _payPeriod, ReportPeriod_RU _startPeriod, boolean _identifyStatus)
    {
        mainEmplId  = _mainEmplId;
        payPeriod   = _payPeriod;
        startPeriod = _startPeriod;

        personId = RHRMEmplTable::find(mainEmplId).personTable().PersonnelNumber;

        if (_identifyStatus)
        {
            taxStatus  = this.identifyTaxStatus();
        }

        this.initEmployedStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployedStatus</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initEmployedStatus()
    {
        RHRMEmplTable emplTableLocal;

        select firstonly RecId from emplTableLocal
            where  emplTableLocal.PayMainEmplId   == mainEmplId
               && (emplTableLocal.PayResignedDate == dateNull()
               ||  emplTableLocal.PayResignedDate >= dateStartMth(payPeriod));

        employed = emplTableLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmployed</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean isEmployed()
    {
        return employed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBranchId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public BranchId_RU parmBranchId(BranchId_RU _branchId = branchId)
    {
        if (prmisDefault(_branchId))
        {
            if (!branchEnq)
            {
                this.findBranchId();
                branchEnq = true;
            }
        }
        else
        {
            branchId  = _branchId;
            branchEnq = true;
        }

        return branchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildCount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Counter parmChildCount(Counter _childCount = childCount)
    {
        childCount = _childCount;
        return childCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RHRMPayMainEmplId parmEmplId(RHRMPayMainEmplId _mainEmplId = mainEmplId)
    {
        mainEmplId = _mainEmplId;

        return mainEmplId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayPeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ReportPeriod_RU parmPayPeriod(ReportPeriod_RU _payPeriod = payPeriod)
    {
        payPeriod = _payPeriod;

        return payPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionStartDate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public StartDate parmSessionStartDate(StartDate _sessionStartDateTax = sessionStartDateTax)
    {
        sessionStartDateTax = _sessionStartDateTax;
        return sessionStartDateTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDateTax</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public StartDate parmStartDateTax(StartDate _startDateTax = startDateTax)
    {
        startDateTax = _startDateTax;
        return startDateTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartPeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ReportPeriod_RU parmStartPeriod(ReportPeriod_RU _startPeriod = startPeriod)
    {
        startPeriod = _startPeriod;

        return startPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCType2RateValue</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RPayRateValue payCType2RateValue(RPayCostType _payCType)
    {
        RPayTaxIncomeGroupTable incomeGroupTable;
        RPayCounterTable        fundTable;
        RPayFundMember          fundMember;

        select firstonly incomeGroupTable
            where incomeGroupTable.EmplTaxStatus == this.taxStatus()
            exists join fundTable
                where fundTable.CounterUnit      == incomeGroupTable.Fund
            exists join fundMember
                where fundMember.CounterUnit     == fundTable.CounterUnit &&
                      fundMember.PayCostType     == _payCType;

        return this.taxGroup2RateValue(incomeGroupTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>personId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the person id.
    /// </summary>
    /// <returns>
    /// The person id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RHRMPersonnelNumberId personId()
    {
        return personId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusChgCompensationAllowed</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean statusChgCompensationAllowed()
    {
        Map mapStatus = Map::create(this.taxStatusPeriod());

        return this.checkStatusCompensation(mapStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup2Rate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RPayRateCode taxGroup2Rate(RPayTaxIncomeGroupTable _incomeGroupTable)
    {
        RPayRateCode    taxRate;
        RPayTaxCountry  taxCountry;
        RPayGroupTable  countryGroup;
        RPayPersonEmplId groupRefId;

        switch (this.taxStatus())
        {
            case RPayEmplTaxStatus::Resident:
                taxRate = _incomeGroupTable.RateCode;
                break;

            case RPayEmplTaxStatus::Nonresident, RPayEmplTaxStatus::HighPaid:
                taxRate = _incomeGroupTable.RateCode;

                if (_incomeGroupTable.RateCodeGroup)
                {
                    taxCountry = RPayTaxCountry::find(RHRMPersonData::findVersion(personId, payPeriod).LogisticsAddressCountryRegion);
                    countryGroup = RPayGroupTable::find(taxCountry.PayGroup);

                    if (countryGroup.Type == RPayGroupType::Employee)
                    {
                        groupRefId = mainEmplId;
                    }
                    else
                    {
                        groupRefId = personId;
                    }

                    if (taxCountry && RPayGroupMember::memberByGroup(groupRefId, countryGroup.PayGroup, payPeriod))
                    {
                        taxRate = _incomeGroupTable.RateCodeGroup;
                    }
                }
                break;
        }

        return taxRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup2RateValue</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RPayRateValue taxGroup2RateValue(RPayTaxIncomeGroupTable _incomeGroupTable)
    {
        RPayRateCode    taxRate;
        RPayRateValue   percentage;
        RPayRateCallContext rateContext;

        taxRate = this.taxGroup2Rate(_incomeGroupTable);

        if (taxRate)
        {
            rateContext = RPayRateCallContext::construct(payPeriod);
            rateContext.parmPersonId(personId);
            rateContext.parmEmployeeId(this.parmEmplId());
            percentage = RPayRateTable::find(taxRate).getValue(rateContext);
        }

        return percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxIncomeCode2RateValue</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RPayRateValue taxIncomeCode2RateValue(RpayTaxIncomeCode _taxIncomeCode)
    {
        RPayTaxIncomeGroupTable incomeGroupTable;
        RPayTable               payTable;
        RPayCounterTable        fundTable;
        RPayFundMember          fundMember;

        select firstonly incomeGroupTable
            where incomeGroupTable.EmplTaxStatus == this.taxStatus()
            exists join fundTable
                where fundTable.CounterUnit      == incomeGroupTable.Fund
            exists join fundMember
                where fundMember.CounterUnit     == fundTable.CounterUnit
                exists join payTable
                    where payTable.PayCtype          == fundMember.PayCostType &&
                          payTable.RpayTaxIncomeCode == _taxIncomeCode;

        return this.taxGroup2RateValue(incomeGroupTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxStatus</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RPayEmplTaxStatus taxStatus(RPayEmplTaxStatus _taxStatus = taxStatus)
    {
        taxStatus = _taxStatus;

        return taxStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxStatusPeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public container taxStatusPeriod()
    {
        Map             periodMap = new Map(Types::Enum, Types::Container);
        RPayEmplTax     emplTax;
        ReportPeriod_RU period, periodStart, periodEnd;
        container       con;

        period = endmth(dateStartYr(payPeriod));

        while (period <= endmth(payPeriod))
        {
            emplTax = RPayEmplTax::construct(mainEmplId, period);

            if (periodMap.exists(emplTax.taxStatus()))
            {
                con = periodMap.lookup(emplTax.taxStatus());
                periodStart = conPeek(con, conLen(con) - 1);
                periodEnd   = conPeek(con, conLen(con));

                if (periodEnd == endmth(prevMth(period)))
                {
                    con = conPoke(con, conLen(con) - 1, periodStart);
                    con = conPoke(con, conLen(con), period);
                    periodMap.insert(emplTax.taxStatus(), con);
                }
                else
                {
                    con += period;
                    con += period;
                    periodMap.insert(emplTax.taxStatus(), con);
                }
            }
            else
            {
                periodMap.insert(emplTax.taxStatus(), [period, period]);
            }

            period = endmth(dateMthFwd(period, 1));
        }

        return periodMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLastTaxStatus</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean useLastTaxStatus()
    {
        Map mapStatus = Map::create(this.taxStatusPeriod());
        ;

        if (mapStatus.exists(RPayEmplTaxStatus::Resident) &&
           (this.taxStatus() == RPayEmplTaxStatus::Nonresident || this.taxStatus() == RPayEmplTaxStatus::HighPaid))
        {
            return true;
        }
        else if ((mapStatus.exists(RPayEmplTaxStatus::Nonresident) || mapStatus.exists(RPayEmplTaxStatus::HighPaid)) &&
                this.taxStatus() == RPayEmplTaxStatus::Resident &&
                this.checkStatusCompensation(mapStatus))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static RPayEmplTax construct(RHRMPayMainEmplId  _mainEmplId,
                                 ReportPeriod_RU    _payPeriod,
                                 ReportPeriod_RU    _startPeriod    = dateStartMth(_payPeriod),
                                 boolean            _identifyStatus = true)
    {
        RPayEmplTax emplTax = new RPayEmplTax();
        emplTax.init(_mainEmplId, _payPeriod, _startPeriod, _identifyStatus);

        return emplTax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>