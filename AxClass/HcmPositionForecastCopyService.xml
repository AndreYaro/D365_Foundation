<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCopyService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmPositionForecastCopyService</c> class handles the bulk of copying forecast posititions to a new scenario.
/// </summary>
public class HcmPositionForecastCopyService
{
    Set                                 selectedPositionForecastScenarioSet;
    Set                                 skippedPositionForecastScenarioSet;
    SysOperationProgress                progress;
    BudgetPlanScenarioRecId             newBudgetPlanScenarioId;
    HcmPositionForecastScenarioRecId    newPositionForecastscenarioId;
    HcmPositionForecastScenarioRecId    origPositionForecastScenarioId;
    Map                                 budgetPlanProcessNameMap, budgetPlanScenarioNameMap, positionIdMap;
    container                           infologData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createForecastScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the forecast scenario.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record Id in the <c>BudgetPlanningProcess</c> table for the budget planning process.
    /// </param>
    /// <param name="_budgetPlanScenario">
    /// The record Id in the <c>BudgetPlanScenario</c> table for the budget plan scenario.
    /// </param>
    /// <returns>
    /// The record buffer of the <c>HcmForecastScenario</c> table created by the method.
    /// </returns>
    protected HcmForecastScenario createForecastScenario(BudgetPlanningProcessRecId _budgetPlanningProcessRecId, BudgetPlanScenarioRecId _budgetPlanScenario)
    {
        HcmForecastScenario newHcmForecastScenario;

        ttsbegin;
        newHcmForecastScenario.BudgetPlanningProcess = _budgetPlanningProcessRecId;
        newHcmForecastScenario.BudgetPlanScenario    = _budgetPlanScenario;
        newHcmForecastScenario.insert();
        ttscommit;

        return newHcmForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastBudgetAcctLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the copy of budget account lines from the source position to destination position record.
    /// </summary>
    protected void createPositionForecastBudgetAcctLine()
    {
        HcmPositionForecastBudgetAcctLine hcmPositionForecastBudgetAccountLineCopy;
        HcmPositionForecastBudgetAcctLine hcmPositionForecastBudgetAccountLine;

        ttsbegin;
        insert_recordset hcmPositionForecastBudgetAccountLineCopy
            (
                AmountCur,
                BudgetAmountCur,
                BudgetPurposeTypeDetail,
                EffectiveDate,
                ExpirationDate,
                IsLineLockedForRecalculation,
                IsPercentageBased,
                IsPositionLineOverridden,
                IsSystemGenerated,
                LedgerDimension,
                LegalEntity,
                PercentageOfDefaultBasisAmount,
                PositionForecastScenario,
                CostLineSource,
                PositionForecastCompensationGrid
            )
            select
              AmountCur,
              BudgetAmountCur,
              BudgetPurposeTypeDetail,
              EffectiveDate,
              ExpirationDate,
              IsLineLockedForRecalculation,
              IsPercentageBased,
              IsPositionLineOverridden,
              IsSystemGenerated,
              LedgerDimension,
              LegalEntity,
              PercentageOfDefaultBasisAmount,
              newPositionForecastscenarioId,
              CostLineSource,
              PositionForecastCompensationGrid
            from hcmPositionForecastBudgetAccountLine
                where hcmPositionForecastBudgetAccountLine.PositionForecastScenario == origPositionForecastScenarioId;

        // Copy Notes
        this.createPositionForecastBudgetAcctLineNote();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastBudgetAcctLineNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the note for Budget cost line from the source position to destination position record.
    /// </summary>
    protected void createPositionForecastBudgetAcctLineNote()
    {
        HcmPositionForecastAcctLineNote          hcmPositionForecastAcctLineNote;
        HcmPositionForecastAcctLineNote          hcmPositionForecastAcctLineNoteOrig;
        HcmPositionForecastBudgetAcctLine        hcmPositionForecastBudgetAcctLine;
        HcmPositionForecastBudgetAcctLine        hcmPositionForecastBudgetAcctLineNew;
        HcmPositionForecastBudgetDefaultValRecId newHcmPositionForecastBudgetAcctLineRecId;

        ttsbegin;
        while select RecId, BudgetPurposeTypeDetail, EffectiveDate from hcmPositionForecastBudgetAcctLineNew
            where hcmPositionForecastBudgetAcctLineNew.PositionForecastScenario == newPositionForecastscenarioId
        {
            newHcmPositionForecastBudgetAcctLineRecId = hcmPositionForecastBudgetAcctLineNew.RecId;

            insert_recordset hcmPositionForecastAcctLineNote
            (HcmPositionForecastBudgetAcctLine, Note)
            select
            newHcmPositionForecastBudgetAcctLineRecId, Note
            from hcmPositionForecastAcctLineNoteOrig
                join hcmPositionForecastBudgetAcctLine
                where hcmPositionForecastBudgetAcctLine.RecId == hcmPositionForecastAcctLineNoteOrig.HcmPositionForecastBudgetAcctLine
                    && hcmPositionForecastBudgetAcctLine.PositionForecastScenario == origPositionForecastScenarioId
                    && hcmPositionForecastBudgetAcctLine.BudgetPurposeTypeDetail == hcmPositionForecastBudgetAcctLineNew.BudgetPurposeTypeDetail
                    && hcmPositionForecastBudgetAcctLine.EffectiveDate == hcmPositionForecastBudgetAcctLineNew.EffectiveDate;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastLastModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the record for new position forecast scenario in the <c>HcmPositionForecastLastModified</c> table.
    /// </summary>
    protected void createPositionForecastLastModified()
    {
        HcmPositionForecastLastModified hcmPositionForecastLastModified;
        HcmPositionForecastLastModified newhcmPositionForecastLastModified;

        hcmPositionForecastLastModified = HcmPositionForecastLastModified::findByPositionForecastScenerio(origPositionForecastScenarioId);

        buf2Buf(hcmPositionForecastLastModified, newhcmPositionForecastLastModified);
        newhcmPositionForecastLastModified.PositionForecastScenario = newPositionForecastscenarioId;

        ttsbegin;
        newhcmPositionForecastLastModified.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastDetailV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the record for new position forecast detail in the <c>HcmPositionForecastDetailV2</c> table.
    /// </summary>
    /// <param name="_hcmPositionForecastRecId">
    /// The forecast RecId in the <c>HcmPositionForecastDetailV2</c> table.
    /// </param>
    private void createPositionForecastDetailV2(HcmPositionForecastRecId _hcmPositionForecastRecId)
    {
        HcmPositionForecastDetailV2 newpositionForecastDetail,positionForecastDetail;

        positionForecastDetail = HcmPositionForecastDetailV2::findByPositionForecastScenerio(origPositionForecastScenarioId,_hcmPositionForecastRecId);

        if (positionForecastDetail.RecId)
        {
            buf2Buf(positionForecastDetail, newpositionForecastDetail);
            newpositionForecastDetail.PositionForecastScenario = newPositionForecastscenarioId;

            ttsbegin;
            newpositionForecastDetail.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPositionForecastScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the position forecast scenario.
    /// </summary>
    /// <param name="_selectedPositionForecastScenario">
    /// The <c>HcmPositionForecastScenario</c> table buffer.
    /// </param>
    /// <param name="_budgetPlanScenario">
    /// The record Id in the <c>BudgetPlanScenario</c> table for the budget plan scenario.
    /// </param>
    protected void createPositionForecastScenario(HcmPositionForecastScenario _selectedPositionForecastScenario,
                                                    BudgetPlanScenarioRecId _budgetPlanScenario)
    {
        HcmPositionForecastScenario newPositionForecastScenarioCopy;

        if (_selectedPositionForecastScenario.RecId && _budgetPlanScenario)
        {
            buf2Buf(_selectedPositionForecastScenario, newPositionForecastScenarioCopy);
            newPositionForecastScenarioCopy.ForecastScenario = _budgetPlanScenario;

            ttsbegin;
            newPositionForecastScenarioCopy.insert();

            // Create budget cost lines
            newPositionForecastscenarioId  = newPositionForecastScenarioCopy.RecId;
            origPositionForecastScenarioId = _selectedPositionForecastScenario.RecId;

            this.createPositionForecastBudgetAcctLine();

            // Create Last modified record
            this.createPositionForecastLastModified();

            // Create Position Forecast DetailV2 in both feature on and off case.
            this.createPositionForecastDetailV2(_selectedPositionForecastScenario.PositionForecast);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanProcessName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets budget plan process name associated with <c>BudgetPlanningProcess</c> record.
    /// </summary>
    /// <param name="_budgetPlanProcessRecId">
    /// The record id of <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanningProcessName</c> field value associated with <c>BudgetPlanningProcess</c> record id.
    /// </returns>
    protected BudgetPlanningProcessName getBudgetPlanProcessName(BudgetPlanningProcessRecId _budgetPlanProcessRecId)
    {
        BudgetPlanningProcessName budgetPlanningProcessName;

        if (budgetPlanProcessNameMap.exists(_budgetPlanProcessRecId))
        {
            budgetPlanningProcessName = budgetPlanProcessNameMap.lookup(_budgetPlanProcessRecId);
        }
        else
        {
            budgetPlanningProcessName = BudgetPlanningProcess::find(_budgetPlanProcessRecId).Name;
            budgetPlanProcessNameMap.insert(_budgetPlanProcessRecId, budgetPlanningProcessName);
        }

        return budgetPlanningProcessName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanScenarioName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets budget plan scenario name.
    /// </summary>
    /// <param name="_budgetPlanScenarioRecId">
    /// The record id of <c>BudgetPlanScenario</c> record.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanScenarioName</c> field value associated with <c>BudgetPlanScenario</c> record id.
    /// </returns>
    protected BudgetPlanScenarioName getBudgetPlanScenarioName(BudgetPlanScenarioRecId _budgetPlanScenarioRecId)
    {
        BudgetPlanScenarioName     budgetPlanningScenarioName;

        if (budgetPlanScenarioNameMap.exists(_budgetPlanScenarioRecId))
        {
            budgetPlanningScenarioName = budgetPlanScenarioNameMap.lookup(_budgetPlanScenarioRecId);
        }
        else
        {
            budgetPlanningScenarioName = BudgetPlanScenario::find(_budgetPlanScenarioRecId).Name;
            budgetPlanScenarioNameMap.insert(_budgetPlanScenarioRecId, budgetPlanningScenarioName);
        }

        return budgetPlanningScenarioName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>HcmPositionId</c> associated with the <c>HcmPositionForecast</c> record id.
    /// </summary>
    /// <param name="_hcmPositionForecastRecId">
    /// The Record id of <c>HcmPositionForecast</c> record.
    /// </param>
    /// <returns>
    /// A <c>PositionId</c> field value associated with <c>HcmPositionForecast</c> record id.
    /// </returns>
    protected HcmPositionId getPositionId(HcmPositionForecastRecId _hcmPositionForecastRecId)
    {
        HcmPositionId             hcmPositionId;

        if (positionIdMap.exists(_hcmPositionForecastRecId))
        {
            hcmPositionId = positionIdMap.lookup(_hcmPositionForecastRecId);
        }
        else
        {
            hcmPositionId = HcmPositionForecast::getPositionId(_hcmPositionForecastRecId);
            positionIdMap.insert(_hcmPositionForecastRecId, hcmPositionId);
        }

        return hcmPositionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProgressBar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the display of details and task progress on the progress bar.
    /// </summary>
    /// <returns>
    /// The task progress on the progress bar.
    /// </returns>
    public SysOperationProgress initProgressBar()
    {
        #define.MinimumNoOfRecordToShowProgress(100)

        int64 totalCount = selectedPositionForecastScenarioSet.elements();

        if (totalCount > #MinimumNoOfRecordToShowProgress)
        {
            progress = new SysOperationProgress();

            progress.setCaption("@Budget:BudgetPlan_PositionForecasting_HcmPositionForecast_CopyToScenarioProgress");
            progress.setTotal(totalCount);
            progress.updateInterval(1);
            progress.update(true);
        }

        return progress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        skippedPositionForecastScenarioSet = new Set(Types::Int64);
        budgetPlanProcessNameMap = new Map(Types::Int64, Types::String);
        budgetPlanScenarioNameMap = new Map(Types::Int64, Types::String);
        positionIdMap = new Map(Types::Int64, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the copy from the selected position forecast scenario to new scenario.
    /// </summary>
    private void performCopy()
    {
        boolean                     skipPositionForecastScenarioCopy = true;
        SetEnumerator               selectedPosForecastSetEnumerator;
        HcmForecastScenario         sourceForecastScenario;
        HcmForecastScenario         targetForecastScenario;
        HcmPositionForecastScenario sourcePositionForecastScenario;
        HcmPositionForecastScenario targetPositionForecastScenario;
        BudgetPlanningProcessName   budgetPlanningProcessName;
        BudgetPlanScenarioName      budgetPlanningScenarioName;
        str                         prefix;

        selectedPosForecastSetEnumerator = selectedPositionForecastScenarioSet.getEnumerator();

        // Clear any residual messages from the infolog.
        Infolog.clear();

        // Show progress bar
        progress = this.initProgressBar();

        // Go through all selected Forecast Positions
        while (selectedPosForecastSetEnumerator.moveNext())
        {
            sourcePositionForecastScenario = HcmPositionForecastScenario::find(selectedPosForecastSetEnumerator.current());

            sourceForecastScenario = HcmForecastScenario::find(sourcePositionForecastScenario.ForecastScenario);
            targetForecastScenario = HcmForecastScenario::findByPlanningProcessAndScenario(sourceForecastScenario.BudgetPlanningProcess, newBudgetPlanScenarioId);
            if (targetForecastScenario.RecId == 0)
            {
                skipPositionForecastScenarioCopy = false;

                // Create new Forecast Scenario
                targetForecastScenario = this.createForecastScenario(sourceForecastScenario.BudgetPlanningProcess, newBudgetPlanScenarioId);
            }
            else
            {
                targetPositionForecastScenario   = HcmPositionForecastScenario::findByPositionForecastBudgetPlanScenario(sourcePositionForecastScenario.PositionForecast,
                                                                                                                            targetForecastScenario.RecId);
                skipPositionForecastScenarioCopy = targetPositionForecastScenario.RecId > 0;
            }

            if (skipPositionForecastScenarioCopy == false && targetForecastScenario.RecId > 0)
            {
                // Create new Position Forecast Scenario
                this.createPositionForecastScenario(sourcePositionForecastScenario, targetForecastScenario.RecId);
            }
            else
            {
                budgetPlanningProcessName = this.getBudgetPlanProcessName(sourceForecastScenario.BudgetPlanningProcess);
                budgetPlanningScenarioName = this.getBudgetPlanScenarioName(targetForecastScenario.BudgetPlanScenario);

                setPrefix(strFmt("@Budget:BudgetPlan_PositionForecasting_CopyToScenario_FailureInfo", budgetPlanningScenarioName));

                prefix = strFmt("@Budget:BudgetPlan_PositionForecasting_CopyToScenario_FormatMessageDetails",
                                budgetPlanningProcessName,
                                budgetPlanningScenarioName);

                //group message by scenario and process
                setPrefix(prefix);

                info(strFmt("@Budget:BudgetPlan_PositionForecasting_CopyToScenario_FormatMessageDetails",
                    this.getPositionId(sourcePositionForecastScenario.PositionForecast),
                    this.getBudgetPlanScenarioName(sourceForecastScenario.BudgetPlanScenario)));

                skippedPositionForecastScenarioSet.add(sourcePositionForecastScenario.RecId);
            }

            // Update progress window
            if (progress)
            {
                progress.incCount();
                progress.update(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPositionForecastCopyScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the process of the position forecast copy to scenario.
    /// </summary>
    /// <param name="_contract">
    /// An instance of the <c>HcmPositionForecastCopyContract</c> class.
    /// </param>
    public void processPositionForecastCopyScenario(HcmPositionForecastCopyContract _contract)
    {
        selectedPositionForecastScenarioSet = new Set (Types::Int64);

        // Get data from contract parameters
        selectedPositionForecastScenarioSet = Set::create(_contract.parmListPositionForecastScenario());
        newBudgetPlanScenarioId             = _contract.parmTargetScenario();

        if (newBudgetPlanScenarioId > 0)
        {
            if (selectedPositionForecastScenarioSet.elements() > 0)
            {
                // Do process copy
                this.performCopy();

                // Show result
                this.showResultMessage();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showResultMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the two tiered result with the first tier displaying the success count and second
    /// tier displaying the failed detail messages.
    /// </summary>
    private void showResultMessage()
    {
        int64 newPositionForecastScenarioCount;
        int64 totalPositionCount = selectedPositionForecastScenarioSet.elements();

        newPositionForecastScenarioCount = totalPositionCount - skippedPositionForecastScenarioSet.elements();

        infologData = infolog.export();
        infolog.clear();

        if (newPositionForecastScenarioCount == totalPositionCount)
        {
            // Show success count message.
            info(strFmt("@Budget:BudgetPlan_PositionForecasting_PositionForecast_PositionsCreated",
                    int642str(newPositionForecastScenarioCount),
                    int642str(totalPositionCount)));
        }
        else
        {
            // Show success count message with information about failures.
            setPrefix(strFmt("@Budget:BudgetPlan_PositionForecasting_PositionForecast_PositionsCreated",
                        int642str(newPositionForecastScenarioCount),
                        int642str(totalPositionCount)));

            infolog.import(infologData);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>