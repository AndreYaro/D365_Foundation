<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkSourceOrderFormResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkSourceOrderFormResolver</c> is responsible for resolving and displaying the given source order.
/// </summary>
[SysObsolete('Use WhsWorkTransactionType.openSourceOrderByWorkOrder instead.', true, 03\03\2023)]
internal class WHSWorkSourceOrderFormResolver
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolveAndRedirectToSourceOrderForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// It resolves the source order and displays the corresponding form, given the WorkTransType and the number of the order.
    /// </summary>
    /// <param name = "_workTransType">The WorkTransType.</param>
    /// <param name = "_shipmentId">The shipment ID.</param>
    /// <param name = "_orderNum">The number of the source order.</param>
    [Hookable(false)]
    internal static void resolveAndRedirectToSourceOrderForm(
        WHSWorkTransType _workTransType, 
        WHSShipmentId _shipmentId, 
        WHSOrderNum _orderNum)
    {
        MenuFunction menuFunction;
        Args args = new Args();

        switch (_workTransType)
        {
            case WHSWorkTransType::Sales:
                menuFunction = new MenuFunction(menuitemDisplayStr(SalesTableListPage), MenuItemType::Display);
                args.record(SalesTable::find(_orderNum));
                break;

            case WHSWorkTransType::Purch:
                menuFunction = new MenuFunction(menuitemDisplayStr(PurchTableListPage), MenuItemType::Display);
                args.record(PurchTable::find(_orderNum));
                break;

            case WHSWorkTransType::PackedContainerPicking:
                WHSWorkTransType originWorkTransType = WHSWorkTable::calculateOriginWorkTransType(_workTransType, _shipmentId);

                if (originWorkTransType == WHSWorkTransType::Sales)
                {
                    menuFunction = new MenuFunction(menuitemDisplayStr(SalesTableListPage), MenuItemType::Display);
                    args.record(SalesTable::find(_orderNum));
                }
                else if (originWorkTransType == WHSWorkTransType::TransferIssue)
                {
                    menuFunction = new MenuFunction(menuitemDisplayStr(InventTransferOrder), MenuItemType::Display);
                    args.record(InventTransferTable::find(_orderNum));
                }
                break;
            
            case WHSWorkTransType::TransferIssue:
            case WHSWorkTransType::TransferReceipt:
                menuFunction = new MenuFunction(menuitemDisplayStr(InventTransferOrder), MenuItemType::Display);
                args.record(InventTransferTable::find(_orderNum));
                break;

            case WHSWorkTransType::ProdPick:
            case WHSWorkTransType::ProdPut:
            case WHSWorkTransType::ProdProcessPut:
                menuFunction = new MenuFunction(menuitemDisplayStr(ProdTableListPage), MenuItemType::Display);
                args.record(ProdTable::find(_orderNum));
                break;

            case WHSWorkTransType::KanbanPick,
                 WHSWorkTransType::KanbanPut:                 
                menuFunction = new MenuFunction(menuitemDisplayStr(Kanban),MenuItemType::Display);
                args.record(Kanban::findKanbanId(_orderNum));
                break;
        }

        if (menuFunction)
        {
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>