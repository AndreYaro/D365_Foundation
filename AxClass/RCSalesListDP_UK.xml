<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rcSalesListDP_UK</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>RCSalesListDP_UK</c> class is the Report Data Provider class for the <c>RCSalesList_UK</c>
///    report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(RCSalesList_UK)),
    SRSReportParameterAttribute(classStr(RCSalesListContract_UK))
]
public class rcSalesListDP_UK extends SRSReportDataProviderBase
{
    RCSalesListTmp_UK           rcSalesListTmp_UK;
    TaxAuthority                taxAuthority;
    DocumentNum                 approvalNumber;
    TaxPeriod                   taxPeriod;
    AddressCountryRegionId      countryRegion;
    AmountMST                   totalAmountMST;
    boolean                     settlePeriods;
    VATNum                      vatNum;
    FromDate                    fromDate;
    ToDate                      toDate;
    int                         noOfMonths, noOfYears;
    container                   fromdt;
    container                   todt;
    str                         month[];
    str                         currentMonth;
    Counter                     counter;
    CompanyInfo                 companyInfo;
    ReverseChargeParameters_W   reverseChargeParameters;
    TaxCountryRegionParameters  taxCountryRegionParameters;

    #define.emptyString('')
    #Tax_UK
    #define.RespiteDays(15)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findMonths</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the month value.
    /// </summary>
    private void findMonths()
    {
        int fromMonth=0, i;

        if (year(toDate) == year(fromDate))
        {
            noOfMonths = mthOfYr(toDate)-mthOfYr(fromDate)+1;
            if (noOfMonths>0)
            {
                month[0]    = #emptyString;
                fromMonth   = mthOfYr(fromDate);
                for (i=0; i<noOfMonths; i++)
                {
                    month[i+1] += mthName(fromMonth);
                    fromMonth++;
                }
            }
            else
            {
                month[0]    = #emptyString;
                month[1]    = mthName(mthOfYr(fromDate));
            }
        }
        else
        {
            noOfYears       = year(toDate) - year(fromDate) +1;
            noOfMonths      = (12*noOfYears)-(12-mthOfYr(toDate))-(mthOfYr(fromDate)-1);
            fromMonth       = mthOfYr(fromDate);
            for (i=0; i<noOfMonths; i++)
            {
                month[i+1] += mthName(fromMonth);
                fromMonth++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRCSalesListTmp_UK</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data for the report from the <c>RCSalesListTmp_UK</c> table.
    /// </summary>
    /// <returns>
    /// The <c>RCSalesListTmp_UK</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(RCSalesListTmp_UK))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RCSalesListTmp_UK getRCSalesListTmp_UK()
    {
        select rcSalesListTmp_UK;
        return rcSalesListTmp_UK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReportingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>RCSalesListTmp_UK</c> table.
    /// </summary>
    private void insertTaxReportingTmp()
    {
        rcSalesListTmp_UK.BranchId                  = companyInfo.BranchId ? companyInfo.BranchId : #000;
        rcSalesListTmp_UK.vatOfficeTelephoneText    = strFmt(#VATPhoneNumber,TaxAuthorityAddress::phone(taxAuthority));
        rcSalesListTmp_UK.vatNum                    = vatNum;
        rcSalesListTmp_UK.DueDate                   = any2date(toDate) + #RespiteDays;
        rcSalesListTmp_UK.CompanyNameAndAddress     = companyInfo.name() + #Newline + companyInfo.postalAddress().Address;
        rcSalesListTmp_UK.CoRegNum                  = companyInfo.CoRegNum;
        rcSalesListTmp_UK.NameOfMonth               = currentMonth;
        rcSalesListTmp_UK.rcContactDetails_Name     = reverseChargeParameters.Name;
        rcSalesListTmp_UK.rcContactDetails_Phone    = reverseChargeParameters.Phone;
        rcSalesListTmp_UK.TaxCode                   = taxCountryRegionParameters.SalesTaxCode;
        rcSalesListTmp_UK.TotalValue                = totalAmountMST;
        rcSalesListTmp_UK.Periods                   = strFmt(#Periods, any2date(fromDate), any2date(toDate));
        rcSalesListTmp_UK.Quarter                   = strFmt('%1%2',subStr(num2str(year(any2date(toDate)),4,0,0,0),3,2), date2Qtr(any2date(toDate)));
        rcSalesListTmp_UK.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records that are based on the specified values.
    /// </summary>
    public void processReport()
    {
        int                         i,j;
        date                        periodFromDate;
        date                        periodToDate;
        RCSalesList_UK              rcSalesListLoc;
        QueryRun                    rcSalesListqueryRun = new QueryRun(this.parmQuery());
        RCSalesListContract_UK      contract = this.parmDataContract() as RCSalesListContract_UK;

        companyInfo                 = CompanyInfo::find();
        reverseChargeParameters     = ReverseChargeParameters_W::find();
        countryRegion               = #emptyString;
        vatNum                      = #emptyString;
        currentMonth                = #emptyString;
        fromDate                    = contract.parmFromDate();
        toDate                      = contract.parmToDate();
        taxPeriod                   = contract.parmSettlementPeriod();
        taxAuthority                = contract.parmAuthority();
        counter                     = 0;

        this.setPeriod();
        this.findMonths();
        if (noOfMonths>1)
        {
            fromdt = [fromDate, endmth(fromDate)+1];
            for (i=3; i<=noOfMonths; i++)
            {
                fromdt += [nextMth(conPeek(fromdt,i-1))];
            }
            for (i=1; i<=noOfMonths; i++)
            {
                if (i<noOfMonths)
                {
                    todt += [endmth(conPeek(fromdt,i))];
                }
                else
                {
                    todt += [toDate];
                }
            }
        }
        else
        {
            fromdt  = [fromDate];
            todt    = [toDate];
        }

        if (!settlePeriods)
        {
            for (j=1; j<=noOfmonths; j++)
            {
                totalAmountMST  = 0;
                periodFromDate  = conPeek(fromdt, j);
                periodToDate    = conPeek(todt, j);
                currentMonth    = month[j];
                rcSalesListqueryRun.query().dataSourceNo(1).sortClear();
                rcSalesListqueryRun.query().dataSourceNo(1).orderMode(OrderMode::GroupBy);
                rcSalesListqueryRun.query().dataSourceNo(1).addSortField(fieldNum(RCSalesList_UK,vatNum));
                rcSalesListqueryRun.query().dataSourceNo(1).addSortField(fieldNum(RCSalesList_UK,CountryRegion));
                rcSalesListqueryRun.query().dataSourceNo(1).addSelectionField(fieldNum(RCSalesList_UK,AmountMST),SelectionField::Sum);
                rcSalesListqueryRun.query().dataSourceNo(1).addRange(fieldNum(RCSalesList_UK, TransDate));
                rcSalesListqueryRun.query().dataSourceNo(1).rangeField(fieldNum(RCSalesList_UK, TransDate)).value(queryRange(periodFromDate,periodtodate));

                while (rcSalesListqueryRun.next())
                {
                    rcSalesListLoc = rcSalesListqueryRun.get(tableNum(RCSalesList_UK));
                    if (!rcSalesListLoc.check())
                    {
                        break;
                    }

                    totalAmountMST              = rcSalesListLoc.AmountMST;
                    vatNum                      = rcSalesListLoc.vatNum;
                    countryRegion               = rcSalesListLoc.CountryRegion;
                    taxCountryRegionParameters  = TaxCountryRegionParameters::find(countryRegion);

                    this.insertTaxReportingTmp();

                    if (currentMonth != month[j] && currentMonth != #emptyString)
                    {
                        currentMonth = month[j];
                    }
                    else
                    {
                        currentMonth = #emptyString;
                    }
                }
                if (!rcSalesListLoc && currentMonth != #emptyString)
                {
                    totalAmountMST              = 0;
                    vatNum                      = #emptyString;
                    countryRegion               = #emptyString;
                    taxCountryRegionParameters  = TaxCountryRegionParameters::find(countryRegion);

                    this.insertTaxReportingTmp();
                }

                rcSalesListqueryRun.reset();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the from date and to date values.
    /// </summary>
    private void setPeriod()
    {
        TaxReportPeriod taxReportPeriod, taxReportPeriodLoc;

        select minof(FromDate), maxof(ToDate) from taxReportPeriodLoc
        where taxReportPeriodLoc.TaxPeriod == taxPeriod;

        if (fromDate>taxReportPeriodLoc.ToDate || toDate<taxReportPeriodLoc.FromDate)
        {
            settlePeriods = true;
        }
        if (toDate > taxReportPeriodLoc.ToDate)
        {
            toDate = taxReportPeriodLoc.ToDate;
        }

        while select FromDate from taxReportPeriod
        where taxReportPeriod.TaxPeriod == taxPeriod
        {
            if (fromDate < taxReportPeriod.FromDate)
            {
                fromDate = prevMth(endmth(fromDate)+1);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
