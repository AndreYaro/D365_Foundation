<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerEncumbranceReconciliationControler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerEncumbranceReconciliationControler</c> class is responsible for running the <c>LedgerEncumbranceReconciliation</c> report.
/// </summary>
public class LedgerEncumbranceReconciliationControler extends SrsReportRunController implements BatchRetryable
{
    // Notice the spelling of "Controller" in the class name.
    // It is intentionally kept wrong because "Controller" doesn't fit in the 40 characters identifier limit.

    #define.ReportDesign("LedgerEncumbranceReconciliation.Design")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the user can run the <c>LedgerEncumbranceReconciliation</c> report.
    /// </summary>
    /// <returns>
    ///    true if the user can run the report; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    These are the pre-requisites to run the report:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Posting definitions must be enabled.</description>
    ///       </item>
    ///       <item>
    ///          <description>Encumbrance process must be enabled.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public boolean canRun()
    {
        boolean             canRun = true;
        LedgerParameters    ledgerParameters;

        ledgerParameters = LedgerParameters::find();

        if (!ledgerParameters.JournalizingDefinitionEnableValue)
        {
            canRun = checkFailed(strfmt("@SYS319153", "@SYS132146"));
        }

        if (canRun && !ledgerParameters.IsEncumbranceProcessEnabled)
        {
            canRun = checkFailed(strfmt("@SYS319153", "@SYS300403"));
        }

        return canRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static LedgerEncumbranceReconciliationControler construct()
    {
        return new LedgerEncumbranceReconciliationControler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        LedgerEncumbranceReconciliationControler controller = LedgerEncumbranceReconciliationControler::construct();

        if (controller.canRun())
        {
            controller.parmReportName(#ReportDesign);
            controller.parmArgs(_args);
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>