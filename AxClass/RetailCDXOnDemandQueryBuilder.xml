<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXOnDemandQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper class to build the query for on demand data retrieval based on CDX data distribution tree.
/// </summary>
class RetailCDXOnDemandQueryBuilder
{
    #AOT
    private Map transferFieldMapping;
    private Map oneToManyFieldsMapping;
    RetailConnChannelSchema channelSchema;
    RetailCDXTableDistributionXML dataDistributionXml;

    System.Xml.Linq.XDocument dataDistributionDocument = new System.Xml.Linq.XDocument();

    System.Xml.Linq.XName linkGroupXName;
    System.Xml.Linq.XName linkXName;
    System.Xml.Linq.XName typeXName;
    System.Xml.Linq.XName nameXName;
    System.Xml.Linq.XName fieldNameXName;
    System.Xml.Linq.XName fieldValueXName;
    System.Xml.Linq.XName parentFieldNameXName;
    System.Xml.Linq.XName tableXName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildProductQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the query for on demand product data retrieval.
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    /// <returns>
    /// The number of tables included the query result.
    /// </returns>
    public int buildProductQuery(Query _query)
    {
        System.Collections.IEnumerable tableElements;
        System.Xml.Linq.XElement parentTableElement;
        System.Xml.Linq.XElement tableElement;
        System.Xml.Linq.XElement linkGroupElement;
        System.Xml.Linq.XElement linkElement;
        System.Xml.Linq.XAttribute parentFieldNameAttribute;
        str parentFieldName;

        QueryBuildDataSource rootQueryBuildDataSource;
        QueryBuildDataSource filterQueryBuildDataSource;
        str fieldName = fieldStr(InventTable, ItemId);
        int tableCount;

        transferFieldMapping = new Map(Types::String, Types::String);
        oneToManyFieldsMapping = new Map(Types::String, Types::Container);

        parentTableElement = this.getFirstTableElement(tableStr(RetailAssortmentLookup));
        if (CLRInterop::isNull(parentTableElement))
        {
            throw error(strFmt("@REX4160795", tableStr(RetailAssortmentLookup)));
        }

        tableElements = parentTableElement.Elements(tableXName);

        tableElement = this.getFirstTableElement(tableStr(InventTable), tableElements);
        if (CLRInterop::isNull(tableElement))
        {
            throw error(strFmt("@REX4160796", tableStr(InventTable), tableStr(RetailAssortmentLookup)));
        }

        tableCount = this.buildQuerySubtree(_query, tableElement);

        rootQueryBuildDataSource = _query.dataSourceNo(1);

        tableElement = this.getFirstTableElement(tableStr(EcoResProduct), tableElements);
        if (CLRInterop::isNull(tableElement))
        {
            throw error(strFmt("@REX4160796", tableStr(EcoResProduct), tableStr(RetailAssortmentLookup)));
        }

        linkGroupElement = tableElement.Element(linkGroupXName);
        linkElement = linkGroupElement.Element(linkXName);
        parentFieldNameAttribute = linkElement.Attribute(parentFieldNameXName);
        parentFieldName = parentFieldNameAttribute.get_Value();
        if (parentFieldName == 'ProductId')
        {
            parentFieldNameAttribute.set_Value('Product');
        }

        tableCount += this.buildQuerySubtree(_query, tableElement, rootQueryBuildDataSource, tableCount);

        // Add variant dimensions
        RetailCDXOnDemandQueryBuilder::addDataSource(
            _query.dataSourceTable(tableNum(EcoResProductMasterColor)),
            fieldNum(EcoResProductMasterColor, Color),
            tableNum(EcoResColor),
            fieldNum(EcoResColor, RecId));
        RetailCDXOnDemandQueryBuilder::addDataSource(
            _query.dataSourceTable(tableNum(EcoResProductMasterConfiguration)),
            fieldNum(EcoResProductMasterConfiguration, Configuration),
            tableNum(EcoResConfiguration),
            fieldNum(EcoResConfiguration, RecId));
        RetailCDXOnDemandQueryBuilder::addDataSource(
            _query.dataSourceTable(tableNum(EcoResProductMasterSize)),
            fieldNum(EcoResProductMasterSize, Size),
            tableNum(EcoResSize),
            fieldNum(EcoResSize, RecId));
        RetailCDXOnDemandQueryBuilder::addDataSource(
            _query.dataSourceTable(tableNum(EcoResProductMasterStyle)),
            fieldNum(EcoResProductMasterStyle, Style),
            tableNum(EcoResStyle),
            fieldNum(EcoResStyle, RecId));

        RetailCDXOnDemandQueryBuilder::addDataSource(
            _query.dataSourceTable(tableNum(InventDimCombination)),
            fieldNum(InventDimCombination, InventDimId),
            tableNum(InventDim),
            fieldNum(InventDim, InventDimId));

        filterQueryBuildDataSource = rootQueryBuildDataSource.addDataSource(tableNum(RetailItemCategory));
        filterQueryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        filterQueryBuildDataSource.fetchMode(QueryFetchMode::One2One);
        filterQueryBuildDataSource.relations(false);
        filterQueryBuildDataSource.addLink(
            fieldName2id(rootQueryBuildDataSource.table(), fieldName),
            fieldName2id(filterQueryBuildDataSource.table(), fieldName));

        return tableCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the query for on demand data retrieval base on the root table in CDX data distribution tree.
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    /// <param name="_rootTableName">
    /// The root table name.
    /// </param>
    /// <returns>
    /// The number of tables included the query result.
    /// </returns>
    public int buildQuery(Query _query, str _rootTableName)
    {
        System.Xml.Linq.XElement rootTableElement;

        rootTableElement = this.getFirstTableElement(_rootTableName);
        if (CLRInterop::isNull(rootTableElement))
        {
            throw error(strFmt("@REX4160795", _rootTableName));
        }

        return this.buildQuerySubtree(_query, rootTableElement, null, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramTransferFieldMapping</Name>
				<Source><![CDATA[
    internal Map paramTransferFieldMapping(Map _transferFieldMapping = transferFieldMapping)
    {
        return _transferFieldMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramOneToManyFieldsMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Param method for map which contains one to many sub job field mappings.
    /// </summary>
    /// <param name = "_oneToManyFieldsMapping">The Map's buffer.</param>
    /// <returns>The Map's buffer.</returns>
    internal Map paramOneToManyFieldsMapping(Map _oneToManyFieldsMapping = oneToManyFieldsMapping)
    {
        oneToManyFieldsMapping = _oneToManyFieldsMapping;

        return oneToManyFieldsMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySubtree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the query subtree for on demand data retrieval base on the root table in CDX data distribution tree.
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    /// <param name="_tableElement">
    /// The table element.
    /// </param>
    /// <param name="_parentQueryBuildDataSource">
    /// The parent query build data source.
    /// </param>
    /// <param name="_tableCount">
    /// The number of tables already in the query.
    /// </param>
    /// <returns>
    /// The number of tables included the resulted query.
    /// </returns>
    public int buildQuerySubtree(Query _query, System.Xml.Linq.XElement _tableElement, QueryBuildDataSource _parentQueryBuildDataSource = null, int _tableCount = 0)
    {
        System.Xml.Linq.XElement linkGroupElement;
        System.Xml.Linq.XElement linkElement;
        System.Xml.Linq.XElement childTableElement;

        System.Xml.Linq.XAttribute typeAttribute;
        System.Xml.Linq.XAttribute nameAttribute;
        System.Xml.Linq.XAttribute fieldNameAttribute;
        System.Xml.Linq.XAttribute fieldValueAttribute;
        System.Xml.Linq.XAttribute parentFieldNameAttribute;

        System.Collections.IEnumerable linkElements;
        System.Collections.IEnumerable childTableElements;

        System.Collections.IEnumerator linkElementEnumerator;
        System.Collections.IEnumerator childTableElementEnumerator;

        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange queryBuildRange;
        QueryBuildFieldList queryBuildFieldList;

        RetailConnTableName name;
        RetailConnTableName parentName;

        RetailConnChannelSchema connChannelSchema;
        RetailConnSchedulerJobTable connSchedulerJobTable;
        RetailConnSchedulerJobLine connSchedulerJobLine;
        RetailConnSchedulerSubjobTable connSchedulerSubjob;
        RetailConnSchedulerSubjobFieldList connSchedulerSubjobFieldList;

        str type;
        str fieldName;
        str fieldValue;
        str parentFieldName;

        int fieldId;
        int parentFieldId;
        int tableCount;

        // A map contains 'TableName.FromFieldName' as key and 'ToFieldName' as value.
        Map firstOccurenceFromFieldMapping = new Map(Types::String, Types::String);

        tableCount = _tableCount + 1;

        nameAttribute = _tableElement.Attribute(nameXName);
        name = nameAttribute.get_Value();

        if (!_parentQueryBuildDataSource)
        {
            queryBuildDataSource = _query.addDataSource(tableName2Id(name));
        }
        else
        {
            queryBuildDataSource = _parentQueryBuildDataSource.addDataSource(tableName2Id(name));
            queryBuildDataSource.joinMode(JoinMode::OuterJoin);
            queryBuildDataSource.fetchMode(QueryFetchMode::One2Many);

            parentName = tableId2name(_parentQueryBuildDataSource.table());
        }
        queryBuildDataSource.name(strFmt('T%1', tableCount));
        queryBuildDataSource.relations(false);

        queryBuildFieldList = queryBuildDataSource.fields();
        queryBuildFieldList.dynamic(false);
        queryBuildFieldList.clearFieldList();

        while select subJobId from connSchedulerSubjob
            where connSchedulerSubjob.AXTableName == name
                && connSchedulerSubjob.dataReplicationByPull == NoYes::No
            join fromFieldName, toFieldName from connSchedulerSubjobFieldList
                where connSchedulerSubjobFieldList.subjobId == connSchedulerSubjob.subJobId
            join RecId from connSchedulerJobLine
                where connSchedulerJobLine.subJobId == connSchedulerSubjob.subJobId
            join RecId from connSchedulerjobTable
            group by connSchedulerSubjob.subJobId, connSchedulerSubjobFieldList.fromFieldName, connSchedulerSubjobFieldList.toFieldName
                where connSchedulerjobTable.jobId == connSchedulerJobLine.jobId
                    && connSchedulerjobTable.RetailConnChannelSchema == channelSchema.RecId
        {
            this.addField(queryBuildFieldList, name, connSchedulerSubjobFieldList.fromFieldName);

            str fromTableFieldName = strFmt('%1.%2', name, connSchedulerSubjobFieldList.fromFieldName);

            //Insert To field in the map to override subjob From field value.
            if (connSchedulerSubjobFieldList.fromFieldName != connSchedulerSubjobFieldList.toFieldName)
            {
                transferFieldMapping.insert(fromTableFieldName, connSchedulerSubjobFieldList.toFieldName);
            }

            // If same FROM field is mapped to more than one TO fields, then note down the multiple mappings information.
            // For ex, (From - HQ) PRODUCT is mapped to PRODUCT    (TO - Channel)
            //     and (From - HQ) PRODUCT is mapped to ABCPRODUCT (TO - Channel) in InventTable sub job,then maintain this info in <c>oneToManyFieldsMapping</c> map,
            // This will help us in generating values in the XML for PRODUCT and ABCPRODUCT attributes.
            // Here <c>firstOccurenceFromFieldMapping</c> helps to identify if From field has multiple mappings. It contains all first occurrences
            // of From field of a mapping, if there are more than one occurrence that means it has multiple mappings 
            if (firstOccurenceFromFieldMapping.exists(fromTableFieldName)
                && firstOccurenceFromFieldMapping.lookup(fromTableFieldName) != connSchedulerSubjobFieldList.toFieldName)
            {
                this.addOneToManyFieldsMapping(fromTableFieldName, connSchedulerSubjobFieldList.toFieldName, firstOccurenceFromFieldMapping);
            }
            else
            {
                firstOccurenceFromFieldMapping.insert(fromTableFieldName, connSchedulerSubjobFieldList.toFieldName);
            }
        }

        linkGroupElement = _tableElement.Element(linkGroupXName);

        linkElements = linkGroupElement.Elements(linkXName);
        linkElementEnumerator = linkElements.GetEnumerator();

        while (linkElementEnumerator.MoveNext())
        {
            linkElement = linkElementEnumerator.get_Current();

            typeAttribute = linkElement.Attribute(typeXName);
            type = typeAttribute.get_Value();

            fieldNameAttribute = linkElement.Attribute(fieldNameXName);
            fieldName = fieldNameAttribute.get_Value();
            fieldId = fieldName2id(tableName2Id(name), fieldName);

            switch (type)
            {
                case 'FieldValue':
                    fieldValueAttribute = linkElement.Attribute(fieldValueXName);
                    fieldValue = fieldValueAttribute.get_Value();
                    queryBuildRange = queryBuildDataSource.addRange(fieldId);
                    queryBuildRange.value(fieldValue);
                    break;

                case 'FieldMatch':
                    if (_parentQueryBuildDataSource)
                    {
                        parentFieldNameAttribute = linkElement.Attribute(parentFieldNameXName);
                        parentFieldName = parentFieldNameAttribute.get_Value();
                        parentFieldId = fieldName2id(tableName2Id(parentName), parentFieldName);
                        queryBuildDataSource.addLink(parentFieldId, fieldId);
                    }
                    break;
                default:
                    error(strFmt('Link type %1 is unknown in data distribution.', type));
                    break;
            }
        }

        childTableElements = _tableElement.Elements(tableXName);
        childTableElementEnumerator = childTableElements.GetEnumerator();

        while (childTableElementEnumerator.MoveNext())
        {
            childTableElement = childTableElementEnumerator.get_Current();
            tableCount = this.buildQuerySubtree(_query, childTableElement, queryBuildDataSource, tableCount);
        }

        return tableCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstTableElement</Name>
				<Source><![CDATA[
    private System.Xml.Linq.XElement getFirstTableElement(str _tableName, System.Collections.IEnumerable _tableElements = dataDistributionDocument.Descendants(tableXName))
    {
        System.Xml.Linq.XElement tableElement;
        System.Xml.Linq.XAttribute nameAttribute;
        System.Collections.IEnumerator tableElementEnumerator;
        str name;

        tableElementEnumerator = _tableElements.GetEnumerator();

        while (tableElementEnumerator.MoveNext())
        {
            tableElement = tableElementEnumerator.get_Current();
            nameAttribute = tableElement.Attribute(nameXName);
            name = nameAttribute.get_Value();
            if (name == _tableName)
            {
                break;
            }
        }

        return tableElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        linkGroupXName = System.Xml.Linq.XName::Get('LinkGroup');
        typeXName = System.Xml.Linq.XName::Get('type');
        linkXName = System.Xml.Linq.XName::Get('Link');
        nameXName = System.Xml.Linq.XName::Get('name');
        fieldNameXName = System.Xml.Linq.XName::Get('fieldName');
        fieldValueXName = System.Xml.Linq.XName::Get('fieldValue');
        parentFieldNameXName = System.Xml.Linq.XName::Get('parentFieldName');
        tableXName = System.Xml.Linq.XName::Get('Table');
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramChannelSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor for CDX channel schema.
    /// </summary>
    /// <param name="_channelSchema">
    /// The CDX channel schema.
    /// </param>
    /// <returns>
    /// The CDX channel schema.
    /// </returns>
    public RetailConnChannelSchema paramChannelSchema(RetailConnChannelSchema _channelSchema = channelSchema)
    {
        if (dataDistributionXml != _channelSchema.TableDistributionXML)
        {
            dataDistributionDocument = System.Xml.Linq.XDocument::Parse(_channelSchema.TableDistributionXML);
        }
        channelSchema = _channelSchema;
        return channelSchema;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSource</Name>
				<Source><![CDATA[
    private static void addDataSource(QueryBuildDataSource _parentQueryBuildDataSource, FieldId _parentFieldId, TableId _tableId, FieldId _fieldId)
    {
        QueryBuildDataSource queryBuildDataSource;

        if (_parentQueryBuildDataSource)
        {
            queryBuildDataSource = _parentQueryBuildDataSource.addDataSource(_tableId);
            queryBuildDataSource.joinMode(JoinMode::OuterJoin);
            queryBuildDataSource.fetchMode(QueryFetchMode::One2Many);
            queryBuildDataSource.relations(false);
            queryBuildDataSource.addLink(_parentFieldId, _fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailCDXOnDemandQueryBuilder construct()
    {
        return new RetailCDXOnDemandQueryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChannelSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor.
    /// </summary>
    /// <param name="_channelSchema">
    /// The CDX channel schema.
    /// </param>
    /// <returns>
    /// A new instance of <c>RetailCDXOnDemandQueryBuilder</c>.
    /// </returns>
    public static RetailCDXOnDemandQueryBuilder newChannelSchema(RetailConnChannelSchema _channelSchema)
    {
        RetailCDXOnDemandQueryBuilder cdxOnDemandQueryBuilder = RetailCDXOnDemandQueryBuilder::construct();
        cdxOnDemandQueryBuilder.paramChannelSchema(_channelSchema);
        return cdxOnDemandQueryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addField</Name>
				<Source><![CDATA[
    private void addField(QueryBuildFieldList _queryBuildFieldList, str _tableName, str _fieldName)
    {
        int i;
        int fieldCount = _queryBuildFieldList.FieldCount();
        int fieldId = fieldName2id(tableName2Id(_tableName), _fieldName);

        for (i = 1; i <= fieldCount; i++)
        {
            if (fieldId == _queryBuildFieldList.Field(i))
            {
                return;
            }
        }

        _queryBuildFieldList.addField(fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOneToManyFieldsMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method generates the mapping information of single FROM field to multiple TO fields.
    /// Ex:
    ///    (FROM field)------> (TO field)    of INVENTTABLE subjob
    ///       PRODUCT  ------>  PRODUCT
    ///       PRODUCT  ------>  ABCPRODUCT
    /// For the above setup, the information is stored in a map, the map contains 'INVENTTABLE.PRODUCT' as key
    /// and a container [PRODUCT, ABCPRODUCT] as value.
    /// NOTE: Call to this method be triggered only in the case of multiple mappings are present.
    /// </summary>
    /// <param name = "_fromTableFieldName">The from table and field name.</param>
    /// <param name = "_toFieldName">To field name</param>
    /// <param name = "_firstOccurenceFromFieldMapping"> A map , which has the first occurance of mapping info
    ///  and it tells that multiple mappings are present for a given FROM field</param>
    internal void addOneToManyFieldsMapping(str _fromTableFieldName, str _toFieldName, Map _firstOccurenceFromFieldMapping)
    {
        container toFieldsMappedToSingleFromField;

        // Get the container if KEY already exists
        if (oneToManyFieldsMapping.exists(_fromTableFieldName))
        {
            toFieldsMappedToSingleFromField = oneToManyFieldsMapping.lookup(_fromTableFieldName);
        }
        else if (_firstOccurenceFromFieldMapping.exists(_fromTableFieldName))
        {
            // Add the TO field name from the first mapping.
            toFieldsMappedToSingleFromField = _firstOccurenceFromFieldMapping.lookup(_fromTableFieldName);
        }

        if (!conFind(toFieldsMappedToSingleFromField, _toFieldName))
        {
            // Add TO field name to the container.
            toFieldsMappedToSingleFromField += _toFieldName;
        }

        // This will insert the KEY, VALUE into map if the KEY is not present otherwise updates the VALUE.
        oneToManyFieldsMapping.insert(_fromTableFieldName, toFieldsMappedToSingleFromField);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>