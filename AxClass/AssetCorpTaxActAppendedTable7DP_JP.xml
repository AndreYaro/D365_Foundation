<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCorpTaxActAppendedTable7DP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetCorpTaxActAppendedTable7DP_JP</c> class is the data provider class for the <c>AssetCorpTaxActAppendedTable7_JP</c> SSRS report.
/// The report is about Low Value assets.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetCorpTaxActAppendedTablesContract_JP)),
    SRSReportQueryAttribute(queryStr(AssetCorpTaxActAppendTables_JP))
]
class AssetCorpTaxActAppendedTable7DP_JP extends SrsReportDataProviderPreProcessTempDB
{
    AssetCorpTaxActAppendedTable7Tmp_JP assetCorpTaxActAppendedTable7Tmp;
    AssetCorpTaxActAppendedHeaderTmp_JP assetCorpTaxActAppendedHeaderTmp;

    TransDate startDate;
    TransDate endDate;
    FiscalYearName fiscalYearName;

    AssetSumCalc_Trans assetSumCalc;
    AssetTable assetTable;
    AssetBook assetBook;
    AssetBook refAssetBook;
    AssetMajorType assetMajorType;
    AssetBookTable assetBookTable;
    AssetPropertyGroup assetPropertyGroup;
    AssetDepreciationProfile assetDepreciationProfile;
    PrintDate printDate;
    int rowCount;
    CurrencyCode accountingCurrency;
    LanguageId currentUserLanguage;
    CurrencyExchangeHelper currencyExchangeHelper;

    #define.GroupNum(5)
    #define.RecordPerPage(15)

    #AssetDepCalculation_JP
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountFromAccounttingToJPY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all transaction currency amounts from the specified accounting currency amounts.
    /// </summary>
    public void amountFromAccounttingToJPY()
    {
        // 16(7)-5
        assetCorpTaxActAppendedTable7Tmp.AcquisitionCost = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable7Tmp.AcquisitionCost);
        // 16(7)-6
        assetCorpTaxActAppendedTable7Tmp.ReserveAmountForReductionEntry = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable7Tmp.ReserveAmountForReductionEntry);
        // 16(7)-7
        assetCorpTaxActAppendedTable7Tmp.NetAcquisitionCost = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable7Tmp.NetAcquisitionCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST2LocalCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the local currency amount from the specified accounting currency amount.
    /// </summary>
    /// <param name="_amountMST">
    /// The accounting currency amount used to calculate.
    /// </param>
    /// <returns>
    /// A Local currency amount that has been calculated from the accounting currency amount.
    /// </returns>
    public AmountCur amountMST2LocalCurrencyAmount(AmountMST _amountMST)
    {
        AmountCur amount;

        if (_amountMST != 0)
        {
            currencyExchangeHelper.parmRoundingRuleType(CurrencyRoundingRuleType::AssetDep_JP);

            amount = currencyExchangeHelper.calculateAccountingToTransaction(#CurrencyJPY, _amountMST, true);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetCorpTaxActAppendedHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetCorpTaxActAppendedHeaderTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetCorpTaxActAppendedHeaderTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetCorpTaxActAppendedHeaderTmp_JP))
    ]
    public AssetCorpTaxActAppendedHeaderTmp_JP getAssetCorpTaxActAppendedHeaderTmp()
    {
        select assetCorpTaxActAppendedHeaderTmp;
        return assetCorpTaxActAppendedHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetCorpTaxActAppendedTable7Tmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetCorpTaxActAppendedTable7Tmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetCorpTaxActAppendedTable7Tmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetCorpTaxActAppendedTable7Tmp_JP))
    ]
    public AssetCorpTaxActAppendedTable7Tmp_JP getAssetCorpTaxActAppendedTable7Tmp()
    {
        select assetCorpTaxActAppendedTable7Tmp;
        return assetCorpTaxActAppendedTable7Tmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report parameters from a data contract to the member variables.
    /// </summary>
    public void getReportParameters()
    {
        FiscalCalendarYear fiscalCalendarYear;
        AssetCorpTaxActAppendedTablesContract_JP contract = this.parmDataContract();

        if (contract)
        {
            fiscalYearName = contract.parmFiscalYearName();
            fiscalCalendarYear  = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), fiscalYearName);
            startDate = fiscalCalendarYear.StartDate;
            endDate = fiscalCalendarYear.EndDate;
            printDate = contract.parmPrintDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBlankData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the blank data.
    /// </summary>
    /// <param name="_blankColumnCount">
    /// Inserts the number of blank columns.
    /// </param>
    public void insertBlankData(int _blankColumnCount)
    {
        int blankColumn = 0;

        while (blankColumn < _blankColumnCount)
        {
            assetCorpTaxActAppendedTable7Tmp.clear();

            assetCorpTaxActAppendedTable7Tmp.RowGroupNum    = rowCount div #GroupNum;
            assetCorpTaxActAppendedTable7Tmp.ColunmGroupNum = rowCount mod #GroupNum;
            assetCorpTaxActAppendedTable7Tmp.Insert();

            rowCount++;
            blankColumn++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDetailDataToTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AssetCorpTaxActAppendedTable7Tmp_JP</c> table.
    /// </summary>
    public void insertDetailDataToTmp()
    {
        AssetSumCalc_Trans          assetSumCalcAcq;
        Set                         docTypes;
        AssetDocumentSumCalcUtil_JP docSumCalcUtil;

        assetSumCalcAcq = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, assetBook.BookId, dateNull(), endDate);
        docTypes = new Set(Types::Container);
        docTypes.add([AssetTransType::Acquisition, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::AcquisitionAdj, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::Depreciation, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::DepreciationAdj, AssetDocumentType_JP::AssetRetirementObligation]);
        docSumCalcUtil = AssetDocumentSumCalcUtil_JP::construct(docTypes);
        assetSumCalcAcq.parmDocSumCalcUtil_JP(docSumCalcUtil);

        // Inserts field 16(7)-1
        assetCorpTaxActAppendedTable7Tmp.MajorType = assetMajorType.Description;

        // Inserts field 16(7)-2
        assetCorpTaxActAppendedTable7Tmp.PropertyGroup = assetPropertyGroup.Description;

        // Inserts field 16(7)-3
        assetCorpTaxActAppendedTable7Tmp.AssetName = assetTable.Name ? assetTable.Name : assetTable.AssetId;

        // Inserts field 16(7)-4
        if (currentUserLanguage == #LanguageJA)
        {
            assetCorpTaxActAppendedTable7Tmp.AcquisitionDate = JapaneseDateTimeHelper::date2str(assetBook.AcquisitionDate, #ParameterYearName);
            assetCorpTaxActAppendedTable7Tmp.PutInServiceDate = JapaneseDateTimeHelper::date2str(assetBook.UsedFromDate, #ParameterYearName);
        }
        else
        {
            assetCorpTaxActAppendedTable7Tmp.AcquisitionDate = date2StrUsr(assetBook.AcquisitionDate, DateFlags::FormatAll);
            assetCorpTaxActAppendedTable7Tmp.PutInServiceDate = int2str(mthOfYr(assetBook.UsedFromDate)) + enum2str(DateSeparator::Slash) + int2str(year(assetBook.UsedFromDate));
        }

        // Inserts field 16(7)-5

        assetCorpTaxActAppendedTable7Tmp.AcquisitionCost = assetSumCalcAcq.acquisitionValue() + assetSumCalcAcq.acquisitionAdjValue() - assetSumCalcAcq.getRetirementObligationAcquisitionValue_JP();

        // Inserts field 16(7)-6
        assetCorpTaxActAppendedTable7Tmp.ReserveAmountForReductionEntry = assetSumCalc.reductionEntryReserveAmount_JP();

        // Inserts field 16(7)-7
        assetCorpTaxActAppendedTable7Tmp.NetAcquisitionCost = assetCorpTaxActAppendedTable7Tmp.AcquisitionCost - assetCorpTaxActAppendedTable7Tmp.ReserveAmountForReductionEntry;

        assetCorpTaxActAppendedTable7Tmp.RowGroupNum = rowCount div #GroupNum;
        assetCorpTaxActAppendedTable7Tmp.ColunmGroupNum = rowCount mod #GroupNum;

        if (assetCorpTaxActAppendedTable7Tmp.AcquisitionCost > 0)
        {
            if (accountingCurrency != #CurrencyJPY)
            {
                this.amountFromAccounttingToJPY();
            }
            assetCorpTaxActAppendedTable7Tmp.insert();
            rowCount ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeaderDataToTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AssetCorpTaxActAppendedHeaderTmp_JP</c> table.
    /// </summary>
    public void insertHeaderDataToTmp()
    {
        CompanyInfo  companyInfo = CompanyInfo::find();
        str dateStr;

        if (currentUserLanguage == #LanguageJA)
        {
            //insert the value for the fiscal year start date
            if (str2Int(JapaneseDateTimeHelper::date2str(startDate, 'yy')) == 1)
            {
                dateStr = strFmt("%1%2·%3·%4", JapaneseDateTimeHelper::getEraName(startDate), JapaneseDateTimeHelper::getYearStr(startDate), JapaneseDateTimeHelper::getMonthStr(startDate), JapaneseDateTimeHelper::getDayStr(startDate));
            }
            else
            {
                dateStr = JapaneseDateTimeHelper::date2str(startDate, #JapanDateFormat);
            }
            assetCorpTaxActAppendedHeaderTmp.FiscalYearStartDate = strDel(dateStr, 2, 1); 
            
            //insert the value for the fiscal year end date
            if (str2Int(JapaneseDateTimeHelper::date2str(endDate, 'yy')) == 1)
            {
                dateStr = strFmt("%1%2·%3·%4", JapaneseDateTimeHelper::getEraName(endDate), JapaneseDateTimeHelper::getYearStr(endDate), JapaneseDateTimeHelper::getMonthStr(endDate),JapaneseDateTimeHelper::getDayStr(endDate));
            }
            else
            {
                dateStr = JapaneseDateTimeHelper::date2str(endDate, #JapanDateFormat);
            }
            assetCorpTaxActAppendedHeaderTmp.FiscalYearEndDate = strDel(dateStr, 2, 1);

            //insert the value for the fiscal year start date by the capital date
            assetCorpTaxActAppendedHeaderTmp.YearOfStartDateAppended = JapaneseDateTimeHelper::getEraName(startDate)
                + (str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterYear)) == 1 ? JapaneseDateTimeHelper::getYearStr(startDate) : Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterYear)), true, false, #GroupNum))
                + enum2str(DateSeparator::Dot) + Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterMonth)), true, false, #GroupNum)
                + enum2str(DateSeparator::Dot) + Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterDay)), true, false, #GroupNum);
        }
        else
        {
            //insert the value for the fiscal year start date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearStartDate     = date2StrUsr(startDate, DateFlags::FormatAll);

            //insert the value for the fiscal year end date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearEndDate       = date2StrUsr(endDate, DateFlags::FormatAll);

            //insert the value for the fiscal year start date by the capital date
            assetCorpTaxActAppendedHeaderTmp.YearOfStartDateAppended = date2StrUsr(StartDate, DateFlags::FormatAll);
        }

        //insert the value of company's name
        assetCorpTaxActAppendedHeaderTmp.Name         = companyInfo.Name;

        //insert the value of company's Kana name
        assetCorpTaxActAppendedHeaderTmp.PhoneticName = companyInfo.PhoneticName;

        assetCorpTaxActAppendedHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the specified values.
    /// </summary>
    public void processReport()
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource assetTable_ds;
        QueryBuildDataSource assetBook_ds;
        QueryBuildDataSource assetDepreciationProfile_ds;

        this.getReportParameters();

        // Initialize global variables, those variables are added in order to improve the performance.
        accountingCurrency  = Ledger::accountingCurrency();
        currentUserLanguage = currentUserLanguage();
        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::current(),
            printDate);

        rowCount = 0;
        query = this.parmQuery();

        AssetCorpTaxActAppendTablesHelper_JP::useAssetBookForAssetDepreciationProfileJoin(query);

        assetTable_ds = query.dataSourceTable(tableNum(AssetTable));
        SysQuery::findOrCreateRange(assetTable_ds, fieldNum(AssetTable, AssetType)).value(SysQuery::valueNot(enum2str(AssetType::Deferred_JP)));
        SysQuery::findOrCreateRange(assetTable_ds, fieldNum(AssetTable, AssetClassification_JP)).value(queryValue(enum2str(AssetClassification_JP::LowValue)));

        assetBook_ds = query.dataSourceTable(tableNum(AssetBook));
        SysQuery::findOrCreateRange(assetBook_ds, fieldNum(AssetBook, UsedFromDate)).value(queryRange(startDate, endDate));
        SysQuery::findOrCreateRange(assetBook_ds, fieldNum(AssetBook, Status)).value(SysQuery::valueNot(enum2str(AssetStatus::NoAcquisition)));

        assetDepreciationProfile_ds = query.dataSourceTable(tableNum(AssetDepreciationProfile));
        SysQuery::findOrCreateRange(assetDepreciationProfile_ds, fieldNum(AssetDepreciationProfile, Method)).value(enum2str(AssetDepreciationMethod::EquallyDivided_JP));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(AssetTable)))
            {
                assetTable = queryRun.get(tableNum(AssetTable));
                assetBook = queryRun.get(tableNum(AssetBook));
                assetBookTable = queryRun.get(tableNum(AssetBookTable));
                assetMajorType = queryRun.get(tableNum(assetMajorType));
                assetPropertyGroup = queryRun.get(tableNum(AssetPropertyGroup));
                assetDepreciationProfile = queryRun.get(tableNum(AssetDepreciationProfile));
                refAssetBook = null;

                if (assetBookTable.LinkedCurrentLayerAssetBookTable_JP)
                {
                    refAssetBook = AssetBook::find(assetTable.AssetId, assetBookTable.LinkedCurrentLayerAssetBookTable_JP);
                }

                if (!refAssetBook)
                {
                    // If the referenced value model isn't setup, take the related value from current value model,
                    // So assign current value model to refAssetBook variable.
                    refAssetBook = assetBook;
                }

                if (refAssetBook)
                {
                    // Gets the depreciaton method for this value model as the current depreciaton method.
                    assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, refAssetBook.BookId, dateNull(), endDate);

                    assetCorpTaxActAppendedTable7Tmp.clear();
                    this.insertDetailDataToTmp();
                }
            }
        }

        this.insertGrandTotal();
        this.insertHeaderDataToTmp();

        if (rowCount == 0
            || rowCount mod #RecordPerPage)
        {
            this.insertBlankData(#RecordPerPage - (rowCount mod #RecordPerPage));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGrandTotal</Name>
				<Source><![CDATA[
    private void insertGrandTotal()
    {
        assetCorpTaxActAppendedTable7Tmp.clear();

        select sum(AcquisitionCost), sum(NetAcquisitionCost), sum(ReserveAmountForReductionEntry) from assetCorpTaxActAppendedTable7Tmp;

        assetCorpTaxActAppendedTable7Tmp.MajorType              = SysLabel::labelId2String(literalstr("@FixedAssetsIncentiveDepreciation:Report16GrandTotal"));
        assetCorpTaxActAppendedTable7Tmp.RowGroupNum            = rowCount div #GroupNum;
        assetCorpTaxActAppendedTable7Tmp.ColunmGroupNum         = rowCount mod #GroupNum;

        assetCorpTaxActAppendedTable7Tmp.insert();

        rowCount ++;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>