<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportGenerate347</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReportGenerate347 extends TaxReportGenerate implements BatchRetryable
{
    TaxRep347PositiveAmountMST          minimumAmount;
    ContactPersonName                   contactPersonName;

    TaxRep347PositiveAmountMST          minimumAmountInCash;
    TaxRep347DocumentNum                documentNum;
    TaxRep347Replacement                replacement;
    TaxRep347DocumentNum                origDocumentNum;
    NoYes                               groupByOldVATNumber;
    TaxRep347CashDateSelectionRule      paymentsInCashSelectionRule;

    DialogField                         dialogReportYear;
    DialogField                         dialogContactPersonName;
    DialogField                         dialogMinimumAmount;

    DialogField                         dialogMininumAmountInCash;

    DialogField                         dialogDocumentNum;
    DialogField                         dialogReplacement;
    DialogField                         dialogOrigDocumentNum;

    DialogField                         dialogGroupByOldVATNumber;
    DialogField                         dialogPaymCashSelectionRule;

    TaxRep347Year                       reportYear;

    DialogRunbase                       dialog;

    QueryRun                            transactionQueryRun;

    TaxReport347Table                   generatedTaxReport347Table;

    #define.CurrentVersion(10)
    #localmacro.CurrentList
        reportYear,
        contactPersonName,
        minimumAmount,
        minimumAmountInCash,
        groupByOldVATNumber,
        documentNum,
        replacement,
        origDocumentNum
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>countryRegionQueryRange</Name>
				<Source><![CDATA[
    protected str countryRegionQueryRange()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionTypeQueryRange</Name>
				<Source><![CDATA[
    protected str countryRegionTypeQueryRange()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceQuery</Name>
				<Source><![CDATA[
    public void createInvoiceQuery()
    {
        CustVendCalcVolumeVATCAC_ES custVendCalcVolumeVAT = custVendCalcVolume;
        Range   dateCustRange,
                dateCurrentYearRange = queryRange(mkDate(1, 1, reportYear), mkDate(31, 12, reportYear)),
                datePrevYearRange = queryRange(mkDate(1, 1, reportYear - 1), mkDate(31, 12, reportYear - 1));;

        this.initQueryValues();

        //no need to fetch all customer invoices for previous year in case when cash accounting is disabled in previous year
        if (CashAccountingRegime_ES::isEnabled(mkDate(1, 1, reportYear - 1)))
        {
            dateCustRange = dateStr;
        }
        else
        {
            dateCustRange = dateCurrentYearRange;
        }

        custVendCalcVolumeVAT.custInvoiceQuery(
            dateCustRange,
            countryRegionTypeStr,
            countryRegionStr,
            '',
            '');

        custVendCalcVolumeVAT.vendInvoiceQuery(
            dateCurrentYearRange,
            countryRegionTypeStr,
            countryRegionStr,
            '',
            '');

        custVendCalcVolumeVAT.projInvoiceQuery(
            dateCustRange,
            countryRegionTypeStr,
            countryRegionStr,
            '',
            '');

        custVendCalcVolumeVAT.custPrepaymentsQuery(
            dateCurrentYearRange,
            countryRegionTypeStr,
            countryRegionStr,
            '',
            '');

        custVendCalcVolumeVAT.vendPrepaymentsQuery(
            dateCurrentYearRange,
            countryRegionTypeStr,
            countryRegionStr,
            '',
            '');

        custVendCalcVolumeVAT.vendInvoicePrevQuery(
            datePrevYearRange,
            countryRegionTypeStr,
            countryRegionStr,
            '',
            '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query date range covering the selected fiscal year.
    /// </summary>
    /// <returns>
    /// A query date range covering the selected fiscal year.
    /// </returns>
    public str dateQueryRange()
    {
        return  Global::queryRange(mkDate(1, 1, reportYear -1),
                                   mkDate(31, 12, reportYear));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialogReportYear            = dialog.addFieldValue(extendedTypeStr(TaxRep347Year), reportYear, "@SYS54380", "@SYS330268");
        dialogContactPersonName     = dialog.addField(extendedTypeStr(ContactPersonName), "@SYS92136");
        dialogMinimumAmount         = dialog.addFieldValue(extendedTypeStr(TaxRep347PositiveAmountMST), minimumAmount, "@SYS23897");

        dialogMininumAmountInCash   = dialog.addFieldValue(extendedTypeStr(TaxRep347PositiveAmountMST), minimumAmountInCash, "@SYS319347", "@SYS319348");

        dialogDocumentNum           = dialog.addField(extendedTypeStr(TaxRep347DocumentNum));
        dialogReplacement           = dialog.addField(extendedTypeStr(NoYesId), "@SYS319349", "@SYS319362");
        dialogOrigDocumentNum       = dialog.addField(extendedTypeStr(TaxRep347DocumentNum), "@SYS319346");

        dialogGroupByOldVATNumber   = dialog.addFieldValue(enumStr(NoYes), groupByOldVATNumber, "@SYS319344", "@SYS319345");

        this.registerEventHandlers();
        dialogOrigDocumentNum.allowEdit(false);

        dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(RunBaseQueryDialog), DialogMenuItemGroup::BottomGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentNum_validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the document number field.
    /// </summary>
    /// <param name="_documentNumControl">
    /// Document number form control.
    /// </param>
    /// <returns>
    /// True if the validation passed; otherwise, false.
    /// </returns>
    public boolean documentNum_validate(FormStringControl _documentNumControl)
    {
        return this.validateDocumentNumber(dialogDocumentNum.value(), "@SYS92813");
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeLessThanMinimumAmounts</Name>
				<Source><![CDATA[
    private void excludeLessThanMinimumAmounts()
    {
        AccountNum  accountNum;
        AmountMST   sumAmountMST;
        AmountMST   sumCashAccountingAmount;

        Map mapAccountNum;
        MapEnumerator   accountNumEnumerator;

        mapAccountNum   =   new Map(Types::String, Types::Container);
        update_recordset tmpVolumeTable
            setting
                AmountMST = 0
            where tmpVolumeTable.SalesPurch == SalesPurch::Sales
				&& ((tmpVolumeTable.AmountMST >= 0 && tmpVolumeTable.AmountMST <= minimumAmount)
                || (tmpVolumeTable.AmountMST <= 0 && tmpVolumeTable.AmountMST >= -minimumAmount));

        update_recordset tmpVolumeTable
            setting
                CashAccountingAmount_ES = 0
            where tmpVolumeTable.SalesPurch == SalesPurch::Sales
                && ((tmpVolumeTable.CashAccountingAmount_ES >= 0 && tmpVolumeTable.CashAccountingAmount_ES <= minimumAmount)
                || (tmpVolumeTable.CashAccountingAmount_ES <= 0 && tmpVolumeTable.CashAccountingAmount_ES >= -minimumAmount));

        update_recordset tmpVolumeTable
            setting
                AmountInCash = 0
            where tmpVolumeTable.AmountInCash <= minimumAmountInCash
                && tmpVolumeTable.SalesPurch == SalesPurch::Sales;

        while select AccountNum, sum(AmountMST), sum(CashAccountingAmount_ES)  from tmpVolumeTable
            group by AccountNum
                where tmpVolumeTable.SalesPurch ==  SalesPurch::Purch
        {
            mapAccountNum.insert(tmpVolumeTable.AccountNum, [tmpVolumeTable.AmountMST, tmpVolumeTable.CashAccountingAmount_ES]);
        }

        accountNumEnumerator    =   new MapEnumerator(mapAccountNum);
        while (accountNumEnumerator.moveNext())
        {
            accountNum                               = accountNumEnumerator.currentKey();
            [sumAmountMST, sumCashAccountingAmount]  = accountNumEnumerator.currentValue();

            if (abs(sumAmountMST) <= minimumAmount)
            {
                update_recordset tmpVolumeTable
                    setting
                        AmountMST = 0
                    where tmpVolumeTable.AccountNum ==  accountNum
                        && tmpVolumeTable.SalesPurch    ==  SalesPurch::Purch;
            }
            if (sumCashAccountingAmount <= minimumAmount)
            {
                update_recordset tmpVolumeTable
                    setting
                        CashAccountingAmount_ES = 0
                    where tmpVolumeTable.AccountNum ==  accountNum
                        && tmpVolumeTable.SalesPurch    ==  SalesPurch::Purch;
            }
        }

        delete_from tmpVolumeTable
            where  tmpVolumeTable.AmountMST == 0
                && tmpVolumeTable.AmountInCash == 0
                && tmpVolumeTable.CashAccountingAmount_ES == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the report data to the <c>TmpCustVendVolumeTable</c> temporary table.
    /// </summary>
    public void generateData()
    {
        CustVendCalcVolumeVATCAC_ES custVendCalcVolumeVATCAC_ES = CustVendCalcVolumeVATCAC_ES::newGroupRelatedVATNums(!groupByOldVATNumber);

        custVendCalcVolumeVATCAC_ES.parmReportYear(reportYear);
        custVendCalcVolume = custVendCalcVolumeVATCAC_ES;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reportYear          = dialogReportYear.value();
        contactPersonName   = dialogContactPersonName.value();
        minimumAmount       = dialogMinimumAmount.value();

        minimumAmountInCash             = dialogMininumAmountInCash.value();
        documentNum                     = dialogDocumentNum.value();
        replacement                     = dialogReplacement.value();
        origDocumentNum                 = dialogOrigDocumentNum.value();
        groupByOldVATNumber             = dialogGroupByOldVATNumber.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneratedTaxReport347Table</Name>
				<Source><![CDATA[
    private TaxReport347Table getGeneratedTaxReport347Table()
    {
        return generatedTaxReport347Table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        Query                   transactionQuery;
        QueryBuildDataSource    dsTmpCustVendVolume;
        QueryBuildRange         qrCountryRegionType;

        super();

        transactionQuery    = new Query();
        dsTmpCustVendVolume = transactionQuery.addDataSource(tableNum(TmpCustVendVolume));

        qrCountryRegionType = dsTmpCustVendVolume.addRange(fieldNum(TmpCustVendVolume, CountryRegionType));
        qrCountryRegionType.value(queryValue(CountryRegionType::Domestic));

        dsTmpCustVendVolume.addSortField(fieldNum(TmpCustVendVolume, VATNum), SortOrder::Descending);
        dsTmpCustVendVolume.addSortField(fieldNum(TmpCustVendVolume, SalesPurch), SortOrder::Descending);
        dsTmpCustVendVolume.addSortField(fieldNum(TmpCustVendVolume, CashInvoiceYear), SortOrder::Descending);
        dsTmpCustVendVolume.addSortField(fieldNum(TmpCustVendVolume, CashAccountingRegime_ES), SortOrder::Descending);
        dsTmpCustVendVolume.addSortField(fieldNum(TmpCustVendVolume, GoodsInDeposit_ES), SortOrder::Descending);
        dsTmpCustVendVolume.addSortField(fieldNum(TmpCustVendVolume, ReverseCharge_ES), SortOrder::Descending);

        transactionQueryRun = new QueryRun(transactionQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in the <c>TaxReport347Table</c> and <c>TaxReport347Trans</c> tables
    /// based on the contents of the <c>TmpCustVendCalcVolume</c> temporary table.
    /// </summary>
    public void insertRecords()
    {
        TaxReport347Table           report347Table;
        TaxReport347Trans           report347Trans;
        CustVendCalcVolumeVATCAC_ES    custVendCalcVolumeVATCAC_ES = custVendCalcVolume;

        // Process of generating 347 declaration should be canceled in case any errors were found
        // during custVendCalcVolume.accumVolume() phase
        if (custVendCalcVolumeVATCAC_ES.hasErrors())
        {
            return;
        }

        ttsbegin;

        report347Table.Year                 = reportYear;
        report347Table.ContactPersonName    = contactPersonName;
        report347Table.MinimumAmount        = minimumAmount;
        report347Table.vatNum               = CompanyInfo::find().CoRegNum;
        report347Table.Phone                = CompanyInfo::find().phone();
        report347Table.Name                 = this.name();

        report347Table.MinimumAmountInCash  = minimumAmountInCash;
        report347Table.DocumentNum          = documentNum;
        report347Table.Replacement          = replacement;
        report347Table.OrigDocumentNum      = origDocumentNum;

        report347Table.insert();

        custVendCalcVolumeVATCAC_ES.accumPaymentsInCash(report347Table, reportYear);

        this.excludeLessThanMinimumAmounts();

        transactionQueryRun.setRecord(tmpVolumeTable);

        while (transactionQueryRun.next())
        {
            report347Trans.TaxReport347Table    = report347Table.RecId;
            report347Trans.OperationKey         = this.salesPurchToOperationKey(tmpVolumeTable.SalesPurch);
            report347Trans.vatNum               = tmpVolumeTable.vatNum;
            report347Trans.Name                 = tmpVolumeTable.Name;
            report347Trans.Amount               = tmpVolumeTable.AmountMST;
            report347Trans.AmountQuarter1       = tmpVolumeTable.AmountQuarter1;
            report347Trans.AmountQuarter2       = tmpVolumeTable.AmountQuarter2;
            report347Trans.AmountQuarter3       = tmpVolumeTable.AmountQuarter3;
            report347Trans.AmountQuarter4       = tmpVolumeTable.AmountQuarter4;
            report347Trans.AmountInCash         = tmpVolumeTable.AmountInCash;
            report347Trans.CountryRegionId      = tmpVolumeTable.CountryRegionId;
            report347Trans.CountyId             = tmpVolumeTable.CountyId;
            report347Trans.CashAccountingRegime = tmpVolumeTable.CashAccountingRegime_ES;
            report347Trans.CashAccountingAmount = tmpVolumeTable.CashAccountingAmount_ES;
            report347Trans.GoodsInDeposit       = tmpVolumeTable.GoodsInDeposit_ES;
            report347Trans.ReverseCharge        = tmpVolumeTable.ReverseCharge_ES;

            if (report347Trans.AmountInCash == 0)
            {
                report347Trans.CashInvoiceYear = 0;
            }
            else if (tmpVolumeTable.CashInvoiceDate != dateNull())
            {
               report347Trans.CashInvoiceYear = year(tmpVolumeTable.CashInvoiceDate);
            }

            report347Trans.insert();
        }

        ttscommit;

        generatedTaxReport347Table = report347Table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        qCountryRegion = new QueryRun(queryStr(TaxReport34XCountryRegion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>origDocumentNum_validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the original document number field.
    /// </summary>
    /// <param name="_origDocumentNumControl">
    /// Original document number form control.
    /// </param>
    /// <returns>
    /// True if the validation passed; otherwise, false.
    /// </returns>
    public boolean origDocumentNum_validate(FormStringControl _origDocumentNumControl)
    {
        return this.validateDocumentNumber(dialogOrigDocumentNum.value(), "@SYS319346");
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, transactionQueryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactPersonName</Name>
				<Source><![CDATA[
    public ContactPersonName parmContactPersonName(ContactPersonName _contactPersonName = contactPersonName)
    {
        contactPersonName = _contactPersonName;
        return contactPersonName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNum</Name>
				<Source><![CDATA[
    public TaxRep347DocumentNum parmDocumentNum(TaxRep347DocumentNum _documentNum = documentNum)
    {
        documentNum = _documentNum;
        return documentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupByOldVATNumber</Name>
				<Source><![CDATA[
    public NoYes parmGroupByOldVATNumber(NoYes _groupByOldVATNumber = groupByOldVATNumber)
    {
        groupByOldVATNumber = _groupByOldVATNumber;
        return groupByOldVATNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinimumAmount</Name>
				<Source><![CDATA[
    public TaxRep347AmountMST parmMinimumAmount(TaxRep347AmountMST _minimumAmount = minimumAmount)
    {
        minimumAmount = _minimumAmount;
        return minimumAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinimumAmountInCash</Name>
				<Source><![CDATA[
    public TaxRep347AmountMST parmMinimumAmountInCash(TaxRep347AmountMST _minimumAmountInCash = minimumAmountInCash)
    {
        minimumAmountInCash = _minimumAmountInCash;
        return minimumAmountInCash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplacement</Name>
				<Source><![CDATA[
    public TaxRep347Replacement parmReplacement(TaxRep347Replacement _replacement = replacement)
    {
        replacement = _replacement;
        return replacement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportYear</Name>
				<Source><![CDATA[
    public TaxRep347Year parmReportYear(TaxRep347Year _reportYear = reportYear)
    {
        reportYear = _reportYear;
        return reportYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun(QueryRun _transactionQueryRun = transactionQueryRun)
    {
        return transactionQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    private void registerEventHandlers()
    {
        dialogDocumentNum.control().registerOverrideMethod(
            methodStr(FormStringControl, validate),
            methodStr(TaxReportGenerate347, documentNum_validate),
            this);

        dialogOrigDocumentNum.control().registerOverrideMethod(
            methodStr(FormStringControl, validate),
            methodStr(TaxReportGenerate347, origDocumentNum_validate),
            this);

        dialogReplacement.control().registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(TaxReportGenerate347, replacement_modified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacement_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>modified</c> event on the dialog field <c>Replacement</c>.
    /// </summary>
    /// <param name="_replacementControl">
    /// Dialog field <c>Replacement</c>.
    /// </param>
    /// <returns>
    /// True if the modification succeeded; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Enables the <c>Original document number</c> field if the <c>Replacement</c> field is checked.
    /// Clears and disables the <c>Original document number</c> field otherwise.
    /// </remarks>
    public boolean replacement_modified(FormCheckBoxControl _replacementControl)
    {
        boolean ret = _replacementControl.modified();

        if (ret && dialogReplacement.value() == NoYes::Yes)
        {
            dialogOrigDocumentNum.allowEdit(true);
        }

        if (ret && dialogReplacement.value() == NoYes::No)
        {
            dialogOrigDocumentNum.value('');
            dialogOrigDocumentNum.allowEdit(false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>result</Name>
				<Source><![CDATA[
    private container result()
    {
        return [generatedTaxReport347Table.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchToOperationKey</Name>
				<Source><![CDATA[
    private TaxRep347OperationKey salesPurchToOperationKey(SalesPurch _salesPurch)
    {
        return _salesPurch == SalesPurch::Purch ? TaxRep347OperationKey::Purchase : TaxRep347OperationKey::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Default button to the dialog. If you change the return value to true,
    ///    the button will be added.
    /// </summary>
    /// <returns>
    ///    false by default.
    /// </returns>
    /// <remarks>
    ///    If you click this button it will reset the parameters to the default that is specified in the
    ///    <c>initParmDefault</c> method.
    /// </remarks>
    public boolean showDefaultButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version         version = RunBase::getVersion(packedClass);
        PackedQueryRun  pQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, pQueryRun] = packedClass;

                if (SysQuery::isPackedOk(pQueryRun))
                {
                    transactionQueryRun = new QueryRun(pQueryRun);
                }
                else
                {
                    this.initParmDefault();
                }

                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        return TaxReportGenerate347::validateServer(reportYear, documentNum, replacement, origDocumentNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocumentNumber</Name>
				<Source><![CDATA[
    private boolean validateDocumentNumber(TaxRep347DocumentNum _documentNum, str _documentNumFieldLabel)
    {
        if (strLen(strKeep(_documentNum, '0123456789')) != strLen(_documentNum))
        {
            return checkFailed(strFmt("@SYS319364", _documentNumFieldLabel));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callIL</Name>
				<Source><![CDATA[
    private static container callIL(container _pack)
    {
        XppILExecutePermission xppILExecutePermission = new XppILExecutePermission();
        container result;

        xppILExecutePermission.assert();

        result = SysDictClass::invokeStaticMethodIL(
            classStr(TaxReportGenerate347),
            staticMethodStr(TaxReportGenerate347, runIL),
            _pack);

        CodeAccessPermission::revertAssert();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxReportGenerate347 construct()
    {
        return new TaxReportGenerate347();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS54366";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPDeprecatedDataSourceMethod', 'PostR1TODO')]
    static void main(Args args)
    {
        TaxReportGenerate347    reportGenerate347;
        FormDataSource          report347Table_ds;
        TaxReport347Table       generatedTable;
        RecId                   generatedTableRecId;

        reportGenerate347 = TaxReportGenerate347::construct();
        report347Table_ds = FormDataUtil::getFormDataSource(args.record());

        if (reportGenerate347.prompt())
        {
            [generatedTableRecId] = TaxReportGenerate347::callIL(reportGenerate347.pack());

            if (generatedTableRecId)
            {
                report347Table_ds.executeQuery();
                report347Table_ds.findRecord(generatedTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runIL</Name>
				<Source><![CDATA[
    private static container runIL(container _pack)
    {
        TaxReportGenerate347 taxReportGenerate347 = TaxReportGenerate347::construct();

        if (taxReportGenerate347.unpack(_pack))
        {
            taxReportGenerate347.runOperation();
        }

        return taxReportGenerate347.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates parameters of the report.
    /// </summary>
    /// <param name="_reportYear">
    /// Fiscal year of the report.
    /// </param>
    /// <param name="_documentNum">
    /// Document number of the report.
    /// </param>
    /// <param name="_replacement">
    /// Indicates whether the report is a replacement.
    /// </param>
    /// <param name="_origDocumentNum">
    /// Original document number of the replacement report.
    /// </param>
    /// <returns>
    /// True if the validation succeeded; otherwise, false
    /// </returns>
    public static boolean validateServer(
        TaxRep347Year        _reportYear,
        TaxRep347DocumentNum _documentNum,
        TaxRep347Replacement _replacement,
        TaxRep347DocumentNum _origDocumentNum)
    {
        boolean ret = true;

        if (!_reportYear)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS54380"));
        }

        if (!_documentNum)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS92813"));
        }

        if (_replacement && !_origDocumentNum)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS319346"));
        }

        if (!_replacement && TaxReport347Table::existForYear(_reportYear))
        {
            ret = checkFailed(strFmt("@SYS55097", _reportYear));
        }

        if (ret && _replacement && !TaxReport347Table::existForYear(_reportYear))
        {
            ret = Box::yesNo(strFmt("@SYS334843", _reportYear), DialogButton::Yes) == DialogButton::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>